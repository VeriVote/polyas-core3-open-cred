\profile "Java Profile";

\settings {
"#Proof-Settings-Config-File
#Mon Oct 14 17:34:58 CEST 2019
[Labels]UseOriginLabels=true
[StrategyProperty]QUERYAXIOM_OPTIONS_KEY=QUERYAXIOM_ON
[SMTSettings]invariantForall=false
[Strategy]ActiveStrategy=JavaCardDLStrategy
[StrategyProperty]USER_TACLETS_OPTIONS_KEY1=USER_TACLETS_OFF
[StrategyProperty]QUANTIFIERS_OPTIONS_KEY=QUANTIFIERS_NON_SPLITTING_WITH_PROGS
[StrategyProperty]USER_TACLETS_OPTIONS_KEY2=USER_TACLETS_OFF
[Choice]DefaultChoices=methodExpansion-methodExpansion\\:modularOnly , mergeGenerateIsWeakeningGoal-mergeGenerateIsWeakeningGoal\\:off , wdChecks-wdChecks\\:off , wdOperator-wdOperator\\:L , permissions-permissions\\:off , integerSimplificationRules-integerSimplificationRules\\:full , reach-reach\\:on , moreSeqRules-moreSeqRules\\:on , sequences-sequences\\:on , bigint-bigint\\:on , modelFields-modelFields\\:treatAsAxiom , Strings-Strings\\:on , JavaCard-JavaCard\\:off , runtimeExceptions-runtimeExceptions\\:allow , programRules-programRules\\:Java , intRules-intRules\\:javaSemantics , initialisation-initialisation\\:disableStaticInitialisation , assertions-assertions\\:on
[StrategyProperty]LOOP_OPTIONS_KEY=LOOP_INVARIANT
[StrategyProperty]INF_FLOW_CHECK_PROPERTY=INF_FLOW_CHECK_FALSE
[SMTSettings]UseBuiltUniqueness=false
[SMTSettings]explicitTypeHierarchy=false
[SMTSettings]instantiateHierarchyAssumptions=true
[StrategyProperty]NON_LIN_ARITH_OPTIONS_KEY=NON_LIN_ARITH_DEF_OPS
[SMTSettings]SelectedTaclets=
[StrategyProperty]DEP_OPTIONS_KEY=DEP_ON
[StrategyProperty]AUTO_INDUCTION_OPTIONS_KEY=AUTO_INDUCTION_OFF
[Strategy]MaximumNumberOfAutomaticApplications=10000
[StrategyProperty]STOPMODE_OPTIONS_KEY=STOPMODE_DEFAULT
[StrategyProperty]CLASS_AXIOM_OPTIONS_KEY=CLASS_AXIOM_FREE
[SMTSettings]useConstantsForBigOrSmallIntegers=true
[StrategyProperty]MPS_OPTIONS_KEY=MPS_MERGE
[StrategyProperty]SYMBOLIC_EXECUTION_NON_EXECUTION_BRANCH_HIDING_OPTIONS_KEY=SYMBOLIC_EXECUTION_NON_EXECUTION_BRANCH_HIDING_OFF
[Strategy]Timeout=-1
[StrategyProperty]SYMBOLIC_EXECUTION_ALIAS_CHECK_OPTIONS_KEY=SYMBOLIC_EXECUTION_ALIAS_CHECK_NEVER
[StrategyProperty]QUERY_NEW_OPTIONS_KEY=QUERY_OFF
[SMTSettings]useUninterpretedMultiplication=true
[StrategyProperty]BLOCK_OPTIONS_KEY=BLOCK_CONTRACT_INTERNAL
[StrategyProperty]METHOD_OPTIONS_KEY=METHOD_CONTRACT
[StrategyProperty]USER_TACLETS_OPTIONS_KEY3=USER_TACLETS_OFF
[SMTSettings]maxGenericSorts=2
[StrategyProperty]OSS_OPTIONS_KEY=OSS_ON
[StrategyProperty]SPLITTING_OPTIONS_KEY=SPLITTING_DELAYED
[SMTSettings]integersMinimum=-2147483645
[StrategyProperty]VBT_PHASE=VBT_SYM_EX
[SMTSettings]integersMaximum=2147483645
"
}

\javaSource "../src";

\proofObligation "#Proof Obligation Settings
#Mon Oct 14 17:34:58 CEST 2019
contract=de.polyas.core3.open.cred.CredTool[de.polyas.core3.open.cred.CredTool\\:\\:toList(java.lang.String,java.util.ArrayList)].JML normal_behavior operation contract.0
name=de.polyas.core3.open.cred.CredTool[de.polyas.core3.open.cred.CredTool\\:\\:toList(java.lang.String,java.util.ArrayList)].JML normal_behavior operation contract.0
class=de.uka.ilkd.key.proof.init.FunctionalOperationContractPO
";

\proof {
(keyLog "0" (keyUser "flo" ) (keyVersion "57d504cc0f"))

(autoModeTime "73477")

(branch "dummy ID"
(rule "impRight" (formula "1") (newnames "s,ls,result_45,exc_51,heapAtPre_0,o,f"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "2"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "4"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "6"))
(rule "andLeft" (formula "2"))
(rule "andLeft" (formula "8"))
(rule "andLeft" (formula "9"))
(rule "notLeft" (formula "10"))
(rule "notLeft" (formula "9"))
(rule "eqSymm" (formula "11") (term "1,0,0,1,0,1"))
(rule "replace_known_right" (formula "2") (term "0") (ifseqformula "9"))
 (builtin "One Step Simplification" (formula "2"))
(rule "replace_known_right" (formula "3") (term "0") (ifseqformula "10"))
 (builtin "One Step Simplification" (formula "3"))
(rule "castedGetAny" (formula "11") (term "0,0,1,0,0,1,0,0,0,1"))
(rule "castedGetAny" (formula "6") (term "0,0,1,0"))
(rule "inEqSimp_commuteLeq" (formula "11") (term "0,0,0,0,1,0,0,0,1"))
(rule "inEqSimp_commuteLeq" (formula "6") (term "0,0,0"))
(rule "assignment" (formula "11") (term "1"))
 (builtin "One Step Simplification" (formula "11"))
(rule "Class_invariant_axiom_for_java_util_ArrayList" (formula "5"))
(rule "true_left" (formula "5"))
(rule "Static_class_invariant_axiom_for_org_apache_commons_csv_CSVFormat" (formula "6"))
(rule "notLeft" (formula "6"))
(rule "Static_class_invariant_axiom_for_de_polyas_core3_open_cred_CredTool" (formula "6"))
 (builtin "One Step Simplification" (formula "6"))
(rule "insert_constant_string_value" (formula "6") (term "0,0,1,0,0") (ifseqformula "1"))
 (builtin "One Step Simplification" (formula "6"))
(rule "insert_constant_string_value" (formula "6") (term "0,0,1,0,0,0") (ifseqformula "1"))
 (builtin "One Step Simplification" (formula "6"))
(rule "insert_constant_string_value" (formula "6") (term "0,0,1,0,0,0,0") (ifseqformula "1"))
 (builtin "One Step Simplification" (formula "6"))
(rule "castDel" (formula "6") (term "0,0,0,1,0,0,0"))
(rule "castDel" (formula "6") (term "0,0,0,1,0,0,0,0"))
(rule "castDel" (formula "6") (term "0,0,0,1,0,0"))
(rule "andLeft" (formula "6"))
(rule "andLeft" (formula "6"))
(rule "andLeft" (formula "6"))
(rule "notLeft" (formula "8"))
(rule "notLeft" (formula "7"))
(rule "andLeft" (formula "6"))
(rule "notLeft" (formula "7"))
(rule "andLeft" (formula "6"))
(rule "notLeft" (formula "7"))
(rule "andLeft" (formula "6"))
(rule "notLeft" (formula "7"))
(rule "andLeft" (formula "6"))
(rule "notLeft" (formula "7"))
(rule "notLeft" (formula "6"))
(rule "applyEq" (formula "13") (term "0") (ifseqformula "6"))
(rule "commute_and" (formula "5") (term "0,0"))
(rule "methodBodyExpand" (formula "17") (term "1") (newnames "heapBefore_toList,savedHeapBefore_toList,_lsBefore_toList,_sBefore_toList"))
 (builtin "One Step Simplification" (formula "17"))
(rule "variableDeclarationFinalAssign" (formula "17") (term "1"))
(rule "variableDeclarationFinal" (formula "17") (term "1") (newnames "list"))
(rule "compound_reference_cast_expression" (formula "17") (term "1") (inst "#v=a"))
(rule "variableDeclarationAssign" (formula "17") (term "1"))
(rule "variableDeclaration" (formula "17") (term "1") (newnames "a"))
(rule "Class_axiom_0_in_de_polyas_core3_open_cred_CredTool" (inst "seq=seq") (inst "i=i") (inst "str=str") (inst "seq_0=seq_0") (inst "i_0=i_0") (inst "obj=obj") (inst "seq_1=seq_1") (inst "i_1=i_1") (inst "sv_heap=heap"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "castedGetAny" (formula "3") (term "0,1,1,0,0,0"))
(rule "castedGetAny" (formula "2") (term "0,1,1,0,0,0"))
(rule "castedGetAny" (formula "1") (term "0,0,0,0,1,0,0"))
(rule "castedGetAny" (formula "1") (term "0,0,0,0,0"))
(rule "castedGetAny" (formula "1") (term "0,0,1,1,0,1,0,0"))
(rule "castedGetAny" (formula "1") (term "0,0,0,1,0,1,0,0"))
(rule "commute_and" (formula "3") (term "0,0,0,0"))
(rule "commute_and" (formula "2") (term "0,0,0,0"))
(rule "shift_paren_and" (formula "1") (term "0,1,0,0"))
 (builtin "One Step Simplification" (formula "1"))
(rule "shift_paren_and" (formula "1") (term "1,0,0"))
(rule "Class_axiom_0_in_de_polyas_core3_open_cred_CredTool" (inst "seq=seq") (inst "i=i") (inst "str=str") (inst "seq_0=seq_0") (inst "i_0=i_0") (inst "obj=obj") (inst "seq_1=seq_1") (inst "i_1=i_1") (inst "sv_heap=heapAtPre_0"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "castedGetAny" (formula "3") (term "0,1,1,0,0,0"))
(rule "castedGetAny" (formula "2") (term "0,1,1,0,0,0"))
(rule "castedGetAny" (formula "1") (term "0,0,0,0,0"))
(rule "castedGetAny" (formula "1") (term "0,0,1,1,0,1,0,0"))
(rule "castedGetAny" (formula "1") (term "0,0,0,0,1,0,0"))
(rule "castedGetAny" (formula "1") (term "0,0,0,1,0,1,0,0"))
(rule "commute_and" (formula "3") (term "0,0,0,0"))
(rule "commute_and" (formula "2") (term "0,0,0,0"))
(rule "shift_paren_and" (formula "1") (term "0,1,0,0"))
 (builtin "One Step Simplification" (formula "1"))
(rule "shift_paren_and" (formula "1") (term "1,0,0"))
 (builtin "Use Operation Contract" (formula "22") (newnames "heapBefore_asList,result_46,exc_52,heapAfter_asList,anon_heap_asList") (contract "java.util.Arrays[java.util.Arrays::asList(java.lang.String)].JML normal_behavior operation contract.0"))
(branch "Post (asList)"
    (builtin "One Step Simplification" (formula "24"))
    (builtin "One Step Simplification" (formula "13"))
   (rule "andLeft" (formula "13"))
   (rule "selectCreatedOfAnonAsFormulaEQ" (formula "14") (term "1,1,0") (ifseqformula "13"))
   (rule "andLeft" (formula "14"))
   (rule "andLeft" (formula "14"))
   (rule "andLeft" (formula "16"))
   (rule "andLeft" (formula "16"))
   (rule "andLeft" (formula "17"))
   (rule "andLeft" (formula "16"))
   (rule "andLeft" (formula "19"))
   (rule "andLeft" (formula "16"))
   (rule "notLeft" (formula "20"))
   (rule "notLeft" (formula "16"))
   (rule "replace_known_right" (formula "15") (term "0,1") (ifseqformula "19"))
    (builtin "One Step Simplification" (formula "15") (ifInst ""  (formula "20")))
   (rule "castedGetAny" (formula "18") (term "0,0,1,0"))
   (rule "inEqSimp_commuteLeq" (formula "18") (term "0,0,0"))
   (rule "assignment" (formula "31") (term "1"))
    (builtin "One Step Simplification" (formula "31"))
   (rule "pullOutSelect" (formula "18") (term "0,1,1,0,0") (inst "selectSK=java_util_Collection_seq_0"))
   (rule "applyEq" (formula "19") (term "0,0,0,1,0") (ifseqformula "18"))
   (rule "simplifySelectOfAnonEQ" (formula "18") (ifseqformula "13"))
    (builtin "One Step Simplification" (formula "18") (ifInst ""  (formula "21")) (ifInst ""  (formula "20")))
   (rule "applyEqReverse" (formula "19") (term "0,1,1,0,0") (ifseqformula "18"))
   (rule "applyEqReverse" (formula "19") (term "0,0,0,1,0") (ifseqformula "18"))
   (rule "hideAuxiliaryEq" (formula "18"))
   (rule "Class_invariant_axiom_for_java_util_ArrayList" (formula "17"))
   (rule "true_left" (formula "17"))
   (rule "commute_and" (formula "17") (term "0,0"))
   (rule "delete_unnecessary_cast" (formula "30") (term "1"))
    (builtin "One Step Simplification" (formula "31"))
    (builtin "One Step Simplification" (formula "1"))
   (rule "true_left" (formula "1"))
   (rule "variableDeclarationFinalAssign" (formula "30") (term "1"))
   (rule "variableDeclarationFinal" (formula "30") (term "1") (newnames "len"))
    (builtin "Use Operation Contract" (formula "30") (newnames "heapBefore_size,result_47,exc_53,heapAfter_size,anon_heap_size") (contract "java.util.ArrayList[java.util.Collection::size()].JML normal_behavior operation contract.0"))
   (branch "Post (size)"
       (builtin "One Step Simplification" (formula "32"))
       (builtin "One Step Simplification" (formula "19"))
      (rule "expand_inInt" (formula "19") (term "1,0,1"))
      (rule "replace_int_MAX" (formula "19") (term "1,0,1,0,1"))
      (rule "replace_int_MIN" (formula "19") (term "0,1,1,0,1"))
      (rule "andLeft" (formula "19"))
      (rule "andLeft" (formula "20"))
      (rule "andLeft" (formula "21"))
      (rule "andLeft" (formula "20"))
      (rule "andLeft" (formula "21"))
      (rule "andLeft" (formula "20"))
      (rule "eqSymm" (formula "22"))
      (rule "inEqSimp_commuteLeq" (formula "21"))
      (rule "assignment" (formula "37") (term "1"))
       (builtin "One Step Simplification" (formula "37"))
      (rule "pullOutSelect" (formula "22") (term "0,0") (inst "selectSK=java_util_Collection_seq_1"))
      (rule "simplifySelectOfAnonEQ" (formula "22") (ifseqformula "19"))
       (builtin "One Step Simplification" (formula "22") (ifInst ""  (formula "37")))
      (rule "selectCreatedOfAnonAsFormulaEQ" (formula "22") (term "0,0,0") (ifseqformula "13"))
      (rule "replace_known_left" (formula "22") (term "0,0,0,0") (ifseqformula "8"))
       (builtin "One Step Simplification" (formula "22"))
      (rule "simplifySelectOfAnonEQ" (formula "22") (ifseqformula "13"))
       (builtin "One Step Simplification" (formula "22") (ifInst ""  (formula "37")) (ifInst ""  (formula "8")))
      (rule "applyEqReverse" (formula "23") (term "0,0") (ifseqformula "22"))
      (rule "hideAuxiliaryEq" (formula "22"))
      (rule "applyEq" (formula "10") (term "1,0,0,0") (ifseqformula "22"))
      (rule "Class_invariant_axiom_for_java_util_ArrayList" (formula "23"))
      (rule "true_left" (formula "23"))
      (rule "for_to_while" (formula "36") (term "1") (inst "#outerLabel=_label1") (inst "#innerLabel=_label0"))
      (rule "variableDeclarationAssign" (formula "36") (term "1"))
      (rule "variableDeclaration" (formula "36") (term "1") (newnames "i"))
      (rule "assignment" (formula "36") (term "1"))
       (builtin "One Step Simplification" (formula "36"))
      (rule "Class_axiom_0_in_de_polyas_core3_open_cred_CredTool" (inst "seq=seq") (inst "i=i_2") (inst "str=str") (inst "seq_0=seq_0") (inst "i_0=i_0") (inst "obj=obj") (inst "seq_1=seq_1") (inst "i_1=i_1") (inst "sv_heap=anon_heap_asList<<anonHeapFunction>>"))
      (rule "andLeft" (formula "1"))
      (rule "andLeft" (formula "1"))
      (rule "castedGetAny" (formula "3") (term "0,1,1,0,0,0"))
      (rule "castedGetAny" (formula "1") (term "0,0,0,1,0,1,0,0"))
      (rule "castedGetAny" (formula "2") (term "0,1,1,0,0,0"))
      (rule "castedGetAny" (formula "1") (term "0,0,1,1,0,1,0,0"))
      (rule "castedGetAny" (formula "1") (term "0,0,0,0,0"))
      (rule "castedGetAny" (formula "1") (term "0,0,0,0,1,0,0"))
      (rule "commute_and" (formula "3") (term "0,0,0,0"))
      (rule "commute_and" (formula "2") (term "0,0,0,0"))
      (rule "shift_paren_and" (formula "1") (term "0,1,0,0"))
       (builtin "One Step Simplification" (formula "1"))
      (rule "shift_paren_and" (formula "1") (term "1,0,0"))
      (rule "Class_axiom_0_in_de_polyas_core3_open_cred_CredTool" (inst "seq=seq") (inst "i=i_2") (inst "str=str") (inst "seq_0=seq_0") (inst "i_0=i_0") (inst "obj=obj") (inst "seq_1=seq_1") (inst "i_1=i_1") (inst "sv_heap=anon(heap, empty, anon_heap_asList<<anonHeapFunction>>)"))
       (builtin "One Step Simplification" (formula "1"))
      (rule "andLeft" (formula "1"))
      (rule "andLeft" (formula "1"))
      (rule "castedGetAny" (formula "3") (term "0,1,1,0,0,0"))
      (rule "castedGetAny" (formula "1") (term "0,0,0,1,0,1,0,0"))
      (rule "castedGetAny" (formula "1") (term "0,0,1,1,0,1,0,0"))
      (rule "castedGetAny" (formula "2") (term "0,1,1,0,0,0"))
      (rule "castedGetAny" (formula "1") (term "0,0,0,0,0"))
      (rule "castedGetAny" (formula "1") (term "0,0,0,0,1,0,0"))
      (rule "shift_paren_or" (formula "3") (term "0,0,0,0,0"))
      (rule "shift_paren_or" (formula "2") (term "0,0,0,0,0"))
      (rule "commute_and" (formula "3") (term "0,0,0,0"))
      (rule "commute_and" (formula "2") (term "0,0,0,0"))
      (rule "shift_paren_and" (formula "1") (term "0,1,0,0"))
       (builtin "One Step Simplification" (formula "1"))
      (rule "shift_paren_and" (formula "1") (term "1,0,0"))
      (rule "Class_axiom_0_in_de_polyas_core3_open_cred_CredTool" (inst "seq=seq") (inst "i=i_2") (inst "str=str") (inst "seq_0=seq_0") (inst "i_0=i_0") (inst "obj=obj") (inst "seq_1=seq_1") (inst "i_1=i_1") (inst "sv_heap=heapAfter_asList"))
      (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "1,0,0,0,0,0,1") (ifseqformula "18"))
      (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "1,0,0,0,0,0,1,0") (ifseqformula "18"))
      (rule "andLeft" (formula "1"))
      (rule "andLeft" (formula "1"))
      (rule "castedGetAny" (formula "3") (term "0,1,1,0,0,0"))
      (rule "castedGetAny" (formula "2") (term "0,1,1,0,0,0"))
      (rule "castedGetAny" (formula "1") (term "0,0,0,0,1,0,0"))
      (rule "castedGetAny" (formula "1") (term "0,0,0,1,0,1,0,0"))
      (rule "castedGetAny" (formula "1") (term "0,0,1,1,0,1,0,0"))
      (rule "castedGetAny" (formula "1") (term "0,0,0,0,0"))
      (rule "shift_paren_or" (formula "3") (term "0,0,0,0,0"))
      (rule "shift_paren_or" (formula "2") (term "0,0,0,0,0"))
      (rule "commute_and" (formula "3") (term "0,0,0,0"))
      (rule "commute_and" (formula "2") (term "0,0,0,0"))
      (rule "shift_paren_and" (formula "1") (term "0,1,0,0"))
       (builtin "One Step Simplification" (formula "1"))
      (rule "shift_paren_and" (formula "1") (term "1,0,0"))
       (builtin "Loop Invariant" (formula "40") (newnames "variant,b_0,heapBefore_LOOP,iBefore_LOOP,i_0,heap_After_LOOP,anon_heap_LOOP,o,f"))
      (branch "Invariant Initially Valid"
         (rule "andRight" (formula "40"))
         (branch
            (rule "andRight" (formula "40"))
            (branch
               (rule "andRight" (formula "40"))
               (branch
                  (rule "andRight" (formula "40"))
                  (branch
                     (rule "andRight" (formula "40"))
                     (branch
                        (rule "andRight" (formula "40"))
                        (branch
                           (rule "andRight" (formula "40"))
                           (branch
                              (rule "andRight" (formula "40"))
                              (branch
                                  (builtin "One Step Simplification" (formula "40"))
                                 (rule "inEqSimp_ltToLeq" (formula "14") (term "0,0,0"))
                                 (rule "polySimp_mulComm0" (formula "14") (term "1,0,0,0,0,0"))
                                 (rule "inEqSimp_ltToLeq" (formula "21") (term "0,0,0"))
                                 (rule "polySimp_mulComm0" (formula "21") (term "1,0,0,0,0,0"))
                                 (rule "inEqSimp_sepPosMonomial0" (formula "14") (term "0,0,0"))
                                 (rule "polySimp_mulComm0" (formula "14") (term "1,0,0,0"))
                                 (rule "polySimp_rightDist" (formula "14") (term "1,0,0,0"))
                                 (rule "mul_literals" (formula "14") (term "0,1,0,0,0"))
                                 (rule "polySimp_mulLiterals" (formula "14") (term "1,1,0,0,0"))
                                 (rule "polySimp_elimOne" (formula "14") (term "1,1,0,0,0"))
                                 (rule "inEqSimp_sepPosMonomial0" (formula "21") (term "0,0,0"))
                                 (rule "polySimp_mulComm0" (formula "21") (term "1,0,0,0"))
                                 (rule "polySimp_rightDist" (formula "21") (term "1,0,0,0"))
                                 (rule "polySimp_mulLiterals" (formula "21") (term "1,1,0,0,0"))
                                 (rule "mul_literals" (formula "21") (term "0,1,0,0,0"))
                                 (rule "polySimp_elimOne" (formula "21") (term "1,1,0,0,0"))
                                 (rule "nnf_imp2or" (formula "7") (term "0,0"))
                                  (builtin "One Step Simplification" (formula "7"))
                                 (rule "nnf_imp2or" (formula "14") (term "0"))
                                 (rule "nnf_imp2or" (formula "21") (term "0"))
                                 (rule "nnf_imp2or" (formula "8") (term "0,0,0"))
                                 (rule "nnf_imp2or" (formula "1") (term "0,0,0"))
                                 (rule "nnf_imp2or" (formula "2") (term "0,0,0"))
                                 (rule "nnf_imp2or" (formula "3") (term "0,0,0"))
                                 (rule "nnf_imp2or" (formula "6") (term "0,0,0"))
                                 (rule "nnf_imp2or" (formula "9") (term "0,0,0"))
                                 (rule "nnf_imp2or" (formula "4") (term "0,0,0"))
                                 (rule "nnf_imp2or" (formula "5") (term "0,0,0"))
                                 (rule "nnf_notAnd" (formula "14") (term "0,0"))
                                 (rule "inEqSimp_notGeq" (formula "14") (term "1,0,0"))
                                 (rule "times_zero_1" (formula "14") (term "1,0,0,1,0,0"))
                                 (rule "add_zero_right" (formula "14") (term "0,0,1,0,0"))
                                 (rule "inEqSimp_sepPosMonomial0" (formula "14") (term "1,0,0"))
                                 (rule "mul_literals" (formula "14") (term "1,1,0,0"))
                                 (rule "inEqSimp_notLeq" (formula "14") (term "0,0,0"))
                                 (rule "polySimp_rightDist" (formula "14") (term "1,0,0,0,0,0"))
                                 (rule "mul_literals" (formula "14") (term "0,1,0,0,0,0,0"))
                                 (rule "polySimp_addAssoc" (formula "14") (term "0,0,0,0,0"))
                                 (rule "add_literals" (formula "14") (term "0,0,0,0,0,0"))
                                 (rule "add_zero_left" (formula "14") (term "0,0,0,0,0"))
                                 (rule "inEqSimp_sepPosMonomial1" (formula "14") (term "0,0,0"))
                                 (rule "polySimp_mulLiterals" (formula "14") (term "1,0,0,0"))
                                 (rule "polySimp_elimOne" (formula "14") (term "1,0,0,0"))
                                 (rule "nnf_notAnd" (formula "21") (term "0,0"))
                                 (rule "inEqSimp_notGeq" (formula "21") (term "1,0,0"))
                                 (rule "times_zero_1" (formula "21") (term "1,0,0,1,0,0"))
                                 (rule "add_zero_right" (formula "21") (term "0,0,1,0,0"))
                                 (rule "inEqSimp_sepPosMonomial0" (formula "21") (term "1,0,0"))
                                 (rule "mul_literals" (formula "21") (term "1,1,0,0"))
                                 (rule "inEqSimp_notLeq" (formula "21") (term "0,0,0"))
                                 (rule "polySimp_rightDist" (formula "21") (term "1,0,0,0,0,0"))
                                 (rule "mul_literals" (formula "21") (term "0,1,0,0,0,0,0"))
                                 (rule "polySimp_addAssoc" (formula "21") (term "0,0,0,0,0"))
                                 (rule "add_literals" (formula "21") (term "0,0,0,0,0,0"))
                                 (rule "add_zero_left" (formula "21") (term "0,0,0,0,0"))
                                 (rule "inEqSimp_sepPosMonomial1" (formula "21") (term "0,0,0"))
                                 (rule "polySimp_mulLiterals" (formula "21") (term "1,0,0,0"))
                                 (rule "polySimp_elimOne" (formula "21") (term "1,0,0,0"))
                                 (rule "nnf_imp2or" (formula "8") (term "1,0,0,0"))
                                 (rule "nnf_notAnd" (formula "8") (term "0,0,0,0"))
                                  (builtin "One Step Simplification" (formula "8"))
                                 (rule "nnf_notAnd" (formula "1") (term "0,0,0,0"))
                                  (builtin "One Step Simplification" (formula "1"))
                                 (rule "nnf_notAnd" (formula "2") (term "0,0,0,0"))
                                  (builtin "One Step Simplification" (formula "2"))
                                 (rule "nnf_imp2or" (formula "3") (term "1,0,0,0"))
                                 (rule "nnf_notAnd" (formula "3") (term "0,0,0,0"))
                                  (builtin "One Step Simplification" (formula "3"))
                                 (rule "nnf_notAnd" (formula "6") (term "0,0,0,0"))
                                  (builtin "One Step Simplification" (formula "6"))
                                 (rule "nnf_imp2or" (formula "9") (term "1,0,0,0"))
                                 (rule "nnf_notAnd" (formula "9") (term "0,0,0,0"))
                                  (builtin "One Step Simplification" (formula "9"))
                                 (rule "nnf_imp2or" (formula "4") (term "1,0,0,0"))
                                 (rule "nnf_notAnd" (formula "4") (term "0,0,0,0"))
                                  (builtin "One Step Simplification" (formula "4"))
                                 (rule "nnf_notAnd" (formula "5") (term "0,0,0,0"))
                                  (builtin "One Step Simplification" (formula "5"))
                                 (rule "nnf_imp2or" (formula "1") (term "1,0,0,0"))
                                 (rule "nnf_imp2or" (formula "2") (term "1,0,0,0"))
                                 (rule "nnf_imp2or" (formula "6") (term "1,0,0,0"))
                                 (rule "nnf_notOr" (formula "8") (term "1,0,0,0,0"))
                                 (rule "nnf_notOr" (formula "1") (term "1,0,0,0,0"))
                                 (rule "nnf_notOr" (formula "2") (term "1,0,0,0,0"))
                                 (rule "nnf_notOr" (formula "3") (term "1,0,0,0,0"))
                                 (rule "nnf_imp2or" (formula "5") (term "1,0,0,0"))
                                 (rule "nnf_notOr" (formula "6") (term "1,0,0,0,0"))
                                 (rule "nnf_notOr" (formula "9") (term "1,0,0,0,0"))
                                 (rule "nnf_notOr" (formula "4") (term "1,0,0,0,0"))
                                 (rule "nnf_notOr" (formula "5") (term "1,0,0,0,0"))
                                 (rule "nnf_notOr" (formula "1") (term "0,1,0,0,0,0"))
                                 (rule "nnf_notOr" (formula "2") (term "0,1,0,0,0,0"))
                                 (rule "Class_invariant_axiom_for_java_util_ArrayList" (formula "40"))
                                 (rule "closeTrue" (formula "40"))
                              )
                              (branch
                                  (builtin "One Step Simplification" (formula "40"))
                                 (rule "inEqSimp_ltToLeq" (formula "14") (term "0,0,0"))
                                 (rule "polySimp_mulComm0" (formula "14") (term "1,0,0,0,0,0"))
                                 (rule "inEqSimp_ltToLeq" (formula "21") (term "0,0,0"))
                                 (rule "polySimp_mulComm0" (formula "21") (term "1,0,0,0,0,0"))
                                 (rule "inEqSimp_sepPosMonomial0" (formula "14") (term "0,0,0"))
                                 (rule "polySimp_mulComm0" (formula "14") (term "1,0,0,0"))
                                 (rule "polySimp_rightDist" (formula "14") (term "1,0,0,0"))
                                 (rule "mul_literals" (formula "14") (term "0,1,0,0,0"))
                                 (rule "polySimp_mulLiterals" (formula "14") (term "1,1,0,0,0"))
                                 (rule "polySimp_elimOne" (formula "14") (term "1,1,0,0,0"))
                                 (rule "inEqSimp_sepPosMonomial0" (formula "21") (term "0,0,0"))
                                 (rule "polySimp_mulComm0" (formula "21") (term "1,0,0,0"))
                                 (rule "polySimp_rightDist" (formula "21") (term "1,0,0,0"))
                                 (rule "mul_literals" (formula "21") (term "0,1,0,0,0"))
                                 (rule "polySimp_mulLiterals" (formula "21") (term "1,1,0,0,0"))
                                 (rule "polySimp_elimOne" (formula "21") (term "1,1,0,0,0"))
                                 (rule "nnf_imp2or" (formula "7") (term "0,0"))
                                  (builtin "One Step Simplification" (formula "7"))
                                 (rule "nnf_imp2or" (formula "14") (term "0"))
                                 (rule "nnf_imp2or" (formula "21") (term "0"))
                                 (rule "nnf_imp2or" (formula "5") (term "0,0,0"))
                                 (rule "nnf_imp2or" (formula "6") (term "0,0,0"))
                                 (rule "nnf_imp2or" (formula "8") (term "0,0,0"))
                                 (rule "nnf_imp2or" (formula "1") (term "0,0,0"))
                                 (rule "nnf_imp2or" (formula "2") (term "0,0,0"))
                                 (rule "nnf_imp2or" (formula "4") (term "0,0,0"))
                                 (rule "nnf_imp2or" (formula "9") (term "0,0,0"))
                                 (rule "nnf_imp2or" (formula "3") (term "0,0,0"))
                                 (rule "nnf_notAnd" (formula "14") (term "0,0"))
                                 (rule "inEqSimp_notGeq" (formula "14") (term "1,0,0"))
                                 (rule "mul_literals" (formula "14") (term "1,0,0,1,0,0"))
                                 (rule "add_zero_right" (formula "14") (term "0,0,1,0,0"))
                                 (rule "inEqSimp_sepPosMonomial0" (formula "14") (term "1,0,0"))
                                 (rule "mul_literals" (formula "14") (term "1,1,0,0"))
                                 (rule "inEqSimp_notLeq" (formula "14") (term "0,0,0"))
                                 (rule "polySimp_rightDist" (formula "14") (term "1,0,0,0,0,0"))
                                 (rule "mul_literals" (formula "14") (term "0,1,0,0,0,0,0"))
                                 (rule "polySimp_addAssoc" (formula "14") (term "0,0,0,0,0"))
                                 (rule "add_literals" (formula "14") (term "0,0,0,0,0,0"))
                                 (rule "add_zero_left" (formula "14") (term "0,0,0,0,0"))
                                 (rule "inEqSimp_sepPosMonomial1" (formula "14") (term "0,0,0"))
                                 (rule "polySimp_mulLiterals" (formula "14") (term "1,0,0,0"))
                                 (rule "polySimp_elimOne" (formula "14") (term "1,0,0,0"))
                                 (rule "nnf_notAnd" (formula "21") (term "0,0"))
                                 (rule "inEqSimp_notLeq" (formula "21") (term "0,0,0"))
                                 (rule "polySimp_rightDist" (formula "21") (term "1,0,0,0,0,0"))
                                 (rule "mul_literals" (formula "21") (term "0,1,0,0,0,0,0"))
                                 (rule "polySimp_addAssoc" (formula "21") (term "0,0,0,0,0"))
                                 (rule "add_literals" (formula "21") (term "0,0,0,0,0,0"))
                                 (rule "add_zero_left" (formula "21") (term "0,0,0,0,0"))
                                 (rule "inEqSimp_sepPosMonomial1" (formula "21") (term "0,0,0"))
                                 (rule "polySimp_mulLiterals" (formula "21") (term "1,0,0,0"))
                                 (rule "polySimp_elimOne" (formula "21") (term "1,0,0,0"))
                                 (rule "inEqSimp_notGeq" (formula "21") (term "1,0,0"))
                                 (rule "times_zero_1" (formula "21") (term "1,0,0,1,0,0"))
                                 (rule "add_zero_right" (formula "21") (term "0,0,1,0,0"))
                                 (rule "inEqSimp_sepPosMonomial0" (formula "21") (term "1,0,0"))
                                 (rule "mul_literals" (formula "21") (term "1,1,0,0"))
                                 (rule "nnf_imp2or" (formula "5") (term "1,0,0,0"))
                                 (rule "nnf_notAnd" (formula "5") (term "0,0,0,0"))
                                  (builtin "One Step Simplification" (formula "5"))
                                 (rule "nnf_imp2or" (formula "6") (term "1,0,0,0"))
                                 (rule "nnf_notAnd" (formula "6") (term "0,0,0,0"))
                                  (builtin "One Step Simplification" (formula "6"))
                                 (rule "nnf_notAnd" (formula "8") (term "0,0,0,0"))
                                  (builtin "One Step Simplification" (formula "8"))
                                 (rule "nnf_imp2or" (formula "1") (term "1,0,0,0"))
                                 (rule "nnf_notAnd" (formula "1") (term "0,0,0,0"))
                                  (builtin "One Step Simplification" (formula "1"))
                                 (rule "nnf_imp2or" (formula "2") (term "1,0,0,0"))
                                 (rule "nnf_notAnd" (formula "2") (term "0,0,0,0"))
                                  (builtin "One Step Simplification" (formula "2"))
                                 (rule "nnf_notAnd" (formula "4") (term "0,0,0,0"))
                                  (builtin "One Step Simplification" (formula "4"))
                                 (rule "nnf_notAnd" (formula "9") (term "0,0,0,0"))
                                  (builtin "One Step Simplification" (formula "9"))
                                 (rule "nnf_imp2or" (formula "3") (term "1,0,0,0"))
                                 (rule "nnf_notAnd" (formula "3") (term "0,0,0,0"))
                                  (builtin "One Step Simplification" (formula "3"))
                                 (rule "nnf_imp2or" (formula "8") (term "1,0,0,0"))
                                 (rule "nnf_notOr" (formula "5") (term "1,0,0,0,0"))
                                 (rule "nnf_imp2or" (formula "4") (term "1,0,0,0"))
                                 (rule "nnf_notOr" (formula "6") (term "1,0,0,0,0"))
                                 (rule "nnf_imp2or" (formula "9") (term "1,0,0,0"))
                                 (rule "nnf_notOr" (formula "8") (term "1,0,0,0,0"))
                                 (rule "nnf_notOr" (formula "1") (term "1,0,0,0,0"))
                                 (rule "nnf_notOr" (formula "2") (term "1,0,0,0,0"))
                                 (rule "nnf_notOr" (formula "4") (term "1,0,0,0,0"))
                                 (rule "nnf_notOr" (formula "9") (term "1,0,0,0,0"))
                                 (rule "nnf_notOr" (formula "3") (term "1,0,0,0,0"))
                                 (rule "nnf_notOr" (formula "1") (term "0,1,0,0,0,0"))
                                 (rule "nnf_notOr" (formula "2") (term "0,1,0,0,0,0"))
                                 (rule "Class_invariant_axiom_for_java_util_ArrayList" (formula "40"))
                                 (rule "closeTrue" (formula "40"))
                              )
                           )
                           (branch
                              (rule "andRight" (formula "40"))
                              (branch
                                  (builtin "One Step Simplification" (formula "40"))
                                 (rule "leq_literals" (formula "40"))
                                 (rule "closeTrue" (formula "40"))
                              )
                              (branch
                                  (builtin "One Step Simplification" (formula "40"))
                                 (rule "inEqSimp_leqRight" (formula "40"))
                                 (rule "add_zero_right" (formula "1") (term "0"))
                                 (rule "polySimp_mulComm0" (formula "1") (term "1,0"))
                                 (rule "inEqSimp_ltToLeq" (formula "22") (term "0,0,0"))
                                 (rule "polySimp_mulComm0" (formula "22") (term "1,0,0,0,0,0"))
                                 (rule "inEqSimp_ltToLeq" (formula "15") (term "0,0,0"))
                                 (rule "polySimp_mulComm0" (formula "15") (term "1,0,0,0,0,0"))
                                 (rule "inEqSimp_sepNegMonomial1" (formula "1"))
                                 (rule "polySimp_mulLiterals" (formula "1") (term "0"))
                                 (rule "polySimp_elimOne" (formula "1") (term "0"))
                                 (rule "inEqSimp_sepPosMonomial0" (formula "22") (term "0,0,0"))
                                 (rule "polySimp_mulComm0" (formula "22") (term "1,0,0,0"))
                                 (rule "polySimp_rightDist" (formula "22") (term "1,0,0,0"))
                                 (rule "mul_literals" (formula "22") (term "0,1,0,0,0"))
                                 (rule "polySimp_mulLiterals" (formula "22") (term "1,1,0,0,0"))
                                 (rule "polySimp_elimOne" (formula "22") (term "1,1,0,0,0"))
                                 (rule "inEqSimp_sepPosMonomial0" (formula "15") (term "0,0,0"))
                                 (rule "polySimp_mulComm0" (formula "15") (term "1,0,0,0"))
                                 (rule "polySimp_rightDist" (formula "15") (term "1,0,0,0"))
                                 (rule "mul_literals" (formula "15") (term "0,1,0,0,0"))
                                 (rule "polySimp_mulLiterals" (formula "15") (term "1,1,0,0,0"))
                                 (rule "polySimp_elimOne" (formula "15") (term "1,1,0,0,0"))
                                 (rule "inEqSimp_subsumption0" (formula "25") (ifseqformula "1"))
                                 (rule "leq_literals" (formula "25") (term "0"))
                                  (builtin "One Step Simplification" (formula "25"))
                                 (rule "true_left" (formula "25"))
                                 (rule "nnf_imp2or" (formula "8") (term "0,0"))
                                  (builtin "One Step Simplification" (formula "8"))
                                 (rule "nnf_imp2or" (formula "22") (term "0"))
                                 (rule "nnf_imp2or" (formula "9") (term "0,0,0"))
                                 (rule "nnf_imp2or" (formula "10") (term "0,0,0"))
                                 (rule "nnf_imp2or" (formula "4") (term "0,0,0"))
                                 (rule "nnf_imp2or" (formula "3") (term "0,0,0"))
                                 (rule "nnf_imp2or" (formula "7") (term "0,0,0"))
                                 (rule "nnf_imp2or" (formula "5") (term "0,0,0"))
                                 (rule "nnf_imp2or" (formula "6") (term "0,0,0"))
                                 (rule "nnf_imp2or" (formula "2") (term "0,0,0"))
                                 (rule "nnf_imp2or" (formula "15") (term "0"))
                                 (rule "nnf_notAnd" (formula "22") (term "0,0"))
                                 (rule "inEqSimp_notGeq" (formula "22") (term "1,0,0"))
                                 (rule "times_zero_1" (formula "22") (term "1,0,0,1,0,0"))
                                 (rule "add_zero_right" (formula "22") (term "0,0,1,0,0"))
                                 (rule "inEqSimp_sepPosMonomial0" (formula "22") (term "1,0,0"))
                                 (rule "mul_literals" (formula "22") (term "1,1,0,0"))
                                 (rule "inEqSimp_notLeq" (formula "22") (term "0,0,0"))
                                 (rule "polySimp_rightDist" (formula "22") (term "1,0,0,0,0,0"))
                                 (rule "mul_literals" (formula "22") (term "0,1,0,0,0,0,0"))
                                 (rule "polySimp_addAssoc" (formula "22") (term "0,0,0,0,0"))
                                 (rule "add_literals" (formula "22") (term "0,0,0,0,0,0"))
                                 (rule "add_zero_left" (formula "22") (term "0,0,0,0,0"))
                                 (rule "inEqSimp_sepPosMonomial1" (formula "22") (term "0,0,0"))
                                 (rule "polySimp_mulLiterals" (formula "22") (term "1,0,0,0"))
                                 (rule "polySimp_elimOne" (formula "22") (term "1,0,0,0"))
                                 (rule "nnf_notAnd" (formula "15") (term "0,0"))
                                 (rule "inEqSimp_notGeq" (formula "15") (term "1,0,0"))
                                 (rule "times_zero_1" (formula "15") (term "1,0,0,1,0,0"))
                                 (rule "add_zero_right" (formula "15") (term "0,0,1,0,0"))
                                 (rule "inEqSimp_sepPosMonomial0" (formula "15") (term "1,0,0"))
                                 (rule "mul_literals" (formula "15") (term "1,1,0,0"))
                                 (rule "inEqSimp_notLeq" (formula "15") (term "0,0,0"))
                                 (rule "polySimp_rightDist" (formula "15") (term "1,0,0,0,0,0"))
                                 (rule "mul_literals" (formula "15") (term "0,1,0,0,0,0,0"))
                                 (rule "polySimp_addAssoc" (formula "15") (term "0,0,0,0,0"))
                                 (rule "add_literals" (formula "15") (term "0,0,0,0,0,0"))
                                 (rule "add_zero_left" (formula "15") (term "0,0,0,0,0"))
                                 (rule "inEqSimp_sepPosMonomial1" (formula "15") (term "0,0,0"))
                                 (rule "polySimp_mulLiterals" (formula "15") (term "1,0,0,0"))
                                 (rule "polySimp_elimOne" (formula "15") (term "1,0,0,0"))
                                 (rule "nnf_notAnd" (formula "9") (term "0,0,0,0"))
                                  (builtin "One Step Simplification" (formula "9"))
                                 (rule "nnf_notAnd" (formula "10") (term "0,0,0,0"))
                                  (builtin "One Step Simplification" (formula "10"))
                                 (rule "nnf_imp2or" (formula "4") (term "1,0,0,0"))
                                 (rule "nnf_notAnd" (formula "4") (term "0,0,0,0"))
                                  (builtin "One Step Simplification" (formula "4"))
                                 (rule "nnf_notAnd" (formula "3") (term "0,0,0,0"))
                                  (builtin "One Step Simplification" (formula "3"))
                                 (rule "nnf_imp2or" (formula "7") (term "1,0,0,0"))
                                 (rule "nnf_notAnd" (formula "7") (term "0,0,0,0"))
                                  (builtin "One Step Simplification" (formula "7"))
                                 (rule "nnf_imp2or" (formula "5") (term "1,0,0,0"))
                                 (rule "nnf_notAnd" (formula "5") (term "0,0,0,0"))
                                  (builtin "One Step Simplification" (formula "5"))
                                 (rule "nnf_imp2or" (formula "6") (term "1,0,0,0"))
                                 (rule "nnf_notAnd" (formula "6") (term "0,0,0,0"))
                                  (builtin "One Step Simplification" (formula "6"))
                                 (rule "nnf_imp2or" (formula "2") (term "1,0,0,0"))
                                 (rule "nnf_notAnd" (formula "2") (term "0,0,0,0"))
                                  (builtin "One Step Simplification" (formula "2"))
                                 (rule "nnf_imp2or" (formula "9") (term "1,0,0,0"))
                                 (rule "nnf_imp2or" (formula "10") (term "1,0,0,0"))
                                 (rule "nnf_imp2or" (formula "3") (term "1,0,0,0"))
                                 (rule "nnf_notOr" (formula "9") (term "1,0,0,0,0"))
                                 (rule "nnf_notOr" (formula "10") (term "1,0,0,0,0"))
                                 (rule "nnf_notOr" (formula "4") (term "1,0,0,0,0"))
                                 (rule "nnf_notOr" (formula "3") (term "1,0,0,0,0"))
                                 (rule "nnf_notOr" (formula "7") (term "1,0,0,0,0"))
                                 (rule "nnf_notOr" (formula "5") (term "1,0,0,0,0"))
                                 (rule "nnf_notOr" (formula "6") (term "1,0,0,0,0"))
                                 (rule "nnf_notOr" (formula "2") (term "1,0,0,0,0"))
                                 (rule "nnf_notOr" (formula "3") (term "0,1,0,0,0,0"))
                                 (rule "nnf_notOr" (formula "2") (term "0,1,0,0,0,0"))
                                 (rule "commute_or_2" (formula "22") (term "0"))
                                 (rule "commute_or_2" (formula "15") (term "0"))
                                 (rule "cnf_rightDist" (formula "8") (term "0,0"))
                                 (rule "distr_forallAnd" (formula "8") (term "0"))
                                 (rule "distr_forallAnd" (formula "8"))
                                 (rule "andLeft" (formula "8"))
                                 (rule "commute_or" (formula "23") (term "0,0"))
                                 (rule "commute_or_2" (formula "23") (term "0"))
                                 (rule "commute_or" (formula "16") (term "0,0"))
                                 (rule "commute_or_2" (formula "16") (term "0"))
                                 (rule "commute_or" (formula "9") (term "0,0"))
                                 (rule "commute_or_2" (formula "10") (term "0,0,0"))
                                 (rule "commute_or_2" (formula "11") (term "0,0,0"))
                                 (rule "commute_or" (formula "4") (term "1,0,0,0"))
                                 (rule "commute_or_2" (formula "7") (term "0,0,0"))
                                 (rule "commute_or_2" (formula "5") (term "0,0,0"))
                                 (rule "commute_or_2" (formula "6") (term "0,0,0"))
                                 (rule "commute_or_2" (formula "3") (term "0,0,0"))
                                 (rule "commute_or_2" (formula "2") (term "0,0,0"))
                                 (rule "commute_or_2" (formula "4") (term "0,0,0"))
                                 (rule "cnf_rightDist" (formula "8") (term "0,0"))
                                 (rule "distr_forallAnd" (formula "8") (term "0"))
                                 (rule "distr_forallAnd" (formula "8"))
                                 (rule "andLeft" (formula "8"))
                                 (rule "commute_or" (formula "9") (term "0,0"))
                                 (rule "shift_paren_or" (formula "11") (term "0,0,0,0"))
                                 (rule "commute_or_2" (formula "11") (term "0,0,0,0"))
                                 (rule "commute_or" (formula "12") (term "1,0,0,0,0"))
                                 (rule "cnf_rightDist" (formula "8") (term "0,0"))
                                 (rule "distr_forallAnd" (formula "8") (term "0"))
                                 (rule "distr_forallAnd" (formula "8"))
                                 (rule "andLeft" (formula "8"))
                                 (rule "commute_or" (formula "9") (term "0,0"))
                                 (rule "commute_or" (formula "7") (term "1,0,0,0,0"))
                                 (rule "shift_paren_or" (formula "5") (term "0,0,0,0"))
                                 (rule "commute_or_2" (formula "5") (term "0,0,0,0"))
                                 (rule "commute_or" (formula "6") (term "1,0,0,0,0"))
                                 (rule "commute_or" (formula "3") (term "1,0,0,0,0"))
                                 (rule "commute_or" (formula "2") (term "1,0,0,0,0"))
                                 (rule "shift_paren_or" (formula "4") (term "0,0,0,0"))
                                 (rule "shift_paren_or" (formula "13") (term "0,0,0,0"))
                                 (rule "commute_and" (formula "12") (term "1,0,0,0"))
                                 (rule "commute_and" (formula "13") (term "1,0,0,0"))
                                 (rule "shift_paren_or" (formula "7") (term "0,0,0,0"))
                                 (rule "commute_and" (formula "7") (term "1,0,0,0"))
                                 (rule "commute_and" (formula "5") (term "1,0,0,0"))
                                 (rule "shift_paren_or" (formula "6") (term "0,0,0,0"))
                                 (rule "commute_and" (formula "6") (term "1,0,0,0"))
                                 (rule "shift_paren_or" (formula "3") (term "0,0,0,0"))
                                 (rule "shift_paren_or" (formula "2") (term "0,0,0,0"))
                                 (rule "commute_and" (formula "4") (term "1,0,0,0"))
                                 (rule "cnf_rightDist" (formula "12") (term "0,0,0"))
                                 (rule "distr_forallAnd" (formula "12") (term "0,0"))
                                 (rule "distr_forallAnd" (formula "12") (term "0"))
                                 (rule "distr_forallAnd" (formula "12"))
                                 (rule "andLeft" (formula "12"))
                                 (rule "commute_or_2" (formula "12") (term "0,0,0"))
                                  (builtin "One Step Simplification" (formula "12"))
                                 (rule "eqSymm" (formula "12") (term "1,0,0,0,0"))
                                 (rule "castedGetAny" (formula "12") (term "0,0,0,0,0,0"))
                                 (rule "castedGetAny" (formula "12") (term "1,0,0,1,0,0,0"))
                                 (rule "castedGetAny" (formula "12") (term "0,1,0,0,0,0"))
                                  (builtin "One Step Simplification" (formula "12"))
                                 (rule "true_left" (formula "12"))
                                 (rule "shift_paren_or" (formula "12") (term "0,0,0"))
                                  (builtin "One Step Simplification" (formula "12"))
                                 (rule "eqSymm" (formula "12") (term "1,1,0,0,0"))
                                 (rule "castedGetAny" (formula "12") (term "0,0,0,0,0,0"))
                                 (rule "castedGetAny" (formula "12") (term "0,0,1,0,0,0"))
                                 (rule "castedGetAny" (formula "12") (term "0,1,1,0,0,0"))
                                  (builtin "One Step Simplification" (formula "12"))
                                 (rule "true_left" (formula "12"))
                                 (rule "cnf_rightDist" (formula "12") (term "0,0,0"))
                                 (rule "distr_forallAnd" (formula "12") (term "0,0"))
                                 (rule "distr_forallAnd" (formula "12") (term "0"))
                                 (rule "distr_forallAnd" (formula "12"))
                                 (rule "andLeft" (formula "12"))
                                 (rule "commute_or_2" (formula "12") (term "0,0,0"))
                                  (builtin "One Step Simplification" (formula "12"))
                                 (rule "eqSymm" (formula "12") (term "1,0,0,0,0"))
                                 (rule "castedGetAny" (formula "12") (term "0,0,0,0,0,0"))
                                 (rule "castedGetAny" (formula "12") (term "1,0,0,1,0,0,0"))
                                 (rule "castedGetAny" (formula "12") (term "0,1,0,0,0,0"))
                                  (builtin "One Step Simplification" (formula "12"))
                                 (rule "true_left" (formula "12"))
                                 (rule "cnf_rightDist" (formula "7") (term "0,0,0"))
                                 (rule "distr_forallAnd" (formula "7") (term "0,0"))
                                 (rule "distr_forallAnd" (formula "7") (term "0"))
                                 (rule "distr_forallAnd" (formula "7"))
                                 (rule "andLeft" (formula "7"))
                                 (rule "commute_or_2" (formula "7") (term "0,0,0"))
                                  (builtin "One Step Simplification" (formula "7"))
                                 (rule "eqSymm" (formula "7") (term "1,0,0,0,0"))
                                 (rule "castedGetAny" (formula "7") (term "0,0,0,0,0,0"))
                                 (rule "castedGetAny" (formula "7") (term "1,0,0,1,0,0,0"))
                                 (rule "castedGetAny" (formula "7") (term "0,1,0,0,0,0"))
                                  (builtin "One Step Simplification" (formula "7"))
                                 (rule "true_left" (formula "7"))
                                 (rule "cnf_rightDist" (formula "5") (term "0,0,0"))
                                 (rule "distr_forallAnd" (formula "5") (term "0,0"))
                                 (rule "distr_forallAnd" (formula "5") (term "0"))
                                 (rule "distr_forallAnd" (formula "5"))
                                 (rule "andLeft" (formula "5"))
                                 (rule "shift_paren_or" (formula "11") (term "0,0,0"))
                                  (builtin "One Step Simplification" (formula "11"))
                                 (rule "eqSymm" (formula "11") (term "1,1,0,0,0"))
                                 (rule "castedGetAny" (formula "11") (term "0,0,0,0,0,0"))
                                 (rule "castedGetAny" (formula "11") (term "0,0,1,0,0,0"))
                                 (rule "castedGetAny" (formula "11") (term "0,1,1,0,0,0"))
                                  (builtin "One Step Simplification" (formula "11"))
                                 (rule "true_left" (formula "11"))
                                 (rule "commute_and" (formula "3") (term "0,1,0,0,0"))
                                 (rule "cnf_rightDist" (formula "6") (term "0,0,0"))
                                 (rule "distr_forallAnd" (formula "6") (term "0,0"))
                                 (rule "distr_forallAnd" (formula "6") (term "0"))
                                 (rule "distr_forallAnd" (formula "6"))
                                 (rule "andLeft" (formula "6"))
                                 (rule "commute_and" (formula "2") (term "0,1,0,0,0"))
                                 (rule "cnf_rightDist" (formula "4") (term "0,0,0"))
                                 (rule "distr_forallAnd" (formula "4") (term "0,0"))
                                 (rule "distr_forallAnd" (formula "4") (term "0"))
                                 (rule "distr_forallAnd" (formula "4"))
                                 (rule "andLeft" (formula "4"))
                                 (rule "commute_or_2" (formula "5") (term "0,0,0"))
                                  (builtin "One Step Simplification" (formula "5"))
                                 (rule "eqSymm" (formula "5") (term "1,0,0,0,0"))
                                 (rule "castedGetAny" (formula "5") (term "1,0,0,1,0,0,0"))
                                 (rule "castedGetAny" (formula "5") (term "0,0,0,0,0,0"))
                                 (rule "castedGetAny" (formula "5") (term "0,1,0,0,0,0"))
                                  (builtin "One Step Simplification" (formula "5"))
                                 (rule "true_left" (formula "5"))
                                 (rule "commute_or_2" (formula "5") (term "0,0,0"))
                                  (builtin "One Step Simplification" (formula "5"))
                                 (rule "eqSymm" (formula "5") (term "1,0,0,0,0"))
                                 (rule "castedGetAny" (formula "5") (term "0,0,0,0,0,0"))
                                 (rule "castedGetAny" (formula "5") (term "1,0,0,1,0,0,0"))
                                 (rule "castedGetAny" (formula "5") (term "0,1,0,0,0,0"))
                                  (builtin "One Step Simplification" (formula "5"))
                                 (rule "true_left" (formula "5"))
                                 (rule "commute_or_2" (formula "4") (term "0,0,0"))
                                  (builtin "One Step Simplification" (formula "4"))
                                 (rule "eqSymm" (formula "4") (term "1,0,0,0,0"))
                                 (rule "castedGetAny" (formula "4") (term "1,0,0,1,0,0,0"))
                                 (rule "castedGetAny" (formula "4") (term "0,0,0,0,0,0"))
                                 (rule "castedGetAny" (formula "4") (term "0,1,0,0,0,0"))
                                  (builtin "One Step Simplification" (formula "4"))
                                 (rule "true_left" (formula "4"))
                                 (rule "shift_paren_or" (formula "4") (term "0,0,0"))
                                  (builtin "One Step Simplification" (formula "4"))
                                 (rule "eqSymm" (formula "4") (term "1,1,0,0,0"))
                                 (rule "castedGetAny" (formula "4") (term "0,0,1,0,0,0"))
                                 (rule "castedGetAny" (formula "4") (term "0,0,0,0,0,0"))
                                 (rule "castedGetAny" (formula "4") (term "0,1,1,0,0,0"))
                                  (builtin "One Step Simplification" (formula "4"))
                                 (rule "true_left" (formula "4"))
                                 (rule "cnf_rightDist" (formula "3") (term "0,0,0"))
                                 (rule "distr_forallAnd" (formula "3") (term "0,0"))
                                 (rule "distr_forallAnd" (formula "3") (term "0"))
                                 (rule "distr_forallAnd" (formula "3"))
                                 (rule "andLeft" (formula "3"))
                                 (rule "cnf_rightDist" (formula "2") (term "0,0,0"))
                                 (rule "distr_forallAnd" (formula "2") (term "0,0"))
                                 (rule "distr_forallAnd" (formula "2") (term "0"))
                                 (rule "distr_forallAnd" (formula "2"))
                                 (rule "andLeft" (formula "2"))
                                 (rule "shift_paren_or" (formula "5") (term "0,0,0"))
                                  (builtin "One Step Simplification" (formula "5"))
                                 (rule "eqSymm" (formula "5") (term "1,1,0,0,0"))
                                 (rule "castedGetAny" (formula "5") (term "1,0,0,0,0,0,0"))
                                 (rule "castedGetAny" (formula "5") (term "0,0,1,0,0,0"))
                                 (rule "castedGetAny" (formula "5") (term "0,1,1,0,0,0"))
                                  (builtin "One Step Simplification" (formula "5"))
                                 (rule "true_left" (formula "5"))
                                 (rule "shift_paren_or" (formula "3") (term "0,0,0"))
                                  (builtin "One Step Simplification" (formula "3"))
                                 (rule "eqSymm" (formula "3") (term "1,1,0,0,0"))
                                 (rule "castedGetAny" (formula "3") (term "1,0,0,0,0,0,0"))
                                 (rule "castedGetAny" (formula "3") (term "0,0,1,0,0,0"))
                                 (rule "castedGetAny" (formula "3") (term "0,1,1,0,0,0"))
                                  (builtin "One Step Simplification" (formula "3"))
                                 (rule "true_left" (formula "3"))
                                 (rule "lenNonNegative" (formula "23") (term "0"))
                                 (rule "inEqSimp_commuteLeq" (formula "23"))
                                 (rule "applyEq" (formula "23") (term "0") (ifseqformula "24"))
                                 (rule "inEqSimp_subsumption1" (formula "22") (ifseqformula "23"))
                                 (rule "leq_literals" (formula "22") (term "0"))
                                  (builtin "One Step Simplification" (formula "22"))
                                 (rule "true_left" (formula "22"))
                                 (rule "inEqSimp_contradInEq1" (formula "1") (ifseqformula "22"))
                                 (rule "qeq_literals" (formula "1") (term "0"))
                                  (builtin "One Step Simplification" (formula "1"))
                                 (rule "closeFalse" (formula "1"))
                              )
                           )
                        )
                        (branch
                            (builtin "One Step Simplification" (formula "40"))
                           (rule "inEqSimp_ltToLeq" (formula "14") (term "0,0,0"))
                           (rule "polySimp_mulComm0" (formula "14") (term "1,0,0,0,0,0"))
                           (rule "inEqSimp_ltToLeq" (formula "21") (term "0,0,0"))
                           (rule "polySimp_mulComm0" (formula "21") (term "1,0,0,0,0,0"))
                           (rule "inEqSimp_sepPosMonomial0" (formula "14") (term "0,0,0"))
                           (rule "polySimp_mulComm0" (formula "14") (term "1,0,0,0"))
                           (rule "polySimp_rightDist" (formula "14") (term "1,0,0,0"))
                           (rule "mul_literals" (formula "14") (term "0,1,0,0,0"))
                           (rule "polySimp_mulLiterals" (formula "14") (term "1,1,0,0,0"))
                           (rule "polySimp_elimOne" (formula "14") (term "1,1,0,0,0"))
                           (rule "inEqSimp_sepPosMonomial0" (formula "21") (term "0,0,0"))
                           (rule "polySimp_mulComm0" (formula "21") (term "1,0,0,0"))
                           (rule "polySimp_rightDist" (formula "21") (term "1,0,0,0"))
                           (rule "mul_literals" (formula "21") (term "0,1,0,0,0"))
                           (rule "polySimp_mulLiterals" (formula "21") (term "1,1,0,0,0"))
                           (rule "polySimp_elimOne" (formula "21") (term "1,1,0,0,0"))
                           (rule "nnf_imp2or" (formula "7") (term "0,0"))
                            (builtin "One Step Simplification" (formula "7"))
                           (rule "nnf_imp2or" (formula "14") (term "0"))
                           (rule "nnf_imp2or" (formula "21") (term "0"))
                           (rule "nnf_imp2or" (formula "5") (term "0,0,0"))
                           (rule "nnf_imp2or" (formula "6") (term "0,0,0"))
                           (rule "nnf_imp2or" (formula "8") (term "0,0,0"))
                           (rule "nnf_imp2or" (formula "1") (term "0,0,0"))
                           (rule "nnf_imp2or" (formula "2") (term "0,0,0"))
                           (rule "nnf_imp2or" (formula "4") (term "0,0,0"))
                           (rule "nnf_imp2or" (formula "9") (term "0,0,0"))
                           (rule "nnf_imp2or" (formula "3") (term "0,0,0"))
                           (rule "nnf_notAnd" (formula "14") (term "0,0"))
                           (rule "inEqSimp_notGeq" (formula "14") (term "1,0,0"))
                           (rule "mul_literals" (formula "14") (term "1,0,0,1,0,0"))
                           (rule "add_zero_right" (formula "14") (term "0,0,1,0,0"))
                           (rule "inEqSimp_sepPosMonomial0" (formula "14") (term "1,0,0"))
                           (rule "mul_literals" (formula "14") (term "1,1,0,0"))
                           (rule "inEqSimp_notLeq" (formula "14") (term "0,0,0"))
                           (rule "polySimp_rightDist" (formula "14") (term "1,0,0,0,0,0"))
                           (rule "mul_literals" (formula "14") (term "0,1,0,0,0,0,0"))
                           (rule "polySimp_addAssoc" (formula "14") (term "0,0,0,0,0"))
                           (rule "add_literals" (formula "14") (term "0,0,0,0,0,0"))
                           (rule "add_zero_left" (formula "14") (term "0,0,0,0,0"))
                           (rule "inEqSimp_sepPosMonomial1" (formula "14") (term "0,0,0"))
                           (rule "polySimp_mulLiterals" (formula "14") (term "1,0,0,0"))
                           (rule "polySimp_elimOne" (formula "14") (term "1,0,0,0"))
                           (rule "nnf_notAnd" (formula "21") (term "0,0"))
                           (rule "inEqSimp_notLeq" (formula "21") (term "0,0,0"))
                           (rule "polySimp_rightDist" (formula "21") (term "1,0,0,0,0,0"))
                           (rule "mul_literals" (formula "21") (term "0,1,0,0,0,0,0"))
                           (rule "polySimp_addAssoc" (formula "21") (term "0,0,0,0,0"))
                           (rule "add_literals" (formula "21") (term "0,0,0,0,0,0"))
                           (rule "add_zero_left" (formula "21") (term "0,0,0,0,0"))
                           (rule "inEqSimp_sepPosMonomial1" (formula "21") (term "0,0,0"))
                           (rule "polySimp_mulLiterals" (formula "21") (term "1,0,0,0"))
                           (rule "polySimp_elimOne" (formula "21") (term "1,0,0,0"))
                           (rule "inEqSimp_notGeq" (formula "21") (term "1,0,0"))
                           (rule "times_zero_1" (formula "21") (term "1,0,0,1,0,0"))
                           (rule "add_zero_right" (formula "21") (term "0,0,1,0,0"))
                           (rule "inEqSimp_sepPosMonomial0" (formula "21") (term "1,0,0"))
                           (rule "mul_literals" (formula "21") (term "1,1,0,0"))
                           (rule "nnf_imp2or" (formula "5") (term "1,0,0,0"))
                           (rule "nnf_notAnd" (formula "5") (term "0,0,0,0"))
                            (builtin "One Step Simplification" (formula "5"))
                           (rule "nnf_imp2or" (formula "6") (term "1,0,0,0"))
                           (rule "nnf_notAnd" (formula "6") (term "0,0,0,0"))
                            (builtin "One Step Simplification" (formula "6"))
                           (rule "nnf_notAnd" (formula "8") (term "0,0,0,0"))
                            (builtin "One Step Simplification" (formula "8"))
                           (rule "nnf_imp2or" (formula "1") (term "1,0,0,0"))
                           (rule "nnf_notAnd" (formula "1") (term "0,0,0,0"))
                            (builtin "One Step Simplification" (formula "1"))
                           (rule "nnf_imp2or" (formula "2") (term "1,0,0,0"))
                           (rule "nnf_notAnd" (formula "2") (term "0,0,0,0"))
                            (builtin "One Step Simplification" (formula "2"))
                           (rule "nnf_notAnd" (formula "4") (term "0,0,0,0"))
                            (builtin "One Step Simplification" (formula "4"))
                           (rule "nnf_notAnd" (formula "9") (term "0,0,0,0"))
                            (builtin "One Step Simplification" (formula "9"))
                           (rule "nnf_imp2or" (formula "3") (term "1,0,0,0"))
                           (rule "nnf_notAnd" (formula "3") (term "0,0,0,0"))
                            (builtin "One Step Simplification" (formula "3"))
                           (rule "nnf_imp2or" (formula "8") (term "1,0,0,0"))
                           (rule "nnf_notOr" (formula "5") (term "1,0,0,0,0"))
                           (rule "nnf_imp2or" (formula "4") (term "1,0,0,0"))
                           (rule "nnf_notOr" (formula "6") (term "1,0,0,0,0"))
                           (rule "nnf_notOr" (formula "8") (term "1,0,0,0,0"))
                           (rule "nnf_imp2or" (formula "9") (term "1,0,0,0"))
                           (rule "nnf_notOr" (formula "1") (term "1,0,0,0,0"))
                           (rule "nnf_notOr" (formula "2") (term "1,0,0,0,0"))
                           (rule "nnf_notOr" (formula "4") (term "1,0,0,0,0"))
                           (rule "nnf_notOr" (formula "9") (term "1,0,0,0,0"))
                           (rule "nnf_notOr" (formula "3") (term "1,0,0,0,0"))
                           (rule "nnf_notOr" (formula "1") (term "0,1,0,0,0,0"))
                           (rule "nnf_notOr" (formula "2") (term "0,1,0,0,0,0"))
                           (rule "Class_invariant_axiom_for_java_util_ArrayList" (formula "40"))
                           (rule "closeTrue" (formula "40"))
                        )
                     )
                     (branch
                         (builtin "One Step Simplification" (formula "40"))
                        (rule "replaceKnownSelect_taclet00_2" (formula "40") (term "0,1"))
                        (rule "replaceKnownAuxiliaryConstant_taclet00_4" (formula "40") (term "0,1"))
                        (rule "eqSymm" (formula "40"))
                        (rule "close" (formula "40") (ifseqformula "26"))
                     )
                  )
                  (branch
                      (builtin "One Step Simplification" (formula "40"))
                     (rule "replaceKnownSelect_taclet00_2" (formula "40") (term "0,1,1,0,0"))
                     (rule "replaceKnownAuxiliaryConstant_taclet00_4" (formula "40") (term "0,1,1,0,0"))
                     (rule "replaceKnownSelect_taclet00_2" (formula "40") (term "0,0,0,0,1,0"))
                     (rule "replaceKnownAuxiliaryConstant_taclet00_4" (formula "40") (term "0,0,0,0,1,0"))
                     (rule "allRight" (formula "40") (inst "sk=i_1"))
                     (rule "impRight" (formula "40"))
                     (rule "notRight" (formula "41"))
                     (rule "andLeft" (formula "2"))
                     (rule "castedGetAny" (formula "1") (term "0"))
                     (rule "inEqSimp_ltToLeq" (formula "17") (term "0,0,0"))
                     (rule "polySimp_mulComm0" (formula "17") (term "1,0,0,0,0,0"))
                     (rule "inEqSimp_ltToLeq" (formula "24") (term "0,0,0"))
                     (rule "polySimp_mulComm0" (formula "24") (term "1,0,0,0,0,0"))
                     (rule "inEqSimp_ltToLeq" (formula "3"))
                     (rule "polySimp_mulComm0" (formula "3") (term "1,0,0"))
                     (rule "polySimp_addComm1" (formula "3") (term "0"))
                     (rule "inEqSimp_commuteLeq" (formula "2"))
                     (rule "applyEq" (formula "3") (term "0,1,0") (ifseqformula "29"))
                     (rule "inEqSimp_sepPosMonomial0" (formula "17") (term "0,0,0"))
                     (rule "polySimp_mulComm0" (formula "17") (term "1,0,0,0"))
                     (rule "polySimp_rightDist" (formula "17") (term "1,0,0,0"))
                     (rule "mul_literals" (formula "17") (term "0,1,0,0,0"))
                     (rule "polySimp_mulLiterals" (formula "17") (term "1,1,0,0,0"))
                     (rule "polySimp_elimOne" (formula "17") (term "1,1,0,0,0"))
                     (rule "inEqSimp_sepPosMonomial0" (formula "24") (term "0,0,0"))
                     (rule "polySimp_mulComm0" (formula "24") (term "1,0,0,0"))
                     (rule "polySimp_rightDist" (formula "24") (term "1,0,0,0"))
                     (rule "mul_literals" (formula "24") (term "0,1,0,0,0"))
                     (rule "polySimp_mulLiterals" (formula "24") (term "1,1,0,0,0"))
                     (rule "polySimp_elimOne" (formula "24") (term "1,1,0,0,0"))
                     (rule "inEqSimp_sepNegMonomial0" (formula "3"))
                     (rule "polySimp_mulLiterals" (formula "3") (term "0"))
                     (rule "polySimp_elimOne" (formula "3") (term "0"))
                     (rule "inEqSimp_exactShadow3" (formula "3") (ifseqformula "27"))
                     (rule "polySimp_rightDist" (formula "3") (term "0,0"))
                     (rule "mul_literals" (formula "3") (term "0,0,0"))
                     (rule "polySimp_addComm1" (formula "3") (term "0"))
                     (rule "add_literals" (formula "3") (term "0,0"))
                     (rule "inEqSimp_sepNegMonomial1" (formula "3"))
                     (rule "polySimp_mulLiterals" (formula "3") (term "0"))
                     (rule "polySimp_elimOne" (formula "3") (term "0"))
                     (rule "nnf_imp2or" (formula "11") (term "0,0"))
                      (builtin "One Step Simplification" (formula "11"))
                     (rule "nnf_imp2or" (formula "6") (term "0,0,0"))
                     (rule "nnf_imp2or" (formula "5") (term "0,0,0"))
                     (rule "nnf_imp2or" (formula "8") (term "0,0,0"))
                     (rule "nnf_imp2or" (formula "7") (term "0,0,0"))
                     (rule "nnf_imp2or" (formula "13") (term "0,0,0"))
                     (rule "nnf_imp2or" (formula "12") (term "0,0,0"))
                     (rule "nnf_imp2or" (formula "9") (term "0,0,0"))
                     (rule "nnf_imp2or" (formula "10") (term "0,0,0"))
                     (rule "nnf_imp2or" (formula "18") (term "0"))
                     (rule "nnf_imp2or" (formula "25") (term "0"))
                     (rule "nnf_notAnd" (formula "18") (term "0,0"))
                     (rule "inEqSimp_notLeq" (formula "18") (term "0,0,0"))
                     (rule "polySimp_rightDist" (formula "18") (term "1,0,0,0,0,0"))
                     (rule "mul_literals" (formula "18") (term "0,1,0,0,0,0,0"))
                     (rule "polySimp_addAssoc" (formula "18") (term "0,0,0,0,0"))
                     (rule "add_literals" (formula "18") (term "0,0,0,0,0,0"))
                     (rule "add_zero_left" (formula "18") (term "0,0,0,0,0"))
                     (rule "inEqSimp_sepPosMonomial1" (formula "18") (term "0,0,0"))
                     (rule "polySimp_mulLiterals" (formula "18") (term "1,0,0,0"))
                     (rule "polySimp_elimOne" (formula "18") (term "1,0,0,0"))
                     (rule "inEqSimp_notGeq" (formula "18") (term "1,0,0"))
                     (rule "mul_literals" (formula "18") (term "1,0,0,1,0,0"))
                     (rule "add_zero_right" (formula "18") (term "0,0,1,0,0"))
                     (rule "inEqSimp_sepPosMonomial0" (formula "18") (term "1,0,0"))
                     (rule "mul_literals" (formula "18") (term "1,1,0,0"))
                     (rule "nnf_notAnd" (formula "25") (term "0,0"))
                     (rule "inEqSimp_notLeq" (formula "25") (term "0,0,0"))
                     (rule "polySimp_rightDist" (formula "25") (term "1,0,0,0,0,0"))
                     (rule "mul_literals" (formula "25") (term "0,1,0,0,0,0,0"))
                     (rule "polySimp_addAssoc" (formula "25") (term "0,0,0,0,0"))
                     (rule "add_literals" (formula "25") (term "0,0,0,0,0,0"))
                     (rule "add_zero_left" (formula "25") (term "0,0,0,0,0"))
                     (rule "inEqSimp_sepPosMonomial1" (formula "25") (term "0,0,0"))
                     (rule "polySimp_mulLiterals" (formula "25") (term "1,0,0,0"))
                     (rule "polySimp_elimOne" (formula "25") (term "1,0,0,0"))
                     (rule "inEqSimp_notGeq" (formula "25") (term "1,0,0"))
                     (rule "times_zero_1" (formula "25") (term "1,0,0,1,0,0"))
                     (rule "add_zero_right" (formula "25") (term "0,0,1,0,0"))
                     (rule "inEqSimp_sepPosMonomial0" (formula "25") (term "1,0,0"))
                     (rule "mul_literals" (formula "25") (term "1,1,0,0"))
                     (rule "nnf_notAnd" (formula "6") (term "0,0,0,0"))
                      (builtin "One Step Simplification" (formula "6"))
                     (rule "nnf_imp2or" (formula "5") (term "1,0,0,0"))
                     (rule "nnf_notAnd" (formula "5") (term "0,0,0,0"))
                      (builtin "One Step Simplification" (formula "5"))
                     (rule "nnf_imp2or" (formula "8") (term "1,0,0,0"))
                     (rule "nnf_notAnd" (formula "8") (term "0,0,0,0"))
                      (builtin "One Step Simplification" (formula "8"))
                     (rule "nnf_notAnd" (formula "7") (term "0,0,0,0"))
                      (builtin "One Step Simplification" (formula "7"))
                     (rule "nnf_imp2or" (formula "13") (term "1,0,0,0"))
                     (rule "nnf_notAnd" (formula "13") (term "0,0,0,0"))
                      (builtin "One Step Simplification" (formula "13"))
                     (rule "nnf_notAnd" (formula "12") (term "0,0,0,0"))
                      (builtin "One Step Simplification" (formula "12"))
                     (rule "nnf_imp2or" (formula "9") (term "1,0,0,0"))
                     (rule "nnf_notAnd" (formula "9") (term "0,0,0,0"))
                      (builtin "One Step Simplification" (formula "9"))
                     (rule "nnf_imp2or" (formula "10") (term "1,0,0,0"))
                     (rule "nnf_notAnd" (formula "10") (term "0,0,0,0"))
                      (builtin "One Step Simplification" (formula "10"))
                     (rule "nnf_imp2or" (formula "6") (term "1,0,0,0"))
                     (rule "nnf_imp2or" (formula "7") (term "1,0,0,0"))
                     (rule "nnf_notOr" (formula "6") (term "1,0,0,0,0"))
                     (rule "nnf_notOr" (formula "5") (term "1,0,0,0,0"))
                     (rule "nnf_imp2or" (formula "12") (term "1,0,0,0"))
                     (rule "nnf_notOr" (formula "8") (term "1,0,0,0,0"))
                     (rule "nnf_notOr" (formula "7") (term "1,0,0,0,0"))
                     (rule "nnf_notOr" (formula "13") (term "1,0,0,0,0"))
                     (rule "nnf_notOr" (formula "12") (term "1,0,0,0,0"))
                     (rule "nnf_notOr" (formula "9") (term "1,0,0,0,0"))
                     (rule "nnf_notOr" (formula "10") (term "1,0,0,0,0"))
                     (rule "nnf_notOr" (formula "6") (term "0,1,0,0,0,0"))
                     (rule "nnf_notOr" (formula "5") (term "0,1,0,0,0,0"))
                     (rule "commute_or_2" (formula "18") (term "0"))
                     (rule "commute_or_2" (formula "25") (term "0"))
                     (rule "cnf_rightDist" (formula "11") (term "0,0"))
                     (rule "distr_forallAnd" (formula "11") (term "0"))
                     (rule "distr_forallAnd" (formula "11"))
                     (rule "andLeft" (formula "11"))
                     (rule "commute_or" (formula "19") (term "0,0"))
                     (rule "commute_or_2" (formula "19") (term "0"))
                     (rule "commute_or" (formula "26") (term "0,0"))
                     (rule "commute_or_2" (formula "26") (term "0"))
                     (rule "commute_or" (formula "12") (term "0,0"))
                     (rule "commute_or" (formula "5") (term "1,0,0,0"))
                     (rule "commute_or_2" (formula "8") (term "0,0,0"))
                     (rule "commute_or_2" (formula "7") (term "0,0,0"))
                     (rule "commute_or_2" (formula "14") (term "0,0,0"))
                     (rule "commute_or_2" (formula "13") (term "0,0,0"))
                     (rule "commute_or_2" (formula "9") (term "0,0,0"))
                     (rule "commute_or_2" (formula "10") (term "0,0,0"))
                     (rule "commute_or_2" (formula "6") (term "0,0,0"))
                     (rule "commute_or_2" (formula "5") (term "0,0,0"))
                     (rule "cnf_rightDist" (formula "11") (term "0,0"))
                     (rule "distr_forallAnd" (formula "11") (term "0"))
                     (rule "distr_forallAnd" (formula "11"))
                     (rule "andLeft" (formula "11"))
                     (rule "commute_or" (formula "12") (term "0,0"))
                     (rule "commute_or" (formula "8") (term "1,0,0,0,0"))
                     (rule "shift_paren_or" (formula "7") (term "0,0,0,0"))
                     (rule "commute_or_2" (formula "7") (term "0,0,0,0"))
                     (rule "cnf_rightDist" (formula "11") (term "0,0"))
                     (rule "distr_forallAnd" (formula "11") (term "0"))
                     (rule "distr_forallAnd" (formula "11"))
                     (rule "andLeft" (formula "11"))
                     (rule "commute_or" (formula "12") (term "0,0"))
                     (rule "shift_paren_or" (formula "16") (term "0,0,0,0"))
                     (rule "commute_or_2" (formula "16") (term "0,0,0,0"))
                     (rule "shift_paren_or" (formula "15") (term "0,0,0,0"))
                     (rule "commute_or_2" (formula "15") (term "0,0,0,0"))
                     (rule "shift_paren_or" (formula "9") (term "0,0,0,0"))
                     (rule "shift_paren_or" (formula "10") (term "0,0,0,0"))
                     (rule "commute_or_2" (formula "9") (term "0,0,0,0"))
                     (rule "commute_or_2" (formula "10") (term "0,0,0,0"))
                     (rule "shift_paren_or" (formula "6") (term "0,0,0,0"))
                     (rule "shift_paren_or" (formula "5") (term "0,0,0,0"))
                     (rule "commute_or_2" (formula "6") (term "0,0,0,0"))
                     (rule "shift_paren_or" (formula "8") (term "0,0,0,0"))
                     (rule "commute_and" (formula "8") (term "1,0,0,0"))
                     (rule "commute_and" (formula "7") (term "1,0,0,0"))
                     (rule "commute_and" (formula "16") (term "1,0,0,0"))
                     (rule "commute_and" (formula "15") (term "1,0,0,0"))
                     (rule "commute_and" (formula "9") (term "1,0,0,0"))
                     (rule "commute_and" (formula "10") (term "1,0,0,0"))
                     (rule "cnf_rightDist" (formula "5") (term "0,0,0"))
                     (rule "distr_forallAnd" (formula "5") (term "0,0"))
                     (rule "distr_forallAnd" (formula "5") (term "0"))
                     (rule "distr_forallAnd" (formula "5"))
                     (rule "andLeft" (formula "5"))
                     (rule "shift_paren_or" (formula "6") (term "0,0,0"))
                      (builtin "One Step Simplification" (formula "6"))
                     (rule "eqSymm" (formula "6") (term "1,1,0,0,0"))
                     (rule "castedGetAny" (formula "6") (term "0,0,1,0,0,0"))
                     (rule "castedGetAny" (formula "6") (term "1,0,0,0,0,0,0"))
                     (rule "castedGetAny" (formula "6") (term "0,1,1,0,0,0"))
                      (builtin "One Step Simplification" (formula "6"))
                     (rule "true_left" (formula "6"))
                     (rule "cnf_rightDist" (formula "6") (term "0,0,0"))
                     (rule "distr_forallAnd" (formula "6") (term "0,0"))
                     (rule "distr_forallAnd" (formula "6") (term "0"))
                     (rule "distr_forallAnd" (formula "6"))
                     (rule "andLeft" (formula "6"))
                     (rule "shift_paren_or" (formula "7") (term "0,0,0"))
                      (builtin "One Step Simplification" (formula "7"))
                     (rule "eqSymm" (formula "7") (term "1,1,0,0,0"))
                     (rule "castedGetAny" (formula "7") (term "1,0,0,0,0,0,0"))
                     (rule "castedGetAny" (formula "7") (term "0,0,1,0,0,0"))
                     (rule "castedGetAny" (formula "7") (term "0,1,1,0,0,0"))
                      (builtin "One Step Simplification" (formula "7"))
                     (rule "true_left" (formula "7"))
                     (rule "cnf_rightDist" (formula "8") (term "0,0,0"))
                     (rule "distr_forallAnd" (formula "8") (term "0,0"))
                     (rule "distr_forallAnd" (formula "8") (term "0"))
                     (rule "distr_forallAnd" (formula "8"))
                     (rule "andLeft" (formula "8"))
                     (rule "commute_or_2" (formula "8") (term "0,0,0"))
                      (builtin "One Step Simplification" (formula "8"))
                     (rule "eqSymm" (formula "8") (term "1,0,0,0,0"))
                     (rule "castedGetAny" (formula "8") (term "1,0,0,1,0,0,0"))
                     (rule "castedGetAny" (formula "8") (term "0,0,0,0,0,0"))
                     (rule "castedGetAny" (formula "8") (term "0,1,0,0,0,0"))
                      (builtin "One Step Simplification" (formula "8"))
                     (rule "true_left" (formula "8"))
                     (rule "cnf_rightDist" (formula "7") (term "0,0,0"))
                     (rule "distr_forallAnd" (formula "7") (term "0,0"))
                     (rule "distr_forallAnd" (formula "7") (term "0"))
                     (rule "distr_forallAnd" (formula "7"))
                     (rule "andLeft" (formula "7"))
                     (rule "commute_or_2" (formula "7") (term "0,0,0"))
                      (builtin "One Step Simplification" (formula "7"))
                     (rule "eqSymm" (formula "7") (term "1,0,0,0,0"))
                     (rule "castedGetAny" (formula "7") (term "1,0,0,1,0,0,0"))
                     (rule "castedGetAny" (formula "7") (term "0,0,0,0,0,0"))
                     (rule "castedGetAny" (formula "7") (term "0,1,0,0,0,0"))
                      (builtin "One Step Simplification" (formula "7"))
                     (rule "true_left" (formula "7"))
                     (rule "cnf_rightDist" (formula "16") (term "0,0,0"))
                     (rule "distr_forallAnd" (formula "16") (term "0,0"))
                     (rule "distr_forallAnd" (formula "16") (term "0"))
                     (rule "distr_forallAnd" (formula "16"))
                     (rule "andLeft" (formula "16"))
                     (rule "cnf_rightDist" (formula "15") (term "0,0,0"))
                     (rule "distr_forallAnd" (formula "15") (term "0,0"))
                     (rule "distr_forallAnd" (formula "15") (term "0"))
                     (rule "distr_forallAnd" (formula "15"))
                     (rule "andLeft" (formula "15"))
                     (rule "cnf_rightDist" (formula "9") (term "0,0,0"))
                     (rule "distr_forallAnd" (formula "9") (term "0,0"))
                     (rule "distr_forallAnd" (formula "9") (term "0"))
                     (rule "distr_forallAnd" (formula "9"))
                     (rule "andLeft" (formula "9"))
                     (rule "cnf_rightDist" (formula "10") (term "0,0,0"))
                     (rule "distr_forallAnd" (formula "10") (term "0,0"))
                     (rule "distr_forallAnd" (formula "10") (term "0"))
                     (rule "distr_forallAnd" (formula "10"))
                     (rule "andLeft" (formula "10"))
                     (rule "shift_paren_or" (formula "8") (term "0,0,0"))
                      (builtin "One Step Simplification" (formula "8"))
                     (rule "eqSymm" (formula "8") (term "1,1,0,0,0"))
                     (rule "castedGetAny" (formula "8") (term "0,0,0,0,0,0"))
                     (rule "castedGetAny" (formula "8") (term "0,0,1,0,0,0"))
                     (rule "castedGetAny" (formula "8") (term "0,1,1,0,0,0"))
                      (builtin "One Step Simplification" (formula "8"))
                     (rule "true_left" (formula "8"))
                     (rule "cnf_rightDist" (formula "5") (term "0,0,0"))
                     (rule "distr_forallAnd" (formula "5") (term "0,0"))
                      (builtin "One Step Simplification" (formula "5"))
                     (rule "commute_or_2" (formula "15") (term "0,0,0"))
                      (builtin "One Step Simplification" (formula "15"))
                     (rule "eqSymm" (formula "15") (term "1,0,0,0,0"))
                     (rule "castedGetAny" (formula "15") (term "1,0,0,1,0,0,0"))
                     (rule "castedGetAny" (formula "15") (term "0,0,0,0,0,0"))
                     (rule "castedGetAny" (formula "15") (term "0,1,0,0,0,0"))
                      (builtin "One Step Simplification" (formula "15"))
                     (rule "true_left" (formula "15"))
                     (rule "commute_or_2" (formula "14") (term "0,0,0"))
                      (builtin "One Step Simplification" (formula "14"))
                     (rule "eqSymm" (formula "14") (term "1,0,0,0,0"))
                     (rule "castedGetAny" (formula "14") (term "1,0,0,1,0,0,0"))
                     (rule "castedGetAny" (formula "14") (term "0,0,0,0,0,0"))
                     (rule "castedGetAny" (formula "14") (term "0,1,0,0,0,0"))
                      (builtin "One Step Simplification" (formula "14"))
                     (rule "true_left" (formula "14"))
                     (rule "shift_paren_or" (formula "7") (term "0,0,0"))
                      (builtin "One Step Simplification" (formula "7"))
                     (rule "eqSymm" (formula "7") (term "1,1,0,0,0"))
                     (rule "castedGetAny" (formula "7") (term "0,0,1,0,0,0"))
                     (rule "castedGetAny" (formula "7") (term "0,0,0,0,0,0"))
                     (rule "castedGetAny" (formula "7") (term "0,1,1,0,0,0"))
                      (builtin "One Step Simplification" (formula "7"))
                     (rule "true_left" (formula "7"))
                     (rule "commute_or_2" (formula "7") (term "0,0,0"))
                      (builtin "One Step Simplification" (formula "7"))
                     (rule "eqSymm" (formula "7") (term "1,0,0,0,0"))
                     (rule "castedGetAny" (formula "7") (term "1,0,0,1,0,0,0"))
                     (rule "castedGetAny" (formula "7") (term "0,0,0,0,0,0"))
                     (rule "castedGetAny" (formula "7") (term "0,1,0,0,0,0"))
                      (builtin "One Step Simplification" (formula "7"))
                     (rule "true_left" (formula "7"))
                     (rule "cnf_rightDist" (formula "6") (term "0,0,0"))
                     (rule "distr_forallAnd" (formula "6") (term "0,0"))
                      (builtin "One Step Simplification" (formula "6"))
                     (rule "commute_or_2" (formula "7") (term "0,0,0"))
                      (builtin "One Step Simplification" (formula "7"))
                     (rule "eqSymm" (formula "7") (term "1,0,0,0,0"))
                     (rule "castedGetAny" (formula "7") (term "0,0,0,0,0,0"))
                     (rule "castedGetAny" (formula "7") (term "1,0,0,1,0,0,0"))
                     (rule "castedGetAny" (formula "7") (term "0,1,0,0,0,0"))
                      (builtin "One Step Simplification" (formula "7"))
                     (rule "true_left" (formula "7"))
                     (rule "shift_paren_or" (formula "5") (term "0,0,0"))
                      (builtin "One Step Simplification" (formula "5"))
                     (rule "eqSymm" (formula "5") (term "1,1,0,0,0"))
                     (rule "castedGetAny" (formula "5") (term "1,0,0,0,0,0,0"))
                     (rule "castedGetAny" (formula "5") (term "0,0,1,0,0,0"))
                     (rule "castedGetAny" (formula "5") (term "0,1,1,0,0,0"))
                      (builtin "One Step Simplification" (formula "5"))
                     (rule "true_left" (formula "5"))
                     (rule "lenNonNegative" (formula "26") (term "0"))
                     (rule "inEqSimp_commuteLeq" (formula "26"))
                     (rule "applyEq" (formula "26") (term "0") (ifseqformula "27"))
                     (rule "inEqSimp_subsumption1" (formula "25") (ifseqformula "26"))
                     (rule "leq_literals" (formula "25") (term "0"))
                      (builtin "One Step Simplification" (formula "25"))
                     (rule "true_left" (formula "25"))
                     (rule "seqGetAlphaCast" (formula "1") (term "0"))
                     (rule "castedGetAny" (formula "1") (term "0"))
                      (builtin "One Step Simplification" (formula "1"))
                     (rule "true_left" (formula "1"))
                     (rule "shift_paren_or" (formula "5") (term "0,0,0"))
                      (builtin "One Step Simplification" (formula "5"))
                     (rule "eqSymm" (formula "5") (term "1,1,0,0,0"))
                     (rule "castedGetAny" (formula "5") (term "1,0,0,0,0,0,0"))
                     (rule "castedGetAny" (formula "5") (term "0,0,1,0,0,0"))
                     (rule "castedGetAny" (formula "5") (term "0,1,1,0,0,0"))
                      (builtin "One Step Simplification" (formula "5"))
                     (rule "true_left" (formula "5"))
                     (rule "allLeft" (formula "13") (inst "t=i_1"))
                     (rule "replace_known_left" (formula "13") (term "0,0,0") (ifseqformula "1"))
                      (builtin "One Step Simplification" (formula "13"))
                     (rule "inEqSimp_commuteGeq" (formula "13") (term "1"))
                     (rule "inEqSimp_contradInEq1" (formula "13") (term "1") (ifseqformula "4"))
                     (rule "inEqSimp_homoInEq1" (formula "13") (term "0,1"))
                     (rule "polySimp_pullOutFactor1b" (formula "13") (term "0,0,1"))
                     (rule "add_literals" (formula "13") (term "1,1,0,0,1"))
                     (rule "times_zero_1" (formula "13") (term "1,0,0,1"))
                     (rule "add_zero_right" (formula "13") (term "0,0,1"))
                     (rule "leq_literals" (formula "13") (term "0,1"))
                      (builtin "One Step Simplification" (formula "13"))
                     (rule "inEqSimp_subsumption0" (formula "3") (ifseqformula "13"))
                     (rule "leq_literals" (formula "3") (term "0"))
                      (builtin "One Step Simplification" (formula "3"))
                     (rule "true_left" (formula "3"))
                     (rule "inEqSimp_contradInEq0" (formula "2") (ifseqformula "12"))
                     (rule "qeq_literals" (formula "2") (term "0"))
                      (builtin "One Step Simplification" (formula "2"))
                     (rule "closeFalse" (formula "2"))
                  )
               )
               (branch
                   (builtin "One Step Simplification" (formula "40"))
                  (rule "allRight" (formula "40") (inst "sk=i_1"))
                  (rule "impRight" (formula "40"))
                  (rule "notRight" (formula "41"))
                  (rule "andLeft" (formula "2"))
                  (rule "castedGetAny" (formula "1") (term "0"))
                  (rule "inEqSimp_ltToLeq" (formula "24") (term "0,0,0"))
                  (rule "polySimp_mulComm0" (formula "24") (term "1,0,0,0,0,0"))
                  (rule "inEqSimp_ltToLeq" (formula "17") (term "0,0,0"))
                  (rule "polySimp_mulComm0" (formula "17") (term "1,0,0,0,0,0"))
                  (rule "inEqSimp_ltToLeq" (formula "3"))
                  (rule "polySimp_mulComm0" (formula "3") (term "1,0,0"))
                  (rule "polySimp_addComm1" (formula "3") (term "0"))
                  (rule "inEqSimp_commuteLeq" (formula "2"))
                  (rule "inEqSimp_sepPosMonomial0" (formula "24") (term "0,0,0"))
                  (rule "polySimp_mulComm0" (formula "24") (term "1,0,0,0"))
                  (rule "polySimp_rightDist" (formula "24") (term "1,0,0,0"))
                  (rule "mul_literals" (formula "24") (term "0,1,0,0,0"))
                  (rule "polySimp_mulLiterals" (formula "24") (term "1,1,0,0,0"))
                  (rule "polySimp_elimOne" (formula "24") (term "1,1,0,0,0"))
                  (rule "inEqSimp_sepPosMonomial0" (formula "17") (term "0,0,0"))
                  (rule "polySimp_mulComm0" (formula "17") (term "1,0,0,0"))
                  (rule "polySimp_rightDist" (formula "17") (term "1,0,0,0"))
                  (rule "polySimp_mulLiterals" (formula "17") (term "1,1,0,0,0"))
                  (rule "mul_literals" (formula "17") (term "0,1,0,0,0"))
                  (rule "polySimp_elimOne" (formula "17") (term "1,1,0,0,0"))
                  (rule "inEqSimp_sepNegMonomial0" (formula "3"))
                  (rule "polySimp_mulLiterals" (formula "3") (term "0"))
                  (rule "polySimp_elimOne" (formula "3") (term "0"))
                  (rule "pullOutSelect" (formula "1") (term "0,0") (inst "selectSK=java_util_Collection_seq_2"))
                  (rule "applyEq" (formula "4") (term "0,0") (ifseqformula "1"))
                  (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "27"))
                   (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "33")))
                  (rule "replaceKnownSelect_taclet0_0" (formula "1") (term "2,0"))
                  (rule "replaceKnownAuxiliaryConstant_taclet0_1" (formula "1") (term "2,0"))
                  (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,0,0") (ifseqformula "21"))
                  (rule "replace_known_right" (formula "1") (term "0,0,0,0") (ifseqformula "32"))
                   (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "23")))
                  (rule "applyEqReverse" (formula "4") (term "0,0") (ifseqformula "1"))
                  (rule "applyEqReverse" (formula "2") (term "0,0") (ifseqformula "1"))
                  (rule "hideAuxiliaryEq" (formula "1"))
                  (rule "nnf_imp2or" (formula "10") (term "0,0"))
                   (builtin "One Step Simplification" (formula "10"))
                  (rule "nnf_imp2or" (formula "6") (term "0,0,0"))
                  (rule "nnf_imp2or" (formula "4") (term "0,0,0"))
                  (rule "nnf_imp2or" (formula "24") (term "0"))
                  (rule "nnf_imp2or" (formula "11") (term "0,0,0"))
                  (rule "nnf_imp2or" (formula "8") (term "0,0,0"))
                  (rule "nnf_imp2or" (formula "5") (term "0,0,0"))
                  (rule "nnf_imp2or" (formula "12") (term "0,0,0"))
                  (rule "nnf_imp2or" (formula "9") (term "0,0,0"))
                  (rule "nnf_imp2or" (formula "7") (term "0,0,0"))
                  (rule "nnf_imp2or" (formula "17") (term "0"))
                  (rule "nnf_notAnd" (formula "24") (term "0,0"))
                  (rule "inEqSimp_notLeq" (formula "24") (term "0,0,0"))
                  (rule "polySimp_rightDist" (formula "24") (term "1,0,0,0,0,0"))
                  (rule "mul_literals" (formula "24") (term "0,1,0,0,0,0,0"))
                  (rule "polySimp_addAssoc" (formula "24") (term "0,0,0,0,0"))
                  (rule "add_literals" (formula "24") (term "0,0,0,0,0,0"))
                  (rule "add_zero_left" (formula "24") (term "0,0,0,0,0"))
                  (rule "inEqSimp_sepPosMonomial1" (formula "24") (term "0,0,0"))
                  (rule "polySimp_mulLiterals" (formula "24") (term "1,0,0,0"))
                  (rule "polySimp_elimOne" (formula "24") (term "1,0,0,0"))
                  (rule "inEqSimp_notGeq" (formula "24") (term "1,0,0"))
                  (rule "mul_literals" (formula "24") (term "1,0,0,1,0,0"))
                  (rule "add_zero_right" (formula "24") (term "0,0,1,0,0"))
                  (rule "inEqSimp_sepPosMonomial0" (formula "24") (term "1,0,0"))
                  (rule "mul_literals" (formula "24") (term "1,1,0,0"))
                  (rule "nnf_notAnd" (formula "17") (term "0,0"))
                  (rule "inEqSimp_notGeq" (formula "17") (term "1,0,0"))
                  (rule "times_zero_1" (formula "17") (term "1,0,0,1,0,0"))
                  (rule "add_zero_right" (formula "17") (term "0,0,1,0,0"))
                  (rule "inEqSimp_sepPosMonomial0" (formula "17") (term "1,0,0"))
                  (rule "mul_literals" (formula "17") (term "1,1,0,0"))
                  (rule "inEqSimp_notLeq" (formula "17") (term "0,0,0"))
                  (rule "polySimp_rightDist" (formula "17") (term "1,0,0,0,0,0"))
                  (rule "mul_literals" (formula "17") (term "0,1,0,0,0,0,0"))
                  (rule "polySimp_addAssoc" (formula "17") (term "0,0,0,0,0"))
                  (rule "add_literals" (formula "17") (term "0,0,0,0,0,0"))
                  (rule "add_zero_left" (formula "17") (term "0,0,0,0,0"))
                  (rule "inEqSimp_sepPosMonomial1" (formula "17") (term "0,0,0"))
                  (rule "polySimp_mulLiterals" (formula "17") (term "1,0,0,0"))
                  (rule "polySimp_elimOne" (formula "17") (term "1,0,0,0"))
                  (rule "nnf_imp2or" (formula "6") (term "1,0,0,0"))
                  (rule "nnf_notAnd" (formula "6") (term "0,0,0,0"))
                   (builtin "One Step Simplification" (formula "6"))
                  (rule "nnf_imp2or" (formula "4") (term "1,0,0,0"))
                  (rule "nnf_notAnd" (formula "4") (term "0,0,0,0"))
                   (builtin "One Step Simplification" (formula "4"))
                  (rule "nnf_notAnd" (formula "11") (term "0,0,0,0"))
                   (builtin "One Step Simplification" (formula "11"))
                  (rule "nnf_notAnd" (formula "8") (term "0,0,0,0"))
                   (builtin "One Step Simplification" (formula "8"))
                  (rule "nnf_notAnd" (formula "5") (term "0,0,0,0"))
                   (builtin "One Step Simplification" (formula "5"))
                  (rule "nnf_notAnd" (formula "12") (term "0,0,0,0"))
                   (builtin "One Step Simplification" (formula "12"))
                  (rule "nnf_imp2or" (formula "9") (term "1,0,0,0"))
                  (rule "nnf_notAnd" (formula "9") (term "0,0,0,0"))
                   (builtin "One Step Simplification" (formula "9"))
                  (rule "nnf_notAnd" (formula "7") (term "0,0,0,0"))
                   (builtin "One Step Simplification" (formula "7"))
                  (rule "nnf_imp2or" (formula "11") (term "1,0,0,0"))
                  (rule "nnf_imp2or" (formula "8") (term "1,0,0,0"))
                  (rule "nnf_imp2or" (formula "5") (term "1,0,0,0"))
                  (rule "nnf_notOr" (formula "6") (term "1,0,0,0,0"))
                  (rule "nnf_imp2or" (formula "12") (term "1,0,0,0"))
                  (rule "nnf_notOr" (formula "4") (term "1,0,0,0,0"))
                  (rule "nnf_notOr" (formula "11") (term "1,0,0,0,0"))
                  (rule "nnf_imp2or" (formula "7") (term "1,0,0,0"))
                  (rule "nnf_notOr" (formula "8") (term "1,0,0,0,0"))
                  (rule "nnf_notOr" (formula "5") (term "1,0,0,0,0"))
                  (rule "nnf_notOr" (formula "12") (term "1,0,0,0,0"))
                  (rule "nnf_notOr" (formula "9") (term "1,0,0,0,0"))
                  (rule "nnf_notOr" (formula "7") (term "1,0,0,0,0"))
                  (rule "nnf_notOr" (formula "4") (term "0,1,0,0,0,0"))
                  (rule "nnf_notOr" (formula "5") (term "0,1,0,0,0,0"))
                  (rule "commute_or_2" (formula "24") (term "0"))
                  (rule "commute_or_2" (formula "17") (term "0"))
                  (rule "cnf_rightDist" (formula "10") (term "0,0"))
                  (rule "distr_forallAnd" (formula "10") (term "0"))
                  (rule "distr_forallAnd" (formula "10"))
                  (rule "andLeft" (formula "10"))
                  (rule "commute_or" (formula "25") (term "0,0"))
                  (rule "commute_or_2" (formula "25") (term "0"))
                  (rule "commute_or" (formula "18") (term "0,0"))
                  (rule "commute_or_2" (formula "18") (term "0"))
                  (rule "commute_or" (formula "11") (term "0,0"))
                  (rule "commute_or_2" (formula "6") (term "0,0,0"))
                  (rule "commute_or_2" (formula "12") (term "0,0,0"))
                  (rule "commute_or" (formula "4") (term "1,0,0,0"))
                  (rule "commute_or_2" (formula "8") (term "0,0,0"))
                  (rule "commute_or_2" (formula "13") (term "0,0,0"))
                  (rule "commute_or_2" (formula "9") (term "0,0,0"))
                  (rule "commute_or_2" (formula "7") (term "0,0,0"))
                  (rule "commute_or_2" (formula "5") (term "0,0,0"))
                  (rule "commute_or_2" (formula "4") (term "0,0,0"))
                  (rule "cnf_rightDist" (formula "10") (term "0,0"))
                  (rule "distr_forallAnd" (formula "10") (term "0"))
                  (rule "distr_forallAnd" (formula "10"))
                  (rule "andLeft" (formula "10"))
                  (rule "commute_or" (formula "11") (term "0,0"))
                  (rule "shift_paren_or" (formula "6") (term "0,0,0,0"))
                  (rule "commute_or_2" (formula "6") (term "0,0,0,0"))
                  (rule "commute_or" (formula "13") (term "1,0,0,0,0"))
                  (rule "cnf_rightDist" (formula "10") (term "0,0"))
                  (rule "distr_forallAnd" (formula "10") (term "0"))
                  (rule "distr_forallAnd" (formula "10"))
                  (rule "andLeft" (formula "10"))
                  (rule "commute_or" (formula "11") (term "0,0"))
                  (rule "shift_paren_or" (formula "8") (term "0,0,0,0"))
                  (rule "commute_or_2" (formula "8") (term "0,0,0,0"))
                  (rule "commute_or" (formula "15") (term "1,0,0,0,0"))
                  (rule "commute_or" (formula "9") (term "1,0,0,0,0"))
                  (rule "shift_paren_or" (formula "7") (term "0,0,0,0"))
                  (rule "commute_or_2" (formula "7") (term "0,0,0,0"))
                  (rule "shift_paren_or" (formula "5") (term "0,0,0,0"))
                  (rule "shift_paren_or" (formula "4") (term "0,0,0,0"))
                  (rule "commute_or_2" (formula "5") (term "0,0,0,0"))
                  (rule "shift_paren_or" (formula "14") (term "0,0,0,0"))
                  (rule "commute_and" (formula "6") (term "1,0,0,0"))
                  (rule "commute_and" (formula "14") (term "1,0,0,0"))
                  (rule "commute_and" (formula "8") (term "1,0,0,0"))
                  (rule "commute_and" (formula "15") (term "1,0,0,0"))
                  (rule "shift_paren_or" (formula "15") (term "0,0,0,0"))
                  (rule "shift_paren_or" (formula "9") (term "0,0,0,0"))
                  (rule "commute_and" (formula "9") (term "1,0,0,0"))
                  (rule "commute_and" (formula "7") (term "1,0,0,0"))
                  (rule "cnf_rightDist" (formula "4") (term "0,0,0"))
                  (rule "distr_forallAnd" (formula "4") (term "0,0"))
                  (rule "distr_forallAnd" (formula "4") (term "0"))
                  (rule "distr_forallAnd" (formula "4"))
                  (rule "andLeft" (formula "4"))
                  (rule "shift_paren_or" (formula "5") (term "0,0,0"))
                   (builtin "One Step Simplification" (formula "5"))
                  (rule "eqSymm" (formula "5") (term "1,1,0,0,0"))
                  (rule "castedGetAny" (formula "5") (term "1,0,0,0,0,0,0"))
                  (rule "castedGetAny" (formula "5") (term "0,0,1,0,0,0"))
                  (rule "castedGetAny" (formula "5") (term "0,1,1,0,0,0"))
                   (builtin "One Step Simplification" (formula "5"))
                  (rule "true_left" (formula "5"))
                  (rule "cnf_rightDist" (formula "5") (term "0,0,0"))
                  (rule "distr_forallAnd" (formula "5") (term "0,0"))
                  (rule "distr_forallAnd" (formula "5") (term "0"))
                  (rule "distr_forallAnd" (formula "5"))
                  (rule "andLeft" (formula "5"))
                  (rule "shift_paren_or" (formula "6") (term "0,0,0"))
                   (builtin "One Step Simplification" (formula "6"))
                  (rule "eqSymm" (formula "6") (term "1,1,0,0,0"))
                  (rule "castedGetAny" (formula "6") (term "0,0,1,0,0,0"))
                  (rule "castedGetAny" (formula "6") (term "1,0,0,0,0,0,0"))
                  (rule "castedGetAny" (formula "6") (term "0,1,1,0,0,0"))
                   (builtin "One Step Simplification" (formula "6"))
                  (rule "true_left" (formula "6"))
                  (rule "cnf_rightDist" (formula "6") (term "0,0,0"))
                  (rule "distr_forallAnd" (formula "6") (term "0,0"))
                  (rule "distr_forallAnd" (formula "6") (term "0"))
                  (rule "distr_forallAnd" (formula "6"))
                  (rule "andLeft" (formula "6"))
                  (rule "commute_or_2" (formula "6") (term "0,0,0"))
                   (builtin "One Step Simplification" (formula "6"))
                  (rule "eqSymm" (formula "6") (term "1,0,0,0,0"))
                  (rule "castedGetAny" (formula "6") (term "1,0,0,1,0,0,0"))
                  (rule "castedGetAny" (formula "6") (term "0,0,0,0,0,0"))
                  (rule "castedGetAny" (formula "6") (term "0,1,0,0,0,0"))
                   (builtin "One Step Simplification" (formula "6"))
                  (rule "true_left" (formula "6"))
                  (rule "cnf_rightDist" (formula "14") (term "0,0,0"))
                  (rule "distr_forallAnd" (formula "14") (term "0,0"))
                  (rule "distr_forallAnd" (formula "14") (term "0"))
                  (rule "distr_forallAnd" (formula "14"))
                  (rule "andLeft" (formula "14"))
                  (rule "commute_or_2" (formula "14") (term "0,0,0"))
                   (builtin "One Step Simplification" (formula "14"))
                  (rule "eqSymm" (formula "14") (term "1,0,0,0,0"))
                  (rule "castedGetAny" (formula "14") (term "1,0,0,1,0,0,0"))
                  (rule "castedGetAny" (formula "14") (term "0,0,0,0,0,0"))
                  (rule "castedGetAny" (formula "14") (term "0,1,0,0,0,0"))
                   (builtin "One Step Simplification" (formula "14"))
                  (rule "true_left" (formula "14"))
                  (rule "cnf_rightDist" (formula "8") (term "0,0,0"))
                  (rule "distr_forallAnd" (formula "8") (term "0,0"))
                  (rule "distr_forallAnd" (formula "8") (term "0"))
                  (rule "distr_forallAnd" (formula "8"))
                  (rule "andLeft" (formula "8"))
                  (rule "cnf_rightDist" (formula "14") (term "0,0,0"))
                  (rule "distr_forallAnd" (formula "14") (term "0,0"))
                  (rule "distr_forallAnd" (formula "14") (term "0"))
                  (rule "distr_forallAnd" (formula "14"))
                  (rule "andLeft" (formula "14"))
                  (rule "cnf_rightDist" (formula "9") (term "0,0,0"))
                  (rule "distr_forallAnd" (formula "9") (term "0,0"))
                  (rule "distr_forallAnd" (formula "9") (term "0"))
                  (rule "distr_forallAnd" (formula "9"))
                  (rule "andLeft" (formula "9"))
                  (rule "cnf_rightDist" (formula "7") (term "0,0,0"))
                  (rule "distr_forallAnd" (formula "7") (term "0,0"))
                  (rule "distr_forallAnd" (formula "7") (term "0"))
                  (rule "distr_forallAnd" (formula "7"))
                  (rule "andLeft" (formula "7"))
                  (rule "shift_paren_or" (formula "6") (term "0,0,0"))
                   (builtin "One Step Simplification" (formula "6"))
                  (rule "eqSymm" (formula "6") (term "1,1,0,0,0"))
                  (rule "castedGetAny" (formula "6") (term "0,0,1,0,0,0"))
                  (rule "castedGetAny" (formula "6") (term "0,0,0,0,0,0"))
                  (rule "castedGetAny" (formula "6") (term "0,1,1,0,0,0"))
                   (builtin "One Step Simplification" (formula "6"))
                  (rule "true_left" (formula "6"))
                  (rule "cnf_rightDist" (formula "4") (term "0,0,0"))
                  (rule "distr_forallAnd" (formula "4") (term "0,0"))
                   (builtin "One Step Simplification" (formula "4"))
                  (rule "commute_or_2" (formula "7") (term "0,0,0"))
                   (builtin "One Step Simplification" (formula "7"))
                  (rule "eqSymm" (formula "7") (term "1,0,0,0,0"))
                  (rule "castedGetAny" (formula "7") (term "0,0,0,0,0,0"))
                  (rule "castedGetAny" (formula "7") (term "1,0,0,1,0,0,0"))
                  (rule "castedGetAny" (formula "7") (term "0,1,0,0,0,0"))
                   (builtin "One Step Simplification" (formula "7"))
                  (rule "true_left" (formula "7"))
                  (rule "commute_or_2" (formula "12") (term "0,0,0"))
                   (builtin "One Step Simplification" (formula "12"))
                  (rule "eqSymm" (formula "12") (term "1,0,0,0,0"))
                  (rule "castedGetAny" (formula "12") (term "0,0,0,0,0,0"))
                  (rule "castedGetAny" (formula "12") (term "1,0,0,1,0,0,0"))
                  (rule "castedGetAny" (formula "12") (term "0,1,0,0,0,0"))
                   (builtin "One Step Simplification" (formula "12"))
                  (rule "true_left" (formula "12"))
                  (rule "commute_or_2" (formula "7") (term "0,0,0"))
                   (builtin "One Step Simplification" (formula "7"))
                  (rule "eqSymm" (formula "7") (term "1,0,0,0,0"))
                  (rule "castedGetAny" (formula "7") (term "0,0,0,0,0,0"))
                  (rule "castedGetAny" (formula "7") (term "1,0,0,1,0,0,0"))
                  (rule "castedGetAny" (formula "7") (term "0,1,0,0,0,0"))
                   (builtin "One Step Simplification" (formula "7"))
                  (rule "true_left" (formula "7"))
                  (rule "cnf_rightDist" (formula "5") (term "0,0,0"))
                  (rule "distr_forallAnd" (formula "5") (term "0,0"))
                   (builtin "One Step Simplification" (formula "5"))
                  (rule "commute_or_2" (formula "6") (term "0,0,0"))
                   (builtin "One Step Simplification" (formula "6"))
                  (rule "eqSymm" (formula "6") (term "1,0,0,0,0"))
                  (rule "castedGetAny" (formula "6") (term "1,0,0,1,0,0,0"))
                  (rule "castedGetAny" (formula "6") (term "0,0,0,0,0,0"))
                  (rule "castedGetAny" (formula "6") (term "0,1,0,0,0,0"))
                   (builtin "One Step Simplification" (formula "6"))
                  (rule "true_left" (formula "6"))
                  (rule "shift_paren_or" (formula "10") (term "0,0,0"))
                   (builtin "One Step Simplification" (formula "10"))
                  (rule "eqSymm" (formula "10") (term "1,1,0,0,0"))
                  (rule "castedGetAny" (formula "10") (term "0,0,0,0,0,0"))
                  (rule "castedGetAny" (formula "10") (term "0,0,1,0,0,0"))
                  (rule "castedGetAny" (formula "10") (term "0,1,1,0,0,0"))
                   (builtin "One Step Simplification" (formula "10"))
                  (rule "true_left" (formula "10"))
                  (rule "shift_paren_or" (formula "4") (term "0,0,0"))
                   (builtin "One Step Simplification" (formula "4"))
                  (rule "eqSymm" (formula "4") (term "1,1,0,0,0"))
                  (rule "castedGetAny" (formula "4") (term "0,0,1,0,0,0"))
                  (rule "castedGetAny" (formula "4") (term "1,0,0,0,0,0,0"))
                  (rule "castedGetAny" (formula "4") (term "0,1,1,0,0,0"))
                   (builtin "One Step Simplification" (formula "4"))
                  (rule "true_left" (formula "4"))
                  (rule "lenNonNegative" (formula "25") (term "0"))
                  (rule "inEqSimp_commuteLeq" (formula "25"))
                  (rule "applyEq" (formula "25") (term "0") (ifseqformula "26"))
                  (rule "inEqSimp_subsumption1" (formula "24") (ifseqformula "25"))
                  (rule "leq_literals" (formula "24") (term "0"))
                   (builtin "One Step Simplification" (formula "24"))
                  (rule "true_left" (formula "24"))
                  (rule "shift_paren_or" (formula "4") (term "0,0,0"))
                   (builtin "One Step Simplification" (formula "4"))
                  (rule "eqSymm" (formula "4") (term "1,1,0,0,0"))
                  (rule "castedGetAny" (formula "4") (term "1,0,0,0,0,0,0"))
                  (rule "castedGetAny" (formula "4") (term "0,0,1,0,0,0"))
                  (rule "castedGetAny" (formula "4") (term "0,1,1,0,0,0"))
                   (builtin "One Step Simplification" (formula "4"))
                  (rule "true_left" (formula "4"))
                  (rule "allLeft" (formula "19") (inst "t=i_1"))
                  (rule "replace_known_left" (formula "19") (term "0,0,0") (ifseqformula "1"))
                   (builtin "One Step Simplification" (formula "19"))
                  (rule "inEqSimp_commuteGeq" (formula "19") (term "1"))
                  (rule "inEqSimp_contradInEq1" (formula "19") (term "0") (ifseqformula "2"))
                  (rule "qeq_literals" (formula "19") (term "0,0"))
                   (builtin "One Step Simplification" (formula "19"))
                  (rule "inEqSimp_contradInEq0" (formula "3") (ifseqformula "19"))
                  (rule "andLeft" (formula "3"))
                  (rule "inEqSimp_homoInEq1" (formula "3"))
                  (rule "polySimp_pullOutFactor1b" (formula "3") (term "0"))
                  (rule "add_literals" (formula "3") (term "1,1,0"))
                  (rule "times_zero_1" (formula "3") (term "1,0"))
                  (rule "add_literals" (formula "3") (term "0"))
                  (rule "leq_literals" (formula "3"))
                  (rule "closeFalse" (formula "3"))
               )
            )
            (branch
                (builtin "One Step Simplification" (formula "40"))
               (rule "inEqSimp_ltToLeq" (formula "14") (term "0,0,0"))
               (rule "polySimp_mulComm0" (formula "14") (term "1,0,0,0,0,0"))
               (rule "inEqSimp_ltToLeq" (formula "21") (term "0,0,0"))
               (rule "polySimp_mulComm0" (formula "21") (term "1,0,0,0,0,0"))
               (rule "inEqSimp_sepPosMonomial0" (formula "14") (term "0,0,0"))
               (rule "polySimp_mulComm0" (formula "14") (term "1,0,0,0"))
               (rule "polySimp_rightDist" (formula "14") (term "1,0,0,0"))
               (rule "mul_literals" (formula "14") (term "0,1,0,0,0"))
               (rule "polySimp_mulLiterals" (formula "14") (term "1,1,0,0,0"))
               (rule "polySimp_elimOne" (formula "14") (term "1,1,0,0,0"))
               (rule "inEqSimp_sepPosMonomial0" (formula "21") (term "0,0,0"))
               (rule "polySimp_mulComm0" (formula "21") (term "1,0,0,0"))
               (rule "polySimp_rightDist" (formula "21") (term "1,0,0,0"))
               (rule "mul_literals" (formula "21") (term "0,1,0,0,0"))
               (rule "polySimp_mulLiterals" (formula "21") (term "1,1,0,0,0"))
               (rule "polySimp_elimOne" (formula "21") (term "1,1,0,0,0"))
               (rule "nnf_imp2or" (formula "7") (term "0,0"))
                (builtin "One Step Simplification" (formula "7"))
               (rule "nnf_imp2or" (formula "14") (term "0"))
               (rule "nnf_imp2or" (formula "21") (term "0"))
               (rule "nnf_imp2or" (formula "3") (term "0,0,0"))
               (rule "nnf_imp2or" (formula "8") (term "0,0,0"))
               (rule "nnf_imp2or" (formula "6") (term "0,0,0"))
               (rule "nnf_imp2or" (formula "9") (term "0,0,0"))
               (rule "nnf_imp2or" (formula "5") (term "0,0,0"))
               (rule "nnf_imp2or" (formula "4") (term "0,0,0"))
               (rule "nnf_imp2or" (formula "2") (term "0,0,0"))
               (rule "nnf_imp2or" (formula "1") (term "0,0,0"))
               (rule "nnf_notAnd" (formula "14") (term "0,0"))
               (rule "inEqSimp_notLeq" (formula "14") (term "0,0,0"))
               (rule "polySimp_rightDist" (formula "14") (term "1,0,0,0,0,0"))
               (rule "mul_literals" (formula "14") (term "0,1,0,0,0,0,0"))
               (rule "polySimp_addAssoc" (formula "14") (term "0,0,0,0,0"))
               (rule "add_literals" (formula "14") (term "0,0,0,0,0,0"))
               (rule "add_zero_left" (formula "14") (term "0,0,0,0,0"))
               (rule "inEqSimp_sepPosMonomial1" (formula "14") (term "0,0,0"))
               (rule "polySimp_mulLiterals" (formula "14") (term "1,0,0,0"))
               (rule "polySimp_elimOne" (formula "14") (term "1,0,0,0"))
               (rule "inEqSimp_notGeq" (formula "14") (term "1,0,0"))
               (rule "mul_literals" (formula "14") (term "1,0,0,1,0,0"))
               (rule "add_zero_right" (formula "14") (term "0,0,1,0,0"))
               (rule "inEqSimp_sepPosMonomial0" (formula "14") (term "1,0,0"))
               (rule "mul_literals" (formula "14") (term "1,1,0,0"))
               (rule "nnf_notAnd" (formula "21") (term "0,0"))
               (rule "inEqSimp_notGeq" (formula "21") (term "1,0,0"))
               (rule "times_zero_1" (formula "21") (term "1,0,0,1,0,0"))
               (rule "add_zero_right" (formula "21") (term "0,0,1,0,0"))
               (rule "inEqSimp_sepPosMonomial0" (formula "21") (term "1,0,0"))
               (rule "mul_literals" (formula "21") (term "1,1,0,0"))
               (rule "inEqSimp_notLeq" (formula "21") (term "0,0,0"))
               (rule "polySimp_rightDist" (formula "21") (term "1,0,0,0,0,0"))
               (rule "mul_literals" (formula "21") (term "0,1,0,0,0,0,0"))
               (rule "polySimp_addAssoc" (formula "21") (term "0,0,0,0,0"))
               (rule "add_literals" (formula "21") (term "0,0,0,0,0,0"))
               (rule "add_zero_left" (formula "21") (term "0,0,0,0,0"))
               (rule "inEqSimp_sepPosMonomial1" (formula "21") (term "0,0,0"))
               (rule "polySimp_mulLiterals" (formula "21") (term "1,0,0,0"))
               (rule "polySimp_elimOne" (formula "21") (term "1,0,0,0"))
               (rule "nnf_imp2or" (formula "3") (term "1,0,0,0"))
               (rule "nnf_notAnd" (formula "3") (term "0,0,0,0"))
                (builtin "One Step Simplification" (formula "3"))
               (rule "nnf_imp2or" (formula "8") (term "1,0,0,0"))
               (rule "nnf_notAnd" (formula "8") (term "0,0,0,0"))
                (builtin "One Step Simplification" (formula "8"))
               (rule "nnf_notAnd" (formula "6") (term "0,0,0,0"))
                (builtin "One Step Simplification" (formula "6"))
               (rule "nnf_imp2or" (formula "9") (term "1,0,0,0"))
               (rule "nnf_notAnd" (formula "9") (term "0,0,0,0"))
                (builtin "One Step Simplification" (formula "9"))
               (rule "nnf_imp2or" (formula "5") (term "1,0,0,0"))
               (rule "nnf_notAnd" (formula "5") (term "0,0,0,0"))
                (builtin "One Step Simplification" (formula "5"))
               (rule "nnf_imp2or" (formula "4") (term "1,0,0,0"))
               (rule "nnf_notAnd" (formula "4") (term "0,0,0,0"))
                (builtin "One Step Simplification" (formula "4"))
               (rule "nnf_imp2or" (formula "2") (term "1,0,0,0"))
               (rule "nnf_notAnd" (formula "2") (term "0,0,0,0"))
                (builtin "One Step Simplification" (formula "2"))
               (rule "nnf_imp2or" (formula "1") (term "1,0,0,0"))
               (rule "nnf_notAnd" (formula "1") (term "0,0,0,0"))
                (builtin "One Step Simplification" (formula "1"))
               (rule "nnf_imp2or" (formula "6") (term "1,0,0,0"))
               (rule "nnf_notOr" (formula "3") (term "1,0,0,0,0"))
               (rule "nnf_notOr" (formula "8") (term "1,0,0,0,0"))
               (rule "nnf_notOr" (formula "6") (term "1,0,0,0,0"))
               (rule "nnf_notOr" (formula "9") (term "1,0,0,0,0"))
               (rule "nnf_notOr" (formula "5") (term "1,0,0,0,0"))
               (rule "nnf_notOr" (formula "4") (term "1,0,0,0,0"))
               (rule "nnf_notOr" (formula "2") (term "1,0,0,0,0"))
               (rule "nnf_notOr" (formula "1") (term "1,0,0,0,0"))
               (rule "nnf_notOr" (formula "2") (term "0,1,0,0,0,0"))
               (rule "nnf_notOr" (formula "1") (term "0,1,0,0,0,0"))
               (rule "Static_class_invariant_axiom_for_org_apache_commons_csv_CSVFormat" (formula "40"))
               (rule "notRight" (formula "40"))
               (rule "pullOutSelect" (formula "1") (term "0") (inst "selectSK=org_apache_commons_csv_CSVFormat_RFC4180_0"))
               (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "25"))
                (builtin "One Step Simplification" (formula "1"))
               (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "19"))
                (builtin "One Step Simplification" (formula "1"))
               (rule "applyEqReverse" (formula "2") (term "0") (ifseqformula "1"))
               (rule "close" (formula "39") (ifseqformula "2"))
            )
         )
         (branch
             (builtin "One Step Simplification" (formula "40"))
            (rule "wellFormedAnonEQ" (formula "40") (ifseqformula "23"))
            (rule "wellFormedAnonEQ" (formula "40") (term "0") (ifseqformula "17"))
            (rule "replace_known_left" (formula "40") (term "1") (ifseqformula "22"))
             (builtin "One Step Simplification" (formula "40") (ifInst ""  (formula "10")) (ifInst ""  (formula "16")))
            (rule "closeTrue" (formula "40"))
         )
      )
      (branch "Body Preserves Invariant"
          (builtin "One Step Simplification" (formula "29"))
          (builtin "One Step Simplification" (formula "42"))
         (rule "expand_inInt" (formula "29") (term "1"))
         (rule "replace_int_MIN" (formula "29") (term "0,1,1"))
         (rule "replace_int_MAX" (formula "29") (term "1,0,1"))
         (rule "impRight" (formula "42"))
         (rule "andLeft" (formula "30"))
         (rule "andLeft" (formula "31"))
         (rule "andLeft" (formula "30"))
         (rule "andLeft" (formula "30"))
         (rule "andLeft" (formula "30"))
         (rule "andLeft" (formula "30"))
         (rule "andLeft" (formula "30"))
         (rule "andLeft" (formula "30"))
         (rule "andLeft" (formula "31"))
         (rule "andLeft" (formula "30"))
         (rule "eqSymm" (formula "52") (term "1,0,0,1,0,1,1,0,1"))
         (rule "translateJavaSubInt" (formula "52") (term "0,1,1,1,0"))
         (rule "translateJavaSubInt" (formula "52") (term "0,1,1,1,0,1"))
         (rule "eqSymm" (formula "52") (term "1,0,0,0,0,0,1,1,0,1"))
         (rule "eqSymm" (formula "34"))
         (rule "elementOfSingleton" (formula "52") (term "0,0,0,0,1,0,1,1,0,1"))
         (rule "castedGetAny" (formula "52") (term "0,0,1,0,1,0,0,0,1,1,0,1"))
         (rule "castedGetAny" (formula "52") (term "0,0,1,0,1,0,0,0,0,1,1,0,1"))
         (rule "castedGetAny" (formula "36") (term "0,0,1,0"))
         (rule "castedGetAny" (formula "35") (term "0,0,1,0"))
         (rule "inEqSimp_commuteLeq" (formula "52") (term "1,1,0,0,0,0,0,0,0,1,1,0,1"))
         (rule "inEqSimp_commuteLeq" (formula "52") (term "0,0,0,1,0,0,0,1,1,0,1"))
         (rule "inEqSimp_commuteLeq" (formula "52") (term "0,0,0,1,0,0,0,0,1,1,0,1"))
         (rule "inEqSimp_commuteLeq" (formula "52") (term "0,1,0,0,0,0,0,0,0,1,1,0,1"))
         (rule "inEqSimp_commuteLeq" (formula "39"))
         (rule "inEqSimp_commuteLeq" (formula "36") (term "0,0,0"))
         (rule "inEqSimp_commuteLeq" (formula "35") (term "0,0,0"))
         (rule "inEqSimp_commuteLeq" (formula "31"))
         (rule "inEqSimp_commuteLeq" (formula "32"))
         (rule "variableDeclarationAssign" (formula "1") (term "1"))
         (rule "variableDeclarationAssign" (formula "52") (term "1"))
         (rule "variableDeclaration" (formula "1") (term "1") (newnames "b_0_1"))
         (rule "variableDeclaration" (formula "52") (term "1") (newnames "exc_54"))
         (rule "assignment" (formula "52") (term "1"))
          (builtin "One Step Simplification" (formula "52"))
         (rule "variableDeclaration" (formula "52") (term "1") (newnames "thrownExc"))
         (rule "blockThrow" (formula "52") (term "1,0,0,1"))
         (rule "blockThrow" (formula "52") (term "1,0,0,1"))
         (rule "pullOutSelect" (formula "36") (term "0,1,1,0,0") (inst "selectSK=java_util_Collection_seq_2"))
         (rule "applyEq" (formula "37") (term "0,0,0,1,0") (ifseqformula "36"))
         (rule "simplifySelectOfAnon" (formula "36"))
          (builtin "One Step Simplification" (formula "36") (ifInst ""  (formula "42")))
         (rule "selectCreatedOfAnonAsFormulaEQ" (formula "36") (term "0,1,0,0") (ifseqformula "24"))
         (rule "selectCreatedOfAnonAsFormulaEQ" (formula "36") (term "0,0,1,0,0") (ifseqformula "18"))
         (rule "replace_known_left" (formula "36") (term "1,0,0,1,0,0") (ifseqformula "20"))
          (builtin "One Step Simplification" (formula "36") (ifInst ""  (formula "41")))
         (rule "elementOfSingleton" (formula "36") (term "0,0"))
          (builtin "One Step Simplification" (formula "36"))
         (rule "applyEqReverse" (formula "37") (term "0,1,1,0,0") (ifseqformula "36"))
         (rule "applyEqReverse" (formula "37") (term "0,0,0,1,0") (ifseqformula "36"))
         (rule "hideAuxiliaryEq" (formula "36"))
         (rule "pullOutSelect" (formula "35") (term "0,1,1,0,0") (inst "selectSK=java_util_Collection_seq_3"))
         (rule "applyEq" (formula "34") (term "0,0") (ifseqformula "35"))
         (rule "applyEq" (formula "36") (term "0,0,0,1,0") (ifseqformula "35"))
         (rule "simplifySelectOfAnon" (formula "35"))
          (builtin "One Step Simplification" (formula "35") (ifInst ""  (formula "52")))
         (rule "replaceKnownSelect_taclet00_2" (formula "35") (term "2,0"))
         (rule "replaceKnownAuxiliaryConstant_taclet00_4" (formula "35") (term "2,0"))
         (rule "selectCreatedOfAnonAsFormulaEQ" (formula "35") (term "0,1,0,0") (ifseqformula "24"))
         (rule "selectCreatedOfAnonAsFormulaEQ" (formula "35") (term "0,0,1,0,0") (ifseqformula "18"))
         (rule "replace_known_left" (formula "35") (term "0,0,0,1,0,0") (ifseqformula "13"))
          (builtin "One Step Simplification" (formula "35"))
         (rule "elementOfSingleton" (formula "35") (term "0,0"))
          (builtin "One Step Simplification" (formula "35"))
         (rule "eqSymm" (formula "35") (term "0,0"))
         (rule "applyEq" (formula "36") (term "1,1,0,0") (ifseqformula "34"))
         (rule "boxToDiamond" (formula "1") (term "1"))
          (builtin "One Step Simplification" (formula "1"))
         (rule "notLeft" (formula "1"))
         (rule "expand_subJint" (formula "53") (term "0,1,1,1,0,0"))
         (rule "polySimp_elimSub" (formula "53") (term "0,0,1,1,1,0,0"))
         (rule "polySimp_addComm0" (formula "53") (term "0,0,1,1,1,0,0"))
         (rule "expand_subJint" (formula "53") (term "0,1,1,1,0,1"))
         (rule "polySimp_elimSub" (formula "53") (term "0,0,1,1,1,0,1"))
         (rule "polySimp_addComm0" (formula "53") (term "0,0,1,1,1,0,1"))
         (rule "expand_moduloInteger" (formula "53") (term "0,1,1,1,0,0"))
         (rule "replace_int_RANGE" (formula "53") (term "1,1,0,1,1,1,0,0"))
         (rule "replace_int_HALFRANGE" (formula "53") (term "0,0,1,0,1,1,1,0,0"))
         (rule "replace_int_MIN" (formula "53") (term "0,0,1,1,1,0,0"))
         (rule "polySimp_addAssoc" (formula "53") (term "0,1,0,1,1,1,0,0"))
         (rule "expand_moduloInteger" (formula "53") (term "0,1,1,1,0,1"))
         (rule "replace_int_MIN" (formula "53") (term "0,0,1,1,1,0,1"))
         (rule "replace_int_HALFRANGE" (formula "53") (term "0,0,1,0,1,1,1,0,1"))
         (rule "replace_int_RANGE" (formula "53") (term "1,1,0,1,1,1,0,1"))
         (rule "polySimp_addAssoc" (formula "53") (term "0,1,0,1,1,1,0,1"))
         (rule "Static_class_invariant_axiom_for_org_apache_commons_csv_CSVFormat" (formula "37"))
         (rule "notLeft" (formula "37"))
         (rule "pullOutSelect" (formula "39") (term "0") (inst "selectSK=org_apache_commons_csv_CSVFormat_RFC4180_0"))
         (rule "simplifySelectOfAnon" (formula "1"))
          (builtin "One Step Simplification" (formula "1"))
         (rule "elementOfSingleton" (formula "1") (term "0,0"))
          (builtin "One Step Simplification" (formula "1"))
         (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "24"))
          (builtin "One Step Simplification" (formula "1"))
         (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "18"))
          (builtin "One Step Simplification" (formula "1"))
         (rule "applyEqReverse" (formula "40") (term "0") (ifseqformula "1"))
         (rule "hideAuxiliaryEq" (formula "1"))
         (rule "Class_invariant_axiom_for_java_util_ArrayList" (formula "32"))
         (rule "true_left" (formula "32"))
         (rule "Class_invariant_axiom_for_java_util_ArrayList" (formula "29"))
         (rule "true_left" (formula "29"))
         (rule "commute_and" (formula "34") (term "0,0"))
         (rule "commute_and" (formula "33") (term "0,0"))
         (rule "Class_axiom_0_in_de_polyas_core3_open_cred_CredTool" (inst "seq=seq") (inst "i=i_2") (inst "str=str") (inst "seq_0=seq_0") (inst "i_0=i_0") (inst "obj=obj") (inst "seq_1=seq_1") (inst "i_1=i_1") (inst "sv_heap=anon_heap_size<<anonHeapFunction>>"))
         (rule "andLeft" (formula "1"))
         (rule "andLeft" (formula "1"))
         (rule "castedGetAny" (formula "3") (term "0,1,1,0,0,0"))
         (rule "castedGetAny" (formula "2") (term "0,1,1,0,0,0"))
         (rule "castedGetAny" (formula "1") (term "0,0,0,0,0"))
         (rule "castedGetAny" (formula "1") (term "0,0,0,0,1,0,0"))
         (rule "castedGetAny" (formula "1") (term "0,0,1,1,0,1,0,0"))
         (rule "castedGetAny" (formula "1") (term "0,0,0,1,0,1,0,0"))
         (rule "Class_axiom_0_in_de_polyas_core3_open_cred_CredTool" (inst "seq=seq") (inst "i=i_2") (inst "str=str") (inst "seq_0=seq_0") (inst "i_0=i_0") (inst "obj=obj") (inst "seq_1=seq_1") (inst "i_1=i_1") (inst "sv_heap=anon(heapAfter_asList,
     empty,
     anon_heap_size<<anonHeapFunction>>)"))
          (builtin "One Step Simplification" (formula "1"))
         (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,1,0,0,0,0,0,1") (ifseqformula "21"))
         (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,1,0,0,0,0,0,1,0") (ifseqformula "21"))
         (rule "andLeft" (formula "1"))
         (rule "andLeft" (formula "1"))
         (rule "castedGetAny" (formula "3") (term "0,1,1,0,0,0"))
         (rule "castedGetAny" (formula "1") (term "0,0,0,0,0"))
         (rule "castedGetAny" (formula "1") (term "0,0,0,0,1,0,0"))
         (rule "castedGetAny" (formula "1") (term "0,0,0,1,0,1,0,0"))
         (rule "castedGetAny" (formula "1") (term "0,0,1,1,0,1,0,0"))
         (rule "castedGetAny" (formula "1") (term "0,1,1,0,0,0"))
         (rule "Class_axiom_0_in_de_polyas_core3_open_cred_CredTool" (inst "seq=seq") (inst "i=i_2") (inst "str=str") (inst "seq_0=seq_0") (inst "i_0=i_0") (inst "obj=obj") (inst "seq_1=seq_1") (inst "i_1=i_1") (inst "sv_heap=heapAfter_size"))
         (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "1,0,0,0,0,0,1") (ifseqformula "29"))
         (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "1,0,0,0,0,0,1,0") (ifseqformula "29"))
         (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,1,0,0,0,0,0,1") (ifseqformula "23"))
         (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,1,0,0,0,0,0,1,0") (ifseqformula "23"))
         (rule "andLeft" (formula "1"))
         (rule "andLeft" (formula "1"))
         (rule "castedGetAny" (formula "3") (term "0,1,1,0,0,0"))
         (rule "castedGetAny" (formula "1") (term "0,0,1,1,0,1,0,0"))
         (rule "castedGetAny" (formula "1") (term "0,0,0,0,0"))
         (rule "castedGetAny" (formula "1") (term "0,0,0,0,1,0,0"))
         (rule "castedGetAny" (formula "1") (term "0,0,0,1,0,1,0,0"))
         (rule "castedGetAny" (formula "1") (term "0,1,1,0,0,0"))
         (rule "less_than_comparison_simple" (formula "42") (term "1"))
          (builtin "One Step Simplification" (formula "42"))
         (rule "commute_and" (formula "5") (term "0,0,0,0"))
         (rule "commute_and" (formula "4") (term "0,0,0,0"))
         (rule "shift_paren_or" (formula "2") (term "0,0,0,0,0"))
         (rule "shift_paren_or" (formula "1") (term "0,0,0,0,0"))
         (rule "lenNonNegative" (formula "26") (term "1,0,0,0"))
         (rule "inEqSimp_commuteLeq" (formula "26"))
         (rule "shift_paren_and" (formula "3") (term "0,1,0,0"))
          (builtin "One Step Simplification" (formula "3"))
         (rule "shift_paren_or" (formula "2") (term "0,0,0,0,0,0"))
         (rule "commute_and" (formula "2") (term "0,0,0,0"))
         (rule "shift_paren_or" (formula "1") (term "0,0,0,0,0,0"))
         (rule "commute_and" (formula "1") (term "0,0,0,0"))
         (rule "lenNonNegative" (formula "32") (term "0"))
         (rule "inEqSimp_commuteLeq" (formula "32"))
         (rule "applyEq" (formula "32") (term "0") (ifseqformula "33"))
         (rule "methodCallEmpty" (formula "44") (term "1"))
          (builtin "One Step Simplification" (formula "44"))
         (rule "onlyCreatedObjectsAreReferenced" (formula "54") (term "0") (ifseqformula "15"))
         (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "55"))
          (builtin "One Step Simplification" (formula "1"))
         (rule "shift_paren_and" (formula "4") (term "1,0,0"))
         (rule "emptyModality" (formula "44") (term "1"))
          (builtin "One Step Simplification" (formula "44"))
         (rule "notRight" (formula "44"))
         (rule "ifUnfold" (formula "57") (term "1") (inst "#boolv=x"))
         (rule "variableDeclaration" (formula "57") (term "1") (newnames "x"))
         (rule "less_than_comparison_simple" (formula "57") (term "1"))
          (builtin "One Step Simplification" (formula "57"))
         (rule "replace_known_left" (formula "57") (term "0,0,1,0") (ifseqformula "1"))
          (builtin "One Step Simplification" (formula "57"))
         (rule "onlyCreatedObjectsAreReferenced" (formula "53") (term "0") (ifseqformula "16"))
         (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "54"))
          (builtin "One Step Simplification" (formula "1"))
         (rule "onlyCreatedObjectsAreReferenced" (formula "49") (term "0") (ifseqformula "17"))
         (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "50"))
          (builtin "One Step Simplification" (formula "1"))
         (rule "onlyCreatedObjectsAreReferenced" (formula "23") (term "0") (ifseqformula "18"))
         (rule "applyEq" (formula "23") (term "1,0,1") (ifseqformula "24"))
         (rule "replace_known_left" (formula "23") (term "1") (ifseqformula "2"))
          (builtin "One Step Simplification" (formula "23"))
         (rule "true_left" (formula "23"))
         (rule "onlyCreatedObjectsAreReferenced" (formula "49") (term "0") (ifseqformula "18"))
         (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "50"))
          (builtin "One Step Simplification" (formula "1"))
         (rule "onlyCreatedObjectsAreReferenced" (formula "52") (term "0") (ifseqformula "19"))
         (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "53"))
          (builtin "One Step Simplification" (formula "1"))
         (rule "Class_axiom_0_in_de_polyas_core3_open_cred_CredTool" (inst "seq=seq") (inst "i=i_2") (inst "str=str") (inst "seq_0=seq_0") (inst "i_0=i_0") (inst "obj=obj") (inst "seq_1=seq_1") (inst "i_1=i_1") (inst "sv_heap=anon_heap_LOOP<<anonHeapFunction>>"))
         (rule "andLeft" (formula "1"))
         (rule "andLeft" (formula "1"))
         (rule "castedGetAny" (formula "3") (term "0,1,1,0,0,0"))
         (rule "castedGetAny" (formula "1") (term "0,0,0,0,0"))
         (rule "castedGetAny" (formula "1") (term "0,0,0,1,0,1,0,0"))
         (rule "castedGetAny" (formula "2") (term "0,1,1,0,0,0"))
         (rule "castedGetAny" (formula "1") (term "0,0,0,0,1,0,0"))
         (rule "castedGetAny" (formula "1") (term "0,0,1,1,0,1,0,0"))
         (rule "commute_and" (formula "3") (term "0,0,0,0"))
         (rule "commute_and" (formula "2") (term "0,0,0,0"))
         (rule "Class_axiom_0_in_de_polyas_core3_open_cred_CredTool" (inst "seq=seq") (inst "i=i_2") (inst "str=str") (inst "seq_0=seq_0") (inst "i_0=i_0") (inst "obj=obj") (inst "seq_1=seq_1") (inst "i_1=i_1") (inst "sv_heap=anon(heapAfter_size,
     singleton(result_46, java.util.Collection::$seq),
     anon_heap_LOOP<<anonHeapFunction>>)"))
          (builtin "One Step Simplification" (formula "1"))
         (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,1,0,0,0,0,0,1") (ifseqformula "38"))
         (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,0,1,0,0,0,0,0,1") (ifseqformula "31"))
         (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,1,0,0,0,0,0,1,0") (ifseqformula "38"))
         (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,0,1,0,0,0,0,0,1,0") (ifseqformula "31"))
         (rule "andLeft" (formula "1"))
         (rule "andLeft" (formula "1"))
         (rule "castedGetAny" (formula "3") (term "0,1,1,0,0,0"))
         (rule "castedGetAny" (formula "1") (term "0,0,1,1,0,1,0,0"))
         (rule "castedGetAny" (formula "2") (term "0,1,1,0,0,0"))
         (rule "castedGetAny" (formula "1") (term "0,0,0,1,0,1,0,0"))
         (rule "castedGetAny" (formula "1") (term "0,0,0,0,0"))
         (rule "castedGetAny" (formula "1") (term "0,0,0,0,1,0,0"))
         (rule "commute_or_2" (formula "2") (term "1,0,0,0,0,0"))
         (rule "commute_or_2" (formula "1") (term "1,0,0,0,0,0"))
         (rule "shift_paren_or" (formula "2") (term "0,0,0,0,0"))
         (rule "shift_paren_or" (formula "1") (term "0,0,0,0,0"))
         (rule "Class_axiom_0_in_de_polyas_core3_open_cred_CredTool" (inst "seq=seq") (inst "i=i_2") (inst "str=str") (inst "seq_0=seq_0") (inst "i_0=i_0") (inst "obj=obj") (inst "seq_1=seq_1") (inst "i_1=i_1") (inst "sv_heap=heapBefore_LOOP"))
         (rule "andLeft" (formula "1"))
         (rule "andLeft" (formula "1"))
         (rule "castedGetAny" (formula "3") (term "0,1,1,0,0,0"))
         (rule "castedGetAny" (formula "1") (term "0,0,0,1,0,1,0,0"))
         (rule "castedGetAny" (formula "1") (term "0,0,1,1,0,1,0,0"))
         (rule "castedGetAny" (formula "1") (term "0,0,0,0,0"))
         (rule "castedGetAny" (formula "1") (term "0,0,0,0,1,0,0"))
         (rule "castedGetAny" (formula "1") (term "0,1,1,0,0,0"))
         (rule "commute_and" (formula "2") (term "0,0,0,0"))
         (rule "commute_and" (formula "1") (term "0,0,0,0"))
         (rule "shift_paren_or" (formula "4") (term "0,0,0,0,0,0"))
         (rule "commute_or_2" (formula "3") (term "1,0,0,0,0,0,0"))
         (rule "shift_paren_and" (formula "5") (term "0,1,0,0"))
          (builtin "One Step Simplification" (formula "5"))
         (rule "shift_paren_or" (formula "3") (term "0,0,0,0,0,0"))
         (rule "shift_paren_and" (formula "5") (term "1,0,0"))
         (rule "shift_paren_or" (formula "4") (term "0,0,0,0,0,0,0"))
         (rule "commute_or_2" (formula "4") (term "0,0,0,0,0,0"))
         (rule "commute_and" (formula "4") (term "0,0,0,0"))
         (rule "shift_paren_or" (formula "3") (term "0,0,0,0,0,0,0"))
         (rule "commute_and" (formula "3") (term "0,0,0,0"))
         (rule "lenNonNegative" (formula "49") (term "0"))
         (rule "inEqSimp_commuteLeq" (formula "49"))
         (rule "applyEq" (formula "49") (term "0") (ifseqformula "50"))
         (rule "equalityToSeqGetAndSeqLenLeft" (formula "50") (inst "iv=iv"))
         (rule "andLeft" (formula "50"))
         (rule "inEqSimp_commuteLeq" (formula "51") (term "0,0,0"))
         (rule "applyEq" (formula "51") (term "1,1,0,0") (ifseqformula "50"))
         (rule "applyEq" (formula "50") (term "0,0") (ifseqformula "52"))
          (builtin "One Step Simplification" (formula "50"))
         (rule "true_left" (formula "50"))
         (rule "applyEq" (formula "50") (term "0,0,1,0") (ifseqformula "51"))
          (builtin "One Step Simplification" (formula "50"))
         (rule "true_left" (formula "50"))
         (rule "lenNonNegative" (formula "52") (term "1,0,0,0"))
         (rule "inEqSimp_commuteLeq" (formula "52"))
         (rule "ifSplit" (formula "68"))
         (branch "if x true"
             (builtin "One Step Simplification" (formula "69"))
             (builtin "One Step Simplification" (formula "1"))
            (rule "true_left" (formula "1"))
            (rule "methodCallUnfoldArguments" (formula "68") (term "1"))
            (rule "variableDeclarationAssign" (formula "68") (term "1"))
            (rule "variableDeclaration" (formula "68") (term "1") (newnames "var"))
            (rule "assignment" (formula "68") (term "1"))
             (builtin "One Step Simplification" (formula "68"))
            (rule "variableDeclarationAssign" (formula "68") (term "1"))
            (rule "variableDeclaration" (formula "68") (term "1") (newnames "var_1"))
             (builtin "Use Operation Contract" (formula "68") (newnames "heapBefore_get,result_48,exc_55,heapAfter_get,anon_heap_get") (contract "java.util.ArrayList[java.util.List::get(int)].JML normal_behavior operation contract.0"))
            (branch "Post (get)"
                (builtin "One Step Simplification" (formula "70"))
                (builtin "One Step Simplification" (formula "57"))
               (rule "andLeft" (formula "57"))
               (rule "selectCreatedOfAnonAsFormulaEQ" (formula "58") (term "1,1,0") (ifseqformula "57"))
                (builtin "One Step Simplification" (formula "58"))
               (rule "selectCreatedOfAnonAsFormulaEQ" (formula "58") (term "0,0,1,1,0") (ifseqformula "40"))
               (rule "selectCreatedOfAnonAsFormulaEQ" (formula "58") (term "0,0,0,1,1,0") (ifseqformula "33"))
               (rule "andLeft" (formula "58"))
               (rule "andLeft" (formula "58"))
               (rule "andLeft" (formula "60"))
               (rule "andLeft" (formula "60"))
               (rule "andLeft" (formula "61"))
               (rule "notLeft" (formula "62"))
               (rule "replace_known_right" (formula "59") (term "0") (ifseqformula "62"))
                (builtin "One Step Simplification" (formula "59"))
               (rule "castedGetAny" (formula "60") (term "0"))
               (rule "assignment" (formula "75") (term "1"))
                (builtin "One Step Simplification" (formula "75"))
               (rule "pullOutSelect" (formula "60") (term "0,0") (inst "selectSK=java_util_Collection_seq_4"))
               (rule "simplifySelectOfAnonEQ" (formula "60") (ifseqformula "57"))
                (builtin "One Step Simplification" (formula "60") (ifInst ""  (formula "75")))
               (rule "replaceKnownSelect_taclet100_7" (formula "60") (term "2,0"))
               (rule "selectCreatedOfAnonAsFormulaEQ" (formula "60") (term "0,0,0,0") (ifseqformula "40"))
               (rule "selectCreatedOfAnonAsFormulaEQ" (formula "60") (term "0,0,0,0,0") (ifseqformula "33"))
               (rule "replace_known_left" (formula "60") (term "0,0,0,0,0,0") (ifseqformula "28"))
                (builtin "One Step Simplification" (formula "60"))
               (rule "applyEqReverse" (formula "61") (term "0,0") (ifseqformula "60"))
               (rule "hideAuxiliaryEq" (formula "60"))
               (rule "Class_invariant_axiom_for_java_util_ArrayList" (formula "61"))
               (rule "true_left" (formula "61"))
               (rule "commute_or_2" (formula "59") (term "0"))
               (rule "commute_or_2" (formula "59"))
               (rule "commute_or_2" (formula "59") (term "0,0"))
                (builtin "Use Operation Contract" (formula "74") (newnames "heapBefore_add,result_49,exc_56,heapAfter_add,anon_heap_add") (contract "java.util.ArrayList[java.util.Collection::add(java.lang.Object)].JML normal_behavior operation contract.0"))
               (branch "Post (add)"
                   (builtin "One Step Simplification" (formula "62"))
                   (builtin "One Step Simplification" (formula "76"))
                  (rule "andLeft" (formula "62"))
                  (rule "andLeft" (formula "63"))
                  (rule "andLeft" (formula "64"))
                  (rule "andLeft" (formula "64"))
                  (rule "eqSymm" (formula "64"))
                  (rule "blockEmpty" (formula "79") (term "1"))
                  (rule "pullOutSelect" (formula "64") (term "0,0") (inst "selectSK=java_util_Collection_seq_5"))
                  (rule "simplifySelectOfAnonEQ" (formula "64") (ifseqformula "57"))
                   (builtin "One Step Simplification" (formula "64") (ifInst ""  (formula "69")))
                  (rule "replaceKnownSelect_taclet100_5" (formula "64") (term "2,0"))
                  (rule "replaceKnownAuxiliaryConstant_taclet100_6" (formula "64") (term "2,0"))
                  (rule "selectCreatedOfAnonAsFormulaEQ" (formula "64") (term "0,0,0,0") (ifseqformula "40"))
                  (rule "selectCreatedOfAnonAsFormulaEQ" (formula "64") (term "0,0,0,0,0") (ifseqformula "33"))
                  (rule "eqSymm" (formula "65"))
                  (rule "replace_known_left" (formula "64") (term "1,0,0,0,0,0") (ifseqformula "35"))
                   (builtin "One Step Simplification" (formula "64") (ifInst ""  (formula "68")))
                  (rule "applyEqReverse" (formula "65") (term "0,1") (ifseqformula "64"))
                  (rule "hideAuxiliaryEq" (formula "64"))
                  (rule "pullOutSelect" (formula "64") (term "0") (inst "selectSK=java_util_Collection_seq_6"))
                  (rule "simplifySelectOfAnonEQ" (formula "64") (ifseqformula "62"))
                   (builtin "One Step Simplification" (formula "64") (ifInst ""  (formula "69")))
                  (rule "replaceKnownSelect_taclet000100_14" (formula "64") (term "2,0"))
                  (rule "replaceKnownAuxiliaryConstant_taclet000100_15" (formula "64") (term "2,0"))
                  (rule "selectCreatedOfAnonAsFormulaEQ" (formula "64") (term "0,1,0,0") (ifseqformula "57"))
                   (builtin "One Step Simplification" (formula "64"))
                  (rule "selectCreatedOfAnonAsFormulaEQ" (formula "64") (term "0,0,0,1,0,0") (ifseqformula "40"))
                  (rule "selectCreatedOfAnonAsFormulaEQ" (formula "64") (term "0,0,0,0,1,0,0") (ifseqformula "33"))
                  (rule "eqSymm" (formula "65"))
                  (rule "applyEqReverse" (formula "64") (term "1") (ifseqformula "65"))
                  (rule "hideAuxiliaryEq" (formula "65"))
                  (rule "replace_known_left" (formula "64") (term "1,0,0,0,0,1,0,0") (ifseqformula "35"))
                   (builtin "One Step Simplification" (formula "64") (ifInst ""  (formula "67")))
                  (rule "elementOfSingleton" (formula "64") (term "0,0"))
                   (builtin "One Step Simplification" (formula "64"))
                  (rule "eqSeqConcat" (formula "64"))
                   (builtin "One Step Simplification" (formula "64"))
                  (rule "andLeft" (formula "64"))
                  (rule "andLeft" (formula "64"))
                  (rule "polySimp_addComm0" (formula "64") (term "1"))
                  (rule "eqSeqSingleton" (formula "66"))
                  (rule "andLeft" (formula "66"))
                  (rule "lenOfSeqSub" (formula "66") (term "0"))
                  (rule "polySimp_elimSub" (formula "66") (term "1,0"))
                  (rule "polySimp_addComm0" (formula "66") (term "1,0"))
                  (rule "ifEqualsInteger" (formula "66"))
                  (rule "equal_literals" (formula "66") (term "1,1"))
                   (builtin "One Step Simplification" (formula "66"))
                  (rule "andLeft" (formula "66"))
                  (rule "applyEq" (formula "68") (term "2,0,0") (ifseqformula "64"))
                  (rule "applyEq" (formula "66") (term "1") (ifseqformula "64"))
                  (rule "applyEq" (formula "67") (term "1,0") (ifseqformula "64"))
                  (rule "polySimp_addAssoc" (formula "67") (term "0"))
                  (rule "polySimp_addComm0" (formula "67") (term "0,0"))
                  (rule "polySimp_pullOutFactor2b" (formula "67") (term "0"))
                  (rule "add_literals" (formula "67") (term "1,1,0"))
                  (rule "times_zero_1" (formula "67") (term "1,0"))
                  (rule "add_literals" (formula "67") (term "0"))
                   (builtin "One Step Simplification" (formula "67"))
                  (rule "true_left" (formula "67"))
                  (rule "getOfSeqSub" (formula "67") (term "0"))
                  (rule "castDel" (formula "67") (term "2,0"))
                  (rule "add_zero_left" (formula "67") (term "1,1,0"))
                  (rule "leq_literals" (formula "67") (term "0,0,0"))
                   (builtin "One Step Simplification" (formula "67"))
                  (rule "polySimp_elimSub" (formula "67") (term "1,0,0"))
                  (rule "polySimp_pullOutFactor1b" (formula "67") (term "1,0,0"))
                  (rule "add_literals" (formula "67") (term "1,1,1,0,0"))
                  (rule "times_zero_1" (formula "67") (term "1,1,0,0"))
                  (rule "add_literals" (formula "67") (term "1,0,0"))
                  (rule "less_literals" (formula "67") (term "0,0"))
                   (builtin "One Step Simplification" (formula "67"))
                  (rule "getOfSeqSubEQ" (formula "53") (term "0,0,1,0") (ifseqformula "65"))
                  (rule "add_zero_right" (formula "53") (term "1,1,0,0,1,0"))
                  (rule "polySimp_elimSub" (formula "53") (term "1,1,0,0,0,1,0"))
                  (rule "mul_literals" (formula "53") (term "1,1,1,0,0,0,1,0"))
                  (rule "add_zero_right" (formula "53") (term "1,1,0,0,0,1,0"))
                  (rule "ifEqualsNull" (formula "53") (term "0,1,0"))
                  (rule "inEqSimp_commuteLeq" (formula "53") (term "0,0,0,1,0,1,0"))
                  (rule "inEqSimp_commuteLeq" (formula "53") (term "0,0,0,0,1,0"))
                  (rule "Class_invariant_axiom_for_java_util_ArrayList" (formula "68"))
                  (rule "true_left" (formula "68"))
                  (rule "postincrement" (formula "81") (term "1"))
                  (rule "commute_and_2" (formula "53") (term "0,0,1,0"))
                  (rule "commute_and" (formula "53") (term "0,0,0,1,0"))
                  (rule "commute_and_2" (formula "53") (term "0,0,1,0"))
                  (rule "compound_int_cast_expression" (formula "81") (term "1") (inst "#v=x"))
                  (rule "variableDeclarationAssign" (formula "81") (term "1"))
                  (rule "variableDeclaration" (formula "81") (term "1") (newnames "x_1"))
                  (rule "commute_and" (formula "53") (term "0,0,1,0,1,0"))
                  (rule "remove_parentheses_right" (formula "81") (term "1"))
                  (rule "assignmentAdditionInt" (formula "81") (term "1"))
                   (builtin "One Step Simplification" (formula "81"))
                  (rule "translateJavaAddInt" (formula "81") (term "0,1,0"))
                  (rule "expand_addJint" (formula "81") (term "0,1,0"))
                  (rule "polySimp_addComm0" (formula "81") (term "0,0,1,0"))
                  (rule "expand_moduloInteger" (formula "81") (term "0,1,0"))
                  (rule "replace_int_HALFRANGE" (formula "81") (term "0,0,1,0,1,0"))
                  (rule "replace_int_MIN" (formula "81") (term "0,0,1,0"))
                  (rule "replace_int_RANGE" (formula "81") (term "1,1,0,1,0"))
                  (rule "polySimp_addAssoc" (formula "81") (term "0,1,0,1,0"))
                  (rule "add_literals" (formula "81") (term "0,0,1,0,1,0"))
                  (rule "widening_identity_cast_5" (formula "81") (term "1"))
                  (rule "assignment" (formula "81") (term "1"))
                   (builtin "One Step Simplification" (formula "81"))
                  (rule "Class_axiom_0_in_de_polyas_core3_open_cred_CredTool" (inst "seq=seq") (inst "i=i_2") (inst "str=str") (inst "seq_0=seq_0") (inst "i_0=i_0") (inst "obj=obj") (inst "seq_1=seq_1") (inst "i_1=i_1") (inst "sv_heap=anon_heap_get<<anonHeapFunction>>"))
                  (rule "andLeft" (formula "1"))
                  (rule "andLeft" (formula "1"))
                  (rule "castedGetAny" (formula "3") (term "0,1,1,0,0,0"))
                  (rule "castedGetAny" (formula "1") (term "0,0,0,0,0"))
                  (rule "castedGetAny" (formula "1") (term "0,0,0,0,1,0,0"))
                  (rule "castedGetAny" (formula "1") (term "0,0,1,1,0,1,0,0"))
                  (rule "castedGetAny" (formula "2") (term "0,1,1,0,0,0"))
                  (rule "castedGetAny" (formula "1") (term "0,0,0,1,0,1,0,0"))
                  (rule "commute_and" (formula "3") (term "0,0,0,0"))
                  (rule "commute_and" (formula "2") (term "0,0,0,0"))
                  (rule "Class_axiom_0_in_de_polyas_core3_open_cred_CredTool" (inst "seq=seq") (inst "i=i_2") (inst "str=str") (inst "seq_0=seq_0") (inst "i_0=i_0") (inst "obj=obj") (inst "seq_1=seq_1") (inst "i_1=i_1") (inst "sv_heap=anon(anon(heapAfter_size,
          singleton(result_46,
                    java.util.Collection::$seq),
          anon_heap_LOOP<<anonHeapFunction>>),
     empty,
     anon_heap_get<<anonHeapFunction>>)"))
                   (builtin "One Step Simplification" (formula "1"))
                  (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,0,1,0,0,0,0,0,1") (ifseqformula "44"))
                  (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,0,0,1,0,0,0,0,0,1") (ifseqformula "37"))
                  (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,0,1,0,0,0,0,0,1,0") (ifseqformula "44"))
                  (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,0,0,1,0,0,0,0,0,1,0") (ifseqformula "37"))
                  (rule "andLeft" (formula "1"))
                  (rule "andLeft" (formula "1"))
                  (rule "castedGetAny" (formula "3") (term "0,1,1,0,0,0"))
                  (rule "castedGetAny" (formula "1") (term "0,0,0,1,0,1,0,0"))
                  (rule "castedGetAny" (formula "2") (term "0,1,1,0,0,0"))
                  (rule "castedGetAny" (formula "1") (term "0,0,0,0,1,0,0"))
                  (rule "castedGetAny" (formula "1") (term "0,0,1,1,0,1,0,0"))
                  (rule "castedGetAny" (formula "1") (term "0,0,0,0,0"))
                  (rule "shift_paren_or" (formula "2") (term "0,0,0,0,0"))
                  (rule "shift_paren_or" (formula "1") (term "0,0,0,0,0"))
                  (rule "Class_axiom_0_in_de_polyas_core3_open_cred_CredTool" (inst "seq=seq") (inst "i=i_2") (inst "str=str") (inst "seq_0=seq_0") (inst "i_0=i_0") (inst "obj=obj") (inst "seq_1=seq_1") (inst "i_1=i_1") (inst "sv_heap=heapAfter_get"))
                  (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "1,0,0,0,0,0,1") (ifseqformula "63"))
                   (builtin "One Step Simplification" (formula "1"))
                  (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "1,0,0,0,0,0,1,0") (ifseqformula "63"))
                   (builtin "One Step Simplification" (formula "1"))
                  (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,0,1,0,0,0,0,0,1") (ifseqformula "46"))
                  (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,0,1,0,0,0,0,0,1,0") (ifseqformula "46"))
                  (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,0,0,1,0,0,0,0,0,1") (ifseqformula "39"))
                  (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,0,0,1,0,0,0,0,0,1,0") (ifseqformula "39"))
                  (rule "andLeft" (formula "1"))
                  (rule "andLeft" (formula "1"))
                  (rule "castedGetAny" (formula "3") (term "0,1,1,0,0,0"))
                  (rule "castedGetAny" (formula "1") (term "0,0,0,0,0"))
                  (rule "castedGetAny" (formula "2") (term "0,1,1,0,0,0"))
                  (rule "castedGetAny" (formula "1") (term "0,0,1,1,0,1,0,0"))
                  (rule "castedGetAny" (formula "1") (term "0,0,0,1,0,1,0,0"))
                  (rule "castedGetAny" (formula "1") (term "0,0,0,0,1,0,0"))
                  (rule "tryEmpty" (formula "88") (term "1"))
                  (rule "shift_paren_or" (formula "2") (term "0,0,0,0,0"))
                  (rule "shift_paren_or" (formula "1") (term "0,0,0,0,0"))
                  (rule "commute_or_2" (formula "2") (term "1,0,0,0,0,0,0"))
                  (rule "commute_or_2" (formula "1") (term "1,0,0,0,0,0,0"))
                  (rule "shift_paren_and" (formula "3") (term "0,1,0,0"))
                   (builtin "One Step Simplification" (formula "3"))
                  (rule "shift_paren_or" (formula "2") (term "0,0,0,0,0,0"))
                  (rule "shift_paren_or" (formula "1") (term "0,0,0,0,0,0"))
                  (rule "methodCallEmpty" (formula "86") (term "1"))
                  (rule "shift_paren_and" (formula "3") (term "1,0,0"))
                  (rule "emptyModality" (formula "85") (term "1"))
                   (builtin "One Step Simplification" (formula "85"))
                  (rule "andRight" (formula "85"))
                  (branch "Case 1"
                     (rule "andRight" (formula "85"))
                     (branch "Case 1"
                        (rule "andRight" (formula "85"))
                        (branch "Case 1"
                           (rule "andRight" (formula "85"))
                           (branch "Case 1"
                              (rule "andRight" (formula "85"))
                              (branch
                                 (rule "andRight" (formula "85"))
                                 (branch
                                    (rule "andRight" (formula "85"))
                                    (branch
                                       (rule "andRight" (formula "85"))
                                       (branch
                                          (rule "andRight" (formula "85"))
                                          (branch
                                             (rule "inEqSimp_ltToLeq" (formula "42") (term "0,0,0"))
                                             (rule "polySimp_mulComm0" (formula "42") (term "1,0,0,0,0,0"))
                                             (rule "inEqSimp_ltToLeq" (formula "57") (term "0,0,0"))
                                             (rule "polySimp_mulComm0" (formula "57") (term "1,0,0,0,0,0"))
                                             (rule "inEqSimp_ltToLeq" (formula "55") (term "0,0,0"))
                                             (rule "polySimp_mulComm0" (formula "55") (term "1,0,0,0,0,0"))
                                             (rule "inEqSimp_ltToLeq" (formula "57") (term "1,0,0,0,1,0"))
                                             (rule "polySimp_mulComm0" (formula "57") (term "1,0,0,1,0,0,0,1,0"))
                                             (rule "inEqSimp_ltToLeq" (formula "15"))
                                             (rule "polySimp_mulComm0" (formula "15") (term "1,0,0"))
                                             (rule "polySimp_addComm1" (formula "15") (term "0"))
                                             (rule "inEqSimp_ltToLeq" (formula "70"))
                                             (rule "polySimp_rightDist" (formula "70") (term "1,0,0"))
                                             (rule "mul_literals" (formula "70") (term "0,1,0,0"))
                                             (rule "polySimp_addAssoc" (formula "70") (term "0,0"))
                                             (rule "add_literals" (formula "70") (term "0,0,0"))
                                             (rule "add_zero_left" (formula "70") (term "0,0"))
                                             (rule "polySimp_pullOutFactor2" (formula "70") (term "0"))
                                             (rule "add_literals" (formula "70") (term "1,0"))
                                             (rule "times_zero_1" (formula "70") (term "0"))
                                             (rule "leq_literals" (formula "70"))
                                             (rule "true_left" (formula "70"))
                                             (rule "inEqSimp_ltToLeq" (formula "34") (term "0,0,0"))
                                             (rule "polySimp_mulComm0" (formula "34") (term "1,0,0,0,0,0"))
                                             (rule "inEqSimp_ltToLeq" (formula "57") (term "0,0,0,1,0,1,0"))
                                             (rule "polySimp_mulComm0" (formula "57") (term "1,0,0,0,0,0,1,0,1,0"))
                                             (rule "inEqSimp_sepPosMonomial0" (formula "42") (term "0,0,0"))
                                             (rule "polySimp_mulComm0" (formula "42") (term "1,0,0,0"))
                                             (rule "polySimp_rightDist" (formula "42") (term "1,0,0,0"))
                                             (rule "mul_literals" (formula "42") (term "0,1,0,0,0"))
                                             (rule "polySimp_mulLiterals" (formula "42") (term "1,1,0,0,0"))
                                             (rule "polySimp_elimOne" (formula "42") (term "1,1,0,0,0"))
                                             (rule "inEqSimp_sepPosMonomial0" (formula "57") (term "0,0,0"))
                                             (rule "polySimp_mulComm0" (formula "57") (term "1,0,0,0"))
                                             (rule "polySimp_rightDist" (formula "57") (term "1,0,0,0"))
                                             (rule "polySimp_mulLiterals" (formula "57") (term "1,1,0,0,0"))
                                             (rule "mul_literals" (formula "57") (term "0,1,0,0,0"))
                                             (rule "polySimp_elimOne" (formula "57") (term "1,1,0,0,0"))
                                             (rule "inEqSimp_sepPosMonomial0" (formula "55") (term "0,0,0"))
                                             (rule "polySimp_mulComm0" (formula "55") (term "1,0,0,0"))
                                             (rule "polySimp_rightDist" (formula "55") (term "1,0,0,0"))
                                             (rule "mul_literals" (formula "55") (term "0,1,0,0,0"))
                                             (rule "polySimp_mulLiterals" (formula "55") (term "1,1,0,0,0"))
                                             (rule "polySimp_elimOne" (formula "55") (term "1,1,0,0,0"))
                                             (rule "inEqSimp_sepPosMonomial0" (formula "57") (term "1,0,0,0,1,0"))
                                             (rule "polySimp_mulComm0" (formula "57") (term "1,1,0,0,0,1,0"))
                                             (rule "polySimp_rightDist" (formula "57") (term "1,1,0,0,0,1,0"))
                                             (rule "polySimp_mulLiterals" (formula "57") (term "1,1,1,0,0,0,1,0"))
                                             (rule "mul_literals" (formula "57") (term "0,1,1,0,0,0,1,0"))
                                             (rule "polySimp_elimOne" (formula "57") (term "1,1,1,0,0,0,1,0"))
                                             (rule "inEqSimp_sepNegMonomial0" (formula "15"))
                                             (rule "polySimp_mulLiterals" (formula "15") (term "0"))
                                             (rule "polySimp_elimOne" (formula "15") (term "0"))
                                             (rule "inEqSimp_sepPosMonomial0" (formula "34") (term "0,0,0"))
                                             (rule "polySimp_mulComm0" (formula "34") (term "1,0,0,0"))
                                             (rule "polySimp_rightDist" (formula "34") (term "1,0,0,0"))
                                             (rule "polySimp_mulLiterals" (formula "34") (term "1,1,0,0,0"))
                                             (rule "mul_literals" (formula "34") (term "0,1,0,0,0"))
                                             (rule "polySimp_elimOne" (formula "34") (term "1,1,0,0,0"))
                                             (rule "inEqSimp_sepPosMonomial0" (formula "57") (term "0,0,0,1,0,1,0"))
                                             (rule "polySimp_mulComm0" (formula "57") (term "1,0,0,0,1,0,1,0"))
                                             (rule "polySimp_rightDist" (formula "57") (term "1,0,0,0,1,0,1,0"))
                                             (rule "mul_literals" (formula "57") (term "0,1,0,0,0,1,0,1,0"))
                                             (rule "polySimp_mulLiterals" (formula "57") (term "1,1,0,0,0,1,0,1,0"))
                                             (rule "polySimp_elimOne" (formula "57") (term "1,1,0,0,0,1,0,1,0"))
                                             (rule "inEqSimp_subsumption1" (formula "59") (ifseqformula "51"))
                                             (rule "leq_literals" (formula "59") (term "0"))
                                              (builtin "One Step Simplification" (formula "59"))
                                             (rule "true_left" (formula "59"))
                                             (rule "inEqSimp_subsumption1" (formula "52") (ifseqformula "15"))
                                             (rule "inEqSimp_homoInEq0" (formula "52") (term "0"))
                                             (rule "polySimp_pullOutFactor1b" (formula "52") (term "0,0"))
                                             (rule "add_literals" (formula "52") (term "1,1,0,0"))
                                             (rule "times_zero_1" (formula "52") (term "1,0,0"))
                                             (rule "add_zero_right" (formula "52") (term "0,0"))
                                             (rule "qeq_literals" (formula "52") (term "0"))
                                              (builtin "One Step Simplification" (formula "52"))
                                             (rule "true_left" (formula "52"))
                                             (rule "inEqSimp_subsumption1" (formula "46") (ifseqformula "47"))
                                             (rule "leq_literals" (formula "46") (term "0"))
                                              (builtin "One Step Simplification" (formula "46"))
                                             (rule "true_left" (formula "46"))
                                             (rule "inEqSimp_exactShadow3" (formula "15") (ifseqformula "45"))
                                             (rule "polySimp_rightDist" (formula "15") (term "0,0"))
                                             (rule "mul_literals" (formula "15") (term "0,0,0"))
                                             (rule "polySimp_addComm1" (formula "15") (term "0"))
                                             (rule "add_literals" (formula "15") (term "0,0"))
                                             (rule "inEqSimp_sepNegMonomial1" (formula "15"))
                                             (rule "polySimp_mulLiterals" (formula "15") (term "0"))
                                             (rule "polySimp_elimOne" (formula "15") (term "0"))
                                             (rule "inEqSimp_subsumption0" (formula "57") (ifseqformula "15"))
                                             (rule "leq_literals" (formula "57") (term "0"))
                                              (builtin "One Step Simplification" (formula "57"))
                                             (rule "true_left" (formula "57"))
                                             (rule "nnf_imp2or" (formula "28") (term "0,0"))
                                              (builtin "One Step Simplification" (formula "28"))
                                             (rule "nnf_imp2or" (formula "27") (term "0,0,0"))
                                             (rule "nnf_imp2or" (formula "25") (term "0,0,0"))
                                             (rule "nnf_imp2or" (formula "7") (term "0,0,0"))
                                             (rule "nnf_imp2or" (formula "24") (term "0,0,0"))
                                             (rule "nnf_imp2or" (formula "3") (term "0,0,0"))
                                             (rule "nnf_imp2or" (formula "2") (term "0,0,0"))
                                             (rule "nnf_imp2or" (formula "23") (term "0,0,0"))
                                             (rule "nnf_imp2or" (formula "19") (term "0,0,0"))
                                             (rule "nnf_imp2or" (formula "10") (term "0,0,0"))
                                             (rule "nnf_imp2or" (formula "26") (term "0,0,0"))
                                             (rule "nnf_imp2or" (formula "29") (term "0,0,0"))
                                             (rule "nnf_imp2or" (formula "30") (term "0,0,0"))
                                             (rule "nnf_imp2or" (formula "22") (term "0,0,0"))
                                             (rule "nnf_imp2or" (formula "4") (term "0,0,0"))
                                             (rule "nnf_imp2or" (formula "21") (term "0,0,0"))
                                             (rule "nnf_imp2or" (formula "1") (term "0,0,0"))
                                             (rule "nnf_imp2or" (formula "6") (term "0,0,0"))
                                             (rule "nnf_imp2or" (formula "18") (term "0,0,0"))
                                             (rule "nnf_imp2or" (formula "8") (term "0,0,0"))
                                             (rule "nnf_imp2or" (formula "9") (term "0,0,0"))
                                             (rule "nnf_imp2or" (formula "5") (term "0,0,0"))
                                             (rule "nnf_imp2or" (formula "20") (term "0,0,0"))
                                             (rule "nnf_imp2or" (formula "43") (term "0"))
                                             (rule "nnf_imp2or" (formula "54") (term "0"))
                                             (rule "nnf_imp2or" (formula "35") (term "0"))
                                             (rule "nnf_imp2or" (formula "56") (term "0"))
                                             (rule "nnf_notAnd" (formula "27") (term "0,0,0,0"))
                                              (builtin "One Step Simplification" (formula "27"))
                                             (rule "nnf_notAnd" (formula "25") (term "0,0,0,0"))
                                              (builtin "One Step Simplification" (formula "25"))
                                             (rule "nnf_notAnd" (formula "7") (term "0,0,0,0"))
                                              (builtin "One Step Simplification" (formula "7"))
                                             (rule "nnf_notAnd" (formula "43") (term "0,0"))
                                             (rule "inEqSimp_notLeq" (formula "43") (term "0,0,0"))
                                             (rule "polySimp_rightDist" (formula "43") (term "1,0,0,0,0,0"))
                                             (rule "mul_literals" (formula "43") (term "0,1,0,0,0,0,0"))
                                             (rule "polySimp_addAssoc" (formula "43") (term "0,0,0,0,0"))
                                             (rule "add_literals" (formula "43") (term "0,0,0,0,0,0"))
                                             (rule "add_zero_left" (formula "43") (term "0,0,0,0,0"))
                                             (rule "inEqSimp_sepPosMonomial1" (formula "43") (term "0,0,0"))
                                             (rule "polySimp_mulLiterals" (formula "43") (term "1,0,0,0"))
                                             (rule "polySimp_elimOne" (formula "43") (term "1,0,0,0"))
                                             (rule "inEqSimp_notGeq" (formula "43") (term "1,0,0"))
                                             (rule "mul_literals" (formula "43") (term "1,0,0,1,0,0"))
                                             (rule "add_literals" (formula "43") (term "0,0,1,0,0"))
                                             (rule "inEqSimp_sepPosMonomial0" (formula "43") (term "1,0,0"))
                                             (rule "mul_literals" (formula "43") (term "1,1,0,0"))
                                             (rule "nnf_notAnd" (formula "54") (term "0,0"))
                                             (rule "inEqSimp_notLeq" (formula "54") (term "0,0,0"))
                                             (rule "polySimp_rightDist" (formula "54") (term "1,0,0,0,0,0"))
                                             (rule "mul_literals" (formula "54") (term "0,1,0,0,0,0,0"))
                                             (rule "polySimp_addAssoc" (formula "54") (term "0,0,0,0,0"))
                                             (rule "add_literals" (formula "54") (term "0,0,0,0,0,0"))
                                             (rule "add_zero_left" (formula "54") (term "0,0,0,0,0"))
                                             (rule "inEqSimp_sepPosMonomial1" (formula "54") (term "0,0,0"))
                                             (rule "polySimp_mulLiterals" (formula "54") (term "1,0,0,0"))
                                             (rule "polySimp_elimOne" (formula "54") (term "1,0,0,0"))
                                             (rule "inEqSimp_notGeq" (formula "54") (term "1,0,0"))
                                             (rule "mul_literals" (formula "54") (term "1,0,0,1,0,0"))
                                             (rule "add_literals" (formula "54") (term "0,0,1,0,0"))
                                             (rule "inEqSimp_sepPosMonomial0" (formula "54") (term "1,0,0"))
                                             (rule "mul_literals" (formula "54") (term "1,1,0,0"))
                                             (rule "nnf_notAnd" (formula "24") (term "0,0,0,0"))
                                              (builtin "One Step Simplification" (formula "24"))
                                             (rule "nnf_notAnd" (formula "3") (term "0,0,0,0"))
                                              (builtin "One Step Simplification" (formula "3"))
                                             (rule "nnf_notAnd" (formula "35") (term "0,0"))
                                             (rule "inEqSimp_notLeq" (formula "35") (term "0,0,0"))
                                             (rule "polySimp_rightDist" (formula "35") (term "1,0,0,0,0,0"))
                                             (rule "mul_literals" (formula "35") (term "0,1,0,0,0,0,0"))
                                             (rule "polySimp_addAssoc" (formula "35") (term "0,0,0,0,0"))
                                             (rule "add_literals" (formula "35") (term "0,0,0,0,0,0"))
                                             (rule "add_zero_left" (formula "35") (term "0,0,0,0,0"))
                                             (rule "inEqSimp_sepPosMonomial1" (formula "35") (term "0,0,0"))
                                             (rule "polySimp_mulLiterals" (formula "35") (term "1,0,0,0"))
                                             (rule "polySimp_elimOne" (formula "35") (term "1,0,0,0"))
                                             (rule "inEqSimp_notGeq" (formula "35") (term "1,0,0"))
                                             (rule "mul_literals" (formula "35") (term "1,0,0,1,0,0"))
                                             (rule "add_zero_right" (formula "35") (term "0,0,1,0,0"))
                                             (rule "inEqSimp_sepPosMonomial0" (formula "35") (term "1,0,0"))
                                             (rule "mul_literals" (formula "35") (term "1,1,0,0"))
                                             (rule "nnf_notAnd" (formula "56") (term "0,0"))
                                             (rule "inEqSimp_notLeq" (formula "56") (term "0,0,0"))
                                             (rule "polySimp_rightDist" (formula "56") (term "1,0,0,0,0,0"))
                                             (rule "mul_literals" (formula "56") (term "0,1,0,0,0,0,0"))
                                             (rule "polySimp_addAssoc" (formula "56") (term "0,0,0,0,0"))
                                             (rule "add_literals" (formula "56") (term "0,0,0,0,0,0"))
                                             (rule "add_zero_left" (formula "56") (term "0,0,0,0,0"))
                                             (rule "inEqSimp_sepPosMonomial1" (formula "56") (term "0,0,0"))
                                             (rule "polySimp_mulLiterals" (formula "56") (term "1,0,0,0"))
                                             (rule "polySimp_elimOne" (formula "56") (term "1,0,0,0"))
                                             (rule "inEqSimp_notGeq" (formula "56") (term "1,0,0"))
                                             (rule "mul_literals" (formula "56") (term "1,0,0,1,0,0"))
                                             (rule "add_literals" (formula "56") (term "0,0,1,0,0"))
                                             (rule "inEqSimp_sepPosMonomial0" (formula "56") (term "1,0,0"))
                                             (rule "mul_literals" (formula "56") (term "1,1,0,0"))
                                             (rule "nnf_notOr" (formula "56") (term "1,0"))
                                             (rule "nnf_imp2or" (formula "2") (term "1,0,0,0"))
                                             (rule "nnf_notAnd" (formula "2") (term "0,0,0,0"))
                                              (builtin "One Step Simplification" (formula "2"))
                                             (rule "nnf_notAnd" (formula "23") (term "0,0,0,0"))
                                              (builtin "One Step Simplification" (formula "23"))
                                             (rule "nnf_notAnd" (formula "19") (term "0,0,0,0"))
                                              (builtin "One Step Simplification" (formula "19"))
                                             (rule "nnf_notAnd" (formula "10") (term "0,0,0,0"))
                                              (builtin "One Step Simplification" (formula "10"))
                                             (rule "nnf_notAnd" (formula "26") (term "0,0,0,0"))
                                              (builtin "One Step Simplification" (formula "26"))
                                             (rule "nnf_imp2or" (formula "29") (term "1,0,0,0"))
                                             (rule "nnf_notAnd" (formula "29") (term "0,0,0,0"))
                                              (builtin "One Step Simplification" (formula "29"))
                                             (rule "nnf_imp2or" (formula "30") (term "1,0,0,0"))
                                             (rule "nnf_notAnd" (formula "30") (term "0,0,0,0"))
                                              (builtin "One Step Simplification" (formula "30"))
                                             (rule "nnf_notAnd" (formula "22") (term "0,0,0,0"))
                                              (builtin "One Step Simplification" (formula "22"))
                                             (rule "nnf_notAnd" (formula "4") (term "0,0,0,0"))
                                              (builtin "One Step Simplification" (formula "4"))
                                             (rule "nnf_notAnd" (formula "21") (term "0,0,0,0"))
                                              (builtin "One Step Simplification" (formula "21"))
                                             (rule "nnf_notAnd" (formula "1") (term "0,0,0,0"))
                                              (builtin "One Step Simplification" (formula "1"))
                                             (rule "nnf_imp2or" (formula "6") (term "1,0,0,0"))
                                             (rule "nnf_notAnd" (formula "6") (term "0,0,0,0"))
                                              (builtin "One Step Simplification" (formula "6"))
                                             (rule "nnf_imp2or" (formula "18") (term "1,0,0,0"))
                                             (rule "nnf_notAnd" (formula "18") (term "0,0,0,0"))
                                              (builtin "One Step Simplification" (formula "18"))
                                             (rule "nnf_notAnd" (formula "8") (term "0,0,0,0"))
                                              (builtin "One Step Simplification" (formula "8"))
                                             (rule "nnf_imp2or" (formula "9") (term "1,0,0,0"))
                                             (rule "nnf_notAnd" (formula "9") (term "0,0,0,0"))
                                              (builtin "One Step Simplification" (formula "9"))
                                             (rule "nnf_imp2or" (formula "5") (term "1,0,0,0"))
                                             (rule "nnf_notAnd" (formula "5") (term "0,0,0,0"))
                                              (builtin "One Step Simplification" (formula "5"))
                                             (rule "nnf_imp2or" (formula "20") (term "1,0,0,0"))
                                             (rule "nnf_notAnd" (formula "20") (term "0,0,0,0"))
                                              (builtin "One Step Simplification" (formula "20"))
                                             (rule "nnf_imp2or" (formula "27") (term "1,0,0,0"))
                                             (rule "nnf_imp2or" (formula "25") (term "1,0,0,0"))
                                             (rule "nnf_imp2or" (formula "7") (term "1,0,0,0"))
                                             (rule "nnf_notOr" (formula "27") (term "1,0,0,0,0"))
                                             (rule "nnf_notOr" (formula "25") (term "1,0,0,0,0"))
                                             (rule "nnf_notOr" (formula "7") (term "1,0,0,0,0"))
                                             (rule "nnf_imp2or" (formula "24") (term "1,0,0,0"))
                                             (rule "nnf_imp2or" (formula "3") (term "1,0,0,0"))
                                             (rule "nnf_notOr" (formula "24") (term "1,0,0,0,0"))
                                             (rule "nnf_notOr" (formula "3") (term "1,0,0,0,0"))
                                             (rule "nnf_notAnd" (formula "56") (term "1,1,0"))
                                              (builtin "One Step Simplification" (formula "56"))
                                             (rule "nnf_imp2or" (formula "23") (term "1,0,0,0"))
                                             (rule "nnf_imp2or" (formula "19") (term "1,0,0,0"))
                                             (rule "nnf_imp2or" (formula "10") (term "1,0,0,0"))
                                             (rule "nnf_imp2or" (formula "26") (term "1,0,0,0"))
                                             (rule "nnf_notOr" (formula "2") (term "0,0,0,0,0"))
                                             (rule "nnf_notOr" (formula "23") (term "1,0,0,0,0"))
                                             (rule "nnf_notOr" (formula "19") (term "1,0,0,0,0"))
                                             (rule "Class_invariant_axiom_for_java_util_ArrayList" (formula "81"))
                                             (rule "closeTrue" (formula "81"))
                                          )
                                          (branch
                                             (rule "inEqSimp_ltToLeq" (formula "42") (term "0,0,0"))
                                             (rule "polySimp_mulComm0" (formula "42") (term "1,0,0,0,0,0"))
                                             (rule "inEqSimp_ltToLeq" (formula "57") (term "0,0,0"))
                                             (rule "polySimp_mulComm0" (formula "57") (term "1,0,0,0,0,0"))
                                             (rule "inEqSimp_ltToLeq" (formula "55") (term "0,0,0"))
                                             (rule "polySimp_mulComm0" (formula "55") (term "1,0,0,0,0,0"))
                                             (rule "inEqSimp_ltToLeq" (formula "57") (term "1,0,0,0,1,0"))
                                             (rule "polySimp_mulComm0" (formula "57") (term "1,0,0,1,0,0,0,1,0"))
                                             (rule "inEqSimp_ltToLeq" (formula "34") (term "0,0,0"))
                                             (rule "polySimp_mulComm0" (formula "34") (term "1,0,0,0,0,0"))
                                             (rule "inEqSimp_ltToLeq" (formula "57") (term "0,0,0,1,0,1,0"))
                                             (rule "polySimp_mulComm0" (formula "57") (term "1,0,0,0,0,0,1,0,1,0"))
                                             (rule "inEqSimp_ltToLeq" (formula "15"))
                                             (rule "polySimp_mulComm0" (formula "15") (term "1,0,0"))
                                             (rule "polySimp_addComm1" (formula "15") (term "0"))
                                             (rule "inEqSimp_ltToLeq" (formula "70"))
                                             (rule "polySimp_rightDist" (formula "70") (term "1,0,0"))
                                             (rule "mul_literals" (formula "70") (term "0,1,0,0"))
                                             (rule "polySimp_addAssoc" (formula "70") (term "0,0"))
                                             (rule "add_literals" (formula "70") (term "0,0,0"))
                                             (rule "add_zero_left" (formula "70") (term "0,0"))
                                             (rule "polySimp_pullOutFactor2" (formula "70") (term "0"))
                                             (rule "add_literals" (formula "70") (term "1,0"))
                                             (rule "times_zero_1" (formula "70") (term "0"))
                                             (rule "leq_literals" (formula "70"))
                                             (rule "true_left" (formula "70"))
                                             (rule "inEqSimp_sepPosMonomial0" (formula "42") (term "0,0,0"))
                                             (rule "polySimp_mulComm0" (formula "42") (term "1,0,0,0"))
                                             (rule "polySimp_rightDist" (formula "42") (term "1,0,0,0"))
                                             (rule "polySimp_mulLiterals" (formula "42") (term "1,1,0,0,0"))
                                             (rule "mul_literals" (formula "42") (term "0,1,0,0,0"))
                                             (rule "polySimp_elimOne" (formula "42") (term "1,1,0,0,0"))
                                             (rule "inEqSimp_sepPosMonomial0" (formula "57") (term "0,0,0"))
                                             (rule "polySimp_mulComm0" (formula "57") (term "1,0,0,0"))
                                             (rule "polySimp_rightDist" (formula "57") (term "1,0,0,0"))
                                             (rule "mul_literals" (formula "57") (term "0,1,0,0,0"))
                                             (rule "polySimp_mulLiterals" (formula "57") (term "1,1,0,0,0"))
                                             (rule "polySimp_elimOne" (formula "57") (term "1,1,0,0,0"))
                                             (rule "inEqSimp_sepPosMonomial0" (formula "55") (term "0,0,0"))
                                             (rule "polySimp_mulComm0" (formula "55") (term "1,0,0,0"))
                                             (rule "polySimp_rightDist" (formula "55") (term "1,0,0,0"))
                                             (rule "mul_literals" (formula "55") (term "0,1,0,0,0"))
                                             (rule "polySimp_mulLiterals" (formula "55") (term "1,1,0,0,0"))
                                             (rule "polySimp_elimOne" (formula "55") (term "1,1,0,0,0"))
                                             (rule "inEqSimp_sepPosMonomial0" (formula "57") (term "1,0,0,0,1,0"))
                                             (rule "polySimp_mulComm0" (formula "57") (term "1,1,0,0,0,1,0"))
                                             (rule "polySimp_rightDist" (formula "57") (term "1,1,0,0,0,1,0"))
                                             (rule "polySimp_mulLiterals" (formula "57") (term "1,1,1,0,0,0,1,0"))
                                             (rule "mul_literals" (formula "57") (term "0,1,1,0,0,0,1,0"))
                                             (rule "polySimp_elimOne" (formula "57") (term "1,1,1,0,0,0,1,0"))
                                             (rule "inEqSimp_sepPosMonomial0" (formula "34") (term "0,0,0"))
                                             (rule "polySimp_mulComm0" (formula "34") (term "1,0,0,0"))
                                             (rule "polySimp_rightDist" (formula "34") (term "1,0,0,0"))
                                             (rule "polySimp_mulLiterals" (formula "34") (term "1,1,0,0,0"))
                                             (rule "mul_literals" (formula "34") (term "0,1,0,0,0"))
                                             (rule "polySimp_elimOne" (formula "34") (term "1,1,0,0,0"))
                                             (rule "inEqSimp_sepPosMonomial0" (formula "57") (term "0,0,0,1,0,1,0"))
                                             (rule "polySimp_mulComm0" (formula "57") (term "1,0,0,0,1,0,1,0"))
                                             (rule "polySimp_rightDist" (formula "57") (term "1,0,0,0,1,0,1,0"))
                                             (rule "mul_literals" (formula "57") (term "0,1,0,0,0,1,0,1,0"))
                                             (rule "polySimp_mulLiterals" (formula "57") (term "1,1,0,0,0,1,0,1,0"))
                                             (rule "polySimp_elimOne" (formula "57") (term "1,1,0,0,0,1,0,1,0"))
                                             (rule "inEqSimp_sepNegMonomial0" (formula "15"))
                                             (rule "polySimp_mulLiterals" (formula "15") (term "0"))
                                             (rule "polySimp_elimOne" (formula "15") (term "0"))
                                             (rule "inEqSimp_subsumption1" (formula "46") (ifseqformula "47"))
                                             (rule "leq_literals" (formula "46") (term "0"))
                                              (builtin "One Step Simplification" (formula "46"))
                                             (rule "true_left" (formula "46"))
                                             (rule "inEqSimp_subsumption1" (formula "58") (ifseqformula "50"))
                                             (rule "leq_literals" (formula "58") (term "0"))
                                              (builtin "One Step Simplification" (formula "58"))
                                             (rule "true_left" (formula "58"))
                                             (rule "inEqSimp_subsumption1" (formula "51") (ifseqformula "15"))
                                             (rule "inEqSimp_homoInEq0" (formula "51") (term "0"))
                                             (rule "polySimp_pullOutFactor1b" (formula "51") (term "0,0"))
                                             (rule "add_literals" (formula "51") (term "1,1,0,0"))
                                             (rule "times_zero_1" (formula "51") (term "1,0,0"))
                                             (rule "add_zero_right" (formula "51") (term "0,0"))
                                             (rule "qeq_literals" (formula "51") (term "0"))
                                              (builtin "One Step Simplification" (formula "51"))
                                             (rule "true_left" (formula "51"))
                                             (rule "inEqSimp_exactShadow3" (formula "15") (ifseqformula "45"))
                                             (rule "polySimp_rightDist" (formula "15") (term "0,0"))
                                             (rule "mul_literals" (formula "15") (term "0,0,0"))
                                             (rule "polySimp_addComm1" (formula "15") (term "0"))
                                             (rule "add_literals" (formula "15") (term "0,0"))
                                             (rule "inEqSimp_sepNegMonomial1" (formula "15"))
                                             (rule "polySimp_mulLiterals" (formula "15") (term "0"))
                                             (rule "polySimp_elimOne" (formula "15") (term "0"))
                                             (rule "inEqSimp_subsumption0" (formula "57") (ifseqformula "15"))
                                             (rule "leq_literals" (formula "57") (term "0"))
                                              (builtin "One Step Simplification" (formula "57"))
                                             (rule "true_left" (formula "57"))
                                             (rule "nnf_imp2or" (formula "28") (term "0,0"))
                                              (builtin "One Step Simplification" (formula "28"))
                                             (rule "nnf_imp2or" (formula "18") (term "0,0,0"))
                                             (rule "nnf_imp2or" (formula "7") (term "0,0,0"))
                                             (rule "nnf_imp2or" (formula "29") (term "0,0,0"))
                                             (rule "nnf_imp2or" (formula "24") (term "0,0,0"))
                                             (rule "nnf_imp2or" (formula "30") (term "0,0,0"))
                                             (rule "nnf_imp2or" (formula "25") (term "0,0,0"))
                                             (rule "nnf_imp2or" (formula "21") (term "0,0,0"))
                                             (rule "nnf_imp2or" (formula "23") (term "0,0,0"))
                                             (rule "nnf_imp2or" (formula "4") (term "0,0,0"))
                                             (rule "nnf_imp2or" (formula "19") (term "0,0,0"))
                                             (rule "nnf_imp2or" (formula "20") (term "0,0,0"))
                                             (rule "nnf_imp2or" (formula "27") (term "0,0,0"))
                                             (rule "nnf_imp2or" (formula "10") (term "0,0,0"))
                                             (rule "nnf_imp2or" (formula "1") (term "0,0,0"))
                                             (rule "nnf_imp2or" (formula "5") (term "0,0,0"))
                                             (rule "nnf_imp2or" (formula "3") (term "0,0,0"))
                                             (rule "nnf_imp2or" (formula "9") (term "0,0,0"))
                                             (rule "nnf_imp2or" (formula "2") (term "0,0,0"))
                                             (rule "nnf_imp2or" (formula "26") (term "0,0,0"))
                                             (rule "nnf_imp2or" (formula "8") (term "0,0,0"))
                                             (rule "nnf_imp2or" (formula "6") (term "0,0,0"))
                                             (rule "nnf_imp2or" (formula "22") (term "0,0,0"))
                                             (rule "nnf_imp2or" (formula "43") (term "0"))
                                             (rule "nnf_imp2or" (formula "54") (term "0"))
                                             (rule "nnf_imp2or" (formula "35") (term "0"))
                                             (rule "nnf_imp2or" (formula "56") (term "0"))
                                             (rule "nnf_notAnd" (formula "18") (term "0,0,0,0"))
                                              (builtin "One Step Simplification" (formula "18"))
                                             (rule "nnf_imp2or" (formula "7") (term "1,0,0,0"))
                                             (rule "nnf_notAnd" (formula "7") (term "0,0,0,0"))
                                              (builtin "One Step Simplification" (formula "7"))
                                             (rule "nnf_imp2or" (formula "29") (term "1,0,0,0"))
                                             (rule "nnf_notAnd" (formula "43") (term "0,0"))
                                             (rule "inEqSimp_notGeq" (formula "43") (term "1,0,0"))
                                             (rule "mul_literals" (formula "43") (term "1,0,0,1,0,0"))
                                             (rule "add_zero_right" (formula "43") (term "0,0,1,0,0"))
                                             (rule "inEqSimp_sepPosMonomial0" (formula "43") (term "1,0,0"))
                                             (rule "mul_literals" (formula "43") (term "1,1,0,0"))
                                             (rule "inEqSimp_notLeq" (formula "43") (term "0,0,0"))
                                             (rule "polySimp_rightDist" (formula "43") (term "1,0,0,0,0,0"))
                                             (rule "mul_literals" (formula "43") (term "0,1,0,0,0,0,0"))
                                             (rule "polySimp_addAssoc" (formula "43") (term "0,0,0,0,0"))
                                             (rule "add_literals" (formula "43") (term "0,0,0,0,0,0"))
                                             (rule "add_zero_left" (formula "43") (term "0,0,0,0,0"))
                                             (rule "inEqSimp_sepPosMonomial1" (formula "43") (term "0,0,0"))
                                             (rule "polySimp_mulLiterals" (formula "43") (term "1,0,0,0"))
                                             (rule "polySimp_elimOne" (formula "43") (term "1,0,0,0"))
                                             (rule "nnf_notAnd" (formula "29") (term "0,0,0,0"))
                                              (builtin "One Step Simplification" (formula "29"))
                                             (rule "nnf_notAnd" (formula "24") (term "0,0,0,0"))
                                              (builtin "One Step Simplification" (formula "24"))
                                             (rule "nnf_notAnd" (formula "54") (term "0,0"))
                                             (rule "inEqSimp_notGeq" (formula "54") (term "1,0,0"))
                                             (rule "mul_literals" (formula "54") (term "1,0,0,1,0,0"))
                                             (rule "add_zero_right" (formula "54") (term "0,0,1,0,0"))
                                             (rule "inEqSimp_sepPosMonomial0" (formula "54") (term "1,0,0"))
                                             (rule "mul_literals" (formula "54") (term "1,1,0,0"))
                                             (rule "inEqSimp_notLeq" (formula "54") (term "0,0,0"))
                                             (rule "polySimp_rightDist" (formula "54") (term "1,0,0,0,0,0"))
                                             (rule "mul_literals" (formula "54") (term "0,1,0,0,0,0,0"))
                                             (rule "polySimp_addAssoc" (formula "54") (term "0,0,0,0,0"))
                                             (rule "add_literals" (formula "54") (term "0,0,0,0,0,0"))
                                             (rule "add_zero_left" (formula "54") (term "0,0,0,0,0"))
                                             (rule "inEqSimp_sepPosMonomial1" (formula "54") (term "0,0,0"))
                                             (rule "polySimp_mulLiterals" (formula "54") (term "1,0,0,0"))
                                             (rule "polySimp_elimOne" (formula "54") (term "1,0,0,0"))
                                             (rule "nnf_imp2or" (formula "30") (term "1,0,0,0"))
                                             (rule "nnf_notAnd" (formula "30") (term "0,0,0,0"))
                                              (builtin "One Step Simplification" (formula "30"))
                                             (rule "nnf_notAnd" (formula "35") (term "0,0"))
                                             (rule "inEqSimp_notGeq" (formula "35") (term "1,0,0"))
                                             (rule "mul_literals" (formula "35") (term "1,0,0,1,0,0"))
                                             (rule "add_literals" (formula "35") (term "0,0,1,0,0"))
                                             (rule "inEqSimp_sepPosMonomial0" (formula "35") (term "1,0,0"))
                                             (rule "mul_literals" (formula "35") (term "1,1,0,0"))
                                             (rule "inEqSimp_notLeq" (formula "35") (term "0,0,0"))
                                             (rule "polySimp_rightDist" (formula "35") (term "1,0,0,0,0,0"))
                                             (rule "mul_literals" (formula "35") (term "0,1,0,0,0,0,0"))
                                             (rule "polySimp_addAssoc" (formula "35") (term "0,0,0,0,0"))
                                             (rule "add_literals" (formula "35") (term "0,0,0,0,0,0"))
                                             (rule "add_zero_left" (formula "35") (term "0,0,0,0,0"))
                                             (rule "inEqSimp_sepPosMonomial1" (formula "35") (term "0,0,0"))
                                             (rule "polySimp_mulLiterals" (formula "35") (term "1,0,0,0"))
                                             (rule "polySimp_elimOne" (formula "35") (term "1,0,0,0"))
                                             (rule "nnf_notOr" (formula "56") (term "1,0"))
                                             (rule "nnf_notAnd" (formula "56") (term "0,0"))
                                             (rule "inEqSimp_notGeq" (formula "56") (term "1,0,0"))
                                             (rule "mul_literals" (formula "56") (term "1,0,0,1,0,0"))
                                             (rule "add_literals" (formula "56") (term "0,0,1,0,0"))
                                             (rule "inEqSimp_sepPosMonomial0" (formula "56") (term "1,0,0"))
                                             (rule "mul_literals" (formula "56") (term "1,1,0,0"))
                                             (rule "inEqSimp_notLeq" (formula "56") (term "0,0,0"))
                                             (rule "polySimp_rightDist" (formula "56") (term "1,0,0,0,0,0"))
                                             (rule "mul_literals" (formula "56") (term "0,1,0,0,0,0,0"))
                                             (rule "polySimp_addAssoc" (formula "56") (term "0,0,0,0,0"))
                                             (rule "add_literals" (formula "56") (term "0,0,0,0,0,0"))
                                             (rule "add_zero_left" (formula "56") (term "0,0,0,0,0"))
                                             (rule "inEqSimp_sepPosMonomial1" (formula "56") (term "0,0,0"))
                                             (rule "polySimp_mulLiterals" (formula "56") (term "1,0,0,0"))
                                             (rule "polySimp_elimOne" (formula "56") (term "1,0,0,0"))
                                             (rule "nnf_notAnd" (formula "25") (term "0,0,0,0"))
                                              (builtin "One Step Simplification" (formula "25"))
                                             (rule "nnf_imp2or" (formula "21") (term "1,0,0,0"))
                                             (rule "nnf_notAnd" (formula "21") (term "0,0,0,0"))
                                              (builtin "One Step Simplification" (formula "21"))
                                             (rule "nnf_notAnd" (formula "23") (term "0,0,0,0"))
                                              (builtin "One Step Simplification" (formula "23"))
                                             (rule "nnf_imp2or" (formula "4") (term "1,0,0,0"))
                                             (rule "nnf_notAnd" (formula "4") (term "0,0,0,0"))
                                              (builtin "One Step Simplification" (formula "4"))
                                             (rule "nnf_notAnd" (formula "19") (term "0,0,0,0"))
                                              (builtin "One Step Simplification" (formula "19"))
                                             (rule "nnf_imp2or" (formula "20") (term "1,0,0,0"))
                                             (rule "nnf_notAnd" (formula "20") (term "0,0,0,0"))
                                              (builtin "One Step Simplification" (formula "20"))
                                             (rule "nnf_notAnd" (formula "27") (term "0,0,0,0"))
                                              (builtin "One Step Simplification" (formula "27"))
                                             (rule "nnf_notAnd" (formula "10") (term "0,0,0,0"))
                                              (builtin "One Step Simplification" (formula "10"))
                                             (rule "nnf_notAnd" (formula "1") (term "0,0,0,0"))
                                              (builtin "One Step Simplification" (formula "1"))
                                             (rule "nnf_notAnd" (formula "5") (term "0,0,0,0"))
                                              (builtin "One Step Simplification" (formula "5"))
                                             (rule "nnf_imp2or" (formula "3") (term "1,0,0,0"))
                                             (rule "nnf_notAnd" (formula "3") (term "0,0,0,0"))
                                              (builtin "One Step Simplification" (formula "3"))
                                             (rule "nnf_notAnd" (formula "9") (term "0,0,0,0"))
                                              (builtin "One Step Simplification" (formula "9"))
                                             (rule "nnf_imp2or" (formula "2") (term "1,0,0,0"))
                                             (rule "nnf_notAnd" (formula "2") (term "0,0,0,0"))
                                              (builtin "One Step Simplification" (formula "2"))
                                             (rule "nnf_imp2or" (formula "26") (term "1,0,0,0"))
                                             (rule "nnf_notAnd" (formula "26") (term "0,0,0,0"))
                                              (builtin "One Step Simplification" (formula "26"))
                                             (rule "nnf_imp2or" (formula "8") (term "1,0,0,0"))
                                             (rule "nnf_notAnd" (formula "8") (term "0,0,0,0"))
                                              (builtin "One Step Simplification" (formula "8"))
                                             (rule "nnf_imp2or" (formula "6") (term "1,0,0,0"))
                                             (rule "nnf_notAnd" (formula "6") (term "0,0,0,0"))
                                              (builtin "One Step Simplification" (formula "6"))
                                             (rule "nnf_imp2or" (formula "22") (term "1,0,0,0"))
                                             (rule "nnf_notAnd" (formula "22") (term "0,0,0,0"))
                                              (builtin "One Step Simplification" (formula "22"))
                                             (rule "nnf_imp2or" (formula "18") (term "1,0,0,0"))
                                             (rule "nnf_notOr" (formula "18") (term "1,0,0,0,0"))
                                             (rule "nnf_notOr" (formula "7") (term "1,0,0,0,0"))
                                             (rule "nnf_imp2or" (formula "24") (term "1,0,0,0"))
                                             (rule "nnf_notOr" (formula "29") (term "1,0,0,0,0"))
                                             (rule "nnf_notOr" (formula "24") (term "1,0,0,0,0"))
                                             (rule "nnf_notAnd" (formula "56") (term "1,1,0"))
                                              (builtin "One Step Simplification" (formula "56"))
                                             (rule "nnf_notOr" (formula "30") (term "1,0,0,0,0"))
                                             (rule "nnf_imp2or" (formula "25") (term "1,0,0,0"))
                                             (rule "nnf_imp2or" (formula "23") (term "1,0,0,0"))
                                             (rule "nnf_imp2or" (formula "19") (term "1,0,0,0"))
                                             (rule "nnf_notOr" (formula "25") (term "1,0,0,0,0"))
                                             (rule "Class_invariant_axiom_for_java_util_ArrayList" (formula "81"))
                                             (rule "closeTrue" (formula "81"))
                                          )
                                       )
                                       (branch
                                          (rule "andRight" (formula "85"))
                                          (branch
                                             (rule "inEqSimp_geqRight" (formula "85"))
                                             (rule "mul_literals" (formula "1") (term "1,0,0"))
                                             (rule "add_zero_right" (formula "1") (term "0,0"))
                                             (rule "polySimp_addAssoc" (formula "1") (term "0"))
                                             (rule "add_literals" (formula "1") (term "0,0"))
                                             (rule "inEqSimp_ltToLeq" (formula "58") (term "0,0,0"))
                                             (rule "polySimp_mulComm0" (formula "58") (term "1,0,0,0,0,0"))
                                             (rule "inEqSimp_ltToLeq" (formula "35") (term "0,0,0"))
                                             (rule "polySimp_mulComm0" (formula "35") (term "1,0,0,0,0,0"))
                                             (rule "inEqSimp_ltToLeq" (formula "16"))
                                             (rule "polySimp_mulComm0" (formula "16") (term "1,0,0"))
                                             (rule "polySimp_addComm1" (formula "16") (term "0"))
                                             (rule "inEqSimp_ltToLeq" (formula "56") (term "0,0,0"))
                                             (rule "polySimp_mulComm0" (formula "56") (term "1,0,0,0,0,0"))
                                             (rule "inEqSimp_ltToLeq" (formula "58") (term "1,0,0,0,1,0"))
                                             (rule "polySimp_mulComm0" (formula "58") (term "1,0,0,1,0,0,0,1,0"))
                                             (rule "inEqSimp_ltToLeq" (formula "71"))
                                             (rule "polySimp_rightDist" (formula "71") (term "1,0,0"))
                                             (rule "mul_literals" (formula "71") (term "0,1,0,0"))
                                             (rule "polySimp_addAssoc" (formula "71") (term "0,0"))
                                             (rule "add_literals" (formula "71") (term "0,0,0"))
                                             (rule "add_zero_left" (formula "71") (term "0,0"))
                                             (rule "polySimp_pullOutFactor2" (formula "71") (term "0"))
                                             (rule "add_literals" (formula "71") (term "1,0"))
                                             (rule "times_zero_1" (formula "71") (term "0"))
                                             (rule "leq_literals" (formula "71"))
                                             (rule "true_left" (formula "71"))
                                             (rule "inEqSimp_ltToLeq" (formula "43") (term "0,0,0"))
                                             (rule "polySimp_mulComm0" (formula "43") (term "1,0,0,0,0,0"))
                                             (rule "inEqSimp_ltToLeq" (formula "58") (term "0,0,0,1,0,1,0"))
                                             (rule "polySimp_mulComm0" (formula "58") (term "1,0,0,0,0,0,1,0,1,0"))
                                             (rule "mod_axiom" (formula "1") (term "1,0"))
                                             (rule "polySimp_mulLiterals" (formula "1") (term "1,1,0"))
                                             (rule "polySimp_addAssoc" (formula "1") (term "0"))
                                             (rule "polySimp_addAssoc" (formula "1") (term "0,0"))
                                             (rule "add_literals" (formula "1") (term "0,0,0"))
                                             (rule "inEqSimp_sepPosMonomial0" (formula "58") (term "0,0,0"))
                                             (rule "polySimp_mulComm0" (formula "58") (term "1,0,0,0"))
                                             (rule "polySimp_rightDist" (formula "58") (term "1,0,0,0"))
                                             (rule "mul_literals" (formula "58") (term "0,1,0,0,0"))
                                             (rule "polySimp_mulLiterals" (formula "58") (term "1,1,0,0,0"))
                                             (rule "polySimp_elimOne" (formula "58") (term "1,1,0,0,0"))
                                             (rule "inEqSimp_sepPosMonomial0" (formula "35") (term "0,0,0"))
                                             (rule "polySimp_mulComm0" (formula "35") (term "1,0,0,0"))
                                             (rule "polySimp_rightDist" (formula "35") (term "1,0,0,0"))
                                             (rule "polySimp_mulLiterals" (formula "35") (term "1,1,0,0,0"))
                                             (rule "mul_literals" (formula "35") (term "0,1,0,0,0"))
                                             (rule "polySimp_elimOne" (formula "35") (term "1,1,0,0,0"))
                                             (rule "inEqSimp_sepNegMonomial0" (formula "16"))
                                             (rule "polySimp_mulLiterals" (formula "16") (term "0"))
                                             (rule "polySimp_elimOne" (formula "16") (term "0"))
                                             (rule "inEqSimp_sepPosMonomial0" (formula "56") (term "0,0,0"))
                                             (rule "polySimp_mulComm0" (formula "56") (term "1,0,0,0"))
                                             (rule "polySimp_rightDist" (formula "56") (term "1,0,0,0"))
                                             (rule "polySimp_mulLiterals" (formula "56") (term "1,1,0,0,0"))
                                             (rule "mul_literals" (formula "56") (term "0,1,0,0,0"))
                                             (rule "polySimp_elimOne" (formula "56") (term "1,1,0,0,0"))
                                             (rule "inEqSimp_sepPosMonomial0" (formula "58") (term "1,0,0,0,1,0"))
                                             (rule "polySimp_mulComm0" (formula "58") (term "1,1,0,0,0,1,0"))
                                             (rule "polySimp_rightDist" (formula "58") (term "1,1,0,0,0,1,0"))
                                             (rule "mul_literals" (formula "58") (term "0,1,1,0,0,0,1,0"))
                                             (rule "polySimp_mulLiterals" (formula "58") (term "1,1,1,0,0,0,1,0"))
                                             (rule "polySimp_elimOne" (formula "58") (term "1,1,1,0,0,0,1,0"))
                                             (rule "inEqSimp_sepPosMonomial0" (formula "43") (term "0,0,0"))
                                             (rule "polySimp_mulComm0" (formula "43") (term "1,0,0,0"))
                                             (rule "polySimp_rightDist" (formula "43") (term "1,0,0,0"))
                                             (rule "polySimp_mulLiterals" (formula "43") (term "1,1,0,0,0"))
                                             (rule "mul_literals" (formula "43") (term "0,1,0,0,0"))
                                             (rule "polySimp_elimOne" (formula "43") (term "1,1,0,0,0"))
                                             (rule "inEqSimp_sepPosMonomial0" (formula "58") (term "0,0,0,1,0,1,0"))
                                             (rule "polySimp_mulComm0" (formula "58") (term "1,0,0,0,1,0,1,0"))
                                             (rule "polySimp_rightDist" (formula "58") (term "1,0,0,0,1,0,1,0"))
                                             (rule "mul_literals" (formula "58") (term "0,1,0,0,0,1,0,1,0"))
                                             (rule "polySimp_mulLiterals" (formula "58") (term "1,1,0,0,0,1,0,1,0"))
                                             (rule "polySimp_elimOne" (formula "58") (term "1,1,0,0,0,1,0,1,0"))
                                             (rule "inEqSimp_sepNegMonomial0" (formula "1"))
                                             (rule "polySimp_mulLiterals" (formula "1") (term "0"))
                                             (rule "inEqSimp_subsumption1" (formula "47") (ifseqformula "48"))
                                             (rule "leq_literals" (formula "47") (term "0"))
                                              (builtin "One Step Simplification" (formula "47"))
                                             (rule "true_left" (formula "47"))
                                             (rule "inEqSimp_subsumption1" (formula "59") (ifseqformula "51"))
                                             (rule "leq_literals" (formula "59") (term "0"))
                                              (builtin "One Step Simplification" (formula "59"))
                                             (rule "true_left" (formula "59"))
                                             (rule "inEqSimp_subsumption1" (formula "52") (ifseqformula "16"))
                                             (rule "inEqSimp_homoInEq0" (formula "52") (term "0"))
                                             (rule "polySimp_pullOutFactor1b" (formula "52") (term "0,0"))
                                             (rule "add_literals" (formula "52") (term "1,1,0,0"))
                                             (rule "times_zero_1" (formula "52") (term "1,0,0"))
                                             (rule "add_literals" (formula "52") (term "0,0"))
                                             (rule "qeq_literals" (formula "52") (term "0"))
                                              (builtin "One Step Simplification" (formula "52"))
                                             (rule "true_left" (formula "52"))
                                             (rule "polyDiv_pullOut" (formula "1") (term "0,0") (inst "polyDivCoeff=Z(1(#))"))
                                             (rule "polySimp_mulLiterals" (formula "1") (term "1,0,0,2,0,0"))
                                             (rule "equal_literals" (formula "1") (term "0,0,0"))
                                              (builtin "One Step Simplification" (formula "1"))
                                             (rule "mul_literals" (formula "1") (term "1,0,0,0,0"))
                                             (rule "polySimp_mulComm0" (formula "1") (term "0"))
                                             (rule "polySimp_addComm1" (formula "1") (term "0,0,1,0"))
                                             (rule "add_literals" (formula "1") (term "0,0,0,1,0"))
                                             (rule "polySimp_addComm0" (formula "1") (term "1,0"))
                                             (rule "polySimp_rightDist" (formula "1") (term "0"))
                                             (rule "mul_literals" (formula "1") (term "0,0"))
                                             (rule "inEqSimp_homoInEq1" (formula "1"))
                                             (rule "polySimp_mulComm0" (formula "1") (term "1,0"))
                                             (rule "polySimp_rightDist" (formula "1") (term "1,0"))
                                             (rule "polySimp_mulLiterals" (formula "1") (term "1,1,0"))
                                             (rule "mul_literals" (formula "1") (term "0,1,0"))
                                             (rule "polySimp_addAssoc" (formula "1") (term "0"))
                                             (rule "polySimp_addComm1" (formula "1") (term "0,0"))
                                             (rule "add_literals" (formula "1") (term "0,0,0"))
                                             (rule "inEqSimp_sepNegMonomial0" (formula "1"))
                                             (rule "polySimp_mulLiterals" (formula "1") (term "0"))
                                             (rule "inEqSimp_exactShadow3" (formula "16") (ifseqformula "46"))
                                             (rule "polySimp_rightDist" (formula "16") (term "0,0"))
                                             (rule "mul_literals" (formula "16") (term "0,0,0"))
                                             (rule "polySimp_addComm1" (formula "16") (term "0"))
                                             (rule "add_literals" (formula "16") (term "0,0"))
                                             (rule "inEqSimp_sepNegMonomial1" (formula "16"))
                                             (rule "polySimp_mulLiterals" (formula "16") (term "0"))
                                             (rule "polySimp_elimOne" (formula "16") (term "0"))
                                             (rule "inEqSimp_subsumption0" (formula "58") (ifseqformula "16"))
                                             (rule "leq_literals" (formula "58") (term "0"))
                                              (builtin "One Step Simplification" (formula "58"))
                                             (rule "true_left" (formula "58"))
                                             (rule "nnf_imp2or" (formula "29") (term "0,0"))
                                              (builtin "One Step Simplification" (formula "29"))
                                             (rule "nnf_imp2or" (formula "22") (term "0,0,0"))
                                             (rule "nnf_imp2or" (formula "9") (term "0,0,0"))
                                             (rule "nnf_imp2or" (formula "6") (term "0,0,0"))
                                             (rule "nnf_imp2or" (formula "24") (term "0,0,0"))
                                             (rule "nnf_imp2or" (formula "3") (term "0,0,0"))
                                             (rule "nnf_imp2or" (formula "21") (term "0,0,0"))
                                             (rule "nnf_imp2or" (formula "26") (term "0,0,0"))
                                             (rule "nnf_imp2or" (formula "25") (term "0,0,0"))
                                             (rule "nnf_imp2or" (formula "20") (term "0,0,0"))
                                             (rule "nnf_imp2or" (formula "23") (term "0,0,0"))
                                             (rule "nnf_imp2or" (formula "31") (term "0,0,0"))
                                             (rule "nnf_imp2or" (formula "5") (term "0,0,0"))
                                             (rule "nnf_imp2or" (formula "19") (term "0,0,0"))
                                             (rule "nnf_imp2or" (formula "2") (term "0,0,0"))
                                             (rule "nnf_imp2or" (formula "4") (term "0,0,0"))
                                             (rule "nnf_imp2or" (formula "27") (term "0,0,0"))
                                             (rule "nnf_imp2or" (formula "28") (term "0,0,0"))
                                             (rule "nnf_imp2or" (formula "8") (term "0,0,0"))
                                             (rule "nnf_imp2or" (formula "11") (term "0,0,0"))
                                             (rule "nnf_imp2or" (formula "30") (term "0,0,0"))
                                             (rule "nnf_imp2or" (formula "7") (term "0,0,0"))
                                             (rule "nnf_imp2or" (formula "10") (term "0,0,0"))
                                             (rule "nnf_imp2or" (formula "36") (term "0"))
                                             (rule "nnf_imp2or" (formula "55") (term "0"))
                                             (rule "nnf_imp2or" (formula "44") (term "0"))
                                             (rule "nnf_imp2or" (formula "57") (term "0"))
                                             (rule "nnf_imp2or" (formula "22") (term "1,0,0,0"))
                                             (rule "nnf_notAnd" (formula "22") (term "0,0,0,0"))
                                              (builtin "One Step Simplification" (formula "22"))
                                             (rule "nnf_notAnd" (formula "9") (term "0,0,0,0"))
                                              (builtin "One Step Simplification" (formula "9"))
                                             (rule "nnf_notAnd" (formula "6") (term "0,0,0,0"))
                                              (builtin "One Step Simplification" (formula "6"))
                                             (rule "nnf_notAnd" (formula "36") (term "0,0"))
                                             (rule "inEqSimp_notLeq" (formula "36") (term "0,0,0"))
                                             (rule "polySimp_rightDist" (formula "36") (term "1,0,0,0,0,0"))
                                             (rule "mul_literals" (formula "36") (term "0,1,0,0,0,0,0"))
                                             (rule "polySimp_addAssoc" (formula "36") (term "0,0,0,0,0"))
                                             (rule "add_literals" (formula "36") (term "0,0,0,0,0,0"))
                                             (rule "add_zero_left" (formula "36") (term "0,0,0,0,0"))
                                             (rule "inEqSimp_sepPosMonomial1" (formula "36") (term "0,0,0"))
                                             (rule "polySimp_mulLiterals" (formula "36") (term "1,0,0,0"))
                                             (rule "polySimp_elimOne" (formula "36") (term "1,0,0,0"))
                                             (rule "inEqSimp_notGeq" (formula "36") (term "1,0,0"))
                                             (rule "times_zero_1" (formula "36") (term "1,0,0,1,0,0"))
                                             (rule "add_literals" (formula "36") (term "0,0,1,0,0"))
                                             (rule "inEqSimp_sepPosMonomial0" (formula "36") (term "1,0,0"))
                                             (rule "mul_literals" (formula "36") (term "1,1,0,0"))
                                             (rule "nnf_notAnd" (formula "24") (term "0,0,0,0"))
                                              (builtin "One Step Simplification" (formula "24"))
                                             (rule "nnf_notAnd" (formula "55") (term "0,0"))
                                             (rule "inEqSimp_notLeq" (formula "55") (term "0,0,0"))
                                             (rule "polySimp_rightDist" (formula "55") (term "1,0,0,0,0,0"))
                                             (rule "mul_literals" (formula "55") (term "0,1,0,0,0,0,0"))
                                             (rule "polySimp_addAssoc" (formula "55") (term "0,0,0,0,0"))
                                             (rule "add_literals" (formula "55") (term "0,0,0,0,0,0"))
                                             (rule "add_zero_left" (formula "55") (term "0,0,0,0,0"))
                                             (rule "inEqSimp_sepPosMonomial1" (formula "55") (term "0,0,0"))
                                             (rule "polySimp_mulLiterals" (formula "55") (term "1,0,0,0"))
                                             (rule "polySimp_elimOne" (formula "55") (term "1,0,0,0"))
                                             (rule "inEqSimp_notGeq" (formula "55") (term "1,0,0"))
                                             (rule "mul_literals" (formula "55") (term "1,0,0,1,0,0"))
                                             (rule "add_literals" (formula "55") (term "0,0,1,0,0"))
                                             (rule "inEqSimp_sepPosMonomial0" (formula "55") (term "1,0,0"))
                                             (rule "mul_literals" (formula "55") (term "1,1,0,0"))
                                             (rule "nnf_notAnd" (formula "44") (term "0,0"))
                                             (rule "inEqSimp_notGeq" (formula "44") (term "1,0,0"))
                                             (rule "times_zero_1" (formula "44") (term "1,0,0,1,0,0"))
                                             (rule "add_literals" (formula "44") (term "0,0,1,0,0"))
                                             (rule "inEqSimp_sepPosMonomial0" (formula "44") (term "1,0,0"))
                                             (rule "mul_literals" (formula "44") (term "1,1,0,0"))
                                             (rule "inEqSimp_notLeq" (formula "44") (term "0,0,0"))
                                             (rule "polySimp_rightDist" (formula "44") (term "1,0,0,0,0,0"))
                                             (rule "mul_literals" (formula "44") (term "0,1,0,0,0,0,0"))
                                             (rule "polySimp_addAssoc" (formula "44") (term "0,0,0,0,0"))
                                             (rule "add_literals" (formula "44") (term "0,0,0,0,0,0"))
                                             (rule "add_zero_left" (formula "44") (term "0,0,0,0,0"))
                                             (rule "inEqSimp_sepPosMonomial1" (formula "44") (term "0,0,0"))
                                             (rule "polySimp_mulLiterals" (formula "44") (term "1,0,0,0"))
                                             (rule "polySimp_elimOne" (formula "44") (term "1,0,0,0"))
                                             (rule "nnf_imp2or" (formula "3") (term "1,0,0,0"))
                                             (rule "nnf_notAnd" (formula "3") (term "0,0,0,0"))
                                              (builtin "One Step Simplification" (formula "3"))
                                             (rule "nnf_notAnd" (formula "21") (term "0,0,0,0"))
                                              (builtin "One Step Simplification" (formula "21"))
                                             (rule "nnf_notOr" (formula "57") (term "1,0"))
                                             (rule "nnf_notAnd" (formula "57") (term "0,0"))
                                             (rule "inEqSimp_notLeq" (formula "57") (term "0,0,0"))
                                             (rule "polySimp_rightDist" (formula "57") (term "1,0,0,0,0,0"))
                                             (rule "mul_literals" (formula "57") (term "0,1,0,0,0,0,0"))
                                             (rule "polySimp_addAssoc" (formula "57") (term "0,0,0,0,0"))
                                             (rule "add_literals" (formula "57") (term "0,0,0,0,0,0"))
                                             (rule "add_zero_left" (formula "57") (term "0,0,0,0,0"))
                                             (rule "inEqSimp_sepPosMonomial1" (formula "57") (term "0,0,0"))
                                             (rule "polySimp_mulLiterals" (formula "57") (term "1,0,0,0"))
                                             (rule "polySimp_elimOne" (formula "57") (term "1,0,0,0"))
                                             (rule "inEqSimp_notGeq" (formula "57") (term "1,0,0"))
                                             (rule "times_zero_1" (formula "57") (term "1,0,0,1,0,0"))
                                             (rule "add_literals" (formula "57") (term "0,0,1,0,0"))
                                             (rule "inEqSimp_sepPosMonomial0" (formula "57") (term "1,0,0"))
                                             (rule "mul_literals" (formula "57") (term "1,1,0,0"))
                                             (rule "nnf_notAnd" (formula "26") (term "0,0,0,0"))
                                              (builtin "One Step Simplification" (formula "26"))
                                             (rule "nnf_imp2or" (formula "25") (term "1,0,0,0"))
                                             (rule "nnf_notAnd" (formula "25") (term "0,0,0,0"))
                                              (builtin "One Step Simplification" (formula "25"))
                                             (rule "nnf_imp2or" (formula "20") (term "1,0,0,0"))
                                             (rule "nnf_notAnd" (formula "20") (term "0,0,0,0"))
                                              (builtin "One Step Simplification" (formula "20"))
                                             (rule "nnf_imp2or" (formula "23") (term "1,0,0,0"))
                                             (rule "nnf_notAnd" (formula "23") (term "0,0,0,0"))
                                              (builtin "One Step Simplification" (formula "23"))
                                             (rule "nnf_notAnd" (formula "31") (term "0,0,0,0"))
                                              (builtin "One Step Simplification" (formula "31"))
                                             (rule "nnf_imp2or" (formula "5") (term "1,0,0,0"))
                                             (rule "nnf_notAnd" (formula "5") (term "0,0,0,0"))
                                              (builtin "One Step Simplification" (formula "5"))
                                             (rule "nnf_notAnd" (formula "19") (term "0,0,0,0"))
                                              (builtin "One Step Simplification" (formula "19"))
                                             (rule "nnf_imp2or" (formula "2") (term "1,0,0,0"))
                                             (rule "nnf_notAnd" (formula "2") (term "0,0,0,0"))
                                              (builtin "One Step Simplification" (formula "2"))
                                             (rule "nnf_notAnd" (formula "4") (term "0,0,0,0"))
                                              (builtin "One Step Simplification" (formula "4"))
                                             (rule "nnf_imp2or" (formula "27") (term "1,0,0,0"))
                                             (rule "nnf_notAnd" (formula "27") (term "0,0,0,0"))
                                              (builtin "One Step Simplification" (formula "27"))
                                             (rule "nnf_imp2or" (formula "28") (term "1,0,0,0"))
                                             (rule "nnf_notAnd" (formula "28") (term "0,0,0,0"))
                                              (builtin "One Step Simplification" (formula "28"))
                                             (rule "nnf_notAnd" (formula "8") (term "0,0,0,0"))
                                              (builtin "One Step Simplification" (formula "8"))
                                             (rule "nnf_imp2or" (formula "11") (term "1,0,0,0"))
                                             (rule "nnf_notAnd" (formula "11") (term "0,0,0,0"))
                                              (builtin "One Step Simplification" (formula "11"))
                                             (rule "nnf_imp2or" (formula "30") (term "1,0,0,0"))
                                             (rule "nnf_notAnd" (formula "30") (term "0,0,0,0"))
                                              (builtin "One Step Simplification" (formula "30"))
                                             (rule "nnf_notAnd" (formula "7") (term "0,0,0,0"))
                                              (builtin "One Step Simplification" (formula "7"))
                                             (rule "nnf_imp2or" (formula "10") (term "1,0,0,0"))
                                             (rule "nnf_notAnd" (formula "10") (term "0,0,0,0"))
                                              (builtin "One Step Simplification" (formula "10"))
                                             (rule "nnf_imp2or" (formula "9") (term "1,0,0,0"))
                                             (rule "nnf_imp2or" (formula "6") (term "1,0,0,0"))
                                             (rule "nnf_notOr" (formula "22") (term "1,0,0,0,0"))
                                             (rule "nnf_notOr" (formula "9") (term "1,0,0,0,0"))
                                             (rule "nnf_notOr" (formula "6") (term "1,0,0,0,0"))
                                             (rule "nnf_imp2or" (formula "24") (term "1,0,0,0"))
                                             (rule "nnf_notOr" (formula "24") (term "1,0,0,0,0"))
                                             (rule "nnf_notAnd" (formula "57") (term "0,1,0"))
                                             (rule "inEqSimp_notGeq" (formula "57") (term "1,0,1,0"))
                                             (rule "times_zero_1" (formula "57") (term "1,0,0,1,0,1,0"))
                                             (rule "add_literals" (formula "57") (term "0,0,1,0,1,0"))
                                             (rule "inEqSimp_sepPosMonomial0" (formula "57") (term "1,0,1,0"))
                                             (rule "mul_literals" (formula "57") (term "1,1,0,1,0"))
                                             (rule "nnf_notAnd" (formula "57") (term "1,1,0"))
                                              (builtin "One Step Simplification" (formula "57"))
                                             (rule "nnf_imp2or" (formula "21") (term "1,0,0,0"))
                                             (rule "nnf_notOr" (formula "3") (term "0,0,0,0,0"))
                                             (rule "nnf_notOr" (formula "21") (term "1,0,0,0,0"))
                                             (rule "nnf_imp2or" (formula "26") (term "1,0,0,0"))
                                             (rule "nnf_notOr" (formula "26") (term "1,0,0,0,0"))
                                             (rule "nnf_imp2or" (formula "31") (term "1,0,0,0"))
                                             (rule "nnf_notOr" (formula "25") (term "1,0,0,0,0"))
                                             (rule "nnf_imp2or" (formula "19") (term "1,0,0,0"))
                                             (rule "nnf_notOr" (formula "20") (term "1,0,0,0,0"))
                                             (rule "nnf_notOr" (formula "23") (term "1,0,0,0,0"))
                                             (rule "nnf_imp2or" (formula "4") (term "1,0,0,0"))
                                             (rule "nnf_notOr" (formula "31") (term "1,0,0,0,0"))
                                             (rule "nnf_notOr" (formula "5") (term "1,0,0,0,0"))
                                             (rule "nnf_notOr" (formula "19") (term "1,0,0,0,0"))
                                             (rule "nnf_imp2or" (formula "8") (term "1,0,0,0"))
                                             (rule "nnf_notOr" (formula "2") (term "0,0,0,0,0"))
                                             (rule "nnf_notOr" (formula "4") (term "1,0,0,0,0"))
                                             (rule "nnf_notOr" (formula "27") (term "1,0,0,0,0"))
                                             (rule "nnf_imp2or" (formula "7") (term "1,0,0,0"))
                                             (rule "nnf_notOr" (formula "28") (term "1,0,0,0,0"))
                                             (rule "nnf_notOr" (formula "8") (term "1,0,0,0,0"))
                                             (rule "nnf_notOr" (formula "11") (term "1,0,0,0,0"))
                                             (rule "nnf_notOr" (formula "30") (term "1,0,0,0,0"))
                                             (rule "nnf_notOr" (formula "7") (term "1,0,0,0,0"))
                                             (rule "nnf_notOr" (formula "10") (term "1,0,0,0,0"))
                                             (rule "nnf_notAnd" (formula "57") (term "0,0,1,0"))
                                             (rule "inEqSimp_notLeq" (formula "57") (term "1,0,0,1,0"))
                                             (rule "polySimp_rightDist" (formula "57") (term "1,0,0,1,0,0,1,0"))
                                             (rule "mul_literals" (formula "57") (term "0,1,0,0,1,0,0,1,0"))
                                             (rule "polySimp_addAssoc" (formula "57") (term "0,0,1,0,0,1,0"))
                                             (rule "add_literals" (formula "57") (term "0,0,0,1,0,0,1,0"))
                                             (rule "add_zero_left" (formula "57") (term "0,0,1,0,0,1,0"))
                                             (rule "inEqSimp_sepPosMonomial1" (formula "57") (term "1,0,0,1,0"))
                                             (rule "polySimp_mulLiterals" (formula "57") (term "1,1,0,0,1,0"))
                                             (rule "polySimp_elimOne" (formula "57") (term "1,1,0,0,1,0"))
                                             (rule "nnf_notOr" (formula "9") (term "0,1,0,0,0,0"))
                                             (rule "nnf_notOr" (formula "24") (term "0,1,0,0,0,0"))
                                             (rule "nnf_notOr" (formula "3") (term "0,0,0,0,0,0"))
                                             (rule "nnf_notOr" (formula "20") (term "0,1,0,0,0,0"))
                                             (rule "nnf_notOr" (formula "23") (term "0,1,0,0,0,0"))
                                             (rule "nnf_notOr" (formula "19") (term "0,1,0,0,0,0"))
                                             (rule "nnf_notOr" (formula "2") (term "0,0,0,0,0,0"))
                                             (rule "nnf_notOr" (formula "8") (term "0,1,0,0,0,0"))
                                             (rule "nnf_notOr" (formula "9") (term "0,0,1,0,0,0,0"))
                                             (rule "nnf_notOr" (formula "3") (term "0,0,0,0,0,0,0"))
                                             (rule "nnf_notOr" (formula "20") (term "0,0,1,0,0,0,0"))
                                             (rule "nnf_notOr" (formula "19") (term "0,0,1,0,0,0,0"))
                                             (rule "nnf_notOr" (formula "2") (term "0,0,0,0,0,0,0"))
                                             (rule "nnf_notOr" (formula "8") (term "0,0,1,0,0,0,0"))
                                             (rule "nnf_notOr" (formula "9") (term "0,0,0,1,0,0,0,0"))
                                             (rule "nnf_notOr" (formula "3") (term "1,0,0,0,0,0,0,0"))
                                             (rule "nnf_notOr" (formula "2") (term "1,0,0,0,0,0,0,0"))
                                             (rule "nnf_notOr" (formula "8") (term "0,0,0,1,0,0,0,0"))
                                             (rule "nnf_notOr" (formula "3") (term "0,1,0,0,0,0,0,0,0"))
                                             (rule "nnf_notOr" (formula "2") (term "0,1,0,0,0,0,0,0,0"))
                                             (rule "commute_or_2" (formula "36") (term "0"))
                                             (rule "commute_or_2" (formula "55") (term "0"))
                                             (rule "cnf_rightDist" (formula "29") (term "0,0"))
                                             (rule "commute_or_2" (formula "44") (term "0"))
                                             (rule "commute_or" (formula "22") (term "1,0,0,0"))
                                             (rule "ifthenelse_split" (formula "54") (term "0"))
                                             (branch "result_46 = ls TRUE"
                                                (rule "applyEqReverse" (formula "63") (term "0,0") (ifseqformula "55"))
                                                (rule "applyEqReverse" (formula "53") (term "0,0") (ifseqformula "55"))
                                                (rule "applyEqReverse" (formula "56") (term "0,0,0,1,0,0") (ifseqformula "55"))
                                                (rule "hideAuxiliaryEq" (formula "55"))
                                                (rule "applyEq" (formula "57") (term "1,0,1,1,0,0,1,1,0") (ifseqformula "54"))
                                                (rule "applyEq" (formula "68") (term "1,0,0") (ifseqformula "54"))
                                                (rule "applyEq" (formula "57") (term "1,0,1,0,0,0") (ifseqformula "54"))
                                                (rule "applyEq" (formula "67") (term "1,1") (ifseqformula "54"))
                                                (rule "lenOfSeqSubEQ" (formula "53") (term "0") (ifseqformula "67"))
                                                (rule "polySimp_elimSub" (formula "53") (term "1,0"))
                                                (rule "mul_literals" (formula "53") (term "1,1,0"))
                                                (rule "add_zero_right" (formula "53") (term "1,0"))
                                                (rule "lenOfSeqSubEQ" (formula "57") (term "1,1,0,0,1,1,0") (ifseqformula "67"))
                                                (rule "polySimp_elimSub" (formula "57") (term "1,1,1,0,0,1,1,0"))
                                                (rule "mul_literals" (formula "57") (term "1,1,1,1,0,0,1,1,0"))
                                                (rule "add_zero_right" (formula "57") (term "1,1,1,0,0,1,1,0"))
                                                (rule "lenOfSeqSubEQ" (formula "57") (term "1,0,0,0") (ifseqformula "67"))
                                                (rule "polySimp_elimSub" (formula "57") (term "1,1,0,0,0"))
                                                (rule "mul_literals" (formula "57") (term "1,1,1,0,0,0"))
                                                (rule "add_zero_right" (formula "57") (term "1,1,0,0,0"))
                                                (rule "inEqSimp_ltToLeq" (formula "53") (term "0,0"))
                                                (rule "add_zero_right" (formula "53") (term "0,0,0"))
                                                (rule "polySimp_mulComm0" (formula "53") (term "1,0,0,0"))
                                                (rule "inEqSimp_ltToLeq" (formula "57") (term "0,1,1,0,0,1,1,0"))
                                                (rule "add_zero_right" (formula "57") (term "0,0,1,1,0,0,1,1,0"))
                                                (rule "polySimp_mulComm0" (formula "57") (term "1,0,0,1,1,0,0,1,1,0"))
                                                (rule "inEqSimp_ltToLeq" (formula "57") (term "0,1,0,0,0"))
                                                (rule "add_zero_right" (formula "57") (term "0,0,1,0,0,0"))
                                                (rule "polySimp_mulComm0" (formula "57") (term "1,0,0,1,0,0,0"))
                                                (rule "applyEq" (formula "41") (term "1,0") (ifseqformula "54"))
                                                (rule "applyEq" (formula "59") (term "0,1,0,0") (ifseqformula "54"))
                                                (rule "applyEq" (formula "44") (term "1,0,1,0,0,0") (ifseqformula "54"))
                                                (rule "applyEq" (formula "71") (term "0") (ifseqformula "54"))
                                                (rule "applyEq" (formula "56") (term "1,0,0") (ifseqformula "54"))
                                                (rule "lenOfSeqSubEQ" (formula "56") (term "0") (ifseqformula "67"))
                                                (rule "polySimp_elimSub" (formula "56") (term "1,0"))
                                                (rule "mul_literals" (formula "56") (term "1,1,0"))
                                                (rule "add_zero_right" (formula "56") (term "1,0"))
                                                (rule "inEqSimp_ltToLeq" (formula "56") (term "0,0"))
                                                (rule "add_zero_right" (formula "56") (term "0,0,0"))
                                                (rule "polySimp_mulComm0" (formula "56") (term "1,0,0,0"))
                                                (rule "applyEq" (formula "44") (term "1,0,0,0,1,0,0") (ifseqformula "54"))
                                                (rule "applyEq" (formula "57") (term "1,0,1,1,0,0,1,0") (ifseqformula "54"))
                                                (rule "lenOfSeqSubEQ" (formula "57") (term "1,1,0,0,1,0") (ifseqformula "67"))
                                                (rule "polySimp_elimSub" (formula "57") (term "1,1,1,0,0,1,0"))
                                                (rule "mul_literals" (formula "57") (term "1,1,1,1,0,0,1,0"))
                                                (rule "add_zero_right" (formula "57") (term "1,1,1,0,0,1,0"))
                                                (rule "inEqSimp_ltToLeq" (formula "57") (term "0,1,1,0,0,1,0"))
                                                (rule "add_zero_right" (formula "57") (term "0,0,1,1,0,0,1,0"))
                                                (rule "polySimp_mulComm0" (formula "57") (term "1,0,0,1,1,0,0,1,0"))
                                                (rule "applyEq" (formula "67") (term "1,0,2,0") (ifseqformula "54"))
                                                (rule "applyEq" (formula "68") (term "1,0,1,0") (ifseqformula "54"))
                                                (rule "applyEq" (formula "66") (term "1,0,0") (ifseqformula "54"))
                                                (rule "applyEq" (formula "64") (term "0,1,0") (ifseqformula "54"))
                                                (rule "applyEq" (formula "42") (term "0,0") (ifseqformula "54"))
                                                (rule "applyEq" (formula "67") (term "1,0,0") (ifseqformula "54"))
                                                (rule "applyEq" (formula "43") (term "1,0,0") (ifseqformula "54"))
                                                (rule "applyEq" (formula "70") (term "1,0") (ifseqformula "54"))
                                                (rule "close" (formula "70") (ifseqformula "34"))
                                             )
                                             (branch "result_46 = ls FALSE"
                                                (rule "applyEqReverse" (formula "55") (term "0,0,0,1,0,0") (ifseqformula "54"))
                                                (rule "applyEqReverse" (formula "61") (term "0,0") (ifseqformula "54"))
                                                (rule "applyEqReverse" (formula "53") (term "0,0") (ifseqformula "54"))
                                                (rule "hideAuxiliaryEq" (formula "53"))
                                                (rule "commute_or" (formula "3") (term "1,0,0,0"))
                                                (rule "distr_forallAnd" (formula "29") (term "0"))
                                                (rule "distr_forallAnd" (formula "29"))
                                                (rule "andLeft" (formula "29"))
                                                (rule "commute_or" (formula "25") (term "1,0,0,0"))
                                                (rule "commute_or" (formula "20") (term "1,0,0,0"))
                                                (rule "commute_or" (formula "23") (term "1,0,0,0"))
                                                (rule "commute_or" (formula "5") (term "1,0,0,0"))
                                                (rule "commute_or" (formula "55") (term "0,0"))
                                                (rule "commute_or" (formula "2") (term "1,0,0,0"))
                                                (rule "commute_or" (formula "27") (term "1,0,0,0"))
                                                (rule "commute_or_2" (formula "6") (term "0,0,0"))
                                                (rule "commute_or" (formula "28") (term "1,0,0,0"))
                                                (rule "commute_or" (formula "11") (term "1,0,0,0"))
                                                (rule "commute_or" (formula "31") (term "1,0,0,0"))
                                                (rule "commute_or" (formula "55") (term "1,1,0"))
                                                (rule "lenNonNegative" (formula "64") (term "0"))
                                                (rule "inEqSimp_commuteLeq" (formula "64"))
                                                (rule "applyEq" (formula "64") (term "0") (ifseqformula "65"))
                                                (rule "inEqSimp_sepPosMonomial1" (formula "64"))
                                                (rule "mul_literals" (formula "64") (term "1"))
                                                (rule "inEqSimp_subsumption1" (formula "64") (ifseqformula "54"))
                                                (rule "leq_literals" (formula "64") (term "0"))
                                                 (builtin "One Step Simplification" (formula "64"))
                                                (rule "true_left" (formula "64"))
                                                (rule "equalityToSeqGetAndSeqLenLeft" (formula "65") (inst "iv=iv"))
                                                (rule "andLeft" (formula "65"))
                                                (rule "lenOfSeqSub" (formula "65") (term "0"))
                                                (rule "polySimp_elimSub" (formula "65") (term "1,0"))
                                                (rule "times_zero_2" (formula "65") (term "1,1,0"))
                                                (rule "add_zero_right" (formula "65") (term "1,0"))
                                                 (builtin "One Step Simplification" (formula "65"))
                                                (rule "eqSymm" (formula "65") (term "1"))
                                                (rule "lenOfSeqSub" (formula "66") (term "1,1,0,0"))
                                                (rule "polySimp_elimSub" (formula "66") (term "1,1,1,0,0"))
                                                (rule "times_zero_2" (formula "66") (term "1,1,1,1,0,0"))
                                                (rule "add_zero_right" (formula "66") (term "1,1,1,0,0"))
                                                (rule "inEqSimp_ltToLeq" (formula "65") (term "0"))
                                                (rule "add_zero_right" (formula "65") (term "0,0"))
                                                (rule "polySimp_mulComm0" (formula "65") (term "1,0,0"))
                                                (rule "inEqSimp_ltToLeq" (formula "66") (term "0,1,1,0,0"))
                                                (rule "add_zero_right" (formula "66") (term "0,0,1,1,0,0"))
                                                (rule "polySimp_mulComm0" (formula "66") (term "1,0,0,1,1,0,0"))
                                                (rule "inEqSimp_ltToLeq" (formula "66") (term "1,0,0"))
                                                (rule "polySimp_mulComm0" (formula "66") (term "1,0,0,1,0,0"))
                                                (rule "inEqSimp_commuteLeq" (formula "66") (term "0,0,0"))
                                                (rule "applyEq" (formula "66") (term "0,0,1,0") (ifseqformula "67"))
                                                 (builtin "One Step Simplification" (formula "66"))
                                                (rule "true_left" (formula "66"))
                                                (rule "inEqSimp_sepNegMonomial0" (formula "65") (term "0"))
                                                (rule "polySimp_mulLiterals" (formula "65") (term "0,0"))
                                                (rule "polySimp_elimOne" (formula "65") (term "0,0"))
                                                (rule "seqGetAlphaCast" (formula "67") (term "0"))
                                                (rule "castDel" (formula "67") (term "0"))
                                                 (builtin "One Step Simplification" (formula "67"))
                                                (rule "true_left" (formula "67"))
                                                (rule "commute_or_2" (formula "21") (term "0,0,0"))
                                                (rule "cut_direct" (formula "59") (term "0,0,0,0"))
                                                (branch "CUT: result_48.<created> = TRUE TRUE"
                                                    (builtin "One Step Simplification" (formula "60"))
                                                   (rule "true_left" (formula "60"))
                                                   (rule "commute_or_2" (formula "26") (term "0,0,0"))
                                                   (rule "commute_or" (formula "10") (term "1,0,0,0"))
                                                   (rule "commute_or" (formula "9") (term "1,0,0,0"))
                                                   (rule "commute_or" (formula "24") (term "1,0,0,0"))
                                                   (rule "commute_or_2" (formula "32") (term "0,0,0"))
                                                   (rule "commute_or_2" (formula "4") (term "0,0,0"))
                                                   (rule "div_axiom" (formula "1") (term "0,0") (inst "quotient=quotient_0"))
                                                   (rule "qeq_literals" (formula "1") (term "0,1,1"))
                                                    (builtin "One Step Simplification" (formula "1"))
                                                   (rule "equal_literals" (formula "1") (term "0"))
                                                    (builtin "One Step Simplification" (formula "1"))
                                                   (rule "mul_literals" (formula "1") (term "1,1,1"))
                                                   (rule "andLeft" (formula "1"))
                                                   (rule "andLeft" (formula "1"))
                                                   (rule "polySimp_addAssoc" (formula "3") (term "0,1"))
                                                   (rule "add_literals" (formula "3") (term "0,0,1"))
                                                   (rule "polySimp_addComm1" (formula "3") (term "1"))
                                                   (rule "add_literals" (formula "3") (term "0,1"))
                                                   (rule "inEqSimp_homoInEq0" (formula "2"))
                                                   (rule "polySimp_mulLiterals" (formula "2") (term "1,0"))
                                                   (rule "polySimp_addComm1" (formula "2") (term "0"))
                                                   (rule "inEqSimp_homoInEq1" (formula "3"))
                                                   (rule "polySimp_mulLiterals" (formula "3") (term "1,0"))
                                                   (rule "polySimp_addComm1" (formula "3") (term "0"))
                                                   (rule "applyEq" (formula "4") (term "0,0") (ifseqformula "1"))
                                                   (rule "inEqSimp_homoInEq1" (formula "4"))
                                                   (rule "polySimp_mulLiterals" (formula "4") (term "1,0"))
                                                   (rule "polySimp_addComm1" (formula "4") (term "0"))
                                                   (rule "inEqSimp_sepPosMonomial1" (formula "2"))
                                                   (rule "polySimp_mulComm0" (formula "2") (term "1"))
                                                   (rule "polySimp_rightDist" (formula "2") (term "1"))
                                                   (rule "polySimp_mulLiterals" (formula "2") (term "1,1"))
                                                   (rule "mul_literals" (formula "2") (term "0,1"))
                                                   (rule "inEqSimp_sepPosMonomial0" (formula "3"))
                                                   (rule "polySimp_mulComm0" (formula "3") (term "1"))
                                                   (rule "polySimp_rightDist" (formula "3") (term "1"))
                                                   (rule "polySimp_mulLiterals" (formula "3") (term "1,1"))
                                                   (rule "mul_literals" (formula "3") (term "0,1"))
                                                   (rule "inEqSimp_sepPosMonomial0" (formula "4"))
                                                   (rule "polySimp_mulComm0" (formula "4") (term "1"))
                                                   (rule "polySimp_rightDist" (formula "4") (term "1"))
                                                   (rule "polySimp_mulLiterals" (formula "4") (term "1,1"))
                                                   (rule "mul_literals" (formula "4") (term "0,1"))
                                                   (rule "inEqSimp_subsumption0" (formula "3") (ifseqformula "4"))
                                                   (rule "inEqSimp_homoInEq0" (formula "3") (term "0"))
                                                   (rule "polySimp_mulComm0" (formula "3") (term "1,0,0"))
                                                   (rule "polySimp_rightDist" (formula "3") (term "1,0,0"))
                                                   (rule "mul_literals" (formula "3") (term "0,1,0,0"))
                                                   (rule "polySimp_mulLiterals" (formula "3") (term "1,1,0,0"))
                                                   (rule "polySimp_addAssoc" (formula "3") (term "0,0"))
                                                   (rule "polySimp_addComm1" (formula "3") (term "0,0,0"))
                                                   (rule "add_literals" (formula "3") (term "0,0,0,0"))
                                                   (rule "polySimp_pullOutFactor0b" (formula "3") (term "0,0"))
                                                   (rule "add_literals" (formula "3") (term "1,1,0,0"))
                                                   (rule "times_zero_1" (formula "3") (term "1,0,0"))
                                                   (rule "add_zero_right" (formula "3") (term "0,0"))
                                                   (rule "qeq_literals" (formula "3") (term "0"))
                                                    (builtin "One Step Simplification" (formula "3"))
                                                   (rule "true_left" (formula "3"))
                                                   (rule "inEqSimp_exactShadow3" (formula "2") (ifseqformula "18"))
                                                   (rule "polySimp_rightDist" (formula "2") (term "0,0"))
                                                   (rule "polySimp_mulLiterals" (formula "2") (term "1,0,0"))
                                                   (rule "mul_literals" (formula "2") (term "0,0,0"))
                                                   (rule "polySimp_addComm1" (formula "2") (term "0"))
                                                   (rule "add_literals" (formula "2") (term "0,0"))
                                                   (rule "inEqSimp_sepNegMonomial1" (formula "2"))
                                                   (rule "polySimp_mulLiterals" (formula "2") (term "0"))
                                                   (rule "elimGcdLeq_antec" (formula "2") (inst "elimGcdRightDiv=Z(neglit(1(#)))") (inst "elimGcdLeftDiv=quotient_0") (inst "elimGcd=Z(6(9(2(7(6(9(4(9(2(4(#)))))))))))"))
                                                   (rule "polySimp_mulLiterals" (formula "2") (term "1,0,1,0"))
                                                   (rule "neg_literal" (formula "2") (term "0,0,0,0,0,1,0"))
                                                   (rule "mul_literals" (formula "2") (term "0,1,0,0,0,0,1,0"))
                                                   (rule "leq_literals" (formula "2") (term "0,0"))
                                                    (builtin "One Step Simplification" (formula "2"))
                                                   (rule "mul_literals" (formula "2") (term "1,0,0,0,0,0"))
                                                   (rule "add_literals" (formula "2") (term "0,0,0,0,0"))
                                                   (rule "add_literals" (formula "2") (term "0,0,0,0"))
                                                   (rule "polySimp_pullOutFactor0b" (formula "2") (term "0,0"))
                                                   (rule "add_literals" (formula "2") (term "1,1,0,0"))
                                                   (rule "times_zero_1" (formula "2") (term "1,0,0"))
                                                   (rule "add_zero_right" (formula "2") (term "0,0"))
                                                   (rule "qeq_literals" (formula "2") (term "0"))
                                                    (builtin "One Step Simplification" (formula "2"))
                                                   (rule "inEqSimp_exactShadow3" (formula "56") (ifseqformula "4"))
                                                   (rule "mul_literals" (formula "56") (term "0,0"))
                                                   (rule "add_zero_left" (formula "56") (term "0"))
                                                   (rule "inEqSimp_sepPosMonomial1" (formula "56"))
                                                   (rule "mul_literals" (formula "56") (term "1"))
                                                   (rule "inEqSimp_contradInEq3" (formula "56") (ifseqformula "2"))
                                                   (rule "greater_literals" (formula "56") (term "0,0"))
                                                    (builtin "One Step Simplification" (formula "56"))
                                                   (rule "mul_literals" (formula "56") (term "0,0"))
                                                   (rule "qeq_literals" (formula "56") (term "0"))
                                                    (builtin "One Step Simplification" (formula "56"))
                                                   (rule "closeFalse" (formula "56"))
                                                )
                                                (branch "CUT: result_48.<created> = TRUE FALSE"
                                                    (builtin "One Step Simplification" (formula "59"))
                                                   (rule "commute_or_2" (formula "26") (term "0,0,0"))
                                                   (rule "commute_or" (formula "10") (term "1,0,0,0"))
                                                   (rule "commute_or" (formula "9") (term "1,0,0,0"))
                                                   (rule "commute_or" (formula "24") (term "1,0,0,0"))
                                                   (rule "commute_or_2" (formula "32") (term "0,0,0"))
                                                   (rule "commute_or_2" (formula "4") (term "0,0,0"))
                                                   (rule "div_axiom" (formula "1") (term "0,0") (inst "quotient=quotient_0"))
                                                   (rule "mul_literals" (formula "1") (term "1,1,1,1,1"))
                                                   (rule "qeq_literals" (formula "1") (term "0,1,1"))
                                                    (builtin "One Step Simplification" (formula "1"))
                                                   (rule "equal_literals" (formula "1") (term "0"))
                                                    (builtin "One Step Simplification" (formula "1"))
                                                   (rule "andLeft" (formula "1"))
                                                   (rule "andLeft" (formula "1"))
                                                   (rule "polySimp_addAssoc" (formula "3") (term "0,1"))
                                                   (rule "add_literals" (formula "3") (term "0,0,1"))
                                                   (rule "polySimp_addComm1" (formula "3") (term "1"))
                                                   (rule "add_literals" (formula "3") (term "0,1"))
                                                   (rule "inEqSimp_homoInEq0" (formula "2"))
                                                   (rule "polySimp_mulLiterals" (formula "2") (term "1,0"))
                                                   (rule "polySimp_addComm1" (formula "2") (term "0"))
                                                   (rule "inEqSimp_homoInEq1" (formula "3"))
                                                   (rule "polySimp_mulLiterals" (formula "3") (term "1,0"))
                                                   (rule "polySimp_addComm1" (formula "3") (term "0"))
                                                   (rule "applyEqRigid" (formula "4") (term "0,0") (ifseqformula "1"))
                                                   (rule "inEqSimp_homoInEq1" (formula "4"))
                                                   (rule "polySimp_mulLiterals" (formula "4") (term "1,0"))
                                                   (rule "polySimp_addComm1" (formula "4") (term "0"))
                                                   (rule "inEqSimp_sepPosMonomial1" (formula "2"))
                                                   (rule "polySimp_mulComm0" (formula "2") (term "1"))
                                                   (rule "polySimp_rightDist" (formula "2") (term "1"))
                                                   (rule "mul_literals" (formula "2") (term "0,1"))
                                                   (rule "polySimp_mulLiterals" (formula "2") (term "1,1"))
                                                   (rule "inEqSimp_sepPosMonomial0" (formula "3"))
                                                   (rule "polySimp_mulComm0" (formula "3") (term "1"))
                                                   (rule "polySimp_rightDist" (formula "3") (term "1"))
                                                   (rule "polySimp_mulLiterals" (formula "3") (term "1,1"))
                                                   (rule "mul_literals" (formula "3") (term "0,1"))
                                                   (rule "inEqSimp_sepPosMonomial0" (formula "4"))
                                                   (rule "polySimp_mulComm0" (formula "4") (term "1"))
                                                   (rule "polySimp_rightDist" (formula "4") (term "1"))
                                                   (rule "polySimp_mulLiterals" (formula "4") (term "1,1"))
                                                   (rule "mul_literals" (formula "4") (term "0,1"))
                                                   (rule "inEqSimp_subsumption0" (formula "3") (ifseqformula "4"))
                                                   (rule "inEqSimp_homoInEq0" (formula "3") (term "0"))
                                                   (rule "polySimp_mulComm0" (formula "3") (term "1,0,0"))
                                                   (rule "polySimp_rightDist" (formula "3") (term "1,0,0"))
                                                   (rule "polySimp_mulLiterals" (formula "3") (term "1,1,0,0"))
                                                   (rule "mul_literals" (formula "3") (term "0,1,0,0"))
                                                   (rule "polySimp_addAssoc" (formula "3") (term "0,0"))
                                                   (rule "polySimp_addComm1" (formula "3") (term "0,0,0"))
                                                   (rule "add_literals" (formula "3") (term "0,0,0,0"))
                                                   (rule "polySimp_pullOutFactor0b" (formula "3") (term "0,0"))
                                                   (rule "add_literals" (formula "3") (term "1,1,0,0"))
                                                   (rule "times_zero_1" (formula "3") (term "1,0,0"))
                                                   (rule "add_literals" (formula "3") (term "0,0"))
                                                   (rule "qeq_literals" (formula "3") (term "0"))
                                                    (builtin "One Step Simplification" (formula "3"))
                                                   (rule "true_left" (formula "3"))
                                                   (rule "inEqSimp_exactShadow3" (formula "2") (ifseqformula "18"))
                                                   (rule "polySimp_rightDist" (formula "2") (term "0,0"))
                                                   (rule "mul_literals" (formula "2") (term "0,0,0"))
                                                   (rule "polySimp_mulLiterals" (formula "2") (term "1,0,0"))
                                                   (rule "polySimp_addComm1" (formula "2") (term "0"))
                                                   (rule "add_literals" (formula "2") (term "0,0"))
                                                   (rule "inEqSimp_sepNegMonomial1" (formula "2"))
                                                   (rule "polySimp_mulLiterals" (formula "2") (term "0"))
                                                   (rule "elimGcdLeq_antec" (formula "2") (inst "elimGcdRightDiv=Z(neglit(1(#)))") (inst "elimGcdLeftDiv=quotient_0") (inst "elimGcd=Z(6(9(2(7(6(9(4(9(2(4(#)))))))))))"))
                                                   (rule "neg_literal" (formula "2") (term "0,0,0,0,0,1,0"))
                                                   (rule "leq_literals" (formula "2") (term "0,0"))
                                                    (builtin "One Step Simplification" (formula "2"))
                                                   (rule "polySimp_mulLiterals" (formula "2") (term "1,0,0,0,0,0"))
                                                   (rule "polySimp_mulLiterals" (formula "2") (term "1,0,0"))
                                                   (rule "mul_literals" (formula "2") (term "1,0,0,0,0,0"))
                                                   (rule "polySimp_addLiterals" (formula "2") (term "0,0,0,0"))
                                                   (rule "add_literals" (formula "2") (term "0,0,0,0"))
                                                   (rule "polySimp_pullOutFactor0b" (formula "2") (term "0,0"))
                                                   (rule "add_literals" (formula "2") (term "1,1,0,0"))
                                                   (rule "times_zero_1" (formula "2") (term "1,0,0"))
                                                   (rule "add_literals" (formula "2") (term "0,0"))
                                                   (rule "qeq_literals" (formula "2") (term "0"))
                                                    (builtin "One Step Simplification" (formula "2"))
                                                   (rule "inEqSimp_exactShadow3" (formula "56") (ifseqformula "4"))
                                                   (rule "mul_literals" (formula "56") (term "0,0"))
                                                   (rule "add_zero_left" (formula "56") (term "0"))
                                                   (rule "inEqSimp_sepPosMonomial1" (formula "56"))
                                                   (rule "mul_literals" (formula "56") (term "1"))
                                                   (rule "inEqSimp_contradInEq3" (formula "56") (ifseqformula "2"))
                                                   (rule "greater_literals" (formula "56") (term "0,0"))
                                                    (builtin "One Step Simplification" (formula "56"))
                                                   (rule "mul_literals" (formula "56") (term "0,0"))
                                                   (rule "qeq_literals" (formula "56") (term "0"))
                                                    (builtin "One Step Simplification" (formula "56"))
                                                   (rule "closeFalse" (formula "56"))
                                                )
                                             )
                                          )
                                          (branch
                                             (rule "inEqSimp_geqRight" (formula "85"))
                                             (rule "polySimp_rightDist" (formula "1") (term "1,0,0"))
                                             (rule "mul_literals" (formula "1") (term "0,1,0,0"))
                                             (rule "polySimp_addAssoc" (formula "1") (term "0,0"))
                                             (rule "add_literals" (formula "1") (term "0,0,0"))
                                             (rule "polySimp_addComm1" (formula "1") (term "0"))
                                             (rule "inEqSimp_ltToLeq" (formula "58") (term "0,0,0"))
                                             (rule "polySimp_mulComm0" (formula "58") (term "1,0,0,0,0,0"))
                                             (rule "inEqSimp_ltToLeq" (formula "58") (term "0,0,0,1,0,1,0"))
                                             (rule "polySimp_mulComm0" (formula "58") (term "1,0,0,0,0,0,1,0,1,0"))
                                             (rule "inEqSimp_ltToLeq" (formula "71"))
                                             (rule "polySimp_rightDist" (formula "71") (term "1,0,0"))
                                             (rule "mul_literals" (formula "71") (term "0,1,0,0"))
                                             (rule "polySimp_addAssoc" (formula "71") (term "0,0"))
                                             (rule "add_literals" (formula "71") (term "0,0,0"))
                                             (rule "add_zero_left" (formula "71") (term "0,0"))
                                             (rule "polySimp_pullOutFactor2" (formula "71") (term "0"))
                                             (rule "add_literals" (formula "71") (term "1,0"))
                                             (rule "times_zero_1" (formula "71") (term "0"))
                                             (rule "leq_literals" (formula "71"))
                                             (rule "true_left" (formula "71"))
                                             (rule "inEqSimp_ltToLeq" (formula "58") (term "1,0,0,0,1,0"))
                                             (rule "polySimp_mulComm0" (formula "58") (term "1,0,0,1,0,0,0,1,0"))
                                             (rule "inEqSimp_ltToLeq" (formula "16"))
                                             (rule "polySimp_mulComm0" (formula "16") (term "1,0,0"))
                                             (rule "polySimp_addComm1" (formula "16") (term "0"))
                                             (rule "inEqSimp_ltToLeq" (formula "35") (term "0,0,0"))
                                             (rule "polySimp_mulComm0" (formula "35") (term "1,0,0,0,0,0"))
                                             (rule "inEqSimp_ltToLeq" (formula "43") (term "0,0,0"))
                                             (rule "polySimp_mulComm0" (formula "43") (term "1,0,0,0,0,0"))
                                             (rule "inEqSimp_ltToLeq" (formula "56") (term "0,0,0"))
                                             (rule "polySimp_mulComm0" (formula "56") (term "1,0,0,0,0,0"))
                                             (rule "mod_axiom" (formula "1") (term "0,1,0"))
                                             (rule "polySimp_mulLiterals" (formula "1") (term "1,0,1,0"))
                                             (rule "polySimp_mulComm0" (formula "1") (term "1,0"))
                                             (rule "polySimp_rightDist" (formula "1") (term "1,0"))
                                             (rule "polySimp_mulLiterals" (formula "1") (term "1,1,0"))
                                             (rule "polySimp_rightDist" (formula "1") (term "0,1,0"))
                                             (rule "mul_literals" (formula "1") (term "0,0,1,0"))
                                             (rule "polySimp_addComm1" (formula "1") (term "0"))
                                             (rule "polySimp_addAssoc" (formula "1") (term "0,0"))
                                             (rule "polySimp_addAssoc" (formula "1") (term "0,0,0"))
                                             (rule "add_literals" (formula "1") (term "0,0,0,0"))
                                             (rule "add_zero_left" (formula "1") (term "0,0,0"))
                                             (rule "inEqSimp_sepPosMonomial0" (formula "58") (term "0,0,0"))
                                             (rule "polySimp_mulComm0" (formula "58") (term "1,0,0,0"))
                                             (rule "polySimp_rightDist" (formula "58") (term "1,0,0,0"))
                                             (rule "polySimp_mulLiterals" (formula "58") (term "1,1,0,0,0"))
                                             (rule "mul_literals" (formula "58") (term "0,1,0,0,0"))
                                             (rule "polySimp_elimOne" (formula "58") (term "1,1,0,0,0"))
                                             (rule "inEqSimp_sepPosMonomial0" (formula "58") (term "0,0,0,1,0,1,0"))
                                             (rule "polySimp_mulComm0" (formula "58") (term "1,0,0,0,1,0,1,0"))
                                             (rule "polySimp_rightDist" (formula "58") (term "1,0,0,0,1,0,1,0"))
                                             (rule "mul_literals" (formula "58") (term "0,1,0,0,0,1,0,1,0"))
                                             (rule "polySimp_mulLiterals" (formula "58") (term "1,1,0,0,0,1,0,1,0"))
                                             (rule "polySimp_elimOne" (formula "58") (term "1,1,0,0,0,1,0,1,0"))
                                             (rule "inEqSimp_sepPosMonomial0" (formula "58") (term "1,0,0,0,1,0"))
                                             (rule "polySimp_mulComm0" (formula "58") (term "1,1,0,0,0,1,0"))
                                             (rule "polySimp_rightDist" (formula "58") (term "1,1,0,0,0,1,0"))
                                             (rule "mul_literals" (formula "58") (term "0,1,1,0,0,0,1,0"))
                                             (rule "polySimp_mulLiterals" (formula "58") (term "1,1,1,0,0,0,1,0"))
                                             (rule "polySimp_elimOne" (formula "58") (term "1,1,1,0,0,0,1,0"))
                                             (rule "inEqSimp_sepNegMonomial0" (formula "16"))
                                             (rule "polySimp_mulLiterals" (formula "16") (term "0"))
                                             (rule "polySimp_elimOne" (formula "16") (term "0"))
                                             (rule "inEqSimp_sepPosMonomial0" (formula "35") (term "0,0,0"))
                                             (rule "polySimp_mulComm0" (formula "35") (term "1,0,0,0"))
                                             (rule "polySimp_rightDist" (formula "35") (term "1,0,0,0"))
                                             (rule "polySimp_mulLiterals" (formula "35") (term "1,1,0,0,0"))
                                             (rule "mul_literals" (formula "35") (term "0,1,0,0,0"))
                                             (rule "polySimp_elimOne" (formula "35") (term "1,1,0,0,0"))
                                             (rule "inEqSimp_sepPosMonomial0" (formula "43") (term "0,0,0"))
                                             (rule "polySimp_mulComm0" (formula "43") (term "1,0,0,0"))
                                             (rule "polySimp_rightDist" (formula "43") (term "1,0,0,0"))
                                             (rule "polySimp_mulLiterals" (formula "43") (term "1,1,0,0,0"))
                                             (rule "mul_literals" (formula "43") (term "0,1,0,0,0"))
                                             (rule "polySimp_elimOne" (formula "43") (term "1,1,0,0,0"))
                                             (rule "inEqSimp_sepPosMonomial0" (formula "56") (term "0,0,0"))
                                             (rule "polySimp_mulComm0" (formula "56") (term "1,0,0,0"))
                                             (rule "polySimp_rightDist" (formula "56") (term "1,0,0,0"))
                                             (rule "mul_literals" (formula "56") (term "0,1,0,0,0"))
                                             (rule "polySimp_mulLiterals" (formula "56") (term "1,1,0,0,0"))
                                             (rule "polySimp_elimOne" (formula "56") (term "1,1,0,0,0"))
                                             (rule "inEqSimp_sepPosMonomial0" (formula "1"))
                                             (rule "polySimp_mulComm0" (formula "1") (term "1"))
                                             (rule "polySimp_rightDist" (formula "1") (term "1"))
                                             (rule "polySimp_mulLiterals" (formula "1") (term "1,1"))
                                             (rule "polySimp_mulAssoc" (formula "1") (term "0,1"))
                                             (rule "polySimp_mulComm0" (formula "1") (term "0,0,1"))
                                             (rule "polySimp_mulLiterals" (formula "1") (term "0,1"))
                                             (rule "polySimp_elimOne" (formula "1") (term "0,1"))
                                             (rule "inEqSimp_subsumption1" (formula "53") (ifseqformula "16"))
                                             (rule "inEqSimp_homoInEq0" (formula "53") (term "0"))
                                             (rule "polySimp_pullOutFactor1b" (formula "53") (term "0,0"))
                                             (rule "add_literals" (formula "53") (term "1,1,0,0"))
                                             (rule "times_zero_1" (formula "53") (term "1,0,0"))
                                             (rule "add_literals" (formula "53") (term "0,0"))
                                             (rule "qeq_literals" (formula "53") (term "0"))
                                              (builtin "One Step Simplification" (formula "53"))
                                             (rule "true_left" (formula "53"))
                                             (rule "inEqSimp_subsumption1" (formula "59") (ifseqformula "52"))
                                             (rule "leq_literals" (formula "59") (term "0"))
                                              (builtin "One Step Simplification" (formula "59"))
                                             (rule "true_left" (formula "59"))
                                             (rule "inEqSimp_subsumption1" (formula "47") (ifseqformula "48"))
                                             (rule "leq_literals" (formula "47") (term "0"))
                                              (builtin "One Step Simplification" (formula "47"))
                                             (rule "true_left" (formula "47"))
                                             (rule "polyDiv_pullOut" (formula "1") (term "0,1,1") (inst "polyDivCoeff=Z(1(#))"))
                                             (rule "equal_literals" (formula "1") (term "0,0,1,1"))
                                              (builtin "One Step Simplification" (formula "1"))
                                             (rule "mul_literals" (formula "1") (term "0,1,0,0,0,1,1"))
                                             (rule "mul_literals" (formula "1") (term "1,0,0,0,1,1"))
                                             (rule "polySimp_mulComm0" (formula "1") (term "1,1"))
                                             (rule "polySimp_addComm1" (formula "1") (term "0,0,1,1,1"))
                                             (rule "add_literals" (formula "1") (term "0,0,0,1,1,1"))
                                             (rule "polySimp_addComm0" (formula "1") (term "1,1,1"))
                                             (rule "polySimp_rightDist" (formula "1") (term "1,1"))
                                             (rule "mul_literals" (formula "1") (term "0,1,1"))
                                             (rule "polySimp_addAssoc" (formula "1") (term "1"))
                                             (rule "polySimp_addComm0" (formula "1") (term "0,1"))
                                             (rule "inEqSimp_exactShadow3" (formula "47") (ifseqformula "1"))
                                             (rule "times_zero_1" (formula "47") (term "0,0"))
                                             (rule "add_zero_left" (formula "47") (term "0"))
                                             (rule "inEqSimp_sepNegMonomial1" (formula "47"))
                                             (rule "polySimp_mulLiterals" (formula "47") (term "0"))
                                             (rule "inEqSimp_exactShadow3" (formula "16") (ifseqformula "1"))
                                             (rule "polySimp_rightDist" (formula "16") (term "0,0"))
                                             (rule "mul_literals" (formula "16") (term "0,0,0"))
                                             (rule "polySimp_addAssoc" (formula "16") (term "0"))
                                             (rule "polySimp_addAssoc" (formula "16") (term "0,0"))
                                             (rule "polySimp_addComm1" (formula "16") (term "0,0,0"))
                                             (rule "add_literals" (formula "16") (term "0,0,0,0"))
                                             (rule "polySimp_pullOutFactor2b" (formula "16") (term "0,0"))
                                             (rule "add_literals" (formula "16") (term "1,1,0,0"))
                                             (rule "times_zero_1" (formula "16") (term "1,0,0"))
                                             (rule "add_literals" (formula "16") (term "0,0"))
                                             (rule "inEqSimp_sepNegMonomial1" (formula "16"))
                                             (rule "polySimp_mulLiterals" (formula "16") (term "0"))
                                             (rule "elimGcdLeq_antec" (formula "16") (inst "elimGcdRightDiv=Z(neglit(2(#)))") (inst "elimGcdLeftDiv=div(add(Z(neglit(7(4(6(3(8(4(7(4(1(2(#)))))))))))),
        i_0),
    Z(6(9(2(7(6(9(4(9(2(4(#))))))))))))") (inst "elimGcd=Z(6(9(2(7(6(9(4(9(2(4(#)))))))))))"))
                                             (rule "polySimp_mulLiterals" (formula "16") (term "1,0,1,0"))
                                             (rule "neg_literal" (formula "16") (term "0,0,0,0,0,1,0"))
                                             (rule "mul_literals" (formula "16") (term "0,1,0,0,0,0,1,0"))
                                             (rule "leq_literals" (formula "16") (term "0,0"))
                                              (builtin "One Step Simplification" (formula "16"))
                                             (rule "mul_literals" (formula "16") (term "1,0,0,0,0,0"))
                                             (rule "polySimp_addLiterals" (formula "16") (term "0,0,0,0"))
                                             (rule "add_literals" (formula "16") (term "0,0,0,0"))
                                             (rule "polySimp_pullOutFactor0b" (formula "16") (term "0,0"))
                                             (rule "add_literals" (formula "16") (term "1,1,0,0"))
                                             (rule "times_zero_1" (formula "16") (term "1,0,0"))
                                             (rule "add_literals" (formula "16") (term "0,0"))
                                             (rule "qeq_literals" (formula "16") (term "0"))
                                              (builtin "One Step Simplification" (formula "16"))
                                             (rule "inEqSimp_exactShadow3" (formula "17") (ifseqformula "47"))
                                             (rule "polySimp_rightDist" (formula "17") (term "0,0"))
                                             (rule "mul_literals" (formula "17") (term "0,0,0"))
                                             (rule "polySimp_addComm1" (formula "17") (term "0"))
                                             (rule "add_literals" (formula "17") (term "0,0"))
                                             (rule "inEqSimp_sepNegMonomial1" (formula "17"))
                                             (rule "polySimp_mulLiterals" (formula "17") (term "0"))
                                             (rule "polySimp_elimOne" (formula "17") (term "0"))
                                             (rule "inEqSimp_subsumption0" (formula "60") (ifseqformula "17"))
                                             (rule "leq_literals" (formula "60") (term "0"))
                                              (builtin "One Step Simplification" (formula "60"))
                                             (rule "true_left" (formula "60"))
                                             (rule "nnf_imp2or" (formula "30") (term "0,0"))
                                              (builtin "One Step Simplification" (formula "30"))
                                             (rule "nnf_imp2or" (formula "11") (term "0,0,0"))
                                             (rule "nnf_imp2or" (formula "20") (term "0,0,0"))
                                             (rule "nnf_imp2or" (formula "5") (term "0,0,0"))
                                             (rule "nnf_imp2or" (formula "32") (term "0,0,0"))
                                             (rule "nnf_imp2or" (formula "2") (term "0,0,0"))
                                             (rule "nnf_imp2or" (formula "31") (term "0,0,0"))
                                             (rule "nnf_imp2or" (formula "24") (term "0,0,0"))
                                             (rule "nnf_imp2or" (formula "9") (term "0,0,0"))
                                             (rule "nnf_imp2or" (formula "4") (term "0,0,0"))
                                             (rule "nnf_imp2or" (formula "28") (term "0,0,0"))
                                             (rule "nnf_imp2or" (formula "6") (term "0,0,0"))
                                             (rule "nnf_imp2or" (formula "22") (term "0,0,0"))
                                             (rule "nnf_imp2or" (formula "25") (term "0,0,0"))
                                             (rule "nnf_imp2or" (formula "8") (term "0,0,0"))
                                             (rule "nnf_imp2or" (formula "23") (term "0,0,0"))
                                             (rule "nnf_imp2or" (formula "10") (term "0,0,0"))
                                             (rule "nnf_imp2or" (formula "29") (term "0,0,0"))
                                             (rule "nnf_imp2or" (formula "21") (term "0,0,0"))
                                             (rule "nnf_imp2or" (formula "26") (term "0,0,0"))
                                             (rule "nnf_imp2or" (formula "3") (term "0,0,0"))
                                             (rule "nnf_imp2or" (formula "7") (term "0,0,0"))
                                             (rule "nnf_imp2or" (formula "27") (term "0,0,0"))
                                             (rule "nnf_imp2or" (formula "59") (term "0"))
                                             (rule "nnf_imp2or" (formula "37") (term "0"))
                                             (rule "nnf_imp2or" (formula "45") (term "0"))
                                             (rule "nnf_imp2or" (formula "57") (term "0"))
                                             (rule "nnf_notAnd" (formula "11") (term "0,0,0,0"))
                                              (builtin "One Step Simplification" (formula "11"))
                                             (rule "nnf_imp2or" (formula "20") (term "1,0,0,0"))
                                             (rule "nnf_notAnd" (formula "20") (term "0,0,0,0"))
                                              (builtin "One Step Simplification" (formula "20"))
                                             (rule "nnf_notAnd" (formula "5") (term "0,0,0,0"))
                                              (builtin "One Step Simplification" (formula "5"))
                                             (rule "nnf_notAnd" (formula "59") (term "0,0"))
                                             (rule "inEqSimp_notGeq" (formula "59") (term "1,0,0"))
                                             (rule "mul_literals" (formula "59") (term "1,0,0,1,0,0"))
                                             (rule "add_literals" (formula "59") (term "0,0,1,0,0"))
                                             (rule "inEqSimp_sepPosMonomial0" (formula "59") (term "1,0,0"))
                                             (rule "mul_literals" (formula "59") (term "1,1,0,0"))
                                             (rule "inEqSimp_notLeq" (formula "59") (term "0,0,0"))
                                             (rule "polySimp_rightDist" (formula "59") (term "1,0,0,0,0,0"))
                                             (rule "mul_literals" (formula "59") (term "0,1,0,0,0,0,0"))
                                             (rule "polySimp_addAssoc" (formula "59") (term "0,0,0,0,0"))
                                             (rule "add_literals" (formula "59") (term "0,0,0,0,0,0"))
                                             (rule "add_zero_left" (formula "59") (term "0,0,0,0,0"))
                                             (rule "inEqSimp_sepPosMonomial1" (formula "59") (term "0,0,0"))
                                             (rule "polySimp_mulLiterals" (formula "59") (term "1,0,0,0"))
                                             (rule "polySimp_elimOne" (formula "59") (term "1,0,0,0"))
                                             (rule "nnf_notOr" (formula "59") (term "1,0"))
                                             (rule "nnf_notAnd" (formula "37") (term "0,0"))
                                             (rule "inEqSimp_notLeq" (formula "37") (term "0,0,0"))
                                             (rule "polySimp_rightDist" (formula "37") (term "1,0,0,0,0,0"))
                                             (rule "mul_literals" (formula "37") (term "0,1,0,0,0,0,0"))
                                             (rule "polySimp_addAssoc" (formula "37") (term "0,0,0,0,0"))
                                             (rule "add_literals" (formula "37") (term "0,0,0,0,0,0"))
                                             (rule "add_zero_left" (formula "37") (term "0,0,0,0,0"))
                                             (rule "inEqSimp_sepPosMonomial1" (formula "37") (term "0,0,0"))
                                             (rule "polySimp_mulLiterals" (formula "37") (term "1,0,0,0"))
                                             (rule "polySimp_elimOne" (formula "37") (term "1,0,0,0"))
                                             (rule "inEqSimp_notGeq" (formula "37") (term "1,0,0"))
                                             (rule "times_zero_1" (formula "37") (term "1,0,0,1,0,0"))
                                             (rule "add_literals" (formula "37") (term "0,0,1,0,0"))
                                             (rule "inEqSimp_sepPosMonomial0" (formula "37") (term "1,0,0"))
                                             (rule "mul_literals" (formula "37") (term "1,1,0,0"))
                                             (rule "nnf_notAnd" (formula "32") (term "0,0,0,0"))
                                              (builtin "One Step Simplification" (formula "32"))
                                             (rule "nnf_notAnd" (formula "45") (term "0,0"))
                                             (rule "inEqSimp_notLeq" (formula "45") (term "0,0,0"))
                                             (rule "polySimp_rightDist" (formula "45") (term "1,0,0,0,0,0"))
                                             (rule "mul_literals" (formula "45") (term "0,1,0,0,0,0,0"))
                                             (rule "polySimp_addAssoc" (formula "45") (term "0,0,0,0,0"))
                                             (rule "add_literals" (formula "45") (term "0,0,0,0,0,0"))
                                             (rule "add_zero_left" (formula "45") (term "0,0,0,0,0"))
                                             (rule "inEqSimp_sepPosMonomial1" (formula "45") (term "0,0,0"))
                                             (rule "polySimp_mulLiterals" (formula "45") (term "1,0,0,0"))
                                             (rule "polySimp_elimOne" (formula "45") (term "1,0,0,0"))
                                             (rule "inEqSimp_notGeq" (formula "45") (term "1,0,0"))
                                             (rule "times_zero_1" (formula "45") (term "1,0,0,1,0,0"))
                                             (rule "add_literals" (formula "45") (term "0,0,1,0,0"))
                                             (rule "inEqSimp_sepPosMonomial0" (formula "45") (term "1,0,0"))
                                             (rule "mul_literals" (formula "45") (term "1,1,0,0"))
                                             (rule "nnf_imp2or" (formula "2") (term "1,0,0,0"))
                                             (rule "nnf_notAnd" (formula "2") (term "0,0,0,0"))
                                              (builtin "One Step Simplification" (formula "2"))
                                             (rule "nnf_notAnd" (formula "31") (term "0,0,0,0"))
                                              (builtin "One Step Simplification" (formula "31"))
                                             (rule "nnf_notAnd" (formula "57") (term "0,0"))
                                             (rule "inEqSimp_notGeq" (formula "57") (term "1,0,0"))
                                             (rule "mul_literals" (formula "57") (term "1,0,0,1,0,0"))
                                             (rule "add_literals" (formula "57") (term "0,0,1,0,0"))
                                             (rule "inEqSimp_sepPosMonomial0" (formula "57") (term "1,0,0"))
                                             (rule "mul_literals" (formula "57") (term "1,1,0,0"))
                                             (rule "inEqSimp_notLeq" (formula "57") (term "0,0,0"))
                                             (rule "polySimp_rightDist" (formula "57") (term "1,0,0,0,0,0"))
                                             (rule "mul_literals" (formula "57") (term "0,1,0,0,0,0,0"))
                                             (rule "polySimp_addAssoc" (formula "57") (term "0,0,0,0,0"))
                                             (rule "add_literals" (formula "57") (term "0,0,0,0,0,0"))
                                             (rule "add_zero_left" (formula "57") (term "0,0,0,0,0"))
                                             (rule "inEqSimp_sepPosMonomial1" (formula "57") (term "0,0,0"))
                                             (rule "polySimp_mulLiterals" (formula "57") (term "1,0,0,0"))
                                             (rule "polySimp_elimOne" (formula "57") (term "1,0,0,0"))
                                             (rule "nnf_notAnd" (formula "24") (term "0,0,0,0"))
                                              (builtin "One Step Simplification" (formula "24"))
                                             (rule "nnf_imp2or" (formula "9") (term "1,0,0,0"))
                                             (rule "nnf_notAnd" (formula "9") (term "0,0,0,0"))
                                              (builtin "One Step Simplification" (formula "9"))
                                             (rule "nnf_notAnd" (formula "4") (term "0,0,0,0"))
                                              (builtin "One Step Simplification" (formula "4"))
                                             (rule "nnf_notAnd" (formula "28") (term "0,0,0,0"))
                                              (builtin "One Step Simplification" (formula "28"))
                                             (rule "nnf_notAnd" (formula "6") (term "0,0,0,0"))
                                              (builtin "One Step Simplification" (formula "6"))
                                             (rule "nnf_imp2or" (formula "22") (term "1,0,0,0"))
                                             (rule "nnf_notAnd" (formula "22") (term "0,0,0,0"))
                                              (builtin "One Step Simplification" (formula "22"))
                                             (rule "nnf_notAnd" (formula "25") (term "0,0,0,0"))
                                              (builtin "One Step Simplification" (formula "25"))
                                             (rule "nnf_imp2or" (formula "8") (term "1,0,0,0"))
                                             (rule "nnf_notAnd" (formula "8") (term "0,0,0,0"))
                                              (builtin "One Step Simplification" (formula "8"))
                                             (rule "nnf_notAnd" (formula "23") (term "0,0,0,0"))
                                              (builtin "One Step Simplification" (formula "23"))
                                             (rule "nnf_notAnd" (formula "10") (term "0,0,0,0"))
                                              (builtin "One Step Simplification" (formula "10"))
                                             (rule "nnf_notAnd" (formula "29") (term "0,0,0,0"))
                                              (builtin "One Step Simplification" (formula "29"))
                                             (rule "nnf_notAnd" (formula "21") (term "0,0,0,0"))
                                              (builtin "One Step Simplification" (formula "21"))
                                             (rule "nnf_imp2or" (formula "26") (term "1,0,0,0"))
                                             (rule "nnf_notAnd" (formula "26") (term "0,0,0,0"))
                                              (builtin "One Step Simplification" (formula "26"))
                                             (rule "nnf_imp2or" (formula "3") (term "1,0,0,0"))
                                             (rule "nnf_notAnd" (formula "3") (term "0,0,0,0"))
                                              (builtin "One Step Simplification" (formula "3"))
                                             (rule "nnf_imp2or" (formula "7") (term "1,0,0,0"))
                                             (rule "nnf_notAnd" (formula "7") (term "0,0,0,0"))
                                              (builtin "One Step Simplification" (formula "7"))
                                             (rule "nnf_notAnd" (formula "27") (term "0,0,0,0"))
                                              (builtin "One Step Simplification" (formula "27"))
                                             (rule "nnf_imp2or" (formula "11") (term "1,0,0,0"))
                                             (rule "nnf_imp2or" (formula "5") (term "1,0,0,0"))
                                             (rule "nnf_notOr" (formula "11") (term "1,0,0,0,0"))
                                             (rule "nnf_notAnd" (formula "59") (term "0,1,0"))
                                             (rule "inEqSimp_notGeq" (formula "59") (term "1,0,1,0"))
                                             (rule "mul_literals" (formula "59") (term "1,0,0,1,0,1,0"))
                                             (rule "add_literals" (formula "59") (term "0,0,1,0,1,0"))
                                             (rule "inEqSimp_sepPosMonomial0" (formula "59") (term "1,0,1,0"))
                                             (rule "mul_literals" (formula "59") (term "1,1,0,1,0"))
                                             (rule "nnf_notAnd" (formula "59") (term "1,1,0"))
                                              (builtin "One Step Simplification" (formula "59"))
                                             (rule "nnf_notOr" (formula "20") (term "1,0,0,0,0"))
                                             (rule "nnf_notOr" (formula "5") (term "1,0,0,0,0"))
                                             (rule "nnf_imp2or" (formula "32") (term "1,0,0,0"))
                                             (rule "nnf_notOr" (formula "32") (term "1,0,0,0,0"))
                                             (rule "nnf_imp2or" (formula "31") (term "1,0,0,0"))
                                             (rule "nnf_notOr" (formula "2") (term "0,0,0,0,0"))
                                             (rule "nnf_notOr" (formula "31") (term "1,0,0,0,0"))
                                             (rule "nnf_imp2or" (formula "24") (term "1,0,0,0"))
                                             (rule "nnf_imp2or" (formula "4") (term "1,0,0,0"))
                                             (rule "nnf_imp2or" (formula "28") (term "1,0,0,0"))
                                             (rule "nnf_imp2or" (formula "6") (term "1,0,0,0"))
                                             (rule "nnf_notOr" (formula "24") (term "1,0,0,0,0"))
                                             (rule "nnf_notOr" (formula "9") (term "1,0,0,0,0"))
                                             (rule "nnf_imp2or" (formula "25") (term "1,0,0,0"))
                                             (rule "nnf_notOr" (formula "4") (term "1,0,0,0,0"))
                                             (rule "nnf_notOr" (formula "28") (term "1,0,0,0,0"))
                                             (rule "nnf_imp2or" (formula "23") (term "1,0,0,0"))
                                             (rule "nnf_notOr" (formula "6") (term "1,0,0,0,0"))
                                             (rule "nnf_imp2or" (formula "10") (term "1,0,0,0"))
                                             (rule "nnf_notOr" (formula "22") (term "1,0,0,0,0"))
                                             (rule "nnf_imp2or" (formula "29") (term "1,0,0,0"))
                                             (rule "nnf_notOr" (formula "25") (term "1,0,0,0,0"))
                                             (rule "nnf_imp2or" (formula "21") (term "1,0,0,0"))
                                             (rule "nnf_notOr" (formula "8") (term "1,0,0,0,0"))
                                             (rule "nnf_notOr" (formula "23") (term "1,0,0,0,0"))
                                             (rule "nnf_notOr" (formula "10") (term "1,0,0,0,0"))
                                             (rule "nnf_notOr" (formula "29") (term "1,0,0,0,0"))
                                             (rule "nnf_notOr" (formula "21") (term "1,0,0,0,0"))
                                             (rule "nnf_imp2or" (formula "27") (term "1,0,0,0"))
                                             (rule "nnf_notOr" (formula "26") (term "1,0,0,0,0"))
                                             (rule "nnf_notOr" (formula "3") (term "0,0,0,0,0"))
                                             (rule "nnf_notOr" (formula "7") (term "1,0,0,0,0"))
                                             (rule "nnf_notOr" (formula "27") (term "1,0,0,0,0"))
                                             (rule "nnf_notAnd" (formula "59") (term "0,0,1,0"))
                                             (rule "inEqSimp_notLeq" (formula "59") (term "1,0,0,1,0"))
                                             (rule "polySimp_rightDist" (formula "59") (term "1,0,0,1,0,0,1,0"))
                                             (rule "mul_literals" (formula "59") (term "0,1,0,0,1,0,0,1,0"))
                                             (rule "polySimp_addAssoc" (formula "59") (term "0,0,1,0,0,1,0"))
                                             (rule "add_literals" (formula "59") (term "0,0,0,1,0,0,1,0"))
                                             (rule "add_zero_left" (formula "59") (term "0,0,1,0,0,1,0"))
                                             (rule "inEqSimp_sepPosMonomial1" (formula "59") (term "1,0,0,1,0"))
                                             (rule "polySimp_mulLiterals" (formula "59") (term "1,1,0,0,1,0"))
                                             (rule "polySimp_elimOne" (formula "59") (term "1,1,0,0,1,0"))
                                             (rule "nnf_notOr" (formula "20") (term "0,1,0,0,0,0"))
                                             (rule "nnf_notOr" (formula "2") (term "0,0,0,0,0,0"))
                                             (rule "nnf_notOr" (formula "24") (term "0,1,0,0,0,0"))
                                             (rule "nnf_notOr" (formula "9") (term "0,1,0,0,0,0"))
                                             (rule "nnf_notOr" (formula "25") (term "0,1,0,0,0,0"))
                                             (rule "nnf_notOr" (formula "8") (term "0,1,0,0,0,0"))
                                             (rule "nnf_notOr" (formula "21") (term "0,1,0,0,0,0"))
                                             (rule "nnf_notOr" (formula "3") (term "0,0,0,0,0,0"))
                                             (rule "nnf_notOr" (formula "20") (term "0,0,1,0,0,0,0"))
                                             (rule "nnf_notOr" (formula "2") (term "0,0,0,0,0,0,0"))
                                             (rule "nnf_notOr" (formula "9") (term "0,0,1,0,0,0,0"))
                                             (rule "nnf_notOr" (formula "8") (term "0,0,1,0,0,0,0"))
                                             (rule "nnf_notOr" (formula "21") (term "0,0,1,0,0,0,0"))
                                             (rule "nnf_notOr" (formula "3") (term "0,0,0,0,0,0,0"))
                                             (rule "nnf_notOr" (formula "2") (term "1,0,0,0,0,0,0,0"))
                                             (rule "nnf_notOr" (formula "9") (term "0,0,0,1,0,0,0,0"))
                                             (rule "nnf_notOr" (formula "8") (term "0,0,0,1,0,0,0,0"))
                                             (rule "nnf_notOr" (formula "3") (term "1,0,0,0,0,0,0,0"))
                                             (rule "nnf_notOr" (formula "2") (term "0,1,0,0,0,0,0,0,0"))
                                             (rule "nnf_notOr" (formula "3") (term "0,1,0,0,0,0,0,0,0"))
                                             (rule "commute_or_2" (formula "37") (term "0"))
                                             (rule "cnf_rightDist" (formula "30") (term "0,0"))
                                             (rule "commute_or_2" (formula "45") (term "0"))
                                             (rule "ifthenelse_split" (formula "56") (term "0"))
                                             (branch "result_46 = ls TRUE"
                                                (rule "applyEqReverse" (formula "65") (term "0,0") (ifseqformula "57"))
                                                (rule "applyEqReverse" (formula "58") (term "0,0,0,1,0") (ifseqformula "57"))
                                                (rule "applyEqReverse" (formula "55") (term "0,0") (ifseqformula "57"))
                                                (rule "hideAuxiliaryEq" (formula "57"))
                                                (rule "applyEq" (formula "59") (term "1,0,1,1,0,0,1,1,0") (ifseqformula "56"))
                                                (rule "applyEq" (formula "42") (term "1,0") (ifseqformula "56"))
                                                (rule "applyEq" (formula "72") (term "1,0") (ifseqformula "56"))
                                                (rule "close" (formula "72") (ifseqformula "35"))
                                             )
                                             (branch "result_46 = ls FALSE"
                                                (rule "applyEqReverse" (formula "57") (term "0,0,0,1,0") (ifseqformula "56"))
                                                (rule "applyEqReverse" (formula "55") (term "0,0") (ifseqformula "56"))
                                                (rule "applyEqReverse" (formula "63") (term "0,0") (ifseqformula "55"))
                                                (rule "hideAuxiliaryEq" (formula "55"))
                                                (rule "commute_or" (formula "20") (term "1,0,0,0"))
                                                (rule "commute_or" (formula "55") (term "0,0"))
                                                (rule "commute_or" (formula "2") (term "1,0,0,0"))
                                                (rule "distr_forallAnd" (formula "30") (term "0"))
                                                (rule "distr_forallAnd" (formula "30"))
                                                (rule "andLeft" (formula "30"))
                                                (rule "equalityToSeqGetAndSeqLenLeft" (formula "68") (inst "iv=iv"))
                                                (rule "andLeft" (formula "68"))
                                                (rule "lenOfSeqSub" (formula "68") (term "0"))
                                                (rule "polySimp_elimSub" (formula "68") (term "1,0"))
                                                (rule "mul_literals" (formula "68") (term "1,1,0"))
                                                (rule "add_zero_right" (formula "68") (term "1,0"))
                                                 (builtin "One Step Simplification" (formula "68"))
                                                (rule "eqSymm" (formula "68") (term "1"))
                                                (rule "lenOfSeqSub" (formula "69") (term "1,1,0,0"))
                                                (rule "polySimp_elimSub" (formula "69") (term "1,1,1,0,0"))
                                                (rule "mul_literals" (formula "69") (term "1,1,1,1,0,0"))
                                                (rule "add_zero_right" (formula "69") (term "1,1,1,0,0"))
                                                (rule "inEqSimp_ltToLeq" (formula "68") (term "0"))
                                                (rule "add_zero_right" (formula "68") (term "0,0"))
                                                (rule "polySimp_mulComm0" (formula "68") (term "1,0,0"))
                                                (rule "inEqSimp_ltToLeq" (formula "69") (term "0,1,1,0,0"))
                                                (rule "add_zero_right" (formula "69") (term "0,0,1,1,0,0"))
                                                (rule "polySimp_mulComm0" (formula "69") (term "1,0,0,1,1,0,0"))
                                                (rule "inEqSimp_ltToLeq" (formula "69") (term "1,0,0"))
                                                (rule "polySimp_mulComm0" (formula "69") (term "1,0,0,1,0,0"))
                                                (rule "inEqSimp_commuteLeq" (formula "69") (term "0,0,0"))
                                                (rule "applyEq" (formula "69") (term "0,0,1,0") (ifseqformula "70"))
                                                 (builtin "One Step Simplification" (formula "69"))
                                                (rule "true_left" (formula "69"))
                                                (rule "inEqSimp_sepNegMonomial0" (formula "68") (term "0"))
                                                (rule "polySimp_mulLiterals" (formula "68") (term "0,0"))
                                                (rule "polySimp_elimOne" (formula "68") (term "0,0"))
                                                (rule "lenNonNegative" (formula "67") (term "0"))
                                                (rule "inEqSimp_commuteLeq" (formula "67"))
                                                (rule "applyEq" (formula "67") (term "0") (ifseqformula "68"))
                                                (rule "inEqSimp_sepPosMonomial1" (formula "67"))
                                                (rule "mul_literals" (formula "67") (term "1"))
                                                (rule "inEqSimp_subsumption1" (formula "67") (ifseqformula "57"))
                                                (rule "leq_literals" (formula "67") (term "0"))
                                                 (builtin "One Step Simplification" (formula "67"))
                                                (rule "true_left" (formula "67"))
                                                (rule "cut_direct" (formula "62") (term "0,0,0,0"))
                                                (branch "CUT: result_48.<created> = TRUE TRUE"
                                                    (builtin "One Step Simplification" (formula "63"))
                                                   (rule "true_left" (formula "63"))
                                                   (rule "seqGetAlphaCast" (formula "70") (term "0"))
                                                   (rule "castDel" (formula "70") (term "0"))
                                                    (builtin "One Step Simplification" (formula "70"))
                                                   (rule "true_left" (formula "70"))
                                                   (rule "commute_or" (formula "9") (term "1,0,0,0"))
                                                   (rule "commute_or" (formula "58") (term "0,0"))
                                                   (rule "commute_or" (formula "22") (term "1,0,0,0"))
                                                   (rule "commute_or" (formula "8") (term "1,0,0,0"))
                                                   (rule "commute_or_2" (formula "11") (term "0,0,0"))
                                                   (rule "div_axiom" (formula "1") (term "0,1,1") (inst "quotient=quotient_0"))
                                                   (rule "equal_literals" (formula "1") (term "0"))
                                                    (builtin "One Step Simplification" (formula "1"))
                                                   (rule "qeq_literals" (formula "1") (term "0,1"))
                                                    (builtin "One Step Simplification" (formula "1"))
                                                   (rule "mul_literals" (formula "1") (term "1,1,1"))
                                                   (rule "andLeft" (formula "1"))
                                                   (rule "andLeft" (formula "1"))
                                                   (rule "polySimp_addAssoc" (formula "3") (term "0,1"))
                                                   (rule "add_literals" (formula "3") (term "0,0,1"))
                                                   (rule "polySimp_addComm1" (formula "3") (term "1"))
                                                   (rule "add_literals" (formula "3") (term "0,1"))
                                                   (rule "inEqSimp_homoInEq0" (formula "2"))
                                                   (rule "polySimp_mulLiterals" (formula "2") (term "1,0"))
                                                   (rule "polySimp_addComm1" (formula "2") (term "0"))
                                                   (rule "inEqSimp_homoInEq1" (formula "3"))
                                                   (rule "polySimp_mulLiterals" (formula "3") (term "1,0"))
                                                   (rule "polySimp_addComm1" (formula "3") (term "0"))
                                                   (rule "applyEq" (formula "53") (term "0,0") (ifseqformula "1"))
                                                   (rule "inEqSimp_homoInEq0" (formula "53"))
                                                   (rule "polySimp_mulLiterals" (formula "53") (term "1,0"))
                                                   (rule "polySimp_addComm1" (formula "53") (term "0"))
                                                   (rule "applyEqRigid" (formula "4") (term "0,1,1") (ifseqformula "1"))
                                                   (rule "polySimp_addComm1" (formula "4") (term "1"))
                                                   (rule "applyEqRigid" (formula "19") (term "0") (ifseqformula "1"))
                                                   (rule "inEqSimp_sepPosMonomial1" (formula "2"))
                                                   (rule "polySimp_mulComm0" (formula "2") (term "1"))
                                                   (rule "polySimp_rightDist" (formula "2") (term "1"))
                                                   (rule "mul_literals" (formula "2") (term "0,1"))
                                                   (rule "polySimp_mulLiterals" (formula "2") (term "1,1"))
                                                   (rule "inEqSimp_sepPosMonomial0" (formula "3"))
                                                   (rule "polySimp_mulComm0" (formula "3") (term "1"))
                                                   (rule "polySimp_rightDist" (formula "3") (term "1"))
                                                   (rule "polySimp_mulLiterals" (formula "3") (term "1,1"))
                                                   (rule "mul_literals" (formula "3") (term "0,1"))
                                                   (rule "inEqSimp_sepPosMonomial1" (formula "53"))
                                                   (rule "polySimp_mulComm0" (formula "53") (term "1"))
                                                   (rule "polySimp_rightDist" (formula "53") (term "1"))
                                                   (rule "mul_literals" (formula "53") (term "0,1"))
                                                   (rule "polySimp_mulLiterals" (formula "53") (term "1,1"))
                                                   (rule "inEqSimp_subsumption1" (formula "2") (ifseqformula "53"))
                                                   (rule "inEqSimp_homoInEq0" (formula "2") (term "0"))
                                                   (rule "polySimp_mulComm0" (formula "2") (term "1,0,0"))
                                                   (rule "polySimp_rightDist" (formula "2") (term "1,0,0"))
                                                   (rule "polySimp_mulLiterals" (formula "2") (term "1,1,0,0"))
                                                   (rule "mul_literals" (formula "2") (term "0,1,0,0"))
                                                   (rule "polySimp_addAssoc" (formula "2") (term "0,0"))
                                                   (rule "polySimp_addComm1" (formula "2") (term "0,0,0"))
                                                   (rule "add_literals" (formula "2") (term "0,0,0,0"))
                                                   (rule "polySimp_pullOutFactor0b" (formula "2") (term "0,0"))
                                                   (rule "add_literals" (formula "2") (term "1,1,0,0"))
                                                   (rule "times_zero_1" (formula "2") (term "1,0,0"))
                                                   (rule "add_zero_right" (formula "2") (term "0,0"))
                                                   (rule "qeq_literals" (formula "2") (term "0"))
                                                    (builtin "One Step Simplification" (formula "2"))
                                                   (rule "true_left" (formula "2"))
                                                   (rule "inEqSimp_exactShadow3" (formula "57") (ifseqformula "2"))
                                                   (rule "mul_literals" (formula "57") (term "0,0"))
                                                   (rule "add_zero_left" (formula "57") (term "0"))
                                                   (rule "inEqSimp_sepPosMonomial1" (formula "57"))
                                                   (rule "mul_literals" (formula "57") (term "1"))
                                                   (rule "inEqSimp_contradInEq3" (formula "57") (ifseqformula "18"))
                                                   (rule "mul_literals" (formula "57") (term "0,1,0"))
                                                   (rule "greater_literals" (formula "57") (term "0,0"))
                                                    (builtin "One Step Simplification" (formula "57"))
                                                   (rule "qeq_literals" (formula "57") (term "0"))
                                                    (builtin "One Step Simplification" (formula "57"))
                                                   (rule "closeFalse" (formula "57"))
                                                )
                                                (branch "CUT: result_48.<created> = TRUE FALSE"
                                                    (builtin "One Step Simplification" (formula "62"))
                                                   (rule "seqGetAlphaCast" (formula "70") (term "0"))
                                                   (rule "castDel" (formula "70") (term "0"))
                                                    (builtin "One Step Simplification" (formula "70"))
                                                   (rule "true_left" (formula "70"))
                                                   (rule "commute_or" (formula "9") (term "1,0,0,0"))
                                                   (rule "commute_or" (formula "58") (term "0,0"))
                                                   (rule "commute_or" (formula "22") (term "1,0,0,0"))
                                                   (rule "commute_or" (formula "8") (term "1,0,0,0"))
                                                   (rule "commute_or_2" (formula "11") (term "0,0,0"))
                                                   (rule "div_axiom" (formula "1") (term "0,1,1") (inst "quotient=quotient_0"))
                                                   (rule "equal_literals" (formula "1") (term "0"))
                                                    (builtin "One Step Simplification" (formula "1"))
                                                   (rule "qeq_literals" (formula "1") (term "0,1"))
                                                    (builtin "One Step Simplification" (formula "1"))
                                                   (rule "mul_literals" (formula "1") (term "1,1,1"))
                                                   (rule "andLeft" (formula "1"))
                                                   (rule "andLeft" (formula "1"))
                                                   (rule "polySimp_addAssoc" (formula "3") (term "0,1"))
                                                   (rule "add_literals" (formula "3") (term "0,0,1"))
                                                   (rule "polySimp_addComm1" (formula "3") (term "1"))
                                                   (rule "add_literals" (formula "3") (term "0,1"))
                                                   (rule "inEqSimp_homoInEq0" (formula "2"))
                                                   (rule "polySimp_mulLiterals" (formula "2") (term "1,0"))
                                                   (rule "polySimp_addComm1" (formula "2") (term "0"))
                                                   (rule "inEqSimp_homoInEq1" (formula "3"))
                                                   (rule "polySimp_mulLiterals" (formula "3") (term "1,0"))
                                                   (rule "polySimp_addComm1" (formula "3") (term "0"))
                                                   (rule "applyEqRigid" (formula "19") (term "0") (ifseqformula "1"))
                                                   (rule "applyEq" (formula "4") (term "0,1,1") (ifseqformula "1"))
                                                   (rule "polySimp_addComm1" (formula "4") (term "1"))
                                                   (rule "applyEq" (formula "53") (term "0,0") (ifseqformula "1"))
                                                   (rule "inEqSimp_homoInEq0" (formula "53"))
                                                   (rule "polySimp_mulLiterals" (formula "53") (term "1,0"))
                                                   (rule "polySimp_addComm1" (formula "53") (term "0"))
                                                   (rule "inEqSimp_sepPosMonomial1" (formula "2"))
                                                   (rule "polySimp_mulComm0" (formula "2") (term "1"))
                                                   (rule "polySimp_rightDist" (formula "2") (term "1"))
                                                   (rule "polySimp_mulLiterals" (formula "2") (term "1,1"))
                                                   (rule "mul_literals" (formula "2") (term "0,1"))
                                                   (rule "inEqSimp_sepPosMonomial0" (formula "3"))
                                                   (rule "polySimp_mulComm0" (formula "3") (term "1"))
                                                   (rule "polySimp_rightDist" (formula "3") (term "1"))
                                                   (rule "mul_literals" (formula "3") (term "0,1"))
                                                   (rule "polySimp_mulLiterals" (formula "3") (term "1,1"))
                                                   (rule "inEqSimp_sepPosMonomial1" (formula "53"))
                                                   (rule "polySimp_mulComm0" (formula "53") (term "1"))
                                                   (rule "polySimp_rightDist" (formula "53") (term "1"))
                                                   (rule "polySimp_mulLiterals" (formula "53") (term "1,1"))
                                                   (rule "mul_literals" (formula "53") (term "0,1"))
                                                   (rule "inEqSimp_subsumption1" (formula "2") (ifseqformula "53"))
                                                   (rule "inEqSimp_homoInEq0" (formula "2") (term "0"))
                                                   (rule "polySimp_mulComm0" (formula "2") (term "1,0,0"))
                                                   (rule "polySimp_rightDist" (formula "2") (term "1,0,0"))
                                                   (rule "polySimp_mulLiterals" (formula "2") (term "1,1,0,0"))
                                                   (rule "mul_literals" (formula "2") (term "0,1,0,0"))
                                                   (rule "polySimp_addAssoc" (formula "2") (term "0,0"))
                                                   (rule "polySimp_addComm1" (formula "2") (term "0,0,0"))
                                                   (rule "add_literals" (formula "2") (term "0,0,0,0"))
                                                   (rule "polySimp_pullOutFactor0b" (formula "2") (term "0,0"))
                                                   (rule "add_literals" (formula "2") (term "1,1,0,0"))
                                                   (rule "times_zero_1" (formula "2") (term "1,0,0"))
                                                   (rule "add_literals" (formula "2") (term "0,0"))
                                                   (rule "qeq_literals" (formula "2") (term "0"))
                                                    (builtin "One Step Simplification" (formula "2"))
                                                   (rule "true_left" (formula "2"))
                                                   (rule "inEqSimp_exactShadow3" (formula "20") (ifseqformula "3"))
                                                   (rule "polySimp_rightDist" (formula "20") (term "0,0"))
                                                   (rule "mul_literals" (formula "20") (term "0,0,0"))
                                                   (rule "polySimp_addAssoc" (formula "20") (term "0"))
                                                   (rule "polySimp_addComm1" (formula "20") (term "0,0"))
                                                   (rule "polySimp_pullOutFactor2b" (formula "20") (term "0"))
                                                   (rule "add_literals" (formula "20") (term "1,1,0"))
                                                   (rule "times_zero_1" (formula "20") (term "1,0"))
                                                   (rule "add_zero_right" (formula "20") (term "0"))
                                                   (rule "polySimp_addAssoc" (formula "20") (term "0"))
                                                   (rule "add_literals" (formula "20") (term "0,0"))
                                                   (rule "inEqSimp_sepNegMonomial1" (formula "20"))
                                                   (rule "polySimp_mulLiterals" (formula "20") (term "0"))
                                                   (rule "inEqSimp_subsumption4" (formula "20") (ifseqformula "18"))
                                                   (rule "greater_literals" (formula "20") (term "0,0"))
                                                    (builtin "One Step Simplification" (formula "20"))
                                                   (rule "mul_literals" (formula "20") (term "0,0"))
                                                   (rule "leq_literals" (formula "20") (term "0"))
                                                    (builtin "One Step Simplification" (formula "20"))
                                                   (rule "true_left" (formula "20"))
                                                   (rule "inEqSimp_exactShadow3" (formula "57") (ifseqformula "2"))
                                                   (rule "mul_literals" (formula "57") (term "0,0"))
                                                   (rule "add_zero_left" (formula "57") (term "0"))
                                                   (rule "inEqSimp_sepPosMonomial1" (formula "57"))
                                                   (rule "mul_literals" (formula "57") (term "1"))
                                                   (rule "inEqSimp_contradInEq3" (formula "57") (ifseqformula "18"))
                                                   (rule "greater_literals" (formula "57") (term "0,0"))
                                                    (builtin "One Step Simplification" (formula "57"))
                                                   (rule "mul_literals" (formula "57") (term "0,0"))
                                                   (rule "qeq_literals" (formula "57") (term "0"))
                                                    (builtin "One Step Simplification" (formula "57"))
                                                   (rule "closeFalse" (formula "57"))
                                                )
                                             )
                                          )
                                       )
                                    )
                                    (branch
                                       (rule "inEqSimp_ltToLeq" (formula "42") (term "0,0,0"))
                                       (rule "polySimp_mulComm0" (formula "42") (term "1,0,0,0,0,0"))
                                       (rule "inEqSimp_ltToLeq" (formula "57") (term "0,0,0"))
                                       (rule "polySimp_mulComm0" (formula "57") (term "1,0,0,0,0,0"))
                                       (rule "inEqSimp_ltToLeq" (formula "55") (term "0,0,0"))
                                       (rule "polySimp_mulComm0" (formula "55") (term "1,0,0,0,0,0"))
                                       (rule "inEqSimp_ltToLeq" (formula "57") (term "1,0,0,0,1,0"))
                                       (rule "polySimp_mulComm0" (formula "57") (term "1,0,0,1,0,0,0,1,0"))
                                       (rule "inEqSimp_ltToLeq" (formula "15"))
                                       (rule "polySimp_mulComm0" (formula "15") (term "1,0,0"))
                                       (rule "polySimp_addComm1" (formula "15") (term "0"))
                                       (rule "inEqSimp_ltToLeq" (formula "70"))
                                       (rule "polySimp_rightDist" (formula "70") (term "1,0,0"))
                                       (rule "mul_literals" (formula "70") (term "0,1,0,0"))
                                       (rule "polySimp_addAssoc" (formula "70") (term "0,0"))
                                       (rule "add_literals" (formula "70") (term "0,0,0"))
                                       (rule "add_zero_left" (formula "70") (term "0,0"))
                                       (rule "polySimp_pullOutFactor2" (formula "70") (term "0"))
                                       (rule "add_literals" (formula "70") (term "1,0"))
                                       (rule "times_zero_1" (formula "70") (term "0"))
                                       (rule "leq_literals" (formula "70"))
                                       (rule "true_left" (formula "70"))
                                       (rule "inEqSimp_ltToLeq" (formula "34") (term "0,0,0"))
                                       (rule "polySimp_mulComm0" (formula "34") (term "1,0,0,0,0,0"))
                                       (rule "inEqSimp_ltToLeq" (formula "57") (term "0,0,0,1,0,1,0"))
                                       (rule "polySimp_mulComm0" (formula "57") (term "1,0,0,0,0,0,1,0,1,0"))
                                       (rule "inEqSimp_sepPosMonomial0" (formula "42") (term "0,0,0"))
                                       (rule "polySimp_mulComm0" (formula "42") (term "1,0,0,0"))
                                       (rule "polySimp_rightDist" (formula "42") (term "1,0,0,0"))
                                       (rule "mul_literals" (formula "42") (term "0,1,0,0,0"))
                                       (rule "polySimp_mulLiterals" (formula "42") (term "1,1,0,0,0"))
                                       (rule "polySimp_elimOne" (formula "42") (term "1,1,0,0,0"))
                                       (rule "inEqSimp_sepPosMonomial0" (formula "57") (term "0,0,0"))
                                       (rule "polySimp_mulComm0" (formula "57") (term "1,0,0,0"))
                                       (rule "polySimp_rightDist" (formula "57") (term "1,0,0,0"))
                                       (rule "polySimp_mulLiterals" (formula "57") (term "1,1,0,0,0"))
                                       (rule "mul_literals" (formula "57") (term "0,1,0,0,0"))
                                       (rule "polySimp_elimOne" (formula "57") (term "1,1,0,0,0"))
                                       (rule "inEqSimp_sepPosMonomial0" (formula "55") (term "0,0,0"))
                                       (rule "polySimp_mulComm0" (formula "55") (term "1,0,0,0"))
                                       (rule "polySimp_rightDist" (formula "55") (term "1,0,0,0"))
                                       (rule "mul_literals" (formula "55") (term "0,1,0,0,0"))
                                       (rule "polySimp_mulLiterals" (formula "55") (term "1,1,0,0,0"))
                                       (rule "polySimp_elimOne" (formula "55") (term "1,1,0,0,0"))
                                       (rule "inEqSimp_sepPosMonomial0" (formula "57") (term "1,0,0,0,1,0"))
                                       (rule "polySimp_mulComm0" (formula "57") (term "1,1,0,0,0,1,0"))
                                       (rule "polySimp_rightDist" (formula "57") (term "1,1,0,0,0,1,0"))
                                       (rule "polySimp_mulLiterals" (formula "57") (term "1,1,1,0,0,0,1,0"))
                                       (rule "mul_literals" (formula "57") (term "0,1,1,0,0,0,1,0"))
                                       (rule "polySimp_elimOne" (formula "57") (term "1,1,1,0,0,0,1,0"))
                                       (rule "inEqSimp_sepNegMonomial0" (formula "15"))
                                       (rule "polySimp_mulLiterals" (formula "15") (term "0"))
                                       (rule "polySimp_elimOne" (formula "15") (term "0"))
                                       (rule "inEqSimp_sepPosMonomial0" (formula "34") (term "0,0,0"))
                                       (rule "polySimp_mulComm0" (formula "34") (term "1,0,0,0"))
                                       (rule "polySimp_rightDist" (formula "34") (term "1,0,0,0"))
                                       (rule "polySimp_mulLiterals" (formula "34") (term "1,1,0,0,0"))
                                       (rule "mul_literals" (formula "34") (term "0,1,0,0,0"))
                                       (rule "polySimp_elimOne" (formula "34") (term "1,1,0,0,0"))
                                       (rule "inEqSimp_sepPosMonomial0" (formula "57") (term "0,0,0,1,0,1,0"))
                                       (rule "polySimp_mulComm0" (formula "57") (term "1,0,0,0,1,0,1,0"))
                                       (rule "polySimp_rightDist" (formula "57") (term "1,0,0,0,1,0,1,0"))
                                       (rule "mul_literals" (formula "57") (term "0,1,0,0,0,1,0,1,0"))
                                       (rule "polySimp_mulLiterals" (formula "57") (term "1,1,0,0,0,1,0,1,0"))
                                       (rule "polySimp_elimOne" (formula "57") (term "1,1,0,0,0,1,0,1,0"))
                                       (rule "inEqSimp_subsumption1" (formula "59") (ifseqformula "51"))
                                       (rule "leq_literals" (formula "59") (term "0"))
                                        (builtin "One Step Simplification" (formula "59"))
                                       (rule "true_left" (formula "59"))
                                       (rule "inEqSimp_subsumption1" (formula "52") (ifseqformula "15"))
                                       (rule "inEqSimp_homoInEq0" (formula "52") (term "0"))
                                       (rule "polySimp_pullOutFactor1b" (formula "52") (term "0,0"))
                                       (rule "add_literals" (formula "52") (term "1,1,0,0"))
                                       (rule "times_zero_1" (formula "52") (term "1,0,0"))
                                       (rule "add_zero_right" (formula "52") (term "0,0"))
                                       (rule "qeq_literals" (formula "52") (term "0"))
                                        (builtin "One Step Simplification" (formula "52"))
                                       (rule "true_left" (formula "52"))
                                       (rule "inEqSimp_subsumption1" (formula "46") (ifseqformula "47"))
                                       (rule "leq_literals" (formula "46") (term "0"))
                                        (builtin "One Step Simplification" (formula "46"))
                                       (rule "true_left" (formula "46"))
                                       (rule "inEqSimp_exactShadow3" (formula "15") (ifseqformula "45"))
                                       (rule "polySimp_rightDist" (formula "15") (term "0,0"))
                                       (rule "mul_literals" (formula "15") (term "0,0,0"))
                                       (rule "polySimp_addComm1" (formula "15") (term "0"))
                                       (rule "add_literals" (formula "15") (term "0,0"))
                                       (rule "inEqSimp_sepNegMonomial1" (formula "15"))
                                       (rule "polySimp_mulLiterals" (formula "15") (term "0"))
                                       (rule "polySimp_elimOne" (formula "15") (term "0"))
                                       (rule "inEqSimp_subsumption0" (formula "57") (ifseqformula "15"))
                                       (rule "leq_literals" (formula "57") (term "0"))
                                        (builtin "One Step Simplification" (formula "57"))
                                       (rule "true_left" (formula "57"))
                                       (rule "nnf_imp2or" (formula "28") (term "0,0"))
                                        (builtin "One Step Simplification" (formula "28"))
                                       (rule "nnf_imp2or" (formula "27") (term "0,0,0"))
                                       (rule "nnf_imp2or" (formula "25") (term "0,0,0"))
                                       (rule "nnf_imp2or" (formula "7") (term "0,0,0"))
                                       (rule "nnf_imp2or" (formula "24") (term "0,0,0"))
                                       (rule "nnf_imp2or" (formula "3") (term "0,0,0"))
                                       (rule "nnf_imp2or" (formula "2") (term "0,0,0"))
                                       (rule "nnf_imp2or" (formula "23") (term "0,0,0"))
                                       (rule "nnf_imp2or" (formula "19") (term "0,0,0"))
                                       (rule "nnf_imp2or" (formula "10") (term "0,0,0"))
                                       (rule "nnf_imp2or" (formula "26") (term "0,0,0"))
                                       (rule "nnf_imp2or" (formula "29") (term "0,0,0"))
                                       (rule "nnf_imp2or" (formula "30") (term "0,0,0"))
                                       (rule "nnf_imp2or" (formula "22") (term "0,0,0"))
                                       (rule "nnf_imp2or" (formula "4") (term "0,0,0"))
                                       (rule "nnf_imp2or" (formula "21") (term "0,0,0"))
                                       (rule "nnf_imp2or" (formula "1") (term "0,0,0"))
                                       (rule "nnf_imp2or" (formula "6") (term "0,0,0"))
                                       (rule "nnf_imp2or" (formula "18") (term "0,0,0"))
                                       (rule "nnf_imp2or" (formula "8") (term "0,0,0"))
                                       (rule "nnf_imp2or" (formula "9") (term "0,0,0"))
                                       (rule "nnf_imp2or" (formula "5") (term "0,0,0"))
                                       (rule "nnf_imp2or" (formula "20") (term "0,0,0"))
                                       (rule "nnf_imp2or" (formula "43") (term "0"))
                                       (rule "nnf_imp2or" (formula "54") (term "0"))
                                       (rule "nnf_imp2or" (formula "35") (term "0"))
                                       (rule "nnf_imp2or" (formula "56") (term "0"))
                                       (rule "nnf_notAnd" (formula "27") (term "0,0,0,0"))
                                        (builtin "One Step Simplification" (formula "27"))
                                       (rule "nnf_notAnd" (formula "25") (term "0,0,0,0"))
                                        (builtin "One Step Simplification" (formula "25"))
                                       (rule "nnf_notAnd" (formula "7") (term "0,0,0,0"))
                                        (builtin "One Step Simplification" (formula "7"))
                                       (rule "nnf_notAnd" (formula "43") (term "0,0"))
                                       (rule "inEqSimp_notLeq" (formula "43") (term "0,0,0"))
                                       (rule "polySimp_rightDist" (formula "43") (term "1,0,0,0,0,0"))
                                       (rule "mul_literals" (formula "43") (term "0,1,0,0,0,0,0"))
                                       (rule "polySimp_addAssoc" (formula "43") (term "0,0,0,0,0"))
                                       (rule "add_literals" (formula "43") (term "0,0,0,0,0,0"))
                                       (rule "add_zero_left" (formula "43") (term "0,0,0,0,0"))
                                       (rule "inEqSimp_sepPosMonomial1" (formula "43") (term "0,0,0"))
                                       (rule "polySimp_mulLiterals" (formula "43") (term "1,0,0,0"))
                                       (rule "polySimp_elimOne" (formula "43") (term "1,0,0,0"))
                                       (rule "inEqSimp_notGeq" (formula "43") (term "1,0,0"))
                                       (rule "mul_literals" (formula "43") (term "1,0,0,1,0,0"))
                                       (rule "add_literals" (formula "43") (term "0,0,1,0,0"))
                                       (rule "inEqSimp_sepPosMonomial0" (formula "43") (term "1,0,0"))
                                       (rule "mul_literals" (formula "43") (term "1,1,0,0"))
                                       (rule "nnf_notAnd" (formula "54") (term "0,0"))
                                       (rule "inEqSimp_notGeq" (formula "54") (term "1,0,0"))
                                       (rule "mul_literals" (formula "54") (term "1,0,0,1,0,0"))
                                       (rule "add_literals" (formula "54") (term "0,0,1,0,0"))
                                       (rule "inEqSimp_sepPosMonomial0" (formula "54") (term "1,0,0"))
                                       (rule "mul_literals" (formula "54") (term "1,1,0,0"))
                                       (rule "inEqSimp_notLeq" (formula "54") (term "0,0,0"))
                                       (rule "polySimp_rightDist" (formula "54") (term "1,0,0,0,0,0"))
                                       (rule "mul_literals" (formula "54") (term "0,1,0,0,0,0,0"))
                                       (rule "polySimp_addAssoc" (formula "54") (term "0,0,0,0,0"))
                                       (rule "add_literals" (formula "54") (term "0,0,0,0,0,0"))
                                       (rule "add_zero_left" (formula "54") (term "0,0,0,0,0"))
                                       (rule "inEqSimp_sepPosMonomial1" (formula "54") (term "0,0,0"))
                                       (rule "polySimp_mulLiterals" (formula "54") (term "1,0,0,0"))
                                       (rule "polySimp_elimOne" (formula "54") (term "1,0,0,0"))
                                       (rule "nnf_notAnd" (formula "24") (term "0,0,0,0"))
                                        (builtin "One Step Simplification" (formula "24"))
                                       (rule "nnf_notAnd" (formula "35") (term "0,0"))
                                       (rule "inEqSimp_notLeq" (formula "35") (term "0,0,0"))
                                       (rule "polySimp_rightDist" (formula "35") (term "1,0,0,0,0,0"))
                                       (rule "mul_literals" (formula "35") (term "0,1,0,0,0,0,0"))
                                       (rule "polySimp_addAssoc" (formula "35") (term "0,0,0,0,0"))
                                       (rule "add_literals" (formula "35") (term "0,0,0,0,0,0"))
                                       (rule "add_zero_left" (formula "35") (term "0,0,0,0,0"))
                                       (rule "inEqSimp_sepPosMonomial1" (formula "35") (term "0,0,0"))
                                       (rule "polySimp_mulLiterals" (formula "35") (term "1,0,0,0"))
                                       (rule "polySimp_elimOne" (formula "35") (term "1,0,0,0"))
                                       (rule "inEqSimp_notGeq" (formula "35") (term "1,0,0"))
                                       (rule "mul_literals" (formula "35") (term "1,0,0,1,0,0"))
                                       (rule "add_zero_right" (formula "35") (term "0,0,1,0,0"))
                                       (rule "inEqSimp_sepPosMonomial0" (formula "35") (term "1,0,0"))
                                       (rule "mul_literals" (formula "35") (term "1,1,0,0"))
                                       (rule "nnf_notAnd" (formula "3") (term "0,0,0,0"))
                                        (builtin "One Step Simplification" (formula "3"))
                                       (rule "nnf_imp2or" (formula "2") (term "1,0,0,0"))
                                       (rule "nnf_notAnd" (formula "2") (term "0,0,0,0"))
                                        (builtin "One Step Simplification" (formula "2"))
                                       (rule "nnf_notAnd" (formula "56") (term "0,0"))
                                       (rule "inEqSimp_notLeq" (formula "56") (term "0,0,0"))
                                       (rule "polySimp_rightDist" (formula "56") (term "1,0,0,0,0,0"))
                                       (rule "mul_literals" (formula "56") (term "0,1,0,0,0,0,0"))
                                       (rule "polySimp_addAssoc" (formula "56") (term "0,0,0,0,0"))
                                       (rule "add_literals" (formula "56") (term "0,0,0,0,0,0"))
                                       (rule "add_zero_left" (formula "56") (term "0,0,0,0,0"))
                                       (rule "inEqSimp_sepPosMonomial1" (formula "56") (term "0,0,0"))
                                       (rule "polySimp_mulLiterals" (formula "56") (term "1,0,0,0"))
                                       (rule "polySimp_elimOne" (formula "56") (term "1,0,0,0"))
                                       (rule "inEqSimp_notGeq" (formula "56") (term "1,0,0"))
                                       (rule "mul_literals" (formula "56") (term "1,0,0,1,0,0"))
                                       (rule "add_literals" (formula "56") (term "0,0,1,0,0"))
                                       (rule "inEqSimp_sepPosMonomial0" (formula "56") (term "1,0,0"))
                                       (rule "mul_literals" (formula "56") (term "1,1,0,0"))
                                       (rule "nnf_notOr" (formula "56") (term "1,0"))
                                       (rule "nnf_notAnd" (formula "23") (term "0,0,0,0"))
                                        (builtin "One Step Simplification" (formula "23"))
                                       (rule "nnf_imp2or" (formula "19") (term "1,0,0,0"))
                                       (rule "nnf_notAnd" (formula "19") (term "0,0,0,0"))
                                        (builtin "One Step Simplification" (formula "19"))
                                       (rule "nnf_imp2or" (formula "10") (term "1,0,0,0"))
                                       (rule "nnf_notAnd" (formula "10") (term "0,0,0,0"))
                                        (builtin "One Step Simplification" (formula "10"))
                                       (rule "nnf_notAnd" (formula "26") (term "0,0,0,0"))
                                        (builtin "One Step Simplification" (formula "26"))
                                       (rule "nnf_notAnd" (formula "29") (term "0,0,0,0"))
                                        (builtin "One Step Simplification" (formula "29"))
                                       (rule "nnf_imp2or" (formula "30") (term "1,0,0,0"))
                                       (rule "nnf_notAnd" (formula "30") (term "0,0,0,0"))
                                        (builtin "One Step Simplification" (formula "30"))
                                       (rule "nnf_imp2or" (formula "22") (term "1,0,0,0"))
                                       (rule "nnf_notAnd" (formula "22") (term "0,0,0,0"))
                                        (builtin "One Step Simplification" (formula "22"))
                                       (rule "nnf_imp2or" (formula "4") (term "1,0,0,0"))
                                       (rule "nnf_notAnd" (formula "4") (term "0,0,0,0"))
                                        (builtin "One Step Simplification" (formula "4"))
                                       (rule "nnf_notAnd" (formula "21") (term "0,0,0,0"))
                                        (builtin "One Step Simplification" (formula "21"))
                                       (rule "nnf_notAnd" (formula "1") (term "0,0,0,0"))
                                        (builtin "One Step Simplification" (formula "1"))
                                       (rule "nnf_notAnd" (formula "6") (term "0,0,0,0"))
                                        (builtin "One Step Simplification" (formula "6"))
                                       (rule "nnf_imp2or" (formula "18") (term "1,0,0,0"))
                                       (rule "nnf_notAnd" (formula "18") (term "0,0,0,0"))
                                        (builtin "One Step Simplification" (formula "18"))
                                       (rule "nnf_imp2or" (formula "8") (term "1,0,0,0"))
                                       (rule "nnf_notAnd" (formula "8") (term "0,0,0,0"))
                                        (builtin "One Step Simplification" (formula "8"))
                                       (rule "nnf_notAnd" (formula "9") (term "0,0,0,0"))
                                        (builtin "One Step Simplification" (formula "9"))
                                       (rule "nnf_imp2or" (formula "5") (term "1,0,0,0"))
                                       (rule "nnf_notAnd" (formula "5") (term "0,0,0,0"))
                                        (builtin "One Step Simplification" (formula "5"))
                                       (rule "nnf_imp2or" (formula "20") (term "1,0,0,0"))
                                       (rule "nnf_notAnd" (formula "20") (term "0,0,0,0"))
                                        (builtin "One Step Simplification" (formula "20"))
                                       (rule "nnf_imp2or" (formula "27") (term "1,0,0,0"))
                                       (rule "nnf_imp2or" (formula "25") (term "1,0,0,0"))
                                       (rule "nnf_imp2or" (formula "7") (term "1,0,0,0"))
                                       (rule "nnf_notOr" (formula "27") (term "1,0,0,0,0"))
                                       (rule "nnf_notOr" (formula "25") (term "1,0,0,0,0"))
                                       (rule "nnf_notOr" (formula "7") (term "1,0,0,0,0"))
                                       (rule "nnf_imp2or" (formula "24") (term "1,0,0,0"))
                                       (rule "nnf_notOr" (formula "24") (term "1,0,0,0,0"))
                                       (rule "nnf_imp2or" (formula "3") (term "1,0,0,0"))
                                       (rule "nnf_notAnd" (formula "56") (term "1,1,0"))
                                        (builtin "One Step Simplification" (formula "56"))
                                       (rule "nnf_notOr" (formula "3") (term "1,0,0,0,0"))
                                       (rule "nnf_notOr" (formula "2") (term "0,0,0,0,0"))
                                       (rule "nnf_imp2or" (formula "23") (term "1,0,0,0"))
                                       (rule "nnf_imp2or" (formula "26") (term "1,0,0,0"))
                                       (rule "nnf_imp2or" (formula "29") (term "1,0,0,0"))
                                       (rule "nnf_notOr" (formula "23") (term "1,0,0,0,0"))
                                       (rule "Class_invariant_axiom_for_java_util_ArrayList" (formula "81"))
                                       (rule "closeTrue" (formula "81"))
                                    )
                                 )
                                 (branch
                                    (rule "inEqSimp_ltToLeq" (formula "55") (term "0,0,0"))
                                    (rule "polySimp_mulComm0" (formula "55") (term "1,0,0,0,0,0"))
                                    (rule "inEqSimp_ltToLeq" (formula "57") (term "0,0,0,1,0,1,0"))
                                    (rule "polySimp_mulComm0" (formula "57") (term "1,0,0,0,0,0,1,0,1,0"))
                                    (rule "inEqSimp_ltToLeq" (formula "42") (term "0,0,0"))
                                    (rule "polySimp_mulComm0" (formula "42") (term "1,0,0,0,0,0"))
                                    (rule "inEqSimp_ltToLeq" (formula "34") (term "0,0,0"))
                                    (rule "polySimp_mulComm0" (formula "34") (term "1,0,0,0,0,0"))
                                    (rule "inEqSimp_ltToLeq" (formula "57") (term "1,0,0,0,1,0"))
                                    (rule "polySimp_mulComm0" (formula "57") (term "1,0,0,1,0,0,0,1,0"))
                                    (rule "inEqSimp_ltToLeq" (formula "57") (term "0,0,0"))
                                    (rule "polySimp_mulComm0" (formula "57") (term "1,0,0,0,0,0"))
                                    (rule "inEqSimp_ltToLeq" (formula "70"))
                                    (rule "polySimp_rightDist" (formula "70") (term "1,0,0"))
                                    (rule "mul_literals" (formula "70") (term "0,1,0,0"))
                                    (rule "polySimp_addAssoc" (formula "70") (term "0,0"))
                                    (rule "add_literals" (formula "70") (term "0,0,0"))
                                    (rule "add_zero_left" (formula "70") (term "0,0"))
                                    (rule "polySimp_pullOutFactor2" (formula "70") (term "0"))
                                    (rule "add_literals" (formula "70") (term "1,0"))
                                    (rule "times_zero_1" (formula "70") (term "0"))
                                    (rule "leq_literals" (formula "70"))
                                    (rule "true_left" (formula "70"))
                                    (rule "inEqSimp_ltToLeq" (formula "15"))
                                    (rule "polySimp_mulComm0" (formula "15") (term "1,0,0"))
                                    (rule "polySimp_addComm1" (formula "15") (term "0"))
                                    (rule "inEqSimp_sepPosMonomial0" (formula "55") (term "0,0,0"))
                                    (rule "polySimp_mulComm0" (formula "55") (term "1,0,0,0"))
                                    (rule "polySimp_rightDist" (formula "55") (term "1,0,0,0"))
                                    (rule "polySimp_mulLiterals" (formula "55") (term "1,1,0,0,0"))
                                    (rule "mul_literals" (formula "55") (term "0,1,0,0,0"))
                                    (rule "polySimp_elimOne" (formula "55") (term "1,1,0,0,0"))
                                    (rule "inEqSimp_sepPosMonomial0" (formula "57") (term "0,0,0,1,0,1,0"))
                                    (rule "polySimp_mulComm0" (formula "57") (term "1,0,0,0,1,0,1,0"))
                                    (rule "polySimp_rightDist" (formula "57") (term "1,0,0,0,1,0,1,0"))
                                    (rule "mul_literals" (formula "57") (term "0,1,0,0,0,1,0,1,0"))
                                    (rule "polySimp_mulLiterals" (formula "57") (term "1,1,0,0,0,1,0,1,0"))
                                    (rule "polySimp_elimOne" (formula "57") (term "1,1,0,0,0,1,0,1,0"))
                                    (rule "inEqSimp_sepPosMonomial0" (formula "42") (term "0,0,0"))
                                    (rule "polySimp_mulComm0" (formula "42") (term "1,0,0,0"))
                                    (rule "polySimp_rightDist" (formula "42") (term "1,0,0,0"))
                                    (rule "polySimp_mulLiterals" (formula "42") (term "1,1,0,0,0"))
                                    (rule "mul_literals" (formula "42") (term "0,1,0,0,0"))
                                    (rule "polySimp_elimOne" (formula "42") (term "1,1,0,0,0"))
                                    (rule "inEqSimp_sepPosMonomial0" (formula "34") (term "0,0,0"))
                                    (rule "polySimp_mulComm0" (formula "34") (term "1,0,0,0"))
                                    (rule "polySimp_rightDist" (formula "34") (term "1,0,0,0"))
                                    (rule "polySimp_mulLiterals" (formula "34") (term "1,1,0,0,0"))
                                    (rule "mul_literals" (formula "34") (term "0,1,0,0,0"))
                                    (rule "polySimp_elimOne" (formula "34") (term "1,1,0,0,0"))
                                    (rule "inEqSimp_sepPosMonomial0" (formula "57") (term "1,0,0,0,1,0"))
                                    (rule "polySimp_mulComm0" (formula "57") (term "1,1,0,0,0,1,0"))
                                    (rule "polySimp_rightDist" (formula "57") (term "1,1,0,0,0,1,0"))
                                    (rule "polySimp_mulLiterals" (formula "57") (term "1,1,1,0,0,0,1,0"))
                                    (rule "mul_literals" (formula "57") (term "0,1,1,0,0,0,1,0"))
                                    (rule "polySimp_elimOne" (formula "57") (term "1,1,1,0,0,0,1,0"))
                                    (rule "inEqSimp_sepPosMonomial0" (formula "57") (term "0,0,0"))
                                    (rule "polySimp_mulComm0" (formula "57") (term "1,0,0,0"))
                                    (rule "polySimp_rightDist" (formula "57") (term "1,0,0,0"))
                                    (rule "polySimp_mulLiterals" (formula "57") (term "1,1,0,0,0"))
                                    (rule "mul_literals" (formula "57") (term "0,1,0,0,0"))
                                    (rule "polySimp_elimOne" (formula "57") (term "1,1,0,0,0"))
                                    (rule "inEqSimp_sepNegMonomial0" (formula "15"))
                                    (rule "polySimp_mulLiterals" (formula "15") (term "0"))
                                    (rule "polySimp_elimOne" (formula "15") (term "0"))
                                    (rule "inEqSimp_subsumption1" (formula "46") (ifseqformula "47"))
                                    (rule "leq_literals" (formula "46") (term "0"))
                                     (builtin "One Step Simplification" (formula "46"))
                                    (rule "true_left" (formula "46"))
                                    (rule "inEqSimp_subsumption1" (formula "51") (ifseqformula "15"))
                                    (rule "inEqSimp_homoInEq0" (formula "51") (term "0"))
                                    (rule "polySimp_pullOutFactor1b" (formula "51") (term "0,0"))
                                    (rule "add_literals" (formula "51") (term "1,1,0,0"))
                                    (rule "times_zero_1" (formula "51") (term "1,0,0"))
                                    (rule "add_literals" (formula "51") (term "0,0"))
                                    (rule "qeq_literals" (formula "51") (term "0"))
                                     (builtin "One Step Simplification" (formula "51"))
                                    (rule "true_left" (formula "51"))
                                    (rule "inEqSimp_subsumption1" (formula "57") (ifseqformula "50"))
                                    (rule "leq_literals" (formula "57") (term "0"))
                                     (builtin "One Step Simplification" (formula "57"))
                                    (rule "true_left" (formula "57"))
                                    (rule "pullOutSelect" (formula "81") (term "0,0") (inst "selectSK=java_util_Collection_seq_7"))
                                    (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "64"))
                                     (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "81")))
                                    (rule "replaceKnownSelect_taclet00100_12" (formula "1") (term "2,0"))
                                    (rule "replaceKnownAuxiliaryConstant_taclet00100_13" (formula "1") (term "2,0"))
                                    (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,1,0,0") (ifseqformula "59"))
                                     (builtin "One Step Simplification" (formula "1"))
                                    (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,0,0,1,0,0") (ifseqformula "45"))
                                    (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,0,0,0,1,0,0") (ifseqformula "38"))
                                    (rule "replace_known_left" (formula "1") (term "0,0,0,0,0,1,0,0") (ifseqformula "33"))
                                     (builtin "One Step Simplification" (formula "1"))
                                    (rule "elementOfSingleton" (formula "1") (term "0,0"))
                                     (builtin "One Step Simplification" (formula "1"))
                                    (rule "eqSymm" (formula "1") (term "0,0"))
                                    (rule "inEqSimp_exactShadow3" (formula "16") (ifseqformula "46"))
                                    (rule "polySimp_rightDist" (formula "16") (term "0,0"))
                                    (rule "mul_literals" (formula "16") (term "0,0,0"))
                                    (rule "polySimp_addComm1" (formula "16") (term "0"))
                                    (rule "add_literals" (formula "16") (term "0,0"))
                                    (rule "inEqSimp_sepNegMonomial1" (formula "16"))
                                    (rule "polySimp_mulLiterals" (formula "16") (term "0"))
                                    (rule "polySimp_elimOne" (formula "16") (term "0"))
                                    (rule "inEqSimp_subsumption0" (formula "58") (ifseqformula "16"))
                                    (rule "leq_literals" (formula "58") (term "0"))
                                     (builtin "One Step Simplification" (formula "58"))
                                    (rule "true_left" (formula "58"))
                                    (rule "nnf_imp2or" (formula "29") (term "0,0"))
                                     (builtin "One Step Simplification" (formula "29"))
                                    (rule "nnf_imp2or" (formula "2") (term "0,0,0"))
                                    (rule "nnf_imp2or" (formula "7") (term "0,0,0"))
                                    (rule "nnf_imp2or" (formula "20") (term "0,0,0"))
                                    (rule "nnf_imp2or" (formula "22") (term "0,0,0"))
                                    (rule "nnf_imp2or" (formula "5") (term "0,0,0"))
                                    (rule "nnf_imp2or" (formula "6") (term "0,0,0"))
                                    (rule "nnf_imp2or" (formula "24") (term "0,0,0"))
                                    (rule "nnf_imp2or" (formula "4") (term "0,0,0"))
                                    (rule "nnf_imp2or" (formula "9") (term "0,0,0"))
                                    (rule "nnf_imp2or" (formula "27") (term "0,0,0"))
                                    (rule "nnf_imp2or" (formula "31") (term "0,0,0"))
                                    (rule "nnf_imp2or" (formula "3") (term "0,0,0"))
                                    (rule "nnf_imp2or" (formula "21") (term "0,0,0"))
                                    (rule "nnf_imp2or" (formula "26") (term "0,0,0"))
                                    (rule "nnf_imp2or" (formula "28") (term "0,0,0"))
                                    (rule "nnf_imp2or" (formula "23") (term "0,0,0"))
                                    (rule "nnf_imp2or" (formula "8") (term "0,0,0"))
                                    (rule "nnf_imp2or" (formula "25") (term "0,0,0"))
                                    (rule "nnf_imp2or" (formula "30") (term "0,0,0"))
                                    (rule "nnf_imp2or" (formula "10") (term "0,0,0"))
                                    (rule "nnf_imp2or" (formula "19") (term "0,0,0"))
                                    (rule "nnf_imp2or" (formula "11") (term "0,0,0"))
                                    (rule "nnf_imp2or" (formula "55") (term "0"))
                                    (rule "nnf_imp2or" (formula "44") (term "0"))
                                    (rule "nnf_imp2or" (formula "36") (term "0"))
                                    (rule "nnf_imp2or" (formula "57") (term "0"))
                                    (rule "nnf_notAnd" (formula "2") (term "0,0,0,0"))
                                     (builtin "One Step Simplification" (formula "2"))
                                    (rule "nnf_imp2or" (formula "7") (term "1,0,0,0"))
                                    (rule "nnf_notAnd" (formula "7") (term "0,0,0,0"))
                                     (builtin "One Step Simplification" (formula "7"))
                                    (rule "nnf_notAnd" (formula "20") (term "0,0,0,0"))
                                     (builtin "One Step Simplification" (formula "20"))
                                    (rule "nnf_notAnd" (formula "55") (term "0,0"))
                                    (rule "inEqSimp_notLeq" (formula "55") (term "0,0,0"))
                                    (rule "polySimp_rightDist" (formula "55") (term "1,0,0,0,0,0"))
                                    (rule "mul_literals" (formula "55") (term "0,1,0,0,0,0,0"))
                                    (rule "polySimp_addAssoc" (formula "55") (term "0,0,0,0,0"))
                                    (rule "add_literals" (formula "55") (term "0,0,0,0,0,0"))
                                    (rule "add_zero_left" (formula "55") (term "0,0,0,0,0"))
                                    (rule "inEqSimp_sepPosMonomial1" (formula "55") (term "0,0,0"))
                                    (rule "polySimp_mulLiterals" (formula "55") (term "1,0,0,0"))
                                    (rule "polySimp_elimOne" (formula "55") (term "1,0,0,0"))
                                    (rule "inEqSimp_notGeq" (formula "55") (term "1,0,0"))
                                    (rule "mul_literals" (formula "55") (term "1,0,0,1,0,0"))
                                    (rule "add_literals" (formula "55") (term "0,0,1,0,0"))
                                    (rule "inEqSimp_sepPosMonomial0" (formula "55") (term "1,0,0"))
                                    (rule "mul_literals" (formula "55") (term "1,1,0,0"))
                                    (rule "nnf_notAnd" (formula "44") (term "0,0"))
                                    (rule "inEqSimp_notLeq" (formula "44") (term "0,0,0"))
                                    (rule "polySimp_rightDist" (formula "44") (term "1,0,0,0,0,0"))
                                    (rule "mul_literals" (formula "44") (term "0,1,0,0,0,0,0"))
                                    (rule "polySimp_addAssoc" (formula "44") (term "0,0,0,0,0"))
                                    (rule "add_literals" (formula "44") (term "0,0,0,0,0,0"))
                                    (rule "add_zero_left" (formula "44") (term "0,0,0,0,0"))
                                    (rule "inEqSimp_sepPosMonomial1" (formula "44") (term "0,0,0"))
                                    (rule "polySimp_mulLiterals" (formula "44") (term "1,0,0,0"))
                                    (rule "polySimp_elimOne" (formula "44") (term "1,0,0,0"))
                                    (rule "inEqSimp_notGeq" (formula "44") (term "1,0,0"))
                                    (rule "times_zero_1" (formula "44") (term "1,0,0,1,0,0"))
                                    (rule "add_literals" (formula "44") (term "0,0,1,0,0"))
                                    (rule "inEqSimp_sepPosMonomial0" (formula "44") (term "1,0,0"))
                                    (rule "mul_literals" (formula "44") (term "1,1,0,0"))
                                    (rule "nnf_notAnd" (formula "22") (term "0,0,0,0"))
                                     (builtin "One Step Simplification" (formula "22"))
                                    (rule "nnf_notAnd" (formula "36") (term "0,0"))
                                    (rule "inEqSimp_notGeq" (formula "36") (term "1,0,0"))
                                    (rule "times_zero_1" (formula "36") (term "1,0,0,1,0,0"))
                                    (rule "add_literals" (formula "36") (term "0,0,1,0,0"))
                                    (rule "inEqSimp_sepPosMonomial0" (formula "36") (term "1,0,0"))
                                    (rule "mul_literals" (formula "36") (term "1,1,0,0"))
                                    (rule "inEqSimp_notLeq" (formula "36") (term "0,0,0"))
                                    (rule "polySimp_rightDist" (formula "36") (term "1,0,0,0,0,0"))
                                    (rule "mul_literals" (formula "36") (term "0,1,0,0,0,0,0"))
                                    (rule "polySimp_addAssoc" (formula "36") (term "0,0,0,0,0"))
                                    (rule "add_literals" (formula "36") (term "0,0,0,0,0,0"))
                                    (rule "add_zero_left" (formula "36") (term "0,0,0,0,0"))
                                    (rule "inEqSimp_sepPosMonomial1" (formula "36") (term "0,0,0"))
                                    (rule "polySimp_mulLiterals" (formula "36") (term "1,0,0,0"))
                                    (rule "polySimp_elimOne" (formula "36") (term "1,0,0,0"))
                                    (rule "nnf_imp2or" (formula "5") (term "1,0,0,0"))
                                    (rule "nnf_notAnd" (formula "5") (term "0,0,0,0"))
                                     (builtin "One Step Simplification" (formula "5"))
                                    (rule "nnf_imp2or" (formula "6") (term "1,0,0,0"))
                                    (rule "nnf_notAnd" (formula "6") (term "0,0,0,0"))
                                     (builtin "One Step Simplification" (formula "6"))
                                    (rule "nnf_notAnd" (formula "57") (term "0,0"))
                                    (rule "inEqSimp_notGeq" (formula "57") (term "1,0,0"))
                                    (rule "mul_literals" (formula "57") (term "1,0,0,1,0,0"))
                                    (rule "add_zero_right" (formula "57") (term "0,0,1,0,0"))
                                    (rule "inEqSimp_sepPosMonomial0" (formula "57") (term "1,0,0"))
                                    (rule "mul_literals" (formula "57") (term "1,1,0,0"))
                                    (rule "inEqSimp_notLeq" (formula "57") (term "0,0,0"))
                                    (rule "polySimp_rightDist" (formula "57") (term "1,0,0,0,0,0"))
                                    (rule "mul_literals" (formula "57") (term "0,1,0,0,0,0,0"))
                                    (rule "polySimp_addAssoc" (formula "57") (term "0,0,0,0,0"))
                                    (rule "add_literals" (formula "57") (term "0,0,0,0,0,0"))
                                    (rule "add_zero_left" (formula "57") (term "0,0,0,0,0"))
                                    (rule "inEqSimp_sepPosMonomial1" (formula "57") (term "0,0,0"))
                                    (rule "polySimp_mulLiterals" (formula "57") (term "1,0,0,0"))
                                    (rule "polySimp_elimOne" (formula "57") (term "1,0,0,0"))
                                    (rule "nnf_notOr" (formula "57") (term "1,0"))
                                    (rule "nnf_notAnd" (formula "24") (term "0,0,0,0"))
                                     (builtin "One Step Simplification" (formula "24"))
                                    (rule "nnf_imp2or" (formula "4") (term "1,0,0,0"))
                                    (rule "nnf_notAnd" (formula "4") (term "0,0,0,0"))
                                     (builtin "One Step Simplification" (formula "4"))
                                    (rule "nnf_notAnd" (formula "9") (term "0,0,0,0"))
                                     (builtin "One Step Simplification" (formula "9"))
                                    (rule "nnf_imp2or" (formula "27") (term "1,0,0,0"))
                                    (rule "nnf_notAnd" (formula "27") (term "0,0,0,0"))
                                     (builtin "One Step Simplification" (formula "27"))
                                    (rule "nnf_notAnd" (formula "31") (term "0,0,0,0"))
                                     (builtin "One Step Simplification" (formula "31"))
                                    (rule "nnf_imp2or" (formula "3") (term "1,0,0,0"))
                                    (rule "nnf_notAnd" (formula "3") (term "0,0,0,0"))
                                     (builtin "One Step Simplification" (formula "3"))
                                    (rule "nnf_notAnd" (formula "21") (term "0,0,0,0"))
                                     (builtin "One Step Simplification" (formula "21"))
                                    (rule "nnf_imp2or" (formula "26") (term "1,0,0,0"))
                                    (rule "nnf_notAnd" (formula "26") (term "0,0,0,0"))
                                     (builtin "One Step Simplification" (formula "26"))
                                    (rule "nnf_imp2or" (formula "28") (term "1,0,0,0"))
                                    (rule "nnf_notAnd" (formula "28") (term "0,0,0,0"))
                                     (builtin "One Step Simplification" (formula "28"))
                                    (rule "nnf_imp2or" (formula "23") (term "1,0,0,0"))
                                    (rule "nnf_notAnd" (formula "23") (term "0,0,0,0"))
                                     (builtin "One Step Simplification" (formula "23"))
                                    (rule "nnf_imp2or" (formula "8") (term "1,0,0,0"))
                                    (rule "nnf_notAnd" (formula "8") (term "0,0,0,0"))
                                     (builtin "One Step Simplification" (formula "8"))
                                    (rule "nnf_notAnd" (formula "25") (term "0,0,0,0"))
                                     (builtin "One Step Simplification" (formula "25"))
                                    (rule "nnf_imp2or" (formula "30") (term "1,0,0,0"))
                                    (rule "nnf_notAnd" (formula "30") (term "0,0,0,0"))
                                     (builtin "One Step Simplification" (formula "30"))
                                    (rule "nnf_imp2or" (formula "10") (term "1,0,0,0"))
                                    (rule "nnf_notAnd" (formula "10") (term "0,0,0,0"))
                                     (builtin "One Step Simplification" (formula "10"))
                                    (rule "nnf_imp2or" (formula "19") (term "1,0,0,0"))
                                    (rule "nnf_notAnd" (formula "19") (term "0,0,0,0"))
                                     (builtin "One Step Simplification" (formula "19"))
                                    (rule "nnf_notAnd" (formula "11") (term "0,0,0,0"))
                                     (builtin "One Step Simplification" (formula "11"))
                                    (rule "nnf_imp2or" (formula "2") (term "1,0,0,0"))
                                    (rule "nnf_imp2or" (formula "20") (term "1,0,0,0"))
                                    (rule "nnf_notOr" (formula "2") (term "0,0,0,0,0"))
                                    (rule "nnf_notOr" (formula "7") (term "1,0,0,0,0"))
                                    (rule "nnf_notOr" (formula "20") (term "1,0,0,0,0"))
                                    (rule "nnf_imp2or" (formula "22") (term "1,0,0,0"))
                                    (rule "nnf_notOr" (formula "22") (term "1,0,0,0,0"))
                                    (rule "nnf_notAnd" (formula "57") (term "1,1,0"))
                                     (builtin "One Step Simplification" (formula "57"))
                                    (rule "nnf_notOr" (formula "5") (term "1,0,0,0,0"))
                                    (rule "nnf_notOr" (formula "6") (term "1,0,0,0,0"))
                                    (rule "nnf_imp2or" (formula "24") (term "1,0,0,0"))
                                    (rule "nnf_imp2or" (formula "9") (term "1,0,0,0"))
                                    (rule "nnf_imp2or" (formula "31") (term "1,0,0,0"))
                                    (rule "nnf_notOr" (formula "24") (term "1,0,0,0,0"))
                                    (rule "nnf_notOr" (formula "4") (term "1,0,0,0,0"))
                                    (rule "nnf_notOr" (formula "9") (term "1,0,0,0,0"))
                                    (rule "nnf_imp2or" (formula "21") (term "1,0,0,0"))
                                    (rule "nnf_notOr" (formula "27") (term "1,0,0,0,0"))
                                    (rule "nnf_notOr" (formula "31") (term "1,0,0,0,0"))
                                    (rule "nnf_notOr" (formula "3") (term "0,0,0,0,0"))
                                    (rule "nnf_notOr" (formula "21") (term "1,0,0,0,0"))
                                    (rule "nnf_notOr" (formula "26") (term "1,0,0,0,0"))
                                    (rule "nnf_imp2or" (formula "25") (term "1,0,0,0"))
                                    (rule "nnf_notOr" (formula "28") (term "1,0,0,0,0"))
                                    (rule "nnf_notOr" (formula "23") (term "1,0,0,0,0"))
                                    (rule "nnf_notOr" (formula "8") (term "1,0,0,0,0"))
                                    (rule "nnf_notAnd" (formula "57") (term "0,1,0"))
                                    (rule "inEqSimp_notGeq" (formula "57") (term "1,0,1,0"))
                                    (rule "mul_literals" (formula "57") (term "1,0,0,1,0,1,0"))
                                    (rule "add_zero_right" (formula "57") (term "0,0,1,0,1,0"))
                                    (rule "inEqSimp_sepPosMonomial0" (formula "57") (term "1,0,1,0"))
                                    (rule "mul_literals" (formula "57") (term "1,1,0,1,0"))
                                    (rule "nnf_notOr" (formula "25") (term "1,0,0,0,0"))
                                    (rule "nnf_imp2or" (formula "11") (term "1,0,0,0"))
                                    (rule "nnf_notOr" (formula "30") (term "1,0,0,0,0"))
                                    (rule "nnf_notOr" (formula "10") (term "1,0,0,0,0"))
                                    (rule "nnf_notOr" (formula "19") (term "1,0,0,0,0"))
                                    (rule "nnf_notOr" (formula "11") (term "1,0,0,0,0"))
                                    (rule "nnf_notOr" (formula "2") (term "0,0,0,0,0,0"))
                                    (rule "nnf_notOr" (formula "20") (term "0,1,0,0,0,0"))
                                    (rule "nnf_notAnd" (formula "57") (term "0,0,1,0"))
                                    (rule "inEqSimp_notLeq" (formula "57") (term "1,0,0,1,0"))
                                    (rule "polySimp_rightDist" (formula "57") (term "1,0,0,1,0,0,1,0"))
                                    (rule "mul_literals" (formula "57") (term "0,1,0,0,1,0,0,1,0"))
                                    (rule "polySimp_addAssoc" (formula "57") (term "0,0,1,0,0,1,0"))
                                    (rule "add_literals" (formula "57") (term "0,0,0,1,0,0,1,0"))
                                    (rule "add_zero_left" (formula "57") (term "0,0,1,0,0,1,0"))
                                    (rule "inEqSimp_sepPosMonomial1" (formula "57") (term "1,0,0,1,0"))
                                    (rule "polySimp_mulLiterals" (formula "57") (term "1,1,0,0,1,0"))
                                    (rule "polySimp_elimOne" (formula "57") (term "1,1,0,0,1,0"))
                                    (rule "nnf_notOr" (formula "24") (term "0,1,0,0,0,0"))
                                    (rule "nnf_notOr" (formula "9") (term "0,1,0,0,0,0"))
                                    (rule "nnf_notOr" (formula "3") (term "0,0,0,0,0,0"))
                                    (rule "nnf_notOr" (formula "23") (term "0,1,0,0,0,0"))
                                    (rule "nnf_notOr" (formula "8") (term "0,1,0,0,0,0"))
                                    (rule "nnf_notOr" (formula "19") (term "0,1,0,0,0,0"))
                                    (rule "nnf_notOr" (formula "2") (term "0,0,0,0,0,0,0"))
                                    (rule "nnf_notOr" (formula "20") (term "0,0,1,0,0,0,0"))
                                    (rule "nnf_notOr" (formula "9") (term "0,0,1,0,0,0,0"))
                                    (rule "nnf_notOr" (formula "3") (term "0,0,0,0,0,0,0"))
                                    (rule "nnf_notOr" (formula "8") (term "0,0,1,0,0,0,0"))
                                    (rule "nnf_notOr" (formula "19") (term "0,0,1,0,0,0,0"))
                                    (rule "nnf_notOr" (formula "2") (term "1,0,0,0,0,0,0,0"))
                                    (rule "nnf_notOr" (formula "9") (term "0,0,0,1,0,0,0,0"))
                                    (rule "nnf_notOr" (formula "3") (term "1,0,0,0,0,0,0,0"))
                                    (rule "nnf_notOr" (formula "8") (term "0,0,0,1,0,0,0,0"))
                                    (rule "nnf_notOr" (formula "2") (term "0,1,0,0,0,0,0,0,0"))
                                    (rule "nnf_notOr" (formula "3") (term "0,1,0,0,0,0,0,0,0"))
                                    (rule "commute_or_2" (formula "55") (term "0"))
                                    (rule "commute_or_2" (formula "44") (term "0"))
                                    (rule "cnf_rightDist" (formula "29") (term "0,0"))
                                    (rule "commute_or_2" (formula "36") (term "0"))
                                    (rule "commute_or" (formula "7") (term "1,0,0,0"))
                                    (rule "commute_or" (formula "5") (term "1,0,0,0"))
                                    (rule "distr_forallAnd" (formula "29") (term "0"))
                                    (rule "commute_or" (formula "6") (term "1,0,0,0"))
                                    (rule "ifthenelse_split" (formula "54") (term "0"))
                                    (branch "result_46 = ls TRUE"
                                       (rule "applyEqReverse" (formula "53") (term "0,0") (ifseqformula "55"))
                                       (rule "applyEqReverse" (formula "63") (term "0,0") (ifseqformula "55"))
                                       (rule "applyEqReverse" (formula "1") (term "2,0") (ifseqformula "55"))
                                       (rule "applyEqReverse" (formula "56") (term "0,0,0,1,0,0") (ifseqformula "55"))
                                       (rule "hideAuxiliaryEq" (formula "55"))
                                       (rule "replace_known_left" (formula "1") (term "0,0") (ifseqformula "54"))
                                        (builtin "One Step Simplification" (formula "1"))
                                       (rule "applyEqReverse" (formula "82") (term "0,0") (ifseqformula "1"))
                                       (rule "hideAuxiliaryEq" (formula "1"))
                                       (rule "applyEq" (formula "41") (term "0,0") (ifseqformula "53"))
                                       (rule "applyEq" (formula "55") (term "1,0,0") (ifseqformula "53"))
                                       (rule "applyEq" (formula "65") (term "1,0,0") (ifseqformula "53"))
                                       (rule "applyEq" (formula "66") (term "1,1") (ifseqformula "53"))
                                       (rule "lenOfSeqSubEQ" (formula "52") (term "0") (ifseqformula "66"))
                                       (rule "polySimp_elimSub" (formula "52") (term "1,0"))
                                       (rule "mul_literals" (formula "52") (term "1,1,0"))
                                       (rule "add_zero_right" (formula "52") (term "1,0"))
                                       (rule "lenOfSeqSubEQ" (formula "55") (term "0") (ifseqformula "66"))
                                       (rule "polySimp_elimSub" (formula "55") (term "1,0"))
                                       (rule "mul_literals" (formula "55") (term "1,1,0"))
                                       (rule "add_zero_right" (formula "55") (term "1,0"))
                                       (rule "inEqSimp_ltToLeq" (formula "52") (term "0,0"))
                                       (rule "add_zero_right" (formula "52") (term "0,0,0"))
                                       (rule "polySimp_mulComm0" (formula "52") (term "1,0,0,0"))
                                       (rule "inEqSimp_ltToLeq" (formula "55") (term "0,0"))
                                       (rule "add_zero_right" (formula "55") (term "0,0,0"))
                                       (rule "polySimp_mulComm0" (formula "55") (term "1,0,0,0"))
                                       (rule "applyEq" (formula "56") (term "1,0,0,0,0,0,0,1,0") (ifseqformula "53"))
                                       (rule "applyEq" (formula "56") (term "1,0,1,1,0,0,1,0") (ifseqformula "53"))
                                       (rule "lenOfSeqSubEQ" (formula "56") (term "1,1,0,0,1,0") (ifseqformula "66"))
                                       (rule "polySimp_elimSub" (formula "56") (term "1,1,1,0,0,1,0"))
                                       (rule "mul_literals" (formula "56") (term "1,1,1,1,0,0,1,0"))
                                       (rule "add_zero_right" (formula "56") (term "1,1,1,0,0,1,0"))
                                       (rule "inEqSimp_ltToLeq" (formula "56") (term "0,1,1,0,0,1,0"))
                                       (rule "add_zero_right" (formula "56") (term "0,0,1,1,0,0,1,0"))
                                       (rule "polySimp_mulComm0" (formula "56") (term "1,0,0,1,1,0,0,1,0"))
                                       (rule "applyEq" (formula "56") (term "1,0,1,1,0,0,1,1,0") (ifseqformula "53"))
                                       (rule "lenOfSeqSubEQ" (formula "56") (term "1,1,0,0,1,1,0") (ifseqformula "66"))
                                       (rule "polySimp_elimSub" (formula "56") (term "1,1,1,0,0,1,1,0"))
                                       (rule "mul_literals" (formula "56") (term "1,1,1,1,0,0,1,1,0"))
                                       (rule "add_zero_right" (formula "56") (term "1,1,1,0,0,1,1,0"))
                                       (rule "inEqSimp_ltToLeq" (formula "56") (term "0,1,1,0,0,1,1,0"))
                                       (rule "add_zero_right" (formula "56") (term "0,0,1,1,0,0,1,1,0"))
                                       (rule "polySimp_mulComm0" (formula "56") (term "1,0,0,1,1,0,0,1,1,0"))
                                       (rule "applyEq" (formula "56") (term "1,0,1,0,0,0") (ifseqformula "53"))
                                       (rule "lenOfSeqSubEQ" (formula "56") (term "1,0,0,0") (ifseqformula "66"))
                                       (rule "polySimp_elimSub" (formula "56") (term "1,1,0,0,0"))
                                       (rule "mul_literals" (formula "56") (term "1,1,1,0,0,0"))
                                       (rule "add_zero_right" (formula "56") (term "1,1,0,0,0"))
                                       (rule "inEqSimp_ltToLeq" (formula "56") (term "0,1,0,0,0"))
                                       (rule "add_zero_right" (formula "56") (term "0,0,1,0,0,0"))
                                       (rule "polySimp_mulComm0" (formula "56") (term "1,0,0,1,0,0,0"))
                                       (rule "applyEq" (formula "63") (term "0,1,0") (ifseqformula "53"))
                                       (rule "applyEq" (formula "69") (term "1,0") (ifseqformula "53"))
                                       (rule "close" (formula "69") (ifseqformula "33"))
                                    )
                                    (branch "result_46 = ls FALSE"
                                       (rule "applyEqReverse" (formula "62") (term "0,0") (ifseqformula "54"))
                                       (rule "applyEqReverse" (formula "53") (term "0,0") (ifseqformula "54"))
                                       (rule "applyEqReverse" (formula "1") (term "2,0") (ifseqformula "53"))
                                       (rule "applyEqReverse" (formula "54") (term "0,0,0,1,0,0") (ifseqformula "53"))
                                       (rule "hideAuxiliaryEq" (formula "53"))
                                       (rule "replace_known_right" (formula "1") (term "0,0") (ifseqformula "66"))
                                        (builtin "One Step Simplification" (formula "1"))
                                       (rule "applyEqReverse" (formula "80") (term "0,0") (ifseqformula "1"))
                                       (rule "close" (formula "80") (ifseqformula "49"))
                                    )
                                 )
                              )
                              (branch "Case 2"
                                 (rule "allRight" (formula "85") (inst "sk=i_1"))
                                 (rule "impRight" (formula "85"))
                                 (rule "andLeft" (formula "1"))
                                 (rule "selectOfAnonEQ" (formula "2") (term "0,1") (ifseqformula "68"))
                                  (builtin "One Step Simplification" (formula "2") (ifInst ""  (formula "86")))
                                 (rule "elementOfSingleton" (formula "2") (term "0,0,0,1"))
                                  (builtin "One Step Simplification" (formula "2"))
                                 (rule "selectOfAnonEQ" (formula "87") (term "0,0,0") (ifseqformula "68"))
                                  (builtin "One Step Simplification" (formula "87") (ifInst ""  (formula "86")))
                                 (rule "elementOfSingleton" (formula "87") (term "0,0,0,0,0"))
                                  (builtin "One Step Simplification" (formula "87"))
                                 (rule "ifthenelse_split" (formula "87") (term "0,0,0"))
                                 (branch "ls = result_46 ∨ ¬ls.<created>@heapAfter_get = TRUE TRUE"
                                    (rule "ifthenelse_split" (formula "3") (term "0,1"))
                                    (branch "ls = result_46 ∨ ¬ls.<created>@heapAfter_get = TRUE TRUE"
                                       (rule "selectCreatedOfAnonEQ" (formula "1") (term "0,0,1") (ifseqformula "64"))
                                        (builtin "One Step Simplification" (formula "1"))
                                       (rule "selectOfAnonEQ" (formula "1") (term "0,0,0,0,1") (ifseqformula "47"))
                                        (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "87")))
                                       (rule "ifthenelse_negated" (formula "1") (term "0,0,0,0,1"))
                                       (rule "ifthenelse_split" (formula "1") (term "0,0,0,0,1"))
                                       (branch "ls.<created>@heapAfter_asList = TRUE TRUE"
                                          (rule "selectCreatedOfAnonEQ" (formula "1") (term "0") (ifseqformula "41"))
                                           (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "36")))
                                          (rule "selectCreatedOfAnonEQ" (formula "2") (term "0,0,0,0,1") (ifseqformula "41"))
                                           (builtin "One Step Simplification" (formula "2") (ifInst ""  (formula "36")))
                                          (rule "true_left" (formula "1"))
                                          (rule "notRight" (formula "88"))
                                          (rule "eqSymm" (formula "2"))
                                          (rule "replace_known_left" (formula "58") (term "0,0") (ifseqformula "2"))
                                           (builtin "One Step Simplification" (formula "58"))
                                          (rule "applyEqReverse" (formula "59") (term "0,0,0,1,0") (ifseqformula "58"))
                                          (rule "applyEqReverse" (formula "57") (term "0,0") (ifseqformula "58"))
                                          (rule "applyEqReverse" (formula "68") (term "0,0") (ifseqformula "58"))
                                          (rule "hideAuxiliaryEq" (formula "58"))
                                          (rule "inEqSimp_ltToLeq" (formula "60") (term "1,0,0,0,1,0"))
                                          (rule "polySimp_mulComm0" (formula "60") (term "1,0,0,1,0,0,0,1,0"))
                                          (rule "inEqSimp_ltToLeq" (formula "4"))
                                          (rule "polySimp_mulComm0" (formula "4") (term "1,0,0"))
                                          (rule "polySimp_addComm1" (formula "4") (term "0"))
                                          (rule "inEqSimp_ltToLeq" (formula "19"))
                                          (rule "polySimp_mulComm0" (formula "19") (term "1,0,0"))
                                          (rule "polySimp_addComm1" (formula "19") (term "0"))
                                          (rule "inEqSimp_ltToLeq" (formula "58") (term "0,0,0"))
                                          (rule "polySimp_mulComm0" (formula "58") (term "1,0,0,0,0,0"))
                                          (rule "inEqSimp_ltToLeq" (formula "60") (term "0,0,0,1,0,1,0"))
                                          (rule "polySimp_mulComm0" (formula "60") (term "1,0,0,0,0,0,1,0,1,0"))
                                          (rule "inEqSimp_ltToLeq" (formula "38") (term "0,0,0"))
                                          (rule "polySimp_mulComm0" (formula "38") (term "1,0,0,0,0,0"))
                                          (rule "inEqSimp_ltToLeq" (formula "73"))
                                          (rule "polySimp_rightDist" (formula "73") (term "1,0,0"))
                                          (rule "mul_literals" (formula "73") (term "0,1,0,0"))
                                          (rule "polySimp_addAssoc" (formula "73") (term "0,0"))
                                          (rule "add_literals" (formula "73") (term "0,0,0"))
                                          (rule "add_zero_left" (formula "73") (term "0,0"))
                                          (rule "polySimp_pullOutFactor2" (formula "73") (term "0"))
                                          (rule "add_literals" (formula "73") (term "1,0"))
                                          (rule "times_zero_1" (formula "73") (term "0"))
                                          (rule "leq_literals" (formula "73"))
                                          (rule "true_left" (formula "73"))
                                          (rule "inEqSimp_ltToLeq" (formula "46") (term "0,0,0"))
                                          (rule "polySimp_mulComm0" (formula "46") (term "1,0,0,0,0,0"))
                                          (rule "inEqSimp_ltToLeq" (formula "60") (term "0,0,0"))
                                          (rule "polySimp_mulComm0" (formula "60") (term "1,0,0,0,0,0"))
                                          (rule "applyEq" (formula "60") (term "1,0,0,1,0,0,0,0,0,1,0,1,0") (ifseqformula "2"))
                                          (rule "applyEq" (formula "76") (term "0") (ifseqformula "2"))
                                          (rule "applyEq" (formula "44") (term "0,0") (ifseqformula "2"))
                                          (rule "applyEq" (formula "45") (term "1,0,0") (ifseqformula "2"))
                                          (rule "applyEq" (formula "71") (term "1,0,1,1") (ifseqformula "2"))
                                          (rule "applyEq" (formula "73") (term "1,0,0") (ifseqformula "2"))
                                          (rule "applyEq" (formula "60") (term "1,0,0,1,0,0,1,0,0,0,1,0") (ifseqformula "2"))
                                          (rule "applyEq" (formula "46") (term "1,0,0,0,1,0") (ifseqformula "2"))
                                          (rule "applyEq" (formula "43") (term "1,0") (ifseqformula "2"))
                                          (rule "applyEq" (formula "71") (term "1,0,0") (ifseqformula "2"))
                                          (rule "applyEq" (formula "46") (term "1,0,0,1,0,0,0,0,0") (ifseqformula "2"))
                                          (rule "applyEq" (formula "60") (term "1,0,0,1,0,0,0,0,0") (ifseqformula "2"))
                                          (rule "applyEq" (formula "75") (term "1,0") (ifseqformula "2"))
                                          (rule "close" (formula "75") (ifseqformula "36"))
                                       )
                                       (branch "ls.<created>@heapAfter_asList = TRUE FALSE"
                                          (rule "selectCreatedOfAnonEQ" (formula "75") (term "0") (ifseqformula "40"))
                                           (builtin "One Step Simplification" (formula "75") (ifInst ""  (formula "35")))
                                          (rule "closeTrue" (formula "75"))
                                       )
                                    )
                                    (branch "ls = result_46 ∨ ¬ls.<created>@heapAfter_get = TRUE FALSE"
                                       (rule "close" (formula "75") (ifseqformula "1"))
                                    )
                                 )
                                 (branch "ls = result_46 ∨ ¬ls.<created>@heapAfter_get = TRUE FALSE"
                                    (rule "orRight" (formula "87"))
                                    (rule "ifthenelse_split" (formula "2") (term "0,1"))
                                    (branch "ls = result_46 ∨ ¬ls.<created>@heapAfter_get = TRUE TRUE"
                                       (rule "selectOfAnonEQ" (formula "89") (term "0,0") (ifseqformula "64"))
                                        (builtin "One Step Simplification" (formula "89") (ifInst ""  (formula "87")))
                                       (rule "ifthenelse_negated" (formula "89") (term "0,0"))
                                       (rule "selectCreatedOfAnon" (formula "89") (term "1,0,0"))
                                       (rule "ifthenelse_split" (formula "89") (term "0,0"))
                                       (branch " ls.<created>@heapAfter_size = TRUE ∨ ls.<created>@anon_heap_LOOP«anonHeapFunction» = TRUE TRUE"
                                           (builtin "One Step Simplification" (formula "90") (ifInst ""  (formula "1")))
                                          (rule "selectOfAnonEQ" (formula "91") (term "0,0,0") (ifseqformula "65"))
                                           (builtin "One Step Simplification" (formula "91") (ifInst ""  (formula "88")) (ifInst ""  (formula "1")))
                                          (rule "selectOfAnon" (formula "91") (term "0,0,0"))
                                           (builtin "One Step Simplification" (formula "91") (ifInst ""  (formula "88")))
                                          (rule "elementOfSingleton" (formula "91") (term "0,0,0,0,0"))
                                           (builtin "One Step Simplification" (formula "91") (ifInst ""  (formula "89")))
                                          (rule "ifthenelse_negated" (formula "91") (term "0,0,0"))
                                          (rule "ifthenelse_split" (formula "91") (term "0,0,0"))
                                          (branch "ls.<created>@heapAfter_size = TRUE TRUE"
                                             (rule "selectOfAnonEQ" (formula "2") (term "0,0") (ifseqformula "49"))
                                              (builtin "One Step Simplification" (formula "2") (ifInst ""  (formula "89")))
                                             (rule "ifthenelse_negated" (formula "2") (term "0,0"))
                                             (rule "ifthenelse_split" (formula "2") (term "0,0"))
                                             (branch "ls.<created>@heapAfter_asList = TRUE TRUE"
                                                (rule "selectCreatedOfAnonEQ" (formula "5") (term "0,0,1") (ifseqformula "67"))
                                                 (builtin "One Step Simplification" (formula "5") (ifInst ""  (formula "91")) (ifInst ""  (formula "1")))
                                                (rule "closeFalse" (formula "5"))
                                             )
                                             (branch "ls.<created>@heapAfter_asList = TRUE FALSE"
                                                (rule "selectCreatedOfAnonEQ" (formula "4") (term "0,0,1") (ifseqformula "66"))
                                                 (builtin "One Step Simplification" (formula "4") (ifInst ""  (formula "91")) (ifInst ""  (formula "1")))
                                                (rule "closeFalse" (formula "4"))
                                             )
                                          )
                                          (branch "ls.<created>@heapAfter_size = TRUE FALSE"
                                             (rule "selectCreatedOfAnonEQ" (formula "3") (term "0,0,1") (ifseqformula "65"))
                                              (builtin "One Step Simplification" (formula "3") (ifInst ""  (formula "89")) (ifInst ""  (formula "1")))
                                             (rule "closeFalse" (formula "3"))
                                          )
                                       )
                                       (branch " ls.<created>@heapAfter_size = TRUE ∨ ls.<created>@anon_heap_LOOP«anonHeapFunction» = TRUE FALSE"
                                          (rule "orRight" (formula "89"))
                                          (rule "selectOfAnonEQ" (formula "92") (term "0,0,0") (ifseqformula "64"))
                                           (builtin "One Step Simplification" (formula "92") (ifInst ""  (formula "87")) (ifInst ""  (formula "89")) (ifInst ""  (formula "90")))
                                          (rule "selectCreatedOfAnonEQ" (formula "2") (term "0,0,1") (ifseqformula "64"))
                                           (builtin "One Step Simplification" (formula "2") (ifInst ""  (formula "88")) (ifInst ""  (formula "89")) (ifInst ""  (formula "90")) (ifInst ""  (formula "91")))
                                          (rule "closeFalse" (formula "2"))
                                       )
                                    )
                                    (branch "ls = result_46 ∨ ¬ls.<created>@heapAfter_get = TRUE FALSE"
                                       (rule "orRight" (formula "74"))
                                       (rule "selectOfAnonEQ" (formula "88") (term "0,0") (ifseqformula "63"))
                                        (builtin "One Step Simplification" (formula "88") (ifInst ""  (formula "86")))
                                       (rule "ifthenelse_negated" (formula "88") (term "0,0"))
                                       (rule "selectCreatedOfAnon" (formula "88") (term "1,0,0"))
                                       (rule "selectOfAnonEQ" (formula "89") (term "0,0,0") (ifseqformula "63"))
                                        (builtin "One Step Simplification" (formula "89") (ifInst ""  (formula "86")))
                                       (rule "ifthenelse_negated" (formula "89") (term "0,0,0"))
                                       (rule "ifthenelse_split" (formula "89") (term "0,0,0"))
                                       (branch " ls.<created>@heapAfter_size = TRUE ∨ ls.<created>@anon_heap_LOOP«anonHeapFunction» = TRUE TRUE"
                                          (rule "selectOfAnon" (formula "90") (term "0,0,0"))
                                           (builtin "One Step Simplification" (formula "90") (ifInst ""  (formula "87")))
                                          (rule "elementOfSingleton" (formula "90") (term "0,0,0,0,0"))
                                           (builtin "One Step Simplification" (formula "90") (ifInst ""  (formula "88")))
                                          (rule "ifthenelse_negated" (formula "90") (term "0,0,0"))
                                          (rule "ifthenelse_split" (formula "90") (term "0,0,0"))
                                          (branch "ls.<created>@heapAfter_size = TRUE TRUE"
                                             (rule "selectOfAnonEQ" (formula "2") (term "0,0") (ifseqformula "48"))
                                              (builtin "One Step Simplification" (formula "2") (ifInst ""  (formula "88")))
                                             (rule "ifthenelse_negated" (formula "2") (term "0,0"))
                                             (rule "ifthenelse_split" (formula "2") (term "0,0"))
                                             (branch "ls.<created>@heapAfter_asList = TRUE TRUE"
                                                (rule "selectCreatedOfAnonEQ" (formula "1") (term "0") (ifseqformula "49"))
                                                 (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "2")))
                                                (rule "selectOfAnonEQ" (formula "92") (term "0,0,0") (ifseqformula "49"))
                                                 (builtin "One Step Simplification" (formula "92") (ifInst ""  (formula "89")) (ifInst ""  (formula "2")))
                                                (rule "selectCreatedOfAnonEQ" (formula "2") (term "0") (ifseqformula "42"))
                                                 (builtin "One Step Simplification" (formula "2") (ifInst ""  (formula "37")))
                                                (rule "selectOfAnonEQ" (formula "90") (term "0,0,0,0,0") (ifseqformula "48"))
                                                 (builtin "One Step Simplification" (formula "90") (ifInst ""  (formula "88")))
                                                (rule "ifthenelse_negated" (formula "90") (term "0,0,0,0,0"))
                                                (rule "ifthenelse_split" (formula "90") (term "1,0,0"))
                                                (branch "ls.<created>@heapAfter_size = TRUE TRUE"
                                                    (builtin "One Step Simplification" (formula "91"))
                                                   (rule "ifthenelse_split" (formula "91") (term "0,0,0,0"))
                                                   (branch "ls.<created>@heapAfter_asList = TRUE TRUE"
                                                      (rule "selectCreatedOfAnonEQ" (formula "2") (term "0") (ifseqformula "50"))
                                                       (builtin "One Step Simplification" (formula "2") (ifInst ""  (formula "1")))
                                                      (rule "selectCreatedOfAnonEQ" (formula "91") (term "0,0,0,0") (ifseqformula "42"))
                                                       (builtin "One Step Simplification" (formula "91") (ifInst ""  (formula "37")))
                                                      (rule "selectOfAnonEQ" (formula "1") (term "0") (ifseqformula "42"))
                                                       (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "89")) (ifInst ""  (formula "37")) (ifInst ""  (formula "37")))
                                                      (rule "selectOfAnonEQ" (formula "4") (term "0,1") (ifseqformula "65"))
                                                       (builtin "One Step Simplification" (formula "4") (ifInst ""  (formula "88")))
                                                      (rule "ifthenelse_negated" (formula "4") (term "0,1"))
                                                      (rule "selectCreatedOfAnonEQ" (formula "2") (term "0,0") (ifseqformula "41"))
                                                       (builtin "One Step Simplification" (formula "2") (ifInst ""  (formula "36")))
                                                      (rule "ifthenelse_split" (formula "3") (term "0,1"))
                                                      (branch " ls.<created>@heapAfter_size = TRUE ∨ ls.<created>@anon_heap_LOOP«anonHeapFunction» = TRUE TRUE"
                                                         (rule "selectOfAnon" (formula "4") (term "0,1"))
                                                          (builtin "One Step Simplification" (formula "4") (ifInst ""  (formula "88")))
                                                         (rule "elementOfSingleton" (formula "4") (term "0,0,0,1"))
                                                          (builtin "One Step Simplification" (formula "4") (ifInst ""  (formula "89")))
                                                         (rule "ifthenelse_negated" (formula "4") (term "0,1"))
                                                         (rule "ifthenelse_split" (formula "4") (term "0,1"))
                                                         (branch "ls.<created>@heapAfter_size = TRUE TRUE"
                                                            (rule "selectOfAnonEQ" (formula "3") (term "0,0") (ifseqformula "49"))
                                                             (builtin "One Step Simplification" (formula "3") (ifInst ""  (formula "89")))
                                                            (rule "ifthenelse_negated" (formula "3") (term "0,0"))
                                                            (rule "ifthenelse_split" (formula "3") (term "0,0"))
                                                            (branch "ls.<created>@heapAfter_asList = TRUE TRUE"
                                                               (rule "selectOfAnonEQ" (formula "6") (term "0,1") (ifseqformula "50"))
                                                                (builtin "One Step Simplification" (formula "6") (ifInst ""  (formula "90")) (ifInst ""  (formula "3")))
                                                               (rule "selectCreatedOfAnonEQ" (formula "5") (term "0") (ifseqformula "50"))
                                                                (builtin "One Step Simplification" (formula "5") (ifInst ""  (formula "3")))
                                                               (rule "selectOfAnonEQ" (formula "5") (term "0,1") (ifseqformula "42"))
                                                                (builtin "One Step Simplification" (formula "5") (ifInst ""  (formula "89")) (ifInst ""  (formula "37")))
                                                               (rule "selectCreatedOfAnonEQ" (formula "4") (term "0,0") (ifseqformula "42"))
                                                                (builtin "One Step Simplification" (formula "4") (ifInst ""  (formula "37")))
                                                               (rule "selectCreatedOfAnonEQ" (formula "3") (term "0") (ifseqformula "41"))
                                                                (builtin "One Step Simplification" (formula "3") (ifInst ""  (formula "36")))
                                                               (rule "selectOfAnonEQ" (formula "90") (term "0,0,0") (ifseqformula "40"))
                                                                (builtin "One Step Simplification" (formula "90") (ifInst ""  (formula "87")) (ifInst ""  (formula "35")))
                                                               (rule "true_left" (formula "1"))
                                                               (rule "false_right" (formula "88"))
                                                               (rule "notRight" (formula "88"))
                                                               (rule "eqSymm" (formula "88"))
                                                               (rule "replace_known_right" (formula "57") (term "0,0") (ifseqformula "88"))
                                                                (builtin "One Step Simplification" (formula "57"))
                                                               (rule "applyEqReverse" (formula "58") (term "0,0,0,1,0") (ifseqformula "57"))
                                                               (rule "applyEqReverse" (formula "56") (term "0,0") (ifseqformula "57"))
                                                               (rule "applyEqReverse" (formula "65") (term "0,0") (ifseqformula "56"))
                                                               (rule "hideAuxiliaryEq" (formula "56"))
                                                               (rule "inEqSimp_ltToLeq" (formula "3"))
                                                               (rule "polySimp_mulComm0" (formula "3") (term "1,0,0"))
                                                               (rule "polySimp_addComm1" (formula "3") (term "0"))
                                                               (rule "inEqSimp_ltToLeq" (formula "45") (term "0,0,0"))
                                                               (rule "polySimp_mulComm0" (formula "45") (term "1,0,0,0,0,0"))
                                                               (rule "inEqSimp_ltToLeq" (formula "57") (term "1,0,0,0,1,0"))
                                                               (rule "polySimp_mulComm0" (formula "57") (term "1,0,0,1,0,0,0,1,0"))
                                                               (rule "inEqSimp_ltToLeq" (formula "18"))
                                                               (rule "polySimp_mulComm0" (formula "18") (term "1,0,0"))
                                                               (rule "polySimp_addComm1" (formula "18") (term "0"))
                                                               (rule "inEqSimp_ltToLeq" (formula "57") (term "0,0,0"))
                                                               (rule "polySimp_mulComm0" (formula "57") (term "1,0,0,0,0,0"))
                                                               (rule "inEqSimp_ltToLeq" (formula "70"))
                                                               (rule "polySimp_rightDist" (formula "70") (term "1,0,0"))
                                                               (rule "mul_literals" (formula "70") (term "0,1,0,0"))
                                                               (rule "polySimp_addAssoc" (formula "70") (term "0,0"))
                                                               (rule "add_literals" (formula "70") (term "0,0,0"))
                                                               (rule "add_zero_left" (formula "70") (term "0,0"))
                                                               (rule "polySimp_pullOutFactor2" (formula "70") (term "0"))
                                                               (rule "add_literals" (formula "70") (term "1,0"))
                                                               (rule "times_zero_1" (formula "70") (term "0"))
                                                               (rule "leq_literals" (formula "70"))
                                                               (rule "true_left" (formula "70"))
                                                               (rule "inEqSimp_ltToLeq" (formula "37") (term "0,0,0"))
                                                               (rule "polySimp_mulComm0" (formula "37") (term "1,0,0,0,0,0"))
                                                               (rule "inEqSimp_ltToLeq" (formula "57") (term "0,0,0,1,0,1,0"))
                                                               (rule "polySimp_mulComm0" (formula "57") (term "1,0,0,0,0,0,1,0,1,0"))
                                                               (rule "applyEq" (formula "3") (term "0,1,0") (ifseqformula "51"))
                                                               (rule "inEqSimp_sepPosMonomial0" (formula "45") (term "0,0,0"))
                                                               (rule "polySimp_mulComm0" (formula "45") (term "1,0,0,0"))
                                                               (rule "polySimp_rightDist" (formula "45") (term "1,0,0,0"))
                                                               (rule "mul_literals" (formula "45") (term "0,1,0,0,0"))
                                                               (rule "polySimp_mulLiterals" (formula "45") (term "1,1,0,0,0"))
                                                               (rule "polySimp_elimOne" (formula "45") (term "1,1,0,0,0"))
                                                               (rule "inEqSimp_sepPosMonomial0" (formula "57") (term "1,0,0,0,1,0"))
                                                               (rule "polySimp_mulComm0" (formula "57") (term "1,1,0,0,0,1,0"))
                                                               (rule "polySimp_rightDist" (formula "57") (term "1,1,0,0,0,1,0"))
                                                               (rule "mul_literals" (formula "57") (term "0,1,1,0,0,0,1,0"))
                                                               (rule "polySimp_mulLiterals" (formula "57") (term "1,1,1,0,0,0,1,0"))
                                                               (rule "polySimp_elimOne" (formula "57") (term "1,1,1,0,0,0,1,0"))
                                                               (rule "inEqSimp_sepNegMonomial0" (formula "18"))
                                                               (rule "polySimp_mulLiterals" (formula "18") (term "0"))
                                                               (rule "polySimp_elimOne" (formula "18") (term "0"))
                                                               (rule "inEqSimp_sepPosMonomial0" (formula "57") (term "0,0,0"))
                                                               (rule "polySimp_mulComm0" (formula "57") (term "1,0,0,0"))
                                                               (rule "polySimp_rightDist" (formula "57") (term "1,0,0,0"))
                                                               (rule "polySimp_mulLiterals" (formula "57") (term "1,1,0,0,0"))
                                                               (rule "mul_literals" (formula "57") (term "0,1,0,0,0"))
                                                               (rule "polySimp_elimOne" (formula "57") (term "1,1,0,0,0"))
                                                               (rule "inEqSimp_sepPosMonomial0" (formula "37") (term "0,0,0"))
                                                               (rule "polySimp_mulComm0" (formula "37") (term "1,0,0,0"))
                                                               (rule "polySimp_rightDist" (formula "37") (term "1,0,0,0"))
                                                               (rule "mul_literals" (formula "37") (term "0,1,0,0,0"))
                                                               (rule "polySimp_mulLiterals" (formula "37") (term "1,1,0,0,0"))
                                                               (rule "polySimp_elimOne" (formula "37") (term "1,1,0,0,0"))
                                                               (rule "inEqSimp_sepPosMonomial0" (formula "57") (term "0,0,0,1,0,1,0"))
                                                               (rule "polySimp_mulComm0" (formula "57") (term "1,0,0,0,1,0,1,0"))
                                                               (rule "polySimp_rightDist" (formula "57") (term "1,0,0,0,1,0,1,0"))
                                                               (rule "polySimp_mulLiterals" (formula "57") (term "1,1,0,0,0,1,0,1,0"))
                                                               (rule "mul_literals" (formula "57") (term "0,1,0,0,0,1,0,1,0"))
                                                               (rule "polySimp_elimOne" (formula "57") (term "1,1,0,0,0,1,0,1,0"))
                                                               (rule "inEqSimp_sepNegMonomial0" (formula "3"))
                                                               (rule "polySimp_mulLiterals" (formula "3") (term "0"))
                                                               (rule "polySimp_elimOne" (formula "3") (term "0"))
                                                               (rule "inEqSimp_subsumption1" (formula "49") (ifseqformula "50"))
                                                               (rule "leq_literals" (formula "49") (term "0"))
                                                                (builtin "One Step Simplification" (formula "49"))
                                                               (rule "true_left" (formula "49"))
                                                               (rule "inEqSimp_subsumption1" (formula "58") (ifseqformula "53"))
                                                               (rule "leq_literals" (formula "58") (term "0"))
                                                                (builtin "One Step Simplification" (formula "58"))
                                                               (rule "true_left" (formula "58"))
                                                               (rule "inEqSimp_subsumption1" (formula "54") (ifseqformula "18"))
                                                               (rule "inEqSimp_homoInEq0" (formula "54") (term "0"))
                                                               (rule "polySimp_pullOutFactor1b" (formula "54") (term "0,0"))
                                                               (rule "add_literals" (formula "54") (term "1,1,0,0"))
                                                               (rule "times_zero_1" (formula "54") (term "1,0,0"))
                                                               (rule "add_zero_right" (formula "54") (term "0,0"))
                                                               (rule "qeq_literals" (formula "54") (term "0"))
                                                                (builtin "One Step Simplification" (formula "54"))
                                                               (rule "true_left" (formula "54"))
                                                               (rule "inEqSimp_exactShadow3" (formula "18") (ifseqformula "48"))
                                                               (rule "polySimp_rightDist" (formula "18") (term "0,0"))
                                                               (rule "mul_literals" (formula "18") (term "0,0,0"))
                                                               (rule "polySimp_addComm1" (formula "18") (term "0"))
                                                               (rule "add_literals" (formula "18") (term "0,0"))
                                                               (rule "inEqSimp_sepNegMonomial1" (formula "18"))
                                                               (rule "polySimp_mulLiterals" (formula "18") (term "0"))
                                                               (rule "polySimp_elimOne" (formula "18") (term "0"))
                                                               (rule "inEqSimp_subsumption0" (formula "57") (ifseqformula "18"))
                                                               (rule "leq_literals" (formula "57") (term "0"))
                                                                (builtin "One Step Simplification" (formula "57"))
                                                               (rule "true_left" (formula "57"))
                                                               (rule "inEqSimp_exactShadow3" (formula "3") (ifseqformula "49"))
                                                               (rule "polySimp_rightDist" (formula "3") (term "0,0"))
                                                               (rule "mul_literals" (formula "3") (term "0,0,0"))
                                                               (rule "polySimp_addComm1" (formula "3") (term "0"))
                                                               (rule "add_literals" (formula "3") (term "0,0"))
                                                               (rule "inEqSimp_sepNegMonomial1" (formula "3"))
                                                               (rule "polySimp_mulLiterals" (formula "3") (term "0"))
                                                               (rule "polySimp_elimOne" (formula "3") (term "0"))
                                                               (rule "nnf_imp2or" (formula "32") (term "0,0"))
                                                                (builtin "One Step Simplification" (formula "32"))
                                                               (rule "nnf_imp2or" (formula "31") (term "0,0,0"))
                                                               (rule "nnf_imp2or" (formula "25") (term "0,0,0"))
                                                               (rule "nnf_imp2or" (formula "30") (term "0,0,0"))
                                                               (rule "nnf_imp2or" (formula "13") (term "0,0,0"))
                                                               (rule "nnf_imp2or" (formula "11") (term "0,0,0"))
                                                               (rule "nnf_imp2or" (formula "24") (term "0,0,0"))
                                                               (rule "nnf_imp2or" (formula "12") (term "0,0,0"))
                                                               (rule "nnf_imp2or" (formula "9") (term "0,0,0"))
                                                               (rule "nnf_imp2or" (formula "7") (term "0,0,0"))
                                                               (rule "nnf_imp2or" (formula "23") (term "0,0,0"))
                                                               (rule "nnf_imp2or" (formula "28") (term "0,0,0"))
                                                               (rule "nnf_imp2or" (formula "8") (term "0,0,0"))
                                                               (rule "nnf_imp2or" (formula "6") (term "0,0,0"))
                                                               (rule "nnf_imp2or" (formula "26") (term "0,0,0"))
                                                               (rule "nnf_imp2or" (formula "5") (term "0,0,0"))
                                                               (rule "nnf_imp2or" (formula "10") (term "0,0,0"))
                                                               (rule "nnf_imp2or" (formula "27") (term "0,0,0"))
                                                               (rule "nnf_imp2or" (formula "29") (term "0,0,0"))
                                                               (rule "nnf_imp2or" (formula "34") (term "0,0,0"))
                                                               (rule "nnf_imp2or" (formula "22") (term "0,0,0"))
                                                               (rule "nnf_imp2or" (formula "33") (term "0,0,0"))
                                                               (rule "nnf_imp2or" (formula "14") (term "0,0,0"))
                                                               (rule "nnf_imp2or" (formula "47") (term "0"))
                                                               (rule "nnf_imp2or" (formula "39") (term "0"))
                                                               (rule "nnf_imp2or" (formula "57") (term "0"))
                                                               (rule "nnf_imp2or" (formula "31") (term "1,0,0,0"))
                                                               (rule "nnf_notAnd" (formula "31") (term "0,0,0,0"))
                                                                (builtin "One Step Simplification" (formula "31"))
                                                               (rule "nnf_imp2or" (formula "25") (term "1,0,0,0"))
                                                               (rule "nnf_notAnd" (formula "25") (term "0,0,0,0"))
                                                                (builtin "One Step Simplification" (formula "25"))
                                                               (rule "nnf_notAnd" (formula "47") (term "0,0"))
                                                               (rule "inEqSimp_notLeq" (formula "47") (term "0,0,0"))
                                                               (rule "polySimp_rightDist" (formula "47") (term "1,0,0,0,0,0"))
                                                               (rule "mul_literals" (formula "47") (term "0,1,0,0,0,0,0"))
                                                               (rule "polySimp_addAssoc" (formula "47") (term "0,0,0,0,0"))
                                                               (rule "add_literals" (formula "47") (term "0,0,0,0,0,0"))
                                                               (rule "add_zero_left" (formula "47") (term "0,0,0,0,0"))
                                                               (rule "inEqSimp_sepPosMonomial1" (formula "47") (term "0,0,0"))
                                                               (rule "polySimp_mulLiterals" (formula "47") (term "1,0,0,0"))
                                                               (rule "polySimp_elimOne" (formula "47") (term "1,0,0,0"))
                                                               (rule "inEqSimp_notGeq" (formula "47") (term "1,0,0"))
                                                               (rule "mul_literals" (formula "47") (term "1,0,0,1,0,0"))
                                                               (rule "add_literals" (formula "47") (term "0,0,1,0,0"))
                                                               (rule "inEqSimp_sepPosMonomial0" (formula "47") (term "1,0,0"))
                                                               (rule "mul_literals" (formula "47") (term "1,1,0,0"))
                                                               (rule "nnf_imp2or" (formula "30") (term "1,0,0,0"))
                                                               (rule "nnf_notAnd" (formula "30") (term "0,0,0,0"))
                                                                (builtin "One Step Simplification" (formula "30"))
                                                               (rule "nnf_imp2or" (formula "13") (term "1,0,0,0"))
                                                               (rule "nnf_notAnd" (formula "13") (term "0,0,0,0"))
                                                                (builtin "One Step Simplification" (formula "13"))
                                                               (rule "nnf_notAnd" (formula "39") (term "0,0"))
                                                               (rule "inEqSimp_notGeq" (formula "39") (term "1,0,0"))
                                                               (rule "times_zero_1" (formula "39") (term "1,0,0,1,0,0"))
                                                               (rule "add_zero_right" (formula "39") (term "0,0,1,0,0"))
                                                               (rule "inEqSimp_sepPosMonomial0" (formula "39") (term "1,0,0"))
                                                               (rule "mul_literals" (formula "39") (term "1,1,0,0"))
                                                               (rule "inEqSimp_notLeq" (formula "39") (term "0,0,0"))
                                                               (rule "polySimp_rightDist" (formula "39") (term "1,0,0,0,0,0"))
                                                               (rule "mul_literals" (formula "39") (term "0,1,0,0,0,0,0"))
                                                               (rule "polySimp_addAssoc" (formula "39") (term "0,0,0,0,0"))
                                                               (rule "add_literals" (formula "39") (term "0,0,0,0,0,0"))
                                                               (rule "add_zero_left" (formula "39") (term "0,0,0,0,0"))
                                                               (rule "inEqSimp_sepPosMonomial1" (formula "39") (term "0,0,0"))
                                                               (rule "polySimp_mulLiterals" (formula "39") (term "1,0,0,0"))
                                                               (rule "polySimp_elimOne" (formula "39") (term "1,0,0,0"))
                                                               (rule "nnf_notAnd" (formula "57") (term "0,0"))
                                                               (rule "inEqSimp_notGeq" (formula "57") (term "1,0,0"))
                                                               (rule "times_zero_1" (formula "57") (term "1,0,0,1,0,0"))
                                                               (rule "add_zero_right" (formula "57") (term "0,0,1,0,0"))
                                                               (rule "inEqSimp_sepPosMonomial0" (formula "57") (term "1,0,0"))
                                                               (rule "mul_literals" (formula "57") (term "1,1,0,0"))
                                                               (rule "inEqSimp_notLeq" (formula "57") (term "0,0,0"))
                                                               (rule "polySimp_rightDist" (formula "57") (term "1,0,0,0,0,0"))
                                                               (rule "mul_literals" (formula "57") (term "0,1,0,0,0,0,0"))
                                                               (rule "polySimp_addAssoc" (formula "57") (term "0,0,0,0,0"))
                                                               (rule "add_literals" (formula "57") (term "0,0,0,0,0,0"))
                                                               (rule "add_zero_left" (formula "57") (term "0,0,0,0,0"))
                                                               (rule "inEqSimp_sepPosMonomial1" (formula "57") (term "0,0,0"))
                                                               (rule "polySimp_mulLiterals" (formula "57") (term "1,0,0,0"))
                                                               (rule "polySimp_elimOne" (formula "57") (term "1,0,0,0"))
                                                               (rule "nnf_notAnd" (formula "11") (term "0,0,0,0"))
                                                                (builtin "One Step Simplification" (formula "11"))
                                                               (rule "nnf_notOr" (formula "57") (term "1,0"))
                                                               (rule "nnf_imp2or" (formula "24") (term "1,0,0,0"))
                                                               (rule "nnf_notAnd" (formula "24") (term "0,0,0,0"))
                                                                (builtin "One Step Simplification" (formula "24"))
                                                               (rule "nnf_imp2or" (formula "12") (term "1,0,0,0"))
                                                               (rule "nnf_notAnd" (formula "12") (term "0,0,0,0"))
                                                                (builtin "One Step Simplification" (formula "12"))
                                                               (rule "nnf_imp2or" (formula "9") (term "1,0,0,0"))
                                                               (rule "nnf_notAnd" (formula "9") (term "0,0,0,0"))
                                                                (builtin "One Step Simplification" (formula "9"))
                                                               (rule "nnf_imp2or" (formula "7") (term "1,0,0,0"))
                                                               (rule "nnf_notAnd" (formula "7") (term "0,0,0,0"))
                                                                (builtin "One Step Simplification" (formula "7"))
                                                               (rule "nnf_notAnd" (formula "23") (term "0,0,0,0"))
                                                                (builtin "One Step Simplification" (formula "23"))
                                                               (rule "nnf_imp2or" (formula "28") (term "1,0,0,0"))
                                                               (rule "nnf_notAnd" (formula "28") (term "0,0,0,0"))
                                                                (builtin "One Step Simplification" (formula "28"))
                                                               (rule "nnf_notAnd" (formula "8") (term "0,0,0,0"))
                                                                (builtin "One Step Simplification" (formula "8"))
                                                               (rule "nnf_notAnd" (formula "6") (term "0,0,0,0"))
                                                                (builtin "One Step Simplification" (formula "6"))
                                                               (rule "nnf_imp2or" (formula "26") (term "1,0,0,0"))
                                                               (rule "nnf_notAnd" (formula "26") (term "0,0,0,0"))
                                                                (builtin "One Step Simplification" (formula "26"))
                                                               (rule "nnf_notAnd" (formula "5") (term "0,0,0,0"))
                                                                (builtin "One Step Simplification" (formula "5"))
                                                               (rule "nnf_imp2or" (formula "10") (term "1,0,0,0"))
                                                               (rule "nnf_notAnd" (formula "10") (term "0,0,0,0"))
                                                                (builtin "One Step Simplification" (formula "10"))
                                                               (rule "nnf_notAnd" (formula "27") (term "0,0,0,0"))
                                                                (builtin "One Step Simplification" (formula "27"))
                                                               (rule "nnf_imp2or" (formula "29") (term "1,0,0,0"))
                                                               (rule "nnf_notAnd" (formula "29") (term "0,0,0,0"))
                                                                (builtin "One Step Simplification" (formula "29"))
                                                               (rule "nnf_notAnd" (formula "34") (term "0,0,0,0"))
                                                                (builtin "One Step Simplification" (formula "34"))
                                                               (rule "nnf_imp2or" (formula "22") (term "1,0,0,0"))
                                                               (rule "nnf_notAnd" (formula "22") (term "0,0,0,0"))
                                                                (builtin "One Step Simplification" (formula "22"))
                                                               (rule "nnf_notAnd" (formula "33") (term "0,0,0,0"))
                                                                (builtin "One Step Simplification" (formula "33"))
                                                               (rule "nnf_notAnd" (formula "14") (term "0,0,0,0"))
                                                                (builtin "One Step Simplification" (formula "14"))
                                                               (rule "nnf_notOr" (formula "31") (term "1,0,0,0,0"))
                                                               (rule "nnf_notOr" (formula "25") (term "1,0,0,0,0"))
                                                               (rule "nnf_notOr" (formula "30") (term "1,0,0,0,0"))
                                                               (rule "nnf_notOr" (formula "13") (term "1,0,0,0,0"))
                                                               (rule "nnf_notAnd" (formula "57") (term "0,1,0"))
                                                               (rule "inEqSimp_notGeq" (formula "57") (term "1,0,1,0"))
                                                               (rule "mul_literals" (formula "57") (term "1,0,0,1,0,1,0"))
                                                               (rule "add_zero_right" (formula "57") (term "0,0,1,0,1,0"))
                                                               (rule "inEqSimp_sepPosMonomial0" (formula "57") (term "1,0,1,0"))
                                                               (rule "mul_literals" (formula "57") (term "1,1,0,1,0"))
                                                               (rule "nnf_notAnd" (formula "57") (term "1,1,0"))
                                                                (builtin "One Step Simplification" (formula "57"))
                                                               (rule "nnf_imp2or" (formula "11") (term "1,0,0,0"))
                                                               (rule "nnf_notOr" (formula "11") (term "1,0,0,0,0"))
                                                               (rule "nnf_notOr" (formula "24") (term "1,0,0,0,0"))
                                                               (rule "nnf_imp2or" (formula "23") (term "1,0,0,0"))
                                                               (rule "nnf_notOr" (formula "12") (term "1,0,0,0,0"))
                                                               (rule "nnf_notOr" (formula "9") (term "1,0,0,0,0"))
                                                               (rule "nnf_imp2or" (formula "8") (term "1,0,0,0"))
                                                               (rule "nnf_imp2or" (formula "6") (term "1,0,0,0"))
                                                               (rule "nnf_notOr" (formula "7") (term "1,0,0,0,0"))
                                                               (rule "nnf_notOr" (formula "23") (term "1,0,0,0,0"))
                                                               (rule "nnf_imp2or" (formula "5") (term "1,0,0,0"))
                                                               (rule "nnf_notOr" (formula "28") (term "1,0,0,0,0"))
                                                               (rule "nnf_notOr" (formula "8") (term "1,0,0,0,0"))
                                                               (rule "nnf_notOr" (formula "6") (term "0,0,0,0,0"))
                                                               (rule "nnf_imp2or" (formula "27") (term "1,0,0,0"))
                                                               (rule "nnf_notOr" (formula "26") (term "1,0,0,0,0"))
                                                               (rule "nnf_notOr" (formula "5") (term "0,0,0,0,0"))
                                                               (rule "nnf_imp2or" (formula "34") (term "1,0,0,0"))
                                                               (rule "nnf_notOr" (formula "10") (term "1,0,0,0,0"))
                                                               (rule "nnf_notOr" (formula "27") (term "1,0,0,0,0"))
                                                               (rule "nnf_imp2or" (formula "33") (term "1,0,0,0"))
                                                               (rule "nnf_imp2or" (formula "14") (term "1,0,0,0"))
                                                               (rule "nnf_notOr" (formula "29") (term "1,0,0,0,0"))
                                                               (rule "nnf_notOr" (formula "34") (term "1,0,0,0,0"))
                                                               (rule "nnf_notOr" (formula "22") (term "1,0,0,0,0"))
                                                               (rule "nnf_notOr" (formula "33") (term "1,0,0,0,0"))
                                                               (rule "nnf_notOr" (formula "14") (term "1,0,0,0,0"))
                                                               (rule "nnf_notAnd" (formula "57") (term "0,0,1,0"))
                                                               (rule "inEqSimp_notLeq" (formula "57") (term "1,0,0,1,0"))
                                                               (rule "polySimp_rightDist" (formula "57") (term "1,0,0,1,0,0,1,0"))
                                                               (rule "mul_literals" (formula "57") (term "0,1,0,0,1,0,0,1,0"))
                                                               (rule "polySimp_addAssoc" (formula "57") (term "0,0,1,0,0,1,0"))
                                                               (rule "add_literals" (formula "57") (term "0,0,0,1,0,0,1,0"))
                                                               (rule "add_zero_left" (formula "57") (term "0,0,1,0,0,1,0"))
                                                               (rule "inEqSimp_sepPosMonomial1" (formula "57") (term "1,0,0,1,0"))
                                                               (rule "polySimp_mulLiterals" (formula "57") (term "1,1,0,0,1,0"))
                                                               (rule "polySimp_elimOne" (formula "57") (term "1,1,0,0,1,0"))
                                                               (rule "nnf_notOr" (formula "11") (term "0,1,0,0,0,0"))
                                                               (rule "nnf_notOr" (formula "12") (term "0,1,0,0,0,0"))
                                                               (rule "nnf_notOr" (formula "23") (term "0,1,0,0,0,0"))
                                                               (rule "nnf_notOr" (formula "6") (term "0,0,0,0,0,0"))
                                                               (rule "nnf_notOr" (formula "26") (term "0,1,0,0,0,0"))
                                                               (rule "nnf_notOr" (formula "5") (term "0,0,0,0,0,0"))
                                                               (rule "nnf_notOr" (formula "27") (term "0,1,0,0,0,0"))
                                                               (rule "nnf_notOr" (formula "22") (term "0,1,0,0,0,0"))
                                                               (rule "nnf_notOr" (formula "11") (term "0,0,1,0,0,0,0"))
                                                               (rule "nnf_notOr" (formula "12") (term "0,0,1,0,0,0,0"))
                                                               (rule "nnf_notOr" (formula "23") (term "0,0,1,0,0,0,0"))
                                                               (rule "nnf_notOr" (formula "6") (term "0,0,0,0,0,0,0"))
                                                               (rule "nnf_notOr" (formula "5") (term "0,0,0,0,0,0,0"))
                                                               (rule "nnf_notOr" (formula "22") (term "0,0,1,0,0,0,0"))
                                                               (rule "nnf_notOr" (formula "11") (term "0,0,0,1,0,0,0,0"))
                                                               (rule "nnf_notOr" (formula "12") (term "0,0,0,1,0,0,0,0"))
                                                               (rule "nnf_notOr" (formula "6") (term "1,0,0,0,0,0,0,0"))
                                                               (rule "nnf_notOr" (formula "5") (term "1,0,0,0,0,0,0,0"))
                                                               (rule "nnf_notOr" (formula "6") (term "0,1,0,0,0,0,0,0,0"))
                                                               (rule "nnf_notOr" (formula "5") (term "0,1,0,0,0,0,0,0,0"))
                                                               (rule "commute_or_2" (formula "47") (term "0"))
                                                               (rule "commute_or_2" (formula "39") (term "0"))
                                                               (rule "cnf_rightDist" (formula "32") (term "0,0"))
                                                               (rule "commute_or" (formula "31") (term "1,0,0,0"))
                                                               (rule "commute_or" (formula "25") (term "1,0,0,0"))
                                                               (rule "commute_or" (formula "30") (term "1,0,0,0"))
                                                               (rule "commute_or" (formula "13") (term "1,0,0,0"))
                                                               (rule "distr_forallAnd" (formula "32") (term "0"))
                                                               (rule "distr_forallAnd" (formula "32"))
                                                               (rule "andLeft" (formula "32"))
                                                               (rule "commute_or" (formula "24") (term "1,0,0,0"))
                                                               (rule "commute_or" (formula "12") (term "1,0,0,0"))
                                                               (rule "commute_or" (formula "9") (term "1,0,0,0"))
                                                               (rule "commute_or" (formula "7") (term "1,0,0,0"))
                                                               (rule "commute_or" (formula "58") (term "0,0"))
                                                               (rule "commute_or" (formula "28") (term "1,0,0,0"))
                                                               (rule "commute_or" (formula "26") (term "1,0,0,0"))
                                                               (rule "commute_or" (formula "10") (term "1,0,0,0"))
                                                               (rule "commute_or" (formula "29") (term "1,0,0,0"))
                                                               (rule "commute_or" (formula "58") (term "1,1,0"))
                                                               (rule "commute_or" (formula "22") (term "1,0,0,0"))
                                                               (rule "commute_or_2" (formula "8") (term "0,0,0"))
                                                               (rule "commute_or" (formula "11") (term "1,0,0,0"))
                                                               (rule "commute_or" (formula "23") (term "1,0,0,0"))
                                                               (rule "commute_or_2" (formula "35") (term "0,0,0"))
                                                               (rule "commute_or_2" (formula "34") (term "0,0,0"))
                                                               (rule "commute_or_2" (formula "14") (term "0,0,0"))
                                                               (rule "commute_or" (formula "6") (term "1,0,0,0"))
                                                               (rule "commute_or" (formula "5") (term "1,0,0,0"))
                                                               (rule "commute_or" (formula "27") (term "1,0,0,0"))
                                                               (rule "seqGetAlphaCast" (formula "69") (term "0"))
                                                               (rule "castDel" (formula "69") (term "0"))
                                                                (builtin "One Step Simplification" (formula "69"))
                                                               (rule "true_left" (formula "69"))
                                                               (rule "equalityToSeqGetAndSeqLenLeft" (formula "68") (inst "iv=iv"))
                                                               (rule "andLeft" (formula "68"))
                                                               (rule "lenOfSeqSub" (formula "69") (term "1,1,0,0"))
                                                               (rule "polySimp_elimSub" (formula "69") (term "1,1,1,0,0"))
                                                               (rule "times_zero_2" (formula "69") (term "1,1,1,1,0,0"))
                                                               (rule "add_zero_right" (formula "69") (term "1,1,1,0,0"))
                                                               (rule "lenOfSeqSub" (formula "68") (term "0"))
                                                               (rule "polySimp_elimSub" (formula "68") (term "1,0"))
                                                               (rule "mul_literals" (formula "68") (term "1,1,0"))
                                                               (rule "add_zero_right" (formula "68") (term "1,0"))
                                                                (builtin "One Step Simplification" (formula "68"))
                                                               (rule "eqSymm" (formula "68") (term "1"))
                                                               (rule "inEqSimp_ltToLeq" (formula "69") (term "0,1,1,0,0"))
                                                               (rule "add_zero_right" (formula "69") (term "0,0,1,1,0,0"))
                                                               (rule "polySimp_mulComm0" (formula "69") (term "1,0,0,1,1,0,0"))
                                                               (rule "inEqSimp_ltToLeq" (formula "68") (term "0"))
                                                               (rule "add_zero_right" (formula "68") (term "0,0"))
                                                               (rule "polySimp_mulComm0" (formula "68") (term "1,0,0"))
                                                               (rule "inEqSimp_ltToLeq" (formula "69") (term "1,0,0"))
                                                               (rule "polySimp_mulComm0" (formula "69") (term "1,0,0,1,0,0"))
                                                               (rule "inEqSimp_commuteLeq" (formula "69") (term "0,0,0"))
                                                               (rule "applyEq" (formula "69") (term "0,0,1,0") (ifseqformula "70"))
                                                                (builtin "One Step Simplification" (formula "69"))
                                                               (rule "true_left" (formula "69"))
                                                               (rule "inEqSimp_sepNegMonomial0" (formula "68") (term "0"))
                                                               (rule "polySimp_mulLiterals" (formula "68") (term "0,0"))
                                                               (rule "polySimp_elimOne" (formula "68") (term "0,0"))
                                                               (rule "commute_or_2" (formula "58") (term "0,1,0"))
                                                               (rule "cut_direct" (formula "62") (term "0,0,0,0"))
                                                               (branch "CUT: result_48.<created> = TRUE TRUE"
                                                                   (builtin "One Step Simplification" (formula "63"))
                                                                  (rule "true_left" (formula "63"))
                                                                  (rule "lenNonNegative" (formula "67") (term "0"))
                                                                  (rule "inEqSimp_commuteLeq" (formula "67"))
                                                                  (rule "applyEq" (formula "67") (term "0") (ifseqformula "68"))
                                                                  (rule "inEqSimp_sepPosMonomial1" (formula "67"))
                                                                  (rule "mul_literals" (formula "67") (term "1"))
                                                                  (rule "inEqSimp_subsumption1" (formula "67") (ifseqformula "57"))
                                                                  (rule "leq_literals" (formula "67") (term "0"))
                                                                   (builtin "One Step Simplification" (formula "67"))
                                                                  (rule "true_left" (formula "67"))
                                                                  (rule "commute_or" (formula "48") (term "0,0"))
                                                                  (rule "commute_or" (formula "40") (term "0,0"))
                                                                  (rule "seqGetAlphaCast" (formula "1") (term "0"))
                                                                  (rule "castedGetAny" (formula "1") (term "0"))
                                                                   (builtin "One Step Simplification" (formula "1"))
                                                                  (rule "true_left" (formula "1"))
                                                                  (rule "seqGetAlphaCast" (formula "63") (term "0"))
                                                                  (rule "castedGetAny" (formula "63") (term "0"))
                                                                   (builtin "One Step Simplification" (formula "63"))
                                                                  (rule "true_left" (formula "63"))
                                                                  (rule "commute_or" (formula "33") (term "0,0"))
                                                                  (rule "commute_or" (formula "68"))
                                                                  (rule "inEqSimp_or_weaken1" (formula "68"))
                                                                  (rule "add_zero_right" (formula "68") (term "1,0"))
                                                                   (builtin "One Step Simplification" (formula "68") (ifInst ""  (formula "57")))
                                                                  (rule "true_left" (formula "68"))
                                                                  (rule "cnf_rightDist" (formula "31") (term "0,0,0,0"))
                                                                   (builtin "One Step Simplification" (formula "31"))
                                                                  (rule "cnf_rightDist" (formula "25") (term "0,0,0,0"))
                                                                   (builtin "One Step Simplification" (formula "25"))
                                                                  (rule "cnf_rightDist" (formula "30") (term "0,0,0,0"))
                                                                   (builtin "One Step Simplification" (formula "30"))
                                                                  (rule "cnf_rightDist" (formula "13") (term "0,0,0,0"))
                                                                   (builtin "One Step Simplification" (formula "13"))
                                                                  (rule "commute_or_2" (formula "24") (term "0,0,0"))
                                                                  (rule "commute_or_2" (formula "12") (term "0,0,0"))
                                                                  (rule "commute_or_2" (formula "9") (term "0,0,0"))
                                                                  (rule "commute_or_2" (formula "7") (term "0,0,0"))
                                                                  (rule "commute_or_2" (formula "28") (term "0,0,0"))
                                                                  (rule "commute_or_2" (formula "26") (term "0,0,0"))
                                                                  (rule "commute_or_2" (formula "10") (term "0,0,0"))
                                                                  (rule "commute_or_2" (formula "29") (term "0,0,0"))
                                                                  (rule "commute_or" (formula "6") (term "0,0,0,0"))
                                                                  (rule "commute_or" (formula "5") (term "0,0,0,0"))
                                                                  (rule "commute_or_2" (formula "22") (term "0,0,0"))
                                                                  (rule "commute_or_2" (formula "11") (term "0,0,0"))
                                                                  (rule "commute_or_2" (formula "23") (term "0,0,0"))
                                                                  (rule "commute_or_2" (formula "27") (term "0,0,0"))
                                                                  (rule "commute_or_2" (formula "48") (term "0"))
                                                                  (rule "commute_or_2" (formula "40") (term "0"))
                                                                  (rule "cnf_rightDist" (formula "32") (term "0,0"))
                                                                  (rule "distr_forallAnd" (formula "32") (term "0"))
                                                                  (rule "distr_forallAnd" (formula "32"))
                                                                  (rule "andLeft" (formula "32"))
                                                                  (rule "shift_paren_or" (formula "8") (term "0,0,0,0"))
                                                                  (rule "commute_or" (formula "36") (term "1,0,0,0,0"))
                                                                  (rule "commute_or" (formula "35") (term "1,0,0,0,0"))
                                                                  (rule "shift_paren_or" (formula "14") (term "0,0,0,0"))
                                                                  (rule "cnf_rightDist" (formula "59") (term "1,1,0"))
                                                                  (rule "commute_and" (formula "8") (term "1,0,0,0"))
                                                                  (rule "commute_and" (formula "36") (term "1,0,0,0"))
                                                                  (rule "commute_and" (formula "35") (term "1,0,0,0"))
                                                                  (rule "commute_and" (formula "14") (term "1,0,0,0"))
                                                                  (rule "commute_or" (formula "33") (term "0,0"))
                                                                  (rule "commute_or_2" (formula "6") (term "0,0,0"))
                                                                  (rule "commute_or_2" (formula "5") (term "0,0,0"))
                                                                  (rule "commute_or" (formula "31") (term "0,0,0,0"))
                                                                  (rule "shift_paren_or" (formula "25") (term "0,0,0"))
                                                                   (builtin "One Step Simplification" (formula "25"))
                                                                  (rule "eqSymm" (formula "25") (term "1,0,0,0"))
                                                                  (rule "castedGetAny" (formula "25") (term "1,0,0,0,0,0,0,0"))
                                                                  (rule "castedGetAny" (formula "25") (term "0,1,0,0,0,0"))
                                                                  (rule "castedGetAny" (formula "25") (term "0,1,0,0,0"))
                                                                   (builtin "One Step Simplification" (formula "25"))
                                                                  (rule "true_left" (formula "25"))
                                                                  (rule "commute_or" (formula "29") (term "0,0,0,0"))
                                                                  (rule "commute_or" (formula "13") (term "0,0,0,0"))
                                                                  (rule "cnf_rightDist" (formula "58") (term "0"))
                                                                  (rule "distr_forallAnd" (formula "58"))
                                                                  (rule "andLeft" (formula "58"))
                                                                  (rule "commute_or" (formula "59") (term "0"))
                                                                  (rule "shift_paren_or" (formula "58") (term "0"))
                                                                  (rule "commute_or_2" (formula "58") (term "0,0"))
                                                                   (builtin "One Step Simplification" (formula "58"))
                                                                  (rule "commute_or_2" (formula "8") (term "0,0,0,0"))
                                                                  (rule "shift_paren_or" (formula "24") (term "0,0,0,0"))
                                                                  (rule "shift_paren_or" (formula "12") (term "0,0,0,0"))
                                                                  (rule "shift_paren_or" (formula "9") (term "0,0,0,0"))
                                                                  (rule "shift_paren_or" (formula "7") (term "0,0,0,0"))
                                                                  (rule "commute_or_2" (formula "14") (term "0,0,0,0"))
                                                                  (rule "shift_paren_or" (formula "27") (term "0,0,0,0"))
                                                                  (rule "shift_paren_or" (formula "25") (term "0,0,0,0"))
                                                                  (rule "commute_or" (formula "59") (term "0,1,0"))
                                                                  (rule "shift_paren_or" (formula "10") (term "0,0,0,0"))
                                                                  (rule "Class_axiom_0_in_de_polyas_core3_open_cred_CredTool" (inst "seq=seq") (inst "i=i_2") (inst "str=str") (inst "seq_0=seq_0") (inst "i_0=i_0") (inst "obj=obj") (inst "seq_1=seq_1") (inst "i_1=i_1") (inst "sv_heap=anon_heap_add<<anonHeapFunction>>"))
                                                                  (rule "andLeft" (formula "1"))
                                                                  (rule "andLeft" (formula "1"))
                                                                  (rule "castedGetAny" (formula "3") (term "0,1,1,0,0,0"))
                                                                  (rule "castedGetAny" (formula "2") (term "0,1,1,0,0,0"))
                                                                  (rule "castedGetAny" (formula "1") (term "0,0,0,1,0,1,0,0"))
                                                                  (rule "castedGetAny" (formula "1") (term "0,0,0,0,1,0,0"))
                                                                  (rule "castedGetAny" (formula "1") (term "0,0,1,1,0,1,0,0"))
                                                                  (rule "castedGetAny" (formula "1") (term "0,0,0,0,0"))
                                                                  (rule "nnf_imp2or" (formula "1") (term "0,0"))
                                                                   (builtin "One Step Simplification" (formula "1"))
                                                                  (rule "nnf_imp2or" (formula "3") (term "0,0,0"))
                                                                  (rule "nnf_imp2or" (formula "2") (term "0,0,0"))
                                                                  (rule "nnf_imp2or" (formula "3") (term "1,0,0,0"))
                                                                  (rule "nnf_notAnd" (formula "3") (term "0,0,0,0"))
                                                                   (builtin "One Step Simplification" (formula "3"))
                                                                  (rule "nnf_notAnd" (formula "2") (term "0,0,0,0"))
                                                                   (builtin "One Step Simplification" (formula "2"))
                                                                  (rule "nnf_imp2or" (formula "2") (term "1,0,0,0"))
                                                                  (rule "nnf_notOr" (formula "3") (term "0,0,0,0,0"))
                                                                  (rule "nnf_notOr" (formula "2") (term "0,0,0,0,0"))
                                                                  (rule "Class_axiom_0_in_de_polyas_core3_open_cred_CredTool" (inst "seq=seq") (inst "i=i_2") (inst "str=str") (inst "seq_0=seq_0") (inst "i_0=i_0") (inst "obj=obj") (inst "seq_1=seq_1") (inst "i_1=i_1") (inst "sv_heap=anon(heapAfter_get,
     singleton(result_46, java.util.Collection::$seq),
     anon_heap_add<<anonHeapFunction>>)"))
                                                                   (builtin "One Step Simplification" (formula "1"))
                                                                  (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,1,0,0,0,0,0,1") (ifseqformula "65"))
                                                                   (builtin "One Step Simplification" (formula "1"))
                                                                  (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,1,0,0,0,0,0,1,0") (ifseqformula "65"))
                                                                   (builtin "One Step Simplification" (formula "1"))
                                                                  (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,0,0,1,0,0,0,0,0,1") (ifseqformula "54"))
                                                                  (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,0,0,0,1,0,0,0,0,0,1") (ifseqformula "47"))
                                                                  (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,0,0,1,0,0,0,0,0,1,0") (ifseqformula "54"))
                                                                  (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,0,0,0,1,0,0,0,0,0,1,0") (ifseqformula "47"))
                                                                  (rule "andLeft" (formula "1"))
                                                                  (rule "andLeft" (formula "1"))
                                                                  (rule "castedGetAny" (formula "3") (term "0,1,1,0,0,0"))
                                                                  (rule "castedGetAny" (formula "1") (term "0,0,0,0,1,0,0"))
                                                                  (rule "castedGetAny" (formula "1") (term "0,0,1,1,0,1,0,0"))
                                                                  (rule "castedGetAny" (formula "2") (term "0,1,1,0,0,0"))
                                                                  (rule "castedGetAny" (formula "1") (term "0,0,0,1,0,1,0,0"))
                                                                  (rule "castedGetAny" (formula "1") (term "0,0,0,0,0"))
                                                                  (rule "nnf_imp2or" (formula "1") (term "0,0"))
                                                                   (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "4")))
                                                                  (rule "true_left" (formula "1"))
                                                                  (rule "nnf_imp2or" (formula "2") (term "0,0,0"))
                                                                  (rule "nnf_imp2or" (formula "1") (term "0,0,0"))
                                                                  (rule "nnf_imp2or" (formula "2") (term "1,0,0,0"))
                                                                  (rule "nnf_notAnd" (formula "2") (term "0,0,0,0"))
                                                                   (builtin "One Step Simplification" (formula "2"))
                                                                  (rule "nnf_notAnd" (formula "1") (term "0,0,0,0"))
                                                                   (builtin "One Step Simplification" (formula "1"))
                                                                  (rule "nnf_imp2or" (formula "1") (term "1,0,0,0"))
                                                                  (rule "nnf_notOr" (formula "2") (term "0,0,0,0,0"))
                                                                  (rule "nnf_notOr" (formula "1") (term "0,0,0,0,0"))
                                                                  (rule "nnf_notOr" (formula "2") (term "1,0,0,0,0,0"))
                                                                  (rule "nnf_notOr" (formula "1") (term "1,0,0,0,0,0"))
                                                                  (rule "nnf_notOr" (formula "2") (term "0,1,0,0,0,0,0"))
                                                                  (rule "nnf_notOr" (formula "1") (term "0,1,0,0,0,0,0"))
                                                                  (rule "nnf_notOr" (formula "2") (term "0,0,1,0,0,0,0,0"))
                                                                  (rule "nnf_notOr" (formula "1") (term "0,0,1,0,0,0,0,0"))
                                                                  (rule "nnf_notOr" (formula "2") (term "0,0,0,1,0,0,0,0,0"))
                                                                  (rule "nnf_notOr" (formula "1") (term "0,0,0,1,0,0,0,0,0"))
                                                                  (rule "nnf_notOr" (formula "2") (term "0,0,0,0,1,0,0,0,0,0"))
                                                                  (rule "nnf_notOr" (formula "1") (term "0,0,0,0,1,0,0,0,0,0"))
                                                                  (rule "Class_axiom_0_in_de_polyas_core3_open_cred_CredTool" (inst "seq=seq") (inst "i=i_2") (inst "str=str") (inst "seq_0=seq_0") (inst "i_0=i_0") (inst "obj=obj") (inst "seq_1=seq_1") (inst "i_1=i_1") (inst "sv_heap=heapAfter_add"))
                                                                  (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "1,0,0,0,0,0,1") (ifseqformula "72"))
                                                                  (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "1,0,0,0,0,0,1,0") (ifseqformula "72"))
                                                                  (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,1,0,0,0,0,0,1") (ifseqformula "67"))
                                                                   (builtin "One Step Simplification" (formula "1"))
                                                                  (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,1,0,0,0,0,0,1,0") (ifseqformula "67"))
                                                                   (builtin "One Step Simplification" (formula "1"))
                                                                  (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,0,0,1,0,0,0,0,0,1") (ifseqformula "56"))
                                                                  (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,0,0,0,1,0,0,0,0,0,1") (ifseqformula "49"))
                                                                  (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,0,0,1,0,0,0,0,0,1,0") (ifseqformula "56"))
                                                                  (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,0,0,0,1,0,0,0,0,0,1,0") (ifseqformula "49"))
                                                                  (rule "andLeft" (formula "1"))
                                                                  (rule "andLeft" (formula "1"))
                                                                  (rule "castedGetAny" (formula "3") (term "0,1,1,0,0,0"))
                                                                  (rule "castedGetAny" (formula "1") (term "0,0,1,1,0,1,0,0"))
                                                                  (rule "castedGetAny" (formula "1") (term "0,0,0,0,0"))
                                                                  (rule "castedGetAny" (formula "1") (term "0,0,0,1,0,1,0,0"))
                                                                  (rule "castedGetAny" (formula "2") (term "0,1,1,0,0,0"))
                                                                  (rule "castedGetAny" (formula "1") (term "0,0,0,0,1,0,0"))
                                                                  (rule "nnf_imp2or" (formula "1") (term "0,0"))
                                                                   (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "6")))
                                                                  (rule "true_left" (formula "1"))
                                                                  (rule "nnf_imp2or" (formula "2") (term "0,0,0"))
                                                                  (rule "nnf_imp2or" (formula "1") (term "0,0,0"))
                                                                  (rule "nnf_notAnd" (formula "2") (term "0,0,0,0"))
                                                                   (builtin "One Step Simplification" (formula "2"))
                                                                  (rule "nnf_imp2or" (formula "1") (term "1,0,0,0"))
                                                                  (rule "nnf_notAnd" (formula "1") (term "0,0,0,0"))
                                                                   (builtin "One Step Simplification" (formula "1"))
                                                                  (rule "nnf_imp2or" (formula "2") (term "1,0,0,0"))
                                                                  (rule "nnf_notOr" (formula "2") (term "0,0,0,0,0"))
                                                                  (rule "nnf_notOr" (formula "1") (term "0,0,0,0,0"))
                                                                  (rule "nnf_notOr" (formula "2") (term "1,0,0,0,0,0"))
                                                                  (rule "nnf_notOr" (formula "1") (term "1,0,0,0,0,0"))
                                                                  (rule "nnf_notOr" (formula "2") (term "0,1,0,0,0,0,0"))
                                                                  (rule "nnf_notOr" (formula "1") (term "0,1,0,0,0,0,0"))
                                                                  (rule "nnf_notOr" (formula "2") (term "0,0,1,0,0,0,0,0"))
                                                                  (rule "nnf_notOr" (formula "1") (term "0,0,1,0,0,0,0,0"))
                                                                  (rule "nnf_notOr" (formula "2") (term "0,0,0,1,0,0,0,0,0"))
                                                                  (rule "nnf_notOr" (formula "1") (term "0,0,0,1,0,0,0,0,0"))
                                                                  (rule "nnf_notOr" (formula "2") (term "0,0,0,0,1,0,0,0,0,0"))
                                                                  (rule "nnf_notOr" (formula "1") (term "0,0,0,0,1,0,0,0,0,0"))
                                                                  (rule "shift_paren_or" (formula "33") (term "0,0,0,0"))
                                                                  (rule "cnf_rightDist" (formula "36") (term "0,0"))
                                                                  (rule "shift_paren_or" (formula "63") (term "0,0"))
                                                                  (rule "shift_paren_or" (formula "27") (term "0,0,0,0"))
                                                                  (rule "shift_paren_or" (formula "16") (term "0,0,0,0"))
                                                                  (rule "shift_paren_or" (formula "35") (term "0,0,0"))
                                                                   (builtin "One Step Simplification" (formula "35"))
                                                                  (rule "eqSymm" (formula "35") (term "1,0,0,0"))
                                                                  (rule "castedGetAny" (formula "35") (term "0,0,0,0,0,0"))
                                                                  (rule "castedGetAny" (formula "35") (term "1,0,0,1,0,0,0,0"))
                                                                  (rule "castedGetAny" (formula "35") (term "0,1,0,0,0"))
                                                                   (builtin "One Step Simplification" (formula "35"))
                                                                  (rule "true_left" (formula "35"))
                                                                  (rule "shift_paren_or" (formula "28") (term "0,0,0,0"))
                                                                  (rule "shift_paren_or" (formula "31") (term "0,0,0,0"))
                                                                  (rule "distr_forallAnd" (formula "35") (term "0"))
                                                                  (rule "commute_and" (formula "29") (term "1,0,0,0"))
                                                                  (rule "shift_paren_or" (formula "34") (term "0,0,0"))
                                                                   (builtin "One Step Simplification" (formula "34"))
                                                                  (rule "eqSymm" (formula "34") (term "1,0,0,0"))
                                                                  (rule "castedGetAny" (formula "34") (term "1,0,0,1,0,0,0,0"))
                                                                  (rule "castedGetAny" (formula "34") (term "0,0,0,0,0,0"))
                                                                  (rule "castedGetAny" (formula "34") (term "0,1,0,0,0"))
                                                                   (builtin "One Step Simplification" (formula "34"))
                                                                  (rule "true_left" (formula "34"))
                                                                  (rule "shift_paren_or" (formula "38") (term "0,0,0,0"))
                                                                  (rule "commute_and" (formula "14") (term "1,0,0,0"))
                                                                  (rule "shift_paren_or" (formula "18") (term "0,0,0"))
                                                                   (builtin "One Step Simplification" (formula "18"))
                                                                  (rule "eqSymm" (formula "18") (term "1,0,0,0"))
                                                                  (rule "castedGetAny" (formula "18") (term "1,0,0,1,0,0,0,0"))
                                                                  (rule "castedGetAny" (formula "18") (term "0,0,0,0,0,0"))
                                                                  (rule "castedGetAny" (formula "18") (term "0,1,0,0,0"))
                                                                   (builtin "One Step Simplification" (formula "18"))
                                                                  (rule "true_left" (formula "18"))
                                                                  (rule "shift_paren_or" (formula "36") (term "0,0,0,0"))
                                                                  (rule "commute_and" (formula "12") (term "1,0,0,0"))
                                                                  (rule "commute_and" (formula "31") (term "1,0,0,0"))
                                                                  (rule "commute_and" (formula "15") (term "1,0,0,0"))
                                                                  (rule "commute_and" (formula "32") (term "1,0,0,0"))
                                                                  (rule "cnf_rightDist" (formula "61") (term "0"))
                                                                  (rule "distr_forallAnd" (formula "33"))
                                                                  (rule "andLeft" (formula "33"))
                                                                  (rule "shift_paren_or" (formula "11") (term "0,0,0,0"))
                                                                  (rule "shift_paren_or" (formula "10") (term "0,0,0,0"))
                                                                  (rule "commute_and" (formula "29") (term "0,1,0,0,0"))
                                                                  (rule "commute_and" (formula "30") (term "0,1,0,0,0"))
                                                                  (rule "distr_forallAnd" (formula "62"))
                                                                  (rule "andLeft" (formula "62"))
                                                                  (rule "commute_or" (formula "5") (term "1,0,0,0"))
                                                                  (rule "commute_or" (formula "4") (term "1,0,0,0"))
                                                                  (rule "commute_or" (formula "5") (term "0,0,0,0"))
                                                                  (rule "cnf_rightDist" (formula "13") (term "0,0,0"))
                                                                  (rule "commute_or" (formula "4") (term "0,0,0,0"))
                                                                  (rule "cnf_rightDist" (formula "17") (term "0,0,0"))
                                                                  (rule "cnf_rightDist" (formula "18") (term "0,0,0"))
                                                                  (rule "distr_forallAnd" (formula "13") (term "0,0"))
                                                                  (rule "distr_forallAnd" (formula "17") (term "0,0"))
                                                                  (rule "distr_forallAnd" (formula "18") (term "0,0"))
                                                                  (rule "distr_forallAnd" (formula "13") (term "0"))
                                                                  (rule "commute_and" (formula "26") (term "0,0,1,0,0,0"))
                                                                  (rule "distr_forallAnd" (formula "17") (term "0"))
                                                                  (rule "distr_forallAnd" (formula "18") (term "0"))
                                                                  (rule "commute_and" (formula "27") (term "0,0,1,0,0,0"))
                                                                  (rule "distr_forallAnd" (formula "13"))
                                                                  (rule "andLeft" (formula "13"))
                                                                  (rule "distr_forallAnd" (formula "18"))
                                                                  (rule "andLeft" (formula "18"))
                                                                  (rule "distr_forallAnd" (formula "20"))
                                                                  (rule "andLeft" (formula "20"))
                                                                  (rule "commute_or" (formula "2") (term "1,0,0,0"))
                                                                  (rule "commute_or" (formula "1") (term "1,0,0,0"))
                                                                  (rule "commute_and" (formula "11") (term "0,0,1,0,0,0"))
                                                                  (rule "commute_and" (formula "17") (term "0,0,0,1,0,0,0"))
                                                                  (rule "commute_and" (formula "10") (term "0,0,1,0,0,0"))
                                                                  (rule "commute_or" (formula "2") (term "0,0,0,0"))
                                                                  (rule "commute_or" (formula "1") (term "0,0,0,0"))
                                                                  (rule "commute_or" (formula "63") (term "0,0,0"))
                                                                   (builtin "One Step Simplification" (formula "63"))
                                                                  (rule "commute_or_2" (formula "65") (term "0"))
                                                                  (rule "shift_paren_and" (formula "3") (term "0,1,0,0"))
                                                                   (builtin "One Step Simplification" (formula "3"))
                                                                  (rule "commute_or" (formula "36") (term "0,0"))
                                                                  (rule "shift_paren_or" (formula "64") (term "0"))
                                                                  (rule "inEqSimp_or_tautInEq3" (formula "64") (term "0,0"))
                                                                  (rule "inEqSimp_homoInEq1" (formula "64") (term "1,0,0"))
                                                                  (rule "polySimp_pullOutFactor1" (formula "64") (term "0,1,0,0"))
                                                                  (rule "add_literals" (formula "64") (term "1,0,1,0,0"))
                                                                  (rule "times_zero_1" (formula "64") (term "0,1,0,0"))
                                                                  (rule "leq_literals" (formula "64") (term "1,0,0"))
                                                                   (builtin "One Step Simplification" (formula "64"))
                                                                  (rule "true_left" (formula "64"))
                                                                  (rule "allLeft" (formula "45") (inst "t=i_1"))
                                                                  (rule "replace_known_left" (formula "45") (term "0,0,0") (ifseqformula "6"))
                                                                   (builtin "One Step Simplification" (formula "45"))
                                                                  (rule "inEqSimp_commuteGeq" (formula "45") (term "1"))
                                                                  (rule "inEqSimp_contradInEq1" (formula "45") (term "0") (ifseqformula "7"))
                                                                  (rule "qeq_literals" (formula "45") (term "0,0"))
                                                                   (builtin "One Step Simplification" (formula "45"))
                                                                  (rule "inEqSimp_contradInEq1" (formula "45") (ifseqformula "9"))
                                                                  (rule "andLeft" (formula "45"))
                                                                  (rule "inEqSimp_homoInEq1" (formula "45"))
                                                                  (rule "polySimp_pullOutFactor1b" (formula "45") (term "0"))
                                                                  (rule "add_literals" (formula "45") (term "1,1,0"))
                                                                  (rule "times_zero_1" (formula "45") (term "1,0"))
                                                                  (rule "add_literals" (formula "45") (term "0"))
                                                                  (rule "leq_literals" (formula "45"))
                                                                  (rule "closeFalse" (formula "45"))
                                                               )
                                                               (branch "CUT: result_48.<created> = TRUE FALSE"
                                                                   (builtin "One Step Simplification" (formula "62"))
                                                                  (rule "lenNonNegative" (formula "67") (term "0"))
                                                                  (rule "inEqSimp_commuteLeq" (formula "67"))
                                                                  (rule "applyEq" (formula "67") (term "0") (ifseqformula "68"))
                                                                  (rule "inEqSimp_sepPosMonomial1" (formula "67"))
                                                                  (rule "mul_literals" (formula "67") (term "1"))
                                                                  (rule "inEqSimp_subsumption1" (formula "67") (ifseqformula "57"))
                                                                  (rule "leq_literals" (formula "67") (term "0"))
                                                                   (builtin "One Step Simplification" (formula "67"))
                                                                  (rule "true_left" (formula "67"))
                                                                  (rule "commute_or" (formula "48") (term "0,0"))
                                                                  (rule "commute_or" (formula "40") (term "0,0"))
                                                                  (rule "seqGetAlphaCast" (formula "1") (term "0"))
                                                                  (rule "castedGetAny" (formula "1") (term "0"))
                                                                   (builtin "One Step Simplification" (formula "1"))
                                                                  (rule "true_left" (formula "1"))
                                                                  (rule "seqGetAlphaCast" (formula "63") (term "0"))
                                                                  (rule "castedGetAny" (formula "63") (term "0"))
                                                                   (builtin "One Step Simplification" (formula "63"))
                                                                  (rule "true_left" (formula "63"))
                                                                  (rule "commute_or" (formula "33") (term "0,0"))
                                                                  (rule "commute_or" (formula "68"))
                                                                  (rule "inEqSimp_or_weaken1" (formula "68"))
                                                                  (rule "add_literals" (formula "68") (term "1,0"))
                                                                   (builtin "One Step Simplification" (formula "68") (ifInst ""  (formula "57")))
                                                                  (rule "true_left" (formula "68"))
                                                                  (rule "cnf_rightDist" (formula "31") (term "0,0,0,0"))
                                                                   (builtin "One Step Simplification" (formula "31"))
                                                                  (rule "cnf_rightDist" (formula "25") (term "0,0,0,0"))
                                                                   (builtin "One Step Simplification" (formula "25"))
                                                                  (rule "cnf_rightDist" (formula "30") (term "0,0,0,0"))
                                                                   (builtin "One Step Simplification" (formula "30"))
                                                                  (rule "cnf_rightDist" (formula "13") (term "0,0,0,0"))
                                                                   (builtin "One Step Simplification" (formula "13"))
                                                                  (rule "commute_or_2" (formula "24") (term "0,0,0"))
                                                                  (rule "commute_or_2" (formula "12") (term "0,0,0"))
                                                                  (rule "commute_or_2" (formula "9") (term "0,0,0"))
                                                                  (rule "commute_or_2" (formula "7") (term "0,0,0"))
                                                                  (rule "commute_or_2" (formula "28") (term "0,0,0"))
                                                                  (rule "commute_or_2" (formula "26") (term "0,0,0"))
                                                                  (rule "commute_or_2" (formula "10") (term "0,0,0"))
                                                                  (rule "commute_or" (formula "6") (term "0,0,0,0"))
                                                                  (rule "commute_or_2" (formula "29") (term "0,0,0"))
                                                                  (rule "commute_or" (formula "5") (term "0,0,0,0"))
                                                                  (rule "commute_or_2" (formula "22") (term "0,0,0"))
                                                                  (rule "commute_or_2" (formula "11") (term "0,0,0"))
                                                                  (rule "commute_or_2" (formula "23") (term "0,0,0"))
                                                                  (rule "commute_or_2" (formula "27") (term "0,0,0"))
                                                                  (rule "commute_or_2" (formula "48") (term "0"))
                                                                  (rule "commute_or_2" (formula "40") (term "0"))
                                                                  (rule "cnf_rightDist" (formula "32") (term "0,0"))
                                                                  (rule "distr_forallAnd" (formula "32") (term "0"))
                                                                  (rule "distr_forallAnd" (formula "32"))
                                                                  (rule "andLeft" (formula "32"))
                                                                  (rule "shift_paren_or" (formula "8") (term "0,0,0,0"))
                                                                  (rule "commute_or" (formula "36") (term "1,0,0,0,0"))
                                                                  (rule "shift_paren_or" (formula "35") (term "0,0,0,0"))
                                                                  (rule "shift_paren_or" (formula "14") (term "0,0,0,0"))
                                                                  (rule "cnf_rightDist" (formula "59") (term "1,1,0"))
                                                                  (rule "commute_and" (formula "8") (term "1,0,0,0"))
                                                                  (rule "commute_and" (formula "36") (term "1,0,0,0"))
                                                                  (rule "commute_and" (formula "35") (term "1,0,0,0"))
                                                                  (rule "commute_and" (formula "14") (term "1,0,0,0"))
                                                                  (rule "commute_or" (formula "33") (term "0,0"))
                                                                  (rule "commute_or_2" (formula "6") (term "0,0,0"))
                                                                  (rule "commute_or_2" (formula "5") (term "0,0,0"))
                                                                  (rule "shift_paren_or" (formula "31") (term "0,0,0"))
                                                                   (builtin "One Step Simplification" (formula "31"))
                                                                  (rule "eqSymm" (formula "31") (term "1,0,0,0"))
                                                                  (rule "castedGetAny" (formula "31") (term "1,0,0,0,0,0,0,0"))
                                                                  (rule "castedGetAny" (formula "31") (term "0,1,0,0,0,0"))
                                                                  (rule "castedGetAny" (formula "31") (term "0,1,0,0,0"))
                                                                   (builtin "One Step Simplification" (formula "31"))
                                                                  (rule "true_left" (formula "31"))
                                                                  (rule "shift_paren_or" (formula "25") (term "0,0,0"))
                                                                   (builtin "One Step Simplification" (formula "25"))
                                                                  (rule "eqSymm" (formula "25") (term "1,0,0,0"))
                                                                  (rule "castedGetAny" (formula "25") (term "0,1,0,0,0,0"))
                                                                  (rule "castedGetAny" (formula "25") (term "1,0,0,0,0,0,0,0"))
                                                                  (rule "castedGetAny" (formula "25") (term "0,1,0,0,0"))
                                                                   (builtin "One Step Simplification" (formula "25"))
                                                                  (rule "true_left" (formula "25"))
                                                                  (rule "shift_paren_or" (formula "29") (term "0,0,0"))
                                                                   (builtin "One Step Simplification" (formula "29"))
                                                                  (rule "eqSymm" (formula "29") (term "1,0,0,0"))
                                                                  (rule "castedGetAny" (formula "29") (term "0,1,0,0,0,0"))
                                                                  (rule "castedGetAny" (formula "29") (term "1,0,0,0,0,0,0,0"))
                                                                  (rule "castedGetAny" (formula "29") (term "0,1,0,0,0"))
                                                                   (builtin "One Step Simplification" (formula "29"))
                                                                  (rule "true_left" (formula "29"))
                                                                  (rule "shift_paren_or" (formula "13") (term "0,0,0"))
                                                                   (builtin "One Step Simplification" (formula "13"))
                                                                  (rule "eqSymm" (formula "13") (term "1,0,0,0"))
                                                                  (rule "castedGetAny" (formula "13") (term "0,1,0,0,0,0"))
                                                                  (rule "castedGetAny" (formula "13") (term "1,0,0,0,0,0,0,0"))
                                                                  (rule "castedGetAny" (formula "13") (term "0,1,0,0,0"))
                                                                   (builtin "One Step Simplification" (formula "13"))
                                                                  (rule "true_left" (formula "13"))
                                                                  (rule "cnf_rightDist" (formula "55") (term "0"))
                                                                  (rule "distr_forallAnd" (formula "55"))
                                                                  (rule "andLeft" (formula "55"))
                                                                  (rule "commute_or" (formula "56") (term "0"))
                                                                  (rule "commute_or_2" (formula "8") (term "0,0,0,0"))
                                                                  (rule "shift_paren_or" (formula "23") (term "0,0,0,0"))
                                                                  (rule "shift_paren_or" (formula "12") (term "0,0,0,0"))
                                                                  (rule "shift_paren_or" (formula "9") (term "0,0,0,0"))
                                                                  (rule "commute_or_2" (formula "31") (term "0,0,0,0"))
                                                                  (rule "commute_or_2" (formula "13") (term "0,0,0,0"))
                                                                  (rule "shift_paren_or" (formula "7") (term "0,0,0,0"))
                                                                  (rule "shift_paren_or" (formula "26") (term "0,0,0,0"))
                                                                  (rule "shift_paren_or" (formula "24") (term "0,0,0,0"))
                                                                  (rule "shift_paren_or" (formula "55") (term "0"))
                                                                  (rule "shift_paren_or" (formula "10") (term "0,0,0,0"))
                                                                  (rule "Class_axiom_0_in_de_polyas_core3_open_cred_CredTool" (inst "seq=seq") (inst "i=i_2") (inst "str=str") (inst "seq_0=seq_0") (inst "i_0=i_0") (inst "obj=obj") (inst "seq_1=seq_1") (inst "i_1=i_1") (inst "sv_heap=anon_heap_add<<anonHeapFunction>>"))
                                                                  (rule "andLeft" (formula "1"))
                                                                  (rule "andLeft" (formula "1"))
                                                                  (rule "castedGetAny" (formula "3") (term "0,1,1,0,0,0"))
                                                                  (rule "castedGetAny" (formula "1") (term "0,0,0,0,0"))
                                                                  (rule "castedGetAny" (formula "2") (term "0,1,1,0,0,0"))
                                                                  (rule "castedGetAny" (formula "1") (term "0,0,1,1,0,1,0,0"))
                                                                  (rule "castedGetAny" (formula "1") (term "0,0,0,0,1,0,0"))
                                                                  (rule "castedGetAny" (formula "1") (term "0,0,0,1,0,1,0,0"))
                                                                  (rule "nnf_imp2or" (formula "1") (term "0,0"))
                                                                   (builtin "One Step Simplification" (formula "1"))
                                                                  (rule "nnf_imp2or" (formula "3") (term "0,0,0"))
                                                                  (rule "nnf_imp2or" (formula "2") (term "0,0,0"))
                                                                  (rule "nnf_notAnd" (formula "3") (term "0,0,0,0"))
                                                                   (builtin "One Step Simplification" (formula "3"))
                                                                  (rule "nnf_notAnd" (formula "2") (term "0,0,0,0"))
                                                                   (builtin "One Step Simplification" (formula "2"))
                                                                  (rule "nnf_imp2or" (formula "3") (term "1,0,0,0"))
                                                                  (rule "nnf_imp2or" (formula "2") (term "1,0,0,0"))
                                                                  (rule "nnf_notOr" (formula "3") (term "0,0,0,0,0"))
                                                                  (rule "nnf_notOr" (formula "2") (term "0,0,0,0,0"))
                                                                  (rule "Class_axiom_0_in_de_polyas_core3_open_cred_CredTool" (inst "seq=seq") (inst "i=i_2") (inst "str=str") (inst "seq_0=seq_0") (inst "i_0=i_0") (inst "obj=obj") (inst "seq_1=seq_1") (inst "i_1=i_1") (inst "sv_heap=anon(heapAfter_get,
     singleton(result_46, java.util.Collection::$seq),
     anon_heap_add<<anonHeapFunction>>)"))
                                                                   (builtin "One Step Simplification" (formula "1"))
                                                                  (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,1,0,0,0,0,0,1") (ifseqformula "62"))
                                                                   (builtin "One Step Simplification" (formula "1"))
                                                                  (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,1,0,0,0,0,0,1,0") (ifseqformula "62"))
                                                                   (builtin "One Step Simplification" (formula "1"))
                                                                  (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,0,0,1,0,0,0,0,0,1") (ifseqformula "51"))
                                                                  (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,0,0,0,1,0,0,0,0,0,1") (ifseqformula "44"))
                                                                  (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,0,0,1,0,0,0,0,0,1,0") (ifseqformula "51"))
                                                                  (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,0,0,0,1,0,0,0,0,0,1,0") (ifseqformula "44"))
                                                                  (rule "andLeft" (formula "1"))
                                                                  (rule "andLeft" (formula "1"))
                                                                  (rule "castedGetAny" (formula "3") (term "0,1,1,0,0,0"))
                                                                  (rule "castedGetAny" (formula "1") (term "0,0,0,1,0,1,0,0"))
                                                                  (rule "castedGetAny" (formula "1") (term "0,0,0,0,0"))
                                                                  (rule "castedGetAny" (formula "1") (term "0,0,1,1,0,1,0,0"))
                                                                  (rule "castedGetAny" (formula "2") (term "0,1,1,0,0,0"))
                                                                  (rule "castedGetAny" (formula "1") (term "0,0,0,0,1,0,0"))
                                                                  (rule "nnf_imp2or" (formula "1") (term "0,0"))
                                                                   (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "4")))
                                                                  (rule "true_left" (formula "1"))
                                                                  (rule "nnf_imp2or" (formula "2") (term "0,0,0"))
                                                                  (rule "nnf_imp2or" (formula "1") (term "0,0,0"))
                                                                  (rule "nnf_notAnd" (formula "2") (term "0,0,0,0"))
                                                                   (builtin "One Step Simplification" (formula "2"))
                                                                  (rule "nnf_imp2or" (formula "1") (term "1,0,0,0"))
                                                                  (rule "nnf_notAnd" (formula "1") (term "0,0,0,0"))
                                                                   (builtin "One Step Simplification" (formula "1"))
                                                                  (rule "nnf_imp2or" (formula "2") (term "1,0,0,0"))
                                                                  (rule "nnf_notOr" (formula "2") (term "0,0,0,0,0"))
                                                                  (rule "nnf_notOr" (formula "1") (term "0,0,0,0,0"))
                                                                  (rule "nnf_notOr" (formula "2") (term "1,0,0,0,0,0"))
                                                                  (rule "nnf_notOr" (formula "1") (term "1,0,0,0,0,0"))
                                                                  (rule "nnf_notOr" (formula "2") (term "0,1,0,0,0,0,0"))
                                                                  (rule "nnf_notOr" (formula "1") (term "0,1,0,0,0,0,0"))
                                                                  (rule "nnf_notOr" (formula "2") (term "0,0,1,0,0,0,0,0"))
                                                                  (rule "nnf_notOr" (formula "1") (term "0,0,1,0,0,0,0,0"))
                                                                  (rule "nnf_notOr" (formula "2") (term "0,0,0,1,0,0,0,0,0"))
                                                                  (rule "nnf_notOr" (formula "1") (term "0,0,0,1,0,0,0,0,0"))
                                                                  (rule "nnf_notOr" (formula "2") (term "0,0,0,0,1,0,0,0,0,0"))
                                                                  (rule "nnf_notOr" (formula "1") (term "0,0,0,0,1,0,0,0,0,0"))
                                                                  (rule "Class_axiom_0_in_de_polyas_core3_open_cred_CredTool" (inst "seq=seq") (inst "i=i_2") (inst "str=str") (inst "seq_0=seq_0") (inst "i_0=i_0") (inst "obj=obj") (inst "seq_1=seq_1") (inst "i_1=i_1") (inst "sv_heap=heapAfter_add"))
                                                                  (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "1,0,0,0,0,0,1") (ifseqformula "69"))
                                                                  (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "1,0,0,0,0,0,1,0") (ifseqformula "69"))
                                                                  (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,1,0,0,0,0,0,1") (ifseqformula "64"))
                                                                   (builtin "One Step Simplification" (formula "1"))
                                                                  (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,1,0,0,0,0,0,1,0") (ifseqformula "64"))
                                                                   (builtin "One Step Simplification" (formula "1"))
                                                                  (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,0,0,1,0,0,0,0,0,1") (ifseqformula "53"))
                                                                  (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,0,0,0,1,0,0,0,0,0,1") (ifseqformula "46"))
                                                                  (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,0,0,1,0,0,0,0,0,1,0") (ifseqformula "53"))
                                                                  (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,0,0,0,1,0,0,0,0,0,1,0") (ifseqformula "46"))
                                                                  (rule "andLeft" (formula "1"))
                                                                  (rule "andLeft" (formula "1"))
                                                                  (rule "castedGetAny" (formula "3") (term "0,1,1,0,0,0"))
                                                                  (rule "castedGetAny" (formula "2") (term "0,1,1,0,0,0"))
                                                                  (rule "castedGetAny" (formula "1") (term "0,0,0,1,0,1,0,0"))
                                                                  (rule "castedGetAny" (formula "1") (term "0,0,0,0,0"))
                                                                  (rule "castedGetAny" (formula "1") (term "0,0,0,0,1,0,0"))
                                                                  (rule "castedGetAny" (formula "1") (term "0,0,1,1,0,1,0,0"))
                                                                  (rule "nnf_imp2or" (formula "1") (term "0,0"))
                                                                   (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "6")))
                                                                  (rule "true_left" (formula "1"))
                                                                  (rule "nnf_imp2or" (formula "2") (term "0,0,0"))
                                                                  (rule "nnf_imp2or" (formula "1") (term "0,0,0"))
                                                                  (rule "nnf_imp2or" (formula "2") (term "1,0,0,0"))
                                                                  (rule "nnf_notAnd" (formula "2") (term "0,0,0,0"))
                                                                   (builtin "One Step Simplification" (formula "2"))
                                                                  (rule "nnf_imp2or" (formula "1") (term "1,0,0,0"))
                                                                  (rule "nnf_notAnd" (formula "1") (term "0,0,0,0"))
                                                                   (builtin "One Step Simplification" (formula "1"))
                                                                  (rule "nnf_notOr" (formula "2") (term "0,0,0,0,0"))
                                                                  (rule "nnf_notOr" (formula "1") (term "0,0,0,0,0"))
                                                                  (rule "nnf_notOr" (formula "2") (term "1,0,0,0,0,0"))
                                                                  (rule "nnf_notOr" (formula "1") (term "1,0,0,0,0,0"))
                                                                  (rule "nnf_notOr" (formula "2") (term "0,1,0,0,0,0,0"))
                                                                  (rule "nnf_notOr" (formula "1") (term "0,1,0,0,0,0,0"))
                                                                  (rule "nnf_notOr" (formula "2") (term "0,0,1,0,0,0,0,0"))
                                                                  (rule "nnf_notOr" (formula "1") (term "0,0,1,0,0,0,0,0"))
                                                                  (rule "nnf_notOr" (formula "2") (term "0,0,0,1,0,0,0,0,0"))
                                                                  (rule "nnf_notOr" (formula "1") (term "0,0,0,1,0,0,0,0,0"))
                                                                  (rule "nnf_notOr" (formula "2") (term "0,0,0,0,1,0,0,0,0,0"))
                                                                  (rule "nnf_notOr" (formula "1") (term "0,0,0,0,1,0,0,0,0,0"))
                                                                  (rule "shift_paren_or" (formula "32") (term "0,0,0,0"))
                                                                  (rule "cnf_rightDist" (formula "33") (term "0,0"))
                                                                  (rule "shift_paren_or" (formula "26") (term "0,0,0,0"))
                                                                  (rule "shift_paren_or" (formula "16") (term "0,0,0,0"))
                                                                  (rule "shift_paren_or" (formula "27") (term "0,0,0,0"))
                                                                  (rule "shift_paren_or" (formula "30") (term "0,0,0,0"))
                                                                  (rule "commute_or_2" (formula "60") (term "0,0"))
                                                                   (builtin "One Step Simplification" (formula "60"))
                                                                  (rule "commute_and" (formula "28") (term "1,0,0,0"))
                                                                  (rule "shift_paren_or" (formula "37") (term "0,0,0,0"))
                                                                  (rule "commute_and" (formula "14") (term "1,0,0,0"))
                                                                  (rule "commute_and" (formula "12") (term "1,0,0,0"))
                                                                  (rule "commute_and" (formula "31") (term "1,0,0,0"))
                                                                  (rule "commute_and" (formula "15") (term "1,0,0,0"))
                                                                  (rule "commute_or" (formula "61") (term "0,1,0"))
                                                                  (rule "commute_and" (formula "32") (term "1,0,0,0"))
                                                                  (rule "shift_paren_or" (formula "11") (term "0,0,0,0"))
                                                                  (rule "shift_paren_or" (formula "10") (term "0,0,0,0"))
                                                                  (rule "distr_forallAnd" (formula "33") (term "0"))
                                                                  (rule "commute_and" (formula "29") (term "0,1,0,0,0"))
                                                                  (rule "distr_forallAnd" (formula "33"))
                                                                  (rule "andLeft" (formula "33"))
                                                                  (rule "commute_and" (formula "30") (term "0,1,0,0,0"))
                                                                  (rule "commute_and" (formula "26") (term "0,0,1,0,0,0"))
                                                                  (rule "commute_and" (formula "27") (term "0,0,1,0,0,0"))
                                                                  (rule "commute_or" (formula "5") (term "1,0,0,0"))
                                                                  (rule "commute_or" (formula "4") (term "1,0,0,0"))
                                                                  (rule "cnf_rightDist" (formula "13") (term "0,0,0"))
                                                                  (rule "distr_forallAnd" (formula "13") (term "0,0"))
                                                                  (rule "distr_forallAnd" (formula "13") (term "0"))
                                                                  (rule "distr_forallAnd" (formula "13"))
                                                                  (rule "andLeft" (formula "13"))
                                                                  (rule "commute_or" (formula "5") (term "0,0,0,0"))
                                                                  (rule "commute_or" (formula "4") (term "0,0,0,0"))
                                                                  (rule "cnf_rightDist" (formula "18") (term "0,0,0"))
                                                                  (rule "distr_forallAnd" (formula "18") (term "0,0"))
                                                                  (rule "distr_forallAnd" (formula "18") (term "0"))
                                                                  (rule "distr_forallAnd" (formula "18"))
                                                                  (rule "andLeft" (formula "18"))
                                                                  (rule "cnf_rightDist" (formula "39") (term "0,0,0"))
                                                                  (rule "distr_forallAnd" (formula "39") (term "0,0"))
                                                                  (rule "distr_forallAnd" (formula "39") (term "0"))
                                                                  (rule "distr_forallAnd" (formula "39"))
                                                                  (rule "andLeft" (formula "39"))
                                                                  (rule "cnf_rightDist" (formula "20") (term "0,0,0"))
                                                                  (rule "distr_forallAnd" (formula "20") (term "0,0"))
                                                                  (rule "distr_forallAnd" (formula "20") (term "0"))
                                                                  (rule "distr_forallAnd" (formula "20"))
                                                                  (rule "andLeft" (formula "20"))
                                                                  (rule "commute_and" (formula "11") (term "0,0,1,0,0,0"))
                                                                  (rule "commute_and" (formula "17") (term "0,0,0,1,0,0,0"))
                                                                  (rule "commute_and" (formula "10") (term "0,0,1,0,0,0"))
                                                                  (rule "commute_or" (formula "1") (term "1,0,0,0"))
                                                                  (rule "commute_or" (formula "2") (term "1,0,0,0"))
                                                                  (rule "commute_or" (formula "2") (term "0,0,0,0"))
                                                                  (rule "commute_or" (formula "1") (term "0,0,0,0"))
                                                                  (rule "commute_or" (formula "36") (term "0,0"))
                                                                  (rule "shift_paren_or" (formula "64") (term "0,0"))
                                                                  (rule "shift_paren_and" (formula "3") (term "0,1,0,0"))
                                                                   (builtin "One Step Simplification" (formula "3"))
                                                                  (rule "allLeft" (formula "46") (inst "t=i_1"))
                                                                  (rule "replace_known_left" (formula "46") (term "0,0,0") (ifseqformula "6"))
                                                                   (builtin "One Step Simplification" (formula "46"))
                                                                  (rule "inEqSimp_commuteGeq" (formula "46") (term "1"))
                                                                  (rule "inEqSimp_contradInEq1" (formula "46") (term "0") (ifseqformula "7"))
                                                                  (rule "qeq_literals" (formula "46") (term "0,0"))
                                                                   (builtin "One Step Simplification" (formula "46"))
                                                                  (rule "inEqSimp_contradInEq1" (formula "46") (ifseqformula "9"))
                                                                  (rule "andLeft" (formula "46"))
                                                                  (rule "inEqSimp_homoInEq1" (formula "46"))
                                                                  (rule "polySimp_pullOutFactor1b" (formula "46") (term "0"))
                                                                  (rule "add_literals" (formula "46") (term "1,1,0"))
                                                                  (rule "times_zero_1" (formula "46") (term "1,0"))
                                                                  (rule "add_literals" (formula "46") (term "0"))
                                                                  (rule "leq_literals" (formula "46"))
                                                                  (rule "closeFalse" (formula "46"))
                                                               )
                                                            )
                                                            (branch "ls.<created>@heapAfter_asList = TRUE FALSE"
                                                               (rule "selectOfAnonEQ" (formula "5") (term "0,1") (ifseqformula "49"))
                                                                (builtin "One Step Simplification" (formula "5") (ifInst ""  (formula "90")) (ifInst ""  (formula "77")))
                                                               (rule "selectCreatedOfAnonEQ" (formula "4") (term "0") (ifseqformula "49"))
                                                                (builtin "One Step Simplification" (formula "4") (ifInst ""  (formula "77")))
                                                               (rule "selectOfAnonEQ" (formula "93") (term "0,0,0") (ifseqformula "42"))
                                                                (builtin "One Step Simplification" (formula "93") (ifInst ""  (formula "90")) (ifInst ""  (formula "37")))
                                                               (rule "selectCreatedOfAnonEQ" (formula "77") (term "0") (ifseqformula "42"))
                                                                (builtin "One Step Simplification" (formula "77") (ifInst ""  (formula "37")))
                                                               (rule "closeTrue" (formula "77"))
                                                            )
                                                         )
                                                         (branch "ls.<created>@heapAfter_size = TRUE FALSE"
                                                            (rule "selectOfAnonEQ" (formula "3") (term "0,0") (ifseqformula "48"))
                                                             (builtin "One Step Simplification" (formula "3") (ifInst ""  (formula "89")))
                                                            (rule "ifthenelse_negated" (formula "3") (term "0,0"))
                                                            (rule "ifthenelse_split" (formula "3") (term "0,0"))
                                                            (branch "ls.<created>@heapAfter_asList = TRUE TRUE"
                                                               (rule "selectOfAnonEQ" (formula "93") (term "0,0,0") (ifseqformula "42"))
                                                                (builtin "One Step Simplification" (formula "93") (ifInst ""  (formula "90")) (ifInst ""  (formula "37")))
                                                               (rule "selectOfAnonEQ" (formula "4") (term "0,0") (ifseqformula "42"))
                                                                (builtin "One Step Simplification" (formula "4") (ifInst ""  (formula "90")) (ifInst ""  (formula "37")) (ifInst ""  (formula "37")))
                                                               (rule "selectCreatedOfAnonEQ" (formula "3") (term "0") (ifseqformula "41"))
                                                                (builtin "One Step Simplification" (formula "3") (ifInst ""  (formula "36")))
                                                               (rule "selectCreatedOfAnonEQ" (formula "75") (term "0") (ifseqformula "47"))
                                                                (builtin "One Step Simplification" (formula "75"))
                                                               (rule "orRight" (formula "75"))
                                                               (rule "selectCreatedOfAnonEQ" (formula "75") (term "0") (ifseqformula "40"))
                                                                (builtin "One Step Simplification" (formula "75") (ifInst ""  (formula "35")))
                                                               (rule "closeTrue" (formula "75"))
                                                            )
                                                            (branch "ls.<created>@heapAfter_asList = TRUE FALSE"
                                                               (rule "selectOfAnonEQ" (formula "93") (term "0,0,0") (ifseqformula "41"))
                                                                (builtin "One Step Simplification" (formula "93") (ifInst ""  (formula "90")) (ifInst ""  (formula "36")))
                                                               (rule "selectCreatedOfAnonEQ" (formula "76") (term "0") (ifseqformula "41"))
                                                                (builtin "One Step Simplification" (formula "76") (ifInst ""  (formula "36")))
                                                               (rule "closeTrue" (formula "76"))
                                                            )
                                                         )
                                                      )
                                                      (branch " ls.<created>@heapAfter_size = TRUE ∨ ls.<created>@anon_heap_LOOP«anonHeapFunction» = TRUE FALSE"
                                                         (rule "orRight" (formula "75"))
                                                         (rule "selectOfAnonEQ" (formula "92") (term "0,0,0") (ifseqformula "40"))
                                                          (builtin "One Step Simplification" (formula "92") (ifInst ""  (formula "89")) (ifInst ""  (formula "35")))
                                                         (rule "selectCreatedOfAnonEQ" (formula "75") (term "0") (ifseqformula "47"))
                                                          (builtin "One Step Simplification" (formula "75"))
                                                         (rule "orRight" (formula "75"))
                                                         (rule "selectOfAnonEQ" (formula "75") (term "0") (ifseqformula "40"))
                                                          (builtin "One Step Simplification" (formula "75") (ifInst ""  (formula "90")) (ifInst ""  (formula "35")) (ifInst ""  (formula "35")))
                                                         (rule "closeTrue" (formula "75"))
                                                      )
                                                   )
                                                   (branch "ls.<created>@heapAfter_asList = TRUE FALSE"
                                                      (rule "selectCreatedOfAnonEQ" (formula "1") (term "0") (ifseqformula "49"))
                                                       (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "91")))
                                                      (rule "selectCreatedOfAnonEQ" (formula "91") (term "0") (ifseqformula "42"))
                                                       (builtin "One Step Simplification" (formula "91") (ifInst ""  (formula "37")))
                                                      (rule "closeTrue" (formula "91"))
                                                   )
                                                )
                                                (branch "ls.<created>@heapAfter_size = TRUE FALSE"
                                                   (rule "ifthenelse_split" (formula "91") (term "0,0"))
                                                   (branch " if (ls.<created>@heapAfter_asList = TRUE) then (ls.<created>@heapAfter_asList) else (ls.<created>@anon_heap_size«anonHeapFunction») = TRUE ∨ ls.<created>@anon_heap_LOOP«anonHeapFunction» = TRUE TRUE"
                                                      (rule "ifthenelse_split" (formula "1") (term "0,0"))
                                                      (branch "ls.<created>@heapAfter_asList = TRUE TRUE"
                                                         (rule "selectOfAnonEQ" (formula "93") (term "0,0,0") (ifseqformula "42"))
                                                          (builtin "One Step Simplification" (formula "93") (ifInst ""  (formula "89")) (ifInst ""  (formula "37")))
                                                         (rule "selectCreatedOfAnonEQ" (formula "3") (term "0,0") (ifseqformula "42"))
                                                          (builtin "One Step Simplification" (formula "3") (ifInst ""  (formula "37")))
                                                         (rule "selectOfAnonEQ" (formula "90") (term "0") (ifseqformula "48"))
                                                          (builtin "One Step Simplification" (formula "90") (ifInst ""  (formula "88")) (ifInst ""  (formula "1")) (ifInst ""  (formula "1")))
                                                         (rule "closeTrue" (formula "90"))
                                                      )
                                                      (branch "ls.<created>@heapAfter_asList = TRUE FALSE"
                                                         (rule "selectCreatedOfAnonEQ" (formula "3") (term "0,0") (ifseqformula "42"))
                                                          (builtin "One Step Simplification" (formula "3") (ifInst ""  (formula "37")))
                                                         (rule "selectOfAnonEQ" (formula "76") (term "0") (ifseqformula "41"))
                                                          (builtin "One Step Simplification" (formula "76") (ifInst ""  (formula "89")) (ifInst ""  (formula "36")) (ifInst ""  (formula "36")))
                                                         (rule "closeTrue" (formula "76"))
                                                      )
                                                   )
                                                   (branch " if (ls.<created>@heapAfter_asList = TRUE) then (ls.<created>@heapAfter_asList) else (ls.<created>@anon_heap_size«anonHeapFunction») = TRUE ∨ ls.<created>@anon_heap_LOOP«anonHeapFunction» = TRUE FALSE"
                                                      (rule "orRight" (formula "91"))
                                                      (rule "ifthenelse_split" (formula "91") (term "0"))
                                                      (branch "ls.<created>@heapAfter_asList = TRUE TRUE"
                                                         (rule "close" (formula "92") (ifseqformula "1"))
                                                      )
                                                      (branch "ls.<created>@heapAfter_asList = TRUE FALSE"
                                                         (rule "selectCreatedOfAnonEQ" (formula "2") (term "0,0") (ifseqformula "41"))
                                                          (builtin "One Step Simplification" (formula "2") (ifInst ""  (formula "36")) (ifInst ""  (formula "93")))
                                                         (rule "selectCreatedOfAnonEQ" (formula "90") (term "0") (ifseqformula "40"))
                                                          (builtin "One Step Simplification" (formula "90") (ifInst ""  (formula "35")))
                                                         (rule "closeTrue" (formula "90"))
                                                      )
                                                   )
                                                )
                                             )
                                             (branch "ls.<created>@heapAfter_asList = TRUE FALSE"
                                                (rule "selectCreatedOfAnonEQ" (formula "1") (term "0") (ifseqformula "48"))
                                                 (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "76")))
                                                (rule "selectOfAnonEQ" (formula "92") (term "0,0,0") (ifseqformula "48"))
                                                 (builtin "One Step Simplification" (formula "92") (ifInst ""  (formula "89")) (ifInst ""  (formula "76")))
                                                (rule "selectCreatedOfAnonEQ" (formula "91") (term "0,0,0,0,0") (ifseqformula "48"))
                                                 (builtin "One Step Simplification" (formula "91") (ifInst ""  (formula "76")) (ifInst ""  (formula "1")))
                                                (rule "selectOfAnonEQ" (formula "4") (term "0,1") (ifseqformula "65"))
                                                 (builtin "One Step Simplification" (formula "4") (ifInst ""  (formula "89")) (ifInst ""  (formula "91")))
                                                (rule "selectOfAnon" (formula "4") (term "0,1"))
                                                 (builtin "One Step Simplification" (formula "4") (ifInst ""  (formula "89")))
                                                (rule "elementOfSingleton" (formula "4") (term "0,0,0,1"))
                                                 (builtin "One Step Simplification" (formula "4") (ifInst ""  (formula "90")))
                                                (rule "ifthenelse_negated" (formula "4") (term "0,1"))
                                                (rule "selectCreatedOfAnonEQ" (formula "76") (term "0") (ifseqformula "41"))
                                                 (builtin "One Step Simplification" (formula "76") (ifInst ""  (formula "36")))
                                                (rule "closeTrue" (formula "76"))
                                             )
                                          )
                                          (branch "ls.<created>@heapAfter_size = TRUE FALSE"
                                             (rule "selectCreatedOfAnonEQ" (formula "89") (term "0,0,0,0,0") (ifseqformula "47"))
                                              (builtin "One Step Simplification" (formula "89") (ifInst ""  (formula "90")))
                                             (rule "selectOfAnonEQ" (formula "3") (term "0,1") (ifseqformula "64"))
                                              (builtin "One Step Simplification" (formula "3") (ifInst ""  (formula "87")) (ifInst ""  (formula "1")))
                                             (rule "selectCreatedOfAnonEQ" (formula "89") (term "0,0,0,0,0,0") (ifseqformula "40"))
                                              (builtin "One Step Simplification" (formula "89") (ifInst ""  (formula "35")))
                                             (rule "selectOfAnon" (formula "3") (term "0,1"))
                                              (builtin "One Step Simplification" (formula "3") (ifInst ""  (formula "87")) (ifInst ""  (formula "90")))
                                             (rule "selectOfAnonEQ" (formula "1") (term "0,0") (ifseqformula "47"))
                                              (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "87")))
                                             (rule "ifthenelse_negated" (formula "1") (term "0,0"))
                                             (rule "ifthenelse_split" (formula "1") (term "0,0"))
                                             (branch "ls.<created>@heapAfter_asList = TRUE TRUE"
                                                (rule "selectCreatedOfAnonEQ" (formula "91") (term "0") (ifseqformula "48"))
                                                 (builtin "One Step Simplification" (formula "91") (ifInst ""  (formula "1")))
                                                (rule "closeTrue" (formula "91"))
                                             )
                                             (branch "ls.<created>@heapAfter_asList = TRUE FALSE"
                                                (rule "selectCreatedOfAnonEQ" (formula "91") (term "0") (ifseqformula "47"))
                                                 (builtin "One Step Simplification" (formula "91") (ifInst ""  (formula "75")))
                                                (rule "selectCreatedOfAnonEQ" (formula "75") (term "0") (ifseqformula "40"))
                                                 (builtin "One Step Simplification" (formula "75") (ifInst ""  (formula "35")))
                                                (rule "closeTrue" (formula "75"))
                                             )
                                          )
                                       )
                                       (branch " ls.<created>@heapAfter_size = TRUE ∨ ls.<created>@anon_heap_LOOP«anonHeapFunction» = TRUE FALSE"
                                          (rule "orRight" (formula "89"))
                                          (rule "selectCreatedOfAnonEQ" (formula "88") (term "0,0,0,0,0") (ifseqformula "46"))
                                           (builtin "One Step Simplification" (formula "88") (ifInst ""  (formula "90")) (ifInst ""  (formula "89")))
                                          (rule "ifthenelse_split" (formula "88") (term "0,0"))
                                          (branch " ls.<created>@heapAfter_asList = TRUE ∨ ls.<created>@anon_heap_size«anonHeapFunction» = TRUE TRUE"
                                             (rule "selectOfAnonEQ" (formula "3") (term "0,1") (ifseqformula "64"))
                                              (builtin "One Step Simplification" (formula "3") (ifInst ""  (formula "87")) (ifInst ""  (formula "90")) (ifInst ""  (formula "91")))
                                             (rule "selectCreatedOfAnonEQ" (formula "90") (term "0") (ifseqformula "47"))
                                              (builtin "One Step Simplification" (formula "90") (ifInst ""  (formula "1")))
                                             (rule "closeTrue" (formula "90"))
                                          )
                                          (branch " ls.<created>@heapAfter_asList = TRUE ∨ ls.<created>@anon_heap_size«anonHeapFunction» = TRUE FALSE"
                                             (rule "orRight" (formula "88"))
                                             (rule "selectCreatedOfAnonEQ" (formula "91") (term "0") (ifseqformula "46"))
                                              (builtin "One Step Simplification" (formula "91") (ifInst ""  (formula "88")) (ifInst ""  (formula "89")))
                                             (rule "selectOfAnonEQ" (formula "2") (term "0,1") (ifseqformula "63"))
                                              (builtin "One Step Simplification" (formula "2") (ifInst ""  (formula "86")) (ifInst ""  (formula "92")))
                                             (rule "ifthenelse_negated" (formula "2") (term "0,1"))
                                             (rule "selectOfAnonEQ" (formula "88") (term "0") (ifseqformula "39"))
                                              (builtin "One Step Simplification" (formula "88") (ifInst ""  (formula "86")) (ifInst ""  (formula "34")) (ifInst ""  (formula "34")))
                                             (rule "closeTrue" (formula "88"))
                                          )
                                       )
                                    )
                                 )
                              )
                           )
                           (branch "Case 2"
                              (rule "replaceKnownSelect_taclet000100_16" (formula "85") (term "0,0,0,1,0"))
                              (rule "replaceKnownSelect_taclet000100_16" (formula "85") (term "0,1,1,0,0"))
                              (rule "replaceKnownAuxiliaryConstant_taclet000100_17" (formula "85") (term "0,0,0,1,0"))
                              (rule "replaceKnownAuxiliaryConstant_taclet000100_17" (formula "85") (term "0,1,1,0,0"))
                              (rule "allRight" (formula "85") (inst "sk=i_1"))
                              (rule "impRight" (formula "85"))
                              (rule "notRight" (formula "86"))
                              (rule "andLeft" (formula "2"))
                              (rule "lenOfSeqConcat" (formula "3") (term "1"))
                               (builtin "One Step Simplification" (formula "3"))
                              (rule "polySimp_addComm0" (formula "3") (term "1"))
                              (rule "inEqSimp_ltToLeq" (formula "60") (term "0,0,0,1,0,1,0"))
                              (rule "polySimp_mulComm0" (formula "60") (term "1,0,0,0,0,0,1,0,1,0"))
                              (rule "inEqSimp_ltToLeq" (formula "18"))
                              (rule "polySimp_mulComm0" (formula "18") (term "1,0,0"))
                              (rule "polySimp_addComm1" (formula "18") (term "0"))
                              (rule "inEqSimp_ltToLeq" (formula "60") (term "0,0,0"))
                              (rule "polySimp_mulComm0" (formula "60") (term "1,0,0,0,0,0"))
                              (rule "inEqSimp_ltToLeq" (formula "60") (term "1,0,0,0,1,0"))
                              (rule "polySimp_mulComm0" (formula "60") (term "1,0,0,1,0,0,0,1,0"))
                              (rule "inEqSimp_ltToLeq" (formula "45") (term "0,0,0"))
                              (rule "polySimp_mulComm0" (formula "45") (term "1,0,0,0,0,0"))
                              (rule "inEqSimp_ltToLeq" (formula "58") (term "0,0,0"))
                              (rule "polySimp_mulComm0" (formula "58") (term "1,0,0,0,0,0"))
                              (rule "inEqSimp_ltToLeq" (formula "37") (term "0,0,0"))
                              (rule "polySimp_mulComm0" (formula "37") (term "1,0,0,0,0,0"))
                              (rule "inEqSimp_ltToLeq" (formula "73"))
                              (rule "polySimp_rightDist" (formula "73") (term "1,0,0"))
                              (rule "mul_literals" (formula "73") (term "0,1,0,0"))
                              (rule "polySimp_addAssoc" (formula "73") (term "0,0"))
                              (rule "add_literals" (formula "73") (term "0,0,0"))
                              (rule "add_zero_left" (formula "73") (term "0,0"))
                              (rule "polySimp_pullOutFactor2" (formula "73") (term "0"))
                              (rule "add_literals" (formula "73") (term "1,0"))
                              (rule "times_zero_1" (formula "73") (term "0"))
                              (rule "leq_literals" (formula "73"))
                              (rule "true_left" (formula "73"))
                              (rule "inEqSimp_ltToLeq" (formula "3"))
                              (rule "polySimp_rightDist" (formula "3") (term "1,0,0"))
                              (rule "mul_literals" (formula "3") (term "0,1,0,0"))
                              (rule "polySimp_addAssoc" (formula "3") (term "0,0"))
                              (rule "add_literals" (formula "3") (term "0,0,0"))
                              (rule "add_zero_left" (formula "3") (term "0,0"))
                              (rule "polySimp_addComm0" (formula "3") (term "0"))
                              (rule "inEqSimp_sepPosMonomial0" (formula "60") (term "0,0,0,1,0,1,0"))
                              (rule "polySimp_mulComm0" (formula "60") (term "1,0,0,0,1,0,1,0"))
                              (rule "polySimp_rightDist" (formula "60") (term "1,0,0,0,1,0,1,0"))
                              (rule "polySimp_mulLiterals" (formula "60") (term "1,1,0,0,0,1,0,1,0"))
                              (rule "mul_literals" (formula "60") (term "0,1,0,0,0,1,0,1,0"))
                              (rule "polySimp_elimOne" (formula "60") (term "1,1,0,0,0,1,0,1,0"))
                              (rule "inEqSimp_sepNegMonomial0" (formula "18"))
                              (rule "polySimp_mulLiterals" (formula "18") (term "0"))
                              (rule "polySimp_elimOne" (formula "18") (term "0"))
                              (rule "inEqSimp_sepPosMonomial0" (formula "60") (term "0,0,0"))
                              (rule "polySimp_mulComm0" (formula "60") (term "1,0,0,0"))
                              (rule "polySimp_rightDist" (formula "60") (term "1,0,0,0"))
                              (rule "mul_literals" (formula "60") (term "0,1,0,0,0"))
                              (rule "polySimp_mulLiterals" (formula "60") (term "1,1,0,0,0"))
                              (rule "polySimp_elimOne" (formula "60") (term "1,1,0,0,0"))
                              (rule "inEqSimp_sepPosMonomial0" (formula "60") (term "1,0,0,0,1,0"))
                              (rule "polySimp_mulComm0" (formula "60") (term "1,1,0,0,0,1,0"))
                              (rule "polySimp_rightDist" (formula "60") (term "1,1,0,0,0,1,0"))
                              (rule "polySimp_mulLiterals" (formula "60") (term "1,1,1,0,0,0,1,0"))
                              (rule "mul_literals" (formula "60") (term "0,1,1,0,0,0,1,0"))
                              (rule "polySimp_elimOne" (formula "60") (term "1,1,1,0,0,0,1,0"))
                              (rule "inEqSimp_sepPosMonomial0" (formula "45") (term "0,0,0"))
                              (rule "polySimp_mulComm0" (formula "45") (term "1,0,0,0"))
                              (rule "polySimp_rightDist" (formula "45") (term "1,0,0,0"))
                              (rule "polySimp_mulLiterals" (formula "45") (term "1,1,0,0,0"))
                              (rule "mul_literals" (formula "45") (term "0,1,0,0,0"))
                              (rule "polySimp_elimOne" (formula "45") (term "1,1,0,0,0"))
                              (rule "inEqSimp_sepPosMonomial0" (formula "58") (term "0,0,0"))
                              (rule "polySimp_mulComm0" (formula "58") (term "1,0,0,0"))
                              (rule "polySimp_rightDist" (formula "58") (term "1,0,0,0"))
                              (rule "mul_literals" (formula "58") (term "0,1,0,0,0"))
                              (rule "polySimp_mulLiterals" (formula "58") (term "1,1,0,0,0"))
                              (rule "polySimp_elimOne" (formula "58") (term "1,1,0,0,0"))
                              (rule "inEqSimp_sepPosMonomial0" (formula "37") (term "0,0,0"))
                              (rule "polySimp_mulComm0" (formula "37") (term "1,0,0,0"))
                              (rule "polySimp_rightDist" (formula "37") (term "1,0,0,0"))
                              (rule "mul_literals" (formula "37") (term "0,1,0,0,0"))
                              (rule "polySimp_mulLiterals" (formula "37") (term "1,1,0,0,0"))
                              (rule "polySimp_elimOne" (formula "37") (term "1,1,0,0,0"))
                              (rule "inEqSimp_sepNegMonomial0" (formula "3"))
                              (rule "polySimp_mulLiterals" (formula "3") (term "0"))
                              (rule "polySimp_elimOne" (formula "3") (term "0"))
                              (rule "inEqSimp_subsumption1" (formula "62") (ifseqformula "54"))
                              (rule "leq_literals" (formula "62") (term "0"))
                               (builtin "One Step Simplification" (formula "62"))
                              (rule "true_left" (formula "62"))
                              (rule "inEqSimp_subsumption1" (formula "55") (ifseqformula "18"))
                              (rule "inEqSimp_homoInEq0" (formula "55") (term "0"))
                              (rule "polySimp_pullOutFactor1b" (formula "55") (term "0,0"))
                              (rule "add_literals" (formula "55") (term "1,1,0,0"))
                              (rule "times_zero_1" (formula "55") (term "1,0,0"))
                              (rule "add_literals" (formula "55") (term "0,0"))
                              (rule "qeq_literals" (formula "55") (term "0"))
                               (builtin "One Step Simplification" (formula "55"))
                              (rule "true_left" (formula "55"))
                              (rule "inEqSimp_subsumption1" (formula "49") (ifseqformula "50"))
                              (rule "leq_literals" (formula "49") (term "0"))
                               (builtin "One Step Simplification" (formula "49"))
                              (rule "true_left" (formula "49"))
                              (rule "getOfSeqConcat" (formula "1") (term "0"))
                              (rule "polySimp_elimSub" (formula "1") (term "1,2,0"))
                              (rule "ifEqualsNull" (formula "1"))
                              (rule "getOfSeqSingleton" (formula "1") (term "0,1,1"))
                              (rule "ifEqualsNull" (formula "1") (term "1,1"))
                              (rule "inEqSimp_ltToLeq" (formula "1") (term "0,0,1"))
                              (rule "polySimp_mulComm0" (formula "1") (term "1,0,0,0,0,1"))
                              (rule "polySimp_addComm1" (formula "1") (term "0,0,0,1"))
                              (rule "inEqSimp_ltToLeq" (formula "1") (term "0,0"))
                              (rule "polySimp_mulComm0" (formula "1") (term "1,0,0,0,0"))
                              (rule "polySimp_addComm1" (formula "1") (term "0,0,0"))
                              (rule "polySimp_sepNegMonomial" (formula "1") (term "0,0,1,1"))
                              (rule "polySimp_mulLiterals" (formula "1") (term "0,0,0,1,1"))
                              (rule "polySimp_elimOne" (formula "1") (term "0,0,0,1,1"))
                              (rule "polySimp_sepNegMonomial" (formula "1") (term "0,0,1,1,1"))
                              (rule "polySimp_mulLiterals" (formula "1") (term "0,0,0,1,1,1"))
                              (rule "polySimp_elimOne" (formula "1") (term "0,0,0,1,1,1"))
                              (rule "inEqSimp_sepNegMonomial0" (formula "1") (term "0,0,1"))
                              (rule "polySimp_mulLiterals" (formula "1") (term "0,0,0,1"))
                              (rule "polySimp_elimOne" (formula "1") (term "0,0,0,1"))
                              (rule "inEqSimp_sepNegMonomial0" (formula "1") (term "0,0"))
                              (rule "polySimp_mulLiterals" (formula "1") (term "0,0,0"))
                              (rule "polySimp_elimOne" (formula "1") (term "0,0,0"))
                              (rule "getOfSeqSubEQ" (formula "1") (term "0,1,0") (ifseqformula "69"))
                              (rule "add_zero_right" (formula "1") (term "1,1,0,1,0"))
                              (rule "polySimp_elimSub" (formula "1") (term "1,1,0,0,1,0"))
                              (rule "mul_literals" (formula "1") (term "1,1,1,0,0,1,0"))
                              (rule "add_zero_right" (formula "1") (term "1,1,0,0,1,0"))
                              (rule "ifEqualsNull" (formula "1") (term "1,0"))
                              (rule "inEqSimp_ltToLeq" (formula "1") (term "1,0,0,1,0"))
                              (rule "polySimp_mulComm0" (formula "1") (term "1,0,0,1,0,0,1,0"))
                              (rule "polySimp_addComm1" (formula "1") (term "0,1,0,0,1,0"))
                              (rule "inEqSimp_ltToLeq" (formula "1") (term "1,0,0,1,1,0"))
                              (rule "polySimp_mulComm0" (formula "1") (term "1,0,0,1,0,0,1,1,0"))
                              (rule "polySimp_addComm1" (formula "1") (term "0,1,0,0,1,1,0"))
                              (rule "inEqSimp_commuteLeq" (formula "1") (term "0,0,0,1,0"))
                              (rule "replace_known_left" (formula "1") (term "0,0,0,1,0") (ifseqformula "2"))
                               (builtin "One Step Simplification" (formula "1"))
                              (rule "inEqSimp_commuteLeq" (formula "1") (term "0,0,0,1,1,0"))
                              (rule "replace_known_left" (formula "1") (term "0,0,0,1,1,0") (ifseqformula "2"))
                               (builtin "One Step Simplification" (formula "1"))
                              (rule "inEqSimp_sepNegMonomial0" (formula "1") (term "0,0,1,0"))
                              (rule "polySimp_mulLiterals" (formula "1") (term "0,0,0,1,0"))
                              (rule "polySimp_elimOne" (formula "1") (term "0,0,0,1,0"))
                              (rule "inEqSimp_sepNegMonomial0" (formula "1") (term "0,0,1,1,0"))
                              (rule "polySimp_mulLiterals" (formula "1") (term "0,0,0,1,1,0"))
                              (rule "polySimp_elimOne" (formula "1") (term "0,0,0,1,1,0"))
                              (rule "inEqSimp_exactShadow3" (formula "18") (ifseqformula "48"))
                              (rule "polySimp_rightDist" (formula "18") (term "0,0"))
                              (rule "mul_literals" (formula "18") (term "0,0,0"))
                              (rule "polySimp_addComm1" (formula "18") (term "0"))
                              (rule "add_literals" (formula "18") (term "0,0"))
                              (rule "inEqSimp_sepNegMonomial1" (formula "18"))
                              (rule "polySimp_mulLiterals" (formula "18") (term "0"))
                              (rule "polySimp_elimOne" (formula "18") (term "0"))
                              (rule "inEqSimp_subsumption0" (formula "60") (ifseqformula "18"))
                              (rule "leq_literals" (formula "60") (term "0"))
                               (builtin "One Step Simplification" (formula "60"))
                              (rule "true_left" (formula "60"))
                              (rule "inEqSimp_notGeq" (formula "1") (term "0,1"))
                              (rule "polySimp_rightDist" (formula "1") (term "1,0,0,0,1"))
                              (rule "mul_literals" (formula "1") (term "0,1,0,0,0,1"))
                              (rule "polySimp_addAssoc" (formula "1") (term "0,0,0,1"))
                              (rule "add_literals" (formula "1") (term "0,0,0,0,1"))
                              (rule "add_zero_left" (formula "1") (term "0,0,0,1"))
                              (rule "inEqSimp_sepPosMonomial0" (formula "1") (term "0,1"))
                              (rule "polySimp_mulLiterals" (formula "1") (term "1,0,1"))
                              (rule "polySimp_elimOne" (formula "1") (term "1,0,1"))
                              (rule "inEqSimp_notGeq" (formula "1") (term "0,1,1,0"))
                              (rule "polySimp_rightDist" (formula "1") (term "1,0,0,0,1,1,0"))
                              (rule "mul_literals" (formula "1") (term "0,1,0,0,0,1,1,0"))
                              (rule "polySimp_addAssoc" (formula "1") (term "0,0,0,1,1,0"))
                              (rule "add_literals" (formula "1") (term "0,0,0,0,1,1,0"))
                              (rule "add_zero_left" (formula "1") (term "0,0,0,1,1,0"))
                              (rule "inEqSimp_sepPosMonomial0" (formula "1") (term "0,1,1,0"))
                              (rule "polySimp_mulLiterals" (formula "1") (term "1,0,1,1,0"))
                              (rule "polySimp_elimOne" (formula "1") (term "1,0,1,1,0"))
                              (rule "nnf_imp2or" (formula "31") (term "0,0"))
                               (builtin "One Step Simplification" (formula "31"))
                              (rule "nnf_imp2or" (formula "27") (term "0,0,0"))
                              (rule "nnf_imp2or" (formula "6") (term "0,0,0"))
                              (rule "nnf_imp2or" (formula "28") (term "0,0,0"))
                              (rule "nnf_imp2or" (formula "22") (term "0,0,0"))
                              (rule "nnf_imp2or" (formula "11") (term "0,0,0"))
                              (rule "nnf_imp2or" (formula "25") (term "0,0,0"))
                              (rule "nnf_imp2or" (formula "29") (term "0,0,0"))
                              (rule "nnf_imp2or" (formula "21") (term "0,0,0"))
                              (rule "nnf_imp2or" (formula "24") (term "0,0,0"))
                              (rule "nnf_imp2or" (formula "13") (term "0,0,0"))
                              (rule "nnf_imp2or" (formula "12") (term "0,0,0"))
                              (rule "nnf_imp2or" (formula "4") (term "0,0,0"))
                              (rule "nnf_imp2or" (formula "32") (term "0,0,0"))
                              (rule "nnf_imp2or" (formula "10") (term "0,0,0"))
                              (rule "nnf_imp2or" (formula "5") (term "0,0,0"))
                              (rule "nnf_imp2or" (formula "8") (term "0,0,0"))
                              (rule "nnf_imp2or" (formula "23") (term "0,0,0"))
                              (rule "nnf_imp2or" (formula "9") (term "0,0,0"))
                              (rule "nnf_imp2or" (formula "33") (term "0,0,0"))
                              (rule "nnf_imp2or" (formula "7") (term "0,0,0"))
                              (rule "nnf_imp2or" (formula "26") (term "0,0,0"))
                              (rule "nnf_imp2or" (formula "30") (term "0,0,0"))
                              (rule "nnf_imp2or" (formula "59") (term "0"))
                              (rule "nnf_imp2or" (formula "46") (term "0"))
                              (rule "nnf_imp2or" (formula "57") (term "0"))
                              (rule "nnf_imp2or" (formula "38") (term "0"))
                              (rule "nnf_notAnd" (formula "27") (term "0,0,0,0"))
                               (builtin "One Step Simplification" (formula "27"))
                              (rule "nnf_imp2or" (formula "6") (term "1,0,0,0"))
                              (rule "nnf_notAnd" (formula "6") (term "0,0,0,0"))
                               (builtin "One Step Simplification" (formula "6"))
                              (rule "nnf_notAnd" (formula "59") (term "0,0"))
                              (rule "inEqSimp_notGeq" (formula "59") (term "1,0,0"))
                              (rule "mul_literals" (formula "59") (term "1,0,0,1,0,0"))
                              (rule "add_literals" (formula "59") (term "0,0,1,0,0"))
                              (rule "inEqSimp_sepPosMonomial0" (formula "59") (term "1,0,0"))
                              (rule "mul_literals" (formula "59") (term "1,1,0,0"))
                              (rule "inEqSimp_notLeq" (formula "59") (term "0,0,0"))
                              (rule "polySimp_rightDist" (formula "59") (term "1,0,0,0,0,0"))
                              (rule "mul_literals" (formula "59") (term "0,1,0,0,0,0,0"))
                              (rule "polySimp_addAssoc" (formula "59") (term "0,0,0,0,0"))
                              (rule "add_literals" (formula "59") (term "0,0,0,0,0,0"))
                              (rule "add_zero_left" (formula "59") (term "0,0,0,0,0"))
                              (rule "inEqSimp_sepPosMonomial1" (formula "59") (term "0,0,0"))
                              (rule "polySimp_mulLiterals" (formula "59") (term "1,0,0,0"))
                              (rule "polySimp_elimOne" (formula "59") (term "1,0,0,0"))
                              (rule "nnf_notOr" (formula "59") (term "1,0"))
                              (rule "nnf_notAnd" (formula "28") (term "0,0,0,0"))
                               (builtin "One Step Simplification" (formula "28"))
                              (rule "nnf_notAnd" (formula "46") (term "0,0"))
                              (rule "inEqSimp_notLeq" (formula "46") (term "0,0,0"))
                              (rule "polySimp_rightDist" (formula "46") (term "1,0,0,0,0,0"))
                              (rule "mul_literals" (formula "46") (term "0,1,0,0,0,0,0"))
                              (rule "polySimp_addAssoc" (formula "46") (term "0,0,0,0,0"))
                              (rule "add_literals" (formula "46") (term "0,0,0,0,0,0"))
                              (rule "add_zero_left" (formula "46") (term "0,0,0,0,0"))
                              (rule "inEqSimp_sepPosMonomial1" (formula "46") (term "0,0,0"))
                              (rule "polySimp_mulLiterals" (formula "46") (term "1,0,0,0"))
                              (rule "polySimp_elimOne" (formula "46") (term "1,0,0,0"))
                              (rule "inEqSimp_notGeq" (formula "46") (term "1,0,0"))
                              (rule "mul_literals" (formula "46") (term "1,0,0,1,0,0"))
                              (rule "add_literals" (formula "46") (term "0,0,1,0,0"))
                              (rule "inEqSimp_sepPosMonomial0" (formula "46") (term "1,0,0"))
                              (rule "mul_literals" (formula "46") (term "1,1,0,0"))
                              (rule "nnf_imp2or" (formula "22") (term "1,0,0,0"))
                              (rule "nnf_notAnd" (formula "22") (term "0,0,0,0"))
                               (builtin "One Step Simplification" (formula "22"))
                              (rule "nnf_imp2or" (formula "11") (term "1,0,0,0"))
                              (rule "nnf_notAnd" (formula "57") (term "0,0"))
                              (rule "inEqSimp_notGeq" (formula "57") (term "1,0,0"))
                              (rule "mul_literals" (formula "57") (term "1,0,0,1,0,0"))
                              (rule "add_zero_right" (formula "57") (term "0,0,1,0,0"))
                              (rule "inEqSimp_sepPosMonomial0" (formula "57") (term "1,0,0"))
                              (rule "mul_literals" (formula "57") (term "1,1,0,0"))
                              (rule "inEqSimp_notLeq" (formula "57") (term "0,0,0"))
                              (rule "polySimp_rightDist" (formula "57") (term "1,0,0,0,0,0"))
                              (rule "mul_literals" (formula "57") (term "0,1,0,0,0,0,0"))
                              (rule "polySimp_addAssoc" (formula "57") (term "0,0,0,0,0"))
                              (rule "add_literals" (formula "57") (term "0,0,0,0,0,0"))
                              (rule "add_zero_left" (formula "57") (term "0,0,0,0,0"))
                              (rule "inEqSimp_sepPosMonomial1" (formula "57") (term "0,0,0"))
                              (rule "polySimp_mulLiterals" (formula "57") (term "1,0,0,0"))
                              (rule "polySimp_elimOne" (formula "57") (term "1,0,0,0"))
                              (rule "nnf_notAnd" (formula "11") (term "0,0,0,0"))
                               (builtin "One Step Simplification" (formula "11"))
                              (rule "nnf_notAnd" (formula "38") (term "0,0"))
                              (rule "inEqSimp_notGeq" (formula "38") (term "1,0,0"))
                              (rule "times_zero_1" (formula "38") (term "1,0,0,1,0,0"))
                              (rule "add_zero_right" (formula "38") (term "0,0,1,0,0"))
                              (rule "inEqSimp_sepPosMonomial0" (formula "38") (term "1,0,0"))
                              (rule "mul_literals" (formula "38") (term "1,1,0,0"))
                              (rule "inEqSimp_notLeq" (formula "38") (term "0,0,0"))
                              (rule "polySimp_rightDist" (formula "38") (term "1,0,0,0,0,0"))
                              (rule "mul_literals" (formula "38") (term "0,1,0,0,0,0,0"))
                              (rule "polySimp_addAssoc" (formula "38") (term "0,0,0,0,0"))
                              (rule "add_literals" (formula "38") (term "0,0,0,0,0,0"))
                              (rule "add_zero_left" (formula "38") (term "0,0,0,0,0"))
                              (rule "inEqSimp_sepPosMonomial1" (formula "38") (term "0,0,0"))
                              (rule "polySimp_mulLiterals" (formula "38") (term "1,0,0,0"))
                              (rule "polySimp_elimOne" (formula "38") (term "1,0,0,0"))
                              (rule "nnf_imp2or" (formula "25") (term "1,0,0,0"))
                              (rule "nnf_notAnd" (formula "25") (term "0,0,0,0"))
                               (builtin "One Step Simplification" (formula "25"))
                              (rule "nnf_notAnd" (formula "29") (term "0,0,0,0"))
                               (builtin "One Step Simplification" (formula "29"))
                              (rule "nnf_imp2or" (formula "21") (term "1,0,0,0"))
                              (rule "nnf_notAnd" (formula "21") (term "0,0,0,0"))
                               (builtin "One Step Simplification" (formula "21"))
                              (rule "nnf_notAnd" (formula "24") (term "0,0,0,0"))
                               (builtin "One Step Simplification" (formula "24"))
                              (rule "nnf_imp2or" (formula "13") (term "1,0,0,0"))
                              (rule "nnf_notAnd" (formula "13") (term "0,0,0,0"))
                               (builtin "One Step Simplification" (formula "13"))
                              (rule "nnf_notAnd" (formula "12") (term "0,0,0,0"))
                               (builtin "One Step Simplification" (formula "12"))
                              (rule "nnf_imp2or" (formula "4") (term "1,0,0,0"))
                              (rule "nnf_notAnd" (formula "4") (term "0,0,0,0"))
                               (builtin "One Step Simplification" (formula "4"))
                              (rule "nnf_imp2or" (formula "32") (term "1,0,0,0"))
                              (rule "nnf_notAnd" (formula "32") (term "0,0,0,0"))
                               (builtin "One Step Simplification" (formula "32"))
                              (rule "nnf_imp2or" (formula "10") (term "1,0,0,0"))
                              (rule "nnf_notAnd" (formula "10") (term "0,0,0,0"))
                               (builtin "One Step Simplification" (formula "10"))
                              (rule "nnf_imp2or" (formula "5") (term "1,0,0,0"))
                              (rule "nnf_notAnd" (formula "5") (term "0,0,0,0"))
                               (builtin "One Step Simplification" (formula "5"))
                              (rule "nnf_imp2or" (formula "8") (term "1,0,0,0"))
                              (rule "nnf_notAnd" (formula "8") (term "0,0,0,0"))
                               (builtin "One Step Simplification" (formula "8"))
                              (rule "nnf_imp2or" (formula "23") (term "1,0,0,0"))
                              (rule "nnf_notAnd" (formula "23") (term "0,0,0,0"))
                               (builtin "One Step Simplification" (formula "23"))
                              (rule "nnf_imp2or" (formula "9") (term "1,0,0,0"))
                              (rule "nnf_notAnd" (formula "9") (term "0,0,0,0"))
                               (builtin "One Step Simplification" (formula "9"))
                              (rule "nnf_notAnd" (formula "33") (term "0,0,0,0"))
                               (builtin "One Step Simplification" (formula "33"))
                              (rule "nnf_imp2or" (formula "7") (term "1,0,0,0"))
                              (rule "nnf_notAnd" (formula "7") (term "0,0,0,0"))
                               (builtin "One Step Simplification" (formula "7"))
                              (rule "nnf_notAnd" (formula "26") (term "0,0,0,0"))
                               (builtin "One Step Simplification" (formula "26"))
                              (rule "nnf_notAnd" (formula "30") (term "0,0,0,0"))
                               (builtin "One Step Simplification" (formula "30"))
                              (rule "nnf_imp2or" (formula "27") (term "1,0,0,0"))
                              (rule "nnf_notAnd" (formula "59") (term "0,1,0"))
                              (rule "inEqSimp_notGeq" (formula "59") (term "1,0,1,0"))
                              (rule "times_zero_1" (formula "59") (term "1,0,0,1,0,1,0"))
                              (rule "add_literals" (formula "59") (term "0,0,1,0,1,0"))
                              (rule "inEqSimp_sepPosMonomial0" (formula "59") (term "1,0,1,0"))
                              (rule "mul_literals" (formula "59") (term "1,1,0,1,0"))
                              (rule "nnf_notAnd" (formula "59") (term "1,1,0"))
                               (builtin "One Step Simplification" (formula "59"))
                              (rule "nnf_notOr" (formula "27") (term "1,0,0,0,0"))
                              (rule "nnf_notOr" (formula "6") (term "1,0,0,0,0"))
                              (rule "nnf_imp2or" (formula "28") (term "1,0,0,0"))
                              (rule "nnf_notOr" (formula "28") (term "1,0,0,0,0"))
                              (rule "nnf_notOr" (formula "22") (term "1,0,0,0,0"))
                              (rule "nnf_notOr" (formula "11") (term "1,0,0,0,0"))
                              (rule "nnf_imp2or" (formula "29") (term "1,0,0,0"))
                              (rule "nnf_imp2or" (formula "24") (term "1,0,0,0"))
                              (rule "nnf_notOr" (formula "25") (term "1,0,0,0,0"))
                              (rule "nnf_imp2or" (formula "12") (term "1,0,0,0"))
                              (rule "nnf_notOr" (formula "29") (term "1,0,0,0,0"))
                              (rule "nnf_notOr" (formula "21") (term "1,0,0,0,0"))
                              (rule "nnf_notOr" (formula "24") (term "1,0,0,0,0"))
                              (rule "nnf_notOr" (formula "13") (term "1,0,0,0,0"))
                              (rule "nnf_notOr" (formula "12") (term "1,0,0,0,0"))
                              (rule "nnf_notOr" (formula "4") (term "0,0,0,0,0"))
                              (rule "nnf_notOr" (formula "32") (term "1,0,0,0,0"))
                              (rule "nnf_notOr" (formula "10") (term "1,0,0,0,0"))
                              (rule "nnf_notOr" (formula "5") (term "0,0,0,0,0"))
                              (rule "nnf_imp2or" (formula "33") (term "1,0,0,0"))
                              (rule "nnf_notOr" (formula "8") (term "1,0,0,0,0"))
                              (rule "nnf_notOr" (formula "23") (term "1,0,0,0,0"))
                              (rule "nnf_imp2or" (formula "26") (term "1,0,0,0"))
                              (rule "nnf_imp2or" (formula "30") (term "1,0,0,0"))
                              (rule "nnf_notOr" (formula "9") (term "1,0,0,0,0"))
                              (rule "nnf_notOr" (formula "33") (term "1,0,0,0,0"))
                              (rule "nnf_notOr" (formula "7") (term "1,0,0,0,0"))
                              (rule "nnf_notOr" (formula "26") (term "1,0,0,0,0"))
                              (rule "nnf_notAnd" (formula "59") (term "0,0,1,0"))
                              (rule "inEqSimp_notLeq" (formula "59") (term "1,0,0,1,0"))
                              (rule "polySimp_rightDist" (formula "59") (term "1,0,0,1,0,0,1,0"))
                              (rule "mul_literals" (formula "59") (term "0,1,0,0,1,0,0,1,0"))
                              (rule "polySimp_addAssoc" (formula "59") (term "0,0,1,0,0,1,0"))
                              (rule "add_literals" (formula "59") (term "0,0,0,1,0,0,1,0"))
                              (rule "add_zero_left" (formula "59") (term "0,0,1,0,0,1,0"))
                              (rule "inEqSimp_sepPosMonomial1" (formula "59") (term "1,0,0,1,0"))
                              (rule "polySimp_mulLiterals" (formula "59") (term "1,1,0,0,1,0"))
                              (rule "polySimp_elimOne" (formula "59") (term "1,1,0,0,1,0"))
                              (rule "nnf_notOr" (formula "30") (term "1,0,0,0,0"))
                              (rule "nnf_notOr" (formula "22") (term "0,1,0,0,0,0"))
                              (rule "nnf_notOr" (formula "11") (term "0,1,0,0,0,0"))
                              (rule "nnf_notOr" (formula "25") (term "0,1,0,0,0,0"))
                              (rule "nnf_notOr" (formula "21") (term "0,1,0,0,0,0"))
                              (rule "nnf_notOr" (formula "4") (term "0,0,0,0,0,0"))
                              (rule "nnf_notOr" (formula "10") (term "0,1,0,0,0,0"))
                              (rule "nnf_notOr" (formula "5") (term "0,0,0,0,0,0"))
                              (rule "nnf_notOr" (formula "26") (term "0,1,0,0,0,0"))
                              (rule "nnf_notOr" (formula "22") (term "0,0,1,0,0,0,0"))
                              (rule "nnf_notOr" (formula "11") (term "0,0,1,0,0,0,0"))
                              (rule "nnf_notOr" (formula "21") (term "0,0,1,0,0,0,0"))
                              (rule "nnf_notOr" (formula "4") (term "0,0,0,0,0,0,0"))
                              (rule "nnf_notOr" (formula "10") (term "0,0,1,0,0,0,0"))
                              (rule "nnf_notOr" (formula "5") (term "0,0,0,0,0,0,0"))
                              (rule "nnf_notOr" (formula "11") (term "0,0,0,1,0,0,0,0"))
                              (rule "nnf_notOr" (formula "4") (term "1,0,0,0,0,0,0,0"))
                              (rule "nnf_notOr" (formula "10") (term "0,0,0,1,0,0,0,0"))
                              (rule "nnf_notOr" (formula "5") (term "1,0,0,0,0,0,0,0"))
                              (rule "nnf_notOr" (formula "4") (term "0,1,0,0,0,0,0,0,0"))
                              (rule "nnf_notOr" (formula "5") (term "0,1,0,0,0,0,0,0,0"))
                              (rule "commute_and" (formula "1") (term "0,1,1"))
                              (rule "commute_and" (formula "1") (term "1,1,1"))
                              (rule "commute_and" (formula "1") (term "0,1,0"))
                              (rule "commute_or_2" (formula "46") (term "0"))
                              (rule "cnf_rightDist" (formula "31") (term "0,0"))
                              (rule "ifthenelse_split" (formula "56") (term "0"))
                              (branch "result_46 = ls TRUE"
                                 (rule "applyEqReverse" (formula "58") (term "0,0,0,1,0") (ifseqformula "57"))
                                 (rule "applyEqReverse" (formula "55") (term "0,0") (ifseqformula "57"))
                                 (rule "applyEqReverse" (formula "65") (term "0,0") (ifseqformula "57"))
                                 (rule "hideAuxiliaryEq" (formula "57"))
                                 (rule "applyEq" (formula "61") (term "0,1,0,0") (ifseqformula "56"))
                                 (rule "applyEq" (formula "73") (term "0") (ifseqformula "56"))
                                 (rule "applyEq" (formula "68") (term "1,0,0") (ifseqformula "56"))
                                 (rule "applyEq" (formula "1") (term "1,0,0,0,0") (ifseqformula "56"))
                                 (rule "applyEq" (formula "44") (term "0,0") (ifseqformula "56"))
                                 (rule "applyEq" (formula "69") (term "1,1") (ifseqformula "56"))
                                 (rule "lenOfSeqSubEQ" (formula "1") (term "0,0,0") (ifseqformula "69"))
                                 (rule "polySimp_elimSub" (formula "1") (term "1,0,0,0"))
                                 (rule "mul_literals" (formula "1") (term "1,1,0,0,0"))
                                 (rule "add_zero_right" (formula "1") (term "1,0,0,0"))
                                 (rule "lenOfSeqSubEQ" (formula "55") (term "0") (ifseqformula "69"))
                                 (rule "polySimp_elimSub" (formula "55") (term "1,0"))
                                 (rule "mul_literals" (formula "55") (term "1,1,0"))
                                 (rule "add_zero_right" (formula "55") (term "1,0"))
                                 (rule "inEqSimp_ltToLeq" (formula "1") (term "0,0,0,0"))
                                 (rule "add_zero_right" (formula "1") (term "0,0,0,0,0"))
                                 (rule "polySimp_mulComm0" (formula "1") (term "1,0,0,0,0,0"))
                                 (rule "inEqSimp_ltToLeq" (formula "55") (term "0,0"))
                                 (rule "add_zero_right" (formula "55") (term "0,0,0"))
                                 (rule "polySimp_mulComm0" (formula "55") (term "1,0,0,0"))
                                 (rule "applyEq" (formula "43") (term "1,0") (ifseqformula "56"))
                                 (rule "applyEq" (formula "46") (term "1,0,1,0,0,0") (ifseqformula "56"))
                                 (rule "applyEq" (formula "1") (term "1,0,0,1,0,1,0") (ifseqformula "56"))
                                 (rule "lenOfSeqSubEQ" (formula "1") (term "0,1,0,1,0") (ifseqformula "69"))
                                 (rule "polySimp_elimSub" (formula "1") (term "1,0,1,0,1,0"))
                                 (rule "mul_literals" (formula "1") (term "1,1,0,1,0,1,0"))
                                 (rule "add_zero_right" (formula "1") (term "1,0,1,0,1,0"))
                                 (rule "inEqSimp_ltToLeq" (formula "1") (term "0,0,1,0,1,0"))
                                 (rule "add_zero_right" (formula "1") (term "0,0,0,1,0,1,0"))
                                 (rule "polySimp_mulComm0" (formula "1") (term "1,0,0,0,1,0,1,0"))
                                 (rule "applyEq" (formula "70") (term "1,0,0") (ifseqformula "56"))
                                 (rule "applyEq" (formula "58") (term "1,0,0") (ifseqformula "56"))
                                 (rule "lenOfSeqSubEQ" (formula "58") (term "0") (ifseqformula "69"))
                                 (rule "polySimp_elimSub" (formula "58") (term "1,0"))
                                 (rule "times_zero_2" (formula "58") (term "1,1,0"))
                                 (rule "add_zero_right" (formula "58") (term "1,0"))
                                 (rule "inEqSimp_ltToLeq" (formula "58") (term "0,0"))
                                 (rule "add_zero_right" (formula "58") (term "0,0,0"))
                                 (rule "polySimp_mulComm0" (formula "58") (term "1,0,0,0"))
                                 (rule "applyEq" (formula "1") (term "1,0,0,0,1,1,0") (ifseqformula "56"))
                                 (rule "lenOfSeqSubEQ" (formula "1") (term "0,0,1,1,0") (ifseqformula "69"))
                                 (rule "polySimp_elimSub" (formula "1") (term "1,0,0,1,1,0"))
                                 (rule "times_zero_2" (formula "1") (term "1,1,0,0,1,1,0"))
                                 (rule "add_zero_right" (formula "1") (term "1,0,0,1,1,0"))
                                 (rule "inEqSimp_ltToLeq" (formula "1") (term "0,0,0,1,1,0"))
                                 (rule "add_zero_right" (formula "1") (term "0,0,0,0,1,1,0"))
                                 (rule "polySimp_mulComm0" (formula "1") (term "1,0,0,0,0,1,1,0"))
                                 (rule "applyEq" (formula "1") (term "1,0,0,1,0,1,1") (ifseqformula "56"))
                                 (rule "lenOfSeqSubEQ" (formula "1") (term "0,1,0,1,1") (ifseqformula "69"))
                                 (rule "polySimp_elimSub" (formula "1") (term "1,0,1,0,1,1"))
                                 (rule "mul_literals" (formula "1") (term "1,1,0,1,0,1,1"))
                                 (rule "add_zero_right" (formula "1") (term "1,0,1,0,1,1"))
                                 (rule "inEqSimp_ltToLeq" (formula "1") (term "0,0,1,0,1,1"))
                                 (rule "add_zero_right" (formula "1") (term "0,0,0,1,0,1,1"))
                                 (rule "polySimp_mulComm0" (formula "1") (term "1,0,0,0,1,0,1,1"))
                                 (rule "applyEq" (formula "3") (term "1,0,0") (ifseqformula "56"))
                                 (rule "lenOfSeqSubEQ" (formula "3") (term "0") (ifseqformula "69"))
                                 (rule "polySimp_elimSub" (formula "3") (term "1,0"))
                                 (rule "mul_literals" (formula "3") (term "1,1,0"))
                                 (rule "add_zero_right" (formula "3") (term "1,0"))
                                 (rule "inEqSimp_ltToLeq" (formula "3") (term "0,0"))
                                 (rule "add_zero_right" (formula "3") (term "0,0,0"))
                                 (rule "polySimp_mulComm0" (formula "3") (term "1,0,0,0"))
                                 (rule "applyEq" (formula "66") (term "0,1,0") (ifseqformula "56"))
                                 (rule "applyEq" (formula "69") (term "1,0,0") (ifseqformula "56"))
                                 (rule "applyEq" (formula "59") (term "1,0,1,1,0,0,1,0") (ifseqformula "56"))
                                 (rule "lenOfSeqSubEQ" (formula "59") (term "1,1,0,0,1,0") (ifseqformula "69"))
                                 (rule "polySimp_elimSub" (formula "59") (term "1,1,1,0,0,1,0"))
                                 (rule "times_zero_2" (formula "59") (term "1,1,1,1,0,0,1,0"))
                                 (rule "add_zero_right" (formula "59") (term "1,1,1,0,0,1,0"))
                                 (rule "inEqSimp_ltToLeq" (formula "59") (term "0,1,1,0,0,1,0"))
                                 (rule "add_zero_right" (formula "59") (term "0,0,1,1,0,0,1,0"))
                                 (rule "polySimp_mulComm0" (formula "59") (term "1,0,0,1,1,0,0,1,0"))
                                 (rule "applyEq" (formula "59") (term "1,0,0,0,0,0,0,1,0") (ifseqformula "56"))
                                 (rule "applyEq" (formula "1") (term "1,0,0,0,1") (ifseqformula "56"))
                                 (rule "lenOfSeqSubEQ" (formula "1") (term "0,0,1") (ifseqformula "69"))
                                 (rule "polySimp_elimSub" (formula "1") (term "1,0,0,1"))
                                 (rule "mul_literals" (formula "1") (term "1,1,0,0,1"))
                                 (rule "add_zero_right" (formula "1") (term "1,0,0,1"))
                                 (rule "inEqSimp_ltToLeq" (formula "1") (term "0,0,0,1"))
                                 (rule "add_zero_right" (formula "1") (term "0,0,0,0,1"))
                                 (rule "polySimp_mulComm0" (formula "1") (term "1,0,0,0,0,1"))
                                 (rule "applyEq" (formula "59") (term "1,0,1,0,0,0") (ifseqformula "56"))
                                 (rule "lenOfSeqSubEQ" (formula "59") (term "1,0,0,0") (ifseqformula "69"))
                                 (rule "polySimp_elimSub" (formula "59") (term "1,1,0,0,0"))
                                 (rule "mul_literals" (formula "59") (term "1,1,1,0,0,0"))
                                 (rule "add_zero_right" (formula "59") (term "1,1,0,0,0"))
                                 (rule "inEqSimp_ltToLeq" (formula "59") (term "0,1,0,0,0"))
                                 (rule "add_zero_right" (formula "59") (term "0,0,1,0,0,0"))
                                 (rule "polySimp_mulComm0" (formula "59") (term "1,0,0,1,0,0,0"))
                                 (rule "applyEq" (formula "1") (term "1,0,0,0,0,1,0") (ifseqformula "56"))
                                 (rule "applyEq" (formula "1") (term "1,0,0,0,1,1,1,1") (ifseqformula "56"))
                                 (rule "lenOfSeqSubEQ" (formula "1") (term "0,0,1,1,1,1") (ifseqformula "69"))
                                 (rule "polySimp_elimSub" (formula "1") (term "1,0,0,1,1,1,1"))
                                 (rule "times_zero_2" (formula "1") (term "1,1,0,0,1,1,1,1"))
                                 (rule "add_zero_right" (formula "1") (term "1,0,0,1,1,1,1"))
                                 (rule "inEqSimp_ltToLeq" (formula "1") (term "0,0,0,1,1,1,1"))
                                 (rule "add_zero_right" (formula "1") (term "0,0,0,0,1,1,1,1"))
                                 (rule "polySimp_mulComm0" (formula "1") (term "1,0,0,0,0,1,1,1,1"))
                                 (rule "applyEq" (formula "59") (term "1,0,1,1,0,0,1,1,0") (ifseqformula "56"))
                                 (rule "lenOfSeqSubEQ" (formula "59") (term "1,1,0,0,1,1,0") (ifseqformula "69"))
                                 (rule "polySimp_elimSub" (formula "59") (term "1,1,1,0,0,1,1,0"))
                                 (rule "mul_literals" (formula "59") (term "1,1,1,1,0,0,1,1,0"))
                                 (rule "add_zero_right" (formula "59") (term "1,1,1,0,0,1,1,0"))
                                 (rule "inEqSimp_ltToLeq" (formula "59") (term "0,1,1,0,0,1,1,0"))
                                 (rule "add_zero_right" (formula "59") (term "0,0,1,1,0,0,1,1,0"))
                                 (rule "polySimp_mulComm0" (formula "59") (term "1,0,0,1,1,0,0,1,1,0"))
                                 (rule "applyEq" (formula "69") (term "1,0,2,0") (ifseqformula "56"))
                                 (rule "applyEq" (formula "46") (term "1,0,0,0,1,0,0") (ifseqformula "56"))
                                 (rule "applyEq" (formula "45") (term "1,0,0") (ifseqformula "56"))
                                 (rule "applyEq" (formula "72") (term "1,0") (ifseqformula "56"))
                                 (rule "close" (formula "72") (ifseqformula "36"))
                              )
                              (branch "result_46 = ls FALSE"
                                 (rule "applyEqReverse" (formula "57") (term "0,0,0,1,0") (ifseqformula "56"))
                                 (rule "applyEqReverse" (formula "55") (term "0,0") (ifseqformula "56"))
                                 (rule "applyEqReverse" (formula "62") (term "0,0") (ifseqformula "55"))
                                 (rule "hideAuxiliaryEq" (formula "55"))
                                 (rule "commute_and" (formula "1") (term "1,1,0"))
                                 (rule "commute_or" (formula "6") (term "1,0,0,0"))
                                 (rule "commute_or_2" (formula "38") (term "0"))
                                 (rule "commute_or" (formula "22") (term "1,0,0,0"))
                                 (rule "commute_or" (formula "11") (term "1,0,0,0"))
                                 (rule "seqGetAlphaCast" (formula "67") (term "0"))
                                 (rule "castDel" (formula "67") (term "0"))
                                  (builtin "One Step Simplification" (formula "67"))
                                 (rule "true_left" (formula "67"))
                                 (rule "cut_direct" (formula "60") (term "0,0,0,0"))
                                 (branch "CUT: result_48.<created> = TRUE TRUE"
                                     (builtin "One Step Simplification" (formula "61"))
                                    (rule "true_left" (formula "61"))
                                    (rule "equalityToSeqGetAndSeqLenLeft" (formula "66") (inst "iv=iv"))
                                    (rule "andLeft" (formula "66"))
                                    (rule "lenOfSeqSub" (formula "67") (term "1,1,0,0"))
                                    (rule "polySimp_elimSub" (formula "67") (term "1,1,1,0,0"))
                                    (rule "times_zero_2" (formula "67") (term "1,1,1,1,0,0"))
                                    (rule "add_zero_right" (formula "67") (term "1,1,1,0,0"))
                                    (rule "lenOfSeqSub" (formula "66") (term "0"))
                                    (rule "polySimp_elimSub" (formula "66") (term "1,0"))
                                    (rule "mul_literals" (formula "66") (term "1,1,0"))
                                    (rule "add_zero_right" (formula "66") (term "1,0"))
                                     (builtin "One Step Simplification" (formula "66"))
                                    (rule "eqSymm" (formula "66") (term "1"))
                                    (rule "inEqSimp_ltToLeq" (formula "67") (term "0,1,1,0,0"))
                                    (rule "add_zero_right" (formula "67") (term "0,0,1,1,0,0"))
                                    (rule "polySimp_mulComm0" (formula "67") (term "1,0,0,1,1,0,0"))
                                    (rule "inEqSimp_ltToLeq" (formula "66") (term "0"))
                                    (rule "add_zero_right" (formula "66") (term "0,0"))
                                    (rule "polySimp_mulComm0" (formula "66") (term "1,0,0"))
                                    (rule "inEqSimp_ltToLeq" (formula "67") (term "1,0,0"))
                                    (rule "polySimp_mulComm0" (formula "67") (term "1,0,0,1,0,0"))
                                    (rule "inEqSimp_commuteLeq" (formula "67") (term "0,0,0"))
                                    (rule "applyEq" (formula "67") (term "0,0,1,0") (ifseqformula "68"))
                                     (builtin "One Step Simplification" (formula "67"))
                                    (rule "true_left" (formula "67"))
                                    (rule "inEqSimp_sepNegMonomial0" (formula "66") (term "0"))
                                    (rule "polySimp_mulLiterals" (formula "66") (term "0,0"))
                                    (rule "polySimp_elimOne" (formula "66") (term "0,0"))
                                    (rule "distr_forallAnd" (formula "31") (term "0"))
                                    (rule "lenNonNegative" (formula "65") (term "0"))
                                    (rule "inEqSimp_commuteLeq" (formula "65"))
                                    (rule "applyEq" (formula "65") (term "0") (ifseqformula "66"))
                                    (rule "inEqSimp_sepPosMonomial1" (formula "65"))
                                    (rule "mul_literals" (formula "65") (term "1"))
                                    (rule "inEqSimp_subsumption1" (formula "65") (ifseqformula "55"))
                                    (rule "leq_literals" (formula "65") (term "0"))
                                     (builtin "One Step Simplification" (formula "65"))
                                    (rule "true_left" (formula "65"))
                                    (rule "commute_or" (formula "25") (term "1,0,0,0"))
                                    (rule "commute_or" (formula "21") (term "1,0,0,0"))
                                    (rule "commute_or" (formula "13") (term "1,0,0,0"))
                                    (rule "commute_or" (formula "56") (term "0,0"))
                                    (rule "commute_or" (formula "4") (term "1,0,0,0"))
                                    (rule "commute_or" (formula "32") (term "1,0,0,0"))
                                    (rule "commute_or" (formula "10") (term "1,0,0,0"))
                                    (rule "commute_or" (formula "5") (term "1,0,0,0"))
                                    (rule "commute_or" (formula "8") (term "1,0,0,0"))
                                    (rule "distr_forallAnd" (formula "31"))
                                    (rule "andLeft" (formula "31"))
                                    (rule "commute_or" (formula "23") (term "1,0,0,0"))
                                    (rule "commute_or" (formula "57") (term "1,1,0"))
                                    (rule "commute_or_2" (formula "27") (term "0,0,0"))
                                    (rule "commute_or" (formula "9") (term "1,0,0,0"))
                                    (rule "commute_or_2" (formula "28") (term "0,0,0"))
                                    (rule "commute_or" (formula "7") (term "1,0,0,0"))
                                    (rule "commute_or_2" (formula "29") (term "0,0,0"))
                                    (rule "commute_or_2" (formula "24") (term "0,0,0"))
                                    (rule "commute_or_2" (formula "12") (term "0,0,0"))
                                    (rule "commute_or_2" (formula "34") (term "0,0,0"))
                                    (rule "commute_or_2" (formula "57") (term "0,1,0"))
                                    (rule "commute_or_2" (formula "30") (term "0,0,0"))
                                    (rule "commute_or" (formula "47") (term "0,0"))
                                    (rule "commute_or" (formula "26") (term "1,0,0,0"))
                                    (rule "commute_or" (formula "67"))
                                    (rule "inEqSimp_or_weaken1" (formula "67"))
                                    (rule "add_zero_right" (formula "67") (term "1,0"))
                                     (builtin "One Step Simplification" (formula "67") (ifInst ""  (formula "56")))
                                    (rule "true_left" (formula "67"))
                                    (rule "commute_or" (formula "39") (term "0,0"))
                                    (rule "commute_or_2" (formula "6") (term "0,0,0"))
                                    (rule "commute_or_2" (formula "22") (term "0,0,0"))
                                    (rule "commute_or_2" (formula "11") (term "0,0,0"))
                                    (rule "commute_or" (formula "4") (term "0,0,0,0"))
                                    (rule "commute_or" (formula "5") (term "0,0,0,0"))
                                    (rule "cnf_rightDist" (formula "13") (term "0,0,0,0"))
                                     (builtin "One Step Simplification" (formula "13"))
                                    (rule "cnf_rightDist" (formula "33") (term "0,0,0,0"))
                                     (builtin "One Step Simplification" (formula "33"))
                                    (rule "cnf_rightDist" (formula "8") (term "0,0,0,0"))
                                     (builtin "One Step Simplification" (formula "8"))
                                    (rule "cnf_rightDist" (formula "23") (term "0,0,0,0"))
                                     (builtin "One Step Simplification" (formula "23"))
                                    (rule "cnf_rightDist" (formula "9") (term "0,0,0,0"))
                                     (builtin "One Step Simplification" (formula "9"))
                                    (rule "cnf_rightDist" (formula "7") (term "0,0,0,0"))
                                     (builtin "One Step Simplification" (formula "7"))
                                    (rule "commute_or_2" (formula "47") (term "0"))
                                    (rule "cnf_rightDist" (formula "1") (term "1,1"))
                                    (rule "commute_or" (formula "32") (term "0,0"))
                                    (rule "commute_or_2" (formula "39") (term "0"))
                                    (rule "cnf_rightDist" (formula "25") (term "0,0,0,0"))
                                    (rule "cnf_rightDist" (formula "1") (term "1,0"))
                                    (rule "cnf_rightDist" (formula "26") (term "0,0,0,0"))
                                    (rule "cnf_rightDist" (formula "21") (term "0,0,0,0"))
                                    (rule "commute_or_2" (formula "10") (term "0,0,0"))
                                    (rule "commute_or_2" (formula "4") (term "0,0,0"))
                                    (rule "commute_or_2" (formula "5") (term "0,0,0"))
                                    (rule "cnf_rightDist" (formula "31") (term "0,0"))
                                    (rule "distr_forallAnd" (formula "31") (term "0"))
                                    (rule "distr_forallAnd" (formula "31"))
                                    (rule "andLeft" (formula "31"))
                                    (rule "commute_or" (formula "32") (term "0,0"))
                                    (rule "commute_or" (formula "1") (term "0,1,1"))
                                    (rule "commute_or" (formula "25") (term "0,0,0"))
                                    (rule "commute_or" (formula "27") (term "1,0,0,0,0"))
                                    (rule "commute_or" (formula "1") (term "0,1,0"))
                                    (rule "commute_or" (formula "26") (term "0,0,0"))
                                    (rule "commute_or" (formula "21") (term "0,0,0"))
                                    (rule "commute_or" (formula "28") (term "1,0,0,0,0"))
                                    (rule "commute_or" (formula "13") (term "0,0,0,0"))
                                    (rule "commute_or" (formula "29") (term "1,0,0,0,0"))
                                    (rule "shift_paren_or" (formula "24") (term "0,0,0,0"))
                                    (rule "commute_or" (formula "34") (term "0,0,0,0"))
                                    (rule "shift_paren_or" (formula "12") (term "0,0,0,0"))
                                    (rule "shift_paren_or" (formula "35") (term "0,0,0,0"))
                                    (rule "shift_paren_or" (formula "8") (term "0,0,0"))
                                     (builtin "One Step Simplification" (formula "8"))
                                    (rule "eqSymm" (formula "8") (term "1,0,0,0"))
                                    (rule "castedGetAny" (formula "8") (term "0,1,0,0,0,0"))
                                    (rule "castedGetAny" (formula "8") (term "1,0,0,0,0,0,0,0"))
                                    (rule "castedGetAny" (formula "8") (term "0,1,0,0,0"))
                                     (builtin "One Step Simplification" (formula "8"))
                                    (rule "true_left" (formula "8"))
                                    (rule "cnf_rightDist" (formula "57") (term "1,1,0"))
                                    (rule "shift_paren_or" (formula "29") (term "0,0,0,0"))
                                    (rule "commute_or" (formula "22") (term "0,0,0,0"))
                                    (rule "commute_or" (formula "8") (term "0,0,0,0"))
                                    (rule "shift_paren_or" (formula "7") (term "0,0,0"))
                                     (builtin "One Step Simplification" (formula "7"))
                                    (rule "eqSymm" (formula "7") (term "1,0,0,0"))
                                    (rule "castedGetAny" (formula "7") (term "0,1,0,0,0,0"))
                                    (rule "castedGetAny" (formula "7") (term "1,0,0,0,0,0,0,0"))
                                    (rule "castedGetAny" (formula "7") (term "0,1,0,0,0"))
                                     (builtin "One Step Simplification" (formula "7"))
                                    (rule "true_left" (formula "7"))
                                    (rule "shift_paren_or" (formula "6") (term "0,0,0,0"))
                                    (rule "shift_paren_or" (formula "20") (term "0,0,0,0"))
                                    (rule "Class_axiom_0_in_de_polyas_core3_open_cred_CredTool" (inst "seq=seq") (inst "i=i_2") (inst "str=str") (inst "seq_0=seq_0") (inst "i_0=i_0") (inst "obj=obj") (inst "seq_1=seq_1") (inst "i_1=i_1") (inst "sv_heap=anon_heap_add<<anonHeapFunction>>"))
                                    (rule "andLeft" (formula "1"))
                                    (rule "andLeft" (formula "1"))
                                    (rule "castedGetAny" (formula "3") (term "0,1,1,0,0,0"))
                                    (rule "castedGetAny" (formula "1") (term "0,0,1,1,0,1,0,0"))
                                    (rule "castedGetAny" (formula "1") (term "0,0,0,0,1,0,0"))
                                    (rule "castedGetAny" (formula "1") (term "0,0,0,0,0"))
                                    (rule "castedGetAny" (formula "1") (term "0,0,0,1,0,1,0,0"))
                                    (rule "castedGetAny" (formula "2") (term "0,1,1,0,0,0"))
                                    (rule "nnf_imp2or" (formula "1") (term "0,0"))
                                     (builtin "One Step Simplification" (formula "1"))
                                    (rule "nnf_imp2or" (formula "3") (term "0,0,0"))
                                    (rule "nnf_imp2or" (formula "2") (term "0,0,0"))
                                    (rule "nnf_imp2or" (formula "3") (term "1,0,0,0"))
                                    (rule "nnf_notAnd" (formula "3") (term "0,0,0,0"))
                                     (builtin "One Step Simplification" (formula "3"))
                                    (rule "nnf_notAnd" (formula "2") (term "0,0,0,0"))
                                     (builtin "One Step Simplification" (formula "2"))
                                    (rule "nnf_imp2or" (formula "2") (term "1,0,0,0"))
                                    (rule "nnf_notOr" (formula "3") (term "0,0,0,0,0"))
                                    (rule "nnf_notOr" (formula "2") (term "0,0,0,0,0"))
                                    (rule "Class_axiom_0_in_de_polyas_core3_open_cred_CredTool" (inst "seq=seq") (inst "i=i_2") (inst "str=str") (inst "seq_0=seq_0") (inst "i_0=i_0") (inst "obj=obj") (inst "seq_1=seq_1") (inst "i_1=i_1") (inst "sv_heap=anon(heapAfter_get,
     singleton(result_46, java.util.Collection::$seq),
     anon_heap_add<<anonHeapFunction>>)"))
                                     (builtin "One Step Simplification" (formula "1"))
                                    (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,1,0,0,0,0,0,1") (ifseqformula "62"))
                                     (builtin "One Step Simplification" (formula "1"))
                                    (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,1,0,0,0,0,0,1,0") (ifseqformula "62"))
                                     (builtin "One Step Simplification" (formula "1"))
                                    (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,0,0,1,0,0,0,0,0,1") (ifseqformula "52"))
                                    (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,0,0,0,1,0,0,0,0,0,1") (ifseqformula "45"))
                                    (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,0,0,1,0,0,0,0,0,1,0") (ifseqformula "52"))
                                    (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,0,0,0,1,0,0,0,0,0,1,0") (ifseqformula "45"))
                                    (rule "andLeft" (formula "1"))
                                    (rule "andLeft" (formula "1"))
                                    (rule "castedGetAny" (formula "3") (term "0,1,1,0,0,0"))
                                    (rule "castedGetAny" (formula "1") (term "0,0,0,1,0,1,0,0"))
                                    (rule "castedGetAny" (formula "1") (term "0,0,0,0,1,0,0"))
                                    (rule "castedGetAny" (formula "2") (term "0,1,1,0,0,0"))
                                    (rule "castedGetAny" (formula "1") (term "0,0,0,0,0"))
                                    (rule "castedGetAny" (formula "1") (term "0,0,1,1,0,1,0,0"))
                                    (rule "nnf_imp2or" (formula "1") (term "0,0"))
                                     (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "4")))
                                    (rule "true_left" (formula "1"))
                                    (rule "nnf_imp2or" (formula "2") (term "0,0,0"))
                                    (rule "nnf_imp2or" (formula "1") (term "0,0,0"))
                                    (rule "nnf_notAnd" (formula "2") (term "0,0,0,0"))
                                     (builtin "One Step Simplification" (formula "2"))
                                    (rule "nnf_notAnd" (formula "1") (term "0,0,0,0"))
                                     (builtin "One Step Simplification" (formula "1"))
                                    (rule "nnf_imp2or" (formula "2") (term "1,0,0,0"))
                                    (rule "nnf_imp2or" (formula "1") (term "1,0,0,0"))
                                    (rule "nnf_notOr" (formula "2") (term "0,0,0,0,0"))
                                    (rule "nnf_notOr" (formula "1") (term "0,0,0,0,0"))
                                    (rule "nnf_notOr" (formula "2") (term "1,0,0,0,0,0"))
                                    (rule "nnf_notOr" (formula "1") (term "1,0,0,0,0,0"))
                                    (rule "nnf_notOr" (formula "2") (term "0,1,0,0,0,0,0"))
                                    (rule "nnf_notOr" (formula "1") (term "0,1,0,0,0,0,0"))
                                    (rule "nnf_notOr" (formula "2") (term "0,0,1,0,0,0,0,0"))
                                    (rule "nnf_notOr" (formula "1") (term "0,0,1,0,0,0,0,0"))
                                    (rule "nnf_notOr" (formula "2") (term "0,0,0,1,0,0,0,0,0"))
                                    (rule "nnf_notOr" (formula "1") (term "0,0,0,1,0,0,0,0,0"))
                                    (rule "nnf_notOr" (formula "2") (term "0,0,0,0,1,0,0,0,0,0"))
                                    (rule "nnf_notOr" (formula "1") (term "0,0,0,0,1,0,0,0,0,0"))
                                    (rule "Class_axiom_0_in_de_polyas_core3_open_cred_CredTool" (inst "seq=seq") (inst "i=i_2") (inst "str=str") (inst "seq_0=seq_0") (inst "i_0=i_0") (inst "obj=obj") (inst "seq_1=seq_1") (inst "i_1=i_1") (inst "sv_heap=heapAfter_add"))
                                    (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "1,0,0,0,0,0,1") (ifseqformula "69"))
                                    (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "1,0,0,0,0,0,1,0") (ifseqformula "69"))
                                    (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,1,0,0,0,0,0,1") (ifseqformula "64"))
                                     (builtin "One Step Simplification" (formula "1"))
                                    (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,1,0,0,0,0,0,1,0") (ifseqformula "64"))
                                     (builtin "One Step Simplification" (formula "1"))
                                    (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,0,0,1,0,0,0,0,0,1") (ifseqformula "54"))
                                    (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,0,0,0,1,0,0,0,0,0,1") (ifseqformula "47"))
                                    (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,0,0,1,0,0,0,0,0,1,0") (ifseqformula "54"))
                                    (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,0,0,0,1,0,0,0,0,0,1,0") (ifseqformula "47"))
                                    (rule "andLeft" (formula "1"))
                                    (rule "andLeft" (formula "1"))
                                    (rule "castedGetAny" (formula "3") (term "0,1,1,0,0,0"))
                                    (rule "castedGetAny" (formula "2") (term "0,1,1,0,0,0"))
                                    (rule "castedGetAny" (formula "1") (term "0,0,0,0,0"))
                                    (rule "castedGetAny" (formula "1") (term "0,0,1,1,0,1,0,0"))
                                    (rule "castedGetAny" (formula "1") (term "0,0,0,0,1,0,0"))
                                    (rule "castedGetAny" (formula "1") (term "0,0,0,1,0,1,0,0"))
                                    (rule "nnf_imp2or" (formula "1") (term "0,0"))
                                     (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "6")))
                                    (rule "true_left" (formula "1"))
                                    (rule "nnf_imp2or" (formula "2") (term "0,0,0"))
                                    (rule "nnf_imp2or" (formula "1") (term "0,0,0"))
                                    (rule "nnf_imp2or" (formula "2") (term "1,0,0,0"))
                                    (rule "nnf_notAnd" (formula "2") (term "0,0,0,0"))
                                     (builtin "One Step Simplification" (formula "2"))
                                    (rule "nnf_notAnd" (formula "1") (term "0,0,0,0"))
                                     (builtin "One Step Simplification" (formula "1"))
                                    (rule "nnf_imp2or" (formula "1") (term "1,0,0,0"))
                                    (rule "nnf_notOr" (formula "2") (term "0,0,0,0,0"))
                                    (rule "nnf_notOr" (formula "1") (term "0,0,0,0,0"))
                                    (rule "nnf_notOr" (formula "2") (term "1,0,0,0,0,0"))
                                    (rule "nnf_notOr" (formula "1") (term "1,0,0,0,0,0"))
                                    (rule "nnf_notOr" (formula "2") (term "0,1,0,0,0,0,0"))
                                    (rule "nnf_notOr" (formula "1") (term "0,1,0,0,0,0,0"))
                                    (rule "nnf_notOr" (formula "2") (term "0,0,1,0,0,0,0,0"))
                                    (rule "nnf_notOr" (formula "1") (term "0,0,1,0,0,0,0,0"))
                                    (rule "nnf_notOr" (formula "2") (term "0,0,0,1,0,0,0,0,0"))
                                    (rule "nnf_notOr" (formula "1") (term "0,0,0,1,0,0,0,0,0"))
                                    (rule "nnf_notOr" (formula "2") (term "0,0,0,0,1,0,0,0,0,0"))
                                    (rule "nnf_notOr" (formula "1") (term "0,0,0,0,1,0,0,0,0,0"))
                                    (rule "shift_paren_or" (formula "14") (term "0,0,0,0"))
                                    (rule "commute_and" (formula "30") (term "1,0,0,0"))
                                    (rule "commute_and" (formula "31") (term "1,0,0,0"))
                                    (rule "commute_and" (formula "32") (term "1,0,0,0"))
                                    (rule "commute_and" (formula "27") (term "1,0,0,0"))
                                    (rule "commute_and" (formula "15") (term "1,0,0,0"))
                                    (rule "commute_and" (formula "38") (term "1,0,0,0"))
                                    (rule "commute_and" (formula "33") (term "1,0,0,0"))
                                    (rule "shift_paren_or" (formula "16") (term "0,0,0"))
                                     (builtin "One Step Simplification" (formula "16"))
                                    (rule "eqSymm" (formula "16") (term "1,0,0,0"))
                                    (rule "castedGetAny" (formula "16") (term "0,0,0,0,0,0"))
                                    (rule "castedGetAny" (formula "16") (term "1,0,0,1,0,0,0,0"))
                                    (rule "castedGetAny" (formula "16") (term "0,1,0,0,0"))
                                     (builtin "One Step Simplification" (formula "16"))
                                    (rule "true_left" (formula "16"))
                                    (rule "commute_and" (formula "11") (term "1,0,0,0"))
                                    (rule "cnf_rightDist" (formula "33") (term "0,0"))
                                    (rule "commute_or_2" (formula "26") (term "0,0,0,0"))
                                    (rule "shift_paren_or" (formula "36") (term "0,0,0"))
                                     (builtin "One Step Simplification" (formula "36"))
                                    (rule "eqSymm" (formula "36") (term "1,0,0,0"))
                                    (rule "castedGetAny" (formula "36") (term "1,0,0,1,0,0,0,0"))
                                    (rule "castedGetAny" (formula "36") (term "0,0,0,0,0,0"))
                                    (rule "castedGetAny" (formula "36") (term "0,1,0,0,0"))
                                     (builtin "One Step Simplification" (formula "36"))
                                    (rule "true_left" (formula "36"))
                                    (rule "commute_or_2" (formula "15") (term "0,0,0,0"))
                                    (rule "cnf_rightDist" (formula "59") (term "0"))
                                    (rule "shift_paren_or" (formula "13") (term "0,0,0,0"))
                                    (rule "commute_or_2" (formula "36") (term "0,0,0,0"))
                                    (rule "shift_paren_or" (formula "9") (term "0,0,0,0"))
                                    (rule "shift_paren_or" (formula "10") (term "0,0,0,0"))
                                    (rule "cnf_rightDist" (formula "6") (term "1,1,1"))
                                     (builtin "One Step Simplification" (formula "6"))
                                    (rule "commute_or" (formula "27") (term "1,1,0,0,0"))
                                    (rule "shift_paren_or" (formula "29") (term "0,0,0,0"))
                                    (rule "commute_or_2" (formula "32") (term "0,0,0,0"))
                                    (rule "shift_paren_or" (formula "25") (term "0,0,0"))
                                     (builtin "One Step Simplification" (formula "25"))
                                    (rule "eqSymm" (formula "25") (term "1,0,0,0"))
                                    (rule "castedGetAny" (formula "25") (term "0,0,0,0,0,0"))
                                    (rule "castedGetAny" (formula "25") (term "1,0,0,1,0,0,0,0"))
                                    (rule "castedGetAny" (formula "25") (term "0,1,0,0,0"))
                                     (builtin "One Step Simplification" (formula "25"))
                                    (rule "true_left" (formula "25"))
                                    (rule "shift_paren_or" (formula "12") (term "0,0,0"))
                                     (builtin "One Step Simplification" (formula "12"))
                                    (rule "eqSymm" (formula "12") (term "1,0,0,0"))
                                    (rule "castedGetAny" (formula "12") (term "1,0,0,1,0,0,0,0"))
                                    (rule "castedGetAny" (formula "12") (term "0,0,0,0,0,0"))
                                    (rule "castedGetAny" (formula "12") (term "0,1,0,0,0"))
                                     (builtin "One Step Simplification" (formula "12"))
                                    (rule "true_left" (formula "12"))
                                    (rule "commute_or" (formula "26") (term "1,1,0,0,0"))
                                    (rule "commute_or" (formula "22") (term "1,1,0,0,0"))
                                    (rule "shift_paren_or" (formula "28") (term "0,0,0,0"))
                                    (rule "distr_forallAnd" (formula "31") (term "0"))
                                    (rule "shift_paren_or" (formula "29") (term "0,0,0,0"))
                                    (rule "distr_forallAnd" (formula "57"))
                                    (rule "andLeft" (formula "57"))
                                    (rule "commute_and" (formula "23") (term "0,0,1,0,0,0"))
                                    (rule "commute_or" (formula "5") (term "1,0,0,0"))
                                    (rule "commute_or" (formula "4") (term "1,0,0,0"))
                                    (rule "commute_or" (formula "5") (term "0,0,0,0"))
                                    (rule "commute_or" (formula "4") (term "0,0,0,0"))
                                    (rule "distr_forallAnd" (formula "31"))
                                    (rule "andLeft" (formula "31"))
                                    (rule "commute_and" (formula "13") (term "0,0,0,1,0,0,0"))
                                    (rule "cnf_rightDist" (formula "25") (term "0,1,0,0,0"))
                                     (builtin "One Step Simplification" (formula "25"))
                                    (rule "commute_and" (formula "9") (term "0,0,1,0,0,0"))
                                    (rule "cnf_rightDist" (formula "26") (term "0,1,0,0,0"))
                                     (builtin "One Step Simplification" (formula "26"))
                                    (rule "commute_and" (formula "10") (term "0,0,1,0,0,0"))
                                    (rule "cnf_rightDist" (formula "22") (term "0,1,0,0,0"))
                                    (rule "commute_or" (formula "2") (term "1,0,0,0"))
                                    (rule "commute_or" (formula "1") (term "1,0,0,0"))
                                    (rule "commute_and" (formula "12") (term "0,0,0,1,0,0,0"))
                                    (rule "commute_or" (formula "2") (term "0,0,0,0"))
                                    (rule "commute_or" (formula "1") (term "0,0,0,0"))
                                    (rule "shift_paren_and" (formula "3") (term "0,1,0,0"))
                                     (builtin "One Step Simplification" (formula "3"))
                                    (rule "commute_or" (formula "59") (term "0"))
                                    (rule "commute_or" (formula "6") (term "1,1,1"))
                                    (rule "seqGetAlphaCast" (formula "64") (term "0"))
                                    (rule "castedGetAny" (formula "64") (term "0"))
                                     (builtin "One Step Simplification" (formula "64"))
                                    (rule "true_left" (formula "64"))
                                    (rule "shift_paren_or" (formula "58") (term "0"))
                                    (rule "commute_or" (formula "32") (term "0,0"))
                                    (rule "commute_or_2" (formula "5") (term "0,0,0"))
                                    (rule "commute_or_2" (formula "4") (term "0,0,0"))
                                    (rule "cnf_rightDist" (formula "11") (term "0,0,0"))
                                    (rule "distr_forallAnd" (formula "11") (term "0,0"))
                                    (rule "distr_forallAnd" (formula "11") (term "0"))
                                    (rule "distr_forallAnd" (formula "11"))
                                    (rule "andLeft" (formula "11"))
                                    (rule "cnf_rightDist" (formula "25") (term "0,0,0"))
                                    (rule "distr_forallAnd" (formula "25") (term "0,0"))
                                    (rule "distr_forallAnd" (formula "25") (term "0"))
                                    (rule "distr_forallAnd" (formula "25"))
                                    (rule "andLeft" (formula "25"))
                                    (rule "commute_or_2" (formula "60") (term "0,0"))
                                     (builtin "One Step Simplification" (formula "60"))
                                    (rule "cnf_rightDist" (formula "15") (term "0,0,0"))
                                    (rule "distr_forallAnd" (formula "15") (term "0,0"))
                                    (rule "distr_forallAnd" (formula "15") (term "0"))
                                    (rule "distr_forallAnd" (formula "15"))
                                    (rule "andLeft" (formula "15"))
                                    (rule "commute_or_2" (formula "2") (term "0,0,0"))
                                    (rule "commute_or_2" (formula "1") (term "0,0,0"))
                                    (rule "cnf_rightDist" (formula "37") (term "0,0,0"))
                                    (rule "distr_forallAnd" (formula "37") (term "0,0"))
                                    (rule "distr_forallAnd" (formula "37") (term "0"))
                                    (rule "distr_forallAnd" (formula "37"))
                                    (rule "andLeft" (formula "37"))
                                    (rule "commute_or" (formula "61") (term "0,1,0"))
                                    (rule "cnf_rightDist" (formula "6") (term "0,1,1"))
                                    (rule "cnf_rightDist" (formula "6") (term "1,1,0"))
                                    (rule "inEqSimp_or_tautInEq2" (formula "6") (term "1,1,1,0"))
                                    (rule "polySimp_addAssoc" (formula "6") (term "1,1,1,1,1,0"))
                                    (rule "add_literals" (formula "6") (term "0,1,1,1,1,1,0"))
                                    (rule "add_zero_left" (formula "6") (term "1,1,1,1,1,0"))
                                    (rule "inEqSimp_homoInEq1" (formula "6") (term "1,1,1,1,0"))
                                    (rule "polySimp_pullOutFactor1" (formula "6") (term "0,1,1,1,1,0"))
                                    (rule "add_literals" (formula "6") (term "1,0,1,1,1,1,0"))
                                    (rule "times_zero_1" (formula "6") (term "0,1,1,1,1,0"))
                                    (rule "leq_literals" (formula "6") (term "1,1,1,1,0"))
                                     (builtin "One Step Simplification" (formula "6"))
                                    (rule "cnf_rightDist" (formula "29") (term "0,0,0"))
                                    (rule "distr_forallAnd" (formula "29") (term "0,0"))
                                    (rule "distr_forallAnd" (formula "29") (term "0"))
                                    (rule "distr_forallAnd" (formula "29"))
                                    (rule "andLeft" (formula "29"))
                                    (rule "cnf_rightDist" (formula "32") (term "0,0,0"))
                                    (rule "distr_forallAnd" (formula "32") (term "0,0"))
                                    (rule "distr_forallAnd" (formula "32") (term "0"))
                                    (rule "distr_forallAnd" (formula "32"))
                                    (rule "andLeft" (formula "32"))
                                    (rule "commute_or_2" (formula "11") (term "0,0,0"))
                                     (builtin "One Step Simplification" (formula "11"))
                                    (rule "eqSymm" (formula "11") (term "1,0,0,0,0"))
                                    (rule "castedGetAny" (formula "11") (term "0,0,0,0,0,0"))
                                    (rule "castedGetAny" (formula "11") (term "1,0,0,1,0,0,0"))
                                    (rule "castedGetAny" (formula "11") (term "0,1,0,0,0,0"))
                                     (builtin "One Step Simplification" (formula "11"))
                                    (rule "true_left" (formula "11"))
                                    (rule "commute_or_2" (formula "24") (term "0,0,0"))
                                     (builtin "One Step Simplification" (formula "24"))
                                    (rule "eqSymm" (formula "24") (term "1,0,0,0,0"))
                                    (rule "castedGetAny" (formula "24") (term "0,0,0,0,0,0"))
                                    (rule "castedGetAny" (formula "24") (term "1,0,0,1,0,0,0"))
                                    (rule "castedGetAny" (formula "24") (term "0,1,0,0,0,0"))
                                     (builtin "One Step Simplification" (formula "24"))
                                    (rule "true_left" (formula "24"))
                                    (rule "shift_paren_or" (formula "58") (term "0,0"))
                                    (rule "cnf_rightDist" (formula "28") (term "0,0,0"))
                                    (rule "distr_forallAnd" (formula "28") (term "0,0"))
                                    (rule "distr_forallAnd" (formula "28") (term "0"))
                                    (rule "distr_forallAnd" (formula "28"))
                                    (rule "andLeft" (formula "28"))
                                    (rule "cnf_rightDist" (formula "29") (term "0,0,0"))
                                    (rule "distr_forallAnd" (formula "29") (term "0,0"))
                                    (rule "distr_forallAnd" (formula "29") (term "0"))
                                    (rule "distr_forallAnd" (formula "29"))
                                    (rule "andLeft" (formula "29"))
                                    (rule "commute_or_2" (formula "14") (term "0,0,0"))
                                     (builtin "One Step Simplification" (formula "14"))
                                    (rule "eqSymm" (formula "14") (term "1,0,0,0,0"))
                                    (rule "castedGetAny" (formula "14") (term "1,0,0,1,0,0,0"))
                                    (rule "castedGetAny" (formula "14") (term "0,0,0,0,0,0"))
                                    (rule "castedGetAny" (formula "14") (term "0,1,0,0,0,0"))
                                     (builtin "One Step Simplification" (formula "14"))
                                    (rule "true_left" (formula "14"))
                                    (rule "commute_or" (formula "24") (term "0,1,0,0,0"))
                                    (rule "cnf_rightDist" (formula "22") (term "0,0,0"))
                                    (rule "distr_forallAnd" (formula "22") (term "0,0"))
                                    (rule "distr_forallAnd" (formula "22") (term "0"))
                                    (rule "distr_forallAnd" (formula "22"))
                                    (rule "andLeft" (formula "22"))
                                    (rule "cnf_rightDist" (formula "3") (term "0,0"))
                                    (rule "distr_forallAnd" (formula "3") (term "0"))
                                    (rule "distr_forallAnd" (formula "3"))
                                    (rule "andLeft" (formula "3"))
                                    (rule "commute_or" (formula "27") (term "0,1,0,0,0"))
                                    (rule "commute_or_2" (formula "36") (term "0,0,0"))
                                     (builtin "One Step Simplification" (formula "36"))
                                    (rule "eqSymm" (formula "36") (term "1,0,0,0,0"))
                                    (rule "castedGetAny" (formula "36") (term "0,0,0,0,0,0"))
                                    (rule "castedGetAny" (formula "36") (term "1,0,0,1,0,0,0"))
                                    (rule "castedGetAny" (formula "36") (term "0,1,0,0,0,0"))
                                     (builtin "One Step Simplification" (formula "36"))
                                    (rule "true_left" (formula "36"))
                                    (rule "shift_paren_or" (formula "12") (term "0,0,0"))
                                     (builtin "One Step Simplification" (formula "12"))
                                    (rule "eqSymm" (formula "12") (term "1,1,0,0,0"))
                                    (rule "castedGetAny" (formula "12") (term "0,0,1,0,0,0"))
                                    (rule "castedGetAny" (formula "12") (term "0,0,0,0,0,0"))
                                    (rule "castedGetAny" (formula "12") (term "0,1,1,0,0,0"))
                                     (builtin "One Step Simplification" (formula "12"))
                                    (rule "true_left" (formula "12"))
                                    (rule "cnf_rightDist" (formula "13") (term "0,0,0"))
                                    (rule "distr_forallAnd" (formula "13") (term "0,0"))
                                    (rule "distr_forallAnd" (formula "13") (term "0"))
                                    (rule "distr_forallAnd" (formula "13"))
                                    (rule "andLeft" (formula "13"))
                                    (rule "cnf_rightDist" (formula "10") (term "0,0,0"))
                                    (rule "distr_forallAnd" (formula "10") (term "0,0"))
                                    (rule "distr_forallAnd" (formula "10") (term "0"))
                                    (rule "distr_forallAnd" (formula "10"))
                                    (rule "andLeft" (formula "10"))
                                    (rule "shift_paren_or" (formula "25") (term "0,0,0"))
                                     (builtin "One Step Simplification" (formula "25"))
                                    (rule "eqSymm" (formula "25") (term "1,1,0,0,0"))
                                    (rule "castedGetAny" (formula "25") (term "0,0,1,0,0,0"))
                                    (rule "castedGetAny" (formula "25") (term "0,0,0,0,0,0"))
                                    (rule "castedGetAny" (formula "25") (term "0,1,1,0,0,0"))
                                     (builtin "One Step Simplification" (formula "25"))
                                    (rule "true_left" (formula "25"))
                                    (rule "cnf_rightDist" (formula "12") (term "0,0,0"))
                                    (rule "distr_forallAnd" (formula "12") (term "0,0"))
                                    (rule "distr_forallAnd" (formula "12") (term "0"))
                                    (rule "distr_forallAnd" (formula "12"))
                                    (rule "andLeft" (formula "12"))
                                    (rule "cnf_rightDist" (formula "59") (term "0"))
                                    (rule "distr_forallAnd" (formula "59"))
                                    (rule "andLeft" (formula "59"))
                                    (rule "cnf_rightDist" (formula "14") (term "0,0,0"))
                                    (rule "distr_forallAnd" (formula "14") (term "0,0"))
                                    (rule "distr_forallAnd" (formula "14") (term "0"))
                                    (rule "distr_forallAnd" (formula "14"))
                                    (rule "andLeft" (formula "14"))
                                    (rule "commute_or" (formula "7") (term "1,1,0"))
                                    (rule "shift_paren_or" (formula "6") (term "0,0,0,0"))
                                    (rule "shift_paren_or" (formula "5") (term "0,0,0,0"))
                                    (rule "commute_or_2" (formula "29") (term "0,0,0"))
                                     (builtin "One Step Simplification" (formula "29"))
                                    (rule "eqSymm" (formula "29") (term "1,0,0,0,0"))
                                    (rule "castedGetAny" (formula "29") (term "0,0,0,0,0,0"))
                                    (rule "castedGetAny" (formula "29") (term "1,0,0,1,0,0,0"))
                                    (rule "castedGetAny" (formula "29") (term "0,1,0,0,0,0"))
                                     (builtin "One Step Simplification" (formula "29"))
                                    (rule "true_left" (formula "29"))
                                    (rule "commute_or" (formula "24") (term "1,0,1,0,0,0"))
                                    (rule "commute_or_2" (formula "31") (term "0,0,0"))
                                     (builtin "One Step Simplification" (formula "31"))
                                    (rule "eqSymm" (formula "31") (term "1,0,0,0,0"))
                                    (rule "castedGetAny" (formula "31") (term "0,0,0,0,0,0"))
                                    (rule "castedGetAny" (formula "31") (term "1,0,0,1,0,0,0"))
                                    (rule "castedGetAny" (formula "31") (term "0,1,0,0,0,0"))
                                     (builtin "One Step Simplification" (formula "31"))
                                    (rule "true_left" (formula "31"))
                                    (rule "commute_or" (formula "7") (term "0,0,1,1"))
                                    (rule "commute_or" (formula "7") (term "1,0,1,1"))
                                    (rule "shift_paren_or" (formula "2") (term "0,0,0,0"))
                                    (rule "shift_paren_or" (formula "1") (term "0,0,0,0"))
                                    (rule "commute_and" (formula "6") (term "1,0,0,0"))
                                    (rule "commute_and" (formula "5") (term "1,0,0,0"))
                                    (rule "commute_or" (formula "57") (term "0,0,0"))
                                     (builtin "One Step Simplification" (formula "57"))
                                    (rule "commute_or_2" (formula "29") (term "0,0,0"))
                                     (builtin "One Step Simplification" (formula "29"))
                                    (rule "eqSymm" (formula "29") (term "1,0,0,0,0"))
                                    (rule "castedGetAny" (formula "29") (term "1,0,0,1,0,0,0"))
                                    (rule "castedGetAny" (formula "29") (term "0,0,0,0,0,0"))
                                    (rule "castedGetAny" (formula "29") (term "0,1,0,0,0,0"))
                                     (builtin "One Step Simplification" (formula "29"))
                                    (rule "true_left" (formula "29"))
                                    (rule "commute_or" (formula "4") (term "0,0"))
                                    (rule "commute_or_2" (formula "29") (term "0,0,0"))
                                     (builtin "One Step Simplification" (formula "29"))
                                    (rule "eqSymm" (formula "29") (term "1,0,0,0,0"))
                                    (rule "castedGetAny" (formula "29") (term "1,0,0,1,0,0,0"))
                                    (rule "castedGetAny" (formula "29") (term "0,0,0,0,0,0"))
                                    (rule "castedGetAny" (formula "29") (term "0,1,0,0,0,0"))
                                     (builtin "One Step Simplification" (formula "29"))
                                    (rule "true_left" (formula "29"))
                                    (rule "commute_and" (formula "2") (term "1,0,0,0"))
                                    (rule "commute_and" (formula "1") (term "1,0,0,0"))
                                    (rule "cnf_rightDist" (formula "7") (term "0,1,0"))
                                    (rule "cnf_rightDist" (formula "24") (term "0,0,1,0,0,0"))
                                     (builtin "One Step Simplification" (formula "24"))
                                    (rule "commute_or_2" (formula "57") (term "0"))
                                    (rule "shift_paren_or" (formula "26") (term "0,0,0"))
                                     (builtin "One Step Simplification" (formula "26"))
                                    (rule "eqSymm" (formula "26") (term "1,1,0,0,0"))
                                    (rule "castedGetAny" (formula "26") (term "1,0,0,0,0,0,0"))
                                    (rule "castedGetAny" (formula "26") (term "0,0,1,0,0,0"))
                                    (rule "castedGetAny" (formula "26") (term "0,1,1,0,0,0"))
                                     (builtin "One Step Simplification" (formula "26"))
                                    (rule "true_left" (formula "26"))
                                    (rule "shift_paren_or" (formula "55") (term "0"))
                                    (rule "inEqSimp_or_tautInEq3" (formula "55") (term "0,0"))
                                    (rule "inEqSimp_homoInEq1" (formula "55") (term "1,0,0"))
                                    (rule "polySimp_pullOutFactor1" (formula "55") (term "0,1,0,0"))
                                    (rule "add_literals" (formula "55") (term "1,0,1,0,0"))
                                    (rule "times_zero_1" (formula "55") (term "0,1,0,0"))
                                    (rule "leq_literals" (formula "55") (term "1,0,0"))
                                     (builtin "One Step Simplification" (formula "55"))
                                    (rule "true_left" (formula "55"))
                                    (rule "cnf_rightDist" (formula "3") (term "0,0"))
                                    (rule "distr_forallAnd" (formula "3") (term "0"))
                                    (rule "distr_forallAnd" (formula "3"))
                                    (rule "andLeft" (formula "3"))
                                    (rule "cnf_rightDist" (formula "26") (term "0,0,0"))
                                    (rule "distr_forallAnd" (formula "26") (term "0,0"))
                                    (rule "distr_forallAnd" (formula "26") (term "0"))
                                    (rule "distr_forallAnd" (formula "26"))
                                    (rule "andLeft" (formula "26"))
                                    (rule "cnf_rightDist" (formula "25") (term "0,0,0"))
                                    (rule "distr_forallAnd" (formula "25") (term "0,0"))
                                    (rule "distr_forallAnd" (formula "25") (term "0"))
                                    (rule "distr_forallAnd" (formula "25"))
                                    (rule "andLeft" (formula "25"))
                                    (rule "shift_paren_or" (formula "11") (term "0,0,0"))
                                     (builtin "One Step Simplification" (formula "11"))
                                    (rule "eqSymm" (formula "11") (term "1,1,0,0,0"))
                                    (rule "castedGetAny" (formula "11") (term "0,0,1,0,0,0"))
                                    (rule "castedGetAny" (formula "11") (term "1,0,0,0,0,0,0"))
                                    (rule "castedGetAny" (formula "11") (term "0,1,1,0,0,0"))
                                     (builtin "One Step Simplification" (formula "11"))
                                    (rule "true_left" (formula "11"))
                                    (rule "cnf_rightDist" (formula "28") (term "0,0,0"))
                                    (rule "distr_forallAnd" (formula "28") (term "0,0"))
                                    (rule "distr_forallAnd" (formula "28") (term "0"))
                                    (rule "distr_forallAnd" (formula "28"))
                                    (rule "andLeft" (formula "28"))
                                    (rule "shift_paren_or" (formula "12") (term "0,0,0"))
                                     (builtin "One Step Simplification" (formula "12"))
                                    (rule "eqSymm" (formula "12") (term "1,1,0,0,0"))
                                    (rule "castedGetAny" (formula "12") (term "0,0,1,0,0,0"))
                                    (rule "castedGetAny" (formula "12") (term "1,0,0,0,0,0,0"))
                                    (rule "castedGetAny" (formula "12") (term "0,1,1,0,0,0"))
                                     (builtin "One Step Simplification" (formula "12"))
                                    (rule "true_left" (formula "12"))
                                    (rule "shift_paren_or" (formula "13") (term "0,0,0"))
                                     (builtin "One Step Simplification" (formula "13"))
                                    (rule "eqSymm" (formula "13") (term "1,1,0,0,0"))
                                    (rule "castedGetAny" (formula "13") (term "1,0,0,0,0,0,0"))
                                    (rule "castedGetAny" (formula "13") (term "0,0,1,0,0,0"))
                                    (rule "castedGetAny" (formula "13") (term "0,1,1,0,0,0"))
                                     (builtin "One Step Simplification" (formula "13"))
                                    (rule "true_left" (formula "13"))
                                    (rule "cnf_rightDist" (formula "13") (term "0,0,0"))
                                    (rule "distr_forallAnd" (formula "13") (term "0,0"))
                                    (rule "distr_forallAnd" (formula "13") (term "0"))
                                    (rule "distr_forallAnd" (formula "13"))
                                    (rule "andLeft" (formula "13"))
                                    (rule "cnf_rightDist" (formula "10") (term "0,0,0"))
                                    (rule "distr_forallAnd" (formula "10") (term "0,0"))
                                    (rule "distr_forallAnd" (formula "10") (term "0"))
                                    (rule "distr_forallAnd" (formula "10"))
                                    (rule "andLeft" (formula "10"))
                                    (rule "cnf_rightDist" (formula "12") (term "0,0,0"))
                                    (rule "distr_forallAnd" (formula "12") (term "0,0"))
                                    (rule "distr_forallAnd" (formula "12") (term "0"))
                                    (rule "distr_forallAnd" (formula "12"))
                                    (rule "andLeft" (formula "12"))
                                    (rule "cnf_rightDist" (formula "14") (term "0,0,0"))
                                    (rule "distr_forallAnd" (formula "14") (term "0,0"))
                                    (rule "distr_forallAnd" (formula "14") (term "0"))
                                    (rule "distr_forallAnd" (formula "14"))
                                    (rule "andLeft" (formula "14"))
                                    (rule "shift_paren_or" (formula "58") (term "0,0"))
                                    (rule "inEqSimp_or_tautInEq2" (formula "58") (term "0,0,0"))
                                    (rule "add_zero_right" (formula "58") (term "1,1,0,0,0"))
                                    (rule "qeq_literals" (formula "58") (term "1,0,0,0"))
                                     (builtin "One Step Simplification" (formula "58"))
                                    (rule "true_left" (formula "58"))
                                    (rule "commute_or" (formula "3") (term "0,0"))
                                    (rule "cnf_rightDist" (formula "3") (term "0,0"))
                                    (rule "distr_forallAnd" (formula "3") (term "0"))
                                    (rule "distr_forallAnd" (formula "3"))
                                    (rule "andLeft" (formula "3"))
                                    (rule "commute_or" (formula "6") (term "1,0,1,0"))
                                    (rule "commute_or" (formula "6") (term "0,0,1,0"))
                                    (rule "shift_paren_and" (formula "6") (term "1"))
                                    (rule "cnf_rightDist" (formula "5") (term "0,0,0"))
                                    (rule "distr_forallAnd" (formula "5") (term "0,0"))
                                    (rule "distr_forallAnd" (formula "5") (term "0"))
                                    (rule "distr_forallAnd" (formula "5"))
                                    (rule "andLeft" (formula "5"))
                                    (rule "cnf_rightDist" (formula "4") (term "0,0,0"))
                                    (rule "distr_forallAnd" (formula "4") (term "0,0"))
                                    (rule "distr_forallAnd" (formula "4") (term "0"))
                                    (rule "distr_forallAnd" (formula "4"))
                                    (rule "andLeft" (formula "4"))
                                    (rule "commute_or_2" (formula "28") (term "0,0,0"))
                                     (builtin "One Step Simplification" (formula "28"))
                                    (rule "eqSymm" (formula "28") (term "0,0,0,0"))
                                    (rule "castedGetAny" (formula "28") (term "0,0,1,0,0,0"))
                                    (rule "castedGetAny" (formula "28") (term "1,0,0,1,1,0,0,0"))
                                    (rule "castedGetAny" (formula "28") (term "0,0,0,0,0"))
                                     (builtin "One Step Simplification" (formula "28"))
                                    (rule "true_left" (formula "28"))
                                    (rule "commute_or_2" (formula "29") (term "0,0,0"))
                                     (builtin "One Step Simplification" (formula "29"))
                                    (rule "eqSymm" (formula "29") (term "0,0,0,0"))
                                    (rule "castedGetAny" (formula "29") (term "1,0,0,1,1,0,0,0"))
                                    (rule "castedGetAny" (formula "29") (term "0,0,1,0,0,0"))
                                    (rule "castedGetAny" (formula "29") (term "0,0,0,0,0"))
                                     (builtin "One Step Simplification" (formula "29"))
                                    (rule "true_left" (formula "29"))
                                    (rule "cnf_rightDist" (formula "2") (term "0,0,0"))
                                    (rule "distr_forallAnd" (formula "2") (term "0,0"))
                                    (rule "distr_forallAnd" (formula "2") (term "0"))
                                    (rule "distr_forallAnd" (formula "2"))
                                    (rule "andLeft" (formula "2"))
                                    (rule "shift_paren_or" (formula "28") (term "0,0,0"))
                                     (builtin "One Step Simplification" (formula "28"))
                                    (rule "eqSymm" (formula "28") (term "1,0,0,0"))
                                    (rule "castedGetAny" (formula "28") (term "0,0,0,0,0,0"))
                                    (rule "castedGetAny" (formula "28") (term "1,0,0,1,0,0,0,0"))
                                    (rule "castedGetAny" (formula "28") (term "0,1,0,0,0"))
                                     (builtin "One Step Simplification" (formula "28"))
                                    (rule "true_left" (formula "28"))
                                    (rule "cnf_rightDist" (formula "1") (term "0,0,0"))
                                    (rule "distr_forallAnd" (formula "1") (term "0,0"))
                                    (rule "distr_forallAnd" (formula "1") (term "0"))
                                    (rule "distr_forallAnd" (formula "1"))
                                    (rule "andLeft" (formula "1"))
                                    (rule "cnf_rightDist" (formula "25") (term "0,0,0"))
                                    (rule "distr_forallAnd" (formula "25") (term "0,0"))
                                    (rule "distr_forallAnd" (formula "25") (term "0"))
                                    (rule "distr_forallAnd" (formula "25"))
                                    (rule "andLeft" (formula "25"))
                                    (rule "shift_paren_or" (formula "28") (term "0,0,0"))
                                     (builtin "One Step Simplification" (formula "28"))
                                    (rule "eqSymm" (formula "28") (term "1,1,0,0,0"))
                                    (rule "castedGetAny" (formula "28") (term "1,0,0,0,0,0,0"))
                                    (rule "castedGetAny" (formula "28") (term "0,0,1,0,0,0"))
                                    (rule "castedGetAny" (formula "28") (term "0,1,1,0,0,0"))
                                     (builtin "One Step Simplification" (formula "28"))
                                    (rule "true_left" (formula "28"))
                                    (rule "shift_paren_or" (formula "28") (term "0,0,0"))
                                     (builtin "One Step Simplification" (formula "28"))
                                    (rule "eqSymm" (formula "28") (term "1,0,0,0"))
                                    (rule "castedGetAny" (formula "28") (term "0,0,0,0,0,0"))
                                    (rule "castedGetAny" (formula "28") (term "1,0,0,1,0,0,0,0"))
                                    (rule "castedGetAny" (formula "28") (term "0,1,0,0,0"))
                                     (builtin "One Step Simplification" (formula "28"))
                                    (rule "true_left" (formula "28"))
                                    (rule "commute_or" (formula "3") (term "0,0"))
                                    (rule "cnf_rightDist" (formula "26") (term "0,0,0"))
                                    (rule "distr_forallAnd" (formula "26") (term "0,0"))
                                    (rule "distr_forallAnd" (formula "26") (term "0"))
                                    (rule "distr_forallAnd" (formula "26"))
                                    (rule "andLeft" (formula "26"))
                                    (rule "shift_paren_or" (formula "11") (term "0,0,0"))
                                     (builtin "One Step Simplification" (formula "11"))
                                    (rule "eqSymm" (formula "11") (term "1,1,0,0,0"))
                                    (rule "castedGetAny" (formula "11") (term "1,0,0,0,0,0,0"))
                                    (rule "castedGetAny" (formula "11") (term "0,0,1,0,0,0"))
                                    (rule "castedGetAny" (formula "11") (term "0,1,1,0,0,0"))
                                     (builtin "One Step Simplification" (formula "11"))
                                    (rule "true_left" (formula "11"))
                                    (rule "shift_paren_or" (formula "12") (term "0,0,0"))
                                     (builtin "One Step Simplification" (formula "12"))
                                    (rule "eqSymm" (formula "12") (term "1,1,0,0,0"))
                                    (rule "castedGetAny" (formula "12") (term "1,0,0,0,0,0,0"))
                                    (rule "castedGetAny" (formula "12") (term "0,0,1,0,0,0"))
                                    (rule "castedGetAny" (formula "12") (term "0,1,1,0,0,0"))
                                     (builtin "One Step Simplification" (formula "12"))
                                    (rule "true_left" (formula "12"))
                                    (rule "commute_or_2" (formula "5") (term "0,0,0"))
                                     (builtin "One Step Simplification" (formula "5"))
                                    (rule "eqSymm" (formula "5") (term "1,0,0,0,0"))
                                    (rule "castedGetAny" (formula "5") (term "0,0,0,0,0,0"))
                                    (rule "castedGetAny" (formula "5") (term "1,0,0,1,0,0,0"))
                                    (rule "castedGetAny" (formula "5") (term "0,1,0,0,0,0"))
                                     (builtin "One Step Simplification" (formula "5"))
                                    (rule "true_left" (formula "5"))
                                    (rule "shift_paren_or" (formula "12") (term "0,0,0"))
                                     (builtin "One Step Simplification" (formula "12"))
                                    (rule "eqSymm" (formula "12") (term "1,1,0,0,0"))
                                    (rule "castedGetAny" (formula "12") (term "0,0,1,0,0,0"))
                                    (rule "castedGetAny" (formula "12") (term "1,0,0,0,0,0,0"))
                                    (rule "castedGetAny" (formula "12") (term "0,1,1,0,0,0"))
                                     (builtin "One Step Simplification" (formula "12"))
                                    (rule "true_left" (formula "12"))
                                    (rule "commute_or_2" (formula "3") (term "0,0,0"))
                                     (builtin "One Step Simplification" (formula "3"))
                                    (rule "eqSymm" (formula "3") (term "1,0,0,0,0"))
                                    (rule "castedGetAny" (formula "3") (term "1,0,0,1,0,0,0"))
                                    (rule "castedGetAny" (formula "3") (term "0,0,0,0,0,0"))
                                    (rule "castedGetAny" (formula "3") (term "0,1,0,0,0,0"))
                                     (builtin "One Step Simplification" (formula "3"))
                                    (rule "true_left" (formula "3"))
                                    (rule "cnf_rightDist" (formula "11") (term "0,0,0"))
                                    (rule "distr_forallAnd" (formula "11") (term "0,0"))
                                    (rule "distr_forallAnd" (formula "11") (term "0"))
                                    (rule "distr_forallAnd" (formula "11"))
                                    (rule "andLeft" (formula "11"))
                                    (rule "shift_paren_or" (formula "4") (term "0,0,0"))
                                     (builtin "One Step Simplification" (formula "4"))
                                    (rule "eqSymm" (formula "4") (term "1,1,0,0,0"))
                                    (rule "castedGetAny" (formula "4") (term "0,0,0,0,0,0"))
                                    (rule "castedGetAny" (formula "4") (term "0,0,1,0,0,0"))
                                    (rule "castedGetAny" (formula "4") (term "0,1,1,0,0,0"))
                                     (builtin "One Step Simplification" (formula "4"))
                                    (rule "true_left" (formula "4"))
                                    (rule "cnf_rightDist" (formula "7") (term "0,0,0"))
                                    (rule "distr_forallAnd" (formula "7") (term "0,0"))
                                    (rule "distr_forallAnd" (formula "7") (term "0"))
                                    (rule "distr_forallAnd" (formula "7"))
                                    (rule "andLeft" (formula "7"))
                                    (rule "shift_paren_or" (formula "3") (term "0,0,0"))
                                     (builtin "One Step Simplification" (formula "3"))
                                    (rule "eqSymm" (formula "3") (term "1,1,0,0,0"))
                                    (rule "castedGetAny" (formula "3") (term "0,0,1,0,0,0"))
                                    (rule "castedGetAny" (formula "3") (term "0,0,0,0,0,0"))
                                    (rule "castedGetAny" (formula "3") (term "0,1,1,0,0,0"))
                                     (builtin "One Step Simplification" (formula "3"))
                                    (rule "true_left" (formula "3"))
                                    (rule "cnf_rightDist" (formula "7") (term "0,0,0"))
                                    (rule "distr_forallAnd" (formula "7") (term "0,0"))
                                    (rule "distr_forallAnd" (formula "7") (term "0"))
                                    (rule "distr_forallAnd" (formula "7"))
                                    (rule "andLeft" (formula "7"))
                                    (rule "cnf_rightDist" (formula "9") (term "0,0,0"))
                                    (rule "distr_forallAnd" (formula "9") (term "0,0"))
                                    (rule "distr_forallAnd" (formula "9") (term "0"))
                                    (rule "distr_forallAnd" (formula "9"))
                                    (rule "andLeft" (formula "9"))
                                    (rule "orLeft" (formula "3"))
                                    (branch " result_46.seq@anon_heap_LOOP«anonHeapFunction».length ≥ 1 + i_1 ∧ ( ( (java.lang.String)result_46.seq@anon_heap_add«anonHeapFunction»[i_1] = null ∨ (java.lang.String)(seqGetOutside) = null) ∧ ( (java.lang.String)(seqGetOutside) = null ∨ result_46.seq@anon_heap_LOOP«anonHeapFunction».length ≥ 1 + i_1) ∧ ( (java.lang.String)result_46.seq@anon_heap_add«anonHeapFunction»[i_1] = null ∨ result_46.seq@anon_heap_LOOP«anonHeapFunction».length ≤ i_1))"
                                       (rule "andLeft" (formula "3"))
                                       (rule "andLeft" (formula "4"))
                                       (rule "andLeft" (formula "4"))
                                       (rule "replace_known_left" (formula "5") (term "1") (ifseqformula "3"))
                                        (builtin "One Step Simplification" (formula "5"))
                                       (rule "true_left" (formula "5"))
                                       (rule "inEqSimp_subsumption1" (formula "7") (ifseqformula "3"))
                                       (rule "inEqSimp_homoInEq0" (formula "7") (term "0"))
                                       (rule "polySimp_pullOutFactor1b" (formula "7") (term "0,0"))
                                       (rule "add_literals" (formula "7") (term "1,1,0,0"))
                                       (rule "times_zero_1" (formula "7") (term "1,0,0"))
                                       (rule "add_literals" (formula "7") (term "0,0"))
                                       (rule "qeq_literals" (formula "7") (term "0"))
                                        (builtin "One Step Simplification" (formula "7"))
                                       (rule "true_left" (formula "7"))
                                       (rule "inEqSimp_contradInEq1" (formula "5") (term "1") (ifseqformula "3"))
                                       (rule "inEqSimp_homoInEq1" (formula "5") (term "0,1"))
                                       (rule "polySimp_pullOutFactor1b" (formula "5") (term "0,0,1"))
                                       (rule "add_literals" (formula "5") (term "1,1,0,0,1"))
                                       (rule "times_zero_1" (formula "5") (term "1,0,0,1"))
                                       (rule "add_literals" (formula "5") (term "0,0,1"))
                                       (rule "leq_literals" (formula "5") (term "0,1"))
                                        (builtin "One Step Simplification" (formula "5"))
                                       (rule "replace_known_left" (formula "4") (term "0") (ifseqformula "5"))
                                        (builtin "One Step Simplification" (formula "4"))
                                       (rule "true_left" (formula "4"))
                                       (rule "shift_paren_or" (formula "21") (term "0,0,0"))
                                        (builtin "One Step Simplification" (formula "21"))
                                       (rule "eqSymm" (formula "21") (term "1,0,0,0"))
                                       (rule "castedGetAny" (formula "21") (term "0,0,0,0,0,0"))
                                       (rule "castedGetAny" (formula "21") (term "1,0,0,1,0,0,0,0"))
                                       (rule "castedGetAny" (formula "21") (term "0,1,0,0,0"))
                                        (builtin "One Step Simplification" (formula "21"))
                                       (rule "true_left" (formula "21"))
                                       (rule "commute_or_2" (formula "21") (term "0,0,0"))
                                        (builtin "One Step Simplification" (formula "21"))
                                       (rule "eqSymm" (formula "21") (term "1,0,0,0,0"))
                                       (rule "castedGetAny" (formula "21") (term "1,0,0,1,0,0,0"))
                                       (rule "castedGetAny" (formula "21") (term "0,0,0,0,0,0"))
                                       (rule "castedGetAny" (formula "21") (term "0,1,0,0,0,0"))
                                        (builtin "One Step Simplification" (formula "21"))
                                       (rule "true_left" (formula "21"))
                                       (rule "allLeft" (formula "47") (inst "t=i_1"))
                                       (rule "replace_known_left" (formula "47") (term "0,0,0") (ifseqformula "4"))
                                        (builtin "One Step Simplification" (formula "47"))
                                       (rule "inEqSimp_commuteGeq" (formula "47") (term "1"))
                                       (rule "inEqSimp_contradInEq1" (formula "47") (term "0") (ifseqformula "5"))
                                       (rule "qeq_literals" (formula "47") (term "0,0"))
                                        (builtin "One Step Simplification" (formula "47"))
                                       (rule "inEqSimp_contradInEq1" (formula "47") (ifseqformula "3"))
                                       (rule "andLeft" (formula "47"))
                                       (rule "inEqSimp_homoInEq1" (formula "47"))
                                       (rule "polySimp_pullOutFactor1b" (formula "47") (term "0"))
                                       (rule "add_literals" (formula "47") (term "1,1,0"))
                                       (rule "times_zero_1" (formula "47") (term "1,0"))
                                       (rule "add_literals" (formula "47") (term "0"))
                                       (rule "leq_literals" (formula "47"))
                                       (rule "closeFalse" (formula "47"))
                                    )
                                    (branch " result_46.seq@anon_heap_LOOP«anonHeapFunction».length ≤ i_1 ∧ ( ( (java.lang.String)result_48 = null ∨ (java.lang.String)(seqGetOutside) = null) ∧ ( (java.lang.String)(seqGetOutside) = null ∨ result_46.seq@anon_heap_LOOP«anonHeapFunction».length = i_1)) ∧ ( (java.lang.String)result_48 = null ∨ ¬ result_46.seq@anon_heap_LOOP«anonHeapFunction».length = i_1)"
                                       (rule "andLeft" (formula "3"))
                                       (rule "andLeft" (formula "3"))
                                       (rule "andLeft" (formula "4"))
                                       (rule "inEqSimp_antiSymm" (formula "8") (ifseqformula "3"))
                                       (rule "replace_known_left" (formula "5") (term "1") (ifseqformula "8"))
                                        (builtin "One Step Simplification" (formula "5"))
                                       (rule "true_left" (formula "5"))
                                       (rule "replace_known_left" (formula "5") (term "0,1") (ifseqformula "7"))
                                        (builtin "One Step Simplification" (formula "5"))
                                       (rule "replace_known_left" (formula "4") (term "0") (ifseqformula "5"))
                                        (builtin "One Step Simplification" (formula "4"))
                                       (rule "true_left" (formula "4"))
                                       (rule "applyEq" (formula "50") (term "0") (ifseqformula "6"))
                                       (rule "applyEq" (formula "7") (term "0") (ifseqformula "6"))
                                       (rule "inEqSimp_homoInEq1" (formula "7"))
                                       (rule "polySimp_pullOutFactor1" (formula "7") (term "0"))
                                       (rule "add_literals" (formula "7") (term "1,0"))
                                       (rule "times_zero_1" (formula "7") (term "0"))
                                       (rule "leq_literals" (formula "7"))
                                       (rule "true_left" (formula "7"))
                                       (rule "applyEq" (formula "60") (term "1,0") (ifseqformula "6"))
                                       (rule "applyEq" (formula "59") (term "2,0") (ifseqformula "6"))
                                       (rule "lenOfSeqSubEQ" (formula "58") (term "1,1") (ifseqformula "59"))
                                       (rule "polySimp_elimSub" (formula "58") (term "1,1,1"))
                                       (rule "times_zero_2" (formula "58") (term "1,1,1,1"))
                                       (rule "add_zero_right" (formula "58") (term "1,1,1"))
                                       (rule "polySimp_homoEq" (formula "58"))
                                       (rule "polySimp_addComm1" (formula "58") (term "0"))
                                       (rule "lenOfSeqSubEQ" (formula "6") (term "0") (ifseqformula "59"))
                                       (rule "polySimp_elimSub" (formula "6") (term "1,0"))
                                       (rule "mul_literals" (formula "6") (term "1,1,0"))
                                       (rule "add_zero_right" (formula "6") (term "1,0"))
                                        (builtin "One Step Simplification" (formula "6"))
                                       (rule "eqSymm" (formula "6") (term "1"))
                                       (rule "lenOfSeqSubEQ" (formula "3") (term "0") (ifseqformula "59"))
                                       (rule "polySimp_elimSub" (formula "3") (term "1,0"))
                                       (rule "mul_literals" (formula "3") (term "1,1,0"))
                                       (rule "add_zero_right" (formula "3") (term "1,0"))
                                       (rule "lenOfSeqSubEQ" (formula "49") (term "1,1,0") (ifseqformula "59"))
                                       (rule "polySimp_elimSub" (formula "49") (term "1,1,1,0"))
                                       (rule "mul_literals" (formula "49") (term "1,1,1,1,0"))
                                       (rule "add_zero_right" (formula "49") (term "1,1,1,0"))
                                       (rule "inEqSimp_ltToLeq" (formula "58") (term "0,1,0"))
                                       (rule "add_zero_right" (formula "58") (term "0,0,1,0"))
                                       (rule "polySimp_mulComm0" (formula "58") (term "1,0,0,1,0"))
                                       (rule "inEqSimp_ltToLeq" (formula "6") (term "0"))
                                       (rule "add_zero_right" (formula "6") (term "0,0"))
                                       (rule "polySimp_mulComm0" (formula "6") (term "1,0,0"))
                                       (rule "inEqSimp_ltToLeq" (formula "3") (term "0,0"))
                                       (rule "add_zero_right" (formula "3") (term "0,0,0"))
                                       (rule "polySimp_mulComm0" (formula "3") (term "1,0,0,0"))
                                       (rule "inEqSimp_ltToLeq" (formula "49") (term "0,1,1,0"))
                                       (rule "add_zero_right" (formula "49") (term "0,0,1,1,0"))
                                       (rule "polySimp_mulComm0" (formula "49") (term "1,0,0,1,1,0"))
                                       (rule "polySimp_sepPosMonomial" (formula "58"))
                                       (rule "polySimp_mulComm0" (formula "58") (term "1"))
                                       (rule "polySimp_rightDist" (formula "58") (term "1"))
                                       (rule "polySimp_mulLiterals" (formula "58") (term "1,1"))
                                       (rule "mul_literals" (formula "58") (term "0,1"))
                                       (rule "polySimp_elimOne" (formula "58") (term "1,1"))
                                       (rule "applyEq" (formula "3") (term "0") (ifseqformula "58"))
                                       (rule "inEqSimp_homoInEq0" (formula "3"))
                                       (rule "polySimp_mulComm0" (formula "3") (term "1,0"))
                                       (rule "polySimp_rightDist" (formula "3") (term "1,0"))
                                       (rule "mul_literals" (formula "3") (term "0,1,0"))
                                       (rule "polySimp_addAssoc" (formula "3") (term "0"))
                                       (rule "polySimp_addComm0" (formula "3") (term "0,0"))
                                       (rule "applyEq" (formula "49") (term "1,1,0") (ifseqformula "58"))
                                       (rule "inEqSimp_sepNegMonomial0" (formula "6") (term "0"))
                                       (rule "polySimp_mulLiterals" (formula "6") (term "0,0"))
                                       (rule "polySimp_elimOne" (formula "6") (term "0,0"))
                                       (rule "inEqSimp_sepNegMonomial0" (formula "58") (term "0,0"))
                                       (rule "polySimp_mulLiterals" (formula "58") (term "0,0,0"))
                                       (rule "polySimp_elimOne" (formula "58") (term "0,0,0"))
                                       (rule "inEqSimp_sepNegMonomial1" (formula "3"))
                                       (rule "polySimp_mulLiterals" (formula "3") (term "0"))
                                       (rule "polySimp_elimOne" (formula "3") (term "0"))
                                       (rule "shift_paren_or" (formula "22") (term "0,0,0"))
                                        (builtin "One Step Simplification" (formula "22"))
                                       (rule "eqSymm" (formula "22") (term "1,0,0,0"))
                                       (rule "castedGetAny" (formula "22") (term "0,0,0,0,0,0"))
                                       (rule "castedGetAny" (formula "22") (term "1,0,0,1,0,0,0,0"))
                                       (rule "castedGetAny" (formula "22") (term "0,1,0,0,0"))
                                        (builtin "One Step Simplification" (formula "22"))
                                       (rule "true_left" (formula "22"))
                                       (rule "commute_or_2" (formula "22") (term "0,0,0"))
                                        (builtin "One Step Simplification" (formula "22"))
                                       (rule "eqSymm" (formula "22") (term "1,0,0,0,0"))
                                       (rule "castedGetAny" (formula "22") (term "1,0,0,1,0,0,0"))
                                       (rule "castedGetAny" (formula "22") (term "0,0,0,0,0,0"))
                                       (rule "castedGetAny" (formula "22") (term "0,1,0,0,0,0"))
                                        (builtin "One Step Simplification" (formula "22"))
                                       (rule "true_left" (formula "22"))
                                       (rule "cnf_rightDist" (formula "2") (term "0,0,0"))
                                       (rule "commute_or" (formula "21") (term "0,1,0,0,0"))
                                       (rule "cnf_rightDist" (formula "1") (term "0,0,0"))
                                       (rule "allLeft" (formula "25") (inst "t=Seq::select(anon_heap_add<<anonHeapFunction>>,
            result_46,
            java.util.Collection::$seq)"))
                                       (rule "allLeft" (formula "24") (inst "t=Seq::select(anon_heap_add<<anonHeapFunction>>,
            result_46,
            java.util.Collection::$seq)"))
                                       (rule "distr_forallAnd" (formula "2") (term "0,0"))
                                       (rule "distr_forallAnd" (formula "1") (term "0,0"))
                                       (rule "shift_paren_or" (formula "13") (term "0,0,0"))
                                        (builtin "One Step Simplification" (formula "13"))
                                       (rule "eqSymm" (formula "13") (term "1,1,0,0,0"))
                                       (rule "castedGetAny" (formula "13") (term "1,0,0,0,0,0,0"))
                                       (rule "castedGetAny" (formula "13") (term "0,0,1,0,0,0"))
                                       (rule "castedGetAny" (formula "13") (term "0,1,1,0,0,0"))
                                        (builtin "One Step Simplification" (formula "13"))
                                       (rule "true_left" (formula "13"))
                                       (rule "distr_forallAnd" (formula "2") (term "0"))
                                       (rule "distr_forallAnd" (formula "1") (term "0"))
                                       (rule "distr_forallAnd" (formula "2"))
                                       (rule "andLeft" (formula "2"))
                                       (rule "distr_forallAnd" (formula "1"))
                                       (rule "andLeft" (formula "1"))
                                       (rule "commute_or" (formula "8"))
                                       (rule "inEqSimp_or_weaken1" (formula "8"))
                                       (rule "add_literals" (formula "8") (term "1,0"))
                                        (builtin "One Step Simplification" (formula "8") (ifInst ""  (formula "7")))
                                       (rule "true_left" (formula "8"))
                                       (rule "shift_paren_or" (formula "10") (term "0,0,0"))
                                        (builtin "One Step Simplification" (formula "10"))
                                       (rule "eqSymm" (formula "10") (term "1,1,0,0,0"))
                                       (rule "castedGetAny" (formula "10") (term "0,0,1,0,0,0"))
                                       (rule "castedGetAny" (formula "10") (term "0,0,0,0,0,0"))
                                       (rule "castedGetAny" (formula "10") (term "0,1,1,0,0,0"))
                                        (builtin "One Step Simplification" (formula "10"))
                                       (rule "true_left" (formula "10"))
                                       (rule "cnf_rightDist" (formula "12") (term "0,0,0"))
                                       (rule "distr_forallAnd" (formula "12") (term "0,0"))
                                       (rule "shift_paren_or" (formula "11") (term "0,0,0"))
                                        (builtin "One Step Simplification" (formula "11"))
                                       (rule "eqSymm" (formula "11") (term "1,1,0,0,0"))
                                       (rule "castedGetAny" (formula "11") (term "1,0,0,0,0,0,0"))
                                       (rule "castedGetAny" (formula "11") (term "0,0,1,0,0,0"))
                                       (rule "castedGetAny" (formula "11") (term "0,1,1,0,0,0"))
                                        (builtin "One Step Simplification" (formula "11"))
                                       (rule "true_left" (formula "11"))
                                       (rule "distr_forallAnd" (formula "11") (term "0"))
                                       (rule "distr_forallAnd" (formula "11"))
                                       (rule "andLeft" (formula "11"))
                                       (rule "cnf_rightDist" (formula "8") (term "0,0,0"))
                                       (rule "distr_forallAnd" (formula "8") (term "0,0"))
                                       (rule "distr_forallAnd" (formula "8") (term "0"))
                                       (rule "distr_forallAnd" (formula "8"))
                                       (rule "andLeft" (formula "8"))
                                       (rule "cnf_rightDist" (formula "10") (term "0,0,0"))
                                       (rule "distr_forallAnd" (formula "10") (term "0,0"))
                                       (rule "distr_forallAnd" (formula "10") (term "0"))
                                       (rule "distr_forallAnd" (formula "10"))
                                       (rule "andLeft" (formula "10"))
                                       (rule "cnf_rightDist" (formula "12") (term "0,0,0"))
                                       (rule "distr_forallAnd" (formula "12") (term "0,0"))
                                       (rule "distr_forallAnd" (formula "12") (term "0"))
                                       (rule "distr_forallAnd" (formula "12"))
                                       (rule "andLeft" (formula "12"))
                                       (rule "shift_paren_or" (formula "4") (term "0,0,0"))
                                        (builtin "One Step Simplification" (formula "4"))
                                       (rule "eqSymm" (formula "4") (term "1,1,0,0,0"))
                                       (rule "castedGetAny" (formula "4") (term "0,0,1,0,0,0"))
                                       (rule "castedGetAny" (formula "4") (term "1,0,0,0,0,0,0"))
                                       (rule "castedGetAny" (formula "4") (term "0,1,1,0,0,0"))
                                        (builtin "One Step Simplification" (formula "4"))
                                       (rule "true_left" (formula "4"))
                                       (rule "shift_paren_or" (formula "2") (term "0,0,0"))
                                        (builtin "One Step Simplification" (formula "2"))
                                       (rule "eqSymm" (formula "2") (term "1,1,0,0,0"))
                                       (rule "castedGetAny" (formula "2") (term "1,0,0,0,0,0,0"))
                                       (rule "castedGetAny" (formula "2") (term "0,0,1,0,0,0"))
                                       (rule "castedGetAny" (formula "2") (term "0,1,1,0,0,0"))
                                        (builtin "One Step Simplification" (formula "2"))
                                       (rule "true_left" (formula "2"))
                                       (rule "commute_or_2" (formula "12") (term "0,0,0"))
                                        (builtin "One Step Simplification" (formula "12"))
                                       (rule "eqSymm" (formula "12") (term "1,0,0,0,0"))
                                       (rule "castedGetAny" (formula "12") (term "1,0,0,1,0,0,0"))
                                       (rule "castedGetAny" (formula "12") (term "0,0,0,0,0,0"))
                                       (rule "castedGetAny" (formula "12") (term "0,1,0,0,0,0"))
                                        (builtin "One Step Simplification" (formula "12"))
                                       (rule "true_left" (formula "12"))
                                       (rule "cnf_rightDist" (formula "20") (term "0,0,0"))
                                       (rule "distr_forallAnd" (formula "20") (term "0,0"))
                                       (rule "distr_forallAnd" (formula "20") (term "0"))
                                       (rule "distr_forallAnd" (formula "20"))
                                       (rule "andLeft" (formula "20"))
                                       (rule "commute_or_2" (formula "10") (term "0,0,0"))
                                        (builtin "One Step Simplification" (formula "10"))
                                       (rule "eqSymm" (formula "10") (term "1,0,0,0,0"))
                                       (rule "castedGetAny" (formula "10") (term "0,0,0,0,0,0"))
                                       (rule "castedGetAny" (formula "10") (term "1,0,0,1,0,0,0"))
                                       (rule "castedGetAny" (formula "10") (term "0,1,0,0,0,0"))
                                        (builtin "One Step Simplification" (formula "10"))
                                       (rule "true_left" (formula "10"))
                                       (rule "shift_paren_or" (formula "11") (term "0,0,0"))
                                        (builtin "One Step Simplification" (formula "11"))
                                       (rule "eqSymm" (formula "11") (term "1,1,0,0,0"))
                                       (rule "castedGetAny" (formula "11") (term "0,0,0,0,0,0"))
                                       (rule "castedGetAny" (formula "11") (term "0,0,1,0,0,0"))
                                       (rule "castedGetAny" (formula "11") (term "0,1,1,0,0,0"))
                                        (builtin "One Step Simplification" (formula "11"))
                                       (rule "true_left" (formula "11"))
                                       (rule "cnf_rightDist" (formula "2") (term "0,0,0"))
                                       (rule "distr_forallAnd" (formula "2") (term "0,0"))
                                       (rule "distr_forallAnd" (formula "2") (term "0"))
                                       (rule "distr_forallAnd" (formula "2"))
                                       (rule "andLeft" (formula "2"))
                                       (rule "cnf_rightDist" (formula "1") (term "0,0,0"))
                                       (rule "distr_forallAnd" (formula "1") (term "0,0"))
                                       (rule "distr_forallAnd" (formula "1") (term "0"))
                                       (rule "distr_forallAnd" (formula "1"))
                                       (rule "andLeft" (formula "1"))
                                       (rule "shift_paren_or" (formula "9") (term "0,0,0"))
                                        (builtin "One Step Simplification" (formula "9"))
                                       (rule "eqSymm" (formula "9") (term "1,1,0,0,0"))
                                       (rule "castedGetAny" (formula "9") (term "0,0,1,0,0,0"))
                                       (rule "castedGetAny" (formula "9") (term "1,0,0,0,0,0,0"))
                                       (rule "castedGetAny" (formula "9") (term "0,1,1,0,0,0"))
                                        (builtin "One Step Simplification" (formula "9"))
                                       (rule "true_left" (formula "9"))
                                       (rule "shift_paren_or" (formula "10") (term "0,0,0"))
                                        (builtin "One Step Simplification" (formula "10"))
                                       (rule "eqSymm" (formula "10") (term "1,1,0,0,0"))
                                       (rule "castedGetAny" (formula "10") (term "0,0,1,0,0,0"))
                                       (rule "castedGetAny" (formula "10") (term "1,0,0,0,0,0,0"))
                                       (rule "castedGetAny" (formula "10") (term "0,1,1,0,0,0"))
                                        (builtin "One Step Simplification" (formula "10"))
                                       (rule "true_left" (formula "10"))
                                       (rule "shift_paren_or" (formula "10") (term "0,0,0"))
                                        (builtin "One Step Simplification" (formula "10"))
                                       (rule "eqSymm" (formula "10") (term "1,1,0,0,0"))
                                       (rule "castedGetAny" (formula "10") (term "0,0,0,0,0,0"))
                                       (rule "castedGetAny" (formula "10") (term "0,0,1,0,0,0"))
                                       (rule "castedGetAny" (formula "10") (term "0,1,1,0,0,0"))
                                        (builtin "One Step Simplification" (formula "10"))
                                       (rule "true_left" (formula "10"))
                                       (rule "commute_or_2" (formula "17") (term "0,0,0"))
                                        (builtin "One Step Simplification" (formula "17"))
                                       (rule "eqSymm" (formula "17") (term "0,0,0,0"))
                                       (rule "castedGetAny" (formula "17") (term "0,0,1,0,0,0"))
                                       (rule "castedGetAny" (formula "17") (term "1,0,0,1,1,0,0,0"))
                                       (rule "castedGetAny" (formula "17") (term "0,0,0,0,0"))
                                        (builtin "One Step Simplification" (formula "17"))
                                       (rule "true_left" (formula "17"))
                                       (rule "cnf_rightDist" (formula "8") (term "0,0,0"))
                                       (rule "distr_forallAnd" (formula "8") (term "0,0"))
                                       (rule "distr_forallAnd" (formula "8") (term "0"))
                                       (rule "distr_forallAnd" (formula "8"))
                                       (rule "andLeft" (formula "8"))
                                       (rule "cnf_rightDist" (formula "10") (term "0,0,0"))
                                       (rule "distr_forallAnd" (formula "10") (term "0,0"))
                                       (rule "distr_forallAnd" (formula "10") (term "0"))
                                       (rule "distr_forallAnd" (formula "10"))
                                       (rule "andLeft" (formula "10"))
                                       (rule "shift_paren_or" (formula "19") (term "0,0,0"))
                                        (builtin "One Step Simplification" (formula "19"))
                                       (rule "eqSymm" (formula "19") (term "1,0,0,0"))
                                       (rule "castedGetAny" (formula "19") (term "1,0,0,1,0,0,0,0"))
                                       (rule "castedGetAny" (formula "19") (term "0,0,0,0,0,0"))
                                       (rule "castedGetAny" (formula "19") (term "0,1,0,0,0"))
                                        (builtin "One Step Simplification" (formula "19"))
                                       (rule "true_left" (formula "19"))
                                       (rule "allLeft" (formula "19") (inst "t=Seq::select(heap, ls, java.util.Collection::$seq)"))
                                       (rule "shift_paren_or" (formula "4") (term "0,0,0"))
                                        (builtin "One Step Simplification" (formula "4"))
                                       (rule "eqSymm" (formula "4") (term "1,1,0,0,0"))
                                       (rule "castedGetAny" (formula "4") (term "1,0,0,0,0,0,0"))
                                       (rule "castedGetAny" (formula "4") (term "0,0,1,0,0,0"))
                                       (rule "castedGetAny" (formula "4") (term "0,1,1,0,0,0"))
                                        (builtin "One Step Simplification" (formula "4"))
                                       (rule "true_left" (formula "4"))
                                       (rule "shift_paren_or" (formula "2") (term "0,0,0"))
                                        (builtin "One Step Simplification" (formula "2"))
                                       (rule "eqSymm" (formula "2") (term "1,1,0,0,0"))
                                       (rule "castedGetAny" (formula "2") (term "0,0,1,0,0,0"))
                                       (rule "castedGetAny" (formula "2") (term "1,0,0,0,0,0,0"))
                                       (rule "castedGetAny" (formula "2") (term "0,1,1,0,0,0"))
                                        (builtin "One Step Simplification" (formula "2"))
                                       (rule "true_left" (formula "2"))
                                       (rule "allLeft" (formula "19") (inst "t=Seq::select(heap, ls, java.util.Collection::$seq)"))
                                       (rule "commute_or_2" (formula "6") (term "0,0,0"))
                                        (builtin "One Step Simplification" (formula "6"))
                                       (rule "eqSymm" (formula "6") (term "1,0,0,0,0"))
                                       (rule "castedGetAny" (formula "6") (term "0,0,0,0,0,0"))
                                       (rule "castedGetAny" (formula "6") (term "1,0,0,1,0,0,0"))
                                       (rule "castedGetAny" (formula "6") (term "0,1,0,0,0,0"))
                                        (builtin "One Step Simplification" (formula "6"))
                                       (rule "true_left" (formula "6"))
                                       (rule "commute_or_2" (formula "7") (term "0,0,0"))
                                        (builtin "One Step Simplification" (formula "7"))
                                       (rule "eqSymm" (formula "7") (term "1,0,0,0,0"))
                                       (rule "castedGetAny" (formula "7") (term "0,0,0,0,0,0"))
                                       (rule "castedGetAny" (formula "7") (term "1,0,0,1,0,0,0"))
                                       (rule "castedGetAny" (formula "7") (term "0,1,0,0,0,0"))
                                        (builtin "One Step Simplification" (formula "7"))
                                       (rule "true_left" (formula "7"))
                                       (rule "cnf_rightDist" (formula "2") (term "0,0,0"))
                                       (rule "distr_forallAnd" (formula "2") (term "0,0"))
                                       (rule "distr_forallAnd" (formula "2") (term "0"))
                                       (rule "distr_forallAnd" (formula "2"))
                                       (rule "andLeft" (formula "2"))
                                       (rule "cnf_rightDist" (formula "1") (term "0,0,0"))
                                       (rule "distr_forallAnd" (formula "1") (term "0,0"))
                                       (rule "distr_forallAnd" (formula "1") (term "0"))
                                       (rule "distr_forallAnd" (formula "1"))
                                       (rule "andLeft" (formula "1"))
                                       (rule "shift_paren_or" (formula "8") (term "0,0,0"))
                                        (builtin "One Step Simplification" (formula "8"))
                                       (rule "eqSymm" (formula "8") (term "1,1,0,0,0"))
                                       (rule "castedGetAny" (formula "8") (term "1,0,0,0,0,0,0"))
                                       (rule "castedGetAny" (formula "8") (term "0,0,1,0,0,0"))
                                       (rule "castedGetAny" (formula "8") (term "0,1,1,0,0,0"))
                                        (builtin "One Step Simplification" (formula "8"))
                                       (rule "true_left" (formula "8"))
                                       (rule "shift_paren_or" (formula "8") (term "0,0,0"))
                                        (builtin "One Step Simplification" (formula "8"))
                                       (rule "eqSymm" (formula "8") (term "1,1,0,0,0"))
                                       (rule "castedGetAny" (formula "8") (term "1,0,0,0,0,0,0"))
                                       (rule "castedGetAny" (formula "8") (term "0,0,1,0,0,0"))
                                       (rule "castedGetAny" (formula "8") (term "0,1,1,0,0,0"))
                                        (builtin "One Step Simplification" (formula "8"))
                                       (rule "true_left" (formula "8"))
                                       (rule "ifthenelse_split" (formula "53") (term "0"))
                                       (branch "i_1 ≥ 1 TRUE"
                                          (rule "polySimp_homoEq" (formula "54"))
                                          (rule "polySimp_addComm1" (formula "54") (term "0"))
                                          (rule "polySimp_sepPosMonomial" (formula "54"))
                                          (rule "polySimp_mulComm0" (formula "54") (term "1"))
                                          (rule "polySimp_rightDist" (formula "54") (term "1"))
                                          (rule "polySimp_mulLiterals" (formula "54") (term "1,1"))
                                          (rule "mul_literals" (formula "54") (term "0,1"))
                                          (rule "polySimp_elimOne" (formula "54") (term "1,1"))
                                          (rule "applyEq" (formula "44") (term "1,1,1,0") (ifseqformula "54"))
                                          (rule "polySimp_addAssoc" (formula "44") (term "1,1,0"))
                                          (rule "add_literals" (formula "44") (term "0,1,1,0"))
                                          (rule "add_zero_left" (formula "44") (term "1,1,0"))
                                          (rule "applyEq" (formula "5") (term "0") (ifseqformula "54"))
                                          (rule "inEqSimp_homoInEq0" (formula "5"))
                                          (rule "polySimp_pullOutFactor1" (formula "5") (term "0"))
                                          (rule "add_literals" (formula "5") (term "1,0"))
                                          (rule "times_zero_1" (formula "5") (term "0"))
                                          (rule "qeq_literals" (formula "5"))
                                          (rule "true_left" (formula "5"))
                                          (rule "inEqSimp_subsumption1" (formula "6") (ifseqformula "52"))
                                          (rule "leq_literals" (formula "6") (term "0"))
                                           (builtin "One Step Simplification" (formula "6"))
                                          (rule "true_left" (formula "6"))
                                          (rule "seqGetAlphaCast" (formula "54") (term "0"))
                                          (rule "castDel" (formula "54") (term "0"))
                                           (builtin "One Step Simplification" (formula "54"))
                                          (rule "true_left" (formula "54"))
                                          (rule "equalityToSeqGetAndSeqLenLeft" (formula "53") (inst "iv=iv"))
                                          (rule "andLeft" (formula "53"))
                                          (rule "lenOfSeqSub" (formula "53") (term "0"))
                                          (rule "polySimp_elimSub" (formula "53") (term "1,0"))
                                          (rule "mul_literals" (formula "53") (term "1,1,0"))
                                          (rule "add_zero_right" (formula "53") (term "1,0"))
                                          (rule "lenOfSeqSub" (formula "54") (term "1,1,0,0"))
                                          (rule "polySimp_elimSub" (formula "54") (term "1,1,1,0,0"))
                                          (rule "mul_literals" (formula "54") (term "1,1,1,1,0,0"))
                                          (rule "add_zero_right" (formula "54") (term "1,1,1,0,0"))
                                          (rule "lenOfSeqSubEQ" (formula "53") (term "1") (ifseqformula "55"))
                                          (rule "eqSymm" (formula "53"))
                                          (rule "polySimp_elimSub" (formula "53") (term "1,0"))
                                          (rule "mul_literals" (formula "53") (term "1,1,0"))
                                          (rule "add_zero_right" (formula "53") (term "1,0"))
                                           (builtin "One Step Simplification" (formula "53"))
                                          (rule "true_left" (formula "53"))
                                          (rule "inEqSimp_ltToLeq" (formula "53") (term "0,1,1,0,0"))
                                          (rule "add_zero_right" (formula "53") (term "0,0,1,1,0,0"))
                                          (rule "polySimp_mulComm0" (formula "53") (term "1,0,0,1,1,0,0"))
                                          (rule "inEqSimp_ltToLeq" (formula "53") (term "1,0,0"))
                                          (rule "polySimp_mulComm0" (formula "53") (term "1,0,0,1,0,0"))
                                          (rule "inEqSimp_commuteLeq" (formula "53") (term "0,0,0"))
                                          (rule "applyEq" (formula "53") (term "0,0,1,0") (ifseqformula "54"))
                                           (builtin "One Step Simplification" (formula "53"))
                                          (rule "true_left" (formula "53"))
                                          (rule "shift_paren_or" (formula "4") (term "0,0,0"))
                                           (builtin "One Step Simplification" (formula "4"))
                                          (rule "eqSymm" (formula "4") (term "1,1,0,0,0"))
                                          (rule "castedGetAny" (formula "4") (term "0,0,1,0,0,0"))
                                          (rule "castedGetAny" (formula "4") (term "1,0,0,0,0,0,0"))
                                          (rule "castedGetAny" (formula "4") (term "0,1,1,0,0,0"))
                                           (builtin "One Step Simplification" (formula "4"))
                                          (rule "true_left" (formula "4"))
                                          (rule "shift_paren_or" (formula "2") (term "0,0,0"))
                                           (builtin "One Step Simplification" (formula "2"))
                                          (rule "eqSymm" (formula "2") (term "1,1,0,0,0"))
                                          (rule "castedGetAny" (formula "2") (term "0,0,1,0,0,0"))
                                          (rule "castedGetAny" (formula "2") (term "1,0,0,0,0,0,0"))
                                          (rule "castedGetAny" (formula "2") (term "0,1,1,0,0,0"))
                                           (builtin "One Step Simplification" (formula "2"))
                                          (rule "true_left" (formula "2"))
                                          (rule "cnf_rightDist" (formula "2") (term "0,0,0"))
                                          (rule "distr_forallAnd" (formula "2") (term "0,0"))
                                          (rule "distr_forallAnd" (formula "2") (term "0"))
                                          (rule "distr_forallAnd" (formula "2"))
                                          (rule "andLeft" (formula "2"))
                                          (rule "cnf_rightDist" (formula "1") (term "0,0,0"))
                                          (rule "distr_forallAnd" (formula "1") (term "0,0"))
                                          (rule "distr_forallAnd" (formula "1") (term "0"))
                                          (rule "distr_forallAnd" (formula "1"))
                                          (rule "andLeft" (formula "1"))
                                          (rule "shift_paren_or" (formula "4") (term "0,0,0"))
                                           (builtin "One Step Simplification" (formula "4"))
                                          (rule "eqSymm" (formula "4") (term "1,1,0,0,0"))
                                          (rule "castedGetAny" (formula "4") (term "1,0,0,0,0,0,0"))
                                          (rule "castedGetAny" (formula "4") (term "0,0,1,0,0,0"))
                                          (rule "castedGetAny" (formula "4") (term "0,1,1,0,0,0"))
                                           (builtin "One Step Simplification" (formula "4"))
                                          (rule "true_left" (formula "4"))
                                          (rule "shift_paren_or" (formula "2") (term "0,0,0"))
                                           (builtin "One Step Simplification" (formula "2"))
                                          (rule "eqSymm" (formula "2") (term "1,1,0,0,0"))
                                          (rule "castedGetAny" (formula "2") (term "0,0,1,0,0,0"))
                                          (rule "castedGetAny" (formula "2") (term "1,0,0,0,0,0,0"))
                                          (rule "castedGetAny" (formula "2") (term "0,1,1,0,0,0"))
                                           (builtin "One Step Simplification" (formula "2"))
                                          (rule "true_left" (formula "2"))
                                          (rule "cnf_rightDist" (formula "2") (term "0,0,0"))
                                          (rule "distr_forallAnd" (formula "2") (term "0,0"))
                                          (rule "distr_forallAnd" (formula "2") (term "0"))
                                          (rule "distr_forallAnd" (formula "2"))
                                          (rule "andLeft" (formula "2"))
                                          (rule "commute_or_2" (formula "2") (term "0,0,0"))
                                           (builtin "One Step Simplification" (formula "2"))
                                          (rule "eqSymm" (formula "2") (term "1,0,0,0,0"))
                                          (rule "castedGetAny" (formula "2") (term "1,0,0,1,0,0,0"))
                                          (rule "castedGetAny" (formula "2") (term "0,0,0,0,0,0"))
                                          (rule "castedGetAny" (formula "2") (term "0,1,0,0,0,0"))
                                           (builtin "One Step Simplification" (formula "2"))
                                          (rule "true_left" (formula "2"))
                                          (rule "shift_paren_or" (formula "2") (term "0,0,0"))
                                           (builtin "One Step Simplification" (formula "2"))
                                          (rule "eqSymm" (formula "2") (term "1,1,0,0,0"))
                                          (rule "castedGetAny" (formula "2") (term "0,0,1,0,0,0"))
                                          (rule "castedGetAny" (formula "2") (term "1,0,0,0,0,0,0"))
                                          (rule "castedGetAny" (formula "2") (term "0,1,1,0,0,0"))
                                           (builtin "One Step Simplification" (formula "2"))
                                          (rule "true_left" (formula "2"))
                                          (rule "cnf_rightDist" (formula "1") (term "0,0,0"))
                                          (rule "distr_forallAnd" (formula "1") (term "0,0"))
                                          (rule "distr_forallAnd" (formula "1") (term "0"))
                                          (rule "distr_forallAnd" (formula "1"))
                                          (rule "andLeft" (formula "1"))
                                          (rule "commute_or_2" (formula "1") (term "0,0,0"))
                                           (builtin "One Step Simplification" (formula "1"))
                                          (rule "eqSymm" (formula "1") (term "1,0,0,0,0"))
                                          (rule "castedGetAny" (formula "1") (term "0,0,0,0,0,0"))
                                          (rule "castedGetAny" (formula "1") (term "1,0,0,1,0,0,0"))
                                          (rule "castedGetAny" (formula "1") (term "0,1,0,0,0,0"))
                                           (builtin "One Step Simplification" (formula "1"))
                                          (rule "true_left" (formula "1"))
                                          (rule "shift_paren_or" (formula "1") (term "0,0,0"))
                                           (builtin "One Step Simplification" (formula "1"))
                                          (rule "eqSymm" (formula "1") (term "1,1,0,0,0"))
                                          (rule "castedGetAny" (formula "1") (term "1,0,0,0,0,0,0"))
                                          (rule "castedGetAny" (formula "1") (term "0,0,1,0,0,0"))
                                          (rule "castedGetAny" (formula "1") (term "0,1,1,0,0,0"))
                                           (builtin "One Step Simplification" (formula "1"))
                                          (rule "true_left" (formula "1"))
                                          (rule "allLeft" (formula "13") (inst "t=i_1"))
                                          (rule "applyEq" (formula "13") (term "0,0,1") (ifseqformula "51"))
                                          (rule "replace_known_right" (formula "13") (term "0,1") (ifseqformula "53"))
                                           (builtin "One Step Simplification" (formula "13"))
                                          (rule "true_left" (formula "13"))
                                          (rule "allLeft" (formula "15") (inst "t=i_1"))
                                          (rule "applyEq" (formula "15") (term "0,0,1") (ifseqformula "51"))
                                          (rule "commute_or" (formula "15"))
                                          (rule "cut_direct" (formula "15") (term "0"))
                                          (branch "CUT: java.lang.String::instance(result_48) = TRUE TRUE"
                                              (builtin "One Step Simplification" (formula "16"))
                                             (rule "true_left" (formula "16"))
                                             (rule "ineffectiveCast" (formula "1") (term "0") (ifseqformula "15"))
                                             (rule "typeEqDerived2" (formula "16") (term "0") (ifseqformula "1"))
                                              (builtin "One Step Simplification" (formula "16"))
                                             (rule "true_left" (formula "16"))
                                             (rule "applyEq" (formula "2") (term "0") (ifseqformula "1"))
                                             (rule "close" (formula "53") (ifseqformula "2"))
                                          )
                                          (branch "CUT: java.lang.String::instance(result_48) = TRUE FALSE"
                                              (builtin "One Step Simplification" (formula "15"))
                                             (rule "seqGetAlphaCast" (formula "15") (term "0"))
                                             (rule "castedGetAny" (formula "15") (term "0"))
                                              (builtin "One Step Simplification" (formula "15"))
                                             (rule "true_left" (formula "15"))
                                             (rule "allLeft" (formula "9") (inst "t=i_0"))
                                             (rule "applyEq" (formula "9") (term "0,0,1") (ifseqformula "45"))
                                             (rule "replace_known_right" (formula "9") (term "0,1") (ifseqformula "55"))
                                              (builtin "One Step Simplification" (formula "9"))
                                             (rule "true_left" (formula "9"))
                                             (rule "allLeft" (formula "11") (inst "t=i_0"))
                                             (rule "applyEq" (formula "11") (term "0,0,1") (ifseqformula "45"))
                                             (rule "replace_known_right" (formula "11") (term "1") (ifseqformula "53"))
                                              (builtin "One Step Simplification" (formula "11"))
                                             (rule "allLeft" (formula "23") (inst "t=i_0"))
                                             (rule "replace_known_left" (formula "23") (term "0,0,0") (ifseqformula "11"))
                                              (builtin "One Step Simplification" (formula "23"))
                                             (rule "inEqSimp_commuteGeq" (formula "23") (term "1"))
                                             (rule "inEqSimp_contradInEq1" (formula "23") (term "1") (ifseqformula "7"))
                                             (rule "inEqSimp_homoInEq1" (formula "23") (term "0,1"))
                                             (rule "polySimp_pullOutFactor1b" (formula "23") (term "0,0,1"))
                                             (rule "add_literals" (formula "23") (term "1,1,0,0,1"))
                                             (rule "times_zero_1" (formula "23") (term "1,0,0,1"))
                                             (rule "add_zero_right" (formula "23") (term "0,0,1"))
                                             (rule "leq_literals" (formula "23") (term "0,1"))
                                              (builtin "One Step Simplification" (formula "23"))
                                             (rule "inEqSimp_contradInEq0" (formula "40") (ifseqformula "23"))
                                             (rule "qeq_literals" (formula "40") (term "0"))
                                              (builtin "One Step Simplification" (formula "40"))
                                             (rule "closeFalse" (formula "40"))
                                          )
                                       )
                                       (branch "i_1 ≥ 1 FALSE"
                                          (rule "polySimp_homoEq" (formula "53"))
                                          (rule "mul_literals" (formula "53") (term "1,0"))
                                          (rule "add_zero_right" (formula "53") (term "0"))
                                          (rule "inEqSimp_geqRight" (formula "56"))
                                          (rule "mul_literals" (formula "1") (term "1,0,0"))
                                          (rule "add_literals" (formula "1") (term "0,0"))
                                          (rule "add_zero_left" (formula "1") (term "0"))
                                          (rule "polySimp_sepPosMonomial" (formula "54"))
                                          (rule "mul_literals" (formula "54") (term "1"))
                                          (rule "applyEq" (formula "6") (term "0") (ifseqformula "54"))
                                          (rule "inEqSimp_homoInEq0" (formula "6"))
                                          (rule "mul_literals" (formula "6") (term "1,0"))
                                          (rule "polySimp_addComm1" (formula "6") (term "0"))
                                          (rule "add_literals" (formula "6") (term "0,0"))
                                          (rule "add_zero_left" (formula "6") (term "0"))
                                          (rule "applyEq" (formula "44") (term "1,1,1,0") (ifseqformula "53"))
                                          (rule "add_literals" (formula "44") (term "1,1,0"))
                                          (rule "inEqSimp_antiSymm" (formula "7") (ifseqformula "1"))
                                          (rule "applyEqRigid" (formula "1") (term "0") (ifseqformula "7"))
                                          (rule "leq_literals" (formula "1"))
                                          (rule "true_left" (formula "1"))
                                          (rule "applyEq" (formula "7") (term "0") (ifseqformula "6"))
                                          (rule "qeq_literals" (formula "7"))
                                          (rule "true_left" (formula "7"))
                                          (rule "applyEq" (formula "53") (term "2,0") (ifseqformula "6"))
                                           (builtin "One Step Simplification" (formula "53"))
                                          (rule "eqSymm" (formula "53"))
                                          (rule "eqSeqEmpty" (formula "53"))
                                          (rule "applyEq" (formula "54") (term "1,0") (ifseqformula "6"))
                                          (rule "inEqSimp_or_tautInEq1" (formula "43") (term "0"))
                                          (rule "add_literals" (formula "43") (term "1,1,0"))
                                          (rule "qeq_literals" (formula "43") (term "1,0"))
                                           (builtin "One Step Simplification" (formula "43"))
                                          (rule "true_left" (formula "43"))
                                          (rule "shift_paren_or" (formula "4") (term "0,0,0"))
                                           (builtin "One Step Simplification" (formula "4"))
                                          (rule "eqSymm" (formula "4") (term "1,1,0,0,0"))
                                          (rule "castedGetAny" (formula "4") (term "0,0,1,0,0,0"))
                                          (rule "castedGetAny" (formula "4") (term "1,0,0,0,0,0,0"))
                                          (rule "castedGetAny" (formula "4") (term "0,1,1,0,0,0"))
                                           (builtin "One Step Simplification" (formula "4"))
                                          (rule "true_left" (formula "4"))
                                          (rule "shift_paren_or" (formula "2") (term "0,0,0"))
                                           (builtin "One Step Simplification" (formula "2"))
                                          (rule "eqSymm" (formula "2") (term "1,1,0,0,0"))
                                          (rule "castedGetAny" (formula "2") (term "1,0,0,0,0,0,0"))
                                          (rule "castedGetAny" (formula "2") (term "0,0,1,0,0,0"))
                                          (rule "castedGetAny" (formula "2") (term "0,1,1,0,0,0"))
                                           (builtin "One Step Simplification" (formula "2"))
                                          (rule "true_left" (formula "2"))
                                          (rule "cnf_rightDist" (formula "2") (term "0,0,0"))
                                          (rule "distr_forallAnd" (formula "2") (term "0,0"))
                                          (rule "distr_forallAnd" (formula "2") (term "0"))
                                          (rule "distr_forallAnd" (formula "2"))
                                          (rule "andLeft" (formula "2"))
                                          (rule "cnf_rightDist" (formula "1") (term "0,0,0"))
                                          (rule "distr_forallAnd" (formula "1") (term "0,0"))
                                          (rule "distr_forallAnd" (formula "1") (term "0"))
                                          (rule "distr_forallAnd" (formula "1"))
                                          (rule "andLeft" (formula "1"))
                                          (rule "shift_paren_or" (formula "4") (term "0,0,0"))
                                           (builtin "One Step Simplification" (formula "4"))
                                          (rule "eqSymm" (formula "4") (term "1,1,0,0,0"))
                                          (rule "castedGetAny" (formula "4") (term "0,0,1,0,0,0"))
                                          (rule "castedGetAny" (formula "4") (term "1,0,0,0,0,0,0"))
                                          (rule "castedGetAny" (formula "4") (term "0,1,1,0,0,0"))
                                           (builtin "One Step Simplification" (formula "4"))
                                          (rule "true_left" (formula "4"))
                                          (rule "shift_paren_or" (formula "2") (term "0,0,0"))
                                           (builtin "One Step Simplification" (formula "2"))
                                          (rule "eqSymm" (formula "2") (term "1,1,0,0,0"))
                                          (rule "castedGetAny" (formula "2") (term "1,0,0,0,0,0,0"))
                                          (rule "castedGetAny" (formula "2") (term "0,0,1,0,0,0"))
                                          (rule "castedGetAny" (formula "2") (term "0,1,1,0,0,0"))
                                           (builtin "One Step Simplification" (formula "2"))
                                          (rule "true_left" (formula "2"))
                                          (rule "cnf_rightDist" (formula "2") (term "0,0,0"))
                                          (rule "distr_forallAnd" (formula "2") (term "0,0"))
                                          (rule "distr_forallAnd" (formula "2") (term "0"))
                                          (rule "distr_forallAnd" (formula "2"))
                                          (rule "andLeft" (formula "2"))
                                          (rule "commute_or_2" (formula "2") (term "0,0,0"))
                                           (builtin "One Step Simplification" (formula "2"))
                                          (rule "eqSymm" (formula "2") (term "1,0,0,0,0"))
                                          (rule "castedGetAny" (formula "2") (term "1,0,0,1,0,0,0"))
                                          (rule "castedGetAny" (formula "2") (term "0,0,0,0,0,0"))
                                          (rule "castedGetAny" (formula "2") (term "0,1,0,0,0,0"))
                                           (builtin "One Step Simplification" (formula "2"))
                                          (rule "true_left" (formula "2"))
                                          (rule "shift_paren_or" (formula "2") (term "0,0,0"))
                                           (builtin "One Step Simplification" (formula "2"))
                                          (rule "eqSymm" (formula "2") (term "1,1,0,0,0"))
                                          (rule "castedGetAny" (formula "2") (term "0,0,1,0,0,0"))
                                          (rule "castedGetAny" (formula "2") (term "1,0,0,0,0,0,0"))
                                          (rule "castedGetAny" (formula "2") (term "0,1,1,0,0,0"))
                                           (builtin "One Step Simplification" (formula "2"))
                                          (rule "true_left" (formula "2"))
                                          (rule "cnf_rightDist" (formula "1") (term "0,0,0"))
                                          (rule "distr_forallAnd" (formula "1") (term "0,0"))
                                          (rule "distr_forallAnd" (formula "1") (term "0"))
                                          (rule "distr_forallAnd" (formula "1"))
                                          (rule "andLeft" (formula "1"))
                                          (rule "commute_or_2" (formula "1") (term "0,0,0"))
                                           (builtin "One Step Simplification" (formula "1"))
                                          (rule "eqSymm" (formula "1") (term "1,0,0,0,0"))
                                          (rule "castedGetAny" (formula "1") (term "0,0,0,0,0,0"))
                                          (rule "castedGetAny" (formula "1") (term "1,0,0,1,0,0,0"))
                                          (rule "castedGetAny" (formula "1") (term "0,1,0,0,0,0"))
                                           (builtin "One Step Simplification" (formula "1"))
                                          (rule "true_left" (formula "1"))
                                          (rule "shift_paren_or" (formula "1") (term "0,0,0"))
                                           (builtin "One Step Simplification" (formula "1"))
                                          (rule "eqSymm" (formula "1") (term "1,1,0,0,0"))
                                          (rule "castedGetAny" (formula "1") (term "0,0,1,0,0,0"))
                                          (rule "castedGetAny" (formula "1") (term "1,0,0,0,0,0,0"))
                                          (rule "castedGetAny" (formula "1") (term "0,1,1,0,0,0"))
                                           (builtin "One Step Simplification" (formula "1"))
                                          (rule "true_left" (formula "1"))
                                          (rule "seqGetAlphaCast" (formula "49") (term "0"))
                                          (rule "castDel" (formula "49") (term "0"))
                                           (builtin "One Step Simplification" (formula "49"))
                                          (rule "true_left" (formula "49"))
                                          (rule "allLeft" (formula "14") (inst "t=Z(0(#))"))
                                          (rule "applyEq" (formula "14") (term "0,0,1") (ifseqformula "50"))
                                          (rule "replace_known_right" (formula "14") (term "0,1") (ifseqformula "52"))
                                           (builtin "One Step Simplification" (formula "14"))
                                          (rule "true_left" (formula "14"))
                                          (rule "allLeft" (formula "16") (inst "t=Z(0(#))"))
                                          (rule "applyEq" (formula "16") (term "0,0,1") (ifseqformula "50"))
                                          (rule "commute_or" (formula "16"))
                                          (rule "cut_direct" (formula "16") (term "0"))
                                          (branch "CUT: java.lang.String::instance(result_48) = TRUE TRUE"
                                              (builtin "One Step Simplification" (formula "17"))
                                             (rule "true_left" (formula "17"))
                                             (rule "ineffectiveCast" (formula "1") (term "0") (ifseqformula "16"))
                                             (rule "typeEqDerived2" (formula "17") (term "0") (ifseqformula "1"))
                                              (builtin "One Step Simplification" (formula "17"))
                                             (rule "true_left" (formula "17"))
                                             (rule "applyEq" (formula "1") (term "0") (ifseqformula "2"))
                                             (rule "eqSymm" (formula "1"))
                                             (rule "close" (formula "52") (ifseqformula "1"))
                                          )
                                          (branch "CUT: java.lang.String::instance(result_48) = TRUE FALSE"
                                              (builtin "One Step Simplification" (formula "16"))
                                             (rule "seqGetAlphaCast" (formula "16") (term "0"))
                                             (rule "castedGetAny" (formula "16") (term "0"))
                                              (builtin "One Step Simplification" (formula "16"))
                                             (rule "true_left" (formula "16"))
                                             (rule "allLeft" (formula "12") (inst "t=i_0"))
                                             (rule "applyEq" (formula "12") (term "0,0,1") (ifseqformula "45"))
                                             (rule "replace_known_right" (formula "12") (term "1") (ifseqformula "52"))
                                              (builtin "One Step Simplification" (formula "12"))
                                             (rule "allLeft" (formula "24") (inst "t=i_0"))
                                             (rule "replace_known_left" (formula "24") (term "0,0,0") (ifseqformula "12"))
                                              (builtin "One Step Simplification" (formula "24"))
                                             (rule "inEqSimp_commuteGeq" (formula "24") (term "1"))
                                             (rule "inEqSimp_contradInEq1" (formula "24") (term "1") (ifseqformula "8"))
                                             (rule "inEqSimp_homoInEq1" (formula "24") (term "0,1"))
                                             (rule "polySimp_pullOutFactor1b" (formula "24") (term "0,0,1"))
                                             (rule "add_literals" (formula "24") (term "1,1,0,0,1"))
                                             (rule "times_zero_1" (formula "24") (term "1,0,0,1"))
                                             (rule "add_literals" (formula "24") (term "0,0,1"))
                                             (rule "leq_literals" (formula "24") (term "0,1"))
                                              (builtin "One Step Simplification" (formula "24"))
                                             (rule "inEqSimp_contradInEq0" (formula "41") (ifseqformula "24"))
                                             (rule "qeq_literals" (formula "41") (term "0"))
                                              (builtin "One Step Simplification" (formula "41"))
                                             (rule "closeFalse" (formula "41"))
                                          )
                                       )
                                    )
                                 )
                                 (branch "CUT: result_48.<created> = TRUE FALSE"
                                     (builtin "One Step Simplification" (formula "60"))
                                    (rule "equalityToSeqGetAndSeqLenLeft" (formula "66") (inst "iv=iv"))
                                    (rule "andLeft" (formula "66"))
                                    (rule "lenOfSeqSub" (formula "67") (term "1,1,0,0"))
                                    (rule "polySimp_elimSub" (formula "67") (term "1,1,1,0,0"))
                                    (rule "mul_literals" (formula "67") (term "1,1,1,1,0,0"))
                                    (rule "add_zero_right" (formula "67") (term "1,1,1,0,0"))
                                    (rule "lenOfSeqSub" (formula "66") (term "0"))
                                    (rule "polySimp_elimSub" (formula "66") (term "1,0"))
                                    (rule "mul_literals" (formula "66") (term "1,1,0"))
                                    (rule "add_zero_right" (formula "66") (term "1,0"))
                                     (builtin "One Step Simplification" (formula "66"))
                                    (rule "eqSymm" (formula "66") (term "1"))
                                    (rule "inEqSimp_ltToLeq" (formula "67") (term "0,1,1,0,0"))
                                    (rule "add_zero_right" (formula "67") (term "0,0,1,1,0,0"))
                                    (rule "polySimp_mulComm0" (formula "67") (term "1,0,0,1,1,0,0"))
                                    (rule "inEqSimp_ltToLeq" (formula "66") (term "0"))
                                    (rule "add_zero_right" (formula "66") (term "0,0"))
                                    (rule "polySimp_mulComm0" (formula "66") (term "1,0,0"))
                                    (rule "inEqSimp_ltToLeq" (formula "67") (term "1,0,0"))
                                    (rule "polySimp_mulComm0" (formula "67") (term "1,0,0,1,0,0"))
                                    (rule "inEqSimp_commuteLeq" (formula "67") (term "0,0,0"))
                                    (rule "applyEq" (formula "67") (term "0,0,1,0") (ifseqformula "68"))
                                     (builtin "One Step Simplification" (formula "67"))
                                    (rule "true_left" (formula "67"))
                                    (rule "inEqSimp_sepNegMonomial0" (formula "66") (term "0"))
                                    (rule "polySimp_mulLiterals" (formula "66") (term "0,0"))
                                    (rule "polySimp_elimOne" (formula "66") (term "0,0"))
                                    (rule "distr_forallAnd" (formula "31") (term "0"))
                                    (rule "lenNonNegative" (formula "65") (term "0"))
                                    (rule "inEqSimp_commuteLeq" (formula "65"))
                                    (rule "applyEq" (formula "65") (term "0") (ifseqformula "66"))
                                    (rule "inEqSimp_sepPosMonomial1" (formula "65"))
                                    (rule "mul_literals" (formula "65") (term "1"))
                                    (rule "inEqSimp_subsumption1" (formula "65") (ifseqformula "55"))
                                    (rule "leq_literals" (formula "65") (term "0"))
                                     (builtin "One Step Simplification" (formula "65"))
                                    (rule "true_left" (formula "65"))
                                    (rule "commute_or" (formula "25") (term "1,0,0,0"))
                                    (rule "commute_or" (formula "21") (term "1,0,0,0"))
                                    (rule "commute_or" (formula "13") (term "1,0,0,0"))
                                    (rule "commute_or" (formula "56") (term "0,0"))
                                    (rule "commute_or" (formula "4") (term "1,0,0,0"))
                                    (rule "commute_or" (formula "32") (term "1,0,0,0"))
                                    (rule "commute_or" (formula "10") (term "1,0,0,0"))
                                    (rule "commute_or" (formula "5") (term "1,0,0,0"))
                                    (rule "commute_or" (formula "8") (term "1,0,0,0"))
                                    (rule "distr_forallAnd" (formula "31"))
                                    (rule "andLeft" (formula "31"))
                                    (rule "commute_or" (formula "23") (term "1,0,0,0"))
                                    (rule "commute_or" (formula "57") (term "1,1,0"))
                                    (rule "commute_or_2" (formula "27") (term "0,0,0"))
                                    (rule "commute_or" (formula "9") (term "1,0,0,0"))
                                    (rule "commute_or_2" (formula "28") (term "0,0,0"))
                                    (rule "commute_or" (formula "7") (term "1,0,0,0"))
                                    (rule "commute_or_2" (formula "29") (term "0,0,0"))
                                    (rule "commute_or_2" (formula "24") (term "0,0,0"))
                                    (rule "commute_or_2" (formula "12") (term "0,0,0"))
                                    (rule "commute_or_2" (formula "34") (term "0,0,0"))
                                    (rule "commute_or_2" (formula "57") (term "0,1,0"))
                                    (rule "commute_or_2" (formula "30") (term "0,0,0"))
                                    (rule "commute_or" (formula "26") (term "1,0,0,0"))
                                    (rule "commute_or" (formula "47") (term "0,0"))
                                    (rule "commute_or" (formula "67"))
                                    (rule "inEqSimp_or_weaken1" (formula "67"))
                                    (rule "add_zero_right" (formula "67") (term "1,0"))
                                     (builtin "One Step Simplification" (formula "67") (ifInst ""  (formula "56")))
                                    (rule "true_left" (formula "67"))
                                    (rule "commute_or" (formula "39") (term "0,0"))
                                    (rule "commute_or_2" (formula "6") (term "0,0,0"))
                                    (rule "commute_or_2" (formula "22") (term "0,0,0"))
                                    (rule "commute_or_2" (formula "11") (term "0,0,0"))
                                    (rule "commute_or" (formula "4") (term "0,0,0,0"))
                                    (rule "commute_or" (formula "5") (term "0,0,0,0"))
                                    (rule "cnf_rightDist" (formula "13") (term "0,0,0,0"))
                                     (builtin "One Step Simplification" (formula "13"))
                                    (rule "cnf_rightDist" (formula "33") (term "0,0,0,0"))
                                     (builtin "One Step Simplification" (formula "33"))
                                    (rule "cnf_rightDist" (formula "8") (term "0,0,0,0"))
                                     (builtin "One Step Simplification" (formula "8"))
                                    (rule "cnf_rightDist" (formula "23") (term "0,0,0,0"))
                                     (builtin "One Step Simplification" (formula "23"))
                                    (rule "cnf_rightDist" (formula "9") (term "0,0,0,0"))
                                     (builtin "One Step Simplification" (formula "9"))
                                    (rule "cnf_rightDist" (formula "7") (term "0,0,0,0"))
                                     (builtin "One Step Simplification" (formula "7"))
                                    (rule "commute_or_2" (formula "47") (term "0"))
                                    (rule "cnf_rightDist" (formula "1") (term "1,1"))
                                    (rule "commute_or" (formula "32") (term "0,0"))
                                    (rule "commute_or_2" (formula "39") (term "0"))
                                    (rule "cnf_rightDist" (formula "25") (term "0,0,0,0"))
                                    (rule "cnf_rightDist" (formula "1") (term "1,0"))
                                    (rule "cnf_rightDist" (formula "26") (term "0,0,0,0"))
                                    (rule "commute_or_2" (formula "21") (term "0,0,0"))
                                    (rule "commute_or_2" (formula "10") (term "0,0,0"))
                                    (rule "commute_or_2" (formula "4") (term "0,0,0"))
                                    (rule "commute_or_2" (formula "5") (term "0,0,0"))
                                    (rule "cnf_rightDist" (formula "31") (term "0,0"))
                                    (rule "distr_forallAnd" (formula "31") (term "0"))
                                    (rule "distr_forallAnd" (formula "31"))
                                    (rule "andLeft" (formula "31"))
                                    (rule "commute_or" (formula "32") (term "0,0"))
                                    (rule "commute_or" (formula "1") (term "0,1,1"))
                                    (rule "commute_or" (formula "25") (term "0,0,0"))
                                    (rule "shift_paren_or" (formula "27") (term "0,0,0,0"))
                                    (rule "commute_or" (formula "1") (term "0,1,0"))
                                    (rule "commute_or" (formula "26") (term "0,0,0"))
                                    (rule "shift_paren_or" (formula "28") (term "0,0,0,0"))
                                    (rule "shift_paren_or" (formula "13") (term "0,0,0"))
                                     (builtin "One Step Simplification" (formula "13"))
                                    (rule "eqSymm" (formula "13") (term "1,0,0,0"))
                                    (rule "castedGetAny" (formula "13") (term "0,1,0,0,0,0"))
                                    (rule "castedGetAny" (formula "13") (term "1,0,0,0,0,0,0,0"))
                                    (rule "castedGetAny" (formula "13") (term "0,1,0,0,0"))
                                     (builtin "One Step Simplification" (formula "13"))
                                    (rule "true_left" (formula "13"))
                                    (rule "commute_or" (formula "28") (term "1,0,0,0,0"))
                                    (rule "commute_or" (formula "23") (term "1,0,0,0,0"))
                                    (rule "shift_paren_or" (formula "12") (term "0,0,0,0"))
                                    (rule "shift_paren_or" (formula "33") (term "0,0,0"))
                                     (builtin "One Step Simplification" (formula "33"))
                                    (rule "eqSymm" (formula "33") (term "1,0,0,0"))
                                    (rule "castedGetAny" (formula "33") (term "0,1,0,0,0,0"))
                                    (rule "castedGetAny" (formula "33") (term "1,0,0,0,0,0,0,0"))
                                    (rule "castedGetAny" (formula "33") (term "0,1,0,0,0"))
                                     (builtin "One Step Simplification" (formula "33"))
                                    (rule "true_left" (formula "33"))
                                    (rule "shift_paren_or" (formula "33") (term "0,0,0,0"))
                                    (rule "commute_or" (formula "8") (term "0,0,0,0"))
                                    (rule "commute_or" (formula "29") (term "1,0,0,0,0"))
                                    (rule "cnf_rightDist" (formula "56") (term "1,1,0"))
                                    (rule "shift_paren_or" (formula "22") (term "0,0,0"))
                                     (builtin "One Step Simplification" (formula "22"))
                                    (rule "eqSymm" (formula "22") (term "1,0,0,0"))
                                    (rule "castedGetAny" (formula "22") (term "1,0,0,0,0,0,0,0"))
                                    (rule "castedGetAny" (formula "22") (term "0,1,0,0,0,0"))
                                    (rule "castedGetAny" (formula "22") (term "0,1,0,0,0"))
                                     (builtin "One Step Simplification" (formula "22"))
                                    (rule "true_left" (formula "22"))
                                    (rule "commute_or" (formula "9") (term "0,0,0,0"))
                                    (rule "commute_or" (formula "7") (term "0,0,0,0"))
                                    (rule "shift_paren_or" (formula "6") (term "0,0,0,0"))
                                    (rule "shift_paren_or" (formula "21") (term "0,0,0,0"))
                                    (rule "shift_paren_or" (formula "11") (term "0,0,0,0"))
                                    (rule "commute_and" (formula "25") (term "1,0,0,0"))
                                    (rule "Class_axiom_0_in_de_polyas_core3_open_cred_CredTool" (inst "seq=seq") (inst "i=i_2") (inst "str=str") (inst "seq_0=seq_0") (inst "i_0=i_0") (inst "obj=obj") (inst "seq_1=seq_1") (inst "i_1=i_1") (inst "sv_heap=anon_heap_add<<anonHeapFunction>>"))
                                    (rule "andLeft" (formula "1"))
                                    (rule "andLeft" (formula "1"))
                                    (rule "castedGetAny" (formula "3") (term "0,1,1,0,0,0"))
                                    (rule "castedGetAny" (formula "1") (term "0,0,1,1,0,1,0,0"))
                                    (rule "castedGetAny" (formula "2") (term "0,1,1,0,0,0"))
                                    (rule "castedGetAny" (formula "1") (term "0,0,0,0,1,0,0"))
                                    (rule "castedGetAny" (formula "1") (term "0,0,0,1,0,1,0,0"))
                                    (rule "castedGetAny" (formula "1") (term "0,0,0,0,0"))
                                    (rule "nnf_imp2or" (formula "1") (term "0,0"))
                                     (builtin "One Step Simplification" (formula "1"))
                                    (rule "nnf_imp2or" (formula "3") (term "0,0,0"))
                                    (rule "nnf_imp2or" (formula "2") (term "0,0,0"))
                                    (rule "nnf_imp2or" (formula "3") (term "1,0,0,0"))
                                    (rule "nnf_notAnd" (formula "3") (term "0,0,0,0"))
                                     (builtin "One Step Simplification" (formula "3"))
                                    (rule "nnf_imp2or" (formula "2") (term "1,0,0,0"))
                                    (rule "nnf_notAnd" (formula "2") (term "0,0,0,0"))
                                     (builtin "One Step Simplification" (formula "2"))
                                    (rule "nnf_notOr" (formula "3") (term "0,0,0,0,0"))
                                    (rule "nnf_notOr" (formula "2") (term "0,0,0,0,0"))
                                    (rule "Class_axiom_0_in_de_polyas_core3_open_cred_CredTool" (inst "seq=seq") (inst "i=i_2") (inst "str=str") (inst "seq_0=seq_0") (inst "i_0=i_0") (inst "obj=obj") (inst "seq_1=seq_1") (inst "i_1=i_1") (inst "sv_heap=anon(heapAfter_get,
     singleton(result_46, java.util.Collection::$seq),
     anon_heap_add<<anonHeapFunction>>)"))
                                     (builtin "One Step Simplification" (formula "1"))
                                    (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,1,0,0,0,0,0,1") (ifseqformula "61"))
                                     (builtin "One Step Simplification" (formula "1"))
                                    (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,1,0,0,0,0,0,1,0") (ifseqformula "61"))
                                     (builtin "One Step Simplification" (formula "1"))
                                    (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,0,0,1,0,0,0,0,0,1") (ifseqformula "51"))
                                    (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,0,0,0,1,0,0,0,0,0,1") (ifseqformula "44"))
                                    (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,0,0,1,0,0,0,0,0,1,0") (ifseqformula "51"))
                                    (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,0,0,0,1,0,0,0,0,0,1,0") (ifseqformula "44"))
                                    (rule "andLeft" (formula "1"))
                                    (rule "andLeft" (formula "1"))
                                    (rule "castedGetAny" (formula "3") (term "0,1,1,0,0,0"))
                                    (rule "castedGetAny" (formula "1") (term "0,0,0,0,1,0,0"))
                                    (rule "castedGetAny" (formula "2") (term "0,1,1,0,0,0"))
                                    (rule "castedGetAny" (formula "1") (term "0,0,0,0,0"))
                                    (rule "castedGetAny" (formula "1") (term "0,0,0,1,0,1,0,0"))
                                    (rule "castedGetAny" (formula "1") (term "0,0,1,1,0,1,0,0"))
                                    (rule "nnf_imp2or" (formula "1") (term "0,0"))
                                     (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "4")))
                                    (rule "true_left" (formula "1"))
                                    (rule "nnf_imp2or" (formula "2") (term "0,0,0"))
                                    (rule "nnf_imp2or" (formula "1") (term "0,0,0"))
                                    (rule "nnf_imp2or" (formula "2") (term "1,0,0,0"))
                                    (rule "nnf_notAnd" (formula "2") (term "0,0,0,0"))
                                     (builtin "One Step Simplification" (formula "2"))
                                    (rule "nnf_notAnd" (formula "1") (term "0,0,0,0"))
                                     (builtin "One Step Simplification" (formula "1"))
                                    (rule "nnf_imp2or" (formula "1") (term "1,0,0,0"))
                                    (rule "nnf_notOr" (formula "2") (term "0,0,0,0,0"))
                                    (rule "nnf_notOr" (formula "1") (term "0,0,0,0,0"))
                                    (rule "nnf_notOr" (formula "2") (term "1,0,0,0,0,0"))
                                    (rule "nnf_notOr" (formula "1") (term "1,0,0,0,0,0"))
                                    (rule "nnf_notOr" (formula "2") (term "0,1,0,0,0,0,0"))
                                    (rule "nnf_notOr" (formula "1") (term "0,1,0,0,0,0,0"))
                                    (rule "nnf_notOr" (formula "2") (term "0,0,1,0,0,0,0,0"))
                                    (rule "nnf_notOr" (formula "1") (term "0,0,1,0,0,0,0,0"))
                                    (rule "nnf_notOr" (formula "2") (term "0,0,0,1,0,0,0,0,0"))
                                    (rule "nnf_notOr" (formula "1") (term "0,0,0,1,0,0,0,0,0"))
                                    (rule "nnf_notOr" (formula "2") (term "0,0,0,0,1,0,0,0,0,0"))
                                    (rule "nnf_notOr" (formula "1") (term "0,0,0,0,1,0,0,0,0,0"))
                                    (rule "Class_axiom_0_in_de_polyas_core3_open_cred_CredTool" (inst "seq=seq") (inst "i=i_2") (inst "str=str") (inst "seq_0=seq_0") (inst "i_0=i_0") (inst "obj=obj") (inst "seq_1=seq_1") (inst "i_1=i_1") (inst "sv_heap=heapAfter_add"))
                                    (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "1,0,0,0,0,0,1") (ifseqformula "68"))
                                    (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "1,0,0,0,0,0,1,0") (ifseqformula "68"))
                                    (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,1,0,0,0,0,0,1") (ifseqformula "63"))
                                     (builtin "One Step Simplification" (formula "1"))
                                    (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,1,0,0,0,0,0,1,0") (ifseqformula "63"))
                                     (builtin "One Step Simplification" (formula "1"))
                                    (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,0,0,1,0,0,0,0,0,1") (ifseqformula "53"))
                                    (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,0,0,0,1,0,0,0,0,0,1") (ifseqformula "46"))
                                    (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,0,0,1,0,0,0,0,0,1,0") (ifseqformula "53"))
                                    (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,0,0,0,1,0,0,0,0,0,1,0") (ifseqformula "46"))
                                    (rule "andLeft" (formula "1"))
                                    (rule "andLeft" (formula "1"))
                                    (rule "castedGetAny" (formula "3") (term "0,1,1,0,0,0"))
                                    (rule "castedGetAny" (formula "1") (term "0,0,1,1,0,1,0,0"))
                                    (rule "castedGetAny" (formula "1") (term "0,0,0,1,0,1,0,0"))
                                    (rule "castedGetAny" (formula "1") (term "0,0,0,0,1,0,0"))
                                    (rule "castedGetAny" (formula "2") (term "0,1,1,0,0,0"))
                                    (rule "castedGetAny" (formula "1") (term "0,0,0,0,0"))
                                    (rule "nnf_imp2or" (formula "1") (term "0,0"))
                                     (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "6")))
                                    (rule "true_left" (formula "1"))
                                    (rule "nnf_imp2or" (formula "2") (term "0,0,0"))
                                    (rule "nnf_imp2or" (formula "1") (term "0,0,0"))
                                    (rule "nnf_notAnd" (formula "2") (term "0,0,0,0"))
                                     (builtin "One Step Simplification" (formula "2"))
                                    (rule "nnf_notAnd" (formula "1") (term "0,0,0,0"))
                                     (builtin "One Step Simplification" (formula "1"))
                                    (rule "nnf_imp2or" (formula "2") (term "1,0,0,0"))
                                    (rule "nnf_imp2or" (formula "1") (term "1,0,0,0"))
                                    (rule "nnf_notOr" (formula "2") (term "0,0,0,0,0"))
                                    (rule "nnf_notOr" (formula "1") (term "0,0,0,0,0"))
                                    (rule "nnf_notOr" (formula "2") (term "1,0,0,0,0,0"))
                                    (rule "nnf_notOr" (formula "1") (term "1,0,0,0,0,0"))
                                    (rule "nnf_notOr" (formula "2") (term "0,1,0,0,0,0,0"))
                                    (rule "nnf_notOr" (formula "1") (term "0,1,0,0,0,0,0"))
                                    (rule "nnf_notOr" (formula "2") (term "0,0,1,0,0,0,0,0"))
                                    (rule "nnf_notOr" (formula "1") (term "0,0,1,0,0,0,0,0"))
                                    (rule "nnf_notOr" (formula "2") (term "0,0,0,1,0,0,0,0,0"))
                                    (rule "nnf_notOr" (formula "1") (term "0,0,0,1,0,0,0,0,0"))
                                    (rule "nnf_notOr" (formula "2") (term "0,0,0,0,1,0,0,0,0,0"))
                                    (rule "nnf_notOr" (formula "1") (term "0,0,0,0,1,0,0,0,0,0"))
                                    (rule "commute_and" (formula "31") (term "1,0,0,0"))
                                    (rule "commute_and" (formula "32") (term "1,0,0,0"))
                                    (rule "commute_and" (formula "27") (term "1,0,0,0"))
                                    (rule "commute_and" (formula "17") (term "1,0,0,0"))
                                    (rule "commute_and" (formula "37") (term "1,0,0,0"))
                                    (rule "commute_and" (formula "33") (term "1,0,0,0"))
                                    (rule "commute_or_2" (formula "30") (term "0,0,0,0"))
                                    (rule "commute_or_2" (formula "31") (term "0,0,0,0"))
                                    (rule "commute_and" (formula "11") (term "1,0,0,0"))
                                    (rule "cnf_rightDist" (formula "34") (term "0,0"))
                                    (rule "shift_paren_or" (formula "25") (term "0,0,0,0"))
                                    (rule "shift_paren_or" (formula "15") (term "0,0,0,0"))
                                    (rule "shift_paren_or" (formula "9") (term "0,0,0,0"))
                                    (rule "shift_paren_or" (formula "10") (term "0,0,0,0"))
                                    (rule "cnf_rightDist" (formula "6") (term "1,1,1"))
                                     (builtin "One Step Simplification" (formula "6"))
                                    (rule "commute_or_2" (formula "17") (term "0,0,0,0"))
                                    (rule "cnf_rightDist" (formula "60") (term "0"))
                                    (rule "commute_or" (formula "28") (term "1,1,0,0,0"))
                                    (rule "commute_or" (formula "29") (term "1,1,0,0,0"))
                                    (rule "commute_or_2" (formula "37") (term "0,0,0,0"))
                                    (rule "distr_forallAnd" (formula "34") (term "0"))
                                    (rule "shift_paren_or" (formula "13") (term "0,0,0"))
                                     (builtin "One Step Simplification" (formula "13"))
                                    (rule "eqSymm" (formula "13") (term "1,0,0,0"))
                                    (rule "castedGetAny" (formula "13") (term "0,0,0,0,0,0"))
                                    (rule "castedGetAny" (formula "13") (term "1,0,0,1,0,0,0,0"))
                                    (rule "castedGetAny" (formula "13") (term "0,1,0,0,0"))
                                     (builtin "One Step Simplification" (formula "13"))
                                    (rule "true_left" (formula "13"))
                                    (rule "shift_paren_or" (formula "31") (term "0,0,0,0"))
                                    (rule "distr_forallAnd" (formula "59"))
                                    (rule "andLeft" (formula "59"))
                                    (rule "shift_paren_or" (formula "26") (term "0,0,0,0"))
                                    (rule "shift_paren_or" (formula "13") (term "0,0,0"))
                                     (builtin "One Step Simplification" (formula "13"))
                                    (rule "eqSymm" (formula "13") (term "1,0,0,0"))
                                    (rule "castedGetAny" (formula "13") (term "0,0,0,0,0,0"))
                                    (rule "castedGetAny" (formula "13") (term "1,0,0,1,0,0,0,0"))
                                    (rule "castedGetAny" (formula "13") (term "0,1,0,0,0"))
                                     (builtin "One Step Simplification" (formula "13"))
                                    (rule "true_left" (formula "13"))
                                    (rule "distr_forallAnd" (formula "32"))
                                    (rule "andLeft" (formula "32"))
                                    (rule "shift_paren_or" (formula "12") (term "0,0,0"))
                                     (builtin "One Step Simplification" (formula "12"))
                                    (rule "eqSymm" (formula "12") (term "1,0,0,0"))
                                    (rule "castedGetAny" (formula "12") (term "1,0,0,1,0,0,0,0"))
                                    (rule "castedGetAny" (formula "12") (term "0,0,0,0,0,0"))
                                    (rule "castedGetAny" (formula "12") (term "0,1,0,0,0"))
                                     (builtin "One Step Simplification" (formula "12"))
                                    (rule "true_left" (formula "12"))
                                    (rule "shift_paren_or" (formula "30") (term "0,0,0,0"))
                                    (rule "commute_and" (formula "23") (term "0,0,1,0,0,0"))
                                    (rule "commute_or" (formula "5") (term "1,0,0,0"))
                                    (rule "commute_or" (formula "4") (term "1,0,0,0"))
                                    (rule "commute_or" (formula "5") (term "0,0,0,0"))
                                    (rule "commute_or" (formula "4") (term "0,0,0,0"))
                                    (rule "commute_and" (formula "13") (term "0,0,0,1,0,0,0"))
                                    (rule "cnf_rightDist" (formula "25") (term "0,1,0,0,0"))
                                     (builtin "One Step Simplification" (formula "25"))
                                    (rule "commute_and" (formula "22") (term "0,0,1,0,0,0"))
                                    (rule "commute_and" (formula "9") (term "0,0,1,0,0,0"))
                                    (rule "commute_and" (formula "10") (term "0,0,1,0,0,0"))
                                    (rule "cnf_rightDist" (formula "26") (term "0,1,0,0,0"))
                                     (builtin "One Step Simplification" (formula "26"))
                                    (rule "commute_or" (formula "2") (term "1,0,0,0"))
                                    (rule "commute_or" (formula "1") (term "1,0,0,0"))
                                    (rule "commute_and" (formula "12") (term "0,0,0,1,0,0,0"))
                                    (rule "commute_or" (formula "2") (term "0,0,0,0"))
                                    (rule "commute_or" (formula "1") (term "0,0,0,0"))
                                    (rule "commute_or" (formula "59") (term "0"))
                                    (rule "shift_paren_or" (formula "58") (term "0"))
                                    (rule "commute_or" (formula "6") (term "1,1,1"))
                                    (rule "shift_paren_and" (formula "3") (term "0,1,0,0"))
                                     (builtin "One Step Simplification" (formula "3"))
                                    (rule "commute_or" (formula "32") (term "0,0"))
                                    (rule "seqGetAlphaCast" (formula "64") (term "0"))
                                    (rule "castedGetAny" (formula "64") (term "0"))
                                     (builtin "One Step Simplification" (formula "64"))
                                    (rule "true_left" (formula "64"))
                                    (rule "commute_or_2" (formula "58") (term "0,0"))
                                     (builtin "One Step Simplification" (formula "58"))
                                    (rule "commute_or_2" (formula "5") (term "0,0,0"))
                                    (rule "cnf_rightDist" (formula "27") (term "0,0,0"))
                                    (rule "distr_forallAnd" (formula "27") (term "0,0"))
                                    (rule "distr_forallAnd" (formula "27") (term "0"))
                                    (rule "distr_forallAnd" (formula "27"))
                                    (rule "andLeft" (formula "27"))
                                    (rule "commute_or_2" (formula "4") (term "0,0,0"))
                                    (rule "cnf_rightDist" (formula "29") (term "0,0,0"))
                                    (rule "distr_forallAnd" (formula "29") (term "0,0"))
                                    (rule "distr_forallAnd" (formula "29") (term "0"))
                                    (rule "distr_forallAnd" (formula "29"))
                                    (rule "andLeft" (formula "29"))
                                    (rule "cnf_rightDist" (formula "11") (term "0,0,0"))
                                    (rule "distr_forallAnd" (formula "11") (term "0,0"))
                                    (rule "distr_forallAnd" (formula "11") (term "0"))
                                    (rule "distr_forallAnd" (formula "11"))
                                    (rule "andLeft" (formula "11"))
                                    (rule "cnf_rightDist" (formula "6") (term "0,1,1"))
                                    (rule "cnf_rightDist" (formula "6") (term "0,1,0"))
                                    (rule "cnf_rightDist" (formula "6") (term "1,1,0"))
                                    (rule "inEqSimp_or_tautInEq2" (formula "6") (term "1,1,1,0"))
                                    (rule "polySimp_addAssoc" (formula "6") (term "1,1,1,1,1,0"))
                                    (rule "add_literals" (formula "6") (term "0,1,1,1,1,1,0"))
                                    (rule "add_zero_left" (formula "6") (term "1,1,1,1,1,0"))
                                    (rule "inEqSimp_homoInEq1" (formula "6") (term "1,1,1,1,0"))
                                    (rule "polySimp_pullOutFactor1" (formula "6") (term "0,1,1,1,1,0"))
                                    (rule "add_literals" (formula "6") (term "1,0,1,1,1,1,0"))
                                    (rule "times_zero_1" (formula "6") (term "0,1,1,1,1,0"))
                                    (rule "leq_literals" (formula "6") (term "1,1,1,1,0"))
                                     (builtin "One Step Simplification" (formula "6"))
                                    (rule "cnf_rightDist" (formula "14") (term "0,0,0"))
                                    (rule "distr_forallAnd" (formula "14") (term "0,0"))
                                    (rule "distr_forallAnd" (formula "14") (term "0"))
                                    (rule "distr_forallAnd" (formula "14"))
                                    (rule "andLeft" (formula "14"))
                                    (rule "commute_or_2" (formula "2") (term "0,0,0"))
                                    (rule "commute_or_2" (formula "1") (term "0,0,0"))
                                    (rule "cnf_rightDist" (formula "37") (term "0,0,0"))
                                    (rule "distr_forallAnd" (formula "37") (term "0,0"))
                                    (rule "distr_forallAnd" (formula "37") (term "0"))
                                    (rule "distr_forallAnd" (formula "37"))
                                    (rule "andLeft" (formula "37"))
                                    (rule "commute_or" (formula "61") (term "0,1,0"))
                                    (rule "cnf_rightDist" (formula "31") (term "0,0,0"))
                                    (rule "distr_forallAnd" (formula "31") (term "0,0"))
                                    (rule "distr_forallAnd" (formula "31") (term "0"))
                                    (rule "distr_forallAnd" (formula "31"))
                                    (rule "andLeft" (formula "31"))
                                    (rule "shift_paren_or" (formula "60") (term "0,0"))
                                    (rule "cnf_rightDist" (formula "24") (term "0,0,0"))
                                    (rule "distr_forallAnd" (formula "24") (term "0,0"))
                                    (rule "distr_forallAnd" (formula "24") (term "0"))
                                    (rule "distr_forallAnd" (formula "24"))
                                    (rule "andLeft" (formula "24"))
                                    (rule "commute_or_2" (formula "27") (term "0,0,0"))
                                     (builtin "One Step Simplification" (formula "27"))
                                    (rule "eqSymm" (formula "27") (term "1,0,0,0,0"))
                                    (rule "castedGetAny" (formula "27") (term "1,0,0,1,0,0,0"))
                                    (rule "castedGetAny" (formula "27") (term "0,0,0,0,0,0"))
                                    (rule "castedGetAny" (formula "27") (term "0,1,0,0,0,0"))
                                     (builtin "One Step Simplification" (formula "27"))
                                    (rule "true_left" (formula "27"))
                                    (rule "commute_or_2" (formula "28") (term "0,0,0"))
                                     (builtin "One Step Simplification" (formula "28"))
                                    (rule "eqSymm" (formula "28") (term "1,0,0,0,0"))
                                    (rule "castedGetAny" (formula "28") (term "1,0,0,1,0,0,0"))
                                    (rule "castedGetAny" (formula "28") (term "0,0,0,0,0,0"))
                                    (rule "castedGetAny" (formula "28") (term "0,1,0,0,0,0"))
                                     (builtin "One Step Simplification" (formula "28"))
                                    (rule "true_left" (formula "28"))
                                    (rule "commute_or_2" (formula "11") (term "0,0,0"))
                                     (builtin "One Step Simplification" (formula "11"))
                                    (rule "eqSymm" (formula "11") (term "1,0,0,0,0"))
                                    (rule "castedGetAny" (formula "11") (term "0,0,0,0,0,0"))
                                    (rule "castedGetAny" (formula "11") (term "1,0,0,1,0,0,0"))
                                    (rule "castedGetAny" (formula "11") (term "0,1,0,0,0,0"))
                                     (builtin "One Step Simplification" (formula "11"))
                                    (rule "true_left" (formula "11"))
                                    (rule "commute_or" (formula "24") (term "0,1,0,0,0"))
                                    (rule "cnf_rightDist" (formula "29") (term "0,0,0"))
                                    (rule "distr_forallAnd" (formula "29") (term "0,0"))
                                    (rule "distr_forallAnd" (formula "29") (term "0"))
                                    (rule "distr_forallAnd" (formula "29"))
                                    (rule "andLeft" (formula "29"))
                                    (rule "cnf_rightDist" (formula "22") (term "0,0,0"))
                                    (rule "distr_forallAnd" (formula "22") (term "0,0"))
                                    (rule "distr_forallAnd" (formula "22") (term "0"))
                                    (rule "distr_forallAnd" (formula "22"))
                                    (rule "andLeft" (formula "22"))
                                    (rule "cnf_rightDist" (formula "3") (term "0,0"))
                                    (rule "distr_forallAnd" (formula "3") (term "0"))
                                    (rule "distr_forallAnd" (formula "3"))
                                    (rule "andLeft" (formula "3"))
                                    (rule "commute_or" (formula "27") (term "0,1,0,0,0"))
                                    (rule "shift_paren_or" (formula "28") (term "0,0,0"))
                                     (builtin "One Step Simplification" (formula "28"))
                                    (rule "eqSymm" (formula "28") (term "1,1,0,0,0"))
                                    (rule "castedGetAny" (formula "28") (term "0,0,1,0,0,0"))
                                    (rule "castedGetAny" (formula "28") (term "0,0,0,0,0,0"))
                                    (rule "castedGetAny" (formula "28") (term "0,1,1,0,0,0"))
                                     (builtin "One Step Simplification" (formula "28"))
                                    (rule "true_left" (formula "28"))
                                    (rule "cnf_rightDist" (formula "13") (term "0,0,0"))
                                    (rule "distr_forallAnd" (formula "13") (term "0,0"))
                                    (rule "distr_forallAnd" (formula "13") (term "0"))
                                    (rule "distr_forallAnd" (formula "13"))
                                    (rule "andLeft" (formula "13"))
                                    (rule "cnf_rightDist" (formula "22") (term "0,0,0"))
                                    (rule "distr_forallAnd" (formula "22") (term "0,0"))
                                    (rule "distr_forallAnd" (formula "22") (term "0"))
                                    (rule "distr_forallAnd" (formula "22"))
                                    (rule "andLeft" (formula "22"))
                                    (rule "cnf_rightDist" (formula "10") (term "0,0,0"))
                                    (rule "distr_forallAnd" (formula "10") (term "0,0"))
                                    (rule "distr_forallAnd" (formula "10") (term "0"))
                                    (rule "distr_forallAnd" (formula "10"))
                                    (rule "andLeft" (formula "10"))
                                    (rule "commute_or" (formula "7") (term "1,1,0"))
                                    (rule "cnf_rightDist" (formula "12") (term "0,0,0"))
                                    (rule "distr_forallAnd" (formula "12") (term "0,0"))
                                    (rule "distr_forallAnd" (formula "12") (term "0"))
                                    (rule "distr_forallAnd" (formula "12"))
                                    (rule "andLeft" (formula "12"))
                                    (rule "shift_paren_or" (formula "31") (term "0,0,0"))
                                     (builtin "One Step Simplification" (formula "31"))
                                    (rule "eqSymm" (formula "31") (term "1,1,0,0,0"))
                                    (rule "castedGetAny" (formula "31") (term "0,0,0,0,0,0"))
                                    (rule "castedGetAny" (formula "31") (term "0,0,1,0,0,0"))
                                    (rule "castedGetAny" (formula "31") (term "0,1,1,0,0,0"))
                                     (builtin "One Step Simplification" (formula "31"))
                                    (rule "true_left" (formula "31"))
                                    (rule "commute_or_2" (formula "16") (term "0,0,0"))
                                     (builtin "One Step Simplification" (formula "16"))
                                    (rule "eqSymm" (formula "16") (term "1,0,0,0,0"))
                                    (rule "castedGetAny" (formula "16") (term "1,0,0,1,0,0,0"))
                                    (rule "castedGetAny" (formula "16") (term "0,0,0,0,0,0"))
                                    (rule "castedGetAny" (formula "16") (term "0,1,0,0,0,0"))
                                     (builtin "One Step Simplification" (formula "16"))
                                    (rule "true_left" (formula "16"))
                                    (rule "cnf_rightDist" (formula "14") (term "0,0,0"))
                                    (rule "distr_forallAnd" (formula "14") (term "0,0"))
                                    (rule "distr_forallAnd" (formula "14") (term "0"))
                                    (rule "distr_forallAnd" (formula "14"))
                                    (rule "andLeft" (formula "14"))
                                    (rule "shift_paren_or" (formula "6") (term "0,0,0,0"))
                                    (rule "commute_or_2" (formula "36") (term "0,0,0"))
                                     (builtin "One Step Simplification" (formula "36"))
                                    (rule "eqSymm" (formula "36") (term "1,0,0,0,0"))
                                    (rule "castedGetAny" (formula "36") (term "1,0,0,1,0,0,0"))
                                    (rule "castedGetAny" (formula "36") (term "0,0,0,0,0,0"))
                                    (rule "castedGetAny" (formula "36") (term "0,1,0,0,0,0"))
                                     (builtin "One Step Simplification" (formula "36"))
                                    (rule "true_left" (formula "36"))
                                    (rule "shift_paren_or" (formula "5") (term "0,0,0,0"))
                                    (rule "commute_or_2" (formula "30") (term "0,0,0"))
                                     (builtin "One Step Simplification" (formula "30"))
                                    (rule "eqSymm" (formula "30") (term "1,0,0,0,0"))
                                    (rule "castedGetAny" (formula "30") (term "0,0,0,0,0,0"))
                                    (rule "castedGetAny" (formula "30") (term "1,0,0,1,0,0,0"))
                                    (rule "castedGetAny" (formula "30") (term "0,1,0,0,0,0"))
                                     (builtin "One Step Simplification" (formula "30"))
                                    (rule "true_left" (formula "30"))
                                    (rule "commute_or" (formula "57") (term "0,0,0"))
                                     (builtin "One Step Simplification" (formula "57"))
                                    (rule "commute_or" (formula "7") (term "0,0,1,0"))
                                    (rule "commute_or" (formula "7") (term "0,0,1,1"))
                                    (rule "commute_or" (formula "7") (term "1,0,1,0"))
                                    (rule "commute_or" (formula "7") (term "1,0,1,1"))
                                    (rule "cnf_rightDist" (formula "58") (term "0"))
                                    (rule "commute_or_2" (formula "27") (term "0,0,0"))
                                     (builtin "One Step Simplification" (formula "27"))
                                    (rule "eqSymm" (formula "27") (term "1,0,0,0,0"))
                                    (rule "castedGetAny" (formula "27") (term "0,0,0,0,0,0"))
                                    (rule "castedGetAny" (formula "27") (term "1,0,0,1,0,0,0"))
                                    (rule "castedGetAny" (formula "27") (term "0,1,0,0,0,0"))
                                     (builtin "One Step Simplification" (formula "27"))
                                    (rule "true_left" (formula "27"))
                                    (rule "distr_forallAnd" (formula "57"))
                                    (rule "andLeft" (formula "57"))
                                    (rule "commute_and" (formula "6") (term "1,0,0,0"))
                                    (rule "commute_and" (formula "5") (term "1,0,0,0"))
                                    (rule "commute_or" (formula "4") (term "0,0"))
                                    (rule "shift_paren_or" (formula "2") (term "0,0,0,0"))
                                    (rule "shift_paren_or" (formula "1") (term "0,0,0,0"))
                                    (rule "commute_or_2" (formula "29") (term "0,0,0"))
                                     (builtin "One Step Simplification" (formula "29"))
                                    (rule "eqSymm" (formula "29") (term "1,0,0,0,0"))
                                    (rule "castedGetAny" (formula "29") (term "0,0,0,0,0,0"))
                                    (rule "castedGetAny" (formula "29") (term "1,0,0,1,0,0,0"))
                                    (rule "castedGetAny" (formula "29") (term "0,1,0,0,0,0"))
                                     (builtin "One Step Simplification" (formula "29"))
                                    (rule "true_left" (formula "29"))
                                    (rule "commute_and" (formula "2") (term "1,0,0,0"))
                                    (rule "commute_and" (formula "1") (term "1,0,0,0"))
                                    (rule "shift_paren_or" (formula "26") (term "0,0,0"))
                                     (builtin "One Step Simplification" (formula "26"))
                                    (rule "eqSymm" (formula "26") (term "1,1,0,0,0"))
                                    (rule "castedGetAny" (formula "26") (term "0,0,1,0,0,0"))
                                    (rule "castedGetAny" (formula "26") (term "1,0,0,0,0,0,0"))
                                    (rule "castedGetAny" (formula "26") (term "0,1,1,0,0,0"))
                                     (builtin "One Step Simplification" (formula "26"))
                                    (rule "true_left" (formula "26"))
                                    (rule "cnf_rightDist" (formula "3") (term "0,0"))
                                    (rule "distr_forallAnd" (formula "3") (term "0"))
                                    (rule "distr_forallAnd" (formula "3"))
                                    (rule "andLeft" (formula "3"))
                                    (rule "cnf_rightDist" (formula "26") (term "0,0,0"))
                                    (rule "distr_forallAnd" (formula "26") (term "0,0"))
                                    (rule "distr_forallAnd" (formula "26") (term "0"))
                                    (rule "distr_forallAnd" (formula "26"))
                                    (rule "andLeft" (formula "26"))
                                    (rule "shift_paren_or" (formula "24") (term "0,0,0"))
                                     (builtin "One Step Simplification" (formula "24"))
                                    (rule "eqSymm" (formula "24") (term "1,1,0,0,0"))
                                    (rule "castedGetAny" (formula "24") (term "0,0,1,0,0,0"))
                                    (rule "castedGetAny" (formula "24") (term "1,0,0,0,0,0,0"))
                                    (rule "castedGetAny" (formula "24") (term "0,1,1,0,0,0"))
                                     (builtin "One Step Simplification" (formula "24"))
                                    (rule "true_left" (formula "24"))
                                    (rule "shift_paren_or" (formula "11") (term "0,0,0"))
                                     (builtin "One Step Simplification" (formula "11"))
                                    (rule "eqSymm" (formula "11") (term "1,1,0,0,0"))
                                    (rule "castedGetAny" (formula "11") (term "0,0,1,0,0,0"))
                                    (rule "castedGetAny" (formula "11") (term "1,0,0,0,0,0,0"))
                                    (rule "castedGetAny" (formula "11") (term "0,1,1,0,0,0"))
                                     (builtin "One Step Simplification" (formula "11"))
                                    (rule "true_left" (formula "11"))
                                    (rule "cnf_rightDist" (formula "23") (term "0,0,0"))
                                    (rule "distr_forallAnd" (formula "23") (term "0,0"))
                                    (rule "distr_forallAnd" (formula "23") (term "0"))
                                    (rule "distr_forallAnd" (formula "23"))
                                    (rule "andLeft" (formula "23"))
                                    (rule "commute_or_2" (formula "56") (term "0"))
                                    (rule "shift_paren_or" (formula "12") (term "0,0,0"))
                                     (builtin "One Step Simplification" (formula "12"))
                                    (rule "eqSymm" (formula "12") (term "1,1,0,0,0"))
                                    (rule "castedGetAny" (formula "12") (term "0,0,1,0,0,0"))
                                    (rule "castedGetAny" (formula "12") (term "1,0,0,0,0,0,0"))
                                    (rule "castedGetAny" (formula "12") (term "0,1,1,0,0,0"))
                                     (builtin "One Step Simplification" (formula "12"))
                                    (rule "true_left" (formula "12"))
                                    (rule "cnf_rightDist" (formula "26") (term "0,0,0"))
                                    (rule "distr_forallAnd" (formula "26") (term "0,0"))
                                    (rule "distr_forallAnd" (formula "26") (term "0"))
                                    (rule "distr_forallAnd" (formula "26"))
                                    (rule "andLeft" (formula "26"))
                                    (rule "cnf_rightDist" (formula "13") (term "0,0,0"))
                                    (rule "distr_forallAnd" (formula "13") (term "0,0"))
                                    (rule "distr_forallAnd" (formula "13") (term "0"))
                                    (rule "distr_forallAnd" (formula "13"))
                                    (rule "andLeft" (formula "13"))
                                    (rule "shift_paren_or" (formula "55") (term "0"))
                                    (rule "inEqSimp_or_tautInEq3" (formula "55") (term "0,0"))
                                    (rule "inEqSimp_homoInEq1" (formula "55") (term "1,0,0"))
                                    (rule "polySimp_pullOutFactor1" (formula "55") (term "0,1,0,0"))
                                    (rule "add_literals" (formula "55") (term "1,0,1,0,0"))
                                    (rule "times_zero_1" (formula "55") (term "0,1,0,0"))
                                    (rule "leq_literals" (formula "55") (term "1,0,0"))
                                     (builtin "One Step Simplification" (formula "55"))
                                    (rule "true_left" (formula "55"))
                                    (rule "cnf_rightDist" (formula "21") (term "0,0,0"))
                                    (rule "distr_forallAnd" (formula "21") (term "0,0"))
                                    (rule "distr_forallAnd" (formula "21") (term "0"))
                                    (rule "distr_forallAnd" (formula "21"))
                                    (rule "andLeft" (formula "21"))
                                    (rule "cnf_rightDist" (formula "10") (term "0,0,0"))
                                    (rule "distr_forallAnd" (formula "10") (term "0,0"))
                                    (rule "distr_forallAnd" (formula "10") (term "0"))
                                    (rule "distr_forallAnd" (formula "10"))
                                    (rule "andLeft" (formula "10"))
                                    (rule "cnf_rightDist" (formula "12") (term "0,0,0"))
                                    (rule "distr_forallAnd" (formula "12") (term "0,0"))
                                    (rule "distr_forallAnd" (formula "12") (term "0"))
                                    (rule "distr_forallAnd" (formula "12"))
                                    (rule "andLeft" (formula "12"))
                                    (rule "commute_or" (formula "3") (term "0,0"))
                                    (rule "cnf_rightDist" (formula "13") (term "0,0,0"))
                                    (rule "distr_forallAnd" (formula "13") (term "0,0"))
                                    (rule "distr_forallAnd" (formula "13") (term "0"))
                                    (rule "distr_forallAnd" (formula "13"))
                                    (rule "andLeft" (formula "13"))
                                    (rule "orLeft" (formula "6"))
                                    (branch " result_46.seq@anon_heap_LOOP«anonHeapFunction».length ≥ 1 + i_1 ∧ ( ( (java.lang.String)result_46.seq@anon_heap_add«anonHeapFunction»[i_1] = null ∨ (java.lang.String)(seqGetOutside) = null) ∧ ( (java.lang.String)(seqGetOutside) = null ∨ result_46.seq@anon_heap_LOOP«anonHeapFunction».length ≥ 1 + i_1) ∧ ( (java.lang.String)result_46.seq@anon_heap_add«anonHeapFunction»[i_1] = null ∨ result_46.seq@anon_heap_LOOP«anonHeapFunction».length ≤ i_1))"
                                       (rule "andLeft" (formula "6"))
                                       (rule "andLeft" (formula "7"))
                                       (rule "andLeft" (formula "7"))
                                       (rule "replace_known_left" (formula "8") (term "1") (ifseqformula "6"))
                                        (builtin "One Step Simplification" (formula "8"))
                                       (rule "true_left" (formula "8"))
                                       (rule "inEqSimp_subsumption1" (formula "10") (ifseqformula "6"))
                                       (rule "inEqSimp_homoInEq0" (formula "10") (term "0"))
                                       (rule "polySimp_pullOutFactor1b" (formula "10") (term "0,0"))
                                       (rule "add_literals" (formula "10") (term "1,1,0,0"))
                                       (rule "times_zero_1" (formula "10") (term "1,0,0"))
                                       (rule "add_zero_right" (formula "10") (term "0,0"))
                                       (rule "qeq_literals" (formula "10") (term "0"))
                                        (builtin "One Step Simplification" (formula "10"))
                                       (rule "true_left" (formula "10"))
                                       (rule "inEqSimp_contradInEq1" (formula "8") (term "1") (ifseqformula "6"))
                                       (rule "inEqSimp_homoInEq1" (formula "8") (term "0,1"))
                                       (rule "polySimp_pullOutFactor1b" (formula "8") (term "0,0,1"))
                                       (rule "add_literals" (formula "8") (term "1,1,0,0,1"))
                                       (rule "times_zero_1" (formula "8") (term "1,0,0,1"))
                                       (rule "add_literals" (formula "8") (term "0,0,1"))
                                       (rule "leq_literals" (formula "8") (term "0,1"))
                                        (builtin "One Step Simplification" (formula "8"))
                                       (rule "replace_known_left" (formula "7") (term "0") (ifseqformula "8"))
                                        (builtin "One Step Simplification" (formula "7"))
                                       (rule "true_left" (formula "7"))
                                       (rule "commute_or_2" (formula "26") (term "0,0,0"))
                                        (builtin "One Step Simplification" (formula "26"))
                                       (rule "eqSymm" (formula "26") (term "0,0,0,0"))
                                       (rule "castedGetAny" (formula "26") (term "0,0,1,0,0,0"))
                                       (rule "castedGetAny" (formula "26") (term "1,0,0,1,1,0,0,0"))
                                       (rule "castedGetAny" (formula "26") (term "0,0,0,0,0"))
                                        (builtin "One Step Simplification" (formula "26"))
                                       (rule "true_left" (formula "26"))
                                       (rule "cnf_rightDist" (formula "3") (term "0,0"))
                                       (rule "distr_forallAnd" (formula "3") (term "0"))
                                       (rule "distr_forallAnd" (formula "3"))
                                       (rule "andLeft" (formula "3"))
                                       (rule "cnf_rightDist" (formula "5") (term "0,0,0"))
                                       (rule "distr_forallAnd" (formula "5") (term "0,0"))
                                       (rule "distr_forallAnd" (formula "5") (term "0"))
                                       (rule "distr_forallAnd" (formula "5"))
                                       (rule "andLeft" (formula "5"))
                                       (rule "cnf_rightDist" (formula "4") (term "0,0,0"))
                                       (rule "distr_forallAnd" (formula "4") (term "0,0"))
                                       (rule "distr_forallAnd" (formula "4") (term "0"))
                                       (rule "distr_forallAnd" (formula "4"))
                                       (rule "andLeft" (formula "4"))
                                       (rule "shift_paren_or" (formula "28") (term "0,0,0"))
                                        (builtin "One Step Simplification" (formula "28"))
                                       (rule "eqSymm" (formula "28") (term "1,0,0,0"))
                                       (rule "castedGetAny" (formula "28") (term "1,0,0,1,0,0,0,0"))
                                       (rule "castedGetAny" (formula "28") (term "0,0,0,0,0,0"))
                                       (rule "castedGetAny" (formula "28") (term "0,1,0,0,0"))
                                        (builtin "One Step Simplification" (formula "28"))
                                       (rule "true_left" (formula "28"))
                                       (rule "shift_paren_or" (formula "57") (term "0,0"))
                                       (rule "inEqSimp_or_tautInEq2" (formula "57") (term "0,0,0"))
                                       (rule "add_zero_right" (formula "57") (term "1,1,0,0,0"))
                                       (rule "qeq_literals" (formula "57") (term "1,0,0,0"))
                                        (builtin "One Step Simplification" (formula "57"))
                                       (rule "true_left" (formula "57"))
                                       (rule "cnf_rightDist" (formula "2") (term "0,0,0"))
                                       (rule "distr_forallAnd" (formula "2") (term "0,0"))
                                       (rule "distr_forallAnd" (formula "2") (term "0"))
                                       (rule "distr_forallAnd" (formula "2"))
                                       (rule "andLeft" (formula "2"))
                                       (rule "cnf_rightDist" (formula "1") (term "0,0,0"))
                                       (rule "distr_forallAnd" (formula "1") (term "0,0"))
                                       (rule "distr_forallAnd" (formula "1") (term "0"))
                                       (rule "distr_forallAnd" (formula "1"))
                                       (rule "andLeft" (formula "1"))
                                       (rule "commute_or_2" (formula "28") (term "0,0,0"))
                                        (builtin "One Step Simplification" (formula "28"))
                                       (rule "eqSymm" (formula "28") (term "0,0,0,0"))
                                       (rule "castedGetAny" (formula "28") (term "1,0,0,1,1,0,0,0"))
                                       (rule "castedGetAny" (formula "28") (term "0,0,1,0,0,0"))
                                       (rule "castedGetAny" (formula "28") (term "0,0,0,0,0"))
                                        (builtin "One Step Simplification" (formula "28"))
                                       (rule "true_left" (formula "28"))
                                       (rule "shift_paren_or" (formula "27") (term "0,0,0"))
                                        (builtin "One Step Simplification" (formula "27"))
                                       (rule "eqSymm" (formula "27") (term "1,1,0,0,0"))
                                       (rule "castedGetAny" (formula "27") (term "0,0,1,0,0,0"))
                                       (rule "castedGetAny" (formula "27") (term "1,0,0,0,0,0,0"))
                                       (rule "castedGetAny" (formula "27") (term "0,1,1,0,0,0"))
                                        (builtin "One Step Simplification" (formula "27"))
                                       (rule "true_left" (formula "27"))
                                       (rule "shift_paren_or" (formula "27") (term "0,0,0"))
                                        (builtin "One Step Simplification" (formula "27"))
                                       (rule "eqSymm" (formula "27") (term "1,0,0,0"))
                                       (rule "castedGetAny" (formula "27") (term "0,0,0,0,0,0"))
                                       (rule "castedGetAny" (formula "27") (term "1,0,0,1,0,0,0,0"))
                                       (rule "castedGetAny" (formula "27") (term "0,1,0,0,0"))
                                        (builtin "One Step Simplification" (formula "27"))
                                       (rule "true_left" (formula "27"))
                                       (rule "cnf_rightDist" (formula "26") (term "0,0,0"))
                                       (rule "distr_forallAnd" (formula "26") (term "0,0"))
                                       (rule "distr_forallAnd" (formula "26") (term "0"))
                                       (rule "distr_forallAnd" (formula "26"))
                                       (rule "andLeft" (formula "26"))
                                       (rule "shift_paren_or" (formula "25") (term "0,0,0"))
                                        (builtin "One Step Simplification" (formula "25"))
                                       (rule "eqSymm" (formula "25") (term "1,1,0,0,0"))
                                       (rule "castedGetAny" (formula "25") (term "1,0,0,0,0,0,0"))
                                       (rule "castedGetAny" (formula "25") (term "0,0,1,0,0,0"))
                                       (rule "castedGetAny" (formula "25") (term "0,1,1,0,0,0"))
                                        (builtin "One Step Simplification" (formula "25"))
                                       (rule "true_left" (formula "25"))
                                       (rule "shift_paren_or" (formula "12") (term "0,0,0"))
                                        (builtin "One Step Simplification" (formula "12"))
                                       (rule "eqSymm" (formula "12") (term "1,1,0,0,0"))
                                       (rule "castedGetAny" (formula "12") (term "0,0,1,0,0,0"))
                                       (rule "castedGetAny" (formula "12") (term "1,0,0,0,0,0,0"))
                                       (rule "castedGetAny" (formula "12") (term "0,1,1,0,0,0"))
                                        (builtin "One Step Simplification" (formula "12"))
                                       (rule "true_left" (formula "12"))
                                       (rule "shift_paren_or" (formula "13") (term "0,0,0"))
                                        (builtin "One Step Simplification" (formula "13"))
                                       (rule "eqSymm" (formula "13") (term "1,1,0,0,0"))
                                       (rule "castedGetAny" (formula "13") (term "0,0,1,0,0,0"))
                                       (rule "castedGetAny" (formula "13") (term "1,0,0,0,0,0,0"))
                                       (rule "castedGetAny" (formula "13") (term "0,1,1,0,0,0"))
                                        (builtin "One Step Simplification" (formula "13"))
                                       (rule "true_left" (formula "13"))
                                       (rule "commute_or" (formula "3") (term "0,0"))
                                       (rule "cnf_rightDist" (formula "13") (term "0,0,0"))
                                       (rule "distr_forallAnd" (formula "13") (term "0,0"))
                                       (rule "distr_forallAnd" (formula "13") (term "0"))
                                       (rule "distr_forallAnd" (formula "13"))
                                       (rule "andLeft" (formula "13"))
                                       (rule "cnf_rightDist" (formula "22") (term "0,0,0"))
                                       (rule "distr_forallAnd" (formula "22") (term "0,0"))
                                       (rule "distr_forallAnd" (formula "22") (term "0"))
                                       (rule "distr_forallAnd" (formula "22"))
                                       (rule "andLeft" (formula "22"))
                                       (rule "cnf_rightDist" (formula "10") (term "0,0,0"))
                                       (rule "distr_forallAnd" (formula "10") (term "0,0"))
                                       (rule "distr_forallAnd" (formula "10") (term "0"))
                                       (rule "distr_forallAnd" (formula "10"))
                                       (rule "andLeft" (formula "10"))
                                       (rule "cnf_rightDist" (formula "11") (term "0,0,0"))
                                       (rule "distr_forallAnd" (formula "11") (term "0,0"))
                                       (rule "distr_forallAnd" (formula "11") (term "0"))
                                       (rule "distr_forallAnd" (formula "11"))
                                       (rule "andLeft" (formula "11"))
                                       (rule "commute_or_2" (formula "5") (term "0,0,0"))
                                        (builtin "One Step Simplification" (formula "5"))
                                       (rule "eqSymm" (formula "5") (term "1,0,0,0,0"))
                                       (rule "castedGetAny" (formula "5") (term "1,0,0,1,0,0,0"))
                                       (rule "castedGetAny" (formula "5") (term "0,0,0,0,0,0"))
                                       (rule "castedGetAny" (formula "5") (term "0,1,0,0,0,0"))
                                        (builtin "One Step Simplification" (formula "5"))
                                       (rule "true_left" (formula "5"))
                                       (rule "commute_or_2" (formula "3") (term "0,0,0"))
                                        (builtin "One Step Simplification" (formula "3"))
                                       (rule "eqSymm" (formula "3") (term "1,0,0,0,0"))
                                       (rule "castedGetAny" (formula "3") (term "1,0,0,1,0,0,0"))
                                       (rule "castedGetAny" (formula "3") (term "0,0,0,0,0,0"))
                                       (rule "castedGetAny" (formula "3") (term "0,1,0,0,0,0"))
                                        (builtin "One Step Simplification" (formula "3"))
                                       (rule "true_left" (formula "3"))
                                       (rule "cnf_rightDist" (formula "10") (term "0,0,0"))
                                       (rule "distr_forallAnd" (formula "10") (term "0,0"))
                                       (rule "distr_forallAnd" (formula "10") (term "0"))
                                       (rule "distr_forallAnd" (formula "10"))
                                       (rule "andLeft" (formula "10"))
                                       (rule "shift_paren_or" (formula "4") (term "0,0,0"))
                                        (builtin "One Step Simplification" (formula "4"))
                                       (rule "eqSymm" (formula "4") (term "1,1,0,0,0"))
                                       (rule "castedGetAny" (formula "4") (term "0,0,1,0,0,0"))
                                       (rule "castedGetAny" (formula "4") (term "0,0,0,0,0,0"))
                                       (rule "castedGetAny" (formula "4") (term "0,1,1,0,0,0"))
                                        (builtin "One Step Simplification" (formula "4"))
                                       (rule "true_left" (formula "4"))
                                       (rule "shift_paren_or" (formula "3") (term "0,0,0"))
                                        (builtin "One Step Simplification" (formula "3"))
                                       (rule "eqSymm" (formula "3") (term "1,1,0,0,0"))
                                       (rule "castedGetAny" (formula "3") (term "0,0,0,0,0,0"))
                                       (rule "castedGetAny" (formula "3") (term "0,0,1,0,0,0"))
                                       (rule "castedGetAny" (formula "3") (term "0,1,1,0,0,0"))
                                        (builtin "One Step Simplification" (formula "3"))
                                       (rule "true_left" (formula "3"))
                                       (rule "allLeft" (formula "47") (inst "t=i_1"))
                                       (rule "replace_known_left" (formula "47") (term "0,0,0") (ifseqformula "4"))
                                        (builtin "One Step Simplification" (formula "47"))
                                       (rule "inEqSimp_commuteGeq" (formula "47") (term "1"))
                                       (rule "inEqSimp_contradInEq1" (formula "47") (term "0") (ifseqformula "5"))
                                       (rule "qeq_literals" (formula "47") (term "0,0"))
                                        (builtin "One Step Simplification" (formula "47"))
                                       (rule "inEqSimp_contradInEq0" (formula "3") (ifseqformula "47"))
                                       (rule "andLeft" (formula "3"))
                                       (rule "inEqSimp_homoInEq1" (formula "3"))
                                       (rule "polySimp_pullOutFactor1b" (formula "3") (term "0"))
                                       (rule "add_literals" (formula "3") (term "1,1,0"))
                                       (rule "times_zero_1" (formula "3") (term "1,0"))
                                       (rule "add_literals" (formula "3") (term "0"))
                                       (rule "leq_literals" (formula "3"))
                                       (rule "closeFalse" (formula "3"))
                                    )
                                    (branch " result_46.seq@anon_heap_LOOP«anonHeapFunction».length ≤ i_1 ∧ ( ( (java.lang.String)result_48 = null ∨ (java.lang.String)(seqGetOutside) = null) ∧ ( (java.lang.String)(seqGetOutside) = null ∨ result_46.seq@anon_heap_LOOP«anonHeapFunction».length = i_1) ∧ ( (java.lang.String)result_48 = null ∨ ¬ result_46.seq@anon_heap_LOOP«anonHeapFunction».length = i_1))"
                                       (rule "andLeft" (formula "6"))
                                       (rule "andLeft" (formula "7"))
                                       (rule "andLeft" (formula "7"))
                                       (rule "inEqSimp_antiSymm" (formula "11") (ifseqformula "6"))
                                       (rule "replace_known_left" (formula "8") (term "1") (ifseqformula "11"))
                                        (builtin "One Step Simplification" (formula "8"))
                                       (rule "true_left" (formula "8"))
                                       (rule "replace_known_left" (formula "8") (term "0,1") (ifseqformula "10"))
                                        (builtin "One Step Simplification" (formula "8"))
                                       (rule "replace_known_left" (formula "7") (term "0") (ifseqformula "8"))
                                        (builtin "One Step Simplification" (formula "7"))
                                       (rule "true_left" (formula "7"))
                                       (rule "applyEq" (formula "10") (term "0") (ifseqformula "9"))
                                       (rule "inEqSimp_homoInEq1" (formula "10"))
                                       (rule "polySimp_pullOutFactor1" (formula "10") (term "0"))
                                       (rule "add_literals" (formula "10") (term "1,0"))
                                       (rule "times_zero_1" (formula "10") (term "0"))
                                       (rule "leq_literals" (formula "10"))
                                       (rule "true_left" (formula "10"))
                                       (rule "applyEq" (formula "69") (term "1,0") (ifseqformula "9"))
                                       (rule "applyEq" (formula "58") (term "1,1,1,0,0") (ifseqformula "9"))
                                       (rule "applyEq" (formula "6") (term "0") (ifseqformula "9"))
                                       (rule "inEqSimp_homoInEq0" (formula "6"))
                                       (rule "polySimp_pullOutFactor1" (formula "6") (term "0"))
                                       (rule "add_literals" (formula "6") (term "1,0"))
                                       (rule "times_zero_1" (formula "6") (term "0"))
                                       (rule "qeq_literals" (formula "6"))
                                       (rule "true_left" (formula "6"))
                                       (rule "applyEq" (formula "56") (term "1,1,0") (ifseqformula "8"))
                                       (rule "applyEq" (formula "55") (term "0") (ifseqformula "8"))
                                       (rule "applyEq" (formula "66") (term "2,0") (ifseqformula "8"))
                                       (rule "lenOfSeqSubEQ" (formula "65") (term "1,1") (ifseqformula "66"))
                                       (rule "polySimp_homoEq" (formula "65"))
                                       (rule "polySimp_elimSub" (formula "65") (term "1,1,0,0"))
                                       (rule "mul_literals" (formula "65") (term "1,1,1,0,0"))
                                       (rule "add_zero_right" (formula "65") (term "1,1,0,0"))
                                       (rule "polySimp_addComm1" (formula "65") (term "0"))
                                       (rule "lenOfSeqSubEQ" (formula "8") (term "0") (ifseqformula "66"))
                                       (rule "polySimp_elimSub" (formula "8") (term "1,0"))
                                       (rule "mul_literals" (formula "8") (term "1,1,0"))
                                       (rule "add_zero_right" (formula "8") (term "1,0"))
                                        (builtin "One Step Simplification" (formula "8"))
                                       (rule "eqSymm" (formula "8") (term "1"))
                                       (rule "inEqSimp_ltToLeq" (formula "65") (term "0,1,0"))
                                       (rule "add_zero_right" (formula "65") (term "0,0,1,0"))
                                       (rule "polySimp_mulComm0" (formula "65") (term "1,0,0,1,0"))
                                       (rule "inEqSimp_ltToLeq" (formula "8") (term "0"))
                                       (rule "add_zero_right" (formula "8") (term "0,0"))
                                       (rule "polySimp_mulComm0" (formula "8") (term "1,0,0"))
                                       (rule "polySimp_sepPosMonomial" (formula "65"))
                                       (rule "polySimp_mulComm0" (formula "65") (term "1"))
                                       (rule "polySimp_rightDist" (formula "65") (term "1"))
                                       (rule "mul_literals" (formula "65") (term "0,1"))
                                       (rule "polySimp_mulLiterals" (formula "65") (term "1,1"))
                                       (rule "polySimp_elimOne" (formula "65") (term "1,1"))
                                       (rule "inEqSimp_sepNegMonomial0" (formula "8") (term "0"))
                                       (rule "polySimp_mulLiterals" (formula "8") (term "0,0"))
                                       (rule "polySimp_elimOne" (formula "8") (term "0,0"))
                                       (rule "inEqSimp_sepNegMonomial0" (formula "65") (term "0,0"))
                                       (rule "polySimp_mulLiterals" (formula "65") (term "0,0,0"))
                                       (rule "polySimp_elimOne" (formula "65") (term "0,0,0"))
                                       (rule "commute_or_2" (formula "26") (term "0,0,0"))
                                        (builtin "One Step Simplification" (formula "26"))
                                       (rule "eqSymm" (formula "26") (term "0,0,0,0"))
                                       (rule "castedGetAny" (formula "26") (term "0,0,1,0,0,0"))
                                       (rule "castedGetAny" (formula "26") (term "1,0,0,1,1,0,0,0"))
                                       (rule "castedGetAny" (formula "26") (term "0,0,0,0,0"))
                                        (builtin "One Step Simplification" (formula "26"))
                                       (rule "true_left" (formula "26"))
                                       (rule "cnf_rightDist" (formula "3") (term "0,0"))
                                       (rule "cnf_rightDist" (formula "5") (term "0,0,0"))
                                       (rule "cnf_rightDist" (formula "4") (term "0,0,0"))
                                       (rule "shift_paren_or" (formula "26") (term "0,0,0"))
                                        (builtin "One Step Simplification" (formula "26"))
                                       (rule "eqSymm" (formula "26") (term "1,0,0,0"))
                                       (rule "castedGetAny" (formula "26") (term "0,0,0,0,0,0"))
                                       (rule "castedGetAny" (formula "26") (term "1,0,0,1,0,0,0,0"))
                                       (rule "castedGetAny" (formula "26") (term "0,1,0,0,0"))
                                        (builtin "One Step Simplification" (formula "26"))
                                       (rule "true_left" (formula "26"))
                                       (rule "distr_forallAnd" (formula "3") (term "0"))
                                       (rule "distr_forallAnd" (formula "5") (term "0,0"))
                                       (rule "cnf_rightDist" (formula "2") (term "0,0,0"))
                                       (rule "cnf_rightDist" (formula "1") (term "0,0,0"))
                                       (rule "distr_forallAnd" (formula "4") (term "0,0"))
                                       (rule "commute_or_2" (formula "26") (term "0,0,0"))
                                        (builtin "One Step Simplification" (formula "26"))
                                       (rule "eqSymm" (formula "26") (term "0,0,0,0"))
                                       (rule "castedGetAny" (formula "26") (term "1,0,0,1,1,0,0,0"))
                                       (rule "castedGetAny" (formula "26") (term "0,0,1,0,0,0"))
                                       (rule "castedGetAny" (formula "26") (term "0,0,0,0,0"))
                                        (builtin "One Step Simplification" (formula "26"))
                                       (rule "true_left" (formula "26"))
                                       (rule "shift_paren_or" (formula "25") (term "0,0,0"))
                                        (builtin "One Step Simplification" (formula "25"))
                                       (rule "eqSymm" (formula "25") (term "1,1,0,0,0"))
                                       (rule "castedGetAny" (formula "25") (term "0,0,1,0,0,0"))
                                       (rule "castedGetAny" (formula "25") (term "1,0,0,0,0,0,0"))
                                       (rule "castedGetAny" (formula "25") (term "0,1,1,0,0,0"))
                                        (builtin "One Step Simplification" (formula "25"))
                                       (rule "true_left" (formula "25"))
                                       (rule "distr_forallAnd" (formula "3"))
                                       (rule "andLeft" (formula "3"))
                                       (rule "distr_forallAnd" (formula "5") (term "0"))
                                       (rule "distr_forallAnd" (formula "2") (term "0,0"))
                                       (rule "distr_forallAnd" (formula "1") (term "0,0"))
                                       (rule "distr_forallAnd" (formula "4") (term "0"))
                                       (rule "shift_paren_or" (formula "25") (term "0,0,0"))
                                        (builtin "One Step Simplification" (formula "25"))
                                       (rule "eqSymm" (formula "25") (term "1,0,0,0"))
                                       (rule "castedGetAny" (formula "25") (term "1,0,0,1,0,0,0,0"))
                                       (rule "castedGetAny" (formula "25") (term "0,0,0,0,0,0"))
                                       (rule "castedGetAny" (formula "25") (term "0,1,0,0,0"))
                                        (builtin "One Step Simplification" (formula "25"))
                                       (rule "true_left" (formula "25"))
                                       (rule "distr_forallAnd" (formula "5"))
                                       (rule "andLeft" (formula "5"))
                                       (rule "distr_forallAnd" (formula "2") (term "0"))
                                       (rule "distr_forallAnd" (formula "1") (term "0"))
                                       (rule "distr_forallAnd" (formula "4"))
                                       (rule "andLeft" (formula "4"))
                                       (rule "commute_or" (formula "10"))
                                       (rule "inEqSimp_or_weaken1" (formula "10"))
                                       (rule "add_zero_right" (formula "10") (term "1,0"))
                                        (builtin "One Step Simplification" (formula "10") (ifInst ""  (formula "9")))
                                       (rule "true_left" (formula "10"))
                                       (rule "cnf_rightDist" (formula "25") (term "0,0,0"))
                                       (rule "shift_paren_or" (formula "24") (term "0,0,0"))
                                        (builtin "One Step Simplification" (formula "24"))
                                       (rule "eqSymm" (formula "24") (term "1,1,0,0,0"))
                                       (rule "castedGetAny" (formula "24") (term "1,0,0,0,0,0,0"))
                                       (rule "castedGetAny" (formula "24") (term "0,0,1,0,0,0"))
                                       (rule "castedGetAny" (formula "24") (term "0,1,1,0,0,0"))
                                        (builtin "One Step Simplification" (formula "24"))
                                       (rule "true_left" (formula "24"))
                                       (rule "shift_paren_or" (formula "11") (term "0,0,0"))
                                        (builtin "One Step Simplification" (formula "11"))
                                       (rule "eqSymm" (formula "11") (term "1,1,0,0,0"))
                                       (rule "castedGetAny" (formula "11") (term "1,0,0,0,0,0,0"))
                                       (rule "castedGetAny" (formula "11") (term "0,0,1,0,0,0"))
                                       (rule "castedGetAny" (formula "11") (term "0,1,1,0,0,0"))
                                        (builtin "One Step Simplification" (formula "11"))
                                       (rule "true_left" (formula "11"))
                                       (rule "distr_forallAnd" (formula "2"))
                                       (rule "andLeft" (formula "2"))
                                       (rule "distr_forallAnd" (formula "1"))
                                       (rule "andLeft" (formula "1"))
                                       (rule "shift_paren_or" (formula "12") (term "0,0,0"))
                                        (builtin "One Step Simplification" (formula "12"))
                                       (rule "eqSymm" (formula "12") (term "1,1,0,0,0"))
                                       (rule "castedGetAny" (formula "12") (term "1,0,0,0,0,0,0"))
                                       (rule "castedGetAny" (formula "12") (term "0,0,1,0,0,0"))
                                       (rule "castedGetAny" (formula "12") (term "0,1,1,0,0,0"))
                                        (builtin "One Step Simplification" (formula "12"))
                                       (rule "true_left" (formula "12"))
                                       (rule "distr_forallAnd" (formula "22") (term "0,0"))
                                       (rule "cnf_rightDist" (formula "13") (term "0,0,0"))
                                       (rule "shift_paren_or" (formula "49") (term "0,0"))
                                       (rule "inEqSimp_or_tautInEq2" (formula "49") (term "0,0,0"))
                                       (rule "add_literals" (formula "49") (term "1,1,0,0,0"))
                                       (rule "qeq_literals" (formula "49") (term "1,0,0,0"))
                                        (builtin "One Step Simplification" (formula "49"))
                                       (rule "true_left" (formula "49"))
                                       (rule "cnf_rightDist" (formula "21") (term "0,0,0"))
                                       (rule "cnf_rightDist" (formula "10") (term "0,0,0"))
                                       (rule "cnf_rightDist" (formula "11") (term "0,0,0"))
                                       (rule "distr_forallAnd" (formula "22") (term "0"))
                                       (rule "distr_forallAnd" (formula "13") (term "0,0"))
                                       (rule "cnf_rightDist" (formula "12") (term "0,0,0"))
                                       (rule "distr_forallAnd" (formula "21") (term "0,0"))
                                       (rule "distr_forallAnd" (formula "10") (term "0,0"))
                                       (rule "distr_forallAnd" (formula "11") (term "0,0"))
                                       (rule "distr_forallAnd" (formula "22"))
                                       (rule "andLeft" (formula "22"))
                                       (rule "distr_forallAnd" (formula "13") (term "0"))
                                       (rule "distr_forallAnd" (formula "12") (term "0,0"))
                                       (rule "distr_forallAnd" (formula "21") (term "0"))
                                       (rule "distr_forallAnd" (formula "10") (term "0"))
                                       (rule "distr_forallAnd" (formula "11") (term "0"))
                                       (rule "distr_forallAnd" (formula "13"))
                                       (rule "andLeft" (formula "13"))
                                       (rule "distr_forallAnd" (formula "12") (term "0"))
                                       (rule "distr_forallAnd" (formula "22"))
                                       (rule "andLeft" (formula "22"))
                                       (rule "distr_forallAnd" (formula "10"))
                                       (rule "andLeft" (formula "10"))
                                       (rule "distr_forallAnd" (formula "11"))
                                       (rule "andLeft" (formula "11"))
                                       (rule "distr_forallAnd" (formula "12"))
                                       (rule "andLeft" (formula "12"))
                                       (rule "commute_or" (formula "3") (term "0,0"))
                                       (rule "allLeft" (formula "27") (inst "t=Seq::select(anon_heap_add<<anonHeapFunction>>,
            result_46,
            java.util.Collection::$seq)"))
                                       (rule "commute_or_2" (formula "5") (term "0,0,0"))
                                        (builtin "One Step Simplification" (formula "5"))
                                       (rule "eqSymm" (formula "5") (term "1,0,0,0,0"))
                                       (rule "castedGetAny" (formula "5") (term "1,0,0,1,0,0,0"))
                                       (rule "castedGetAny" (formula "5") (term "0,0,0,0,0,0"))
                                       (rule "castedGetAny" (formula "5") (term "0,1,0,0,0,0"))
                                        (builtin "One Step Simplification" (formula "5"))
                                       (rule "true_left" (formula "5"))
                                       (rule "allLeft" (formula "25") (inst "t=Seq::select(anon_heap_add<<anonHeapFunction>>,
            result_46,
            java.util.Collection::$seq)"))
                                       (rule "commute_or_2" (formula "3") (term "0,0,0"))
                                        (builtin "One Step Simplification" (formula "3"))
                                       (rule "eqSymm" (formula "3") (term "1,0,0,0,0"))
                                       (rule "castedGetAny" (formula "3") (term "1,0,0,1,0,0,0"))
                                       (rule "castedGetAny" (formula "3") (term "0,0,0,0,0,0"))
                                       (rule "castedGetAny" (formula "3") (term "0,1,0,0,0,0"))
                                        (builtin "One Step Simplification" (formula "3"))
                                       (rule "true_left" (formula "3"))
                                       (rule "shift_paren_or" (formula "4") (term "0,0,0"))
                                        (builtin "One Step Simplification" (formula "4"))
                                       (rule "eqSymm" (formula "4") (term "1,1,0,0,0"))
                                       (rule "castedGetAny" (formula "4") (term "0,0,0,0,0,0"))
                                       (rule "castedGetAny" (formula "4") (term "0,0,1,0,0,0"))
                                       (rule "castedGetAny" (formula "4") (term "0,1,1,0,0,0"))
                                        (builtin "One Step Simplification" (formula "4"))
                                       (rule "true_left" (formula "4"))
                                       (rule "shift_paren_or" (formula "3") (term "0,0,0"))
                                        (builtin "One Step Simplification" (formula "3"))
                                       (rule "eqSymm" (formula "3") (term "1,1,0,0,0"))
                                       (rule "castedGetAny" (formula "3") (term "0,0,0,0,0,0"))
                                       (rule "castedGetAny" (formula "3") (term "0,0,1,0,0,0"))
                                       (rule "castedGetAny" (formula "3") (term "0,1,1,0,0,0"))
                                        (builtin "One Step Simplification" (formula "3"))
                                       (rule "true_left" (formula "3"))
                                       (rule "commute_or_2" (formula "19") (term "0,0,0"))
                                        (builtin "One Step Simplification" (formula "19"))
                                       (rule "eqSymm" (formula "19") (term "1,0,0,0,0"))
                                       (rule "castedGetAny" (formula "19") (term "0,0,0,0,0,0"))
                                       (rule "castedGetAny" (formula "19") (term "1,0,0,1,0,0,0"))
                                       (rule "castedGetAny" (formula "19") (term "0,1,0,0,0,0"))
                                        (builtin "One Step Simplification" (formula "19"))
                                       (rule "true_left" (formula "19"))
                                       (rule "commute_or_2" (formula "18") (term "0,0,0"))
                                        (builtin "One Step Simplification" (formula "18"))
                                       (rule "eqSymm" (formula "18") (term "1,0,0,0,0"))
                                       (rule "castedGetAny" (formula "18") (term "1,0,0,1,0,0,0"))
                                       (rule "castedGetAny" (formula "18") (term "0,0,0,0,0,0"))
                                       (rule "castedGetAny" (formula "18") (term "0,1,0,0,0,0"))
                                        (builtin "One Step Simplification" (formula "18"))
                                       (rule "true_left" (formula "18"))
                                       (rule "cnf_rightDist" (formula "2") (term "0,0,0"))
                                       (rule "distr_forallAnd" (formula "2") (term "0,0"))
                                       (rule "distr_forallAnd" (formula "2") (term "0"))
                                       (rule "distr_forallAnd" (formula "2"))
                                       (rule "andLeft" (formula "2"))
                                       (rule "cnf_rightDist" (formula "1") (term "0,0,0"))
                                       (rule "distr_forallAnd" (formula "1") (term "0,0"))
                                       (rule "distr_forallAnd" (formula "1") (term "0"))
                                       (rule "distr_forallAnd" (formula "1"))
                                       (rule "andLeft" (formula "1"))
                                       (rule "shift_paren_or" (formula "12") (term "0,0,0"))
                                        (builtin "One Step Simplification" (formula "12"))
                                       (rule "eqSymm" (formula "12") (term "1,1,0,0,0"))
                                       (rule "castedGetAny" (formula "12") (term "0,0,1,0,0,0"))
                                       (rule "castedGetAny" (formula "12") (term "1,0,0,0,0,0,0"))
                                       (rule "castedGetAny" (formula "12") (term "0,1,1,0,0,0"))
                                        (builtin "One Step Simplification" (formula "12"))
                                       (rule "true_left" (formula "12"))
                                       (rule "shift_paren_or" (formula "10") (term "0,0,0"))
                                        (builtin "One Step Simplification" (formula "10"))
                                       (rule "eqSymm" (formula "10") (term "1,1,0,0,0"))
                                       (rule "castedGetAny" (formula "10") (term "1,0,0,0,0,0,0"))
                                       (rule "castedGetAny" (formula "10") (term "0,0,1,0,0,0"))
                                       (rule "castedGetAny" (formula "10") (term "0,1,1,0,0,0"))
                                        (builtin "One Step Simplification" (formula "10"))
                                       (rule "true_left" (formula "10"))
                                       (rule "cnf_rightDist" (formula "10") (term "0,0,0"))
                                       (rule "distr_forallAnd" (formula "10") (term "0,0"))
                                       (rule "distr_forallAnd" (formula "10") (term "0"))
                                       (rule "distr_forallAnd" (formula "10"))
                                       (rule "andLeft" (formula "10"))
                                       (rule "cnf_rightDist" (formula "7") (term "0,0,0"))
                                       (rule "distr_forallAnd" (formula "7") (term "0,0"))
                                       (rule "distr_forallAnd" (formula "7") (term "0"))
                                       (rule "distr_forallAnd" (formula "7"))
                                       (rule "andLeft" (formula "7"))
                                       (rule "cnf_rightDist" (formula "9") (term "0,0,0"))
                                       (rule "distr_forallAnd" (formula "9") (term "0,0"))
                                       (rule "distr_forallAnd" (formula "9") (term "0"))
                                       (rule "distr_forallAnd" (formula "9"))
                                       (rule "andLeft" (formula "9"))
                                       (rule "cnf_rightDist" (formula "11") (term "0,0,0"))
                                       (rule "distr_forallAnd" (formula "11") (term "0,0"))
                                       (rule "distr_forallAnd" (formula "11") (term "0"))
                                       (rule "distr_forallAnd" (formula "11"))
                                       (rule "andLeft" (formula "11"))
                                       (rule "shift_paren_or" (formula "4") (term "0,0,0"))
                                        (builtin "One Step Simplification" (formula "4"))
                                       (rule "eqSymm" (formula "4") (term "1,1,0,0,0"))
                                       (rule "castedGetAny" (formula "4") (term "1,0,0,0,0,0,0"))
                                       (rule "castedGetAny" (formula "4") (term "0,0,1,0,0,0"))
                                       (rule "castedGetAny" (formula "4") (term "0,1,1,0,0,0"))
                                        (builtin "One Step Simplification" (formula "4"))
                                       (rule "true_left" (formula "4"))
                                       (rule "ifthenelse_split" (formula "57") (term "0"))
                                       (branch "i_1 ≥ 1 TRUE"
                                          (rule "polySimp_homoEq" (formula "58"))
                                          (rule "polySimp_addComm1" (formula "58") (term "0"))
                                          (rule "polySimp_sepPosMonomial" (formula "58"))
                                          (rule "polySimp_mulComm0" (formula "58") (term "1"))
                                          (rule "polySimp_rightDist" (formula "58") (term "1"))
                                          (rule "mul_literals" (formula "58") (term "0,1"))
                                          (rule "polySimp_mulLiterals" (formula "58") (term "1,1"))
                                          (rule "polySimp_elimOne" (formula "58") (term "1,1"))
                                          (rule "inEqSimp_subsumption1" (formula "5") (ifseqformula "57"))
                                          (rule "leq_literals" (formula "5") (term "0"))
                                           (builtin "One Step Simplification" (formula "5"))
                                          (rule "true_left" (formula "5"))
                                          (rule "shift_paren_or" (formula "2") (term "0,0,0"))
                                           (builtin "One Step Simplification" (formula "2"))
                                          (rule "eqSymm" (formula "2") (term "1,1,0,0,0"))
                                          (rule "castedGetAny" (formula "2") (term "1,0,0,0,0,0,0"))
                                          (rule "castedGetAny" (formula "2") (term "0,0,1,0,0,0"))
                                          (rule "castedGetAny" (formula "2") (term "0,1,1,0,0,0"))
                                           (builtin "One Step Simplification" (formula "2"))
                                          (rule "true_left" (formula "2"))
                                          (rule "commute_or_2" (formula "10") (term "0,0,0"))
                                           (builtin "One Step Simplification" (formula "10"))
                                          (rule "eqSymm" (formula "10") (term "1,0,0,0,0"))
                                          (rule "castedGetAny" (formula "10") (term "0,0,0,0,0,0"))
                                          (rule "castedGetAny" (formula "10") (term "1,0,0,1,0,0,0"))
                                          (rule "castedGetAny" (formula "10") (term "0,1,0,0,0,0"))
                                           (builtin "One Step Simplification" (formula "10"))
                                          (rule "true_left" (formula "10"))
                                          (rule "commute_or_2" (formula "8") (term "0,0,0"))
                                           (builtin "One Step Simplification" (formula "8"))
                                          (rule "eqSymm" (formula "8") (term "1,0,0,0,0"))
                                          (rule "castedGetAny" (formula "8") (term "1,0,0,1,0,0,0"))
                                          (rule "castedGetAny" (formula "8") (term "0,0,0,0,0,0"))
                                          (rule "castedGetAny" (formula "8") (term "0,1,0,0,0,0"))
                                           (builtin "One Step Simplification" (formula "8"))
                                          (rule "true_left" (formula "8"))
                                          (rule "shift_paren_or" (formula "9") (term "0,0,0"))
                                           (builtin "One Step Simplification" (formula "9"))
                                          (rule "eqSymm" (formula "9") (term "1,1,0,0,0"))
                                          (rule "castedGetAny" (formula "9") (term "0,0,1,0,0,0"))
                                          (rule "castedGetAny" (formula "9") (term "0,0,0,0,0,0"))
                                          (rule "castedGetAny" (formula "9") (term "0,1,1,0,0,0"))
                                           (builtin "One Step Simplification" (formula "9"))
                                          (rule "true_left" (formula "9"))
                                          (rule "cnf_rightDist" (formula "2") (term "0,0,0"))
                                          (rule "distr_forallAnd" (formula "2") (term "0,0"))
                                          (rule "distr_forallAnd" (formula "2") (term "0"))
                                          (rule "distr_forallAnd" (formula "2"))
                                          (rule "andLeft" (formula "2"))
                                          (rule "shift_paren_or" (formula "6") (term "0,0,0"))
                                           (builtin "One Step Simplification" (formula "6"))
                                          (rule "eqSymm" (formula "6") (term "1,1,0,0,0"))
                                          (rule "castedGetAny" (formula "6") (term "0,0,1,0,0,0"))
                                          (rule "castedGetAny" (formula "6") (term "1,0,0,0,0,0,0"))
                                          (rule "castedGetAny" (formula "6") (term "0,1,1,0,0,0"))
                                           (builtin "One Step Simplification" (formula "6"))
                                          (rule "true_left" (formula "6"))
                                          (rule "cnf_rightDist" (formula "1") (term "0,0,0"))
                                          (rule "distr_forallAnd" (formula "1") (term "0,0"))
                                          (rule "distr_forallAnd" (formula "1") (term "0"))
                                          (rule "distr_forallAnd" (formula "1"))
                                          (rule "andLeft" (formula "1"))
                                          (rule "shift_paren_or" (formula "8") (term "0,0,0"))
                                           (builtin "One Step Simplification" (formula "8"))
                                          (rule "eqSymm" (formula "8") (term "1,1,0,0,0"))
                                          (rule "castedGetAny" (formula "8") (term "0,0,1,0,0,0"))
                                          (rule "castedGetAny" (formula "8") (term "1,0,0,0,0,0,0"))
                                          (rule "castedGetAny" (formula "8") (term "0,1,1,0,0,0"))
                                           (builtin "One Step Simplification" (formula "8"))
                                          (rule "true_left" (formula "8"))
                                          (rule "shift_paren_or" (formula "8") (term "0,0,0"))
                                           (builtin "One Step Simplification" (formula "8"))
                                          (rule "eqSymm" (formula "8") (term "1,1,0,0,0"))
                                          (rule "castedGetAny" (formula "8") (term "0,0,0,0,0,0"))
                                          (rule "castedGetAny" (formula "8") (term "0,0,1,0,0,0"))
                                          (rule "castedGetAny" (formula "8") (term "0,1,1,0,0,0"))
                                           (builtin "One Step Simplification" (formula "8"))
                                          (rule "true_left" (formula "8"))
                                          (rule "seqGetAlphaCast" (formula "54") (term "0"))
                                          (rule "castDel" (formula "54") (term "0"))
                                           (builtin "One Step Simplification" (formula "54"))
                                          (rule "true_left" (formula "54"))
                                          (rule "equalityToSeqGetAndSeqLenLeft" (formula "53") (inst "iv=iv"))
                                          (rule "andLeft" (formula "53"))
                                          (rule "lenOfSeqSub" (formula "53") (term "0"))
                                          (rule "polySimp_elimSub" (formula "53") (term "1,0"))
                                          (rule "mul_literals" (formula "53") (term "1,1,0"))
                                          (rule "add_zero_right" (formula "53") (term "1,0"))
                                          (rule "lenOfSeqSub" (formula "54") (term "1,1,0,0"))
                                          (rule "polySimp_elimSub" (formula "54") (term "1,1,1,0,0"))
                                          (rule "times_zero_2" (formula "54") (term "1,1,1,1,0,0"))
                                          (rule "add_zero_right" (formula "54") (term "1,1,1,0,0"))
                                          (rule "lenOfSeqSubEQ" (formula "53") (term "1") (ifseqformula "55"))
                                          (rule "eqSymm" (formula "53"))
                                          (rule "polySimp_elimSub" (formula "53") (term "1,0"))
                                          (rule "mul_literals" (formula "53") (term "1,1,0"))
                                          (rule "add_zero_right" (formula "53") (term "1,0"))
                                           (builtin "One Step Simplification" (formula "53"))
                                          (rule "true_left" (formula "53"))
                                          (rule "inEqSimp_ltToLeq" (formula "53") (term "0,1,1,0,0"))
                                          (rule "add_zero_right" (formula "53") (term "0,0,1,1,0,0"))
                                          (rule "polySimp_mulComm0" (formula "53") (term "1,0,0,1,1,0,0"))
                                          (rule "inEqSimp_ltToLeq" (formula "53") (term "1,0,0"))
                                          (rule "polySimp_mulComm0" (formula "53") (term "1,0,0,1,0,0"))
                                          (rule "inEqSimp_commuteLeq" (formula "53") (term "0,0,0"))
                                          (rule "applyEq" (formula "53") (term "0,0,1,0") (ifseqformula "54"))
                                           (builtin "One Step Simplification" (formula "53"))
                                          (rule "true_left" (formula "53"))
                                          (rule "cnf_rightDist" (formula "6") (term "0,0,0"))
                                          (rule "distr_forallAnd" (formula "6") (term "0,0"))
                                          (rule "distr_forallAnd" (formula "6") (term "0"))
                                          (rule "distr_forallAnd" (formula "6"))
                                          (rule "andLeft" (formula "6"))
                                          (rule "cnf_rightDist" (formula "8") (term "0,0,0"))
                                          (rule "distr_forallAnd" (formula "8") (term "0,0"))
                                          (rule "distr_forallAnd" (formula "8") (term "0"))
                                          (rule "distr_forallAnd" (formula "8"))
                                          (rule "andLeft" (formula "8"))
                                          (rule "shift_paren_or" (formula "4") (term "0,0,0"))
                                           (builtin "One Step Simplification" (formula "4"))
                                          (rule "eqSymm" (formula "4") (term "1,1,0,0,0"))
                                          (rule "castedGetAny" (formula "4") (term "0,0,1,0,0,0"))
                                          (rule "castedGetAny" (formula "4") (term "1,0,0,0,0,0,0"))
                                          (rule "castedGetAny" (formula "4") (term "0,1,1,0,0,0"))
                                           (builtin "One Step Simplification" (formula "4"))
                                          (rule "true_left" (formula "4"))
                                          (rule "allLeft" (formula "16") (inst "t=Seq::select(heap, ls, java.util.Collection::$seq)"))
                                          (rule "shift_paren_or" (formula "2") (term "0,0,0"))
                                           (builtin "One Step Simplification" (formula "2"))
                                          (rule "eqSymm" (formula "2") (term "1,1,0,0,0"))
                                          (rule "castedGetAny" (formula "2") (term "1,0,0,0,0,0,0"))
                                          (rule "castedGetAny" (formula "2") (term "0,0,1,0,0,0"))
                                          (rule "castedGetAny" (formula "2") (term "0,1,1,0,0,0"))
                                           (builtin "One Step Simplification" (formula "2"))
                                          (rule "true_left" (formula "2"))
                                          (rule "allLeft" (formula "17") (inst "t=Seq::select(heap, ls, java.util.Collection::$seq)"))
                                          (rule "cnf_rightDist" (formula "2") (term "0,0,0"))
                                          (rule "distr_forallAnd" (formula "2") (term "0,0"))
                                          (rule "distr_forallAnd" (formula "2") (term "0"))
                                          (rule "distr_forallAnd" (formula "2"))
                                          (rule "andLeft" (formula "2"))
                                          (rule "cnf_rightDist" (formula "1") (term "0,0,0"))
                                          (rule "distr_forallAnd" (formula "1") (term "0,0"))
                                          (rule "distr_forallAnd" (formula "1") (term "0"))
                                          (rule "distr_forallAnd" (formula "1"))
                                          (rule "andLeft" (formula "1"))
                                          (rule "commute_or_2" (formula "6") (term "0,0,0"))
                                           (builtin "One Step Simplification" (formula "6"))
                                          (rule "eqSymm" (formula "6") (term "1,0,0,0,0"))
                                          (rule "castedGetAny" (formula "6") (term "0,0,0,0,0,0"))
                                          (rule "castedGetAny" (formula "6") (term "1,0,0,1,0,0,0"))
                                          (rule "castedGetAny" (formula "6") (term "0,1,0,0,0,0"))
                                           (builtin "One Step Simplification" (formula "6"))
                                          (rule "true_left" (formula "6"))
                                          (rule "commute_or_2" (formula "7") (term "0,0,0"))
                                           (builtin "One Step Simplification" (formula "7"))
                                          (rule "eqSymm" (formula "7") (term "1,0,0,0,0"))
                                          (rule "castedGetAny" (formula "7") (term "0,0,0,0,0,0"))
                                          (rule "castedGetAny" (formula "7") (term "1,0,0,1,0,0,0"))
                                          (rule "castedGetAny" (formula "7") (term "0,1,0,0,0,0"))
                                           (builtin "One Step Simplification" (formula "7"))
                                          (rule "true_left" (formula "7"))
                                          (rule "shift_paren_or" (formula "6") (term "0,0,0"))
                                           (builtin "One Step Simplification" (formula "6"))
                                          (rule "eqSymm" (formula "6") (term "1,1,0,0,0"))
                                          (rule "castedGetAny" (formula "6") (term "0,0,1,0,0,0"))
                                          (rule "castedGetAny" (formula "6") (term "1,0,0,0,0,0,0"))
                                          (rule "castedGetAny" (formula "6") (term "0,1,1,0,0,0"))
                                           (builtin "One Step Simplification" (formula "6"))
                                          (rule "true_left" (formula "6"))
                                          (rule "shift_paren_or" (formula "6") (term "0,0,0"))
                                           (builtin "One Step Simplification" (formula "6"))
                                          (rule "eqSymm" (formula "6") (term "1,1,0,0,0"))
                                          (rule "castedGetAny" (formula "6") (term "0,0,1,0,0,0"))
                                          (rule "castedGetAny" (formula "6") (term "1,0,0,0,0,0,0"))
                                          (rule "castedGetAny" (formula "6") (term "0,1,1,0,0,0"))
                                           (builtin "One Step Simplification" (formula "6"))
                                          (rule "true_left" (formula "6"))
                                          (rule "shift_paren_or" (formula "4") (term "0,0,0"))
                                           (builtin "One Step Simplification" (formula "4"))
                                          (rule "eqSymm" (formula "4") (term "1,1,0,0,0"))
                                          (rule "castedGetAny" (formula "4") (term "0,0,1,0,0,0"))
                                          (rule "castedGetAny" (formula "4") (term "1,0,0,0,0,0,0"))
                                          (rule "castedGetAny" (formula "4") (term "0,1,1,0,0,0"))
                                           (builtin "One Step Simplification" (formula "4"))
                                          (rule "true_left" (formula "4"))
                                          (rule "shift_paren_or" (formula "2") (term "0,0,0"))
                                           (builtin "One Step Simplification" (formula "2"))
                                          (rule "eqSymm" (formula "2") (term "1,1,0,0,0"))
                                          (rule "castedGetAny" (formula "2") (term "1,0,0,0,0,0,0"))
                                          (rule "castedGetAny" (formula "2") (term "0,0,1,0,0,0"))
                                          (rule "castedGetAny" (formula "2") (term "0,1,1,0,0,0"))
                                           (builtin "One Step Simplification" (formula "2"))
                                          (rule "true_left" (formula "2"))
                                          (rule "cnf_rightDist" (formula "2") (term "0,0,0"))
                                          (rule "distr_forallAnd" (formula "2") (term "0,0"))
                                          (rule "distr_forallAnd" (formula "2") (term "0"))
                                          (rule "distr_forallAnd" (formula "2"))
                                          (rule "andLeft" (formula "2"))
                                          (rule "cnf_rightDist" (formula "1") (term "0,0,0"))
                                          (rule "distr_forallAnd" (formula "1") (term "0,0"))
                                          (rule "distr_forallAnd" (formula "1") (term "0"))
                                          (rule "distr_forallAnd" (formula "1"))
                                          (rule "andLeft" (formula "1"))
                                          (rule "shift_paren_or" (formula "4") (term "0,0,0"))
                                           (builtin "One Step Simplification" (formula "4"))
                                          (rule "eqSymm" (formula "4") (term "1,1,0,0,0"))
                                          (rule "castedGetAny" (formula "4") (term "0,0,1,0,0,0"))
                                          (rule "castedGetAny" (formula "4") (term "1,0,0,0,0,0,0"))
                                          (rule "castedGetAny" (formula "4") (term "0,1,1,0,0,0"))
                                           (builtin "One Step Simplification" (formula "4"))
                                          (rule "true_left" (formula "4"))
                                          (rule "shift_paren_or" (formula "2") (term "0,0,0"))
                                           (builtin "One Step Simplification" (formula "2"))
                                          (rule "eqSymm" (formula "2") (term "1,1,0,0,0"))
                                          (rule "castedGetAny" (formula "2") (term "0,0,1,0,0,0"))
                                          (rule "castedGetAny" (formula "2") (term "1,0,0,0,0,0,0"))
                                          (rule "castedGetAny" (formula "2") (term "0,1,1,0,0,0"))
                                           (builtin "One Step Simplification" (formula "2"))
                                          (rule "true_left" (formula "2"))
                                          (rule "cnf_rightDist" (formula "2") (term "0,0,0"))
                                          (rule "distr_forallAnd" (formula "2") (term "0,0"))
                                          (rule "distr_forallAnd" (formula "2") (term "0"))
                                          (rule "distr_forallAnd" (formula "2"))
                                          (rule "andLeft" (formula "2"))
                                          (rule "commute_or_2" (formula "2") (term "0,0,0"))
                                           (builtin "One Step Simplification" (formula "2"))
                                          (rule "eqSymm" (formula "2") (term "1,0,0,0,0"))
                                          (rule "castedGetAny" (formula "2") (term "1,0,0,1,0,0,0"))
                                          (rule "castedGetAny" (formula "2") (term "0,0,0,0,0,0"))
                                          (rule "castedGetAny" (formula "2") (term "0,1,0,0,0,0"))
                                           (builtin "One Step Simplification" (formula "2"))
                                          (rule "true_left" (formula "2"))
                                          (rule "shift_paren_or" (formula "2") (term "0,0,0"))
                                           (builtin "One Step Simplification" (formula "2"))
                                          (rule "eqSymm" (formula "2") (term "1,1,0,0,0"))
                                          (rule "castedGetAny" (formula "2") (term "0,0,1,0,0,0"))
                                          (rule "castedGetAny" (formula "2") (term "1,0,0,0,0,0,0"))
                                          (rule "castedGetAny" (formula "2") (term "0,1,1,0,0,0"))
                                           (builtin "One Step Simplification" (formula "2"))
                                          (rule "true_left" (formula "2"))
                                          (rule "cnf_rightDist" (formula "1") (term "0,0,0"))
                                          (rule "distr_forallAnd" (formula "1") (term "0,0"))
                                          (rule "distr_forallAnd" (formula "1") (term "0"))
                                          (rule "distr_forallAnd" (formula "1"))
                                          (rule "andLeft" (formula "1"))
                                          (rule "commute_or_2" (formula "1") (term "0,0,0"))
                                           (builtin "One Step Simplification" (formula "1"))
                                          (rule "eqSymm" (formula "1") (term "1,0,0,0,0"))
                                          (rule "castedGetAny" (formula "1") (term "0,0,0,0,0,0"))
                                          (rule "castedGetAny" (formula "1") (term "1,0,0,1,0,0,0"))
                                          (rule "castedGetAny" (formula "1") (term "0,1,0,0,0,0"))
                                           (builtin "One Step Simplification" (formula "1"))
                                          (rule "true_left" (formula "1"))
                                          (rule "shift_paren_or" (formula "1") (term "0,0,0"))
                                           (builtin "One Step Simplification" (formula "1"))
                                          (rule "eqSymm" (formula "1") (term "1,1,0,0,0"))
                                          (rule "castedGetAny" (formula "1") (term "1,0,0,0,0,0,0"))
                                          (rule "castedGetAny" (formula "1") (term "0,0,1,0,0,0"))
                                          (rule "castedGetAny" (formula "1") (term "0,1,1,0,0,0"))
                                           (builtin "One Step Simplification" (formula "1"))
                                          (rule "true_left" (formula "1"))
                                          (rule "cut_direct" (formula "42") (term "0,0,0"))
                                          (branch "CUT: result_48.<created>@anon_heap_LOOP«anonHeapFunction» = TRUE TRUE"
                                              (builtin "One Step Simplification" (formula "43"))
                                             (rule "true_left" (formula "43"))
                                             (rule "allLeft" (formula "15") (inst "t=i_1"))
                                             (rule "applyEq" (formula "15") (term "0,0,1") (ifseqformula "51"))
                                             (rule "commute_or" (formula "15"))
                                             (rule "allLeft" (formula "13") (inst "t=i_1"))
                                             (rule "applyEq" (formula "13") (term "0,0,1") (ifseqformula "52"))
                                             (rule "replace_known_right" (formula "13") (term "0,1") (ifseqformula "55"))
                                              (builtin "One Step Simplification" (formula "13"))
                                             (rule "true_left" (formula "13"))
                                             (rule "cut_direct" (formula "15") (term "0"))
                                             (branch "CUT: java.lang.String::instance(result_48) = TRUE TRUE"
                                                 (builtin "One Step Simplification" (formula "16"))
                                                (rule "true_left" (formula "16"))
                                                (rule "ineffectiveCast" (formula "1") (term "0") (ifseqformula "15"))
                                                (rule "typeEqDerived2" (formula "16") (term "0") (ifseqformula "1"))
                                                 (builtin "One Step Simplification" (formula "16"))
                                                (rule "true_left" (formula "16"))
                                                (rule "applyEq" (formula "1") (term "0") (ifseqformula "2"))
                                                (rule "eqSymm" (formula "1"))
                                                (rule "close" (formula "54") (ifseqformula "1"))
                                             )
                                             (branch "CUT: java.lang.String::instance(result_48) = TRUE FALSE"
                                                 (builtin "One Step Simplification" (formula "15"))
                                                (rule "seqGetAlphaCast" (formula "15") (term "0"))
                                                (rule "castedGetAny" (formula "15") (term "0"))
                                                 (builtin "One Step Simplification" (formula "15"))
                                                (rule "true_left" (formula "15"))
                                                (rule "allLeft" (formula "9") (inst "t=i_0"))
                                                (rule "applyEq" (formula "9") (term "0,0,1") (ifseqformula "45"))
                                                (rule "replace_known_right" (formula "9") (term "0,1") (ifseqformula "56"))
                                                 (builtin "One Step Simplification" (formula "9"))
                                                (rule "true_left" (formula "9"))
                                                (rule "allLeft" (formula "11") (inst "t=i_0"))
                                                (rule "applyEq" (formula "11") (term "0,0,1") (ifseqformula "45"))
                                                (rule "replace_known_right" (formula "11") (term "1") (ifseqformula "53"))
                                                 (builtin "One Step Simplification" (formula "11"))
                                                (rule "allLeft" (formula "23") (inst "t=i_0"))
                                                (rule "replace_known_left" (formula "23") (term "0,0,0") (ifseqformula "11"))
                                                 (builtin "One Step Simplification" (formula "23"))
                                                (rule "inEqSimp_commuteGeq" (formula "23") (term "1"))
                                                (rule "inEqSimp_contradInEq1" (formula "23") (term "1") (ifseqformula "7"))
                                                (rule "inEqSimp_homoInEq1" (formula "23") (term "0,1"))
                                                (rule "polySimp_pullOutFactor1b" (formula "23") (term "0,0,1"))
                                                (rule "add_literals" (formula "23") (term "1,1,0,0,1"))
                                                (rule "times_zero_1" (formula "23") (term "1,0,0,1"))
                                                (rule "add_zero_right" (formula "23") (term "0,0,1"))
                                                (rule "leq_literals" (formula "23") (term "0,1"))
                                                 (builtin "One Step Simplification" (formula "23"))
                                                (rule "inEqSimp_contradInEq0" (formula "40") (ifseqformula "23"))
                                                (rule "qeq_literals" (formula "40") (term "0"))
                                                 (builtin "One Step Simplification" (formula "40"))
                                                (rule "closeFalse" (formula "40"))
                                             )
                                          )
                                          (branch "CUT: result_48.<created>@anon_heap_LOOP«anonHeapFunction» = TRUE FALSE"
                                              (builtin "One Step Simplification" (formula "42"))
                                             (rule "allLeft" (formula "15") (inst "t=i_1"))
                                             (rule "applyEq" (formula "15") (term "0,0,1") (ifseqformula "51"))
                                             (rule "commute_or" (formula "15"))
                                             (rule "allLeft" (formula "13") (inst "t=i_1"))
                                             (rule "applyEq" (formula "13") (term "0,0,1") (ifseqformula "52"))
                                             (rule "replace_known_right" (formula "13") (term "0,1") (ifseqformula "56"))
                                              (builtin "One Step Simplification" (formula "13"))
                                             (rule "true_left" (formula "13"))
                                             (rule "seqGetAlphaCast" (formula "15") (term "0,1"))
                                             (rule "castedGetAny" (formula "15") (term "0"))
                                              (builtin "One Step Simplification" (formula "15"))
                                             (rule "true_left" (formula "15"))
                                             (rule "cut_direct" (formula "15") (term "0"))
                                             (branch "CUT: java.lang.String::instance(result_48) = TRUE TRUE"
                                                 (builtin "One Step Simplification" (formula "16"))
                                                (rule "true_left" (formula "16"))
                                                (rule "ineffectiveCast" (formula "1") (term "0") (ifseqformula "15"))
                                                (rule "typeEqDerived2" (formula "16") (term "0") (ifseqformula "1"))
                                                 (builtin "One Step Simplification" (formula "16"))
                                                (rule "true_left" (formula "16"))
                                                (rule "applyEq" (formula "1") (term "0") (ifseqformula "2"))
                                                (rule "eqSymm" (formula "1"))
                                                (rule "close" (formula "55") (ifseqformula "1"))
                                             )
                                             (branch "CUT: java.lang.String::instance(result_48) = TRUE FALSE"
                                                 (builtin "One Step Simplification" (formula "15"))
                                                (rule "allLeft" (formula "9") (inst "t=i_0"))
                                                (rule "applyEq" (formula "9") (term "0,0,1") (ifseqformula "45"))
                                                (rule "replace_known_right" (formula "9") (term "0,1") (ifseqformula "57"))
                                                 (builtin "One Step Simplification" (formula "9"))
                                                (rule "true_left" (formula "9"))
                                                (rule "allLeft" (formula "11") (inst "t=i_0"))
                                                (rule "applyEq" (formula "11") (term "0,0,1") (ifseqformula "45"))
                                                (rule "replace_known_right" (formula "11") (term "1") (ifseqformula "53"))
                                                 (builtin "One Step Simplification" (formula "11"))
                                                (rule "allLeft" (formula "23") (inst "t=i_0"))
                                                (rule "replace_known_left" (formula "23") (term "0,0,0") (ifseqformula "11"))
                                                 (builtin "One Step Simplification" (formula "23"))
                                                (rule "inEqSimp_commuteGeq" (formula "23") (term "1"))
                                                (rule "inEqSimp_contradInEq1" (formula "23") (term "1") (ifseqformula "7"))
                                                (rule "inEqSimp_homoInEq1" (formula "23") (term "0,1"))
                                                (rule "polySimp_pullOutFactor1b" (formula "23") (term "0,0,1"))
                                                (rule "add_literals" (formula "23") (term "1,1,0,0,1"))
                                                (rule "times_zero_1" (formula "23") (term "1,0,0,1"))
                                                (rule "add_literals" (formula "23") (term "0,0,1"))
                                                (rule "leq_literals" (formula "23") (term "0,1"))
                                                 (builtin "One Step Simplification" (formula "23"))
                                                (rule "inEqSimp_subsumption0" (formula "6") (ifseqformula "23"))
                                                (rule "leq_literals" (formula "6") (term "0"))
                                                 (builtin "One Step Simplification" (formula "6"))
                                                (rule "true_left" (formula "6"))
                                                (rule "inEqSimp_contradInEq0" (formula "39") (ifseqformula "22"))
                                                (rule "qeq_literals" (formula "39") (term "0"))
                                                 (builtin "One Step Simplification" (formula "39"))
                                                (rule "closeFalse" (formula "39"))
                                             )
                                          )
                                       )
                                       (branch "i_1 ≥ 1 FALSE"
                                          (rule "polySimp_homoEq" (formula "57"))
                                          (rule "mul_literals" (formula "57") (term "1,0"))
                                          (rule "add_zero_right" (formula "57") (term "0"))
                                          (rule "inEqSimp_geqRight" (formula "60"))
                                          (rule "mul_literals" (formula "1") (term "1,0,0"))
                                          (rule "add_literals" (formula "1") (term "0,0"))
                                          (rule "add_zero_left" (formula "1") (term "0"))
                                          (rule "polySimp_sepPosMonomial" (formula "58"))
                                          (rule "mul_literals" (formula "58") (term "1"))
                                          (rule "inEqSimp_antiSymm" (formula "6") (ifseqformula "1"))
                                          (rule "applyEq" (formula "61") (term "1,0") (ifseqformula "6"))
                                          (rule "applyEqRigid" (formula "1") (term "0") (ifseqformula "6"))
                                          (rule "leq_literals" (formula "1"))
                                          (rule "true_left" (formula "1"))
                                          (rule "applyEqRigid" (formula "6") (term "0") (ifseqformula "5"))
                                          (rule "qeq_literals" (formula "6"))
                                          (rule "true_left" (formula "6"))
                                          (rule "applyEqRigid" (formula "48") (term "1,1,0") (ifseqformula "5"))
                                          (rule "applyEq" (formula "58") (term "2,0") (ifseqformula "5"))
                                           (builtin "One Step Simplification" (formula "58"))
                                          (rule "eqSymm" (formula "58"))
                                          (rule "eqSeqEmpty" (formula "58"))
                                          (rule "inEqSimp_or_tautInEq1" (formula "48") (term "0"))
                                          (rule "add_literals" (formula "48") (term "1,1,0"))
                                          (rule "qeq_literals" (formula "48") (term "1,0"))
                                           (builtin "One Step Simplification" (formula "48"))
                                          (rule "true_left" (formula "48"))
                                          (rule "shift_paren_or" (formula "2") (term "0,0,0"))
                                           (builtin "One Step Simplification" (formula "2"))
                                          (rule "eqSymm" (formula "2") (term "1,1,0,0,0"))
                                          (rule "castedGetAny" (formula "2") (term "1,0,0,0,0,0,0"))
                                          (rule "castedGetAny" (formula "2") (term "0,0,1,0,0,0"))
                                          (rule "castedGetAny" (formula "2") (term "0,1,1,0,0,0"))
                                           (builtin "One Step Simplification" (formula "2"))
                                          (rule "true_left" (formula "2"))
                                          (rule "commute_or_2" (formula "11") (term "0,0,0"))
                                           (builtin "One Step Simplification" (formula "11"))
                                          (rule "eqSymm" (formula "11") (term "1,0,0,0,0"))
                                          (rule "castedGetAny" (formula "11") (term "1,0,0,1,0,0,0"))
                                          (rule "castedGetAny" (formula "11") (term "0,0,0,0,0,0"))
                                          (rule "castedGetAny" (formula "11") (term "0,1,0,0,0,0"))
                                           (builtin "One Step Simplification" (formula "11"))
                                          (rule "true_left" (formula "11"))
                                          (rule "commute_or_2" (formula "9") (term "0,0,0"))
                                           (builtin "One Step Simplification" (formula "9"))
                                          (rule "eqSymm" (formula "9") (term "1,0,0,0,0"))
                                          (rule "castedGetAny" (formula "9") (term "1,0,0,1,0,0,0"))
                                          (rule "castedGetAny" (formula "9") (term "0,0,0,0,0,0"))
                                          (rule "castedGetAny" (formula "9") (term "0,1,0,0,0,0"))
                                           (builtin "One Step Simplification" (formula "9"))
                                          (rule "true_left" (formula "9"))
                                          (rule "shift_paren_or" (formula "10") (term "0,0,0"))
                                           (builtin "One Step Simplification" (formula "10"))
                                          (rule "eqSymm" (formula "10") (term "1,1,0,0,0"))
                                          (rule "castedGetAny" (formula "10") (term "0,0,0,0,0,0"))
                                          (rule "castedGetAny" (formula "10") (term "0,0,1,0,0,0"))
                                          (rule "castedGetAny" (formula "10") (term "0,1,1,0,0,0"))
                                           (builtin "One Step Simplification" (formula "10"))
                                          (rule "true_left" (formula "10"))
                                          (rule "cnf_rightDist" (formula "2") (term "0,0,0"))
                                          (rule "distr_forallAnd" (formula "2") (term "0,0"))
                                          (rule "distr_forallAnd" (formula "2") (term "0"))
                                          (rule "distr_forallAnd" (formula "2"))
                                          (rule "andLeft" (formula "2"))
                                          (rule "shift_paren_or" (formula "7") (term "0,0,0"))
                                           (builtin "One Step Simplification" (formula "7"))
                                          (rule "eqSymm" (formula "7") (term "1,1,0,0,0"))
                                          (rule "castedGetAny" (formula "7") (term "0,0,1,0,0,0"))
                                          (rule "castedGetAny" (formula "7") (term "1,0,0,0,0,0,0"))
                                          (rule "castedGetAny" (formula "7") (term "0,1,1,0,0,0"))
                                           (builtin "One Step Simplification" (formula "7"))
                                          (rule "true_left" (formula "7"))
                                          (rule "cnf_rightDist" (formula "1") (term "0,0,0"))
                                          (rule "distr_forallAnd" (formula "1") (term "0,0"))
                                          (rule "distr_forallAnd" (formula "1") (term "0"))
                                          (rule "distr_forallAnd" (formula "1"))
                                          (rule "andLeft" (formula "1"))
                                          (rule "shift_paren_or" (formula "9") (term "0,0,0"))
                                           (builtin "One Step Simplification" (formula "9"))
                                          (rule "eqSymm" (formula "9") (term "1,1,0,0,0"))
                                          (rule "castedGetAny" (formula "9") (term "1,0,0,0,0,0,0"))
                                          (rule "castedGetAny" (formula "9") (term "0,0,1,0,0,0"))
                                          (rule "castedGetAny" (formula "9") (term "0,1,1,0,0,0"))
                                           (builtin "One Step Simplification" (formula "9"))
                                          (rule "true_left" (formula "9"))
                                          (rule "shift_paren_or" (formula "9") (term "0,0,0"))
                                           (builtin "One Step Simplification" (formula "9"))
                                          (rule "eqSymm" (formula "9") (term "1,1,0,0,0"))
                                          (rule "castedGetAny" (formula "9") (term "0,0,0,0,0,0"))
                                          (rule "castedGetAny" (formula "9") (term "0,0,1,0,0,0"))
                                          (rule "castedGetAny" (formula "9") (term "0,1,1,0,0,0"))
                                           (builtin "One Step Simplification" (formula "9"))
                                          (rule "true_left" (formula "9"))
                                          (rule "cnf_rightDist" (formula "7") (term "0,0,0"))
                                          (rule "distr_forallAnd" (formula "7") (term "0,0"))
                                          (rule "distr_forallAnd" (formula "7") (term "0"))
                                          (rule "distr_forallAnd" (formula "7"))
                                          (rule "andLeft" (formula "7"))
                                          (rule "cnf_rightDist" (formula "9") (term "0,0,0"))
                                          (rule "distr_forallAnd" (formula "9") (term "0,0"))
                                          (rule "distr_forallAnd" (formula "9") (term "0"))
                                          (rule "distr_forallAnd" (formula "9"))
                                          (rule "andLeft" (formula "9"))
                                          (rule "allLeft" (formula "18") (inst "t=Seq::select(heap, ls, java.util.Collection::$seq)"))
                                          (rule "shift_paren_or" (formula "4") (term "0,0,0"))
                                           (builtin "One Step Simplification" (formula "4"))
                                          (rule "eqSymm" (formula "4") (term "1,1,0,0,0"))
                                          (rule "castedGetAny" (formula "4") (term "0,0,1,0,0,0"))
                                          (rule "castedGetAny" (formula "4") (term "1,0,0,0,0,0,0"))
                                          (rule "castedGetAny" (formula "4") (term "0,1,1,0,0,0"))
                                           (builtin "One Step Simplification" (formula "4"))
                                          (rule "true_left" (formula "4"))
                                          (rule "shift_paren_or" (formula "2") (term "0,0,0"))
                                           (builtin "One Step Simplification" (formula "2"))
                                          (rule "eqSymm" (formula "2") (term "1,1,0,0,0"))
                                          (rule "castedGetAny" (formula "2") (term "0,0,1,0,0,0"))
                                          (rule "castedGetAny" (formula "2") (term "1,0,0,0,0,0,0"))
                                          (rule "castedGetAny" (formula "2") (term "0,1,1,0,0,0"))
                                           (builtin "One Step Simplification" (formula "2"))
                                          (rule "true_left" (formula "2"))
                                          (rule "commute_or_2" (formula "5") (term "0,0,0"))
                                           (builtin "One Step Simplification" (formula "5"))
                                          (rule "eqSymm" (formula "5") (term "1,0,0,0,0"))
                                          (rule "castedGetAny" (formula "5") (term "1,0,0,1,0,0,0"))
                                          (rule "castedGetAny" (formula "5") (term "0,0,0,0,0,0"))
                                          (rule "castedGetAny" (formula "5") (term "0,1,0,0,0,0"))
                                           (builtin "One Step Simplification" (formula "5"))
                                          (rule "true_left" (formula "5"))
                                          (rule "allLeft" (formula "17") (inst "t=Seq::select(heap, ls, java.util.Collection::$seq)"))
                                          (rule "commute_or_2" (formula "6") (term "0,0,0"))
                                           (builtin "One Step Simplification" (formula "6"))
                                          (rule "eqSymm" (formula "6") (term "1,0,0,0,0"))
                                          (rule "castedGetAny" (formula "6") (term "0,0,0,0,0,0"))
                                          (rule "castedGetAny" (formula "6") (term "1,0,0,1,0,0,0"))
                                          (rule "castedGetAny" (formula "6") (term "0,1,0,0,0,0"))
                                           (builtin "One Step Simplification" (formula "6"))
                                          (rule "true_left" (formula "6"))
                                          (rule "cnf_rightDist" (formula "2") (term "0,0,0"))
                                          (rule "distr_forallAnd" (formula "2") (term "0,0"))
                                          (rule "distr_forallAnd" (formula "2") (term "0"))
                                          (rule "distr_forallAnd" (formula "2"))
                                          (rule "andLeft" (formula "2"))
                                          (rule "shift_paren_or" (formula "6") (term "0,0,0"))
                                           (builtin "One Step Simplification" (formula "6"))
                                          (rule "eqSymm" (formula "6") (term "1,1,0,0,0"))
                                          (rule "castedGetAny" (formula "6") (term "0,0,1,0,0,0"))
                                          (rule "castedGetAny" (formula "6") (term "1,0,0,0,0,0,0"))
                                          (rule "castedGetAny" (formula "6") (term "0,1,1,0,0,0"))
                                           (builtin "One Step Simplification" (formula "6"))
                                          (rule "true_left" (formula "6"))
                                          (rule "shift_paren_or" (formula "6") (term "0,0,0"))
                                           (builtin "One Step Simplification" (formula "6"))
                                          (rule "eqSymm" (formula "6") (term "1,1,0,0,0"))
                                          (rule "castedGetAny" (formula "6") (term "1,0,0,0,0,0,0"))
                                          (rule "castedGetAny" (formula "6") (term "0,0,1,0,0,0"))
                                          (rule "castedGetAny" (formula "6") (term "0,1,1,0,0,0"))
                                           (builtin "One Step Simplification" (formula "6"))
                                          (rule "true_left" (formula "6"))
                                          (rule "cnf_rightDist" (formula "1") (term "0,0,0"))
                                          (rule "distr_forallAnd" (formula "1") (term "0,0"))
                                          (rule "distr_forallAnd" (formula "1") (term "0"))
                                          (rule "distr_forallAnd" (formula "1"))
                                          (rule "andLeft" (formula "1"))
                                          (rule "shift_paren_or" (formula "4") (term "0,0,0"))
                                           (builtin "One Step Simplification" (formula "4"))
                                          (rule "eqSymm" (formula "4") (term "1,1,0,0,0"))
                                          (rule "castedGetAny" (formula "4") (term "0,0,1,0,0,0"))
                                          (rule "castedGetAny" (formula "4") (term "1,0,0,0,0,0,0"))
                                          (rule "castedGetAny" (formula "4") (term "0,1,1,0,0,0"))
                                           (builtin "One Step Simplification" (formula "4"))
                                          (rule "true_left" (formula "4"))
                                          (rule "shift_paren_or" (formula "2") (term "0,0,0"))
                                           (builtin "One Step Simplification" (formula "2"))
                                          (rule "eqSymm" (formula "2") (term "1,1,0,0,0"))
                                          (rule "castedGetAny" (formula "2") (term "0,0,1,0,0,0"))
                                          (rule "castedGetAny" (formula "2") (term "1,0,0,0,0,0,0"))
                                          (rule "castedGetAny" (formula "2") (term "0,1,1,0,0,0"))
                                           (builtin "One Step Simplification" (formula "2"))
                                          (rule "true_left" (formula "2"))
                                          (rule "cnf_rightDist" (formula "2") (term "0,0,0"))
                                          (rule "distr_forallAnd" (formula "2") (term "0,0"))
                                          (rule "distr_forallAnd" (formula "2") (term "0"))
                                          (rule "distr_forallAnd" (formula "2"))
                                          (rule "andLeft" (formula "2"))
                                          (rule "shift_paren_or" (formula "3") (term "0,0,0"))
                                           (builtin "One Step Simplification" (formula "3"))
                                          (rule "eqSymm" (formula "3") (term "1,1,0,0,0"))
                                          (rule "castedGetAny" (formula "3") (term "0,0,1,0,0,0"))
                                          (rule "castedGetAny" (formula "3") (term "1,0,0,0,0,0,0"))
                                          (rule "castedGetAny" (formula "3") (term "0,1,1,0,0,0"))
                                           (builtin "One Step Simplification" (formula "3"))
                                          (rule "true_left" (formula "3"))
                                          (rule "cnf_rightDist" (formula "1") (term "0,0,0"))
                                          (rule "distr_forallAnd" (formula "1") (term "0,0"))
                                          (rule "distr_forallAnd" (formula "1") (term "0"))
                                          (rule "distr_forallAnd" (formula "1"))
                                          (rule "andLeft" (formula "1"))
                                          (rule "shift_paren_or" (formula "2") (term "0,0,0"))
                                           (builtin "One Step Simplification" (formula "2"))
                                          (rule "eqSymm" (formula "2") (term "1,1,0,0,0"))
                                          (rule "castedGetAny" (formula "2") (term "0,0,1,0,0,0"))
                                          (rule "castedGetAny" (formula "2") (term "1,0,0,0,0,0,0"))
                                          (rule "castedGetAny" (formula "2") (term "0,1,1,0,0,0"))
                                           (builtin "One Step Simplification" (formula "2"))
                                          (rule "true_left" (formula "2"))
                                          (rule "cnf_rightDist" (formula "2") (term "0,0,0"))
                                          (rule "distr_forallAnd" (formula "2") (term "0,0"))
                                          (rule "distr_forallAnd" (formula "2") (term "0"))
                                          (rule "distr_forallAnd" (formula "2"))
                                          (rule "andLeft" (formula "2"))
                                          (rule "commute_or_2" (formula "2") (term "0,0,0"))
                                           (builtin "One Step Simplification" (formula "2"))
                                          (rule "eqSymm" (formula "2") (term "1,0,0,0,0"))
                                          (rule "castedGetAny" (formula "2") (term "1,0,0,1,0,0,0"))
                                          (rule "castedGetAny" (formula "2") (term "0,0,0,0,0,0"))
                                          (rule "castedGetAny" (formula "2") (term "0,1,0,0,0,0"))
                                           (builtin "One Step Simplification" (formula "2"))
                                          (rule "true_left" (formula "2"))
                                          (rule "shift_paren_or" (formula "2") (term "0,0,0"))
                                           (builtin "One Step Simplification" (formula "2"))
                                          (rule "eqSymm" (formula "2") (term "1,1,0,0,0"))
                                          (rule "castedGetAny" (formula "2") (term "1,0,0,0,0,0,0"))
                                          (rule "castedGetAny" (formula "2") (term "0,0,1,0,0,0"))
                                          (rule "castedGetAny" (formula "2") (term "0,1,1,0,0,0"))
                                           (builtin "One Step Simplification" (formula "2"))
                                          (rule "true_left" (formula "2"))
                                          (rule "cnf_rightDist" (formula "1") (term "0,0,0"))
                                          (rule "distr_forallAnd" (formula "1") (term "0,0"))
                                          (rule "distr_forallAnd" (formula "1") (term "0"))
                                          (rule "distr_forallAnd" (formula "1"))
                                          (rule "andLeft" (formula "1"))
                                          (rule "commute_or_2" (formula "1") (term "0,0,0"))
                                           (builtin "One Step Simplification" (formula "1"))
                                          (rule "eqSymm" (formula "1") (term "1,0,0,0,0"))
                                          (rule "castedGetAny" (formula "1") (term "0,0,0,0,0,0"))
                                          (rule "castedGetAny" (formula "1") (term "1,0,0,1,0,0,0"))
                                          (rule "castedGetAny" (formula "1") (term "0,1,0,0,0,0"))
                                           (builtin "One Step Simplification" (formula "1"))
                                          (rule "true_left" (formula "1"))
                                          (rule "shift_paren_or" (formula "1") (term "0,0,0"))
                                           (builtin "One Step Simplification" (formula "1"))
                                          (rule "eqSymm" (formula "1") (term "1,1,0,0,0"))
                                          (rule "castedGetAny" (formula "1") (term "0,0,1,0,0,0"))
                                          (rule "castedGetAny" (formula "1") (term "1,0,0,0,0,0,0"))
                                          (rule "castedGetAny" (formula "1") (term "0,1,1,0,0,0"))
                                           (builtin "One Step Simplification" (formula "1"))
                                          (rule "true_left" (formula "1"))
                                          (rule "seqGetAlphaCast" (formula "49") (term "0"))
                                          (rule "castDel" (formula "49") (term "0"))
                                           (builtin "One Step Simplification" (formula "49"))
                                          (rule "true_left" (formula "49"))
                                          (rule "cut_direct" (formula "42") (term "1"))
                                          (branch "CUT: result_48.<created>@anon_heap_size«anonHeapFunction» = TRUE TRUE"
                                              (builtin "One Step Simplification" (formula "43"))
                                             (rule "true_left" (formula "43"))
                                             (rule "allLeft" (formula "16") (inst "t=Z(0(#))"))
                                             (rule "applyEq" (formula "16") (term "0,0,1") (ifseqformula "50"))
                                             (rule "commute_or" (formula "16"))
                                             (rule "allLeft" (formula "14") (inst "t=Z(0(#))"))
                                             (rule "applyEq" (formula "14") (term "0,0,1") (ifseqformula "51"))
                                             (rule "replace_known_right" (formula "14") (term "0,1") (ifseqformula "54"))
                                              (builtin "One Step Simplification" (formula "14"))
                                             (rule "true_left" (formula "14"))
                                             (rule "cut_direct" (formula "16") (term "0"))
                                             (branch "CUT: java.lang.String::instance(result_48) = TRUE TRUE"
                                                 (builtin "One Step Simplification" (formula "17"))
                                                (rule "true_left" (formula "17"))
                                                (rule "ineffectiveCast" (formula "1") (term "0") (ifseqformula "16"))
                                                (rule "typeEqDerived2" (formula "17") (term "0") (ifseqformula "1"))
                                                 (builtin "One Step Simplification" (formula "17"))
                                                (rule "true_left" (formula "17"))
                                                (rule "applyEq" (formula "2") (term "0") (ifseqformula "1"))
                                                (rule "close" (formula "53") (ifseqformula "2"))
                                             )
                                             (branch "CUT: java.lang.String::instance(result_48) = TRUE FALSE"
                                                 (builtin "One Step Simplification" (formula "16"))
                                                (rule "seqGetAlphaCast" (formula "16") (term "0"))
                                                (rule "castedGetAny" (formula "16") (term "0"))
                                                 (builtin "One Step Simplification" (formula "16"))
                                                (rule "true_left" (formula "16"))
                                                (rule "allLeft" (formula "10") (inst "t=i_0"))
                                                (rule "applyEq" (formula "10") (term "0,0,1") (ifseqformula "45"))
                                                (rule "replace_known_right" (formula "10") (term "0,1") (ifseqformula "55"))
                                                 (builtin "One Step Simplification" (formula "10"))
                                                (rule "true_left" (formula "10"))
                                                (rule "allLeft" (formula "12") (inst "t=i_0"))
                                                (rule "applyEq" (formula "12") (term "0,0,1") (ifseqformula "45"))
                                                (rule "replace_known_right" (formula "12") (term "1") (ifseqformula "52"))
                                                 (builtin "One Step Simplification" (formula "12"))
                                                (rule "allLeft" (formula "24") (inst "t=i_0"))
                                                (rule "replace_known_left" (formula "24") (term "0,0,0") (ifseqformula "12"))
                                                 (builtin "One Step Simplification" (formula "24"))
                                                (rule "inEqSimp_commuteGeq" (formula "24") (term "1"))
                                                (rule "inEqSimp_contradInEq1" (formula "24") (term "0") (ifseqformula "41"))
                                                (rule "qeq_literals" (formula "24") (term "0,0"))
                                                 (builtin "One Step Simplification" (formula "24"))
                                                (rule "inEqSimp_contradInEq0" (formula "8") (ifseqformula "24"))
                                                (rule "andLeft" (formula "8"))
                                                (rule "inEqSimp_homoInEq1" (formula "8"))
                                                (rule "polySimp_pullOutFactor1b" (formula "8") (term "0"))
                                                (rule "add_literals" (formula "8") (term "1,1,0"))
                                                (rule "times_zero_1" (formula "8") (term "1,0"))
                                                (rule "add_literals" (formula "8") (term "0"))
                                                (rule "leq_literals" (formula "8"))
                                                (rule "closeFalse" (formula "8"))
                                             )
                                          )
                                          (branch "CUT: result_48.<created>@anon_heap_size«anonHeapFunction» = TRUE FALSE"
                                              (builtin "One Step Simplification" (formula "42"))
                                             (rule "allLeft" (formula "16") (inst "t=Z(0(#))"))
                                             (rule "applyEq" (formula "16") (term "0,0,1") (ifseqformula "50"))
                                             (rule "commute_or" (formula "16"))
                                             (rule "allLeft" (formula "14") (inst "t=Z(0(#))"))
                                             (rule "applyEq" (formula "14") (term "0,0,1") (ifseqformula "51"))
                                             (rule "replace_known_right" (formula "14") (term "0,1") (ifseqformula "55"))
                                              (builtin "One Step Simplification" (formula "14"))
                                             (rule "true_left" (formula "14"))
                                             (rule "cut_direct" (formula "16") (term "0"))
                                             (branch "CUT: java.lang.String::instance(result_48) = TRUE TRUE"
                                                 (builtin "One Step Simplification" (formula "17"))
                                                (rule "true_left" (formula "17"))
                                                (rule "ineffectiveCast" (formula "1") (term "0") (ifseqformula "16"))
                                                (rule "typeEqDerived2" (formula "17") (term "0") (ifseqformula "1"))
                                                 (builtin "One Step Simplification" (formula "17"))
                                                (rule "true_left" (formula "17"))
                                                (rule "applyEq" (formula "2") (term "0") (ifseqformula "1"))
                                                (rule "close" (formula "54") (ifseqformula "2"))
                                             )
                                             (branch "CUT: java.lang.String::instance(result_48) = TRUE FALSE"
                                                 (builtin "One Step Simplification" (formula "16"))
                                                (rule "seqGetAlphaCast" (formula "16") (term "0"))
                                                (rule "castedGetAny" (formula "16") (term "0"))
                                                 (builtin "One Step Simplification" (formula "16"))
                                                (rule "true_left" (formula "16"))
                                                (rule "allLeft" (formula "10") (inst "t=i_0"))
                                                (rule "applyEq" (formula "10") (term "0,0,1") (ifseqformula "45"))
                                                (rule "replace_known_right" (formula "10") (term "0,1") (ifseqformula "56"))
                                                 (builtin "One Step Simplification" (formula "10"))
                                                (rule "true_left" (formula "10"))
                                                (rule "allLeft" (formula "12") (inst "t=i_0"))
                                                (rule "applyEq" (formula "12") (term "0,0,1") (ifseqformula "45"))
                                                (rule "replace_known_right" (formula "12") (term "1") (ifseqformula "52"))
                                                 (builtin "One Step Simplification" (formula "12"))
                                                (rule "allLeft" (formula "24") (inst "t=i_0"))
                                                (rule "replace_known_left" (formula "24") (term "0,0,0") (ifseqformula "12"))
                                                 (builtin "One Step Simplification" (formula "24"))
                                                (rule "inEqSimp_commuteGeq" (formula "24") (term "1"))
                                                (rule "inEqSimp_contradInEq1" (formula "24") (term "0") (ifseqformula "41"))
                                                (rule "qeq_literals" (formula "24") (term "0,0"))
                                                 (builtin "One Step Simplification" (formula "24"))
                                                (rule "inEqSimp_contradInEq1" (formula "24") (ifseqformula "8"))
                                                (rule "andLeft" (formula "24"))
                                                (rule "inEqSimp_homoInEq1" (formula "24"))
                                                (rule "polySimp_pullOutFactor1b" (formula "24") (term "0"))
                                                (rule "add_literals" (formula "24") (term "1,1,0"))
                                                (rule "times_zero_1" (formula "24") (term "1,0"))
                                                (rule "add_literals" (formula "24") (term "0"))
                                                (rule "leq_literals" (formula "24"))
                                                (rule "closeFalse" (formula "24"))
                                             )
                                          )
                                       )
                                    )
                                 )
                              )
                           )
                        )
                        (branch
                           (rule "inEqSimp_ltToLeq" (formula "34") (term "0,0,0"))
                           (rule "polySimp_mulComm0" (formula "34") (term "1,0,0,0,0,0"))
                           (rule "inEqSimp_ltToLeq" (formula "57") (term "0,0,0"))
                           (rule "polySimp_mulComm0" (formula "57") (term "1,0,0,0,0,0"))
                           (rule "inEqSimp_ltToLeq" (formula "42") (term "0,0,0"))
                           (rule "polySimp_mulComm0" (formula "42") (term "1,0,0,0,0,0"))
                           (rule "inEqSimp_ltToLeq" (formula "57") (term "0,0,0,1,0,1,0"))
                           (rule "polySimp_mulComm0" (formula "57") (term "1,0,0,0,0,0,1,0,1,0"))
                           (rule "inEqSimp_ltToLeq" (formula "57") (term "1,0,0,0,1,0"))
                           (rule "polySimp_mulComm0" (formula "57") (term "1,0,0,1,0,0,0,1,0"))
                           (rule "inEqSimp_ltToLeq" (formula "70"))
                           (rule "polySimp_rightDist" (formula "70") (term "1,0,0"))
                           (rule "mul_literals" (formula "70") (term "0,1,0,0"))
                           (rule "polySimp_addAssoc" (formula "70") (term "0,0"))
                           (rule "add_literals" (formula "70") (term "0,0,0"))
                           (rule "add_zero_left" (formula "70") (term "0,0"))
                           (rule "polySimp_pullOutFactor2" (formula "70") (term "0"))
                           (rule "add_literals" (formula "70") (term "1,0"))
                           (rule "times_zero_1" (formula "70") (term "0"))
                           (rule "leq_literals" (formula "70"))
                           (rule "true_left" (formula "70"))
                           (rule "inEqSimp_ltToLeq" (formula "55") (term "0,0,0"))
                           (rule "polySimp_mulComm0" (formula "55") (term "1,0,0,0,0,0"))
                           (rule "inEqSimp_ltToLeq" (formula "15"))
                           (rule "polySimp_mulComm0" (formula "15") (term "1,0,0"))
                           (rule "polySimp_addComm1" (formula "15") (term "0"))
                           (rule "inEqSimp_sepPosMonomial0" (formula "34") (term "0,0,0"))
                           (rule "polySimp_mulComm0" (formula "34") (term "1,0,0,0"))
                           (rule "polySimp_rightDist" (formula "34") (term "1,0,0,0"))
                           (rule "mul_literals" (formula "34") (term "0,1,0,0,0"))
                           (rule "polySimp_mulLiterals" (formula "34") (term "1,1,0,0,0"))
                           (rule "polySimp_elimOne" (formula "34") (term "1,1,0,0,0"))
                           (rule "inEqSimp_sepPosMonomial0" (formula "57") (term "0,0,0"))
                           (rule "polySimp_mulComm0" (formula "57") (term "1,0,0,0"))
                           (rule "polySimp_rightDist" (formula "57") (term "1,0,0,0"))
                           (rule "polySimp_mulLiterals" (formula "57") (term "1,1,0,0,0"))
                           (rule "mul_literals" (formula "57") (term "0,1,0,0,0"))
                           (rule "polySimp_elimOne" (formula "57") (term "1,1,0,0,0"))
                           (rule "inEqSimp_sepPosMonomial0" (formula "42") (term "0,0,0"))
                           (rule "polySimp_mulComm0" (formula "42") (term "1,0,0,0"))
                           (rule "polySimp_rightDist" (formula "42") (term "1,0,0,0"))
                           (rule "mul_literals" (formula "42") (term "0,1,0,0,0"))
                           (rule "polySimp_mulLiterals" (formula "42") (term "1,1,0,0,0"))
                           (rule "polySimp_elimOne" (formula "42") (term "1,1,0,0,0"))
                           (rule "inEqSimp_sepPosMonomial0" (formula "57") (term "0,0,0,1,0,1,0"))
                           (rule "polySimp_mulComm0" (formula "57") (term "1,0,0,0,1,0,1,0"))
                           (rule "polySimp_rightDist" (formula "57") (term "1,0,0,0,1,0,1,0"))
                           (rule "polySimp_mulLiterals" (formula "57") (term "1,1,0,0,0,1,0,1,0"))
                           (rule "mul_literals" (formula "57") (term "0,1,0,0,0,1,0,1,0"))
                           (rule "polySimp_elimOne" (formula "57") (term "1,1,0,0,0,1,0,1,0"))
                           (rule "inEqSimp_sepPosMonomial0" (formula "57") (term "1,0,0,0,1,0"))
                           (rule "polySimp_mulComm0" (formula "57") (term "1,1,0,0,0,1,0"))
                           (rule "polySimp_rightDist" (formula "57") (term "1,1,0,0,0,1,0"))
                           (rule "polySimp_mulLiterals" (formula "57") (term "1,1,1,0,0,0,1,0"))
                           (rule "mul_literals" (formula "57") (term "0,1,1,0,0,0,1,0"))
                           (rule "polySimp_elimOne" (formula "57") (term "1,1,1,0,0,0,1,0"))
                           (rule "inEqSimp_sepPosMonomial0" (formula "55") (term "0,0,0"))
                           (rule "polySimp_mulComm0" (formula "55") (term "1,0,0,0"))
                           (rule "polySimp_rightDist" (formula "55") (term "1,0,0,0"))
                           (rule "mul_literals" (formula "55") (term "0,1,0,0,0"))
                           (rule "polySimp_mulLiterals" (formula "55") (term "1,1,0,0,0"))
                           (rule "polySimp_elimOne" (formula "55") (term "1,1,0,0,0"))
                           (rule "inEqSimp_sepNegMonomial0" (formula "15"))
                           (rule "polySimp_mulLiterals" (formula "15") (term "0"))
                           (rule "polySimp_elimOne" (formula "15") (term "0"))
                           (rule "inEqSimp_subsumption1" (formula "59") (ifseqformula "51"))
                           (rule "leq_literals" (formula "59") (term "0"))
                            (builtin "One Step Simplification" (formula "59"))
                           (rule "true_left" (formula "59"))
                           (rule "inEqSimp_subsumption1" (formula "46") (ifseqformula "47"))
                           (rule "leq_literals" (formula "46") (term "0"))
                            (builtin "One Step Simplification" (formula "46"))
                           (rule "true_left" (formula "46"))
                           (rule "inEqSimp_subsumption1" (formula "51") (ifseqformula "15"))
                           (rule "inEqSimp_homoInEq0" (formula "51") (term "0"))
                           (rule "polySimp_pullOutFactor1b" (formula "51") (term "0,0"))
                           (rule "add_literals" (formula "51") (term "1,1,0,0"))
                           (rule "times_zero_1" (formula "51") (term "1,0,0"))
                           (rule "add_zero_right" (formula "51") (term "0,0"))
                           (rule "qeq_literals" (formula "51") (term "0"))
                            (builtin "One Step Simplification" (formula "51"))
                           (rule "true_left" (formula "51"))
                           (rule "inEqSimp_exactShadow3" (formula "15") (ifseqformula "45"))
                           (rule "polySimp_rightDist" (formula "15") (term "0,0"))
                           (rule "mul_literals" (formula "15") (term "0,0,0"))
                           (rule "polySimp_addComm1" (formula "15") (term "0"))
                           (rule "add_literals" (formula "15") (term "0,0"))
                           (rule "inEqSimp_sepNegMonomial1" (formula "15"))
                           (rule "polySimp_mulLiterals" (formula "15") (term "0"))
                           (rule "polySimp_elimOne" (formula "15") (term "0"))
                           (rule "inEqSimp_subsumption0" (formula "57") (ifseqformula "15"))
                           (rule "leq_literals" (formula "57") (term "0"))
                            (builtin "One Step Simplification" (formula "57"))
                           (rule "true_left" (formula "57"))
                           (rule "nnf_imp2or" (formula "28") (term "0,0"))
                            (builtin "One Step Simplification" (formula "28"))
                           (rule "nnf_imp2or" (formula "2") (term "0,0,0"))
                           (rule "nnf_imp2or" (formula "30") (term "0,0,0"))
                           (rule "nnf_imp2or" (formula "27") (term "0,0,0"))
                           (rule "nnf_imp2or" (formula "6") (term "0,0,0"))
                           (rule "nnf_imp2or" (formula "23") (term "0,0,0"))
                           (rule "nnf_imp2or" (formula "9") (term "0,0,0"))
                           (rule "nnf_imp2or" (formula "18") (term "0,0,0"))
                           (rule "nnf_imp2or" (formula "3") (term "0,0,0"))
                           (rule "nnf_imp2or" (formula "26") (term "0,0,0"))
                           (rule "nnf_imp2or" (formula "1") (term "0,0,0"))
                           (rule "nnf_imp2or" (formula "8") (term "0,0,0"))
                           (rule "nnf_imp2or" (formula "21") (term "0,0,0"))
                           (rule "nnf_imp2or" (formula "20") (term "0,0,0"))
                           (rule "nnf_imp2or" (formula "25") (term "0,0,0"))
                           (rule "nnf_imp2or" (formula "4") (term "0,0,0"))
                           (rule "nnf_imp2or" (formula "24") (term "0,0,0"))
                           (rule "nnf_imp2or" (formula "5") (term "0,0,0"))
                           (rule "nnf_imp2or" (formula "19") (term "0,0,0"))
                           (rule "nnf_imp2or" (formula "22") (term "0,0,0"))
                           (rule "nnf_imp2or" (formula "29") (term "0,0,0"))
                           (rule "nnf_imp2or" (formula "10") (term "0,0,0"))
                           (rule "nnf_imp2or" (formula "7") (term "0,0,0"))
                           (rule "nnf_imp2or" (formula "35") (term "0"))
                           (rule "nnf_imp2or" (formula "43") (term "0"))
                           (rule "nnf_imp2or" (formula "56") (term "0"))
                           (rule "nnf_imp2or" (formula "54") (term "0"))
                           (rule "nnf_notAnd" (formula "2") (term "0,0,0,0"))
                            (builtin "One Step Simplification" (formula "2"))
                           (rule "nnf_notAnd" (formula "30") (term "0,0,0,0"))
                            (builtin "One Step Simplification" (formula "30"))
                           (rule "nnf_notAnd" (formula "27") (term "0,0,0,0"))
                            (builtin "One Step Simplification" (formula "27"))
                           (rule "nnf_notAnd" (formula "35") (term "0,0"))
                           (rule "inEqSimp_notLeq" (formula "35") (term "0,0,0"))
                           (rule "polySimp_rightDist" (formula "35") (term "1,0,0,0,0,0"))
                           (rule "mul_literals" (formula "35") (term "0,1,0,0,0,0,0"))
                           (rule "polySimp_addAssoc" (formula "35") (term "0,0,0,0,0"))
                           (rule "add_literals" (formula "35") (term "0,0,0,0,0,0"))
                           (rule "add_zero_left" (formula "35") (term "0,0,0,0,0"))
                           (rule "inEqSimp_sepPosMonomial1" (formula "35") (term "0,0,0"))
                           (rule "polySimp_mulLiterals" (formula "35") (term "1,0,0,0"))
                           (rule "polySimp_elimOne" (formula "35") (term "1,0,0,0"))
                           (rule "inEqSimp_notGeq" (formula "35") (term "1,0,0"))
                           (rule "mul_literals" (formula "35") (term "1,0,0,1,0,0"))
                           (rule "add_literals" (formula "35") (term "0,0,1,0,0"))
                           (rule "inEqSimp_sepPosMonomial0" (formula "35") (term "1,0,0"))
                           (rule "mul_literals" (formula "35") (term "1,1,0,0"))
                           (rule "nnf_notAnd" (formula "43") (term "0,0"))
                           (rule "inEqSimp_notGeq" (formula "43") (term "1,0,0"))
                           (rule "times_zero_1" (formula "43") (term "1,0,0,1,0,0"))
                           (rule "add_zero_right" (formula "43") (term "0,0,1,0,0"))
                           (rule "inEqSimp_sepPosMonomial0" (formula "43") (term "1,0,0"))
                           (rule "mul_literals" (formula "43") (term "1,1,0,0"))
                           (rule "inEqSimp_notLeq" (formula "43") (term "0,0,0"))
                           (rule "polySimp_rightDist" (formula "43") (term "1,0,0,0,0,0"))
                           (rule "mul_literals" (formula "43") (term "0,1,0,0,0,0,0"))
                           (rule "polySimp_addAssoc" (formula "43") (term "0,0,0,0,0"))
                           (rule "add_literals" (formula "43") (term "0,0,0,0,0,0"))
                           (rule "add_zero_left" (formula "43") (term "0,0,0,0,0"))
                           (rule "inEqSimp_sepPosMonomial1" (formula "43") (term "0,0,0"))
                           (rule "polySimp_mulLiterals" (formula "43") (term "1,0,0,0"))
                           (rule "polySimp_elimOne" (formula "43") (term "1,0,0,0"))
                           (rule "nnf_imp2or" (formula "6") (term "1,0,0,0"))
                           (rule "nnf_notAnd" (formula "6") (term "0,0,0,0"))
                            (builtin "One Step Simplification" (formula "6"))
                           (rule "nnf_notOr" (formula "56") (term "1,0"))
                           (rule "nnf_notAnd" (formula "56") (term "0,0"))
                           (rule "inEqSimp_notGeq" (formula "56") (term "1,0,0"))
                           (rule "mul_literals" (formula "56") (term "1,0,0,1,0,0"))
                           (rule "add_literals" (formula "56") (term "0,0,1,0,0"))
                           (rule "inEqSimp_sepPosMonomial0" (formula "56") (term "1,0,0"))
                           (rule "mul_literals" (formula "56") (term "1,1,0,0"))
                           (rule "inEqSimp_notLeq" (formula "56") (term "0,0,0"))
                           (rule "polySimp_rightDist" (formula "56") (term "1,0,0,0,0,0"))
                           (rule "mul_literals" (formula "56") (term "0,1,0,0,0,0,0"))
                           (rule "polySimp_addAssoc" (formula "56") (term "0,0,0,0,0"))
                           (rule "add_literals" (formula "56") (term "0,0,0,0,0,0"))
                           (rule "add_zero_left" (formula "56") (term "0,0,0,0,0"))
                           (rule "inEqSimp_sepPosMonomial1" (formula "56") (term "0,0,0"))
                           (rule "polySimp_mulLiterals" (formula "56") (term "1,0,0,0"))
                           (rule "polySimp_elimOne" (formula "56") (term "1,0,0,0"))
                           (rule "nnf_notAnd" (formula "23") (term "0,0,0,0"))
                            (builtin "One Step Simplification" (formula "23"))
                           (rule "nnf_notAnd" (formula "54") (term "0,0"))
                           (rule "inEqSimp_notGeq" (formula "54") (term "1,0,0"))
                           (rule "mul_literals" (formula "54") (term "1,0,0,1,0,0"))
                           (rule "add_zero_right" (formula "54") (term "0,0,1,0,0"))
                           (rule "inEqSimp_sepPosMonomial0" (formula "54") (term "1,0,0"))
                           (rule "mul_literals" (formula "54") (term "1,1,0,0"))
                           (rule "inEqSimp_notLeq" (formula "54") (term "0,0,0"))
                           (rule "polySimp_rightDist" (formula "54") (term "1,0,0,0,0,0"))
                           (rule "mul_literals" (formula "54") (term "0,1,0,0,0,0,0"))
                           (rule "polySimp_addAssoc" (formula "54") (term "0,0,0,0,0"))
                           (rule "add_literals" (formula "54") (term "0,0,0,0,0,0"))
                           (rule "add_zero_left" (formula "54") (term "0,0,0,0,0"))
                           (rule "inEqSimp_sepPosMonomial1" (formula "54") (term "0,0,0"))
                           (rule "polySimp_mulLiterals" (formula "54") (term "1,0,0,0"))
                           (rule "polySimp_elimOne" (formula "54") (term "1,0,0,0"))
                           (rule "nnf_imp2or" (formula "9") (term "1,0,0,0"))
                           (rule "nnf_notAnd" (formula "9") (term "0,0,0,0"))
                            (builtin "One Step Simplification" (formula "9"))
                           (rule "nnf_notAnd" (formula "18") (term "0,0,0,0"))
                            (builtin "One Step Simplification" (formula "18"))
                           (rule "nnf_notAnd" (formula "3") (term "0,0,0,0"))
                            (builtin "One Step Simplification" (formula "3"))
                           (rule "nnf_imp2or" (formula "26") (term "1,0,0,0"))
                           (rule "nnf_notAnd" (formula "26") (term "0,0,0,0"))
                            (builtin "One Step Simplification" (formula "26"))
                           (rule "nnf_notAnd" (formula "1") (term "0,0,0,0"))
                            (builtin "One Step Simplification" (formula "1"))
                           (rule "nnf_notAnd" (formula "8") (term "0,0,0,0"))
                            (builtin "One Step Simplification" (formula "8"))
                           (rule "nnf_imp2or" (formula "21") (term "1,0,0,0"))
                           (rule "nnf_notAnd" (formula "21") (term "0,0,0,0"))
                            (builtin "One Step Simplification" (formula "21"))
                           (rule "nnf_notAnd" (formula "20") (term "0,0,0,0"))
                            (builtin "One Step Simplification" (formula "20"))
                           (rule "nnf_imp2or" (formula "25") (term "1,0,0,0"))
                           (rule "nnf_notAnd" (formula "25") (term "0,0,0,0"))
                            (builtin "One Step Simplification" (formula "25"))
                           (rule "nnf_notAnd" (formula "4") (term "0,0,0,0"))
                            (builtin "One Step Simplification" (formula "4"))
                           (rule "nnf_notAnd" (formula "24") (term "0,0,0,0"))
                            (builtin "One Step Simplification" (formula "24"))
                           (rule "nnf_imp2or" (formula "5") (term "1,0,0,0"))
                           (rule "nnf_notAnd" (formula "5") (term "0,0,0,0"))
                            (builtin "One Step Simplification" (formula "5"))
                           (rule "nnf_imp2or" (formula "19") (term "1,0,0,0"))
                           (rule "nnf_notAnd" (formula "19") (term "0,0,0,0"))
                            (builtin "One Step Simplification" (formula "19"))
                           (rule "nnf_notAnd" (formula "22") (term "0,0,0,0"))
                            (builtin "One Step Simplification" (formula "22"))
                           (rule "nnf_imp2or" (formula "29") (term "1,0,0,0"))
                           (rule "nnf_notAnd" (formula "29") (term "0,0,0,0"))
                            (builtin "One Step Simplification" (formula "29"))
                           (rule "nnf_imp2or" (formula "10") (term "1,0,0,0"))
                           (rule "nnf_notAnd" (formula "10") (term "0,0,0,0"))
                            (builtin "One Step Simplification" (formula "10"))
                           (rule "nnf_imp2or" (formula "7") (term "1,0,0,0"))
                           (rule "nnf_notAnd" (formula "7") (term "0,0,0,0"))
                            (builtin "One Step Simplification" (formula "7"))
                           (rule "nnf_imp2or" (formula "2") (term "1,0,0,0"))
                           (rule "nnf_imp2or" (formula "30") (term "1,0,0,0"))
                           (rule "nnf_imp2or" (formula "27") (term "1,0,0,0"))
                           (rule "nnf_notOr" (formula "2") (term "0,0,0,0,0"))
                           (rule "nnf_notOr" (formula "30") (term "1,0,0,0,0"))
                           (rule "nnf_notOr" (formula "27") (term "1,0,0,0,0"))
                           (rule "nnf_notAnd" (formula "56") (term "0,1,0"))
                           (rule "inEqSimp_notGeq" (formula "56") (term "1,0,1,0"))
                           (rule "mul_literals" (formula "56") (term "1,0,0,1,0,1,0"))
                           (rule "add_literals" (formula "56") (term "0,0,1,0,1,0"))
                           (rule "inEqSimp_sepPosMonomial0" (formula "56") (term "1,0,1,0"))
                           (rule "mul_literals" (formula "56") (term "1,1,0,1,0"))
                           (rule "nnf_notAnd" (formula "56") (term "1,1,0"))
                            (builtin "One Step Simplification" (formula "56"))
                           (rule "nnf_notOr" (formula "6") (term "1,0,0,0,0"))
                           (rule "nnf_imp2or" (formula "23") (term "1,0,0,0"))
                           (rule "nnf_notOr" (formula "23") (term "1,0,0,0,0"))
                           (rule "nnf_imp2or" (formula "18") (term "1,0,0,0"))
                           (rule "nnf_imp2or" (formula "3") (term "1,0,0,0"))
                           (rule "nnf_imp2or" (formula "1") (term "1,0,0,0"))
                           (rule "nnf_notOr" (formula "9") (term "1,0,0,0,0"))
                           (rule "nnf_imp2or" (formula "8") (term "1,0,0,0"))
                           (rule "nnf_notOr" (formula "18") (term "1,0,0,0,0"))
                           (rule "Static_class_invariant_axiom_for_org_apache_commons_csv_CSVFormat" (formula "81"))
                           (rule "notRight" (formula "81"))
                           (rule "pullOutSelect" (formula "1") (term "0") (inst "selectSK=org_apache_commons_csv_CSVFormat_RFC4180_1"))
                           (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "65"))
                            (builtin "One Step Simplification" (formula "1"))
                           (rule "elementOfSingleton" (formula "1") (term "0,0"))
                            (builtin "One Step Simplification" (formula "1"))
                           (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "60"))
                            (builtin "One Step Simplification" (formula "1"))
                           (rule "replaceKnownSelect_taclet100_8" (formula "1") (term "0"))
                           (rule "replaceKnownAuxiliaryConstant_taclet100_11" (formula "1") (term "0"))
                           (rule "applyEqReverse" (formula "2") (term "0") (ifseqformula "1"))
                           (rule "close" (formula "80") (ifseqformula "2"))
                        )
                     )
                     (branch "Case 2"
                        (rule "selectCreatedOfAnonAsFormulaEQ" (formula "85") (term "0,1,1,0,0,0") (ifseqformula "44"))
                        (rule "selectCreatedOfAnonAsFormulaEQ" (formula "85") (term "0,0,1,1,0,0,0") (ifseqformula "37"))
                        (rule "allRight" (formula "85") (inst "sk=f_0"))
                        (rule "allRight" (formula "85") (inst "sk=o_0"))
                        (rule "orRight" (formula "85"))
                        (rule "orRight" (formula "85"))
                        (rule "inEqSimp_ltToLeq" (formula "42") (term "0,0,0"))
                        (rule "polySimp_mulComm0" (formula "42") (term "1,0,0,0,0,0"))
                        (rule "inEqSimp_ltToLeq" (formula "70"))
                        (rule "polySimp_rightDist" (formula "70") (term "1,0,0"))
                        (rule "mul_literals" (formula "70") (term "0,1,0,0"))
                        (rule "polySimp_addAssoc" (formula "70") (term "0,0"))
                        (rule "add_literals" (formula "70") (term "0,0,0"))
                        (rule "add_zero_left" (formula "70") (term "0,0"))
                        (rule "polySimp_pullOutFactor2" (formula "70") (term "0"))
                        (rule "add_literals" (formula "70") (term "1,0"))
                        (rule "times_zero_1" (formula "70") (term "0"))
                        (rule "leq_literals" (formula "70"))
                        (rule "true_left" (formula "70"))
                        (rule "inEqSimp_ltToLeq" (formula "57") (term "1,0,0,0,1,0"))
                        (rule "polySimp_mulComm0" (formula "57") (term "1,0,0,1,0,0,0,1,0"))
                        (rule "inEqSimp_ltToLeq" (formula "57") (term "0,0,0"))
                        (rule "polySimp_mulComm0" (formula "57") (term "1,0,0,0,0,0"))
                        (rule "inEqSimp_ltToLeq" (formula "55") (term "0,0,0"))
                        (rule "polySimp_mulComm0" (formula "55") (term "1,0,0,0,0,0"))
                        (rule "inEqSimp_ltToLeq" (formula "57") (term "0,0,0,1,0,1,0"))
                        (rule "polySimp_mulComm0" (formula "57") (term "1,0,0,0,0,0,1,0,1,0"))
                        (rule "inEqSimp_ltToLeq" (formula "34") (term "0,0,0"))
                        (rule "polySimp_mulComm0" (formula "34") (term "1,0,0,0,0,0"))
                        (rule "inEqSimp_ltToLeq" (formula "15"))
                        (rule "polySimp_mulComm0" (formula "15") (term "1,0,0"))
                        (rule "polySimp_addComm1" (formula "15") (term "0"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "42") (term "0,0,0"))
                        (rule "polySimp_mulComm0" (formula "42") (term "1,0,0,0"))
                        (rule "polySimp_rightDist" (formula "42") (term "1,0,0,0"))
                        (rule "polySimp_mulLiterals" (formula "42") (term "1,1,0,0,0"))
                        (rule "mul_literals" (formula "42") (term "0,1,0,0,0"))
                        (rule "polySimp_elimOne" (formula "42") (term "1,1,0,0,0"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "57") (term "1,0,0,0,1,0"))
                        (rule "polySimp_mulComm0" (formula "57") (term "1,1,0,0,0,1,0"))
                        (rule "polySimp_rightDist" (formula "57") (term "1,1,0,0,0,1,0"))
                        (rule "mul_literals" (formula "57") (term "0,1,1,0,0,0,1,0"))
                        (rule "polySimp_mulLiterals" (formula "57") (term "1,1,1,0,0,0,1,0"))
                        (rule "polySimp_elimOne" (formula "57") (term "1,1,1,0,0,0,1,0"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "57") (term "0,0,0"))
                        (rule "polySimp_mulComm0" (formula "57") (term "1,0,0,0"))
                        (rule "polySimp_rightDist" (formula "57") (term "1,0,0,0"))
                        (rule "mul_literals" (formula "57") (term "0,1,0,0,0"))
                        (rule "polySimp_mulLiterals" (formula "57") (term "1,1,0,0,0"))
                        (rule "polySimp_elimOne" (formula "57") (term "1,1,0,0,0"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "55") (term "0,0,0"))
                        (rule "polySimp_mulComm0" (formula "55") (term "1,0,0,0"))
                        (rule "polySimp_rightDist" (formula "55") (term "1,0,0,0"))
                        (rule "mul_literals" (formula "55") (term "0,1,0,0,0"))
                        (rule "polySimp_mulLiterals" (formula "55") (term "1,1,0,0,0"))
                        (rule "polySimp_elimOne" (formula "55") (term "1,1,0,0,0"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "57") (term "0,0,0,1,0,1,0"))
                        (rule "polySimp_mulComm0" (formula "57") (term "1,0,0,0,1,0,1,0"))
                        (rule "polySimp_rightDist" (formula "57") (term "1,0,0,0,1,0,1,0"))
                        (rule "mul_literals" (formula "57") (term "0,1,0,0,0,1,0,1,0"))
                        (rule "polySimp_mulLiterals" (formula "57") (term "1,1,0,0,0,1,0,1,0"))
                        (rule "polySimp_elimOne" (formula "57") (term "1,1,0,0,0,1,0,1,0"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "34") (term "0,0,0"))
                        (rule "polySimp_mulComm0" (formula "34") (term "1,0,0,0"))
                        (rule "polySimp_rightDist" (formula "34") (term "1,0,0,0"))
                        (rule "mul_literals" (formula "34") (term "0,1,0,0,0"))
                        (rule "polySimp_mulLiterals" (formula "34") (term "1,1,0,0,0"))
                        (rule "polySimp_elimOne" (formula "34") (term "1,1,0,0,0"))
                        (rule "inEqSimp_sepNegMonomial0" (formula "15"))
                        (rule "polySimp_mulLiterals" (formula "15") (term "0"))
                        (rule "polySimp_elimOne" (formula "15") (term "0"))
                        (rule "inEqSimp_subsumption1" (formula "52") (ifseqformula "15"))
                        (rule "inEqSimp_homoInEq0" (formula "52") (term "0"))
                        (rule "polySimp_pullOutFactor1b" (formula "52") (term "0,0"))
                        (rule "add_literals" (formula "52") (term "1,1,0,0"))
                        (rule "times_zero_1" (formula "52") (term "1,0,0"))
                        (rule "add_literals" (formula "52") (term "0,0"))
                        (rule "qeq_literals" (formula "52") (term "0"))
                         (builtin "One Step Simplification" (formula "52"))
                        (rule "true_left" (formula "52"))
                        (rule "inEqSimp_subsumption1" (formula "58") (ifseqformula "51"))
                        (rule "leq_literals" (formula "58") (term "0"))
                         (builtin "One Step Simplification" (formula "58"))
                        (rule "true_left" (formula "58"))
                        (rule "inEqSimp_subsumption1" (formula "46") (ifseqformula "47"))
                        (rule "leq_literals" (formula "46") (term "0"))
                         (builtin "One Step Simplification" (formula "46"))
                        (rule "true_left" (formula "46"))
                        (rule "pullOutSelect" (formula "83") (term "1") (inst "selectSK=f_0_0"))
                        (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "64"))
                         (builtin "One Step Simplification" (formula "1"))
                        (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,1,1,0,0") (ifseqformula "59"))
                         (builtin "One Step Simplification" (formula "1"))
                        (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,0,0,1,1,0,0") (ifseqformula "45"))
                        (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,0,0,0,1,1,0,0") (ifseqformula "38"))
                        (rule "elementOfSingleton" (formula "1") (term "0,0,0,0"))
                        (rule "replace_known_right" (formula "1") (term "0,0,0,0") (ifseqformula "82"))
                         (builtin "One Step Simplification" (formula "1"))
                        (rule "pullOutSelect" (formula "84") (term "0") (inst "selectSK=f_0_1"))
                        (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "46"))
                         (builtin "One Step Simplification" (formula "1"))
                        (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,1,0,0") (ifseqformula "39"))
                        (rule "pullOutSelect" (formula "2") (term "2,0") (inst "selectSK=f_0_2"))
                        (rule "simplifySelectOfAnonEQ" (formula "2") (ifseqformula "61"))
                         (builtin "One Step Simplification" (formula "2"))
                        (rule "selectCreatedOfAnonAsFormulaEQ" (formula "2") (term "0,0,1,0,0") (ifseqformula "47"))
                        (rule "selectCreatedOfAnonAsFormulaEQ" (formula "2") (term "0,0,0,1,0,0") (ifseqformula "40"))
                        (rule "pullOutSelect" (formula "1") (term "2,0") (inst "selectSK=f_0_3"))
                        (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "41"))
                         (builtin "One Step Simplification" (formula "1"))
                        (rule "inEqSimp_exactShadow3" (formula "19") (ifseqformula "49"))
                        (rule "polySimp_rightDist" (formula "19") (term "0,0"))
                        (rule "mul_literals" (formula "19") (term "0,0,0"))
                        (rule "polySimp_addComm1" (formula "19") (term "0"))
                        (rule "add_literals" (formula "19") (term "0,0"))
                        (rule "inEqSimp_sepNegMonomial1" (formula "19"))
                        (rule "polySimp_mulLiterals" (formula "19") (term "0"))
                        (rule "polySimp_elimOne" (formula "19") (term "0"))
                        (rule "inEqSimp_subsumption0" (formula "61") (ifseqformula "19"))
                        (rule "leq_literals" (formula "61") (term "0"))
                         (builtin "One Step Simplification" (formula "61"))
                        (rule "true_left" (formula "61"))
                        (rule "pullOutSelect" (formula "3") (term "2,0") (inst "selectSK=f_0_4"))
                        (rule "simplifySelectOfAnon" (formula "3"))
                         (builtin "One Step Simplification" (formula "3"))
                        (rule "replaceKnownSelect_taclet10000100_19" (formula "3") (term "2,0"))
                        (rule "selectCreatedOfAnonAsFormulaEQ" (formula "3") (term "0,1,1,0,0") (ifseqformula "50"))
                        (rule "selectCreatedOfAnonAsFormulaEQ" (formula "3") (term "0,0,1,1,0,0") (ifseqformula "43"))
                        (rule "replace_known_right" (formula "3") (term "1,0,0") (ifseqformula "87"))
                         (builtin "One Step Simplification" (formula "3"))
                        (rule "elementOfSingleton" (formula "3") (term "0,0,0"))
                        (rule "replace_known_right" (formula "3") (term "0,0,0") (ifseqformula "86"))
                         (builtin "One Step Simplification" (formula "3"))
                        (rule "applyEqReverse" (formula "4") (term "2,0") (ifseqformula "3"))
                        (rule "hideAuxiliaryEq" (formula "3"))
                        (rule "nnf_imp2or" (formula "32") (term "0,0"))
                         (builtin "One Step Simplification" (formula "32"))
                        (rule "nnf_imp2or" (formula "5") (term "0,0,0"))
                        (rule "nnf_imp2or" (formula "7") (term "0,0,0"))
                        (rule "nnf_imp2or" (formula "27") (term "0,0,0"))
                        (rule "nnf_imp2or" (formula "28") (term "0,0,0"))
                        (rule "nnf_imp2or" (formula "30") (term "0,0,0"))
                        (rule "nnf_imp2or" (formula "14") (term "0,0,0"))
                        (rule "nnf_imp2or" (formula "24") (term "0,0,0"))
                        (rule "nnf_imp2or" (formula "22") (term "0,0,0"))
                        (rule "nnf_imp2or" (formula "34") (term "0,0,0"))
                        (rule "nnf_imp2or" (formula "33") (term "0,0,0"))
                        (rule "nnf_imp2or" (formula "12") (term "0,0,0"))
                        (rule "nnf_imp2or" (formula "6") (term "0,0,0"))
                        (rule "nnf_imp2or" (formula "31") (term "0,0,0"))
                        (rule "nnf_imp2or" (formula "8") (term "0,0,0"))
                        (rule "nnf_imp2or" (formula "25") (term "0,0,0"))
                        (rule "nnf_imp2or" (formula "29") (term "0,0,0"))
                        (rule "nnf_imp2or" (formula "26") (term "0,0,0"))
                        (rule "nnf_imp2or" (formula "11") (term "0,0,0"))
                        (rule "nnf_imp2or" (formula "23") (term "0,0,0"))
                        (rule "nnf_imp2or" (formula "10") (term "0,0,0"))
                        (rule "nnf_imp2or" (formula "13") (term "0,0,0"))
                        (rule "nnf_imp2or" (formula "9") (term "0,0,0"))
                        (rule "nnf_imp2or" (formula "47") (term "0"))
                        (rule "nnf_imp2or" (formula "58") (term "0"))
                        (rule "nnf_imp2or" (formula "60") (term "0"))
                        (rule "nnf_imp2or" (formula "39") (term "0"))
                        (rule "nnf_notAnd" (formula "5") (term "0,0,0,0"))
                         (builtin "One Step Simplification" (formula "5"))
                        (rule "nnf_notAnd" (formula "7") (term "0,0,0,0"))
                         (builtin "One Step Simplification" (formula "7"))
                        (rule "nnf_notAnd" (formula "27") (term "0,0,0,0"))
                         (builtin "One Step Simplification" (formula "27"))
                        (rule "nnf_notAnd" (formula "47") (term "0,0"))
                        (rule "inEqSimp_notGeq" (formula "47") (term "1,0,0"))
                        (rule "times_zero_1" (formula "47") (term "1,0,0,1,0,0"))
                        (rule "add_zero_right" (formula "47") (term "0,0,1,0,0"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "47") (term "1,0,0"))
                        (rule "mul_literals" (formula "47") (term "1,1,0,0"))
                        (rule "inEqSimp_notLeq" (formula "47") (term "0,0,0"))
                        (rule "polySimp_rightDist" (formula "47") (term "1,0,0,0,0,0"))
                        (rule "mul_literals" (formula "47") (term "0,1,0,0,0,0,0"))
                        (rule "polySimp_addAssoc" (formula "47") (term "0,0,0,0,0"))
                        (rule "add_literals" (formula "47") (term "0,0,0,0,0,0"))
                        (rule "add_zero_left" (formula "47") (term "0,0,0,0,0"))
                        (rule "inEqSimp_sepPosMonomial1" (formula "47") (term "0,0,0"))
                        (rule "polySimp_mulLiterals" (formula "47") (term "1,0,0,0"))
                        (rule "polySimp_elimOne" (formula "47") (term "1,0,0,0"))
                        (rule "nnf_notAnd" (formula "58") (term "0,0"))
                        (rule "inEqSimp_notGeq" (formula "58") (term "1,0,0"))
                        (rule "times_zero_1" (formula "58") (term "1,0,0,1,0,0"))
                        (rule "add_zero_right" (formula "58") (term "0,0,1,0,0"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "58") (term "1,0,0"))
                        (rule "mul_literals" (formula "58") (term "1,1,0,0"))
                        (rule "inEqSimp_notLeq" (formula "58") (term "0,0,0"))
                        (rule "polySimp_rightDist" (formula "58") (term "1,0,0,0,0,0"))
                        (rule "mul_literals" (formula "58") (term "0,1,0,0,0,0,0"))
                        (rule "polySimp_addAssoc" (formula "58") (term "0,0,0,0,0"))
                        (rule "add_literals" (formula "58") (term "0,0,0,0,0,0"))
                        (rule "add_zero_left" (formula "58") (term "0,0,0,0,0"))
                        (rule "inEqSimp_sepPosMonomial1" (formula "58") (term "0,0,0"))
                        (rule "polySimp_mulLiterals" (formula "58") (term "1,0,0,0"))
                        (rule "polySimp_elimOne" (formula "58") (term "1,0,0,0"))
                        (rule "nnf_notAnd" (formula "28") (term "0,0,0,0"))
                         (builtin "One Step Simplification" (formula "28"))
                        (rule "nnf_notOr" (formula "60") (term "1,0"))
                        (rule "nnf_notAnd" (formula "60") (term "0,0"))
                        (rule "inEqSimp_notLeq" (formula "60") (term "0,0,0"))
                        (rule "polySimp_rightDist" (formula "60") (term "1,0,0,0,0,0"))
                        (rule "mul_literals" (formula "60") (term "0,1,0,0,0,0,0"))
                        (rule "polySimp_addAssoc" (formula "60") (term "0,0,0,0,0"))
                        (rule "add_literals" (formula "60") (term "0,0,0,0,0,0"))
                        (rule "add_zero_left" (formula "60") (term "0,0,0,0,0"))
                        (rule "inEqSimp_sepPosMonomial1" (formula "60") (term "0,0,0"))
                        (rule "polySimp_mulLiterals" (formula "60") (term "1,0,0,0"))
                        (rule "polySimp_elimOne" (formula "60") (term "1,0,0,0"))
                        (rule "inEqSimp_notGeq" (formula "60") (term "1,0,0"))
                        (rule "times_zero_1" (formula "60") (term "1,0,0,1,0,0"))
                        (rule "add_zero_right" (formula "60") (term "0,0,1,0,0"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "60") (term "1,0,0"))
                        (rule "mul_literals" (formula "60") (term "1,1,0,0"))
                        (rule "nnf_imp2or" (formula "30") (term "1,0,0,0"))
                        (rule "nnf_notAnd" (formula "30") (term "0,0,0,0"))
                         (builtin "One Step Simplification" (formula "30"))
                        (rule "nnf_notAnd" (formula "14") (term "0,0,0,0"))
                         (builtin "One Step Simplification" (formula "14"))
                        (rule "nnf_notAnd" (formula "39") (term "0,0"))
                        (rule "inEqSimp_notLeq" (formula "39") (term "0,0,0"))
                        (rule "polySimp_rightDist" (formula "39") (term "1,0,0,0,0,0"))
                        (rule "mul_literals" (formula "39") (term "0,1,0,0,0,0,0"))
                        (rule "polySimp_addAssoc" (formula "39") (term "0,0,0,0,0"))
                        (rule "add_literals" (formula "39") (term "0,0,0,0,0,0"))
                        (rule "add_zero_left" (formula "39") (term "0,0,0,0,0"))
                        (rule "inEqSimp_sepPosMonomial1" (formula "39") (term "0,0,0"))
                        (rule "polySimp_mulLiterals" (formula "39") (term "1,0,0,0"))
                        (rule "polySimp_elimOne" (formula "39") (term "1,0,0,0"))
                        (rule "inEqSimp_notGeq" (formula "39") (term "1,0,0"))
                        (rule "mul_literals" (formula "39") (term "1,0,0,1,0,0"))
                        (rule "add_literals" (formula "39") (term "0,0,1,0,0"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "39") (term "1,0,0"))
                        (rule "mul_literals" (formula "39") (term "1,1,0,0"))
                        (rule "nnf_notAnd" (formula "24") (term "0,0,0,0"))
                         (builtin "One Step Simplification" (formula "24"))
                        (rule "nnf_imp2or" (formula "22") (term "1,0,0,0"))
                        (rule "nnf_notAnd" (formula "22") (term "0,0,0,0"))
                         (builtin "One Step Simplification" (formula "22"))
                        (rule "nnf_notAnd" (formula "34") (term "0,0,0,0"))
                         (builtin "One Step Simplification" (formula "34"))
                        (rule "nnf_imp2or" (formula "33") (term "1,0,0,0"))
                        (rule "nnf_notAnd" (formula "33") (term "0,0,0,0"))
                         (builtin "One Step Simplification" (formula "33"))
                        (rule "nnf_imp2or" (formula "12") (term "1,0,0,0"))
                        (rule "nnf_notAnd" (formula "12") (term "0,0,0,0"))
                         (builtin "One Step Simplification" (formula "12"))
                        (rule "nnf_notAnd" (formula "6") (term "0,0,0,0"))
                         (builtin "One Step Simplification" (formula "6"))
                        (rule "nnf_imp2or" (formula "31") (term "1,0,0,0"))
                        (rule "nnf_notAnd" (formula "31") (term "0,0,0,0"))
                         (builtin "One Step Simplification" (formula "31"))
                        (rule "nnf_imp2or" (formula "8") (term "1,0,0,0"))
                        (rule "nnf_notAnd" (formula "8") (term "0,0,0,0"))
                         (builtin "One Step Simplification" (formula "8"))
                        (rule "nnf_imp2or" (formula "25") (term "1,0,0,0"))
                        (rule "nnf_notAnd" (formula "25") (term "0,0,0,0"))
                         (builtin "One Step Simplification" (formula "25"))
                        (rule "nnf_imp2or" (formula "29") (term "1,0,0,0"))
                        (rule "nnf_notAnd" (formula "29") (term "0,0,0,0"))
                         (builtin "One Step Simplification" (formula "29"))
                        (rule "nnf_imp2or" (formula "26") (term "1,0,0,0"))
                        (rule "nnf_notAnd" (formula "26") (term "0,0,0,0"))
                         (builtin "One Step Simplification" (formula "26"))
                        (rule "nnf_imp2or" (formula "11") (term "1,0,0,0"))
                        (rule "nnf_notAnd" (formula "11") (term "0,0,0,0"))
                         (builtin "One Step Simplification" (formula "11"))
                        (rule "nnf_notAnd" (formula "23") (term "0,0,0,0"))
                         (builtin "One Step Simplification" (formula "23"))
                        (rule "nnf_notAnd" (formula "10") (term "0,0,0,0"))
                         (builtin "One Step Simplification" (formula "10"))
                        (rule "nnf_notAnd" (formula "13") (term "0,0,0,0"))
                         (builtin "One Step Simplification" (formula "13"))
                        (rule "nnf_imp2or" (formula "9") (term "1,0,0,0"))
                        (rule "nnf_notAnd" (formula "9") (term "0,0,0,0"))
                         (builtin "One Step Simplification" (formula "9"))
                        (rule "nnf_imp2or" (formula "5") (term "1,0,0,0"))
                        (rule "nnf_imp2or" (formula "7") (term "1,0,0,0"))
                        (rule "nnf_imp2or" (formula "27") (term "1,0,0,0"))
                        (rule "nnf_notOr" (formula "5") (term "0,0,0,0,0"))
                        (rule "nnf_notOr" (formula "7") (term "1,0,0,0,0"))
                        (rule "nnf_notOr" (formula "27") (term "1,0,0,0,0"))
                        (rule "nnf_notAnd" (formula "60") (term "1,1,0"))
                         (builtin "One Step Simplification" (formula "60"))
                        (rule "nnf_imp2or" (formula "28") (term "1,0,0,0"))
                        (rule "nnf_notOr" (formula "28") (term "1,0,0,0,0"))
                        (rule "nnf_imp2or" (formula "14") (term "1,0,0,0"))
                        (rule "nnf_notOr" (formula "30") (term "1,0,0,0,0"))
                        (rule "nnf_notOr" (formula "14") (term "1,0,0,0,0"))
                        (rule "nnf_imp2or" (formula "24") (term "1,0,0,0"))
                        (rule "nnf_imp2or" (formula "34") (term "1,0,0,0"))
                        (rule "nnf_notOr" (formula "24") (term "1,0,0,0,0"))
                        (rule "nnf_notOr" (formula "22") (term "1,0,0,0,0"))
                        (rule "nnf_imp2or" (formula "6") (term "1,0,0,0"))
                        (rule "nnf_notOr" (formula "34") (term "1,0,0,0,0"))
                        (rule "commute_and" (formula "85"))
                        (rule "nnf_notOr" (formula "33") (term "1,0,0,0,0"))
                        (rule "nnf_notOr" (formula "12") (term "1,0,0,0,0"))
                        (rule "nnf_notOr" (formula "6") (term "0,0,0,0,0"))
                        (rule "nnf_notOr" (formula "31") (term "1,0,0,0,0"))
                        (rule "nnf_notOr" (formula "8") (term "1,0,0,0,0"))
                        (rule "nnf_notOr" (formula "25") (term "1,0,0,0,0"))
                        (rule "nnf_imp2or" (formula "23") (term "1,0,0,0"))
                        (rule "nnf_imp2or" (formula "10") (term "1,0,0,0"))
                        (rule "nnf_notOr" (formula "29") (term "1,0,0,0,0"))
                        (rule "nnf_imp2or" (formula "13") (term "1,0,0,0"))
                        (rule "nnf_notAnd" (formula "60") (term "0,1,0"))
                        (rule "inEqSimp_notGeq" (formula "60") (term "1,0,1,0"))
                        (rule "mul_literals" (formula "60") (term "1,0,0,1,0,1,0"))
                        (rule "add_literals" (formula "60") (term "0,0,1,0,1,0"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "60") (term "1,0,1,0"))
                        (rule "mul_literals" (formula "60") (term "1,1,0,1,0"))
                        (rule "nnf_notOr" (formula "26") (term "1,0,0,0,0"))
                        (rule "nnf_notOr" (formula "11") (term "1,0,0,0,0"))
                        (rule "nnf_notOr" (formula "23") (term "1,0,0,0,0"))
                        (rule "nnf_notOr" (formula "10") (term "1,0,0,0,0"))
                        (rule "nnf_notOr" (formula "13") (term "1,0,0,0,0"))
                        (rule "nnf_notOr" (formula "9") (term "1,0,0,0,0"))
                        (rule "nnf_notOr" (formula "5") (term "0,0,0,0,0,0"))
                        (rule "nnf_notOr" (formula "27") (term "0,1,0,0,0,0"))
                        (rule "nnf_notAnd" (formula "60") (term "0,0,1,0"))
                        (rule "inEqSimp_notLeq" (formula "60") (term "1,0,0,1,0"))
                        (rule "polySimp_rightDist" (formula "60") (term "1,0,0,1,0,0,1,0"))
                        (rule "mul_literals" (formula "60") (term "0,1,0,0,1,0,0,1,0"))
                        (rule "polySimp_addAssoc" (formula "60") (term "0,0,1,0,0,1,0"))
                        (rule "add_literals" (formula "60") (term "0,0,0,1,0,0,1,0"))
                        (rule "add_zero_left" (formula "60") (term "0,0,1,0,0,1,0"))
                        (rule "inEqSimp_sepPosMonomial1" (formula "60") (term "1,0,0,1,0"))
                        (rule "polySimp_mulLiterals" (formula "60") (term "1,1,0,0,1,0"))
                        (rule "polySimp_elimOne" (formula "60") (term "1,1,0,0,1,0"))
                        (rule "nnf_notOr" (formula "22") (term "0,1,0,0,0,0"))
                        (rule "nnf_notOr" (formula "12") (term "0,1,0,0,0,0"))
                        (rule "nnf_notOr" (formula "6") (term "0,0,0,0,0,0"))
                        (rule "nnf_notOr" (formula "26") (term "0,1,0,0,0,0"))
                        (rule "nnf_notOr" (formula "11") (term "0,1,0,0,0,0"))
                        (rule "nnf_notOr" (formula "23") (term "0,1,0,0,0,0"))
                        (rule "nnf_notOr" (formula "5") (term "0,0,0,0,0,0,0"))
                        (rule "nnf_notOr" (formula "22") (term "0,0,1,0,0,0,0"))
                        (rule "nnf_notOr" (formula "12") (term "0,0,1,0,0,0,0"))
                        (rule "nnf_notOr" (formula "6") (term "0,0,0,0,0,0,0"))
                        (rule "nnf_notOr" (formula "11") (term "0,0,1,0,0,0,0"))
                        (rule "nnf_notOr" (formula "23") (term "0,0,1,0,0,0,0"))
                        (rule "nnf_notOr" (formula "5") (term "1,0,0,0,0,0,0,0"))
                        (rule "nnf_notOr" (formula "12") (term "0,0,0,1,0,0,0,0"))
                        (rule "nnf_notOr" (formula "6") (term "1,0,0,0,0,0,0,0"))
                        (rule "nnf_notOr" (formula "11") (term "0,0,0,1,0,0,0,0"))
                        (rule "nnf_notOr" (formula "5") (term "0,1,0,0,0,0,0,0,0"))
                        (rule "commute_or_2" (formula "3") (term "0,1,0,0"))
                        (rule "nnf_notOr" (formula "6") (term "0,1,0,0,0,0,0,0,0"))
                        (rule "commute_or_2" (formula "4") (term "0,0,1,0,0"))
                        (rule "commute_or_2" (formula "47") (term "0"))
                        (rule "commute_or_2" (formula "58") (term "0"))
                        (rule "cnf_rightDist" (formula "32") (term "0,0"))
                        (rule "commute_or_2" (formula "39") (term "0"))
                        (rule "ifthenelse_split" (formula "57") (term "0"))
                        (branch "result_46 = ls TRUE"
                           (rule "applyEqReverse" (formula "59") (term "0,0,0,1,0,0") (ifseqformula "58"))
                           (rule "applyEqReverse" (formula "66") (term "0,0") (ifseqformula "58"))
                           (rule "applyEqReverse" (formula "56") (term "0,0") (ifseqformula "58"))
                           (rule "hideAuxiliaryEq" (formula "58"))
                           (rule "applyEq" (formula "60") (term "1,0,0,0,0,0,0,1,0") (ifseqformula "57"))
                           (rule "applyEq" (formula "60") (term "1,0,1,0,0,0") (ifseqformula "57"))
                           (rule "applyEq" (formula "60") (term "1,0,1,1,0,0,1,0") (ifseqformula "57"))
                           (rule "applyEq" (formula "44") (term "1,0") (ifseqformula "57"))
                           (rule "applyEq" (formula "71") (term "1,0,0") (ifseqformula "57"))
                           (rule "applyEq" (formula "59") (term "1,0,0") (ifseqformula "57"))
                           (rule "applyEq" (formula "73") (term "1,0") (ifseqformula "57"))
                           (rule "close" (formula "73") (ifseqformula "37"))
                        )
                        (branch "result_46 = ls FALSE"
                           (rule "applyEqReverse" (formula "58") (term "0,0,0,1,0,0") (ifseqformula "57"))
                           (rule "applyEqReverse" (formula "56") (term "0,0") (ifseqformula "57"))
                           (rule "applyEqReverse" (formula "63") (term "0,0") (ifseqformula "56"))
                           (rule "hideAuxiliaryEq" (formula "56"))
                           (rule "commute_or" (formula "30") (term "1,0,0,0"))
                           (rule "distr_forallAnd" (formula "32") (term "0"))
                           (rule "distr_forallAnd" (formula "32"))
                           (rule "andLeft" (formula "32"))
                           (rule "commute_or" (formula "22") (term "1,0,0,0"))
                           (rule "commute_or" (formula "34") (term "1,0,0,0"))
                           (rule "commute_or" (formula "58") (term "0,0"))
                           (rule "commute_or" (formula "12") (term "1,0,0,0"))
                           (rule "commute_or" (formula "31") (term "1,0,0,0"))
                           (rule "commute_or" (formula "8") (term "1,0,0,0"))
                           (rule "commute_or" (formula "25") (term "1,0,0,0"))
                           (rule "commute_or" (formula "29") (term "1,0,0,0"))
                           (rule "commute_or_2" (formula "7") (term "0,0,0"))
                           (rule "commute_or" (formula "26") (term "1,0,0,0"))
                           (rule "commute_or" (formula "58") (term "1,1,0"))
                           (rule "commute_or_2" (formula "28") (term "0,0,0"))
                           (rule "cut_direct" (formula "62") (term "0,0,0,0"))
                           (branch "CUT: result_48.<created> = TRUE TRUE"
                               (builtin "One Step Simplification" (formula "63"))
                              (rule "true_left" (formula "63"))
                              (rule "seqGetAlphaCast" (formula "69") (term "0"))
                              (rule "castDel" (formula "69") (term "0"))
                               (builtin "One Step Simplification" (formula "69"))
                              (rule "true_left" (formula "69"))
                              (rule "commute_or" (formula "11") (term "1,0,0,0"))
                              (rule "equalityToSeqGetAndSeqLenLeft" (formula "68") (inst "iv=iv"))
                              (rule "andLeft" (formula "68"))
                              (rule "lenOfSeqSub" (formula "69") (term "1,1,0,0"))
                              (rule "polySimp_elimSub" (formula "69") (term "1,1,1,0,0"))
                              (rule "times_zero_2" (formula "69") (term "1,1,1,1,0,0"))
                              (rule "add_zero_right" (formula "69") (term "1,1,1,0,0"))
                              (rule "lenOfSeqSub" (formula "68") (term "0"))
                              (rule "polySimp_elimSub" (formula "68") (term "1,0"))
                              (rule "mul_literals" (formula "68") (term "1,1,0"))
                              (rule "add_zero_right" (formula "68") (term "1,0"))
                               (builtin "One Step Simplification" (formula "68"))
                              (rule "eqSymm" (formula "68") (term "1"))
                              (rule "inEqSimp_ltToLeq" (formula "69") (term "0,1,1,0,0"))
                              (rule "add_zero_right" (formula "69") (term "0,0,1,1,0,0"))
                              (rule "polySimp_mulComm0" (formula "69") (term "1,0,0,1,1,0,0"))
                              (rule "inEqSimp_ltToLeq" (formula "68") (term "0"))
                              (rule "add_zero_right" (formula "68") (term "0,0"))
                              (rule "polySimp_mulComm0" (formula "68") (term "1,0,0"))
                              (rule "inEqSimp_ltToLeq" (formula "69") (term "1,0,0"))
                              (rule "polySimp_mulComm0" (formula "69") (term "1,0,0,1,0,0"))
                              (rule "inEqSimp_commuteLeq" (formula "69") (term "0,0,0"))
                              (rule "applyEq" (formula "69") (term "0,0,1,0") (ifseqformula "70"))
                               (builtin "One Step Simplification" (formula "69"))
                              (rule "true_left" (formula "69"))
                              (rule "inEqSimp_sepNegMonomial0" (formula "68") (term "0"))
                              (rule "polySimp_mulLiterals" (formula "68") (term "0,0"))
                              (rule "polySimp_elimOne" (formula "68") (term "0,0"))
                              (rule "lenNonNegative" (formula "67") (term "0"))
                              (rule "inEqSimp_commuteLeq" (formula "67"))
                              (rule "applyEq" (formula "67") (term "0") (ifseqformula "68"))
                              (rule "inEqSimp_sepPosMonomial1" (formula "67"))
                              (rule "mul_literals" (formula "67") (term "1"))
                              (rule "inEqSimp_subsumption1" (formula "67") (ifseqformula "57"))
                              (rule "leq_literals" (formula "67") (term "0"))
                               (builtin "One Step Simplification" (formula "67"))
                              (rule "true_left" (formula "67"))
                              (rule "cut_direct" (formula "86") (term "0,0"))
                              (branch "CUT: o_0 = null TRUE"
                                  (builtin "One Step Simplification" (formula "87"))
                                 (rule "false_right" (formula "87"))
                                 (rule "replace_known_left" (formula "2") (term "0,0,0,0") (ifseqformula "1"))
                                  (builtin "One Step Simplification" (formula "2"))
                                 (rule "applyEqReverse" (formula "3") (term "2,0") (ifseqformula "2"))
                                 (rule "hideAuxiliaryEq" (formula "2"))
                                 (rule "replace_known_left" (formula "3") (term "0,0,0,0") (ifseqformula "1"))
                                  (builtin "One Step Simplification" (formula "3"))
                                 (rule "applyEqReverse" (formula "4") (term "2,0") (ifseqformula "3"))
                                 (rule "hideAuxiliaryEq" (formula "3"))
                                 (rule "replace_known_left" (formula "3") (term "0,0,0,0") (ifseqformula "1"))
                                  (builtin "One Step Simplification" (formula "3") (ifInst ""  (formula "85")))
                                 (rule "closeFalse" (formula "3"))
                              )
                              (branch "CUT: o_0 = null FALSE"
                                  (builtin "One Step Simplification" (formula "87"))
                                 (rule "notRight" (formula "87"))
                                 (rule "replace_known_right" (formula "4") (term "0,0,0,0") (ifseqformula "87"))
                                  (builtin "One Step Simplification" (formula "4"))
                                 (rule "replace_known_right" (formula "2") (term "0,0,0,0") (ifseqformula "87"))
                                  (builtin "One Step Simplification" (formula "2"))
                                 (rule "replace_known_right" (formula "5") (term "0,0,0,0") (ifseqformula "87"))
                                  (builtin "One Step Simplification" (formula "5"))
                                 (rule "replace_known_right" (formula "3") (term "0,0,0,0") (ifseqformula "87"))
                                  (builtin "One Step Simplification" (formula "3"))
                                 (rule "ifthenelse_negated" (formula "4") (term "0"))
                                 (rule "ifthenelse_negated" (formula "2") (term "0"))
                                 (rule "ifthenelse_negated" (formula "5") (term "0"))
                                 (rule "ifthenelse_negated" (formula "3") (term "0"))
                                 (rule "commute_or_2" (formula "15") (term "0,0,0"))
                                 (rule "commute_or_2" (formula "25") (term "0,0,0"))
                                 (rule "commute_or_2" (formula "36") (term "0,0,0"))
                                 (rule "commute_or" (formula "10") (term "1,0,0,0"))
                                 (rule "commute_or" (formula "6") (term "1,0,0,0"))
                                 (rule "commute_or" (formula "28") (term "1,0,0,0"))
                                 (rule "commute_or" (formula "7") (term "1,0,0,0"))
                                 (rule "commute_or_2" (formula "11") (term "0,0,0"))
                                 (rule "commute_or_2" (formula "14") (term "0,0,0"))
                                 (rule "commute_or" (formula "24") (term "1,0,0,0"))
                                 (rule "commute_or_2" (formula "59") (term "0,1,0"))
                                 (rule "commute_or" (formula "49") (term "0,0"))
                                 (rule "commute_or" (formula "41") (term "0,0"))
                                 (rule "commute_or" (formula "34") (term "0,0"))
                                 (rule "commute_or" (formula "69"))
                                 (rule "inEqSimp_or_weaken1" (formula "69"))
                                 (rule "add_literals" (formula "69") (term "1,0"))
                                  (builtin "One Step Simplification" (formula "69") (ifInst ""  (formula "58")))
                                 (rule "true_left" (formula "69"))
                                 (rule "cnf_rightDist" (formula "31") (term "0,0,0,0"))
                                  (builtin "One Step Simplification" (formula "31"))
                                 (rule "commute_or_2" (formula "23") (term "0,0,0"))
                                 (rule "commute_or_2" (formula "35") (term "0,0,0"))
                                 (rule "commute_or_2" (formula "13") (term "0,0,0"))
                                 (rule "commute_or" (formula "6") (term "0,0,0,0"))
                                 (rule "commute_or_2" (formula "32") (term "0,0,0"))
                                 (rule "commute_or" (formula "7") (term "0,0,0,0"))
                                 (rule "commute_or_2" (formula "9") (term "0,0,0"))
                                 (rule "commute_or_2" (formula "26") (term "0,0,0"))
                                 (rule "commute_or_2" (formula "30") (term "0,0,0"))
                                 (rule "commute_or_2" (formula "27") (term "0,0,0"))
                                 (rule "commute_or_2" (formula "12") (term "0,0,0"))
                                 (rule "cnf_rightDist" (formula "10") (term "0,0,0,0"))
                                  (builtin "One Step Simplification" (formula "10"))
                                 (rule "cnf_rightDist" (formula "28") (term "0,0,0,0"))
                                 (rule "cnf_rightDist" (formula "33") (term "0,0"))
                                 (rule "distr_forallAnd" (formula "33") (term "0"))
                                 (rule "distr_forallAnd" (formula "33"))
                                 (rule "andLeft" (formula "33"))
                                 (rule "commute_or_2" (formula "50") (term "0"))
                                 (rule "commute_or_2" (formula "42") (term "0"))
                                 (rule "cnf_rightDist" (formula "24") (term "0,0,0,0"))
                                 (rule "shift_paren_or" (formula "8") (term "0,0,0,0"))
                                 (rule "commute_or_2" (formula "5") (term "0,0"))
                                 (rule "shift_paren_or" (formula "29") (term "0,0,0,0"))
                                 (rule "cnf_rightDist" (formula "60") (term "1,1,0"))
                                 (rule "commute_or_2" (formula "4") (term "0,0,0"))
                                 (rule "commute_and" (formula "8") (term "1,0,0,0"))
                                 (rule "commute_and" (formula "29") (term "1,0,0,0"))
                                 (rule "commute_or" (formula "34") (term "0,0"))
                                 (rule "commute_or_2" (formula "6") (term "0,0,0"))
                                 (rule "commute_or_2" (formula "7") (term "0,0,0"))
                                 (rule "commute_or" (formula "28") (term "0,0,0"))
                                 (rule "shift_paren_or" (formula "15") (term "0,0,0,0"))
                                 (rule "commute_or" (formula "31") (term "0,0,0,0"))
                                 (rule "shift_paren_or" (formula "25") (term "0,0,0,0"))
                                 (rule "commute_or" (formula "24") (term "0,0,0"))
                                 (rule "shift_paren_or" (formula "37") (term "0,0,0,0"))
                                 (rule "shift_paren_or" (formula "11") (term "0,0,0,0"))
                                 (rule "shift_paren_or" (formula "14") (term "0,0,0,0"))
                                 (rule "Class_axiom_0_in_de_polyas_core3_open_cred_CredTool" (inst "seq=seq") (inst "i=i_2") (inst "str=str") (inst "seq_0=seq_0") (inst "i_0=i_0") (inst "obj=obj") (inst "seq_1=seq_1") (inst "i_1=i_1") (inst "sv_heap=anon_heap_add<<anonHeapFunction>>"))
                                 (rule "andLeft" (formula "1"))
                                 (rule "andLeft" (formula "1"))
                                 (rule "castedGetAny" (formula "3") (term "0,1,1,0,0,0"))
                                 (rule "castedGetAny" (formula "1") (term "0,0,0,0,0"))
                                 (rule "castedGetAny" (formula "2") (term "0,1,1,0,0,0"))
                                 (rule "castedGetAny" (formula "1") (term "0,0,0,1,0,1,0,0"))
                                 (rule "castedGetAny" (formula "1") (term "0,0,1,1,0,1,0,0"))
                                 (rule "castedGetAny" (formula "1") (term "0,0,0,0,1,0,0"))
                                 (rule "nnf_imp2or" (formula "1") (term "0,0"))
                                  (builtin "One Step Simplification" (formula "1"))
                                 (rule "nnf_imp2or" (formula "3") (term "0,0,0"))
                                 (rule "nnf_imp2or" (formula "2") (term "0,0,0"))
                                 (rule "nnf_imp2or" (formula "3") (term "1,0,0,0"))
                                 (rule "nnf_notAnd" (formula "3") (term "0,0,0,0"))
                                  (builtin "One Step Simplification" (formula "3"))
                                 (rule "nnf_imp2or" (formula "2") (term "1,0,0,0"))
                                 (rule "nnf_notAnd" (formula "2") (term "0,0,0,0"))
                                  (builtin "One Step Simplification" (formula "2"))
                                 (rule "nnf_notOr" (formula "3") (term "0,0,0,0,0"))
                                 (rule "nnf_notOr" (formula "2") (term "0,0,0,0,0"))
                                 (rule "Class_axiom_0_in_de_polyas_core3_open_cred_CredTool" (inst "seq=seq") (inst "i=i_2") (inst "str=str") (inst "seq_0=seq_0") (inst "i_0=i_0") (inst "obj=obj") (inst "seq_1=seq_1") (inst "i_1=i_1") (inst "sv_heap=anon(heapAfter_get,
     singleton(result_46, java.util.Collection::$seq),
     anon_heap_add<<anonHeapFunction>>)"))
                                  (builtin "One Step Simplification" (formula "1"))
                                 (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,1,0,0,0,0,0,1") (ifseqformula "66"))
                                  (builtin "One Step Simplification" (formula "1"))
                                 (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,1,0,0,0,0,0,1,0") (ifseqformula "66"))
                                  (builtin "One Step Simplification" (formula "1"))
                                 (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,0,0,1,0,0,0,0,0,1") (ifseqformula "56"))
                                 (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,0,0,0,1,0,0,0,0,0,1") (ifseqformula "49"))
                                 (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,0,0,1,0,0,0,0,0,1,0") (ifseqformula "56"))
                                 (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,0,0,0,1,0,0,0,0,0,1,0") (ifseqformula "49"))
                                 (rule "andLeft" (formula "1"))
                                 (rule "andLeft" (formula "1"))
                                 (rule "castedGetAny" (formula "3") (term "0,1,1,0,0,0"))
                                 (rule "castedGetAny" (formula "1") (term "0,0,0,0,0"))
                                 (rule "castedGetAny" (formula "1") (term "0,0,0,1,0,1,0,0"))
                                 (rule "castedGetAny" (formula "1") (term "0,0,1,1,0,1,0,0"))
                                 (rule "castedGetAny" (formula "2") (term "0,1,1,0,0,0"))
                                 (rule "castedGetAny" (formula "1") (term "0,0,0,0,1,0,0"))
                                 (rule "nnf_imp2or" (formula "1") (term "0,0"))
                                  (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "4")))
                                 (rule "true_left" (formula "1"))
                                 (rule "nnf_imp2or" (formula "2") (term "0,0,0"))
                                 (rule "nnf_imp2or" (formula "1") (term "0,0,0"))
                                 (rule "nnf_imp2or" (formula "2") (term "1,0,0,0"))
                                 (rule "nnf_notAnd" (formula "2") (term "0,0,0,0"))
                                  (builtin "One Step Simplification" (formula "2"))
                                 (rule "nnf_imp2or" (formula "1") (term "1,0,0,0"))
                                 (rule "nnf_notAnd" (formula "1") (term "0,0,0,0"))
                                  (builtin "One Step Simplification" (formula "1"))
                                 (rule "nnf_notOr" (formula "2") (term "0,0,0,0,0"))
                                 (rule "nnf_notOr" (formula "1") (term "0,0,0,0,0"))
                                 (rule "nnf_notOr" (formula "2") (term "1,0,0,0,0,0"))
                                 (rule "nnf_notOr" (formula "1") (term "1,0,0,0,0,0"))
                                 (rule "nnf_notOr" (formula "2") (term "0,1,0,0,0,0,0"))
                                 (rule "nnf_notOr" (formula "1") (term "0,1,0,0,0,0,0"))
                                 (rule "nnf_notOr" (formula "2") (term "0,0,1,0,0,0,0,0"))
                                 (rule "nnf_notOr" (formula "1") (term "0,0,1,0,0,0,0,0"))
                                 (rule "nnf_notOr" (formula "2") (term "0,0,0,1,0,0,0,0,0"))
                                 (rule "nnf_notOr" (formula "1") (term "0,0,0,1,0,0,0,0,0"))
                                 (rule "nnf_notOr" (formula "2") (term "0,0,0,0,1,0,0,0,0,0"))
                                 (rule "nnf_notOr" (formula "1") (term "0,0,0,0,1,0,0,0,0,0"))
                                 (rule "Class_axiom_0_in_de_polyas_core3_open_cred_CredTool" (inst "seq=seq") (inst "i=i_2") (inst "str=str") (inst "seq_0=seq_0") (inst "i_0=i_0") (inst "obj=obj") (inst "seq_1=seq_1") (inst "i_1=i_1") (inst "sv_heap=heapAfter_add"))
                                 (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "1,0,0,0,0,0,1") (ifseqformula "73"))
                                 (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,1,0,0,0,0,0,1") (ifseqformula "68"))
                                  (builtin "One Step Simplification" (formula "1"))
                                 (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "1,0,0,0,0,0,1,0") (ifseqformula "73"))
                                 (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,1,0,0,0,0,0,1,0") (ifseqformula "68"))
                                  (builtin "One Step Simplification" (formula "1"))
                                 (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,0,0,1,0,0,0,0,0,1") (ifseqformula "58"))
                                 (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,0,0,0,1,0,0,0,0,0,1") (ifseqformula "51"))
                                 (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,0,0,1,0,0,0,0,0,1,0") (ifseqformula "58"))
                                 (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,0,0,0,1,0,0,0,0,0,1,0") (ifseqformula "51"))
                                 (rule "andLeft" (formula "1"))
                                 (rule "andLeft" (formula "1"))
                                 (rule "castedGetAny" (formula "3") (term "0,1,1,0,0,0"))
                                 (rule "castedGetAny" (formula "1") (term "0,0,0,0,0"))
                                 (rule "castedGetAny" (formula "1") (term "0,0,0,1,0,1,0,0"))
                                 (rule "castedGetAny" (formula "1") (term "0,0,1,1,0,1,0,0"))
                                 (rule "castedGetAny" (formula "1") (term "0,0,0,0,1,0,0"))
                                 (rule "castedGetAny" (formula "2") (term "0,1,1,0,0,0"))
                                 (rule "nnf_imp2or" (formula "1") (term "0,0"))
                                  (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "6")))
                                 (rule "true_left" (formula "1"))
                                 (rule "nnf_imp2or" (formula "2") (term "0,0,0"))
                                 (rule "nnf_imp2or" (formula "1") (term "0,0,0"))
                                 (rule "nnf_notAnd" (formula "2") (term "0,0,0,0"))
                                  (builtin "One Step Simplification" (formula "2"))
                                 (rule "nnf_imp2or" (formula "1") (term "1,0,0,0"))
                                 (rule "nnf_notAnd" (formula "1") (term "0,0,0,0"))
                                  (builtin "One Step Simplification" (formula "1"))
                                 (rule "nnf_imp2or" (formula "2") (term "1,0,0,0"))
                                 (rule "nnf_notOr" (formula "2") (term "0,0,0,0,0"))
                                 (rule "nnf_notOr" (formula "1") (term "0,0,0,0,0"))
                                 (rule "nnf_notOr" (formula "2") (term "1,0,0,0,0,0"))
                                 (rule "nnf_notOr" (formula "1") (term "1,0,0,0,0,0"))
                                 (rule "nnf_notOr" (formula "2") (term "0,1,0,0,0,0,0"))
                                 (rule "nnf_notOr" (formula "1") (term "0,1,0,0,0,0,0"))
                                 (rule "nnf_notOr" (formula "2") (term "0,0,1,0,0,0,0,0"))
                                 (rule "nnf_notOr" (formula "1") (term "0,0,1,0,0,0,0,0"))
                                 (rule "nnf_notOr" (formula "2") (term "0,0,0,1,0,0,0,0,0"))
                                 (rule "nnf_notOr" (formula "1") (term "0,0,0,1,0,0,0,0,0"))
                                 (rule "nnf_notOr" (formula "2") (term "0,0,0,0,1,0,0,0,0,0"))
                                 (rule "nnf_notOr" (formula "1") (term "0,0,0,0,1,0,0,0,0,0"))
                                 (rule "shift_paren_or" (formula "15") (term "0,0,0"))
                                  (builtin "One Step Simplification" (formula "15"))
                                 (rule "eqSymm" (formula "15") (term "1,0,0,0"))
                                 (rule "castedGetAny" (formula "15") (term "0,1,0,0,0,0"))
                                 (rule "castedGetAny" (formula "15") (term "1,0,0,0,0,0,0,0"))
                                 (rule "castedGetAny" (formula "15") (term "0,1,0,0,0"))
                                  (builtin "One Step Simplification" (formula "15"))
                                 (rule "true_left" (formula "15"))
                                 (rule "cnf_rightDist" (formula "64") (term "0"))
                                 (rule "commute_and" (formula "19") (term "1,0,0,0"))
                                 (rule "shift_paren_or" (formula "27") (term "0,0,0,0"))
                                 (rule "commute_and" (formula "29") (term "1,0,0,0"))
                                 (rule "commute_and" (formula "41") (term "1,0,0,0"))
                                 (rule "shift_paren_or" (formula "40") (term "0,0,0,0"))
                                 (rule "distr_forallAnd" (formula "64"))
                                 (rule "andLeft" (formula "64"))
                                 (rule "commute_or_2" (formula "13") (term "0,0,0,0"))
                                 (rule "commute_or_2" (formula "10") (term "0,0,0,0"))
                                 (rule "shift_paren_or" (formula "17") (term "0,0,0,0"))
                                 (rule "commute_or_2" (formula "33") (term "0,0,0,0"))
                                 (rule "shift_paren_or" (formula "36") (term "0,0,0,0"))
                                 (rule "commute_and" (formula "15") (term "1,0,0,0"))
                                 (rule "shift_paren_or" (formula "14") (term "0,0,0,0"))
                                 (rule "shift_paren_or" (formula "30") (term "0,0,0,0"))
                                 (rule "cnf_rightDist" (formula "37") (term "0,0"))
                                 (rule "commute_and" (formula "18") (term "1,0,0,0"))
                                 (rule "shift_paren_or" (formula "34") (term "0,0,0,0"))
                                 (rule "shift_paren_or" (formula "31") (term "0,0,0,0"))
                                 (rule "shift_paren_or" (formula "16") (term "0,0,0,0"))
                                 (rule "commute_or_2" (formula "19") (term "0,0,0,0"))
                                 (rule "shift_paren_or" (formula "35") (term "0,0,0"))
                                  (builtin "One Step Simplification" (formula "35"))
                                 (rule "eqSymm" (formula "35") (term "1,0,0,0"))
                                 (rule "castedGetAny" (formula "35") (term "0,0,0,0,0,0"))
                                 (rule "castedGetAny" (formula "35") (term "1,0,0,1,0,0,0,0"))
                                 (rule "castedGetAny" (formula "35") (term "0,1,0,0,0"))
                                  (builtin "One Step Simplification" (formula "35"))
                                 (rule "true_left" (formula "35"))
                                 (rule "commute_or_2" (formula "29") (term "0,0,0,0"))
                                 (rule "commute_or_2" (formula "40") (term "0,0,0,0"))
                                 (rule "distr_forallAnd" (formula "36") (term "0"))
                                 (rule "commute_or_2" (formula "15") (term "0,0,0,0"))
                                 (rule "commute_or_2" (formula "18") (term "0,0,0,0"))
                                 (rule "commute_and" (formula "39") (term "1,0,0,0"))
                                 (rule "commute_and" (formula "35") (term "1,0,0,0"))
                                 (rule "commute_and" (formula "14") (term "1,0,0,0"))
                                 (rule "commute_and" (formula "30") (term "1,0,0,0"))
                                 (rule "commute_and" (formula "34") (term "1,0,0,0"))
                                 (rule "shift_paren_or" (formula "11") (term "0,0,0,0"))
                                 (rule "shift_paren_or" (formula "12") (term "0,0,0,0"))
                                 (rule "commute_or" (formula "32") (term "1,1,0,0,0"))
                                 (rule "distr_forallAnd" (formula "36"))
                                 (rule "andLeft" (formula "36"))
                                 (rule "commute_or" (formula "5") (term "1,0,0,0"))
                                 (rule "commute_or" (formula "28") (term "1,1,0,0,0"))
                                 (rule "commute_or" (formula "4") (term "1,0,0,0"))
                                 (rule "commute_or" (formula "5") (term "0,0,0,0"))
                                 (rule "commute_or" (formula "4") (term "0,0,0,0"))
                                 (rule "commute_and" (formula "31") (term "0,1,0,0,0"))
                                 (rule "commute_and" (formula "27") (term "0,0,1,0,0,0"))
                                 (rule "commute_or" (formula "2") (term "1,0,0,0"))
                                 (rule "commute_or" (formula "1") (term "1,0,0,0"))
                                 (rule "commute_or" (formula "65") (term "0"))
                                 (rule "commute_or" (formula "2") (term "0,0,0,0"))
                                 (rule "commute_or" (formula "1") (term "0,0,0,0"))
                                 (rule "cnf_rightDist" (formula "32") (term "0,1,0,0,0"))
                                  (builtin "One Step Simplification" (formula "32"))
                                 (rule "commute_and" (formula "17") (term "0,0,0,1,0,0,0"))
                                 (rule "cnf_rightDist" (formula "28") (term "0,1,0,0,0"))
                                 (rule "commute_and" (formula "11") (term "0,0,1,0,0,0"))
                                 (rule "cut_direct" (formula "91") (term "1"))
                                 (branch "CUT: o_0 = result_46 TRUE"
                                     (builtin "One Step Simplification" (formula "92"))
                                    (rule "applyEq" (formula "10") (term "1,0,1,0,0") (ifseqformula "1"))
                                    (rule "applyEq" (formula "7") (term "1,0,0,0") (ifseqformula "1"))
                                    (rule "replace_known_right" (formula "7") (term "0,0") (ifseqformula "80"))
                                     (builtin "One Step Simplification" (formula "7"))
                                    (rule "applyEq" (formula "11") (term "1,0,0,0,0,0,0,0") (ifseqformula "1"))
                                    (rule "replace_known_right" (formula "11") (term "0,0,0,0,0,0") (ifseqformula "80"))
                                     (builtin "One Step Simplification" (formula "11"))
                                    (rule "applyEq" (formula "9") (term "1,0,1,0,0") (ifseqformula "1"))
                                    (rule "replace_known_left" (formula "9") (term "1,0,0") (ifseqformula "52"))
                                     (builtin "One Step Simplification" (formula "9"))
                                    (rule "applyEqReverse" (formula "10") (term "1,0") (ifseqformula "9"))
                                    (rule "applyEqReverse" (formula "94") (term "0") (ifseqformula "9"))
                                    (rule "hideAuxiliaryEq" (formula "9"))
                                    (rule "applyEq" (formula "9") (term "1,0,1,0,0,0") (ifseqformula "1"))
                                    (rule "replace_known_left" (formula "9") (term "1,0,0,0") (ifseqformula "51"))
                                     (builtin "One Step Simplification" (formula "9"))
                                    (rule "applyEqReverse" (formula "10") (term "1,0") (ifseqformula "9"))
                                    (rule "hideAuxiliaryEq" (formula "9"))
                                    (rule "applyEq" (formula "91") (term "0") (ifseqformula "1"))
                                    (rule "applyEq" (formula "8") (term "1,0,0,0") (ifseqformula "1"))
                                    (rule "replace_known_right" (formula "8") (term "0,0") (ifseqformula "78"))
                                     (builtin "One Step Simplification" (formula "8"))
                                    (rule "applyEqReverse" (formula "91") (term "0") (ifseqformula "8"))
                                    (rule "applyEqReverse" (formula "9") (term "1,0") (ifseqformula "8"))
                                    (rule "hideAuxiliaryEq" (formula "8"))
                                    (rule "applyEq" (formula "7") (term "1,0,0") (ifseqformula "1"))
                                    (rule "replace_known_left" (formula "7") (term "0") (ifseqformula "49"))
                                     (builtin "One Step Simplification" (formula "7"))
                                    (rule "true_left" (formula "7"))
                                    (rule "applyEq" (formula "7") (term "1,2,0") (ifseqformula "1"))
                                    (rule "applyEq" (formula "7") (term "1,0,0,0,0,0,0") (ifseqformula "1"))
                                    (rule "applyEq" (formula "7") (term "1,0,1,0,0,0,0") (ifseqformula "1"))
                                    (rule "replace_known_left" (formula "7") (term "1,0,0,0,0") (ifseqformula "48"))
                                     (builtin "One Step Simplification" (formula "7") (ifInst ""  (formula "89")))
                                    (rule "closeFalse" (formula "7"))
                                 )
                                 (branch "CUT: o_0 = result_46 FALSE"
                                     (builtin "One Step Simplification" (formula "92"))
                                    (rule "false_right" (formula "92"))
                                    (rule "commute_and" (formula "12") (term "0,0,1,0,0,0"))
                                    (rule "commute_and" (formula "16") (term "0,0,0,1,0,0,0"))
                                    (rule "shift_paren_or" (formula "64") (term "0"))
                                    (rule "ifthenelse_split" (formula "7") (term "0"))
                                    (branch "o_0.<created> = TRUE TRUE"
                                       (rule "applyEqReverse" (formula "9") (term "1,0") (ifseqformula "8"))
                                       (rule "hideAuxiliaryEq" (formula "8"))
                                       (rule "replace_known_left" (formula "8") (term "0,0,0") (ifseqformula "7"))
                                        (builtin "One Step Simplification" (formula "8"))
                                       (rule "applyEqReverse" (formula "9") (term "1,0") (ifseqformula "8"))
                                       (rule "applyEqReverse" (formula "93") (term "0") (ifseqformula "8"))
                                       (rule "hideAuxiliaryEq" (formula "8"))
                                       (rule "replace_known_left" (formula "9") (term "0,0,0,0,0,0") (ifseqformula "7"))
                                        (builtin "One Step Simplification" (formula "9"))
                                       (rule "applyEqReverse" (formula "92") (term "1") (ifseqformula "9"))
                                       (rule "hideAuxiliaryEq" (formula "9"))
                                       (rule "replace_known_left" (formula "8") (term "0,0,0,0,0") (ifseqformula "7"))
                                        (builtin "One Step Simplification" (formula "8") (ifInst ""  (formula "91")))
                                       (rule "closeFalse" (formula "8"))
                                    )
                                    (branch "o_0.<created> = TRUE FALSE"
                                       (rule "applyEqReverse" (formula "8") (term "1,0") (ifseqformula "7"))
                                       (rule "hideAuxiliaryEq" (formula "7"))
                                       (rule "replace_known_right" (formula "7") (term "0,0,0") (ifseqformula "76"))
                                        (builtin "One Step Simplification" (formula "7"))
                                       (rule "replace_known_right" (formula "8") (term "0,0,0,0,0") (ifseqformula "76"))
                                        (builtin "One Step Simplification" (formula "8"))
                                       (rule "replace_known_right" (formula "9") (term "0,0,0,0,0,0") (ifseqformula "76"))
                                        (builtin "One Step Simplification" (formula "9"))
                                       (rule "replace_known_right" (formula "6") (term "0,0") (ifseqformula "76"))
                                        (builtin "One Step Simplification" (formula "6"))
                                       (rule "shift_paren_and" (formula "3") (term "0,1,0,0"))
                                        (builtin "One Step Simplification" (formula "3"))
                                       (rule "commute_or" (formula "36") (term "0,0"))
                                       (rule "seqGetAlphaCast" (formula "69") (term "0"))
                                       (rule "castedGetAny" (formula "69") (term "0"))
                                        (builtin "One Step Simplification" (formula "69"))
                                       (rule "true_left" (formula "69"))
                                       (rule "commute_or_2" (formula "63") (term "0,0"))
                                        (builtin "One Step Simplification" (formula "63"))
                                       (rule "commute_or_2" (formula "5") (term "0,0,0"))
                                       (rule "commute_or_2" (formula "4") (term "0,0,0"))
                                       (rule "commute_or" (formula "64") (term "0,1,0"))
                                       (rule "commute_or_2" (formula "2") (term "0,0,0"))
                                       (rule "commute_or_2" (formula "1") (term "0,0,0"))
                                       (rule "cnf_rightDist" (formula "12") (term "0,0,0"))
                                       (rule "distr_forallAnd" (formula "12") (term "0,0"))
                                       (rule "distr_forallAnd" (formula "12") (term "0"))
                                       (rule "distr_forallAnd" (formula "12"))
                                       (rule "andLeft" (formula "12"))
                                       (rule "cnf_rightDist" (formula "33") (term "0,0,0"))
                                       (rule "distr_forallAnd" (formula "33") (term "0,0"))
                                       (rule "distr_forallAnd" (formula "33") (term "0"))
                                       (rule "distr_forallAnd" (formula "33"))
                                       (rule "andLeft" (formula "33"))
                                       (rule "cnf_rightDist" (formula "19") (term "0,0,0"))
                                       (rule "distr_forallAnd" (formula "19") (term "0,0"))
                                       (rule "distr_forallAnd" (formula "19") (term "0"))
                                       (rule "distr_forallAnd" (formula "19"))
                                       (rule "andLeft" (formula "19"))
                                       (rule "cnf_rightDist" (formula "30") (term "0,0,0"))
                                       (rule "distr_forallAnd" (formula "30") (term "0,0"))
                                       (rule "distr_forallAnd" (formula "30") (term "0"))
                                       (rule "distr_forallAnd" (formula "30"))
                                       (rule "andLeft" (formula "30"))
                                       (rule "cnf_rightDist" (formula "42") (term "0,0,0"))
                                       (rule "distr_forallAnd" (formula "42") (term "0,0"))
                                       (rule "distr_forallAnd" (formula "42") (term "0"))
                                       (rule "distr_forallAnd" (formula "42"))
                                       (rule "andLeft" (formula "42"))
                                       (rule "cnf_rightDist" (formula "15") (term "0,0,0"))
                                       (rule "distr_forallAnd" (formula "15") (term "0,0"))
                                       (rule "distr_forallAnd" (formula "15") (term "0"))
                                       (rule "distr_forallAnd" (formula "15"))
                                       (rule "andLeft" (formula "15"))
                                       (rule "cnf_rightDist" (formula "18") (term "0,0,0"))
                                       (rule "distr_forallAnd" (formula "18") (term "0,0"))
                                       (rule "distr_forallAnd" (formula "18") (term "0"))
                                       (rule "distr_forallAnd" (formula "18"))
                                       (rule "andLeft" (formula "18"))
                                       (rule "cnf_rightDist" (formula "41") (term "0,0,0"))
                                       (rule "distr_forallAnd" (formula "41") (term "0,0"))
                                       (rule "distr_forallAnd" (formula "41") (term "0"))
                                       (rule "distr_forallAnd" (formula "41"))
                                       (rule "andLeft" (formula "41"))
                                       (rule "cnf_rightDist" (formula "36") (term "0,0,0"))
                                       (rule "distr_forallAnd" (formula "36") (term "0,0"))
                                       (rule "distr_forallAnd" (formula "36") (term "0"))
                                       (rule "distr_forallAnd" (formula "36"))
                                       (rule "andLeft" (formula "36"))
                                       (rule "cnf_rightDist" (formula "14") (term "0,0,0"))
                                       (rule "distr_forallAnd" (formula "14") (term "0,0"))
                                       (rule "distr_forallAnd" (formula "14") (term "0"))
                                       (rule "distr_forallAnd" (formula "14"))
                                       (rule "andLeft" (formula "14"))
                                       (rule "shift_paren_or" (formula "65") (term "0,0"))
                                       (rule "cnf_rightDist" (formula "31") (term "0,0,0"))
                                       (rule "distr_forallAnd" (formula "31") (term "0,0"))
                                       (rule "distr_forallAnd" (formula "31") (term "0"))
                                       (rule "distr_forallAnd" (formula "31"))
                                       (rule "andLeft" (formula "31"))
                                       (rule "cnf_rightDist" (formula "35") (term "0,0,0"))
                                       (rule "distr_forallAnd" (formula "35") (term "0,0"))
                                       (rule "distr_forallAnd" (formula "35") (term "0"))
                                       (rule "distr_forallAnd" (formula "35"))
                                       (rule "andLeft" (formula "35"))
                                       (rule "commute_or_2" (formula "12") (term "0,0,0"))
                                        (builtin "One Step Simplification" (formula "12"))
                                       (rule "eqSymm" (formula "12") (term "1,0,0,0,0"))
                                       (rule "castedGetAny" (formula "12") (term "0,0,0,0,0,0"))
                                       (rule "castedGetAny" (formula "12") (term "1,0,0,1,0,0,0"))
                                       (rule "castedGetAny" (formula "12") (term "0,1,0,0,0,0"))
                                        (builtin "One Step Simplification" (formula "12"))
                                       (rule "true_left" (formula "12"))
                                       (rule "commute_or" (formula "32") (term "0,1,0,0,0"))
                                       (rule "cnf_rightDist" (formula "65") (term "0"))
                                       (rule "distr_forallAnd" (formula "65"))
                                       (rule "andLeft" (formula "65"))
                                       (rule "cnf_rightDist" (formula "31") (term "0,0,0"))
                                       (rule "distr_forallAnd" (formula "31") (term "0,0"))
                                       (rule "distr_forallAnd" (formula "31") (term "0"))
                                       (rule "distr_forallAnd" (formula "31"))
                                       (rule "andLeft" (formula "31"))
                                       (rule "cnf_rightDist" (formula "27") (term "0,0,0"))
                                       (rule "distr_forallAnd" (formula "27") (term "0,0"))
                                       (rule "distr_forallAnd" (formula "27") (term "0"))
                                       (rule "distr_forallAnd" (formula "27"))
                                       (rule "andLeft" (formula "27"))
                                       (rule "commute_or_2" (formula "35") (term "0,0,0"))
                                        (builtin "One Step Simplification" (formula "35"))
                                       (rule "eqSymm" (formula "35") (term "1,0,0,0,0"))
                                       (rule "castedGetAny" (formula "35") (term "0,0,0,0,0,0"))
                                       (rule "castedGetAny" (formula "35") (term "1,0,0,1,0,0,0"))
                                       (rule "castedGetAny" (formula "35") (term "0,1,0,0,0,0"))
                                        (builtin "One Step Simplification" (formula "35"))
                                       (rule "true_left" (formula "35"))
                                       (rule "commute_or_2" (formula "18") (term "0,0,0"))
                                        (builtin "One Step Simplification" (formula "18"))
                                       (rule "eqSymm" (formula "18") (term "1,0,0,0,0"))
                                       (rule "castedGetAny" (formula "18") (term "0,0,0,0,0,0"))
                                       (rule "castedGetAny" (formula "18") (term "1,0,0,1,0,0,0"))
                                       (rule "castedGetAny" (formula "18") (term "0,1,0,0,0,0"))
                                        (builtin "One Step Simplification" (formula "18"))
                                       (rule "true_left" (formula "18"))
                                       (rule "cnf_rightDist" (formula "16") (term "0,0,0"))
                                       (rule "distr_forallAnd" (formula "16") (term "0,0"))
                                       (rule "distr_forallAnd" (formula "16") (term "0"))
                                       (rule "distr_forallAnd" (formula "16"))
                                       (rule "andLeft" (formula "16"))
                                       (rule "cnf_rightDist" (formula "3") (term "0,0"))
                                       (rule "distr_forallAnd" (formula "3") (term "0"))
                                       (rule "distr_forallAnd" (formula "3"))
                                       (rule "andLeft" (formula "3"))
                                       (rule "cnf_rightDist" (formula "11") (term "0,0,0"))
                                       (rule "distr_forallAnd" (formula "11") (term "0,0"))
                                       (rule "distr_forallAnd" (formula "11") (term "0"))
                                       (rule "distr_forallAnd" (formula "11"))
                                       (rule "andLeft" (formula "11"))
                                       (rule "commute_or_2" (formula "32") (term "0,0,0"))
                                        (builtin "One Step Simplification" (formula "32"))
                                       (rule "eqSymm" (formula "32") (term "1,0,0,0,0"))
                                       (rule "castedGetAny" (formula "32") (term "0,0,0,0,0,0"))
                                       (rule "castedGetAny" (formula "32") (term "1,0,0,1,0,0,0"))
                                       (rule "castedGetAny" (formula "32") (term "0,1,0,0,0,0"))
                                        (builtin "One Step Simplification" (formula "32"))
                                       (rule "true_left" (formula "32"))
                                       (rule "cnf_rightDist" (formula "13") (term "0,0,0"))
                                       (rule "distr_forallAnd" (formula "13") (term "0,0"))
                                       (rule "distr_forallAnd" (formula "13") (term "0"))
                                       (rule "distr_forallAnd" (formula "13"))
                                       (rule "andLeft" (formula "13"))
                                       (rule "cnf_rightDist" (formula "18") (term "0,0,0"))
                                       (rule "distr_forallAnd" (formula "18") (term "0,0"))
                                       (rule "distr_forallAnd" (formula "18") (term "0"))
                                       (rule "distr_forallAnd" (formula "18"))
                                       (rule "andLeft" (formula "18"))
                                       (rule "shift_paren_or" (formula "15") (term "0,0,0"))
                                        (builtin "One Step Simplification" (formula "15"))
                                       (rule "eqSymm" (formula "15") (term "1,1,0,0,0"))
                                       (rule "castedGetAny" (formula "15") (term "0,0,1,0,0,0"))
                                       (rule "castedGetAny" (formula "15") (term "0,0,0,0,0,0"))
                                       (rule "castedGetAny" (formula "15") (term "0,1,1,0,0,0"))
                                        (builtin "One Step Simplification" (formula "15"))
                                       (rule "true_left" (formula "15"))
                                       (rule "commute_or_2" (formula "43") (term "0,0,0"))
                                        (builtin "One Step Simplification" (formula "43"))
                                       (rule "eqSymm" (formula "43") (term "1,0,0,0,0"))
                                       (rule "castedGetAny" (formula "43") (term "1,0,0,1,0,0,0"))
                                       (rule "castedGetAny" (formula "43") (term "0,0,0,0,0,0"))
                                       (rule "castedGetAny" (formula "43") (term "0,1,0,0,0,0"))
                                        (builtin "One Step Simplification" (formula "43"))
                                       (rule "true_left" (formula "43"))
                                       (rule "commute_or" (formula "31") (term "1,0,1,0,0,0"))
                                       (rule "commute_or_2" (formula "16") (term "0,0,0"))
                                        (builtin "One Step Simplification" (formula "16"))
                                       (rule "eqSymm" (formula "16") (term "1,0,0,0,0"))
                                       (rule "castedGetAny" (formula "16") (term "1,0,0,1,0,0,0"))
                                       (rule "castedGetAny" (formula "16") (term "0,0,0,0,0,0"))
                                       (rule "castedGetAny" (formula "16") (term "0,1,0,0,0,0"))
                                        (builtin "One Step Simplification" (formula "16"))
                                       (rule "true_left" (formula "16"))
                                       (rule "commute_or_2" (formula "66") (term "0"))
                                       (rule "commute_or_2" (formula "19") (term "0,0,0"))
                                        (builtin "One Step Simplification" (formula "19"))
                                       (rule "eqSymm" (formula "19") (term "1,0,0,0,0"))
                                       (rule "castedGetAny" (formula "19") (term "1,0,0,1,0,0,0"))
                                       (rule "castedGetAny" (formula "19") (term "0,0,0,0,0,0"))
                                       (rule "castedGetAny" (formula "19") (term "0,1,0,0,0,0"))
                                        (builtin "One Step Simplification" (formula "19"))
                                       (rule "true_left" (formula "19"))
                                       (rule "shift_paren_or" (formula "19") (term "0,0,0"))
                                        (builtin "One Step Simplification" (formula "19"))
                                       (rule "eqSymm" (formula "19") (term "1,1,0,0,0"))
                                       (rule "castedGetAny" (formula "19") (term "0,0,0,0,0,0"))
                                       (rule "castedGetAny" (formula "19") (term "0,0,1,0,0,0"))
                                       (rule "castedGetAny" (formula "19") (term "0,1,1,0,0,0"))
                                        (builtin "One Step Simplification" (formula "19"))
                                       (rule "true_left" (formula "19"))
                                       (rule "shift_paren_or" (formula "6") (term "0,0,0,0"))
                                       (rule "shift_paren_or" (formula "5") (term "0,0,0,0"))
                                       (rule "shift_paren_or" (formula "2") (term "0,0,0,0"))
                                       (rule "commute_or_2" (formula "39") (term "0,0,0"))
                                        (builtin "One Step Simplification" (formula "39"))
                                       (rule "eqSymm" (formula "39") (term "1,0,0,0,0"))
                                       (rule "castedGetAny" (formula "39") (term "1,0,0,1,0,0,0"))
                                       (rule "castedGetAny" (formula "39") (term "0,0,0,0,0,0"))
                                       (rule "castedGetAny" (formula "39") (term "0,1,0,0,0,0"))
                                        (builtin "One Step Simplification" (formula "39"))
                                       (rule "true_left" (formula "39"))
                                       (rule "shift_paren_or" (formula "1") (term "0,0,0,0"))
                                       (rule "commute_or_2" (formula "34") (term "0,0,0"))
                                        (builtin "One Step Simplification" (formula "34"))
                                       (rule "eqSymm" (formula "34") (term "1,0,0,0,0"))
                                       (rule "castedGetAny" (formula "34") (term "1,0,0,1,0,0,0"))
                                       (rule "castedGetAny" (formula "34") (term "0,0,0,0,0,0"))
                                       (rule "castedGetAny" (formula "34") (term "0,1,0,0,0,0"))
                                        (builtin "One Step Simplification" (formula "34"))
                                       (rule "true_left" (formula "34"))
                                       (rule "commute_or_2" (formula "15") (term "0,0,0"))
                                        (builtin "One Step Simplification" (formula "15"))
                                       (rule "eqSymm" (formula "15") (term "1,0,0,0,0"))
                                       (rule "castedGetAny" (formula "15") (term "0,0,0,0,0,0"))
                                       (rule "castedGetAny" (formula "15") (term "1,0,0,1,0,0,0"))
                                       (rule "castedGetAny" (formula "15") (term "0,1,0,0,0,0"))
                                        (builtin "One Step Simplification" (formula "15"))
                                       (rule "true_left" (formula "15"))
                                       (rule "commute_or" (formula "59") (term "0,0,0"))
                                        (builtin "One Step Simplification" (formula "59"))
                                       (rule "shift_paren_or" (formula "60") (term "0"))
                                       (rule "inEqSimp_or_tautInEq3" (formula "60") (term "0,0"))
                                       (rule "inEqSimp_homoInEq1" (formula "60") (term "1,0,0"))
                                       (rule "polySimp_pullOutFactor1" (formula "60") (term "0,1,0,0"))
                                       (rule "add_literals" (formula "60") (term "1,0,1,0,0"))
                                       (rule "times_zero_1" (formula "60") (term "0,1,0,0"))
                                       (rule "leq_literals" (formula "60") (term "1,0,0"))
                                        (builtin "One Step Simplification" (formula "60"))
                                       (rule "true_left" (formula "60"))
                                       (rule "commute_or_2" (formula "28") (term "0,0,0"))
                                        (builtin "One Step Simplification" (formula "28"))
                                       (rule "eqSymm" (formula "28") (term "1,0,0,0,0"))
                                       (rule "castedGetAny" (formula "28") (term "1,0,0,1,0,0,0"))
                                       (rule "castedGetAny" (formula "28") (term "0,0,0,0,0,0"))
                                       (rule "castedGetAny" (formula "28") (term "0,1,0,0,0,0"))
                                        (builtin "One Step Simplification" (formula "28"))
                                       (rule "true_left" (formula "28"))
                                       (rule "commute_and" (formula "6") (term "1,0,0,0"))
                                       (rule "commute_and" (formula "5") (term "1,0,0,0"))
                                       (rule "commute_and" (formula "2") (term "1,0,0,0"))
                                       (rule "commute_and" (formula "1") (term "1,0,0,0"))
                                       (rule "commute_or_2" (formula "31") (term "0,0,0"))
                                        (builtin "One Step Simplification" (formula "31"))
                                       (rule "eqSymm" (formula "31") (term "1,0,0,0,0"))
                                       (rule "castedGetAny" (formula "31") (term "0,0,0,0,0,0"))
                                       (rule "castedGetAny" (formula "31") (term "1,0,0,1,0,0,0"))
                                       (rule "castedGetAny" (formula "31") (term "0,1,0,0,0,0"))
                                        (builtin "One Step Simplification" (formula "31"))
                                       (rule "true_left" (formula "31"))
                                       (rule "cnf_rightDist" (formula "27") (term "0,0,1,0,0,0"))
                                        (builtin "One Step Simplification" (formula "27"))
                                       (rule "commute_or" (formula "4") (term "0,0"))
                                       (rule "shift_paren_or" (formula "29") (term "0,0,0"))
                                        (builtin "One Step Simplification" (formula "29"))
                                       (rule "eqSymm" (formula "29") (term "1,1,0,0,0"))
                                       (rule "castedGetAny" (formula "29") (term "1,0,0,0,0,0,0"))
                                       (rule "castedGetAny" (formula "29") (term "0,0,1,0,0,0"))
                                       (rule "castedGetAny" (formula "29") (term "0,1,1,0,0,0"))
                                        (builtin "One Step Simplification" (formula "29"))
                                       (rule "true_left" (formula "29"))
                                       (rule "shift_paren_or" (formula "26") (term "0,0,0"))
                                        (builtin "One Step Simplification" (formula "26"))
                                       (rule "eqSymm" (formula "26") (term "1,1,0,0,0"))
                                       (rule "castedGetAny" (formula "26") (term "1,0,0,0,0,0,0"))
                                       (rule "castedGetAny" (formula "26") (term "0,0,1,0,0,0"))
                                       (rule "castedGetAny" (formula "26") (term "0,1,1,0,0,0"))
                                        (builtin "One Step Simplification" (formula "26"))
                                       (rule "true_left" (formula "26"))
                                       (rule "cnf_rightDist" (formula "28") (term "0,0,0"))
                                       (rule "shift_paren_or" (formula "17") (term "0,0,0"))
                                        (builtin "One Step Simplification" (formula "17"))
                                       (rule "eqSymm" (formula "17") (term "1,1,0,0,0"))
                                       (rule "castedGetAny" (formula "17") (term "0,0,1,0,0,0"))
                                       (rule "castedGetAny" (formula "17") (term "1,0,0,0,0,0,0"))
                                       (rule "castedGetAny" (formula "17") (term "0,1,1,0,0,0"))
                                        (builtin "One Step Simplification" (formula "17"))
                                       (rule "true_left" (formula "17"))
                                       (rule "cnf_rightDist" (formula "26") (term "0,0,0"))
                                       (rule "shift_paren_or" (formula "12") (term "0,0,0"))
                                        (builtin "One Step Simplification" (formula "12"))
                                       (rule "eqSymm" (formula "12") (term "1,1,0,0,0"))
                                       (rule "castedGetAny" (formula "12") (term "1,0,0,0,0,0,0"))
                                       (rule "castedGetAny" (formula "12") (term "0,0,1,0,0,0"))
                                       (rule "castedGetAny" (formula "12") (term "0,1,1,0,0,0"))
                                        (builtin "One Step Simplification" (formula "12"))
                                       (rule "true_left" (formula "12"))
                                       (rule "cnf_rightDist" (formula "23") (term "0,0,0"))
                                       (rule "cnf_rightDist" (formula "3") (term "0,0"))
                                       (rule "distr_forallAnd" (formula "26") (term "0,0"))
                                       (rule "shift_paren_or" (formula "13") (term "0,0,0"))
                                        (builtin "One Step Simplification" (formula "13"))
                                       (rule "eqSymm" (formula "13") (term "1,1,0,0,0"))
                                       (rule "castedGetAny" (formula "13") (term "0,0,1,0,0,0"))
                                       (rule "castedGetAny" (formula "13") (term "1,0,0,0,0,0,0"))
                                       (rule "castedGetAny" (formula "13") (term "0,1,1,0,0,0"))
                                        (builtin "One Step Simplification" (formula "13"))
                                       (rule "true_left" (formula "13"))
                                       (rule "distr_forallAnd" (formula "24") (term "0,0"))
                                       (rule "cnf_rightDist" (formula "14") (term "0,0,0"))
                                       (rule "shift_paren_or" (formula "53") (term "0,0"))
                                       (rule "inEqSimp_or_tautInEq2" (formula "53") (term "0,0,0"))
                                       (rule "add_literals" (formula "53") (term "1,1,0,0,0"))
                                       (rule "qeq_literals" (formula "53") (term "1,0,0,0"))
                                        (builtin "One Step Simplification" (formula "53"))
                                       (rule "true_left" (formula "53"))
                                       (rule "distr_forallAnd" (formula "22") (term "0,0"))
                                       (rule "distr_forallAnd" (formula "3") (term "0"))
                                       (rule "distr_forallAnd" (formula "25") (term "0"))
                                       (rule "cnf_rightDist" (formula "11") (term "0,0,0"))
                                       (rule "ifthenelse_split" (formula "8") (term "0"))
                                       (branch "o_0.<created>@anon_heap_asList«anonHeapFunction» = TRUE TRUE"
                                          (rule "applyEqReverse" (formula "10") (term "1,0") (ifseqformula "9"))
                                          (rule "applyEqReverse" (formula "82") (term "0") (ifseqformula "9"))
                                          (rule "hideAuxiliaryEq" (formula "9"))
                                          (rule "replace_known_left" (formula "10") (term "1,0,0,0,0") (ifseqformula "8"))
                                           (builtin "One Step Simplification" (formula "10"))
                                          (rule "applyEqReverse" (formula "81") (term "1") (ifseqformula "10"))
                                          (rule "hideAuxiliaryEq" (formula "10"))
                                          (rule "replace_known_left" (formula "9") (term "1,0,0,0") (ifseqformula "8"))
                                           (builtin "One Step Simplification" (formula "9") (ifInst ""  (formula "80")))
                                          (rule "closeFalse" (formula "9"))
                                       )
                                       (branch "o_0.<created>@anon_heap_asList«anonHeapFunction» = TRUE FALSE"
                                          (rule "applyEqReverse" (formula "82") (term "0") (ifseqformula "8"))
                                          (rule "applyEqReverse" (formula "9") (term "1,0") (ifseqformula "8"))
                                          (rule "hideAuxiliaryEq" (formula "8"))
                                          (rule "replace_known_right" (formula "9") (term "1,0,0,0,0") (ifseqformula "63"))
                                           (builtin "One Step Simplification" (formula "9"))
                                          (rule "replace_known_right" (formula "8") (term "1,0,0,0") (ifseqformula "63"))
                                           (builtin "One Step Simplification" (formula "8"))
                                          (rule "replace_known_right" (formula "7") (term "0") (ifseqformula "63"))
                                           (builtin "One Step Simplification" (formula "7"))
                                          (rule "replace_known_left" (formula "9") (term "1,0,0") (ifseqformula "7"))
                                           (builtin "One Step Simplification" (formula "9"))
                                          (rule "applyEqReverse" (formula "81") (term "1") (ifseqformula "9"))
                                          (rule "hideAuxiliaryEq" (formula "9"))
                                          (rule "replace_known_left" (formula "8") (term "1,0,0") (ifseqformula "7"))
                                           (builtin "One Step Simplification" (formula "8") (ifInst ""  (formula "80")))
                                          (rule "closeFalse" (formula "8"))
                                       )
                                    )
                                 )
                              )
                           )
                           (branch "CUT: result_48.<created> = TRUE FALSE"
                               (builtin "One Step Simplification" (formula "62"))
                              (rule "seqGetAlphaCast" (formula "69") (term "0"))
                              (rule "castDel" (formula "69") (term "0"))
                               (builtin "One Step Simplification" (formula "69"))
                              (rule "true_left" (formula "69"))
                              (rule "commute_or" (formula "11") (term "1,0,0,0"))
                              (rule "equalityToSeqGetAndSeqLenLeft" (formula "68") (inst "iv=iv"))
                              (rule "andLeft" (formula "68"))
                              (rule "lenOfSeqSub" (formula "69") (term "1,1,0,0"))
                              (rule "polySimp_elimSub" (formula "69") (term "1,1,1,0,0"))
                              (rule "mul_literals" (formula "69") (term "1,1,1,1,0,0"))
                              (rule "add_zero_right" (formula "69") (term "1,1,1,0,0"))
                              (rule "lenOfSeqSub" (formula "68") (term "0"))
                              (rule "polySimp_elimSub" (formula "68") (term "1,0"))
                              (rule "times_zero_2" (formula "68") (term "1,1,0"))
                              (rule "add_zero_right" (formula "68") (term "1,0"))
                               (builtin "One Step Simplification" (formula "68"))
                              (rule "eqSymm" (formula "68") (term "1"))
                              (rule "inEqSimp_ltToLeq" (formula "69") (term "0,1,1,0,0"))
                              (rule "add_zero_right" (formula "69") (term "0,0,1,1,0,0"))
                              (rule "polySimp_mulComm0" (formula "69") (term "1,0,0,1,1,0,0"))
                              (rule "inEqSimp_ltToLeq" (formula "68") (term "0"))
                              (rule "add_zero_right" (formula "68") (term "0,0"))
                              (rule "polySimp_mulComm0" (formula "68") (term "1,0,0"))
                              (rule "inEqSimp_ltToLeq" (formula "69") (term "1,0,0"))
                              (rule "polySimp_mulComm0" (formula "69") (term "1,0,0,1,0,0"))
                              (rule "inEqSimp_commuteLeq" (formula "69") (term "0,0,0"))
                              (rule "applyEq" (formula "69") (term "0,0,1,0") (ifseqformula "70"))
                               (builtin "One Step Simplification" (formula "69"))
                              (rule "true_left" (formula "69"))
                              (rule "inEqSimp_sepNegMonomial0" (formula "68") (term "0"))
                              (rule "polySimp_mulLiterals" (formula "68") (term "0,0"))
                              (rule "polySimp_elimOne" (formula "68") (term "0,0"))
                              (rule "lenNonNegative" (formula "67") (term "0"))
                              (rule "inEqSimp_commuteLeq" (formula "67"))
                              (rule "applyEq" (formula "67") (term "0") (ifseqformula "68"))
                              (rule "inEqSimp_sepPosMonomial1" (formula "67"))
                              (rule "mul_literals" (formula "67") (term "1"))
                              (rule "inEqSimp_subsumption1" (formula "67") (ifseqformula "57"))
                              (rule "leq_literals" (formula "67") (term "0"))
                               (builtin "One Step Simplification" (formula "67"))
                              (rule "true_left" (formula "67"))
                              (rule "cut_direct" (formula "87") (term "0,0"))
                              (branch "CUT: o_0 = null TRUE"
                                  (builtin "One Step Simplification" (formula "88"))
                                 (rule "false_right" (formula "88"))
                                 (rule "replace_known_left" (formula "5") (term "0,0,0,0") (ifseqformula "1"))
                                  (builtin "One Step Simplification" (formula "5"))
                                 (rule "applyEqReverse" (formula "88") (term "1") (ifseqformula "5"))
                                 (rule "hideAuxiliaryEq" (formula "5"))
                                 (rule "eqSymm" (formula "87"))
                                 (rule "replace_known_left" (formula "3") (term "0,0,0,0") (ifseqformula "1"))
                                  (builtin "One Step Simplification" (formula "3"))
                                 (rule "applyEqReverse" (formula "87") (term "1") (ifseqformula "3"))
                                 (rule "applyEqReverse" (formula "4") (term "2,0") (ifseqformula "3"))
                                 (rule "hideAuxiliaryEq" (formula "3"))
                                 (rule "eqSymm" (formula "86"))
                                 (rule "replace_known_left" (formula "3") (term "0,0,0,0") (ifseqformula "1"))
                                  (builtin "One Step Simplification" (formula "3") (ifInst ""  (formula "86")))
                                 (rule "closeFalse" (formula "3"))
                              )
                              (branch "CUT: o_0 = null FALSE"
                                  (builtin "One Step Simplification" (formula "88"))
                                 (rule "notRight" (formula "88"))
                                 (rule "replace_known_right" (formula "4") (term "0,0,0,0") (ifseqformula "88"))
                                  (builtin "One Step Simplification" (formula "4"))
                                 (rule "replace_known_right" (formula "2") (term "0,0,0,0") (ifseqformula "88"))
                                  (builtin "One Step Simplification" (formula "2"))
                                 (rule "replace_known_right" (formula "5") (term "0,0,0,0") (ifseqformula "88"))
                                  (builtin "One Step Simplification" (formula "5"))
                                 (rule "replace_known_right" (formula "3") (term "0,0,0,0") (ifseqformula "88"))
                                  (builtin "One Step Simplification" (formula "3"))
                                 (rule "ifthenelse_negated" (formula "4") (term "0"))
                                 (rule "ifthenelse_negated" (formula "2") (term "0"))
                                 (rule "ifthenelse_negated" (formula "5") (term "0"))
                                 (rule "ifthenelse_negated" (formula "3") (term "0"))
                                 (rule "commute_or_2" (formula "15") (term "0,0,0"))
                                 (rule "commute_or_2" (formula "25") (term "0,0,0"))
                                 (rule "commute_or_2" (formula "36") (term "0,0,0"))
                                 (rule "commute_or" (formula "10") (term "1,0,0,0"))
                                 (rule "commute_or" (formula "6") (term "1,0,0,0"))
                                 (rule "commute_or" (formula "28") (term "1,0,0,0"))
                                 (rule "commute_or" (formula "7") (term "1,0,0,0"))
                                 (rule "commute_or_2" (formula "11") (term "0,0,0"))
                                 (rule "commute_or_2" (formula "14") (term "0,0,0"))
                                 (rule "commute_or" (formula "24") (term "1,0,0,0"))
                                 (rule "commute_or_2" (formula "59") (term "0,1,0"))
                                 (rule "commute_or" (formula "49") (term "0,0"))
                                 (rule "commute_or" (formula "41") (term "0,0"))
                                 (rule "commute_or" (formula "34") (term "0,0"))
                                 (rule "commute_or" (formula "69"))
                                 (rule "inEqSimp_or_weaken1" (formula "69"))
                                 (rule "add_zero_right" (formula "69") (term "1,0"))
                                  (builtin "One Step Simplification" (formula "69") (ifInst ""  (formula "58")))
                                 (rule "true_left" (formula "69"))
                                 (rule "cnf_rightDist" (formula "31") (term "0,0,0,0"))
                                  (builtin "One Step Simplification" (formula "31"))
                                 (rule "commute_or_2" (formula "23") (term "0,0,0"))
                                 (rule "commute_or_2" (formula "35") (term "0,0,0"))
                                 (rule "commute_or_2" (formula "13") (term "0,0,0"))
                                 (rule "commute_or" (formula "6") (term "0,0,0,0"))
                                 (rule "commute_or_2" (formula "32") (term "0,0,0"))
                                 (rule "commute_or" (formula "7") (term "0,0,0,0"))
                                 (rule "commute_or_2" (formula "9") (term "0,0,0"))
                                 (rule "commute_or_2" (formula "26") (term "0,0,0"))
                                 (rule "commute_or_2" (formula "30") (term "0,0,0"))
                                 (rule "commute_or_2" (formula "27") (term "0,0,0"))
                                 (rule "commute_or_2" (formula "12") (term "0,0,0"))
                                 (rule "cnf_rightDist" (formula "10") (term "0,0,0,0"))
                                  (builtin "One Step Simplification" (formula "10"))
                                 (rule "cnf_rightDist" (formula "28") (term "0,0,0,0"))
                                 (rule "cnf_rightDist" (formula "33") (term "0,0"))
                                 (rule "distr_forallAnd" (formula "33") (term "0"))
                                 (rule "distr_forallAnd" (formula "33"))
                                 (rule "andLeft" (formula "33"))
                                 (rule "commute_or_2" (formula "50") (term "0"))
                                 (rule "commute_or_2" (formula "42") (term "0"))
                                 (rule "shift_paren_or" (formula "8") (term "0,0,0,0"))
                                 (rule "commute_or_2" (formula "5") (term "0,0"))
                                 (rule "cnf_rightDist" (formula "24") (term "0,0,0,0"))
                                 (rule "shift_paren_or" (formula "29") (term "0,0,0,0"))
                                 (rule "cnf_rightDist" (formula "60") (term "1,1,0"))
                                 (rule "commute_or_2" (formula "4") (term "0,0,0"))
                                 (rule "commute_and" (formula "8") (term "1,0,0,0"))
                                 (rule "commute_and" (formula "29") (term "1,0,0,0"))
                                 (rule "commute_or" (formula "34") (term "0,0"))
                                 (rule "commute_or_2" (formula "6") (term "0,0,0"))
                                 (rule "commute_or_2" (formula "7") (term "0,0,0"))
                                 (rule "commute_or" (formula "28") (term "0,0,0"))
                                 (rule "shift_paren_or" (formula "15") (term "0,0,0,0"))
                                 (rule "commute_or" (formula "31") (term "0,0,0,0"))
                                 (rule "commute_or" (formula "25") (term "1,0,0,0,0"))
                                 (rule "commute_or" (formula "37") (term "1,0,0,0,0"))
                                 (rule "commute_or" (formula "24") (term "0,0,0"))
                                 (rule "commute_or" (formula "11") (term "1,0,0,0,0"))
                                 (rule "shift_paren_or" (formula "14") (term "0,0,0,0"))
                                 (rule "Class_axiom_0_in_de_polyas_core3_open_cred_CredTool" (inst "seq=seq") (inst "i=i_2") (inst "str=str") (inst "seq_0=seq_0") (inst "i_0=i_0") (inst "obj=obj") (inst "seq_1=seq_1") (inst "i_1=i_1") (inst "sv_heap=anon_heap_add<<anonHeapFunction>>"))
                                 (rule "andLeft" (formula "1"))
                                 (rule "andLeft" (formula "1"))
                                 (rule "castedGetAny" (formula "3") (term "0,1,1,0,0,0"))
                                 (rule "castedGetAny" (formula "1") (term "0,0,0,1,0,1,0,0"))
                                 (rule "castedGetAny" (formula "1") (term "0,0,0,0,0"))
                                 (rule "castedGetAny" (formula "1") (term "0,0,1,1,0,1,0,0"))
                                 (rule "castedGetAny" (formula "1") (term "0,0,0,0,1,0,0"))
                                 (rule "castedGetAny" (formula "2") (term "0,1,1,0,0,0"))
                                 (rule "nnf_imp2or" (formula "1") (term "0,0"))
                                  (builtin "One Step Simplification" (formula "1"))
                                 (rule "nnf_imp2or" (formula "3") (term "0,0,0"))
                                 (rule "nnf_imp2or" (formula "2") (term "0,0,0"))
                                 (rule "nnf_imp2or" (formula "3") (term "1,0,0,0"))
                                 (rule "nnf_notAnd" (formula "3") (term "0,0,0,0"))
                                  (builtin "One Step Simplification" (formula "3"))
                                 (rule "nnf_notAnd" (formula "2") (term "0,0,0,0"))
                                  (builtin "One Step Simplification" (formula "2"))
                                 (rule "nnf_imp2or" (formula "2") (term "1,0,0,0"))
                                 (rule "nnf_notOr" (formula "3") (term "0,0,0,0,0"))
                                 (rule "nnf_notOr" (formula "2") (term "0,0,0,0,0"))
                                 (rule "Class_axiom_0_in_de_polyas_core3_open_cred_CredTool" (inst "seq=seq") (inst "i=i_2") (inst "str=str") (inst "seq_0=seq_0") (inst "i_0=i_0") (inst "obj=obj") (inst "seq_1=seq_1") (inst "i_1=i_1") (inst "sv_heap=anon(heapAfter_get,
     singleton(result_46, java.util.Collection::$seq),
     anon_heap_add<<anonHeapFunction>>)"))
                                  (builtin "One Step Simplification" (formula "1"))
                                 (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,1,0,0,0,0,0,1") (ifseqformula "66"))
                                  (builtin "One Step Simplification" (formula "1"))
                                 (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,1,0,0,0,0,0,1,0") (ifseqformula "66"))
                                  (builtin "One Step Simplification" (formula "1"))
                                 (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,0,0,1,0,0,0,0,0,1") (ifseqformula "56"))
                                 (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,0,0,0,1,0,0,0,0,0,1") (ifseqformula "49"))
                                 (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,0,0,1,0,0,0,0,0,1,0") (ifseqformula "56"))
                                 (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,0,0,0,1,0,0,0,0,0,1,0") (ifseqformula "49"))
                                 (rule "andLeft" (formula "1"))
                                 (rule "andLeft" (formula "1"))
                                 (rule "castedGetAny" (formula "3") (term "0,1,1,0,0,0"))
                                 (rule "castedGetAny" (formula "1") (term "0,0,0,0,0"))
                                 (rule "castedGetAny" (formula "1") (term "0,0,0,1,0,1,0,0"))
                                 (rule "castedGetAny" (formula "1") (term "0,0,0,0,1,0,0"))
                                 (rule "castedGetAny" (formula "2") (term "0,1,1,0,0,0"))
                                 (rule "castedGetAny" (formula "1") (term "0,0,1,1,0,1,0,0"))
                                 (rule "nnf_imp2or" (formula "1") (term "0,0"))
                                  (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "4")))
                                 (rule "true_left" (formula "1"))
                                 (rule "nnf_imp2or" (formula "2") (term "0,0,0"))
                                 (rule "nnf_imp2or" (formula "1") (term "0,0,0"))
                                 (rule "nnf_imp2or" (formula "2") (term "1,0,0,0"))
                                 (rule "nnf_notAnd" (formula "2") (term "0,0,0,0"))
                                  (builtin "One Step Simplification" (formula "2"))
                                 (rule "nnf_imp2or" (formula "1") (term "1,0,0,0"))
                                 (rule "nnf_notAnd" (formula "1") (term "0,0,0,0"))
                                  (builtin "One Step Simplification" (formula "1"))
                                 (rule "nnf_notOr" (formula "2") (term "0,0,0,0,0"))
                                 (rule "nnf_notOr" (formula "1") (term "0,0,0,0,0"))
                                 (rule "nnf_notOr" (formula "2") (term "1,0,0,0,0,0"))
                                 (rule "nnf_notOr" (formula "1") (term "1,0,0,0,0,0"))
                                 (rule "nnf_notOr" (formula "2") (term "0,1,0,0,0,0,0"))
                                 (rule "nnf_notOr" (formula "1") (term "0,1,0,0,0,0,0"))
                                 (rule "nnf_notOr" (formula "2") (term "0,0,1,0,0,0,0,0"))
                                 (rule "nnf_notOr" (formula "1") (term "0,0,1,0,0,0,0,0"))
                                 (rule "nnf_notOr" (formula "2") (term "0,0,0,1,0,0,0,0,0"))
                                 (rule "nnf_notOr" (formula "1") (term "0,0,0,1,0,0,0,0,0"))
                                 (rule "nnf_notOr" (formula "2") (term "0,0,0,0,1,0,0,0,0,0"))
                                 (rule "nnf_notOr" (formula "1") (term "0,0,0,0,1,0,0,0,0,0"))
                                 (rule "Class_axiom_0_in_de_polyas_core3_open_cred_CredTool" (inst "seq=seq") (inst "i=i_2") (inst "str=str") (inst "seq_0=seq_0") (inst "i_0=i_0") (inst "obj=obj") (inst "seq_1=seq_1") (inst "i_1=i_1") (inst "sv_heap=heapAfter_add"))
                                 (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "1,0,0,0,0,0,1") (ifseqformula "73"))
                                 (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,1,0,0,0,0,0,1") (ifseqformula "68"))
                                  (builtin "One Step Simplification" (formula "1"))
                                 (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "1,0,0,0,0,0,1,0") (ifseqformula "73"))
                                 (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,1,0,0,0,0,0,1,0") (ifseqformula "68"))
                                  (builtin "One Step Simplification" (formula "1"))
                                 (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,0,0,1,0,0,0,0,0,1") (ifseqformula "58"))
                                 (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,0,0,0,1,0,0,0,0,0,1") (ifseqformula "51"))
                                 (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,0,0,1,0,0,0,0,0,1,0") (ifseqformula "58"))
                                 (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,0,0,0,1,0,0,0,0,0,1,0") (ifseqformula "51"))
                                 (rule "andLeft" (formula "1"))
                                 (rule "andLeft" (formula "1"))
                                 (rule "castedGetAny" (formula "3") (term "0,1,1,0,0,0"))
                                 (rule "castedGetAny" (formula "1") (term "0,0,0,0,0"))
                                 (rule "castedGetAny" (formula "1") (term "0,0,0,1,0,1,0,0"))
                                 (rule "castedGetAny" (formula "1") (term "0,0,1,1,0,1,0,0"))
                                 (rule "castedGetAny" (formula "1") (term "0,0,0,0,1,0,0"))
                                 (rule "castedGetAny" (formula "2") (term "0,1,1,0,0,0"))
                                 (rule "nnf_imp2or" (formula "1") (term "0,0"))
                                  (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "6")))
                                 (rule "true_left" (formula "1"))
                                 (rule "nnf_imp2or" (formula "2") (term "0,0,0"))
                                 (rule "nnf_imp2or" (formula "1") (term "0,0,0"))
                                 (rule "nnf_notAnd" (formula "2") (term "0,0,0,0"))
                                  (builtin "One Step Simplification" (formula "2"))
                                 (rule "nnf_notAnd" (formula "1") (term "0,0,0,0"))
                                  (builtin "One Step Simplification" (formula "1"))
                                 (rule "nnf_imp2or" (formula "2") (term "1,0,0,0"))
                                 (rule "nnf_imp2or" (formula "1") (term "1,0,0,0"))
                                 (rule "nnf_notOr" (formula "2") (term "0,0,0,0,0"))
                                 (rule "nnf_notOr" (formula "1") (term "0,0,0,0,0"))
                                 (rule "nnf_notOr" (formula "2") (term "1,0,0,0,0,0"))
                                 (rule "nnf_notOr" (formula "1") (term "1,0,0,0,0,0"))
                                 (rule "nnf_notOr" (formula "2") (term "0,1,0,0,0,0,0"))
                                 (rule "nnf_notOr" (formula "1") (term "0,1,0,0,0,0,0"))
                                 (rule "nnf_notOr" (formula "2") (term "0,0,1,0,0,0,0,0"))
                                 (rule "nnf_notOr" (formula "1") (term "0,0,1,0,0,0,0,0"))
                                 (rule "nnf_notOr" (formula "2") (term "0,0,0,1,0,0,0,0,0"))
                                 (rule "nnf_notOr" (formula "1") (term "0,0,0,1,0,0,0,0,0"))
                                 (rule "nnf_notOr" (formula "2") (term "0,0,0,0,1,0,0,0,0,0"))
                                 (rule "nnf_notOr" (formula "1") (term "0,0,0,0,1,0,0,0,0,0"))
                                 (rule "shift_paren_or" (formula "15") (term "0,0,0"))
                                  (builtin "One Step Simplification" (formula "15"))
                                 (rule "eqSymm" (formula "15") (term "1,0,0,0"))
                                 (rule "castedGetAny" (formula "15") (term "0,1,0,0,0,0"))
                                 (rule "castedGetAny" (formula "15") (term "1,0,0,0,0,0,0,0"))
                                 (rule "castedGetAny" (formula "15") (term "0,1,0,0,0"))
                                  (builtin "One Step Simplification" (formula "15"))
                                 (rule "true_left" (formula "15"))
                                 (rule "cnf_rightDist" (formula "64") (term "0"))
                                 (rule "commute_and" (formula "19") (term "1,0,0,0"))
                                 (rule "commute_or_2" (formula "13") (term "0,0,0,0"))
                                 (rule "shift_paren_or" (formula "27") (term "0,0,0,0"))
                                 (rule "commute_and" (formula "29") (term "1,0,0,0"))
                                 (rule "shift_paren_or" (formula "40") (term "0,0,0,0"))
                                 (rule "commute_and" (formula "41") (term "1,0,0,0"))
                                 (rule "distr_forallAnd" (formula "64"))
                                 (rule "andLeft" (formula "64"))
                                 (rule "commute_or_2" (formula "10") (term "0,0,0,0"))
                                 (rule "shift_paren_or" (formula "17") (term "0,0,0,0"))
                                 (rule "commute_or_2" (formula "33") (term "0,0,0,0"))
                                 (rule "shift_paren_or" (formula "36") (term "0,0,0,0"))
                                 (rule "shift_paren_or" (formula "14") (term "0,0,0,0"))
                                 (rule "commute_and" (formula "15") (term "1,0,0,0"))
                                 (rule "cnf_rightDist" (formula "37") (term "0,0"))
                                 (rule "commute_and" (formula "18") (term "1,0,0,0"))
                                 (rule "shift_paren_or" (formula "30") (term "0,0,0,0"))
                                 (rule "shift_paren_or" (formula "34") (term "0,0,0,0"))
                                 (rule "shift_paren_or" (formula "31") (term "0,0,0,0"))
                                 (rule "shift_paren_or" (formula "16") (term "0,0,0,0"))
                                 (rule "commute_or_2" (formula "19") (term "0,0,0,0"))
                                 (rule "shift_paren_or" (formula "35") (term "0,0,0"))
                                  (builtin "One Step Simplification" (formula "35"))
                                 (rule "eqSymm" (formula "35") (term "1,0,0,0"))
                                 (rule "castedGetAny" (formula "35") (term "1,0,0,1,0,0,0,0"))
                                 (rule "castedGetAny" (formula "35") (term "0,0,0,0,0,0"))
                                 (rule "castedGetAny" (formula "35") (term "0,1,0,0,0"))
                                  (builtin "One Step Simplification" (formula "35"))
                                 (rule "true_left" (formula "35"))
                                 (rule "distr_forallAnd" (formula "36") (term "0"))
                                 (rule "commute_or_2" (formula "18") (term "0,0,0,0"))
                                 (rule "commute_and" (formula "39") (term "1,0,0,0"))
                                 (rule "commute_and" (formula "35") (term "1,0,0,0"))
                                 (rule "commute_and" (formula "14") (term "1,0,0,0"))
                                 (rule "commute_and" (formula "30") (term "1,0,0,0"))
                                 (rule "commute_and" (formula "34") (term "1,0,0,0"))
                                 (rule "shift_paren_or" (formula "11") (term "0,0,0,0"))
                                 (rule "shift_paren_or" (formula "12") (term "0,0,0,0"))
                                 (rule "commute_or" (formula "32") (term "1,1,0,0,0"))
                                 (rule "distr_forallAnd" (formula "36"))
                                 (rule "andLeft" (formula "36"))
                                 (rule "commute_or" (formula "5") (term "1,0,0,0"))
                                 (rule "shift_paren_or" (formula "29") (term "0,0,0,0"))
                                 (rule "shift_paren_or" (formula "41") (term "0,0,0,0"))
                                 (rule "commute_or" (formula "28") (term "1,1,0,0,0"))
                                 (rule "commute_or" (formula "4") (term "1,0,0,0"))
                                 (rule "shift_paren_or" (formula "15") (term "0,0,0,0"))
                                 (rule "commute_or" (formula "5") (term "0,0,0,0"))
                                 (rule "commute_or" (formula "4") (term "0,0,0,0"))
                                 (rule "commute_and" (formula "31") (term "0,1,0,0,0"))
                                 (rule "commute_and" (formula "27") (term "0,0,1,0,0,0"))
                                 (rule "commute_or" (formula "2") (term "1,0,0,0"))
                                 (rule "commute_or" (formula "1") (term "1,0,0,0"))
                                 (rule "commute_or" (formula "65") (term "0"))
                                 (rule "commute_or" (formula "2") (term "0,0,0,0"))
                                 (rule "commute_or" (formula "1") (term "0,0,0,0"))
                                 (rule "cnf_rightDist" (formula "32") (term "0,1,0,0,0"))
                                  (builtin "One Step Simplification" (formula "32"))
                                 (rule "commute_and" (formula "17") (term "0,0,0,1,0,0,0"))
                                 (rule "cnf_rightDist" (formula "28") (term "0,1,0,0,0"))
                                 (rule "commute_and" (formula "11") (term "0,0,1,0,0,0"))
                                 (rule "commute_and" (formula "12") (term "0,0,1,0,0,0"))
                                 (rule "commute_and" (formula "16") (term "0,0,0,1,0,0,0"))
                                 (rule "cut_direct" (formula "92") (term "1"))
                                 (branch "CUT: o_0 = result_46 TRUE"
                                     (builtin "One Step Simplification" (formula "93"))
                                    (rule "applyEq" (formula "11") (term "1,2,0") (ifseqformula "1"))
                                    (rule "applyEq" (formula "10") (term "1,0,1,0,0") (ifseqformula "1"))
                                    (rule "applyEq" (formula "7") (term "1,0,1") (ifseqformula "1"))
                                    (rule "applyEq" (formula "11") (term "1,0,1,0,0,0,0,0") (ifseqformula "1"))
                                    (rule "applyEq" (formula "11") (term "1,0,1,0,0,0,0") (ifseqformula "1"))
                                    (rule "replace_known_left" (formula "11") (term "1,0,0,0,0") (ifseqformula "52"))
                                     (builtin "One Step Simplification" (formula "11"))
                                    (rule "applyEqReverse" (formula "95") (term "1") (ifseqformula "11"))
                                    (rule "hideAuxiliaryEq" (formula "11"))
                                    (rule "eqSymm" (formula "94"))
                                    (rule "applyEq" (formula "8") (term "1,2,0") (ifseqformula "1"))
                                    (rule "applyEq" (formula "7") (term "1,0,1,0") (ifseqformula "1"))
                                    (rule "replace_known_left" (formula "7") (term "1,0") (ifseqformula "51"))
                                     (builtin "One Step Simplification" (formula "7"))
                                    (rule "true_left" (formula "7"))
                                    (rule "applyEq" (formula "9") (term "1,0,1,0,0,0,0") (ifseqformula "1"))
                                    (rule "applyEq" (formula "9") (term "1,0,0,0,0,0,0") (ifseqformula "1"))
                                    (rule "replace_known_right" (formula "9") (term "0,0,0,0,0") (ifseqformula "79"))
                                     (builtin "One Step Simplification" (formula "9"))
                                    (rule "applyEq" (formula "8") (term "1,0,0,0,0") (ifseqformula "1"))
                                    (rule "replace_known_right" (formula "8") (term "0,0,0") (ifseqformula "79"))
                                     (builtin "One Step Simplification" (formula "8"))
                                    (rule "applyEq" (formula "7") (term "1,0,0,0") (ifseqformula "1"))
                                    (rule "replace_known_right" (formula "7") (term "0,0") (ifseqformula "79"))
                                     (builtin "One Step Simplification" (formula "7"))
                                    (rule "applyEqReverse" (formula "8") (term "1,0") (ifseqformula "7"))
                                    (rule "hideAuxiliaryEq" (formula "7"))
                                    (rule "applyEq" (formula "91") (term "0") (ifseqformula "1"))
                                    (rule "applyEq" (formula "8") (term "1,0,1,0,0,0") (ifseqformula "1"))
                                    (rule "replace_known_left" (formula "8") (term "1,0,0,0") (ifseqformula "49"))
                                     (builtin "One Step Simplification" (formula "8"))
                                    (rule "applyEqReverse" (formula "91") (term "0") (ifseqformula "8"))
                                     (builtin "One Step Simplification" (formula "91"))
                                    (rule "closeTrue" (formula "91"))
                                 )
                                 (branch "CUT: o_0 = result_46 FALSE"
                                     (builtin "One Step Simplification" (formula "93"))
                                    (rule "false_right" (formula "93"))
                                    (rule "shift_paren_or" (formula "64") (term "0"))
                                    (rule "ifthenelse_split" (formula "7") (term "0"))
                                    (branch "o_0.<created> = TRUE TRUE"
                                       (rule "applyEqReverse" (formula "9") (term "1,0") (ifseqformula "8"))
                                       (rule "hideAuxiliaryEq" (formula "8"))
                                       (rule "replace_known_left" (formula "9") (term "0,0,0,0,0") (ifseqformula "7"))
                                        (builtin "One Step Simplification" (formula "9"))
                                       (rule "applyEqReverse" (formula "10") (term "1,0") (ifseqformula "9"))
                                       (rule "hideAuxiliaryEq" (formula "9"))
                                       (rule "replace_known_left" (formula "9") (term "0,0,0,0,0,0") (ifseqformula "7"))
                                        (builtin "One Step Simplification" (formula "9") (ifInst ""  (formula "93")))
                                       (rule "closeFalse" (formula "9"))
                                    )
                                    (branch "o_0.<created> = TRUE FALSE"
                                       (rule "applyEqReverse" (formula "8") (term "1,0") (ifseqformula "7"))
                                       (rule "hideAuxiliaryEq" (formula "7"))
                                       (rule "replace_known_right" (formula "7") (term "0,0,0") (ifseqformula "76"))
                                        (builtin "One Step Simplification" (formula "7"))
                                       (rule "replace_known_right" (formula "9") (term "0,0,0,0,0,0") (ifseqformula "76"))
                                        (builtin "One Step Simplification" (formula "9"))
                                       (rule "replace_known_right" (formula "8") (term "0,0,0,0,0") (ifseqformula "76"))
                                        (builtin "One Step Simplification" (formula "8"))
                                       (rule "replace_known_right" (formula "6") (term "0,0") (ifseqformula "76"))
                                        (builtin "One Step Simplification" (formula "6"))
                                       (rule "shift_paren_and" (formula "3") (term "0,1,0,0"))
                                        (builtin "One Step Simplification" (formula "3"))
                                       (rule "commute_or" (formula "36") (term "0,0"))
                                       (rule "seqGetAlphaCast" (formula "69") (term "0"))
                                       (rule "castedGetAny" (formula "69") (term "0"))
                                        (builtin "One Step Simplification" (formula "69"))
                                       (rule "true_left" (formula "69"))
                                       (rule "commute_or_2" (formula "63") (term "0,0"))
                                        (builtin "One Step Simplification" (formula "63"))
                                       (rule "commute_or_2" (formula "5") (term "0,0,0"))
                                       (rule "commute_or_2" (formula "4") (term "0,0,0"))
                                       (rule "cnf_rightDist" (formula "12") (term "0,0,0"))
                                       (rule "distr_forallAnd" (formula "12") (term "0,0"))
                                       (rule "distr_forallAnd" (formula "12") (term "0"))
                                       (rule "distr_forallAnd" (formula "12"))
                                       (rule "andLeft" (formula "12"))
                                       (rule "commute_or" (formula "65") (term "0,1,0"))
                                       (rule "commute_or_2" (formula "2") (term "0,0,0"))
                                       (rule "commute_or_2" (formula "1") (term "0,0,0"))
                                       (rule "cnf_rightDist" (formula "33") (term "0,0,0"))
                                       (rule "distr_forallAnd" (formula "33") (term "0,0"))
                                       (rule "distr_forallAnd" (formula "33") (term "0"))
                                       (rule "distr_forallAnd" (formula "33"))
                                       (rule "andLeft" (formula "33"))
                                       (rule "cnf_rightDist" (formula "19") (term "0,0,0"))
                                       (rule "distr_forallAnd" (formula "19") (term "0,0"))
                                       (rule "distr_forallAnd" (formula "19") (term "0"))
                                       (rule "distr_forallAnd" (formula "19"))
                                       (rule "andLeft" (formula "19"))
                                       (rule "cnf_rightDist" (formula "18") (term "0,0,0"))
                                       (rule "distr_forallAnd" (formula "18") (term "0,0"))
                                       (rule "distr_forallAnd" (formula "18") (term "0"))
                                       (rule "distr_forallAnd" (formula "18"))
                                       (rule "andLeft" (formula "18"))
                                       (rule "cnf_rightDist" (formula "41") (term "0,0,0"))
                                       (rule "distr_forallAnd" (formula "41") (term "0,0"))
                                       (rule "distr_forallAnd" (formula "41") (term "0"))
                                       (rule "distr_forallAnd" (formula "41"))
                                       (rule "andLeft" (formula "41"))
                                       (rule "cnf_rightDist" (formula "36") (term "0,0,0"))
                                       (rule "distr_forallAnd" (formula "36") (term "0,0"))
                                       (rule "distr_forallAnd" (formula "36") (term "0"))
                                       (rule "distr_forallAnd" (formula "36"))
                                       (rule "andLeft" (formula "36"))
                                       (rule "cnf_rightDist" (formula "14") (term "0,0,0"))
                                       (rule "distr_forallAnd" (formula "14") (term "0,0"))
                                       (rule "distr_forallAnd" (formula "14") (term "0"))
                                       (rule "distr_forallAnd" (formula "14"))
                                       (rule "andLeft" (formula "14"))
                                       (rule "cnf_rightDist" (formula "31") (term "0,0,0"))
                                       (rule "distr_forallAnd" (formula "31") (term "0,0"))
                                       (rule "distr_forallAnd" (formula "31") (term "0"))
                                       (rule "distr_forallAnd" (formula "31"))
                                       (rule "andLeft" (formula "31"))
                                       (rule "cnf_rightDist" (formula "35") (term "0,0,0"))
                                       (rule "distr_forallAnd" (formula "35") (term "0,0"))
                                       (rule "distr_forallAnd" (formula "35") (term "0"))
                                       (rule "distr_forallAnd" (formula "35"))
                                       (rule "andLeft" (formula "35"))
                                       (rule "shift_paren_or" (formula "65") (term "0,0"))
                                       (rule "cnf_rightDist" (formula "30") (term "0,0,0"))
                                       (rule "distr_forallAnd" (formula "30") (term "0,0"))
                                       (rule "distr_forallAnd" (formula "30") (term "0"))
                                       (rule "distr_forallAnd" (formula "30"))
                                       (rule "andLeft" (formula "30"))
                                       (rule "commute_or_2" (formula "12") (term "0,0,0"))
                                        (builtin "One Step Simplification" (formula "12"))
                                       (rule "eqSymm" (formula "12") (term "1,0,0,0,0"))
                                       (rule "castedGetAny" (formula "12") (term "0,0,0,0,0,0"))
                                       (rule "castedGetAny" (formula "12") (term "1,0,0,1,0,0,0"))
                                       (rule "castedGetAny" (formula "12") (term "0,1,0,0,0,0"))
                                        (builtin "One Step Simplification" (formula "12"))
                                       (rule "true_left" (formula "12"))
                                       (rule "cnf_rightDist" (formula "41") (term "0,0,0"))
                                       (rule "distr_forallAnd" (formula "41") (term "0,0"))
                                       (rule "distr_forallAnd" (formula "41") (term "0"))
                                       (rule "distr_forallAnd" (formula "41"))
                                       (rule "andLeft" (formula "41"))
                                       (rule "cnf_rightDist" (formula "14") (term "0,0,0"))
                                       (rule "distr_forallAnd" (formula "14") (term "0,0"))
                                       (rule "distr_forallAnd" (formula "14") (term "0"))
                                       (rule "distr_forallAnd" (formula "14"))
                                       (rule "andLeft" (formula "14"))
                                       (rule "commute_or" (formula "32") (term "0,1,0,0,0"))
                                       (rule "cnf_rightDist" (formula "31") (term "0,0,0"))
                                       (rule "distr_forallAnd" (formula "31") (term "0,0"))
                                       (rule "distr_forallAnd" (formula "31") (term "0"))
                                       (rule "distr_forallAnd" (formula "31"))
                                       (rule "andLeft" (formula "31"))
                                       (rule "cnf_rightDist" (formula "27") (term "0,0,0"))
                                       (rule "distr_forallAnd" (formula "27") (term "0,0"))
                                       (rule "distr_forallAnd" (formula "27") (term "0"))
                                       (rule "distr_forallAnd" (formula "27"))
                                       (rule "andLeft" (formula "27"))
                                       (rule "commute_or_2" (formula "35") (term "0,0,0"))
                                        (builtin "One Step Simplification" (formula "35"))
                                       (rule "eqSymm" (formula "35") (term "1,0,0,0,0"))
                                       (rule "castedGetAny" (formula "35") (term "0,0,0,0,0,0"))
                                       (rule "castedGetAny" (formula "35") (term "1,0,0,1,0,0,0"))
                                       (rule "castedGetAny" (formula "35") (term "0,1,0,0,0,0"))
                                        (builtin "One Step Simplification" (formula "35"))
                                       (rule "true_left" (formula "35"))
                                       (rule "cnf_rightDist" (formula "66") (term "0"))
                                       (rule "distr_forallAnd" (formula "66"))
                                       (rule "andLeft" (formula "66"))
                                       (rule "commute_or_2" (formula "18") (term "0,0,0"))
                                        (builtin "One Step Simplification" (formula "18"))
                                       (rule "eqSymm" (formula "18") (term "1,0,0,0,0"))
                                       (rule "castedGetAny" (formula "18") (term "0,0,0,0,0,0"))
                                       (rule "castedGetAny" (formula "18") (term "1,0,0,1,0,0,0"))
                                       (rule "castedGetAny" (formula "18") (term "0,1,0,0,0,0"))
                                        (builtin "One Step Simplification" (formula "18"))
                                       (rule "true_left" (formula "18"))
                                       (rule "cnf_rightDist" (formula "16") (term "0,0,0"))
                                       (rule "distr_forallAnd" (formula "16") (term "0,0"))
                                       (rule "distr_forallAnd" (formula "16") (term "0"))
                                       (rule "distr_forallAnd" (formula "16"))
                                       (rule "andLeft" (formula "16"))
                                       (rule "cnf_rightDist" (formula "3") (term "0,0"))
                                       (rule "distr_forallAnd" (formula "3") (term "0"))
                                       (rule "distr_forallAnd" (formula "3"))
                                       (rule "andLeft" (formula "3"))
                                       (rule "cnf_rightDist" (formula "11") (term "0,0,0"))
                                       (rule "distr_forallAnd" (formula "11") (term "0,0"))
                                       (rule "distr_forallAnd" (formula "11") (term "0"))
                                       (rule "distr_forallAnd" (formula "11"))
                                       (rule "andLeft" (formula "11"))
                                       (rule "commute_or_2" (formula "20") (term "0,0,0"))
                                        (builtin "One Step Simplification" (formula "20"))
                                       (rule "eqSymm" (formula "20") (term "1,0,0,0,0"))
                                       (rule "castedGetAny" (formula "20") (term "0,0,0,0,0,0"))
                                       (rule "castedGetAny" (formula "20") (term "1,0,0,1,0,0,0"))
                                       (rule "castedGetAny" (formula "20") (term "0,1,0,0,0,0"))
                                        (builtin "One Step Simplification" (formula "20"))
                                       (rule "true_left" (formula "20"))
                                       (rule "cnf_rightDist" (formula "13") (term "0,0,0"))
                                       (rule "distr_forallAnd" (formula "13") (term "0,0"))
                                       (rule "distr_forallAnd" (formula "13") (term "0"))
                                       (rule "distr_forallAnd" (formula "13"))
                                       (rule "andLeft" (formula "13"))
                                       (rule "cnf_rightDist" (formula "18") (term "0,0,0"))
                                       (rule "distr_forallAnd" (formula "18") (term "0,0"))
                                       (rule "distr_forallAnd" (formula "18") (term "0"))
                                       (rule "distr_forallAnd" (formula "18"))
                                       (rule "andLeft" (formula "18"))
                                       (rule "shift_paren_or" (formula "15") (term "0,0,0"))
                                        (builtin "One Step Simplification" (formula "15"))
                                       (rule "eqSymm" (formula "15") (term "1,1,0,0,0"))
                                       (rule "castedGetAny" (formula "15") (term "0,0,0,0,0,0"))
                                       (rule "castedGetAny" (formula "15") (term "0,0,1,0,0,0"))
                                       (rule "castedGetAny" (formula "15") (term "0,1,1,0,0,0"))
                                        (builtin "One Step Simplification" (formula "15"))
                                       (rule "true_left" (formula "15"))
                                       (rule "commute_or_2" (formula "42") (term "0,0,0"))
                                        (builtin "One Step Simplification" (formula "42"))
                                       (rule "eqSymm" (formula "42") (term "1,0,0,0,0"))
                                       (rule "castedGetAny" (formula "42") (term "1,0,0,1,0,0,0"))
                                       (rule "castedGetAny" (formula "42") (term "0,0,0,0,0,0"))
                                       (rule "castedGetAny" (formula "42") (term "0,1,0,0,0,0"))
                                        (builtin "One Step Simplification" (formula "42"))
                                       (rule "true_left" (formula "42"))
                                       (rule "commute_or" (formula "30") (term "1,0,1,0,0,0"))
                                       (rule "commute_or_2" (formula "37") (term "0,0,0"))
                                        (builtin "One Step Simplification" (formula "37"))
                                       (rule "eqSymm" (formula "37") (term "1,0,0,0,0"))
                                       (rule "castedGetAny" (formula "37") (term "1,0,0,1,0,0,0"))
                                       (rule "castedGetAny" (formula "37") (term "0,0,0,0,0,0"))
                                       (rule "castedGetAny" (formula "37") (term "0,1,0,0,0,0"))
                                        (builtin "One Step Simplification" (formula "37"))
                                       (rule "true_left" (formula "37"))
                                       (rule "commute_or_2" (formula "15") (term "0,0,0"))
                                        (builtin "One Step Simplification" (formula "15"))
                                       (rule "eqSymm" (formula "15") (term "1,0,0,0,0"))
                                       (rule "castedGetAny" (formula "15") (term "1,0,0,1,0,0,0"))
                                       (rule "castedGetAny" (formula "15") (term "0,0,0,0,0,0"))
                                       (rule "castedGetAny" (formula "15") (term "0,1,0,0,0,0"))
                                        (builtin "One Step Simplification" (formula "15"))
                                       (rule "true_left" (formula "15"))
                                       (rule "shift_paren_or" (formula "19") (term "0,0,0"))
                                        (builtin "One Step Simplification" (formula "19"))
                                       (rule "eqSymm" (formula "19") (term "1,1,0,0,0"))
                                       (rule "castedGetAny" (formula "19") (term "0,0,0,0,0,0"))
                                       (rule "castedGetAny" (formula "19") (term "0,0,1,0,0,0"))
                                       (rule "castedGetAny" (formula "19") (term "0,1,1,0,0,0"))
                                        (builtin "One Step Simplification" (formula "19"))
                                       (rule "true_left" (formula "19"))
                                       (rule "shift_paren_or" (formula "6") (term "0,0,0,0"))
                                       (rule "shift_paren_or" (formula "5") (term "0,0,0,0"))
                                       (rule "commute_or_2" (formula "30") (term "0,0,0"))
                                        (builtin "One Step Simplification" (formula "30"))
                                       (rule "eqSymm" (formula "30") (term "1,0,0,0,0"))
                                       (rule "castedGetAny" (formula "30") (term "0,0,0,0,0,0"))
                                       (rule "castedGetAny" (formula "30") (term "1,0,0,1,0,0,0"))
                                       (rule "castedGetAny" (formula "30") (term "0,1,0,0,0,0"))
                                        (builtin "One Step Simplification" (formula "30"))
                                       (rule "true_left" (formula "30"))
                                       (rule "shift_paren_or" (formula "2") (term "0,0,0,0"))
                                       (rule "commute_or_2" (formula "33") (term "0,0,0"))
                                        (builtin "One Step Simplification" (formula "33"))
                                       (rule "eqSymm" (formula "33") (term "1,0,0,0,0"))
                                       (rule "castedGetAny" (formula "33") (term "0,0,0,0,0,0"))
                                       (rule "castedGetAny" (formula "33") (term "1,0,0,1,0,0,0"))
                                       (rule "castedGetAny" (formula "33") (term "0,1,0,0,0,0"))
                                        (builtin "One Step Simplification" (formula "33"))
                                       (rule "true_left" (formula "33"))
                                       (rule "shift_paren_or" (formula "1") (term "0,0,0,0"))
                                       (rule "commute_or" (formula "60") (term "0,0,0"))
                                        (builtin "One Step Simplification" (formula "60"))
                                       (rule "commute_or_2" (formula "29") (term "0,0,0"))
                                        (builtin "One Step Simplification" (formula "29"))
                                       (rule "eqSymm" (formula "29") (term "1,0,0,0,0"))
                                       (rule "castedGetAny" (formula "29") (term "1,0,0,1,0,0,0"))
                                       (rule "castedGetAny" (formula "29") (term "0,0,0,0,0,0"))
                                       (rule "castedGetAny" (formula "29") (term "0,1,0,0,0,0"))
                                        (builtin "One Step Simplification" (formula "29"))
                                       (rule "true_left" (formula "29"))
                                       (rule "commute_or_2" (formula "61") (term "0"))
                                       (rule "commute_and" (formula "6") (term "1,0,0,0"))
                                       (rule "commute_and" (formula "5") (term "1,0,0,0"))
                                       (rule "commute_or_2" (formula "36") (term "0,0,0"))
                                        (builtin "One Step Simplification" (formula "36"))
                                       (rule "eqSymm" (formula "36") (term "1,0,0,0,0"))
                                       (rule "castedGetAny" (formula "36") (term "1,0,0,1,0,0,0"))
                                       (rule "castedGetAny" (formula "36") (term "0,0,0,0,0,0"))
                                       (rule "castedGetAny" (formula "36") (term "0,1,0,0,0,0"))
                                        (builtin "One Step Simplification" (formula "36"))
                                       (rule "true_left" (formula "36"))
                                       (rule "commute_and" (formula "2") (term "1,0,0,0"))
                                       (rule "commute_and" (formula "1") (term "1,0,0,0"))
                                       (rule "commute_or_2" (formula "15") (term "0,0,0"))
                                        (builtin "One Step Simplification" (formula "15"))
                                       (rule "eqSymm" (formula "15") (term "1,0,0,0,0"))
                                       (rule "castedGetAny" (formula "15") (term "0,0,0,0,0,0"))
                                       (rule "castedGetAny" (formula "15") (term "1,0,0,1,0,0,0"))
                                       (rule "castedGetAny" (formula "15") (term "0,1,0,0,0,0"))
                                        (builtin "One Step Simplification" (formula "15"))
                                       (rule "true_left" (formula "15"))
                                       (rule "shift_paren_or" (formula "58") (term "0"))
                                       (rule "inEqSimp_or_tautInEq3" (formula "58") (term "0,0"))
                                       (rule "inEqSimp_homoInEq1" (formula "58") (term "1,0,0"))
                                       (rule "polySimp_pullOutFactor1" (formula "58") (term "0,1,0,0"))
                                       (rule "add_literals" (formula "58") (term "1,0,1,0,0"))
                                       (rule "times_zero_1" (formula "58") (term "0,1,0,0"))
                                       (rule "leq_literals" (formula "58") (term "1,0,0"))
                                        (builtin "One Step Simplification" (formula "58"))
                                       (rule "true_left" (formula "58"))
                                       (rule "cnf_rightDist" (formula "27") (term "0,0,1,0,0,0"))
                                        (builtin "One Step Simplification" (formula "27"))
                                       (rule "commute_or" (formula "4") (term "0,0"))
                                       (rule "shift_paren_or" (formula "29") (term "0,0,0"))
                                        (builtin "One Step Simplification" (formula "29"))
                                       (rule "eqSymm" (formula "29") (term "1,1,0,0,0"))
                                       (rule "castedGetAny" (formula "29") (term "0,0,1,0,0,0"))
                                       (rule "castedGetAny" (formula "29") (term "1,0,0,0,0,0,0"))
                                       (rule "castedGetAny" (formula "29") (term "0,1,1,0,0,0"))
                                        (builtin "One Step Simplification" (formula "29"))
                                       (rule "true_left" (formula "29"))
                                       (rule "shift_paren_or" (formula "26") (term "0,0,0"))
                                        (builtin "One Step Simplification" (formula "26"))
                                       (rule "eqSymm" (formula "26") (term "1,1,0,0,0"))
                                       (rule "castedGetAny" (formula "26") (term "0,0,1,0,0,0"))
                                       (rule "castedGetAny" (formula "26") (term "1,0,0,0,0,0,0"))
                                       (rule "castedGetAny" (formula "26") (term "0,1,1,0,0,0"))
                                        (builtin "One Step Simplification" (formula "26"))
                                       (rule "true_left" (formula "26"))
                                       (rule "cnf_rightDist" (formula "28") (term "0,0,0"))
                                       (rule "shift_paren_or" (formula "17") (term "0,0,0"))
                                        (builtin "One Step Simplification" (formula "17"))
                                       (rule "eqSymm" (formula "17") (term "1,1,0,0,0"))
                                       (rule "castedGetAny" (formula "17") (term "1,0,0,0,0,0,0"))
                                       (rule "castedGetAny" (formula "17") (term "0,0,1,0,0,0"))
                                       (rule "castedGetAny" (formula "17") (term "0,1,1,0,0,0"))
                                        (builtin "One Step Simplification" (formula "17"))
                                       (rule "true_left" (formula "17"))
                                       (rule "cnf_rightDist" (formula "26") (term "0,0,0"))
                                       (rule "cnf_rightDist" (formula "24") (term "0,0,0"))
                                       (rule "shift_paren_or" (formula "12") (term "0,0,0"))
                                        (builtin "One Step Simplification" (formula "12"))
                                       (rule "eqSymm" (formula "12") (term "1,1,0,0,0"))
                                       (rule "castedGetAny" (formula "12") (term "1,0,0,0,0,0,0"))
                                       (rule "castedGetAny" (formula "12") (term "0,0,1,0,0,0"))
                                       (rule "castedGetAny" (formula "12") (term "0,1,1,0,0,0"))
                                        (builtin "One Step Simplification" (formula "12"))
                                       (rule "true_left" (formula "12"))
                                       (rule "cnf_rightDist" (formula "3") (term "0,0"))
                                       (rule "distr_forallAnd" (formula "26") (term "0,0"))
                                       (rule "shift_paren_or" (formula "13") (term "0,0,0"))
                                        (builtin "One Step Simplification" (formula "13"))
                                       (rule "eqSymm" (formula "13") (term "1,1,0,0,0"))
                                       (rule "castedGetAny" (formula "13") (term "1,0,0,0,0,0,0"))
                                       (rule "castedGetAny" (formula "13") (term "0,0,1,0,0,0"))
                                       (rule "castedGetAny" (formula "13") (term "0,1,1,0,0,0"))
                                        (builtin "One Step Simplification" (formula "13"))
                                       (rule "true_left" (formula "13"))
                                       (rule "distr_forallAnd" (formula "24") (term "0,0"))
                                       (rule "distr_forallAnd" (formula "22") (term "0,0"))
                                       (rule "cnf_rightDist" (formula "14") (term "0,0,0"))
                                       (rule "distr_forallAnd" (formula "3") (term "0"))
                                       (rule "distr_forallAnd" (formula "25") (term "0"))
                                       (rule "cnf_rightDist" (formula "11") (term "0,0,0"))
                                       (rule "ifthenelse_split" (formula "8") (term "0"))
                                       (branch "o_0.<created>@anon_heap_asList«anonHeapFunction» = TRUE TRUE"
                                          (rule "applyEqReverse" (formula "84") (term "0") (ifseqformula "9"))
                                          (rule "applyEqReverse" (formula "10") (term "1,0") (ifseqformula "9"))
                                          (rule "hideAuxiliaryEq" (formula "9"))
                                          (rule "replace_known_left" (formula "10") (term "1,0,0,0,0") (ifseqformula "8"))
                                           (builtin "One Step Simplification" (formula "10"))
                                          (rule "applyEqReverse" (formula "83") (term "1") (ifseqformula "10"))
                                          (rule "hideAuxiliaryEq" (formula "10"))
                                          (rule "replace_known_left" (formula "9") (term "1,0,0,0") (ifseqformula "8"))
                                           (builtin "One Step Simplification" (formula "9") (ifInst ""  (formula "82")))
                                          (rule "closeFalse" (formula "9"))
                                       )
                                       (branch "o_0.<created>@anon_heap_asList«anonHeapFunction» = TRUE FALSE"
                                          (rule "applyEqReverse" (formula "84") (term "0") (ifseqformula "8"))
                                          (rule "applyEqReverse" (formula "9") (term "1,0") (ifseqformula "8"))
                                          (rule "hideAuxiliaryEq" (formula "8"))
                                          (rule "replaceKnownAuxiliaryConstant_taclet11111110000100_26" (formula "8") (term "1"))
                                           (builtin "One Step Simplification" (formula "8"))
                                          (rule "true_left" (formula "8"))
                                          (rule "replace_known_right" (formula "9") (term "1,0,0,0,0") (ifseqformula "64"))
                                           (builtin "One Step Simplification" (formula "9"))
                                          (rule "replace_known_right" (formula "8") (term "1,0,0,0") (ifseqformula "64"))
                                           (builtin "One Step Simplification" (formula "8"))
                                          (rule "replace_known_right" (formula "7") (term "0") (ifseqformula "64"))
                                           (builtin "One Step Simplification" (formula "7"))
                                          (rule "replace_known_left" (formula "9") (term "1,0,0") (ifseqformula "7"))
                                           (builtin "One Step Simplification" (formula "9"))
                                          (rule "applyEqReverse" (formula "83") (term "1") (ifseqformula "9"))
                                          (rule "hideAuxiliaryEq" (formula "9"))
                                          (rule "replace_known_left" (formula "8") (term "1,0,0") (ifseqformula "7"))
                                           (builtin "One Step Simplification" (formula "8") (ifInst ""  (formula "82")))
                                          (rule "closeFalse" (formula "8"))
                                       )
                                    )
                                 )
                              )
                           )
                        )
                     )
                  )
                  (branch "Case 2"
                     (rule "polySimp_mulComm0" (formula "85") (term "1,0,0,1,0"))
                     (rule "polySimp_rightDist" (formula "85") (term "1,0,0,1,0"))
                     (rule "mul_literals" (formula "85") (term "0,1,0,0,1,0"))
                     (rule "polySimp_addAssoc" (formula "85") (term "0,0,1,0"))
                     (rule "add_literals" (formula "85") (term "0,0,0,1,0"))
                     (rule "polySimp_addComm1" (formula "85") (term "0,1,0"))
                     (rule "precOfInt" (formula "85"))
                     (rule "inEqSimp_ltToLeq" (formula "42") (term "0,0,0"))
                     (rule "polySimp_mulComm0" (formula "42") (term "1,0,0,0,0,0"))
                     (rule "inEqSimp_ltToLeq" (formula "55") (term "0,0,0"))
                     (rule "polySimp_mulComm0" (formula "55") (term "1,0,0,0,0,0"))
                     (rule "inEqSimp_ltToLeq" (formula "15"))
                     (rule "polySimp_mulComm0" (formula "15") (term "1,0,0"))
                     (rule "polySimp_addComm1" (formula "15") (term "0"))
                     (rule "inEqSimp_ltToLeq" (formula "57") (term "0,0,0"))
                     (rule "polySimp_mulComm0" (formula "57") (term "1,0,0,0,0,0"))
                     (rule "inEqSimp_ltToLeq" (formula "57") (term "0,0,0,1,0,1,0"))
                     (rule "polySimp_mulComm0" (formula "57") (term "1,0,0,0,0,0,1,0,1,0"))
                     (rule "inEqSimp_ltToLeq" (formula "57") (term "1,0,0,0,1,0"))
                     (rule "polySimp_mulComm0" (formula "57") (term "1,0,0,1,0,0,0,1,0"))
                     (rule "inEqSimp_ltToLeq" (formula "70"))
                     (rule "polySimp_rightDist" (formula "70") (term "1,0,0"))
                     (rule "mul_literals" (formula "70") (term "0,1,0,0"))
                     (rule "polySimp_addAssoc" (formula "70") (term "0,0"))
                     (rule "add_literals" (formula "70") (term "0,0,0"))
                     (rule "add_zero_left" (formula "70") (term "0,0"))
                     (rule "polySimp_pullOutFactor2" (formula "70") (term "0"))
                     (rule "add_literals" (formula "70") (term "1,0"))
                     (rule "times_zero_1" (formula "70") (term "0"))
                     (rule "leq_literals" (formula "70"))
                     (rule "true_left" (formula "70"))
                     (rule "inEqSimp_ltToLeq" (formula "34") (term "0,0,0"))
                     (rule "polySimp_mulComm0" (formula "34") (term "1,0,0,0,0,0"))
                     (rule "inEqSimp_ltToLeq" (formula "84") (term "1"))
                     (rule "polySimp_rightDist" (formula "84") (term "1,0,0,1"))
                     (rule "mul_literals" (formula "84") (term "0,1,0,0,1"))
                     (rule "polySimp_addAssoc" (formula "84") (term "0,0,1"))
                     (rule "add_literals" (formula "84") (term "0,0,0,1"))
                     (rule "polySimp_addAssoc" (formula "84") (term "0,1"))
                     (rule "polySimp_addComm1" (formula "84") (term "0,0,1"))
                     (rule "add_literals" (formula "84") (term "0,0,0,1"))
                     (rule "inEqSimp_homoInEq0" (formula "84") (term "0"))
                     (rule "mul_literals" (formula "84") (term "1,0,0"))
                     (rule "add_zero_right" (formula "84") (term "0,0"))
                     (rule "mod_axiom" (formula "84") (term "0,1,0,1,0,1"))
                     (rule "polySimp_mulLiterals" (formula "84") (term "1,0,1,0,1,0,1"))
                     (rule "polySimp_mulComm0" (formula "84") (term "1,0,1,0,1"))
                     (rule "polySimp_rightDist" (formula "84") (term "1,0,1,0,1"))
                     (rule "polySimp_mulLiterals" (formula "84") (term "1,1,0,1,0,1"))
                     (rule "polySimp_rightDist" (formula "84") (term "0,1,0,1,0,1"))
                     (rule "mul_literals" (formula "84") (term "0,0,1,0,1,0,1"))
                     (rule "polySimp_addComm1" (formula "84") (term "0,1,0,1"))
                     (rule "polySimp_addAssoc" (formula "84") (term "0,0,1,0,1"))
                     (rule "polySimp_addAssoc" (formula "84") (term "0,0,0,1,0,1"))
                     (rule "add_literals" (formula "84") (term "0,0,0,0,1,0,1"))
                     (rule "mod_axiom" (formula "84") (term "0,1,0,0,1"))
                     (rule "polySimp_mulLiterals" (formula "84") (term "1,0,1,0,0,1"))
                     (rule "polySimp_mulComm0" (formula "84") (term "1,0,0,1"))
                     (rule "polySimp_rightDist" (formula "84") (term "1,0,0,1"))
                     (rule "polySimp_mulLiterals" (formula "84") (term "1,1,0,0,1"))
                     (rule "polySimp_rightDist" (formula "84") (term "0,1,0,0,1"))
                     (rule "polySimp_rightDist" (formula "84") (term "0,0,1,0,0,1"))
                     (rule "mul_literals" (formula "84") (term "0,0,0,1,0,0,1"))
                     (rule "polySimp_mulLiterals" (formula "84") (term "1,0,0,1,0,0,1"))
                     (rule "polySimp_elimOne" (formula "84") (term "1,0,0,1,0,0,1"))
                     (rule "polySimp_addAssoc" (formula "84") (term "0,0,1"))
                     (rule "polySimp_addAssoc" (formula "84") (term "0,0,0,1"))
                     (rule "polySimp_addAssoc" (formula "84") (term "0,0,0,0,1"))
                     (rule "add_literals" (formula "84") (term "0,0,0,0,0,1"))
                     (rule "mod_axiom" (formula "84") (term "0,1,0,1,0,0"))
                     (rule "polySimp_mulLiterals" (formula "84") (term "1,0,1,0,1,0,0"))
                     (rule "polySimp_mulComm0" (formula "84") (term "1,0,1,0,0"))
                     (rule "polySimp_rightDist" (formula "84") (term "1,0,1,0,0"))
                     (rule "polySimp_mulLiterals" (formula "84") (term "1,1,0,1,0,0"))
                     (rule "polySimp_rightDist" (formula "84") (term "0,1,0,1,0,0"))
                     (rule "mul_literals" (formula "84") (term "0,0,1,0,1,0,0"))
                     (rule "polySimp_addComm1" (formula "84") (term "0,1,0,0"))
                     (rule "polySimp_addAssoc" (formula "84") (term "0,0,1,0,0"))
                     (rule "polySimp_addAssoc" (formula "84") (term "0,0,0,1,0,0"))
                     (rule "add_literals" (formula "84") (term "0,0,0,0,1,0,0"))
                     (rule "inEqSimp_sepPosMonomial0" (formula "42") (term "0,0,0"))
                     (rule "polySimp_mulComm0" (formula "42") (term "1,0,0,0"))
                     (rule "polySimp_rightDist" (formula "42") (term "1,0,0,0"))
                     (rule "polySimp_mulLiterals" (formula "42") (term "1,1,0,0,0"))
                     (rule "mul_literals" (formula "42") (term "0,1,0,0,0"))
                     (rule "polySimp_elimOne" (formula "42") (term "1,1,0,0,0"))
                     (rule "inEqSimp_sepPosMonomial0" (formula "55") (term "0,0,0"))
                     (rule "polySimp_mulComm0" (formula "55") (term "1,0,0,0"))
                     (rule "polySimp_rightDist" (formula "55") (term "1,0,0,0"))
                     (rule "mul_literals" (formula "55") (term "0,1,0,0,0"))
                     (rule "polySimp_mulLiterals" (formula "55") (term "1,1,0,0,0"))
                     (rule "polySimp_elimOne" (formula "55") (term "1,1,0,0,0"))
                     (rule "inEqSimp_sepNegMonomial0" (formula "15"))
                     (rule "polySimp_mulLiterals" (formula "15") (term "0"))
                     (rule "polySimp_elimOne" (formula "15") (term "0"))
                     (rule "inEqSimp_sepPosMonomial0" (formula "57") (term "0,0,0"))
                     (rule "polySimp_mulComm0" (formula "57") (term "1,0,0,0"))
                     (rule "polySimp_rightDist" (formula "57") (term "1,0,0,0"))
                     (rule "mul_literals" (formula "57") (term "0,1,0,0,0"))
                     (rule "polySimp_mulLiterals" (formula "57") (term "1,1,0,0,0"))
                     (rule "polySimp_elimOne" (formula "57") (term "1,1,0,0,0"))
                     (rule "inEqSimp_sepPosMonomial0" (formula "57") (term "0,0,0,1,0,1,0"))
                     (rule "polySimp_mulComm0" (formula "57") (term "1,0,0,0,1,0,1,0"))
                     (rule "polySimp_rightDist" (formula "57") (term "1,0,0,0,1,0,1,0"))
                     (rule "mul_literals" (formula "57") (term "0,1,0,0,0,1,0,1,0"))
                     (rule "polySimp_mulLiterals" (formula "57") (term "1,1,0,0,0,1,0,1,0"))
                     (rule "polySimp_elimOne" (formula "57") (term "1,1,0,0,0,1,0,1,0"))
                     (rule "inEqSimp_sepPosMonomial0" (formula "57") (term "1,0,0,0,1,0"))
                     (rule "polySimp_mulComm0" (formula "57") (term "1,1,0,0,0,1,0"))
                     (rule "polySimp_rightDist" (formula "57") (term "1,1,0,0,0,1,0"))
                     (rule "mul_literals" (formula "57") (term "0,1,1,0,0,0,1,0"))
                     (rule "polySimp_mulLiterals" (formula "57") (term "1,1,1,0,0,0,1,0"))
                     (rule "polySimp_elimOne" (formula "57") (term "1,1,1,0,0,0,1,0"))
                     (rule "inEqSimp_sepPosMonomial0" (formula "34") (term "0,0,0"))
                     (rule "polySimp_mulComm0" (formula "34") (term "1,0,0,0"))
                     (rule "polySimp_rightDist" (formula "34") (term "1,0,0,0"))
                     (rule "mul_literals" (formula "34") (term "0,1,0,0,0"))
                     (rule "polySimp_mulLiterals" (formula "34") (term "1,1,0,0,0"))
                     (rule "polySimp_elimOne" (formula "34") (term "1,1,0,0,0"))
                     (rule "inEqSimp_sepPosMonomial0" (formula "84") (term "1"))
                     (rule "polySimp_mulComm0" (formula "84") (term "1,1"))
                     (rule "polySimp_rightDist" (formula "84") (term "1,1"))
                     (rule "polySimp_mulLiterals" (formula "84") (term "1,1,1"))
                     (rule "polySimp_rightDist" (formula "84") (term "0,1,1"))
                     (rule "polySimp_mulLiterals" (formula "84") (term "1,0,1,1"))
                     (rule "polySimp_elimOne" (formula "84") (term "1,0,1,1"))
                     (rule "polySimp_rightDist" (formula "84") (term "0,0,1,1"))
                     (rule "mul_literals" (formula "84") (term "0,0,0,1,1"))
                     (rule "inEqSimp_sepPosMonomial1" (formula "84") (term "0"))
                     (rule "mul_literals" (formula "84") (term "1,0"))
                     (rule "inEqSimp_subsumption1" (formula "46") (ifseqformula "47"))
                     (rule "leq_literals" (formula "46") (term "0"))
                      (builtin "One Step Simplification" (formula "46"))
                     (rule "true_left" (formula "46"))
                     (rule "inEqSimp_subsumption1" (formula "51") (ifseqformula "15"))
                     (rule "inEqSimp_homoInEq0" (formula "51") (term "0"))
                     (rule "polySimp_pullOutFactor1b" (formula "51") (term "0,0"))
                     (rule "add_literals" (formula "51") (term "1,1,0,0"))
                     (rule "times_zero_1" (formula "51") (term "1,0,0"))
                     (rule "add_zero_right" (formula "51") (term "0,0"))
                     (rule "qeq_literals" (formula "51") (term "0"))
                      (builtin "One Step Simplification" (formula "51"))
                     (rule "true_left" (formula "51"))
                     (rule "inEqSimp_subsumption1" (formula "57") (ifseqformula "50"))
                     (rule "leq_literals" (formula "57") (term "0"))
                      (builtin "One Step Simplification" (formula "57"))
                     (rule "true_left" (formula "57"))
                     (rule "polyDiv_pullOut" (formula "81") (term "0,1,0,0,0,0") (inst "polyDivCoeff=Z(1(#))"))
                     (rule "mul_literals" (formula "81") (term "0,1,0,0,2,0,1,0,0,0,0"))
                     (rule "equal_literals" (formula "81") (term "0,0,1,0,0,0,0"))
                      (builtin "One Step Simplification" (formula "81"))
                     (rule "mul_literals" (formula "81") (term "1,0,0,0,1,0,0,0,0"))
                     (rule "polySimp_mulComm0" (formula "81") (term "1,0,0,0,0"))
                     (rule "polySimp_addComm0" (formula "81") (term "1,1,0,0,0,0"))
                     (rule "polySimp_addComm1" (formula "81") (term "0,1,1,1,0,0,0,0"))
                     (rule "add_literals" (formula "81") (term "0,0,1,1,1,0,0,0,0"))
                     (rule "polySimp_rightDist" (formula "81") (term "1,0,0,0,0"))
                     (rule "mul_literals" (formula "81") (term "0,1,0,0,0,0"))
                     (rule "polySimp_addAssoc" (formula "81") (term "0,0,0,0"))
                     (rule "polySimp_addComm1" (formula "81") (term "0,0,0,0,0"))
                     (rule "add_literals" (formula "81") (term "0,0,0,0,0,0"))
                     (rule "polyMod_pullOut" (formula "81") (term "0,0") (inst "polyDivCoeff=div(add(Z(neglit(7(4(6(3(8(4(7(4(1(2(#)))))))))))),
        i_0),
    Z(6(9(2(7(6(9(4(9(2(4(#))))))))))))"))
                     (rule "polySimp_mulLiterals" (formula "81") (term "1,0,0,0"))
                     (rule "polySimp_addComm1" (formula "81") (term "0,0,0"))
                     (rule "polySimp_pullOutFactor0b" (formula "81") (term "0,0,0,0"))
                     (rule "add_literals" (formula "81") (term "1,1,0,0,0,0"))
                     (rule "times_zero_1" (formula "81") (term "1,0,0,0,0"))
                     (rule "add_zero_right" (formula "81") (term "0,0,0,0"))
                     (rule "mod_axiom" (formula "81") (term "0,0"))
                     (rule "polySimp_mulLiterals" (formula "81") (term "1,0,0"))
                     (rule "inEqSimp_homoInEq1" (formula "81") (term "0"))
                     (rule "polySimp_mulComm0" (formula "81") (term "1,0,0"))
                     (rule "polySimp_rightDist" (formula "81") (term "1,0,0"))
                     (rule "polySimp_mulLiterals" (formula "81") (term "1,1,0,0"))
                     (rule "polySimp_rightDist" (formula "81") (term "0,1,0,0"))
                     (rule "polySimp_rightDist" (formula "81") (term "0,0,1,0,0"))
                     (rule "mul_literals" (formula "81") (term "0,0,0,1,0,0"))
                     (rule "polySimp_mulLiterals" (formula "81") (term "1,0,0,1,0,0"))
                     (rule "polySimp_elimOne" (formula "81") (term "1,0,0,1,0,0"))
                     (rule "polySimp_addAssoc" (formula "81") (term "0,0"))
                     (rule "polySimp_addAssoc" (formula "81") (term "0,0,0"))
                     (rule "polySimp_addAssoc" (formula "81") (term "0,0,0,0"))
                     (rule "add_literals" (formula "81") (term "0,0,0,0,0"))
                     (rule "inEqSimp_sepPosMonomial0" (formula "81") (term "0"))
                     (rule "polySimp_mulComm0" (formula "81") (term "1,0"))
                     (rule "polySimp_rightDist" (formula "81") (term "1,0"))
                     (rule "polySimp_mulLiterals" (formula "81") (term "1,1,0"))
                     (rule "polySimp_elimOne" (formula "81") (term "1,1,0"))
                     (rule "polySimp_rightDist" (formula "81") (term "0,1,0"))
                     (rule "mul_literals" (formula "81") (term "0,0,1,0"))
                     (rule "polyDiv_pullOut" (formula "81") (term "0,1,0,0,0,1") (inst "polyDivCoeff=Z(1(#))"))
                     (rule "equal_literals" (formula "81") (term "0,0,1,0,0,0,1"))
                      (builtin "One Step Simplification" (formula "81"))
                     (rule "polySimp_mulLiterals" (formula "81") (term "1,0,0,0,1,0,0,0,1"))
                     (rule "mul_literals" (formula "81") (term "1,0,0,0,1,0,0,0,1"))
                     (rule "polySimp_mulComm0" (formula "81") (term "1,0,0,0,1"))
                     (rule "polySimp_addComm1" (formula "81") (term "0,0,1,1,0,0,0,1"))
                     (rule "add_literals" (formula "81") (term "0,0,0,1,1,0,0,0,1"))
                     (rule "polySimp_addComm0" (formula "81") (term "1,1,0,0,0,1"))
                     (rule "polySimp_rightDist" (formula "81") (term "1,0,0,0,1"))
                     (rule "mul_literals" (formula "81") (term "0,1,0,0,0,1"))
                     (rule "polySimp_addAssoc" (formula "81") (term "0,0,0,1"))
                     (rule "polySimp_addComm1" (formula "81") (term "0,0,0,0,1"))
                     (rule "add_literals" (formula "81") (term "0,0,0,0,0,1"))
                     (rule "polyMod_pullOut" (formula "81") (term "0,1") (inst "polyDivCoeff=div(add(Z(neglit(7(4(6(3(8(4(7(4(1(2(#)))))))))))),
        i_0),
    Z(6(9(2(7(6(9(4(9(2(4(#))))))))))))"))
                     (rule "polySimp_mulLiterals" (formula "81") (term "1,0,0,1"))
                     (rule "polySimp_addComm1" (formula "81") (term "0,0,1"))
                     (rule "polySimp_pullOutFactor0b" (formula "81") (term "0,0,0,1"))
                     (rule "add_literals" (formula "81") (term "1,1,0,0,0,1"))
                     (rule "times_zero_1" (formula "81") (term "1,0,0,0,1"))
                     (rule "add_zero_right" (formula "81") (term "0,0,0,1"))
                     (rule "mod_axiom" (formula "81") (term "0,1"))
                     (rule "polySimp_mulLiterals" (formula "81") (term "1,0,1"))
                     (rule "inEqSimp_homoInEq0" (formula "81") (term "1"))
                     (rule "polySimp_mulComm0" (formula "81") (term "1,0,1"))
                     (rule "polySimp_rightDist" (formula "81") (term "1,0,1"))
                     (rule "polySimp_mulLiterals" (formula "81") (term "1,1,0,1"))
                     (rule "polySimp_rightDist" (formula "81") (term "0,1,0,1"))
                     (rule "polySimp_rightDist" (formula "81") (term "0,0,1,0,1"))
                     (rule "polySimp_mulLiterals" (formula "81") (term "1,0,0,1,0,1"))
                     (rule "mul_literals" (formula "81") (term "0,0,0,1,0,1"))
                     (rule "polySimp_elimOne" (formula "81") (term "1,0,0,1,0,1"))
                     (rule "polySimp_addAssoc" (formula "81") (term "0,1"))
                     (rule "polySimp_addComm1" (formula "81") (term "0,0,1"))
                     (rule "polySimp_addAssoc" (formula "81") (term "0,0,0,1"))
                     (rule "polySimp_addComm1" (formula "81") (term "0,0,0,0,1"))
                     (rule "polySimp_pullOutFactor1b" (formula "81") (term "0,0,0,1"))
                     (rule "add_literals" (formula "81") (term "1,1,0,0,0,1"))
                     (rule "times_zero_1" (formula "81") (term "1,0,0,0,1"))
                     (rule "add_zero_right" (formula "81") (term "0,0,0,1"))
                     (rule "polySimp_addAssoc" (formula "81") (term "0,0,0,1"))
                     (rule "polySimp_addComm1" (formula "81") (term "0,0,0,0,1"))
                     (rule "add_literals" (formula "81") (term "0,0,0,0,0,1"))
                     (rule "polySimp_pullOutFactor2b" (formula "81") (term "0,0,0,1"))
                     (rule "add_literals" (formula "81") (term "1,1,0,0,0,1"))
                     (rule "times_zero_1" (formula "81") (term "1,0,0,0,1"))
                     (rule "add_literals" (formula "81") (term "0,0,0,1"))
                     (rule "inEqSimp_sepPosMonomial1" (formula "81") (term "1"))
                     (rule "polySimp_mulComm0" (formula "81") (term "1,1"))
                     (rule "polySimp_rightDist" (formula "81") (term "1,1"))
                     (rule "polySimp_mulLiterals" (formula "81") (term "1,1,1"))
                     (rule "mul_literals" (formula "81") (term "0,1,1"))
                     (rule "polyDiv_pullOut" (formula "81") (term "0,0,0") (inst "polyDivCoeff=Z(1(#))"))
                     (rule "equal_literals" (formula "81") (term "0,0,0,0"))
                      (builtin "One Step Simplification" (formula "81"))
                     (rule "polySimp_mulLiterals" (formula "81") (term "1,0,0,0,0,0"))
                     (rule "mul_literals" (formula "81") (term "1,0,0,0,0,0"))
                     (rule "polySimp_mulComm0" (formula "81") (term "0,0"))
                     (rule "polySimp_addComm0" (formula "81") (term "1,0,0"))
                     (rule "polySimp_addComm1" (formula "81") (term "0,1,1,0,0"))
                     (rule "polySimp_addComm1" (formula "81") (term "0,0,1,1,0,0"))
                     (rule "add_literals" (formula "81") (term "0,0,0,1,1,0,0"))
                     (rule "polySimp_rightDist" (formula "81") (term "0,0"))
                     (rule "mul_literals" (formula "81") (term "0,0,0"))
                     (rule "inEqSimp_homoInEq0" (formula "81") (term "0"))
                     (rule "polySimp_mulComm0" (formula "81") (term "1,0,0"))
                     (rule "polySimp_rightDist" (formula "81") (term "1,0,0"))
                     (rule "mul_literals" (formula "81") (term "0,1,0,0"))
                     (rule "polySimp_mulLiterals" (formula "81") (term "1,1,0,0"))
                     (rule "polySimp_addAssoc" (formula "81") (term "0,0"))
                     (rule "polySimp_addComm1" (formula "81") (term "0,0,0"))
                     (rule "polySimp_addComm1" (formula "81") (term "0,0,0,0"))
                     (rule "add_literals" (formula "81") (term "0,0,0,0,0"))
                     (rule "inEqSimp_sepNegMonomial1" (formula "81") (term "0"))
                     (rule "polySimp_mulLiterals" (formula "81") (term "0,0"))
                     (rule "elimGcdGeq" (formula "81") (term "1") (inst "elimGcdRightDiv=add(Z(1(#)),
    div(add(add(Z(8(4(6(3(8(4(7(4(1(2(#))))))))))),
                mul(i_0, Z(neglit(1(#))))),
            result_47),
        Z(6(9(2(7(6(9(4(9(2(4(#)))))))))))))") (inst "elimGcdLeftDiv=div(add(add(Z(3(4(9(0(5(4(2(4(4(6(#))))))))))),
            mul(i_0, Z(neglit(1(#))))),
        result_47),
    Z(6(9(2(7(6(9(4(9(2(4(#))))))))))))") (inst "elimGcd=Z(6(9(2(7(6(9(4(9(2(4(#)))))))))))"))
                     (rule "polySimp_mulLiterals" (formula "81") (term "1,0,0,0,1"))
                     (rule "mul_literals" (formula "81") (term "0,1,0,0,0,0,0,0,1"))
                     (rule "polySimp_mulLiterals" (formula "81") (term "1,0,1,0,1"))
                     (rule "mul_literals" (formula "81") (term "0,0,0,0,0,1,0,1"))
                     (rule "sub_literals" (formula "81") (term "0,0,0,0,0,0,0,1"))
                     (rule "polySimp_pullOutFactor0b" (formula "81") (term "0,1,0,1"))
                     (rule "add_literals" (formula "81") (term "1,1,0,1,0,1"))
                     (rule "times_zero_1" (formula "81") (term "1,0,1,0,1"))
                     (rule "add_zero_right" (formula "81") (term "0,1,0,1"))
                     (rule "polySimp_pullOutFactor0b" (formula "81") (term "0,0,0,1"))
                     (rule "add_literals" (formula "81") (term "1,1,0,0,0,1"))
                     (rule "times_zero_1" (formula "81") (term "1,0,0,0,1"))
                     (rule "add_zero_right" (formula "81") (term "0,0,0,1"))
                     (rule "polySimp_rightDist" (formula "81") (term "0,0,1,0,1"))
                     (rule "mul_literals" (formula "81") (term "0,0,0,1,0,1"))
                     (rule "polySimp_rightDist" (formula "81") (term "1,0,0,0,0,1"))
                     (rule "mul_literals" (formula "81") (term "0,1,0,0,0,0,1"))
                     (rule "polySimp_addAssoc" (formula "81") (term "0,1,0,1"))
                     (rule "polySimp_addComm1" (formula "81") (term "0,0,1,0,1"))
                     (rule "add_literals" (formula "81") (term "0,0,0,1,0,1"))
                     (rule "add_zero_left" (formula "81") (term "0,0,1,0,1"))
                     (rule "polySimp_pullOutFactor0" (formula "81") (term "0,1,0,1"))
                     (rule "add_literals" (formula "81") (term "1,0,1,0,1"))
                     (rule "times_zero_1" (formula "81") (term "0,1,0,1"))
                     (rule "leq_literals" (formula "81") (term "1,0,1"))
                      (builtin "One Step Simplification" (formula "81"))
                     (rule "polySimp_addAssoc" (formula "81") (term "0,0,0,1"))
                     (rule "add_literals" (formula "81") (term "0,0,0,0,1"))
                     (rule "polySimp_addAssoc" (formula "81") (term "0,0,1"))
                     (rule "polySimp_addComm1" (formula "81") (term "0,0,0,1"))
                     (rule "add_literals" (formula "81") (term "0,0,0,0,1"))
                     (rule "polySimp_pullOutFactor0b" (formula "81") (term "0,0,1"))
                     (rule "add_literals" (formula "81") (term "1,1,0,0,1"))
                     (rule "times_zero_1" (formula "81") (term "1,0,0,1"))
                     (rule "add_literals" (formula "81") (term "0,0,1"))
                     (rule "qeq_literals" (formula "81") (term "0,1"))
                      (builtin "One Step Simplification" (formula "81"))
                     (rule "polyDiv_pullOut" (formula "81") (term "0,1") (inst "polyDivCoeff=Z(1(#))"))
                     (rule "equal_literals" (formula "81") (term "0,0,1"))
                      (builtin "One Step Simplification" (formula "81"))
                     (rule "polySimp_mulLiterals" (formula "81") (term "1,0,0,0,1"))
                     (rule "mul_literals" (formula "81") (term "1,0,0,0,1"))
                     (rule "polySimp_addComm1" (formula "81") (term "0,0,0,1"))
                     (rule "polySimp_addComm1" (formula "81") (term "0,0,0,0,1"))
                     (rule "add_literals" (formula "81") (term "0,0,0,0,0,1"))
                     (rule "polySimp_addComm0" (formula "81") (term "0,1"))
                     (rule "inEqSimp_homoInEq1" (formula "81") (term "1"))
                     (rule "polySimp_mulComm0" (formula "81") (term "1,0,1"))
                     (rule "polySimp_rightDist" (formula "81") (term "1,0,1"))
                     (rule "mul_literals" (formula "81") (term "0,1,0,1"))
                     (rule "polySimp_addComm1" (formula "81") (term "0,1"))
                     (rule "polySimp_addAssoc" (formula "81") (term "0,0,1"))
                     (rule "add_literals" (formula "81") (term "0,0,0,1"))
                     (rule "add_zero_left" (formula "81") (term "0,0,1"))
                     (rule "inEqSimp_sepPosMonomial0" (formula "81") (term "1"))
                     (rule "polySimp_mulLiterals" (formula "81") (term "1,1"))
                     (rule "polySimp_elimOne" (formula "81") (term "1,1"))
                     (rule "inEqSimp_exactShadow3" (formula "15") (ifseqformula "45"))
                     (rule "polySimp_rightDist" (formula "15") (term "0,0"))
                     (rule "mul_literals" (formula "15") (term "0,0,0"))
                     (rule "polySimp_addComm1" (formula "15") (term "0"))
                     (rule "add_literals" (formula "15") (term "0,0"))
                     (rule "inEqSimp_sepNegMonomial1" (formula "15"))
                     (rule "polySimp_mulLiterals" (formula "15") (term "0"))
                     (rule "polySimp_elimOne" (formula "15") (term "0"))
                     (rule "inEqSimp_subsumption0" (formula "57") (ifseqformula "15"))
                     (rule "leq_literals" (formula "57") (term "0"))
                      (builtin "One Step Simplification" (formula "57"))
                     (rule "true_left" (formula "57"))
                     (rule "nnf_imp2or" (formula "28") (term "0,0"))
                      (builtin "One Step Simplification" (formula "28"))
                     (rule "nnf_imp2or" (formula "26") (term "0,0,0"))
                     (rule "nnf_imp2or" (formula "7") (term "0,0,0"))
                     (rule "nnf_imp2or" (formula "9") (term "0,0,0"))
                     (rule "nnf_imp2or" (formula "30") (term "0,0,0"))
                     (rule "nnf_imp2or" (formula "21") (term "0,0,0"))
                     (rule "nnf_imp2or" (formula "20") (term "0,0,0"))
                     (rule "nnf_imp2or" (formula "1") (term "0,0,0"))
                     (rule "nnf_imp2or" (formula "19") (term "0,0,0"))
                     (rule "nnf_imp2or" (formula "3") (term "0,0,0"))
                     (rule "nnf_imp2or" (formula "5") (term "0,0,0"))
                     (rule "nnf_imp2or" (formula "25") (term "0,0,0"))
                     (rule "nnf_imp2or" (formula "22") (term "0,0,0"))
                     (rule "nnf_imp2or" (formula "24") (term "0,0,0"))
                     (rule "nnf_imp2or" (formula "8") (term "0,0,0"))
                     (rule "nnf_imp2or" (formula "6") (term "0,0,0"))
                     (rule "nnf_imp2or" (formula "4") (term "0,0,0"))
                     (rule "nnf_imp2or" (formula "23") (term "0,0,0"))
                     (rule "nnf_imp2or" (formula "27") (term "0,0,0"))
                     (rule "nnf_imp2or" (formula "18") (term "0,0,0"))
                     (rule "nnf_imp2or" (formula "2") (term "0,0,0"))
                     (rule "nnf_imp2or" (formula "29") (term "0,0,0"))
                     (rule "nnf_imp2or" (formula "10") (term "0,0,0"))
                     (rule "nnf_imp2or" (formula "43") (term "0"))
                     (rule "nnf_imp2or" (formula "54") (term "0"))
                     (rule "nnf_imp2or" (formula "56") (term "0"))
                     (rule "nnf_imp2or" (formula "35") (term "0"))
                     (rule "nnf_imp2or" (formula "26") (term "1,0,0,0"))
                     (rule "nnf_notAnd" (formula "26") (term "0,0,0,0"))
                      (builtin "One Step Simplification" (formula "26"))
                     (rule "nnf_imp2or" (formula "7") (term "1,0,0,0"))
                     (rule "nnf_notAnd" (formula "7") (term "0,0,0,0"))
                      (builtin "One Step Simplification" (formula "7"))
                     (rule "nnf_imp2or" (formula "9") (term "1,0,0,0"))
                     (rule "nnf_notAnd" (formula "9") (term "0,0,0,0"))
                      (builtin "One Step Simplification" (formula "9"))
                     (rule "nnf_notAnd" (formula "43") (term "0,0"))
                     (rule "inEqSimp_notLeq" (formula "43") (term "0,0,0"))
                     (rule "polySimp_rightDist" (formula "43") (term "1,0,0,0,0,0"))
                     (rule "mul_literals" (formula "43") (term "0,1,0,0,0,0,0"))
                     (rule "polySimp_addAssoc" (formula "43") (term "0,0,0,0,0"))
                     (rule "add_literals" (formula "43") (term "0,0,0,0,0,0"))
                     (rule "add_zero_left" (formula "43") (term "0,0,0,0,0"))
                     (rule "inEqSimp_sepPosMonomial1" (formula "43") (term "0,0,0"))
                     (rule "polySimp_mulLiterals" (formula "43") (term "1,0,0,0"))
                     (rule "polySimp_elimOne" (formula "43") (term "1,0,0,0"))
                     (rule "inEqSimp_notGeq" (formula "43") (term "1,0,0"))
                     (rule "mul_literals" (formula "43") (term "1,0,0,1,0,0"))
                     (rule "add_literals" (formula "43") (term "0,0,1,0,0"))
                     (rule "inEqSimp_sepPosMonomial0" (formula "43") (term "1,0,0"))
                     (rule "mul_literals" (formula "43") (term "1,1,0,0"))
                     (rule "nnf_notAnd" (formula "54") (term "0,0"))
                     (rule "inEqSimp_notLeq" (formula "54") (term "0,0,0"))
                     (rule "polySimp_rightDist" (formula "54") (term "1,0,0,0,0,0"))
                     (rule "mul_literals" (formula "54") (term "0,1,0,0,0,0,0"))
                     (rule "polySimp_addAssoc" (formula "54") (term "0,0,0,0,0"))
                     (rule "add_literals" (formula "54") (term "0,0,0,0,0,0"))
                     (rule "add_zero_left" (formula "54") (term "0,0,0,0,0"))
                     (rule "inEqSimp_sepPosMonomial1" (formula "54") (term "0,0,0"))
                     (rule "polySimp_mulLiterals" (formula "54") (term "1,0,0,0"))
                     (rule "polySimp_elimOne" (formula "54") (term "1,0,0,0"))
                     (rule "inEqSimp_notGeq" (formula "54") (term "1,0,0"))
                     (rule "mul_literals" (formula "54") (term "1,0,0,1,0,0"))
                     (rule "add_zero_right" (formula "54") (term "0,0,1,0,0"))
                     (rule "inEqSimp_sepPosMonomial0" (formula "54") (term "1,0,0"))
                     (rule "mul_literals" (formula "54") (term "1,1,0,0"))
                     (rule "nnf_notAnd" (formula "30") (term "0,0,0,0"))
                      (builtin "One Step Simplification" (formula "30"))
                     (rule "nnf_notOr" (formula "56") (term "1,0"))
                     (rule "nnf_imp2or" (formula "21") (term "1,0,0,0"))
                     (rule "nnf_notAnd" (formula "21") (term "0,0,0,0"))
                      (builtin "One Step Simplification" (formula "21"))
                     (rule "nnf_notAnd" (formula "56") (term "0,0"))
                     (rule "inEqSimp_notLeq" (formula "56") (term "0,0,0"))
                     (rule "polySimp_rightDist" (formula "56") (term "1,0,0,0,0,0"))
                     (rule "mul_literals" (formula "56") (term "0,1,0,0,0,0,0"))
                     (rule "polySimp_addAssoc" (formula "56") (term "0,0,0,0,0"))
                     (rule "add_literals" (formula "56") (term "0,0,0,0,0,0"))
                     (rule "add_zero_left" (formula "56") (term "0,0,0,0,0"))
                     (rule "inEqSimp_sepPosMonomial1" (formula "56") (term "0,0,0"))
                     (rule "polySimp_mulLiterals" (formula "56") (term "1,0,0,0"))
                     (rule "polySimp_elimOne" (formula "56") (term "1,0,0,0"))
                     (rule "inEqSimp_notGeq" (formula "56") (term "1,0,0"))
                     (rule "mul_literals" (formula "56") (term "1,0,0,1,0,0"))
                     (rule "add_literals" (formula "56") (term "0,0,1,0,0"))
                     (rule "inEqSimp_sepPosMonomial0" (formula "56") (term "1,0,0"))
                     (rule "mul_literals" (formula "56") (term "1,1,0,0"))
                     (rule "nnf_imp2or" (formula "20") (term "1,0,0,0"))
                     (rule "nnf_notAnd" (formula "20") (term "0,0,0,0"))
                      (builtin "One Step Simplification" (formula "20"))
                     (rule "nnf_notAnd" (formula "35") (term "0,0"))
                     (rule "inEqSimp_notLeq" (formula "35") (term "0,0,0"))
                     (rule "polySimp_rightDist" (formula "35") (term "1,0,0,0,0,0"))
                     (rule "mul_literals" (formula "35") (term "0,1,0,0,0,0,0"))
                     (rule "polySimp_addAssoc" (formula "35") (term "0,0,0,0,0"))
                     (rule "add_literals" (formula "35") (term "0,0,0,0,0,0"))
                     (rule "add_zero_left" (formula "35") (term "0,0,0,0,0"))
                     (rule "inEqSimp_sepPosMonomial1" (formula "35") (term "0,0,0"))
                     (rule "polySimp_mulLiterals" (formula "35") (term "1,0,0,0"))
                     (rule "polySimp_elimOne" (formula "35") (term "1,0,0,0"))
                     (rule "inEqSimp_notGeq" (formula "35") (term "1,0,0"))
                     (rule "mul_literals" (formula "35") (term "1,0,0,1,0,0"))
                     (rule "add_literals" (formula "35") (term "0,0,1,0,0"))
                     (rule "inEqSimp_sepPosMonomial0" (formula "35") (term "1,0,0"))
                     (rule "mul_literals" (formula "35") (term "1,1,0,0"))
                     (rule "nnf_notAnd" (formula "1") (term "0,0,0,0"))
                      (builtin "One Step Simplification" (formula "1"))
                     (rule "nnf_notAnd" (formula "19") (term "0,0,0,0"))
                      (builtin "One Step Simplification" (formula "19"))
                     (rule "nnf_imp2or" (formula "3") (term "1,0,0,0"))
                     (rule "nnf_notAnd" (formula "3") (term "0,0,0,0"))
                      (builtin "One Step Simplification" (formula "3"))
                     (rule "nnf_notAnd" (formula "5") (term "0,0,0,0"))
                      (builtin "One Step Simplification" (formula "5"))
                     (rule "nnf_imp2or" (formula "25") (term "1,0,0,0"))
                     (rule "nnf_notAnd" (formula "25") (term "0,0,0,0"))
                      (builtin "One Step Simplification" (formula "25"))
                     (rule "nnf_imp2or" (formula "22") (term "1,0,0,0"))
                     (rule "nnf_notAnd" (formula "22") (term "0,0,0,0"))
                      (builtin "One Step Simplification" (formula "22"))
                     (rule "nnf_notAnd" (formula "24") (term "0,0,0,0"))
                      (builtin "One Step Simplification" (formula "24"))
                     (rule "nnf_notAnd" (formula "8") (term "0,0,0,0"))
                      (builtin "One Step Simplification" (formula "8"))
                     (rule "nnf_notAnd" (formula "6") (term "0,0,0,0"))
                      (builtin "One Step Simplification" (formula "6"))
                     (rule "nnf_imp2or" (formula "4") (term "1,0,0,0"))
                     (rule "nnf_notAnd" (formula "4") (term "0,0,0,0"))
                      (builtin "One Step Simplification" (formula "4"))
                     (rule "nnf_notAnd" (formula "23") (term "0,0,0,0"))
                      (builtin "One Step Simplification" (formula "23"))
                     (rule "nnf_notAnd" (formula "27") (term "0,0,0,0"))
                      (builtin "One Step Simplification" (formula "27"))
                     (rule "nnf_notAnd" (formula "18") (term "0,0,0,0"))
                      (builtin "One Step Simplification" (formula "18"))
                     (rule "nnf_imp2or" (formula "2") (term "1,0,0,0"))
                     (rule "nnf_notAnd" (formula "2") (term "0,0,0,0"))
                      (builtin "One Step Simplification" (formula "2"))
                     (rule "nnf_notAnd" (formula "29") (term "0,0,0,0"))
                      (builtin "One Step Simplification" (formula "29"))
                     (rule "nnf_imp2or" (formula "10") (term "1,0,0,0"))
                     (rule "nnf_notAnd" (formula "10") (term "0,0,0,0"))
                      (builtin "One Step Simplification" (formula "10"))
                     (rule "nnf_notOr" (formula "26") (term "1,0,0,0,0"))
                     (rule "nnf_notOr" (formula "7") (term "1,0,0,0,0"))
                     (rule "nnf_notOr" (formula "9") (term "1,0,0,0,0"))
                     (rule "nnf_notAnd" (formula "56") (term "1,1,0"))
                      (builtin "One Step Simplification" (formula "56"))
                     (rule "nnf_imp2or" (formula "30") (term "1,0,0,0"))
                     (rule "nnf_notOr" (formula "30") (term "1,0,0,0,0"))
                     (rule "nnf_notOr" (formula "21") (term "1,0,0,0,0"))
                     (rule "nnf_notOr" (formula "20") (term "1,0,0,0,0"))
                     (rule "nnf_imp2or" (formula "1") (term "1,0,0,0"))
                     (rule "nnf_imp2or" (formula "19") (term "1,0,0,0"))
                     (rule "nnf_imp2or" (formula "5") (term "1,0,0,0"))
                     (rule "nnf_notOr" (formula "1") (term "0,0,0,0,0"))
                     (rule "nnf_notOr" (formula "19") (term "1,0,0,0,0"))
                     (rule "nnf_imp2or" (formula "24") (term "1,0,0,0"))
                     (rule "nnf_notOr" (formula "3") (term "1,0,0,0,0"))
                     (rule "nnf_imp2or" (formula "8") (term "1,0,0,0"))
                     (rule "nnf_notOr" (formula "5") (term "1,0,0,0,0"))
                     (rule "nnf_imp2or" (formula "6") (term "1,0,0,0"))
                     (rule "nnf_notOr" (formula "25") (term "1,0,0,0,0"))
                     (rule "nnf_notOr" (formula "22") (term "1,0,0,0,0"))
                     (rule "nnf_imp2or" (formula "23") (term "1,0,0,0"))
                     (rule "nnf_notOr" (formula "24") (term "1,0,0,0,0"))
                     (rule "nnf_imp2or" (formula "27") (term "1,0,0,0"))
                     (rule "nnf_notOr" (formula "8") (term "1,0,0,0,0"))
                     (rule "nnf_imp2or" (formula "18") (term "1,0,0,0"))
                     (rule "nnf_notOr" (formula "6") (term "1,0,0,0,0"))
                     (rule "nnf_notAnd" (formula "56") (term "0,1,0"))
                     (rule "inEqSimp_notGeq" (formula "56") (term "1,0,1,0"))
                     (rule "mul_literals" (formula "56") (term "1,0,0,1,0,1,0"))
                     (rule "add_zero_right" (formula "56") (term "0,0,1,0,1,0"))
                     (rule "inEqSimp_sepPosMonomial0" (formula "56") (term "1,0,1,0"))
                     (rule "mul_literals" (formula "56") (term "1,1,0,1,0"))
                     (rule "nnf_notOr" (formula "4") (term "1,0,0,0,0"))
                     (rule "nnf_imp2or" (formula "29") (term "1,0,0,0"))
                     (rule "nnf_notOr" (formula "23") (term "1,0,0,0,0"))
                     (rule "nnf_notOr" (formula "27") (term "1,0,0,0,0"))
                     (rule "nnf_notOr" (formula "18") (term "1,0,0,0,0"))
                     (rule "nnf_notOr" (formula "2") (term "0,0,0,0,0"))
                     (rule "ifthenelse_split" (formula "53") (term "0"))
                     (branch "result_46 = ls TRUE"
                        (rule "applyEqReverse" (formula "62") (term "0,0") (ifseqformula "54"))
                        (rule "applyEqReverse" (formula "55") (term "0,0,0,1,0") (ifseqformula "54"))
                        (rule "applyEqReverse" (formula "52") (term "0,0") (ifseqformula "54"))
                        (rule "hideAuxiliaryEq" (formula "54"))
                        (rule "applyEq" (formula "67") (term "1,0,0") (ifseqformula "53"))
                        (rule "applyEq" (formula "43") (term "1,0,1,0,0,0") (ifseqformula "53"))
                        (rule "applyEq" (formula "42") (term "1,0,0") (ifseqformula "53"))
                        (rule "applyEq" (formula "41") (term "0,0") (ifseqformula "53"))
                        (rule "applyEq" (formula "63") (term "0,1,0") (ifseqformula "53"))
                        (rule "applyEq" (formula "43") (term "1,0,0,0,1,0") (ifseqformula "53"))
                        (rule "applyEq" (formula "56") (term "1,0,1,1,1,0,0,0,1,0") (ifseqformula "53"))
                        (rule "applyEq" (formula "58") (term "0,1,0,0") (ifseqformula "53"))
                        (rule "applyEq" (formula "67") (term "1,0,1,0") (ifseqformula "53"))
                        (rule "applyEq" (formula "69") (term "1,0") (ifseqformula "53"))
                        (rule "close" (formula "69") (ifseqformula "33"))
                     )
                     (branch "result_46 = ls FALSE"
                        (rule "applyEqReverse" (formula "61") (term "0,0") (ifseqformula "53"))
                        (rule "applyEqReverse" (formula "54") (term "0,0,0,1,0") (ifseqformula "53"))
                        (rule "applyEqReverse" (formula "52") (term "0,0") (ifseqformula "53"))
                        (rule "hideAuxiliaryEq" (formula "52"))
                        (rule "nnf_notOr" (formula "29") (term "1,0,0,0,0"))
                        (rule "nnf_notOr" (formula "10") (term "1,0,0,0,0"))
                        (rule "nnf_notOr" (formula "7") (term "0,1,0,0,0,0"))
                        (rule "nnf_notAnd" (formula "53") (term "0,0,1,0"))
                        (rule "inEqSimp_notLeq" (formula "53") (term "1,0,0,1,0"))
                        (rule "polySimp_rightDist" (formula "53") (term "1,0,0,1,0,0,1,0"))
                        (rule "mul_literals" (formula "53") (term "0,1,0,0,1,0,0,1,0"))
                        (rule "polySimp_addAssoc" (formula "53") (term "0,0,1,0,0,1,0"))
                        (rule "add_literals" (formula "53") (term "0,0,0,1,0,0,1,0"))
                        (rule "add_zero_left" (formula "53") (term "0,0,1,0,0,1,0"))
                        (rule "inEqSimp_sepPosMonomial1" (formula "53") (term "1,0,0,1,0"))
                        (rule "polySimp_mulLiterals" (formula "53") (term "1,1,0,0,1,0"))
                        (rule "polySimp_elimOne" (formula "53") (term "1,1,0,0,1,0"))
                        (rule "nnf_notOr" (formula "1") (term "0,0,0,0,0,0"))
                        (rule "nnf_notOr" (formula "19") (term "0,1,0,0,0,0"))
                        (rule "nnf_notOr" (formula "22") (term "0,1,0,0,0,0"))
                        (rule "nnf_notOr" (formula "8") (term "0,1,0,0,0,0"))
                        (rule "nnf_notOr" (formula "23") (term "0,1,0,0,0,0"))
                        (rule "nnf_notOr" (formula "18") (term "0,1,0,0,0,0"))
                        (rule "nnf_notOr" (formula "2") (term "0,0,0,0,0,0"))
                        (rule "nnf_notOr" (formula "7") (term "0,0,1,0,0,0,0"))
                        (rule "lenNonNegative" (formula "62") (term "0"))
                        (rule "inEqSimp_commuteLeq" (formula "62"))
                        (rule "applyEq" (formula "62") (term "0") (ifseqformula "63"))
                        (rule "inEqSimp_sepPosMonomial1" (formula "62"))
                        (rule "mul_literals" (formula "62") (term "1"))
                        (rule "inEqSimp_subsumption1" (formula "62") (ifseqformula "52"))
                        (rule "leq_literals" (formula "62") (term "0"))
                         (builtin "One Step Simplification" (formula "62"))
                        (rule "true_left" (formula "62"))
                        (rule "equalityToSeqGetAndSeqLenLeft" (formula "63") (inst "iv=iv"))
                        (rule "andLeft" (formula "63"))
                        (rule "lenOfSeqSub" (formula "63") (term "0"))
                        (rule "polySimp_elimSub" (formula "63") (term "1,0"))
                        (rule "mul_literals" (formula "63") (term "1,1,0"))
                        (rule "add_zero_right" (formula "63") (term "1,0"))
                         (builtin "One Step Simplification" (formula "63"))
                        (rule "eqSymm" (formula "63") (term "1"))
                        (rule "lenOfSeqSub" (formula "64") (term "1,1,0,0"))
                        (rule "polySimp_elimSub" (formula "64") (term "1,1,1,0,0"))
                        (rule "mul_literals" (formula "64") (term "1,1,1,1,0,0"))
                        (rule "add_zero_right" (formula "64") (term "1,1,1,0,0"))
                        (rule "inEqSimp_ltToLeq" (formula "63") (term "0"))
                        (rule "add_zero_right" (formula "63") (term "0,0"))
                        (rule "polySimp_mulComm0" (formula "63") (term "1,0,0"))
                        (rule "inEqSimp_ltToLeq" (formula "64") (term "0,1,1,0,0"))
                        (rule "add_zero_right" (formula "64") (term "0,0,1,1,0,0"))
                        (rule "polySimp_mulComm0" (formula "64") (term "1,0,0,1,1,0,0"))
                        (rule "inEqSimp_ltToLeq" (formula "64") (term "1,0,0"))
                        (rule "polySimp_mulComm0" (formula "64") (term "1,0,0,1,0,0"))
                        (rule "inEqSimp_commuteLeq" (formula "64") (term "0,0,0"))
                        (rule "applyEq" (formula "64") (term "0,0,1,0") (ifseqformula "65"))
                         (builtin "One Step Simplification" (formula "64"))
                        (rule "true_left" (formula "64"))
                        (rule "inEqSimp_sepNegMonomial0" (formula "63") (term "0"))
                        (rule "polySimp_mulLiterals" (formula "63") (term "0,0"))
                        (rule "polySimp_elimOne" (formula "63") (term "0,0"))
                        (rule "cut_direct" (formula "57") (term "0,0,0,0"))
                        (branch "CUT: result_48.<created> = TRUE TRUE"
                            (builtin "One Step Simplification" (formula "58"))
                           (rule "true_left" (formula "58"))
                           (rule "seqGetAlphaCast" (formula "65") (term "0"))
                           (rule "castDel" (formula "65") (term "0"))
                            (builtin "One Step Simplification" (formula "65"))
                           (rule "true_left" (formula "65"))
                           (rule "nnf_notOr" (formula "1") (term "0,0,0,0,0,0,0"))
                           (rule "nnf_notOr" (formula "19") (term "0,0,1,0,0,0,0"))
                           (rule "nnf_notOr" (formula "8") (term "0,0,1,0,0,0,0"))
                           (rule "nnf_notOr" (formula "18") (term "0,0,1,0,0,0,0"))
                           (rule "nnf_notOr" (formula "2") (term "0,0,0,0,0,0,0"))
                           (rule "nnf_notOr" (formula "7") (term "0,0,0,1,0,0,0,0"))
                           (rule "commute_or_2" (formula "43") (term "0"))
                           (rule "nnf_notOr" (formula "1") (term "1,0,0,0,0,0,0,0"))
                           (rule "nnf_notOr" (formula "8") (term "0,0,0,1,0,0,0,0"))
                           (rule "nnf_notOr" (formula "2") (term "1,0,0,0,0,0,0,0"))
                           (rule "cnf_rightDist" (formula "28") (term "0,0"))
                           (rule "nnf_notOr" (formula "1") (term "0,1,0,0,0,0,0,0,0"))
                           (rule "nnf_notOr" (formula "2") (term "0,1,0,0,0,0,0,0,0"))
                           (rule "commute_or" (formula "26") (term "1,0,0,0"))
                           (rule "commute_or" (formula "7") (term "1,0,0,0"))
                           (rule "commute_or" (formula "9") (term "1,0,0,0"))
                           (rule "commute_or_2" (formula "35") (term "0"))
                           (rule "commute_or" (formula "21") (term "1,0,0,0"))
                           (rule "commute_or" (formula "20") (term "1,0,0,0"))
                           (rule "commute_or" (formula "53") (term "0,0"))
                           (rule "commute_or" (formula "3") (term "1,0,0,0"))
                           (rule "commute_or" (formula "25") (term "1,0,0,0"))
                           (rule "commute_or" (formula "22") (term "1,0,0,0"))
                           (rule "commute_or" (formula "53") (term "1,1,0"))
                           (rule "commute_or" (formula "4") (term "1,0,0,0"))
                           (rule "commute_or_2" (formula "30") (term "0,0,0"))
                           (rule "distr_forallAnd" (formula "28") (term "0"))
                           (rule "commute_or" (formula "2") (term "1,0,0,0"))
                           (rule "div_axiom" (formula "80") (term "0,0,0") (inst "quotient=quotient_0"))
                           (rule "equal_literals" (formula "1") (term "0"))
                            (builtin "One Step Simplification" (formula "1"))
                           (rule "mul_literals" (formula "1") (term "1,1,1,1"))
                           (rule "qeq_literals" (formula "1") (term "0,1"))
                            (builtin "One Step Simplification" (formula "1"))
                           (rule "andLeft" (formula "1"))
                           (rule "andLeft" (formula "1"))
                           (rule "polySimp_addAssoc" (formula "3") (term "0,1"))
                           (rule "polySimp_addComm1" (formula "3") (term "1"))
                           (rule "polySimp_addAssoc" (formula "3") (term "0,0,1"))
                           (rule "add_literals" (formula "3") (term "0,0,0,1"))
                           (rule "polySimp_addComm1" (formula "3") (term "0,1"))
                           (rule "add_literals" (formula "3") (term "0,0,1"))
                           (rule "inEqSimp_homoInEq0" (formula "2"))
                           (rule "polySimp_mulLiterals" (formula "2") (term "1,0"))
                           (rule "polySimp_addComm1" (formula "2") (term "0"))
                           (rule "polySimp_addComm1" (formula "2") (term "0,0"))
                           (rule "inEqSimp_homoInEq1" (formula "3"))
                           (rule "polySimp_mulLiterals" (formula "3") (term "1,0"))
                           (rule "polySimp_addComm1" (formula "3") (term "0"))
                           (rule "polySimp_addComm1" (formula "3") (term "0,0"))
                           (rule "applyEq" (formula "83") (term "0,0,0") (ifseqformula "1"))
                           (rule "inEqSimp_homoInEq0" (formula "83") (term "0"))
                           (rule "polySimp_mulLiterals" (formula "83") (term "1,0,0"))
                           (rule "polySimp_addComm1" (formula "83") (term "0,0"))
                           (rule "polySimp_addComm1" (formula "83") (term "0,0,0"))
                           (rule "applyEq" (formula "83") (term "1,1") (ifseqformula "1"))
                           (rule "inEqSimp_sepPosMonomial1" (formula "2"))
                           (rule "polySimp_mulComm0" (formula "2") (term "1"))
                           (rule "polySimp_rightDist" (formula "2") (term "1"))
                           (rule "polySimp_mulLiterals" (formula "2") (term "1,1"))
                           (rule "polySimp_elimOne" (formula "2") (term "1,1"))
                           (rule "polySimp_rightDist" (formula "2") (term "0,1"))
                           (rule "mul_literals" (formula "2") (term "0,0,1"))
                           (rule "polySimp_mulLiterals" (formula "2") (term "1,0,1"))
                           (rule "inEqSimp_sepPosMonomial0" (formula "3"))
                           (rule "polySimp_mulComm0" (formula "3") (term "1"))
                           (rule "polySimp_rightDist" (formula "3") (term "1"))
                           (rule "polySimp_mulLiterals" (formula "3") (term "1,1"))
                           (rule "polySimp_elimOne" (formula "3") (term "1,1"))
                           (rule "polySimp_rightDist" (formula "3") (term "0,1"))
                           (rule "polySimp_mulLiterals" (formula "3") (term "1,0,1"))
                           (rule "mul_literals" (formula "3") (term "0,0,1"))
                           (rule "inEqSimp_sepPosMonomial1" (formula "83") (term "0"))
                           (rule "polySimp_mulComm0" (formula "83") (term "1,0"))
                           (rule "polySimp_rightDist" (formula "83") (term "1,0"))
                           (rule "polySimp_mulLiterals" (formula "83") (term "1,1,0"))
                           (rule "polySimp_elimOne" (formula "83") (term "1,1,0"))
                           (rule "polySimp_rightDist" (formula "83") (term "0,1,0"))
                           (rule "mul_literals" (formula "83") (term "0,0,1,0"))
                           (rule "polySimp_mulLiterals" (formula "83") (term "1,0,1,0"))
                           (rule "inEqSimp_exactShadow3" (formula "50") (ifseqformula "3"))
                           (rule "mul_literals" (formula "50") (term "0,0"))
                           (rule "add_zero_left" (formula "50") (term "0"))
                           (rule "inEqSimp_sepPosMonomial1" (formula "50"))
                           (rule "polySimp_mulComm0" (formula "50") (term "1"))
                           (rule "polySimp_rightDist" (formula "50") (term "1"))
                           (rule "polySimp_mulLiterals" (formula "50") (term "1,1"))
                           (rule "mul_literals" (formula "50") (term "0,1"))
                           (rule "inEqSimp_exactShadow3" (formula "19") (ifseqformula "3"))
                           (rule "polySimp_rightDist" (formula "19") (term "0,0"))
                           (rule "mul_literals" (formula "19") (term "0,0,0"))
                           (rule "polySimp_addAssoc" (formula "19") (term "0"))
                           (rule "polySimp_addComm1" (formula "19") (term "0,0"))
                           (rule "polySimp_pullOutFactor2b" (formula "19") (term "0"))
                           (rule "add_literals" (formula "19") (term "1,1,0"))
                           (rule "times_zero_1" (formula "19") (term "1,0"))
                           (rule "add_zero_right" (formula "19") (term "0"))
                           (rule "polySimp_addAssoc" (formula "19") (term "0"))
                           (rule "add_literals" (formula "19") (term "0,0"))
                           (rule "inEqSimp_sepPosMonomial1" (formula "19"))
                           (rule "mul_literals" (formula "19") (term "1"))
                           (rule "elimGcdGeq_antec" (formula "19") (inst "elimGcdRightDiv=Z(0(#))") (inst "elimGcdLeftDiv=quotient_0") (inst "elimGcd=Z(6(9(2(7(6(9(4(9(2(4(#)))))))))))"))
                           (rule "leq_literals" (formula "19") (term "0,0"))
                            (builtin "One Step Simplification" (formula "19"))
                           (rule "polySimp_mulLiterals" (formula "19") (term "1,0,0,0,0,0"))
                           (rule "polySimp_mulLiterals" (formula "19") (term "1,0,0"))
                           (rule "mul_literals" (formula "19") (term "1,0,0,0,0,0"))
                           (rule "polySimp_addLiterals" (formula "19") (term "0,0,0,0"))
                           (rule "add_literals" (formula "19") (term "0,0,0,0"))
                           (rule "polySimp_pullOutFactor0b" (formula "19") (term "0,0"))
                           (rule "add_literals" (formula "19") (term "1,1,0,0"))
                           (rule "times_zero_1" (formula "19") (term "1,0,0"))
                           (rule "add_literals" (formula "19") (term "0,0"))
                           (rule "leq_literals" (formula "19") (term "0"))
                            (builtin "One Step Simplification" (formula "19"))
                           (rule "inEqSimp_exactShadow3" (formula "2") (ifseqformula "50"))
                           (rule "polySimp_rightDist" (formula "2") (term "0,0"))
                           (rule "polySimp_addComm1" (formula "2") (term "0"))
                           (rule "polySimp_rightDist" (formula "2") (term "0,0,0"))
                           (rule "mul_literals" (formula "2") (term "0,0,0,0"))
                           (rule "polySimp_mulLiterals" (formula "2") (term "1,0,0,0"))
                           (rule "polySimp_addComm1" (formula "2") (term "0,0"))
                           (rule "add_literals" (formula "2") (term "0,0,0"))
                           (rule "inEqSimp_sepNegMonomial1" (formula "2"))
                           (rule "polySimp_mulLiterals" (formula "2") (term "0"))
                           (rule "polySimp_elimOne" (formula "2") (term "0"))
                           (rule "inEqSimp_exactShadow3" (formula "52") (ifseqformula "19"))
                           (rule "polySimp_rightDist" (formula "52") (term "0,0"))
                           (rule "mul_literals" (formula "52") (term "0,0,0"))
                           (rule "polySimp_mulLiterals" (formula "52") (term "1,0,0"))
                           (rule "polySimp_addComm1" (formula "52") (term "0"))
                           (rule "add_literals" (formula "52") (term "0,0"))
                           (rule "inEqSimp_sepPosMonomial1" (formula "52"))
                           (rule "mul_literals" (formula "52") (term "1"))
                           (rule "inEqSimp_subsumption6" (formula "52") (ifseqformula "20"))
                           (rule "greater_literals" (formula "52") (term "0,0"))
                            (builtin "One Step Simplification" (formula "52"))
                           (rule "times_zero_1" (formula "52") (term "1,0"))
                           (rule "leq_literals" (formula "52") (term "0"))
                            (builtin "One Step Simplification" (formula "52"))
                           (rule "true_left" (formula "52"))
                           (rule "inEqSimp_exactShadow3" (formula "57") (ifseqformula "2"))
                           (rule "mul_literals" (formula "57") (term "0,0"))
                           (rule "add_zero_left" (formula "57") (term "0"))
                           (rule "inEqSimp_sepNegMonomial1" (formula "57"))
                           (rule "polySimp_mulLiterals" (formula "57") (term "0"))
                           (rule "elimGcdLeq_antec" (formula "57") (inst "elimGcdRightDiv=Z(0(#))") (inst "elimGcdLeftDiv=quotient_0") (inst "elimGcd=Z(6(9(2(7(6(9(4(9(2(4(#)))))))))))"))
                           (rule "neg_literal" (formula "57") (term "0,0,0,0,0,1,0"))
                           (rule "polySimp_mulLiterals" (formula "57") (term "1,0,1,0"))
                           (rule "leq_literals" (formula "57") (term "0,0"))
                            (builtin "One Step Simplification" (formula "57"))
                           (rule "polySimp_mulLiterals" (formula "57") (term "1,0,0,0,0,0"))
                           (rule "mul_literals" (formula "57") (term "1,0,0,0,0,0"))
                           (rule "polySimp_addLiterals" (formula "57") (term "0,0,0,0"))
                           (rule "add_literals" (formula "57") (term "0,0,0,0"))
                           (rule "polySimp_pullOutFactor0b" (formula "57") (term "0,0"))
                           (rule "add_literals" (formula "57") (term "1,1,0,0"))
                           (rule "times_zero_1" (formula "57") (term "1,0,0"))
                           (rule "add_literals" (formula "57") (term "0,0"))
                           (rule "qeq_literals" (formula "57") (term "0"))
                            (builtin "One Step Simplification" (formula "57"))
                           (rule "inEqSimp_antiSymm" (formula "20") (ifseqformula "57"))
                           (rule "applyEq" (formula "21") (term "0") (ifseqformula "20"))
                           (rule "qeq_literals" (formula "21"))
                           (rule "true_left" (formula "21"))
                           (rule "applyEq" (formula "2") (term "0,1,1") (ifseqformula "20"))
                           (rule "mul_literals" (formula "2") (term "1,1"))
                           (rule "add_literals" (formula "2") (term "1"))
                           (rule "applyEqRigid" (formula "52") (term "0,1,1") (ifseqformula "20"))
                           (rule "mul_literals" (formula "52") (term "1,1"))
                           (rule "add_literals" (formula "52") (term "1"))
                           (rule "applyEqRigid" (formula "57") (term "0") (ifseqformula "20"))
                           (rule "leq_literals" (formula "57"))
                           (rule "true_left" (formula "57"))
                           (rule "applyEq" (formula "86") (term "1,1") (ifseqformula "20"))
                           (rule "applyEqRigid" (formula "1") (term "1") (ifseqformula "20"))
                           (rule "applyEq" (formula "3") (term "0,1,0,1") (ifseqformula "20"))
                           (rule "mul_literals" (formula "3") (term "1,0,1"))
                           (rule "add_literals" (formula "3") (term "0,1"))
                           (rule "applyEq" (formula "86") (term "0,1,0,1,0") (ifseqformula "20"))
                           (rule "times_zero_2" (formula "86") (term "1,0,1,0"))
                           (rule "add_literals" (formula "86") (term "0,1,0"))
                           (rule "replace_known_left" (formula "86") (term "0") (ifseqformula "21"))
                            (builtin "One Step Simplification" (formula "86"))
                           (rule "inEqSimp_leqRight" (formula "86"))
                           (rule "mul_literals" (formula "1") (term "1,0,0"))
                           (rule "add_zero_right" (formula "1") (term "0,0"))
                           (rule "applyEqRigid" (formula "5") (term "0,1,0,1") (ifseqformula "21"))
                           (rule "times_zero_2" (formula "5") (term "1,0,1"))
                           (rule "add_literals" (formula "5") (term "0,1"))
                           (rule "inEqSimp_sepPosMonomial1" (formula "1"))
                           (rule "mul_literals" (formula "1") (term "1"))
                           (rule "inEqSimp_subsumption0" (formula "3") (ifseqformula "20"))
                           (rule "leq_literals" (formula "3") (term "0"))
                            (builtin "One Step Simplification" (formula "3"))
                           (rule "true_left" (formula "3"))
                           (rule "inEqSimp_subsumption1" (formula "3") (ifseqformula "21"))
                           (rule "inEqSimp_homoInEq0" (formula "3") (term "0"))
                           (rule "polySimp_mulComm0" (formula "3") (term "1,0,0"))
                           (rule "polySimp_rightDist" (formula "3") (term "1,0,0"))
                           (rule "mul_literals" (formula "3") (term "0,1,0,0"))
                           (rule "polySimp_addAssoc" (formula "3") (term "0,0"))
                           (rule "polySimp_addComm1" (formula "3") (term "0,0,0"))
                           (rule "add_literals" (formula "3") (term "0,0,0,0"))
                           (rule "polySimp_pullOutFactor1b" (formula "3") (term "0,0"))
                           (rule "add_literals" (formula "3") (term "1,1,0,0"))
                           (rule "times_zero_1" (formula "3") (term "1,0,0"))
                           (rule "add_literals" (formula "3") (term "0,0"))
                           (rule "qeq_literals" (formula "3") (term "0"))
                            (builtin "One Step Simplification" (formula "3"))
                           (rule "true_left" (formula "3"))
                           (rule "inEqSimp_subsumption1" (formula "51") (ifseqformula "56"))
                           (rule "leq_literals" (formula "51") (term "0"))
                            (builtin "One Step Simplification" (formula "51"))
                           (rule "true_left" (formula "51"))
                           (rule "inEqSimp_exactShadow3" (formula "51") (ifseqformula "3"))
                           (rule "mul_literals" (formula "51") (term "0,0"))
                           (rule "add_zero_left" (formula "51") (term "0"))
                           (rule "inEqSimp_sepPosMonomial1" (formula "51"))
                           (rule "mul_literals" (formula "51") (term "1"))
                           (rule "inEqSimp_subsumption1" (formula "51") (ifseqformula "56"))
                           (rule "leq_literals" (formula "51") (term "0"))
                            (builtin "One Step Simplification" (formula "51"))
                           (rule "true_left" (formula "51"))
                           (rule "commute_or_2" (formula "8") (term "0,0,0"))
                           (rule "commute_or" (formula "13") (term "1,0,0,0"))
                           (rule "commute_or_2" (formula "28") (term "0,0,0"))
                           (rule "distr_forallAnd" (formula "32"))
                           (rule "andLeft" (formula "32"))
                           (rule "commute_or_2" (formula "9") (term "0,0,0"))
                           (rule "commute_or" (formula "4") (term "1,0,0,0"))
                           (rule "commute_or" (formula "23") (term "1,0,0,0"))
                           (rule "commute_or_2" (formula "31") (term "0,0,0"))
                           (rule "commute_or" (formula "11") (term "1,0,0,0"))
                           (rule "commute_or" (formula "68"))
                           (rule "inEqSimp_or_weaken1" (formula "68"))
                           (rule "add_zero_right" (formula "68") (term "1,0"))
                            (builtin "One Step Simplification" (formula "68") (ifInst ""  (formula "57")))
                           (rule "true_left" (formula "68"))
                           (rule "commute_or" (formula "27") (term "1,0,0,0"))
                           (rule "commute_or_2" (formula "34") (term "0,0,0"))
                           (rule "commute_or" (formula "22") (term "1,0,0,0"))
                           (rule "commute_or_2" (formula "58") (term "0,1,0"))
                           (rule "cnf_rightDist" (formula "30") (term "0,0,0,0"))
                            (builtin "One Step Simplification" (formula "30"))
                           (rule "cnf_rightDist" (formula "12") (term "0,0,0,0"))
                            (builtin "One Step Simplification" (formula "12"))
                           (rule "cnf_rightDist" (formula "25") (term "0,0,0,0"))
                            (builtin "One Step Simplification" (formula "25"))
                           (rule "cnf_rightDist" (formula "24") (term "0,0,0,0"))
                            (builtin "One Step Simplification" (formula "24"))
                           (rule "Class_axiom_0_in_de_polyas_core3_open_cred_CredTool" (inst "seq=seq") (inst "i=i_2") (inst "str=str") (inst "seq_0=seq_0") (inst "i_0=i_0") (inst "obj=obj") (inst "seq_1=seq_1") (inst "i_1=i_1") (inst "sv_heap=anon_heap_add<<anonHeapFunction>>"))
                           (rule "andLeft" (formula "1"))
                           (rule "andLeft" (formula "1"))
                           (rule "castedGetAny" (formula "3") (term "0,1,1,0,0,0"))
                           (rule "castedGetAny" (formula "1") (term "0,0,0,0,0"))
                           (rule "castedGetAny" (formula "1") (term "0,0,0,0,1,0,0"))
                           (rule "castedGetAny" (formula "1") (term "0,0,0,1,0,1,0,0"))
                           (rule "castedGetAny" (formula "1") (term "0,0,1,1,0,1,0,0"))
                           (rule "castedGetAny" (formula "2") (term "0,1,1,0,0,0"))
                           (rule "nnf_imp2or" (formula "1") (term "0,0"))
                            (builtin "One Step Simplification" (formula "1"))
                           (rule "nnf_imp2or" (formula "3") (term "0,0,0"))
                           (rule "Class_axiom_0_in_de_polyas_core3_open_cred_CredTool" (inst "seq=seq") (inst "i=i_2") (inst "str=str") (inst "seq_0=seq_0") (inst "i_0=i_0") (inst "obj=obj") (inst "seq_1=seq_1") (inst "i_1=i_1") (inst "sv_heap=anon(heapAfter_get,
     singleton(result_46, java.util.Collection::$seq),
     anon_heap_add<<anonHeapFunction>>)"))
                            (builtin "One Step Simplification" (formula "1"))
                           (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,1,0,0,0,0,0,1") (ifseqformula "64"))
                            (builtin "One Step Simplification" (formula "1"))
                           (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,1,0,0,0,0,0,1,0") (ifseqformula "64"))
                            (builtin "One Step Simplification" (formula "1"))
                           (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,0,0,1,0,0,0,0,0,1") (ifseqformula "54"))
                           (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,0,0,0,1,0,0,0,0,0,1") (ifseqformula "47"))
                           (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,0,0,1,0,0,0,0,0,1,0") (ifseqformula "54"))
                           (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,0,0,0,1,0,0,0,0,0,1,0") (ifseqformula "47"))
                           (rule "andLeft" (formula "1"))
                           (rule "andLeft" (formula "1"))
                           (rule "castedGetAny" (formula "3") (term "0,1,1,0,0,0"))
                           (rule "castedGetAny" (formula "2") (term "0,1,1,0,0,0"))
                           (rule "castedGetAny" (formula "1") (term "0,0,1,1,0,1,0,0"))
                           (rule "castedGetAny" (formula "1") (term "0,0,0,0,1,0,0"))
                           (rule "castedGetAny" (formula "1") (term "0,0,0,1,0,1,0,0"))
                           (rule "castedGetAny" (formula "1") (term "0,0,0,0,0"))
                           (rule "Class_axiom_0_in_de_polyas_core3_open_cred_CredTool" (inst "seq=seq") (inst "i=i_2") (inst "str=str") (inst "seq_0=seq_0") (inst "i_0=i_0") (inst "obj=obj") (inst "seq_1=seq_1") (inst "i_1=i_1") (inst "sv_heap=heapAfter_add"))
                           (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "1,0,0,0,0,0,1") (ifseqformula "72"))
                           (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "1,0,0,0,0,0,1,0") (ifseqformula "72"))
                           (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,1,0,0,0,0,0,1") (ifseqformula "67"))
                            (builtin "One Step Simplification" (formula "1"))
                           (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,1,0,0,0,0,0,1,0") (ifseqformula "67"))
                            (builtin "One Step Simplification" (formula "1"))
                           (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,0,0,1,0,0,0,0,0,1") (ifseqformula "57"))
                           (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,0,0,0,1,0,0,0,0,0,1") (ifseqformula "50"))
                           (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,0,0,1,0,0,0,0,0,1,0") (ifseqformula "57"))
                           (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,0,0,0,1,0,0,0,0,0,1,0") (ifseqformula "50"))
                           (rule "andLeft" (formula "1"))
                           (rule "andLeft" (formula "1"))
                           (rule "castedGetAny" (formula "3") (term "0,1,1,0,0,0"))
                           (rule "castedGetAny" (formula "1") (term "0,0,0,1,0,1,0,0"))
                           (rule "castedGetAny" (formula "1") (term "0,0,0,0,1,0,0"))
                           (rule "castedGetAny" (formula "2") (term "0,1,1,0,0,0"))
                           (rule "castedGetAny" (formula "1") (term "0,0,1,1,0,1,0,0"))
                           (rule "castedGetAny" (formula "1") (term "0,0,0,0,0"))
                           (rule "cnf_rightDist" (formula "12") (term "0,0,0,0"))
                            (builtin "One Step Simplification" (formula "12"))
                           (rule "nnf_imp2or" (formula "5") (term "0,0,0"))
                           (rule "cnf_rightDist" (formula "35") (term "0,0,0,0"))
                            (builtin "One Step Simplification" (formula "35"))
                           (rule "commute_or" (formula "54") (term "0,0"))
                           (rule "nnf_imp2or" (formula "1") (term "0,0"))
                            (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "4")))
                           (rule "true_left" (formula "1"))
                           (rule "nnf_notAnd" (formula "5") (term "0,0,0,0"))
                            (builtin "One Step Simplification" (formula "5"))
                           (rule "nnf_imp2or" (formula "2") (term "0,0,0"))
                           (rule "cnf_rightDist" (formula "12") (term "0,0,0,0"))
                            (builtin "One Step Simplification" (formula "12"))
                           (rule "commute_or" (formula "45") (term "0,0"))
                           (rule "nnf_imp2or" (formula "1") (term "0,0,0"))
                           (rule "cnf_rightDist" (formula "18") (term "0,0,0,0"))
                            (builtin "One Step Simplification" (formula "18"))
                           (rule "commute_or_2" (formula "15") (term "0,0,0"))
                           (rule "cnf_rightDist" (formula "31") (term "0,0,0,0"))
                           (rule "cnf_rightDist" (formula "32") (term "0,0,0,0"))
                           (rule "commute_or" (formula "9") (term "0,0,0,0"))
                           (rule "commute_or" (formula "10") (term "0,0,0,0"))
                           (rule "nnf_notAnd" (formula "4") (term "0,0,0,0"))
                            (builtin "One Step Simplification" (formula "4"))
                           (rule "nnf_imp2or" (formula "5") (term "1,0,0,0"))
                           (rule "nnf_notAnd" (formula "2") (term "0,0,0,0"))
                            (builtin "One Step Simplification" (formula "2"))
                           (rule "nnf_imp2or" (formula "1") (term "1,0,0,0"))
                           (rule "nnf_notAnd" (formula "1") (term "0,0,0,0"))
                            (builtin "One Step Simplification" (formula "1"))
                           (rule "nnf_notOr" (formula "5") (term "0,0,0,0,0"))
                           (rule "nnf_imp2or" (formula "4") (term "1,0,0,0"))
                           (rule "nnf_imp2or" (formula "2") (term "1,0,0,0"))
                           (rule "nnf_notOr" (formula "4") (term "0,0,0,0,0"))
                           (rule "shift_paren_or" (formula "40") (term "0,0,0,0"))
                           (rule "nnf_notOr" (formula "2") (term "0,0,0,0,0"))
                           (rule "nnf_notOr" (formula "1") (term "0,0,0,0,0"))
                           (rule "cnf_rightDist" (formula "28") (term "0,0,0,0"))
                           (rule "cnf_rightDist" (formula "27") (term "0,0,0,0"))
                           (rule "cnf_rightDist" (formula "63") (term "1,1,0"))
                           (rule "cnf_rightDist" (formula "16") (term "0,0,0,0"))
                           (rule "commute_and" (formula "40") (term "1,0,0,0"))
                           (rule "nnf_notOr" (formula "2") (term "1,0,0,0,0,0"))
                           (rule "nnf_notOr" (formula "1") (term "1,0,0,0,0,0"))
                           (rule "nnf_notOr" (formula "2") (term "0,1,0,0,0,0,0"))
                           (rule "nnf_notOr" (formula "1") (term "0,1,0,0,0,0,0"))
                           (rule "nnf_notOr" (formula "2") (term "0,0,1,0,0,0,0,0"))
                           (rule "nnf_notOr" (formula "1") (term "0,0,1,0,0,0,0,0"))
                           (rule "nnf_notOr" (formula "2") (term "0,0,0,1,0,0,0,0,0"))
                           (rule "nnf_notOr" (formula "1") (term "0,0,0,1,0,0,0,0,0"))
                           (rule "nnf_notOr" (formula "2") (term "0,0,0,0,1,0,0,0,0,0"))
                           (rule "nnf_notOr" (formula "1") (term "0,0,0,0,1,0,0,0,0,0"))
                           (rule "commute_or" (formula "38") (term "0,0"))
                           (rule "seqGetAlphaCast" (formula "68") (term "0"))
                           (rule "castedGetAny" (formula "68") (term "0"))
                            (builtin "One Step Simplification" (formula "68"))
                           (rule "true_left" (formula "68"))
                           (rule "cnf_rightDist" (formula "37") (term "0,0"))
                           (rule "distr_forallAnd" (formula "37") (term "0"))
                           (rule "distr_forallAnd" (formula "37"))
                           (rule "andLeft" (formula "37"))
                           (rule "shift_paren_or" (formula "35") (term "0,0,0"))
                            (builtin "One Step Simplification" (formula "35"))
                           (rule "eqSymm" (formula "35") (term "1,0,0,0"))
                           (rule "castedGetAny" (formula "35") (term "1,0,0,0,0,0,0,0"))
                           (rule "castedGetAny" (formula "35") (term "0,1,0,0,0,0"))
                           (rule "castedGetAny" (formula "35") (term "0,1,0,0,0"))
                            (builtin "One Step Simplification" (formula "35"))
                           (rule "true_left" (formula "35"))
                           (rule "shift_paren_or" (formula "13") (term "0,0,0,0"))
                           (rule "commute_or_2" (formula "53") (term "0"))
                           (rule "commute_or" (formula "17") (term "0,0,0,0"))
                           (rule "shift_paren_or" (formula "33") (term "0,0,0,0"))
                           (rule "commute_or" (formula "30") (term "0,0,0,0"))
                           (rule "shift_paren_or" (formula "14") (term "0,0,0,0"))
                           (rule "commute_or" (formula "29") (term "0,0,0,0"))
                           (rule "shift_paren_or" (formula "35") (term "0,0,0,0"))
                           (rule "commute_or_2" (formula "45") (term "0"))
                           (rule "commute_or" (formula "39") (term "1,0,0,0,0"))
                           (rule "commute_and" (formula "13") (term "1,0,0,0"))
                           (rule "commute_and" (formula "33") (term "1,0,0,0"))
                           (rule "commute_and" (formula "14") (term "1,0,0,0"))
                           (rule "commute_and" (formula "35") (term "1,0,0,0"))
                           (rule "commute_and" (formula "39") (term "1,0,0,0"))
                           (rule "commute_or" (formula "31") (term "0,0,0"))
                           (rule "commute_or" (formula "32") (term "0,0,0"))
                           (rule "commute_or_2" (formula "9") (term "0,0,0"))
                           (rule "commute_or" (formula "11") (term "0,0,0,0"))
                           (rule "commute_or_2" (formula "10") (term "0,0,0"))
                           (rule "shift_paren_or" (formula "34") (term "0,0,0"))
                            (builtin "One Step Simplification" (formula "34"))
                           (rule "eqSymm" (formula "34") (term "1,0,0,0"))
                           (rule "castedGetAny" (formula "34") (term "0,1,0,0,0,0"))
                           (rule "castedGetAny" (formula "34") (term "1,0,0,0,0,0,0,0"))
                           (rule "castedGetAny" (formula "34") (term "0,1,0,0,0"))
                            (builtin "One Step Simplification" (formula "34"))
                           (rule "true_left" (formula "34"))
                           (rule "shift_paren_or" (formula "12") (term "0,0,0"))
                            (builtin "One Step Simplification" (formula "12"))
                           (rule "eqSymm" (formula "12") (term "1,0,0,0"))
                           (rule "castedGetAny" (formula "12") (term "0,1,0,0,0,0"))
                           (rule "castedGetAny" (formula "12") (term "1,0,0,0,0,0,0,0"))
                           (rule "castedGetAny" (formula "12") (term "0,1,0,0,0"))
                            (builtin "One Step Simplification" (formula "12"))
                           (rule "true_left" (formula "12"))
                           (rule "shift_paren_or" (formula "17") (term "0,0,0"))
                            (builtin "One Step Simplification" (formula "17"))
                           (rule "eqSymm" (formula "17") (term "1,0,0,0"))
                           (rule "castedGetAny" (formula "17") (term "1,0,0,0,0,0,0,0"))
                           (rule "castedGetAny" (formula "17") (term "0,1,0,0,0,0"))
                           (rule "castedGetAny" (formula "17") (term "0,1,0,0,0"))
                            (builtin "One Step Simplification" (formula "17"))
                           (rule "true_left" (formula "17"))
                           (rule "commute_or" (formula "26") (term "0,0,0"))
                           (rule "commute_or" (formula "25") (term "0,0,0"))
                           (rule "commute_or" (formula "15") (term "0,0,0"))
                           (rule "commute_or" (formula "34") (term "0,0"))
                           (rule "commute_or" (formula "5") (term "1,0,0,0"))
                           (rule "cnf_rightDist" (formula "60") (term "0"))
                           (rule "distr_forallAnd" (formula "60"))
                           (rule "andLeft" (formula "60"))
                           (rule "commute_or" (formula "1") (term "1,0,0,0"))
                           (rule "commute_or" (formula "5") (term "0,0,0,0"))
                           (rule "commute_or" (formula "4") (term "1,0,0,0"))
                           (rule "commute_or" (formula "2") (term "1,0,0,0"))
                           (rule "commute_or" (formula "4") (term "0,0,0,0"))
                           (rule "commute_or_2" (formula "37") (term "0,0,0,0"))
                           (rule "shift_paren_or" (formula "14") (term "0,0,0,0"))
                           (rule "commute_or" (formula "2") (term "0,0,0,0"))
                           (rule "shift_paren_and" (formula "3") (term "0,1,0,0"))
                            (builtin "One Step Simplification" (formula "3"))
                           (rule "commute_or" (formula "1") (term "0,0,0,0"))
                           (rule "div_axiom" (formula "6") (term "0") (inst "quotient=quotient_1"))
                           (rule "qeq_literals" (formula "6") (term "0,1,1"))
                            (builtin "One Step Simplification" (formula "6"))
                           (rule "mul_literals" (formula "6") (term "1,1,1,1"))
                           (rule "equal_literals" (formula "6") (term "0"))
                            (builtin "One Step Simplification" (formula "6"))
                           (rule "andLeft" (formula "6"))
                           (rule "andLeft" (formula "6"))
                           (rule "polySimp_addAssoc" (formula "8") (term "0,1"))
                           (rule "polySimp_addComm1" (formula "8") (term "1"))
                           (rule "polySimp_addAssoc" (formula "8") (term "0,0,1"))
                           (rule "add_literals" (formula "8") (term "0,0,0,1"))
                           (rule "polySimp_addComm1" (formula "8") (term "0,1"))
                           (rule "add_literals" (formula "8") (term "0,0,1"))
                           (rule "inEqSimp_homoInEq0" (formula "7"))
                           (rule "polySimp_mulLiterals" (formula "7") (term "1,0"))
                           (rule "polySimp_addComm1" (formula "7") (term "0"))
                           (rule "polySimp_addComm1" (formula "7") (term "0,0"))
                           (rule "inEqSimp_homoInEq1" (formula "8"))
                           (rule "polySimp_mulLiterals" (formula "8") (term "1,0"))
                           (rule "polySimp_addComm1" (formula "8") (term "0"))
                           (rule "polySimp_addComm1" (formula "8") (term "0,0"))
                           (rule "applyEq" (formula "9") (term "0") (ifseqformula "6"))
                           (rule "inEqSimp_sepPosMonomial1" (formula "7"))
                           (rule "polySimp_mulComm0" (formula "7") (term "1"))
                           (rule "polySimp_rightDist" (formula "7") (term "1"))
                           (rule "polySimp_mulLiterals" (formula "7") (term "1,1"))
                           (rule "polySimp_elimOne" (formula "7") (term "1,1"))
                           (rule "polySimp_rightDist" (formula "7") (term "0,1"))
                           (rule "polySimp_mulLiterals" (formula "7") (term "1,0,1"))
                           (rule "mul_literals" (formula "7") (term "0,0,1"))
                           (rule "inEqSimp_sepPosMonomial0" (formula "8"))
                           (rule "polySimp_mulComm0" (formula "8") (term "1"))
                           (rule "polySimp_rightDist" (formula "8") (term "1"))
                           (rule "polySimp_mulLiterals" (formula "8") (term "1,1"))
                           (rule "polySimp_elimOne" (formula "8") (term "1,1"))
                           (rule "polySimp_rightDist" (formula "8") (term "0,1"))
                           (rule "polySimp_mulLiterals" (formula "8") (term "1,0,1"))
                           (rule "mul_literals" (formula "8") (term "0,0,1"))
                           (rule "inEqSimp_exactShadow3" (formula "7") (ifseqformula "56"))
                           (rule "polySimp_rightDist" (formula "7") (term "0,0"))
                           (rule "polySimp_addComm1" (formula "7") (term "0"))
                           (rule "polySimp_rightDist" (formula "7") (term "0,0,0"))
                           (rule "mul_literals" (formula "7") (term "0,0,0,0"))
                           (rule "polySimp_mulLiterals" (formula "7") (term "1,0,0,0"))
                           (rule "polySimp_addComm1" (formula "7") (term "0,0"))
                           (rule "add_literals" (formula "7") (term "0,0,0"))
                           (rule "inEqSimp_sepNegMonomial1" (formula "7"))
                           (rule "polySimp_mulLiterals" (formula "7") (term "0"))
                           (rule "polySimp_elimOne" (formula "7") (term "0"))
                           (rule "inEqSimp_exactShadow3" (formula "8") (ifseqformula "12"))
                           (rule "polySimp_rightDist" (formula "8") (term "0,0"))
                           (rule "polySimp_rightDist" (formula "8") (term "0,0,0"))
                           (rule "polySimp_mulLiterals" (formula "8") (term "1,0,0,0"))
                           (rule "mul_literals" (formula "8") (term "0,0,0,0"))
                           (rule "polySimp_addAssoc" (formula "8") (term "0"))
                           (rule "polySimp_addComm1" (formula "8") (term "0,0"))
                           (rule "polySimp_pullOutFactor2b" (formula "8") (term "0"))
                           (rule "add_literals" (formula "8") (term "1,1,0"))
                           (rule "times_zero_1" (formula "8") (term "1,0"))
                           (rule "add_zero_right" (formula "8") (term "0"))
                           (rule "polySimp_addComm1" (formula "8") (term "0"))
                           (rule "add_literals" (formula "8") (term "0,0"))
                           (rule "inEqSimp_sepNegMonomial1" (formula "8"))
                           (rule "polySimp_mulLiterals" (formula "8") (term "0"))
                           (rule "elimGcdLeq_antec" (formula "8") (inst "elimGcdRightDiv=Z(1(#))") (inst "elimGcdLeftDiv=quotient_1") (inst "elimGcd=Z(6(9(2(7(6(9(4(9(2(4(#)))))))))))"))
                           (rule "neg_literal" (formula "8") (term "0,0,0,0,0,1,0"))
                           (rule "polySimp_mulLiterals" (formula "8") (term "1,0,1,0"))
                           (rule "polySimp_mulLiterals" (formula "8") (term "1,0,0,0,0,1,0"))
                           (rule "leq_literals" (formula "8") (term "0,0"))
                            (builtin "One Step Simplification" (formula "8"))
                           (rule "mul_literals" (formula "8") (term "1,0,0,0,0,0"))
                           (rule "polySimp_addLiterals" (formula "8") (term "0,0,0,0"))
                           (rule "add_literals" (formula "8") (term "0,0,0,0"))
                           (rule "polySimp_pullOutFactor0b" (formula "8") (term "0,0"))
                           (rule "add_literals" (formula "8") (term "1,1,0,0"))
                           (rule "times_zero_1" (formula "8") (term "1,0,0"))
                           (rule "add_zero_right" (formula "8") (term "0,0"))
                           (rule "qeq_literals" (formula "8") (term "0"))
                            (builtin "One Step Simplification" (formula "8"))
                           (rule "inEqSimp_exactShadow3" (formula "59") (ifseqformula "10"))
                           (rule "times_zero_1" (formula "59") (term "0,0"))
                           (rule "add_zero_left" (formula "59") (term "0"))
                           (rule "inEqSimp_sepPosMonomial1" (formula "59"))
                           (rule "polySimp_mulComm0" (formula "59") (term "1"))
                           (rule "polySimp_rightDist" (formula "59") (term "1"))
                           (rule "mul_literals" (formula "59") (term "0,1"))
                           (rule "polySimp_mulLiterals" (formula "59") (term "1,1"))
                           (rule "inEqSimp_exactShadow3" (formula "28") (ifseqformula "10"))
                           (rule "polySimp_rightDist" (formula "28") (term "0,0"))
                           (rule "mul_literals" (formula "28") (term "0,0,0"))
                           (rule "polySimp_addAssoc" (formula "28") (term "0"))
                           (rule "polySimp_addComm1" (formula "28") (term "0,0"))
                           (rule "polySimp_pullOutFactor2b" (formula "28") (term "0"))
                           (rule "add_literals" (formula "28") (term "1,1,0"))
                           (rule "times_zero_1" (formula "28") (term "1,0"))
                           (rule "add_zero_right" (formula "28") (term "0"))
                           (rule "polySimp_addAssoc" (formula "28") (term "0"))
                           (rule "add_literals" (formula "28") (term "0,0"))
                           (rule "inEqSimp_sepPosMonomial1" (formula "28"))
                           (rule "mul_literals" (formula "28") (term "1"))
                           (rule "inEqSimp_subsumption6" (formula "28") (ifseqformula "11"))
                           (rule "greater_literals" (formula "28") (term "0,0"))
                            (builtin "One Step Simplification" (formula "28"))
                           (rule "mul_literals" (formula "28") (term "1,0"))
                           (rule "leq_literals" (formula "28") (term "0"))
                            (builtin "One Step Simplification" (formula "28"))
                           (rule "true_left" (formula "28"))
                           (rule "inEqSimp_exactShadow3" (formula "64") (ifseqformula "7"))
                           (rule "mul_literals" (formula "64") (term "0,0"))
                           (rule "add_zero_left" (formula "64") (term "0"))
                           (rule "inEqSimp_sepNegMonomial1" (formula "64"))
                           (rule "polySimp_mulLiterals" (formula "64") (term "0"))
                           (rule "inEqSimp_contradInEq5" (formula "64") (ifseqformula "11"))
                           (rule "greater_literals" (formula "64") (term "0,0"))
                            (builtin "One Step Simplification" (formula "64"))
                           (rule "mul_literals" (formula "64") (term "1,0"))
                           (rule "qeq_literals" (formula "64") (term "0"))
                            (builtin "One Step Simplification" (formula "64"))
                           (rule "closeFalse" (formula "64"))
                        )
                        (branch "CUT: result_48.<created> = TRUE FALSE"
                            (builtin "One Step Simplification" (formula "57"))
                           (rule "seqGetAlphaCast" (formula "65") (term "0"))
                           (rule "castDel" (formula "65") (term "0"))
                            (builtin "One Step Simplification" (formula "65"))
                           (rule "true_left" (formula "65"))
                           (rule "nnf_notOr" (formula "1") (term "0,0,0,0,0,0,0"))
                           (rule "nnf_notOr" (formula "19") (term "0,0,1,0,0,0,0"))
                           (rule "nnf_notOr" (formula "8") (term "0,0,1,0,0,0,0"))
                           (rule "nnf_notOr" (formula "18") (term "0,0,1,0,0,0,0"))
                           (rule "nnf_notOr" (formula "2") (term "0,0,0,0,0,0,0"))
                           (rule "nnf_notOr" (formula "7") (term "0,0,0,1,0,0,0,0"))
                           (rule "commute_or_2" (formula "43") (term "0"))
                           (rule "nnf_notOr" (formula "1") (term "1,0,0,0,0,0,0,0"))
                           (rule "nnf_notOr" (formula "8") (term "0,0,0,1,0,0,0,0"))
                           (rule "nnf_notOr" (formula "2") (term "1,0,0,0,0,0,0,0"))
                           (rule "cnf_rightDist" (formula "28") (term "0,0"))
                           (rule "nnf_notOr" (formula "1") (term "0,1,0,0,0,0,0,0,0"))
                           (rule "nnf_notOr" (formula "2") (term "0,1,0,0,0,0,0,0,0"))
                           (rule "commute_or" (formula "26") (term "1,0,0,0"))
                           (rule "commute_or" (formula "7") (term "1,0,0,0"))
                           (rule "commute_or" (formula "9") (term "1,0,0,0"))
                           (rule "commute_or_2" (formula "35") (term "0"))
                           (rule "commute_or" (formula "21") (term "1,0,0,0"))
                           (rule "commute_or" (formula "20") (term "1,0,0,0"))
                           (rule "commute_or" (formula "53") (term "0,0"))
                           (rule "commute_or" (formula "3") (term "1,0,0,0"))
                           (rule "commute_or" (formula "25") (term "1,0,0,0"))
                           (rule "commute_or" (formula "22") (term "1,0,0,0"))
                           (rule "commute_or" (formula "53") (term "1,1,0"))
                           (rule "commute_or" (formula "4") (term "1,0,0,0"))
                           (rule "commute_or_2" (formula "30") (term "0,0,0"))
                           (rule "distr_forallAnd" (formula "28") (term "0"))
                           (rule "commute_or" (formula "2") (term "1,0,0,0"))
                           (rule "div_axiom" (formula "81") (term "0,0,0") (inst "quotient=quotient_0"))
                           (rule "mul_literals" (formula "1") (term "1,1,1,1,1"))
                           (rule "qeq_literals" (formula "1") (term "0,1,1"))
                            (builtin "One Step Simplification" (formula "1"))
                           (rule "equal_literals" (formula "1") (term "0"))
                            (builtin "One Step Simplification" (formula "1"))
                           (rule "andLeft" (formula "1"))
                           (rule "andLeft" (formula "1"))
                           (rule "polySimp_addAssoc" (formula "3") (term "0,1"))
                           (rule "polySimp_addComm1" (formula "3") (term "1"))
                           (rule "polySimp_addAssoc" (formula "3") (term "0,0,1"))
                           (rule "add_literals" (formula "3") (term "0,0,0,1"))
                           (rule "polySimp_addComm1" (formula "3") (term "0,1"))
                           (rule "add_literals" (formula "3") (term "0,0,1"))
                           (rule "inEqSimp_homoInEq0" (formula "2"))
                           (rule "polySimp_mulLiterals" (formula "2") (term "1,0"))
                           (rule "polySimp_addComm1" (formula "2") (term "0"))
                           (rule "polySimp_addComm1" (formula "2") (term "0,0"))
                           (rule "inEqSimp_homoInEq1" (formula "3"))
                           (rule "polySimp_mulLiterals" (formula "3") (term "1,0"))
                           (rule "polySimp_addComm1" (formula "3") (term "0"))
                           (rule "polySimp_addComm1" (formula "3") (term "0,0"))
                           (rule "applyEq" (formula "84") (term "1,1") (ifseqformula "1"))
                           (rule "applyEq" (formula "84") (term "0,0,0") (ifseqformula "1"))
                           (rule "inEqSimp_homoInEq0" (formula "84") (term "0"))
                           (rule "polySimp_mulLiterals" (formula "84") (term "1,0,0"))
                           (rule "polySimp_addComm1" (formula "84") (term "0,0"))
                           (rule "polySimp_addComm1" (formula "84") (term "0,0,0"))
                           (rule "inEqSimp_sepPosMonomial1" (formula "2"))
                           (rule "polySimp_mulComm0" (formula "2") (term "1"))
                           (rule "polySimp_rightDist" (formula "2") (term "1"))
                           (rule "polySimp_mulLiterals" (formula "2") (term "1,1"))
                           (rule "polySimp_elimOne" (formula "2") (term "1,1"))
                           (rule "polySimp_rightDist" (formula "2") (term "0,1"))
                           (rule "mul_literals" (formula "2") (term "0,0,1"))
                           (rule "polySimp_mulLiterals" (formula "2") (term "1,0,1"))
                           (rule "inEqSimp_sepPosMonomial0" (formula "3"))
                           (rule "polySimp_mulComm0" (formula "3") (term "1"))
                           (rule "polySimp_rightDist" (formula "3") (term "1"))
                           (rule "polySimp_mulLiterals" (formula "3") (term "1,1"))
                           (rule "polySimp_elimOne" (formula "3") (term "1,1"))
                           (rule "polySimp_rightDist" (formula "3") (term "0,1"))
                           (rule "polySimp_mulLiterals" (formula "3") (term "1,0,1"))
                           (rule "mul_literals" (formula "3") (term "0,0,1"))
                           (rule "inEqSimp_sepPosMonomial1" (formula "84") (term "0"))
                           (rule "polySimp_mulComm0" (formula "84") (term "1,0"))
                           (rule "polySimp_rightDist" (formula "84") (term "1,0"))
                           (rule "polySimp_mulLiterals" (formula "84") (term "1,1,0"))
                           (rule "polySimp_elimOne" (formula "84") (term "1,1,0"))
                           (rule "polySimp_rightDist" (formula "84") (term "0,1,0"))
                           (rule "mul_literals" (formula "84") (term "0,0,1,0"))
                           (rule "polySimp_mulLiterals" (formula "84") (term "1,0,1,0"))
                           (rule "inEqSimp_exactShadow3" (formula "50") (ifseqformula "3"))
                           (rule "mul_literals" (formula "50") (term "0,0"))
                           (rule "add_zero_left" (formula "50") (term "0"))
                           (rule "inEqSimp_sepPosMonomial1" (formula "50"))
                           (rule "polySimp_mulComm0" (formula "50") (term "1"))
                           (rule "polySimp_rightDist" (formula "50") (term "1"))
                           (rule "polySimp_mulLiterals" (formula "50") (term "1,1"))
                           (rule "mul_literals" (formula "50") (term "0,1"))
                           (rule "inEqSimp_exactShadow3" (formula "2") (ifseqformula "49"))
                           (rule "polySimp_rightDist" (formula "2") (term "0,0"))
                           (rule "polySimp_addComm1" (formula "2") (term "0"))
                           (rule "polySimp_rightDist" (formula "2") (term "0,0,0"))
                           (rule "mul_literals" (formula "2") (term "0,0,0,0"))
                           (rule "polySimp_mulLiterals" (formula "2") (term "1,0,0,0"))
                           (rule "polySimp_addComm1" (formula "2") (term "0,0"))
                           (rule "add_literals" (formula "2") (term "0,0,0"))
                           (rule "inEqSimp_sepNegMonomial1" (formula "2"))
                           (rule "polySimp_mulLiterals" (formula "2") (term "0"))
                           (rule "polySimp_elimOne" (formula "2") (term "0"))
                           (rule "inEqSimp_exactShadow3" (formula "20") (ifseqformula "4"))
                           (rule "polySimp_rightDist" (formula "20") (term "0,0"))
                           (rule "mul_literals" (formula "20") (term "0,0,0"))
                           (rule "polySimp_addAssoc" (formula "20") (term "0"))
                           (rule "polySimp_addComm1" (formula "20") (term "0,0"))
                           (rule "polySimp_pullOutFactor2b" (formula "20") (term "0"))
                           (rule "add_literals" (formula "20") (term "1,1,0"))
                           (rule "times_zero_1" (formula "20") (term "1,0"))
                           (rule "add_zero_right" (formula "20") (term "0"))
                           (rule "polySimp_addAssoc" (formula "20") (term "0"))
                           (rule "add_literals" (formula "20") (term "0,0"))
                           (rule "inEqSimp_sepPosMonomial1" (formula "20"))
                           (rule "mul_literals" (formula "20") (term "1"))
                           (rule "elimGcdGeq_antec" (formula "20") (inst "elimGcdRightDiv=Z(0(#))") (inst "elimGcdLeftDiv=quotient_0") (inst "elimGcd=Z(6(9(2(7(6(9(4(9(2(4(#)))))))))))"))
                           (rule "polySimp_mulLiterals" (formula "20") (term "1,0,0,0,0,1,0"))
                           (rule "polySimp_mulLiterals" (formula "20") (term "1,0,1,0"))
                           (rule "leq_literals" (formula "20") (term "0,0"))
                            (builtin "One Step Simplification" (formula "20"))
                           (rule "times_zero_1" (formula "20") (term "1,0,0,0,0,0"))
                           (rule "polySimp_addLiterals" (formula "20") (term "0,0,0,0"))
                           (rule "add_literals" (formula "20") (term "0,0,0,0"))
                           (rule "polySimp_pullOutFactor0b" (formula "20") (term "0,0"))
                           (rule "add_literals" (formula "20") (term "1,1,0,0"))
                           (rule "times_zero_1" (formula "20") (term "1,0,0"))
                           (rule "add_zero_right" (formula "20") (term "0,0"))
                           (rule "leq_literals" (formula "20") (term "0"))
                            (builtin "One Step Simplification" (formula "20"))
                           (rule "inEqSimp_exactShadow3" (formula "57") (ifseqformula "2"))
                           (rule "times_zero_1" (formula "57") (term "0,0"))
                           (rule "add_zero_left" (formula "57") (term "0"))
                           (rule "inEqSimp_sepNegMonomial1" (formula "57"))
                           (rule "polySimp_mulLiterals" (formula "57") (term "0"))
                           (rule "elimGcdLeq_antec" (formula "57") (inst "elimGcdRightDiv=Z(0(#))") (inst "elimGcdLeftDiv=quotient_0") (inst "elimGcd=Z(6(9(2(7(6(9(4(9(2(4(#)))))))))))"))
                           (rule "polySimp_mulLiterals" (formula "57") (term "1,0,1,0"))
                           (rule "leq_literals" (formula "57") (term "0,0"))
                            (builtin "One Step Simplification" (formula "57"))
                           (rule "mul_literals" (formula "57") (term "0,1,0,0,0,0,0"))
                           (rule "neg_literal" (formula "57") (term "0,0,0,0,0,0"))
                           (rule "mul_literals" (formula "57") (term "1,0,0,0,0,0"))
                           (rule "polySimp_addLiterals" (formula "57") (term "0,0,0,0"))
                           (rule "add_literals" (formula "57") (term "0,0,0,0"))
                           (rule "polySimp_pullOutFactor0b" (formula "57") (term "0,0"))
                           (rule "add_literals" (formula "57") (term "1,1,0,0"))
                           (rule "times_zero_1" (formula "57") (term "1,0,0"))
                           (rule "add_literals" (formula "57") (term "0,0"))
                           (rule "qeq_literals" (formula "57") (term "0"))
                            (builtin "One Step Simplification" (formula "57"))
                           (rule "inEqSimp_exactShadow3" (formula "52") (ifseqformula "19"))
                           (rule "polySimp_rightDist" (formula "52") (term "0,0"))
                           (rule "polySimp_mulLiterals" (formula "52") (term "1,0,0"))
                           (rule "mul_literals" (formula "52") (term "0,0,0"))
                           (rule "polySimp_addComm1" (formula "52") (term "0"))
                           (rule "add_literals" (formula "52") (term "0,0"))
                           (rule "inEqSimp_sepPosMonomial1" (formula "52"))
                           (rule "mul_literals" (formula "52") (term "1"))
                           (rule "inEqSimp_subsumption6" (formula "52") (ifseqformula "20"))
                           (rule "mul_literals" (formula "52") (term "1,1,0"))
                           (rule "greater_literals" (formula "52") (term "0,0"))
                            (builtin "One Step Simplification" (formula "52"))
                           (rule "leq_literals" (formula "52") (term "0"))
                            (builtin "One Step Simplification" (formula "52"))
                           (rule "true_left" (formula "52"))
                           (rule "inEqSimp_antiSymm" (formula "20") (ifseqformula "57"))
                           (rule "applyEqRigid" (formula "2") (term "0,1,1") (ifseqformula "20"))
                           (rule "times_zero_2" (formula "2") (term "1,1"))
                           (rule "add_literals" (formula "2") (term "1"))
                           (rule "applyEq" (formula "89") (term "1,1") (ifseqformula "20"))
                           (rule "applyEqRigid" (formula "58") (term "0") (ifseqformula "20"))
                           (rule "leq_literals" (formula "58"))
                           (rule "true_left" (formula "58"))
                           (rule "applyEq" (formula "53") (term "0,1,1") (ifseqformula "20"))
                           (rule "mul_literals" (formula "53") (term "1,1"))
                           (rule "add_literals" (formula "53") (term "1"))
                           (rule "applyEqRigid" (formula "21") (term "0") (ifseqformula "20"))
                           (rule "qeq_literals" (formula "21"))
                           (rule "true_left" (formula "21"))
                           (rule "applyEqRigid" (formula "1") (term "1") (ifseqformula "20"))
                           (rule "applyEq" (formula "87") (term "0,1,0,1,0") (ifseqformula "20"))
                           (rule "mul_literals" (formula "87") (term "1,0,1,0"))
                           (rule "add_literals" (formula "87") (term "0,1,0"))
                           (rule "replace_known_left" (formula "87") (term "0") (ifseqformula "21"))
                            (builtin "One Step Simplification" (formula "87"))
                           (rule "inEqSimp_leqRight" (formula "87"))
                           (rule "mul_literals" (formula "1") (term "1,0,0"))
                           (rule "add_literals" (formula "1") (term "0,0"))
                           (rule "applyEqRigid" (formula "5") (term "0,1,0,1") (ifseqformula "21"))
                           (rule "mul_literals" (formula "5") (term "1,0,1"))
                           (rule "add_literals" (formula "5") (term "0,1"))
                           (rule "applyEq" (formula "4") (term "0,1,0,1") (ifseqformula "21"))
                           (rule "times_zero_2" (formula "4") (term "1,0,1"))
                           (rule "add_literals" (formula "4") (term "0,1"))
                           (rule "inEqSimp_sepPosMonomial1" (formula "1"))
                           (rule "mul_literals" (formula "1") (term "1"))
                           (rule "inEqSimp_subsumption0" (formula "3") (ifseqformula "20"))
                           (rule "leq_literals" (formula "3") (term "0"))
                            (builtin "One Step Simplification" (formula "3"))
                           (rule "true_left" (formula "3"))
                           (rule "inEqSimp_subsumption1" (formula "52") (ifseqformula "57"))
                           (rule "leq_literals" (formula "52") (term "0"))
                            (builtin "One Step Simplification" (formula "52"))
                           (rule "true_left" (formula "52"))
                           (rule "inEqSimp_subsumption1" (formula "3") (ifseqformula "21"))
                           (rule "inEqSimp_homoInEq0" (formula "3") (term "0"))
                           (rule "polySimp_mulComm0" (formula "3") (term "1,0,0"))
                           (rule "polySimp_rightDist" (formula "3") (term "1,0,0"))
                           (rule "mul_literals" (formula "3") (term "0,1,0,0"))
                           (rule "polySimp_addAssoc" (formula "3") (term "0,0"))
                           (rule "polySimp_addComm1" (formula "3") (term "0,0,0"))
                           (rule "add_literals" (formula "3") (term "0,0,0,0"))
                           (rule "polySimp_pullOutFactor1b" (formula "3") (term "0,0"))
                           (rule "add_literals" (formula "3") (term "1,1,0,0"))
                           (rule "times_zero_1" (formula "3") (term "1,0,0"))
                           (rule "add_literals" (formula "3") (term "0,0"))
                           (rule "qeq_literals" (formula "3") (term "0"))
                            (builtin "One Step Simplification" (formula "3"))
                           (rule "true_left" (formula "3"))
                           (rule "inEqSimp_exactShadow3" (formula "51") (ifseqformula "3"))
                           (rule "mul_literals" (formula "51") (term "0,0"))
                           (rule "add_zero_left" (formula "51") (term "0"))
                           (rule "inEqSimp_sepPosMonomial1" (formula "51"))
                           (rule "mul_literals" (formula "51") (term "1"))
                           (rule "inEqSimp_subsumption1" (formula "51") (ifseqformula "56"))
                           (rule "leq_literals" (formula "51") (term "0"))
                            (builtin "One Step Simplification" (formula "51"))
                           (rule "true_left" (formula "51"))
                           (rule "commute_or_2" (formula "8") (term "0,0,0"))
                           (rule "commute_or" (formula "13") (term "1,0,0,0"))
                           (rule "commute_or_2" (formula "28") (term "0,0,0"))
                           (rule "distr_forallAnd" (formula "32"))
                           (rule "andLeft" (formula "32"))
                           (rule "commute_or_2" (formula "9") (term "0,0,0"))
                           (rule "commute_or" (formula "4") (term "1,0,0,0"))
                           (rule "commute_or" (formula "23") (term "1,0,0,0"))
                           (rule "commute_or" (formula "11") (term "1,0,0,0"))
                           (rule "commute_or_2" (formula "31") (term "0,0,0"))
                           (rule "commute_or" (formula "68"))
                           (rule "inEqSimp_or_weaken1" (formula "68"))
                           (rule "add_zero_right" (formula "68") (term "1,0"))
                            (builtin "One Step Simplification" (formula "68") (ifInst ""  (formula "57")))
                           (rule "true_left" (formula "68"))
                           (rule "commute_or" (formula "27") (term "1,0,0,0"))
                           (rule "commute_or_2" (formula "34") (term "0,0,0"))
                           (rule "commute_or" (formula "22") (term "1,0,0,0"))
                           (rule "commute_or_2" (formula "58") (term "0,1,0"))
                           (rule "cnf_rightDist" (formula "30") (term "0,0,0,0"))
                            (builtin "One Step Simplification" (formula "30"))
                           (rule "cnf_rightDist" (formula "12") (term "0,0,0,0"))
                            (builtin "One Step Simplification" (formula "12"))
                           (rule "cnf_rightDist" (formula "25") (term "0,0,0,0"))
                            (builtin "One Step Simplification" (formula "25"))
                           (rule "cnf_rightDist" (formula "24") (term "0,0,0,0"))
                            (builtin "One Step Simplification" (formula "24"))
                           (rule "Class_axiom_0_in_de_polyas_core3_open_cred_CredTool" (inst "seq=seq") (inst "i=i_2") (inst "str=str") (inst "seq_0=seq_0") (inst "i_0=i_0") (inst "obj=obj") (inst "seq_1=seq_1") (inst "i_1=i_1") (inst "sv_heap=anon_heap_add<<anonHeapFunction>>"))
                           (rule "andLeft" (formula "1"))
                           (rule "andLeft" (formula "1"))
                           (rule "castedGetAny" (formula "3") (term "0,1,1,0,0,0"))
                           (rule "castedGetAny" (formula "1") (term "0,0,0,1,0,1,0,0"))
                           (rule "castedGetAny" (formula "1") (term "0,0,0,0,1,0,0"))
                           (rule "castedGetAny" (formula "1") (term "0,0,0,0,0"))
                           (rule "castedGetAny" (formula "2") (term "0,1,1,0,0,0"))
                           (rule "castedGetAny" (formula "1") (term "0,0,1,1,0,1,0,0"))
                           (rule "nnf_imp2or" (formula "1") (term "0,0"))
                            (builtin "One Step Simplification" (formula "1"))
                           (rule "nnf_imp2or" (formula "3") (term "0,0,0"))
                           (rule "Class_axiom_0_in_de_polyas_core3_open_cred_CredTool" (inst "seq=seq") (inst "i=i_2") (inst "str=str") (inst "seq_0=seq_0") (inst "i_0=i_0") (inst "obj=obj") (inst "seq_1=seq_1") (inst "i_1=i_1") (inst "sv_heap=anon(heapAfter_get,
     singleton(result_46, java.util.Collection::$seq),
     anon_heap_add<<anonHeapFunction>>)"))
                            (builtin "One Step Simplification" (formula "1"))
                           (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,1,0,0,0,0,0,1") (ifseqformula "64"))
                            (builtin "One Step Simplification" (formula "1"))
                           (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,1,0,0,0,0,0,1,0") (ifseqformula "64"))
                            (builtin "One Step Simplification" (formula "1"))
                           (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,0,0,1,0,0,0,0,0,1") (ifseqformula "54"))
                           (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,0,0,1,0,0,0,0,0,1,0") (ifseqformula "54"))
                           (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,0,0,0,1,0,0,0,0,0,1") (ifseqformula "47"))
                           (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,0,0,0,1,0,0,0,0,0,1,0") (ifseqformula "47"))
                           (rule "andLeft" (formula "1"))
                           (rule "andLeft" (formula "1"))
                           (rule "castedGetAny" (formula "3") (term "0,1,1,0,0,0"))
                           (rule "castedGetAny" (formula "2") (term "0,1,1,0,0,0"))
                           (rule "castedGetAny" (formula "1") (term "0,0,1,1,0,1,0,0"))
                           (rule "castedGetAny" (formula "1") (term "0,0,0,0,0"))
                           (rule "castedGetAny" (formula "1") (term "0,0,0,1,0,1,0,0"))
                           (rule "castedGetAny" (formula "1") (term "0,0,0,0,1,0,0"))
                           (rule "Class_axiom_0_in_de_polyas_core3_open_cred_CredTool" (inst "seq=seq") (inst "i=i_2") (inst "str=str") (inst "seq_0=seq_0") (inst "i_0=i_0") (inst "obj=obj") (inst "seq_1=seq_1") (inst "i_1=i_1") (inst "sv_heap=heapAfter_add"))
                           (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "1,0,0,0,0,0,1") (ifseqformula "72"))
                           (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "1,0,0,0,0,0,1,0") (ifseqformula "72"))
                           (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,1,0,0,0,0,0,1") (ifseqformula "67"))
                            (builtin "One Step Simplification" (formula "1"))
                           (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,1,0,0,0,0,0,1,0") (ifseqformula "67"))
                            (builtin "One Step Simplification" (formula "1"))
                           (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,0,0,1,0,0,0,0,0,1") (ifseqformula "57"))
                           (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,0,0,1,0,0,0,0,0,1,0") (ifseqformula "57"))
                           (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,0,0,0,1,0,0,0,0,0,1") (ifseqformula "50"))
                           (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,0,0,0,1,0,0,0,0,0,1,0") (ifseqformula "50"))
                           (rule "andLeft" (formula "1"))
                           (rule "andLeft" (formula "1"))
                           (rule "castedGetAny" (formula "3") (term "0,1,1,0,0,0"))
                           (rule "castedGetAny" (formula "1") (term "0,0,0,1,0,1,0,0"))
                           (rule "castedGetAny" (formula "1") (term "0,0,0,0,1,0,0"))
                           (rule "castedGetAny" (formula "1") (term "0,0,1,1,0,1,0,0"))
                           (rule "castedGetAny" (formula "2") (term "0,1,1,0,0,0"))
                           (rule "castedGetAny" (formula "1") (term "0,0,0,0,0"))
                           (rule "nnf_imp2or" (formula "5") (term "0,0,0"))
                           (rule "cnf_rightDist" (formula "12") (term "0,0,0,0"))
                            (builtin "One Step Simplification" (formula "12"))
                           (rule "cnf_rightDist" (formula "35") (term "0,0,0,0"))
                            (builtin "One Step Simplification" (formula "35"))
                           (rule "commute_or" (formula "54") (term "0,0"))
                           (rule "nnf_imp2or" (formula "1") (term "0,0"))
                            (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "4")))
                           (rule "true_left" (formula "1"))
                           (rule "nnf_imp2or" (formula "5") (term "1,0,0,0"))
                           (rule "nnf_notAnd" (formula "5") (term "0,0,0,0"))
                            (builtin "One Step Simplification" (formula "5"))
                           (rule "nnf_imp2or" (formula "2") (term "0,0,0"))
                           (rule "nnf_imp2or" (formula "1") (term "0,0,0"))
                           (rule "cnf_rightDist" (formula "12") (term "0,0,0,0"))
                            (builtin "One Step Simplification" (formula "12"))
                           (rule "commute_or" (formula "45") (term "0,0"))
                           (rule "cnf_rightDist" (formula "18") (term "0,0,0,0"))
                            (builtin "One Step Simplification" (formula "18"))
                           (rule "commute_or_2" (formula "15") (term "0,0,0"))
                           (rule "commute_or_2" (formula "31") (term "0,0,0"))
                           (rule "cnf_rightDist" (formula "32") (term "0,0,0,0"))
                           (rule "nnf_imp2or" (formula "4") (term "1,0,0,0"))
                           (rule "nnf_notAnd" (formula "4") (term "0,0,0,0"))
                            (builtin "One Step Simplification" (formula "4"))
                           (rule "commute_or" (formula "9") (term "0,0,0,0"))
                           (rule "commute_or" (formula "10") (term "0,0,0,0"))
                           (rule "nnf_imp2or" (formula "2") (term "1,0,0,0"))
                           (rule "nnf_notAnd" (formula "2") (term "0,0,0,0"))
                            (builtin "One Step Simplification" (formula "2"))
                           (rule "nnf_notAnd" (formula "1") (term "0,0,0,0"))
                            (builtin "One Step Simplification" (formula "1"))
                           (rule "nnf_notOr" (formula "5") (term "0,0,0,0,0"))
                           (rule "nnf_imp2or" (formula "1") (term "1,0,0,0"))
                           (rule "nnf_notOr" (formula "4") (term "0,0,0,0,0"))
                           (rule "commute_or" (formula "40") (term "1,0,0,0,0"))
                           (rule "nnf_notOr" (formula "2") (term "0,0,0,0,0"))
                           (rule "nnf_notOr" (formula "1") (term "0,0,0,0,0"))
                           (rule "cnf_rightDist" (formula "28") (term "0,0,0,0"))
                           (rule "cnf_rightDist" (formula "27") (term "0,0,0,0"))
                           (rule "cnf_rightDist" (formula "63") (term "1,1,0"))
                           (rule "cnf_rightDist" (formula "16") (term "0,0,0,0"))
                           (rule "commute_and" (formula "40") (term "1,0,0,0"))
                           (rule "nnf_notOr" (formula "2") (term "1,0,0,0,0,0"))
                           (rule "nnf_notOr" (formula "1") (term "1,0,0,0,0,0"))
                           (rule "nnf_notOr" (formula "2") (term "0,1,0,0,0,0,0"))
                           (rule "nnf_notOr" (formula "1") (term "0,1,0,0,0,0,0"))
                           (rule "nnf_notOr" (formula "2") (term "0,0,1,0,0,0,0,0"))
                           (rule "nnf_notOr" (formula "1") (term "0,0,1,0,0,0,0,0"))
                           (rule "nnf_notOr" (formula "2") (term "0,0,0,1,0,0,0,0,0"))
                           (rule "nnf_notOr" (formula "1") (term "0,0,0,1,0,0,0,0,0"))
                           (rule "nnf_notOr" (formula "2") (term "0,0,0,0,1,0,0,0,0,0"))
                           (rule "nnf_notOr" (formula "1") (term "0,0,0,0,1,0,0,0,0,0"))
                           (rule "commute_or" (formula "38") (term "0,0"))
                           (rule "seqGetAlphaCast" (formula "68") (term "0"))
                           (rule "castedGetAny" (formula "68") (term "0"))
                            (builtin "One Step Simplification" (formula "68"))
                           (rule "true_left" (formula "68"))
                           (rule "cnf_rightDist" (formula "37") (term "0,0"))
                           (rule "distr_forallAnd" (formula "37") (term "0"))
                           (rule "distr_forallAnd" (formula "37"))
                           (rule "andLeft" (formula "37"))
                           (rule "shift_paren_or" (formula "35") (term "0,0,0"))
                            (builtin "One Step Simplification" (formula "35"))
                           (rule "eqSymm" (formula "35") (term "1,0,0,0"))
                           (rule "castedGetAny" (formula "35") (term "0,1,0,0,0,0"))
                           (rule "castedGetAny" (formula "35") (term "1,0,0,0,0,0,0,0"))
                           (rule "castedGetAny" (formula "35") (term "0,1,0,0,0"))
                            (builtin "One Step Simplification" (formula "35"))
                           (rule "true_left" (formula "35"))
                           (rule "commute_or" (formula "13") (term "1,0,0,0,0"))
                           (rule "commute_or_2" (formula "53") (term "0"))
                           (rule "commute_or" (formula "33") (term "1,0,0,0,0"))
                           (rule "shift_paren_or" (formula "17") (term "0,0,0"))
                            (builtin "One Step Simplification" (formula "17"))
                           (rule "eqSymm" (formula "17") (term "1,0,0,0"))
                           (rule "castedGetAny" (formula "17") (term "0,1,0,0,0,0"))
                           (rule "castedGetAny" (formula "17") (term "1,0,0,0,0,0,0,0"))
                           (rule "castedGetAny" (formula "17") (term "0,1,0,0,0"))
                            (builtin "One Step Simplification" (formula "17"))
                           (rule "true_left" (formula "17"))
                           (rule "shift_paren_or" (formula "29") (term "0,0,0"))
                            (builtin "One Step Simplification" (formula "29"))
                           (rule "eqSymm" (formula "29") (term "1,0,0,0"))
                           (rule "castedGetAny" (formula "29") (term "0,1,0,0,0,0"))
                           (rule "castedGetAny" (formula "29") (term "1,0,0,0,0,0,0,0"))
                           (rule "castedGetAny" (formula "29") (term "0,1,0,0,0"))
                            (builtin "One Step Simplification" (formula "29"))
                           (rule "true_left" (formula "29"))
                           (rule "commute_or" (formula "14") (term "1,0,0,0,0"))
                           (rule "shift_paren_or" (formula "28") (term "0,0,0"))
                            (builtin "One Step Simplification" (formula "28"))
                           (rule "eqSymm" (formula "28") (term "1,0,0,0"))
                           (rule "castedGetAny" (formula "28") (term "1,0,0,0,0,0,0,0"))
                           (rule "castedGetAny" (formula "28") (term "0,1,0,0,0,0"))
                           (rule "castedGetAny" (formula "28") (term "0,1,0,0,0"))
                            (builtin "One Step Simplification" (formula "28"))
                           (rule "true_left" (formula "28"))
                           (rule "shift_paren_or" (formula "32") (term "0,0,0,0"))
                           (rule "commute_or_2" (formula "42") (term "0"))
                           (rule "shift_paren_or" (formula "36") (term "0,0,0,0"))
                           (rule "commute_and" (formula "13") (term "1,0,0,0"))
                           (rule "commute_and" (formula "30") (term "1,0,0,0"))
                           (rule "commute_and" (formula "14") (term "1,0,0,0"))
                           (rule "commute_and" (formula "32") (term "1,0,0,0"))
                           (rule "commute_and" (formula "36") (term "1,0,0,0"))
                           (rule "commute_or" (formula "29") (term "0,0,0"))
                           (rule "shift_paren_or" (formula "11") (term "0,0,0"))
                            (builtin "One Step Simplification" (formula "11"))
                           (rule "eqSymm" (formula "11") (term "1,0,0,0"))
                           (rule "castedGetAny" (formula "11") (term "1,0,0,0,0,0,0,0"))
                           (rule "castedGetAny" (formula "11") (term "0,1,0,0,0,0"))
                           (rule "castedGetAny" (formula "11") (term "0,1,0,0,0"))
                            (builtin "One Step Simplification" (formula "11"))
                           (rule "true_left" (formula "11"))
                           (rule "commute_or" (formula "30") (term "0,0,0,0"))
                           (rule "commute_or_2" (formula "9") (term "0,0,0"))
                           (rule "commute_or_2" (formula "10") (term "0,0,0"))
                           (rule "commute_or" (formula "5") (term "1,0,0,0"))
                           (rule "shift_paren_or" (formula "11") (term "0,0,0"))
                            (builtin "One Step Simplification" (formula "11"))
                           (rule "eqSymm" (formula "11") (term "1,0,0,0"))
                           (rule "castedGetAny" (formula "11") (term "1,0,0,0,0,0,0,0"))
                           (rule "castedGetAny" (formula "11") (term "0,1,0,0,0,0"))
                           (rule "castedGetAny" (formula "11") (term "0,1,0,0,0"))
                            (builtin "One Step Simplification" (formula "11"))
                           (rule "true_left" (formula "11"))
                           (rule "commute_or" (formula "15") (term "0,0,0,0"))
                           (rule "commute_or" (formula "25") (term "0,0,0"))
                           (rule "commute_or" (formula "24") (term "0,0,0"))
                           (rule "commute_or" (formula "14") (term "0,0,0"))
                           (rule "commute_or" (formula "32") (term "0,0"))
                           (rule "commute_or" (formula "4") (term "1,0,0,0"))
                           (rule "commute_or" (formula "2") (term "1,0,0,0"))
                           (rule "cnf_rightDist" (formula "58") (term "0"))
                           (rule "distr_forallAnd" (formula "58"))
                           (rule "andLeft" (formula "58"))
                           (rule "commute_or" (formula "5") (term "0,0,0,0"))
                           (rule "commute_or" (formula "1") (term "1,0,0,0"))
                           (rule "commute_or" (formula "4") (term "0,0,0,0"))
                           (rule "shift_paren_or" (formula "13") (term "0,0,0,0"))
                           (rule "shift_paren_or" (formula "26") (term "0,0,0,0"))
                           (rule "commute_or" (formula "2") (term "0,0,0,0"))
                           (rule "shift_paren_and" (formula "3") (term "0,1,0,0"))
                            (builtin "One Step Simplification" (formula "3"))
                           (rule "commute_or" (formula "1") (term "0,0,0,0"))
                           (rule "shift_paren_or" (formula "35") (term "0,0,0,0"))
                           (rule "div_axiom" (formula "6") (term "0") (inst "quotient=quotient_1"))
                           (rule "equal_literals" (formula "6") (term "0"))
                            (builtin "One Step Simplification" (formula "6"))
                           (rule "mul_literals" (formula "6") (term "1,1,1,1"))
                           (rule "qeq_literals" (formula "6") (term "0,1"))
                            (builtin "One Step Simplification" (formula "6"))
                           (rule "andLeft" (formula "6"))
                           (rule "andLeft" (formula "6"))
                           (rule "polySimp_addAssoc" (formula "8") (term "0,1"))
                           (rule "polySimp_addComm1" (formula "8") (term "1"))
                           (rule "polySimp_addAssoc" (formula "8") (term "0,0,1"))
                           (rule "add_literals" (formula "8") (term "0,0,0,1"))
                           (rule "polySimp_addComm1" (formula "8") (term "0,1"))
                           (rule "add_literals" (formula "8") (term "0,0,1"))
                           (rule "inEqSimp_homoInEq0" (formula "7"))
                           (rule "polySimp_mulLiterals" (formula "7") (term "1,0"))
                           (rule "polySimp_addComm1" (formula "7") (term "0"))
                           (rule "polySimp_addComm1" (formula "7") (term "0,0"))
                           (rule "inEqSimp_homoInEq1" (formula "8"))
                           (rule "polySimp_mulLiterals" (formula "8") (term "1,0"))
                           (rule "polySimp_addComm1" (formula "8") (term "0"))
                           (rule "polySimp_addComm1" (formula "8") (term "0,0"))
                           (rule "applyEq" (formula "9") (term "0") (ifseqformula "6"))
                           (rule "inEqSimp_sepPosMonomial1" (formula "7"))
                           (rule "polySimp_mulComm0" (formula "7") (term "1"))
                           (rule "polySimp_rightDist" (formula "7") (term "1"))
                           (rule "polySimp_mulLiterals" (formula "7") (term "1,1"))
                           (rule "polySimp_elimOne" (formula "7") (term "1,1"))
                           (rule "polySimp_rightDist" (formula "7") (term "0,1"))
                           (rule "mul_literals" (formula "7") (term "0,0,1"))
                           (rule "polySimp_mulLiterals" (formula "7") (term "1,0,1"))
                           (rule "inEqSimp_sepPosMonomial0" (formula "8"))
                           (rule "polySimp_mulComm0" (formula "8") (term "1"))
                           (rule "polySimp_rightDist" (formula "8") (term "1"))
                           (rule "polySimp_mulLiterals" (formula "8") (term "1,1"))
                           (rule "polySimp_elimOne" (formula "8") (term "1,1"))
                           (rule "polySimp_rightDist" (formula "8") (term "0,1"))
                           (rule "mul_literals" (formula "8") (term "0,0,1"))
                           (rule "polySimp_mulLiterals" (formula "8") (term "1,0,1"))
                           (rule "inEqSimp_exactShadow3" (formula "25") (ifseqformula "8"))
                           (rule "polySimp_rightDist" (formula "25") (term "0,0"))
                           (rule "mul_literals" (formula "25") (term "0,0,0"))
                           (rule "polySimp_addAssoc" (formula "25") (term "0"))
                           (rule "polySimp_addComm1" (formula "25") (term "0,0"))
                           (rule "polySimp_pullOutFactor2b" (formula "25") (term "0"))
                           (rule "add_literals" (formula "25") (term "1,1,0"))
                           (rule "times_zero_1" (formula "25") (term "1,0"))
                           (rule "add_zero_right" (formula "25") (term "0"))
                           (rule "polySimp_addAssoc" (formula "25") (term "0"))
                           (rule "add_literals" (formula "25") (term "0,0"))
                           (rule "inEqSimp_sepPosMonomial1" (formula "25"))
                           (rule "mul_literals" (formula "25") (term "1"))
                           (rule "inEqSimp_subsumption6" (formula "25") (ifseqformula "9"))
                           (rule "mul_literals" (formula "25") (term "1,1,0"))
                           (rule "greater_literals" (formula "25") (term "0,0"))
                            (builtin "One Step Simplification" (formula "25"))
                           (rule "leq_literals" (formula "25") (term "0"))
                            (builtin "One Step Simplification" (formula "25"))
                           (rule "true_left" (formula "25"))
                           (rule "inEqSimp_exactShadow3" (formula "55") (ifseqformula "8"))
                           (rule "times_zero_1" (formula "55") (term "0,0"))
                           (rule "add_zero_left" (formula "55") (term "0"))
                           (rule "inEqSimp_sepPosMonomial1" (formula "55"))
                           (rule "polySimp_mulComm0" (formula "55") (term "1"))
                           (rule "polySimp_rightDist" (formula "55") (term "1"))
                           (rule "mul_literals" (formula "55") (term "0,1"))
                           (rule "polySimp_mulLiterals" (formula "55") (term "1,1"))
                           (rule "inEqSimp_exactShadow3" (formula "7") (ifseqformula "54"))
                           (rule "polySimp_rightDist" (formula "7") (term "0,0"))
                           (rule "polySimp_addComm1" (formula "7") (term "0"))
                           (rule "polySimp_rightDist" (formula "7") (term "0,0,0"))
                           (rule "polySimp_mulLiterals" (formula "7") (term "1,0,0,0"))
                           (rule "mul_literals" (formula "7") (term "0,0,0,0"))
                           (rule "polySimp_addComm1" (formula "7") (term "0,0"))
                           (rule "add_literals" (formula "7") (term "0,0,0"))
                           (rule "inEqSimp_sepNegMonomial1" (formula "7"))
                           (rule "polySimp_mulLiterals" (formula "7") (term "0"))
                           (rule "polySimp_elimOne" (formula "7") (term "0"))
                           (rule "inEqSimp_exactShadow3" (formula "8") (ifseqformula "12"))
                           (rule "polySimp_rightDist" (formula "8") (term "0,0"))
                           (rule "polySimp_rightDist" (formula "8") (term "0,0,0"))
                           (rule "mul_literals" (formula "8") (term "0,0,0,0"))
                           (rule "polySimp_mulLiterals" (formula "8") (term "1,0,0,0"))
                           (rule "polySimp_addAssoc" (formula "8") (term "0"))
                           (rule "polySimp_addComm1" (formula "8") (term "0,0"))
                           (rule "polySimp_pullOutFactor2b" (formula "8") (term "0"))
                           (rule "add_literals" (formula "8") (term "1,1,0"))
                           (rule "times_zero_1" (formula "8") (term "1,0"))
                           (rule "polySimp_addLiterals" (formula "8") (term "0"))
                           (rule "polySimp_addComm1" (formula "8") (term "0"))
                           (rule "add_literals" (formula "8") (term "0,0"))
                           (rule "inEqSimp_sepNegMonomial1" (formula "8"))
                           (rule "polySimp_mulLiterals" (formula "8") (term "0"))
                           (rule "elimGcdLeq_antec" (formula "8") (inst "elimGcdRightDiv=Z(1(#))") (inst "elimGcdLeftDiv=quotient_1") (inst "elimGcd=Z(6(9(2(7(6(9(4(9(2(4(#)))))))))))"))
                           (rule "leq_literals" (formula "8") (term "0,0"))
                            (builtin "One Step Simplification" (formula "8"))
                           (rule "polySimp_mulLiterals" (formula "8") (term "1,0,0"))
                           (rule "polySimp_mulLiterals" (formula "8") (term "1,0,0,0,0,0"))
                           (rule "neg_literal" (formula "8") (term "0,0,0,0,0,0"))
                           (rule "mul_literals" (formula "8") (term "1,0,0,0,0,0"))
                           (rule "add_literals" (formula "8") (term "0,0,0,0,0"))
                           (rule "add_literals" (formula "8") (term "0,0,0,0"))
                           (rule "polySimp_pullOutFactor0b" (formula "8") (term "0,0"))
                           (rule "add_literals" (formula "8") (term "1,1,0,0"))
                           (rule "times_zero_1" (formula "8") (term "1,0,0"))
                           (rule "add_literals" (formula "8") (term "0,0"))
                           (rule "qeq_literals" (formula "8") (term "0"))
                            (builtin "One Step Simplification" (formula "8"))
                           (rule "inEqSimp_antiSymm" (formula "11") (ifseqformula "8"))
                           (rule "applyEq" (formula "12") (term "0") (ifseqformula "11"))
                           (rule "qeq_literals" (formula "12"))
                           (rule "true_left" (formula "12"))
                           (rule "applyEqRigid" (formula "7") (term "0,1,1") (ifseqformula "11"))
                           (rule "mul_literals" (formula "7") (term "1,1"))
                           (rule "add_literals" (formula "7") (term "1"))
                           (rule "applyEqRigid" (formula "57") (term "0,1,1") (ifseqformula "11"))
                           (rule "mul_literals" (formula "57") (term "1,1"))
                           (rule "add_literals" (formula "57") (term "1"))
                           (rule "applyEq" (formula "8") (term "0") (ifseqformula "11"))
                           (rule "leq_literals" (formula "8"))
                           (rule "true_left" (formula "8"))
                           (rule "applyEq" (formula "6") (term "1") (ifseqformula "10"))
                           (rule "applyEqRigid" (formula "9") (term "0,1,0,1") (ifseqformula "10"))
                           (rule "mul_literals" (formula "9") (term "1,0,1"))
                           (rule "add_literals" (formula "9") (term "0,1"))
                           (rule "applyEqRigid" (formula "8") (term "0,1,0,1") (ifseqformula "10"))
                           (rule "mul_literals" (formula "8") (term "1,0,1"))
                           (rule "add_literals" (formula "8") (term "0,1"))
                           (rule "inEqSimp_subsumption0" (formula "24") (ifseqformula "7"))
                           (rule "leq_literals" (formula "24") (term "0"))
                            (builtin "One Step Simplification" (formula "24"))
                           (rule "true_left" (formula "24"))
                           (rule "inEqSimp_subsumption1" (formula "55") (ifseqformula "60"))
                           (rule "leq_literals" (formula "55") (term "0"))
                            (builtin "One Step Simplification" (formula "55"))
                           (rule "true_left" (formula "55"))
                           (rule "inEqSimp_contradInEq1" (formula "7") (ifseqformula "59"))
                           (rule "qeq_literals" (formula "7") (term "0"))
                            (builtin "One Step Simplification" (formula "7"))
                           (rule "closeFalse" (formula "7"))
                        )
                     )
                  )
               )
               (branch "Exceptional Post (add)"
                   (builtin "One Step Simplification" (formula "62"))
                   (builtin "One Step Simplification" (formula "76"))
                  (rule "andLeft" (formula "62"))
                  (rule "selectCreatedOfAnonAsFormulaEQ" (formula "63") (term "1,0") (ifseqformula "62"))
                  (rule "selectCreatedOfAnonAsFormulaEQ" (formula "63") (term "0,1,0") (ifseqformula "57"))
                   (builtin "One Step Simplification" (formula "63"))
                  (rule "selectCreatedOfAnonAsFormulaEQ" (formula "63") (term "0,0,0,1,0") (ifseqformula "40"))
                  (rule "selectCreatedOfAnonAsFormulaEQ" (formula "63") (term "0,0,0,0,1,0") (ifseqformula "33"))
                  (rule "andLeft" (formula "63"))
                  (rule "andLeft" (formula "63"))
                  (rule "andLeft" (formula "65"))
                  (rule "notLeft" (formula "63"))
                  (rule "close" (formula "66") (ifseqformula "65"))
               )
               (branch "Pre (add)"
                   (builtin "One Step Simplification" (formula "74") (ifInst ""  (formula "61")) (ifInst ""  (formula "61")))
                  (rule "wellFormedAnonEQ" (formula "74") (term "0,1") (ifseqformula "57"))
                  (rule "selectCreatedOfAnonAsFormulaEQ" (formula "74") (term "1,1") (ifseqformula "57"))
                   (builtin "One Step Simplification" (formula "74") (ifInst ""  (formula "56")))
                  (rule "wellFormedAnon" (formula "74") (term "0,1"))
                  (rule "wellFormedAnonEQ" (formula "74") (term "0,0,1") (ifseqformula "40"))
                  (rule "wellFormedAnonEQ" (formula "74") (term "0,0,0,1") (ifseqformula "33"))
                  (rule "selectCreatedOfAnonAsFormulaEQ" (formula "74") (term "0,0,1,1") (ifseqformula "40"))
                  (rule "selectCreatedOfAnonAsFormulaEQ" (formula "74") (term "0,0,0,1,1") (ifseqformula "33"))
                  (rule "replace_known_left" (formula "74") (term "0,0,0,0,1") (ifseqformula "26"))
                   (builtin "One Step Simplification" (formula "74") (ifInst ""  (formula "32")) (ifInst ""  (formula "39")) (ifInst ""  (formula "46")))
                  (rule "inEqSimp_ltToLeq" (formula "51") (term "0,0,0"))
                  (rule "polySimp_mulComm0" (formula "51") (term "1,0,0,0,0,0"))
                  (rule "inEqSimp_ltToLeq" (formula "38") (term "0,0,0"))
                  (rule "polySimp_mulComm0" (formula "38") (term "1,0,0,0,0,0"))
                  (rule "inEqSimp_ltToLeq" (formula "11"))
                  (rule "polySimp_mulComm0" (formula "11") (term "1,0,0"))
                  (rule "polySimp_addComm1" (formula "11") (term "0"))
                  (rule "inEqSimp_ltToLeq" (formula "30") (term "0,0,0"))
                  (rule "polySimp_mulComm0" (formula "30") (term "1,0,0,0,0,0"))
                  (rule "inEqSimp_ltToLeq" (formula "53") (term "0,0,0"))
                  (rule "polySimp_mulComm0" (formula "53") (term "1,0,0,0,0,0"))
                  (rule "inEqSimp_sepPosMonomial0" (formula "51") (term "0,0,0"))
                  (rule "polySimp_mulComm0" (formula "51") (term "1,0,0,0"))
                  (rule "polySimp_rightDist" (formula "51") (term "1,0,0,0"))
                  (rule "polySimp_mulLiterals" (formula "51") (term "1,1,0,0,0"))
                  (rule "mul_literals" (formula "51") (term "0,1,0,0,0"))
                  (rule "polySimp_elimOne" (formula "51") (term "1,1,0,0,0"))
                  (rule "inEqSimp_sepPosMonomial0" (formula "38") (term "0,0,0"))
                  (rule "polySimp_mulComm0" (formula "38") (term "1,0,0,0"))
                  (rule "polySimp_rightDist" (formula "38") (term "1,0,0,0"))
                  (rule "mul_literals" (formula "38") (term "0,1,0,0,0"))
                  (rule "polySimp_mulLiterals" (formula "38") (term "1,1,0,0,0"))
                  (rule "polySimp_elimOne" (formula "38") (term "1,1,0,0,0"))
                  (rule "inEqSimp_sepNegMonomial0" (formula "11"))
                  (rule "polySimp_mulLiterals" (formula "11") (term "0"))
                  (rule "polySimp_elimOne" (formula "11") (term "0"))
                  (rule "inEqSimp_sepPosMonomial0" (formula "30") (term "0,0,0"))
                  (rule "polySimp_mulComm0" (formula "30") (term "1,0,0,0"))
                  (rule "polySimp_rightDist" (formula "30") (term "1,0,0,0"))
                  (rule "mul_literals" (formula "30") (term "0,1,0,0,0"))
                  (rule "polySimp_mulLiterals" (formula "30") (term "1,1,0,0,0"))
                  (rule "polySimp_elimOne" (formula "30") (term "1,1,0,0,0"))
                  (rule "inEqSimp_sepPosMonomial0" (formula "53") (term "0,0,0"))
                  (rule "polySimp_mulComm0" (formula "53") (term "1,0,0,0"))
                  (rule "polySimp_rightDist" (formula "53") (term "1,0,0,0"))
                  (rule "polySimp_mulLiterals" (formula "53") (term "1,1,0,0,0"))
                  (rule "mul_literals" (formula "53") (term "0,1,0,0,0"))
                  (rule "polySimp_elimOne" (formula "53") (term "1,1,0,0,0"))
                  (rule "inEqSimp_subsumption1" (formula "42") (ifseqformula "43"))
                  (rule "leq_literals" (formula "42") (term "0"))
                   (builtin "One Step Simplification" (formula "42"))
                  (rule "true_left" (formula "42"))
                  (rule "inEqSimp_subsumption1" (formula "47") (ifseqformula "11"))
                  (rule "inEqSimp_homoInEq0" (formula "47") (term "0"))
                  (rule "polySimp_pullOutFactor1b" (formula "47") (term "0,0"))
                  (rule "add_literals" (formula "47") (term "1,1,0,0"))
                  (rule "times_zero_1" (formula "47") (term "1,0,0"))
                  (rule "add_zero_right" (formula "47") (term "0,0"))
                  (rule "qeq_literals" (formula "47") (term "0"))
                   (builtin "One Step Simplification" (formula "47"))
                  (rule "true_left" (formula "47"))
                  (rule "inEqSimp_subsumption1" (formula "53") (ifseqformula "46"))
                  (rule "leq_literals" (formula "53") (term "0"))
                   (builtin "One Step Simplification" (formula "53"))
                  (rule "true_left" (formula "53"))
                  (rule "inEqSimp_exactShadow3" (formula "11") (ifseqformula "41"))
                  (rule "polySimp_rightDist" (formula "11") (term "0,0"))
                  (rule "mul_literals" (formula "11") (term "0,0,0"))
                  (rule "polySimp_addComm1" (formula "11") (term "0"))
                  (rule "add_literals" (formula "11") (term "0,0"))
                  (rule "inEqSimp_sepNegMonomial1" (formula "11"))
                  (rule "polySimp_mulLiterals" (formula "11") (term "0"))
                  (rule "polySimp_elimOne" (formula "11") (term "0"))
                  (rule "inEqSimp_subsumption0" (formula "53") (ifseqformula "11"))
                  (rule "leq_literals" (formula "53") (term "0"))
                   (builtin "One Step Simplification" (formula "53"))
                  (rule "true_left" (formula "53"))
                  (rule "nnf_imp2or" (formula "24") (term "0,0"))
                   (builtin "One Step Simplification" (formula "24"))
                  (rule "nnf_imp2or" (formula "22") (term "0,0,0"))
                  (rule "nnf_imp2or" (formula "25") (term "0,0,0"))
                  (rule "nnf_imp2or" (formula "20") (term "0,0,0"))
                  (rule "nnf_imp2or" (formula "18") (term "0,0,0"))
                  (rule "nnf_imp2or" (formula "21") (term "0,0,0"))
                  (rule "nnf_imp2or" (formula "4") (term "0,0,0"))
                  (rule "nnf_imp2or" (formula "5") (term "0,0,0"))
                  (rule "nnf_imp2or" (formula "15") (term "0,0,0"))
                  (rule "nnf_imp2or" (formula "3") (term "0,0,0"))
                  (rule "nnf_imp2or" (formula "19") (term "0,0,0"))
                  (rule "nnf_imp2or" (formula "26") (term "0,0,0"))
                  (rule "nnf_imp2or" (formula "1") (term "0,0,0"))
                  (rule "nnf_imp2or" (formula "6") (term "0,0,0"))
                  (rule "nnf_imp2or" (formula "14") (term "0,0,0"))
                  (rule "nnf_imp2or" (formula "2") (term "0,0,0"))
                  (rule "nnf_imp2or" (formula "17") (term "0,0,0"))
                  (rule "nnf_imp2or" (formula "16") (term "0,0,0"))
                  (rule "nnf_imp2or" (formula "23") (term "0,0,0"))
                  (rule "nnf_imp2or" (formula "50") (term "0"))
                  (rule "nnf_imp2or" (formula "39") (term "0"))
                  (rule "nnf_imp2or" (formula "31") (term "0"))
                  (rule "nnf_imp2or" (formula "52") (term "0"))
                  (rule "nnf_notAnd" (formula "50") (term "0,0"))
                  (rule "inEqSimp_notLeq" (formula "50") (term "0,0,0"))
                  (rule "polySimp_rightDist" (formula "50") (term "1,0,0,0,0,0"))
                  (rule "mul_literals" (formula "50") (term "0,1,0,0,0,0,0"))
                  (rule "polySimp_addAssoc" (formula "50") (term "0,0,0,0,0"))
                  (rule "add_literals" (formula "50") (term "0,0,0,0,0,0"))
                  (rule "add_zero_left" (formula "50") (term "0,0,0,0,0"))
                  (rule "inEqSimp_sepPosMonomial1" (formula "50") (term "0,0,0"))
                  (rule "polySimp_mulLiterals" (formula "50") (term "1,0,0,0"))
                  (rule "polySimp_elimOne" (formula "50") (term "1,0,0,0"))
                  (rule "inEqSimp_notGeq" (formula "50") (term "1,0,0"))
                  (rule "times_zero_1" (formula "50") (term "1,0,0,1,0,0"))
                  (rule "add_zero_right" (formula "50") (term "0,0,1,0,0"))
                  (rule "inEqSimp_sepPosMonomial0" (formula "50") (term "1,0,0"))
                  (rule "mul_literals" (formula "50") (term "1,1,0,0"))
                  (rule "nnf_notAnd" (formula "39") (term "0,0"))
                  (rule "inEqSimp_notLeq" (formula "39") (term "0,0,0"))
                  (rule "polySimp_rightDist" (formula "39") (term "1,0,0,0,0,0"))
                  (rule "mul_literals" (formula "39") (term "0,1,0,0,0,0,0"))
                  (rule "polySimp_addAssoc" (formula "39") (term "0,0,0,0,0"))
                  (rule "add_literals" (formula "39") (term "0,0,0,0,0,0"))
                  (rule "add_zero_left" (formula "39") (term "0,0,0,0,0"))
                  (rule "inEqSimp_sepPosMonomial1" (formula "39") (term "0,0,0"))
                  (rule "polySimp_mulLiterals" (formula "39") (term "1,0,0,0"))
                  (rule "polySimp_elimOne" (formula "39") (term "1,0,0,0"))
                  (rule "inEqSimp_notGeq" (formula "39") (term "1,0,0"))
                  (rule "mul_literals" (formula "39") (term "1,0,0,1,0,0"))
                  (rule "add_zero_right" (formula "39") (term "0,0,1,0,0"))
                  (rule "inEqSimp_sepPosMonomial0" (formula "39") (term "1,0,0"))
                  (rule "mul_literals" (formula "39") (term "1,1,0,0"))
                  (rule "nnf_notAnd" (formula "31") (term "0,0"))
                  (rule "inEqSimp_notLeq" (formula "31") (term "0,0,0"))
                  (rule "polySimp_rightDist" (formula "31") (term "1,0,0,0,0,0"))
                  (rule "mul_literals" (formula "31") (term "0,1,0,0,0,0,0"))
                  (rule "polySimp_addAssoc" (formula "31") (term "0,0,0,0,0"))
                  (rule "add_literals" (formula "31") (term "0,0,0,0,0,0"))
                  (rule "add_zero_left" (formula "31") (term "0,0,0,0,0"))
                  (rule "inEqSimp_sepPosMonomial1" (formula "31") (term "0,0,0"))
                  (rule "polySimp_mulLiterals" (formula "31") (term "1,0,0,0"))
                  (rule "polySimp_elimOne" (formula "31") (term "1,0,0,0"))
                  (rule "inEqSimp_notGeq" (formula "31") (term "1,0,0"))
                  (rule "mul_literals" (formula "31") (term "1,0,0,1,0,0"))
                  (rule "add_zero_right" (formula "31") (term "0,0,1,0,0"))
                  (rule "inEqSimp_sepPosMonomial0" (formula "31") (term "1,0,0"))
                  (rule "mul_literals" (formula "31") (term "1,1,0,0"))
                  (rule "nnf_notAnd" (formula "22") (term "0,0,0,0"))
                   (builtin "One Step Simplification" (formula "22"))
                  (rule "nnf_imp2or" (formula "25") (term "1,0,0,0"))
                  (rule "nnf_notAnd" (formula "25") (term "0,0,0,0"))
                   (builtin "One Step Simplification" (formula "25"))
                  (rule "nnf_notAnd" (formula "52") (term "0,0"))
                  (rule "inEqSimp_notGeq" (formula "52") (term "1,0,0"))
                  (rule "times_zero_1" (formula "52") (term "1,0,0,1,0,0"))
                  (rule "add_zero_right" (formula "52") (term "0,0,1,0,0"))
                  (rule "inEqSimp_sepPosMonomial0" (formula "52") (term "1,0,0"))
                  (rule "mul_literals" (formula "52") (term "1,1,0,0"))
                  (rule "inEqSimp_notLeq" (formula "52") (term "0,0,0"))
                  (rule "polySimp_rightDist" (formula "52") (term "1,0,0,0,0,0"))
                  (rule "mul_literals" (formula "52") (term "0,1,0,0,0,0,0"))
                  (rule "polySimp_addAssoc" (formula "52") (term "0,0,0,0,0"))
                  (rule "add_literals" (formula "52") (term "0,0,0,0,0,0"))
                  (rule "add_zero_left" (formula "52") (term "0,0,0,0,0"))
                  (rule "inEqSimp_sepPosMonomial1" (formula "52") (term "0,0,0"))
                  (rule "polySimp_mulLiterals" (formula "52") (term "1,0,0,0"))
                  (rule "polySimp_elimOne" (formula "52") (term "1,0,0,0"))
                  (rule "nnf_imp2or" (formula "20") (term "1,0,0,0"))
                  (rule "nnf_notAnd" (formula "20") (term "0,0,0,0"))
                   (builtin "One Step Simplification" (formula "20"))
                  (rule "nnf_notAnd" (formula "18") (term "0,0,0,0"))
                   (builtin "One Step Simplification" (formula "18"))
                  (rule "nnf_imp2or" (formula "21") (term "1,0,0,0"))
                  (rule "nnf_notAnd" (formula "21") (term "0,0,0,0"))
                   (builtin "One Step Simplification" (formula "21"))
                  (rule "nnf_imp2or" (formula "4") (term "1,0,0,0"))
                  (rule "nnf_notAnd" (formula "4") (term "0,0,0,0"))
                   (builtin "One Step Simplification" (formula "4"))
                  (rule "nnf_imp2or" (formula "5") (term "1,0,0,0"))
                  (rule "nnf_notAnd" (formula "5") (term "0,0,0,0"))
                   (builtin "One Step Simplification" (formula "5"))
                  (rule "nnf_notAnd" (formula "15") (term "0,0,0,0"))
                   (builtin "One Step Simplification" (formula "15"))
                  (rule "nnf_notAnd" (formula "3") (term "0,0,0,0"))
                   (builtin "One Step Simplification" (formula "3"))
                  (rule "nnf_notAnd" (formula "19") (term "0,0,0,0"))
                   (builtin "One Step Simplification" (formula "19"))
                  (rule "nnf_notAnd" (formula "26") (term "0,0,0,0"))
                   (builtin "One Step Simplification" (formula "26"))
                  (rule "nnf_notAnd" (formula "1") (term "0,0,0,0"))
                   (builtin "One Step Simplification" (formula "1"))
                  (rule "nnf_imp2or" (formula "6") (term "1,0,0,0"))
                  (rule "nnf_notAnd" (formula "6") (term "0,0,0,0"))
                   (builtin "One Step Simplification" (formula "6"))
                  (rule "nnf_imp2or" (formula "14") (term "1,0,0,0"))
                  (rule "nnf_notAnd" (formula "14") (term "0,0,0,0"))
                   (builtin "One Step Simplification" (formula "14"))
                  (rule "nnf_notAnd" (formula "2") (term "0,0,0,0"))
                   (builtin "One Step Simplification" (formula "2"))
                  (rule "nnf_notAnd" (formula "17") (term "0,0,0,0"))
                   (builtin "One Step Simplification" (formula "17"))
                  (rule "nnf_notAnd" (formula "16") (term "0,0,0,0"))
                   (builtin "One Step Simplification" (formula "16"))
                  (rule "nnf_notAnd" (formula "23") (term "0,0,0,0"))
                   (builtin "One Step Simplification" (formula "23"))
                  (rule "nnf_imp2or" (formula "22") (term "1,0,0,0"))
                  (rule "nnf_notOr" (formula "22") (term "1,0,0,0,0"))
                  (rule "nnf_notOr" (formula "25") (term "1,0,0,0,0"))
                  (rule "nnf_imp2or" (formula "18") (term "1,0,0,0"))
                  (rule "nnf_notOr" (formula "20") (term "1,0,0,0,0"))
                  (rule "nnf_notOr" (formula "18") (term "1,0,0,0,0"))
                  (rule "nnf_imp2or" (formula "15") (term "1,0,0,0"))
                  (rule "nnf_notOr" (formula "21") (term "1,0,0,0,0"))
                  (rule "nnf_imp2or" (formula "3") (term "1,0,0,0"))
                  (rule "nnf_imp2or" (formula "19") (term "1,0,0,0"))
                  (rule "nnf_notOr" (formula "4") (term "1,0,0,0,0"))
                  (rule "nnf_imp2or" (formula "26") (term "1,0,0,0"))
                  (rule "nnf_notOr" (formula "5") (term "1,0,0,0,0"))
                  (rule "nnf_imp2or" (formula "1") (term "1,0,0,0"))
                  (rule "nnf_notOr" (formula "15") (term "1,0,0,0,0"))
                  (rule "nnf_notOr" (formula "3") (term "1,0,0,0,0"))
                  (rule "nnf_notOr" (formula "19") (term "1,0,0,0,0"))
                  (rule "nnf_notOr" (formula "26") (term "1,0,0,0,0"))
                  (rule "nnf_imp2or" (formula "2") (term "1,0,0,0"))
                  (rule "nnf_notOr" (formula "1") (term "1,0,0,0,0"))
                  (rule "nnf_imp2or" (formula "17") (term "1,0,0,0"))
                  (rule "nnf_imp2or" (formula "16") (term "1,0,0,0"))
                  (rule "nnf_notOr" (formula "6") (term "1,0,0,0,0"))
                  (rule "nnf_imp2or" (formula "23") (term "1,0,0,0"))
                  (rule "nnf_notOr" (formula "14") (term "1,0,0,0,0"))
                  (rule "nnf_notOr" (formula "2") (term "1,0,0,0,0"))
                  (rule "nnf_notOr" (formula "17") (term "1,0,0,0,0"))
                  (rule "nnf_notOr" (formula "16") (term "1,0,0,0,0"))
                  (rule "nnf_notOr" (formula "23") (term "1,0,0,0,0"))
                  (rule "Class_invariant_axiom_for_java_util_ArrayList" (formula "71") (term "0"))
                   (builtin "One Step Simplification" (formula "71"))
                  (rule "orRight" (formula "71"))
                  (rule "orRight" (formula "71"))
                  (rule "orRight" (formula "71"))
                  (rule "orRight" (formula "71"))
                  (rule "replace_known_right" (formula "56") (term "1,0,0") (ifseqformula "72"))
                   (builtin "One Step Simplification" (formula "56") (ifInst ""  (formula "71")) (ifInst ""  (formula "74")) (ifInst ""  (formula "75")) (ifInst ""  (formula "73")))
                  (rule "closeFalse" (formula "56"))
               )
               (branch "Null reference (var = null)"
                   (builtin "One Step Simplification" (formula "74") (ifInst ""  (formula "63")))
                  (rule "closeTrue" (formula "74"))
               )
            )
            (branch "Exceptional Post (get)"
                (builtin "One Step Simplification" (formula "70"))
                (builtin "One Step Simplification" (formula "57"))
               (rule "andLeft" (formula "57"))
               (rule "selectCreatedOfAnonAsFormulaEQ" (formula "58") (term "1,0") (ifseqformula "57"))
                (builtin "One Step Simplification" (formula "58"))
               (rule "selectCreatedOfAnonAsFormulaEQ" (formula "58") (term "0,0,1,0") (ifseqformula "40"))
               (rule "selectCreatedOfAnonAsFormulaEQ" (formula "58") (term "0,0,0,1,0") (ifseqformula "33"))
               (rule "andLeft" (formula "58"))
               (rule "andLeft" (formula "59"))
               (rule "andLeft" (formula "58"))
               (rule "andLeft" (formula "60"))
               (rule "notLeft" (formula "58"))
               (rule "close" (formula "62") (ifseqformula "61"))
            )
            (branch "Pre (get)"
                (builtin "One Step Simplification" (formula "68"))
               (rule "wellFormedAnon" (formula "68") (term "0,1"))
               (rule "wellFormedAnonEQ" (formula "68") (term "0,0,1") (ifseqformula "40"))
               (rule "wellFormedAnonEQ" (formula "68") (term "0,0,0,1") (ifseqformula "33"))
               (rule "replaceKnownSelect_taclet100_7" (formula "68") (term "0,1,1,0,0"))
               (rule "expand_inInt" (formula "68") (term "1,1"))
               (rule "replace_int_MIN" (formula "68") (term "0,1,1,1"))
               (rule "replace_int_MAX" (formula "68") (term "1,0,1,1"))
               (rule "replace_known_left" (formula "68") (term "1,0,0,1") (ifseqformula "39"))
                (builtin "One Step Simplification" (formula "68") (ifInst ""  (formula "26")) (ifInst ""  (formula "32")) (ifInst ""  (formula "46")) (ifInst ""  (formula "54")))
               (rule "inEqSimp_ltToLeq" (formula "51") (term "0,0,0"))
               (rule "polySimp_mulComm0" (formula "51") (term "1,0,0,0,0,0"))
               (rule "inEqSimp_ltToLeq" (formula "53") (term "0,0,0"))
               (rule "polySimp_mulComm0" (formula "53") (term "1,0,0,0,0,0"))
               (rule "inEqSimp_ltToLeq" (formula "30") (term "0,0,0"))
               (rule "polySimp_mulComm0" (formula "30") (term "1,0,0,0,0,0"))
               (rule "inEqSimp_ltToLeq" (formula "11"))
               (rule "polySimp_mulComm0" (formula "11") (term "1,0,0"))
               (rule "polySimp_addComm1" (formula "11") (term "0"))
               (rule "inEqSimp_ltToLeq" (formula "38") (term "0,0,0"))
               (rule "polySimp_mulComm0" (formula "38") (term "1,0,0,0,0,0"))
               (rule "inEqSimp_ltToLeq" (formula "68") (term "1,0,0"))
               (rule "polySimp_mulComm0" (formula "68") (term "1,0,0,1,0,0"))
               (rule "polySimp_addComm1" (formula "68") (term "0,1,0,0"))
               (rule "inEqSimp_commuteLeq" (formula "68") (term "1"))
               (rule "replace_known_left" (formula "68") (term "1") (ifseqformula "55"))
                (builtin "One Step Simplification" (formula "68"))
               (rule "inEqSimp_commuteLeq" (formula "68") (term "0,0"))
               (rule "replace_known_left" (formula "68") (term "0,0") (ifseqformula "47"))
                (builtin "One Step Simplification" (formula "68"))
               (rule "applyEq" (formula "68") (term "0,1,0,0") (ifseqformula "49"))
               (rule "replace_known_left" (formula "68") (term "0") (ifseqformula "11"))
                (builtin "One Step Simplification" (formula "68"))
               (rule "inEqSimp_sepPosMonomial0" (formula "51") (term "0,0,0"))
               (rule "polySimp_mulComm0" (formula "51") (term "1,0,0,0"))
               (rule "polySimp_rightDist" (formula "51") (term "1,0,0,0"))
               (rule "mul_literals" (formula "51") (term "0,1,0,0,0"))
               (rule "polySimp_mulLiterals" (formula "51") (term "1,1,0,0,0"))
               (rule "polySimp_elimOne" (formula "51") (term "1,1,0,0,0"))
               (rule "inEqSimp_sepPosMonomial0" (formula "53") (term "0,0,0"))
               (rule "polySimp_mulComm0" (formula "53") (term "1,0,0,0"))
               (rule "polySimp_rightDist" (formula "53") (term "1,0,0,0"))
               (rule "polySimp_mulLiterals" (formula "53") (term "1,1,0,0,0"))
               (rule "mul_literals" (formula "53") (term "0,1,0,0,0"))
               (rule "polySimp_elimOne" (formula "53") (term "1,1,0,0,0"))
               (rule "inEqSimp_sepPosMonomial0" (formula "30") (term "0,0,0"))
               (rule "polySimp_mulComm0" (formula "30") (term "1,0,0,0"))
               (rule "polySimp_rightDist" (formula "30") (term "1,0,0,0"))
               (rule "polySimp_mulLiterals" (formula "30") (term "1,1,0,0,0"))
               (rule "mul_literals" (formula "30") (term "0,1,0,0,0"))
               (rule "polySimp_elimOne" (formula "30") (term "1,1,0,0,0"))
               (rule "inEqSimp_sepNegMonomial0" (formula "11"))
               (rule "polySimp_mulLiterals" (formula "11") (term "0"))
               (rule "polySimp_elimOne" (formula "11") (term "0"))
               (rule "inEqSimp_sepPosMonomial0" (formula "38") (term "0,0,0"))
               (rule "polySimp_mulComm0" (formula "38") (term "1,0,0,0"))
               (rule "polySimp_rightDist" (formula "38") (term "1,0,0,0"))
               (rule "polySimp_mulLiterals" (formula "38") (term "1,1,0,0,0"))
               (rule "mul_literals" (formula "38") (term "0,1,0,0,0"))
               (rule "polySimp_elimOne" (formula "38") (term "1,1,0,0,0"))
               (rule "inEqSimp_subsumption1" (formula "55") (ifseqformula "47"))
               (rule "leq_literals" (formula "55") (term "0"))
                (builtin "One Step Simplification" (formula "55"))
               (rule "true_left" (formula "55"))
               (rule "inEqSimp_subsumption1" (formula "48") (ifseqformula "11"))
               (rule "inEqSimp_homoInEq0" (formula "48") (term "0"))
               (rule "polySimp_pullOutFactor1b" (formula "48") (term "0,0"))
               (rule "add_literals" (formula "48") (term "1,1,0,0"))
               (rule "times_zero_1" (formula "48") (term "1,0,0"))
               (rule "add_literals" (formula "48") (term "0,0"))
               (rule "qeq_literals" (formula "48") (term "0"))
                (builtin "One Step Simplification" (formula "48"))
               (rule "true_left" (formula "48"))
               (rule "inEqSimp_subsumption1" (formula "42") (ifseqformula "43"))
               (rule "leq_literals" (formula "42") (term "0"))
                (builtin "One Step Simplification" (formula "42"))
               (rule "true_left" (formula "42"))
               (rule "inEqSimp_exactShadow3" (formula "11") (ifseqformula "41"))
               (rule "polySimp_rightDist" (formula "11") (term "0,0"))
               (rule "mul_literals" (formula "11") (term "0,0,0"))
               (rule "polySimp_addComm1" (formula "11") (term "0"))
               (rule "add_literals" (formula "11") (term "0,0"))
               (rule "inEqSimp_sepNegMonomial1" (formula "11"))
               (rule "polySimp_mulLiterals" (formula "11") (term "0"))
               (rule "polySimp_elimOne" (formula "11") (term "0"))
               (rule "inEqSimp_subsumption0" (formula "53") (ifseqformula "11"))
               (rule "leq_literals" (formula "53") (term "0"))
                (builtin "One Step Simplification" (formula "53"))
               (rule "true_left" (formula "53"))
               (rule "nnf_imp2or" (formula "24") (term "0,0"))
                (builtin "One Step Simplification" (formula "24"))
               (rule "nnf_imp2or" (formula "23") (term "0,0,0"))
               (rule "nnf_imp2or" (formula "3") (term "0,0,0"))
               (rule "nnf_imp2or" (formula "19") (term "0,0,0"))
               (rule "nnf_imp2or" (formula "4") (term "0,0,0"))
               (rule "nnf_imp2or" (formula "22") (term "0,0,0"))
               (rule "nnf_imp2or" (formula "18") (term "0,0,0"))
               (rule "nnf_imp2or" (formula "25") (term "0,0,0"))
               (rule "nnf_imp2or" (formula "15") (term "0,0,0"))
               (rule "nnf_imp2or" (formula "21") (term "0,0,0"))
               (rule "nnf_imp2or" (formula "1") (term "0,0,0"))
               (rule "nnf_imp2or" (formula "2") (term "0,0,0"))
               (rule "nnf_imp2or" (formula "26") (term "0,0,0"))
               (rule "nnf_imp2or" (formula "17") (term "0,0,0"))
               (rule "nnf_imp2or" (formula "5") (term "0,0,0"))
               (rule "nnf_imp2or" (formula "20") (term "0,0,0"))
               (rule "nnf_imp2or" (formula "6") (term "0,0,0"))
               (rule "nnf_imp2or" (formula "14") (term "0,0,0"))
               (rule "nnf_imp2or" (formula "16") (term "0,0,0"))
               (rule "nnf_imp2or" (formula "50") (term "0"))
               (rule "nnf_imp2or" (formula "52") (term "0"))
               (rule "nnf_imp2or" (formula "31") (term "0"))
               (rule "nnf_imp2or" (formula "39") (term "0"))
               (rule "nnf_notAnd" (formula "50") (term "0,0"))
               (rule "inEqSimp_notLeq" (formula "50") (term "0,0,0"))
               (rule "polySimp_rightDist" (formula "50") (term "1,0,0,0,0,0"))
               (rule "mul_literals" (formula "50") (term "0,1,0,0,0,0,0"))
               (rule "polySimp_addAssoc" (formula "50") (term "0,0,0,0,0"))
               (rule "add_literals" (formula "50") (term "0,0,0,0,0,0"))
               (rule "add_zero_left" (formula "50") (term "0,0,0,0,0"))
               (rule "inEqSimp_sepPosMonomial1" (formula "50") (term "0,0,0"))
               (rule "polySimp_mulLiterals" (formula "50") (term "1,0,0,0"))
               (rule "polySimp_elimOne" (formula "50") (term "1,0,0,0"))
               (rule "inEqSimp_notGeq" (formula "50") (term "1,0,0"))
               (rule "times_zero_1" (formula "50") (term "1,0,0,1,0,0"))
               (rule "add_zero_right" (formula "50") (term "0,0,1,0,0"))
               (rule "inEqSimp_sepPosMonomial0" (formula "50") (term "1,0,0"))
               (rule "mul_literals" (formula "50") (term "1,1,0,0"))
               (rule "nnf_notAnd" (formula "52") (term "0,0"))
               (rule "inEqSimp_notGeq" (formula "52") (term "1,0,0"))
               (rule "times_zero_1" (formula "52") (term "1,0,0,1,0,0"))
               (rule "add_zero_right" (formula "52") (term "0,0,1,0,0"))
               (rule "inEqSimp_sepPosMonomial0" (formula "52") (term "1,0,0"))
               (rule "mul_literals" (formula "52") (term "1,1,0,0"))
               (rule "inEqSimp_notLeq" (formula "52") (term "0,0,0"))
               (rule "polySimp_rightDist" (formula "52") (term "1,0,0,0,0,0"))
               (rule "mul_literals" (formula "52") (term "0,1,0,0,0,0,0"))
               (rule "polySimp_addAssoc" (formula "52") (term "0,0,0,0,0"))
               (rule "add_literals" (formula "52") (term "0,0,0,0,0,0"))
               (rule "add_zero_left" (formula "52") (term "0,0,0,0,0"))
               (rule "inEqSimp_sepPosMonomial1" (formula "52") (term "0,0,0"))
               (rule "polySimp_mulLiterals" (formula "52") (term "1,0,0,0"))
               (rule "polySimp_elimOne" (formula "52") (term "1,0,0,0"))
               (rule "nnf_notAnd" (formula "23") (term "0,0,0,0"))
                (builtin "One Step Simplification" (formula "23"))
               (rule "nnf_notAnd" (formula "31") (term "0,0"))
               (rule "inEqSimp_notLeq" (formula "31") (term "0,0,0"))
               (rule "polySimp_rightDist" (formula "31") (term "1,0,0,0,0,0"))
               (rule "mul_literals" (formula "31") (term "0,1,0,0,0,0,0"))
               (rule "polySimp_addAssoc" (formula "31") (term "0,0,0,0,0"))
               (rule "add_literals" (formula "31") (term "0,0,0,0,0,0"))
               (rule "add_zero_left" (formula "31") (term "0,0,0,0,0"))
               (rule "inEqSimp_sepPosMonomial1" (formula "31") (term "0,0,0"))
               (rule "polySimp_mulLiterals" (formula "31") (term "1,0,0,0"))
               (rule "polySimp_elimOne" (formula "31") (term "1,0,0,0"))
               (rule "inEqSimp_notGeq" (formula "31") (term "1,0,0"))
               (rule "mul_literals" (formula "31") (term "1,0,0,1,0,0"))
               (rule "add_zero_right" (formula "31") (term "0,0,1,0,0"))
               (rule "inEqSimp_sepPosMonomial0" (formula "31") (term "1,0,0"))
               (rule "mul_literals" (formula "31") (term "1,1,0,0"))
               (rule "nnf_imp2or" (formula "3") (term "1,0,0,0"))
               (rule "nnf_notAnd" (formula "3") (term "0,0,0,0"))
                (builtin "One Step Simplification" (formula "3"))
               (rule "nnf_notAnd" (formula "39") (term "0,0"))
               (rule "inEqSimp_notGeq" (formula "39") (term "1,0,0"))
               (rule "times_zero_1" (formula "39") (term "1,0,0,1,0,0"))
               (rule "add_zero_right" (formula "39") (term "0,0,1,0,0"))
               (rule "inEqSimp_sepPosMonomial0" (formula "39") (term "1,0,0"))
               (rule "mul_literals" (formula "39") (term "1,1,0,0"))
               (rule "inEqSimp_notLeq" (formula "39") (term "0,0,0"))
               (rule "polySimp_rightDist" (formula "39") (term "1,0,0,0,0,0"))
               (rule "mul_literals" (formula "39") (term "0,1,0,0,0,0,0"))
               (rule "polySimp_addAssoc" (formula "39") (term "0,0,0,0,0"))
               (rule "add_literals" (formula "39") (term "0,0,0,0,0,0"))
               (rule "add_zero_left" (formula "39") (term "0,0,0,0,0"))
               (rule "inEqSimp_sepPosMonomial1" (formula "39") (term "0,0,0"))
               (rule "polySimp_mulLiterals" (formula "39") (term "1,0,0,0"))
               (rule "polySimp_elimOne" (formula "39") (term "1,0,0,0"))
               (rule "nnf_imp2or" (formula "19") (term "1,0,0,0"))
               (rule "nnf_notAnd" (formula "19") (term "0,0,0,0"))
                (builtin "One Step Simplification" (formula "19"))
               (rule "nnf_notAnd" (formula "4") (term "0,0,0,0"))
                (builtin "One Step Simplification" (formula "4"))
               (rule "nnf_notAnd" (formula "22") (term "0,0,0,0"))
                (builtin "One Step Simplification" (formula "22"))
               (rule "nnf_notAnd" (formula "18") (term "0,0,0,0"))
                (builtin "One Step Simplification" (formula "18"))
               (rule "nnf_imp2or" (formula "25") (term "1,0,0,0"))
               (rule "nnf_notAnd" (formula "25") (term "0,0,0,0"))
                (builtin "One Step Simplification" (formula "25"))
               (rule "nnf_notAnd" (formula "15") (term "0,0,0,0"))
                (builtin "One Step Simplification" (formula "15"))
               (rule "nnf_notAnd" (formula "21") (term "0,0,0,0"))
                (builtin "One Step Simplification" (formula "21"))
               (rule "nnf_imp2or" (formula "1") (term "1,0,0,0"))
               (rule "nnf_notAnd" (formula "1") (term "0,0,0,0"))
                (builtin "One Step Simplification" (formula "1"))
               (rule "nnf_imp2or" (formula "2") (term "1,0,0,0"))
               (rule "nnf_notAnd" (formula "2") (term "0,0,0,0"))
                (builtin "One Step Simplification" (formula "2"))
               (rule "nnf_imp2or" (formula "26") (term "1,0,0,0"))
               (rule "nnf_notAnd" (formula "26") (term "0,0,0,0"))
                (builtin "One Step Simplification" (formula "26"))
               (rule "nnf_imp2or" (formula "17") (term "1,0,0,0"))
               (rule "nnf_notAnd" (formula "17") (term "0,0,0,0"))
                (builtin "One Step Simplification" (formula "17"))
               (rule "nnf_imp2or" (formula "5") (term "1,0,0,0"))
               (rule "nnf_notAnd" (formula "5") (term "0,0,0,0"))
                (builtin "One Step Simplification" (formula "5"))
               (rule "nnf_notAnd" (formula "20") (term "0,0,0,0"))
                (builtin "One Step Simplification" (formula "20"))
               (rule "nnf_notAnd" (formula "6") (term "0,0,0,0"))
                (builtin "One Step Simplification" (formula "6"))
               (rule "nnf_notAnd" (formula "14") (term "0,0,0,0"))
                (builtin "One Step Simplification" (formula "14"))
               (rule "nnf_notAnd" (formula "16") (term "0,0,0,0"))
                (builtin "One Step Simplification" (formula "16"))
               (rule "nnf_imp2or" (formula "23") (term "1,0,0,0"))
               (rule "nnf_notOr" (formula "23") (term "1,0,0,0,0"))
               (rule "nnf_notOr" (formula "3") (term "1,0,0,0,0"))
               (rule "nnf_imp2or" (formula "4") (term "1,0,0,0"))
               (rule "nnf_imp2or" (formula "22") (term "1,0,0,0"))
               (rule "nnf_imp2or" (formula "18") (term "1,0,0,0"))
               (rule "nnf_notOr" (formula "19") (term "1,0,0,0,0"))
               (rule "nnf_imp2or" (formula "15") (term "1,0,0,0"))
               (rule "nnf_notOr" (formula "4") (term "1,0,0,0,0"))
               (rule "nnf_imp2or" (formula "21") (term "1,0,0,0"))
               (rule "nnf_notOr" (formula "22") (term "1,0,0,0,0"))
               (rule "nnf_notOr" (formula "18") (term "1,0,0,0,0"))
               (rule "nnf_notOr" (formula "25") (term "1,0,0,0,0"))
               (rule "nnf_notOr" (formula "15") (term "1,0,0,0,0"))
               (rule "nnf_notOr" (formula "21") (term "1,0,0,0,0"))
               (rule "nnf_notOr" (formula "1") (term "1,0,0,0,0"))
               (rule "nnf_notOr" (formula "2") (term "1,0,0,0,0"))
               (rule "nnf_imp2or" (formula "20") (term "1,0,0,0"))
               (rule "nnf_imp2or" (formula "6") (term "1,0,0,0"))
               (rule "nnf_notOr" (formula "26") (term "1,0,0,0,0"))
               (rule "nnf_imp2or" (formula "14") (term "1,0,0,0"))
               (rule "nnf_notOr" (formula "17") (term "1,0,0,0,0"))
               (rule "nnf_imp2or" (formula "16") (term "1,0,0,0"))
               (rule "nnf_notOr" (formula "5") (term "1,0,0,0,0"))
               (rule "nnf_notOr" (formula "20") (term "1,0,0,0,0"))
               (rule "nnf_notOr" (formula "6") (term "1,0,0,0,0"))
               (rule "nnf_notOr" (formula "14") (term "1,0,0,0,0"))
               (rule "nnf_notOr" (formula "16") (term "1,0,0,0,0"))
               (rule "nnf_notOr" (formula "3") (term "0,1,0,0,0,0"))
               (rule "Class_invariant_axiom_for_java_util_ArrayList" (formula "65"))
               (rule "closeTrue" (formula "65"))
            )
            (branch "Null reference (_ls = null)"
                (builtin "One Step Simplification" (formula "68") (ifInst ""  (formula "67")))
               (rule "closeTrue" (formula "68"))
            )
         )
         (branch "if x false"
             (builtin "One Step Simplification" (formula "69"))
             (builtin "One Step Simplification" (formula "1"))
            (rule "closeFalse" (formula "1"))
         )
      )
      (branch "Use Case"
          (builtin "One Step Simplification" (formula "29"))
          (builtin "One Step Simplification" (formula "42"))
         (rule "expand_inInt" (formula "29") (term "1"))
         (rule "replace_int_MIN" (formula "29") (term "0,1,1"))
         (rule "replace_int_MAX" (formula "29") (term "1,0,1"))
         (rule "andLeft" (formula "29"))
         (rule "andLeft" (formula "29"))
         (rule "andLeft" (formula "31"))
         (rule "andLeft" (formula "29"))
         (rule "andLeft" (formula "29"))
         (rule "andLeft" (formula "29"))
         (rule "andLeft" (formula "29"))
         (rule "andLeft" (formula "29"))
         (rule "andLeft" (formula "30"))
         (rule "andLeft" (formula "29"))
         (rule "eqSymm" (formula "33"))
         (rule "castedGetAny" (formula "35") (term "0,0,1,0"))
         (rule "castedGetAny" (formula "34") (term "0,0,1,0"))
         (rule "inEqSimp_commuteLeq" (formula "38"))
         (rule "inEqSimp_commuteLeq" (formula "35") (term "0,0,0"))
         (rule "inEqSimp_commuteLeq" (formula "34") (term "0,0,0"))
         (rule "inEqSimp_commuteLeq" (formula "30"))
         (rule "inEqSimp_commuteLeq" (formula "31"))
         (rule "variableDeclarationAssign" (formula "51") (term "1"))
         (rule "variableDeclaration" (formula "51") (term "1") (newnames "b_0_1"))
         (rule "blockEmpty" (formula "51") (term "1,0,1"))
         (rule "pullOutSelect" (formula "35") (term "0,1,1,0,0") (inst "selectSK=java_util_Collection_seq_2"))
         (rule "applyEq" (formula "36") (term "0,0,0,1,0") (ifseqformula "35"))
         (rule "simplifySelectOfAnon" (formula "35"))
          (builtin "One Step Simplification" (formula "35") (ifInst ""  (formula "41")))
         (rule "selectCreatedOfAnonAsFormulaEQ" (formula "35") (term "0,1,0,0") (ifseqformula "23"))
         (rule "selectCreatedOfAnonAsFormulaEQ" (formula "35") (term "0,0,1,0,0") (ifseqformula "17"))
         (rule "replace_known_left" (formula "35") (term "1,0,0,1,0,0") (ifseqformula "19"))
          (builtin "One Step Simplification" (formula "35") (ifInst ""  (formula "40")))
         (rule "elementOfSingleton" (formula "35") (term "0,0"))
          (builtin "One Step Simplification" (formula "35"))
         (rule "applyEqReverse" (formula "36") (term "0,1,1,0,0") (ifseqformula "35"))
         (rule "applyEqReverse" (formula "36") (term "0,0,0,1,0") (ifseqformula "35"))
         (rule "hideAuxiliaryEq" (formula "35"))
         (rule "pullOutSelect" (formula "34") (term "0,1,1,0,0") (inst "selectSK=java_util_Collection_seq_3"))
         (rule "applyEq" (formula "33") (term "0,0") (ifseqformula "34"))
         (rule "applyEq" (formula "35") (term "0,0,0,1,0") (ifseqformula "34"))
         (rule "simplifySelectOfAnon" (formula "34"))
          (builtin "One Step Simplification" (formula "34") (ifInst ""  (formula "51")))
         (rule "replaceKnownSelect_taclet00_2" (formula "34") (term "2,0"))
         (rule "replaceKnownAuxiliaryConstant_taclet00_4" (formula "34") (term "2,0"))
         (rule "selectCreatedOfAnonAsFormulaEQ" (formula "34") (term "0,1,0,0") (ifseqformula "23"))
         (rule "selectCreatedOfAnonAsFormulaEQ" (formula "34") (term "0,0,1,0,0") (ifseqformula "17"))
         (rule "replace_known_left" (formula "34") (term "0,0,0,1,0,0") (ifseqformula "12"))
          (builtin "One Step Simplification" (formula "34"))
         (rule "elementOfSingleton" (formula "34") (term "0,0"))
          (builtin "One Step Simplification" (formula "34"))
         (rule "eqSymm" (formula "34") (term "0,0"))
         (rule "applyEq" (formula "35") (term "1,1,0,0") (ifseqformula "33"))
         (rule "Static_class_invariant_axiom_for_org_apache_commons_csv_CSVFormat" (formula "37"))
         (rule "notLeft" (formula "37"))
         (rule "pullOutSelect" (formula "39") (term "0") (inst "selectSK=org_apache_commons_csv_CSVFormat_RFC4180_0"))
         (rule "simplifySelectOfAnon" (formula "1"))
          (builtin "One Step Simplification" (formula "1"))
         (rule "elementOfSingleton" (formula "1") (term "0,0"))
          (builtin "One Step Simplification" (formula "1"))
         (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "24"))
          (builtin "One Step Simplification" (formula "1"))
         (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "18"))
          (builtin "One Step Simplification" (formula "1"))
         (rule "applyEqReverse" (formula "40") (term "0") (ifseqformula "1"))
         (rule "hideAuxiliaryEq" (formula "1"))
         (rule "Class_invariant_axiom_for_java_util_ArrayList" (formula "32"))
         (rule "true_left" (formula "32"))
         (rule "Class_invariant_axiom_for_java_util_ArrayList" (formula "29"))
         (rule "true_left" (formula "29"))
         (rule "commute_and" (formula "34") (term "0,0"))
         (rule "commute_and" (formula "33") (term "0,0"))
         (rule "less_than_comparison_simple" (formula "49") (term "1"))
          (builtin "One Step Simplification" (formula "49"))
         (rule "Class_axiom_0_in_de_polyas_core3_open_cred_CredTool" (inst "seq=seq") (inst "i=i_2") (inst "str=str") (inst "seq_0=seq_0") (inst "i_0=i_0") (inst "obj=obj") (inst "seq_1=seq_1") (inst "i_1=i_1") (inst "sv_heap=anon_heap_size<<anonHeapFunction>>"))
         (rule "andLeft" (formula "1"))
         (rule "andLeft" (formula "1"))
         (rule "castedGetAny" (formula "3") (term "0,1,1,0,0,0"))
         (rule "castedGetAny" (formula "1") (term "0,0,1,1,0,1,0,0"))
         (rule "castedGetAny" (formula "1") (term "0,0,0,1,0,1,0,0"))
         (rule "castedGetAny" (formula "2") (term "0,1,1,0,0,0"))
         (rule "castedGetAny" (formula "1") (term "0,0,0,0,1,0,0"))
         (rule "castedGetAny" (formula "1") (term "0,0,0,0,0"))
         (rule "commute_and" (formula "3") (term "0,0,0,0"))
         (rule "commute_and" (formula "2") (term "0,0,0,0"))
         (rule "Class_axiom_0_in_de_polyas_core3_open_cred_CredTool" (inst "seq=seq") (inst "i=i_2") (inst "str=str") (inst "seq_0=seq_0") (inst "i_0=i_0") (inst "obj=obj") (inst "seq_1=seq_1") (inst "i_1=i_1") (inst "sv_heap=anon(heapAfter_asList,
     empty,
     anon_heap_size<<anonHeapFunction>>)"))
          (builtin "One Step Simplification" (formula "1"))
         (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,1,0,0,0,0,0,1") (ifseqformula "21"))
         (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,1,0,0,0,0,0,1,0") (ifseqformula "21"))
         (rule "andLeft" (formula "1"))
         (rule "andLeft" (formula "1"))
         (rule "castedGetAny" (formula "3") (term "0,1,1,0,0,0"))
         (rule "castedGetAny" (formula "2") (term "0,1,1,0,0,0"))
         (rule "castedGetAny" (formula "1") (term "0,0,1,1,0,1,0,0"))
         (rule "castedGetAny" (formula "1") (term "0,0,0,0,1,0,0"))
         (rule "castedGetAny" (formula "1") (term "0,0,0,0,0"))
         (rule "castedGetAny" (formula "1") (term "0,0,0,1,0,1,0,0"))
         (rule "Class_axiom_0_in_de_polyas_core3_open_cred_CredTool" (inst "seq=seq") (inst "i=i_2") (inst "str=str") (inst "seq_0=seq_0") (inst "i_0=i_0") (inst "obj=obj") (inst "seq_1=seq_1") (inst "i_1=i_1") (inst "sv_heap=heapAfter_size"))
         (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "1,0,0,0,0,0,1") (ifseqformula "29"))
         (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "1,0,0,0,0,0,1,0") (ifseqformula "29"))
         (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,1,0,0,0,0,0,1") (ifseqformula "23"))
         (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,1,0,0,0,0,0,1,0") (ifseqformula "23"))
         (rule "andLeft" (formula "1"))
         (rule "andLeft" (formula "1"))
         (rule "castedGetAny" (formula "3") (term "0,1,1,0,0,0"))
         (rule "castedGetAny" (formula "1") (term "0,0,0,0,0"))
         (rule "castedGetAny" (formula "1") (term "0,0,0,1,0,1,0,0"))
         (rule "castedGetAny" (formula "2") (term "0,1,1,0,0,0"))
         (rule "castedGetAny" (formula "1") (term "0,0,1,1,0,1,0,0"))
         (rule "castedGetAny" (formula "1") (term "0,0,0,0,1,0,0"))
         (rule "shift_paren_or" (formula "2") (term "0,0,0,0,0"))
         (rule "shift_paren_or" (formula "1") (term "0,0,0,0,0"))
         (rule "methodCallEmpty" (formula "54") (term "1"))
         (rule "shift_paren_or" (formula "2") (term "0,0,0,0,0,0"))
         (rule "commute_and" (formula "2") (term "0,0,0,0"))
         (rule "shift_paren_or" (formula "1") (term "0,0,0,0,0,0"))
         (rule "commute_and" (formula "1") (term "0,0,0,0"))
         (rule "shift_paren_and" (formula "3") (term "0,1,0,0"))
          (builtin "One Step Simplification" (formula "3"))
         (rule "lenNonNegative" (formula "26") (term "1,0,0,0"))
         (rule "inEqSimp_commuteLeq" (formula "26"))
         (rule "emptyModality" (formula "55") (term "1"))
          (builtin "One Step Simplification" (formula "55"))
         (rule "impRight" (formula "55"))
         (rule "notLeft" (formula "1"))
         (rule "shift_paren_and" (formula "3") (term "1,0,0"))
         (rule "methodCallReturn" (formula "55") (term "1"))
         (rule "assignment" (formula "55") (term "1"))
          (builtin "One Step Simplification" (formula "55"))
         (rule "methodCallEmpty" (formula "55") (term "1"))
         (rule "tryEmpty" (formula "55") (term "1"))
         (rule "emptyModality" (formula "55") (term "1"))
         (rule "andRight" (formula "55"))
         (branch
            (rule "andRight" (formula "55"))
            (branch
               (rule "andRight" (formula "55"))
               (branch
                   (builtin "One Step Simplification" (formula "55"))
                  (rule "inEqSimp_ltRight" (formula "42"))
                  (rule "polySimp_mulComm0" (formula "1") (term "0,0"))
                  (rule "polySimp_addComm0" (formula "1") (term "0"))
                  (rule "inEqSimp_ltToLeq" (formula "39") (term "0,0,0"))
                  (rule "polySimp_mulComm0" (formula "39") (term "1,0,0,0,0,0"))
                  (rule "inEqSimp_ltToLeq" (formula "40") (term "0,0,0"))
                  (rule "polySimp_mulComm0" (formula "40") (term "1,0,0,0,0,0"))
                  (rule "inEqSimp_ltToLeq" (formula "27") (term "0,0,0"))
                  (rule "polySimp_mulComm0" (formula "27") (term "1,0,0,0,0,0"))
                  (rule "inEqSimp_ltToLeq" (formula "19") (term "0,0,0"))
                  (rule "polySimp_mulComm0" (formula "19") (term "1,0,0,0,0,0"))
                  (rule "inEqSimp_sepNegMonomial1" (formula "1"))
                  (rule "polySimp_mulLiterals" (formula "1") (term "0"))
                  (rule "polySimp_elimOne" (formula "1") (term "0"))
                  (rule "inEqSimp_sepPosMonomial0" (formula "39") (term "0,0,0"))
                  (rule "polySimp_mulComm0" (formula "39") (term "1,0,0,0"))
                  (rule "polySimp_rightDist" (formula "39") (term "1,0,0,0"))
                  (rule "polySimp_mulLiterals" (formula "39") (term "1,1,0,0,0"))
                  (rule "mul_literals" (formula "39") (term "0,1,0,0,0"))
                  (rule "polySimp_elimOne" (formula "39") (term "1,1,0,0,0"))
                  (rule "inEqSimp_sepPosMonomial0" (formula "40") (term "0,0,0"))
                  (rule "polySimp_mulComm0" (formula "40") (term "1,0,0,0"))
                  (rule "polySimp_rightDist" (formula "40") (term "1,0,0,0"))
                  (rule "mul_literals" (formula "40") (term "0,1,0,0,0"))
                  (rule "polySimp_mulLiterals" (formula "40") (term "1,1,0,0,0"))
                  (rule "polySimp_elimOne" (formula "40") (term "1,1,0,0,0"))
                  (rule "inEqSimp_sepPosMonomial0" (formula "27") (term "0,0,0"))
                  (rule "polySimp_mulComm0" (formula "27") (term "1,0,0,0"))
                  (rule "polySimp_rightDist" (formula "27") (term "1,0,0,0"))
                  (rule "mul_literals" (formula "27") (term "0,1,0,0,0"))
                  (rule "polySimp_mulLiterals" (formula "27") (term "1,1,0,0,0"))
                  (rule "polySimp_elimOne" (formula "27") (term "1,1,0,0,0"))
                  (rule "inEqSimp_sepPosMonomial0" (formula "19") (term "0,0,0"))
                  (rule "polySimp_mulComm0" (formula "19") (term "1,0,0,0"))
                  (rule "polySimp_rightDist" (formula "19") (term "1,0,0,0"))
                  (rule "mul_literals" (formula "19") (term "0,1,0,0,0"))
                  (rule "polySimp_mulLiterals" (formula "19") (term "1,1,0,0,0"))
                  (rule "polySimp_elimOne" (formula "19") (term "1,1,0,0,0"))
                  (rule "inEqSimp_subsumption1" (formula "42") (ifseqformula "35"))
                  (rule "leq_literals" (formula "42") (term "0"))
                   (builtin "One Step Simplification" (formula "42"))
                  (rule "true_left" (formula "42"))
                  (rule "inEqSimp_antiSymm" (formula "36") (ifseqformula "1"))
                  (rule "applyEq" (formula "37") (term "0") (ifseqformula "36"))
                  (rule "inEqSimp_homoInEq1" (formula "37"))
                  (rule "polySimp_pullOutFactor1" (formula "37") (term "0"))
                  (rule "add_literals" (formula "37") (term "1,0"))
                  (rule "times_zero_1" (formula "37") (term "0"))
                  (rule "leq_literals" (formula "37"))
                  (rule "true_left" (formula "37"))
                  (rule "applyEq" (formula "39") (term "1,1,0,0,0") (ifseqformula "36"))
                  (rule "applyEq" (formula "1") (term "0") (ifseqformula "36"))
                  (rule "inEqSimp_homoInEq0" (formula "1"))
                  (rule "polySimp_pullOutFactor1" (formula "1") (term "0"))
                  (rule "add_literals" (formula "1") (term "1,0"))
                  (rule "times_zero_1" (formula "1") (term "0"))
                  (rule "qeq_literals" (formula "1"))
                  (rule "true_left" (formula "1"))
                  (rule "applyEq" (formula "30") (term "0") (ifseqformula "35"))
                  (rule "applyEq" (formula "18") (term "1,1,0,0,0") (ifseqformula "35"))
                  (rule "applyEq" (formula "29") (term "0") (ifseqformula "35"))
                  (rule "applyEq" (formula "35") (term "1") (ifseqformula "34"))
                  (rule "applyEq" (formula "30") (term "1") (ifseqformula "34"))
                  (rule "inEqSimp_subsumption1" (formula "29") (ifseqformula "33"))
                  (rule "leq_literals" (formula "29") (term "0"))
                   (builtin "One Step Simplification" (formula "29"))
                  (rule "true_left" (formula "29"))
                  (rule "nnf_imp2or" (formula "11") (term "0,0"))
                   (builtin "One Step Simplification" (formula "11"))
                  (rule "nnf_imp2or" (formula "13") (term "0,0,0"))
                  (rule "nnf_imp2or" (formula "6") (term "0,0,0"))
                  (rule "nnf_imp2or" (formula "8") (term "0,0,0"))
                  (rule "nnf_imp2or" (formula "1") (term "0,0,0"))
                  (rule "nnf_imp2or" (formula "10") (term "0,0,0"))
                  (rule "nnf_imp2or" (formula "3") (term "0,0,0"))
                  (rule "nnf_imp2or" (formula "9") (term "0,0,0"))
                  (rule "nnf_imp2or" (formula "7") (term "0,0,0"))
                  (rule "nnf_imp2or" (formula "4") (term "0,0,0"))
                  (rule "nnf_imp2or" (formula "5") (term "0,0,0"))
                  (rule "nnf_imp2or" (formula "2") (term "0,0,0"))
                  (rule "nnf_imp2or" (formula "12") (term "0,0,0"))
                  (rule "nnf_imp2or" (formula "37") (term "0"))
                  (rule "nnf_imp2or" (formula "26") (term "0"))
                  (rule "nnf_imp2or" (formula "36") (term "0"))
                  (rule "nnf_imp2or" (formula "18") (term "0"))
                  (rule "nnf_notAnd" (formula "37") (term "0,0"))
                  (rule "inEqSimp_notGeq" (formula "37") (term "1,0,0"))
                  (rule "mul_literals" (formula "37") (term "1,0,0,1,0,0"))
                  (rule "add_literals" (formula "37") (term "0,0,1,0,0"))
                  (rule "inEqSimp_sepPosMonomial0" (formula "37") (term "1,0,0"))
                  (rule "mul_literals" (formula "37") (term "1,1,0,0"))
                  (rule "inEqSimp_notLeq" (formula "37") (term "0,0,0"))
                  (rule "polySimp_rightDist" (formula "37") (term "1,0,0,0,0,0"))
                  (rule "mul_literals" (formula "37") (term "0,1,0,0,0,0,0"))
                  (rule "polySimp_addAssoc" (formula "37") (term "0,0,0,0,0"))
                  (rule "add_literals" (formula "37") (term "0,0,0,0,0,0"))
                  (rule "add_zero_left" (formula "37") (term "0,0,0,0,0"))
                  (rule "inEqSimp_sepPosMonomial1" (formula "37") (term "0,0,0"))
                  (rule "polySimp_mulLiterals" (formula "37") (term "1,0,0,0"))
                  (rule "polySimp_elimOne" (formula "37") (term "1,0,0,0"))
                  (rule "nnf_notAnd" (formula "26") (term "0,0"))
                  (rule "inEqSimp_notLeq" (formula "26") (term "0,0,0"))
                  (rule "polySimp_rightDist" (formula "26") (term "1,0,0,0,0,0"))
                  (rule "mul_literals" (formula "26") (term "0,1,0,0,0,0,0"))
                  (rule "polySimp_addAssoc" (formula "26") (term "0,0,0,0,0"))
                  (rule "add_literals" (formula "26") (term "0,0,0,0,0,0"))
                  (rule "add_zero_left" (formula "26") (term "0,0,0,0,0"))
                  (rule "inEqSimp_sepPosMonomial1" (formula "26") (term "0,0,0"))
                  (rule "polySimp_mulLiterals" (formula "26") (term "1,0,0,0"))
                  (rule "polySimp_elimOne" (formula "26") (term "1,0,0,0"))
                  (rule "inEqSimp_notGeq" (formula "26") (term "1,0,0"))
                  (rule "mul_literals" (formula "26") (term "1,0,0,1,0,0"))
                  (rule "add_zero_right" (formula "26") (term "0,0,1,0,0"))
                  (rule "inEqSimp_sepPosMonomial0" (formula "26") (term "1,0,0"))
                  (rule "mul_literals" (formula "26") (term "1,1,0,0"))
                  (rule "nnf_notAnd" (formula "36") (term "0,0"))
                  (rule "inEqSimp_notGeq" (formula "36") (term "1,0,0"))
                  (rule "times_zero_1" (formula "36") (term "1,0,0,1,0,0"))
                  (rule "add_literals" (formula "36") (term "0,0,1,0,0"))
                  (rule "inEqSimp_sepPosMonomial0" (formula "36") (term "1,0,0"))
                  (rule "mul_literals" (formula "36") (term "1,1,0,0"))
                  (rule "inEqSimp_notLeq" (formula "36") (term "0,0,0"))
                  (rule "polySimp_rightDist" (formula "36") (term "1,0,0,0,0,0"))
                  (rule "mul_literals" (formula "36") (term "0,1,0,0,0,0,0"))
                  (rule "polySimp_addAssoc" (formula "36") (term "0,0,0,0,0"))
                  (rule "add_literals" (formula "36") (term "0,0,0,0,0,0"))
                  (rule "add_zero_left" (formula "36") (term "0,0,0,0,0"))
                  (rule "inEqSimp_sepPosMonomial1" (formula "36") (term "0,0,0"))
                  (rule "polySimp_mulLiterals" (formula "36") (term "1,0,0,0"))
                  (rule "polySimp_elimOne" (formula "36") (term "1,0,0,0"))
                  (rule "nnf_notAnd" (formula "18") (term "0,0"))
                  (rule "inEqSimp_notGeq" (formula "18") (term "1,0,0"))
                  (rule "mul_literals" (formula "18") (term "1,0,0,1,0,0"))
                  (rule "add_literals" (formula "18") (term "0,0,1,0,0"))
                  (rule "inEqSimp_sepPosMonomial0" (formula "18") (term "1,0,0"))
                  (rule "mul_literals" (formula "18") (term "1,1,0,0"))
                  (rule "inEqSimp_notLeq" (formula "18") (term "0,0,0"))
                  (rule "polySimp_rightDist" (formula "18") (term "1,0,0,0,0,0"))
                  (rule "mul_literals" (formula "18") (term "0,1,0,0,0,0,0"))
                  (rule "polySimp_addAssoc" (formula "18") (term "0,0,0,0,0"))
                  (rule "add_literals" (formula "18") (term "0,0,0,0,0,0"))
                  (rule "add_zero_left" (formula "18") (term "0,0,0,0,0"))
                  (rule "inEqSimp_sepPosMonomial1" (formula "18") (term "0,0,0"))
                  (rule "polySimp_mulLiterals" (formula "18") (term "1,0,0,0"))
                  (rule "polySimp_elimOne" (formula "18") (term "1,0,0,0"))
                  (rule "nnf_notAnd" (formula "13") (term "0,0,0,0"))
                   (builtin "One Step Simplification" (formula "13"))
                  (rule "nnf_imp2or" (formula "6") (term "1,0,0,0"))
                  (rule "nnf_notAnd" (formula "6") (term "0,0,0,0"))
                   (builtin "One Step Simplification" (formula "6"))
                  (rule "nnf_imp2or" (formula "8") (term "1,0,0,0"))
                  (rule "nnf_notAnd" (formula "8") (term "0,0,0,0"))
                   (builtin "One Step Simplification" (formula "8"))
                  (rule "nnf_imp2or" (formula "1") (term "1,0,0,0"))
                  (rule "nnf_notAnd" (formula "1") (term "0,0,0,0"))
                   (builtin "One Step Simplification" (formula "1"))
                  (rule "nnf_imp2or" (formula "10") (term "1,0,0,0"))
                  (rule "nnf_notAnd" (formula "10") (term "0,0,0,0"))
                   (builtin "One Step Simplification" (formula "10"))
                  (rule "nnf_imp2or" (formula "3") (term "1,0,0,0"))
                  (rule "nnf_notAnd" (formula "3") (term "0,0,0,0"))
                   (builtin "One Step Simplification" (formula "3"))
                  (rule "nnf_notAnd" (formula "9") (term "0,0,0,0"))
                   (builtin "One Step Simplification" (formula "9"))
                  (rule "nnf_notAnd" (formula "7") (term "0,0,0,0"))
                   (builtin "One Step Simplification" (formula "7"))
                  (rule "nnf_notAnd" (formula "4") (term "0,0,0,0"))
                   (builtin "One Step Simplification" (formula "4"))
                  (rule "nnf_imp2or" (formula "5") (term "1,0,0,0"))
                  (rule "nnf_notAnd" (formula "5") (term "0,0,0,0"))
                   (builtin "One Step Simplification" (formula "5"))
                  (rule "nnf_imp2or" (formula "2") (term "1,0,0,0"))
                  (rule "nnf_notAnd" (formula "2") (term "0,0,0,0"))
                   (builtin "One Step Simplification" (formula "2"))
                  (rule "nnf_notAnd" (formula "12") (term "0,0,0,0"))
                   (builtin "One Step Simplification" (formula "12"))
                  (rule "nnf_imp2or" (formula "13") (term "1,0,0,0"))
                  (rule "nnf_notOr" (formula "13") (term "1,0,0,0,0"))
                  (rule "nnf_notOr" (formula "6") (term "1,0,0,0,0"))
                  (rule "nnf_notOr" (formula "8") (term "1,0,0,0,0"))
                  (rule "nnf_imp2or" (formula "9") (term "1,0,0,0"))
                  (rule "nnf_imp2or" (formula "7") (term "1,0,0,0"))
                  (rule "nnf_notOr" (formula "1") (term "1,0,0,0,0"))
                  (rule "nnf_imp2or" (formula "4") (term "1,0,0,0"))
                  (rule "nnf_notOr" (formula "10") (term "1,0,0,0,0"))
                  (rule "nnf_notOr" (formula "3") (term "1,0,0,0,0"))
                  (rule "nnf_notOr" (formula "9") (term "1,0,0,0,0"))
                  (rule "nnf_imp2or" (formula "12") (term "1,0,0,0"))
                  (rule "nnf_notOr" (formula "7") (term "1,0,0,0,0"))
                  (rule "nnf_notOr" (formula "4") (term "1,0,0,0,0"))
                  (rule "nnf_notOr" (formula "5") (term "1,0,0,0,0"))
                  (rule "nnf_notOr" (formula "2") (term "1,0,0,0,0"))
                  (rule "nnf_notOr" (formula "12") (term "1,0,0,0,0"))
                  (rule "nnf_notOr" (formula "6") (term "0,1,0,0,0,0"))
                  (rule "nnf_notOr" (formula "1") (term "0,1,0,0,0,0"))
                  (rule "Class_invariant_axiom_for_java_util_ArrayList" (formula "51"))
                  (rule "closeTrue" (formula "51"))
               )
               (branch
                  (rule "andRight" (formula "55"))
                  (branch
                      (builtin "One Step Simplification" (formula "55"))
                     (rule "replaceKnownSelect_taclet200_5" (formula "55") (term "0,0,0,1,0"))
                     (rule "replaceKnownSelect_taclet200_5" (formula "55") (term "0,1,1,0,0"))
                     (rule "replaceKnownAuxiliaryConstant_taclet200_6" (formula "55") (term "0,0,0,1,0"))
                     (rule "replaceKnownAuxiliaryConstant_taclet200_6" (formula "55") (term "0,1,1,0,0"))
                     (rule "allRight" (formula "55") (inst "sk=i_1"))
                     (rule "impRight" (formula "55"))
                     (rule "notRight" (formula "56"))
                     (rule "andLeft" (formula "2"))
                     (rule "inEqSimp_ltRight" (formula "45"))
                     (rule "polySimp_mulComm0" (formula "1") (term "0,0"))
                     (rule "polySimp_addComm0" (formula "1") (term "0"))
                     (rule "inEqSimp_ltToLeq" (formula "30") (term "0,0,0"))
                     (rule "polySimp_mulComm0" (formula "30") (term "1,0,0,0,0,0"))
                     (rule "inEqSimp_ltToLeq" (formula "43") (term "0,0,0"))
                     (rule "polySimp_mulComm0" (formula "43") (term "1,0,0,0,0,0"))
                     (rule "inEqSimp_ltToLeq" (formula "42") (term "0,0,0"))
                     (rule "polySimp_mulComm0" (formula "42") (term "1,0,0,0,0,0"))
                     (rule "inEqSimp_ltToLeq" (formula "22") (term "0,0,0"))
                     (rule "polySimp_mulComm0" (formula "22") (term "1,0,0,0,0,0"))
                     (rule "inEqSimp_ltToLeq" (formula "4"))
                     (rule "polySimp_mulComm0" (formula "4") (term "1,0,0"))
                     (rule "polySimp_addComm1" (formula "4") (term "0"))
                     (rule "inEqSimp_sepNegMonomial1" (formula "1"))
                     (rule "polySimp_mulLiterals" (formula "1") (term "0"))
                     (rule "polySimp_elimOne" (formula "1") (term "0"))
                     (rule "inEqSimp_sepPosMonomial0" (formula "30") (term "0,0,0"))
                     (rule "polySimp_mulComm0" (formula "30") (term "1,0,0,0"))
                     (rule "polySimp_rightDist" (formula "30") (term "1,0,0,0"))
                     (rule "polySimp_mulLiterals" (formula "30") (term "1,1,0,0,0"))
                     (rule "mul_literals" (formula "30") (term "0,1,0,0,0"))
                     (rule "polySimp_elimOne" (formula "30") (term "1,1,0,0,0"))
                     (rule "inEqSimp_sepPosMonomial0" (formula "43") (term "0,0,0"))
                     (rule "polySimp_mulComm0" (formula "43") (term "1,0,0,0"))
                     (rule "polySimp_rightDist" (formula "43") (term "1,0,0,0"))
                     (rule "mul_literals" (formula "43") (term "0,1,0,0,0"))
                     (rule "polySimp_mulLiterals" (formula "43") (term "1,1,0,0,0"))
                     (rule "polySimp_elimOne" (formula "43") (term "1,1,0,0,0"))
                     (rule "inEqSimp_sepPosMonomial0" (formula "42") (term "0,0,0"))
                     (rule "polySimp_mulComm0" (formula "42") (term "1,0,0,0"))
                     (rule "polySimp_rightDist" (formula "42") (term "1,0,0,0"))
                     (rule "polySimp_mulLiterals" (formula "42") (term "1,1,0,0,0"))
                     (rule "mul_literals" (formula "42") (term "0,1,0,0,0"))
                     (rule "polySimp_elimOne" (formula "42") (term "1,1,0,0,0"))
                     (rule "inEqSimp_sepPosMonomial0" (formula "22") (term "0,0,0"))
                     (rule "polySimp_mulComm0" (formula "22") (term "1,0,0,0"))
                     (rule "polySimp_rightDist" (formula "22") (term "1,0,0,0"))
                     (rule "polySimp_mulLiterals" (formula "22") (term "1,1,0,0,0"))
                     (rule "mul_literals" (formula "22") (term "0,1,0,0,0"))
                     (rule "polySimp_elimOne" (formula "22") (term "1,1,0,0,0"))
                     (rule "inEqSimp_sepNegMonomial0" (formula "4"))
                     (rule "polySimp_mulLiterals" (formula "4") (term "0"))
                     (rule "polySimp_elimOne" (formula "4") (term "0"))
                     (rule "inEqSimp_subsumption1" (formula "45") (ifseqformula "38"))
                     (rule "leq_literals" (formula "45") (term "0"))
                      (builtin "One Step Simplification" (formula "45"))
                     (rule "true_left" (formula "45"))
                     (rule "inEqSimp_antiSymm" (formula "39") (ifseqformula "1"))
                     (rule "applyEq" (formula "22") (term "1,1,0,0,0") (ifseqformula "39"))
                     (rule "applyEq" (formula "43") (term "1,1,0,0,0") (ifseqformula "39"))
                     (rule "applyEq" (formula "33") (term "0") (ifseqformula "39"))
                     (rule "applyEq" (formula "39") (term "0") (ifseqformula "38"))
                     (rule "inEqSimp_homoInEq1" (formula "39"))
                     (rule "polySimp_pullOutFactor1" (formula "39") (term "0"))
                     (rule "add_literals" (formula "39") (term "1,0"))
                     (rule "times_zero_1" (formula "39") (term "0"))
                     (rule "leq_literals" (formula "39"))
                     (rule "true_left" (formula "39"))
                     (rule "applyEq" (formula "33") (term "0") (ifseqformula "38"))
                     (rule "applyEq" (formula "1") (term "0") (ifseqformula "38"))
                     (rule "inEqSimp_homoInEq0" (formula "1"))
                     (rule "polySimp_pullOutFactor1" (formula "1") (term "0"))
                     (rule "add_literals" (formula "1") (term "1,0"))
                     (rule "times_zero_1" (formula "1") (term "0"))
                     (rule "qeq_literals" (formula "1"))
                     (rule "true_left" (formula "1"))
                     (rule "applyEq" (formula "33") (term "1") (ifseqformula "37"))
                     (rule "applyEq" (formula "38") (term "1") (ifseqformula "37"))
                     (rule "inEqSimp_subsumption1" (formula "32") (ifseqformula "36"))
                     (rule "leq_literals" (formula "32") (term "0"))
                      (builtin "One Step Simplification" (formula "32"))
                     (rule "true_left" (formula "32"))
                     (rule "nnf_imp2or" (formula "14") (term "0,0"))
                      (builtin "One Step Simplification" (formula "14"))
                     (rule "nnf_imp2or" (formula "6") (term "0,0,0"))
                     (rule "nnf_imp2or" (formula "16") (term "0,0,0"))
                     (rule "nnf_imp2or" (formula "11") (term "0,0,0"))
                     (rule "nnf_imp2or" (formula "5") (term "0,0,0"))
                     (rule "nnf_imp2or" (formula "7") (term "0,0,0"))
                     (rule "nnf_imp2or" (formula "12") (term "0,0,0"))
                     (rule "nnf_imp2or" (formula "15") (term "0,0,0"))
                     (rule "nnf_imp2or" (formula "10") (term "0,0,0"))
                     (rule "nnf_imp2or" (formula "13") (term "0,0,0"))
                     (rule "nnf_imp2or" (formula "4") (term "0,0,0"))
                     (rule "nnf_imp2or" (formula "8") (term "0,0,0"))
                     (rule "nnf_imp2or" (formula "9") (term "0,0,0"))
                     (rule "nnf_imp2or" (formula "29") (term "0"))
                     (rule "nnf_imp2or" (formula "40") (term "0"))
                     (rule "nnf_imp2or" (formula "21") (term "0"))
                     (rule "nnf_imp2or" (formula "39") (term "0"))
                     (rule "nnf_notAnd" (formula "29") (term "0,0"))
                     (rule "inEqSimp_notGeq" (formula "29") (term "1,0,0"))
                     (rule "mul_literals" (formula "29") (term "1,0,0,1,0,0"))
                     (rule "add_literals" (formula "29") (term "0,0,1,0,0"))
                     (rule "inEqSimp_sepPosMonomial0" (formula "29") (term "1,0,0"))
                     (rule "mul_literals" (formula "29") (term "1,1,0,0"))
                     (rule "inEqSimp_notLeq" (formula "29") (term "0,0,0"))
                     (rule "polySimp_rightDist" (formula "29") (term "1,0,0,0,0,0"))
                     (rule "mul_literals" (formula "29") (term "0,1,0,0,0,0,0"))
                     (rule "polySimp_addAssoc" (formula "29") (term "0,0,0,0,0"))
                     (rule "add_literals" (formula "29") (term "0,0,0,0,0,0"))
                     (rule "add_zero_left" (formula "29") (term "0,0,0,0,0"))
                     (rule "inEqSimp_sepPosMonomial1" (formula "29") (term "0,0,0"))
                     (rule "polySimp_mulLiterals" (formula "29") (term "1,0,0,0"))
                     (rule "polySimp_elimOne" (formula "29") (term "1,0,0,0"))
                     (rule "nnf_notAnd" (formula "40") (term "0,0"))
                     (rule "inEqSimp_notLeq" (formula "40") (term "0,0,0"))
                     (rule "polySimp_rightDist" (formula "40") (term "1,0,0,0,0,0"))
                     (rule "mul_literals" (formula "40") (term "0,1,0,0,0,0,0"))
                     (rule "polySimp_addAssoc" (formula "40") (term "0,0,0,0,0"))
                     (rule "add_literals" (formula "40") (term "0,0,0,0,0,0"))
                     (rule "add_zero_left" (formula "40") (term "0,0,0,0,0"))
                     (rule "inEqSimp_sepPosMonomial1" (formula "40") (term "0,0,0"))
                     (rule "polySimp_mulLiterals" (formula "40") (term "1,0,0,0"))
                     (rule "polySimp_elimOne" (formula "40") (term "1,0,0,0"))
                     (rule "inEqSimp_notGeq" (formula "40") (term "1,0,0"))
                     (rule "times_zero_1" (formula "40") (term "1,0,0,1,0,0"))
                     (rule "add_literals" (formula "40") (term "0,0,1,0,0"))
                     (rule "inEqSimp_sepPosMonomial0" (formula "40") (term "1,0,0"))
                     (rule "mul_literals" (formula "40") (term "1,1,0,0"))
                     (rule "nnf_notAnd" (formula "21") (term "0,0"))
                     (rule "inEqSimp_notGeq" (formula "21") (term "1,0,0"))
                     (rule "mul_literals" (formula "21") (term "1,0,0,1,0,0"))
                     (rule "add_literals" (formula "21") (term "0,0,1,0,0"))
                     (rule "inEqSimp_sepPosMonomial0" (formula "21") (term "1,0,0"))
                     (rule "mul_literals" (formula "21") (term "1,1,0,0"))
                     (rule "inEqSimp_notLeq" (formula "21") (term "0,0,0"))
                     (rule "polySimp_rightDist" (formula "21") (term "1,0,0,0,0,0"))
                     (rule "mul_literals" (formula "21") (term "0,1,0,0,0,0,0"))
                     (rule "polySimp_addAssoc" (formula "21") (term "0,0,0,0,0"))
                     (rule "add_literals" (formula "21") (term "0,0,0,0,0,0"))
                     (rule "add_zero_left" (formula "21") (term "0,0,0,0,0"))
                     (rule "inEqSimp_sepPosMonomial1" (formula "21") (term "0,0,0"))
                     (rule "polySimp_mulLiterals" (formula "21") (term "1,0,0,0"))
                     (rule "polySimp_elimOne" (formula "21") (term "1,0,0,0"))
                     (rule "nnf_notAnd" (formula "39") (term "0,0"))
                     (rule "inEqSimp_notGeq" (formula "39") (term "1,0,0"))
                     (rule "mul_literals" (formula "39") (term "1,0,0,1,0,0"))
                     (rule "add_literals" (formula "39") (term "0,0,1,0,0"))
                     (rule "inEqSimp_sepPosMonomial0" (formula "39") (term "1,0,0"))
                     (rule "mul_literals" (formula "39") (term "1,1,0,0"))
                     (rule "inEqSimp_notLeq" (formula "39") (term "0,0,0"))
                     (rule "polySimp_rightDist" (formula "39") (term "1,0,0,0,0,0"))
                     (rule "mul_literals" (formula "39") (term "0,1,0,0,0,0,0"))
                     (rule "polySimp_addAssoc" (formula "39") (term "0,0,0,0,0"))
                     (rule "add_literals" (formula "39") (term "0,0,0,0,0,0"))
                     (rule "add_zero_left" (formula "39") (term "0,0,0,0,0"))
                     (rule "inEqSimp_sepPosMonomial1" (formula "39") (term "0,0,0"))
                     (rule "polySimp_mulLiterals" (formula "39") (term "1,0,0,0"))
                     (rule "polySimp_elimOne" (formula "39") (term "1,0,0,0"))
                     (rule "nnf_imp2or" (formula "6") (term "1,0,0,0"))
                     (rule "nnf_notAnd" (formula "6") (term "0,0,0,0"))
                      (builtin "One Step Simplification" (formula "6"))
                     (rule "nnf_imp2or" (formula "16") (term "1,0,0,0"))
                     (rule "nnf_notAnd" (formula "16") (term "0,0,0,0"))
                      (builtin "One Step Simplification" (formula "16"))
                     (rule "nnf_notAnd" (formula "11") (term "0,0,0,0"))
                      (builtin "One Step Simplification" (formula "11"))
                     (rule "nnf_imp2or" (formula "5") (term "1,0,0,0"))
                     (rule "nnf_notAnd" (formula "5") (term "0,0,0,0"))
                      (builtin "One Step Simplification" (formula "5"))
                     (rule "nnf_notAnd" (formula "7") (term "0,0,0,0"))
                      (builtin "One Step Simplification" (formula "7"))
                     (rule "nnf_imp2or" (formula "12") (term "1,0,0,0"))
                     (rule "nnf_notAnd" (formula "12") (term "0,0,0,0"))
                      (builtin "One Step Simplification" (formula "12"))
                     (rule "nnf_notAnd" (formula "15") (term "0,0,0,0"))
                      (builtin "One Step Simplification" (formula "15"))
                     (rule "nnf_imp2or" (formula "10") (term "1,0,0,0"))
                     (rule "nnf_notAnd" (formula "10") (term "0,0,0,0"))
                      (builtin "One Step Simplification" (formula "10"))
                     (rule "nnf_notAnd" (formula "13") (term "0,0,0,0"))
                      (builtin "One Step Simplification" (formula "13"))
                     (rule "nnf_notAnd" (formula "4") (term "0,0,0,0"))
                      (builtin "One Step Simplification" (formula "4"))
                     (rule "nnf_imp2or" (formula "8") (term "1,0,0,0"))
                     (rule "nnf_notAnd" (formula "8") (term "0,0,0,0"))
                      (builtin "One Step Simplification" (formula "8"))
                     (rule "nnf_notAnd" (formula "9") (term "0,0,0,0"))
                      (builtin "One Step Simplification" (formula "9"))
                     (rule "nnf_imp2or" (formula "11") (term "1,0,0,0"))
                     (rule "nnf_notOr" (formula "6") (term "1,0,0,0,0"))
                     (rule "nnf_imp2or" (formula "7") (term "1,0,0,0"))
                     (rule "nnf_notOr" (formula "16") (term "1,0,0,0,0"))
                     (rule "nnf_notOr" (formula "11") (term "1,0,0,0,0"))
                     (rule "nnf_imp2or" (formula "15") (term "1,0,0,0"))
                     (rule "nnf_notOr" (formula "5") (term "1,0,0,0,0"))
                     (rule "nnf_imp2or" (formula "13") (term "1,0,0,0"))
                     (rule "nnf_notOr" (formula "7") (term "1,0,0,0,0"))
                     (rule "nnf_imp2or" (formula "4") (term "1,0,0,0"))
                     (rule "nnf_notOr" (formula "12") (term "1,0,0,0,0"))
                     (rule "nnf_notOr" (formula "15") (term "1,0,0,0,0"))
                     (rule "nnf_imp2or" (formula "9") (term "1,0,0,0"))
                     (rule "nnf_notOr" (formula "10") (term "1,0,0,0,0"))
                     (rule "nnf_notOr" (formula "13") (term "1,0,0,0,0"))
                     (rule "nnf_notOr" (formula "4") (term "1,0,0,0,0"))
                     (rule "nnf_notOr" (formula "8") (term "1,0,0,0,0"))
                     (rule "nnf_notOr" (formula "9") (term "1,0,0,0,0"))
                     (rule "nnf_notOr" (formula "5") (term "0,1,0,0,0,0"))
                     (rule "nnf_notOr" (formula "4") (term "0,1,0,0,0,0"))
                     (rule "nnf_notOr" (formula "8") (term "0,1,0,0,0,0"))
                     (rule "nnf_notOr" (formula "9") (term "0,1,0,0,0,0"))
                     (rule "nnf_notOr" (formula "5") (term "0,0,1,0,0,0,0"))
                     (rule "nnf_notOr" (formula "4") (term "0,0,1,0,0,0,0"))
                     (rule "commute_or_2" (formula "29") (term "0"))
                     (rule "commute_or_2" (formula "40") (term "0"))
                     (rule "commute_or_2" (formula "21") (term "0"))
                     (rule "cnf_rightDist" (formula "14") (term "0,0"))
                     (rule "distr_forallAnd" (formula "14") (term "0"))
                     (rule "distr_forallAnd" (formula "14"))
                     (rule "andLeft" (formula "14"))
                     (rule "commute_or_2" (formula "40") (term "0"))
                     (rule "commute_or" (formula "6") (term "1,0,0,0"))
                     (rule "commute_or" (formula "17") (term "1,0,0,0"))
                     (rule "commute_or" (formula "5") (term "1,0,0,0"))
                     (rule "commute_or" (formula "30") (term "0,0"))
                     (rule "commute_or_2" (formula "30") (term "0"))
                     (rule "commute_or_2" (formula "11") (term "0,0,0"))
                     (rule "commute_or" (formula "12") (term "1,0,0,0"))
                     (rule "commute_or" (formula "41") (term "0,0"))
                     (rule "commute_or_2" (formula "41") (term "0"))
                     (rule "commute_or" (formula "22") (term "0,0"))
                     (rule "commute_or_2" (formula "22") (term "0"))
                     (rule "commute_or_2" (formula "7") (term "0,0,0"))
                     (rule "commute_or" (formula "15") (term "0,0"))
                     (rule "commute_or" (formula "10") (term "1,0,0,0"))
                     (rule "commute_or_2" (formula "16") (term "0,0,0"))
                     (rule "commute_or" (formula "40") (term "0,0"))
                     (rule "commute_or_2" (formula "40") (term "0"))
                     (rule "commute_or_2" (formula "13") (term "0,0,0"))
                     (rule "commute_or" (formula "8") (term "1,0,0,0"))
                     (rule "commute_or_2" (formula "9") (term "0,0,0"))
                     (rule "commute_or_2" (formula "4") (term "0,0,0"))
                     (rule "ifthenelse_split" (formula "39") (term "0"))
                     (branch "result_46 = ls TRUE"
                        (rule "applyEqReverse" (formula "41") (term "0,0,0,0,0,0") (ifseqformula "40"))
                        (rule "applyEqReverse" (formula "38") (term "0,0") (ifseqformula "40"))
                        (rule "hideAuxiliaryEq" (formula "40"))
                        (rule "applyEq" (formula "28") (term "0,0") (ifseqformula "39"))
                        (rule "applyEq" (formula "30") (term "1,0,1,1,0") (ifseqformula "39"))
                        (rule "applyEq" (formula "43") (term "1,0") (ifseqformula "39"))
                        (rule "close" (formula "43") (ifseqformula "20"))
                     )
                     (branch "result_46 = ls FALSE"
                        (rule "applyEqReverse" (formula "40") (term "0,0,0,0,0,0") (ifseqformula "39"))
                        (rule "applyEqReverse" (formula "38") (term "0,0") (ifseqformula "39"))
                        (rule "hideAuxiliaryEq" (formula "38"))
                        (rule "commute_or_2" (formula "6") (term "0,0,0"))
                        (rule "commute_or_2" (formula "17") (term "0,0,0"))
                        (rule "commute_or_2" (formula "5") (term "0,0,0"))
                        (rule "commute_or_2" (formula "12") (term "0,0,0"))
                        (rule "commute_or_2" (formula "10") (term "0,0,0"))
                        (rule "commute_or_2" (formula "8") (term "0,0,0"))
                        (rule "cnf_rightDist" (formula "14") (term "0,0"))
                        (rule "distr_forallAnd" (formula "14") (term "0"))
                        (rule "distr_forallAnd" (formula "14"))
                        (rule "andLeft" (formula "14"))
                        (rule "commute_or" (formula "15") (term "0,0"))
                        (rule "shift_paren_or" (formula "11") (term "0,0,0,0"))
                        (rule "shift_paren_or" (formula "7") (term "0,0,0,0"))
                        (rule "commute_or" (formula "17") (term "1,0,0,0,0"))
                        (rule "commute_or_2" (formula "11") (term "0,0,0,0"))
                        (rule "commute_or" (formula "13") (term "1,0,0,0,0"))
                        (rule "commute_or_2" (formula "7") (term "0,0,0,0"))
                        (rule "shift_paren_or" (formula "9") (term "0,0,0,0"))
                        (rule "shift_paren_or" (formula "4") (term "0,0,0,0"))
                        (rule "commute_or_2" (formula "9") (term "0,0,0,0"))
                        (rule "commute_or_2" (formula "4") (term "0,0,0,0"))
                        (rule "cnf_rightDist" (formula "14") (term "0,0"))
                        (rule "distr_forallAnd" (formula "14") (term "0"))
                        (rule "distr_forallAnd" (formula "14"))
                        (rule "andLeft" (formula "14"))
                        (rule "commute_or" (formula "15") (term "0,0"))
                        (rule "shift_paren_or" (formula "6") (term "0,0,0,0"))
                        (rule "commute_and" (formula "11") (term "1,0,0,0"))
                        (rule "shift_paren_or" (formula "19") (term "0,0,0,0"))
                        (rule "lenNonNegative" (formula "35") (term "0"))
                        (rule "inEqSimp_commuteLeq" (formula "35"))
                        (rule "applyEq" (formula "35") (term "0") (ifseqformula "36"))
                        (rule "shift_paren_or" (formula "5") (term "0,0,0,0"))
                        (rule "shift_paren_or" (formula "12") (term "0,0,0,0"))
                        (rule "shift_paren_or" (formula "10") (term "0,0,0,0"))
                        (rule "shift_paren_or" (formula "8") (term "0,0,0,0"))
                        (rule "commute_and" (formula "7") (term "1,0,0,0"))
                        (rule "commute_and" (formula "18") (term "1,0,0,0"))
                        (rule "seqGetAlphaCast" (formula "1") (term "0"))
                        (rule "castedGetAny" (formula "1") (term "0"))
                         (builtin "One Step Simplification" (formula "1"))
                        (rule "true_left" (formula "1"))
                        (rule "commute_and" (formula "13") (term "1,0,0,0"))
                        (rule "shift_paren_or" (formula "18") (term "0,0,0,0"))
                        (rule "shift_paren_or" (formula "13") (term "0,0,0,0"))
                        (rule "commute_and" (formula "6") (term "1,0,0,0"))
                        (rule "commute_and" (formula "19") (term "1,0,0,0"))
                        (rule "commute_and" (formula "12") (term "1,0,0,0"))
                        (rule "commute_and" (formula "10") (term "1,0,0,0"))
                        (rule "cnf_rightDist" (formula "9") (term "0,0,0"))
                        (rule "distr_forallAnd" (formula "9") (term "0,0"))
                        (rule "distr_forallAnd" (formula "9") (term "0"))
                        (rule "distr_forallAnd" (formula "9"))
                        (rule "andLeft" (formula "9"))
                        (rule "cnf_rightDist" (formula "4") (term "0,0,0"))
                        (rule "distr_forallAnd" (formula "4") (term "0,0"))
                        (rule "distr_forallAnd" (formula "4") (term "0"))
                        (rule "distr_forallAnd" (formula "4"))
                        (rule "andLeft" (formula "4"))
                        (rule "shift_paren_or" (formula "10") (term "0,0,0"))
                         (builtin "One Step Simplification" (formula "10"))
                        (rule "eqSymm" (formula "10") (term "1,1,0,0,0"))
                        (rule "castedGetAny" (formula "10") (term "0,0,1,0,0,0"))
                        (rule "castedGetAny" (formula "10") (term "1,0,0,0,0,0,0"))
                        (rule "castedGetAny" (formula "10") (term "0,1,1,0,0,0"))
                         (builtin "One Step Simplification" (formula "10"))
                        (rule "true_left" (formula "10"))
                        (rule "cnf_rightDist" (formula "11") (term "0,0,0"))
                        (rule "distr_forallAnd" (formula "11") (term "0,0"))
                        (rule "distr_forallAnd" (formula "11") (term "0"))
                        (rule "distr_forallAnd" (formula "11"))
                        (rule "andLeft" (formula "11"))
                        (rule "commute_or_2" (formula "11") (term "0,0,0"))
                         (builtin "One Step Simplification" (formula "11"))
                        (rule "eqSymm" (formula "11") (term "1,0,0,0,0"))
                        (rule "castedGetAny" (formula "11") (term "1,0,0,1,0,0,0"))
                        (rule "castedGetAny" (formula "11") (term "0,0,0,0,0,0"))
                        (rule "castedGetAny" (formula "11") (term "0,1,0,0,0,0"))
                         (builtin "One Step Simplification" (formula "11"))
                        (rule "true_left" (formula "11"))
                        (rule "shift_paren_or" (formula "4") (term "0,0,0"))
                         (builtin "One Step Simplification" (formula "4"))
                        (rule "eqSymm" (formula "4") (term "1,1,0,0,0"))
                        (rule "castedGetAny" (formula "4") (term "0,0,1,0,0,0"))
                        (rule "castedGetAny" (formula "4") (term "1,0,0,0,0,0,0"))
                        (rule "castedGetAny" (formula "4") (term "0,1,1,0,0,0"))
                         (builtin "One Step Simplification" (formula "4"))
                        (rule "true_left" (formula "4"))
                        (rule "cnf_rightDist" (formula "4") (term "0,0,0"))
                        (rule "distr_forallAnd" (formula "4") (term "0,0"))
                        (rule "distr_forallAnd" (formula "4") (term "0"))
                        (rule "distr_forallAnd" (formula "4"))
                        (rule "andLeft" (formula "4"))
                        (rule "cnf_rightDist" (formula "8") (term "0,0,0"))
                        (rule "distr_forallAnd" (formula "8") (term "0,0"))
                        (rule "distr_forallAnd" (formula "8") (term "0"))
                        (rule "distr_forallAnd" (formula "8"))
                        (rule "andLeft" (formula "8"))
                        (rule "cnf_rightDist" (formula "7") (term "0,0,0"))
                        (rule "distr_forallAnd" (formula "7") (term "0,0"))
                        (rule "distr_forallAnd" (formula "7") (term "0"))
                        (rule "distr_forallAnd" (formula "7"))
                        (rule "andLeft" (formula "7"))
                        (rule "shift_paren_or" (formula "12") (term "0,0,0"))
                         (builtin "One Step Simplification" (formula "12"))
                        (rule "eqSymm" (formula "12") (term "1,1,0,0,0"))
                        (rule "castedGetAny" (formula "12") (term "0,0,0,0,0,0"))
                        (rule "castedGetAny" (formula "12") (term "0,0,1,0,0,0"))
                        (rule "castedGetAny" (formula "12") (term "0,1,1,0,0,0"))
                         (builtin "One Step Simplification" (formula "12"))
                        (rule "true_left" (formula "12"))
                        (rule "cnf_rightDist" (formula "18") (term "0,0,0"))
                        (rule "distr_forallAnd" (formula "18") (term "0,0"))
                        (rule "distr_forallAnd" (formula "18") (term "0"))
                        (rule "distr_forallAnd" (formula "18"))
                        (rule "andLeft" (formula "18"))
                        (rule "cnf_rightDist" (formula "13") (term "0,0,0"))
                        (rule "distr_forallAnd" (formula "13") (term "0,0"))
                        (rule "distr_forallAnd" (formula "13") (term "0"))
                        (rule "distr_forallAnd" (formula "13"))
                        (rule "andLeft" (formula "13"))
                        (rule "lenNonNegative" (formula "3") (term "0"))
                        (rule "inEqSimp_commuteLeq" (formula "3"))
                        (rule "cnf_rightDist" (formula "7") (term "0,0,0"))
                        (rule "distr_forallAnd" (formula "7") (term "0,0"))
                        (rule "distr_forallAnd" (formula "7") (term "0"))
                        (rule "distr_forallAnd" (formula "7"))
                        (rule "andLeft" (formula "7"))
                        (rule "cnf_rightDist" (formula "22") (term "0,0,0"))
                        (rule "distr_forallAnd" (formula "22") (term "0,0"))
                        (rule "distr_forallAnd" (formula "22") (term "0"))
                        (rule "distr_forallAnd" (formula "22"))
                        (rule "andLeft" (formula "22"))
                        (rule "cnf_rightDist" (formula "13") (term "0,0,0"))
                        (rule "distr_forallAnd" (formula "13") (term "0,0"))
                        (rule "distr_forallAnd" (formula "13") (term "0"))
                        (rule "distr_forallAnd" (formula "13"))
                        (rule "andLeft" (formula "13"))
                        (rule "cnf_rightDist" (formula "12") (term "0,0,0"))
                        (rule "distr_forallAnd" (formula "12") (term "0,0"))
                        (rule "distr_forallAnd" (formula "12") (term "0"))
                        (rule "distr_forallAnd" (formula "12"))
                        (rule "andLeft" (formula "12"))
                        (rule "commute_or_2" (formula "8") (term "0,0,0"))
                         (builtin "One Step Simplification" (formula "8"))
                        (rule "eqSymm" (formula "8") (term "1,0,0,0,0"))
                        (rule "castedGetAny" (formula "8") (term "0,0,0,0,0,0"))
                        (rule "castedGetAny" (formula "8") (term "1,0,0,1,0,0,0"))
                        (rule "castedGetAny" (formula "8") (term "0,1,0,0,0,0"))
                         (builtin "One Step Simplification" (formula "8"))
                        (rule "true_left" (formula "8"))
                        (rule "cnf_rightDist" (formula "10") (term "0,0,0"))
                        (rule "distr_forallAnd" (formula "10") (term "0,0"))
                         (builtin "One Step Simplification" (formula "10"))
                        (rule "shift_paren_or" (formula "6") (term "0,0,0"))
                         (builtin "One Step Simplification" (formula "6"))
                        (rule "eqSymm" (formula "6") (term "1,1,0,0,0"))
                        (rule "castedGetAny" (formula "6") (term "1,0,0,0,0,0,0"))
                        (rule "castedGetAny" (formula "6") (term "0,0,1,0,0,0"))
                        (rule "castedGetAny" (formula "6") (term "0,1,1,0,0,0"))
                         (builtin "One Step Simplification" (formula "6"))
                        (rule "true_left" (formula "6"))
                        (rule "commute_or_2" (formula "18") (term "0,0,0"))
                         (builtin "One Step Simplification" (formula "18"))
                        (rule "eqSymm" (formula "18") (term "1,0,0,0,0"))
                        (rule "castedGetAny" (formula "18") (term "1,0,0,1,0,0,0"))
                        (rule "castedGetAny" (formula "18") (term "0,0,0,0,0,0"))
                        (rule "castedGetAny" (formula "18") (term "0,1,0,0,0,0"))
                         (builtin "One Step Simplification" (formula "18"))
                        (rule "true_left" (formula "18"))
                        (rule "shift_paren_or" (formula "8") (term "0,0,0"))
                         (builtin "One Step Simplification" (formula "8"))
                        (rule "eqSymm" (formula "8") (term "1,1,0,0,0"))
                        (rule "castedGetAny" (formula "8") (term "0,0,1,0,0,0"))
                        (rule "castedGetAny" (formula "8") (term "1,0,0,0,0,0,0"))
                        (rule "castedGetAny" (formula "8") (term "0,1,1,0,0,0"))
                         (builtin "One Step Simplification" (formula "8"))
                        (rule "true_left" (formula "8"))
                        (rule "commute_or_2" (formula "11") (term "0,0,0"))
                         (builtin "One Step Simplification" (formula "11"))
                        (rule "eqSymm" (formula "11") (term "1,0,0,0,0"))
                        (rule "castedGetAny" (formula "11") (term "1,0,0,1,0,0,0"))
                        (rule "castedGetAny" (formula "11") (term "0,0,0,0,0,0"))
                        (rule "castedGetAny" (formula "11") (term "0,1,0,0,0,0"))
                         (builtin "One Step Simplification" (formula "11"))
                        (rule "true_left" (formula "11"))
                        (rule "commute_or_2" (formula "6") (term "0,0,0"))
                         (builtin "One Step Simplification" (formula "6"))
                        (rule "eqSymm" (formula "6") (term "1,0,0,0,0"))
                        (rule "castedGetAny" (formula "6") (term "1,0,0,1,0,0,0"))
                        (rule "castedGetAny" (formula "6") (term "0,0,0,0,0,0"))
                        (rule "castedGetAny" (formula "6") (term "0,1,0,0,0,0"))
                         (builtin "One Step Simplification" (formula "6"))
                        (rule "true_left" (formula "6"))
                        (rule "commute_or_2" (formula "16") (term "0,0,0"))
                         (builtin "One Step Simplification" (formula "16"))
                        (rule "eqSymm" (formula "16") (term "1,0,0,0,0"))
                        (rule "castedGetAny" (formula "16") (term "1,0,0,1,0,0,0"))
                        (rule "castedGetAny" (formula "16") (term "0,0,0,0,0,0"))
                        (rule "castedGetAny" (formula "16") (term "0,1,0,0,0,0"))
                         (builtin "One Step Simplification" (formula "16"))
                        (rule "true_left" (formula "16"))
                        (rule "shift_paren_or" (formula "15") (term "0,0,0"))
                         (builtin "One Step Simplification" (formula "15"))
                        (rule "eqSymm" (formula "15") (term "1,1,0,0,0"))
                        (rule "castedGetAny" (formula "15") (term "0,0,0,0,0,0"))
                        (rule "castedGetAny" (formula "15") (term "0,0,1,0,0,0"))
                        (rule "castedGetAny" (formula "15") (term "0,1,1,0,0,0"))
                         (builtin "One Step Simplification" (formula "15"))
                        (rule "true_left" (formula "15"))
                        (rule "commute_or_2" (formula "9") (term "0,0,0"))
                         (builtin "One Step Simplification" (formula "9"))
                        (rule "eqSymm" (formula "9") (term "1,0,0,0,0"))
                        (rule "castedGetAny" (formula "9") (term "1,0,0,1,0,0,0"))
                        (rule "castedGetAny" (formula "9") (term "0,0,0,0,0,0"))
                        (rule "castedGetAny" (formula "9") (term "0,1,0,0,0,0"))
                         (builtin "One Step Simplification" (formula "9"))
                        (rule "true_left" (formula "9"))
                        (rule "shift_paren_or" (formula "9") (term "0,0,0"))
                         (builtin "One Step Simplification" (formula "9"))
                        (rule "eqSymm" (formula "9") (term "1,1,0,0,0"))
                        (rule "castedGetAny" (formula "9") (term "0,0,0,0,0,0"))
                        (rule "castedGetAny" (formula "9") (term "0,0,1,0,0,0"))
                        (rule "castedGetAny" (formula "9") (term "0,1,1,0,0,0"))
                         (builtin "One Step Simplification" (formula "9"))
                        (rule "true_left" (formula "9"))
                        (rule "commute_or_2" (formula "8") (term "0,0,0"))
                         (builtin "One Step Simplification" (formula "8"))
                        (rule "eqSymm" (formula "8") (term "1,0,0,0,0"))
                        (rule "castedGetAny" (formula "8") (term "0,0,0,0,0,0"))
                        (rule "castedGetAny" (formula "8") (term "1,0,0,1,0,0,0"))
                        (rule "castedGetAny" (formula "8") (term "0,1,0,0,0,0"))
                         (builtin "One Step Simplification" (formula "8"))
                        (rule "true_left" (formula "8"))
                        (rule "cnf_rightDist" (formula "5") (term "0,0,0"))
                        (rule "distr_forallAnd" (formula "5") (term "0,0"))
                        (rule "distr_forallAnd" (formula "5") (term "0"))
                        (rule "distr_forallAnd" (formula "5"))
                        (rule "andLeft" (formula "5"))
                        (rule "cnf_rightDist" (formula "7") (term "0,0,0"))
                        (rule "distr_forallAnd" (formula "7") (term "0,0"))
                         (builtin "One Step Simplification" (formula "7"))
                        (rule "Class_axiom_0_in_de_polyas_core3_open_cred_CredTool" (inst "seq=seq") (inst "i=i_2") (inst "str=str") (inst "seq_0=seq_0") (inst "i_0=i_0") (inst "obj=obj") (inst "seq_1=seq_1") (inst "i_1=i_1") (inst "sv_heap=anon_heap_LOOP<<anonHeapFunction>>"))
                        (rule "andLeft" (formula "1"))
                        (rule "andLeft" (formula "1"))
                        (rule "castedGetAny" (formula "3") (term "0,1,1,0,0,0"))
                        (rule "castedGetAny" (formula "1") (term "0,0,0,0,0"))
                        (rule "castedGetAny" (formula "1") (term "0,0,0,0,1,0,0"))
                        (rule "castedGetAny" (formula "2") (term "0,1,1,0,0,0"))
                        (rule "castedGetAny" (formula "1") (term "0,0,1,1,0,1,0,0"))
                        (rule "castedGetAny" (formula "1") (term "0,0,0,1,0,1,0,0"))
                        (rule "nnf_imp2or" (formula "1") (term "0,0"))
                         (builtin "One Step Simplification" (formula "1"))
                        (rule "nnf_imp2or" (formula "3") (term "0,0,0"))
                        (rule "nnf_imp2or" (formula "2") (term "0,0,0"))
                        (rule "nnf_notAnd" (formula "3") (term "0,0,0,0"))
                         (builtin "One Step Simplification" (formula "3"))
                        (rule "nnf_notAnd" (formula "2") (term "0,0,0,0"))
                         (builtin "One Step Simplification" (formula "2"))
                        (rule "nnf_imp2or" (formula "3") (term "1,0,0,0"))
                        (rule "nnf_imp2or" (formula "2") (term "1,0,0,0"))
                        (rule "nnf_notOr" (formula "3") (term "0,0,0,0,0"))
                        (rule "nnf_notOr" (formula "2") (term "0,0,0,0,0"))
                        (rule "shift_paren_or" (formula "11") (term "0,0,0"))
                         (builtin "One Step Simplification" (formula "11"))
                        (rule "eqSymm" (formula "11") (term "1,1,0,0,0"))
                        (rule "castedGetAny" (formula "11") (term "0,0,1,0,0,0"))
                        (rule "castedGetAny" (formula "11") (term "1,0,0,0,0,0,0"))
                        (rule "castedGetAny" (formula "11") (term "0,1,1,0,0,0"))
                         (builtin "One Step Simplification" (formula "11"))
                        (rule "true_left" (formula "11"))
                        (rule "allLeft" (formula "35") (inst "t=i_1"))
                        (rule "replace_known_left" (formula "35") (term "0,0,0") (ifseqformula "4"))
                         (builtin "One Step Simplification" (formula "35"))
                        (rule "inEqSimp_commuteGeq" (formula "35") (term "1"))
                        (rule "inEqSimp_contradInEq1" (formula "35") (term "1") (ifseqformula "7"))
                        (rule "inEqSimp_homoInEq1" (formula "35") (term "0,1"))
                        (rule "polySimp_pullOutFactor1b" (formula "35") (term "0,0,1"))
                        (rule "add_literals" (formula "35") (term "1,1,0,0,1"))
                        (rule "times_zero_1" (formula "35") (term "1,0,0,1"))
                        (rule "add_zero_right" (formula "35") (term "0,0,1"))
                        (rule "leq_literals" (formula "35") (term "0,1"))
                         (builtin "One Step Simplification" (formula "35"))
                        (rule "inEqSimp_contradInEq1" (formula "35") (ifseqformula "5"))
                        (rule "qeq_literals" (formula "35") (term "0"))
                         (builtin "One Step Simplification" (formula "35"))
                        (rule "closeFalse" (formula "35"))
                     )
                  )
                  (branch
                     (rule "andRight" (formula "55"))
                     (branch
                         (builtin "One Step Simplification" (formula "55"))
                        (rule "inEqSimp_ltRight" (formula "42"))
                        (rule "polySimp_mulComm0" (formula "1") (term "0,0"))
                        (rule "polySimp_addComm0" (formula "1") (term "0"))
                        (rule "inEqSimp_ltToLeq" (formula "39") (term "0,0,0"))
                        (rule "polySimp_mulComm0" (formula "39") (term "1,0,0,0,0,0"))
                        (rule "inEqSimp_ltToLeq" (formula "40") (term "0,0,0"))
                        (rule "polySimp_mulComm0" (formula "40") (term "1,0,0,0,0,0"))
                        (rule "inEqSimp_ltToLeq" (formula "19") (term "0,0,0"))
                        (rule "polySimp_mulComm0" (formula "19") (term "1,0,0,0,0,0"))
                        (rule "inEqSimp_ltToLeq" (formula "27") (term "0,0,0"))
                        (rule "polySimp_mulComm0" (formula "27") (term "1,0,0,0,0,0"))
                        (rule "inEqSimp_sepNegMonomial1" (formula "1"))
                        (rule "polySimp_mulLiterals" (formula "1") (term "0"))
                        (rule "polySimp_elimOne" (formula "1") (term "0"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "39") (term "0,0,0"))
                        (rule "polySimp_mulComm0" (formula "39") (term "1,0,0,0"))
                        (rule "polySimp_rightDist" (formula "39") (term "1,0,0,0"))
                        (rule "mul_literals" (formula "39") (term "0,1,0,0,0"))
                        (rule "polySimp_mulLiterals" (formula "39") (term "1,1,0,0,0"))
                        (rule "polySimp_elimOne" (formula "39") (term "1,1,0,0,0"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "40") (term "0,0,0"))
                        (rule "polySimp_mulComm0" (formula "40") (term "1,0,0,0"))
                        (rule "polySimp_rightDist" (formula "40") (term "1,0,0,0"))
                        (rule "mul_literals" (formula "40") (term "0,1,0,0,0"))
                        (rule "polySimp_mulLiterals" (formula "40") (term "1,1,0,0,0"))
                        (rule "polySimp_elimOne" (formula "40") (term "1,1,0,0,0"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "19") (term "0,0,0"))
                        (rule "polySimp_mulComm0" (formula "19") (term "1,0,0,0"))
                        (rule "polySimp_rightDist" (formula "19") (term "1,0,0,0"))
                        (rule "mul_literals" (formula "19") (term "0,1,0,0,0"))
                        (rule "polySimp_mulLiterals" (formula "19") (term "1,1,0,0,0"))
                        (rule "polySimp_elimOne" (formula "19") (term "1,1,0,0,0"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "27") (term "0,0,0"))
                        (rule "polySimp_mulComm0" (formula "27") (term "1,0,0,0"))
                        (rule "polySimp_rightDist" (formula "27") (term "1,0,0,0"))
                        (rule "polySimp_mulLiterals" (formula "27") (term "1,1,0,0,0"))
                        (rule "mul_literals" (formula "27") (term "0,1,0,0,0"))
                        (rule "polySimp_elimOne" (formula "27") (term "1,1,0,0,0"))
                        (rule "inEqSimp_subsumption1" (formula "42") (ifseqformula "35"))
                        (rule "leq_literals" (formula "42") (term "0"))
                         (builtin "One Step Simplification" (formula "42"))
                        (rule "true_left" (formula "42"))
                        (rule "inEqSimp_antiSymm" (formula "36") (ifseqformula "1"))
                        (rule "applyEq" (formula "31") (term "0") (ifseqformula "36"))
                        (rule "applyEq" (formula "1") (term "0") (ifseqformula "36"))
                        (rule "inEqSimp_homoInEq0" (formula "1"))
                        (rule "polySimp_pullOutFactor1" (formula "1") (term "0"))
                        (rule "add_literals" (formula "1") (term "1,0"))
                        (rule "times_zero_1" (formula "1") (term "0"))
                        (rule "qeq_literals" (formula "1"))
                        (rule "true_left" (formula "1"))
                        (rule "applyEq" (formula "29") (term "0") (ifseqformula "35"))
                        (rule "applyEq" (formula "35") (term "0") (ifseqformula "34"))
                        (rule "inEqSimp_homoInEq1" (formula "35"))
                        (rule "polySimp_pullOutFactor1" (formula "35") (term "0"))
                        (rule "add_literals" (formula "35") (term "1,0"))
                        (rule "times_zero_1" (formula "35") (term "0"))
                        (rule "leq_literals" (formula "35"))
                        (rule "true_left" (formula "35"))
                        (rule "applyEq" (formula "18") (term "1,1,0,0,0") (ifseqformula "34"))
                        (rule "applyEq" (formula "37") (term "1,1,0,0,0") (ifseqformula "34"))
                        (rule "applyEq" (formula "35") (term "1") (ifseqformula "34"))
                        (rule "applyEq" (formula "30") (term "1") (ifseqformula "34"))
                        (rule "inEqSimp_subsumption1" (formula "29") (ifseqformula "33"))
                        (rule "leq_literals" (formula "29") (term "0"))
                         (builtin "One Step Simplification" (formula "29"))
                        (rule "true_left" (formula "29"))
                        (rule "nnf_imp2or" (formula "11") (term "0,0"))
                         (builtin "One Step Simplification" (formula "11"))
                        (rule "nnf_imp2or" (formula "4") (term "0,0,0"))
                        (rule "nnf_imp2or" (formula "10") (term "0,0,0"))
                        (rule "nnf_imp2or" (formula "5") (term "0,0,0"))
                        (rule "nnf_imp2or" (formula "1") (term "0,0,0"))
                        (rule "nnf_imp2or" (formula "2") (term "0,0,0"))
                        (rule "nnf_imp2or" (formula "7") (term "0,0,0"))
                        (rule "nnf_imp2or" (formula "12") (term "0,0,0"))
                        (rule "nnf_imp2or" (formula "9") (term "0,0,0"))
                        (rule "nnf_imp2or" (formula "6") (term "0,0,0"))
                        (rule "nnf_imp2or" (formula "8") (term "0,0,0"))
                        (rule "nnf_imp2or" (formula "3") (term "0,0,0"))
                        (rule "nnf_imp2or" (formula "13") (term "0,0,0"))
                        (rule "nnf_imp2or" (formula "37") (term "0"))
                        (rule "nnf_imp2or" (formula "26") (term "0"))
                        (rule "nnf_imp2or" (formula "18") (term "0"))
                        (rule "nnf_imp2or" (formula "36") (term "0"))
                        (rule "nnf_notAnd" (formula "37") (term "0,0"))
                        (rule "inEqSimp_notLeq" (formula "37") (term "0,0,0"))
                        (rule "polySimp_rightDist" (formula "37") (term "1,0,0,0,0,0"))
                        (rule "mul_literals" (formula "37") (term "0,1,0,0,0,0,0"))
                        (rule "polySimp_addAssoc" (formula "37") (term "0,0,0,0,0"))
                        (rule "add_literals" (formula "37") (term "0,0,0,0,0,0"))
                        (rule "add_zero_left" (formula "37") (term "0,0,0,0,0"))
                        (rule "inEqSimp_sepPosMonomial1" (formula "37") (term "0,0,0"))
                        (rule "polySimp_mulLiterals" (formula "37") (term "1,0,0,0"))
                        (rule "polySimp_elimOne" (formula "37") (term "1,0,0,0"))
                        (rule "inEqSimp_notGeq" (formula "37") (term "1,0,0"))
                        (rule "mul_literals" (formula "37") (term "1,0,0,1,0,0"))
                        (rule "add_literals" (formula "37") (term "0,0,1,0,0"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "37") (term "1,0,0"))
                        (rule "mul_literals" (formula "37") (term "1,1,0,0"))
                        (rule "nnf_notAnd" (formula "26") (term "0,0"))
                        (rule "inEqSimp_notLeq" (formula "26") (term "0,0,0"))
                        (rule "polySimp_rightDist" (formula "26") (term "1,0,0,0,0,0"))
                        (rule "mul_literals" (formula "26") (term "0,1,0,0,0,0,0"))
                        (rule "polySimp_addAssoc" (formula "26") (term "0,0,0,0,0"))
                        (rule "add_literals" (formula "26") (term "0,0,0,0,0,0"))
                        (rule "add_zero_left" (formula "26") (term "0,0,0,0,0"))
                        (rule "inEqSimp_sepPosMonomial1" (formula "26") (term "0,0,0"))
                        (rule "polySimp_mulLiterals" (formula "26") (term "1,0,0,0"))
                        (rule "polySimp_elimOne" (formula "26") (term "1,0,0,0"))
                        (rule "inEqSimp_notGeq" (formula "26") (term "1,0,0"))
                        (rule "times_zero_1" (formula "26") (term "1,0,0,1,0,0"))
                        (rule "add_zero_right" (formula "26") (term "0,0,1,0,0"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "26") (term "1,0,0"))
                        (rule "mul_literals" (formula "26") (term "1,1,0,0"))
                        (rule "nnf_notAnd" (formula "18") (term "0,0"))
                        (rule "inEqSimp_notLeq" (formula "18") (term "0,0,0"))
                        (rule "polySimp_rightDist" (formula "18") (term "1,0,0,0,0,0"))
                        (rule "mul_literals" (formula "18") (term "0,1,0,0,0,0,0"))
                        (rule "polySimp_addAssoc" (formula "18") (term "0,0,0,0,0"))
                        (rule "add_literals" (formula "18") (term "0,0,0,0,0,0"))
                        (rule "add_zero_left" (formula "18") (term "0,0,0,0,0"))
                        (rule "inEqSimp_sepPosMonomial1" (formula "18") (term "0,0,0"))
                        (rule "polySimp_mulLiterals" (formula "18") (term "1,0,0,0"))
                        (rule "polySimp_elimOne" (formula "18") (term "1,0,0,0"))
                        (rule "inEqSimp_notGeq" (formula "18") (term "1,0,0"))
                        (rule "times_zero_1" (formula "18") (term "1,0,0,1,0,0"))
                        (rule "add_literals" (formula "18") (term "0,0,1,0,0"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "18") (term "1,0,0"))
                        (rule "mul_literals" (formula "18") (term "1,1,0,0"))
                        (rule "nnf_notAnd" (formula "36") (term "0,0"))
                        (rule "inEqSimp_notLeq" (formula "36") (term "0,0,0"))
                        (rule "polySimp_rightDist" (formula "36") (term "1,0,0,0,0,0"))
                        (rule "mul_literals" (formula "36") (term "0,1,0,0,0,0,0"))
                        (rule "polySimp_addAssoc" (formula "36") (term "0,0,0,0,0"))
                        (rule "add_literals" (formula "36") (term "0,0,0,0,0,0"))
                        (rule "add_zero_left" (formula "36") (term "0,0,0,0,0"))
                        (rule "inEqSimp_sepPosMonomial1" (formula "36") (term "0,0,0"))
                        (rule "polySimp_mulLiterals" (formula "36") (term "1,0,0,0"))
                        (rule "polySimp_elimOne" (formula "36") (term "1,0,0,0"))
                        (rule "inEqSimp_notGeq" (formula "36") (term "1,0,0"))
                        (rule "mul_literals" (formula "36") (term "1,0,0,1,0,0"))
                        (rule "add_literals" (formula "36") (term "0,0,1,0,0"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "36") (term "1,0,0"))
                        (rule "mul_literals" (formula "36") (term "1,1,0,0"))
                        (rule "nnf_imp2or" (formula "4") (term "1,0,0,0"))
                        (rule "nnf_notAnd" (formula "4") (term "0,0,0,0"))
                         (builtin "One Step Simplification" (formula "4"))
                        (rule "nnf_notAnd" (formula "10") (term "0,0,0,0"))
                         (builtin "One Step Simplification" (formula "10"))
                        (rule "nnf_notAnd" (formula "5") (term "0,0,0,0"))
                         (builtin "One Step Simplification" (formula "5"))
                        (rule "nnf_imp2or" (formula "1") (term "1,0,0,0"))
                        (rule "nnf_notAnd" (formula "1") (term "0,0,0,0"))
                         (builtin "One Step Simplification" (formula "1"))
                        (rule "nnf_imp2or" (formula "2") (term "1,0,0,0"))
                        (rule "nnf_notAnd" (formula "2") (term "0,0,0,0"))
                         (builtin "One Step Simplification" (formula "2"))
                        (rule "nnf_imp2or" (formula "7") (term "1,0,0,0"))
                        (rule "nnf_notAnd" (formula "7") (term "0,0,0,0"))
                         (builtin "One Step Simplification" (formula "7"))
                        (rule "nnf_notAnd" (formula "12") (term "0,0,0,0"))
                         (builtin "One Step Simplification" (formula "12"))
                        (rule "nnf_imp2or" (formula "9") (term "1,0,0,0"))
                        (rule "nnf_notAnd" (formula "9") (term "0,0,0,0"))
                         (builtin "One Step Simplification" (formula "9"))
                        (rule "nnf_notAnd" (formula "6") (term "0,0,0,0"))
                         (builtin "One Step Simplification" (formula "6"))
                        (rule "nnf_imp2or" (formula "8") (term "1,0,0,0"))
                        (rule "nnf_notAnd" (formula "8") (term "0,0,0,0"))
                         (builtin "One Step Simplification" (formula "8"))
                        (rule "nnf_imp2or" (formula "3") (term "1,0,0,0"))
                        (rule "nnf_notAnd" (formula "3") (term "0,0,0,0"))
                         (builtin "One Step Simplification" (formula "3"))
                        (rule "nnf_imp2or" (formula "13") (term "1,0,0,0"))
                        (rule "nnf_notAnd" (formula "13") (term "0,0,0,0"))
                         (builtin "One Step Simplification" (formula "13"))
                        (rule "nnf_imp2or" (formula "10") (term "1,0,0,0"))
                        (rule "nnf_imp2or" (formula "5") (term "1,0,0,0"))
                        (rule "nnf_notOr" (formula "4") (term "1,0,0,0,0"))
                        (rule "nnf_notOr" (formula "10") (term "1,0,0,0,0"))
                        (rule "nnf_notOr" (formula "5") (term "1,0,0,0,0"))
                        (rule "nnf_imp2or" (formula "12") (term "1,0,0,0"))
                        (rule "nnf_notOr" (formula "1") (term "1,0,0,0,0"))
                        (rule "nnf_notOr" (formula "2") (term "1,0,0,0,0"))
                        (rule "nnf_imp2or" (formula "6") (term "1,0,0,0"))
                        (rule "nnf_notOr" (formula "7") (term "1,0,0,0,0"))
                        (rule "nnf_notOr" (formula "12") (term "1,0,0,0,0"))
                        (rule "nnf_notOr" (formula "9") (term "1,0,0,0,0"))
                        (rule "nnf_notOr" (formula "6") (term "1,0,0,0,0"))
                        (rule "nnf_notOr" (formula "8") (term "1,0,0,0,0"))
                        (rule "nnf_notOr" (formula "3") (term "1,0,0,0,0"))
                        (rule "nnf_notOr" (formula "13") (term "1,0,0,0,0"))
                        (rule "nnf_notOr" (formula "5") (term "0,1,0,0,0,0"))
                        (rule "nnf_notOr" (formula "1") (term "0,1,0,0,0,0"))
                        (rule "nnf_notOr" (formula "2") (term "0,1,0,0,0,0"))
                        (rule "Static_class_invariant_axiom_for_org_apache_commons_csv_CSVFormat" (formula "51"))
                        (rule "replaceKnownSelect_taclet200_8" (formula "51") (term "0,0"))
                        (rule "replaceKnownAuxiliaryConstant_taclet200_11" (formula "51") (term "0,0"))
                        (rule "notRight" (formula "51"))
                        (rule "close" (formula "49") (ifseqformula "1"))
                     )
                     (branch
                        (rule "andRight" (formula "55"))
                        (branch
                            (builtin "One Step Simplification" (formula "55"))
                           (rule "inEqSimp_ltRight" (formula "42"))
                           (rule "polySimp_mulComm0" (formula "1") (term "0,0"))
                           (rule "polySimp_addComm0" (formula "1") (term "0"))
                           (rule "inEqSimp_ltToLeq" (formula "39") (term "0,0,0"))
                           (rule "polySimp_mulComm0" (formula "39") (term "1,0,0,0,0,0"))
                           (rule "inEqSimp_ltToLeq" (formula "40") (term "0,0,0"))
                           (rule "polySimp_mulComm0" (formula "40") (term "1,0,0,0,0,0"))
                           (rule "inEqSimp_ltToLeq" (formula "19") (term "0,0,0"))
                           (rule "polySimp_mulComm0" (formula "19") (term "1,0,0,0,0,0"))
                           (rule "inEqSimp_ltToLeq" (formula "27") (term "0,0,0"))
                           (rule "polySimp_mulComm0" (formula "27") (term "1,0,0,0,0,0"))
                           (rule "inEqSimp_sepNegMonomial1" (formula "1"))
                           (rule "polySimp_mulLiterals" (formula "1") (term "0"))
                           (rule "polySimp_elimOne" (formula "1") (term "0"))
                           (rule "inEqSimp_sepPosMonomial0" (formula "39") (term "0,0,0"))
                           (rule "polySimp_mulComm0" (formula "39") (term "1,0,0,0"))
                           (rule "polySimp_rightDist" (formula "39") (term "1,0,0,0"))
                           (rule "mul_literals" (formula "39") (term "0,1,0,0,0"))
                           (rule "polySimp_mulLiterals" (formula "39") (term "1,1,0,0,0"))
                           (rule "polySimp_elimOne" (formula "39") (term "1,1,0,0,0"))
                           (rule "inEqSimp_sepPosMonomial0" (formula "40") (term "0,0,0"))
                           (rule "polySimp_mulComm0" (formula "40") (term "1,0,0,0"))
                           (rule "polySimp_rightDist" (formula "40") (term "1,0,0,0"))
                           (rule "mul_literals" (formula "40") (term "0,1,0,0,0"))
                           (rule "polySimp_mulLiterals" (formula "40") (term "1,1,0,0,0"))
                           (rule "polySimp_elimOne" (formula "40") (term "1,1,0,0,0"))
                           (rule "inEqSimp_sepPosMonomial0" (formula "19") (term "0,0,0"))
                           (rule "polySimp_mulComm0" (formula "19") (term "1,0,0,0"))
                           (rule "polySimp_rightDist" (formula "19") (term "1,0,0,0"))
                           (rule "mul_literals" (formula "19") (term "0,1,0,0,0"))
                           (rule "polySimp_mulLiterals" (formula "19") (term "1,1,0,0,0"))
                           (rule "polySimp_elimOne" (formula "19") (term "1,1,0,0,0"))
                           (rule "inEqSimp_sepPosMonomial0" (formula "27") (term "0,0,0"))
                           (rule "polySimp_mulComm0" (formula "27") (term "1,0,0,0"))
                           (rule "polySimp_rightDist" (formula "27") (term "1,0,0,0"))
                           (rule "polySimp_mulLiterals" (formula "27") (term "1,1,0,0,0"))
                           (rule "mul_literals" (formula "27") (term "0,1,0,0,0"))
                           (rule "polySimp_elimOne" (formula "27") (term "1,1,0,0,0"))
                           (rule "inEqSimp_subsumption1" (formula "42") (ifseqformula "35"))
                           (rule "leq_literals" (formula "42") (term "0"))
                            (builtin "One Step Simplification" (formula "42"))
                           (rule "true_left" (formula "42"))
                           (rule "inEqSimp_antiSymm" (formula "36") (ifseqformula "1"))
                           (rule "applyEq" (formula "31") (term "0") (ifseqformula "36"))
                           (rule "applyEq" (formula "1") (term "0") (ifseqformula "36"))
                           (rule "inEqSimp_homoInEq0" (formula "1"))
                           (rule "polySimp_pullOutFactor1" (formula "1") (term "0"))
                           (rule "add_literals" (formula "1") (term "1,0"))
                           (rule "times_zero_1" (formula "1") (term "0"))
                           (rule "qeq_literals" (formula "1"))
                           (rule "true_left" (formula "1"))
                           (rule "applyEq" (formula "29") (term "0") (ifseqformula "35"))
                           (rule "applyEq" (formula "35") (term "0") (ifseqformula "34"))
                           (rule "inEqSimp_homoInEq1" (formula "35"))
                           (rule "polySimp_pullOutFactor1" (formula "35") (term "0"))
                           (rule "add_literals" (formula "35") (term "1,0"))
                           (rule "times_zero_1" (formula "35") (term "0"))
                           (rule "leq_literals" (formula "35"))
                           (rule "true_left" (formula "35"))
                           (rule "applyEq" (formula "18") (term "1,1,0,0,0") (ifseqformula "34"))
                           (rule "applyEq" (formula "37") (term "1,1,0,0,0") (ifseqformula "34"))
                           (rule "applyEq" (formula "35") (term "1") (ifseqformula "34"))
                           (rule "applyEq" (formula "30") (term "1") (ifseqformula "34"))
                           (rule "inEqSimp_subsumption1" (formula "29") (ifseqformula "33"))
                           (rule "leq_literals" (formula "29") (term "0"))
                            (builtin "One Step Simplification" (formula "29"))
                           (rule "true_left" (formula "29"))
                           (rule "nnf_imp2or" (formula "11") (term "0,0"))
                            (builtin "One Step Simplification" (formula "11"))
                           (rule "nnf_imp2or" (formula "4") (term "0,0,0"))
                           (rule "nnf_imp2or" (formula "10") (term "0,0,0"))
                           (rule "nnf_imp2or" (formula "5") (term "0,0,0"))
                           (rule "nnf_imp2or" (formula "1") (term "0,0,0"))
                           (rule "nnf_imp2or" (formula "2") (term "0,0,0"))
                           (rule "nnf_imp2or" (formula "7") (term "0,0,0"))
                           (rule "nnf_imp2or" (formula "12") (term "0,0,0"))
                           (rule "nnf_imp2or" (formula "9") (term "0,0,0"))
                           (rule "nnf_imp2or" (formula "6") (term "0,0,0"))
                           (rule "nnf_imp2or" (formula "8") (term "0,0,0"))
                           (rule "nnf_imp2or" (formula "3") (term "0,0,0"))
                           (rule "nnf_imp2or" (formula "13") (term "0,0,0"))
                           (rule "nnf_imp2or" (formula "37") (term "0"))
                           (rule "nnf_imp2or" (formula "26") (term "0"))
                           (rule "nnf_imp2or" (formula "18") (term "0"))
                           (rule "nnf_imp2or" (formula "36") (term "0"))
                           (rule "nnf_notAnd" (formula "37") (term "0,0"))
                           (rule "inEqSimp_notLeq" (formula "37") (term "0,0,0"))
                           (rule "polySimp_rightDist" (formula "37") (term "1,0,0,0,0,0"))
                           (rule "mul_literals" (formula "37") (term "0,1,0,0,0,0,0"))
                           (rule "polySimp_addAssoc" (formula "37") (term "0,0,0,0,0"))
                           (rule "add_literals" (formula "37") (term "0,0,0,0,0,0"))
                           (rule "add_zero_left" (formula "37") (term "0,0,0,0,0"))
                           (rule "inEqSimp_sepPosMonomial1" (formula "37") (term "0,0,0"))
                           (rule "polySimp_mulLiterals" (formula "37") (term "1,0,0,0"))
                           (rule "polySimp_elimOne" (formula "37") (term "1,0,0,0"))
                           (rule "inEqSimp_notGeq" (formula "37") (term "1,0,0"))
                           (rule "mul_literals" (formula "37") (term "1,0,0,1,0,0"))
                           (rule "add_literals" (formula "37") (term "0,0,1,0,0"))
                           (rule "inEqSimp_sepPosMonomial0" (formula "37") (term "1,0,0"))
                           (rule "mul_literals" (formula "37") (term "1,1,0,0"))
                           (rule "nnf_notAnd" (formula "26") (term "0,0"))
                           (rule "inEqSimp_notLeq" (formula "26") (term "0,0,0"))
                           (rule "polySimp_rightDist" (formula "26") (term "1,0,0,0,0,0"))
                           (rule "mul_literals" (formula "26") (term "0,1,0,0,0,0,0"))
                           (rule "polySimp_addAssoc" (formula "26") (term "0,0,0,0,0"))
                           (rule "add_literals" (formula "26") (term "0,0,0,0,0,0"))
                           (rule "add_zero_left" (formula "26") (term "0,0,0,0,0"))
                           (rule "inEqSimp_sepPosMonomial1" (formula "26") (term "0,0,0"))
                           (rule "polySimp_mulLiterals" (formula "26") (term "1,0,0,0"))
                           (rule "polySimp_elimOne" (formula "26") (term "1,0,0,0"))
                           (rule "inEqSimp_notGeq" (formula "26") (term "1,0,0"))
                           (rule "times_zero_1" (formula "26") (term "1,0,0,1,0,0"))
                           (rule "add_zero_right" (formula "26") (term "0,0,1,0,0"))
                           (rule "inEqSimp_sepPosMonomial0" (formula "26") (term "1,0,0"))
                           (rule "mul_literals" (formula "26") (term "1,1,0,0"))
                           (rule "nnf_notAnd" (formula "18") (term "0,0"))
                           (rule "inEqSimp_notLeq" (formula "18") (term "0,0,0"))
                           (rule "polySimp_rightDist" (formula "18") (term "1,0,0,0,0,0"))
                           (rule "mul_literals" (formula "18") (term "0,1,0,0,0,0,0"))
                           (rule "polySimp_addAssoc" (formula "18") (term "0,0,0,0,0"))
                           (rule "add_literals" (formula "18") (term "0,0,0,0,0,0"))
                           (rule "add_zero_left" (formula "18") (term "0,0,0,0,0"))
                           (rule "inEqSimp_sepPosMonomial1" (formula "18") (term "0,0,0"))
                           (rule "polySimp_mulLiterals" (formula "18") (term "1,0,0,0"))
                           (rule "polySimp_elimOne" (formula "18") (term "1,0,0,0"))
                           (rule "inEqSimp_notGeq" (formula "18") (term "1,0,0"))
                           (rule "times_zero_1" (formula "18") (term "1,0,0,1,0,0"))
                           (rule "add_literals" (formula "18") (term "0,0,1,0,0"))
                           (rule "inEqSimp_sepPosMonomial0" (formula "18") (term "1,0,0"))
                           (rule "mul_literals" (formula "18") (term "1,1,0,0"))
                           (rule "nnf_notAnd" (formula "36") (term "0,0"))
                           (rule "inEqSimp_notLeq" (formula "36") (term "0,0,0"))
                           (rule "polySimp_rightDist" (formula "36") (term "1,0,0,0,0,0"))
                           (rule "mul_literals" (formula "36") (term "0,1,0,0,0,0,0"))
                           (rule "polySimp_addAssoc" (formula "36") (term "0,0,0,0,0"))
                           (rule "add_literals" (formula "36") (term "0,0,0,0,0,0"))
                           (rule "add_zero_left" (formula "36") (term "0,0,0,0,0"))
                           (rule "inEqSimp_sepPosMonomial1" (formula "36") (term "0,0,0"))
                           (rule "polySimp_mulLiterals" (formula "36") (term "1,0,0,0"))
                           (rule "polySimp_elimOne" (formula "36") (term "1,0,0,0"))
                           (rule "inEqSimp_notGeq" (formula "36") (term "1,0,0"))
                           (rule "mul_literals" (formula "36") (term "1,0,0,1,0,0"))
                           (rule "add_literals" (formula "36") (term "0,0,1,0,0"))
                           (rule "inEqSimp_sepPosMonomial0" (formula "36") (term "1,0,0"))
                           (rule "mul_literals" (formula "36") (term "1,1,0,0"))
                           (rule "nnf_imp2or" (formula "4") (term "1,0,0,0"))
                           (rule "nnf_notAnd" (formula "4") (term "0,0,0,0"))
                            (builtin "One Step Simplification" (formula "4"))
                           (rule "nnf_notAnd" (formula "10") (term "0,0,0,0"))
                            (builtin "One Step Simplification" (formula "10"))
                           (rule "nnf_notAnd" (formula "5") (term "0,0,0,0"))
                            (builtin "One Step Simplification" (formula "5"))
                           (rule "nnf_imp2or" (formula "1") (term "1,0,0,0"))
                           (rule "nnf_notAnd" (formula "1") (term "0,0,0,0"))
                            (builtin "One Step Simplification" (formula "1"))
                           (rule "nnf_imp2or" (formula "2") (term "1,0,0,0"))
                           (rule "nnf_notAnd" (formula "2") (term "0,0,0,0"))
                            (builtin "One Step Simplification" (formula "2"))
                           (rule "nnf_imp2or" (formula "7") (term "1,0,0,0"))
                           (rule "nnf_notAnd" (formula "7") (term "0,0,0,0"))
                            (builtin "One Step Simplification" (formula "7"))
                           (rule "nnf_notAnd" (formula "12") (term "0,0,0,0"))
                            (builtin "One Step Simplification" (formula "12"))
                           (rule "nnf_imp2or" (formula "9") (term "1,0,0,0"))
                           (rule "nnf_notAnd" (formula "9") (term "0,0,0,0"))
                            (builtin "One Step Simplification" (formula "9"))
                           (rule "nnf_notAnd" (formula "6") (term "0,0,0,0"))
                            (builtin "One Step Simplification" (formula "6"))
                           (rule "nnf_imp2or" (formula "8") (term "1,0,0,0"))
                           (rule "nnf_notAnd" (formula "8") (term "0,0,0,0"))
                            (builtin "One Step Simplification" (formula "8"))
                           (rule "nnf_imp2or" (formula "3") (term "1,0,0,0"))
                           (rule "nnf_notAnd" (formula "3") (term "0,0,0,0"))
                            (builtin "One Step Simplification" (formula "3"))
                           (rule "nnf_notAnd" (formula "13") (term "0,0,0,0"))
                            (builtin "One Step Simplification" (formula "13"))
                           (rule "nnf_imp2or" (formula "10") (term "1,0,0,0"))
                           (rule "nnf_imp2or" (formula "5") (term "1,0,0,0"))
                           (rule "nnf_notOr" (formula "4") (term "1,0,0,0,0"))
                           (rule "nnf_notOr" (formula "10") (term "1,0,0,0,0"))
                           (rule "nnf_notOr" (formula "5") (term "1,0,0,0,0"))
                           (rule "nnf_imp2or" (formula "12") (term "1,0,0,0"))
                           (rule "nnf_notOr" (formula "1") (term "1,0,0,0,0"))
                           (rule "nnf_imp2or" (formula "6") (term "1,0,0,0"))
                           (rule "nnf_notOr" (formula "2") (term "1,0,0,0,0"))
                           (rule "nnf_notOr" (formula "7") (term "1,0,0,0,0"))
                           (rule "nnf_notOr" (formula "12") (term "1,0,0,0,0"))
                           (rule "nnf_imp2or" (formula "13") (term "1,0,0,0"))
                           (rule "nnf_notOr" (formula "9") (term "1,0,0,0,0"))
                           (rule "nnf_notOr" (formula "6") (term "1,0,0,0,0"))
                           (rule "nnf_notOr" (formula "8") (term "1,0,0,0,0"))
                           (rule "nnf_notOr" (formula "3") (term "1,0,0,0,0"))
                           (rule "nnf_notOr" (formula "13") (term "1,0,0,0,0"))
                           (rule "nnf_notOr" (formula "5") (term "0,1,0,0,0,0"))
                           (rule "nnf_notOr" (formula "1") (term "0,1,0,0,0,0"))
                           (rule "nnf_notOr" (formula "2") (term "0,1,0,0,0,0"))
                           (rule "nnf_notOr" (formula "6") (term "0,1,0,0,0,0"))
                           (rule "Static_class_invariant_axiom_for_de_polyas_core3_open_cred_CredTool" (formula "51"))
                            (builtin "One Step Simplification" (formula "51"))
                           (rule "insert_constant_string_value" (formula "51") (term "0,0,1,0,0") (ifseqformula "14"))
                            (builtin "One Step Simplification" (formula "51"))
                           (rule "insert_constant_string_value" (formula "51") (term "0,0,1,0,0,0") (ifseqformula "14"))
                            (builtin "One Step Simplification" (formula "51"))
                           (rule "insert_constant_string_value" (formula "51") (term "0,0,1,0,0,0,0") (ifseqformula "14"))
                            (builtin "One Step Simplification" (formula "51"))
                           (rule "castDel" (formula "51") (term "0,0,0,1,0,0,0"))
                           (rule "castDel" (formula "51") (term "0,0,0,1,0,0,0,0"))
                           (rule "castDel" (formula "51") (term "0,0,0,1,0,0"))
                           (rule "replace_known_right" (formula "51") (term "0,1,0,0,0") (ifseqformula "45"))
                            (builtin "One Step Simplification" (formula "51") (ifInst ""  (formula "44")) (ifInst ""  (formula "46")))
                           (rule "pullOutSelect" (formula "51") (term "0,0,1,0,0") (inst "selectSK=de_polyas_core3_open_cred_CredTool_print_0"))
                           (rule "simplifySelectOfAnon" (formula "1"))
                            (builtin "One Step Simplification" (formula "1"))
                           (rule "elementOfSingleton" (formula "1") (term "0,0"))
                            (builtin "One Step Simplification" (formula "1"))
                           (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "29"))
                            (builtin "One Step Simplification" (formula "1"))
                           (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "22"))
                            (builtin "One Step Simplification" (formula "1"))
                           (rule "applyEqReverse" (formula "52") (term "0,0,1,0,0") (ifseqformula "1"))
                           (rule "hideAuxiliaryEq" (formula "1"))
                           (rule "replace_known_right" (formula "51") (term "0,1,0,0") (ifseqformula "43"))
                            (builtin "One Step Simplification" (formula "51"))
                           (rule "pullOutSelect" (formula "51") (term "0,0,0,0,0") (inst "selectSK=de_polyas_core3_open_cred_CredTool_distVals_0"))
                           (rule "simplifySelectOfAnon" (formula "1"))
                            (builtin "One Step Simplification" (formula "1"))
                           (rule "elementOfSingleton" (formula "1") (term "0,0"))
                            (builtin "One Step Simplification" (formula "1"))
                           (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "29"))
                            (builtin "One Step Simplification" (formula "1"))
                           (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "22"))
                            (builtin "One Step Simplification" (formula "1"))
                           (rule "applyEqReverse" (formula "52") (term "0,0,0,0,0") (ifseqformula "1"))
                           (rule "hideAuxiliaryEq" (formula "1"))
                           (rule "replace_known_right" (formula "51") (term "0,0,0,0") (ifseqformula "41"))
                            (builtin "One Step Simplification" (formula "51"))
                           (rule "pullOutSelect" (formula "51") (term "1,1") (inst "selectSK=de_polyas_core3_open_cred_CredTool_FieldsForPolyasMode_MIN_0"))
                           (rule "simplifySelectOfAnon" (formula "1"))
                            (builtin "One Step Simplification" (formula "1"))
                           (rule "elementOfSingleton" (formula "1") (term "0,0"))
                            (builtin "One Step Simplification" (formula "1"))
                           (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "29"))
                            (builtin "One Step Simplification" (formula "1"))
                           (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "22"))
                            (builtin "One Step Simplification" (formula "1"))
                           (rule "applyEqReverse" (formula "52") (term "1,1") (ifseqformula "1"))
                           (rule "hideAuxiliaryEq" (formula "1"))
                           (rule "pullOutSelect" (formula "51") (term "0,1") (inst "selectSK=de_polyas_core3_open_cred_CredTool_polyasMode_0"))
                           (rule "applyEq" (formula "52") (term "0,0,1,0") (ifseqformula "1"))
                           (rule "simplifySelectOfAnon" (formula "1"))
                            (builtin "One Step Simplification" (formula "1"))
                           (rule "eqSymm" (formula "52") (term "1"))
                           (rule "elementOfSingleton" (formula "1") (term "0,0"))
                            (builtin "One Step Simplification" (formula "1"))
                           (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "29"))
                            (builtin "One Step Simplification" (formula "1"))
                           (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "22"))
                            (builtin "One Step Simplification" (formula "1"))
                           (rule "applyEqReverse" (formula "52") (term "0,0,1,0") (ifseqformula "1"))
                           (rule "applyEqReverse" (formula "52") (term "1,1") (ifseqformula "1"))
                           (rule "hideAuxiliaryEq" (formula "1"))
                           (rule "eqSymm" (formula "51") (term "1"))
                           (rule "replace_known_left" (formula "51") (term "1") (ifseqformula "19"))
                            (builtin "One Step Simplification" (formula "51"))
                           (rule "applyEq" (formula "51") (term "0,0,1") (ifseqformula "19"))
                           (rule "replace_known_right" (formula "51") (term "0,1") (ifseqformula "47"))
                            (builtin "One Step Simplification" (formula "51"))
                           (rule "notRight" (formula "51"))
                           (rule "pullOutSelect" (formula "1") (term "0") (inst "selectSK=de_polyas_core3_open_cred_CredTool_polyasVals_0"))
                           (rule "simplifySelectOfAnon" (formula "1"))
                            (builtin "One Step Simplification" (formula "1"))
                           (rule "elementOfSingleton" (formula "1") (term "0,0"))
                            (builtin "One Step Simplification" (formula "1"))
                           (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "30"))
                            (builtin "One Step Simplification" (formula "1"))
                           (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "23"))
                            (builtin "One Step Simplification" (formula "1"))
                           (rule "applyEqReverse" (formula "2") (term "0") (ifseqformula "1"))
                           (rule "close" (formula "44") (ifseqformula "2"))
                        )
                        (branch
                            (builtin "One Step Simplification" (formula "55") (ifInst ""  (formula "44")))
                           (rule "closeTrue" (formula "55"))
                        )
                     )
                  )
               )
            )
            (branch
                (builtin "One Step Simplification" (formula "55"))
               (rule "closeTrue" (formula "55"))
            )
         )
         (branch
             (builtin "One Step Simplification" (formula "55"))
            (rule "allRight" (formula "55") (inst "sk=f_0"))
            (rule "allRight" (formula "55") (inst "sk=o_0"))
            (rule "orRight" (formula "55"))
            (rule "eqSymm" (formula "56"))
            (rule "inEqSimp_ltRight" (formula "42"))
            (rule "polySimp_mulComm0" (formula "1") (term "0,0"))
            (rule "polySimp_addComm0" (formula "1") (term "0"))
            (rule "inEqSimp_ltToLeq" (formula "39") (term "0,0,0"))
            (rule "polySimp_mulComm0" (formula "39") (term "1,0,0,0,0,0"))
            (rule "inEqSimp_ltToLeq" (formula "40") (term "0,0,0"))
            (rule "polySimp_mulComm0" (formula "40") (term "1,0,0,0,0,0"))
            (rule "inEqSimp_ltToLeq" (formula "27") (term "0,0,0"))
            (rule "polySimp_mulComm0" (formula "27") (term "1,0,0,0,0,0"))
            (rule "inEqSimp_ltToLeq" (formula "19") (term "0,0,0"))
            (rule "polySimp_mulComm0" (formula "19") (term "1,0,0,0,0,0"))
            (rule "inEqSimp_sepNegMonomial1" (formula "1"))
            (rule "polySimp_mulLiterals" (formula "1") (term "0"))
            (rule "polySimp_elimOne" (formula "1") (term "0"))
            (rule "inEqSimp_sepPosMonomial0" (formula "39") (term "0,0,0"))
            (rule "polySimp_mulComm0" (formula "39") (term "1,0,0,0"))
            (rule "polySimp_rightDist" (formula "39") (term "1,0,0,0"))
            (rule "mul_literals" (formula "39") (term "0,1,0,0,0"))
            (rule "polySimp_mulLiterals" (formula "39") (term "1,1,0,0,0"))
            (rule "polySimp_elimOne" (formula "39") (term "1,1,0,0,0"))
            (rule "inEqSimp_sepPosMonomial0" (formula "40") (term "0,0,0"))
            (rule "polySimp_mulComm0" (formula "40") (term "1,0,0,0"))
            (rule "polySimp_rightDist" (formula "40") (term "1,0,0,0"))
            (rule "polySimp_mulLiterals" (formula "40") (term "1,1,0,0,0"))
            (rule "mul_literals" (formula "40") (term "0,1,0,0,0"))
            (rule "polySimp_elimOne" (formula "40") (term "1,1,0,0,0"))
            (rule "inEqSimp_sepPosMonomial0" (formula "27") (term "0,0,0"))
            (rule "polySimp_mulComm0" (formula "27") (term "1,0,0,0"))
            (rule "polySimp_rightDist" (formula "27") (term "1,0,0,0"))
            (rule "polySimp_mulLiterals" (formula "27") (term "1,1,0,0,0"))
            (rule "mul_literals" (formula "27") (term "0,1,0,0,0"))
            (rule "polySimp_elimOne" (formula "27") (term "1,1,0,0,0"))
            (rule "inEqSimp_sepPosMonomial0" (formula "19") (term "0,0,0"))
            (rule "polySimp_mulComm0" (formula "19") (term "1,0,0,0"))
            (rule "polySimp_rightDist" (formula "19") (term "1,0,0,0"))
            (rule "polySimp_mulLiterals" (formula "19") (term "1,1,0,0,0"))
            (rule "mul_literals" (formula "19") (term "0,1,0,0,0"))
            (rule "polySimp_elimOne" (formula "19") (term "1,1,0,0,0"))
            (rule "inEqSimp_subsumption1" (formula "42") (ifseqformula "35"))
            (rule "leq_literals" (formula "42") (term "0"))
             (builtin "One Step Simplification" (formula "42"))
            (rule "true_left" (formula "42"))
            (rule "pullOutSelect" (formula "55") (term "0") (inst "selectSK=f_0_0"))
            (rule "simplifySelectOfAnon" (formula "1"))
             (builtin "One Step Simplification" (formula "1"))
            (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,1,1,0,0") (ifseqformula "30"))
            (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,0,1,1,0,0") (ifseqformula "23"))
            (rule "eqSymm" (formula "56"))
            (rule "elementOfSingleton" (formula "1") (term "0,0,0,0"))
            (rule "inEqSimp_antiSymm" (formula "37") (ifseqformula "2"))
            (rule "applyEq" (formula "2") (term "0") (ifseqformula "37"))
            (rule "inEqSimp_homoInEq0" (formula "2"))
            (rule "polySimp_pullOutFactor1" (formula "2") (term "0"))
            (rule "add_literals" (formula "2") (term "1,0"))
            (rule "times_zero_1" (formula "2") (term "0"))
            (rule "qeq_literals" (formula "2"))
            (rule "true_left" (formula "2"))
            (rule "applyEq" (formula "40") (term "1,1,0,0,0") (ifseqformula "36"))
            (rule "applyEq" (formula "19") (term "1,1,0,0,0") (ifseqformula "36"))
            (rule "applyEq" (formula "30") (term "0") (ifseqformula "36"))
            (rule "applyEq" (formula "36") (term "0") (ifseqformula "35"))
            (rule "inEqSimp_homoInEq1" (formula "36"))
            (rule "polySimp_pullOutFactor1" (formula "36") (term "0"))
            (rule "add_literals" (formula "36") (term "1,0"))
            (rule "times_zero_1" (formula "36") (term "0"))
            (rule "leq_literals" (formula "36"))
            (rule "true_left" (formula "36"))
            (rule "applyEq" (formula "30") (term "0") (ifseqformula "35"))
            (rule "applyEq" (formula "31") (term "1") (ifseqformula "35"))
            (rule "applyEq" (formula "36") (term "1") (ifseqformula "35"))
            (rule "inEqSimp_subsumption1" (formula "30") (ifseqformula "34"))
            (rule "leq_literals" (formula "30") (term "0"))
             (builtin "One Step Simplification" (formula "30"))
            (rule "true_left" (formula "30"))
            (rule "pullOutSelect" (formula "1") (term "2,0") (inst "selectSK=f_0_1"))
            (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "30"))
             (builtin "One Step Simplification" (formula "1"))
            (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,1,0,0") (ifseqformula "23"))
            (rule "pullOutSelect" (formula "1") (term "2,0") (inst "selectSK=f_0_2"))
            (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "24"))
             (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "54")))
            (rule "applyEqReverse" (formula "2") (term "2,0") (ifseqformula "1"))
            (rule "hideAuxiliaryEq" (formula "1"))
            (rule "nnf_imp2or" (formula "13") (term "0,0"))
             (builtin "One Step Simplification" (formula "13"))
            (rule "nnf_imp2or" (formula "5") (term "0,0,0"))
            (rule "nnf_imp2or" (formula "11") (term "0,0,0"))
            (rule "nnf_imp2or" (formula "6") (term "0,0,0"))
            (rule "nnf_imp2or" (formula "7") (term "0,0,0"))
            (rule "nnf_imp2or" (formula "9") (term "0,0,0"))
            (rule "nnf_imp2or" (formula "15") (term "0,0,0"))
            (rule "nnf_imp2or" (formula "14") (term "0,0,0"))
            (rule "nnf_imp2or" (formula "10") (term "0,0,0"))
            (rule "nnf_imp2or" (formula "4") (term "0,0,0"))
            (rule "nnf_imp2or" (formula "3") (term "0,0,0"))
            (rule "nnf_imp2or" (formula "8") (term "0,0,0"))
            (rule "nnf_imp2or" (formula "12") (term "0,0,0"))
            (rule "nnf_imp2or" (formula "39") (term "0"))
            (rule "nnf_imp2or" (formula "28") (term "0"))
            (rule "nnf_imp2or" (formula "38") (term "0"))
            (rule "nnf_imp2or" (formula "20") (term "0"))
            (rule "nnf_notAnd" (formula "39") (term "0,0"))
            (rule "inEqSimp_notLeq" (formula "39") (term "0,0,0"))
            (rule "polySimp_rightDist" (formula "39") (term "1,0,0,0,0,0"))
            (rule "mul_literals" (formula "39") (term "0,1,0,0,0,0,0"))
            (rule "polySimp_addAssoc" (formula "39") (term "0,0,0,0,0"))
            (rule "add_literals" (formula "39") (term "0,0,0,0,0,0"))
            (rule "add_zero_left" (formula "39") (term "0,0,0,0,0"))
            (rule "inEqSimp_sepPosMonomial1" (formula "39") (term "0,0,0"))
            (rule "polySimp_mulLiterals" (formula "39") (term "1,0,0,0"))
            (rule "polySimp_elimOne" (formula "39") (term "1,0,0,0"))
            (rule "inEqSimp_notGeq" (formula "39") (term "1,0,0"))
            (rule "mul_literals" (formula "39") (term "1,0,0,1,0,0"))
            (rule "add_literals" (formula "39") (term "0,0,1,0,0"))
            (rule "inEqSimp_sepPosMonomial0" (formula "39") (term "1,0,0"))
            (rule "mul_literals" (formula "39") (term "1,1,0,0"))
            (rule "nnf_notAnd" (formula "28") (term "0,0"))
            (rule "inEqSimp_notGeq" (formula "28") (term "1,0,0"))
            (rule "mul_literals" (formula "28") (term "1,0,0,1,0,0"))
            (rule "add_literals" (formula "28") (term "0,0,1,0,0"))
            (rule "inEqSimp_sepPosMonomial0" (formula "28") (term "1,0,0"))
            (rule "mul_literals" (formula "28") (term "1,1,0,0"))
            (rule "inEqSimp_notLeq" (formula "28") (term "0,0,0"))
            (rule "polySimp_rightDist" (formula "28") (term "1,0,0,0,0,0"))
            (rule "mul_literals" (formula "28") (term "0,1,0,0,0,0,0"))
            (rule "polySimp_addAssoc" (formula "28") (term "0,0,0,0,0"))
            (rule "add_literals" (formula "28") (term "0,0,0,0,0,0"))
            (rule "add_zero_left" (formula "28") (term "0,0,0,0,0"))
            (rule "inEqSimp_sepPosMonomial1" (formula "28") (term "0,0,0"))
            (rule "polySimp_mulLiterals" (formula "28") (term "1,0,0,0"))
            (rule "polySimp_elimOne" (formula "28") (term "1,0,0,0"))
            (rule "nnf_notAnd" (formula "38") (term "0,0"))
            (rule "inEqSimp_notGeq" (formula "38") (term "1,0,0"))
            (rule "times_zero_1" (formula "38") (term "1,0,0,1,0,0"))
            (rule "add_literals" (formula "38") (term "0,0,1,0,0"))
            (rule "inEqSimp_sepPosMonomial0" (formula "38") (term "1,0,0"))
            (rule "mul_literals" (formula "38") (term "1,1,0,0"))
            (rule "inEqSimp_notLeq" (formula "38") (term "0,0,0"))
            (rule "polySimp_rightDist" (formula "38") (term "1,0,0,0,0,0"))
            (rule "mul_literals" (formula "38") (term "0,1,0,0,0,0,0"))
            (rule "polySimp_addAssoc" (formula "38") (term "0,0,0,0,0"))
            (rule "add_literals" (formula "38") (term "0,0,0,0,0,0"))
            (rule "add_zero_left" (formula "38") (term "0,0,0,0,0"))
            (rule "inEqSimp_sepPosMonomial1" (formula "38") (term "0,0,0"))
            (rule "polySimp_mulLiterals" (formula "38") (term "1,0,0,0"))
            (rule "polySimp_elimOne" (formula "38") (term "1,0,0,0"))
            (rule "nnf_notAnd" (formula "20") (term "0,0"))
            (rule "inEqSimp_notGeq" (formula "20") (term "1,0,0"))
            (rule "times_zero_1" (formula "20") (term "1,0,0,1,0,0"))
            (rule "add_literals" (formula "20") (term "0,0,1,0,0"))
            (rule "inEqSimp_sepPosMonomial0" (formula "20") (term "1,0,0"))
            (rule "mul_literals" (formula "20") (term "1,1,0,0"))
            (rule "inEqSimp_notLeq" (formula "20") (term "0,0,0"))
            (rule "polySimp_rightDist" (formula "20") (term "1,0,0,0,0,0"))
            (rule "mul_literals" (formula "20") (term "0,1,0,0,0,0,0"))
            (rule "polySimp_addAssoc" (formula "20") (term "0,0,0,0,0"))
            (rule "add_literals" (formula "20") (term "0,0,0,0,0,0"))
            (rule "add_zero_left" (formula "20") (term "0,0,0,0,0"))
            (rule "inEqSimp_sepPosMonomial1" (formula "20") (term "0,0,0"))
            (rule "polySimp_mulLiterals" (formula "20") (term "1,0,0,0"))
            (rule "polySimp_elimOne" (formula "20") (term "1,0,0,0"))
            (rule "nnf_notAnd" (formula "5") (term "0,0,0,0"))
             (builtin "One Step Simplification" (formula "5"))
            (rule "nnf_imp2or" (formula "11") (term "1,0,0,0"))
            (rule "nnf_notAnd" (formula "11") (term "0,0,0,0"))
             (builtin "One Step Simplification" (formula "11"))
            (rule "nnf_notAnd" (formula "6") (term "0,0,0,0"))
             (builtin "One Step Simplification" (formula "6"))
            (rule "nnf_imp2or" (formula "7") (term "1,0,0,0"))
            (rule "nnf_notAnd" (formula "7") (term "0,0,0,0"))
             (builtin "One Step Simplification" (formula "7"))
            (rule "nnf_imp2or" (formula "9") (term "1,0,0,0"))
            (rule "nnf_notAnd" (formula "9") (term "0,0,0,0"))
             (builtin "One Step Simplification" (formula "9"))
            (rule "nnf_imp2or" (formula "15") (term "1,0,0,0"))
            (rule "nnf_notAnd" (formula "15") (term "0,0,0,0"))
             (builtin "One Step Simplification" (formula "15"))
            (rule "nnf_notAnd" (formula "14") (term "0,0,0,0"))
             (builtin "One Step Simplification" (formula "14"))
            (rule "nnf_notAnd" (formula "10") (term "0,0,0,0"))
             (builtin "One Step Simplification" (formula "10"))
            (rule "nnf_imp2or" (formula "4") (term "1,0,0,0"))
            (rule "nnf_notAnd" (formula "4") (term "0,0,0,0"))
             (builtin "One Step Simplification" (formula "4"))
            (rule "nnf_notAnd" (formula "3") (term "0,0,0,0"))
             (builtin "One Step Simplification" (formula "3"))
            (rule "nnf_notAnd" (formula "8") (term "0,0,0,0"))
             (builtin "One Step Simplification" (formula "8"))
            (rule "nnf_notAnd" (formula "12") (term "0,0,0,0"))
             (builtin "One Step Simplification" (formula "12"))
            (rule "nnf_imp2or" (formula "5") (term "1,0,0,0"))
            (rule "nnf_imp2or" (formula "6") (term "1,0,0,0"))
            (rule "nnf_notOr" (formula "5") (term "1,0,0,0,0"))
            (rule "nnf_notOr" (formula "11") (term "1,0,0,0,0"))
            (rule "nnf_notOr" (formula "6") (term "1,0,0,0,0"))
            (rule "nnf_imp2or" (formula "14") (term "1,0,0,0"))
            (rule "nnf_notOr" (formula "7") (term "1,0,0,0,0"))
            (rule "nnf_imp2or" (formula "10") (term "1,0,0,0"))
            (rule "nnf_notOr" (formula "9") (term "1,0,0,0,0"))
            (rule "nnf_imp2or" (formula "3") (term "1,0,0,0"))
            (rule "nnf_notOr" (formula "15") (term "1,0,0,0,0"))
            (rule "nnf_imp2or" (formula "8") (term "1,0,0,0"))
            (rule "nnf_notOr" (formula "14") (term "1,0,0,0,0"))
            (rule "nnf_imp2or" (formula "12") (term "1,0,0,0"))
            (rule "nnf_notOr" (formula "10") (term "1,0,0,0,0"))
            (rule "nnf_notOr" (formula "4") (term "1,0,0,0,0"))
            (rule "nnf_notOr" (formula "3") (term "1,0,0,0,0"))
            (rule "nnf_notOr" (formula "8") (term "1,0,0,0,0"))
            (rule "nnf_notOr" (formula "12") (term "1,0,0,0,0"))
            (rule "nnf_notOr" (formula "7") (term "0,1,0,0,0,0"))
            (rule "nnf_notOr" (formula "4") (term "0,1,0,0,0,0"))
            (rule "nnf_notOr" (formula "3") (term "0,1,0,0,0,0"))
            (rule "nnf_notOr" (formula "8") (term "0,1,0,0,0,0"))
            (rule "nnf_notOr" (formula "4") (term "0,0,1,0,0,0,0"))
            (rule "nnf_notOr" (formula "3") (term "0,0,1,0,0,0,0"))
            (rule "commute_or_2" (formula "39") (term "0"))
            (rule "commute_and_2" (formula "2") (term "0,0,0"))
            (rule "commute_or_2" (formula "28") (term "0"))
            (rule "commute_or_2" (formula "38") (term "0"))
            (rule "cnf_rightDist" (formula "13") (term "0,0"))
            (rule "distr_forallAnd" (formula "13") (term "0"))
            (rule "distr_forallAnd" (formula "13"))
            (rule "andLeft" (formula "13"))
            (rule "commute_or_2" (formula "21") (term "0"))
            (rule "commute_or" (formula "11") (term "1,0,0,0"))
            (rule "commute_or" (formula "7") (term "1,0,0,0"))
            (rule "commute_or_2" (formula "5") (term "0,0,0"))
            (rule "commute_or" (formula "9") (term "1,0,0,0"))
            (rule "commute_or_2" (formula "6") (term "0,0,0"))
            (rule "commute_or" (formula "40") (term "0,0"))
            (rule "commute_or_2" (formula "40") (term "0"))
            (rule "commute_or" (formula "16") (term "1,0,0,0"))
            (rule "commute_or" (formula "29") (term "0,0"))
            (rule "commute_or_2" (formula "29") (term "0"))
            (rule "commute_or" (formula "39") (term "0,0"))
            (rule "commute_or_2" (formula "39") (term "0"))
            (rule "commute_or_2" (formula "15") (term "0,0,0"))
            (rule "commute_or" (formula "14") (term "0,0"))
            (rule "commute_or" (formula "4") (term "1,0,0,0"))
            (rule "commute_or" (formula "21") (term "0,0"))
            (rule "commute_or_2" (formula "21") (term "0"))
            (rule "commute_or_2" (formula "10") (term "0,0,0"))
            (rule "commute_or_2" (formula "12") (term "0,0,0"))
            (rule "ifthenelse_split" (formula "38") (term "0"))
            (branch "result_46 = ls TRUE"
               (rule "applyEqReverse" (formula "40") (term "0,0,0,0,0,0") (ifseqformula "39"))
               (rule "applyEqReverse" (formula "37") (term "0,0") (ifseqformula "39"))
               (rule "hideAuxiliaryEq" (formula "39"))
               (rule "applyEq" (formula "2") (term "1,0,0,0,0,0") (ifseqformula "38"))
               (rule "applyEq" (formula "27") (term "0,0") (ifseqformula "38"))
               (rule "applyEq" (formula "42") (term "1,0") (ifseqformula "38"))
               (rule "close" (formula "42") (ifseqformula "19"))
            )
            (branch "result_46 = ls FALSE"
               (rule "applyEqReverse" (formula "37") (term "0,0") (ifseqformula "38"))
               (rule "applyEqReverse" (formula "38") (term "0,0,0,0,0,0") (ifseqformula "37"))
               (rule "hideAuxiliaryEq" (formula "37"))
               (rule "commute_or_2" (formula "8") (term "0,0,0"))
               (rule "commute_or_2" (formula "3") (term "0,0,0"))
               (rule "commute_or_2" (formula "11") (term "0,0,0"))
               (rule "commute_or_2" (formula "7") (term "0,0,0"))
               (rule "commute_or_2" (formula "9") (term "0,0,0"))
               (rule "commute_or_2" (formula "16") (term "0,0,0"))
               (rule "commute_or_2" (formula "4") (term "0,0,0"))
               (rule "cnf_rightDist" (formula "13") (term "0,0"))
               (rule "distr_forallAnd" (formula "13") (term "0"))
               (rule "distr_forallAnd" (formula "13"))
               (rule "andLeft" (formula "13"))
               (rule "commute_or" (formula "14") (term "0,0"))
               (rule "applyEq_and_gen3" (formula "2") (term "0,0,0"))
                (builtin "One Step Simplification" (formula "2"))
               (rule "commute_or" (formula "5") (term "1,0,0,0,0"))
               (rule "commute_or" (formula "6") (term "1,0,0,0,0"))
               (rule "commute_or" (formula "16") (term "1,0,0,0,0"))
               (rule "commute_or" (formula "10") (term "1,0,0,0,0"))
               (rule "commute_or" (formula "12") (term "1,0,0,0,0"))
               (rule "cut_direct" (formula "53") (term "0,0"))
               (branch "CUT: o_0 = null TRUE"
                   (builtin "One Step Simplification" (formula "54"))
                  (rule "false_right" (formula "54"))
                  (rule "replace_known_left" (formula "2") (term "0,0,0,0") (ifseqformula "1"))
                   (builtin "One Step Simplification" (formula "2"))
                  (rule "applyEqReverse" (formula "3") (term "2,0") (ifseqformula "2"))
                  (rule "hideAuxiliaryEq" (formula "2"))
                  (rule "replace_known_left" (formula "2") (term "0,0,1,0,0") (ifseqformula "1"))
                   (builtin "One Step Simplification" (formula "2"))
                  (rule "applyEqRigid" (formula "2") (term "1,1,0") (ifseqformula "1"))
                  (rule "applyEq" (formula "2") (term "1,2,0") (ifseqformula "1"))
                  (rule "applyEq" (formula "2") (term "0,0,0,0") (ifseqformula "1"))
                  (rule "eqSymm" (formula "2") (term "0,0,0"))
                  (rule "replace_known_right" (formula "2") (term "0,0,0") (ifseqformula "42"))
                   (builtin "One Step Simplification" (formula "2"))
                  (rule "applyEqReverse" (formula "53") (term "1") (ifseqformula "2"))
                  (rule "hideAuxiliaryEq" (formula "2"))
                  (rule "applyEqRigid" (formula "52") (term "1,0") (ifseqformula "1"))
                   (builtin "One Step Simplification" (formula "52"))
                  (rule "closeTrue" (formula "52"))
               )
               (branch "CUT: o_0 = null FALSE"
                   (builtin "One Step Simplification" (formula "54"))
                  (rule "notRight" (formula "54"))
                  (rule "replace_known_left" (formula "3") (term "0,0,0,1,1,0,0") (ifseqformula "1"))
                   (builtin "One Step Simplification" (formula "3") (ifInst ""  (formula "54")))
                  (rule "replace_known_left" (formula "2") (term "0,0,1,0,0") (ifseqformula "1"))
                   (builtin "One Step Simplification" (formula "2") (ifInst ""  (formula "54")))
                  (rule "applyEqReverse" (formula "3") (term "2,0") (ifseqformula "2"))
                  (rule "hideAuxiliaryEq" (formula "2"))
                  (rule "lenNonNegative" (formula "33") (term "0"))
                  (rule "inEqSimp_commuteLeq" (formula "33"))
                  (rule "applyEq" (formula "33") (term "0") (ifseqformula "34"))
                  (rule "commute_and" (formula "5") (term "1,0,0,0"))
                  (rule "cnf_rightDist" (formula "13") (term "0,0"))
                  (rule "distr_forallAnd" (formula "13") (term "0"))
                  (rule "distr_forallAnd" (formula "13"))
                  (rule "andLeft" (formula "13"))
                  (rule "commute_or" (formula "14") (term "0,0"))
                  (rule "commute_or" (formula "8") (term "1,0,0,0,0"))
                  (rule "shift_paren_or" (formula "3") (term "0,0,0,0"))
                  (rule "commute_and" (formula "6") (term "1,0,0,0"))
                  (rule "shift_paren_or" (formula "11") (term "0,0,0,0"))
                  (rule "shift_paren_or" (formula "7") (term "0,0,0,0"))
                  (rule "commute_and" (formula "2") (term "0,0"))
                  (rule "shift_paren_or" (formula "9") (term "0,0,0,0"))
                  (rule "shift_paren_or" (formula "18") (term "0,0,0,0"))
                  (rule "shift_paren_or" (formula "4") (term "0,0,0,0"))
                  (rule "commute_and" (formula "17") (term "1,0,0,0"))
                  (rule "commute_and" (formula "10") (term "1,0,0,0"))
                  (rule "shift_paren_or" (formula "5") (term "0,0,0,0"))
                  (rule "shift_paren_or" (formula "6") (term "0,0,0,0"))
                  (rule "commute_and" (formula "12") (term "1,0,0,0"))
                  (rule "shift_paren_or" (formula "17") (term "0,0,0,0"))
                  (rule "shift_paren_or" (formula "10") (term "0,0,0,0"))
                  (rule "commute_or_2" (formula "3") (term "0,0,0,0"))
                  (rule "shift_paren_or" (formula "12") (term "0,0,0,0"))
                  (rule "commute_and" (formula "11") (term "1,0,0,0"))
                  (rule "commute_and" (formula "9") (term "1,0,0,0"))
                  (rule "commute_and" (formula "18") (term "1,0,0,0"))
                  (rule "shift_paren_or" (formula "8") (term "0,0,0,0"))
                  (rule "commute_and" (formula "8") (term "0,1,0,0,0"))
                  (rule "commute_and" (formula "7") (term "0,1,0,0,0"))
                  (rule "cnf_rightDist" (formula "4") (term "0,0,0"))
                  (rule "distr_forallAnd" (formula "4") (term "0,0"))
                  (rule "distr_forallAnd" (formula "4") (term "0"))
                  (rule "distr_forallAnd" (formula "4"))
                  (rule "andLeft" (formula "4"))
                  (rule "shift_paren_or" (formula "5") (term "0,0,0"))
                   (builtin "One Step Simplification" (formula "5"))
                  (rule "eqSymm" (formula "5") (term "1,1,0,0,0"))
                  (rule "castedGetAny" (formula "5") (term "0,0,1,0,0,0"))
                  (rule "castedGetAny" (formula "5") (term "1,0,0,0,0,0,0"))
                  (rule "castedGetAny" (formula "5") (term "0,1,1,0,0,0"))
                   (builtin "One Step Simplification" (formula "5"))
                  (rule "true_left" (formula "5"))
                  (rule "cnf_rightDist" (formula "5") (term "0,0,0"))
                  (rule "distr_forallAnd" (formula "5") (term "0,0"))
                  (rule "distr_forallAnd" (formula "5") (term "0"))
                  (rule "distr_forallAnd" (formula "5"))
                  (rule "andLeft" (formula "5"))
                  (rule "commute_or_2" (formula "5") (term "0,0,0"))
                   (builtin "One Step Simplification" (formula "5"))
                  (rule "eqSymm" (formula "5") (term "1,0,0,0,0"))
                  (rule "castedGetAny" (formula "5") (term "1,0,0,1,0,0,0"))
                  (rule "castedGetAny" (formula "5") (term "0,0,0,0,0,0"))
                  (rule "castedGetAny" (formula "5") (term "0,1,0,0,0,0"))
                   (builtin "One Step Simplification" (formula "5"))
                  (rule "true_left" (formula "5"))
                  (rule "shift_paren_or" (formula "5") (term "0,0,0"))
                   (builtin "One Step Simplification" (formula "5"))
                  (rule "eqSymm" (formula "5") (term "1,1,0,0,0"))
                  (rule "castedGetAny" (formula "5") (term "0,0,0,0,0,0"))
                  (rule "castedGetAny" (formula "5") (term "0,0,1,0,0,0"))
                  (rule "castedGetAny" (formula "5") (term "0,1,1,0,0,0"))
                   (builtin "One Step Simplification" (formula "5"))
                  (rule "true_left" (formula "5"))
                  (rule "cnf_rightDist" (formula "5") (term "0,0,0"))
                  (rule "distr_forallAnd" (formula "5") (term "0,0"))
                  (rule "distr_forallAnd" (formula "5") (term "0"))
                  (rule "distr_forallAnd" (formula "5"))
                  (rule "andLeft" (formula "5"))
                  (rule "commute_or_2" (formula "5") (term "0,0,0"))
                   (builtin "One Step Simplification" (formula "5"))
                  (rule "eqSymm" (formula "5") (term "1,0,0,0,0"))
                  (rule "castedGetAny" (formula "5") (term "1,0,0,1,0,0,0"))
                  (rule "castedGetAny" (formula "5") (term "0,0,0,0,0,0"))
                  (rule "castedGetAny" (formula "5") (term "0,1,0,0,0,0"))
                   (builtin "One Step Simplification" (formula "5"))
                  (rule "true_left" (formula "5"))
                  (rule "cnf_rightDist" (formula "16") (term "0,0,0"))
                  (rule "distr_forallAnd" (formula "16") (term "0,0"))
                  (rule "distr_forallAnd" (formula "16") (term "0"))
                  (rule "distr_forallAnd" (formula "16"))
                  (rule "andLeft" (formula "16"))
                  (rule "commute_and" (formula "3") (term "0,0,1,0,0,0"))
                  (rule "cnf_rightDist" (formula "9") (term "0,0,0"))
                  (rule "distr_forallAnd" (formula "9") (term "0,0"))
                  (rule "distr_forallAnd" (formula "9") (term "0"))
                  (rule "distr_forallAnd" (formula "9"))
                  (rule "andLeft" (formula "9"))
                  (rule "cnf_rightDist" (formula "11") (term "0,0,0"))
                  (rule "distr_forallAnd" (formula "11") (term "0,0"))
                  (rule "distr_forallAnd" (formula "11") (term "0"))
                  (rule "distr_forallAnd" (formula "11"))
                  (rule "andLeft" (formula "11"))
                  (rule "cnf_rightDist" (formula "10") (term "0,0,0"))
                  (rule "distr_forallAnd" (formula "10") (term "0,0"))
                  (rule "distr_forallAnd" (formula "10") (term "0"))
                  (rule "distr_forallAnd" (formula "10"))
                  (rule "andLeft" (formula "10"))
                  (rule "cnf_rightDist" (formula "8") (term "0,0,0"))
                  (rule "distr_forallAnd" (formula "8") (term "0,0"))
                  (rule "distr_forallAnd" (formula "8") (term "0"))
                  (rule "distr_forallAnd" (formula "8"))
                  (rule "andLeft" (formula "8"))
                  (rule "cnf_rightDist" (formula "18") (term "0,0,0"))
                  (rule "distr_forallAnd" (formula "18") (term "0,0"))
                  (rule "distr_forallAnd" (formula "18") (term "0"))
                  (rule "distr_forallAnd" (formula "18"))
                  (rule "andLeft" (formula "18"))
                  (rule "cnf_rightDist" (formula "7") (term "0,0,0"))
                  (rule "distr_forallAnd" (formula "7") (term "0,0"))
                  (rule "distr_forallAnd" (formula "7") (term "0"))
                  (rule "distr_forallAnd" (formula "7"))
                  (rule "andLeft" (formula "7"))
                  (rule "cnf_rightDist" (formula "6") (term "0,0,0"))
                  (rule "distr_forallAnd" (formula "6") (term "0,0"))
                  (rule "distr_forallAnd" (formula "6") (term "0"))
                  (rule "distr_forallAnd" (formula "6"))
                  (rule "andLeft" (formula "6"))
                  (rule "commute_or_2" (formula "18") (term "0,0,0"))
                   (builtin "One Step Simplification" (formula "18"))
                  (rule "eqSymm" (formula "18") (term "1,0,0,0,0"))
                  (rule "castedGetAny" (formula "18") (term "1,0,0,1,0,0,0"))
                  (rule "castedGetAny" (formula "18") (term "0,0,0,0,0,0"))
                  (rule "castedGetAny" (formula "18") (term "0,1,0,0,0,0"))
                   (builtin "One Step Simplification" (formula "18"))
                  (rule "true_left" (formula "18"))
                  (rule "cnf_rightDist" (formula "4") (term "0,0,0"))
                  (rule "distr_forallAnd" (formula "4") (term "0,0"))
                  (rule "distr_forallAnd" (formula "4") (term "0"))
                  (rule "distr_forallAnd" (formula "4"))
                  (rule "andLeft" (formula "4"))
                  (rule "commute_or_2" (formula "11") (term "0,0,0"))
                   (builtin "One Step Simplification" (formula "11"))
                  (rule "eqSymm" (formula "11") (term "1,0,0,0,0"))
                  (rule "castedGetAny" (formula "11") (term "1,0,0,1,0,0,0"))
                  (rule "castedGetAny" (formula "11") (term "0,0,0,0,0,0"))
                  (rule "castedGetAny" (formula "11") (term "0,1,0,0,0,0"))
                   (builtin "One Step Simplification" (formula "11"))
                  (rule "true_left" (formula "11"))
                  (rule "shift_paren_or" (formula "5") (term "0,0,0"))
                   (builtin "One Step Simplification" (formula "5"))
                  (rule "eqSymm" (formula "5") (term "1,1,0,0,0"))
                  (rule "castedGetAny" (formula "5") (term "0,0,1,0,0,0"))
                  (rule "castedGetAny" (formula "5") (term "0,0,0,0,0,0"))
                  (rule "castedGetAny" (formula "5") (term "0,1,1,0,0,0"))
                   (builtin "One Step Simplification" (formula "5"))
                  (rule "true_left" (formula "5"))
                  (rule "commute_or_2" (formula "11") (term "0,0,0"))
                   (builtin "One Step Simplification" (formula "11"))
                  (rule "eqSymm" (formula "11") (term "1,0,0,0,0"))
                  (rule "castedGetAny" (formula "11") (term "0,0,0,0,0,0"))
                  (rule "castedGetAny" (formula "11") (term "1,0,0,1,0,0,0"))
                  (rule "castedGetAny" (formula "11") (term "0,1,0,0,0,0"))
                   (builtin "One Step Simplification" (formula "11"))
                  (rule "true_left" (formula "11"))
                  (rule "commute_or_2" (formula "10") (term "0,0,0"))
                   (builtin "One Step Simplification" (formula "10"))
                  (rule "eqSymm" (formula "10") (term "1,0,0,0,0"))
                  (rule "castedGetAny" (formula "10") (term "1,0,0,1,0,0,0"))
                  (rule "castedGetAny" (formula "10") (term "0,0,0,0,0,0"))
                  (rule "castedGetAny" (formula "10") (term "0,1,0,0,0,0"))
                   (builtin "One Step Simplification" (formula "10"))
                  (rule "true_left" (formula "10"))
                  (rule "shift_paren_or" (formula "14") (term "0,0,0"))
                   (builtin "One Step Simplification" (formula "14"))
                  (rule "eqSymm" (formula "14") (term "1,1,0,0,0"))
                  (rule "castedGetAny" (formula "14") (term "0,0,0,0,0,0"))
                  (rule "castedGetAny" (formula "14") (term "0,0,1,0,0,0"))
                  (rule "castedGetAny" (formula "14") (term "0,1,1,0,0,0"))
                   (builtin "One Step Simplification" (formula "14"))
                  (rule "true_left" (formula "14"))
                  (rule "commute_or_2" (formula "9") (term "0,0,0"))
                   (builtin "One Step Simplification" (formula "9"))
                  (rule "eqSymm" (formula "9") (term "1,0,0,0,0"))
                  (rule "castedGetAny" (formula "9") (term "1,0,0,1,0,0,0"))
                  (rule "castedGetAny" (formula "9") (term "0,0,0,0,0,0"))
                  (rule "castedGetAny" (formula "9") (term "0,1,0,0,0,0"))
                   (builtin "One Step Simplification" (formula "9"))
                  (rule "true_left" (formula "9"))
                  (rule "commute_or_2" (formula "13") (term "0,0,0"))
                   (builtin "One Step Simplification" (formula "13"))
                  (rule "eqSymm" (formula "13") (term "1,0,0,0,0"))
                  (rule "castedGetAny" (formula "13") (term "0,0,0,0,0,0"))
                  (rule "castedGetAny" (formula "13") (term "1,0,0,1,0,0,0"))
                  (rule "castedGetAny" (formula "13") (term "0,1,0,0,0,0"))
                   (builtin "One Step Simplification" (formula "13"))
                  (rule "true_left" (formula "13"))
                  (rule "Class_axiom_0_in_de_polyas_core3_open_cred_CredTool" (inst "seq=seq") (inst "i=i_2") (inst "str=str") (inst "seq_0=seq_0") (inst "i_0=i_0") (inst "obj=obj") (inst "seq_1=seq_1") (inst "i_1=i_1") (inst "sv_heap=anon_heap_LOOP<<anonHeapFunction>>"))
                  (rule "andLeft" (formula "1"))
                  (rule "andLeft" (formula "1"))
                  (rule "castedGetAny" (formula "3") (term "0,1,1,0,0,0"))
                  (rule "castedGetAny" (formula "1") (term "0,0,0,0,1,0,0"))
                  (rule "castedGetAny" (formula "2") (term "0,1,1,0,0,0"))
                  (rule "castedGetAny" (formula "1") (term "0,0,0,1,0,1,0,0"))
                  (rule "castedGetAny" (formula "1") (term "0,0,1,1,0,1,0,0"))
                  (rule "castedGetAny" (formula "1") (term "0,0,0,0,0"))
                  (rule "nnf_imp2or" (formula "1") (term "0,0"))
                   (builtin "One Step Simplification" (formula "1"))
                  (rule "nnf_imp2or" (formula "3") (term "0,0,0"))
                  (rule "nnf_imp2or" (formula "2") (term "0,0,0"))
                  (rule "nnf_notAnd" (formula "3") (term "0,0,0,0"))
                   (builtin "One Step Simplification" (formula "3"))
                  (rule "nnf_notAnd" (formula "2") (term "0,0,0,0"))
                   (builtin "One Step Simplification" (formula "2"))
                  (rule "nnf_imp2or" (formula "3") (term "1,0,0,0"))
                  (rule "nnf_imp2or" (formula "2") (term "1,0,0,0"))
                  (rule "nnf_notOr" (formula "3") (term "0,0,0,0,0"))
                  (rule "nnf_notOr" (formula "2") (term "0,0,0,0,0"))
                  (rule "cnf_rightDist" (formula "6") (term "0,0,0"))
                  (rule "distr_forallAnd" (formula "6") (term "0,0"))
                  (rule "distr_forallAnd" (formula "6") (term "0"))
                  (rule "distr_forallAnd" (formula "6"))
                  (rule "andLeft" (formula "6"))
                  (rule "shift_paren_or" (formula "12") (term "0,0,0"))
                   (builtin "One Step Simplification" (formula "12"))
                  (rule "eqSymm" (formula "12") (term "1,1,0,0,0"))
                  (rule "castedGetAny" (formula "12") (term "1,0,0,0,0,0,0"))
                  (rule "castedGetAny" (formula "12") (term "0,0,1,0,0,0"))
                  (rule "castedGetAny" (formula "12") (term "0,1,1,0,0,0"))
                   (builtin "One Step Simplification" (formula "12"))
                  (rule "true_left" (formula "12"))
                  (rule "shift_paren_or" (formula "10") (term "0,0,0"))
                   (builtin "One Step Simplification" (formula "10"))
                  (rule "eqSymm" (formula "10") (term "1,1,0,0,0"))
                  (rule "castedGetAny" (formula "10") (term "0,0,1,0,0,0"))
                  (rule "castedGetAny" (formula "10") (term "1,0,0,0,0,0,0"))
                  (rule "castedGetAny" (formula "10") (term "0,1,1,0,0,0"))
                   (builtin "One Step Simplification" (formula "10"))
                  (rule "true_left" (formula "10"))
                  (rule "cnf_rightDist" (formula "10") (term "0,0,0"))
                  (rule "distr_forallAnd" (formula "10") (term "0,0"))
                  (rule "distr_forallAnd" (formula "10") (term "0"))
                  (rule "distr_forallAnd" (formula "10"))
                  (rule "andLeft" (formula "10"))
                  (rule "cnf_rightDist" (formula "9") (term "0,0,0"))
                  (rule "distr_forallAnd" (formula "9") (term "0,0"))
                  (rule "distr_forallAnd" (formula "9") (term "0"))
                  (rule "distr_forallAnd" (formula "9"))
                  (rule "andLeft" (formula "9"))
                  (rule "cnf_rightDist" (formula "8") (term "0,0,0"))
                  (rule "distr_forallAnd" (formula "8") (term "0,0"))
                   (builtin "One Step Simplification" (formula "8"))
                  (rule "commute_or" (formula "3") (term "1,0,0,0"))
                  (rule "commute_or" (formula "2") (term "1,0,0,0"))
                  (rule "commute_or" (formula "3") (term "0,0,0,0"))
                  (rule "ifthenelse_split" (formula "5") (term "0"))
                  (branch "f_0 = java.util.Collection::$seq ∧ o_0 = result_46 TRUE"
                     (rule "andLeft" (formula "5"))
                     (rule "applyEqReverse" (formula "55") (term "1") (ifseqformula "7"))
                     (rule "hideAuxiliaryEq" (formula "7"))
                     (rule "eqSymm" (formula "54"))
                     (rule "applyEqRigid" (formula "54") (term "2,1") (ifseqformula "5"))
                     (rule "narrowSelectType" (formula "54") (term "1") (ifseqformula "18"))
                     (rule "applyEq" (formula "54") (term "1,0") (ifseqformula "6"))
                     (rule "applyEqRigid" (formula "54") (term "2,0") (ifseqformula "5"))
                     (rule "narrowSelectType" (formula "54") (term "0") (ifseqformula "35"))
                     (rule "applyEq" (formula "4") (term "1,0") (ifseqformula "6"))
                     (rule "close" (formula "41") (ifseqformula "4"))
                  )
                  (branch "f_0 = java.util.Collection::$seq ∧ o_0 = result_46 FALSE"
                     (rule "close" (formula "54") (ifseqformula "5"))
                  )
               )
            )
         )
      )
   )
   (branch "Exceptional Post (size)"
       (builtin "One Step Simplification" (formula "19"))
       (builtin "One Step Simplification" (formula "32"))
      (rule "andLeft" (formula "19"))
      (rule "selectCreatedOfAnonAsFormulaEQ" (formula "20") (term "1,0") (ifseqformula "19"))
      (rule "selectCreatedOfAnonAsFormulaEQ" (formula "20") (term "0,1,0") (ifseqformula "13"))
      (rule "andLeft" (formula "20"))
      (rule "andLeft" (formula "21"))
      (rule "andLeft" (formula "20"))
      (rule "andLeft" (formula "22"))
      (rule "notLeft" (formula "20"))
      (rule "close" (formula "24") (ifseqformula "23"))
   )
   (branch "Pre (size)"
       (builtin "One Step Simplification" (formula "30"))
      (rule "wellFormedAnonEQ" (formula "30") (term "1") (ifseqformula "13"))
      (rule "replace_known_left" (formula "30") (term "0,1") (ifseqformula "6"))
       (builtin "One Step Simplification" (formula "30") (ifInst ""  (formula "12")))
      (rule "inEqSimp_ltToLeq" (formula "17") (term "0,0,0"))
      (rule "polySimp_mulComm0" (formula "17") (term "1,0,0,0,0,0"))
      (rule "inEqSimp_ltToLeq" (formula "10") (term "0,0,0"))
      (rule "polySimp_mulComm0" (formula "10") (term "1,0,0,0,0,0"))
      (rule "inEqSimp_sepPosMonomial0" (formula "17") (term "0,0,0"))
      (rule "polySimp_mulComm0" (formula "17") (term "1,0,0,0"))
      (rule "polySimp_rightDist" (formula "17") (term "1,0,0,0"))
      (rule "polySimp_mulLiterals" (formula "17") (term "1,1,0,0,0"))
      (rule "mul_literals" (formula "17") (term "0,1,0,0,0"))
      (rule "polySimp_elimOne" (formula "17") (term "1,1,0,0,0"))
      (rule "inEqSimp_sepPosMonomial0" (formula "10") (term "0,0,0"))
      (rule "polySimp_mulComm0" (formula "10") (term "1,0,0,0"))
      (rule "polySimp_rightDist" (formula "10") (term "1,0,0,0"))
      (rule "polySimp_mulLiterals" (formula "10") (term "1,1,0,0,0"))
      (rule "mul_literals" (formula "10") (term "0,1,0,0,0"))
      (rule "polySimp_elimOne" (formula "10") (term "1,1,0,0,0"))
      (rule "nnf_imp2or" (formula "3") (term "0,0"))
       (builtin "One Step Simplification" (formula "3"))
      (rule "nnf_imp2or" (formula "17") (term "0"))
      (rule "nnf_imp2or" (formula "4") (term "0,0,0"))
      (rule "nnf_imp2or" (formula "10") (term "0"))
      (rule "nnf_imp2or" (formula "1") (term "0,0,0"))
      (rule "nnf_imp2or" (formula "2") (term "0,0,0"))
      (rule "nnf_imp2or" (formula "5") (term "0,0,0"))
      (rule "nnf_notAnd" (formula "17") (term "0,0"))
      (rule "inEqSimp_notGeq" (formula "17") (term "1,0,0"))
      (rule "mul_literals" (formula "17") (term "1,0,0,1,0,0"))
      (rule "add_zero_right" (formula "17") (term "0,0,1,0,0"))
      (rule "inEqSimp_sepPosMonomial0" (formula "17") (term "1,0,0"))
      (rule "mul_literals" (formula "17") (term "1,1,0,0"))
      (rule "inEqSimp_notLeq" (formula "17") (term "0,0,0"))
      (rule "polySimp_rightDist" (formula "17") (term "1,0,0,0,0,0"))
      (rule "mul_literals" (formula "17") (term "0,1,0,0,0,0,0"))
      (rule "polySimp_addAssoc" (formula "17") (term "0,0,0,0,0"))
      (rule "add_literals" (formula "17") (term "0,0,0,0,0,0"))
      (rule "add_zero_left" (formula "17") (term "0,0,0,0,0"))
      (rule "inEqSimp_sepPosMonomial1" (formula "17") (term "0,0,0"))
      (rule "polySimp_mulLiterals" (formula "17") (term "1,0,0,0"))
      (rule "polySimp_elimOne" (formula "17") (term "1,0,0,0"))
      (rule "nnf_notAnd" (formula "10") (term "0,0"))
      (rule "inEqSimp_notGeq" (formula "10") (term "1,0,0"))
      (rule "mul_literals" (formula "10") (term "1,0,0,1,0,0"))
      (rule "add_zero_right" (formula "10") (term "0,0,1,0,0"))
      (rule "inEqSimp_sepPosMonomial0" (formula "10") (term "1,0,0"))
      (rule "mul_literals" (formula "10") (term "1,1,0,0"))
      (rule "inEqSimp_notLeq" (formula "10") (term "0,0,0"))
      (rule "polySimp_rightDist" (formula "10") (term "1,0,0,0,0,0"))
      (rule "mul_literals" (formula "10") (term "0,1,0,0,0,0,0"))
      (rule "polySimp_addAssoc" (formula "10") (term "0,0,0,0,0"))
      (rule "add_literals" (formula "10") (term "0,0,0,0,0,0"))
      (rule "add_zero_left" (formula "10") (term "0,0,0,0,0"))
      (rule "inEqSimp_sepPosMonomial1" (formula "10") (term "0,0,0"))
      (rule "polySimp_mulLiterals" (formula "10") (term "1,0,0,0"))
      (rule "polySimp_elimOne" (formula "10") (term "1,0,0,0"))
      (rule "nnf_notAnd" (formula "4") (term "0,0,0,0"))
       (builtin "One Step Simplification" (formula "4"))
      (rule "nnf_notAnd" (formula "1") (term "0,0,0,0"))
       (builtin "One Step Simplification" (formula "1"))
      (rule "nnf_imp2or" (formula "2") (term "1,0,0,0"))
      (rule "nnf_notAnd" (formula "2") (term "0,0,0,0"))
       (builtin "One Step Simplification" (formula "2"))
      (rule "nnf_notAnd" (formula "5") (term "0,0,0,0"))
       (builtin "One Step Simplification" (formula "5"))
      (rule "nnf_imp2or" (formula "4") (term "1,0,0,0"))
      (rule "nnf_imp2or" (formula "1") (term "1,0,0,0"))
      (rule "nnf_imp2or" (formula "5") (term "1,0,0,0"))
      (rule "nnf_notOr" (formula "4") (term "1,0,0,0,0"))
      (rule "nnf_notOr" (formula "1") (term "1,0,0,0,0"))
      (rule "nnf_notOr" (formula "2") (term "1,0,0,0,0"))
      (rule "nnf_notOr" (formula "5") (term "1,0,0,0,0"))
      (rule "Class_invariant_axiom_for_java_util_ArrayList" (formula "30"))
      (rule "closeTrue" (formula "30"))
   )
   (branch "Null reference (_ls = null)"
       (builtin "One Step Simplification" (formula "30") (ifInst ""  (formula "29")))
      (rule "closeTrue" (formula "30"))
   )
)
(branch "Exceptional Post (asList)"
    (builtin "One Step Simplification" (formula "24"))
    (builtin "One Step Simplification" (formula "13"))
   (rule "andLeft" (formula "13"))
   (rule "selectCreatedOfAnonAsFormulaEQ" (formula "14") (term "1,0") (ifseqformula "13"))
   (rule "andLeft" (formula "14"))
   (rule "andLeft" (formula "14"))
   (rule "andLeft" (formula "16"))
   (rule "notLeft" (formula "14"))
   (rule "close" (formula "17") (ifseqformula "16"))
)
(branch "Pre (asList)"
    (builtin "One Step Simplification" (formula "22") (ifInst ""  (formula "20")) (ifInst ""  (formula "6")) (ifInst ""  (formula "20")) (ifInst ""  (formula "7")))
   (rule "closeTrue" (formula "22"))
)
)
}
