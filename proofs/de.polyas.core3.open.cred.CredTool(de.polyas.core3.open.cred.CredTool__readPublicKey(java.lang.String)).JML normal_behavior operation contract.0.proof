\profile "Java Profile";

\settings {
"#Proof-Settings-Config-File
#Thu Sep 26 17:35:13 CEST 2019
[Labels]UseOriginLabels=true
[StrategyProperty]QUERYAXIOM_OPTIONS_KEY=QUERYAXIOM_ON
[SMTSettings]invariantForall=false
[Strategy]ActiveStrategy=JavaCardDLStrategy
[StrategyProperty]USER_TACLETS_OPTIONS_KEY1=USER_TACLETS_OFF
[StrategyProperty]QUANTIFIERS_OPTIONS_KEY=QUANTIFIERS_NON_SPLITTING_WITH_PROGS
[StrategyProperty]USER_TACLETS_OPTIONS_KEY2=USER_TACLETS_OFF
[Choice]DefaultChoices=methodExpansion-methodExpansion\\:modularOnly , mergeGenerateIsWeakeningGoal-mergeGenerateIsWeakeningGoal\\:off , wdChecks-wdChecks\\:off , wdOperator-wdOperator\\:L , permissions-permissions\\:off , integerSimplificationRules-integerSimplificationRules\\:full , reach-reach\\:on , moreSeqRules-moreSeqRules\\:on , sequences-sequences\\:on , bigint-bigint\\:on , modelFields-modelFields\\:treatAsAxiom , Strings-Strings\\:on , JavaCard-JavaCard\\:off , runtimeExceptions-runtimeExceptions\\:allow , programRules-programRules\\:Java , intRules-intRules\\:javaSemantics , initialisation-initialisation\\:disableStaticInitialisation , assertions-assertions\\:on
[StrategyProperty]LOOP_OPTIONS_KEY=LOOP_INVARIANT
[StrategyProperty]INF_FLOW_CHECK_PROPERTY=INF_FLOW_CHECK_FALSE
[SMTSettings]UseBuiltUniqueness=false
[SMTSettings]explicitTypeHierarchy=false
[SMTSettings]instantiateHierarchyAssumptions=true
[StrategyProperty]NON_LIN_ARITH_OPTIONS_KEY=NON_LIN_ARITH_DEF_OPS
[SMTSettings]SelectedTaclets=
[StrategyProperty]DEP_OPTIONS_KEY=DEP_ON
[StrategyProperty]AUTO_INDUCTION_OPTIONS_KEY=AUTO_INDUCTION_OFF
[Strategy]MaximumNumberOfAutomaticApplications=10000
[StrategyProperty]STOPMODE_OPTIONS_KEY=STOPMODE_DEFAULT
[StrategyProperty]CLASS_AXIOM_OPTIONS_KEY=CLASS_AXIOM_FREE
[SMTSettings]useConstantsForBigOrSmallIntegers=true
[StrategyProperty]MPS_OPTIONS_KEY=MPS_MERGE
[StrategyProperty]SYMBOLIC_EXECUTION_NON_EXECUTION_BRANCH_HIDING_OPTIONS_KEY=SYMBOLIC_EXECUTION_NON_EXECUTION_BRANCH_HIDING_OFF
[Strategy]Timeout=-1
[StrategyProperty]SYMBOLIC_EXECUTION_ALIAS_CHECK_OPTIONS_KEY=SYMBOLIC_EXECUTION_ALIAS_CHECK_NEVER
[StrategyProperty]QUERY_NEW_OPTIONS_KEY=QUERY_OFF
[SMTSettings]useUninterpretedMultiplication=true
[StrategyProperty]BLOCK_OPTIONS_KEY=BLOCK_CONTRACT_INTERNAL
[StrategyProperty]METHOD_OPTIONS_KEY=METHOD_CONTRACT
[StrategyProperty]USER_TACLETS_OPTIONS_KEY3=USER_TACLETS_OFF
[SMTSettings]maxGenericSorts=2
[StrategyProperty]OSS_OPTIONS_KEY=OSS_ON
[StrategyProperty]SPLITTING_OPTIONS_KEY=SPLITTING_DELAYED
[SMTSettings]integersMinimum=-2147483645
[StrategyProperty]VBT_PHASE=VBT_SYM_EX
[SMTSettings]integersMaximum=2147483645
"
}

\javaSource "../src";

\proofObligation "#Proof Obligation Settings
#Thu Sep 26 17:35:13 CEST 2019
contract=de.polyas.core3.open.cred.CredTool[de.polyas.core3.open.cred.CredTool\\:\\:readPublicKey(java.lang.String)].JML normal_behavior operation contract.0
name=de.polyas.core3.open.cred.CredTool[de.polyas.core3.open.cred.CredTool\\:\\:readPublicKey(java.lang.String)].JML normal_behavior operation contract.0
class=de.uka.ilkd.key.proof.init.FunctionalOperationContractPO
";

\proof {
(keyLog "0" (keyUser "flo" ) (keyVersion "57d504cc0f"))

(autoModeTime "2585")

(branch "dummy ID"
(rule "impRight" (formula "1") (newnames "key,self_37,result_44,exc_50,heapAtPre_0,o,f"))
(rule "andLeft" (formula "1"))
(rule "notLeft" (formula "2"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "notLeft" (formula "2"))
(rule "eqSymm" (formula "8") (term "1,0,0,1,0,1"))
(rule "replace_known_right" (formula "4") (term "0") (ifseqformula "7"))
 (builtin "One Step Simplification" (formula "4"))
(rule "assignment" (formula "8") (term "1"))
 (builtin "One Step Simplification" (formula "8"))
(rule "methodBodyExpand" (formula "8") (term "1") (newnames "heapBefore_readPublicKey,savedHeapBefore_readPublicKey"))
 (builtin "One Step Simplification" (formula "8"))
(rule "returnUnfold" (formula "8") (term "1") (inst "#v0=p"))
(rule "variableDeclarationAssign" (formula "8") (term "1"))
(rule "variableDeclaration" (formula "8") (term "1") (newnames "p_1"))
(rule "Class_axiom_0_in_de_polyas_core3_open_cred_CredTool" (inst "seq=seq") (inst "i=i") (inst "str=str") (inst "seq_0=seq_0") (inst "i_0=i_0") (inst "sv_heap=heap"))
(rule "andLeft" (formula "1"))
(rule "castedGetAny" (formula "1") (term "0,0,1,0,0"))
(rule "castedGetAny" (formula "2") (term "0,1,1,0,0,0"))
(rule "castedGetAny" (formula "1") (term "0,0,0,0,0"))
(rule "commute_and" (formula "2") (term "0,0,0,0"))
(rule "commute_and" (formula "2") (term "0,1,0,0,0"))
(rule "Class_axiom_0_in_de_polyas_core3_open_cred_CredTool" (inst "seq=seq") (inst "i=i") (inst "str=str") (inst "seq_0=seq_0") (inst "i_0=i_0") (inst "sv_heap=heapAtPre_0"))
(rule "andLeft" (formula "1"))
(rule "castedGetAny" (formula "1") (term "0,0,1,0,0"))
(rule "castedGetAny" (formula "1") (term "0,0,0,0,0"))
(rule "castedGetAny" (formula "1") (term "0,1,1,0,0,0"))
(rule "commute_and" (formula "1") (term "0,0,0,0"))
(rule "commute_and" (formula "1") (term "0,1,0,0,0"))
(rule "staticMethodCallStaticWithAssignmentViaTypereference" (formula "11") (term "1") (inst "#v0=p_2"))
(rule "variableDeclaration" (formula "11") (term "1") (newnames "p_2"))
(rule "variableDeclarationAssign" (formula "11") (term "1"))
(rule "variableDeclaration" (formula "11") (term "1") (newnames "fileName"))
(rule "assignment" (formula "11") (term "1"))
 (builtin "One Step Simplification" (formula "11"))
(rule "methodBodyExpand" (formula "11") (term "1") (newnames "heapBefore_readPublicKey_0,savedHeapBefore_readPublicKey_0"))
 (builtin "One Step Simplification" (formula "11"))
(rule "variableDeclarationFinalAssign" (formula "11") (term "1"))
(rule "variableDeclarationFinal" (formula "11") (term "1") (newnames "keyIn"))
(rule "instanceCreationAssignmentUnfoldArguments" (formula "11") (term "1"))
(rule "variableDeclarationAssign" (formula "11") (term "1"))
(rule "variableDeclaration" (formula "11") (term "1") (newnames "var"))
 (builtin "Use Operation Contract" (formula "11") (newnames "heapBefore_FileInputStream,self_38,exc_51,heapAfter_FileInputStream,anon_heap_FileInputStream") (contract "java.io.FileInputStream[java.io.FileInputStream::FileInputStream(java.lang.String)].JML normal_behavior operation contract.0"))
(branch "Post (FileInputStream)"
    (builtin "One Step Simplification" (formula "10"))
    (builtin "One Step Simplification" (formula "13"))
   (rule "andLeft" (formula "10"))
   (rule "selectCreatedOfAnonAsFormulaEQ" (formula "11") (term "1,1,0,1,0") (ifseqformula "10"))
   (rule "andLeft" (formula "11"))
   (rule "andLeft" (formula "11"))
   (rule "andLeft" (formula "13"))
   (rule "andLeft" (formula "12"))
   (rule "andLeft" (formula "12"))
   (rule "notLeft" (formula "12"))
   (rule "andLeft" (formula "12"))
   (rule "notLeft" (formula "12"))
   (rule "replace_known_right" (formula "12") (term "0") (ifseqformula "15"))
    (builtin "One Step Simplification" (formula "12"))
   (rule "assignment" (formula "19") (term "1"))
    (builtin "One Step Simplification" (formula "19"))
   (rule "Class_invariant_axiom_for_java_io_FileInputStream" (formula "14"))
   (rule "true_left" (formula "14"))
    (builtin "Use Operation Contract" (formula "18") (newnames "heapBefore_BufferedInputStream,self_39,exc_52,heapAfter_BufferedInputStream,anon_heap_BufferedInputStream") (contract "java.io.BufferedInputStream[java.io.BufferedInputStream::BufferedInputStream(java.io.InputStream)].JML normal_behavior operation contract.0"))
   (branch "Post (BufferedInputStream)"
       (builtin "One Step Simplification" (formula "20"))
       (builtin "One Step Simplification" (formula "15"))
      (rule "selectCreatedOfAnonAsFormulaEQ" (formula "15") (term "0,0,1,0,1,0,1") (ifseqformula "10"))
      (rule "andLeft" (formula "15"))
      (rule "selectCreatedOfAnonAsFormulaEQ" (formula "16") (term "1,1,0,1,0") (ifseqformula "15"))
      (rule "selectCreatedOfAnonAsFormulaEQ" (formula "16") (term "0,1,1,0,1,0") (ifseqformula "10"))
      (rule "andLeft" (formula "16"))
      (rule "andLeft" (formula "16"))
      (rule "andLeft" (formula "18"))
      (rule "andLeft" (formula "17"))
      (rule "andLeft" (formula "17"))
      (rule "andLeft" (formula "18"))
      (rule "notLeft" (formula "17"))
      (rule "notLeft" (formula "17"))
      (rule "orRight" (formula "20"))
      (rule "replace_known_right" (formula "17") (term "0,0") (ifseqformula "20"))
       (builtin "One Step Simplification" (formula "17") (ifInst ""  (formula "21")))
      (rule "assignment" (formula "27") (term "1"))
       (builtin "One Step Simplification" (formula "27"))
      (rule "blockEmpty" (formula "27") (term "1"))
      (rule "variableDeclarationFinalAssign" (formula "27") (term "1"))
      (rule "variableDeclarationFinal" (formula "27") (term "1") (newnames "pubKey"))
      (rule "Class_invariant_axiom_for_java_io_BufferedInputStream" (formula "19"))
      (rule "true_left" (formula "19"))
       (builtin "Use Operation Contract" (formula "26") (newnames "heapBefore_readPublicKey_1,result_45,exc_53,heapAfter_readPublicKey,anon_heap_readPublicKey") (contract "de.polyas.core3.open.cred.PGP[de.polyas.core3.open.cred.PGP::readPublicKey(java.io.InputStream)].JML normal_behavior operation contract.0"))
      (branch "Post (readPublicKey)"
          (builtin "One Step Simplification" (formula "28"))
          (builtin "One Step Simplification" (formula "20"))
         (rule "andLeft" (formula "20"))
         (rule "selectCreatedOfAnonAsFormulaEQ" (formula "21") (term "1,1,0") (ifseqformula "20"))
         (rule "selectCreatedOfAnonAsFormulaEQ" (formula "21") (term "0,1,1,0") (ifseqformula "15"))
         (rule "selectCreatedOfAnonAsFormulaEQ" (formula "21") (term "0,0,1,1,0") (ifseqformula "10"))
         (rule "andLeft" (formula "21"))
         (rule "andLeft" (formula "22"))
         (rule "andLeft" (formula "21"))
         (rule "notLeft" (formula "22"))
         (rule "replace_known_right" (formula "21") (term "0") (ifseqformula "23"))
          (builtin "One Step Simplification" (formula "21"))
         (rule "assignment" (formula "31") (term "1"))
          (builtin "One Step Simplification" (formula "31"))
         (rule "commute_or_2" (formula "21") (term "0"))
         (rule "Class_axiom_0_in_de_polyas_core3_open_cred_CredTool" (inst "seq=seq") (inst "i=i") (inst "str=str") (inst "seq_0=seq_0") (inst "i_0=i_0") (inst "sv_heap=anon_heap_FileInputStream<<anonHeapFunction>>"))
         (rule "andLeft" (formula "1"))
         (rule "castedGetAny" (formula "1") (term "0,0,0,0,0"))
         (rule "castedGetAny" (formula "1") (term "0,0,1,0,0"))
         (rule "castedGetAny" (formula "1") (term "0,1,1,0,0,0"))
         (rule "commute_and" (formula "1") (term "0,0,0,0"))
         (rule "commute_and" (formula "1") (term "0,1,0,0,0"))
         (rule "Class_axiom_0_in_de_polyas_core3_open_cred_CredTool" (inst "seq=seq") (inst "i=i") (inst "str=str") (inst "seq_0=seq_0") (inst "i_0=i_0") (inst "sv_heap=anon(heap,
     empty,
     anon_heap_FileInputStream<<anonHeapFunction>>)"))
          (builtin "One Step Simplification" (formula "1"))
         (rule "andLeft" (formula "1"))
         (rule "castedGetAny" (formula "1") (term "0,0,0,0,0"))
         (rule "castedGetAny" (formula "2") (term "0,1,1,0,0,0"))
         (rule "castedGetAny" (formula "1") (term "0,0,1,0,0"))
         (rule "shift_paren_or" (formula "1") (term "0,0,0,0,0"))
         (rule "commute_and" (formula "1") (term "0,0,0,0"))
         (rule "commute_and" (formula "1") (term "0,1,0,0,0"))
         (rule "Class_axiom_0_in_de_polyas_core3_open_cred_CredTool" (inst "seq=seq") (inst "i=i") (inst "str=str") (inst "seq_0=seq_0") (inst "i_0=i_0") (inst "sv_heap=heapAfter_FileInputStream"))
         (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "1,0,0,0,0,0,1") (ifseqformula "13"))
         (rule "andLeft" (formula "1"))
         (rule "castedGetAny" (formula "1") (term "0,0,1,0,0"))
         (rule "castedGetAny" (formula "1") (term "0,0,0,0,0"))
         (rule "castedGetAny" (formula "1") (term "0,1,1,0,0,0"))
         (rule "shift_paren_or" (formula "1") (term "0,0,0,0,0"))
         (rule "commute_and" (formula "1") (term "0,0,0,0"))
         (rule "commute_and" (formula "1") (term "0,1,0,0,0"))
          (builtin "Use Operation Contract" (formula "33") (newnames "heapBefore_close,exc_54,heapAfter_close,anon_heap_close") (contract "java.io.BufferedInputStream[java.io.BufferedInputStream::close()].JML normal_behavior operation contract.0"))
         (branch "Post (close)"
             (builtin "One Step Simplification" (formula "26"))
             (builtin "One Step Simplification" (formula "35"))
            (rule "andLeft" (formula "26"))
            (rule "andLeft" (formula "27"))
            (rule "andLeft" (formula "28"))
            (rule "Class_invariant_axiom_for_java_io_BufferedInputStream" (formula "28"))
            (rule "true_left" (formula "28"))
            (rule "methodCallReturn" (formula "36") (term "1"))
            (rule "assignment" (formula "36") (term "1"))
             (builtin "One Step Simplification" (formula "36"))
            (rule "methodCallEmpty" (formula "36") (term "1"))
            (rule "blockEmpty" (formula "36") (term "1"))
            (rule "assignment" (formula "36") (term "1"))
             (builtin "One Step Simplification" (formula "36"))
            (rule "tryReturn" (formula "36") (term "1"))
            (rule "methodCallReturn" (formula "36") (term "1"))
            (rule "assignment" (formula "36") (term "1"))
             (builtin "One Step Simplification" (formula "36"))
            (rule "methodCallEmpty" (formula "36") (term "1"))
            (rule "tryEmpty" (formula "36") (term "1"))
            (rule "emptyModality" (formula "36") (term "1"))
            (rule "andRight" (formula "36"))
            (branch
               (rule "andRight" (formula "36"))
               (branch
                   (builtin "One Step Simplification" (formula "36") (ifInst ""  (formula "28")))
                  (rule "closeTrue" (formula "36"))
               )
               (branch
                   (builtin "One Step Simplification" (formula "36"))
                  (rule "closeTrue" (formula "36"))
               )
            )
            (branch
                (builtin "One Step Simplification" (formula "36"))
               (rule "allRight" (formula "36") (inst "sk=f_0"))
               (rule "allRight" (formula "36") (inst "sk=o_0"))
               (rule "orRight" (formula "36"))
               (rule "eqSymm" (formula "37"))
               (rule "pullOutSelect" (formula "37") (term "0") (inst "selectSK=f_0_0"))
               (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "27"))
                (builtin "One Step Simplification" (formula "1"))
               (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,1,0,0") (ifseqformula "23"))
               (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,0,1,0,0") (ifseqformula "18"))
               (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,0,0,1,0,0") (ifseqformula "13"))
               (rule "eqSymm" (formula "38"))
               (rule "pullOutSelect" (formula "1") (term "2,0") (inst "selectSK=f_0_1"))
               (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "24"))
                (builtin "One Step Simplification" (formula "1"))
               (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,1,0,0") (ifseqformula "19"))
               (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,0,1,0,0") (ifseqformula "14"))
               (rule "pullOutSelect" (formula "1") (term "2,0") (inst "selectSK=f_0_2"))
               (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "20"))
                (builtin "One Step Simplification" (formula "1"))
               (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,1,0,0") (ifseqformula "15"))
               (rule "pullOutSelect" (formula "1") (term "2,0") (inst "selectSK=f_0_3"))
               (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "16"))
                (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "40")))
               (rule "applyEqReverse" (formula "2") (term "2,0") (ifseqformula "1"))
               (rule "hideAuxiliaryEq" (formula "1"))
               (rule "nnf_imp2or" (formula "7") (term "0,0"))
                (builtin "One Step Simplification" (formula "7"))
               (rule "nnf_imp2or" (formula "4") (term "0,0,0"))
               (rule "nnf_imp2or" (formula "8") (term "0,0,0"))
               (rule "nnf_imp2or" (formula "5") (term "0,0,0"))
               (rule "nnf_imp2or" (formula "6") (term "0,0,0"))
               (rule "nnf_imp2or" (formula "4") (term "1,0,0,0"))
               (rule "nnf_notAnd" (formula "4") (term "0,0,0,0"))
                (builtin "One Step Simplification" (formula "4"))
               (rule "nnf_imp2or" (formula "8") (term "1,0,0,0"))
               (rule "nnf_notAnd" (formula "8") (term "0,0,0,0"))
                (builtin "One Step Simplification" (formula "8"))
               (rule "nnf_imp2or" (formula "5") (term "1,0,0,0"))
               (rule "nnf_notAnd" (formula "5") (term "0,0,0,0"))
                (builtin "One Step Simplification" (formula "5"))
               (rule "nnf_notAnd" (formula "6") (term "0,0,0,0"))
                (builtin "One Step Simplification" (formula "6"))
               (rule "nnf_imp2or" (formula "6") (term "1,0,0,0"))
               (rule "nnf_notAnd" (formula "4") (term "0,1,0,0,0"))
                (builtin "One Step Simplification" (formula "4"))
               (rule "nnf_notOr" (formula "8") (term "1,0,0,0,0"))
               (rule "nnf_notAnd" (formula "8") (term "0,1,0,0,0"))
                (builtin "One Step Simplification" (formula "8"))
               (rule "nnf_notOr" (formula "5") (term "1,0,0,0,0"))
               (rule "nnf_notAnd" (formula "5") (term "0,1,0,0,0"))
                (builtin "One Step Simplification" (formula "5"))
               (rule "nnf_notOr" (formula "6") (term "1,0,0,0,0"))
               (rule "nnf_notAnd" (formula "6") (term "0,1,0,0,0"))
                (builtin "One Step Simplification" (formula "6"))
               (rule "nnf_notOr" (formula "4") (term "1,0,0,0,0"))
               (rule "nnf_notOr" (formula "4") (term "0,1,0,0,0,0"))
               (rule "commute_or_2" (formula "2") (term "0,1,0,0"))
               (rule "commute_or_2" (formula "8") (term "0,0,0"))
               (rule "commute_or_2" (formula "3") (term "0,0,1,0,0"))
               (rule "commute_or_2" (formula "5") (term "0,0,0"))
               (rule "commute_or_2" (formula "6") (term "0,0,0"))
               (rule "commute_or_2" (formula "4") (term "0,0,0"))
               (rule "shift_paren_or" (formula "8") (term "0,0,0,0"))
               (rule "shift_paren_or" (formula "5") (term "0,0,0,0"))
               (rule "commute_or_2" (formula "6") (term "1,0,0,0,0"))
               (rule "shift_paren_or" (formula "4") (term "0,0,0,0"))
               (rule "shift_paren_or" (formula "6") (term "0,0,0,0"))
               (rule "commute_and" (formula "8") (term "1,0,0,0"))
               (rule "commute_and" (formula "5") (term "1,0,0,0"))
               (rule "commute_and" (formula "6") (term "1,0,0,0"))
               (rule "shift_paren_or" (formula "8") (term "0,0,0,0,0"))
                (builtin "One Step Simplification" (formula "8"))
               (rule "commute_or_2" (formula "8") (term "0,0,0,0"))
               (rule "cnf_rightDist" (formula "8") (term "0,0,0"))
               (rule "distr_forallAnd" (formula "8") (term "0,0"))
               (rule "distr_forallAnd" (formula "8") (term "0"))
               (rule "distr_forallAnd" (formula "8"))
               (rule "andLeft" (formula "8"))
               (rule "commute_or_2" (formula "8") (term "0,0,0"))
                (builtin "One Step Simplification" (formula "8"))
               (rule "eqSymm" (formula "8") (term "1,0,0,0,0"))
               (rule "castedGetAny" (formula "8") (term "0,0,0,0,0,0"))
               (rule "castedGetAny" (formula "8") (term "1,0,0,1,0,0,0"))
               (rule "castedGetAny" (formula "8") (term "0,1,0,0,0,0"))
                (builtin "One Step Simplification" (formula "8"))
               (rule "true_left" (formula "8"))
               (rule "shift_paren_or" (formula "8") (term "0,0,0"))
                (builtin "One Step Simplification" (formula "8"))
               (rule "eqSymm" (formula "8") (term "1,1,0,0,0"))
               (rule "castedGetAny" (formula "8") (term "0,0,0,0,0,0"))
               (rule "castedGetAny" (formula "8") (term "0,0,1,0,0,0"))
               (rule "castedGetAny" (formula "8") (term "0,1,1,0,0,0"))
                (builtin "One Step Simplification" (formula "8"))
               (rule "true_left" (formula "8"))
               (rule "shift_paren_or" (formula "5") (term "0,0,0,0,0"))
                (builtin "One Step Simplification" (formula "5"))
               (rule "commute_or_2" (formula "5") (term "0,0,0,0"))
               (rule "shift_paren_or" (formula "4") (term "0,0,0,0,0"))
                (builtin "One Step Simplification" (formula "4"))
               (rule "commute_or_2" (formula "4") (term "0,0,0,0"))
               (rule "shift_paren_or" (formula "6") (term "0,0,0,0,0"))
                (builtin "One Step Simplification" (formula "6"))
               (rule "cnf_rightDist" (formula "5") (term "0,0,0"))
               (rule "distr_forallAnd" (formula "5") (term "0,0"))
               (rule "distr_forallAnd" (formula "5") (term "0"))
               (rule "distr_forallAnd" (formula "5"))
               (rule "andLeft" (formula "5"))
               (rule "commute_or_2" (formula "5") (term "0,0,0"))
                (builtin "One Step Simplification" (formula "5"))
               (rule "eqSymm" (formula "5") (term "1,0,0,0,0"))
               (rule "castedGetAny" (formula "5") (term "1,0,0,1,0,0,0"))
               (rule "castedGetAny" (formula "5") (term "0,0,0,0,0,0"))
               (rule "castedGetAny" (formula "5") (term "0,1,0,0,0,0"))
                (builtin "One Step Simplification" (formula "5"))
               (rule "true_left" (formula "5"))
               (rule "shift_paren_or" (formula "5") (term "0,0,0"))
                (builtin "One Step Simplification" (formula "5"))
               (rule "eqSymm" (formula "5") (term "1,1,0,0,0"))
               (rule "castedGetAny" (formula "5") (term "0,0,0,0,0,0"))
               (rule "castedGetAny" (formula "5") (term "0,0,1,0,0,0"))
               (rule "castedGetAny" (formula "5") (term "0,1,1,0,0,0"))
                (builtin "One Step Simplification" (formula "5"))
               (rule "true_left" (formula "5"))
               (rule "cnf_rightDist" (formula "4") (term "0,0,0"))
               (rule "distr_forallAnd" (formula "4") (term "0,0"))
               (rule "distr_forallAnd" (formula "4") (term "0"))
               (rule "distr_forallAnd" (formula "4"))
               (rule "andLeft" (formula "4"))
               (rule "shift_paren_or" (formula "5") (term "0,0,0"))
                (builtin "One Step Simplification" (formula "5"))
               (rule "eqSymm" (formula "5") (term "1,1,0,0,0"))
               (rule "castedGetAny" (formula "5") (term "0,0,1,0,0,0"))
               (rule "castedGetAny" (formula "5") (term "1,0,0,0,0,0,0"))
               (rule "castedGetAny" (formula "5") (term "0,1,1,0,0,0"))
                (builtin "One Step Simplification" (formula "5"))
               (rule "true_left" (formula "5"))
               (rule "cnf_rightDist" (formula "5") (term "0,0,0"))
               (rule "distr_forallAnd" (formula "5") (term "0,0"))
               (rule "distr_forallAnd" (formula "5") (term "0"))
               (rule "distr_forallAnd" (formula "5"))
               (rule "andLeft" (formula "5"))
               (rule "commute_or_2" (formula "5") (term "0,0,0"))
                (builtin "One Step Simplification" (formula "5"))
               (rule "eqSymm" (formula "5") (term "1,0,0,0,0"))
               (rule "castedGetAny" (formula "5") (term "0,0,0,0,0,0"))
               (rule "castedGetAny" (formula "5") (term "1,0,0,1,0,0,0"))
               (rule "castedGetAny" (formula "5") (term "0,1,0,0,0,0"))
                (builtin "One Step Simplification" (formula "5"))
               (rule "true_left" (formula "5"))
               (rule "shift_paren_or" (formula "5") (term "0,0,0"))
                (builtin "One Step Simplification" (formula "5"))
               (rule "eqSymm" (formula "5") (term "1,1,0,0,0"))
               (rule "castedGetAny" (formula "5") (term "0,0,1,0,0,0"))
               (rule "castedGetAny" (formula "5") (term "0,0,0,0,0,0"))
               (rule "castedGetAny" (formula "5") (term "0,1,1,0,0,0"))
                (builtin "One Step Simplification" (formula "5"))
               (rule "true_left" (formula "5"))
               (rule "cnf_rightDist" (formula "4") (term "0,0,0"))
               (rule "distr_forallAnd" (formula "4") (term "0,0"))
                (builtin "One Step Simplification" (formula "4"))
               (rule "shift_paren_or" (formula "4") (term "0,0,0"))
                (builtin "One Step Simplification" (formula "4"))
               (rule "eqSymm" (formula "4") (term "1,1,0,0,0"))
               (rule "castedGetAny" (formula "4") (term "0,0,1,0,0,0"))
               (rule "castedGetAny" (formula "4") (term "1,0,0,0,0,0,0"))
               (rule "castedGetAny" (formula "4") (term "0,1,1,0,0,0"))
                (builtin "One Step Simplification" (formula "4"))
               (rule "true_left" (formula "4"))
               (rule "ifthenelse_split" (formula "1") (term "0"))
               (branch " ¬o_0 = null ∧ ¬( o_0.<created> = TRUE ∨ o_0.<created>@anon_heap_FileInputStream«anonHeapFunction» = TRUE) TRUE"
                  (rule "andLeft" (formula "1"))
                  (rule "notLeft" (formula "2"))
                  (rule "notLeft" (formula "1"))
                  (rule "orRight" (formula "28"))
                  (rule "applyEqReverse" (formula "2") (term "2,0") (ifseqformula "1"))
                  (rule "hideAuxiliaryEq" (formula "1"))
                  (rule "replace_known_right" (formula "1") (term "0,0,0,1,0,0") (ifseqformula "27"))
                   (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "26")) (ifInst ""  (formula "28")))
                  (rule "replace_known_right" (formula "2") (term "0,0,0,0") (ifseqformula "26"))
                   (builtin "One Step Simplification" (formula "2") (ifInst ""  (formula "27")) (ifInst ""  (formula "28")))
                  (rule "replace_known_right" (formula "37") (term "0,1") (ifseqformula "27"))
                   (builtin "One Step Simplification" (formula "37") (ifInst ""  (formula "26")))
                  (rule "closeTrue" (formula "37"))
               )
               (branch " ¬o_0 = null ∧ ¬( o_0.<created> = TRUE ∨ o_0.<created>@anon_heap_FileInputStream«anonHeapFunction» = TRUE) FALSE"
                  (rule "applyEqReverse" (formula "2") (term "2,0") (ifseqformula "1"))
                  (rule "hideAuxiliaryEq" (formula "1"))
                  (rule "Class_axiom_0_in_de_polyas_core3_open_cred_CredTool" (inst "seq=seq") (inst "i=i") (inst "str=str") (inst "seq_0=seq_0") (inst "i_0=i_0") (inst "sv_heap=anon_heap_BufferedInputStream<<anonHeapFunction>>"))
                  (rule "andLeft" (formula "1"))
                  (rule "castedGetAny" (formula "1") (term "0,0,0,0,0"))
                  (rule "castedGetAny" (formula "2") (term "0,1,1,0,0,0"))
                  (rule "castedGetAny" (formula "1") (term "0,0,1,0,0"))
                  (rule "nnf_imp2or" (formula "1") (term "0,0"))
                   (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "5")))
                  (rule "true_left" (formula "1"))
                  (rule "nnf_imp2or" (formula "1") (term "0,0,0"))
                  (rule "nnf_notAnd" (formula "1") (term "0,0,0,0"))
                   (builtin "One Step Simplification" (formula "1"))
                  (rule "nnf_imp2or" (formula "1") (term "1,0,0,0"))
                  (rule "nnf_notOr" (formula "1") (term "0,0,0,0,0"))
                  (rule "nnf_notAnd" (formula "1") (term "0,1,0,0,0"))
                   (builtin "One Step Simplification" (formula "1"))
                  (rule "commute_or" (formula "1") (term "0,0,0,0"))
                  (rule "commute_or_2" (formula "1") (term "0,0,0"))
                  (rule "shift_paren_or" (formula "1") (term "0,0,0,0"))
                  (rule "commute_and" (formula "1") (term "1,0,0,0"))
                  (rule "shift_paren_or" (formula "1") (term "0,0,0,0,0"))
                  (rule "commute_or_2" (formula "1") (term "0,0,0,0,0"))
                   (builtin "One Step Simplification" (formula "1"))
                  (rule "commute_or_2" (formula "1") (term "0,0,0,0"))
                  (rule "cnf_rightDist" (formula "1") (term "0,0,0"))
                  (rule "distr_forallAnd" (formula "1") (term "0,0"))
                  (rule "distr_forallAnd" (formula "1") (term "0"))
                  (rule "distr_forallAnd" (formula "1"))
                  (rule "andLeft" (formula "1"))
                  (rule "commute_or_2" (formula "1") (term "0,0,0"))
                   (builtin "One Step Simplification" (formula "1"))
                  (rule "eqSymm" (formula "1") (term "1,0,0,0,0"))
                  (rule "castedGetAny" (formula "1") (term "1,0,0,1,0,0,0"))
                  (rule "castedGetAny" (formula "1") (term "0,0,0,0,0,0"))
                  (rule "castedGetAny" (formula "1") (term "0,1,0,0,0,0"))
                   (builtin "One Step Simplification" (formula "1"))
                  (rule "true_left" (formula "1"))
                  (rule "shift_paren_or" (formula "1") (term "0,0,0"))
                   (builtin "One Step Simplification" (formula "1"))
                  (rule "eqSymm" (formula "1") (term "1,1,0,0,0"))
                  (rule "castedGetAny" (formula "1") (term "0,0,1,0,0,0"))
                  (rule "castedGetAny" (formula "1") (term "0,0,0,0,0,0"))
                  (rule "castedGetAny" (formula "1") (term "0,1,1,0,0,0"))
                   (builtin "One Step Simplification" (formula "1"))
                  (rule "true_left" (formula "1"))
                  (rule "Class_axiom_0_in_de_polyas_core3_open_cred_CredTool" (inst "seq=seq") (inst "i=i") (inst "str=str") (inst "seq_0=seq_0") (inst "i_0=i_0") (inst "sv_heap=anon_heap_readPublicKey<<anonHeapFunction>>"))
                  (rule "andLeft" (formula "1"))
                  (rule "castedGetAny" (formula "1") (term "0,0,0,0,0"))
                  (rule "castedGetAny" (formula "2") (term "0,1,1,0,0,0"))
                  (rule "castedGetAny" (formula "1") (term "0,0,1,0,0"))
                  (rule "nnf_imp2or" (formula "1") (term "0,0"))
                   (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "5")))
                  (rule "true_left" (formula "1"))
                  (rule "nnf_imp2or" (formula "1") (term "0,0,0"))
                  (rule "nnf_notAnd" (formula "1") (term "0,0,0,0"))
                   (builtin "One Step Simplification" (formula "1"))
                  (rule "nnf_imp2or" (formula "1") (term "1,0,0,0"))
                  (rule "nnf_notOr" (formula "1") (term "0,0,0,0,0"))
                  (rule "nnf_notAnd" (formula "1") (term "0,1,0,0,0"))
                   (builtin "One Step Simplification" (formula "1"))
                  (rule "commute_or" (formula "1") (term "0,0,0,0"))
                  (rule "commute_or_2" (formula "1") (term "0,0,0"))
                  (rule "Class_axiom_0_in_de_polyas_core3_open_cred_CredTool" (inst "seq=seq") (inst "i=i") (inst "str=str") (inst "seq_0=seq_0") (inst "i_0=i_0") (inst "sv_heap=anon_heap_close<<anonHeapFunction>>"))
                  (rule "andLeft" (formula "1"))
                  (rule "castedGetAny" (formula "1") (term "0,0,1,0,0"))
                  (rule "castedGetAny" (formula "1") (term "0,0,0,0,0"))
                  (rule "castedGetAny" (formula "2") (term "0,1,1,0,0,0"))
                  (rule "nnf_imp2or" (formula "1") (term "0,0"))
                   (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "6")))
                  (rule "true_left" (formula "1"))
                  (rule "nnf_imp2or" (formula "1") (term "0,0,0"))
                  (rule "nnf_notAnd" (formula "1") (term "0,0,0,0"))
                   (builtin "One Step Simplification" (formula "1"))
                  (rule "nnf_imp2or" (formula "1") (term "1,0,0,0"))
                  (rule "nnf_notOr" (formula "1") (term "0,0,0,0,0"))
                  (rule "nnf_notAnd" (formula "1") (term "0,1,0,0,0"))
                   (builtin "One Step Simplification" (formula "1"))
                  (rule "Class_axiom_0_in_de_polyas_core3_open_cred_CredTool" (inst "seq=seq") (inst "i=i") (inst "str=str") (inst "seq_0=seq_0") (inst "i_0=i_0") (inst "sv_heap=anon(heapAfter_FileInputStream,
     empty,
     anon_heap_BufferedInputStream<<anonHeapFunction>>)"))
                   (builtin "One Step Simplification" (formula "1"))
                  (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,1,0,0,0,0,0,1") (ifseqformula "13"))
                  (rule "andLeft" (formula "1"))
                  (rule "castedGetAny" (formula "1") (term "0,0,1,0,0"))
                  (rule "castedGetAny" (formula "2") (term "0,1,1,0,0,0"))
                  (rule "castedGetAny" (formula "1") (term "0,0,0,0,0"))
                  (rule "nnf_imp2or" (formula "1") (term "0,0"))
                   (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "7")))
                  (rule "true_left" (formula "1"))
                  (rule "nnf_imp2or" (formula "1") (term "0,0,0"))
                  (rule "nnf_imp2or" (formula "1") (term "1,0,0,0"))
                  (rule "nnf_notAnd" (formula "1") (term "0,0,0,0"))
                   (builtin "One Step Simplification" (formula "1"))
                  (rule "nnf_notOr" (formula "1") (term "0,0,0,0,0"))
                  (rule "nnf_notAnd" (formula "1") (term "0,1,0,0,0"))
                   (builtin "One Step Simplification" (formula "1"))
                  (rule "nnf_notOr" (formula "1") (term "1,0,0,0,0,0"))
                  (rule "nnf_notOr" (formula "1") (term "0,1,0,0,0,0,0"))
                  (rule "Class_axiom_0_in_de_polyas_core3_open_cred_CredTool" (inst "seq=seq") (inst "i=i") (inst "str=str") (inst "seq_0=seq_0") (inst "i_0=i_0") (inst "sv_heap=heapAfter_BufferedInputStream"))
                  (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "1,0,0,0,0,0,1") (ifseqformula "19"))
                  (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,1,0,0,0,0,0,1") (ifseqformula "14"))
                  (rule "andLeft" (formula "1"))
                  (rule "castedGetAny" (formula "1") (term "0,0,1,0,0"))
                  (rule "castedGetAny" (formula "2") (term "0,1,1,0,0,0"))
                  (rule "castedGetAny" (formula "1") (term "0,0,0,0,0"))
                  (rule "nnf_imp2or" (formula "1") (term "0,0"))
                   (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "8")))
                  (rule "true_left" (formula "1"))
                  (rule "nnf_imp2or" (formula "1") (term "0,0,0"))
                  (rule "nnf_imp2or" (formula "1") (term "1,0,0,0"))
                  (rule "nnf_notAnd" (formula "1") (term "0,0,0,0"))
                   (builtin "One Step Simplification" (formula "1"))
                  (rule "nnf_notAnd" (formula "1") (term "0,1,0,0,0"))
                   (builtin "One Step Simplification" (formula "1"))
                  (rule "nnf_notOr" (formula "1") (term "0,0,0,0,0"))
                  (rule "nnf_notOr" (formula "1") (term "1,0,0,0,0,0"))
                  (rule "nnf_notOr" (formula "1") (term "0,1,0,0,0,0,0"))
                  (rule "Class_axiom_0_in_de_polyas_core3_open_cred_CredTool" (inst "seq=seq") (inst "i=i") (inst "str=str") (inst "seq_0=seq_0") (inst "i_0=i_0") (inst "sv_heap=anon(heapAfter_BufferedInputStream,
     empty,
     anon_heap_readPublicKey<<anonHeapFunction>>)"))
                   (builtin "One Step Simplification" (formula "1"))
                  (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,1,0,0,0,0,0,1") (ifseqformula "19"))
                  (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,0,1,0,0,0,0,0,1") (ifseqformula "14"))
                  (rule "andLeft" (formula "1"))
                  (rule "castedGetAny" (formula "2") (term "0,1,1,0,0,0"))
                  (rule "castedGetAny" (formula "1") (term "0,0,1,0,0"))
                  (rule "castedGetAny" (formula "1") (term "0,0,0,0,0"))
                  (rule "nnf_imp2or" (formula "1") (term "0,0"))
                   (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "8")))
                  (rule "true_left" (formula "1"))
                  (rule "nnf_imp2or" (formula "1") (term "0,0,0"))
                  (rule "nnf_imp2or" (formula "1") (term "1,0,0,0"))
                  (rule "nnf_notAnd" (formula "1") (term "0,0,0,0"))
                   (builtin "One Step Simplification" (formula "1"))
                  (rule "nnf_notAnd" (formula "1") (term "0,1,0,0,0"))
                   (builtin "One Step Simplification" (formula "1"))
                  (rule "nnf_notOr" (formula "1") (term "0,0,0,0,0"))
                  (rule "nnf_notOr" (formula "1") (term "1,0,0,0,0,0"))
                  (rule "nnf_notOr" (formula "1") (term "0,1,0,0,0,0,0"))
                  (rule "nnf_notOr" (formula "1") (term "0,0,1,0,0,0,0,0"))
                  (rule "Class_axiom_0_in_de_polyas_core3_open_cred_CredTool" (inst "seq=seq") (inst "i=i") (inst "str=str") (inst "seq_0=seq_0") (inst "i_0=i_0") (inst "sv_heap=heapAfter_readPublicKey"))
                  (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "1,0,0,0,0,0,1") (ifseqformula "25"))
                  (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,1,0,0,0,0,0,1") (ifseqformula "20"))
                  (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,0,1,0,0,0,0,0,1") (ifseqformula "15"))
                  (rule "andLeft" (formula "1"))
                  (rule "castedGetAny" (formula "1") (term "0,0,1,0,0"))
                  (rule "castedGetAny" (formula "1") (term "0,0,0,0,0"))
                  (rule "castedGetAny" (formula "2") (term "0,1,1,0,0,0"))
                  (rule "nnf_imp2or" (formula "1") (term "0,0"))
                   (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "9")))
                  (rule "true_left" (formula "1"))
                  (rule "nnf_imp2or" (formula "1") (term "0,0,0"))
                  (rule "nnf_imp2or" (formula "1") (term "1,0,0,0"))
                  (rule "nnf_notAnd" (formula "1") (term "0,0,0,0"))
                   (builtin "One Step Simplification" (formula "1"))
                  (rule "nnf_notOr" (formula "1") (term "0,0,0,0,0"))
                  (rule "nnf_notAnd" (formula "1") (term "0,1,0,0,0"))
                   (builtin "One Step Simplification" (formula "1"))
                  (rule "nnf_notOr" (formula "1") (term "1,0,0,0,0,0"))
                  (rule "nnf_notOr" (formula "1") (term "0,1,0,0,0,0,0"))
                  (rule "nnf_notOr" (formula "1") (term "0,0,1,0,0,0,0,0"))
                  (rule "Class_axiom_0_in_de_polyas_core3_open_cred_CredTool" (inst "seq=seq") (inst "i=i") (inst "str=str") (inst "seq_0=seq_0") (inst "i_0=i_0") (inst "sv_heap=anon(heapAfter_readPublicKey,
     empty,
     anon_heap_close<<anonHeapFunction>>)"))
                   (builtin "One Step Simplification" (formula "1"))
                  (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,1,0,0,0,0,0,1") (ifseqformula "25"))
                  (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,0,1,0,0,0,0,0,1") (ifseqformula "20"))
                  (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,0,0,1,0,0,0,0,0,1") (ifseqformula "15"))
                  (rule "andLeft" (formula "1"))
                  (rule "castedGetAny" (formula "1") (term "0,0,0,0,0"))
                  (rule "castedGetAny" (formula "1") (term "0,0,1,0,0"))
                  (rule "castedGetAny" (formula "2") (term "0,1,1,0,0,0"))
                  (rule "nnf_imp2or" (formula "1") (term "0,0"))
                   (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "9")))
                  (rule "true_left" (formula "1"))
                  (rule "nnf_imp2or" (formula "1") (term "0,0,0"))
                  (rule "nnf_notAnd" (formula "1") (term "0,0,0,0"))
                   (builtin "One Step Simplification" (formula "1"))
                  (rule "nnf_imp2or" (formula "1") (term "1,0,0,0"))
                  (rule "nnf_notOr" (formula "1") (term "0,0,0,0,0"))
                  (rule "nnf_notAnd" (formula "1") (term "0,1,0,0,0"))
                   (builtin "One Step Simplification" (formula "1"))
                  (rule "nnf_notOr" (formula "1") (term "1,0,0,0,0,0"))
                  (rule "nnf_notOr" (formula "1") (term "0,1,0,0,0,0,0"))
                  (rule "nnf_notOr" (formula "1") (term "0,0,1,0,0,0,0,0"))
                  (rule "nnf_notOr" (formula "1") (term "0,0,0,1,0,0,0,0,0"))
                  (rule "Class_axiom_0_in_de_polyas_core3_open_cred_CredTool" (inst "seq=seq") (inst "i=i") (inst "str=str") (inst "seq_0=seq_0") (inst "i_0=i_0") (inst "sv_heap=heapAfter_close"))
                  (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "1,0,0,0,0,0,1") (ifseqformula "30"))
                  (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,1,0,0,0,0,0,1") (ifseqformula "26"))
                  (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,0,1,0,0,0,0,0,1") (ifseqformula "21"))
                  (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,0,0,1,0,0,0,0,0,1") (ifseqformula "16"))
                  (rule "andLeft" (formula "1"))
                  (rule "castedGetAny" (formula "1") (term "0,0,1,0,0"))
                  (rule "castedGetAny" (formula "1") (term "0,0,0,0,0"))
                  (rule "castedGetAny" (formula "2") (term "0,1,1,0,0,0"))
                  (rule "nnf_imp2or" (formula "1") (term "0,0"))
                   (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "10")))
                  (rule "true_left" (formula "1"))
                  (rule "nnf_imp2or" (formula "1") (term "0,0,0"))
                  (rule "nnf_notAnd" (formula "1") (term "0,0,0,0"))
                   (builtin "One Step Simplification" (formula "1"))
                  (rule "nnf_imp2or" (formula "1") (term "1,0,0,0"))
                  (rule "nnf_notOr" (formula "1") (term "0,0,0,0,0"))
                  (rule "nnf_notAnd" (formula "1") (term "0,1,0,0,0"))
                   (builtin "One Step Simplification" (formula "1"))
                  (rule "nnf_notOr" (formula "1") (term "1,0,0,0,0,0"))
                  (rule "nnf_notOr" (formula "1") (term "0,1,0,0,0,0,0"))
                  (rule "nnf_notOr" (formula "1") (term "0,0,1,0,0,0,0,0"))
                  (rule "nnf_notOr" (formula "1") (term "0,0,0,1,0,0,0,0,0"))
                  (rule "commute_or" (formula "4") (term "0,0,0,0"))
                  (rule "shift_paren_or" (formula "5") (term "0,0,0,0"))
                  (rule "commute_or" (formula "3") (term "0,0,0,0"))
                  (rule "commute_or" (formula "4") (term "0,1,0,0,0"))
                  (rule "cut_direct" (formula "40") (term "0,0"))
                  (branch "CUT: o_0 = null TRUE"
                      (builtin "One Step Simplification" (formula "41"))
                     (rule "false_right" (formula "41"))
                     (rule "replace_known_left" (formula "8") (term "0,0,0,0") (ifseqformula "1"))
                      (builtin "One Step Simplification" (formula "8"))
                     (rule "applyEqReverse" (formula "41") (term "1") (ifseqformula "8"))
                     (rule "hideAuxiliaryEq" (formula "8"))
                     (rule "replace_known_left" (formula "7") (term "0,0,0,0") (ifseqformula "1"))
                      (builtin "One Step Simplification" (formula "7") (ifInst ""  (formula "40")))
                     (rule "closeFalse" (formula "7"))
                  )
                  (branch "CUT: o_0 = null FALSE"
                      (builtin "One Step Simplification" (formula "41"))
                     (rule "notRight" (formula "41"))
                     (rule "replace_known_right" (formula "7") (term "0,0,0,0") (ifseqformula "41"))
                      (builtin "One Step Simplification" (formula "7") (ifInst ""  (formula "1")))
                     (rule "applyEqReverse" (formula "8") (term "2,0") (ifseqformula "7"))
                     (rule "hideAuxiliaryEq" (formula "7"))
                     (rule "replace_known_right" (formula "7") (term "0,0,0,0") (ifseqformula "40"))
                      (builtin "One Step Simplification" (formula "7") (ifInst ""  (formula "1")) (ifInst ""  (formula "41")))
                     (rule "closeFalse" (formula "7"))
                  )
               )
            )
         )
         (branch "Exceptional Post (close)"
             (builtin "One Step Simplification" (formula "26"))
             (builtin "One Step Simplification" (formula "35"))
            (rule "andLeft" (formula "26"))
            (rule "selectCreatedOfAnonAsFormulaEQ" (formula "27") (term "1,0") (ifseqformula "26"))
            (rule "selectCreatedOfAnonAsFormulaEQ" (formula "27") (term "0,1,0") (ifseqformula "22"))
            (rule "selectCreatedOfAnonAsFormulaEQ" (formula "27") (term "0,0,1,0") (ifseqformula "17"))
            (rule "selectCreatedOfAnonAsFormulaEQ" (formula "27") (term "0,0,0,1,0") (ifseqformula "12"))
            (rule "andLeft" (formula "27"))
            (rule "andLeft" (formula "27"))
            (rule "andLeft" (formula "29"))
            (rule "notLeft" (formula "27"))
            (rule "close" (formula "30") (ifseqformula "29"))
         )
         (branch "Pre (close)"
             (builtin "One Step Simplification" (formula "33"))
            (rule "wellFormedAnonEQ" (formula "33") (term "1") (ifseqformula "22"))
            (rule "wellFormedAnonEQ" (formula "33") (term "0,1") (ifseqformula "17"))
            (rule "wellFormedAnonEQ" (formula "33") (term "0,0,1") (ifseqformula "12"))
            (rule "replace_known_left" (formula "33") (term "1,0,0,1") (ifseqformula "11"))
             (builtin "One Step Simplification" (formula "33") (ifInst ""  (formula "6")) (ifInst ""  (formula "16")) (ifInst ""  (formula "21")))
            (rule "nnf_imp2or" (formula "4") (term "0,0"))
             (builtin "One Step Simplification" (formula "4"))
            (rule "nnf_imp2or" (formula "3") (term "0,0,0"))
            (rule "nnf_imp2or" (formula "5") (term "0,0,0"))
            (rule "nnf_imp2or" (formula "1") (term "0,0,0"))
            (rule "nnf_imp2or" (formula "2") (term "0,0,0"))
            (rule "nnf_notAnd" (formula "3") (term "0,0,0,0"))
             (builtin "One Step Simplification" (formula "3"))
            (rule "nnf_notAnd" (formula "5") (term "0,0,0,0"))
             (builtin "One Step Simplification" (formula "5"))
            (rule "nnf_imp2or" (formula "1") (term "1,0,0,0"))
            (rule "nnf_notAnd" (formula "1") (term "0,0,0,0"))
             (builtin "One Step Simplification" (formula "1"))
            (rule "nnf_imp2or" (formula "2") (term "1,0,0,0"))
            (rule "nnf_notAnd" (formula "2") (term "0,0,0,0"))
             (builtin "One Step Simplification" (formula "2"))
            (rule "nnf_imp2or" (formula "3") (term "1,0,0,0"))
            (rule "nnf_imp2or" (formula "5") (term "1,0,0,0"))
            (rule "nnf_notOr" (formula "3") (term "1,0,0,0,0"))
            (rule "nnf_notOr" (formula "5") (term "1,0,0,0,0"))
            (rule "nnf_notOr" (formula "1") (term "1,0,0,0,0"))
            (rule "nnf_notAnd" (formula "1") (term "0,1,0,0,0"))
             (builtin "One Step Simplification" (formula "1"))
            (rule "nnf_notAnd" (formula "2") (term "0,1,0,0,0"))
             (builtin "One Step Simplification" (formula "2"))
            (rule "nnf_notAnd" (formula "3") (term "0,1,0,0,0"))
             (builtin "One Step Simplification" (formula "3"))
            (rule "nnf_notAnd" (formula "5") (term "0,1,0,0,0"))
             (builtin "One Step Simplification" (formula "5"))
            (rule "nnf_notOr" (formula "2") (term "1,0,0,0,0"))
            (rule "nnf_notOr" (formula "1") (term "0,1,0,0,0,0"))
            (rule "Class_invariant_axiom_for_java_io_BufferedInputStream" (formula "33"))
            (rule "closeTrue" (formula "33"))
         )
         (branch "Null reference (keyIn = null)"
             (builtin "One Step Simplification" (formula "33") (ifInst ""  (formula "28")))
            (rule "closeTrue" (formula "33"))
         )
      )
      (branch "Exceptional Post (readPublicKey)"
          (builtin "One Step Simplification" (formula "20"))
          (builtin "One Step Simplification" (formula "28"))
         (rule "andLeft" (formula "20"))
         (rule "selectCreatedOfAnonAsFormulaEQ" (formula "21") (term "1,0") (ifseqformula "20"))
         (rule "selectCreatedOfAnonAsFormulaEQ" (formula "21") (term "0,1,0") (ifseqformula "15"))
         (rule "selectCreatedOfAnonAsFormulaEQ" (formula "21") (term "0,0,1,0") (ifseqformula "10"))
         (rule "andLeft" (formula "21"))
         (rule "andLeft" (formula "22"))
         (rule "andLeft" (formula "21"))
         (rule "notLeft" (formula "23"))
         (rule "notLeft" (formula "21"))
         (rule "close" (formula "23") (ifseqformula "22"))
      )
      (branch "Pre (readPublicKey)"
          (builtin "One Step Simplification" (formula "26") (ifInst ""  (formula "21")) (ifInst ""  (formula "21")))
         (rule "wellFormedAnonEQ" (formula "26") (term "0") (ifseqformula "15"))
         (rule "selectCreatedOfAnonAsFormulaEQ" (formula "26") (term "1") (ifseqformula "15"))
         (rule "selectCreatedOfAnonAsFormulaEQ" (formula "26") (term "0,1") (ifseqformula "10"))
         (rule "wellFormedAnonEQ" (formula "26") (term "0,0") (ifseqformula "10"))
         (rule "replace_known_left" (formula "26") (term "1,0") (ifseqformula "14"))
          (builtin "One Step Simplification" (formula "26") (ifInst ""  (formula "4")) (ifInst ""  (formula "9")) (ifInst ""  (formula "19")) (ifInst ""  (formula "20")) (ifInst ""  (formula "17")))
         (rule "closeTrue" (formula "26"))
      )
   )
   (branch "Exceptional Post (BufferedInputStream)"
       (builtin "One Step Simplification" (formula "15"))
       (builtin "One Step Simplification" (formula "20"))
      (rule "selectCreatedOfAnonAsFormulaEQ" (formula "15") (term "0,0,1,0,1,0,1") (ifseqformula "10"))
      (rule "andLeft" (formula "15"))
      (rule "selectCreatedOfAnonAsFormulaEQ" (formula "16") (term "1,0,0") (ifseqformula "15"))
      (rule "selectCreatedOfAnonAsFormulaEQ" (formula "16") (term "0,1,0,0") (ifseqformula "10"))
      (rule "selectCreatedOfAnonAsFormulaEQ" (formula "16") (term "1,1,0,1,0") (ifseqformula "15"))
      (rule "selectCreatedOfAnonAsFormulaEQ" (formula "16") (term "0,1,1,0,1,0") (ifseqformula "10"))
      (rule "andLeft" (formula "16"))
      (rule "andLeft" (formula "16"))
      (rule "andLeft" (formula "18"))
      (rule "andLeft" (formula "17"))
      (rule "andLeft" (formula "16"))
      (rule "andLeft" (formula "18"))
      (rule "notLeft" (formula "16"))
      (rule "close" (formula "22") (ifseqformula "21"))
   )
   (branch "Pre (BufferedInputStream)"
       (builtin "One Step Simplification" (formula "18") (ifInst ""  (formula "15")) (ifInst ""  (formula "15")))
      (rule "wellFormedAnonEQ" (formula "18") (term "0") (ifseqformula "10"))
      (rule "selectCreatedOfAnonAsFormulaEQ" (formula "18") (term "1") (ifseqformula "10"))
      (rule "replace_known_left" (formula "18") (term "0,0") (ifseqformula "4"))
       (builtin "One Step Simplification" (formula "18") (ifInst ""  (formula "9")) (ifInst ""  (formula "14")) (ifInst ""  (formula "12")))
      (rule "closeTrue" (formula "18"))
   )
)
(branch "Exceptional Post (FileInputStream)"
    (builtin "One Step Simplification" (formula "10"))
    (builtin "One Step Simplification" (formula "13"))
   (rule "andLeft" (formula "10"))
   (rule "selectCreatedOfAnonAsFormulaEQ" (formula "11") (term "1,0,0") (ifseqformula "10"))
   (rule "selectCreatedOfAnonAsFormulaEQ" (formula "11") (term "1,1,0,1,0") (ifseqformula "10"))
   (rule "andLeft" (formula "11"))
   (rule "andLeft" (formula "12"))
   (rule "andLeft" (formula "11"))
   (rule "andLeft" (formula "12"))
   (rule "andLeft" (formula "11"))
   (rule "andLeft" (formula "13"))
   (rule "notLeft" (formula "11"))
   (rule "close" (formula "17") (ifseqformula "16"))
)
(branch "Pre (FileInputStream)"
    (builtin "One Step Simplification" (formula "11") (ifInst ""  (formula "10")) (ifInst ""  (formula "4")) (ifInst ""  (formula "10")) (ifInst ""  (formula "7")))
   (rule "closeTrue" (formula "11"))
)
)
}
