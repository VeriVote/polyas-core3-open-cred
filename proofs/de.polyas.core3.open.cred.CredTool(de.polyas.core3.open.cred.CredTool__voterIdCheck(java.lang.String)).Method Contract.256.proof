\profile "Java Profile";

\settings {
"#Proof-Settings-Config-File
#Mon Nov 04 12:02:19 CET 2019
[Labels]UseOriginLabels=true
[StrategyProperty]QUERYAXIOM_OPTIONS_KEY=QUERYAXIOM_ON
[SMTSettings]invariantForall=false
[Strategy]ActiveStrategy=JavaCardDLStrategy
[StrategyProperty]USER_TACLETS_OPTIONS_KEY1=USER_TACLETS_OFF
[StrategyProperty]QUANTIFIERS_OPTIONS_KEY=QUANTIFIERS_NON_SPLITTING_WITH_PROGS
[StrategyProperty]USER_TACLETS_OPTIONS_KEY2=USER_TACLETS_OFF
[Choice]DefaultChoices=methodExpansion-methodExpansion\\:modularOnly , mergeGenerateIsWeakeningGoal-mergeGenerateIsWeakeningGoal\\:off , wdChecks-wdChecks\\:off , wdOperator-wdOperator\\:L , permissions-permissions\\:off , integerSimplificationRules-integerSimplificationRules\\:full , reach-reach\\:on , moreSeqRules-moreSeqRules\\:on , sequences-sequences\\:on , bigint-bigint\\:on , modelFields-modelFields\\:treatAsAxiom , Strings-Strings\\:on , JavaCard-JavaCard\\:off , runtimeExceptions-runtimeExceptions\\:allow , programRules-programRules\\:Java , intRules-intRules\\:javaSemantics , initialisation-initialisation\\:disableStaticInitialisation , assertions-assertions\\:on
[StrategyProperty]LOOP_OPTIONS_KEY=LOOP_INVARIANT
[StrategyProperty]INF_FLOW_CHECK_PROPERTY=INF_FLOW_CHECK_FALSE
[SMTSettings]UseBuiltUniqueness=false
[SMTSettings]explicitTypeHierarchy=false
[SMTSettings]instantiateHierarchyAssumptions=true
[StrategyProperty]NON_LIN_ARITH_OPTIONS_KEY=NON_LIN_ARITH_DEF_OPS
[SMTSettings]SelectedTaclets=
[StrategyProperty]DEP_OPTIONS_KEY=DEP_ON
[StrategyProperty]AUTO_INDUCTION_OPTIONS_KEY=AUTO_INDUCTION_OFF
[Strategy]MaximumNumberOfAutomaticApplications=10000
[StrategyProperty]STOPMODE_OPTIONS_KEY=STOPMODE_DEFAULT
[StrategyProperty]CLASS_AXIOM_OPTIONS_KEY=CLASS_AXIOM_FREE
[SMTSettings]useConstantsForBigOrSmallIntegers=true
[StrategyProperty]MPS_OPTIONS_KEY=MPS_MERGE
[StrategyProperty]SYMBOLIC_EXECUTION_NON_EXECUTION_BRANCH_HIDING_OPTIONS_KEY=SYMBOLIC_EXECUTION_NON_EXECUTION_BRANCH_HIDING_OFF
[Strategy]Timeout=-1
[StrategyProperty]SYMBOLIC_EXECUTION_ALIAS_CHECK_OPTIONS_KEY=SYMBOLIC_EXECUTION_ALIAS_CHECK_NEVER
[StrategyProperty]QUERY_NEW_OPTIONS_KEY=QUERY_OFF
[SMTSettings]useUninterpretedMultiplication=true
[StrategyProperty]BLOCK_OPTIONS_KEY=BLOCK_CONTRACT_INTERNAL
[StrategyProperty]METHOD_OPTIONS_KEY=METHOD_CONTRACT
[StrategyProperty]USER_TACLETS_OPTIONS_KEY3=USER_TACLETS_OFF
[SMTSettings]maxGenericSorts=2
[StrategyProperty]OSS_OPTIONS_KEY=OSS_ON
[StrategyProperty]SPLITTING_OPTIONS_KEY=SPLITTING_DELAYED
[SMTSettings]integersMinimum=-2147483645
[StrategyProperty]VBT_PHASE=VBT_SYM_EX
[SMTSettings]integersMaximum=2147483645
"
}

\javaSource "src";

\problem {
!(  wellFormed(heapAtPre<<anonHeapFunction>>)
  & heap = heapAtPre<<anonHeapFunction>>
  & !self_79 = null
  &   boolean::select(heap,
                      self_79,
                      java.lang.Object::<created>)
    = TRUE
  &   de.polyas.core3.open.cred.CredTool::exactInstance(self_79)
    = TRUE
  & ((  voterId_9 = null
      |   boolean::select(heapAtPre<<anonHeapFunction>>,
                          voterId_9,
                          java.lang.Object::<created>)
        = TRUE)<<SC>>)
  & ((  (\exists int i;
           ((  (leq(Z(0(#)), i)<<origin("requires @ file CredTool.java @ line 251","[]")>>
             & lt(i, seqLen(strContent(voterId_9)))<<origin("requires @ file CredTool.java @ line 251","[]")>>)<<SC,
                                                                                                                 origin("requires @ file CredTool.java @ line 251","[]")>>
             & gt((int)(any::seqGet(strContent(voterId_9),
                                    i)),
                  C(2(3(#))))<<origin("requires @ file CredTool.java @ line 251","[]")>>)<<SC,
                                                                                           origin("requires @ file CredTool.java @ line 251","[]")>>))<<origin("requires @ file CredTool.java @ line 251","[]")>>
      & (!(voterId_9 = null)<<origin("requires @ file CredTool.java @ line 256","[]")>>)<<impl,
                                                                                          origin("requires @ file CredTool.java @ line 256","[]")>>)<<SC>>)
  & {_voterId_9:=voterId_9}
      \[{
          exc_107=null;try {
            result_93=self_79.voterIdCheck(_voterId_9)@de.polyas.core3.open.cred.CredTool;
          }   catch (java.lang.Throwable e) {
            exc_107=e;
          }
        }\] (  selfAtPost_79 = self_79
             & resultAtPost_93 = result_93
             & excAtPost_107 = exc_107
             & heapAtPost = heap))

}

\proof {
(keyLog "0" (keyUser "flo" ) (keyVersion "57d504cc0f"))

(autoModeTime "2238")

(branch "dummy ID"
(rule "notRight" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "2"))
(rule "andLeft" (formula "1"))
(rule "notLeft" (formula "4"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "notLeft" (formula "2"))
(rule "andLeft" (formula "1"))
(rule "exLeft" (formula "6") (inst "sk=i_0"))
(rule "andLeft" (formula "6"))
(rule "andLeft" (formula "6"))
(rule "eqSymm" (formula "9") (term "1,0,0,0,1"))
(rule "eqSymm" (formula "9") (term "0,0,0,0,1"))
(rule "eqSymm" (formula "9") (term "1,0,0,1"))
(rule "eqSymm" (formula "2"))
(rule "replace_known_right" (formula "5") (term "0") (ifseqformula "11"))
 (builtin "One Step Simplification" (formula "5"))
(rule "castedGetAny" (formula "8") (term "0"))
(rule "inEqSimp_commuteLeq" (formula "6"))
(rule "assignment" (formula "9") (term "1"))
 (builtin "One Step Simplification" (formula "9"))
(rule "boxToDiamond" (formula "9") (term "1"))
 (builtin "One Step Simplification" (formula "9"))
(rule "notLeft" (formula "9"))
(rule "charLiteral_to_int" (formula "8") (term "1"))
(rule "methodBodyExpand" (formula "9") (term "1") (newnames "heapBefore_voterIdCheck,savedHeapBefore_voterIdCheck"))
 (builtin "One Step Simplification" (formula "9"))
(rule "returnUnfold" (formula "9") (term "1") (inst "#v0=x"))
(rule "variableDeclarationAssign" (formula "9") (term "1"))
(rule "variableDeclaration" (formula "9") (term "1") (newnames "x"))
(rule "compound_assignment_2" (formula "9") (term "1") (inst "#v=x_1"))
(rule "variableDeclarationAssign" (formula "9") (term "1"))
(rule "variableDeclaration" (formula "9") (term "1") (newnames "x_1"))
(rule "methodCallWithAssignmentUnfoldTarget" (formula "9") (term "1") (inst "#v0=s"))
(rule "variableDeclaration" (formula "9") (term "1") (newnames "s"))
 (builtin "Use Operation Contract" (formula "9") (newnames "heapBefore_trim,result_94,exc_108,heapAfter_trim,anon_heap_trim") (contract "java.lang.String[java.lang.String::trim()].stringTrim.0#java.lang.String[java.lang.String::trim()].stringTrim2.0"))
(branch "Post (trim)"
    (builtin "One Step Simplification" (formula "10"))
    (builtin "One Step Simplification" (formula "13"))
    (builtin "One Step Simplification" (formula "12"))
    (builtin "One Step Simplification" (formula "11"))
   (rule "andLeft" (formula "10"))
   (rule "selectCreatedOfAnonAsFormulaEQ" (formula "11") (term "1,1,0") (ifseqformula "10"))
   (rule "andLeft" (formula "11"))
   (rule "andLeft" (formula "12"))
   (rule "andLeft" (formula "11"))
   (rule "andLeft" (formula "13"))
   (rule "andLeft" (formula "13"))
   (rule "notLeft" (formula "13"))
   (rule "replace_known_right" (formula "14") (term "0,0,0,0,1") (ifseqformula "17"))
    (builtin "One Step Simplification" (formula "14") (ifInst ""  (formula "13")) (ifInst ""  (formula "11")))
   (rule "replace_known_right" (formula "12") (term "0") (ifseqformula "17"))
    (builtin "One Step Simplification" (formula "12"))
   (rule "castedGetAny" (formula "14") (term "0,1,0,0"))
   (rule "inEqSimp_commuteLeq" (formula "13"))
   (rule "inEqSimp_commuteLeq" (formula "14") (term "0,0,0,0"))
   (rule "assignment" (formula "18") (term "1"))
    (builtin "One Step Simplification" (formula "18"))
   (rule "commute_and_2" (formula "14") (term "0,0"))
   (rule "commute_and" (formula "14") (term "0,0,0"))
   (rule "commute_and_2" (formula "14") (term "0,0"))
   (rule "charLiteral_to_int" (formula "14") (term "1,0,0,0,0"))
    (builtin "Use Operation Contract" (formula "18") (newnames "heapBefore_isEmpty,result_95,exc_109,heapAfter_isEmpty,anon_heap_isEmpty") (contract "java.lang.String[java.lang.String::isEmpty()].stringIsEmptyNormal.0"))
   (branch "Post (isEmpty)"
       (builtin "One Step Simplification" (formula "20"))
       (builtin "One Step Simplification" (formula "19"))
       (builtin "One Step Simplification" (formula "18"))
       (builtin "One Step Simplification" (formula "22"))
      (rule "andLeft" (formula "18"))
      (rule "andLeft" (formula "19"))
      (rule "andLeft" (formula "20"))
      (rule "eqSeqEmpty" (formula "20") (term "1"))
      (rule "assignment" (formula "24") (term "1"))
       (builtin "One Step Simplification" (formula "24"))
      (rule "compound_assignment_1_new" (formula "24") (term "1"))
       (builtin "One Step Simplification" (formula "24"))
      (rule "methodCallReturn" (formula "24") (term "1"))
      (rule "assignment" (formula "24") (term "1"))
       (builtin "One Step Simplification" (formula "24"))
      (rule "methodCallEmpty" (formula "24") (term "1"))
      (rule "tryEmpty" (formula "24") (term "1"))
      (rule "emptyModality" (formula "24") (term "1"))
       (opengoal "!(  wellFormed(heapAtPre<<anonHeapFunction>>)   & heap = heapAtPre<<anonHeapFunction>>   & !self_79 = null   &   boolean::select(heap,                       self_79,                       java.lang.Object::<created>)     = TRUE   &   de.polyas.core3.open.cred.CredTool::exactInstance(self_79)     = TRUE   & ((  voterId_9 = null       |   boolean::select(heapAtPre<<anonHeapFunction>>,                           voterId_9,                           java.lang.Object::<created>)         = TRUE)<<SC>>)   & ((  (\\exists int i;            ((  (leq(Z(0(#)), i)<<origin(\"requires @ file CredTool.java @ line 251\",\"[]\")>>              & lt(i, seqLen(strContent(voterId_9)))<<origin(\"requires @ file CredTool.java @ line 251\",\"[]\")>>)<<SC,                                                                                                                  origin(\"requires @ file CredTool.java @ line 251\",\"[]\")>>              & gt((int)(any::seqGet(strContent(voterId_9),                                     i)),                   C(2(3(#))))<<origin(\"requires @ file CredTool.java @ line 251\",\"[]\")>>)<<SC,                                                                                            origin(\"requires @ file CredTool.java @ line 251\",\"[]\")>>))<<origin(\"requires @ file CredTool.java @ line 251\",\"[]\")>>       & (!(voterId_9 = null)<<origin(\"requires @ file CredTool.java @ line 256\",\"[]\")>>)<<impl,                                                                                           origin(\"requires @ file CredTool.java @ line 256\",\"[]\")>>)<<SC>>)   & {_voterId_9:=voterId_9}       \\[{           exc_107=null;try {             result_93=self_79.voterIdCheck(_voterId_9)@de.polyas.core3.open.cred.CredTool;           }   catch (java.lang.Throwable e) {             exc_107=e;           }         }\\] (  selfAtPost_79 = self_79              & resultAtPost_93 = result_93              & excAtPost_107 = exc_107              & heapAtPost = heap)) ")
   )
   (branch "Exceptional Post (isEmpty)"
       (builtin "One Step Simplification" (formula "20"))
       (builtin "One Step Simplification" (formula "18"))
      (rule "andLeft" (formula "18"))
      (rule "selectCreatedOfAnonAsFormulaEQ" (formula "19") (term "1,0") (ifseqformula "18"))
      (rule "selectCreatedOfAnonAsFormulaEQ" (formula "19") (term "0,1,0") (ifseqformula "10"))
      (rule "andLeft" (formula "19"))
      (rule "andLeft" (formula "20"))
      (rule "andLeft" (formula "19"))
      (rule "notLeft" (formula "19"))
      (rule "close" (formula "22") (ifseqformula "21"))
   )
   (branch "Pre (isEmpty)"
       (builtin "One Step Simplification" (formula "18"))
      (rule "wellFormedAnonEQ" (formula "18") (ifseqformula "10"))
      (rule "replace_known_left" (formula "18") (term "1") (ifseqformula "9"))
       (builtin "One Step Simplification" (formula "18") (ifInst ""  (formula "16")))
      (rule "closeTrue" (formula "18"))
   )
   (branch "Null reference (s = null)"
       (builtin "One Step Simplification" (formula "18") (ifInst ""  (formula "17")))
      (rule "closeTrue" (formula "18"))
   )
)
(branch "Exceptional Post (trim)"
    (builtin "One Step Simplification" (formula "11"))
    (builtin "One Step Simplification" (formula "10"))
   (rule "andLeft" (formula "10"))
   (rule "selectCreatedOfAnonAsFormulaEQ" (formula "11") (term "1,0") (ifseqformula "10"))
   (rule "andLeft" (formula "11"))
   (rule "andLeft" (formula "12"))
   (rule "andLeft" (formula "11"))
   (rule "andLeft" (formula "13"))
   (rule "notLeft" (formula "11"))
   (rule "close" (formula "15") (ifseqformula "13"))
)
(branch "Pre (trim)"
    (builtin "One Step Simplification" (formula "9"))
   (rule "inEqSimp_gtToGeq" (formula "8"))
   (rule "mul_literals" (formula "8") (term "1,0,0"))
   (rule "add_literals" (formula "8") (term "0,0"))
   (rule "inEqSimp_ltToLeq" (formula "7"))
   (rule "polySimp_mulComm0" (formula "7") (term "1,0,0"))
   (rule "polySimp_addComm1" (formula "7") (term "0"))
   (rule "applyEq" (formula "5") (term "0,0") (ifseqformula "2"))
   (rule "applyEq" (formula "1") (term "0") (ifseqformula "2"))
   (rule "close" (formula "9") (ifseqformula "1"))
)
(branch "Null reference (_voterId_9 = null)"
    (builtin "One Step Simplification" (formula "9") (ifInst ""  (formula "11")))
   (rule "closeTrue" (formula "9"))
)
)
}
