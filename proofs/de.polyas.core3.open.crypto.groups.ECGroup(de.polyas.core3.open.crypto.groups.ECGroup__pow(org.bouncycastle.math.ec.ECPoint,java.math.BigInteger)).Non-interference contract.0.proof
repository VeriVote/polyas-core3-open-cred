\profile "Java Profile";

\settings {
"#Proof-Settings-Config-File
#Thu Sep 26 14:17:57 CEST 2019
[Labels]UseOriginLabels=true
[StrategyProperty]QUERYAXIOM_OPTIONS_KEY=QUERYAXIOM_ON
[SMTSettings]invariantForall=false
[Strategy]ActiveStrategy=JavaCardDLStrategy
[StrategyProperty]USER_TACLETS_OPTIONS_KEY1=USER_TACLETS_OFF
[StrategyProperty]QUANTIFIERS_OPTIONS_KEY=QUANTIFIERS_NON_SPLITTING_WITH_PROGS
[StrategyProperty]USER_TACLETS_OPTIONS_KEY2=USER_TACLETS_OFF
[Choice]DefaultChoices=methodExpansion-methodExpansion\\:modularOnly , mergeGenerateIsWeakeningGoal-mergeGenerateIsWeakeningGoal\\:off , wdChecks-wdChecks\\:off , wdOperator-wdOperator\\:L , permissions-permissions\\:off , integerSimplificationRules-integerSimplificationRules\\:full , reach-reach\\:on , moreSeqRules-moreSeqRules\\:on , sequences-sequences\\:on , bigint-bigint\\:on , modelFields-modelFields\\:treatAsAxiom , Strings-Strings\\:on , JavaCard-JavaCard\\:off , runtimeExceptions-runtimeExceptions\\:allow , programRules-programRules\\:Java , intRules-intRules\\:javaSemantics , initialisation-initialisation\\:disableStaticInitialisation , assertions-assertions\\:on
[StrategyProperty]LOOP_OPTIONS_KEY=LOOP_INVARIANT
[StrategyProperty]INF_FLOW_CHECK_PROPERTY=INF_FLOW_CHECK_TRUE
[SMTSettings]UseBuiltUniqueness=false
[SMTSettings]explicitTypeHierarchy=false
[SMTSettings]instantiateHierarchyAssumptions=true
[StrategyProperty]NON_LIN_ARITH_OPTIONS_KEY=NON_LIN_ARITH_DEF_OPS
[SMTSettings]SelectedTaclets=
[StrategyProperty]DEP_OPTIONS_KEY=DEP_ON
[StrategyProperty]AUTO_INDUCTION_OPTIONS_KEY=AUTO_INDUCTION_OFF
[Strategy]MaximumNumberOfAutomaticApplications=10000
[StrategyProperty]STOPMODE_OPTIONS_KEY=STOPMODE_DEFAULT
[StrategyProperty]CLASS_AXIOM_OPTIONS_KEY=CLASS_AXIOM_FREE
[SMTSettings]useConstantsForBigOrSmallIntegers=true
[StrategyProperty]MPS_OPTIONS_KEY=MPS_MERGE
[StrategyProperty]SYMBOLIC_EXECUTION_NON_EXECUTION_BRANCH_HIDING_OPTIONS_KEY=SYMBOLIC_EXECUTION_NON_EXECUTION_BRANCH_HIDING_OFF
[Strategy]Timeout=-1
[StrategyProperty]SYMBOLIC_EXECUTION_ALIAS_CHECK_OPTIONS_KEY=SYMBOLIC_EXECUTION_ALIAS_CHECK_NEVER
[StrategyProperty]QUERY_NEW_OPTIONS_KEY=QUERY_OFF
[SMTSettings]useUninterpretedMultiplication=true
[StrategyProperty]BLOCK_OPTIONS_KEY=BLOCK_CONTRACT_INTERNAL
[StrategyProperty]METHOD_OPTIONS_KEY=METHOD_CONTRACT
[StrategyProperty]USER_TACLETS_OPTIONS_KEY3=USER_TACLETS_OFF
[SMTSettings]maxGenericSorts=2
[StrategyProperty]OSS_OPTIONS_KEY=OSS_ON
[StrategyProperty]SPLITTING_OPTIONS_KEY=SPLITTING_DELAYED
[SMTSettings]integersMinimum=-2147483645
[StrategyProperty]VBT_PHASE=VBT_SYM_EX
[SMTSettings]integersMaximum=2147483645
"
}

\javaSource "../src";



\sorts{
Heap;
Update;
de.polyas.core3.open.crypto.groups.ECGroup\extends de.polyas.core3.open.crypto.groups.CyclicGroup;
Field;
boolean;
org.bouncycastle.math.ec.ECPoint\extends java.lang.Object;
java.math.BigInteger\extends java.lang.Comparable, java.lang.Number;
int;
numbers;
java.lang.Throwable\extends java.io.Serializable, java.lang.Object;
LocSet;
org.bouncycastle.jce.spec.ECNamedCurveParameterSpec\extends org.bouncycastle.jce.spec.ECParameterSpec;
org.bouncycastle.math.ec.custom.sec.SecP256K1Curve\extends org.bouncycastle.math.ec.ECCurve.AbstractFp;
Formula;
}

\predicates{
RELATED_BY_mod_596311583(java.math.BigInteger,java.math.BigInteger,Heap,java.math.BigInteger,java.math.BigInteger,java.lang.Throwable,Heap);
RELATED_BY_getOrder_757678341(org.bouncycastle.math.ec.ECCurve,Heap,org.bouncycastle.math.ec.custom.sec.SecP256K1Curve,java.math.BigInteger,java.lang.Throwable,Heap);
RELATED_BY_multiply_1272441881(org.bouncycastle.math.ec.ECPoint,java.math.BigInteger,Heap,org.bouncycastle.math.ec.ECPoint,org.bouncycastle.math.ec.ECPoint,java.lang.Throwable,Heap);
RELATED_BY_compareTo_325434207(java.math.BigInteger,java.math.BigInteger,Heap,java.math.BigInteger,int,java.lang.Throwable,Heap);
}

\functions{
Heap heapAtPre_A;
Formula wellFormed(Heap);
Field java.lang.Object::<created>;
boolean boolean::select(Heap,java.lang.Object,Field);
boolean TRUE;
boolean de.polyas.core3.open.crypto.groups.ECGroup::exactInstance(any);
Null null;
Field java.math.BigInteger::$ZERO;
java.math.BigInteger java.math.BigInteger::select(Heap,java.lang.Object,Field);
Field java.math.BigInteger::$value;
int int::select(Heap,java.lang.Object,Field);
numbers #;
numbers 0(numbers);
int Z(numbers);
numbers 2(numbers);
numbers 1(numbers);
numbers 4(numbers);
numbers 7(numbers);
numbers 8(numbers);
numbers 3(numbers);
numbers 6(numbers);
Formula leq(int,int);
numbers neglit(numbers);
Formula geq(int,int);
int mul(int,int);
int add(int,int);
Heap anon_heap_multiply;
LocSet empty;
Heap anon(Heap,LocSet,Heap);
Heap heapAfter_multiply_A_0;
Formula lt(int,int);
Field de.polyas.core3.open.crypto.groups.ECGroup::$group;
org.bouncycastle.jce.spec.ECNamedCurveParameterSpec org.bouncycastle.jce.spec.ECNamedCurveParameterSpec::select(Heap,java.lang.Object,Field);
Field org.bouncycastle.jce.spec.ECParameterSpec::$generator;
org.bouncycastle.math.ec.ECPoint org.bouncycastle.math.ec.ECPoint::select(Heap,java.lang.Object,Field);
Field de.polyas.core3.open.crypto.groups.ECGroup::$curve;
org.bouncycastle.math.ec.custom.sec.SecP256K1Curve org.bouncycastle.math.ec.custom.sec.SecP256K1Curve::select(Heap,java.lang.Object,Field);
Heap heapAtPost_A;
Heap heapAtPre_B;
Heap heapAfter_multiply_B_0;
Heap heapAtPost_B;
Field org.bouncycastle.math.ec.ECCurve::$order;
Heap anon_heap_mod;
Heap heapAfter_mod_B_0;
int java_math_BigInteger_value_0_B_0;
int jmod(int,int);
int java_math_BigInteger_value_3_B_0;
Heap anon_heap_multiply;
Heap heapAfter_multiply_B_1;
Heap heapAfter_mod_A_0;
int java_math_BigInteger_value_0_A_0;
int java_math_BigInteger_value_3_A_0;
Heap heapAfter_multiply_A_1;
Field org.bouncycastle.math.ec.ECPoint::$value;
Formula java.lang.Object::<inv>(Heap,java.lang.Object);
Formula java.math.BigInteger::<$inv>(Heap);
}

\programVariables{
Heap heap;
de.polyas.core3.open.crypto.groups.ECGroup self_191_A;
org.bouncycastle.math.ec.ECPoint p_6_A;
java.math.BigInteger exponent_6_A;
java.lang.Throwable exc_257_A_0;
int result_227_A_0;
org.bouncycastle.math.ec.ECPoint result_228_A_0;
java.lang.Throwable exc_258_A_0;
java.lang.Throwable exc_256_A;
org.bouncycastle.math.ec.ECPoint result_226_A;
de.polyas.core3.open.crypto.groups.ECGroup selfAtPost_191_A;
org.bouncycastle.math.ec.ECPoint resultAtPost_226_A;
java.lang.Throwable excAtPost_256_A;
de.polyas.core3.open.crypto.groups.ECGroup self_191_B;
org.bouncycastle.math.ec.ECPoint p_6_B;
java.math.BigInteger exponent_6_B;
java.lang.Throwable exc_257_B_0;
int result_227_B_0;
org.bouncycastle.math.ec.ECPoint result_228_B_0;
java.lang.Throwable exc_258_B_0;
java.lang.Throwable exc_256_B;
org.bouncycastle.math.ec.ECPoint result_226_B;
de.polyas.core3.open.crypto.groups.ECGroup selfAtPost_191_B;
org.bouncycastle.math.ec.ECPoint resultAtPost_226_B;
java.lang.Throwable excAtPost_256_B;
java.math.BigInteger result_228_B_1;
java.lang.Throwable exc_258_B_1;
java.math.BigInteger result_229_B_0;
java.lang.Throwable exc_259_B_0;
java.lang.Throwable exc_260_B_0;
org.bouncycastle.math.ec.ECPoint result_230_B_0;
java.math.BigInteger result_228_A_1;
java.lang.Throwable exc_258_A_1;
java.math.BigInteger result_229_A_0;
java.lang.Throwable exc_259_A_0;
java.lang.Throwable exc_260_A_0;
org.bouncycastle.math.ec.ECPoint result_230_A_0;
org.bouncycastle.math.ec.ECPoint _p_6_A;
java.math.BigInteger _exponent_6_A;
org.bouncycastle.math.ec.ECPoint _p_6_B;
java.math.BigInteger _exponent_6_B;
}

\rules{

unfold_computed_formula_0_of_pow_425138489 {
  \schemaVar \term Heap sv_heapAtPre_A#31;
  \schemaVar \term org.bouncycastle.math.ec.ECPoint sv_p_6_A#29;
  \schemaVar \term java.math.BigInteger sv_exponent_6_A#30;
  \schemaVar \term de.polyas.core3.open.crypto.groups.ECGroup sv_selfAtPost_191_A#33;
  \schemaVar \term de.polyas.core3.open.crypto.groups.ECGroup sv_self_191_A#28;
  \schemaVar \term org.bouncycastle.math.ec.ECPoint sv_resultAtPost_226_A#34;
  \schemaVar \term java.lang.Throwable sv_excAtPost_256_A#35;
  \schemaVar \term Heap sv_heapAtPost_A#36;
  \schemaVar \term Heap sv_heapAtPre_B#40;
  \schemaVar \term org.bouncycastle.math.ec.ECPoint sv_p_6_B#38;
  \schemaVar \term java.math.BigInteger sv_exponent_6_B#39;
  \schemaVar \term de.polyas.core3.open.crypto.groups.ECGroup sv_selfAtPost_191_B#42;
  \schemaVar \term de.polyas.core3.open.crypto.groups.ECGroup sv_self_191_B#37;
  \schemaVar \term org.bouncycastle.math.ec.ECPoint sv_resultAtPost_226_B#43;
  \schemaVar \term java.lang.Throwable sv_excAtPost_256_B#44;
  \schemaVar \term Heap sv_heapAtPost_B#45;
  
  \find (
      {heap:=sv_heapAtPre_A#31}
        (  wellFormed(sv_heapAtPre_A#31)
         & heap = sv_heapAtPre_A#31
         & !sv_self_191_A#28 = null
         &   boolean::select(heap,
                             sv_self_191_A#28,
                             java.lang.Object::<created>)
           = TRUE
         &   de.polyas.core3.open.crypto.groups.ECGroup::exactInstance(sv_self_191_A#28)
           = TRUE
         & (  ((  sv_p_6_A#29 = null
                |   boolean::select(sv_heapAtPre_A#31,
                                    sv_p_6_A#29,
                                    java.lang.Object::<created>)
                  = TRUE)<<SC>>)
            & ((  sv_exponent_6_A#30 = null
                |   boolean::select(sv_heapAtPre_A#31,
                                    sv_exponent_6_A#30,
                                    java.lang.Object::<created>)
                  = TRUE)<<SC>>))
         & ((  java.math.BigInteger::<$inv>(sv_heapAtPre_A#31)
             & ((  java.lang.Object::<inv>(sv_heapAtPre_A#31, sv_p_6_A#29)
                 & ((  java.lang.Object::<inv>(sv_heapAtPre_A#31,
                                               sv_exponent_6_A#30)
                     & ((  java.lang.Object::<inv>(sv_heapAtPre_A#31,
                                                   sv_self_191_A#28)<<impl>>
                         & ((  (!sv_p_6_A#29 = null)<<impl>>
                             & (!sv_exponent_6_A#30 = null)<<impl>>)<<SC>>))<<SC>>))<<SC>>))<<SC>>))<<SC>>)
         & {_p_6_A:=sv_p_6_A#29 || _exponent_6_A:=sv_exponent_6_A#30}
             \[{
                 exc_256_A=null;try {
                   result_226_A=self_191_A.pow(_p_6_A,_exponent_6_A)@de.polyas.core3.open.crypto.groups.ECGroup;
                 }   catch (java.lang.Throwable e) {
                   exc_256_A=e;
                 }
               }\] (  sv_selfAtPost_191_A#33 = sv_self_191_A#28
                    & sv_resultAtPost_226_A#34 = result_226_A
                    & sv_excAtPost_256_A#35 = exc_256_A
                    & sv_heapAtPost_A#36 = heap))
    & {heap:=sv_heapAtPre_B#40}
        (  wellFormed(sv_heapAtPre_B#40)
         & heap = sv_heapAtPre_B#40
         & !sv_self_191_B#37 = null
         &   boolean::select(heap,
                             sv_self_191_B#37,
                             java.lang.Object::<created>)
           = TRUE
         &   de.polyas.core3.open.crypto.groups.ECGroup::exactInstance(sv_self_191_B#37)
           = TRUE
         & (  ((  sv_p_6_B#38 = null
                |   boolean::select(sv_heapAtPre_B#40,
                                    sv_p_6_B#38,
                                    java.lang.Object::<created>)
                  = TRUE)<<SC>>)
            & ((  sv_exponent_6_B#39 = null
                |   boolean::select(sv_heapAtPre_B#40,
                                    sv_exponent_6_B#39,
                                    java.lang.Object::<created>)
                  = TRUE)<<SC>>))
         & ((  java.math.BigInteger::<$inv>(sv_heapAtPre_B#40)
             & ((  java.lang.Object::<inv>(sv_heapAtPre_B#40, sv_p_6_B#38)
                 & ((  java.lang.Object::<inv>(sv_heapAtPre_B#40,
                                               sv_exponent_6_B#39)
                     & ((  java.lang.Object::<inv>(sv_heapAtPre_B#40,
                                                   sv_self_191_B#37)<<impl>>
                         & ((  (!sv_p_6_B#38 = null)<<impl>>
                             & (!sv_exponent_6_B#39 = null)<<impl>>)<<SC>>))<<SC>>))<<SC>>))<<SC>>))<<SC>>)
         & {_p_6_B:=sv_p_6_B#38 || _exponent_6_B:=sv_exponent_6_B#39}
             \[{
                 exc_256_B=null;try {
                   result_226_B=self_191_B.pow(_p_6_B,_exponent_6_B)@de.polyas.core3.open.crypto.groups.ECGroup;
                 }   catch (java.lang.Throwable e) {
                   exc_256_B=e;
                 }
               }\] (  sv_selfAtPost_191_B#42 = sv_self_191_B#37
                    & sv_resultAtPost_226_B#43 = result_226_B
                    & sv_excAtPost_256_B#44 = exc_256_B
                    & sv_heapAtPost_B#45 = heap))
  )
  \antecedentPolarity
  \replacewith (
        {heap:=sv_heapAtPre_A#31}
          (  wellFormed(sv_heapAtPre_A#31)
           & sv_heapAtPre_A#31 = heap
           &   boolean::select(heap,
                               sv_self_191_A#28,
                               java.lang.Object::<created>)
             = TRUE
           &   de.polyas.core3.open.crypto.groups.ECGroup::exactInstance(sv_self_191_A#28)
             = TRUE
           &   boolean::select(sv_heapAtPre_A#31,
                               sv_p_6_A#29,
                               java.lang.Object::<created>)
             = TRUE
           &   boolean::select(sv_heapAtPre_A#31,
                               sv_exponent_6_A#30,
                               java.lang.Object::<created>)
             = TRUE
           &   int::select(sv_heapAtPre_A#31,
                           java.math.BigInteger::select(sv_heapAtPre_A#31,
                                                        null,
                                                        java.math.BigInteger::$ZERO),
                           java.math.BigInteger::$value)
             = Z(0(#))
           & wellFormed(heap)
           & exc_257_A_0 = null
           & leq(result_227_A_0, Z(7(4(6(3(8(4(7(4(1(2(#))))))))))))
           & geq(result_227_A_0, Z(neglit(8(4(6(3(8(4(7(4(1(2(#)))))))))))))
           & (    leq(result_227_A_0, Z(0(#)))
              <-> leq(add(int::select(heap,
                                      sv_exponent_6_A#30,
                                      java.math.BigInteger::$value),
                          mul(int::select(heap,
                                          java.math.BigInteger::select(heap,
                                                                       null,
                                                                       java.math.BigInteger::$ZERO),
                                          java.math.BigInteger::$value),
                              Z(neglit(1(#))))),
                      Z(0(#))))
           & (    geq(result_227_A_0, Z(0(#)))
              <-> geq(add(int::select(heap,
                                      sv_exponent_6_A#30,
                                      java.math.BigInteger::$value),
                          mul(int::select(heap,
                                          java.math.BigInteger::select(heap,
                                                                       null,
                                                                       java.math.BigInteger::$ZERO),
                                          java.math.BigInteger::$value),
                              Z(neglit(1(#))))),
                      Z(0(#))))
           & RELATED_BY_compareTo_325434207(sv_exponent_6_A#30,
                                            java.math.BigInteger::select(heap,
                                                                         null,
                                                                         java.math.BigInteger::$ZERO),
                                            heap,
                                            sv_exponent_6_A#30,
                                            result_227_A_0,
                                            exc_257_A_0,
                                            heap)
           &   int::select(heap,
                           java.math.BigInteger::select(heap,
                                                        null,
                                                        java.math.BigInteger::$ZERO),
                           java.math.BigInteger::$value)
             = Z(0(#))
           &   boolean::select(heap,
                               java.math.BigInteger::select(heap,
                                                            null,
                                                            java.math.BigInteger::$ZERO),
                               java.lang.Object::<created>)
             = TRUE
           & wellFormed(anon_heap_multiply<<anonHeapFunction>>)
           &   anon(heap, empty, anon_heap_multiply<<anonHeapFunction>>)
             = heapAfter_multiply_A_0
           & (    boolean::select(heap,
                                  result_228_A_0,
                                  java.lang.Object::<created>)
                = TRUE
              |   boolean::select(anon_heap_multiply<<anonHeapFunction>>,
                                  result_228_A_0,
                                  java.lang.Object::<created>)
                = TRUE)
           & (exc_258_A_0 = null)<<impl>>
           & RELATED_BY_multiply_1272441881(sv_p_6_A#29,
                                            sv_exponent_6_A#30,
                                            heap,
                                            sv_p_6_A#29,
                                            result_228_A_0,
                                            exc_258_A_0,
                                            heapAfter_multiply_A_0)
           &   boolean::select(heap,
                               sv_exponent_6_A#30,
                               java.lang.Object::<created>)
             = TRUE
           & !result_228_A_0 = null
           & !lt(result_227_A_0, Z(0(#)))
           & !  java.math.BigInteger::select(heap,
                                             null,
                                             java.math.BigInteger::$ZERO)
              = null
           & !  org.bouncycastle.math.ec.ECPoint::select(sv_heapAtPre_A#31,
                                                         org.bouncycastle.jce.spec.ECNamedCurveParameterSpec::select(sv_heapAtPre_A#31,
                                                                                                                     sv_self_191_A#28,
                                                                                                                     de.polyas.core3.open.crypto.groups.ECGroup::$group),
                                                         org.bouncycastle.jce.spec.ECParameterSpec::$generator)
              = null
           & !  org.bouncycastle.jce.spec.ECNamedCurveParameterSpec::select(sv_heapAtPre_A#31,
                                                                            sv_self_191_A#28,
                                                                            de.polyas.core3.open.crypto.groups.ECGroup::$group)
              = null
           & !  org.bouncycastle.math.ec.custom.sec.SecP256K1Curve::select(sv_heapAtPre_A#31,
                                                                           sv_self_191_A#28,
                                                                           de.polyas.core3.open.crypto.groups.ECGroup::$curve)
              = null
           & !  java.math.BigInteger::select(sv_heapAtPre_A#31,
                                             null,
                                             java.math.BigInteger::$ZERO)
              = null
           & !{exc_256_A:=null
               || heap:=heapAfter_multiply_A_0
               || result_226_A:=result_228_A_0}
                !(  sv_self_191_A#28 = sv_selfAtPost_191_A#33
                  & result_226_A = sv_resultAtPost_226_A#34
                  & exc_256_A = sv_excAtPost_256_A#35
                  & sv_heapAtPost_A#36 = heap)
           & !sv_exponent_6_A#30 = null
           & !sv_p_6_A#29 = null
           & !sv_self_191_A#28 = null)
      & {heap:=sv_heapAtPre_B#40}
          (  wellFormed(sv_heapAtPre_B#40)
           & sv_heapAtPre_B#40 = heap
           &   boolean::select(heap,
                               sv_self_191_B#37,
                               java.lang.Object::<created>)
             = TRUE
           &   de.polyas.core3.open.crypto.groups.ECGroup::exactInstance(sv_self_191_B#37)
             = TRUE
           &   boolean::select(sv_heapAtPre_B#40,
                               sv_p_6_B#38,
                               java.lang.Object::<created>)
             = TRUE
           &   boolean::select(sv_heapAtPre_B#40,
                               sv_exponent_6_B#39,
                               java.lang.Object::<created>)
             = TRUE
           &   int::select(sv_heapAtPre_B#40,
                           java.math.BigInteger::select(sv_heapAtPre_B#40,
                                                        null,
                                                        java.math.BigInteger::$ZERO),
                           java.math.BigInteger::$value)
             = Z(0(#))
           & wellFormed(heap)
           & exc_257_B_0 = null
           & leq(result_227_B_0, Z(7(4(6(3(8(4(7(4(1(2(#))))))))))))
           & geq(result_227_B_0, Z(neglit(8(4(6(3(8(4(7(4(1(2(#)))))))))))))
           & (    leq(result_227_B_0, Z(0(#)))
              <-> leq(add(int::select(heap,
                                      sv_exponent_6_B#39,
                                      java.math.BigInteger::$value),
                          mul(int::select(heap,
                                          java.math.BigInteger::select(heap,
                                                                       null,
                                                                       java.math.BigInteger::$ZERO),
                                          java.math.BigInteger::$value),
                              Z(neglit(1(#))))),
                      Z(0(#))))
           & (    geq(result_227_B_0, Z(0(#)))
              <-> geq(add(int::select(heap,
                                      sv_exponent_6_B#39,
                                      java.math.BigInteger::$value),
                          mul(int::select(heap,
                                          java.math.BigInteger::select(heap,
                                                                       null,
                                                                       java.math.BigInteger::$ZERO),
                                          java.math.BigInteger::$value),
                              Z(neglit(1(#))))),
                      Z(0(#))))
           & RELATED_BY_compareTo_325434207(sv_exponent_6_B#39,
                                            java.math.BigInteger::select(heap,
                                                                         null,
                                                                         java.math.BigInteger::$ZERO),
                                            heap,
                                            sv_exponent_6_B#39,
                                            result_227_B_0,
                                            exc_257_B_0,
                                            heap)
           &   int::select(heap,
                           java.math.BigInteger::select(heap,
                                                        null,
                                                        java.math.BigInteger::$ZERO),
                           java.math.BigInteger::$value)
             = Z(0(#))
           &   boolean::select(heap,
                               java.math.BigInteger::select(heap,
                                                            null,
                                                            java.math.BigInteger::$ZERO),
                               java.lang.Object::<created>)
             = TRUE
           & wellFormed(anon_heap_multiply<<anonHeapFunction>>)
           &   anon(heap, empty, anon_heap_multiply<<anonHeapFunction>>)
             = heapAfter_multiply_B_0
           & (    boolean::select(heap,
                                  result_228_B_0,
                                  java.lang.Object::<created>)
                = TRUE
              |   boolean::select(anon_heap_multiply<<anonHeapFunction>>,
                                  result_228_B_0,
                                  java.lang.Object::<created>)
                = TRUE)
           & (exc_258_B_0 = null)<<impl>>
           & RELATED_BY_multiply_1272441881(sv_p_6_B#38,
                                            sv_exponent_6_B#39,
                                            heap,
                                            sv_p_6_B#38,
                                            result_228_B_0,
                                            exc_258_B_0,
                                            heapAfter_multiply_B_0)
           &   boolean::select(heap,
                               sv_exponent_6_B#39,
                               java.lang.Object::<created>)
             = TRUE
           & !result_228_B_0 = null
           & !lt(result_227_B_0, Z(0(#)))
           & !  java.math.BigInteger::select(heap,
                                             null,
                                             java.math.BigInteger::$ZERO)
              = null
           & !  org.bouncycastle.math.ec.ECPoint::select(sv_heapAtPre_B#40,
                                                         org.bouncycastle.jce.spec.ECNamedCurveParameterSpec::select(sv_heapAtPre_B#40,
                                                                                                                     sv_self_191_B#37,
                                                                                                                     de.polyas.core3.open.crypto.groups.ECGroup::$group),
                                                         org.bouncycastle.jce.spec.ECParameterSpec::$generator)
              = null
           & !  org.bouncycastle.jce.spec.ECNamedCurveParameterSpec::select(sv_heapAtPre_B#40,
                                                                            sv_self_191_B#37,
                                                                            de.polyas.core3.open.crypto.groups.ECGroup::$group)
              = null
           & !  org.bouncycastle.math.ec.custom.sec.SecP256K1Curve::select(sv_heapAtPre_B#40,
                                                                           sv_self_191_B#37,
                                                                           de.polyas.core3.open.crypto.groups.ECGroup::$curve)
              = null
           & !  java.math.BigInteger::select(sv_heapAtPre_B#40,
                                             null,
                                             java.math.BigInteger::$ZERO)
              = null
           & !{exc_256_B:=null
               || heap:=heapAfter_multiply_B_0
               || result_226_B:=result_228_B_0}
                !(  sv_self_191_B#37 = sv_selfAtPost_191_B#42
                  & result_226_B = sv_resultAtPost_226_B#43
                  & exc_256_B = sv_excAtPost_256_B#44
                  & sv_heapAtPost_B#45 = heap)
           & !sv_exponent_6_B#39 = null
           & !sv_p_6_B#38 = null
           & !sv_self_191_B#37 = null)
    | {heap:=sv_heapAtPre_A#31}
        (  wellFormed(sv_heapAtPre_A#31)
         & sv_heapAtPre_A#31 = heap
         &   boolean::select(heap,
                             sv_self_191_A#28,
                             java.lang.Object::<created>)
           = TRUE
         &   de.polyas.core3.open.crypto.groups.ECGroup::exactInstance(sv_self_191_A#28)
           = TRUE
         &   boolean::select(sv_heapAtPre_A#31,
                             sv_p_6_A#29,
                             java.lang.Object::<created>)
           = TRUE
         &   boolean::select(sv_heapAtPre_A#31,
                             sv_exponent_6_A#30,
                             java.lang.Object::<created>)
           = TRUE
         &   int::select(sv_heapAtPre_A#31,
                         java.math.BigInteger::select(sv_heapAtPre_A#31,
                                                      null,
                                                      java.math.BigInteger::$ZERO),
                         java.math.BigInteger::$value)
           = Z(0(#))
         & wellFormed(heap)
         & exc_257_A_0 = null
         & leq(result_227_A_0, Z(7(4(6(3(8(4(7(4(1(2(#))))))))))))
         & geq(result_227_A_0, Z(neglit(8(4(6(3(8(4(7(4(1(2(#)))))))))))))
         & (    leq(result_227_A_0, Z(0(#)))
            <-> leq(add(int::select(heap,
                                    sv_exponent_6_A#30,
                                    java.math.BigInteger::$value),
                        mul(int::select(heap,
                                        java.math.BigInteger::select(heap,
                                                                     null,
                                                                     java.math.BigInteger::$ZERO),
                                        java.math.BigInteger::$value),
                            Z(neglit(1(#))))),
                    Z(0(#))))
         & (    geq(result_227_A_0, Z(0(#)))
            <-> geq(add(int::select(heap,
                                    sv_exponent_6_A#30,
                                    java.math.BigInteger::$value),
                        mul(int::select(heap,
                                        java.math.BigInteger::select(heap,
                                                                     null,
                                                                     java.math.BigInteger::$ZERO),
                                        java.math.BigInteger::$value),
                            Z(neglit(1(#))))),
                    Z(0(#))))
         & RELATED_BY_compareTo_325434207(sv_exponent_6_A#30,
                                          java.math.BigInteger::select(heap,
                                                                       null,
                                                                       java.math.BigInteger::$ZERO),
                                          heap,
                                          sv_exponent_6_A#30,
                                          result_227_A_0,
                                          exc_257_A_0,
                                          heap)
         &   int::select(heap,
                         java.math.BigInteger::select(heap,
                                                      null,
                                                      java.math.BigInteger::$ZERO),
                         java.math.BigInteger::$value)
           = Z(0(#))
         &   boolean::select(heap,
                             java.math.BigInteger::select(heap,
                                                          null,
                                                          java.math.BigInteger::$ZERO),
                             java.lang.Object::<created>)
           = TRUE
         & wellFormed(anon_heap_multiply<<anonHeapFunction>>)
         &   anon(heap, empty, anon_heap_multiply<<anonHeapFunction>>)
           = heapAfter_multiply_A_0
         & (    boolean::select(heap,
                                result_228_A_0,
                                java.lang.Object::<created>)
              = TRUE
            |   boolean::select(anon_heap_multiply<<anonHeapFunction>>,
                                result_228_A_0,
                                java.lang.Object::<created>)
              = TRUE)
         & (exc_258_A_0 = null)<<impl>>
         & RELATED_BY_multiply_1272441881(sv_p_6_A#29,
                                          sv_exponent_6_A#30,
                                          heap,
                                          sv_p_6_A#29,
                                          result_228_A_0,
                                          exc_258_A_0,
                                          heapAfter_multiply_A_0)
         &   boolean::select(heap,
                             sv_exponent_6_A#30,
                             java.lang.Object::<created>)
           = TRUE
         & !result_228_A_0 = null
         & !lt(result_227_A_0, Z(0(#)))
         & !  java.math.BigInteger::select(heap,
                                           null,
                                           java.math.BigInteger::$ZERO)
            = null
         & !  org.bouncycastle.math.ec.ECPoint::select(sv_heapAtPre_A#31,
                                                       org.bouncycastle.jce.spec.ECNamedCurveParameterSpec::select(sv_heapAtPre_A#31,
                                                                                                                   sv_self_191_A#28,
                                                                                                                   de.polyas.core3.open.crypto.groups.ECGroup::$group),
                                                       org.bouncycastle.jce.spec.ECParameterSpec::$generator)
            = null
         & !  org.bouncycastle.jce.spec.ECNamedCurveParameterSpec::select(sv_heapAtPre_A#31,
                                                                          sv_self_191_A#28,
                                                                          de.polyas.core3.open.crypto.groups.ECGroup::$group)
            = null
         & !  org.bouncycastle.math.ec.custom.sec.SecP256K1Curve::select(sv_heapAtPre_A#31,
                                                                         sv_self_191_A#28,
                                                                         de.polyas.core3.open.crypto.groups.ECGroup::$curve)
            = null
         & !  java.math.BigInteger::select(sv_heapAtPre_A#31,
                                           null,
                                           java.math.BigInteger::$ZERO)
            = null
         & !{exc_256_A:=null
             || heap:=heapAfter_multiply_A_0
             || result_226_A:=result_228_A_0}
              !(  sv_self_191_A#28 = sv_selfAtPost_191_A#33
                & result_226_A = sv_resultAtPost_226_A#34
                & exc_256_A = sv_excAtPost_256_A#35
                & sv_heapAtPost_A#36 = heap)
         & !sv_exponent_6_A#30 = null
         & !sv_p_6_A#29 = null
         & !sv_self_191_A#28 = null)
    & {heap:=sv_heapAtPre_B#40}
        (    boolean::select(sv_heapAtPre_B#40,
                             org.bouncycastle.math.ec.ECPoint::select(sv_heapAtPre_B#40,
                                                                      org.bouncycastle.jce.spec.ECNamedCurveParameterSpec::select(sv_heapAtPre_B#40,
                                                                                                                                  sv_self_191_B#37,
                                                                                                                                  de.polyas.core3.open.crypto.groups.ECGroup::$group),
                                                                      org.bouncycastle.jce.spec.ECParameterSpec::$generator),
                             java.lang.Object::<created>)
           = TRUE
         &   boolean::select(sv_heapAtPre_B#40,
                             java.math.BigInteger::select(sv_heapAtPre_B#40,
                                                          null,
                                                          java.math.BigInteger::$ZERO),
                             java.lang.Object::<created>)
           = TRUE
         &   boolean::select(sv_heapAtPre_B#40,
                             org.bouncycastle.jce.spec.ECNamedCurveParameterSpec::select(sv_heapAtPre_B#40,
                                                                                         sv_self_191_B#37,
                                                                                         de.polyas.core3.open.crypto.groups.ECGroup::$group),
                             java.lang.Object::<created>)
           = TRUE
         &   boolean::select(sv_heapAtPre_B#40,
                             org.bouncycastle.math.ec.custom.sec.SecP256K1Curve::select(sv_heapAtPre_B#40,
                                                                                        sv_self_191_B#37,
                                                                                        de.polyas.core3.open.crypto.groups.ECGroup::$curve),
                             java.lang.Object::<created>)
           = TRUE
         & lt(result_227_B_0, Z(0(#)))
         & wellFormed(sv_heapAtPre_B#40)
         & sv_heapAtPre_B#40 = heap
         &   boolean::select(heap,
                             sv_self_191_B#37,
                             java.lang.Object::<created>)
           = TRUE
         &   de.polyas.core3.open.crypto.groups.ECGroup::exactInstance(sv_self_191_B#37)
           = TRUE
         &   boolean::select(sv_heapAtPre_B#40,
                             sv_p_6_B#38,
                             java.lang.Object::<created>)
           = TRUE
         &   boolean::select(sv_heapAtPre_B#40,
                             sv_exponent_6_B#39,
                             java.lang.Object::<created>)
           = TRUE
         &   int::select(sv_heapAtPre_B#40,
                         java.math.BigInteger::select(sv_heapAtPre_B#40,
                                                      null,
                                                      java.math.BigInteger::$ZERO),
                         java.math.BigInteger::$value)
           = Z(0(#))
         & wellFormed(heap)
         & exc_257_B_0 = null
         & leq(result_227_B_0, Z(7(4(6(3(8(4(7(4(1(2(#))))))))))))
         & geq(result_227_B_0, Z(neglit(8(4(6(3(8(4(7(4(1(2(#)))))))))))))
         & (    leq(result_227_B_0, Z(0(#)))
            <-> leq(add(int::select(heap,
                                    sv_exponent_6_B#39,
                                    java.math.BigInteger::$value),
                        mul(int::select(heap,
                                        java.math.BigInteger::select(heap,
                                                                     null,
                                                                     java.math.BigInteger::$ZERO),
                                        java.math.BigInteger::$value),
                            Z(neglit(1(#))))),
                    Z(0(#))))
         & (    geq(result_227_B_0, Z(0(#)))
            <-> geq(add(int::select(heap,
                                    sv_exponent_6_B#39,
                                    java.math.BigInteger::$value),
                        mul(int::select(heap,
                                        java.math.BigInteger::select(heap,
                                                                     null,
                                                                     java.math.BigInteger::$ZERO),
                                        java.math.BigInteger::$value),
                            Z(neglit(1(#))))),
                    Z(0(#))))
         & RELATED_BY_compareTo_325434207(sv_exponent_6_B#39,
                                          java.math.BigInteger::select(heap,
                                                                       null,
                                                                       java.math.BigInteger::$ZERO),
                                          heap,
                                          sv_exponent_6_B#39,
                                          result_227_B_0,
                                          exc_257_B_0,
                                          heap)
         &   int::select(heap,
                         java.math.BigInteger::select(heap,
                                                      null,
                                                      java.math.BigInteger::$ZERO),
                         java.math.BigInteger::$value)
           = Z(0(#))
         &   boolean::select(heap,
                             java.math.BigInteger::select(heap,
                                                          null,
                                                          java.math.BigInteger::$ZERO),
                             java.lang.Object::<created>)
           = TRUE
         &   boolean::select(heap, result_228_B_1, java.lang.Object::<created>)
           = TRUE
         &   int::select(heap,
                         org.bouncycastle.math.ec.custom.sec.SecP256K1Curve::select(heap,
                                                                                    sv_self_191_B#37,
                                                                                    de.polyas.core3.open.crypto.groups.ECGroup::$curve),
                         org.bouncycastle.math.ec.ECCurve::$order)
           = int::select(heap, result_228_B_1, java.math.BigInteger::$value)
         & (exc_258_B_1 = null)<<impl>>
         & RELATED_BY_getOrder_757678341(org.bouncycastle.math.ec.custom.sec.SecP256K1Curve::select(heap,
                                                                                                    sv_self_191_B#37,
                                                                                                    de.polyas.core3.open.crypto.groups.ECGroup::$curve),
                                         heap,
                                         org.bouncycastle.math.ec.custom.sec.SecP256K1Curve::select(heap,
                                                                                                    sv_self_191_B#37,
                                                                                                    de.polyas.core3.open.crypto.groups.ECGroup::$curve),
                                         result_228_B_1,
                                         exc_258_B_1,
                                         heap)
         & wellFormed(anon_heap_mod<<anonHeapFunction>>)
         &   anon(heap, empty, anon_heap_mod<<anonHeapFunction>>)
           = heapAfter_mod_B_0
         & (    boolean::select(heap,
                                result_229_B_0,
                                java.lang.Object::<created>)
              = TRUE
            |   boolean::select(anon_heap_mod<<anonHeapFunction>>,
                                result_229_B_0,
                                java.lang.Object::<created>)
              = TRUE)
         &   \if (  boolean::select(heap,
                                    sv_exponent_6_B#39,
                                    java.lang.Object::<created>)
                  = TRUE)
                 \then (int::select(heap,
                                    sv_exponent_6_B#39,
                                    java.math.BigInteger::$value))
                 \else (int::select(anon_heap_mod<<anonHeapFunction>>,
                                    sv_exponent_6_B#39,
                                    java.math.BigInteger::$value))
           = java_math_BigInteger_value_0_B_0<<selectSK>>
         &   \if (  boolean::select(heap,
                                    result_229_B_0,
                                    java.lang.Object::<created>)
                  = TRUE)
                 \then (int::select(heap,
                                    result_229_B_0,
                                    java.math.BigInteger::$value))
                 \else (int::select(anon_heap_mod<<anonHeapFunction>>,
                                    result_229_B_0,
                                    java.math.BigInteger::$value))
           = jmod(java_math_BigInteger_value_0_B_0<<selectSK>>,
                  int::select(heap,
                              result_228_B_1,
                              java.math.BigInteger::$value))
         & java_math_BigInteger_value_3_B_0<<selectSK>> = Z(0(#))
         & (exc_259_B_0 = null)<<impl>>
         & RELATED_BY_mod_596311583(sv_exponent_6_B#39,
                                    result_228_B_1,
                                    heap,
                                    sv_exponent_6_B#39,
                                    result_229_B_0,
                                    exc_259_B_0,
                                    heapAfter_mod_B_0)
         & wellFormed(anon_heap_multiply<<anonHeapFunction>>)
         &   anon(heapAfter_mod_B_0,
                  empty,
                  anon_heap_multiply<<anonHeapFunction>>)
           = heapAfter_multiply_B_1
         & exc_260_B_0 = null
         & (    boolean::select(heap,
                                result_230_B_0,
                                java.lang.Object::<created>)
              = TRUE
            |   boolean::select(anon_heap_mod<<anonHeapFunction>>,
                                result_230_B_0,
                                java.lang.Object::<created>)
              = TRUE
            |   boolean::select(anon_heap_multiply<<anonHeapFunction>>,
                                result_230_B_0,
                                java.lang.Object::<created>)
              = TRUE)
         & RELATED_BY_multiply_1272441881(sv_p_6_B#38,
                                          result_229_B_0,
                                          heapAfter_mod_B_0,
                                          sv_p_6_B#38,
                                          result_230_B_0,
                                          exc_260_B_0,
                                          heapAfter_multiply_B_1)
         & wellFormed(heapAfter_mod_B_0)
         & !result_230_B_0 = null
         & !result_229_B_0 = null
         & !result_228_B_1 = null
         & !  java.math.BigInteger::select(heap,
                                           null,
                                           java.math.BigInteger::$ZERO)
            = null
         & !  org.bouncycastle.math.ec.ECPoint::select(sv_heapAtPre_B#40,
                                                       org.bouncycastle.jce.spec.ECNamedCurveParameterSpec::select(sv_heapAtPre_B#40,
                                                                                                                   sv_self_191_B#37,
                                                                                                                   de.polyas.core3.open.crypto.groups.ECGroup::$group),
                                                       org.bouncycastle.jce.spec.ECParameterSpec::$generator)
            = null
         & !  org.bouncycastle.jce.spec.ECNamedCurveParameterSpec::select(sv_heapAtPre_B#40,
                                                                          sv_self_191_B#37,
                                                                          de.polyas.core3.open.crypto.groups.ECGroup::$group)
            = null
         & !  org.bouncycastle.math.ec.custom.sec.SecP256K1Curve::select(sv_heapAtPre_B#40,
                                                                         sv_self_191_B#37,
                                                                         de.polyas.core3.open.crypto.groups.ECGroup::$curve)
            = null
         & !  java.math.BigInteger::select(sv_heapAtPre_B#40,
                                           null,
                                           java.math.BigInteger::$ZERO)
            = null
         & !{exc_256_B:=null
             || heap:=heapAfter_multiply_B_1
             || result_226_B:=result_230_B_0}
              !(  sv_self_191_B#37 = sv_selfAtPost_191_B#42
                & result_226_B = sv_resultAtPost_226_B#43
                & exc_256_B = sv_excAtPost_256_B#44
                & sv_heapAtPost_B#45 = heap)
         & !sv_exponent_6_B#39 = null
         & !sv_p_6_B#38 = null
         & !sv_self_191_B#37 = null)
    | {heap:=sv_heapAtPre_A#31}
        (    boolean::select(sv_heapAtPre_A#31,
                             org.bouncycastle.math.ec.ECPoint::select(sv_heapAtPre_A#31,
                                                                      org.bouncycastle.jce.spec.ECNamedCurveParameterSpec::select(sv_heapAtPre_A#31,
                                                                                                                                  sv_self_191_A#28,
                                                                                                                                  de.polyas.core3.open.crypto.groups.ECGroup::$group),
                                                                      org.bouncycastle.jce.spec.ECParameterSpec::$generator),
                             java.lang.Object::<created>)
           = TRUE
         &   boolean::select(sv_heapAtPre_A#31,
                             java.math.BigInteger::select(sv_heapAtPre_A#31,
                                                          null,
                                                          java.math.BigInteger::$ZERO),
                             java.lang.Object::<created>)
           = TRUE
         &   boolean::select(sv_heapAtPre_A#31,
                             org.bouncycastle.jce.spec.ECNamedCurveParameterSpec::select(sv_heapAtPre_A#31,
                                                                                         sv_self_191_A#28,
                                                                                         de.polyas.core3.open.crypto.groups.ECGroup::$group),
                             java.lang.Object::<created>)
           = TRUE
         &   boolean::select(sv_heapAtPre_A#31,
                             org.bouncycastle.math.ec.custom.sec.SecP256K1Curve::select(sv_heapAtPre_A#31,
                                                                                        sv_self_191_A#28,
                                                                                        de.polyas.core3.open.crypto.groups.ECGroup::$curve),
                             java.lang.Object::<created>)
           = TRUE
         & lt(result_227_A_0, Z(0(#)))
         & wellFormed(sv_heapAtPre_A#31)
         & sv_heapAtPre_A#31 = heap
         &   boolean::select(heap,
                             sv_self_191_A#28,
                             java.lang.Object::<created>)
           = TRUE
         &   de.polyas.core3.open.crypto.groups.ECGroup::exactInstance(sv_self_191_A#28)
           = TRUE
         &   boolean::select(sv_heapAtPre_A#31,
                             sv_p_6_A#29,
                             java.lang.Object::<created>)
           = TRUE
         &   boolean::select(sv_heapAtPre_A#31,
                             sv_exponent_6_A#30,
                             java.lang.Object::<created>)
           = TRUE
         &   int::select(sv_heapAtPre_A#31,
                         java.math.BigInteger::select(sv_heapAtPre_A#31,
                                                      null,
                                                      java.math.BigInteger::$ZERO),
                         java.math.BigInteger::$value)
           = Z(0(#))
         & wellFormed(heap)
         & exc_257_A_0 = null
         & leq(result_227_A_0, Z(7(4(6(3(8(4(7(4(1(2(#))))))))))))
         & geq(result_227_A_0, Z(neglit(8(4(6(3(8(4(7(4(1(2(#)))))))))))))
         & (    leq(result_227_A_0, Z(0(#)))
            <-> leq(add(int::select(heap,
                                    sv_exponent_6_A#30,
                                    java.math.BigInteger::$value),
                        mul(int::select(heap,
                                        java.math.BigInteger::select(heap,
                                                                     null,
                                                                     java.math.BigInteger::$ZERO),
                                        java.math.BigInteger::$value),
                            Z(neglit(1(#))))),
                    Z(0(#))))
         & (    geq(result_227_A_0, Z(0(#)))
            <-> geq(add(int::select(heap,
                                    sv_exponent_6_A#30,
                                    java.math.BigInteger::$value),
                        mul(int::select(heap,
                                        java.math.BigInteger::select(heap,
                                                                     null,
                                                                     java.math.BigInteger::$ZERO),
                                        java.math.BigInteger::$value),
                            Z(neglit(1(#))))),
                    Z(0(#))))
         & RELATED_BY_compareTo_325434207(sv_exponent_6_A#30,
                                          java.math.BigInteger::select(heap,
                                                                       null,
                                                                       java.math.BigInteger::$ZERO),
                                          heap,
                                          sv_exponent_6_A#30,
                                          result_227_A_0,
                                          exc_257_A_0,
                                          heap)
         &   int::select(heap,
                         java.math.BigInteger::select(heap,
                                                      null,
                                                      java.math.BigInteger::$ZERO),
                         java.math.BigInteger::$value)
           = Z(0(#))
         &   boolean::select(heap,
                             java.math.BigInteger::select(heap,
                                                          null,
                                                          java.math.BigInteger::$ZERO),
                             java.lang.Object::<created>)
           = TRUE
         &   boolean::select(heap, result_228_A_1, java.lang.Object::<created>)
           = TRUE
         &   int::select(heap,
                         org.bouncycastle.math.ec.custom.sec.SecP256K1Curve::select(heap,
                                                                                    sv_self_191_A#28,
                                                                                    de.polyas.core3.open.crypto.groups.ECGroup::$curve),
                         org.bouncycastle.math.ec.ECCurve::$order)
           = int::select(heap, result_228_A_1, java.math.BigInteger::$value)
         & (exc_258_A_1 = null)<<impl>>
         & RELATED_BY_getOrder_757678341(org.bouncycastle.math.ec.custom.sec.SecP256K1Curve::select(heap,
                                                                                                    sv_self_191_A#28,
                                                                                                    de.polyas.core3.open.crypto.groups.ECGroup::$curve),
                                         heap,
                                         org.bouncycastle.math.ec.custom.sec.SecP256K1Curve::select(heap,
                                                                                                    sv_self_191_A#28,
                                                                                                    de.polyas.core3.open.crypto.groups.ECGroup::$curve),
                                         result_228_A_1,
                                         exc_258_A_1,
                                         heap)
         & wellFormed(anon_heap_mod<<anonHeapFunction>>)
         &   anon(heap, empty, anon_heap_mod<<anonHeapFunction>>)
           = heapAfter_mod_A_0
         & (    boolean::select(heap,
                                result_229_A_0,
                                java.lang.Object::<created>)
              = TRUE
            |   boolean::select(anon_heap_mod<<anonHeapFunction>>,
                                result_229_A_0,
                                java.lang.Object::<created>)
              = TRUE)
         &   \if (  boolean::select(heap,
                                    sv_exponent_6_A#30,
                                    java.lang.Object::<created>)
                  = TRUE)
                 \then (int::select(heap,
                                    sv_exponent_6_A#30,
                                    java.math.BigInteger::$value))
                 \else (int::select(anon_heap_mod<<anonHeapFunction>>,
                                    sv_exponent_6_A#30,
                                    java.math.BigInteger::$value))
           = java_math_BigInteger_value_0_A_0<<selectSK>>
         &   \if (  boolean::select(heap,
                                    result_229_A_0,
                                    java.lang.Object::<created>)
                  = TRUE)
                 \then (int::select(heap,
                                    result_229_A_0,
                                    java.math.BigInteger::$value))
                 \else (int::select(anon_heap_mod<<anonHeapFunction>>,
                                    result_229_A_0,
                                    java.math.BigInteger::$value))
           = jmod(java_math_BigInteger_value_0_A_0<<selectSK>>,
                  int::select(heap,
                              result_228_A_1,
                              java.math.BigInteger::$value))
         & java_math_BigInteger_value_3_A_0<<selectSK>> = Z(0(#))
         & (exc_259_A_0 = null)<<impl>>
         & RELATED_BY_mod_596311583(sv_exponent_6_A#30,
                                    result_228_A_1,
                                    heap,
                                    sv_exponent_6_A#30,
                                    result_229_A_0,
                                    exc_259_A_0,
                                    heapAfter_mod_A_0)
         & wellFormed(anon_heap_multiply<<anonHeapFunction>>)
         &   anon(heapAfter_mod_A_0,
                  empty,
                  anon_heap_multiply<<anonHeapFunction>>)
           = heapAfter_multiply_A_1
         & exc_260_A_0 = null
         & (    boolean::select(heap,
                                result_230_A_0,
                                java.lang.Object::<created>)
              = TRUE
            |   boolean::select(anon_heap_mod<<anonHeapFunction>>,
                                result_230_A_0,
                                java.lang.Object::<created>)
              = TRUE
            |   boolean::select(anon_heap_multiply<<anonHeapFunction>>,
                                result_230_A_0,
                                java.lang.Object::<created>)
              = TRUE)
         & RELATED_BY_multiply_1272441881(sv_p_6_A#29,
                                          result_229_A_0,
                                          heapAfter_mod_A_0,
                                          sv_p_6_A#29,
                                          result_230_A_0,
                                          exc_260_A_0,
                                          heapAfter_multiply_A_1)
         & wellFormed(heapAfter_mod_A_0)
         & !result_230_A_0 = null
         & !result_229_A_0 = null
         & !result_228_A_1 = null
         & !  java.math.BigInteger::select(heap,
                                           null,
                                           java.math.BigInteger::$ZERO)
            = null
         & !  org.bouncycastle.math.ec.ECPoint::select(sv_heapAtPre_A#31,
                                                       org.bouncycastle.jce.spec.ECNamedCurveParameterSpec::select(sv_heapAtPre_A#31,
                                                                                                                   sv_self_191_A#28,
                                                                                                                   de.polyas.core3.open.crypto.groups.ECGroup::$group),
                                                       org.bouncycastle.jce.spec.ECParameterSpec::$generator)
            = null
         & !  org.bouncycastle.jce.spec.ECNamedCurveParameterSpec::select(sv_heapAtPre_A#31,
                                                                          sv_self_191_A#28,
                                                                          de.polyas.core3.open.crypto.groups.ECGroup::$group)
            = null
         & !  org.bouncycastle.math.ec.custom.sec.SecP256K1Curve::select(sv_heapAtPre_A#31,
                                                                         sv_self_191_A#28,
                                                                         de.polyas.core3.open.crypto.groups.ECGroup::$curve)
            = null
         & !  java.math.BigInteger::select(sv_heapAtPre_A#31,
                                           null,
                                           java.math.BigInteger::$ZERO)
            = null
         & !{exc_256_A:=null
             || heap:=heapAfter_multiply_A_1
             || result_226_A:=result_230_A_0}
              !(  sv_self_191_A#28 = sv_selfAtPost_191_A#33
                & result_226_A = sv_resultAtPost_226_A#34
                & exc_256_A = sv_excAtPost_256_A#35
                & sv_heapAtPost_A#36 = heap)
         & !sv_exponent_6_A#30 = null
         & !sv_p_6_A#29 = null
         & !sv_self_191_A#28 = null)
    & {heap:=sv_heapAtPre_B#40}
        (    boolean::select(sv_heapAtPre_B#40,
                             org.bouncycastle.math.ec.ECPoint::select(sv_heapAtPre_B#40,
                                                                      org.bouncycastle.jce.spec.ECNamedCurveParameterSpec::select(sv_heapAtPre_B#40,
                                                                                                                                  sv_self_191_B#37,
                                                                                                                                  de.polyas.core3.open.crypto.groups.ECGroup::$group),
                                                                      org.bouncycastle.jce.spec.ECParameterSpec::$generator),
                             java.lang.Object::<created>)
           = TRUE
         &   boolean::select(sv_heapAtPre_B#40,
                             java.math.BigInteger::select(sv_heapAtPre_B#40,
                                                          null,
                                                          java.math.BigInteger::$ZERO),
                             java.lang.Object::<created>)
           = TRUE
         &   boolean::select(sv_heapAtPre_B#40,
                             org.bouncycastle.jce.spec.ECNamedCurveParameterSpec::select(sv_heapAtPre_B#40,
                                                                                         sv_self_191_B#37,
                                                                                         de.polyas.core3.open.crypto.groups.ECGroup::$group),
                             java.lang.Object::<created>)
           = TRUE
         &   boolean::select(sv_heapAtPre_B#40,
                             org.bouncycastle.math.ec.custom.sec.SecP256K1Curve::select(sv_heapAtPre_B#40,
                                                                                        sv_self_191_B#37,
                                                                                        de.polyas.core3.open.crypto.groups.ECGroup::$curve),
                             java.lang.Object::<created>)
           = TRUE
         & lt(result_227_B_0, Z(0(#)))
         & wellFormed(sv_heapAtPre_B#40)
         & sv_heapAtPre_B#40 = heap
         &   boolean::select(heap,
                             sv_self_191_B#37,
                             java.lang.Object::<created>)
           = TRUE
         &   de.polyas.core3.open.crypto.groups.ECGroup::exactInstance(sv_self_191_B#37)
           = TRUE
         &   boolean::select(sv_heapAtPre_B#40,
                             sv_p_6_B#38,
                             java.lang.Object::<created>)
           = TRUE
         &   boolean::select(sv_heapAtPre_B#40,
                             sv_exponent_6_B#39,
                             java.lang.Object::<created>)
           = TRUE
         &   int::select(sv_heapAtPre_B#40,
                         java.math.BigInteger::select(sv_heapAtPre_B#40,
                                                      null,
                                                      java.math.BigInteger::$ZERO),
                         java.math.BigInteger::$value)
           = Z(0(#))
         & wellFormed(heap)
         & exc_257_B_0 = null
         & leq(result_227_B_0, Z(7(4(6(3(8(4(7(4(1(2(#))))))))))))
         & geq(result_227_B_0, Z(neglit(8(4(6(3(8(4(7(4(1(2(#)))))))))))))
         & (    leq(result_227_B_0, Z(0(#)))
            <-> leq(add(int::select(heap,
                                    sv_exponent_6_B#39,
                                    java.math.BigInteger::$value),
                        mul(int::select(heap,
                                        java.math.BigInteger::select(heap,
                                                                     null,
                                                                     java.math.BigInteger::$ZERO),
                                        java.math.BigInteger::$value),
                            Z(neglit(1(#))))),
                    Z(0(#))))
         & (    geq(result_227_B_0, Z(0(#)))
            <-> geq(add(int::select(heap,
                                    sv_exponent_6_B#39,
                                    java.math.BigInteger::$value),
                        mul(int::select(heap,
                                        java.math.BigInteger::select(heap,
                                                                     null,
                                                                     java.math.BigInteger::$ZERO),
                                        java.math.BigInteger::$value),
                            Z(neglit(1(#))))),
                    Z(0(#))))
         & RELATED_BY_compareTo_325434207(sv_exponent_6_B#39,
                                          java.math.BigInteger::select(heap,
                                                                       null,
                                                                       java.math.BigInteger::$ZERO),
                                          heap,
                                          sv_exponent_6_B#39,
                                          result_227_B_0,
                                          exc_257_B_0,
                                          heap)
         &   int::select(heap,
                         java.math.BigInteger::select(heap,
                                                      null,
                                                      java.math.BigInteger::$ZERO),
                         java.math.BigInteger::$value)
           = Z(0(#))
         &   boolean::select(heap,
                             java.math.BigInteger::select(heap,
                                                          null,
                                                          java.math.BigInteger::$ZERO),
                             java.lang.Object::<created>)
           = TRUE
         &   boolean::select(heap, result_228_B_1, java.lang.Object::<created>)
           = TRUE
         &   int::select(heap,
                         org.bouncycastle.math.ec.custom.sec.SecP256K1Curve::select(heap,
                                                                                    sv_self_191_B#37,
                                                                                    de.polyas.core3.open.crypto.groups.ECGroup::$curve),
                         org.bouncycastle.math.ec.ECCurve::$order)
           = int::select(heap, result_228_B_1, java.math.BigInteger::$value)
         & (exc_258_B_1 = null)<<impl>>
         & RELATED_BY_getOrder_757678341(org.bouncycastle.math.ec.custom.sec.SecP256K1Curve::select(heap,
                                                                                                    sv_self_191_B#37,
                                                                                                    de.polyas.core3.open.crypto.groups.ECGroup::$curve),
                                         heap,
                                         org.bouncycastle.math.ec.custom.sec.SecP256K1Curve::select(heap,
                                                                                                    sv_self_191_B#37,
                                                                                                    de.polyas.core3.open.crypto.groups.ECGroup::$curve),
                                         result_228_B_1,
                                         exc_258_B_1,
                                         heap)
         & wellFormed(anon_heap_mod<<anonHeapFunction>>)
         &   anon(heap, empty, anon_heap_mod<<anonHeapFunction>>)
           = heapAfter_mod_B_0
         & (    boolean::select(heap,
                                result_229_B_0,
                                java.lang.Object::<created>)
              = TRUE
            |   boolean::select(anon_heap_mod<<anonHeapFunction>>,
                                result_229_B_0,
                                java.lang.Object::<created>)
              = TRUE)
         &   \if (  boolean::select(heap,
                                    sv_exponent_6_B#39,
                                    java.lang.Object::<created>)
                  = TRUE)
                 \then (int::select(heap,
                                    sv_exponent_6_B#39,
                                    java.math.BigInteger::$value))
                 \else (int::select(anon_heap_mod<<anonHeapFunction>>,
                                    sv_exponent_6_B#39,
                                    java.math.BigInteger::$value))
           = java_math_BigInteger_value_0_B_0<<selectSK>>
         &   \if (  boolean::select(heap,
                                    result_229_B_0,
                                    java.lang.Object::<created>)
                  = TRUE)
                 \then (int::select(heap,
                                    result_229_B_0,
                                    java.math.BigInteger::$value))
                 \else (int::select(anon_heap_mod<<anonHeapFunction>>,
                                    result_229_B_0,
                                    java.math.BigInteger::$value))
           = jmod(java_math_BigInteger_value_0_B_0<<selectSK>>,
                  int::select(heap,
                              result_228_B_1,
                              java.math.BigInteger::$value))
         & java_math_BigInteger_value_3_B_0<<selectSK>> = Z(0(#))
         & (exc_259_B_0 = null)<<impl>>
         & RELATED_BY_mod_596311583(sv_exponent_6_B#39,
                                    result_228_B_1,
                                    heap,
                                    sv_exponent_6_B#39,
                                    result_229_B_0,
                                    exc_259_B_0,
                                    heapAfter_mod_B_0)
         & wellFormed(anon_heap_multiply<<anonHeapFunction>>)
         &   anon(heapAfter_mod_B_0,
                  empty,
                  anon_heap_multiply<<anonHeapFunction>>)
           = heapAfter_multiply_B_1
         & exc_260_B_0 = null
         & (    boolean::select(heap,
                                result_230_B_0,
                                java.lang.Object::<created>)
              = TRUE
            |   boolean::select(anon_heap_mod<<anonHeapFunction>>,
                                result_230_B_0,
                                java.lang.Object::<created>)
              = TRUE
            |   boolean::select(anon_heap_multiply<<anonHeapFunction>>,
                                result_230_B_0,
                                java.lang.Object::<created>)
              = TRUE)
         & RELATED_BY_multiply_1272441881(sv_p_6_B#38,
                                          result_229_B_0,
                                          heapAfter_mod_B_0,
                                          sv_p_6_B#38,
                                          result_230_B_0,
                                          exc_260_B_0,
                                          heapAfter_multiply_B_1)
         & wellFormed(heapAfter_mod_B_0)
         & !result_230_B_0 = null
         & !result_229_B_0 = null
         & !result_228_B_1 = null
         & !  java.math.BigInteger::select(heap,
                                           null,
                                           java.math.BigInteger::$ZERO)
            = null
         & !  org.bouncycastle.math.ec.ECPoint::select(sv_heapAtPre_B#40,
                                                       org.bouncycastle.jce.spec.ECNamedCurveParameterSpec::select(sv_heapAtPre_B#40,
                                                                                                                   sv_self_191_B#37,
                                                                                                                   de.polyas.core3.open.crypto.groups.ECGroup::$group),
                                                       org.bouncycastle.jce.spec.ECParameterSpec::$generator)
            = null
         & !  org.bouncycastle.jce.spec.ECNamedCurveParameterSpec::select(sv_heapAtPre_B#40,
                                                                          sv_self_191_B#37,
                                                                          de.polyas.core3.open.crypto.groups.ECGroup::$group)
            = null
         & !  org.bouncycastle.math.ec.custom.sec.SecP256K1Curve::select(sv_heapAtPre_B#40,
                                                                         sv_self_191_B#37,
                                                                         de.polyas.core3.open.crypto.groups.ECGroup::$curve)
            = null
         & !  java.math.BigInteger::select(sv_heapAtPre_B#40,
                                           null,
                                           java.math.BigInteger::$ZERO)
            = null
         & !{exc_256_B:=null
             || heap:=heapAfter_multiply_B_1
             || result_226_B:=result_230_B_0}
              !(  sv_self_191_B#37 = sv_selfAtPost_191_B#42
                & result_226_B = sv_resultAtPost_226_B#43
                & exc_256_B = sv_excAtPost_256_B#44
                & sv_heapAtPost_B#45 = heap)
         & !sv_exponent_6_B#39 = null
         & !sv_p_6_B#38 = null
         & !sv_self_191_B#37 = null)
  )
  \heuristics ( concrete )
};

Use_information_flow_contract_for_multiply_1272441881_0 {
  \schemaVar \term java.math.BigInteger find_exponentPos#75;
  \schemaVar \term Heap find_heap#78;
  \schemaVar \term org.bouncycastle.math.ec.ECPoint find__p_6#74;
  \schemaVar \term org.bouncycastle.math.ec.ECPoint find_result_230#76;
  \schemaVar \term java.lang.Throwable find_exc_260#77;
  \schemaVar \term Heap find_heapAfter_multiply#79;
  \schemaVar \term java.math.BigInteger assumes_exponentPos#81;
  \schemaVar \term Heap assumes_heap#84;
  \schemaVar \term org.bouncycastle.math.ec.ECPoint assumes__p_6#80;
  \schemaVar \term org.bouncycastle.math.ec.ECPoint assumes_result_230#82;
  \schemaVar \term java.lang.Throwable assumes_exc_260#83;
  \schemaVar \term Heap assumes_heapAfter_multiply#85;
  
  \assumes ( RELATED_BY_multiply_1272441881(assumes__p_6#80,
                                            assumes_exponentPos#81,
                                            assumes_heap#84,
                                            assumes__p_6#80,
                                            assumes_result_230#82,
                                            assumes_exc_260#83,
                                            assumes_heapAfter_multiply#85)
            ⟹
             
  )
  \find (
    RELATED_BY_multiply_1272441881(find__p_6#74,
                                   find_exponentPos#75,
                                   find_heap#78,
                                   find__p_6#74,
                                   find_result_230#76,
                                   find_exc_260#77,
                                   find_heapAfter_multiply#79)
  )
  \antecedentPolarity
  \replacewith (
    RELATED_BY_multiply_1272441881(find__p_6#74,
                                   find_exponentPos#75,
                                   find_heap#78,
                                   find__p_6#74,
                                   find_result_230#76,
                                   find_exc_260#77,
                                   find_heapAfter_multiply#79)
  )
  \add (      (java.lang.Object::<inv>(find_heap#78, find__p_6#74)<<impl>>
            & (!(find_exponentPos#75 = null)<<origin("requires @ file ECPoint.java @ line 13","[]")>>)<<impl,
                                                                                                        origin("requires @ file ECPoint.java @ line 13","[]")>>)<<SC>>
            & ((  java.lang.Object::<inv>(assumes_heap#84, assumes__p_6#80)<<impl>>
                & (!(assumes_exponentPos#81 = null)<<origin("requires @ file ECPoint.java @ line 13","[]")>>)<<impl,
                                                                                                               origin("requires @ file ECPoint.java @ line 13","[]")>>)<<SC>>)
         ->     int::select(find_heap#78,
                            find__p_6#74,
                            org.bouncycastle.math.ec.ECPoint::$value)
              = int::select(assumes_heap#84,
                            assumes__p_6#80,
                            org.bouncycastle.math.ec.ECPoint::$value)
            &   int::select(find_heap#78,
                            find_exponentPos#75,
                            java.math.BigInteger::$value)
              = int::select(assumes_heap#84,
                            assumes_exponentPos#81,
                            java.math.BigInteger::$value)
         -> (  int::select(find_heapAfter_multiply#79,
                           find_result_230#76,
                           org.bouncycastle.math.ec.ECPoint::$value)
             = int::select(assumes_heapAfter_multiply#85,
                           assumes_result_230#82,
                           org.bouncycastle.math.ec.ECPoint::$value))<<postCondition>>
        ⟹
         
  )
  \heuristics ( information_flow_contract_appl )
};

Use_information_flow_contract_for_mod_596311583 {
  \schemaVar \term java.math.BigInteger find_var_3#63;
  \schemaVar \term Heap find_heap#66;
  \schemaVar \term java.math.BigInteger find_var_2#62;
  \schemaVar \term java.math.BigInteger find_result_229#64;
  \schemaVar \term java.lang.Throwable find_exc_259#65;
  \schemaVar \term Heap find_heapAfter_mod#67;
  \schemaVar \term java.math.BigInteger assumes_var_3#69;
  \schemaVar \term Heap assumes_heap#72;
  \schemaVar \term java.math.BigInteger assumes_var_2#68;
  \schemaVar \term java.math.BigInteger assumes_result_229#70;
  \schemaVar \term java.lang.Throwable assumes_exc_259#71;
  \schemaVar \term Heap assumes_heapAfter_mod#73;
  
  \assumes ( RELATED_BY_mod_596311583(assumes_var_2#68,
                                      assumes_var_3#69,
                                      assumes_heap#72,
                                      assumes_var_2#68,
                                      assumes_result_229#70,
                                      assumes_exc_259#71,
                                      assumes_heapAfter_mod#73)
            ⟹
             
  )
  \find (
    RELATED_BY_mod_596311583(find_var_2#62,
                             find_var_3#63,
                             find_heap#66,
                             find_var_2#62,
                             find_result_229#64,
                             find_exc_259#65,
                             find_heapAfter_mod#67)
  )
  \antecedentPolarity
  \replacewith (
    RELATED_BY_mod_596311583(find_var_2#62,
                             find_var_3#63,
                             find_heap#66,
                             find_var_2#62,
                             find_result_229#64,
                             find_exc_259#65,
                             find_heapAfter_mod#67)
  )
  \add (      (java.lang.Object::<inv>(find_heap#66, find_var_2#62)<<impl>>
            & (!(find_var_3#63 = null)<<origin("requires @ file BigInteger.java @ line 31","[]")>>)<<impl,
                                                                                                     origin("requires @ file BigInteger.java @ line 31","[]")>>)<<SC>>
            & ((  java.lang.Object::<inv>(assumes_heap#72, assumes_var_2#68)<<impl>>
                & (!(assumes_var_3#69 = null)<<origin("requires @ file BigInteger.java @ line 31","[]")>>)<<impl,
                                                                                                            origin("requires @ file BigInteger.java @ line 31","[]")>>)<<SC>>)
         ->     int::select(find_heap#66,
                            find_var_2#62,
                            java.math.BigInteger::$value)
              = int::select(assumes_heap#72,
                            assumes_var_2#68,
                            java.math.BigInteger::$value)
            &   int::select(find_heap#66,
                            find_var_3#63,
                            java.math.BigInteger::$value)
              = int::select(assumes_heap#72,
                            assumes_var_3#69,
                            java.math.BigInteger::$value)
         -> (  int::select(find_heapAfter_mod#67,
                           find_result_229#64,
                           java.math.BigInteger::$value)
             = int::select(assumes_heapAfter_mod#73,
                           assumes_result_229#70,
                           java.math.BigInteger::$value))<<postCondition>>
        ⟹
         
  )
  \heuristics ( information_flow_contract_appl )
};

Use_information_flow_contract_for_getOrder_757678341 {
  \schemaVar \term org.bouncycastle.math.ec.custom.sec.SecP256K1Curve find_s#54;
  \schemaVar \term java.math.BigInteger find_result_228#55;
  \schemaVar \term java.lang.Throwable find_exc_258#56;
  \schemaVar \term Heap find_heap#57;
  \schemaVar \term org.bouncycastle.math.ec.custom.sec.SecP256K1Curve assumes_s#58;
  \schemaVar \term java.math.BigInteger assumes_result_228#59;
  \schemaVar \term java.lang.Throwable assumes_exc_258#60;
  \schemaVar \term Heap assumes_heap#61;
  
  \assumes ( RELATED_BY_getOrder_757678341(assumes_s#58,
                                           assumes_heap#61,
                                           assumes_s#58,
                                           assumes_result_228#59,
                                           assumes_exc_258#60,
                                           assumes_heap#61)
            ⟹
             
  )
  \find (
    RELATED_BY_getOrder_757678341(find_s#54,
                                  find_heap#57,
                                  find_s#54,
                                  find_result_228#55,
                                  find_exc_258#56,
                                  find_heap#57)
  )
  \antecedentPolarity
  \replacewith (
    RELATED_BY_getOrder_757678341(find_s#54,
                                  find_heap#57,
                                  find_s#54,
                                  find_result_228#55,
                                  find_exc_258#56,
                                  find_heap#57)
  )
  \add (      java.lang.Object::<inv>(find_heap#57, find_s#54)<<impl>>
            & java.lang.Object::<inv>(assumes_heap#61, assumes_s#58)<<impl>>
         ->   int::select(find_heap#57,
                          find_s#54,
                          org.bouncycastle.math.ec.ECCurve::$order)
            = int::select(assumes_heap#61,
                          assumes_s#58,
                          org.bouncycastle.math.ec.ECCurve::$order)
         -> (  int::select(find_heap#57,
                           find_result_228#55,
                           java.math.BigInteger::$value)
             = int::select(assumes_heap#61,
                           assumes_result_228#59,
                           java.math.BigInteger::$value))<<postCondition>>
        ⟹
         
  )
  \heuristics ( information_flow_contract_appl )
};

Use_information_flow_contract_for_multiply_1272441881 {
  \schemaVar \term java.math.BigInteger find_exponentPos#41;
  \schemaVar \term Heap find_heap#44;
  \schemaVar \term org.bouncycastle.math.ec.ECPoint find__p_6#40;
  \schemaVar \term org.bouncycastle.math.ec.ECPoint find_result_228#42;
  \schemaVar \term java.lang.Throwable find_exc_258#43;
  \schemaVar \term Heap find_heapAfter_multiply#45;
  \schemaVar \term java.math.BigInteger assumes_exponentPos#47;
  \schemaVar \term Heap assumes_heap#50;
  \schemaVar \term org.bouncycastle.math.ec.ECPoint assumes__p_6#46;
  \schemaVar \term org.bouncycastle.math.ec.ECPoint assumes_result_228#48;
  \schemaVar \term java.lang.Throwable assumes_exc_258#49;
  \schemaVar \term Heap assumes_heapAfter_multiply#51;
  
  \assumes ( RELATED_BY_multiply_1272441881(assumes__p_6#46,
                                            assumes_exponentPos#47,
                                            assumes_heap#50,
                                            assumes__p_6#46,
                                            assumes_result_228#48,
                                            assumes_exc_258#49,
                                            assumes_heapAfter_multiply#51)
            ⟹
             
  )
  \find (
    RELATED_BY_multiply_1272441881(find__p_6#40,
                                   find_exponentPos#41,
                                   find_heap#44,
                                   find__p_6#40,
                                   find_result_228#42,
                                   find_exc_258#43,
                                   find_heapAfter_multiply#45)
  )
  \antecedentPolarity
  \replacewith (
    RELATED_BY_multiply_1272441881(find__p_6#40,
                                   find_exponentPos#41,
                                   find_heap#44,
                                   find__p_6#40,
                                   find_result_228#42,
                                   find_exc_258#43,
                                   find_heapAfter_multiply#45)
  )
  \add (      (java.lang.Object::<inv>(find_heap#44, find__p_6#40)<<impl>>
            & (!(find_exponentPos#41 = null)<<origin("requires @ file ECPoint.java @ line 13","[]")>>)<<impl,
                                                                                                        origin("requires @ file ECPoint.java @ line 13","[]")>>)<<SC>>
            & ((  java.lang.Object::<inv>(assumes_heap#50, assumes__p_6#46)<<impl>>
                & (!(assumes_exponentPos#47 = null)<<origin("requires @ file ECPoint.java @ line 13","[]")>>)<<impl,
                                                                                                               origin("requires @ file ECPoint.java @ line 13","[]")>>)<<SC>>)
         ->     int::select(find_heap#44,
                            find__p_6#40,
                            org.bouncycastle.math.ec.ECPoint::$value)
              = int::select(assumes_heap#50,
                            assumes__p_6#46,
                            org.bouncycastle.math.ec.ECPoint::$value)
            &   int::select(find_heap#44,
                            find_exponentPos#41,
                            java.math.BigInteger::$value)
              = int::select(assumes_heap#50,
                            assumes_exponentPos#47,
                            java.math.BigInteger::$value)
         -> (  int::select(find_heapAfter_multiply#45,
                           find_result_228#42,
                           org.bouncycastle.math.ec.ECPoint::$value)
             = int::select(assumes_heapAfter_multiply#51,
                           assumes_result_228#48,
                           org.bouncycastle.math.ec.ECPoint::$value))<<postCondition>>
        ⟹
         
  )
  \heuristics ( information_flow_contract_appl )
};

Use_information_flow_contract_for_compareTo_325434207 {
  \schemaVar \term java.math.BigInteger find_var_1#31;
  \schemaVar \term java.math.BigInteger find_var#30;
  \schemaVar \term int find_result_227#32;
  \schemaVar \term java.lang.Throwable find_exc_257#33;
  \schemaVar \term Heap find_heap#34;
  \schemaVar \term java.math.BigInteger assumes_var_1#36;
  \schemaVar \term java.math.BigInteger assumes_var#35;
  \schemaVar \term int assumes_result_227#37;
  \schemaVar \term java.lang.Throwable assumes_exc_257#38;
  \schemaVar \term Heap assumes_heap#39;
  
  \assumes ( RELATED_BY_compareTo_325434207(assumes_var#35,
                                            assumes_var_1#36,
                                            assumes_heap#39,
                                            assumes_var#35,
                                            assumes_result_227#37,
                                            assumes_exc_257#38,
                                            assumes_heap#39)
            ⟹
             
  )
  \find (
    RELATED_BY_compareTo_325434207(find_var#30,
                                   find_var_1#31,
                                   find_heap#34,
                                   find_var#30,
                                   find_result_227#32,
                                   find_exc_257#33,
                                   find_heap#34)
  )
  \antecedentPolarity
  \replacewith (
    RELATED_BY_compareTo_325434207(find_var#30,
                                   find_var_1#31,
                                   find_heap#34,
                                   find_var#30,
                                   find_result_227#32,
                                   find_exc_257#33,
                                   find_heap#34)
  )
  \add (      (java.lang.Object::<inv>(find_heap#34, find_var#30)<<impl>>
            & (!(find_var_1#31 = null)<<origin("requires @ file BigInteger.java @ line 22","[]")>>)<<impl,
                                                                                                     origin("requires @ file BigInteger.java @ line 22","[]")>>)<<SC>>
            & ((  java.lang.Object::<inv>(assumes_heap#39, assumes_var#35)<<impl>>
                & (!(assumes_var_1#36 = null)<<origin("requires @ file BigInteger.java @ line 22","[]")>>)<<impl,
                                                                                                            origin("requires @ file BigInteger.java @ line 22","[]")>>)<<SC>>)
         ->     int::select(find_heap#34,
                            find_var#30,
                            java.math.BigInteger::$value)
              = int::select(assumes_heap#39,
                            assumes_var#35,
                            java.math.BigInteger::$value)
            &   int::select(find_heap#34,
                            find_var_1#31,
                            java.math.BigInteger::$value)
              = int::select(assumes_heap#39,
                            assumes_var_1#36,
                            java.math.BigInteger::$value)
         -> (find_result_227#32 = assumes_result_227#37)<<postCondition>>
        ⟹
         
  )
  \heuristics ( information_flow_contract_appl )
};
}

\problem {
     {heap:=heapAtPre_A<<anonHeapFunction>>}
       (  wellFormed(heapAtPre_A<<anonHeapFunction>>)
        & heap = heapAtPre_A<<anonHeapFunction>>
        & !self_191_A = null
        &   boolean::select(heap,
                            self_191_A,
                            java.lang.Object::<created>)
          = TRUE
        &   de.polyas.core3.open.crypto.groups.ECGroup::exactInstance(self_191_A)
          = TRUE
        & (  ((  p_6_A = null
               |   boolean::select(heapAtPre_A<<anonHeapFunction>>,
                                   p_6_A,
                                   java.lang.Object::<created>)
                 = TRUE)<<SC>>)
           & ((  exponent_6_A = null
               |   boolean::select(heapAtPre_A<<anonHeapFunction>>,
                                   exponent_6_A,
                                   java.lang.Object::<created>)
                 = TRUE)<<SC>>))
        & ((  java.math.BigInteger::<$inv>(heapAtPre_A<<anonHeapFunction>>)
            & ((  java.lang.Object::<inv>(heapAtPre_A<<anonHeapFunction>>,
                                          p_6_A)
                & ((  java.lang.Object::<inv>(heapAtPre_A<<anonHeapFunction>>,
                                              exponent_6_A)
                    & ((  java.lang.Object::<inv>(heapAtPre_A<<anonHeapFunction>>,
                                                  self_191_A)<<impl>>
                        & ((  (!(p_6_A = null)<<origin("requires @ file ECGroup.java @ line 33","[]")>>)<<impl,
                                                                                                          origin("requires @ file ECGroup.java @ line 33","[]")>>
                            & (!(exponent_6_A = null)<<origin("requires @ file ECGroup.java @ line 33","[]")>>)<<impl,
                                                                                                                 origin("requires @ file ECGroup.java @ line 33","[]")>>)<<SC>>))<<SC>>))<<SC>>))<<SC>>))<<SC>>)
        & {_p_6_A:=p_6_A || _exponent_6_A:=exponent_6_A}
            \[{
                exc_256_A=null;try {
                  result_226_A=self_191_A.pow(_p_6_A,_exponent_6_A)@de.polyas.core3.open.crypto.groups.ECGroup;
                }   catch (java.lang.Throwable e) {
                  exc_256_A=e;
                }
              }\] (  selfAtPost_191_A = self_191_A
                   & resultAtPost_226_A = result_226_A
                   & excAtPost_256_A = exc_256_A
                   & heapAtPost_A = heap))
   & {heap:=heapAtPre_B<<anonHeapFunction>>}
       (  wellFormed(heapAtPre_B<<anonHeapFunction>>)
        & heap = heapAtPre_B<<anonHeapFunction>>
        & !self_191_B = null
        &   boolean::select(heap,
                            self_191_B,
                            java.lang.Object::<created>)
          = TRUE
        &   de.polyas.core3.open.crypto.groups.ECGroup::exactInstance(self_191_B)
          = TRUE
        & (  ((  p_6_B = null
               |   boolean::select(heapAtPre_B<<anonHeapFunction>>,
                                   p_6_B,
                                   java.lang.Object::<created>)
                 = TRUE)<<SC>>)
           & ((  exponent_6_B = null
               |   boolean::select(heapAtPre_B<<anonHeapFunction>>,
                                   exponent_6_B,
                                   java.lang.Object::<created>)
                 = TRUE)<<SC>>))
        & ((  java.math.BigInteger::<$inv>(heapAtPre_B<<anonHeapFunction>>)
            & ((  java.lang.Object::<inv>(heapAtPre_B<<anonHeapFunction>>,
                                          p_6_B)
                & ((  java.lang.Object::<inv>(heapAtPre_B<<anonHeapFunction>>,
                                              exponent_6_B)
                    & ((  java.lang.Object::<inv>(heapAtPre_B<<anonHeapFunction>>,
                                                  self_191_B)<<impl>>
                        & ((  (!p_6_B = null)<<impl>>
                            & (!exponent_6_B = null)<<impl>>)<<SC>>))<<SC>>))<<SC>>))<<SC>>))<<SC>>)
        & {_p_6_B:=p_6_B || _exponent_6_B:=exponent_6_B}
            \[{
                exc_256_B=null;try {
                  result_226_B=self_191_B.pow(_p_6_B,_exponent_6_B)@de.polyas.core3.open.crypto.groups.ECGroup;
                }   catch (java.lang.Throwable e) {
                  exc_256_B=e;
                }
              }\] (  selfAtPost_191_B = self_191_B
                   & resultAtPost_226_B = result_226_B
                   & excAtPost_256_B = exc_256_B
                   & heapAtPost_B = heap))
->     int::select(heapAtPre_A<<anonHeapFunction>>,
                   p_6_A,
                   org.bouncycastle.math.ec.ECPoint::$value)
     = int::select(heapAtPre_B<<anonHeapFunction>>,
                   p_6_B,
                   org.bouncycastle.math.ec.ECPoint::$value)
   &   int::select(heapAtPre_A<<anonHeapFunction>>,
                   exponent_6_A,
                   java.math.BigInteger::$value)
     = int::select(heapAtPre_B<<anonHeapFunction>>,
                   exponent_6_B,
                   java.math.BigInteger::$value)
   &   int::select(heapAtPre_A<<anonHeapFunction>>,
                   org.bouncycastle.math.ec.custom.sec.SecP256K1Curve::select(heapAtPre_A<<anonHeapFunction>>,
                                                                              self_191_A,
                                                                              de.polyas.core3.open.crypto.groups.ECGroup::$curve),
                   org.bouncycastle.math.ec.ECCurve::$order)
     = int::select(heapAtPre_B<<anonHeapFunction>>,
                   org.bouncycastle.math.ec.custom.sec.SecP256K1Curve::select(heapAtPre_B<<anonHeapFunction>>,
                                                                              self_191_B,
                                                                              de.polyas.core3.open.crypto.groups.ECGroup::$curve),
                   org.bouncycastle.math.ec.ECCurve::$order)
-> (  int::select(heapAtPost_A,
                  resultAtPost_226_A,
                  org.bouncycastle.math.ec.ECPoint::$value)
    = int::select(heapAtPost_B,
                  resultAtPost_226_B,
                  org.bouncycastle.math.ec.ECPoint::$value))<<postCondition>>

}

\proof {
(keyLog "0" (keyUser "flo" ) (keyVersion "57d504cc0f"))

(autoModeTime "98823")

(branch "dummy ID"
(rule "unfold_computed_formula_0_of_pow_425138489" (formula "1") (term "0"))
(rule "impRight" (formula "1"))
(rule "impRight" (formula "2"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "orLeft" (formula "4"))
(branch " {heap:=heapAtPre_A«anonHeapFunction»} ( wellFormed(heapAtPre_A«anonHeapFunction») ∧ heapAtPre_A«anonHeapFunction» = heap ∧ self_191_A.<created> = TRUE ∧ de.polyas.core3.open.crypto.groups.ECGroup::exactInstance(self_191_A) = TRUE ∧ p_6_A.<created>@heapAtPre_A«anonHeapFunction» = TRUE ∧ exponent_6_A.<created>@heapAtPre_A«anonHeapFunction» = TRUE ∧ java.math.BigInteger.ZERO.value@heapAtPre_A«anonHeapFunction» = 0 ∧ wellFormed(heap) ∧ exc_257_A_0 = null ∧ result_227_A_0 ≤ 2147483647 ∧ result_227_A_0 ≥ -2147483648 ∧ ( result_227_A_0 ≤ 0 ↔ exponent_6_A.value + java.math.BigInteger.ZERO.value * -1 ≤ 0) ∧ ( result_227_A_0 ≥ 0 ↔ exponent_6_A.value + java.math.BigInteger.ZERO.value * -1 ≥ 0) ∧ RELATED_BY_compareTo_325434207(exponent_6_A, java.math.BigInteger.ZERO, heap, exponent_6_A, result_227_A_0, exc_257_A_0, heap) ∧ java.math.BigInteger.ZERO.value = 0 ∧ java.math.BigInteger.ZERO.<created> = TRUE ∧ wellFormed(anon_heap_multiply«anonHeapFunction») ∧ heap[anon(∅, anon_heap_multiply«anonHeapFunction»)] = heapAfter_multiply_A_0 ∧ ( result_228_A_0.<created> = TRUE ∨ result_228_A_0.<created>@anon_heap_multiply«anonHeapFunction» = TRUE) ∧ (exc_258_A_0 = null)«impl» ∧ RELATED_BY_multiply_1272441881(p_6_A, exponent_6_A, heap, p_6_A, result_228_A_0, exc_258_A_0, heapAfter_multiply_A_0) ∧ exponent_6_A.<created> = TRUE ∧ ¬result_228_A_0 = null ∧ ¬result_227_A_0 < 0 ∧ ¬java.math.BigInteger.ZERO = null ∧ ¬ self_191_A.group.generator@heapAtPre_A«anonHeapFunction» = null ∧ ¬ self_191_A.group@heapAtPre_A«anonHeapFunction» = null ∧ ¬ self_191_A.curve@heapAtPre_A«anonHeapFunction» = null ∧ ¬ java.math.BigInteger.ZERO@heapAtPre_A«anonHeapFunction» = null ∧ ¬{exc_256_A:=null || heap:=heapAfter_multiply_A_0 || result_226_A:=result_228_A_0} ¬( self_191_A = selfAtPost_191_A ∧ result_226_A = resultAtPost_226_A ∧ exc_256_A = excAtPost_256_A ∧ heapAtPost_A = heap) ∧ ¬exponent_6_A = null ∧ ¬p_6_A = null ∧ ¬self_191_A = null) ∧ {heap:=heapAtPre_B«anonHeapFunction»} ( wellFormed(heapAtPre_B«anonHeapFunction») ∧ heapAtPre_B«anonHeapFunction» = heap ∧ self_191_B.<created> = TRUE ∧ de.polyas.core3.open.crypto.groups.ECGroup::exactInstance(self_191_B) = TRUE ∧ p_6_B.<created>@heapAtPre_B«anonHeapFunction» = TRUE ∧ exponent_6_B.<created>@heapAtPre_B«anonHeapFunction» = TRUE ∧ java.math.BigInteger.ZERO.value@heapAtPre_B«anonHeapFunction» = 0 ∧ wellFormed(heap) ∧ exc_257_B_0 = null ∧ result_227_B_0 ≤ 2147483647 ∧ result_227_B_0 ≥ -2147483648 ∧ ( result_227_B_0 ≤ 0 ↔ exponent_6_B.value + java.math.BigInteger.ZERO.value * -1 ≤ 0) ∧ ( result_227_B_0 ≥ 0 ↔ exponent_6_B.value + java.math.BigInteger.ZERO.value * -1 ≥ 0) ∧ RELATED_BY_compareTo_325434207(exponent_6_B, java.math.BigInteger.ZERO, heap, exponent_6_B, result_227_B_0, exc_257_B_0, heap) ∧ java.math.BigInteger.ZERO.value = 0 ∧ java.math.BigInteger.ZERO.<created> = TRUE ∧ wellFormed(anon_heap_multiply«anonHeapFunction») ∧ heap[anon(∅, anon_heap_multiply«anonHeapFunction»)] = heapAfter_multiply_B_0 ∧ ( result_228_B_0.<created> = TRUE ∨ result_228_B_0.<created>@anon_heap_multiply«anonHeapFunction» = TRUE) ∧ (exc_258_B_0 = null)«impl» ∧ RELATED_BY_multiply_1272441881(p_6_B, exponent_6_B, heap, p_6_B, result_228_B_0, exc_258_B_0, heapAfter_multiply_B_0) ∧ exponent_6_B.<created> = TRUE ∧ ¬result_228_B_0 = null ∧ ¬result_227_B_0 < 0 ∧ ¬java.math.BigInteger.ZERO = null ∧ ¬ self_191_B.group.generator@heapAtPre_B«anonHeapFunction» = null ∧ ¬ self_191_B.group@heapAtPre_B«anonHeapFunction» = null ∧ ¬ self_191_B.curve@heapAtPre_B«anonHeapFunction» = null ∧ ¬ java.math.BigInteger.ZERO@heapAtPre_B«anonHeapFunction» = null ∧ ¬{exc_256_B:=null || heap:=heapAfter_multiply_B_0 || result_226_B:=result_228_B_0} ¬( self_191_B = selfAtPost_191_B ∧ result_226_B = resultAtPost_226_B ∧ exc_256_B = excAtPost_256_B ∧ heapAtPost_B = heap) ∧ ¬exponent_6_B = null ∧ ¬p_6_B = null ∧ ¬self_191_B = null) ∨ {heap:=heapAtPre_A«anonHeapFunction»} ( wellFormed(heapAtPre_A«anonHeapFunction») ∧ heapAtPre_A«anonHeapFunction» = heap ∧ self_191_A.<created> = TRUE ∧ de.polyas.core3.open.crypto.groups.ECGroup::exactInstance(self_191_A) = TRUE ∧ p_6_A.<created>@heapAtPre_A«anonHeapFunction» = TRUE ∧ exponent_6_A.<created>@heapAtPre_A«anonHeapFunction» = TRUE ∧ java.math.BigInteger.ZERO.value@heapAtPre_A«anonHeapFunction» = 0 ∧ wellFormed(heap) ∧ exc_257_A_0 = null ∧ result_227_A_0 ≤ 2147483647 ∧ result_227_A_0 ≥ -2147483648 ∧ ( result_227_A_0 ≤ 0 ↔ exponent_6_A.value + java.math.BigInteger.ZERO.value * -1 ≤ 0) ∧ ( result_227_A_0 ≥ 0 ↔ exponent_6_A.value + java.math.BigInteger.ZERO.value * -1 ≥ 0) ∧ RELATED_BY_compareTo_325434207(exponent_6_A, java.math.BigInteger.ZERO, heap, exponent_6_A, result_227_A_0, exc_257_A_0, heap) ∧ java.math.BigInteger.ZERO.value = 0 ∧ java.math.BigInteger.ZERO.<created> = TRUE ∧ wellFormed(anon_heap_multiply«anonHeapFunction») ∧ heap[anon(∅, anon_heap_multiply«anonHeapFunction»)] = heapAfter_multiply_A_0 ∧ ( result_228_A_0.<created> = TRUE ∨ result_228_A_0.<created>@anon_heap_multiply«anonHeapFunction» = TRUE) ∧ (exc_258_A_0 = null)«impl» ∧ RELATED_BY_multiply_1272441881(p_6_A, exponent_6_A, heap, p_6_A, result_228_A_0, exc_258_A_0, heapAfter_multiply_A_0) ∧ exponent_6_A.<created> = TRUE ∧ ¬result_228_A_0 = null ∧ ¬result_227_A_0 < 0 ∧ ¬java.math.BigInteger.ZERO = null ∧ ¬ self_191_A.group.generator@heapAtPre_A«anonHeapFunction» = null ∧ ¬ self_191_A.group@heapAtPre_A«anonHeapFunction» = null ∧ ¬ self_191_A.curve@heapAtPre_A«anonHeapFunction» = null ∧ ¬ java.math.BigInteger.ZERO@heapAtPre_A«anonHeapFunction» = null ∧ ¬{exc_256_A:=null || heap:=heapAfter_multiply_A_0 || result_226_A:=result_228_A_0} ¬( self_191_A = selfAtPost_191_A ∧ result_226_A = resultAtPost_226_A ∧ exc_256_A = excAtPost_256_A ∧ heapAtPost_A = heap) ∧ ¬exponent_6_A = null ∧ ¬p_6_A = null ∧ ¬self_191_A = null) ∧ {heap:=heapAtPre_B«anonHeapFunction»} ( self_191_B.group.generator.<created>@heapAtPre_B«anonHeapFunction» = TRUE ∧ java.math.BigInteger.ZERO.<created>@heapAtPre_B«anonHeapFunction» = TRUE ∧ self_191_B.group.<created>@heapAtPre_B«anonHeapFunction» = TRUE ∧ self_191_B.curve.<created>@heapAtPre_B«anonHeapFunction» = TRUE ∧ result_227_B_0 < 0 ∧ wellFormed(heapAtPre_B«anonHeapFunction») ∧ heapAtPre_B«anonHeapFunction» = heap ∧ self_191_B.<created> = TRUE ∧ de.polyas.core3.open.crypto.groups.ECGroup::exactInstance(self_191_B) = TRUE ∧ p_6_B.<created>@heapAtPre_B«anonHeapFunction» = TRUE ∧ exponent_6_B.<created>@heapAtPre_B«anonHeapFunction» = TRUE ∧ java.math.BigInteger.ZERO.value@heapAtPre_B«anonHeapFunction» = 0 ∧ wellFormed(heap) ∧ exc_257_B_0 = null ∧ result_227_B_0 ≤ 2147483647 ∧ result_227_B_0 ≥ -2147483648 ∧ ( result_227_B_0 ≤ 0 ↔ exponent_6_B.value + java.math.BigInteger.ZERO.value * -1 ≤ 0) ∧ ( result_227_B_0 ≥ 0 ↔ exponent_6_B.value + java.math.BigInteger.ZERO.value * -1 ≥ 0) ∧ RELATED_BY_compareTo_325434207(exponent_6_B, java.math.BigInteger.ZERO, heap, exponent_6_B, result_227_B_0, exc_257_B_0, heap) ∧ java.math.BigInteger.ZERO.value = 0 ∧ java.math.BigInteger.ZERO.<created> = TRUE ∧ result_228_B_1.<created> = TRUE ∧ self_191_B.curve.order = result_228_B_1.value ∧ (exc_258_B_1 = null)«impl» ∧ RELATED_BY_getOrder_757678341(self_191_B.curve, heap, self_191_B.curve, result_228_B_1, exc_258_B_1, heap) ∧ wellFormed(anon_heap_mod«anonHeapFunction») ∧ heap[anon(∅, anon_heap_mod«anonHeapFunction»)] = heapAfter_mod_B_0 ∧ ( result_229_B_0.<created> = TRUE ∨ result_229_B_0.<created>@anon_heap_mod«anonHeapFunction» = TRUE) ∧ if (exponent_6_B.<created> = TRUE) then (exponent_6_B.value) else (exponent_6_B.value@anon_heap_mod«anonHeapFunction») = java_math_BigInteger_value_0_B_0«selectSK» ∧ if (result_229_B_0.<created> = TRUE) then (result_229_B_0.value) else (result_229_B_0.value@anon_heap_mod«anonHeapFunction») = jmod(java_math_BigInteger_value_0_B_0«selectSK», result_228_B_1.value) ∧ java_math_BigInteger_value_3_B_0«selectSK» = 0 ∧ (exc_259_B_0 = null)«impl» ∧ RELATED_BY_mod_596311583(exponent_6_B, result_228_B_1, heap, exponent_6_B, result_229_B_0, exc_259_B_0, heapAfter_mod_B_0) ∧ wellFormed(anon_heap_multiply«anonHeapFunction») ∧ heapAfter_mod_B_0[anon(∅, anon_heap_multiply«anonHeapFunction»)] = heapAfter_multiply_B_1 ∧ exc_260_B_0 = null ∧ ( result_230_B_0.<created> = TRUE ∨ result_230_B_0.<created>@anon_heap_mod«anonHeapFunction» = TRUE ∨ result_230_B_0.<created>@anon_heap_multiply«anonHeapFunction» = TRUE) ∧ RELATED_BY_multiply_1272441881(p_6_B, result_229_B_0, heapAfter_mod_B_0, p_6_B, result_230_B_0, exc_260_B_0, heapAfter_multiply_B_1) ∧ wellFormed(heapAfter_mod_B_0) ∧ ¬result_230_B_0 = null ∧ ¬result_229_B_0 = null ∧ ¬result_228_B_1 = null ∧ ¬java.math.BigInteger.ZERO = null ∧ ¬ self_191_B.group.generator@heapAtPre_B«anonHeapFunction» = null ∧ ¬ self_191_B.group@heapAtPre_B«anonHeapFunction» = null ∧ ¬ self_191_B.curve@heapAtPre_B«anonHeapFunction» = null ∧ ¬ java.math.BigInteger.ZERO@heapAtPre_B«anonHeapFunction» = null ∧ ¬{exc_256_B:=null || heap:=heapAfter_multiply_B_1 || result_226_B:=result_230_B_0} ¬( self_191_B = selfAtPost_191_B ∧ result_226_B = resultAtPost_226_B ∧ exc_256_B = excAtPost_256_B ∧ heapAtPost_B = heap) ∧ ¬exponent_6_B = null ∧ ¬p_6_B = null ∧ ¬self_191_B = null)"
   (rule "orLeft" (formula "4"))
   (branch " {heap:=heapAtPre_A«anonHeapFunction»} ( wellFormed(heapAtPre_A«anonHeapFunction») ∧ heapAtPre_A«anonHeapFunction» = heap ∧ self_191_A.<created> = TRUE ∧ de.polyas.core3.open.crypto.groups.ECGroup::exactInstance(self_191_A) = TRUE ∧ p_6_A.<created>@heapAtPre_A«anonHeapFunction» = TRUE ∧ exponent_6_A.<created>@heapAtPre_A«anonHeapFunction» = TRUE ∧ java.math.BigInteger.ZERO.value@heapAtPre_A«anonHeapFunction» = 0 ∧ wellFormed(heap) ∧ exc_257_A_0 = null ∧ result_227_A_0 ≤ 2147483647 ∧ result_227_A_0 ≥ -2147483648 ∧ ( result_227_A_0 ≤ 0 ↔ exponent_6_A.value + java.math.BigInteger.ZERO.value * -1 ≤ 0) ∧ ( result_227_A_0 ≥ 0 ↔ exponent_6_A.value + java.math.BigInteger.ZERO.value * -1 ≥ 0) ∧ RELATED_BY_compareTo_325434207(exponent_6_A, java.math.BigInteger.ZERO, heap, exponent_6_A, result_227_A_0, exc_257_A_0, heap) ∧ java.math.BigInteger.ZERO.value = 0 ∧ java.math.BigInteger.ZERO.<created> = TRUE ∧ wellFormed(anon_heap_multiply«anonHeapFunction») ∧ heap[anon(∅, anon_heap_multiply«anonHeapFunction»)] = heapAfter_multiply_A_0 ∧ ( result_228_A_0.<created> = TRUE ∨ result_228_A_0.<created>@anon_heap_multiply«anonHeapFunction» = TRUE) ∧ (exc_258_A_0 = null)«impl» ∧ RELATED_BY_multiply_1272441881(p_6_A, exponent_6_A, heap, p_6_A, result_228_A_0, exc_258_A_0, heapAfter_multiply_A_0) ∧ exponent_6_A.<created> = TRUE ∧ ¬result_228_A_0 = null ∧ ¬result_227_A_0 < 0 ∧ ¬java.math.BigInteger.ZERO = null ∧ ¬ self_191_A.group.generator@heapAtPre_A«anonHeapFunction» = null ∧ ¬ self_191_A.group@heapAtPre_A«anonHeapFunction» = null ∧ ¬ self_191_A.curve@heapAtPre_A«anonHeapFunction» = null ∧ ¬ java.math.BigInteger.ZERO@heapAtPre_A«anonHeapFunction» = null ∧ ¬{exc_256_A:=null || heap:=heapAfter_multiply_A_0 || result_226_A:=result_228_A_0} ¬( self_191_A = selfAtPost_191_A ∧ result_226_A = resultAtPost_226_A ∧ exc_256_A = excAtPost_256_A ∧ heapAtPost_A = heap) ∧ ¬exponent_6_A = null ∧ ¬p_6_A = null ∧ ¬self_191_A = null) ∧ {heap:=heapAtPre_B«anonHeapFunction»} ( wellFormed(heapAtPre_B«anonHeapFunction») ∧ heapAtPre_B«anonHeapFunction» = heap ∧ self_191_B.<created> = TRUE ∧ de.polyas.core3.open.crypto.groups.ECGroup::exactInstance(self_191_B) = TRUE ∧ p_6_B.<created>@heapAtPre_B«anonHeapFunction» = TRUE ∧ exponent_6_B.<created>@heapAtPre_B«anonHeapFunction» = TRUE ∧ java.math.BigInteger.ZERO.value@heapAtPre_B«anonHeapFunction» = 0 ∧ wellFormed(heap) ∧ exc_257_B_0 = null ∧ result_227_B_0 ≤ 2147483647 ∧ result_227_B_0 ≥ -2147483648 ∧ ( result_227_B_0 ≤ 0 ↔ exponent_6_B.value + java.math.BigInteger.ZERO.value * -1 ≤ 0) ∧ ( result_227_B_0 ≥ 0 ↔ exponent_6_B.value + java.math.BigInteger.ZERO.value * -1 ≥ 0) ∧ RELATED_BY_compareTo_325434207(exponent_6_B, java.math.BigInteger.ZERO, heap, exponent_6_B, result_227_B_0, exc_257_B_0, heap) ∧ java.math.BigInteger.ZERO.value = 0 ∧ java.math.BigInteger.ZERO.<created> = TRUE ∧ wellFormed(anon_heap_multiply«anonHeapFunction») ∧ heap[anon(∅, anon_heap_multiply«anonHeapFunction»)] = heapAfter_multiply_B_0 ∧ ( result_228_B_0.<created> = TRUE ∨ result_228_B_0.<created>@anon_heap_multiply«anonHeapFunction» = TRUE) ∧ (exc_258_B_0 = null)«impl» ∧ RELATED_BY_multiply_1272441881(p_6_B, exponent_6_B, heap, p_6_B, result_228_B_0, exc_258_B_0, heapAfter_multiply_B_0) ∧ exponent_6_B.<created> = TRUE ∧ ¬result_228_B_0 = null ∧ ¬result_227_B_0 < 0 ∧ ¬java.math.BigInteger.ZERO = null ∧ ¬ self_191_B.group.generator@heapAtPre_B«anonHeapFunction» = null ∧ ¬ self_191_B.group@heapAtPre_B«anonHeapFunction» = null ∧ ¬ self_191_B.curve@heapAtPre_B«anonHeapFunction» = null ∧ ¬ java.math.BigInteger.ZERO@heapAtPre_B«anonHeapFunction» = null ∧ ¬{exc_256_B:=null || heap:=heapAfter_multiply_B_0 || result_226_B:=result_228_B_0} ¬( self_191_B = selfAtPost_191_B ∧ result_226_B = resultAtPost_226_B ∧ exc_256_B = excAtPost_256_B ∧ heapAtPost_B = heap) ∧ ¬exponent_6_B = null ∧ ¬p_6_B = null ∧ ¬self_191_B = null)"
      (rule "andLeft" (formula "4"))
       (builtin "One Step Simplification" (formula "5"))
       (builtin "One Step Simplification" (formula "4"))
      (rule "andLeft" (formula "5"))
      (rule "andLeft" (formula "4"))
      (rule "notLeft" (formula "7"))
      (rule "andLeft" (formula "6"))
      (rule "andLeft" (formula "4"))
      (rule "notLeft" (formula "6"))
      (rule "andLeft" (formula "6"))
      (rule "notLeft" (formula "8"))
      (rule "andLeft" (formula "4"))
      (rule "notLeft" (formula "6"))
      (rule "notLeft" (formula "7"))
      (rule "andLeft" (formula "6"))
      (rule "andLeft" (formula "4"))
      (rule "notLeft" (formula "6"))
      (rule "andLeft" (formula "7"))
      (rule "andLeft" (formula "6"))
      (rule "andLeft" (formula "5"))
      (rule "andLeft" (formula "4"))
      (rule "andLeft" (formula "10"))
      (rule "notLeft" (formula "9"))
      (rule "andLeft" (formula "8"))
      (rule "andLeft" (formula "6"))
      (rule "andLeft" (formula "4"))
      (rule "notLeft" (formula "6"))
      (rule "andLeft" (formula "11"))
      (rule "andLeft" (formula "9"))
      (rule "notLeft" (formula "11"))
      (rule "andLeft" (formula "6"))
      (rule "notLeft" (formula "5"))
      (rule "andLeft" (formula "4"))
      (rule "andLeft" (formula "10"))
      (rule "notLeft" (formula "12"))
      (rule "andLeft" (formula "4"))
      (rule "notLeft" (formula "6"))
      (rule "notLeft" (formula "11"))
      (rule "andLeft" (formula "10"))
      (rule "andLeft" (formula "4"))
      (rule "notLeft" (formula "6"))
      (rule "andLeft" (formula "10"))
      (rule "notLeft" (formula "12"))
      (rule "andLeft" (formula "4"))
      (rule "notLeft" (formula "6"))
      (rule "notLeft" (formula "11"))
      (rule "andLeft" (formula "10"))
      (rule "notLeft" (formula "5"))
      (rule "andLeft" (formula "4"))
      (rule "notLeft" (formula "11"))
      (rule "andLeft" (formula "10"))
      (rule "notLeft" (formula "5"))
      (rule "andLeft" (formula "4"))
      (rule "andLeft" (formula "10"))
      (rule "andLeft" (formula "4"))
      (rule "andLeft" (formula "11"))
      (rule "andLeft" (formula "4"))
      (rule "andLeft" (formula "12"))
      (rule "andLeft" (formula "4"))
      (rule "andLeft" (formula "13"))
      (rule "andLeft" (formula "4"))
      (rule "andLeft" (formula "14"))
      (rule "andLeft" (formula "4"))
      (rule "andLeft" (formula "14"))
      (rule "andLeft" (formula "4"))
      (rule "andLeft" (formula "15"))
      (rule "andLeft" (formula "4"))
      (rule "andLeft" (formula "16"))
      (rule "andLeft" (formula "4"))
      (rule "andLeft" (formula "17"))
      (rule "andLeft" (formula "4"))
      (rule "andLeft" (formula "18"))
      (rule "andLeft" (formula "4"))
      (rule "andLeft" (formula "19"))
      (rule "andLeft" (formula "4"))
      (rule "andLeft" (formula "20"))
      (rule "andLeft" (formula "4"))
      (rule "andLeft" (formula "21"))
      (rule "andLeft" (formula "4"))
      (rule "andLeft" (formula "22"))
      (rule "andLeft" (formula "4"))
      (rule "andLeft" (formula "23"))
      (rule "andLeft" (formula "4"))
      (rule "andLeft" (formula "23"))
      (rule "andLeft" (formula "4"))
      (rule "andLeft" (formula "23"))
      (rule "andLeft" (formula "4"))
      (rule "andLeft" (formula "24"))
      (rule "andLeft" (formula "4"))
      (rule "andLeft" (formula "25"))
      (rule "andLeft" (formula "4"))
      (rule "Use_information_flow_contract_for_compareTo_325434207" (formula "34") (ifseqformula "13"))
      (rule "Use_information_flow_contract_for_multiply_1272441881_0" (formula "42") (ifseqformula "19"))
      (rule "Use_information_flow_contract_for_multiply_1272441881" (formula "43") (ifseqformula "19"))
      (rule "eqSymm" (formula "67"))
      (rule "eqSymm" (formula "1"))
      (rule "eqSymm" (formula "2"))
      (rule "eqSymm" (formula "3"))
      (rule "eqSymm" (formula "47"))
      (rule "eqSymm" (formula "23"))
      (rule "replace_known_left" (formula "34") (term "0,0,1") (ifseqformula "2"))
       (builtin "One Step Simplification" (formula "34") (ifInst ""  (formula "60")) (ifInst ""  (formula "59")))
      (rule "replace_known_left" (formula "42") (term "1,0,1") (ifseqformula "2"))
       (builtin "One Step Simplification" (formula "42") (ifInst ""  (formula "62")) (ifInst ""  (formula "61")) (ifInst ""  (formula "1")))
      (rule "inEqSimp_ltRight" (formula "52"))
      (rule "times_zero_1" (formula "1") (term "0,0"))
      (rule "add_zero_left" (formula "1") (term "0"))
      (rule "replace_known_left" (formula "34") (term "0") (ifseqformula "1"))
       (builtin "One Step Simplification" (formula "34"))
      (rule "inEqSimp_ltRight" (formula "52"))
      (rule "times_zero_1" (formula "1") (term "0,0"))
      (rule "add_zero_left" (formula "1") (term "0"))
      (rule "replace_known_left" (formula "14") (term "0") (ifseqformula "1"))
       (builtin "One Step Simplification" (formula "14"))
      (rule "applyEq" (formula "14") (term "0,1,0") (ifseqformula "16"))
      (rule "mul_literals" (formula "14") (term "1,0"))
      (rule "add_zero_right" (formula "14") (term "0"))
      (rule "applyEq" (formula "44") (term "1,1,1") (ifseqformula "24"))
      (rule "applyEq" (formula "6") (term "1,0") (ifseqformula "23"))
      (rule "applyEq" (formula "21") (term "4") (ifseqformula "24"))
      (rule "applyEqRigid" (formula "67") (term "0,1") (ifseqformula "26"))
      (rule "applyEq" (formula "35") (term "0,1,0") (ifseqformula "38"))
      (rule "mul_literals" (formula "35") (term "1,0"))
      (rule "add_zero_right" (formula "35") (term "0"))
      (rule "applyEqRigid" (formula "36") (term "0,0,1") (ifseqformula "38"))
      (rule "eqSymm" (formula "36") (term "0,1"))
      (rule "replace_known_left" (formula "36") (term "0,1") (ifseqformula "16"))
       (builtin "One Step Simplification" (formula "36"))
      (rule "applyEq" (formula "55") (term "1,0") (ifseqformula "23"))
      (rule "applyEq" (formula "13") (term "0,1,0,1") (ifseqformula "16"))
      (rule "times_zero_2" (formula "13") (term "1,0,1"))
      (rule "add_zero_right" (formula "13") (term "0,1"))
      (rule "applyEq" (formula "54") (term "1,1,0") (ifseqformula "47"))
      (rule "applyEq" (formula "34") (term "0,1,0,1") (ifseqformula "38"))
      (rule "mul_literals" (formula "34") (term "1,0,1"))
      (rule "add_zero_right" (formula "34") (term "0,1"))
      (rule "applyEq" (formula "19") (term "1,0,1") (ifseqformula "24"))
      (rule "applyEq" (formula "67") (term "0,0") (ifseqformula "50"))
      (rule "applyEq" (formula "28") (term "0,0") (ifseqformula "47"))
      (rule "applyEq" (formula "5") (term "1,1,1") (ifseqformula "23"))
      (rule "applyEq" (formula "53") (term "1,1,0") (ifseqformula "23"))
      (rule "applyEq" (formula "45") (term "5") (ifseqformula "43"))
      (rule "applyEq" (formula "66") (term "0") (ifseqformula "47"))
      (rule "applyEq" (formula "42") (term "1,0,1") (ifseqformula "48"))
      (rule "applyEq" (formula "42") (term "1,0,0") (ifseqformula "48"))
      (rule "applyEq" (formula "27") (term "1,0") (ifseqformula "47"))
      (rule "applyEq" (formula "37") (term "5") (ifseqformula "31"))
      (rule "applyEq" (formula "65") (term "0") (ifseqformula "23"))
      (rule "applyEq" (formula "45") (term "4") (ifseqformula "48"))
      (rule "applyEq" (formula "56") (term "1,0") (ifseqformula "47"))
      (rule "applyEq" (formula "21") (term "5") (ifseqformula "20"))
      (rule "applyEq" (formula "51") (term "0") (ifseqformula "24"))
      (rule "applyEq" (formula "5") (term "1,1,0") (ifseqformula "47"))
      (rule "applyEq" (formula "58") (term "1,0") (ifseqformula "47"))
      (rule "applyEq" (formula "19") (term "1,0,0") (ifseqformula "24"))
      (rule "applyEq" (formula "44") (term "1,0,1") (ifseqformula "48"))
      (rule "replace_known_right" (formula "44") (term "1") (ifseqformula "67"))
       (builtin "One Step Simplification" (formula "44"))
      (rule "notLeft" (formula "44"))
      (rule "applyEq" (formula "7") (term "0,0") (ifseqformula "23"))
      (rule "applyEq" (formula "57") (term "1,0") (ifseqformula "23"))
      (rule "applyEq" (formula "52") (term "0") (ifseqformula "47"))
      (rule "applyEq" (formula "15") (term "5") (ifseqformula "10"))
      (rule "applyEq" (formula "35") (term "0") (ifseqformula "4"))
      (rule "applyEq" (formula "34") (term "0,1") (ifseqformula "4"))
      (rule "inEqSimp_subsumption1" (formula "12") (ifseqformula "1"))
      (rule "leq_literals" (formula "12") (term "0"))
       (builtin "One Step Simplification" (formula "12"))
      (rule "true_left" (formula "12"))
      (rule "inEqSimp_subsumption1" (formula "32") (ifseqformula "2"))
      (rule "leq_literals" (formula "32") (term "0"))
       (builtin "One Step Simplification" (formula "32"))
      (rule "true_left" (formula "32"))
      (rule "pullOutSelect" (formula "64") (term "1") (inst "selectSK=org_bouncycastle_math_ec_ECPoint_value_0"))
      (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "18"))
       (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "49")))
      (rule "ifthenelse_negated" (formula "1") (term "0"))
      (rule "pullOutSelect" (formula "65") (term "0") (inst "selectSK=org_bouncycastle_math_ec_ECPoint_value_1"))
      (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "40"))
       (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "51")))
      (rule "ifthenelse_negated" (formula "1") (term "0"))
      (rule "Class_invariant_axiom_for_java_math_BigInteger" (formula "35") (term "0,0"))
      (rule "replace_known_left" (formula "35") (term "1,0,0") (ifseqformula "37"))
       (builtin "One Step Simplification" (formula "35") (ifInst ""  (formula "59")))
      (rule "commute_or" (formula "41"))
      (rule "commute_or" (formula "20"))
      (rule "Class_invariant_axiom_for_org_bouncycastle_math_ec_ECPoint" (formula "49") (term "0"))
       (builtin "One Step Simplification" (formula "49"))
      (rule "Class_invariant_axiom_for_java_math_BigInteger" (formula "35") (term "0"))
      (rule "replace_known_right" (formula "35") (term "0,0,0") (ifseqformula "58"))
       (builtin "One Step Simplification" (formula "35") (ifInst ""  (formula "17")))
      (rule "applyEq" (formula "36") (term "4") (ifseqformula "35"))
      (rule "applyEq" (formula "33") (term "0") (ifseqformula "35"))
      (rule "applyEq" (formula "33") (term "0,0") (ifseqformula "34"))
      (rule "applyEq" (formula "4") (term "0") (ifseqformula "33"))
      (rule "Class_invariant_axiom_for_org_bouncycastle_math_ec_ECPoint" (formula "46"))
      (rule "closeTrue" (formula "46"))
   )
   (branch " {heap:=heapAtPre_A«anonHeapFunction»} ( wellFormed(heapAtPre_A«anonHeapFunction») ∧ heapAtPre_A«anonHeapFunction» = heap ∧ self_191_A.<created> = TRUE ∧ de.polyas.core3.open.crypto.groups.ECGroup::exactInstance(self_191_A) = TRUE ∧ p_6_A.<created>@heapAtPre_A«anonHeapFunction» = TRUE ∧ exponent_6_A.<created>@heapAtPre_A«anonHeapFunction» = TRUE ∧ java.math.BigInteger.ZERO.value@heapAtPre_A«anonHeapFunction» = 0 ∧ wellFormed(heap) ∧ exc_257_A_0 = null ∧ result_227_A_0 ≤ 2147483647 ∧ result_227_A_0 ≥ -2147483648 ∧ ( result_227_A_0 ≤ 0 ↔ exponent_6_A.value + java.math.BigInteger.ZERO.value * -1 ≤ 0) ∧ ( result_227_A_0 ≥ 0 ↔ exponent_6_A.value + java.math.BigInteger.ZERO.value * -1 ≥ 0) ∧ RELATED_BY_compareTo_325434207(exponent_6_A, java.math.BigInteger.ZERO, heap, exponent_6_A, result_227_A_0, exc_257_A_0, heap) ∧ java.math.BigInteger.ZERO.value = 0 ∧ java.math.BigInteger.ZERO.<created> = TRUE ∧ wellFormed(anon_heap_multiply«anonHeapFunction») ∧ heap[anon(∅, anon_heap_multiply«anonHeapFunction»)] = heapAfter_multiply_A_0 ∧ ( result_228_A_0.<created> = TRUE ∨ result_228_A_0.<created>@anon_heap_multiply«anonHeapFunction» = TRUE) ∧ (exc_258_A_0 = null)«impl» ∧ RELATED_BY_multiply_1272441881(p_6_A, exponent_6_A, heap, p_6_A, result_228_A_0, exc_258_A_0, heapAfter_multiply_A_0) ∧ exponent_6_A.<created> = TRUE ∧ ¬result_228_A_0 = null ∧ ¬result_227_A_0 < 0 ∧ ¬java.math.BigInteger.ZERO = null ∧ ¬ self_191_A.group.generator@heapAtPre_A«anonHeapFunction» = null ∧ ¬ self_191_A.group@heapAtPre_A«anonHeapFunction» = null ∧ ¬ self_191_A.curve@heapAtPre_A«anonHeapFunction» = null ∧ ¬ java.math.BigInteger.ZERO@heapAtPre_A«anonHeapFunction» = null ∧ ¬{exc_256_A:=null || heap:=heapAfter_multiply_A_0 || result_226_A:=result_228_A_0} ¬( self_191_A = selfAtPost_191_A ∧ result_226_A = resultAtPost_226_A ∧ exc_256_A = excAtPost_256_A ∧ heapAtPost_A = heap) ∧ ¬exponent_6_A = null ∧ ¬p_6_A = null ∧ ¬self_191_A = null) ∧ {heap:=heapAtPre_B«anonHeapFunction»} ( self_191_B.group.generator.<created>@heapAtPre_B«anonHeapFunction» = TRUE ∧ java.math.BigInteger.ZERO.<created>@heapAtPre_B«anonHeapFunction» = TRUE ∧ self_191_B.group.<created>@heapAtPre_B«anonHeapFunction» = TRUE ∧ self_191_B.curve.<created>@heapAtPre_B«anonHeapFunction» = TRUE ∧ result_227_B_0 < 0 ∧ wellFormed(heapAtPre_B«anonHeapFunction») ∧ heapAtPre_B«anonHeapFunction» = heap ∧ self_191_B.<created> = TRUE ∧ de.polyas.core3.open.crypto.groups.ECGroup::exactInstance(self_191_B) = TRUE ∧ p_6_B.<created>@heapAtPre_B«anonHeapFunction» = TRUE ∧ exponent_6_B.<created>@heapAtPre_B«anonHeapFunction» = TRUE ∧ java.math.BigInteger.ZERO.value@heapAtPre_B«anonHeapFunction» = 0 ∧ wellFormed(heap) ∧ exc_257_B_0 = null ∧ result_227_B_0 ≤ 2147483647 ∧ result_227_B_0 ≥ -2147483648 ∧ ( result_227_B_0 ≤ 0 ↔ exponent_6_B.value + java.math.BigInteger.ZERO.value * -1 ≤ 0) ∧ ( result_227_B_0 ≥ 0 ↔ exponent_6_B.value + java.math.BigInteger.ZERO.value * -1 ≥ 0) ∧ RELATED_BY_compareTo_325434207(exponent_6_B, java.math.BigInteger.ZERO, heap, exponent_6_B, result_227_B_0, exc_257_B_0, heap) ∧ java.math.BigInteger.ZERO.value = 0 ∧ java.math.BigInteger.ZERO.<created> = TRUE ∧ result_228_B_1.<created> = TRUE ∧ self_191_B.curve.order = result_228_B_1.value ∧ (exc_258_B_1 = null)«impl» ∧ RELATED_BY_getOrder_757678341(self_191_B.curve, heap, self_191_B.curve, result_228_B_1, exc_258_B_1, heap) ∧ wellFormed(anon_heap_mod«anonHeapFunction») ∧ heap[anon(∅, anon_heap_mod«anonHeapFunction»)] = heapAfter_mod_B_0 ∧ ( result_229_B_0.<created> = TRUE ∨ result_229_B_0.<created>@anon_heap_mod«anonHeapFunction» = TRUE) ∧ if (exponent_6_B.<created> = TRUE) then (exponent_6_B.value) else (exponent_6_B.value@anon_heap_mod«anonHeapFunction») = java_math_BigInteger_value_0_B_0«selectSK» ∧ if (result_229_B_0.<created> = TRUE) then (result_229_B_0.value) else (result_229_B_0.value@anon_heap_mod«anonHeapFunction») = jmod(java_math_BigInteger_value_0_B_0«selectSK», result_228_B_1.value) ∧ java_math_BigInteger_value_3_B_0«selectSK» = 0 ∧ (exc_259_B_0 = null)«impl» ∧ RELATED_BY_mod_596311583(exponent_6_B, result_228_B_1, heap, exponent_6_B, result_229_B_0, exc_259_B_0, heapAfter_mod_B_0) ∧ wellFormed(anon_heap_multiply«anonHeapFunction») ∧ heapAfter_mod_B_0[anon(∅, anon_heap_multiply«anonHeapFunction»)] = heapAfter_multiply_B_1 ∧ exc_260_B_0 = null ∧ ( result_230_B_0.<created> = TRUE ∨ result_230_B_0.<created>@anon_heap_mod«anonHeapFunction» = TRUE ∨ result_230_B_0.<created>@anon_heap_multiply«anonHeapFunction» = TRUE) ∧ RELATED_BY_multiply_1272441881(p_6_B, result_229_B_0, heapAfter_mod_B_0, p_6_B, result_230_B_0, exc_260_B_0, heapAfter_multiply_B_1) ∧ wellFormed(heapAfter_mod_B_0) ∧ ¬result_230_B_0 = null ∧ ¬result_229_B_0 = null ∧ ¬result_228_B_1 = null ∧ ¬java.math.BigInteger.ZERO = null ∧ ¬ self_191_B.group.generator@heapAtPre_B«anonHeapFunction» = null ∧ ¬ self_191_B.group@heapAtPre_B«anonHeapFunction» = null ∧ ¬ self_191_B.curve@heapAtPre_B«anonHeapFunction» = null ∧ ¬ java.math.BigInteger.ZERO@heapAtPre_B«anonHeapFunction» = null ∧ ¬{exc_256_B:=null || heap:=heapAfter_multiply_B_1 || result_226_B:=result_230_B_0} ¬( self_191_B = selfAtPost_191_B ∧ result_226_B = resultAtPost_226_B ∧ exc_256_B = excAtPost_256_B ∧ heapAtPost_B = heap) ∧ ¬exponent_6_B = null ∧ ¬p_6_B = null ∧ ¬self_191_B = null)"
      (rule "andLeft" (formula "4"))
       (builtin "One Step Simplification" (formula "5"))
       (builtin "One Step Simplification" (formula "4"))
      (rule "andLeft" (formula "5"))
      (rule "andLeft" (formula "4"))
      (rule "notLeft" (formula "7"))
      (rule "andLeft" (formula "6"))
      (rule "andLeft" (formula "4"))
      (rule "notLeft" (formula "6"))
      (rule "andLeft" (formula "6"))
      (rule "notLeft" (formula "8"))
      (rule "andLeft" (formula "4"))
      (rule "notLeft" (formula "6"))
      (rule "notLeft" (formula "7"))
      (rule "andLeft" (formula "6"))
      (rule "andLeft" (formula "4"))
      (rule "notLeft" (formula "6"))
      (rule "andLeft" (formula "7"))
      (rule "andLeft" (formula "6"))
      (rule "andLeft" (formula "5"))
      (rule "andLeft" (formula "4"))
      (rule "andLeft" (formula "10"))
      (rule "notLeft" (formula "9"))
      (rule "andLeft" (formula "8"))
      (rule "andLeft" (formula "6"))
      (rule "andLeft" (formula "4"))
      (rule "notLeft" (formula "6"))
      (rule "andLeft" (formula "11"))
      (rule "andLeft" (formula "9"))
      (rule "notLeft" (formula "11"))
      (rule "andLeft" (formula "6"))
      (rule "notLeft" (formula "5"))
      (rule "andLeft" (formula "4"))
      (rule "andLeft" (formula "10"))
      (rule "notLeft" (formula "12"))
      (rule "andLeft" (formula "4"))
      (rule "notLeft" (formula "6"))
      (rule "notLeft" (formula "11"))
      (rule "andLeft" (formula "10"))
      (rule "andLeft" (formula "4"))
      (rule "notLeft" (formula "6"))
      (rule "andLeft" (formula "10"))
      (rule "notLeft" (formula "12"))
      (rule "andLeft" (formula "4"))
      (rule "notLeft" (formula "6"))
      (rule "notLeft" (formula "11"))
      (rule "andLeft" (formula "10"))
      (rule "notLeft" (formula "5"))
      (rule "andLeft" (formula "4"))
      (rule "notLeft" (formula "11"))
      (rule "andLeft" (formula "10"))
      (rule "notLeft" (formula "5"))
      (rule "andLeft" (formula "4"))
      (rule "andLeft" (formula "10"))
      (rule "notLeft" (formula "12"))
      (rule "andLeft" (formula "4"))
      (rule "andLeft" (formula "11"))
      (rule "andLeft" (formula "4"))
      (rule "andLeft" (formula "12"))
      (rule "andLeft" (formula "4"))
      (rule "andLeft" (formula "13"))
      (rule "andLeft" (formula "4"))
      (rule "andLeft" (formula "14"))
      (rule "andLeft" (formula "4"))
      (rule "andLeft" (formula "15"))
      (rule "andLeft" (formula "4"))
      (rule "andLeft" (formula "16"))
      (rule "andLeft" (formula "4"))
      (rule "andLeft" (formula "17"))
      (rule "andLeft" (formula "4"))
      (rule "andLeft" (formula "18"))
      (rule "andLeft" (formula "4"))
      (rule "andLeft" (formula "19"))
      (rule "andLeft" (formula "4"))
      (rule "andLeft" (formula "20"))
      (rule "andLeft" (formula "4"))
      (rule "andLeft" (formula "21"))
      (rule "andLeft" (formula "4"))
      (rule "andLeft" (formula "22"))
      (rule "andLeft" (formula "4"))
      (rule "andLeft" (formula "23"))
      (rule "andLeft" (formula "4"))
      (rule "andLeft" (formula "24"))
      (rule "andLeft" (formula "4"))
      (rule "andLeft" (formula "24"))
      (rule "andLeft" (formula "4"))
      (rule "andLeft" (formula "24"))
      (rule "andLeft" (formula "4"))
      (rule "andLeft" (formula "25"))
      (rule "andLeft" (formula "4"))
      (rule "andLeft" (formula "26"))
      (rule "andLeft" (formula "4"))
      (rule "andLeft" (formula "26"))
      (rule "andLeft" (formula "26"))
      (rule "andLeft" (formula "26"))
      (rule "andLeft" (formula "26"))
      (rule "andLeft" (formula "26"))
      (rule "andLeft" (formula "26"))
      (rule "andLeft" (formula "26"))
      (rule "andLeft" (formula "26"))
      (rule "andLeft" (formula "26"))
      (rule "andLeft" (formula "26"))
      (rule "andLeft" (formula "26"))
      (rule "andLeft" (formula "26"))
      (rule "andLeft" (formula "26"))
      (rule "andLeft" (formula "26"))
      (rule "andLeft" (formula "26"))
      (rule "andLeft" (formula "26"))
      (rule "andLeft" (formula "26"))
      (rule "andLeft" (formula "26"))
      (rule "eqSymm" (formula "84"))
      (rule "eqSymm" (formula "1"))
      (rule "eqSymm" (formula "2"))
      (rule "eqSymm" (formula "3"))
      (rule "eqSymm" (formula "63"))
      (rule "eqSymm" (formula "24"))
      (rule "replace_known_left" (formula "50") (term "0,0") (ifseqformula "33"))
       (builtin "One Step Simplification" (formula "50"))
      (rule "applyEqReverse" (formula "51") (term "0,1") (ifseqformula "50"))
      (rule "hideAuxiliaryEq" (formula "50"))
      (rule "inEqSimp_ltRight" (formula "67"))
      (rule "times_zero_1" (formula "1") (term "0,0"))
      (rule "add_zero_left" (formula "1") (term "0"))
      (rule "replace_known_left" (formula "13") (term "0") (ifseqformula "1"))
       (builtin "One Step Simplification" (formula "13"))
      (rule "inEqSimp_ltToLeq" (formula "30"))
      (rule "mul_literals" (formula "30") (term "1,0,0"))
      (rule "add_zero_right" (formula "30") (term "0,0"))
      (rule "applyEq" (formula "4") (term "1,1,1") (ifseqformula "23"))
      (rule "applyEq" (formula "4") (term "0") (ifseqformula "45"))
      (rule "applyEq" (formula "83") (term "0,0") (ifseqformula "64"))
      (rule "eqSymm" (formula "83"))
      (rule "applyEq" (formula "47") (term "4") (ifseqformula "46"))
      (rule "applyEq" (formula "13") (term "0,1,0") (ifseqformula "15"))
      (rule "times_zero_2" (formula "13") (term "1,0"))
      (rule "add_zero_right" (formula "13") (term "0"))
      (rule "applyEq" (formula "40") (term "0,1,0,1") (ifseqformula "42"))
      (rule "mul_literals" (formula "40") (term "1,0,1"))
      (rule "add_zero_right" (formula "40") (term "0,1"))
      (rule "applyEq" (formula "14") (term "5") (ifseqformula "9"))
      (rule "applyEq" (formula "6") (term "0,0") (ifseqformula "23"))
      (rule "applyEqRigid" (formula "12") (term "0,1,0,1") (ifseqformula "15"))
      (rule "times_zero_2" (formula "12") (term "1,0,1"))
      (rule "add_zero_right" (formula "12") (term "0,1"))
      (rule "applyEq" (formula "5") (term "1,0") (ifseqformula "23"))
      (rule "applyEq" (formula "54") (term "5") (ifseqformula "53"))
      (rule "applyEqRigid" (formula "39") (term "0,1,0,1") (ifseqformula "42"))
      (rule "times_zero_2" (formula "39") (term "1,0,1"))
      (rule "add_zero_right" (formula "39") (term "0,1"))
      (rule "applyEq" (formula "59") (term "5") (ifseqformula "57"))
      (rule "applyEq" (formula "71") (term "1,0") (ifseqformula "23"))
      (rule "applyEq" (formula "45") (term "1,1,0") (ifseqformula "61"))
      (rule "applyEq" (formula "69") (term "1,1,0") (ifseqformula "23"))
      (rule "applyEq" (formula "29") (term "1,1,0") (ifseqformula "61"))
      (rule "applyEq" (formula "73") (term "1,0") (ifseqformula "23"))
      (rule "applyEq" (formula "27") (term "1,1,1,0") (ifseqformula "61"))
      (rule "applyEq" (formula "58") (term "1,0,1") (ifseqformula "62"))
      (rule "applyEq" (formula "58") (term "1,0,1,0") (ifseqformula "62"))
      (rule "applyEq" (formula "70") (term "1,1,0") (ifseqformula "61"))
      (rule "applyEq" (formula "47") (term "1,0") (ifseqformula "61"))
      (rule "applyEq" (formula "31") (term "1,0") (ifseqformula "61"))
      (rule "applyEq" (formula "19") (term "1,0,0") (ifseqformula "24"))
      (rule "applyEq" (formula "32") (term "0,0") (ifseqformula "61"))
      (rule "applyEq" (formula "59") (term "4") (ifseqformula "62"))
      (rule "applyEq" (formula "74") (term "1,0") (ifseqformula "61"))
      (rule "applyEq" (formula "41") (term "5") (ifseqformula "36"))
      (rule "applyEq" (formula "21") (term "4") (ifseqformula "24"))
      (rule "applyEq" (formula "82") (term "0") (ifseqformula "61"))
      (rule "applyEq" (formula "19") (term "1,0,1") (ifseqformula "24"))
      (rule "applyEq" (formula "47") (term "1,2") (ifseqformula "61"))
      (rule "applyEq" (formula "28") (term "1,1,0") (ifseqformula "61"))
      (rule "applyEq" (formula "72") (term "1,0") (ifseqformula "61"))
      (rule "applyEq" (formula "21") (term "5") (ifseqformula "20"))
      (rule "applyEq" (formula "66") (term "0") (ifseqformula "24"))
      (rule "applyEq" (formula "65") (term "0") (ifseqformula "62"))
      (rule "applyEq" (formula "81") (term "0") (ifseqformula "23"))
      (rule "applyEq" (formula "58") (term "1,0,0,0") (ifseqformula "62"))
      (rule "applyEq" (formula "51") (term "0,1") (ifseqformula "3"))
      (rule "applyEqRigid" (formula "83") (term "0,0") (ifseqformula "26"))
      (rule "eqSymm" (formula "83"))
      (rule "applyEq" (formula "39") (term "0,1") (ifseqformula "3"))
      (rule "applyEq" (formula "40") (term "0,1") (ifseqformula "3"))
      (rule "replace_known_left" (formula "40") (term "1") (ifseqformula "13"))
       (builtin "One Step Simplification" (formula "40"))
      (rule "applyEq" (formula "45") (term "1") (ifseqformula "4"))
      (rule "applyEq" (formula "51") (term "1,1") (ifseqformula "4"))
      (rule "jmod_axiom" (formula "51") (term "1"))
      (rule "polySimp_mulComm1" (formula "51") (term "1,1"))
      (rule "polySimp_homoEq" (formula "51"))
      (rule "polySimp_addComm1" (formula "51") (term "0"))
      (rule "polySimp_sepNegMonomial" (formula "51"))
      (rule "polySimp_mulLiterals" (formula "51") (term "0"))
      (rule "polySimp_elimOne" (formula "51") (term "0"))
      (rule "inEqSimp_sepPosMonomial0" (formula "30"))
      (rule "mul_literals" (formula "30") (term "1"))
      (rule "inEqSimp_subsumption0" (formula "39") (term "0") (ifseqformula "30"))
      (rule "leq_literals" (formula "39") (term "0,0"))
       (builtin "One Step Simplification" (formula "39"))
      (rule "replace_known_left" (formula "12") (term "1") (ifseqformula "39"))
       (builtin "One Step Simplification" (formula "12"))
      (rule "inEqSimp_subsumption1" (formula "11") (ifseqformula "1"))
      (rule "leq_literals" (formula "11") (term "0"))
       (builtin "One Step Simplification" (formula "11"))
      (rule "true_left" (formula "11"))
      (rule "inEqSimp_subsumption0" (formula "36") (ifseqformula "29"))
      (rule "leq_literals" (formula "36") (term "0"))
       (builtin "One Step Simplification" (formula "36"))
      (rule "true_left" (formula "36"))
      (rule "inEqSimp_subsumption1" (formula "36") (ifseqformula "38"))
      (rule "leq_literals" (formula "36") (term "0"))
       (builtin "One Step Simplification" (formula "36"))
      (rule "true_left" (formula "36"))
      (rule "inEqSimp_contradInEq1" (formula "29") (ifseqformula "37"))
      (rule "qeq_literals" (formula "29") (term "0"))
       (builtin "One Step Simplification" (formula "29"))
      (rule "closeFalse" (formula "29"))
   )
)
(branch " {heap:=heapAtPre_A«anonHeapFunction»} ( self_191_A.group.generator.<created>@heapAtPre_A«anonHeapFunction» = TRUE ∧ java.math.BigInteger.ZERO.<created>@heapAtPre_A«anonHeapFunction» = TRUE ∧ self_191_A.group.<created>@heapAtPre_A«anonHeapFunction» = TRUE ∧ self_191_A.curve.<created>@heapAtPre_A«anonHeapFunction» = TRUE ∧ result_227_A_0 < 0 ∧ wellFormed(heapAtPre_A«anonHeapFunction») ∧ heapAtPre_A«anonHeapFunction» = heap ∧ self_191_A.<created> = TRUE ∧ de.polyas.core3.open.crypto.groups.ECGroup::exactInstance(self_191_A) = TRUE ∧ p_6_A.<created>@heapAtPre_A«anonHeapFunction» = TRUE ∧ exponent_6_A.<created>@heapAtPre_A«anonHeapFunction» = TRUE ∧ java.math.BigInteger.ZERO.value@heapAtPre_A«anonHeapFunction» = 0 ∧ wellFormed(heap) ∧ exc_257_A_0 = null ∧ result_227_A_0 ≤ 2147483647 ∧ result_227_A_0 ≥ -2147483648 ∧ ( result_227_A_0 ≤ 0 ↔ exponent_6_A.value + java.math.BigInteger.ZERO.value * -1 ≤ 0) ∧ ( result_227_A_0 ≥ 0 ↔ exponent_6_A.value + java.math.BigInteger.ZERO.value * -1 ≥ 0) ∧ RELATED_BY_compareTo_325434207(exponent_6_A, java.math.BigInteger.ZERO, heap, exponent_6_A, result_227_A_0, exc_257_A_0, heap) ∧ java.math.BigInteger.ZERO.value = 0 ∧ java.math.BigInteger.ZERO.<created> = TRUE ∧ result_228_A_1.<created> = TRUE ∧ self_191_A.curve.order = result_228_A_1.value ∧ (exc_258_A_1 = null)«impl» ∧ RELATED_BY_getOrder_757678341(self_191_A.curve, heap, self_191_A.curve, result_228_A_1, exc_258_A_1, heap) ∧ wellFormed(anon_heap_mod«anonHeapFunction») ∧ heap[anon(∅, anon_heap_mod«anonHeapFunction»)] = heapAfter_mod_A_0 ∧ ( result_229_A_0.<created> = TRUE ∨ result_229_A_0.<created>@anon_heap_mod«anonHeapFunction» = TRUE) ∧ if (exponent_6_A.<created> = TRUE) then (exponent_6_A.value) else (exponent_6_A.value@anon_heap_mod«anonHeapFunction») = java_math_BigInteger_value_0_A_0«selectSK» ∧ if (result_229_A_0.<created> = TRUE) then (result_229_A_0.value) else (result_229_A_0.value@anon_heap_mod«anonHeapFunction») = jmod(java_math_BigInteger_value_0_A_0«selectSK», result_228_A_1.value) ∧ java_math_BigInteger_value_3_A_0«selectSK» = 0 ∧ (exc_259_A_0 = null)«impl» ∧ RELATED_BY_mod_596311583(exponent_6_A, result_228_A_1, heap, exponent_6_A, result_229_A_0, exc_259_A_0, heapAfter_mod_A_0) ∧ wellFormed(anon_heap_multiply«anonHeapFunction») ∧ heapAfter_mod_A_0[anon(∅, anon_heap_multiply«anonHeapFunction»)] = heapAfter_multiply_A_1 ∧ exc_260_A_0 = null ∧ ( result_230_A_0.<created> = TRUE ∨ result_230_A_0.<created>@anon_heap_mod«anonHeapFunction» = TRUE ∨ result_230_A_0.<created>@anon_heap_multiply«anonHeapFunction» = TRUE) ∧ RELATED_BY_multiply_1272441881(p_6_A, result_229_A_0, heapAfter_mod_A_0, p_6_A, result_230_A_0, exc_260_A_0, heapAfter_multiply_A_1) ∧ wellFormed(heapAfter_mod_A_0) ∧ ¬result_230_A_0 = null ∧ ¬result_229_A_0 = null ∧ ¬result_228_A_1 = null ∧ ¬java.math.BigInteger.ZERO = null ∧ ¬ self_191_A.group.generator@heapAtPre_A«anonHeapFunction» = null ∧ ¬ self_191_A.group@heapAtPre_A«anonHeapFunction» = null ∧ ¬ self_191_A.curve@heapAtPre_A«anonHeapFunction» = null ∧ ¬ java.math.BigInteger.ZERO@heapAtPre_A«anonHeapFunction» = null ∧ ¬{exc_256_A:=null || heap:=heapAfter_multiply_A_1 || result_226_A:=result_230_A_0} ¬( self_191_A = selfAtPost_191_A ∧ result_226_A = resultAtPost_226_A ∧ exc_256_A = excAtPost_256_A ∧ heapAtPost_A = heap) ∧ ¬exponent_6_A = null ∧ ¬p_6_A = null ∧ ¬self_191_A = null) ∧ {heap:=heapAtPre_B«anonHeapFunction»} ( self_191_B.group.generator.<created>@heapAtPre_B«anonHeapFunction» = TRUE ∧ java.math.BigInteger.ZERO.<created>@heapAtPre_B«anonHeapFunction» = TRUE ∧ self_191_B.group.<created>@heapAtPre_B«anonHeapFunction» = TRUE ∧ self_191_B.curve.<created>@heapAtPre_B«anonHeapFunction» = TRUE ∧ result_227_B_0 < 0 ∧ wellFormed(heapAtPre_B«anonHeapFunction») ∧ heapAtPre_B«anonHeapFunction» = heap ∧ self_191_B.<created> = TRUE ∧ de.polyas.core3.open.crypto.groups.ECGroup::exactInstance(self_191_B) = TRUE ∧ p_6_B.<created>@heapAtPre_B«anonHeapFunction» = TRUE ∧ exponent_6_B.<created>@heapAtPre_B«anonHeapFunction» = TRUE ∧ java.math.BigInteger.ZERO.value@heapAtPre_B«anonHeapFunction» = 0 ∧ wellFormed(heap) ∧ exc_257_B_0 = null ∧ result_227_B_0 ≤ 2147483647 ∧ result_227_B_0 ≥ -2147483648 ∧ ( result_227_B_0 ≤ 0 ↔ exponent_6_B.value + java.math.BigInteger.ZERO.value * -1 ≤ 0) ∧ ( result_227_B_0 ≥ 0 ↔ exponent_6_B.value + java.math.BigInteger.ZERO.value * -1 ≥ 0) ∧ RELATED_BY_compareTo_325434207(exponent_6_B, java.math.BigInteger.ZERO, heap, exponent_6_B, result_227_B_0, exc_257_B_0, heap) ∧ java.math.BigInteger.ZERO.value = 0 ∧ java.math.BigInteger.ZERO.<created> = TRUE ∧ result_228_B_1.<created> = TRUE ∧ self_191_B.curve.order = result_228_B_1.value ∧ (exc_258_B_1 = null)«impl» ∧ RELATED_BY_getOrder_757678341(self_191_B.curve, heap, self_191_B.curve, result_228_B_1, exc_258_B_1, heap) ∧ wellFormed(anon_heap_mod«anonHeapFunction») ∧ heap[anon(∅, anon_heap_mod«anonHeapFunction»)] = heapAfter_mod_B_0 ∧ ( result_229_B_0.<created> = TRUE ∨ result_229_B_0.<created>@anon_heap_mod«anonHeapFunction» = TRUE) ∧ if (exponent_6_B.<created> = TRUE) then (exponent_6_B.value) else (exponent_6_B.value@anon_heap_mod«anonHeapFunction») = java_math_BigInteger_value_0_B_0«selectSK» ∧ if (result_229_B_0.<created> = TRUE) then (result_229_B_0.value) else (result_229_B_0.value@anon_heap_mod«anonHeapFunction») = jmod(java_math_BigInteger_value_0_B_0«selectSK», result_228_B_1.value) ∧ java_math_BigInteger_value_3_B_0«selectSK» = 0 ∧ (exc_259_B_0 = null)«impl» ∧ RELATED_BY_mod_596311583(exponent_6_B, result_228_B_1, heap, exponent_6_B, result_229_B_0, exc_259_B_0, heapAfter_mod_B_0) ∧ wellFormed(anon_heap_multiply«anonHeapFunction») ∧ heapAfter_mod_B_0[anon(∅, anon_heap_multiply«anonHeapFunction»)] = heapAfter_multiply_B_1 ∧ exc_260_B_0 = null ∧ ( result_230_B_0.<created> = TRUE ∨ result_230_B_0.<created>@anon_heap_mod«anonHeapFunction» = TRUE ∨ result_230_B_0.<created>@anon_heap_multiply«anonHeapFunction» = TRUE) ∧ RELATED_BY_multiply_1272441881(p_6_B, result_229_B_0, heapAfter_mod_B_0, p_6_B, result_230_B_0, exc_260_B_0, heapAfter_multiply_B_1) ∧ wellFormed(heapAfter_mod_B_0) ∧ ¬result_230_B_0 = null ∧ ¬result_229_B_0 = null ∧ ¬result_228_B_1 = null ∧ ¬java.math.BigInteger.ZERO = null ∧ ¬ self_191_B.group.generator@heapAtPre_B«anonHeapFunction» = null ∧ ¬ self_191_B.group@heapAtPre_B«anonHeapFunction» = null ∧ ¬ self_191_B.curve@heapAtPre_B«anonHeapFunction» = null ∧ ¬ java.math.BigInteger.ZERO@heapAtPre_B«anonHeapFunction» = null ∧ ¬{exc_256_B:=null || heap:=heapAfter_multiply_B_1 || result_226_B:=result_230_B_0} ¬( self_191_B = selfAtPost_191_B ∧ result_226_B = resultAtPost_226_B ∧ exc_256_B = excAtPost_256_B ∧ heapAtPost_B = heap) ∧ ¬exponent_6_B = null ∧ ¬p_6_B = null ∧ ¬self_191_B = null)"
   (rule "andLeft" (formula "4"))
    (builtin "One Step Simplification" (formula "5"))
    (builtin "One Step Simplification" (formula "4"))
   (rule "andLeft" (formula "5"))
   (rule "andLeft" (formula "4"))
   (rule "notLeft" (formula "7"))
   (rule "andLeft" (formula "6"))
   (rule "andLeft" (formula "4"))
   (rule "notLeft" (formula "6"))
   (rule "andLeft" (formula "6"))
   (rule "notLeft" (formula "8"))
   (rule "andLeft" (formula "4"))
   (rule "notLeft" (formula "6"))
   (rule "notLeft" (formula "7"))
   (rule "andLeft" (formula "6"))
   (rule "andLeft" (formula "4"))
   (rule "notLeft" (formula "6"))
   (rule "andLeft" (formula "7"))
   (rule "andLeft" (formula "6"))
   (rule "andLeft" (formula "5"))
   (rule "andLeft" (formula "4"))
   (rule "andLeft" (formula "10"))
   (rule "notLeft" (formula "9"))
   (rule "andLeft" (formula "8"))
   (rule "andLeft" (formula "6"))
   (rule "andLeft" (formula "4"))
   (rule "notLeft" (formula "6"))
   (rule "andLeft" (formula "11"))
   (rule "andLeft" (formula "9"))
   (rule "notLeft" (formula "11"))
   (rule "andLeft" (formula "6"))
   (rule "notLeft" (formula "5"))
   (rule "andLeft" (formula "4"))
   (rule "andLeft" (formula "10"))
   (rule "notLeft" (formula "12"))
   (rule "andLeft" (formula "4"))
   (rule "notLeft" (formula "6"))
   (rule "notLeft" (formula "11"))
   (rule "andLeft" (formula "10"))
   (rule "andLeft" (formula "4"))
   (rule "notLeft" (formula "6"))
   (rule "andLeft" (formula "10"))
   (rule "notLeft" (formula "12"))
   (rule "andLeft" (formula "4"))
   (rule "notLeft" (formula "6"))
   (rule "notLeft" (formula "11"))
   (rule "andLeft" (formula "10"))
   (rule "notLeft" (formula "5"))
   (rule "andLeft" (formula "4"))
   (rule "notLeft" (formula "11"))
   (rule "andLeft" (formula "10"))
   (rule "notLeft" (formula "5"))
   (rule "andLeft" (formula "4"))
   (rule "andLeft" (formula "10"))
   (rule "notLeft" (formula "12"))
   (rule "notLeft" (formula "5"))
   (rule "andLeft" (formula "4"))
   (rule "andLeft" (formula "10"))
   (rule "andLeft" (formula "4"))
   (rule "andLeft" (formula "11"))
   (rule "andLeft" (formula "4"))
   (rule "andLeft" (formula "12"))
   (rule "andLeft" (formula "4"))
   (rule "andLeft" (formula "13"))
   (rule "andLeft" (formula "4"))
   (rule "andLeft" (formula "14"))
   (rule "andLeft" (formula "4"))
   (rule "andLeft" (formula "14"))
   (rule "andLeft" (formula "4"))
   (rule "andLeft" (formula "15"))
   (rule "andLeft" (formula "4"))
   (rule "andLeft" (formula "16"))
   (rule "andLeft" (formula "4"))
   (rule "andLeft" (formula "17"))
   (rule "andLeft" (formula "4"))
   (rule "andLeft" (formula "18"))
   (rule "andLeft" (formula "4"))
   (rule "andLeft" (formula "19"))
   (rule "andLeft" (formula "4"))
   (rule "andLeft" (formula "20"))
   (rule "andLeft" (formula "4"))
   (rule "andLeft" (formula "21"))
   (rule "andLeft" (formula "4"))
   (rule "andLeft" (formula "21"))
   (rule "andLeft" (formula "4"))
   (rule "andLeft" (formula "22"))
   (rule "andLeft" (formula "4"))
   (rule "andLeft" (formula "23"))
   (rule "andLeft" (formula "4"))
   (rule "andLeft" (formula "24"))
   (rule "andLeft" (formula "4"))
   (rule "andLeft" (formula "25"))
   (rule "andLeft" (formula "4"))
   (rule "andLeft" (formula "26"))
   (rule "andLeft" (formula "4"))
   (rule "andLeft" (formula "27"))
   (rule "andLeft" (formula "4"))
   (rule "andLeft" (formula "28"))
   (rule "andLeft" (formula "4"))
   (rule "andLeft" (formula "29"))
   (rule "andLeft" (formula "4"))
   (rule "andLeft" (formula "30"))
   (rule "andLeft" (formula "4"))
   (rule "andLeft" (formula "31"))
   (rule "andLeft" (formula "4"))
   (rule "andLeft" (formula "32"))
   (rule "andLeft" (formula "4"))
   (rule "andLeft" (formula "33"))
   (rule "andLeft" (formula "4"))
   (rule "andLeft" (formula "34"))
   (rule "andLeft" (formula "4"))
   (rule "andLeft" (formula "34"))
   (rule "andLeft" (formula "4"))
   (rule "andLeft" (formula "35"))
   (rule "andLeft" (formula "4"))
   (rule "andLeft" (formula "36"))
   (rule "andLeft" (formula "4"))
   (rule "andLeft" (formula "37"))
   (rule "andLeft" (formula "4"))
   (rule "andLeft" (formula "38"))
   (rule "andLeft" (formula "4"))
   (rule "andLeft" (formula "38"))
   (rule "andLeft" (formula "4"))
   (rule "andLeft" (formula "39"))
   (rule "andLeft" (formula "4"))
   (rule "andLeft" (formula "40"))
   (rule "andLeft" (formula "4"))
   (rule "andLeft" (formula "41"))
   (rule "andLeft" (formula "4"))
   (rule "Use_information_flow_contract_for_getOrder_757678341" (formula "61") (ifseqformula "24"))
   (rule "doubleImpLeft" (formula "61"))
   (branch "pre_A & pre_B getOrder_757678341 (information flow)"
      (rule "andRight" (formula "80"))
      (branch
         (rule "eqSymm" (formula "101"))
         (rule "eqSymm" (formula "1"))
         (rule "eqSymm" (formula "2"))
         (rule "eqSymm" (formula "3"))
         (rule "eqSymm" (formula "78"))
         (rule "eqSymm" (formula "39"))
         (rule "replace_known_left" (formula "65") (term "0,0") (ifseqformula "48"))
          (builtin "One Step Simplification" (formula "65"))
         (rule "applyEqReverse" (formula "66") (term "0,1") (ifseqformula "65"))
         (rule "hideAuxiliaryEq" (formula "65"))
         (rule "replace_known_left" (formula "27") (term "0,0") (ifseqformula "11"))
          (builtin "One Step Simplification" (formula "27"))
         (rule "applyEqReverse" (formula "28") (term "0,1") (ifseqformula "27"))
         (rule "hideAuxiliaryEq" (formula "27"))
         (rule "inEqSimp_ltToLeq" (formula "43"))
         (rule "times_zero_1" (formula "43") (term "1,0,0"))
         (rule "add_zero_right" (formula "43") (term "0,0"))
         (rule "inEqSimp_ltToLeq" (formula "7"))
         (rule "times_zero_1" (formula "7") (term "1,0,0"))
         (rule "add_zero_right" (formula "7") (term "0,0"))
         (rule "applyEq" (formula "3") (term "0") (ifseqformula "58"))
         (rule "applyEq" (formula "33") (term "1,0,1") (ifseqformula "37"))
         (rule "applyEq" (formula "34") (term "5") (ifseqformula "32"))
         (rule "applyEq" (formula "24") (term "4") (ifseqformula "23"))
         (rule "applyEq" (formula "60") (term "1,0") (ifseqformula "74"))
         (rule "applyEq" (formula "88") (term "1,0") (ifseqformula "74"))
         (rule "applyEqRigid" (formula "52") (term "0,1,0,1") (ifseqformula "55"))
         (rule "times_zero_2" (formula "52") (term "1,0,1"))
         (rule "add_zero_right" (formula "52") (term "0,1"))
         (rule "applyEq" (formula "71") (term "1,0,1,0") (ifseqformula "75"))
         (rule "applyEq" (formula "40") (term "1,1,1,0") (ifseqformula "74"))
         (rule "applyEq" (formula "34") (term "4") (ifseqformula "37"))
         (rule "applyEq" (formula "97") (term "0") (ifseqformula "36"))
         (rule "applyEq" (formula "79") (term "0") (ifseqformula "37"))
         (rule "applyEq" (formula "87") (term "1,0") (ifseqformula "36"))
         (rule "applyEq" (formula "80") (term "0") (ifseqformula "75"))
         (rule "applyEq" (formula "67") (term "5") (ifseqformula "66"))
         (rule "applyEq" (formula "53") (term "0,1,0,1") (ifseqformula "55"))
         (rule "mul_literals" (formula "53") (term "1,0,1"))
         (rule "add_zero_right" (formula "53") (term "0,1"))
         (rule "applyEq" (formula "58") (term "1,1,0") (ifseqformula "74"))
         (rule "applyEq" (formula "30") (term "5") (ifseqformula "29"))
         (rule "applyEq" (formula "41") (term "1,1,0") (ifseqformula "74"))
         (rule "applyEq" (formula "72") (term "5") (ifseqformula "70"))
         (rule "applyEq" (formula "6") (term "1,1,0") (ifseqformula "36"))
         (rule "applyEq" (formula "5") (term "1,1,0") (ifseqformula "36"))
         (rule "applyEq" (formula "17") (term "0,1,0,1") (ifseqformula "19"))
         (rule "mul_literals" (formula "17") (term "1,0,1"))
         (rule "add_zero_right" (formula "17") (term "0,1"))
         (rule "applyEq" (formula "44") (term "1,0") (ifseqformula "74"))
         (rule "applyEq" (formula "18") (term "5") (ifseqformula "13"))
         (rule "applyEq" (formula "3") (term "1,1,1") (ifseqformula "36"))
         (rule "applyEq" (formula "85") (term "1,1,0") (ifseqformula "36"))
         (rule "applyEq" (formula "60") (term "1,2") (ifseqformula "74"))
         (rule "applyEq" (formula "89") (term "1,0") (ifseqformula "36"))
         (rule "applyEq" (formula "99") (term "0,1") (ifseqformula "39"))
         (rule "applyEq" (formula "71") (term "1,0,1") (ifseqformula "75"))
         (rule "applyEq" (formula "71") (term "1,0,0,0") (ifseqformula "75"))
         (rule "applyEq" (formula "99") (term "0,0") (ifseqformula "77"))
         (rule "applyEq" (formula "24") (term "1,0") (ifseqformula "36"))
         (rule "applyEq" (formula "86") (term "1,1,0") (ifseqformula "74"))
         (rule "applyEq" (formula "72") (term "4") (ifseqformula "75"))
         (rule "applyEq" (formula "90") (term "1,0") (ifseqformula "74"))
         (rule "applyEq" (formula "54") (term "5") (ifseqformula "49"))
         (rule "applyEq" (formula "33") (term "1,0,0,0") (ifseqformula "37"))
         (rule "applyEqRigid" (formula "16") (term "0,1,0,1") (ifseqformula "19"))
         (rule "times_zero_2" (formula "16") (term "1,0,1"))
         (rule "add_zero_right" (formula "16") (term "0,1"))
         (rule "applyEq" (formula "60") (term "4") (ifseqformula "59"))
         (rule "applyEq" (formula "4") (term "1,1,1,0") (ifseqformula "36"))
         (rule "applyEq" (formula "24") (term "1,2") (ifseqformula "36"))
         (rule "applyEq" (formula "42") (term "1,1,0") (ifseqformula "74"))
         (rule "applyEq" (formula "78") (term "1,1") (ifseqformula "74"))
         (rule "applyEq" (formula "8") (term "1,0") (ifseqformula "36"))
         (rule "applyEq" (formula "22") (term "1,1,0") (ifseqformula "36"))
         (rule "applyEq" (formula "98") (term "0") (ifseqformula "74"))
         (rule "applyEq" (formula "33") (term "1,0,1,0") (ifseqformula "37"))
         (rule "applyEq" (formula "9") (term "0,0") (ifseqformula "36"))
         (rule "applyEq" (formula "45") (term "0,0") (ifseqformula "74"))
         (rule "applyEq" (formula "64") (term "0,1") (ifseqformula "2"))
         (rule "applyEq" (formula "53") (term "0,1") (ifseqformula "2"))
         (rule "applyEq" (formula "52") (term "0,1") (ifseqformula "2"))
         (rule "applyEq" (formula "64") (term "1,1") (ifseqformula "3"))
         (rule "applyEq" (formula "58") (term "1") (ifseqformula "3"))
         (rule "applyEq" (formula "3") (term "1") (ifseqformula "22"))
         (rule "applyEq" (formula "64") (term "1,1") (ifseqformula "22"))
         (rule "applyEq" (formula "58") (term "1") (ifseqformula "22"))
         (rule "jmod_axiom" (formula "27") (term "1"))
         (rule "polySimp_mulComm1" (formula "27") (term "1,1"))
         (rule "polySimp_homoEq" (formula "27"))
         (rule "polySimp_addComm1" (formula "27") (term "0"))
         (rule "jmod_axiom" (formula "64") (term "1"))
         (rule "polySimp_mulComm1" (formula "64") (term "1,1"))
         (rule "polySimp_homoEq" (formula "64"))
         (rule "polySimp_addComm1" (formula "64") (term "0"))
         (rule "polySimp_sepNegMonomial" (formula "27"))
         (rule "polySimp_mulLiterals" (formula "27") (term "0"))
         (rule "polySimp_elimOne" (formula "27") (term "0"))
         (rule "applyEq" (formula "64") (term "0,1,0") (ifseqformula "27"))
         (rule "polySimp_mulComm0" (formula "64") (term "1,0"))
         (rule "polySimp_rightDist" (formula "64") (term "1,0"))
         (rule "polySimp_mulLiterals" (formula "64") (term "1,1,0"))
         (rule "polySimp_elimOne" (formula "64") (term "1,1,0"))
         (rule "polySimp_mulComm0" (formula "64") (term "0,1,0"))
         (rule "polySimp_addComm1" (formula "64") (term "0"))
         (rule "polySimp_addAssoc" (formula "64") (term "0,0"))
         (rule "polySimp_pullOutFactor1" (formula "64") (term "0,0,0"))
         (rule "add_literals" (formula "64") (term "1,0,0,0"))
         (rule "times_zero_1" (formula "64") (term "0,0,0"))
         (rule "add_zero_left" (formula "64") (term "0,0"))
         (rule "polySimp_sepNegMonomial" (formula "64"))
         (rule "polySimp_mulLiterals" (formula "64") (term "0"))
         (rule "polySimp_elimOne" (formula "64") (term "0"))
         (rule "inEqSimp_sepPosMonomial0" (formula "43"))
         (rule "mul_literals" (formula "43") (term "1"))
         (rule "inEqSimp_sepPosMonomial0" (formula "7"))
         (rule "mul_literals" (formula "7") (term "1"))
         (rule "inEqSimp_subsumption0" (formula "16") (term "0") (ifseqformula "7"))
         (rule "leq_literals" (formula "16") (term "0,0"))
          (builtin "One Step Simplification" (formula "16"))
         (rule "replace_known_left" (formula "52") (term "1") (ifseqformula "16"))
          (builtin "One Step Simplification" (formula "52"))
         (rule "inEqSimp_contradInEq0" (formula "53") (term "0") (ifseqformula "43"))
         (rule "qeq_literals" (formula "53") (term "0,0"))
          (builtin "One Step Simplification" (formula "53"))
         (rule "notLeft" (formula "53"))
         (rule "replace_known_right" (formula "17") (term "1") (ifseqformula "77"))
          (builtin "One Step Simplification" (formula "17"))
         (rule "notLeft" (formula "17"))
         (rule "inEqSimp_geqRight" (formula "77"))
         (rule "times_zero_1" (formula "1") (term "1,0,0"))
         (rule "add_literals" (formula "1") (term "0,0"))
         (rule "inEqSimp_geqRight" (formula "77"))
         (rule "times_zero_1" (formula "1") (term "1,0,0"))
         (rule "add_literals" (formula "1") (term "0,0"))
         (rule "inEqSimp_sepPosMonomial0" (formula "2"))
         (rule "mul_literals" (formula "2") (term "1"))
         (rule "inEqSimp_sepPosMonomial0" (formula "1"))
         (rule "mul_literals" (formula "1") (term "1"))
         (rule "inEqSimp_subsumption0" (formula "15") (ifseqformula "8"))
         (rule "leq_literals" (formula "15") (term "0"))
          (builtin "One Step Simplification" (formula "15"))
         (rule "true_left" (formula "15"))
         (rule "inEqSimp_subsumption0" (formula "49") (ifseqformula "42"))
         (rule "leq_literals" (formula "49") (term "0"))
          (builtin "One Step Simplification" (formula "49"))
         (rule "true_left" (formula "49"))
         (rule "inEqSimp_subsumption0" (formula "50") (ifseqformula "42"))
         (rule "leq_literals" (formula "50") (term "0"))
          (builtin "One Step Simplification" (formula "50"))
         (rule "true_left" (formula "50"))
         (rule "inEqSimp_subsumption0" (formula "16") (ifseqformula "1"))
         (rule "leq_literals" (formula "16") (term "0"))
          (builtin "One Step Simplification" (formula "16"))
         (rule "true_left" (formula "16"))
         (rule "pullOutSelect" (formula "94") (term "1") (inst "selectSK=org_bouncycastle_math_ec_ECPoint_value_0"))
         (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "30"))
          (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "75")))
         (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,0,0") (ifseqformula "24"))
         (rule "ifthenelse_negated" (formula "1") (term "0"))
         (rule "pullOutSelect" (formula "95") (term "0") (inst "selectSK=org_bouncycastle_math_ec_ECPoint_value_1"))
         (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "66"))
          (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "77")))
         (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,0,0") (ifseqformula "59"))
         (rule "ifthenelse_negated" (formula "1") (term "0"))
         (rule "pullOutSelect" (formula "2") (term "1,0") (inst "selectSK=org_bouncycastle_math_ec_ECPoint_value_2"))
         (rule "simplifySelectOfAnonEQ" (formula "2") (ifseqformula "26"))
          (builtin "One Step Simplification" (formula "2") (ifInst ""  (formula "77")))
         (rule "ifthenelse_negated" (formula "2") (term "0"))
         (rule "pullOutSelect" (formula "1") (term "1,0") (inst "selectSK=org_bouncycastle_math_ec_ECPoint_value_3"))
         (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "61"))
          (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "79")))
         (rule "ifthenelse_negated" (formula "1") (term "0"))
         (rule "commute_or" (formula "62"))
         (rule "commute_or" (formula "28"))
         (rule "Class_invariant_axiom_for_org_bouncycastle_math_ec_custom_sec_SecP256K1Curve" (formula "77"))
         (rule "closeTrue" (formula "77"))
      )
      (branch
         (rule "eqSymm" (formula "101"))
         (rule "eqSymm" (formula "1"))
         (rule "eqSymm" (formula "2"))
         (rule "eqSymm" (formula "3"))
         (rule "eqSymm" (formula "78"))
         (rule "eqSymm" (formula "39"))
         (rule "replace_known_left" (formula "65") (term "0,0") (ifseqformula "48"))
          (builtin "One Step Simplification" (formula "65"))
         (rule "applyEqReverse" (formula "66") (term "0,1") (ifseqformula "65"))
         (rule "hideAuxiliaryEq" (formula "65"))
         (rule "replace_known_left" (formula "27") (term "0,0") (ifseqformula "11"))
          (builtin "One Step Simplification" (formula "27"))
         (rule "applyEqReverse" (formula "28") (term "0,1") (ifseqformula "27"))
         (rule "hideAuxiliaryEq" (formula "27"))
         (rule "inEqSimp_ltToLeq" (formula "43"))
         (rule "times_zero_1" (formula "43") (term "1,0,0"))
         (rule "add_zero_right" (formula "43") (term "0,0"))
         (rule "inEqSimp_ltToLeq" (formula "7"))
         (rule "times_zero_1" (formula "7") (term "1,0,0"))
         (rule "add_zero_right" (formula "7") (term "0,0"))
         (rule "applyEq" (formula "3") (term "0") (ifseqformula "58"))
         (rule "applyEq" (formula "54") (term "5") (ifseqformula "49"))
         (rule "applyEq" (formula "6") (term "1,1,0") (ifseqformula "36"))
         (rule "applyEq" (formula "98") (term "0") (ifseqformula "74"))
         (rule "applyEq" (formula "87") (term "1,0") (ifseqformula "36"))
         (rule "applyEq" (formula "5") (term "1,1,0") (ifseqformula "36"))
         (rule "applyEq" (formula "41") (term "1,1,0") (ifseqformula "74"))
         (rule "applyEq" (formula "17") (term "0,1,0,1") (ifseqformula "19"))
         (rule "times_zero_2" (formula "17") (term "1,0,1"))
         (rule "add_zero_right" (formula "17") (term "0,1"))
         (rule "applyEqRigid" (formula "53") (term "0,1,0,1") (ifseqformula "55"))
         (rule "times_zero_2" (formula "53") (term "1,0,1"))
         (rule "add_zero_right" (formula "53") (term "0,1"))
         (rule "applyEq" (formula "88") (term "1,0") (ifseqformula "74"))
         (rule "applyEq" (formula "42") (term "1,1,0") (ifseqformula "74"))
         (rule "applyEq" (formula "97") (term "0") (ifseqformula "36"))
         (rule "applyEq" (formula "16") (term "0,1,0,1") (ifseqformula "19"))
         (rule "times_zero_2" (formula "16") (term "1,0,1"))
         (rule "add_zero_right" (formula "16") (term "0,1"))
         (rule "applyEq" (formula "78") (term "1,1") (ifseqformula "36"))
         (rule "applyEq" (formula "99") (term "0,0") (ifseqformula "77"))
         (rule "eqSymm" (formula "99"))
         (rule "applyEq" (formula "72") (term "4") (ifseqformula "75"))
         (rule "applyEq" (formula "18") (term "5") (ifseqformula "13"))
         (rule "applyEq" (formula "40") (term "1,1,1,0") (ifseqformula "74"))
         (rule "applyEq" (formula "90") (term "1,0") (ifseqformula "74"))
         (rule "applyEq" (formula "71") (term "1,0,1,0") (ifseqformula "75"))
         (rule "applyEq" (formula "24") (term "1,0") (ifseqformula "36"))
         (rule "applyEq" (formula "34") (term "5") (ifseqformula "32"))
         (rule "applyEq" (formula "22") (term "1,1,0") (ifseqformula "36"))
         (rule "applyEq" (formula "24") (term "4") (ifseqformula "23"))
         (rule "applyEq" (formula "45") (term "0,0") (ifseqformula "74"))
         (rule "applyEq" (formula "71") (term "1,0,1") (ifseqformula "75"))
         (rule "applyEq" (formula "30") (term "5") (ifseqformula "29"))
         (rule "applyEq" (formula "33") (term "1,0,1") (ifseqformula "37"))
         (rule "applyEq" (formula "71") (term "1,0,0,0") (ifseqformula "75"))
         (rule "applyEq" (formula "52") (term "0,1,0,1") (ifseqformula "55"))
         (rule "times_zero_2" (formula "52") (term "1,0,1"))
         (rule "add_zero_right" (formula "52") (term "0,1"))
         (rule "applyEq" (formula "80") (term "0") (ifseqformula "75"))
         (rule "applyEq" (formula "67") (term "5") (ifseqformula "66"))
         (rule "applyEq" (formula "8") (term "1,0") (ifseqformula "36"))
         (rule "applyEq" (formula "3") (term "1,1,1") (ifseqformula "36"))
         (rule "applyEq" (formula "9") (term "0,0") (ifseqformula "36"))
         (rule "applyEq" (formula "89") (term "1,0") (ifseqformula "36"))
         (rule "applyEq" (formula "44") (term "1,0") (ifseqformula "74"))
         (rule "applyEq" (formula "33") (term "1,0,0,0") (ifseqformula "37"))
         (rule "applyEq" (formula "60") (term "1,0") (ifseqformula "74"))
         (rule "applyEq" (formula "72") (term "5") (ifseqformula "70"))
         (rule "applyEq" (formula "79") (term "0") (ifseqformula "37"))
         (rule "applyEq" (formula "60") (term "4") (ifseqformula "59"))
         (rule "applyEq" (formula "60") (term "1,2") (ifseqformula "74"))
         (rule "applyEq" (formula "4") (term "1,1,1,0") (ifseqformula "36"))
         (rule "applyEq" (formula "24") (term "1,2") (ifseqformula "36"))
         (rule "applyEq" (formula "86") (term "1,1,0") (ifseqformula "74"))
         (rule "applyEq" (formula "85") (term "1,1,0") (ifseqformula "36"))
         (rule "applyEq" (formula "33") (term "1,0,1,0") (ifseqformula "37"))
         (rule "applyEq" (formula "58") (term "1,1,0") (ifseqformula "74"))
         (rule "applyEq" (formula "34") (term "4") (ifseqformula "37"))
         (rule "applyEq" (formula "64") (term "0,1") (ifseqformula "2"))
         (rule "applyEq" (formula "52") (term "0,1") (ifseqformula "2"))
         (rule "applyEq" (formula "99") (term "0,0") (ifseqformula "39"))
         (rule "eqSymm" (formula "99"))
         (rule "applyEq" (formula "53") (term "0,1") (ifseqformula "2"))
         (rule "applyEq" (formula "58") (term "1") (ifseqformula "3"))
         (rule "applyEq" (formula "64") (term "1,1") (ifseqformula "3"))
         (rule "applyEq" (formula "3") (term "1") (ifseqformula "22"))
         (rule "applyEq" (formula "58") (term "1") (ifseqformula "22"))
         (rule "applyEq" (formula "64") (term "1,1") (ifseqformula "22"))
         (rule "jmod_axiom" (formula "27") (term "1"))
         (rule "polySimp_mulComm1" (formula "27") (term "1,1"))
         (rule "polySimp_homoEq" (formula "27"))
         (rule "polySimp_addComm1" (formula "27") (term "0"))
         (rule "jmod_axiom" (formula "64") (term "1"))
         (rule "polySimp_mulComm1" (formula "64") (term "1,1"))
         (rule "polySimp_homoEq" (formula "64"))
         (rule "polySimp_addComm1" (formula "64") (term "0"))
         (rule "polySimp_sepNegMonomial" (formula "27"))
         (rule "polySimp_mulLiterals" (formula "27") (term "0"))
         (rule "polySimp_elimOne" (formula "27") (term "0"))
         (rule "applyEq" (formula "64") (term "0,1,0") (ifseqformula "27"))
         (rule "polySimp_mulComm0" (formula "64") (term "1,0"))
         (rule "polySimp_rightDist" (formula "64") (term "1,0"))
         (rule "polySimp_mulLiterals" (formula "64") (term "1,1,0"))
         (rule "polySimp_elimOne" (formula "64") (term "1,1,0"))
         (rule "polySimp_mulComm0" (formula "64") (term "0,1,0"))
         (rule "polySimp_addComm1" (formula "64") (term "0"))
         (rule "polySimp_addAssoc" (formula "64") (term "0,0"))
         (rule "polySimp_pullOutFactor1" (formula "64") (term "0,0,0"))
         (rule "add_literals" (formula "64") (term "1,0,0,0"))
         (rule "times_zero_1" (formula "64") (term "0,0,0"))
         (rule "add_zero_left" (formula "64") (term "0,0"))
         (rule "polySimp_sepNegMonomial" (formula "64"))
         (rule "polySimp_mulLiterals" (formula "64") (term "0"))
         (rule "polySimp_elimOne" (formula "64") (term "0"))
         (rule "inEqSimp_sepPosMonomial0" (formula "43"))
         (rule "mul_literals" (formula "43") (term "1"))
         (rule "inEqSimp_sepPosMonomial0" (formula "7"))
         (rule "mul_literals" (formula "7") (term "1"))
         (rule "inEqSimp_contradInEq0" (formula "53") (term "0") (ifseqformula "43"))
         (rule "qeq_literals" (formula "53") (term "0,0"))
          (builtin "One Step Simplification" (formula "53"))
         (rule "notLeft" (formula "53"))
         (rule "replace_known_right" (formula "17") (term "1") (ifseqformula "77"))
          (builtin "One Step Simplification" (formula "17"))
         (rule "notLeft" (formula "17"))
         (rule "inEqSimp_geqRight" (formula "77"))
         (rule "times_zero_1" (formula "1") (term "1,0,0"))
         (rule "add_literals" (formula "1") (term "0,0"))
         (rule "inEqSimp_geqRight" (formula "77"))
         (rule "times_zero_1" (formula "1") (term "1,0,0"))
         (rule "add_literals" (formula "1") (term "0,0"))
         (rule "inEqSimp_sepPosMonomial0" (formula "2"))
         (rule "mul_literals" (formula "2") (term "1"))
         (rule "inEqSimp_sepPosMonomial0" (formula "1"))
         (rule "mul_literals" (formula "1") (term "1"))
         (rule "inEqSimp_subsumption0" (formula "15") (ifseqformula "8"))
         (rule "leq_literals" (formula "15") (term "0"))
          (builtin "One Step Simplification" (formula "15"))
         (rule "true_left" (formula "15"))
         (rule "inEqSimp_subsumption0" (formula "16") (term "0") (ifseqformula "8"))
         (rule "leq_literals" (formula "16") (term "0,0"))
          (builtin "One Step Simplification" (formula "16"))
         (rule "replace_known_left" (formula "51") (term "1") (ifseqformula "16"))
          (builtin "One Step Simplification" (formula "51"))
         (rule "inEqSimp_subsumption0" (formula "49") (ifseqformula "42"))
         (rule "leq_literals" (formula "49") (term "0"))
          (builtin "One Step Simplification" (formula "49"))
         (rule "true_left" (formula "49"))
         (rule "inEqSimp_subsumption0" (formula "16") (ifseqformula "1"))
         (rule "leq_literals" (formula "16") (term "0"))
          (builtin "One Step Simplification" (formula "16"))
         (rule "true_left" (formula "16"))
         (rule "inEqSimp_subsumption0" (formula "49") (ifseqformula "41"))
         (rule "leq_literals" (formula "49") (term "0"))
          (builtin "One Step Simplification" (formula "49"))
         (rule "true_left" (formula "49"))
         (rule "pullOutSelect" (formula "94") (term "1") (inst "selectSK=org_bouncycastle_math_ec_ECPoint_value_0"))
         (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "30"))
          (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "75")))
         (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,0,0") (ifseqformula "24"))
         (rule "ifthenelse_negated" (formula "1") (term "0"))
         (rule "pullOutSelect" (formula "95") (term "0") (inst "selectSK=org_bouncycastle_math_ec_ECPoint_value_1"))
         (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "66"))
          (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "77")))
         (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,0,0") (ifseqformula "59"))
         (rule "ifthenelse_negated" (formula "1") (term "0"))
         (rule "pullOutSelect" (formula "2") (term "1,0") (inst "selectSK=org_bouncycastle_math_ec_ECPoint_value_2"))
         (rule "simplifySelectOfAnonEQ" (formula "2") (ifseqformula "26"))
          (builtin "One Step Simplification" (formula "2") (ifInst ""  (formula "77")))
         (rule "ifthenelse_negated" (formula "2") (term "0"))
         (rule "pullOutSelect" (formula "1") (term "1,0") (inst "selectSK=org_bouncycastle_math_ec_ECPoint_value_3"))
         (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "61"))
          (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "79")))
         (rule "ifthenelse_negated" (formula "1") (term "0"))
         (rule "commute_or" (formula "28"))
         (rule "commute_or" (formula "62"))
         (rule "Class_invariant_axiom_for_org_bouncycastle_math_ec_custom_sec_SecP256K1Curve" (formula "77"))
         (rule "closeTrue" (formula "77"))
      )
   )
   (branch "pre getOrder_757678341 (information flow)"
      (rule "eqSymm" (formula "101"))
      (rule "eqSymm" (formula "1"))
      (rule "eqSymm" (formula "2"))
      (rule "eqSymm" (formula "3"))
      (rule "close" (formula "80") (ifseqformula "3"))
   )
   (branch "post getOrder_757678341 (information flow)"
      (rule "Use_information_flow_contract_for_mod_596311583" (formula "70") (ifseqformula "31"))
      (rule "eqSymm" (formula "1"))
      (rule "eqSymm" (formula "2"))
      (rule "eqSymm" (formula "39"))
      (rule "eqSymm" (formula "3"))
      (rule "eqSymm" (formula "102"))
      (rule "eqSymm" (formula "80"))
      (rule "replace_known_left" (formula "27") (term "0,0") (ifseqformula "11"))
       (builtin "One Step Simplification" (formula "27"))
      (rule "applyEqReverse" (formula "28") (term "0,1") (ifseqformula "27"))
      (rule "hideAuxiliaryEq" (formula "27"))
      (rule "replace_known_left" (formula "65") (term "0,0") (ifseqformula "47"))
       (builtin "One Step Simplification" (formula "65"))
      (rule "applyEqReverse" (formula "66") (term "0,1") (ifseqformula "65"))
      (rule "hideAuxiliaryEq" (formula "65"))
      (rule "replace_known_left" (formula "68") (term "1,0,1") (ifseqformula "60"))
       (builtin "One Step Simplification" (formula "68") (ifInst ""  (formula "85")) (ifInst ""  (formula "84")) (ifInst ""  (formula "2")))
      (rule "inEqSimp_ltToLeq" (formula "43"))
      (rule "mul_literals" (formula "43") (term "1,0,0"))
      (rule "add_zero_right" (formula "43") (term "0,0"))
      (rule "inEqSimp_ltToLeq" (formula "7"))
      (rule "mul_literals" (formula "7") (term "1,0,0"))
      (rule "add_zero_right" (formula "7") (term "0,0"))
      (rule "applyEq" (formula "30") (term "5") (ifseqformula "29"))
      (rule "applyEq" (formula "3") (term "1,1,1") (ifseqformula "36"))
      (rule "applyEq" (formula "100") (term "0,1") (ifseqformula "39"))
      (rule "applyEq" (formula "3") (term "0") (ifseqformula "58"))
      (rule "applyEq" (formula "33") (term "1,0,0,0") (ifseqformula "37"))
      (rule "applyEq" (formula "34") (term "4") (ifseqformula "37"))
      (rule "applyEq" (formula "9") (term "0,0") (ifseqformula "36"))
      (rule "applyEq" (formula "40") (term "1,1,1,0") (ifseqformula "76"))
      (rule "applyEq" (formula "73") (term "1,0,1,0") (ifseqformula "77"))
      (rule "applyEq" (formula "99") (term "0") (ifseqformula "76"))
      (rule "applyEq" (formula "24") (term "1,0") (ifseqformula "36"))
      (rule "applyEq" (formula "54") (term "5") (ifseqformula "49"))
      (rule "applyEq" (formula "34") (term "5") (ifseqformula "32"))
      (rule "applyEq" (formula "41") (term "1,1,0") (ifseqformula "76"))
      (rule "applyEqRigid" (formula "100") (term "0,0") (ifseqformula "79"))
      (rule "applyEq" (formula "33") (term "1,0,1,0") (ifseqformula "37"))
      (rule "applyEq" (formula "17") (term "0,1,0,1") (ifseqformula "19"))
      (rule "times_zero_2" (formula "17") (term "1,0,1"))
      (rule "add_zero_right" (formula "17") (term "0,1"))
      (rule "applyEq" (formula "89") (term "1,0") (ifseqformula "76"))
      (rule "applyEq" (formula "98") (term "0") (ifseqformula "36"))
      (rule "applyEqRigid" (formula "16") (term "0,1,0,1") (ifseqformula "19"))
      (rule "times_zero_2" (formula "16") (term "1,0,1"))
      (rule "add_zero_right" (formula "16") (term "0,1"))
      (rule "applyEq" (formula "4") (term "1,1,1,0") (ifseqformula "36"))
      (rule "applyEq" (formula "74") (term "4") (ifseqformula "77"))
      (rule "applyEq" (formula "73") (term "1,0,1") (ifseqformula "77"))
      (rule "applyEq" (formula "44") (term "1,0") (ifseqformula "76"))
      (rule "applyEq" (formula "24") (term "1,2") (ifseqformula "36"))
      (rule "applyEq" (formula "53") (term "0,1,0,1") (ifseqformula "55"))
      (rule "mul_literals" (formula "53") (term "1,0,1"))
      (rule "add_zero_right" (formula "53") (term "0,1"))
      (rule "applyEq" (formula "52") (term "0,1,0,1") (ifseqformula "55"))
      (rule "times_zero_2" (formula "52") (term "1,0,1"))
      (rule "add_zero_right" (formula "52") (term "0,1"))
      (rule "applyEq" (formula "61") (term "1,0") (ifseqformula "76"))
      (rule "applyEq" (formula "90") (term "1,0") (ifseqformula "36"))
      (rule "applyEq" (formula "73") (term "1,0,0,0") (ifseqformula "77"))
      (rule "applyEq" (formula "42") (term "1,1,0") (ifseqformula "76"))
      (rule "applyEq" (formula "69") (term "5") (ifseqformula "67"))
      (rule "applyEq" (formula "6") (term "1,1,0") (ifseqformula "36"))
      (rule "applyEq" (formula "88") (term "1,0") (ifseqformula "36"))
      (rule "applyEq" (formula "58") (term "1,1,0") (ifseqformula "76"))
      (rule "applyEq" (formula "8") (term "1,0") (ifseqformula "36"))
      (rule "applyEq" (formula "87") (term "1,1,0") (ifseqformula "76"))
      (rule "applyEq" (formula "24") (term "4") (ifseqformula "23"))
      (rule "applyEq" (formula "33") (term "1,0,1") (ifseqformula "37"))
      (rule "applyEq" (formula "61") (term "1,2") (ifseqformula "76"))
      (rule "applyEq" (formula "45") (term "0,0") (ifseqformula "76"))
      (rule "applyEq" (formula "74") (term "5") (ifseqformula "72"))
      (rule "applyEq" (formula "22") (term "1,1,0") (ifseqformula "36"))
      (rule "applyEq" (formula "91") (term "1,0") (ifseqformula "76"))
      (rule "applyEq" (formula "81") (term "0") (ifseqformula "77"))
      (rule "applyEq" (formula "86") (term "1,1,0") (ifseqformula "36"))
      (rule "applyEq" (formula "18") (term "5") (ifseqformula "13"))
      (rule "applyEq" (formula "61") (term "4") (ifseqformula "59"))
      (rule "applyEq" (formula "5") (term "1,1,0") (ifseqformula "36"))
      (rule "applyEq" (formula "80") (term "0") (ifseqformula "37"))
      (rule "applyEq" (formula "65") (term "0,1") (ifseqformula "2"))
      (rule "applyEq" (formula "65") (term "1,1") (ifseqformula "60"))
      (rule "applyEq" (formula "58") (term "1") (ifseqformula "60"))
      (rule "applyEq" (formula "60") (term "0") (ifseqformula "3"))
      (rule "applyEq" (formula "52") (term "0,1") (ifseqformula "2"))
      (rule "applyEq" (formula "53") (term "0,1") (ifseqformula "2"))
      (rule "applyEq" (formula "3") (term "1") (ifseqformula "22"))
      (rule "jmod_axiom" (formula "27") (term "1"))
      (rule "polySimp_mulComm1" (formula "27") (term "1,1"))
      (rule "polySimp_homoEq" (formula "27"))
      (rule "polySimp_addComm1" (formula "27") (term "0"))
      (rule "jmod_axiom" (formula "64") (term "1"))
      (rule "polySimp_mulComm1" (formula "64") (term "1,1"))
      (rule "polySimp_homoEq" (formula "64"))
      (rule "polySimp_addComm1" (formula "64") (term "0"))
      (rule "polySimp_sepNegMonomial" (formula "27"))
      (rule "polySimp_mulLiterals" (formula "27") (term "0"))
      (rule "polySimp_elimOne" (formula "27") (term "0"))
      (rule "applyEq" (formula "64") (term "0,1,0") (ifseqformula "27"))
      (rule "polySimp_mulComm0" (formula "64") (term "1,0"))
      (rule "polySimp_rightDist" (formula "64") (term "1,0"))
      (rule "polySimp_mulLiterals" (formula "64") (term "1,1,0"))
      (rule "polySimp_elimOne" (formula "64") (term "1,1,0"))
      (rule "polySimp_mulComm0" (formula "64") (term "0,1,0"))
      (rule "polySimp_addComm1" (formula "64") (term "0"))
      (rule "polySimp_addAssoc" (formula "64") (term "0,0"))
      (rule "polySimp_pullOutFactor1" (formula "64") (term "0,0,0"))
      (rule "add_literals" (formula "64") (term "1,0,0,0"))
      (rule "times_zero_1" (formula "64") (term "0,0,0"))
      (rule "add_zero_left" (formula "64") (term "0,0"))
      (rule "polySimp_sepNegMonomial" (formula "64"))
      (rule "polySimp_mulLiterals" (formula "64") (term "0"))
      (rule "polySimp_elimOne" (formula "64") (term "0"))
      (rule "inEqSimp_sepPosMonomial0" (formula "43"))
      (rule "mul_literals" (formula "43") (term "1"))
      (rule "inEqSimp_sepPosMonomial0" (formula "7"))
      (rule "mul_literals" (formula "7") (term "1"))
      (rule "inEqSimp_subsumption0" (formula "16") (term "0") (ifseqformula "7"))
      (rule "leq_literals" (formula "16") (term "0,0"))
       (builtin "One Step Simplification" (formula "16"))
      (rule "replace_known_left" (formula "52") (term "1") (ifseqformula "16"))
       (builtin "One Step Simplification" (formula "52"))
      (rule "inEqSimp_contradInEq0" (formula "53") (term "0") (ifseqformula "43"))
      (rule "qeq_literals" (formula "53") (term "0,0"))
       (builtin "One Step Simplification" (formula "53"))
      (rule "notLeft" (formula "53"))
      (rule "replace_known_right" (formula "17") (term "1") (ifseqformula "78"))
       (builtin "One Step Simplification" (formula "17"))
      (rule "notLeft" (formula "17"))
      (rule "inEqSimp_geqRight" (formula "78"))
      (rule "times_zero_1" (formula "1") (term "1,0,0"))
      (rule "add_literals" (formula "1") (term "0,0"))
      (rule "inEqSimp_geqRight" (formula "78"))
      (rule "times_zero_1" (formula "1") (term "1,0,0"))
      (rule "add_literals" (formula "1") (term "0,0"))
      (rule "inEqSimp_sepPosMonomial0" (formula "2"))
      (rule "mul_literals" (formula "2") (term "1"))
      (rule "inEqSimp_sepPosMonomial0" (formula "1"))
      (rule "mul_literals" (formula "1") (term "1"))
      (rule "inEqSimp_subsumption0" (formula "50") (ifseqformula "43"))
      (rule "leq_literals" (formula "50") (term "0"))
       (builtin "One Step Simplification" (formula "50"))
      (rule "true_left" (formula "50"))
      (rule "inEqSimp_subsumption0" (formula "15") (ifseqformula "8"))
      (rule "leq_literals" (formula "15") (term "0"))
       (builtin "One Step Simplification" (formula "15"))
      (rule "true_left" (formula "15"))
      (rule "inEqSimp_subsumption0" (formula "50") (ifseqformula "42"))
      (rule "leq_literals" (formula "50") (term "0"))
       (builtin "One Step Simplification" (formula "50"))
      (rule "true_left" (formula "50"))
      (rule "inEqSimp_subsumption0" (formula "16") (ifseqformula "1"))
      (rule "leq_literals" (formula "16") (term "0"))
       (builtin "One Step Simplification" (formula "16"))
      (rule "true_left" (formula "16"))
      (rule "pullOutSelect" (formula "62") (term "1,1") (inst "selectSK=java_math_BigInteger_value_0"))
      (rule "simplifySelectOfAnonEQ" (formula "62") (ifseqformula "23"))
       (builtin "One Step Simplification" (formula "62") (ifInst ""  (formula "77")))
      (rule "ifthenelse_negated" (formula "62") (term "0"))
      (rule "applyEq" (formula "25") (term "0,1,1") (ifseqformula "62"))
      (rule "polySimp_addComm0" (formula "25") (term "1"))
      (rule "applyEq" (formula "59") (term "1") (ifseqformula "62"))
      (rule "pullOutSelect" (formula "63") (term "0,1") (inst "selectSK=java_math_BigInteger_value_1"))
      (rule "simplifySelectOfAnonEQ" (formula "63") (ifseqformula "57"))
       (builtin "One Step Simplification" (formula "63") (ifInst ""  (formula "79")))
      (rule "ifthenelse_negated" (formula "63") (term "0"))
      (rule "applyEq" (formula "59") (term "0") (ifseqformula "63"))
      (rule "applyEqReverse" (formula "25") (term "0,0,1") (ifseqformula "59"))
      (rule "applyEqReverse" (formula "62") (term "1") (ifseqformula "59"))
      (rule "applyEqReverse" (formula "64") (term "1,1") (ifseqformula "59"))
       (builtin "One Step Simplification" (formula "64"))
      (rule "true_left" (formula "64"))
      (rule "hideAuxiliaryEq" (formula "59"))
      (rule "pullOutSelect" (formula "94") (term "1") (inst "selectSK=org_bouncycastle_math_ec_ECPoint_value_0"))
      (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "30"))
       (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "75")))
      (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,0,0") (ifseqformula "24"))
      (rule "ifthenelse_negated" (formula "1") (term "0"))
      (rule "pullOutSelect" (formula "95") (term "0") (inst "selectSK=org_bouncycastle_math_ec_ECPoint_value_1"))
      (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "67"))
       (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "77")))
      (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,0,0") (ifseqformula "59"))
      (rule "ifthenelse_negated" (formula "1") (term "0"))
      (rule "pullOutSelect" (formula "2") (term "1,0") (inst "selectSK=org_bouncycastle_math_ec_ECPoint_value_2"))
      (rule "simplifySelectOfAnonEQ" (formula "2") (ifseqformula "26"))
       (builtin "One Step Simplification" (formula "2") (ifInst ""  (formula "77")))
      (rule "ifthenelse_negated" (formula "2") (term "0"))
      (rule "pullOutSelect" (formula "1") (term "1,0") (inst "selectSK=org_bouncycastle_math_ec_ECPoint_value_3"))
      (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "61"))
       (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "79")))
      (rule "ifthenelse_negated" (formula "1") (term "0"))
      (rule "commute_or" (formula "28"))
      (rule "commute_or" (formula "62"))
      (rule "commute_or" (formula "35") (term "0"))
      (rule "commute_or" (formula "71") (term "0"))
      (rule "commute_or_2" (formula "35"))
      (rule "commute_or_2" (formula "71"))
      (rule "commute_or" (formula "4") (term "0,0"))
      (rule "commute_or" (formula "2") (term "0,0"))
      (rule "jdiv_axiom" (formula "29") (term "0,0"))
      (rule "eqSymm" (formula "29"))
      (rule "inEqSimp_contradInEq0" (formula "29") (term "0,0") (ifseqformula "5"))
      (rule "qeq_literals" (formula "29") (term "0,0,0"))
       (builtin "One Step Simplification" (formula "29"))
      (rule "eqSymm" (formula "29"))
      (rule "applyEq" (formula "30") (term "0,0") (ifseqformula "29"))
      (rule "polySimp_mulComm1" (formula "30") (term "0"))
      (rule "polySimp_homoEq" (formula "30"))
      (rule "polySimp_mulLiterals" (formula "30") (term "1,0"))
      (rule "polySimp_elimOne" (formula "30") (term "1,0"))
      (rule "polySimp_sepPosMonomial" (formula "30"))
      (rule "polySimp_mulComm0" (formula "30") (term "1"))
      (rule "polySimp_rightDist" (formula "30") (term "1"))
      (rule "polySimp_mulAssoc" (formula "30") (term "0,1"))
      (rule "polySimp_mulComm0" (formula "30") (term "0,0,1"))
      (rule "polySimp_mulLiterals" (formula "30") (term "0,1"))
      (rule "polySimp_elimOne" (formula "30") (term "0,1"))
      (rule "ifthenelse_split" (formula "66") (term "0"))
      (branch " result_229_A_0.<created>@heapAtPre_A«anonHeapFunction» = TRUE TRUE"
         (rule "applyEqReverse" (formula "30") (term "0,1") (ifseqformula "67"))
         (rule "applyEqReverse" (formula "68") (term "1") (ifseqformula "67"))
         (rule "hideAuxiliaryEq" (formula "67"))
         (rule "replace_known_left" (formula "28") (term "1") (ifseqformula "66"))
          (builtin "One Step Simplification" (formula "28"))
         (rule "true_left" (formula "28"))
         (rule "polySimp_addComm0" (formula "29") (term "1"))
         (rule "ifthenelse_split" (formula "66") (term "0"))
         (branch " result_229_B_0.<created>@heapAtPre_B«anonHeapFunction» = TRUE TRUE"
            (rule "replace_known_left" (formula "62") (term "1") (ifseqformula "66"))
             (builtin "One Step Simplification" (formula "62"))
            (rule "true_left" (formula "62"))
            (rule "ifthenelse_split" (formula "3") (term "0"))
            (branch " resultAtPost_226_A.<created>@heapAtPre_A«anonHeapFunction» = TRUE TRUE"
               (rule "applyEqReverse" (formula "5") (term "1,0") (ifseqformula "4"))
               (rule "hideAuxiliaryEq" (formula "4"))
               (rule "replace_known_left" (formula "4") (term "1,0,0") (ifseqformula "3"))
                (builtin "One Step Simplification" (formula "4"))
               (rule "applyEqReverse" (formula "98") (term "1") (ifseqformula "4"))
               (rule "hideAuxiliaryEq" (formula "4"))
               (rule "eqSymm" (formula "97"))
               (rule "replace_known_left" (formula "34") (term "1") (ifseqformula "3"))
                (builtin "One Step Simplification" (formula "34"))
               (rule "true_left" (formula "34"))
               (rule "ifthenelse_split" (formula "1") (term "0"))
               (branch " resultAtPost_226_B.<created>@heapAtPre_B«anonHeapFunction» = TRUE TRUE"
                  (rule "applyEqReverse" (formula "3") (term "1,0") (ifseqformula "2"))
                  (rule "hideAuxiliaryEq" (formula "2"))
                  (rule "replace_known_left" (formula "2") (term "1,0,0") (ifseqformula "1"))
                   (builtin "One Step Simplification" (formula "2"))
                  (rule "applyEqReverse" (formula "96") (term "1") (ifseqformula "2"))
                  (rule "hideAuxiliaryEq" (formula "2"))
                  (rule "eqSymm" (formula "95"))
                  (rule "replace_known_left" (formula "68") (term "1") (ifseqformula "1"))
                   (builtin "One Step Simplification" (formula "68"))
                  (rule "true_left" (formula "68"))
                  (rule "Class_axiom_0_in_de_polyas_core3_open_cred_CredTool" (inst "seq=seq") (inst "i=i") (inst "str=str") (inst "seq_0=seq_0") (inst "i_0=i_0") (inst "sv_heap=heapAtPre_B<<anonHeapFunction>>"))
                  (rule "andLeft" (formula "1"))
                  (rule "castedGetAny" (formula "2") (term "0,1,1,0,0,0"))
                  (rule "castedGetAny" (formula "1") (term "0,0,0,0,0"))
                  (rule "castedGetAny" (formula "1") (term "0,0,1,0,0"))
                  (rule "nnf_imp2or" (formula "1") (term "0,0"))
                   (builtin "One Step Simplification" (formula "1"))
                  (rule "nnf_imp2or" (formula "2") (term "0,0,0"))
                  (rule "nnf_imp2or" (formula "2") (term "1,0,0,0"))
                  (rule "nnf_notAnd" (formula "2") (term "0,0,0,0"))
                   (builtin "One Step Simplification" (formula "2"))
                  (rule "nnf_notOr" (formula "2") (term "0,0,0,0,0"))
                  (rule "nnf_notAnd" (formula "2") (term "0,1,0,0,0"))
                   (builtin "One Step Simplification" (formula "2"))
                  (rule "commute_or" (formula "2") (term "0,0,0,0"))
                  (rule "commute_or_2" (formula "2") (term "0,0,0"))
                  (rule "shift_paren_or" (formula "2") (term "0,0,0,0"))
                  (rule "commute_and" (formula "2") (term "1,0,0,0"))
                  (rule "shift_paren_or" (formula "2") (term "0,0,0,0,0"))
                  (rule "commute_or_2" (formula "2") (term "0,0,0,0,0"))
                   (builtin "One Step Simplification" (formula "2"))
                  (rule "commute_or_2" (formula "2") (term "0,0,0,0"))
                  (rule "cnf_rightDist" (formula "2") (term "0,0,0"))
                  (rule "distr_forallAnd" (formula "2") (term "0,0"))
                  (rule "distr_forallAnd" (formula "2") (term "0"))
                  (rule "distr_forallAnd" (formula "2"))
                  (rule "andLeft" (formula "2"))
                  (rule "commute_or_2" (formula "2") (term "0,0,0"))
                   (builtin "One Step Simplification" (formula "2"))
                  (rule "eqSymm" (formula "2") (term "1,0,0,0,0"))
                  (rule "castedGetAny" (formula "2") (term "1,0,0,1,0,0,0"))
                  (rule "castedGetAny" (formula "2") (term "0,0,0,0,0,0"))
                  (rule "castedGetAny" (formula "2") (term "0,1,0,0,0,0"))
                   (builtin "One Step Simplification" (formula "2"))
                  (rule "true_left" (formula "2"))
                  (rule "shift_paren_or" (formula "2") (term "0,0,0"))
                   (builtin "One Step Simplification" (formula "2"))
                  (rule "eqSymm" (formula "2") (term "1,1,0,0,0"))
                  (rule "castedGetAny" (formula "2") (term "0,0,1,0,0,0"))
                  (rule "castedGetAny" (formula "2") (term "0,0,0,0,0,0"))
                  (rule "castedGetAny" (formula "2") (term "0,1,1,0,0,0"))
                   (builtin "One Step Simplification" (formula "2"))
                  (rule "true_left" (formula "2"))
                  (rule "Class_axiom_0_in_de_polyas_core3_open_cred_CredTool" (inst "seq=seq") (inst "i=i") (inst "str=str") (inst "seq_0=seq_0") (inst "i_0=i_0") (inst "sv_heap=anon_heap_mod<<anonHeapFunction>>"))
                  (rule "andLeft" (formula "1"))
                  (rule "castedGetAny" (formula "2") (term "0,1,1,0,0,0"))
                  (rule "castedGetAny" (formula "1") (term "0,0,0,0,0"))
                  (rule "castedGetAny" (formula "1") (term "0,0,1,0,0"))
                  (rule "nnf_imp2or" (formula "1") (term "0,0"))
                   (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "3")))
                  (rule "true_left" (formula "1"))
                  (rule "nnf_imp2or" (formula "1") (term "0,0,0"))
                  (rule "nnf_notAnd" (formula "1") (term "0,0,0,0"))
                   (builtin "One Step Simplification" (formula "1"))
                  (rule "nnf_imp2or" (formula "1") (term "1,0,0,0"))
                  (rule "nnf_notOr" (formula "1") (term "0,0,0,0,0"))
                  (rule "nnf_notAnd" (formula "1") (term "0,1,0,0,0"))
                   (builtin "One Step Simplification" (formula "1"))
                  (rule "commute_or" (formula "1") (term "0,0,0,0"))
                  (rule "commute_or_2" (formula "1") (term "0,0,0"))
                  (rule "shift_paren_or" (formula "1") (term "0,0,0,0"))
                  (rule "commute_and" (formula "1") (term "1,0,0,0"))
                  (rule "shift_paren_or" (formula "1") (term "0,0,0,0,0"))
                  (rule "commute_or_2" (formula "1") (term "0,0,0,0,0"))
                   (builtin "One Step Simplification" (formula "1"))
                  (rule "commute_or_2" (formula "1") (term "0,0,0,0"))
                  (rule "cnf_rightDist" (formula "1") (term "0,0,0"))
                  (rule "distr_forallAnd" (formula "1") (term "0,0"))
                  (rule "distr_forallAnd" (formula "1") (term "0"))
                  (rule "distr_forallAnd" (formula "1"))
                  (rule "andLeft" (formula "1"))
                  (rule "commute_or_2" (formula "1") (term "0,0,0"))
                   (builtin "One Step Simplification" (formula "1"))
                  (rule "eqSymm" (formula "1") (term "1,0,0,0,0"))
                  (rule "castedGetAny" (formula "1") (term "1,0,0,1,0,0,0"))
                  (rule "castedGetAny" (formula "1") (term "0,0,0,0,0,0"))
                  (rule "castedGetAny" (formula "1") (term "0,1,0,0,0,0"))
                   (builtin "One Step Simplification" (formula "1"))
                  (rule "true_left" (formula "1"))
                  (rule "shift_paren_or" (formula "1") (term "0,0,0"))
                   (builtin "One Step Simplification" (formula "1"))
                  (rule "eqSymm" (formula "1") (term "1,1,0,0,0"))
                  (rule "castedGetAny" (formula "1") (term "0,0,1,0,0,0"))
                  (rule "castedGetAny" (formula "1") (term "0,0,0,0,0,0"))
                  (rule "castedGetAny" (formula "1") (term "0,1,1,0,0,0"))
                   (builtin "One Step Simplification" (formula "1"))
                  (rule "true_left" (formula "1"))
                  (rule "Class_axiom_0_in_de_polyas_core3_open_cred_CredTool" (inst "seq=seq") (inst "i=i") (inst "str=str") (inst "seq_0=seq_0") (inst "i_0=i_0") (inst "sv_heap=anon_heap_multiply<<anonHeapFunction>>"))
                  (rule "andLeft" (formula "1"))
                  (rule "castedGetAny" (formula "2") (term "0,1,1,0,0,0"))
                  (rule "castedGetAny" (formula "1") (term "0,0,0,0,0"))
                  (rule "castedGetAny" (formula "1") (term "0,0,1,0,0"))
                  (rule "nnf_imp2or" (formula "1") (term "0,0"))
                   (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "3")))
                  (rule "true_left" (formula "1"))
                  (rule "nnf_imp2or" (formula "1") (term "0,0,0"))
                  (rule "nnf_notAnd" (formula "1") (term "0,0,0,0"))
                   (builtin "One Step Simplification" (formula "1"))
                  (rule "nnf_imp2or" (formula "1") (term "1,0,0,0"))
                  (rule "nnf_notOr" (formula "1") (term "0,0,0,0,0"))
                  (rule "nnf_notAnd" (formula "1") (term "0,1,0,0,0"))
                   (builtin "One Step Simplification" (formula "1"))
                  (rule "commute_or" (formula "1") (term "0,0,0,0"))
                  (rule "commute_or_2" (formula "1") (term "0,0,0"))
                  (rule "Class_axiom_0_in_de_polyas_core3_open_cred_CredTool" (inst "seq=seq") (inst "i=i") (inst "str=str") (inst "seq_0=seq_0") (inst "i_0=i_0") (inst "sv_heap=heapAtPre_A<<anonHeapFunction>>"))
                  (rule "andLeft" (formula "1"))
                  (rule "castedGetAny" (formula "1") (term "0,0,0,0,0"))
                  (rule "castedGetAny" (formula "1") (term "0,0,1,0,0"))
                  (rule "castedGetAny" (formula "2") (term "0,1,1,0,0,0"))
                  (rule "nnf_imp2or" (formula "1") (term "0,0"))
                   (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "4")))
                  (rule "true_left" (formula "1"))
                  (rule "nnf_imp2or" (formula "1") (term "0,0,0"))
                  (rule "nnf_imp2or" (formula "1") (term "1,0,0,0"))
                  (rule "nnf_notAnd" (formula "1") (term "0,0,0,0"))
                   (builtin "One Step Simplification" (formula "1"))
                  (rule "nnf_notOr" (formula "1") (term "0,0,0,0,0"))
                  (rule "nnf_notAnd" (formula "1") (term "0,1,0,0,0"))
                   (builtin "One Step Simplification" (formula "1"))
                  (rule "commute_or" (formula "1") (term "0,0,0,0"))
                  (rule "commute_or_2" (formula "1") (term "0,0,0"))
                  (rule "Class_axiom_0_in_de_polyas_core3_open_cred_CredTool" (inst "seq=seq") (inst "i=i") (inst "str=str") (inst "seq_0=seq_0") (inst "i_0=i_0") (inst "sv_heap=anon(heapAtPre_A<<anonHeapFunction>>,
     empty,
     anon_heap_mod<<anonHeapFunction>>)"))
                   (builtin "One Step Simplification" (formula "1"))
                  (rule "andLeft" (formula "1"))
                  (rule "castedGetAny" (formula "1") (term "0,0,0,0,0"))
                  (rule "castedGetAny" (formula "1") (term "0,0,1,0,0"))
                  (rule "castedGetAny" (formula "2") (term "0,1,1,0,0,0"))
                  (rule "nnf_imp2or" (formula "1") (term "0,0"))
                   (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "5")))
                  (rule "true_left" (formula "1"))
                  (rule "nnf_imp2or" (formula "1") (term "0,0,0"))
                  (rule "nnf_imp2or" (formula "1") (term "1,0,0,0"))
                  (rule "nnf_notAnd" (formula "1") (term "0,0,0,0"))
                   (builtin "One Step Simplification" (formula "1"))
                  (rule "nnf_notOr" (formula "1") (term "0,0,0,0,0"))
                  (rule "nnf_notAnd" (formula "1") (term "0,1,0,0,0"))
                   (builtin "One Step Simplification" (formula "1"))
                  (rule "nnf_notOr" (formula "1") (term "1,0,0,0,0,0"))
                  (rule "Class_axiom_0_in_de_polyas_core3_open_cred_CredTool" (inst "seq=seq") (inst "i=i") (inst "str=str") (inst "seq_0=seq_0") (inst "i_0=i_0") (inst "sv_heap=heapAfter_mod_A_0"))
                  (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "1,0,0,0,0,0,1") (ifseqformula "30"))
                  (rule "andLeft" (formula "1"))
                  (rule "castedGetAny" (formula "1") (term "0,0,0,0,0"))
                  (rule "castedGetAny" (formula "2") (term "0,1,1,0,0,0"))
                  (rule "castedGetAny" (formula "1") (term "0,0,1,0,0"))
                  (rule "nnf_imp2or" (formula "1") (term "0,0"))
                   (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "6")))
                  (rule "true_left" (formula "1"))
                  (rule "nnf_imp2or" (formula "1") (term "0,0,0"))
                  (rule "nnf_imp2or" (formula "1") (term "1,0,0,0"))
                  (rule "nnf_notAnd" (formula "1") (term "0,0,0,0"))
                   (builtin "One Step Simplification" (formula "1"))
                  (rule "nnf_notAnd" (formula "1") (term "0,1,0,0,0"))
                   (builtin "One Step Simplification" (formula "1"))
                  (rule "nnf_notOr" (formula "1") (term "0,0,0,0,0"))
                  (rule "nnf_notOr" (formula "1") (term "1,0,0,0,0,0"))
                  (rule "Class_axiom_0_in_de_polyas_core3_open_cred_CredTool" (inst "seq=seq") (inst "i=i") (inst "str=str") (inst "seq_0=seq_0") (inst "i_0=i_0") (inst "sv_heap=anon(heapAfter_mod_A_0,
     empty,
     anon_heap_multiply<<anonHeapFunction>>)"))
                   (builtin "One Step Simplification" (formula "1"))
                  (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,1,0,0,0,0,0,1") (ifseqformula "30"))
                  (rule "andLeft" (formula "1"))
                  (rule "castedGetAny" (formula "2") (term "0,1,1,0,0,0"))
                  (rule "castedGetAny" (formula "1") (term "0,0,0,0,0"))
                  (rule "castedGetAny" (formula "1") (term "0,0,1,0,0"))
                  (rule "nnf_imp2or" (formula "1") (term "0,0"))
                   (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "6")))
                  (rule "true_left" (formula "1"))
                  (rule "nnf_imp2or" (formula "1") (term "0,0,0"))
                  (rule "nnf_notAnd" (formula "1") (term "0,0,0,0"))
                   (builtin "One Step Simplification" (formula "1"))
                  (rule "nnf_imp2or" (formula "1") (term "1,0,0,0"))
                  (rule "nnf_notOr" (formula "1") (term "0,0,0,0,0"))
                  (rule "nnf_notAnd" (formula "1") (term "0,1,0,0,0"))
                   (builtin "One Step Simplification" (formula "1"))
                  (rule "nnf_notOr" (formula "1") (term "1,0,0,0,0,0"))
                  (rule "nnf_notOr" (formula "1") (term "0,1,0,0,0,0,0"))
                  (rule "Class_axiom_0_in_de_polyas_core3_open_cred_CredTool" (inst "seq=seq") (inst "i=i") (inst "str=str") (inst "seq_0=seq_0") (inst "i_0=i_0") (inst "sv_heap=heapAfter_multiply_A_1"))
                  (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "1,0,0,0,0,0,1") (ifseqformula "37"))
                  (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,1,0,0,0,0,0,1") (ifseqformula "31"))
                  (rule "andLeft" (formula "1"))
                  (rule "castedGetAny" (formula "2") (term "0,1,1,0,0,0"))
                  (rule "castedGetAny" (formula "1") (term "0,0,0,0,0"))
                  (rule "castedGetAny" (formula "1") (term "0,0,1,0,0"))
                  (rule "nnf_imp2or" (formula "1") (term "0,0"))
                   (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "7")))
                  (rule "true_left" (formula "1"))
                  (rule "nnf_imp2or" (formula "1") (term "0,0,0"))
                  (rule "nnf_imp2or" (formula "1") (term "1,0,0,0"))
                  (rule "nnf_notAnd" (formula "1") (term "0,0,0,0"))
                   (builtin "One Step Simplification" (formula "1"))
                  (rule "nnf_notOr" (formula "1") (term "0,0,0,0,0"))
                  (rule "nnf_notAnd" (formula "1") (term "0,1,0,0,0"))
                   (builtin "One Step Simplification" (formula "1"))
                  (rule "nnf_notOr" (formula "1") (term "1,0,0,0,0,0"))
                  (rule "nnf_notOr" (formula "1") (term "0,1,0,0,0,0,0"))
                  (rule "Class_axiom_0_in_de_polyas_core3_open_cred_CredTool" (inst "seq=seq") (inst "i=i") (inst "str=str") (inst "seq_0=seq_0") (inst "i_0=i_0") (inst "sv_heap=heapAtPost_A"))
                  (rule "andLeft" (formula "1"))
                  (rule "castedGetAny" (formula "1") (term "0,0,0,0,0"))
                  (rule "castedGetAny" (formula "2") (term "0,1,1,0,0,0"))
                  (rule "castedGetAny" (formula "1") (term "0,0,1,0,0"))
                  (rule "applyEqRigid" (formula "2") (term "0,0,1,0,0,0,0,0") (ifseqformula "45"))
                  (rule "selectCreatedOfAnonAsFormulaEQ" (formula "2") (term "1,0,0,0,0,0") (ifseqformula "38"))
                  (rule "selectCreatedOfAnonAsFormulaEQ" (formula "2") (term "0,1,0,0,0,0,0") (ifseqformula "32"))
                  (rule "nnf_imp2or" (formula "1") (term "0,0"))
                   (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "7")))
                  (rule "true_left" (formula "1"))
                  (rule "nnf_imp2or" (formula "1") (term "0,0,0"))
                  (rule "nnf_notAnd" (formula "1") (term "0,0,0,0"))
                   (builtin "One Step Simplification" (formula "1"))
                  (rule "nnf_imp2or" (formula "1") (term "1,0,0,0"))
                  (rule "nnf_notOr" (formula "1") (term "0,0,0,0,0"))
                  (rule "nnf_notAnd" (formula "1") (term "0,1,0,0,0"))
                   (builtin "One Step Simplification" (formula "1"))
                  (rule "nnf_notOr" (formula "1") (term "1,0,0,0,0,0"))
                  (rule "nnf_notOr" (formula "1") (term "0,1,0,0,0,0,0"))
                  (rule "Class_axiom_0_in_de_polyas_core3_open_cred_CredTool" (inst "seq=seq") (inst "i=i") (inst "str=str") (inst "seq_0=seq_0") (inst "i_0=i_0") (inst "sv_heap=anon(heapAtPre_B<<anonHeapFunction>>,
     empty,
     anon_heap_mod<<anonHeapFunction>>)"))
                   (builtin "One Step Simplification" (formula "1"))
                  (rule "andLeft" (formula "1"))
                  (rule "castedGetAny" (formula "2") (term "0,1,1,0,0,0"))
                  (rule "castedGetAny" (formula "1") (term "0,0,0,0,0"))
                  (rule "castedGetAny" (formula "1") (term "0,0,1,0,0"))
                  (rule "nnf_imp2or" (formula "1") (term "0,0"))
                   (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "7")))
                  (rule "true_left" (formula "1"))
                  (rule "nnf_imp2or" (formula "1") (term "0,0,0"))
                  (rule "nnf_imp2or" (formula "1") (term "1,0,0,0"))
                  (rule "nnf_notAnd" (formula "1") (term "0,0,0,0"))
                   (builtin "One Step Simplification" (formula "1"))
                  (rule "nnf_notAnd" (formula "1") (term "0,1,0,0,0"))
                   (builtin "One Step Simplification" (formula "1"))
                  (rule "nnf_notOr" (formula "1") (term "0,0,0,0,0"))
                  (rule "nnf_notOr" (formula "1") (term "1,0,0,0,0,0"))
                  (rule "Class_axiom_0_in_de_polyas_core3_open_cred_CredTool" (inst "seq=seq") (inst "i=i") (inst "str=str") (inst "seq_0=seq_0") (inst "i_0=i_0") (inst "sv_heap=heapAfter_mod_B_0"))
                  (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "1,0,0,0,0,0,1") (ifseqformula "65"))
                  (rule "andLeft" (formula "1"))
                  (rule "castedGetAny" (formula "1") (term "0,0,1,0,0"))
                  (rule "castedGetAny" (formula "2") (term "0,1,1,0,0,0"))
                  (rule "castedGetAny" (formula "1") (term "0,0,0,0,0"))
                  (rule "nnf_imp2or" (formula "1") (term "0,0"))
                   (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "8")))
                  (rule "true_left" (formula "1"))
                  (rule "nnf_imp2or" (formula "1") (term "0,0,0"))
                  (rule "nnf_notAnd" (formula "1") (term "0,0,0,0"))
                   (builtin "One Step Simplification" (formula "1"))
                  (rule "nnf_imp2or" (formula "1") (term "1,0,0,0"))
                  (rule "nnf_notOr" (formula "1") (term "0,0,0,0,0"))
                  (rule "nnf_notAnd" (formula "1") (term "0,1,0,0,0"))
                   (builtin "One Step Simplification" (formula "1"))
                  (rule "nnf_notOr" (formula "1") (term "1,0,0,0,0,0"))
                  (rule "Class_axiom_0_in_de_polyas_core3_open_cred_CredTool" (inst "seq=seq") (inst "i=i") (inst "str=str") (inst "seq_0=seq_0") (inst "i_0=i_0") (inst "sv_heap=anon(heapAfter_mod_B_0,
     empty,
     anon_heap_multiply<<anonHeapFunction>>)"))
                   (builtin "One Step Simplification" (formula "1"))
                  (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,1,0,0,0,0,0,1") (ifseqformula "65"))
                  (rule "andLeft" (formula "1"))
                  (rule "castedGetAny" (formula "1") (term "0,0,1,0,0"))
                  (rule "castedGetAny" (formula "2") (term "0,1,1,0,0,0"))
                  (rule "castedGetAny" (formula "1") (term "0,0,0,0,0"))
                  (rule "nnf_imp2or" (formula "1") (term "0,0"))
                   (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "8")))
                  (rule "true_left" (formula "1"))
                  (rule "nnf_imp2or" (formula "1") (term "0,0,0"))
                  (rule "nnf_imp2or" (formula "1") (term "1,0,0,0"))
                  (rule "nnf_notAnd" (formula "1") (term "0,0,0,0"))
                   (builtin "One Step Simplification" (formula "1"))
                  (rule "nnf_notAnd" (formula "1") (term "0,1,0,0,0"))
                   (builtin "One Step Simplification" (formula "1"))
                  (rule "nnf_notOr" (formula "1") (term "0,0,0,0,0"))
                  (rule "nnf_notOr" (formula "1") (term "1,0,0,0,0,0"))
                  (rule "nnf_notOr" (formula "1") (term "0,1,0,0,0,0,0"))
                  (rule "Class_axiom_0_in_de_polyas_core3_open_cred_CredTool" (inst "seq=seq") (inst "i=i") (inst "str=str") (inst "seq_0=seq_0") (inst "i_0=i_0") (inst "sv_heap=heapAfter_multiply_B_1"))
                  (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "1,0,0,0,0,0,1") (ifseqformula "74"))
                  (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,1,0,0,0,0,0,1") (ifseqformula "66"))
                  (rule "andLeft" (formula "1"))
                  (rule "castedGetAny" (formula "1") (term "0,0,1,0,0"))
                  (rule "castedGetAny" (formula "1") (term "0,0,0,0,0"))
                  (rule "castedGetAny" (formula "2") (term "0,1,1,0,0,0"))
                  (rule "nnf_imp2or" (formula "1") (term "0,0"))
                   (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "9")))
                  (rule "true_left" (formula "1"))
                  (rule "nnf_imp2or" (formula "1") (term "0,0,0"))
                  (rule "nnf_notAnd" (formula "1") (term "0,0,0,0"))
                   (builtin "One Step Simplification" (formula "1"))
                  (rule "nnf_imp2or" (formula "1") (term "1,0,0,0"))
                  (rule "nnf_notOr" (formula "1") (term "0,0,0,0,0"))
                  (rule "nnf_notAnd" (formula "1") (term "0,1,0,0,0"))
                   (builtin "One Step Simplification" (formula "1"))
                  (rule "nnf_notOr" (formula "1") (term "1,0,0,0,0,0"))
                  (rule "nnf_notOr" (formula "1") (term "0,1,0,0,0,0,0"))
                  (rule "Class_axiom_0_in_de_polyas_core3_open_cred_CredTool" (inst "seq=seq") (inst "i=i") (inst "str=str") (inst "seq_0=seq_0") (inst "i_0=i_0") (inst "sv_heap=heapAtPost_B"))
                  (rule "andLeft" (formula "1"))
                  (rule "castedGetAny" (formula "1") (term "0,0,1,0,0"))
                  (rule "castedGetAny" (formula "2") (term "0,1,1,0,0,0"))
                  (rule "castedGetAny" (formula "1") (term "0,0,0,0,0"))
                  (rule "applyEqRigid" (formula "2") (term "0,0,1,0,0,0,0,0") (ifseqformula "82"))
                  (rule "selectCreatedOfAnonAsFormulaEQ" (formula "2") (term "1,0,0,0,0,0") (ifseqformula "75"))
                  (rule "selectCreatedOfAnonAsFormulaEQ" (formula "2") (term "0,1,0,0,0,0,0") (ifseqformula "67"))
                  (rule "nnf_imp2or" (formula "1") (term "0,0"))
                   (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "9")))
                  (rule "true_left" (formula "1"))
                  (rule "nnf_imp2or" (formula "1") (term "0,0,0"))
                  (rule "nnf_imp2or" (formula "1") (term "1,0,0,0"))
                  (rule "nnf_notAnd" (formula "1") (term "0,0,0,0"))
                   (builtin "One Step Simplification" (formula "1"))
                  (rule "nnf_notOr" (formula "1") (term "0,0,0,0,0"))
                  (rule "nnf_notAnd" (formula "1") (term "0,1,0,0,0"))
                   (builtin "One Step Simplification" (formula "1"))
                  (rule "nnf_notOr" (formula "1") (term "1,0,0,0,0,0"))
                  (rule "nnf_notOr" (formula "1") (term "0,1,0,0,0,0,0"))
                  (rule "shift_paren_or" (formula "6") (term "0,0,0,0"))
                  (rule "div_axiom" (formula "33") (term "0,1") (inst "quotient=quotient_0"))
                  (rule "polySimp_mulComm0" (formula "33") (term "1,1,1,1,1"))
                  (rule "polySimp_mulComm0" (formula "33") (term "0,2,1,1"))
                  (rule "polySimp_mulComm0" (formula "33") (term "0,1,0,1"))
                  (rule "polySimp_mulComm0" (formula "33") (term "0,1,1,1"))
                  (rule "commute_or" (formula "4") (term "0,0,0,0"))
                  (rule "shift_paren_or" (formula "5") (term "0,0,0,0"))
                  (rule "commute_and" (formula "6") (term "1,0,0,0"))
                  (rule "commute_or" (formula "4") (term "0,1,0,0,0"))
                  (rule "commute_and" (formula "5") (term "1,0,0,0"))
                  (rule "commute_or" (formula "3") (term "0,0,0,0"))
                  (rule "commute_or" (formula "3") (term "0,1,0,0,0"))
                  (rule "commute_or" (formula "2") (term "0,0,0,0"))
                  (rule "onlyCreatedObjectsAreReferenced" (formula "94") (term "0") (ifseqformula "22"))
                  (rule "replace_known_left" (formula "1") (term "1") (ifseqformula "28"))
                   (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "95")))
                  (rule "true_left" (formula "1"))
                  (rule "onlyCreatedObjectsAreReferenced" (formula "60") (term "1,0") (ifseqformula "55"))
                  (rule "replace_known_right" (formula "60") (term "0") (ifseqformula "96"))
                   (builtin "One Step Simplification" (formula "60") (ifInst ""  (formula "61")))
                  (rule "true_left" (formula "60"))
                  (rule "onlyCreatedObjectsAreReferenced" (formula "14") (term "1,0") (ifseqformula "22"))
                  (rule "replace_known_right" (formula "14") (term "0") (ifseqformula "89"))
                   (builtin "One Step Simplification" (formula "14") (ifInst ""  (formula "15")))
                  (rule "true_left" (formula "14"))
                  (rule "onlyCreatedObjectsAreReferenced" (formula "91") (term "0") (ifseqformula "55"))
                  (rule "replace_known_left" (formula "1") (term "1") (ifseqformula "49"))
                   (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "92")))
                  (rule "true_left" (formula "1"))
                  (rule "onlyCreatedObjectsAreReferenced" (formula "31") (term "0") (ifseqformula "22"))
                  (rule "replace_known_left" (formula "31") (term "1") (ifseqformula "16"))
                   (builtin "One Step Simplification" (formula "31") (ifInst ""  (formula "93")))
                  (rule "true_left" (formula "31"))
                  (rule "onlyCreatedObjectsAreReferenced" (formula "14") (term "1,1,0") (ifseqformula "22"))
                  (rule "replace_known_left" (formula "14") (term "1") (ifseqformula "16"))
                   (builtin "One Step Simplification" (formula "14") (ifInst ""  (formula "91")))
                  (rule "true_left" (formula "14"))
                  (rule "onlyCreatedObjectsAreReferenced" (formula "47") (term "1,0") (ifseqformula "55"))
                  (rule "replace_known_right" (formula "47") (term "0") (ifseqformula "90"))
                   (builtin "One Step Simplification" (formula "47") (ifInst ""  (formula "48")))
                  (rule "true_left" (formula "47"))
                  (rule "onlyCreatedObjectsAreReferenced" (formula "49") (term "1,0") (ifseqformula "55"))
                  (rule "replace_known_left" (formula "49") (term "1") (ifseqformula "50"))
                   (builtin "One Step Simplification" (formula "49") (ifInst ""  (formula "94")))
                  (rule "true_left" (formula "49"))
                  (rule "commute_or" (formula "2") (term "0,1,0,0,0"))
                  (rule "commute_or" (formula "1") (term "0,0,0,0"))
                  (rule "commute_or" (formula "1") (term "0,1,0,0,0"))
                  (rule "commute_or_2" (formula "4") (term "0,0,0"))
                  (rule "commute_or_2" (formula "3") (term "0,0,0"))
                  (rule "commute_and" (formula "33") (term "0,1"))
                  (rule "commute_or_2" (formula "2") (term "0,0,0"))
                  (rule "commute_or_2" (formula "1") (term "0,0,0"))
                  (rule "commute_or" (formula "6") (term "1,0,0,0,0,0"))
                  (rule "commute_or" (formula "5") (term "1,0,0,0,0,0"))
                  (rule "commute_or_2" (formula "4") (term "1,0,0,0,0"))
                  (rule "shift_paren_or" (formula "3") (term "0,0,0,0"))
                  (rule "shift_paren_or" (formula "2") (term "0,0,0,0"))
                  (rule "shift_paren_or" (formula "1") (term "0,0,0,0"))
                  (rule "shift_paren_or" (formula "4") (term "0,0,0,0"))
                  (rule "commute_and" (formula "4") (term "1,0,0,0"))
                  (rule "commute_and" (formula "3") (term "1,0,0,0"))
                  (rule "commute_and" (formula "2") (term "1,0,0,0"))
                  (rule "commute_and" (formula "1") (term "1,0,0,0"))
                  (rule "shift_paren_or" (formula "6") (term "0,0,0,0,0"))
                   (builtin "One Step Simplification" (formula "6"))
                  (rule "commute_or_2" (formula "6") (term "0,0,0,0"))
                  (rule "shift_paren_or" (formula "5") (term "0,0,0,0,0"))
                   (builtin "One Step Simplification" (formula "5"))
                  (rule "commute_or_2" (formula "5") (term "0,0,0,0"))
                  (rule "shift_paren_or" (formula "3") (term "0,0,0,0,0"))
                   (builtin "One Step Simplification" (formula "3"))
                  (rule "commute_or_2" (formula "3") (term "0,0,0,0"))
                  (rule "cnf_rightDist" (formula "6") (term "0,0,0"))
                  (rule "distr_forallAnd" (formula "6") (term "0,0"))
                  (rule "distr_forallAnd" (formula "6") (term "0"))
                  (rule "distr_forallAnd" (formula "6"))
                  (rule "andLeft" (formula "6"))
                  (rule "commute_or_2" (formula "6") (term "0,0,0"))
                   (builtin "One Step Simplification" (formula "6"))
                  (rule "eqSymm" (formula "6") (term "1,0,0,0,0"))
                  (rule "castedGetAny" (formula "6") (term "1,0,0,1,0,0,0"))
                  (rule "castedGetAny" (formula "6") (term "0,0,0,0,0,0"))
                  (rule "castedGetAny" (formula "6") (term "0,1,0,0,0,0"))
                   (builtin "One Step Simplification" (formula "6"))
                  (rule "true_left" (formula "6"))
                  (rule "shift_paren_or" (formula "6") (term "0,0,0"))
                   (builtin "One Step Simplification" (formula "6"))
                  (rule "eqSymm" (formula "6") (term "1,1,0,0,0"))
                  (rule "castedGetAny" (formula "6") (term "0,0,0,0,0,0"))
                  (rule "castedGetAny" (formula "6") (term "0,0,1,0,0,0"))
                  (rule "castedGetAny" (formula "6") (term "0,1,1,0,0,0"))
                   (builtin "One Step Simplification" (formula "6"))
                  (rule "true_left" (formula "6"))
                  (rule "shift_paren_or" (formula "2") (term "0,0,0,0,0"))
                   (builtin "One Step Simplification" (formula "2"))
                  (rule "commute_or_2" (formula "2") (term "0,0,0,0"))
                  (rule "shift_paren_or" (formula "1") (term "0,0,0,0,0"))
                   (builtin "One Step Simplification" (formula "1"))
                  (rule "commute_or_2" (formula "1") (term "0,0,0,0"))
                  (rule "shift_paren_or" (formula "4") (term "0,0,0,0,0"))
                   (builtin "One Step Simplification" (formula "4"))
                  (rule "cnf_rightDist" (formula "5") (term "0,0,0"))
                  (rule "distr_forallAnd" (formula "5") (term "0,0"))
                  (rule "distr_forallAnd" (formula "5") (term "0"))
                  (rule "distr_forallAnd" (formula "5"))
                  (rule "andLeft" (formula "5"))
                  (rule "commute_or_2" (formula "5") (term "0,0,0"))
                   (builtin "One Step Simplification" (formula "5"))
                  (rule "eqSymm" (formula "5") (term "1,0,0,0,0"))
                  (rule "castedGetAny" (formula "5") (term "1,0,0,1,0,0,0"))
                  (rule "castedGetAny" (formula "5") (term "0,0,0,0,0,0"))
                  (rule "castedGetAny" (formula "5") (term "0,1,0,0,0,0"))
                   (builtin "One Step Simplification" (formula "5"))
                  (rule "true_left" (formula "5"))
                  (rule "cnf_rightDist" (formula "3") (term "0,0,0"))
                  (rule "distr_forallAnd" (formula "3") (term "0,0"))
                  (rule "distr_forallAnd" (formula "3") (term "0"))
                  (rule "distr_forallAnd" (formula "3"))
                  (rule "andLeft" (formula "3"))
                  (rule "shift_paren_or" (formula "5") (term "0,0,0"))
                   (builtin "One Step Simplification" (formula "5"))
                  (rule "eqSymm" (formula "5") (term "1,1,0,0,0"))
                  (rule "castedGetAny" (formula "5") (term "0,0,1,0,0,0"))
                  (rule "castedGetAny" (formula "5") (term "0,0,0,0,0,0"))
                  (rule "castedGetAny" (formula "5") (term "0,1,1,0,0,0"))
                   (builtin "One Step Simplification" (formula "5"))
                  (rule "true_left" (formula "5"))
                  (rule "cnf_rightDist" (formula "2") (term "0,0,0"))
                  (rule "distr_forallAnd" (formula "2") (term "0,0"))
                  (rule "distr_forallAnd" (formula "2") (term "0"))
                  (rule "distr_forallAnd" (formula "2"))
                  (rule "andLeft" (formula "2"))
                  (rule "cnf_rightDist" (formula "1") (term "0,0,0"))
                  (rule "distr_forallAnd" (formula "1") (term "0,0"))
                  (rule "distr_forallAnd" (formula "1") (term "0"))
                  (rule "distr_forallAnd" (formula "1"))
                  (rule "andLeft" (formula "1"))
                  (rule "cnf_rightDist" (formula "5") (term "0,0,0"))
                  (rule "distr_forallAnd" (formula "5") (term "0,0"))
                  (rule "distr_forallAnd" (formula "5") (term "0"))
                  (rule "distr_forallAnd" (formula "5"))
                  (rule "andLeft" (formula "5"))
                  (rule "shift_paren_or" (formula "3") (term "0,0,0"))
                   (builtin "One Step Simplification" (formula "3"))
                  (rule "eqSymm" (formula "3") (term "1,1,0,0,0"))
                  (rule "castedGetAny" (formula "3") (term "0,0,1,0,0,0"))
                  (rule "castedGetAny" (formula "3") (term "0,0,0,0,0,0"))
                  (rule "castedGetAny" (formula "3") (term "0,1,1,0,0,0"))
                   (builtin "One Step Simplification" (formula "3"))
                  (rule "true_left" (formula "3"))
                  (rule "cnf_rightDist" (formula "3") (term "0,0,0"))
                  (rule "distr_forallAnd" (formula "3") (term "0,0"))
                  (rule "distr_forallAnd" (formula "3") (term "0"))
                  (rule "distr_forallAnd" (formula "3"))
                  (rule "andLeft" (formula "3"))
                  (rule "shift_paren_or" (formula "3") (term "0,0,0"))
                   (builtin "One Step Simplification" (formula "3"))
                  (rule "eqSymm" (formula "3") (term "1,1,0,0,0"))
                  (rule "castedGetAny" (formula "3") (term "1,0,0,0,0,0,0"))
                  (rule "castedGetAny" (formula "3") (term "0,0,1,0,0,0"))
                  (rule "castedGetAny" (formula "3") (term "0,1,1,0,0,0"))
                   (builtin "One Step Simplification" (formula "3"))
                  (rule "true_left" (formula "3"))
                  (rule "cnf_rightDist" (formula "2") (term "0,0,0"))
                  (rule "distr_forallAnd" (formula "2") (term "0,0"))
                  (rule "distr_forallAnd" (formula "2") (term "0"))
                  (rule "distr_forallAnd" (formula "2"))
                  (rule "andLeft" (formula "2"))
                  (rule "commute_or_2" (formula "2") (term "0,0,0"))
                   (builtin "One Step Simplification" (formula "2"))
                  (rule "eqSymm" (formula "2") (term "1,0,0,0,0"))
                  (rule "castedGetAny" (formula "2") (term "1,0,0,1,0,0,0"))
                  (rule "castedGetAny" (formula "2") (term "0,0,0,0,0,0"))
                  (rule "castedGetAny" (formula "2") (term "0,1,0,0,0,0"))
                   (builtin "One Step Simplification" (formula "2"))
                  (rule "true_left" (formula "2"))
                  (rule "cnf_rightDist" (formula "1") (term "0,0,0"))
                  (rule "distr_forallAnd" (formula "1") (term "0,0"))
                  (rule "distr_forallAnd" (formula "1") (term "0"))
                  (rule "distr_forallAnd" (formula "1"))
                  (rule "andLeft" (formula "1"))
                  (rule "shift_paren_or" (formula "3") (term "0,0,0"))
                   (builtin "One Step Simplification" (formula "3"))
                  (rule "eqSymm" (formula "3") (term "1,1,0,0,0"))
                  (rule "castedGetAny" (formula "3") (term "0,0,1,0,0,0"))
                  (rule "castedGetAny" (formula "3") (term "1,0,0,0,0,0,0"))
                  (rule "castedGetAny" (formula "3") (term "0,1,1,0,0,0"))
                   (builtin "One Step Simplification" (formula "3"))
                  (rule "true_left" (formula "3"))
                  (rule "cnf_rightDist" (formula "3") (term "0,0,0"))
                  (rule "distr_forallAnd" (formula "3") (term "0,0"))
                  (rule "distr_forallAnd" (formula "3") (term "0"))
                  (rule "distr_forallAnd" (formula "3"))
                  (rule "andLeft" (formula "3"))
                  (rule "commute_or_2" (formula "3") (term "0,0,0"))
                   (builtin "One Step Simplification" (formula "3"))
                  (rule "eqSymm" (formula "3") (term "1,0,0,0,0"))
                  (rule "castedGetAny" (formula "3") (term "1,0,0,1,0,0,0"))
                  (rule "castedGetAny" (formula "3") (term "0,0,0,0,0,0"))
                  (rule "castedGetAny" (formula "3") (term "0,1,0,0,0,0"))
                   (builtin "One Step Simplification" (formula "3"))
                  (rule "true_left" (formula "3"))
                  (rule "shift_paren_or" (formula "2") (term "0,0,0"))
                   (builtin "One Step Simplification" (formula "2"))
                  (rule "eqSymm" (formula "2") (term "1,1,0,0,0"))
                  (rule "castedGetAny" (formula "2") (term "0,0,1,0,0,0"))
                  (rule "castedGetAny" (formula "2") (term "1,0,0,0,0,0,0"))
                  (rule "castedGetAny" (formula "2") (term "0,1,1,0,0,0"))
                   (builtin "One Step Simplification" (formula "2"))
                  (rule "true_left" (formula "2"))
                  (rule "shift_paren_or" (formula "2") (term "0,0,0"))
                   (builtin "One Step Simplification" (formula "2"))
                  (rule "eqSymm" (formula "2") (term "1,1,0,0,0"))
                  (rule "castedGetAny" (formula "2") (term "0,0,1,0,0,0"))
                  (rule "castedGetAny" (formula "2") (term "1,0,0,0,0,0,0"))
                  (rule "castedGetAny" (formula "2") (term "0,1,1,0,0,0"))
                   (builtin "One Step Simplification" (formula "2"))
                  (rule "true_left" (formula "2"))
                  (rule "ifthenelse_split_for" (formula "28") (term "1,1"))
                  (branch "result_228_A_1.value@heapAtPre_A«anonHeapFunction» ≥ 0 TRUE"
                     (rule "cnf_rightDist" (formula "29"))
                     (rule "andLeft" (formula "29"))
                     (rule "commute_or" (formula "30"))
                     (rule "cnf_rightDist" (formula "29"))
                     (rule "andLeft" (formula "29"))
                     (rule "commute_or" (formula "30"))
                     (rule "cnf_rightDist" (formula "1") (term "0,0,0"))
                     (rule "distr_forallAnd" (formula "1") (term "0,0"))
                     (rule "distr_forallAnd" (formula "1") (term "0"))
                     (rule "distr_forallAnd" (formula "1"))
                     (rule "andLeft" (formula "1"))
                     (rule "commute_or_2" (formula "1") (term "0,0,0"))
                      (builtin "One Step Simplification" (formula "1"))
                     (rule "eqSymm" (formula "1") (term "1,0,0,0,0"))
                     (rule "castedGetAny" (formula "1") (term "1,0,0,1,0,0,0"))
                     (rule "castedGetAny" (formula "1") (term "0,0,0,0,0,0"))
                     (rule "castedGetAny" (formula "1") (term "0,1,0,0,0,0"))
                      (builtin "One Step Simplification" (formula "1"))
                     (rule "true_left" (formula "1"))
                     (rule "shift_paren_or" (formula "1") (term "0,0,0"))
                      (builtin "One Step Simplification" (formula "1"))
                     (rule "eqSymm" (formula "1") (term "1,1,0,0,0"))
                     (rule "castedGetAny" (formula "1") (term "1,0,0,0,0,0,0"))
                     (rule "castedGetAny" (formula "1") (term "0,0,1,0,0,0"))
                     (rule "castedGetAny" (formula "1") (term "0,1,1,0,0,0"))
                      (builtin "One Step Simplification" (formula "1"))
                     (rule "true_left" (formula "1"))
                     (rule "cut_direct" (formula "28") (term "0"))
                     (branch "CUT: result_228_A_1.value@heapAtPre_A«anonHeapFunction» = 0 TRUE"
                         (builtin "One Step Simplification" (formula "29"))
                        (rule "true_left" (formula "29"))
                        (rule "replace_known_left" (formula "30") (term "0") (ifseqformula "28"))
                         (builtin "One Step Simplification" (formula "30"))
                        (rule "true_left" (formula "30"))
                        (rule "replace_known_left" (formula "29") (term "0") (ifseqformula "28"))
                         (builtin "One Step Simplification" (formula "29"))
                        (rule "true_left" (formula "29"))
                        (rule "applyEq" (formula "27") (term "0") (ifseqformula "28"))
                        (rule "qeq_literals" (formula "27"))
                        (rule "true_left" (formula "27"))
                        (rule "applyEq" (formula "28") (term "1,0") (ifseqformula "27"))
                        (rule "eqSymm" (formula "28"))
                        (rule "polySimp_homoEq" (formula "28"))
                        (rule "polySimp_mulLiterals" (formula "28") (term "1,0"))
                        (rule "polySimp_elimOne" (formula "28") (term "1,0"))
                        (rule "applyEq" (formula "29") (term "1,0,0") (ifseqformula "27"))
                        (rule "polySimp_mulComm0" (formula "29") (term "0"))
                        (rule "applyEq" (formula "23") (term "1") (ifseqformula "27"))
                        (rule "applyEq" (formula "7") (term "1") (ifseqformula "27"))
                        (rule "applyEq" (formula "56") (term "1") (ifseqformula "27"))
                        (rule "applyEq" (formula "29") (term "0,0") (ifseqformula "27"))
                        (rule "times_zero_2" (formula "29") (term "0"))
                        (rule "polySimp_homoEq" (formula "29"))
                        (rule "mul_literals" (formula "29") (term "1,0"))
                        (rule "add_zero_right" (formula "29") (term "0"))
                        (rule "applyEq" (formula "28") (term "1,1,0") (ifseqformula "27"))
                        (rule "polySimp_addComm0" (formula "28") (term "0"))
                        (rule "polySimp_sepPosMonomial" (formula "29"))
                        (rule "polySimp_mulLiterals" (formula "29") (term "1"))
                        (rule "polySimp_elimOne" (formula "29") (term "1"))
                        (rule "applyEq" (formula "65") (term "1") (ifseqformula "29"))
                        (rule "polySimp_sepPosMonomial" (formula "28"))
                        (rule "div_axiom" (formula "28") (term "0,1") (inst "quotient=quotient_1"))
                         (builtin "One Step Simplification" (formula "28"))
                        (rule "true_left" (formula "28"))
                        (rule "jdiv_axiom" (formula "28") (term "0"))
                        (rule "eqSymm" (formula "28"))
                        (rule "applyEq" (formula "28") (term "1") (ifseqformula "29"))
                         (builtin "One Step Simplification" (formula "28"))
                        (rule "eqSymm" (formula "28") (term "1"))
                        (rule "polySimp_homoEq" (formula "28") (term "1"))
                        (rule "polySimp_mulLiterals" (formula "28") (term "1,0,1"))
                        (rule "polySimp_elimOne" (formula "28") (term "1,0,1"))
                        (rule "polySimp_sepPosMonomial" (formula "28") (term "1"))
                        (rule "inEqSimp_contradInEq0" (formula "28") (term "0,0") (ifseqformula "4"))
                        (rule "qeq_literals" (formula "28") (term "0,0,0"))
                         (builtin "One Step Simplification" (formula "28"))
                        (rule "true_left" (formula "28"))
                        (rule "Use_information_flow_contract_for_compareTo_325434207" (formula "19") (ifseqformula "19"))
                         (builtin "One Step Simplification" (formula "19") (ifInst ""  (formula "89")) (ifInst ""  (formula "89")))
                        (rule "true_left" (formula "19"))
                        (rule "Use_information_flow_contract_for_getOrder_757678341" (formula "58") (ifseqformula "25"))
                        (rule "applyEq" (formula "58") (term "0,0,1") (ifseqformula "56"))
                        (rule "eqSymm" (formula "58") (term "0,1"))
                        (rule "replace_known_left" (formula "58") (term "0,1") (ifseqformula "23"))
                         (builtin "One Step Simplification" (formula "58"))
                        (rule "applyEq" (formula "58") (term "0,1") (ifseqformula "7"))
                        (rule "eqSymm" (formula "58") (term "1"))
                        (rule "replace_known_left" (formula "58") (term "1") (ifseqformula "27"))
                         (builtin "One Step Simplification" (formula "58"))
                        (rule "true_left" (formula "58"))
                        (rule "Use_information_flow_contract_for_getOrder_757678341" (formula "58") (ifseqformula "58"))
                         (builtin "One Step Simplification" (formula "58"))
                        (rule "true_left" (formula "58"))
                        (rule "Use_information_flow_contract_for_getOrder_757678341" (formula "25") (ifseqformula "25"))
                         (builtin "One Step Simplification" (formula "25"))
                        (rule "true_left" (formula "25"))
                        (rule "Use_information_flow_contract_for_compareTo_325434207" (formula "19") (ifseqformula "52"))
                        (rule "eqSymm" (formula "19") (term "1,0,1"))
                        (rule "eqSymm" (formula "19") (term "0,0,1"))
                        (rule "eqSymm" (formula "19") (term "1,1"))
                        (rule "replace_known_right" (formula "19") (term "0,1,1,0") (ifseqformula "90"))
                         (builtin "One Step Simplification" (formula "19") (ifInst ""  (formula "89")) (ifInst ""  (formula "6")))
                        (rule "applyEq" (formula "19") (term "0,0,1") (ifseqformula "54"))
                        (rule "eqSymm" (formula "19") (term "0,1"))
                        (rule "replace_known_left" (formula "19") (term "0,1") (ifseqformula "21"))
                         (builtin "One Step Simplification" (formula "19"))
                        (rule "Class_invariant_axiom_for_java_math_BigInteger" (formula "19") (term "1,0"))
                        (rule "replace_known_right" (formula "19") (term "0,0,1,0") (ifseqformula "90"))
                         (builtin "One Step Simplification" (formula "19") (ifInst ""  (formula "54")))
                        (rule "Class_invariant_axiom_for_java_math_BigInteger" (formula "19") (term "0"))
                        (rule "replace_known_left" (formula "19") (term "1,0") (ifseqformula "21"))
                         (builtin "One Step Simplification" (formula "19") (ifInst ""  (formula "89")))
                        (rule "applyEq" (formula "45") (term "0") (ifseqformula "19"))
                        (rule "applyEq" (formula "51") (term "0") (ifseqformula "19"))
                        (rule "applyEq" (formula "51") (term "4") (ifseqformula "19"))
                        (rule "Use_information_flow_contract_for_multiply_1272441881_0" (formula "69") (ifseqformula "36"))
                        (rule "replaceKnownSelect_taclet21_12" (formula "69") (term "0,1,1"))
                        (rule "replaceKnownSelect_taclet21_11" (formula "69") (term "1,1,1"))
                        (rule "replaceKnownAuxiliaryConstant_taclet000021_19" (formula "69") (term "0,1,1"))
                        (rule "replaceKnownAuxiliaryConstant_taclet00021_17" (formula "69") (term "1,1,1"))
                        (rule "replaceKnownSelect_taclet21_9" (formula "69") (term "0,1,0,1"))
                        (rule "replaceKnownSelect_taclet21_8" (formula "69") (term "1,1,0,1"))
                        (rule "replaceKnownAuxiliaryConstant_taclet021_15" (formula "69") (term "0,1,0,1"))
                        (rule "replaceKnownAuxiliaryConstant_taclet21_10" (formula "69") (term "1,1,0,1"))
                        (rule "replaceKnownAuxiliaryConstant_taclet021_15" (formula "69") (term "1,1,0,1"))
                         (builtin "One Step Simplification" (formula "69") (ifInst ""  (formula "79")) (ifInst ""  (formula "78")) (ifInst ""  (formula "96")))
                        (rule "pullOutSelect" (formula "69") (term "1,0,1") (inst "selectSK=org_bouncycastle_math_ec_ECPoint_value_4"))
                        (rule "simplifySelectOfAnonEQ" (formula "69") (ifseqformula "27"))
                         (builtin "One Step Simplification" (formula "69") (ifInst ""  (formula "93")) (ifInst ""  (formula "14")))
                        (rule "applyEqReverse" (formula "70") (term "1,0,1") (ifseqformula "69"))
                        (rule "hideAuxiliaryEq" (formula "69"))
                        (rule "pullOutSelect" (formula "69") (term "0,0,1") (inst "selectSK=org_bouncycastle_math_ec_ECPoint_value_5"))
                        (rule "simplifySelectOfAnonEQ" (formula "69") (ifseqformula "59"))
                         (builtin "One Step Simplification" (formula "69") (ifInst ""  (formula "94")) (ifInst ""  (formula "47")))
                        (rule "applyEqReverse" (formula "70") (term "0,0,1") (ifseqformula "69"))
                        (rule "hideAuxiliaryEq" (formula "69"))
                        (rule "replace_known_left" (formula "69") (term "0,1") (ifseqformula "5"))
                         (builtin "One Step Simplification" (formula "69"))
                        (rule "notLeft" (formula "69"))
                        (rule "Class_invariant_axiom_for_org_bouncycastle_math_ec_ECPoint" (formula "75") (term "1"))
                         (builtin "One Step Simplification" (formula "75"))
                        (rule "Class_invariant_axiom_for_org_bouncycastle_math_ec_ECPoint" (formula "75"))
                        (rule "closeTrue" (formula "75"))
                     )
                     (branch "CUT: result_228_A_1.value@heapAtPre_A«anonHeapFunction» = 0 FALSE"
                         (builtin "One Step Simplification" (formula "28"))
                        (rule "replace_known_right" (formula "29") (term "0") (ifseqformula "79"))
                         (builtin "One Step Simplification" (formula "29"))
                        (rule "replace_known_right" (formula "30") (term "0") (ifseqformula "79"))
                         (builtin "One Step Simplification" (formula "30"))
                        (rule "applyEq" (formula "32") (term "0,0") (ifseqformula "29"))
                        (rule "polySimp_mulComm0" (formula "32") (term "0"))
                        (rule "applyEq" (formula "30") (term "0") (ifseqformula "32"))
                        (rule "inEqSimp_homoInEq1" (formula "30"))
                        (rule "polySimp_mulComm0" (formula "30") (term "1,0"))
                        (rule "polySimp_rightDist" (formula "30") (term "1,0"))
                        (rule "polySimp_mulAssoc" (formula "30") (term "0,1,0"))
                        (rule "polySimp_mulComm0" (formula "30") (term "0,0,1,0"))
                        (rule "polySimp_mulLiterals" (formula "30") (term "0,1,0"))
                        (rule "polySimp_elimOne" (formula "30") (term "0,1,0"))
                        (rule "polySimp_addAssoc" (formula "30") (term "0"))
                        (rule "polySimp_addComm1" (formula "30") (term "0,0"))
                        (rule "polySimp_pullOutFactor2b" (formula "30") (term "0,0,0"))
                        (rule "add_literals" (formula "30") (term "1,1,0,0,0"))
                        (rule "times_zero_1" (formula "30") (term "1,0,0,0"))
                        (rule "add_zero_right" (formula "30") (term "0,0,0"))
                        (rule "applyEq" (formula "28") (term "0") (ifseqformula "32"))
                        (rule "inEqSimp_homoInEq0" (formula "28"))
                        (rule "polySimp_mulComm0" (formula "28") (term "1,0"))
                        (rule "polySimp_rightDist" (formula "28") (term "1,0"))
                        (rule "polySimp_mulAssoc" (formula "28") (term "0,1,0"))
                        (rule "polySimp_mulComm0" (formula "28") (term "0,0,1,0"))
                        (rule "polySimp_mulLiterals" (formula "28") (term "0,1,0"))
                        (rule "polySimp_elimOne" (formula "28") (term "0,1,0"))
                        (rule "polySimp_addAssoc" (formula "28") (term "0"))
                        (rule "polySimp_pullOutFactor2" (formula "28") (term "0,0"))
                        (rule "add_literals" (formula "28") (term "1,0,0"))
                        (rule "times_zero_1" (formula "28") (term "0,0"))
                        (rule "add_zero_left" (formula "28") (term "0"))
                        (rule "applyEq" (formula "31") (term "0,1") (ifseqformula "29"))
                        (rule "inEqSimp_sepNegMonomial0" (formula "30"))
                        (rule "polySimp_mulLiterals" (formula "30") (term "0"))
                        (rule "polySimp_elimOne" (formula "30") (term "0"))
                        (rule "inEqSimp_invertInEq1" (formula "28"))
                        (rule "mul_literals" (formula "28") (term "1"))
                        (rule "polySimp_mulLiterals" (formula "28") (term "0"))
                        (rule "polySimp_elimOne" (formula "28") (term "0"))
                        (rule "inEqSimp_strengthen1" (formula "27") (ifseqformula "79"))
                        (rule "add_zero_right" (formula "27") (term "1"))
                        (rule "inEqSimp_contradEq7" (formula "79") (ifseqformula "27"))
                        (rule "mul_literals" (formula "79") (term "1,0,0"))
                        (rule "add_literals" (formula "79") (term "0,0"))
                        (rule "leq_literals" (formula "79") (term "0"))
                         (builtin "One Step Simplification" (formula "79"))
                        (rule "false_right" (formula "79"))
                        (rule "inEqSimp_exactShadow3" (formula "30") (ifseqformula "28"))
                        (rule "add_zero_right" (formula "30") (term "0"))
                        (rule "polySimp_rightDist" (formula "30") (term "0"))
                        (rule "polySimp_mulLiterals" (formula "30") (term "1,0"))
                        (rule "mul_literals" (formula "30") (term "0,0"))
                        (rule "polySimp_elimOne" (formula "30") (term "1,0"))
                        (rule "inEqSimp_sepPosMonomial1" (formula "30"))
                        (rule "mul_literals" (formula "30") (term "1"))
                        (rule "Use_information_flow_contract_for_compareTo_325434207" (formula "19") (ifseqformula "19"))
                         (builtin "One Step Simplification" (formula "19") (ifInst ""  (formula "92")) (ifInst ""  (formula "92")))
                        (rule "true_left" (formula "19"))
                        (rule "Use_information_flow_contract_for_getOrder_757678341" (formula "61") (ifseqformula "25"))
                        (rule "replace_known_left" (formula "61") (term "1,1") (ifseqformula "7"))
                         (builtin "One Step Simplification" (formula "61"))
                        (rule "true_left" (formula "61"))
                        (rule "Use_information_flow_contract_for_getOrder_757678341" (formula "61") (ifseqformula "61"))
                         (builtin "One Step Simplification" (formula "61"))
                        (rule "true_left" (formula "61"))
                        (rule "Use_information_flow_contract_for_compareTo_325434207" (formula "55") (ifseqformula "19"))
                        (rule "replace_known_right" (formula "55") (term "0,1,0,0") (ifseqformula "93"))
                         (builtin "One Step Simplification" (formula "55") (ifInst ""  (formula "92")) (ifInst ""  (formula "6")))
                        (rule "applyEqRigid" (formula "55") (term "0,0,1") (ifseqformula "57"))
                        (rule "eqSymm" (formula "55") (term "0,1"))
                        (rule "replace_known_left" (formula "55") (term "0,1") (ifseqformula "20"))
                         (builtin "One Step Simplification" (formula "55"))
                        (rule "Class_invariant_axiom_for_java_math_BigInteger" (formula "55") (term "1,0"))
                        (rule "replace_known_right" (formula "55") (term "0,0,1,0") (ifseqformula "92"))
                         (builtin "One Step Simplification" (formula "55") (ifInst ""  (formula "20")))
                        (rule "Class_invariant_axiom_for_java_math_BigInteger" (formula "55") (term "0"))
                        (rule "replace_known_left" (formula "55") (term "1,0") (ifseqformula "57"))
                         (builtin "One Step Simplification" (formula "55") (ifInst ""  (formula "93")))
                        (rule "applyEq" (formula "56") (term "4") (ifseqformula "55"))
                        (rule "applyEq" (formula "47") (term "0") (ifseqformula "55"))
                        (rule "applyEq" (formula "53") (term "0") (ifseqformula "54"))
                        (rule "Use_information_flow_contract_for_multiply_1272441881" (formula "72") (ifseqformula "38"))
                        (rule "replaceKnownSelect_taclet21_12" (formula "72") (term "0,1,1"))
                        (rule "replaceKnownSelect_taclet21_11" (formula "72") (term "1,1,1"))
                        (rule "replaceKnownAuxiliaryConstant_taclet000021_19" (formula "72") (term "0,1,1"))
                        (rule "replaceKnownAuxiliaryConstant_taclet00021_17" (formula "72") (term "1,1,1"))
                        (rule "replaceKnownSelect_taclet21_8" (formula "72") (term "1,1,0,1"))
                        (rule "replaceKnownSelect_taclet21_9" (formula "72") (term "0,1,0,1"))
                        (rule "replaceKnownAuxiliaryConstant_taclet21_10" (formula "72") (term "1,1,0,1"))
                         (builtin "One Step Simplification" (formula "72") (ifInst ""  (formula "82")) (ifInst ""  (formula "81")) (ifInst ""  (formula "99")))
                        (rule "pullOutSelect" (formula "72") (term "1,0,1") (inst "selectSK=org_bouncycastle_math_ec_ECPoint_value_4"))
                        (rule "simplifySelectOfAnonEQ" (formula "72") (ifseqformula "26"))
                         (builtin "One Step Simplification" (formula "72") (ifInst ""  (formula "96")) (ifInst ""  (formula "14")))
                        (rule "applyEqReverse" (formula "73") (term "1,0,1") (ifseqformula "72"))
                        (rule "hideAuxiliaryEq" (formula "72"))
                        (rule "pullOutSelect" (formula "72") (term "0,0,1") (inst "selectSK=org_bouncycastle_math_ec_ECPoint_value_5"))
                        (rule "simplifySelectOfAnonEQ" (formula "72") (ifseqformula "62"))
                         (builtin "One Step Simplification" (formula "72") (ifInst ""  (formula "97")) (ifInst ""  (formula "49")))
                        (rule "applyEqReverse" (formula "73") (term "0,0,1") (ifseqformula "72"))
                        (rule "hideAuxiliaryEq" (formula "72"))
                        (rule "replace_known_left" (formula "72") (term "0,1") (ifseqformula "5"))
                         (builtin "One Step Simplification" (formula "72"))
                        (rule "notLeft" (formula "72"))
                        (rule "Class_invariant_axiom_for_org_bouncycastle_math_ec_ECPoint" (formula "78") (term "1"))
                         (builtin "One Step Simplification" (formula "78"))
                        (rule "Class_invariant_axiom_for_org_bouncycastle_math_ec_ECPoint" (formula "78"))
                        (rule "closeTrue" (formula "78"))
                     )
                  )
                  (branch "result_228_A_1.value@heapAtPre_A«anonHeapFunction» ≥ 0 FALSE"
                     (rule "inEqSimp_geqRight" (formula "77"))
                     (rule "times_zero_1" (formula "1") (term "1,0,0"))
                     (rule "add_literals" (formula "1") (term "0,0"))
                     (rule "inEqSimp_sepPosMonomial0" (formula "1"))
                     (rule "mul_literals" (formula "1") (term "1"))
                     (rule "inEqSimp_contradEq3" (formula "29") (term "0") (ifseqformula "1"))
                     (rule "mul_literals" (formula "29") (term "1,0,0,0"))
                     (rule "add_literals" (formula "29") (term "0,0,0"))
                     (rule "qeq_literals" (formula "29") (term "0,0"))
                      (builtin "One Step Simplification" (formula "29"))
                     (rule "andLeft" (formula "29"))
                     (rule "andLeft" (formula "29"))
                     (rule "applyEq" (formula "33") (term "0,0") (ifseqformula "30"))
                     (rule "polySimp_mulComm0" (formula "33") (term "0"))
                     (rule "applyEq" (formula "31") (term "0") (ifseqformula "33"))
                     (rule "inEqSimp_homoInEq1" (formula "31"))
                     (rule "polySimp_mulComm0" (formula "31") (term "1,0"))
                     (rule "polySimp_rightDist" (formula "31") (term "1,0"))
                     (rule "polySimp_mulAssoc" (formula "31") (term "0,1,0"))
                     (rule "polySimp_mulComm0" (formula "31") (term "0,0,1,0"))
                     (rule "polySimp_mulLiterals" (formula "31") (term "0,1,0"))
                     (rule "polySimp_elimOne" (formula "31") (term "0,1,0"))
                     (rule "polySimp_addAssoc" (formula "31") (term "0"))
                     (rule "polySimp_addComm1" (formula "31") (term "0,0"))
                     (rule "polySimp_pullOutFactor2b" (formula "31") (term "0,0,0"))
                     (rule "add_literals" (formula "31") (term "1,1,0,0,0"))
                     (rule "times_zero_1" (formula "31") (term "1,0,0,0"))
                     (rule "add_literals" (formula "31") (term "0,0,0"))
                     (rule "applyEq" (formula "29") (term "0") (ifseqformula "33"))
                     (rule "inEqSimp_homoInEq0" (formula "29"))
                     (rule "polySimp_mulComm0" (formula "29") (term "1,0"))
                     (rule "polySimp_rightDist" (formula "29") (term "1,0"))
                     (rule "polySimp_mulAssoc" (formula "29") (term "0,1,0"))
                     (rule "polySimp_mulComm0" (formula "29") (term "0,0,1,0"))
                     (rule "polySimp_mulLiterals" (formula "29") (term "0,1,0"))
                     (rule "polySimp_elimOne" (formula "29") (term "0,1,0"))
                     (rule "polySimp_addAssoc" (formula "29") (term "0"))
                     (rule "polySimp_pullOutFactor2" (formula "29") (term "0,0"))
                     (rule "add_literals" (formula "29") (term "1,0,0"))
                     (rule "times_zero_1" (formula "29") (term "0,0"))
                     (rule "add_zero_left" (formula "29") (term "0"))
                     (rule "applyEq" (formula "32") (term "0,1") (ifseqformula "30"))
                     (rule "inEqSimp_sepNegMonomial0" (formula "31"))
                     (rule "polySimp_mulLiterals" (formula "31") (term "0"))
                     (rule "polySimp_elimOne" (formula "31") (term "0"))
                     (rule "inEqSimp_invertInEq1" (formula "29"))
                     (rule "polySimp_mulLiterals" (formula "29") (term "0"))
                     (rule "mul_literals" (formula "29") (term "1"))
                     (rule "polySimp_elimOne" (formula "29") (term "0"))
                     (rule "inEqSimp_exactShadow3" (formula "31") (ifseqformula "29"))
                     (rule "add_zero_right" (formula "31") (term "0"))
                     (rule "polySimp_rightDist" (formula "31") (term "0"))
                     (rule "mul_literals" (formula "31") (term "0,0"))
                     (rule "inEqSimp_sepNegMonomial1" (formula "31"))
                     (rule "polySimp_mulLiterals" (formula "31") (term "0"))
                     (rule "polySimp_elimOne" (formula "31") (term "0"))
                     (rule "cnf_rightDist" (formula "2") (term "0,0,0"))
                     (rule "distr_forallAnd" (formula "2") (term "0,0"))
                     (rule "distr_forallAnd" (formula "2") (term "0"))
                     (rule "distr_forallAnd" (formula "2"))
                     (rule "andLeft" (formula "2"))
                     (rule "commute_or_2" (formula "2") (term "0,0,0"))
                      (builtin "One Step Simplification" (formula "2"))
                     (rule "eqSymm" (formula "2") (term "1,0,0,0,0"))
                     (rule "castedGetAny" (formula "2") (term "0,0,0,0,0,0"))
                     (rule "castedGetAny" (formula "2") (term "1,0,0,1,0,0,0"))
                     (rule "castedGetAny" (formula "2") (term "0,1,0,0,0,0"))
                      (builtin "One Step Simplification" (formula "2"))
                     (rule "true_left" (formula "2"))
                     (rule "shift_paren_or" (formula "2") (term "0,0,0"))
                      (builtin "One Step Simplification" (formula "2"))
                     (rule "eqSymm" (formula "2") (term "1,1,0,0,0"))
                     (rule "castedGetAny" (formula "2") (term "0,0,1,0,0,0"))
                     (rule "castedGetAny" (formula "2") (term "1,0,0,0,0,0,0"))
                     (rule "castedGetAny" (formula "2") (term "0,1,1,0,0,0"))
                      (builtin "One Step Simplification" (formula "2"))
                     (rule "true_left" (formula "2"))
                     (rule "Use_information_flow_contract_for_compareTo_325434207" (formula "20") (ifseqformula "20"))
                      (builtin "One Step Simplification" (formula "20") (ifInst ""  (formula "92")) (ifInst ""  (formula "92")))
                     (rule "true_left" (formula "20"))
                     (rule "Use_information_flow_contract_for_getOrder_757678341" (formula "61") (ifseqformula "26"))
                     (rule "replace_known_left" (formula "61") (term "1,1") (ifseqformula "8"))
                      (builtin "One Step Simplification" (formula "61"))
                     (rule "true_left" (formula "61"))
                     (rule "Use_information_flow_contract_for_getOrder_757678341" (formula "61") (ifseqformula "61"))
                      (builtin "One Step Simplification" (formula "61"))
                     (rule "true_left" (formula "61"))
                     (rule "Use_information_flow_contract_for_compareTo_325434207" (formula "55") (ifseqformula "20"))
                     (rule "replace_known_right" (formula "55") (term "0,1,0,0") (ifseqformula "93"))
                      (builtin "One Step Simplification" (formula "55") (ifInst ""  (formula "92")) (ifInst ""  (formula "7")))
                     (rule "applyEq" (formula "55") (term "0,0,1") (ifseqformula "57"))
                     (rule "eqSymm" (formula "55") (term "0,1"))
                     (rule "replace_known_left" (formula "55") (term "0,1") (ifseqformula "21"))
                      (builtin "One Step Simplification" (formula "55"))
                     (rule "Class_invariant_axiom_for_java_math_BigInteger" (formula "55") (term "0,0"))
                     (rule "replace_known_right" (formula "55") (term "0,0,0,0") (ifseqformula "93"))
                      (builtin "One Step Simplification" (formula "55") (ifInst ""  (formula "57")))
                     (rule "Class_invariant_axiom_for_java_math_BigInteger" (formula "55") (term "0"))
                     (rule "replace_known_right" (formula "55") (term "0,0,0") (ifseqformula "92"))
                      (builtin "One Step Simplification" (formula "55") (ifInst ""  (formula "21")))
                     (rule "applyEq" (formula "47") (term "0") (ifseqformula "55"))
                     (rule "applyEq" (formula "55") (term "4") (ifseqformula "54"))
                     (rule "applyEq" (formula "53") (term "0") (ifseqformula "54"))
                     (rule "Use_information_flow_contract_for_getOrder_757678341" (formula "26") (ifseqformula "26"))
                      (builtin "One Step Simplification" (formula "26"))
                     (rule "true_left" (formula "26"))
                     (rule "Use_information_flow_contract_for_getOrder_757678341" (formula "26") (ifseqformula "60"))
                     (rule "eqSymm" (formula "26") (term "0,1"))
                     (rule "eqSymm" (formula "26") (term "1,1"))
                     (rule "replace_known_left" (formula "26") (term "1,1") (ifseqformula "8"))
                      (builtin "One Step Simplification" (formula "26"))
                     (rule "true_left" (formula "26"))
                     (rule "Use_information_flow_contract_for_multiply_1272441881" (formula "72") (ifseqformula "38"))
                     (rule "replaceKnownSelect_taclet21_12" (formula "72") (term "0,1,1"))
                     (rule "replaceKnownSelect_taclet21_11" (formula "72") (term "1,1,1"))
                     (rule "replaceKnownAuxiliaryConstant_taclet000021_19" (formula "72") (term "0,1,1"))
                     (rule "replaceKnownAuxiliaryConstant_taclet00021_17" (formula "72") (term "1,1,1"))
                     (rule "replaceKnownSelect_taclet21_8" (formula "72") (term "1,1,0,1"))
                     (rule "replaceKnownSelect_taclet21_9" (formula "72") (term "0,1,0,1"))
                     (rule "replaceKnownAuxiliaryConstant_taclet21_10" (formula "72") (term "1,1,0,1"))
                      (builtin "One Step Simplification" (formula "72") (ifInst ""  (formula "82")) (ifInst ""  (formula "81")) (ifInst ""  (formula "99")))
                     (rule "pullOutSelect" (formula "72") (term "0,0,1") (inst "selectSK=org_bouncycastle_math_ec_ECPoint_value_4"))
                     (rule "simplifySelectOfAnonEQ" (formula "72") (ifseqformula "62"))
                      (builtin "One Step Simplification" (formula "72") (ifInst ""  (formula "97")) (ifInst ""  (formula "49")))
                     (rule "applyEqReverse" (formula "73") (term "0,0,1") (ifseqformula "72"))
                     (rule "hideAuxiliaryEq" (formula "72"))
                     (rule "eqSymm" (formula "72") (term "0,1"))
                     (rule "applyEq" (formula "72") (term "1,0,1") (ifseqformula "6"))
                     (rule "pullOutSelect" (formula "72") (term "0,0,1") (inst "selectSK=org_bouncycastle_math_ec_ECPoint_value_5"))
                     (rule "simplifySelectOfAnonEQ" (formula "72") (ifseqformula "27"))
                      (builtin "One Step Simplification" (formula "72") (ifInst ""  (formula "96")) (ifInst ""  (formula "15")))
                     (rule "applyEqReverse" (formula "73") (term "0,0,1") (ifseqformula "72"))
                      (builtin "One Step Simplification" (formula "73"))
                     (rule "notLeft" (formula "73"))
                     (rule "hideAuxiliaryEq" (formula "72"))
                     (rule "Class_invariant_axiom_for_org_bouncycastle_math_ec_ECPoint" (formula "78") (term "0"))
                      (builtin "One Step Simplification" (formula "78"))
                     (rule "Class_invariant_axiom_for_org_bouncycastle_math_ec_ECPoint" (formula "78"))
                     (rule "closeTrue" (formula "78"))
                  )
               )
               (branch " resultAtPost_226_B.<created>@heapAtPre_B«anonHeapFunction» = TRUE FALSE"
                  (rule "applyEqReverse" (formula "2") (term "1,0") (ifseqformula "1"))
                  (rule "hideAuxiliaryEq" (formula "1"))
                  (rule "replace_known_right" (formula "1") (term "1,0,0") (ifseqformula "75"))
                   (builtin "One Step Simplification" (formula "1"))
                  (rule "replace_known_right" (formula "68") (term "1") (ifseqformula "75"))
                   (builtin "One Step Simplification" (formula "68"))
                  (rule "Class_axiom_0_in_de_polyas_core3_open_cred_CredTool" (inst "seq=seq") (inst "i=i") (inst "str=str") (inst "seq_0=seq_0") (inst "i_0=i_0") (inst "sv_heap=heapAtPre_B<<anonHeapFunction>>"))
                  (rule "andLeft" (formula "1"))
                  (rule "castedGetAny" (formula "1") (term "0,0,0,0,0"))
                  (rule "castedGetAny" (formula "1") (term "0,0,1,0,0"))
                  (rule "castedGetAny" (formula "2") (term "0,1,1,0,0,0"))
                  (rule "nnf_imp2or" (formula "1") (term "0,0"))
                   (builtin "One Step Simplification" (formula "1"))
                  (rule "nnf_imp2or" (formula "2") (term "0,0,0"))
                  (rule "nnf_notAnd" (formula "2") (term "0,0,0,0"))
                   (builtin "One Step Simplification" (formula "2"))
                  (rule "nnf_imp2or" (formula "2") (term "1,0,0,0"))
                  (rule "nnf_notOr" (formula "2") (term "0,0,0,0,0"))
                  (rule "nnf_notAnd" (formula "2") (term "0,1,0,0,0"))
                   (builtin "One Step Simplification" (formula "2"))
                  (rule "commute_or" (formula "2") (term "0,0,0,0"))
                  (rule "commute_or_2" (formula "2") (term "0,0,0"))
                  (rule "shift_paren_or" (formula "2") (term "0,0,0,0"))
                  (rule "commute_and" (formula "2") (term "1,0,0,0"))
                  (rule "shift_paren_or" (formula "2") (term "0,0,0,0,0"))
                  (rule "commute_or_2" (formula "2") (term "0,0,0,0,0"))
                   (builtin "One Step Simplification" (formula "2"))
                  (rule "commute_or_2" (formula "2") (term "0,0,0,0"))
                  (rule "cnf_rightDist" (formula "2") (term "0,0,0"))
                  (rule "distr_forallAnd" (formula "2") (term "0,0"))
                  (rule "distr_forallAnd" (formula "2") (term "0"))
                  (rule "distr_forallAnd" (formula "2"))
                  (rule "andLeft" (formula "2"))
                  (rule "commute_or_2" (formula "2") (term "0,0,0"))
                   (builtin "One Step Simplification" (formula "2"))
                  (rule "eqSymm" (formula "2") (term "1,0,0,0,0"))
                  (rule "castedGetAny" (formula "2") (term "1,0,0,1,0,0,0"))
                  (rule "castedGetAny" (formula "2") (term "0,0,0,0,0,0"))
                  (rule "castedGetAny" (formula "2") (term "0,1,0,0,0,0"))
                   (builtin "One Step Simplification" (formula "2"))
                  (rule "true_left" (formula "2"))
                  (rule "shift_paren_or" (formula "2") (term "0,0,0"))
                   (builtin "One Step Simplification" (formula "2"))
                  (rule "eqSymm" (formula "2") (term "1,1,0,0,0"))
                  (rule "castedGetAny" (formula "2") (term "0,0,1,0,0,0"))
                  (rule "castedGetAny" (formula "2") (term "0,0,0,0,0,0"))
                  (rule "castedGetAny" (formula "2") (term "0,1,1,0,0,0"))
                   (builtin "One Step Simplification" (formula "2"))
                  (rule "true_left" (formula "2"))
                  (rule "Class_axiom_0_in_de_polyas_core3_open_cred_CredTool" (inst "seq=seq") (inst "i=i") (inst "str=str") (inst "seq_0=seq_0") (inst "i_0=i_0") (inst "sv_heap=anon_heap_mod<<anonHeapFunction>>"))
                  (rule "andLeft" (formula "1"))
                  (rule "castedGetAny" (formula "1") (term "0,0,0,0,0"))
                  (rule "castedGetAny" (formula "1") (term "0,0,1,0,0"))
                  (rule "castedGetAny" (formula "2") (term "0,1,1,0,0,0"))
                  (rule "nnf_imp2or" (formula "1") (term "0,0"))
                   (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "3")))
                  (rule "true_left" (formula "1"))
                  (rule "nnf_imp2or" (formula "1") (term "0,0,0"))
                  (rule "nnf_imp2or" (formula "1") (term "1,0,0,0"))
                  (rule "nnf_notAnd" (formula "1") (term "0,0,0,0"))
                   (builtin "One Step Simplification" (formula "1"))
                  (rule "nnf_notOr" (formula "1") (term "0,0,0,0,0"))
                  (rule "nnf_notAnd" (formula "1") (term "0,1,0,0,0"))
                   (builtin "One Step Simplification" (formula "1"))
                  (rule "commute_or" (formula "1") (term "0,0,0,0"))
                  (rule "commute_or_2" (formula "1") (term "0,0,0"))
                  (rule "shift_paren_or" (formula "1") (term "0,0,0,0"))
                  (rule "commute_and" (formula "1") (term "1,0,0,0"))
                  (rule "shift_paren_or" (formula "1") (term "0,0,0,0,0"))
                  (rule "commute_or_2" (formula "1") (term "0,0,0,0,0"))
                   (builtin "One Step Simplification" (formula "1"))
                  (rule "commute_or_2" (formula "1") (term "0,0,0,0"))
                  (rule "cnf_rightDist" (formula "1") (term "0,0,0"))
                  (rule "distr_forallAnd" (formula "1") (term "0,0"))
                  (rule "distr_forallAnd" (formula "1") (term "0"))
                  (rule "distr_forallAnd" (formula "1"))
                  (rule "andLeft" (formula "1"))
                  (rule "commute_or_2" (formula "1") (term "0,0,0"))
                   (builtin "One Step Simplification" (formula "1"))
                  (rule "eqSymm" (formula "1") (term "1,0,0,0,0"))
                  (rule "castedGetAny" (formula "1") (term "1,0,0,1,0,0,0"))
                  (rule "castedGetAny" (formula "1") (term "0,0,0,0,0,0"))
                  (rule "castedGetAny" (formula "1") (term "0,1,0,0,0,0"))
                   (builtin "One Step Simplification" (formula "1"))
                  (rule "true_left" (formula "1"))
                  (rule "shift_paren_or" (formula "1") (term "0,0,0"))
                   (builtin "One Step Simplification" (formula "1"))
                  (rule "eqSymm" (formula "1") (term "1,1,0,0,0"))
                  (rule "castedGetAny" (formula "1") (term "0,0,1,0,0,0"))
                  (rule "castedGetAny" (formula "1") (term "0,0,0,0,0,0"))
                  (rule "castedGetAny" (formula "1") (term "0,1,1,0,0,0"))
                   (builtin "One Step Simplification" (formula "1"))
                  (rule "true_left" (formula "1"))
                  (rule "Class_axiom_0_in_de_polyas_core3_open_cred_CredTool" (inst "seq=seq") (inst "i=i") (inst "str=str") (inst "seq_0=seq_0") (inst "i_0=i_0") (inst "sv_heap=anon_heap_multiply<<anonHeapFunction>>"))
                  (rule "andLeft" (formula "1"))
                  (rule "castedGetAny" (formula "1") (term "0,0,0,0,0"))
                  (rule "castedGetAny" (formula "1") (term "0,0,1,0,0"))
                  (rule "castedGetAny" (formula "2") (term "0,1,1,0,0,0"))
                  (rule "nnf_imp2or" (formula "1") (term "0,0"))
                   (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "3")))
                  (rule "true_left" (formula "1"))
                  (rule "nnf_imp2or" (formula "1") (term "0,0,0"))
                  (rule "nnf_notAnd" (formula "1") (term "0,0,0,0"))
                   (builtin "One Step Simplification" (formula "1"))
                  (rule "nnf_imp2or" (formula "1") (term "1,0,0,0"))
                  (rule "nnf_notOr" (formula "1") (term "0,0,0,0,0"))
                  (rule "nnf_notAnd" (formula "1") (term "0,1,0,0,0"))
                   (builtin "One Step Simplification" (formula "1"))
                  (rule "commute_or" (formula "1") (term "0,0,0,0"))
                  (rule "commute_or_2" (formula "1") (term "0,0,0"))
                  (rule "shift_paren_or" (formula "1") (term "0,0,0,0"))
                  (rule "Class_axiom_0_in_de_polyas_core3_open_cred_CredTool" (inst "seq=seq") (inst "i=i") (inst "str=str") (inst "seq_0=seq_0") (inst "i_0=i_0") (inst "sv_heap=heapAtPre_A<<anonHeapFunction>>"))
                  (rule "andLeft" (formula "1"))
                  (rule "castedGetAny" (formula "1") (term "0,0,0,0,0"))
                  (rule "castedGetAny" (formula "1") (term "0,0,1,0,0"))
                  (rule "castedGetAny" (formula "2") (term "0,1,1,0,0,0"))
                  (rule "nnf_imp2or" (formula "1") (term "0,0"))
                   (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "4")))
                  (rule "true_left" (formula "1"))
                  (rule "nnf_imp2or" (formula "1") (term "0,0,0"))
                  (rule "nnf_notAnd" (formula "1") (term "0,0,0,0"))
                   (builtin "One Step Simplification" (formula "1"))
                  (rule "nnf_imp2or" (formula "1") (term "1,0,0,0"))
                  (rule "nnf_notOr" (formula "1") (term "0,0,0,0,0"))
                  (rule "nnf_notAnd" (formula "1") (term "0,1,0,0,0"))
                   (builtin "One Step Simplification" (formula "1"))
                  (rule "commute_or" (formula "1") (term "0,0,0,0"))
                  (rule "commute_or_2" (formula "1") (term "0,0,0"))
                  (rule "Class_axiom_0_in_de_polyas_core3_open_cred_CredTool" (inst "seq=seq") (inst "i=i") (inst "str=str") (inst "seq_0=seq_0") (inst "i_0=i_0") (inst "sv_heap=anon(heapAtPre_A<<anonHeapFunction>>,
     empty,
     anon_heap_mod<<anonHeapFunction>>)"))
                   (builtin "One Step Simplification" (formula "1"))
                  (rule "andLeft" (formula "1"))
                  (rule "castedGetAny" (formula "1") (term "0,0,1,0,0"))
                  (rule "castedGetAny" (formula "1") (term "0,0,0,0,0"))
                  (rule "castedGetAny" (formula "2") (term "0,1,1,0,0,0"))
                  (rule "nnf_imp2or" (formula "1") (term "0,0"))
                   (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "5")))
                  (rule "true_left" (formula "1"))
                  (rule "nnf_imp2or" (formula "1") (term "0,0,0"))
                  (rule "nnf_notAnd" (formula "1") (term "0,0,0,0"))
                   (builtin "One Step Simplification" (formula "1"))
                  (rule "nnf_imp2or" (formula "1") (term "1,0,0,0"))
                  (rule "nnf_notOr" (formula "1") (term "0,0,0,0,0"))
                  (rule "nnf_notAnd" (formula "1") (term "0,1,0,0,0"))
                   (builtin "One Step Simplification" (formula "1"))
                  (rule "nnf_notOr" (formula "1") (term "1,0,0,0,0,0"))
                  (rule "Class_axiom_0_in_de_polyas_core3_open_cred_CredTool" (inst "seq=seq") (inst "i=i") (inst "str=str") (inst "seq_0=seq_0") (inst "i_0=i_0") (inst "sv_heap=heapAfter_mod_A_0"))
                  (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "1,0,0,0,0,0,1") (ifseqformula "30"))
                  (rule "andLeft" (formula "1"))
                  (rule "castedGetAny" (formula "1") (term "0,0,0,0,0"))
                  (rule "castedGetAny" (formula "1") (term "0,0,1,0,0"))
                  (rule "castedGetAny" (formula "2") (term "0,1,1,0,0,0"))
                  (rule "nnf_imp2or" (formula "1") (term "0,0"))
                   (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "6")))
                  (rule "true_left" (formula "1"))
                  (rule "nnf_imp2or" (formula "1") (term "0,0,0"))
                  (rule "nnf_imp2or" (formula "1") (term "1,0,0,0"))
                  (rule "nnf_notAnd" (formula "1") (term "0,0,0,0"))
                   (builtin "One Step Simplification" (formula "1"))
                  (rule "nnf_notOr" (formula "1") (term "0,0,0,0,0"))
                  (rule "nnf_notAnd" (formula "1") (term "0,1,0,0,0"))
                   (builtin "One Step Simplification" (formula "1"))
                  (rule "nnf_notOr" (formula "1") (term "1,0,0,0,0,0"))
                  (rule "Class_axiom_0_in_de_polyas_core3_open_cred_CredTool" (inst "seq=seq") (inst "i=i") (inst "str=str") (inst "seq_0=seq_0") (inst "i_0=i_0") (inst "sv_heap=anon(heapAfter_mod_A_0,
     empty,
     anon_heap_multiply<<anonHeapFunction>>)"))
                   (builtin "One Step Simplification" (formula "1"))
                  (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,1,0,0,0,0,0,1") (ifseqformula "30"))
                  (rule "andLeft" (formula "1"))
                  (rule "castedGetAny" (formula "1") (term "0,0,0,0,0"))
                  (rule "castedGetAny" (formula "1") (term "0,0,1,0,0"))
                  (rule "castedGetAny" (formula "2") (term "0,1,1,0,0,0"))
                  (rule "nnf_imp2or" (formula "1") (term "0,0"))
                   (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "6")))
                  (rule "true_left" (formula "1"))
                  (rule "nnf_imp2or" (formula "1") (term "0,0,0"))
                  (rule "nnf_notAnd" (formula "1") (term "0,0,0,0"))
                   (builtin "One Step Simplification" (formula "1"))
                  (rule "nnf_imp2or" (formula "1") (term "1,0,0,0"))
                  (rule "nnf_notOr" (formula "1") (term "0,0,0,0,0"))
                  (rule "nnf_notAnd" (formula "1") (term "0,1,0,0,0"))
                   (builtin "One Step Simplification" (formula "1"))
                  (rule "nnf_notOr" (formula "1") (term "1,0,0,0,0,0"))
                  (rule "nnf_notOr" (formula "1") (term "0,1,0,0,0,0,0"))
                  (rule "Class_axiom_0_in_de_polyas_core3_open_cred_CredTool" (inst "seq=seq") (inst "i=i") (inst "str=str") (inst "seq_0=seq_0") (inst "i_0=i_0") (inst "sv_heap=heapAfter_multiply_A_1"))
                  (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "1,0,0,0,0,0,1") (ifseqformula "37"))
                  (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,1,0,0,0,0,0,1") (ifseqformula "31"))
                  (rule "andLeft" (formula "1"))
                  (rule "castedGetAny" (formula "1") (term "0,0,0,0,0"))
                  (rule "castedGetAny" (formula "2") (term "0,1,1,0,0,0"))
                  (rule "castedGetAny" (formula "1") (term "0,0,1,0,0"))
                  (rule "nnf_imp2or" (formula "1") (term "0,0"))
                   (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "7")))
                  (rule "true_left" (formula "1"))
                  (rule "nnf_imp2or" (formula "1") (term "0,0,0"))
                  (rule "nnf_imp2or" (formula "1") (term "1,0,0,0"))
                  (rule "nnf_notAnd" (formula "1") (term "0,0,0,0"))
                   (builtin "One Step Simplification" (formula "1"))
                  (rule "nnf_notOr" (formula "1") (term "0,0,0,0,0"))
                  (rule "nnf_notAnd" (formula "1") (term "0,1,0,0,0"))
                   (builtin "One Step Simplification" (formula "1"))
                  (rule "nnf_notOr" (formula "1") (term "1,0,0,0,0,0"))
                  (rule "nnf_notOr" (formula "1") (term "0,1,0,0,0,0,0"))
                  (rule "Class_axiom_0_in_de_polyas_core3_open_cred_CredTool" (inst "seq=seq") (inst "i=i") (inst "str=str") (inst "seq_0=seq_0") (inst "i_0=i_0") (inst "sv_heap=heapAtPost_A"))
                  (rule "andLeft" (formula "1"))
                  (rule "castedGetAny" (formula "1") (term "0,0,0,0,0"))
                  (rule "castedGetAny" (formula "2") (term "0,1,1,0,0,0"))
                  (rule "castedGetAny" (formula "1") (term "0,0,1,0,0"))
                  (rule "applyEq" (formula "2") (term "0,0,1,0,0,0,0,0") (ifseqformula "45"))
                  (rule "selectCreatedOfAnonAsFormulaEQ" (formula "2") (term "1,0,0,0,0,0") (ifseqformula "38"))
                  (rule "selectCreatedOfAnonAsFormulaEQ" (formula "2") (term "0,1,0,0,0,0,0") (ifseqformula "32"))
                  (rule "nnf_imp2or" (formula "1") (term "0,0"))
                   (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "7")))
                  (rule "true_left" (formula "1"))
                  (rule "nnf_imp2or" (formula "1") (term "0,0,0"))
                  (rule "nnf_imp2or" (formula "1") (term "1,0,0,0"))
                  (rule "nnf_notAnd" (formula "1") (term "0,0,0,0"))
                   (builtin "One Step Simplification" (formula "1"))
                  (rule "nnf_notAnd" (formula "1") (term "0,1,0,0,0"))
                   (builtin "One Step Simplification" (formula "1"))
                  (rule "nnf_notOr" (formula "1") (term "0,0,0,0,0"))
                  (rule "nnf_notOr" (formula "1") (term "1,0,0,0,0,0"))
                  (rule "nnf_notOr" (formula "1") (term "0,1,0,0,0,0,0"))
                  (rule "Class_axiom_0_in_de_polyas_core3_open_cred_CredTool" (inst "seq=seq") (inst "i=i") (inst "str=str") (inst "seq_0=seq_0") (inst "i_0=i_0") (inst "sv_heap=anon(heapAtPre_B<<anonHeapFunction>>,
     empty,
     anon_heap_mod<<anonHeapFunction>>)"))
                   (builtin "One Step Simplification" (formula "1"))
                  (rule "andLeft" (formula "1"))
                  (rule "castedGetAny" (formula "2") (term "0,1,1,0,0,0"))
                  (rule "castedGetAny" (formula "1") (term "0,0,1,0,0"))
                  (rule "castedGetAny" (formula "1") (term "0,0,0,0,0"))
                  (rule "nnf_imp2or" (formula "1") (term "0,0"))
                   (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "7")))
                  (rule "true_left" (formula "1"))
                  (rule "nnf_imp2or" (formula "1") (term "0,0,0"))
                  (rule "nnf_notAnd" (formula "1") (term "0,0,0,0"))
                   (builtin "One Step Simplification" (formula "1"))
                  (rule "nnf_imp2or" (formula "1") (term "1,0,0,0"))
                  (rule "nnf_notOr" (formula "1") (term "0,0,0,0,0"))
                  (rule "nnf_notAnd" (formula "1") (term "0,1,0,0,0"))
                   (builtin "One Step Simplification" (formula "1"))
                  (rule "nnf_notOr" (formula "1") (term "1,0,0,0,0,0"))
                  (rule "Class_axiom_0_in_de_polyas_core3_open_cred_CredTool" (inst "seq=seq") (inst "i=i") (inst "str=str") (inst "seq_0=seq_0") (inst "i_0=i_0") (inst "sv_heap=heapAfter_mod_B_0"))
                  (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "1,0,0,0,0,0,1") (ifseqformula "65"))
                  (rule "andLeft" (formula "1"))
                  (rule "castedGetAny" (formula "1") (term "0,0,0,0,0"))
                  (rule "castedGetAny" (formula "2") (term "0,1,1,0,0,0"))
                  (rule "castedGetAny" (formula "1") (term "0,0,1,0,0"))
                  (rule "nnf_imp2or" (formula "1") (term "0,0"))
                   (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "8")))
                  (rule "true_left" (formula "1"))
                  (rule "nnf_imp2or" (formula "1") (term "0,0,0"))
                  (rule "nnf_imp2or" (formula "1") (term "1,0,0,0"))
                  (rule "nnf_notAnd" (formula "1") (term "0,0,0,0"))
                   (builtin "One Step Simplification" (formula "1"))
                  (rule "nnf_notOr" (formula "1") (term "0,0,0,0,0"))
                  (rule "nnf_notAnd" (formula "1") (term "0,1,0,0,0"))
                   (builtin "One Step Simplification" (formula "1"))
                  (rule "nnf_notOr" (formula "1") (term "1,0,0,0,0,0"))
                  (rule "Class_axiom_0_in_de_polyas_core3_open_cred_CredTool" (inst "seq=seq") (inst "i=i") (inst "str=str") (inst "seq_0=seq_0") (inst "i_0=i_0") (inst "sv_heap=anon(heapAfter_mod_B_0,
     empty,
     anon_heap_multiply<<anonHeapFunction>>)"))
                   (builtin "One Step Simplification" (formula "1"))
                  (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,1,0,0,0,0,0,1") (ifseqformula "65"))
                  (rule "andLeft" (formula "1"))
                  (rule "castedGetAny" (formula "1") (term "0,0,1,0,0"))
                  (rule "castedGetAny" (formula "2") (term "0,1,1,0,0,0"))
                  (rule "castedGetAny" (formula "1") (term "0,0,0,0,0"))
                  (rule "nnf_imp2or" (formula "1") (term "0,0"))
                   (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "8")))
                  (rule "true_left" (formula "1"))
                  (rule "nnf_imp2or" (formula "1") (term "0,0,0"))
                  (rule "nnf_imp2or" (formula "1") (term "1,0,0,0"))
                  (rule "nnf_notAnd" (formula "1") (term "0,0,0,0"))
                   (builtin "One Step Simplification" (formula "1"))
                  (rule "nnf_notOr" (formula "1") (term "0,0,0,0,0"))
                  (rule "nnf_notAnd" (formula "1") (term "0,1,0,0,0"))
                   (builtin "One Step Simplification" (formula "1"))
                  (rule "nnf_notOr" (formula "1") (term "1,0,0,0,0,0"))
                  (rule "nnf_notOr" (formula "1") (term "0,1,0,0,0,0,0"))
                  (rule "Class_axiom_0_in_de_polyas_core3_open_cred_CredTool" (inst "seq=seq") (inst "i=i") (inst "str=str") (inst "seq_0=seq_0") (inst "i_0=i_0") (inst "sv_heap=heapAfter_multiply_B_1"))
                  (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "1,0,0,0,0,0,1") (ifseqformula "74"))
                  (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,1,0,0,0,0,0,1") (ifseqformula "66"))
                  (rule "andLeft" (formula "1"))
                  (rule "castedGetAny" (formula "1") (term "0,0,1,0,0"))
                  (rule "castedGetAny" (formula "2") (term "0,1,1,0,0,0"))
                  (rule "castedGetAny" (formula "1") (term "0,0,0,0,0"))
                  (rule "nnf_imp2or" (formula "1") (term "0,0"))
                   (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "9")))
                  (rule "true_left" (formula "1"))
                  (rule "nnf_imp2or" (formula "1") (term "0,0,0"))
                  (rule "nnf_imp2or" (formula "1") (term "1,0,0,0"))
                  (rule "nnf_notAnd" (formula "1") (term "0,0,0,0"))
                   (builtin "One Step Simplification" (formula "1"))
                  (rule "nnf_notOr" (formula "1") (term "0,0,0,0,0"))
                  (rule "nnf_notAnd" (formula "1") (term "0,1,0,0,0"))
                   (builtin "One Step Simplification" (formula "1"))
                  (rule "nnf_notOr" (formula "1") (term "1,0,0,0,0,0"))
                  (rule "nnf_notOr" (formula "1") (term "0,1,0,0,0,0,0"))
                  (rule "Class_axiom_0_in_de_polyas_core3_open_cred_CredTool" (inst "seq=seq") (inst "i=i") (inst "str=str") (inst "seq_0=seq_0") (inst "i_0=i_0") (inst "sv_heap=heapAtPost_B"))
                  (rule "andLeft" (formula "1"))
                  (rule "castedGetAny" (formula "2") (term "0,1,1,0,0,0"))
                  (rule "castedGetAny" (formula "1") (term "0,0,0,0,0"))
                  (rule "castedGetAny" (formula "1") (term "0,0,1,0,0"))
                  (rule "applyEq" (formula "2") (term "0,0,1,0,0,0,0,0") (ifseqformula "83"))
                  (rule "selectCreatedOfAnonAsFormulaEQ" (formula "2") (term "1,0,0,0,0,0") (ifseqformula "75"))
                  (rule "selectCreatedOfAnonAsFormulaEQ" (formula "2") (term "0,1,0,0,0,0,0") (ifseqformula "67"))
                  (rule "nnf_imp2or" (formula "1") (term "0,0"))
                   (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "9")))
                  (rule "true_left" (formula "1"))
                  (rule "nnf_imp2or" (formula "1") (term "0,0,0"))
                  (rule "nnf_imp2or" (formula "1") (term "1,0,0,0"))
                  (rule "nnf_notAnd" (formula "1") (term "0,0,0,0"))
                   (builtin "One Step Simplification" (formula "1"))
                  (rule "nnf_notAnd" (formula "1") (term "0,1,0,0,0"))
                   (builtin "One Step Simplification" (formula "1"))
                  (rule "nnf_notOr" (formula "1") (term "0,0,0,0,0"))
                  (rule "nnf_notOr" (formula "1") (term "1,0,0,0,0,0"))
                  (rule "nnf_notOr" (formula "1") (term "0,1,0,0,0,0,0"))
                  (rule "div_axiom" (formula "33") (term "0,1") (inst "quotient=quotient_0"))
                  (rule "polySimp_mulComm0" (formula "33") (term "0,1,0,1"))
                  (rule "polySimp_mulComm0" (formula "33") (term "1,1,1,1,1"))
                  (rule "polySimp_mulComm0" (formula "33") (term "0,2,1,1"))
                  (rule "polySimp_mulComm0" (formula "33") (term "0,1,1,1"))
                  (rule "commute_or" (formula "4") (term "0,0,0,0"))
                  (rule "shift_paren_or" (formula "5") (term "0,0,0,0"))
                  (rule "commute_and" (formula "6") (term "1,0,0,0"))
                  (rule "shift_paren_or" (formula "6") (term "0,0,0,0,0"))
                  (rule "commute_or" (formula "4") (term "0,1,0,0,0"))
                  (rule "commute_and" (formula "5") (term "1,0,0,0"))
                  (rule "commute_or" (formula "3") (term "0,0,0,0"))
                  (rule "ifthenelse_split" (formula "8") (term "0"))
                  (branch " resultAtPost_226_B.<created>@anon_heap_mod«anonHeapFunction» = TRUE TRUE"
                     (rule "applyEqReverse" (formula "105") (term "1") (ifseqformula "9"))
                     (rule "hideAuxiliaryEq" (formula "9"))
                     (rule "replace_known_left" (formula "76") (term "0") (ifseqformula "8"))
                      (builtin "One Step Simplification" (formula "76"))
                     (rule "true_left" (formula "76"))
                     (rule "commute_or" (formula "3") (term "0,1,0,0,0"))
                     (rule "commute_or" (formula "2") (term "0,0,0,0"))
                     (rule "onlyCreatedObjectsAreReferenced" (formula "96") (term "0") (ifseqformula "55"))
                     (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "97"))
                      (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "61")))
                     (rule "true_left" (formula "1"))
                     (rule "onlyCreatedObjectsAreReferenced" (formula "27") (term "1,0") (ifseqformula "22"))
                     (rule "replace_known_right" (formula "27") (term "0") (ifseqformula "96"))
                      (builtin "One Step Simplification" (formula "27") (ifInst ""  (formula "28")))
                     (rule "true_left" (formula "27"))
                     (rule "onlyCreatedObjectsAreReferenced" (formula "14") (term "1,0") (ifseqformula "22"))
                     (rule "replace_known_right" (formula "14") (term "0") (ifseqformula "90"))
                      (builtin "One Step Simplification" (formula "14") (ifInst ""  (formula "15")))
                     (rule "true_left" (formula "14"))
                     (rule "onlyCreatedObjectsAreReferenced" (formula "92") (term "0") (ifseqformula "55"))
                     (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "93"))
                      (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "49")))
                     (rule "true_left" (formula "1"))
                     (rule "onlyCreatedObjectsAreReferenced" (formula "31") (term "0") (ifseqformula "22"))
                     (rule "replace_known_right" (formula "31") (term "0") (ifseqformula "94"))
                      (builtin "One Step Simplification" (formula "31") (ifInst ""  (formula "16")))
                     (rule "true_left" (formula "31"))
                     (rule "onlyCreatedObjectsAreReferenced" (formula "14") (term "1,1,0") (ifseqformula "22"))
                     (rule "replace_known_right" (formula "14") (term "0") (ifseqformula "92"))
                      (builtin "One Step Simplification" (formula "14") (ifInst ""  (formula "16")))
                     (rule "true_left" (formula "14"))
                     (rule "onlyCreatedObjectsAreReferenced" (formula "47") (term "1,0") (ifseqformula "55"))
                     (rule "replace_known_right" (formula "47") (term "0") (ifseqformula "91"))
                      (builtin "One Step Simplification" (formula "47") (ifInst ""  (formula "48")))
                     (rule "true_left" (formula "47"))
                     (rule "onlyCreatedObjectsAreReferenced" (formula "64") (term "2") (ifseqformula "55"))
                     (rule "replace_known_left" (formula "64") (term "1") (ifseqformula "49"))
                      (builtin "One Step Simplification" (formula "64") (ifInst ""  (formula "95")))
                     (rule "true_left" (formula "64"))
                     (rule "commute_or" (formula "2") (term "0,1,0,0,0"))
                     (rule "commute_or" (formula "1") (term "0,0,0,0"))
                     (rule "commute_or" (formula "1") (term "0,1,0,0,0"))
                     (rule "commute_or_2" (formula "4") (term "0,0,0"))
                     (rule "commute_or_2" (formula "3") (term "0,0,0"))
                     (rule "commute_and" (formula "33") (term "0,1"))
                     (rule "commute_or_2" (formula "6") (term "0,0,0,0,0"))
                      (builtin "One Step Simplification" (formula "6"))
                     (rule "commute_or_2" (formula "2") (term "0,0,0"))
                     (rule "commute_or_2" (formula "1") (term "0,0,0"))
                     (rule "commute_or" (formula "5") (term "1,0,0,0,0,0"))
                     (rule "commute_or_2" (formula "6") (term "0,0,0,0"))
                     (rule "commute_or_2" (formula "4") (term "1,0,0,0,0"))
                     (rule "commute_or_2" (formula "3") (term "1,0,0,0,0"))
                     (rule "shift_paren_or" (formula "2") (term "0,0,0,0"))
                     (rule "commute_or_2" (formula "1") (term "1,0,0,0,0"))
                     (rule "shift_paren_or" (formula "4") (term "0,0,0,0"))
                     (rule "shift_paren_or" (formula "3") (term "0,0,0,0"))
                     (rule "shift_paren_or" (formula "1") (term "0,0,0,0"))
                     (rule "cnf_rightDist" (formula "6") (term "0,0,0"))
                     (rule "distr_forallAnd" (formula "6") (term "0,0"))
                     (rule "distr_forallAnd" (formula "6") (term "0"))
                     (rule "distr_forallAnd" (formula "6"))
                     (rule "andLeft" (formula "6"))
                     (rule "commute_or_2" (formula "6") (term "0,0,0"))
                      (builtin "One Step Simplification" (formula "6"))
                     (rule "eqSymm" (formula "6") (term "1,0,0,0,0"))
                     (rule "castedGetAny" (formula "6") (term "1,0,0,1,0,0,0"))
                     (rule "castedGetAny" (formula "6") (term "0,0,0,0,0,0"))
                     (rule "castedGetAny" (formula "6") (term "0,1,0,0,0,0"))
                      (builtin "One Step Simplification" (formula "6"))
                     (rule "true_left" (formula "6"))
                     (rule "shift_paren_or" (formula "6") (term "0,0,0"))
                      (builtin "One Step Simplification" (formula "6"))
                     (rule "eqSymm" (formula "6") (term "1,1,0,0,0"))
                     (rule "castedGetAny" (formula "6") (term "0,0,0,0,0,0"))
                     (rule "castedGetAny" (formula "6") (term "0,0,1,0,0,0"))
                     (rule "castedGetAny" (formula "6") (term "0,1,1,0,0,0"))
                      (builtin "One Step Simplification" (formula "6"))
                     (rule "true_left" (formula "6"))
                     (rule "commute_and" (formula "4") (term "1,0,0,0"))
                     (rule "commute_and" (formula "3") (term "1,0,0,0"))
                     (rule "commute_and" (formula "2") (term "1,0,0,0"))
                     (rule "commute_and" (formula "1") (term "1,0,0,0"))
                     (rule "shift_paren_or" (formula "5") (term "0,0,0,0,0"))
                      (builtin "One Step Simplification" (formula "5"))
                     (rule "commute_or_2" (formula "5") (term "0,0,0,0"))
                     (rule "shift_paren_or" (formula "2") (term "0,0,0,0,0"))
                      (builtin "One Step Simplification" (formula "2"))
                     (rule "commute_or_2" (formula "2") (term "0,0,0,0"))
                     (rule "shift_paren_or" (formula "4") (term "0,0,0,0,0"))
                      (builtin "One Step Simplification" (formula "4"))
                     (rule "shift_paren_or" (formula "3") (term "0,0,0,0,0"))
                      (builtin "One Step Simplification" (formula "3"))
                     (rule "shift_paren_or" (formula "1") (term "0,0,0,0,0"))
                      (builtin "One Step Simplification" (formula "1"))
                     (rule "cnf_rightDist" (formula "5") (term "0,0,0"))
                     (rule "distr_forallAnd" (formula "5") (term "0,0"))
                     (rule "distr_forallAnd" (formula "5") (term "0"))
                     (rule "distr_forallAnd" (formula "5"))
                     (rule "andLeft" (formula "5"))
                     (rule "commute_or_2" (formula "5") (term "0,0,0"))
                      (builtin "One Step Simplification" (formula "5"))
                     (rule "eqSymm" (formula "5") (term "1,0,0,0,0"))
                     (rule "castedGetAny" (formula "5") (term "0,0,0,0,0,0"))
                     (rule "castedGetAny" (formula "5") (term "1,0,0,1,0,0,0"))
                     (rule "castedGetAny" (formula "5") (term "0,1,0,0,0,0"))
                      (builtin "One Step Simplification" (formula "5"))
                     (rule "true_left" (formula "5"))
                     (rule "shift_paren_or" (formula "5") (term "0,0,0"))
                      (builtin "One Step Simplification" (formula "5"))
                     (rule "eqSymm" (formula "5") (term "1,1,0,0,0"))
                     (rule "castedGetAny" (formula "5") (term "0,0,0,0,0,0"))
                     (rule "castedGetAny" (formula "5") (term "0,0,1,0,0,0"))
                     (rule "castedGetAny" (formula "5") (term "0,1,1,0,0,0"))
                      (builtin "One Step Simplification" (formula "5"))
                     (rule "true_left" (formula "5"))
                     (rule "cnf_rightDist" (formula "2") (term "0,0,0"))
                     (rule "distr_forallAnd" (formula "2") (term "0,0"))
                     (rule "distr_forallAnd" (formula "2") (term "0"))
                     (rule "distr_forallAnd" (formula "2"))
                     (rule "andLeft" (formula "2"))
                     (rule "shift_paren_or" (formula "3") (term "0,0,0"))
                      (builtin "One Step Simplification" (formula "3"))
                     (rule "eqSymm" (formula "3") (term "1,1,0,0,0"))
                     (rule "castedGetAny" (formula "3") (term "0,0,1,0,0,0"))
                     (rule "castedGetAny" (formula "3") (term "0,0,0,0,0,0"))
                     (rule "castedGetAny" (formula "3") (term "0,1,1,0,0,0"))
                      (builtin "One Step Simplification" (formula "3"))
                     (rule "true_left" (formula "3"))
                     (rule "cnf_rightDist" (formula "4") (term "0,0,0"))
                     (rule "distr_forallAnd" (formula "4") (term "0,0"))
                     (rule "distr_forallAnd" (formula "4") (term "0"))
                     (rule "distr_forallAnd" (formula "4"))
                     (rule "andLeft" (formula "4"))
                     (rule "cnf_rightDist" (formula "3") (term "0,0,0"))
                     (rule "distr_forallAnd" (formula "3") (term "0,0"))
                     (rule "distr_forallAnd" (formula "3") (term "0"))
                     (rule "distr_forallAnd" (formula "3"))
                     (rule "andLeft" (formula "3"))
                     (rule "cnf_rightDist" (formula "1") (term "0,0,0"))
                     (rule "distr_forallAnd" (formula "1") (term "0,0"))
                     (rule "distr_forallAnd" (formula "1") (term "0"))
                     (rule "distr_forallAnd" (formula "1"))
                     (rule "andLeft" (formula "1"))
                     (rule "shift_paren_or" (formula "5") (term "0,0,0"))
                      (builtin "One Step Simplification" (formula "5"))
                     (rule "eqSymm" (formula "5") (term "1,1,0,0,0"))
                     (rule "castedGetAny" (formula "5") (term "0,0,1,0,0,0"))
                     (rule "castedGetAny" (formula "5") (term "0,0,0,0,0,0"))
                     (rule "castedGetAny" (formula "5") (term "0,1,1,0,0,0"))
                      (builtin "One Step Simplification" (formula "5"))
                     (rule "true_left" (formula "5"))
                     (rule "cnf_rightDist" (formula "2") (term "0,0,0"))
                     (rule "distr_forallAnd" (formula "2") (term "0,0"))
                     (rule "distr_forallAnd" (formula "2") (term "0"))
                     (rule "distr_forallAnd" (formula "2"))
                     (rule "andLeft" (formula "2"))
                     (rule "commute_or_2" (formula "2") (term "0,0,0"))
                      (builtin "One Step Simplification" (formula "2"))
                     (rule "eqSymm" (formula "2") (term "1,0,0,0,0"))
                     (rule "castedGetAny" (formula "2") (term "1,0,0,1,0,0,0"))
                     (rule "castedGetAny" (formula "2") (term "0,0,0,0,0,0"))
                     (rule "castedGetAny" (formula "2") (term "0,1,0,0,0,0"))
                      (builtin "One Step Simplification" (formula "2"))
                     (rule "true_left" (formula "2"))
                     (rule "shift_paren_or" (formula "2") (term "0,0,0"))
                      (builtin "One Step Simplification" (formula "2"))
                     (rule "eqSymm" (formula "2") (term "1,1,0,0,0"))
                     (rule "castedGetAny" (formula "2") (term "0,0,1,0,0,0"))
                     (rule "castedGetAny" (formula "2") (term "1,0,0,0,0,0,0"))
                     (rule "castedGetAny" (formula "2") (term "0,1,1,0,0,0"))
                      (builtin "One Step Simplification" (formula "2"))
                     (rule "true_left" (formula "2"))
                     (rule "cnf_rightDist" (formula "3") (term "0,0,0"))
                     (rule "distr_forallAnd" (formula "3") (term "0,0"))
                     (rule "distr_forallAnd" (formula "3") (term "0"))
                     (rule "distr_forallAnd" (formula "3"))
                     (rule "andLeft" (formula "3"))
                     (rule "commute_or_2" (formula "3") (term "0,0,0"))
                      (builtin "One Step Simplification" (formula "3"))
                     (rule "eqSymm" (formula "3") (term "1,0,0,0,0"))
                     (rule "castedGetAny" (formula "3") (term "1,0,0,1,0,0,0"))
                     (rule "castedGetAny" (formula "3") (term "0,0,0,0,0,0"))
                     (rule "castedGetAny" (formula "3") (term "0,1,0,0,0,0"))
                      (builtin "One Step Simplification" (formula "3"))
                     (rule "true_left" (formula "3"))
                     (rule "cnf_rightDist" (formula "2") (term "0,0,0"))
                     (rule "distr_forallAnd" (formula "2") (term "0,0"))
                     (rule "distr_forallAnd" (formula "2") (term "0"))
                     (rule "distr_forallAnd" (formula "2"))
                     (rule "andLeft" (formula "2"))
                     (rule "cnf_rightDist" (formula "1") (term "0,0,0"))
                     (rule "distr_forallAnd" (formula "1") (term "0,0"))
                     (rule "distr_forallAnd" (formula "1") (term "0"))
                     (rule "distr_forallAnd" (formula "1"))
                     (rule "andLeft" (formula "1"))
                     (rule "shift_paren_or" (formula "4") (term "0,0,0"))
                      (builtin "One Step Simplification" (formula "4"))
                     (rule "eqSymm" (formula "4") (term "1,1,0,0,0"))
                     (rule "castedGetAny" (formula "4") (term "0,0,1,0,0,0"))
                     (rule "castedGetAny" (formula "4") (term "1,0,0,0,0,0,0"))
                     (rule "castedGetAny" (formula "4") (term "0,1,1,0,0,0"))
                      (builtin "One Step Simplification" (formula "4"))
                     (rule "true_left" (formula "4"))
                     (rule "ifthenelse_split_for" (formula "30") (term "1,1"))
                     (branch "result_228_A_1.value@heapAtPre_A«anonHeapFunction» ≥ 0 TRUE"
                        (rule "cnf_rightDist" (formula "31"))
                        (rule "andLeft" (formula "31"))
                        (rule "commute_or" (formula "32"))
                        (rule "cnf_rightDist" (formula "31"))
                        (rule "andLeft" (formula "31"))
                        (rule "commute_or" (formula "32"))
                        (rule "shift_paren_or" (formula "3") (term "0,0,0"))
                         (builtin "One Step Simplification" (formula "3"))
                        (rule "eqSymm" (formula "3") (term "1,1,0,0,0"))
                        (rule "castedGetAny" (formula "3") (term "1,0,0,0,0,0,0"))
                        (rule "castedGetAny" (formula "3") (term "0,0,1,0,0,0"))
                        (rule "castedGetAny" (formula "3") (term "0,1,1,0,0,0"))
                         (builtin "One Step Simplification" (formula "3"))
                        (rule "true_left" (formula "3"))
                        (rule "cnf_rightDist" (formula "2") (term "0,0,0"))
                        (rule "distr_forallAnd" (formula "2") (term "0,0"))
                        (rule "distr_forallAnd" (formula "2") (term "0"))
                        (rule "distr_forallAnd" (formula "2"))
                        (rule "andLeft" (formula "2"))
                        (rule "commute_or_2" (formula "2") (term "0,0,0"))
                         (builtin "One Step Simplification" (formula "2"))
                        (rule "eqSymm" (formula "2") (term "1,0,0,0,0"))
                        (rule "castedGetAny" (formula "2") (term "1,0,0,1,0,0,0"))
                        (rule "castedGetAny" (formula "2") (term "0,0,0,0,0,0"))
                        (rule "castedGetAny" (formula "2") (term "0,1,0,0,0,0"))
                         (builtin "One Step Simplification" (formula "2"))
                        (rule "true_left" (formula "2"))
                        (rule "shift_paren_or" (formula "2") (term "0,0,0"))
                         (builtin "One Step Simplification" (formula "2"))
                        (rule "eqSymm" (formula "2") (term "1,1,0,0,0"))
                        (rule "castedGetAny" (formula "2") (term "1,0,0,0,0,0,0"))
                        (rule "castedGetAny" (formula "2") (term "0,0,1,0,0,0"))
                        (rule "castedGetAny" (formula "2") (term "0,1,1,0,0,0"))
                         (builtin "One Step Simplification" (formula "2"))
                        (rule "true_left" (formula "2"))
                        (rule "cnf_rightDist" (formula "1") (term "0,0,0"))
                        (rule "distr_forallAnd" (formula "1") (term "0,0"))
                        (rule "distr_forallAnd" (formula "1") (term "0"))
                        (rule "distr_forallAnd" (formula "1"))
                        (rule "andLeft" (formula "1"))
                        (rule "commute_or_2" (formula "1") (term "0,0,0"))
                         (builtin "One Step Simplification" (formula "1"))
                        (rule "eqSymm" (formula "1") (term "1,0,0,0,0"))
                        (rule "castedGetAny" (formula "1") (term "0,0,0,0,0,0"))
                        (rule "castedGetAny" (formula "1") (term "1,0,0,1,0,0,0"))
                        (rule "castedGetAny" (formula "1") (term "0,1,0,0,0,0"))
                         (builtin "One Step Simplification" (formula "1"))
                        (rule "true_left" (formula "1"))
                        (rule "shift_paren_or" (formula "1") (term "0,0,0"))
                         (builtin "One Step Simplification" (formula "1"))
                        (rule "eqSymm" (formula "1") (term "1,1,0,0,0"))
                        (rule "castedGetAny" (formula "1") (term "1,0,0,0,0,0,0"))
                        (rule "castedGetAny" (formula "1") (term "0,0,1,0,0,0"))
                        (rule "castedGetAny" (formula "1") (term "0,1,1,0,0,0"))
                         (builtin "One Step Simplification" (formula "1"))
                        (rule "true_left" (formula "1"))
                        (rule "cut_direct" (formula "28") (term "0"))
                        (branch "CUT: result_228_A_1.value@heapAtPre_A«anonHeapFunction» = 0 TRUE"
                            (builtin "One Step Simplification" (formula "29"))
                           (rule "true_left" (formula "29"))
                           (rule "replace_known_left" (formula "30") (term "0") (ifseqformula "28"))
                            (builtin "One Step Simplification" (formula "30"))
                           (rule "true_left" (formula "30"))
                           (rule "replace_known_left" (formula "29") (term "0") (ifseqformula "28"))
                            (builtin "One Step Simplification" (formula "29"))
                           (rule "true_left" (formula "29"))
                           (rule "applyEq" (formula "27") (term "0") (ifseqformula "28"))
                           (rule "qeq_literals" (formula "27"))
                           (rule "true_left" (formula "27"))
                           (rule "applyEq" (formula "28") (term "1,0") (ifseqformula "27"))
                           (rule "eqSymm" (formula "28"))
                           (rule "polySimp_homoEq" (formula "28"))
                           (rule "polySimp_mulLiterals" (formula "28") (term "1,0"))
                           (rule "polySimp_elimOne" (formula "28") (term "1,0"))
                           (rule "applyEq" (formula "29") (term "1,0,0") (ifseqformula "27"))
                           (rule "polySimp_mulComm0" (formula "29") (term "0"))
                           (rule "applyEq" (formula "56") (term "1") (ifseqformula "27"))
                           (rule "applyEq" (formula "23") (term "1") (ifseqformula "27"))
                           (rule "applyEq" (formula "7") (term "1") (ifseqformula "27"))
                           (rule "applyEq" (formula "28") (term "1,1,0") (ifseqformula "27"))
                           (rule "polySimp_addComm0" (formula "28") (term "0"))
                           (rule "applyEq" (formula "29") (term "0,0") (ifseqformula "27"))
                           (rule "times_zero_2" (formula "29") (term "0"))
                           (rule "polySimp_homoEq" (formula "29"))
                           (rule "mul_literals" (formula "29") (term "1,0"))
                           (rule "add_zero_right" (formula "29") (term "0"))
                           (rule "polySimp_sepPosMonomial" (formula "28"))
                           (rule "polySimp_sepPosMonomial" (formula "29"))
                           (rule "polySimp_mulLiterals" (formula "29") (term "1"))
                           (rule "polySimp_elimOne" (formula "29") (term "1"))
                           (rule "applyEq" (formula "65") (term "1") (ifseqformula "29"))
                           (rule "jdiv_axiom" (formula "28") (term "0"))
                           (rule "eqSymm" (formula "28"))
                           (rule "applyEq" (formula "28") (term "1") (ifseqformula "29"))
                            (builtin "One Step Simplification" (formula "28"))
                           (rule "eqSymm" (formula "28") (term "1"))
                           (rule "polySimp_homoEq" (formula "28") (term "1"))
                           (rule "polySimp_mulLiterals" (formula "28") (term "1,0,1"))
                           (rule "polySimp_elimOne" (formula "28") (term "1,0,1"))
                           (rule "polySimp_sepPosMonomial" (formula "28") (term "1"))
                           (rule "inEqSimp_contradInEq0" (formula "28") (term "0,0") (ifseqformula "4"))
                           (rule "qeq_literals" (formula "28") (term "0,0,0"))
                            (builtin "One Step Simplification" (formula "28"))
                           (rule "true_left" (formula "28"))
                           (rule "div_axiom" (formula "28") (term "0,1") (inst "quotient=quotient_1"))
                            (builtin "One Step Simplification" (formula "28"))
                           (rule "true_left" (formula "28"))
                           (rule "Use_information_flow_contract_for_compareTo_325434207" (formula "19") (ifseqformula "19"))
                            (builtin "One Step Simplification" (formula "19") (ifInst ""  (formula "90")) (ifInst ""  (formula "90")))
                           (rule "true_left" (formula "19"))
                           (rule "Use_information_flow_contract_for_getOrder_757678341" (formula "58") (ifseqformula "25"))
                           (rule "applyEq" (formula "58") (term "0,0,1") (ifseqformula "56"))
                           (rule "eqSymm" (formula "58") (term "0,1"))
                           (rule "replace_known_left" (formula "58") (term "0,1") (ifseqformula "23"))
                            (builtin "One Step Simplification" (formula "58"))
                           (rule "applyEq" (formula "58") (term "0,1") (ifseqformula "7"))
                           (rule "eqSymm" (formula "58") (term "1"))
                           (rule "replace_known_left" (formula "58") (term "1") (ifseqformula "27"))
                            (builtin "One Step Simplification" (formula "58"))
                           (rule "true_left" (formula "58"))
                           (rule "Use_information_flow_contract_for_getOrder_757678341" (formula "58") (ifseqformula "58"))
                            (builtin "One Step Simplification" (formula "58"))
                           (rule "true_left" (formula "58"))
                           (rule "Use_information_flow_contract_for_getOrder_757678341" (formula "25") (ifseqformula "25"))
                            (builtin "One Step Simplification" (formula "25"))
                           (rule "true_left" (formula "25"))
                           (rule "Use_information_flow_contract_for_compareTo_325434207" (formula "19") (ifseqformula "52"))
                           (rule "eqSymm" (formula "19") (term "1,0,1"))
                           (rule "eqSymm" (formula "19") (term "1,1"))
                           (rule "eqSymm" (formula "19") (term "0,0,1"))
                           (rule "replace_known_left" (formula "19") (term "0,0,1") (ifseqformula "6"))
                            (builtin "One Step Simplification" (formula "19") (ifInst ""  (formula "90")) (ifInst ""  (formula "91")))
                           (rule "applyEq" (formula "19") (term "0,0,1") (ifseqformula "54"))
                           (rule "eqSymm" (formula "19") (term "0,1"))
                           (rule "replace_known_left" (formula "19") (term "0,1") (ifseqformula "21"))
                            (builtin "One Step Simplification" (formula "19"))
                           (rule "Class_invariant_axiom_for_java_math_BigInteger" (formula "19") (term "0,0"))
                           (rule "replace_known_left" (formula "19") (term "1,0,0") (ifseqformula "21"))
                            (builtin "One Step Simplification" (formula "19") (ifInst ""  (formula "90")))
                           (rule "Class_invariant_axiom_for_java_math_BigInteger" (formula "19") (term "0"))
                           (rule "replace_known_right" (formula "19") (term "0,0,0") (ifseqformula "91"))
                            (builtin "One Step Simplification" (formula "19") (ifInst ""  (formula "54")))
                           (rule "applyEq" (formula "45") (term "0") (ifseqformula "19"))
                           (rule "applyEq" (formula "51") (term "0") (ifseqformula "19"))
                           (rule "applyEq" (formula "51") (term "4") (ifseqformula "19"))
                           (rule "Use_information_flow_contract_for_multiply_1272441881" (formula "69") (ifseqformula "36"))
                           (rule "replaceKnownSelect_taclet21_12" (formula "69") (term "0,1,1"))
                           (rule "replaceKnownSelect_taclet21_11" (formula "69") (term "1,1,1"))
                           (rule "replaceKnownAuxiliaryConstant_taclet0100021_19" (formula "69") (term "0,1,1"))
                           (rule "replaceKnownAuxiliaryConstant_taclet00021_17" (formula "69") (term "1,1,1"))
                           (rule "replaceKnownSelect_taclet21_8" (formula "69") (term "1,1,0,1"))
                           (rule "replaceKnownSelect_taclet21_9" (formula "69") (term "0,1,0,1"))
                           (rule "replaceKnownAuxiliaryConstant_taclet21_10" (formula "69") (term "1,1,0,1"))
                            (builtin "One Step Simplification" (formula "69") (ifInst ""  (formula "80")) (ifInst ""  (formula "79")))
                           (rule "eqSymm" (formula "69") (term "1,1"))
                           (rule "replace_known_right" (formula "69") (term "1,1") (ifseqformula "97"))
                            (builtin "One Step Simplification" (formula "69"))
                           (rule "pullOutSelect" (formula "69") (term "0,0,1") (inst "selectSK=org_bouncycastle_math_ec_ECPoint_value_4"))
                           (rule "simplifySelectOfAnonEQ" (formula "69") (ifseqformula "59"))
                            (builtin "One Step Simplification" (formula "69") (ifInst ""  (formula "95")) (ifInst ""  (formula "47")))
                           (rule "applyEqReverse" (formula "70") (term "0,0,1") (ifseqformula "69"))
                           (rule "hideAuxiliaryEq" (formula "69"))
                           (rule "eqSymm" (formula "69") (term "0,1"))
                           (rule "applyEq" (formula "69") (term "1,0,1") (ifseqformula "5"))
                           (rule "pullOutSelect" (formula "69") (term "0,0,1") (inst "selectSK=org_bouncycastle_math_ec_ECPoint_value_5"))
                           (rule "simplifySelectOfAnonEQ" (formula "69") (ifseqformula "27"))
                            (builtin "One Step Simplification" (formula "69") (ifInst ""  (formula "94")) (ifInst ""  (formula "14")))
                           (rule "applyEqReverse" (formula "70") (term "0,0,1") (ifseqformula "69"))
                            (builtin "One Step Simplification" (formula "70"))
                           (rule "notLeft" (formula "70"))
                           (rule "hideAuxiliaryEq" (formula "69"))
                           (rule "Class_invariant_axiom_for_org_bouncycastle_math_ec_ECPoint" (formula "75") (term "1"))
                            (builtin "One Step Simplification" (formula "75"))
                           (rule "Class_invariant_axiom_for_org_bouncycastle_math_ec_ECPoint" (formula "75"))
                           (rule "closeTrue" (formula "75"))
                        )
                        (branch "CUT: result_228_A_1.value@heapAtPre_A«anonHeapFunction» = 0 FALSE"
                            (builtin "One Step Simplification" (formula "28"))
                           (rule "replace_known_right" (formula "30") (term "0") (ifseqformula "79"))
                            (builtin "One Step Simplification" (formula "30"))
                           (rule "replace_known_right" (formula "29") (term "0") (ifseqformula "79"))
                            (builtin "One Step Simplification" (formula "29"))
                           (rule "applyEq" (formula "32") (term "0,0") (ifseqformula "29"))
                           (rule "polySimp_mulComm0" (formula "32") (term "0"))
                           (rule "applyEq" (formula "28") (term "0") (ifseqformula "32"))
                           (rule "inEqSimp_homoInEq0" (formula "28"))
                           (rule "polySimp_mulComm0" (formula "28") (term "1,0"))
                           (rule "polySimp_rightDist" (formula "28") (term "1,0"))
                           (rule "polySimp_mulAssoc" (formula "28") (term "0,1,0"))
                           (rule "polySimp_mulComm0" (formula "28") (term "0,0,1,0"))
                           (rule "polySimp_mulLiterals" (formula "28") (term "0,1,0"))
                           (rule "polySimp_elimOne" (formula "28") (term "0,1,0"))
                           (rule "polySimp_addAssoc" (formula "28") (term "0"))
                           (rule "polySimp_pullOutFactor2" (formula "28") (term "0,0"))
                           (rule "add_literals" (formula "28") (term "1,0,0"))
                           (rule "times_zero_1" (formula "28") (term "0,0"))
                           (rule "add_zero_left" (formula "28") (term "0"))
                           (rule "applyEq" (formula "30") (term "0") (ifseqformula "32"))
                           (rule "inEqSimp_homoInEq1" (formula "30"))
                           (rule "polySimp_mulComm0" (formula "30") (term "1,0"))
                           (rule "polySimp_rightDist" (formula "30") (term "1,0"))
                           (rule "polySimp_mulAssoc" (formula "30") (term "0,1,0"))
                           (rule "polySimp_mulComm0" (formula "30") (term "0,0,1,0"))
                           (rule "polySimp_mulLiterals" (formula "30") (term "0,1,0"))
                           (rule "polySimp_elimOne" (formula "30") (term "0,1,0"))
                           (rule "polySimp_addAssoc" (formula "30") (term "0"))
                           (rule "polySimp_addComm1" (formula "30") (term "0,0"))
                           (rule "polySimp_pullOutFactor2b" (formula "30") (term "0,0,0"))
                           (rule "add_literals" (formula "30") (term "1,1,0,0,0"))
                           (rule "times_zero_1" (formula "30") (term "1,0,0,0"))
                           (rule "add_literals" (formula "30") (term "0,0,0"))
                           (rule "applyEq" (formula "31") (term "0,1") (ifseqformula "29"))
                           (rule "inEqSimp_invertInEq1" (formula "28"))
                           (rule "mul_literals" (formula "28") (term "1"))
                           (rule "polySimp_mulLiterals" (formula "28") (term "0"))
                           (rule "polySimp_elimOne" (formula "28") (term "0"))
                           (rule "inEqSimp_sepNegMonomial0" (formula "30"))
                           (rule "polySimp_mulLiterals" (formula "30") (term "0"))
                           (rule "polySimp_elimOne" (formula "30") (term "0"))
                           (rule "inEqSimp_strengthen1" (formula "27") (ifseqformula "79"))
                           (rule "add_literals" (formula "27") (term "1"))
                           (rule "inEqSimp_contradEq7" (formula "79") (ifseqformula "27"))
                           (rule "mul_literals" (formula "79") (term "1,0,0"))
                           (rule "add_literals" (formula "79") (term "0,0"))
                           (rule "leq_literals" (formula "79") (term "0"))
                            (builtin "One Step Simplification" (formula "79"))
                           (rule "false_right" (formula "79"))
                           (rule "inEqSimp_exactShadow3" (formula "30") (ifseqformula "28"))
                           (rule "add_zero_right" (formula "30") (term "0"))
                           (rule "polySimp_rightDist" (formula "30") (term "0"))
                           (rule "mul_literals" (formula "30") (term "0,0"))
                           (rule "polySimp_mulLiterals" (formula "30") (term "1,0"))
                           (rule "polySimp_elimOne" (formula "30") (term "1,0"))
                           (rule "inEqSimp_sepPosMonomial1" (formula "30"))
                           (rule "mul_literals" (formula "30") (term "1"))
                           (rule "Use_information_flow_contract_for_compareTo_325434207" (formula "19") (ifseqformula "19"))
                            (builtin "One Step Simplification" (formula "19") (ifInst ""  (formula "93")) (ifInst ""  (formula "93")))
                           (rule "true_left" (formula "19"))
                           (rule "Use_information_flow_contract_for_getOrder_757678341" (formula "61") (ifseqformula "25"))
                           (rule "replace_known_left" (formula "61") (term "1,1") (ifseqformula "7"))
                            (builtin "One Step Simplification" (formula "61"))
                           (rule "true_left" (formula "61"))
                           (rule "Use_information_flow_contract_for_multiply_1272441881" (formula "73") (ifseqformula "38"))
                           (rule "replaceKnownSelect_taclet21_11" (formula "73") (term "1,1,1"))
                           (rule "replaceKnownSelect_taclet21_12" (formula "73") (term "0,1,1"))
                           (rule "replaceKnownAuxiliaryConstant_taclet00021_17" (formula "73") (term "1,1,1"))
                           (rule "replaceKnownAuxiliaryConstant_taclet0100021_19" (formula "73") (term "0,1,1"))
                           (rule "replaceKnownSelect_taclet21_9" (formula "73") (term "0,1,0,1"))
                           (rule "replaceKnownSelect_taclet21_8" (formula "73") (term "1,1,0,1"))
                           (rule "replaceKnownAuxiliaryConstant_taclet021_15" (formula "73") (term "0,1,0,1"))
                           (rule "replaceKnownAuxiliaryConstant_taclet21_10" (formula "73") (term "1,1,0,1"))
                           (rule "replaceKnownAuxiliaryConstant_taclet021_15" (formula "73") (term "1,1,0,1"))
                            (builtin "One Step Simplification" (formula "73") (ifInst ""  (formula "84")) (ifInst ""  (formula "83")))
                           (rule "eqSymm" (formula "73") (term "1,1"))
                           (rule "replace_known_right" (formula "73") (term "1,1") (ifseqformula "101"))
                            (builtin "One Step Simplification" (formula "73"))
                           (rule "pullOutSelect" (formula "73") (term "0,0,1") (inst "selectSK=org_bouncycastle_math_ec_ECPoint_value_4"))
                           (rule "simplifySelectOfAnonEQ" (formula "73") (ifseqformula "63"))
                            (builtin "One Step Simplification" (formula "73") (ifInst ""  (formula "99")) (ifInst ""  (formula "50")))
                           (rule "applyEqReverse" (formula "74") (term "0,0,1") (ifseqformula "73"))
                           (rule "hideAuxiliaryEq" (formula "73"))
                           (rule "eqSymm" (formula "73") (term "0,1"))
                           (rule "applyEq" (formula "73") (term "1,0,1") (ifseqformula "5"))
                           (rule "pullOutSelect" (formula "73") (term "0,0,1") (inst "selectSK=org_bouncycastle_math_ec_ECPoint_value_5"))
                           (rule "simplifySelectOfAnonEQ" (formula "73") (ifseqformula "26"))
                            (builtin "One Step Simplification" (formula "73") (ifInst ""  (formula "98")) (ifInst ""  (formula "14")))
                           (rule "applyEqReverse" (formula "74") (term "0,0,1") (ifseqformula "73"))
                            (builtin "One Step Simplification" (formula "74"))
                           (rule "notLeft" (formula "74"))
                           (rule "hideAuxiliaryEq" (formula "73"))
                           (rule "Class_invariant_axiom_for_org_bouncycastle_math_ec_ECPoint" (formula "79") (term "0"))
                            (builtin "One Step Simplification" (formula "79"))
                           (rule "Class_invariant_axiom_for_org_bouncycastle_math_ec_ECPoint" (formula "79"))
                           (rule "closeTrue" (formula "79"))
                        )
                     )
                     (branch "result_228_A_1.value@heapAtPre_A«anonHeapFunction» ≥ 0 FALSE"
                        (rule "inEqSimp_geqRight" (formula "79"))
                        (rule "mul_literals" (formula "1") (term "1,0,0"))
                        (rule "add_zero_right" (formula "1") (term "0,0"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "1"))
                        (rule "mul_literals" (formula "1") (term "1"))
                        (rule "inEqSimp_contradEq3" (formula "31") (term "0") (ifseqformula "1"))
                        (rule "mul_literals" (formula "31") (term "1,0,0,0"))
                        (rule "add_zero_right" (formula "31") (term "0,0,0"))
                        (rule "qeq_literals" (formula "31") (term "0,0"))
                         (builtin "One Step Simplification" (formula "31"))
                        (rule "andLeft" (formula "31"))
                        (rule "andLeft" (formula "31"))
                        (rule "applyEq" (formula "35") (term "0,0") (ifseqformula "32"))
                        (rule "polySimp_mulComm0" (formula "35") (term "0"))
                        (rule "applyEq" (formula "31") (term "0") (ifseqformula "35"))
                        (rule "inEqSimp_homoInEq0" (formula "31"))
                        (rule "polySimp_mulComm0" (formula "31") (term "1,0"))
                        (rule "polySimp_rightDist" (formula "31") (term "1,0"))
                        (rule "polySimp_mulAssoc" (formula "31") (term "0,1,0"))
                        (rule "polySimp_mulComm0" (formula "31") (term "0,0,1,0"))
                        (rule "polySimp_mulLiterals" (formula "31") (term "0,1,0"))
                        (rule "polySimp_elimOne" (formula "31") (term "0,1,0"))
                        (rule "polySimp_addAssoc" (formula "31") (term "0"))
                        (rule "polySimp_pullOutFactor2" (formula "31") (term "0,0"))
                        (rule "add_literals" (formula "31") (term "1,0,0"))
                        (rule "times_zero_1" (formula "31") (term "0,0"))
                        (rule "add_zero_left" (formula "31") (term "0"))
                        (rule "applyEq" (formula "33") (term "0") (ifseqformula "35"))
                        (rule "inEqSimp_homoInEq1" (formula "33"))
                        (rule "polySimp_mulComm0" (formula "33") (term "1,0"))
                        (rule "polySimp_rightDist" (formula "33") (term "1,0"))
                        (rule "polySimp_mulAssoc" (formula "33") (term "0,1,0"))
                        (rule "polySimp_mulComm0" (formula "33") (term "0,0,1,0"))
                        (rule "polySimp_mulLiterals" (formula "33") (term "0,1,0"))
                        (rule "polySimp_elimOne" (formula "33") (term "0,1,0"))
                        (rule "polySimp_addAssoc" (formula "33") (term "0"))
                        (rule "polySimp_addComm1" (formula "33") (term "0,0"))
                        (rule "polySimp_pullOutFactor2b" (formula "33") (term "0,0,0"))
                        (rule "add_literals" (formula "33") (term "1,1,0,0,0"))
                        (rule "times_zero_1" (formula "33") (term "1,0,0,0"))
                        (rule "add_literals" (formula "33") (term "0,0,0"))
                        (rule "applyEq" (formula "34") (term "0,1") (ifseqformula "32"))
                        (rule "inEqSimp_invertInEq1" (formula "31"))
                        (rule "mul_literals" (formula "31") (term "1"))
                        (rule "polySimp_mulLiterals" (formula "31") (term "0"))
                        (rule "polySimp_elimOne" (formula "31") (term "0"))
                        (rule "inEqSimp_sepNegMonomial0" (formula "33"))
                        (rule "polySimp_mulLiterals" (formula "33") (term "0"))
                        (rule "polySimp_elimOne" (formula "33") (term "0"))
                        (rule "inEqSimp_exactShadow3" (formula "33") (ifseqformula "31"))
                        (rule "add_zero_right" (formula "33") (term "0"))
                        (rule "polySimp_rightDist" (formula "33") (term "0"))
                        (rule "mul_literals" (formula "33") (term "0,0"))
                        (rule "inEqSimp_sepNegMonomial1" (formula "33"))
                        (rule "polySimp_mulLiterals" (formula "33") (term "0"))
                        (rule "polySimp_elimOne" (formula "33") (term "0"))
                        (rule "shift_paren_or" (formula "4") (term "0,0,0"))
                         (builtin "One Step Simplification" (formula "4"))
                        (rule "eqSymm" (formula "4") (term "1,1,0,0,0"))
                        (rule "castedGetAny" (formula "4") (term "0,0,1,0,0,0"))
                        (rule "castedGetAny" (formula "4") (term "1,0,0,0,0,0,0"))
                        (rule "castedGetAny" (formula "4") (term "0,1,1,0,0,0"))
                         (builtin "One Step Simplification" (formula "4"))
                        (rule "true_left" (formula "4"))
                        (rule "cnf_rightDist" (formula "3") (term "0,0,0"))
                        (rule "distr_forallAnd" (formula "3") (term "0,0"))
                        (rule "distr_forallAnd" (formula "3") (term "0"))
                        (rule "distr_forallAnd" (formula "3"))
                        (rule "andLeft" (formula "3"))
                        (rule "cnf_rightDist" (formula "2") (term "0,0,0"))
                        (rule "distr_forallAnd" (formula "2") (term "0,0"))
                        (rule "distr_forallAnd" (formula "2") (term "0"))
                        (rule "distr_forallAnd" (formula "2"))
                        (rule "andLeft" (formula "2"))
                        (rule "commute_or_2" (formula "3") (term "0,0,0"))
                         (builtin "One Step Simplification" (formula "3"))
                        (rule "eqSymm" (formula "3") (term "1,0,0,0,0"))
                        (rule "castedGetAny" (formula "3") (term "1,0,0,1,0,0,0"))
                        (rule "castedGetAny" (formula "3") (term "0,0,0,0,0,0"))
                        (rule "castedGetAny" (formula "3") (term "0,1,0,0,0,0"))
                         (builtin "One Step Simplification" (formula "3"))
                        (rule "true_left" (formula "3"))
                        (rule "commute_or_2" (formula "2") (term "0,0,0"))
                         (builtin "One Step Simplification" (formula "2"))
                        (rule "eqSymm" (formula "2") (term "1,0,0,0,0"))
                        (rule "castedGetAny" (formula "2") (term "1,0,0,1,0,0,0"))
                        (rule "castedGetAny" (formula "2") (term "0,0,0,0,0,0"))
                        (rule "castedGetAny" (formula "2") (term "0,1,0,0,0,0"))
                         (builtin "One Step Simplification" (formula "2"))
                        (rule "true_left" (formula "2"))
                        (rule "shift_paren_or" (formula "2") (term "0,0,0"))
                         (builtin "One Step Simplification" (formula "2"))
                        (rule "eqSymm" (formula "2") (term "1,1,0,0,0"))
                        (rule "castedGetAny" (formula "2") (term "0,0,1,0,0,0"))
                        (rule "castedGetAny" (formula "2") (term "1,0,0,0,0,0,0"))
                        (rule "castedGetAny" (formula "2") (term "0,1,1,0,0,0"))
                         (builtin "One Step Simplification" (formula "2"))
                        (rule "true_left" (formula "2"))
                        (rule "Use_information_flow_contract_for_compareTo_325434207" (formula "20") (ifseqformula "20"))
                         (builtin "One Step Simplification" (formula "20") (ifInst ""  (formula "93")) (ifInst ""  (formula "93")))
                        (rule "true_left" (formula "20"))
                        (rule "Use_information_flow_contract_for_getOrder_757678341" (formula "61") (ifseqformula "26"))
                        (rule "replace_known_left" (formula "61") (term "1,1") (ifseqformula "8"))
                         (builtin "One Step Simplification" (formula "61"))
                        (rule "true_left" (formula "61"))
                        (rule "Use_information_flow_contract_for_multiply_1272441881_0" (formula "73") (ifseqformula "38"))
                        (rule "replaceKnownSelect_taclet21_12" (formula "73") (term "0,1,1"))
                        (rule "replaceKnownSelect_taclet21_11" (formula "73") (term "1,1,1"))
                        (rule "replaceKnownAuxiliaryConstant_taclet0100021_19" (formula "73") (term "0,1,1"))
                        (rule "replaceKnownAuxiliaryConstant_taclet00021_17" (formula "73") (term "1,1,1"))
                        (rule "replaceKnownSelect_taclet21_8" (formula "73") (term "1,1,0,1"))
                        (rule "replaceKnownSelect_taclet21_9" (formula "73") (term "0,1,0,1"))
                        (rule "replaceKnownAuxiliaryConstant_taclet21_10" (formula "73") (term "1,1,0,1"))
                         (builtin "One Step Simplification" (formula "73") (ifInst ""  (formula "84")) (ifInst ""  (formula "83")))
                        (rule "eqSymm" (formula "73") (term "1,1"))
                        (rule "replace_known_right" (formula "73") (term "1,1") (ifseqformula "101"))
                         (builtin "One Step Simplification" (formula "73"))
                        (rule "pullOutSelect" (formula "73") (term "1,0,1") (inst "selectSK=org_bouncycastle_math_ec_ECPoint_value_4"))
                        (rule "simplifySelectOfAnonEQ" (formula "73") (ifseqformula "27"))
                         (builtin "One Step Simplification" (formula "73") (ifInst ""  (formula "98")) (ifInst ""  (formula "15")))
                        (rule "applyEqReverse" (formula "74") (term "1,0,1") (ifseqformula "73"))
                        (rule "hideAuxiliaryEq" (formula "73"))
                        (rule "pullOutSelect" (formula "73") (term "0,0,1") (inst "selectSK=org_bouncycastle_math_ec_ECPoint_value_5"))
                        (rule "simplifySelectOfAnonEQ" (formula "73") (ifseqformula "63"))
                         (builtin "One Step Simplification" (formula "73") (ifInst ""  (formula "99")) (ifInst ""  (formula "50")))
                        (rule "applyEqReverse" (formula "74") (term "0,0,1") (ifseqformula "73"))
                        (rule "hideAuxiliaryEq" (formula "73"))
                        (rule "replace_known_left" (formula "73") (term "0,1") (ifseqformula "6"))
                         (builtin "One Step Simplification" (formula "73"))
                        (rule "notLeft" (formula "73"))
                        (rule "Class_invariant_axiom_for_org_bouncycastle_math_ec_ECPoint" (formula "79") (term "0"))
                         (builtin "One Step Simplification" (formula "79"))
                        (rule "Class_invariant_axiom_for_org_bouncycastle_math_ec_ECPoint" (formula "79"))
                        (rule "closeTrue" (formula "79"))
                     )
                  )
                  (branch " resultAtPost_226_B.<created>@anon_heap_mod«anonHeapFunction» = TRUE FALSE"
                     (rule "applyEqReverse" (formula "105") (term "1") (ifseqformula "8"))
                     (rule "hideAuxiliaryEq" (formula "8"))
                     (rule "replace_known_right" (formula "75") (term "0") (ifseqformula "82"))
                      (builtin "One Step Simplification" (formula "75"))
                     (rule "commute_or" (formula "3") (term "0,1,0,0,0"))
                     (rule "commute_or" (formula "2") (term "0,0,0,0"))
                     (rule "onlyCreatedObjectsAreReferenced" (formula "96") (term "0") (ifseqformula "21"))
                     (rule "replace_known_left" (formula "1") (term "1") (ifseqformula "27"))
                      (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "97")))
                     (rule "true_left" (formula "1"))
                     (rule "onlyCreatedObjectsAreReferenced" (formula "59") (term "1,0") (ifseqformula "54"))
                     (rule "replace_known_left" (formula "59") (term "1") (ifseqformula "60"))
                      (builtin "One Step Simplification" (formula "59") (ifInst ""  (formula "98")))
                     (rule "true_left" (formula "59"))
                     (rule "onlyCreatedObjectsAreReferenced" (formula "30") (term "2") (ifseqformula "21"))
                     (rule "replace_known_left" (formula "30") (term "1") (ifseqformula "15"))
                      (builtin "One Step Simplification" (formula "30") (ifInst ""  (formula "95")))
                     (rule "true_left" (formula "30"))
                     (rule "onlyCreatedObjectsAreReferenced" (formula "13") (term "1,1,0") (ifseqformula "21"))
                     (rule "replace_known_left" (formula "13") (term "1") (ifseqformula "15"))
                      (builtin "One Step Simplification" (formula "13") (ifInst ""  (formula "93")))
                     (rule "true_left" (formula "13"))
                     (rule "onlyCreatedObjectsAreReferenced" (formula "47") (term "1,0") (ifseqformula "54"))
                     (rule "replace_known_left" (formula "47") (term "1") (ifseqformula "48"))
                      (builtin "One Step Simplification" (formula "47") (ifInst ""  (formula "94")))
                     (rule "true_left" (formula "47"))
                     (rule "onlyCreatedObjectsAreReferenced" (formula "46") (term "1,0") (ifseqformula "54"))
                     (rule "replace_known_left" (formula "46") (term "1") (ifseqformula "47"))
                      (builtin "One Step Simplification" (formula "46") (ifInst ""  (formula "92")))
                     (rule "true_left" (formula "46"))
                     (rule "onlyCreatedObjectsAreReferenced" (formula "13") (term "1,0") (ifseqformula "21"))
                     (rule "replace_known_left" (formula "13") (term "1") (ifseqformula "14"))
                      (builtin "One Step Simplification" (formula "13") (ifInst ""  (formula "91")))
                     (rule "true_left" (formula "13"))
                     (rule "onlyCreatedObjectsAreReferenced" (formula "61") (term "1,0") (ifseqformula "54"))
                     (rule "replace_known_left" (formula "61") (term "1") (ifseqformula "48"))
                      (builtin "One Step Simplification" (formula "61") (ifInst ""  (formula "96")))
                     (rule "true_left" (formula "61"))
                     (rule "commute_or" (formula "2") (term "0,1,0,0,0"))
                     (rule "commute_or" (formula "1") (term "0,0,0,0"))
                     (rule "commute_or" (formula "1") (term "0,1,0,0,0"))
                     (rule "commute_or_2" (formula "4") (term "0,0,0"))
                     (rule "commute_or_2" (formula "3") (term "0,0,0"))
                     (rule "commute_and" (formula "32") (term "0,1"))
                     (rule "commute_or_2" (formula "6") (term "0,0,0,0,0"))
                      (builtin "One Step Simplification" (formula "6"))
                     (rule "commute_or_2" (formula "2") (term "0,0,0"))
                     (rule "commute_or_2" (formula "1") (term "0,0,0"))
                     (rule "commute_or" (formula "5") (term "1,0,0,0,0,0"))
                     (rule "commute_or_2" (formula "6") (term "0,0,0,0"))
                     (rule "shift_paren_or" (formula "4") (term "0,0,0,0"))
                     (rule "commute_or_2" (formula "3") (term "1,0,0,0,0"))
                     (rule "commute_or_2" (formula "2") (term "1,0,0,0,0"))
                     (rule "shift_paren_or" (formula "1") (term "0,0,0,0"))
                     (rule "shift_paren_or" (formula "3") (term "0,0,0,0"))
                     (rule "shift_paren_or" (formula "2") (term "0,0,0,0"))
                     (rule "cnf_rightDist" (formula "6") (term "0,0,0"))
                     (rule "distr_forallAnd" (formula "6") (term "0,0"))
                     (rule "distr_forallAnd" (formula "6") (term "0"))
                     (rule "distr_forallAnd" (formula "6"))
                     (rule "andLeft" (formula "6"))
                     (rule "commute_or_2" (formula "6") (term "0,0,0"))
                      (builtin "One Step Simplification" (formula "6"))
                     (rule "eqSymm" (formula "6") (term "1,0,0,0,0"))
                     (rule "castedGetAny" (formula "6") (term "0,0,0,0,0,0"))
                     (rule "castedGetAny" (formula "6") (term "1,0,0,1,0,0,0"))
                     (rule "castedGetAny" (formula "6") (term "0,1,0,0,0,0"))
                      (builtin "One Step Simplification" (formula "6"))
                     (rule "true_left" (formula "6"))
                     (rule "shift_paren_or" (formula "6") (term "0,0,0"))
                      (builtin "One Step Simplification" (formula "6"))
                     (rule "eqSymm" (formula "6") (term "1,1,0,0,0"))
                     (rule "castedGetAny" (formula "6") (term "0,0,1,0,0,0"))
                     (rule "castedGetAny" (formula "6") (term "0,0,0,0,0,0"))
                     (rule "castedGetAny" (formula "6") (term "0,1,1,0,0,0"))
                      (builtin "One Step Simplification" (formula "6"))
                     (rule "true_left" (formula "6"))
                     (rule "commute_and" (formula "4") (term "1,0,0,0"))
                     (rule "commute_and" (formula "3") (term "1,0,0,0"))
                     (rule "commute_and" (formula "2") (term "1,0,0,0"))
                     (rule "commute_and" (formula "1") (term "1,0,0,0"))
                     (rule "shift_paren_or" (formula "5") (term "0,0,0,0,0"))
                      (builtin "One Step Simplification" (formula "5"))
                     (rule "commute_or_2" (formula "5") (term "0,0,0,0"))
                     (rule "shift_paren_or" (formula "4") (term "0,0,0,0,0"))
                      (builtin "One Step Simplification" (formula "4"))
                     (rule "commute_or_2" (formula "4") (term "0,0,0,0"))
                     (rule "shift_paren_or" (formula "1") (term "0,0,0,0,0"))
                      (builtin "One Step Simplification" (formula "1"))
                     (rule "commute_or_2" (formula "1") (term "0,0,0,0"))
                     (rule "shift_paren_or" (formula "3") (term "0,0,0,0,0"))
                      (builtin "One Step Simplification" (formula "3"))
                     (rule "shift_paren_or" (formula "2") (term "0,0,0,0,0"))
                      (builtin "One Step Simplification" (formula "2"))
                     (rule "cnf_rightDist" (formula "5") (term "0,0,0"))
                     (rule "distr_forallAnd" (formula "5") (term "0,0"))
                     (rule "distr_forallAnd" (formula "5") (term "0"))
                     (rule "distr_forallAnd" (formula "5"))
                     (rule "andLeft" (formula "5"))
                     (rule "commute_or_2" (formula "5") (term "0,0,0"))
                      (builtin "One Step Simplification" (formula "5"))
                     (rule "eqSymm" (formula "5") (term "1,0,0,0,0"))
                     (rule "castedGetAny" (formula "5") (term "1,0,0,1,0,0,0"))
                     (rule "castedGetAny" (formula "5") (term "0,0,0,0,0,0"))
                     (rule "castedGetAny" (formula "5") (term "0,1,0,0,0,0"))
                      (builtin "One Step Simplification" (formula "5"))
                     (rule "true_left" (formula "5"))
                     (rule "shift_paren_or" (formula "5") (term "0,0,0"))
                      (builtin "One Step Simplification" (formula "5"))
                     (rule "eqSymm" (formula "5") (term "1,1,0,0,0"))
                     (rule "castedGetAny" (formula "5") (term "0,0,0,0,0,0"))
                     (rule "castedGetAny" (formula "5") (term "0,0,1,0,0,0"))
                     (rule "castedGetAny" (formula "5") (term "0,1,1,0,0,0"))
                      (builtin "One Step Simplification" (formula "5"))
                     (rule "true_left" (formula "5"))
                     (rule "cnf_rightDist" (formula "4") (term "0,0,0"))
                     (rule "distr_forallAnd" (formula "4") (term "0,0"))
                     (rule "distr_forallAnd" (formula "4") (term "0"))
                     (rule "distr_forallAnd" (formula "4"))
                     (rule "andLeft" (formula "4"))
                     (rule "shift_paren_or" (formula "5") (term "0,0,0"))
                      (builtin "One Step Simplification" (formula "5"))
                     (rule "eqSymm" (formula "5") (term "1,1,0,0,0"))
                     (rule "castedGetAny" (formula "5") (term "0,0,0,0,0,0"))
                     (rule "castedGetAny" (formula "5") (term "0,0,1,0,0,0"))
                     (rule "castedGetAny" (formula "5") (term "0,1,1,0,0,0"))
                      (builtin "One Step Simplification" (formula "5"))
                     (rule "true_left" (formula "5"))
                     (rule "cnf_rightDist" (formula "1") (term "0,0,0"))
                     (rule "distr_forallAnd" (formula "1") (term "0,0"))
                     (rule "distr_forallAnd" (formula "1") (term "0"))
                     (rule "distr_forallAnd" (formula "1"))
                     (rule "andLeft" (formula "1"))
                     (rule "cnf_rightDist" (formula "4") (term "0,0,0"))
                     (rule "distr_forallAnd" (formula "4") (term "0,0"))
                     (rule "distr_forallAnd" (formula "4") (term "0"))
                     (rule "distr_forallAnd" (formula "4"))
                     (rule "andLeft" (formula "4"))
                     (rule "cnf_rightDist" (formula "3") (term "0,0,0"))
                     (rule "distr_forallAnd" (formula "3") (term "0,0"))
                     (rule "distr_forallAnd" (formula "3") (term "0"))
                     (rule "distr_forallAnd" (formula "3"))
                     (rule "andLeft" (formula "3"))
                     (rule "shift_paren_or" (formula "2") (term "0,0,0"))
                      (builtin "One Step Simplification" (formula "2"))
                     (rule "eqSymm" (formula "2") (term "1,1,0,0,0"))
                     (rule "castedGetAny" (formula "2") (term "0,0,0,0,0,0"))
                     (rule "castedGetAny" (formula "2") (term "0,0,1,0,0,0"))
                     (rule "castedGetAny" (formula "2") (term "0,1,1,0,0,0"))
                      (builtin "One Step Simplification" (formula "2"))
                     (rule "true_left" (formula "2"))
                     (rule "cnf_rightDist" (formula "4") (term "0,0,0"))
                     (rule "distr_forallAnd" (formula "4") (term "0,0"))
                     (rule "distr_forallAnd" (formula "4") (term "0"))
                     (rule "distr_forallAnd" (formula "4"))
                     (rule "andLeft" (formula "4"))
                     (rule "commute_or_2" (formula "4") (term "0,0,0"))
                      (builtin "One Step Simplification" (formula "4"))
                     (rule "eqSymm" (formula "4") (term "1,0,0,0,0"))
                     (rule "castedGetAny" (formula "4") (term "1,0,0,1,0,0,0"))
                     (rule "castedGetAny" (formula "4") (term "0,0,0,0,0,0"))
                     (rule "castedGetAny" (formula "4") (term "0,1,0,0,0,0"))
                      (builtin "One Step Simplification" (formula "4"))
                     (rule "true_left" (formula "4"))
                     (rule "shift_paren_or" (formula "4") (term "0,0,0"))
                      (builtin "One Step Simplification" (formula "4"))
                     (rule "eqSymm" (formula "4") (term "1,1,0,0,0"))
                     (rule "castedGetAny" (formula "4") (term "1,0,0,0,0,0,0"))
                     (rule "castedGetAny" (formula "4") (term "0,0,1,0,0,0"))
                     (rule "castedGetAny" (formula "4") (term "0,1,1,0,0,0"))
                      (builtin "One Step Simplification" (formula "4"))
                     (rule "true_left" (formula "4"))
                     (rule "cnf_rightDist" (formula "1") (term "0,0,0"))
                     (rule "distr_forallAnd" (formula "1") (term "0,0"))
                     (rule "distr_forallAnd" (formula "1") (term "0"))
                     (rule "distr_forallAnd" (formula "1"))
                     (rule "andLeft" (formula "1"))
                     (rule "cnf_rightDist" (formula "3") (term "0,0,0"))
                     (rule "distr_forallAnd" (formula "3") (term "0,0"))
                     (rule "distr_forallAnd" (formula "3") (term "0"))
                     (rule "distr_forallAnd" (formula "3"))
                     (rule "andLeft" (formula "3"))
                     (rule "cnf_rightDist" (formula "2") (term "0,0,0"))
                     (rule "distr_forallAnd" (formula "2") (term "0,0"))
                     (rule "distr_forallAnd" (formula "2") (term "0"))
                     (rule "distr_forallAnd" (formula "2"))
                     (rule "andLeft" (formula "2"))
                     (rule "commute_or_2" (formula "2") (term "0,0,0"))
                      (builtin "One Step Simplification" (formula "2"))
                     (rule "eqSymm" (formula "2") (term "1,0,0,0,0"))
                     (rule "castedGetAny" (formula "2") (term "1,0,0,1,0,0,0"))
                     (rule "castedGetAny" (formula "2") (term "0,0,0,0,0,0"))
                     (rule "castedGetAny" (formula "2") (term "0,1,0,0,0,0"))
                      (builtin "One Step Simplification" (formula "2"))
                     (rule "true_left" (formula "2"))
                     (rule "shift_paren_or" (formula "1") (term "0,0,0"))
                      (builtin "One Step Simplification" (formula "1"))
                     (rule "eqSymm" (formula "1") (term "1,1,0,0,0"))
                     (rule "castedGetAny" (formula "1") (term "1,0,0,0,0,0,0"))
                     (rule "castedGetAny" (formula "1") (term "0,0,1,0,0,0"))
                     (rule "castedGetAny" (formula "1") (term "0,1,1,0,0,0"))
                      (builtin "One Step Simplification" (formula "1"))
                     (rule "true_left" (formula "1"))
                     (rule "shift_paren_or" (formula "1") (term "0,0,0"))
                      (builtin "One Step Simplification" (formula "1"))
                     (rule "eqSymm" (formula "1") (term "1,1,0,0,0"))
                     (rule "castedGetAny" (formula "1") (term "1,0,0,0,0,0,0"))
                     (rule "castedGetAny" (formula "1") (term "0,0,1,0,0,0"))
                     (rule "castedGetAny" (formula "1") (term "0,1,1,0,0,0"))
                      (builtin "One Step Simplification" (formula "1"))
                     (rule "true_left" (formula "1"))
                     (rule "ifthenelse_split_for" (formula "27") (term "1,1"))
                     (branch "result_228_A_1.value@heapAtPre_A«anonHeapFunction» ≥ 0 TRUE"
                        (rule "cnf_rightDist" (formula "28"))
                        (rule "andLeft" (formula "28"))
                        (rule "commute_or" (formula "29"))
                        (rule "cnf_rightDist" (formula "28"))
                        (rule "andLeft" (formula "28"))
                        (rule "commute_or" (formula "29"))
                        (rule "cnf_rightDist" (formula "1") (term "0,0,0"))
                        (rule "distr_forallAnd" (formula "1") (term "0,0"))
                        (rule "distr_forallAnd" (formula "1") (term "0"))
                        (rule "distr_forallAnd" (formula "1"))
                        (rule "andLeft" (formula "1"))
                        (rule "commute_or_2" (formula "1") (term "0,0,0"))
                         (builtin "One Step Simplification" (formula "1"))
                        (rule "eqSymm" (formula "1") (term "1,0,0,0,0"))
                        (rule "castedGetAny" (formula "1") (term "0,0,0,0,0,0"))
                        (rule "castedGetAny" (formula "1") (term "1,0,0,1,0,0,0"))
                        (rule "castedGetAny" (formula "1") (term "0,1,0,0,0,0"))
                         (builtin "One Step Simplification" (formula "1"))
                        (rule "true_left" (formula "1"))
                        (rule "shift_paren_or" (formula "1") (term "0,0,0"))
                         (builtin "One Step Simplification" (formula "1"))
                        (rule "eqSymm" (formula "1") (term "1,1,0,0,0"))
                        (rule "castedGetAny" (formula "1") (term "1,0,0,0,0,0,0"))
                        (rule "castedGetAny" (formula "1") (term "0,0,1,0,0,0"))
                        (rule "castedGetAny" (formula "1") (term "0,1,1,0,0,0"))
                         (builtin "One Step Simplification" (formula "1"))
                        (rule "true_left" (formula "1"))
                        (rule "cut_direct" (formula "27") (term "0"))
                        (branch "CUT: result_228_A_1.value@heapAtPre_A«anonHeapFunction» = 0 TRUE"
                            (builtin "One Step Simplification" (formula "28"))
                           (rule "true_left" (formula "28"))
                           (rule "replace_known_left" (formula "29") (term "0") (ifseqformula "27"))
                            (builtin "One Step Simplification" (formula "29"))
                           (rule "true_left" (formula "29"))
                           (rule "replace_known_left" (formula "28") (term "0") (ifseqformula "27"))
                            (builtin "One Step Simplification" (formula "28"))
                           (rule "true_left" (formula "28"))
                           (rule "applyEq" (formula "28") (term "1,0") (ifseqformula "27"))
                           (rule "eqSymm" (formula "28"))
                           (rule "polySimp_homoEq" (formula "28"))
                           (rule "polySimp_mulLiterals" (formula "28") (term "1,0"))
                           (rule "polySimp_elimOne" (formula "28") (term "1,0"))
                           (rule "applyEq" (formula "26") (term "0") (ifseqformula "27"))
                           (rule "qeq_literals" (formula "26"))
                           (rule "true_left" (formula "26"))
                           (rule "applyEq" (formula "28") (term "1,0,0") (ifseqformula "26"))
                           (rule "polySimp_mulComm0" (formula "28") (term "0"))
                           (rule "applyEq" (formula "22") (term "1") (ifseqformula "26"))
                           (rule "applyEq" (formula "55") (term "1") (ifseqformula "26"))
                           (rule "applyEq" (formula "6") (term "1") (ifseqformula "26"))
                           (rule "applyEq" (formula "27") (term "1,1,0") (ifseqformula "26"))
                           (rule "polySimp_addComm0" (formula "27") (term "0"))
                           (rule "applyEq" (formula "28") (term "0,0") (ifseqformula "26"))
                           (rule "times_zero_2" (formula "28") (term "0"))
                           (rule "polySimp_homoEq" (formula "28"))
                           (rule "mul_literals" (formula "28") (term "1,0"))
                           (rule "add_zero_right" (formula "28") (term "0"))
                           (rule "polySimp_sepPosMonomial" (formula "27"))
                           (rule "polySimp_sepPosMonomial" (formula "28"))
                           (rule "polySimp_mulLiterals" (formula "28") (term "1"))
                           (rule "polySimp_elimOne" (formula "28") (term "1"))
                           (rule "applyEq" (formula "64") (term "1") (ifseqformula "28"))
                           (rule "jdiv_axiom" (formula "27") (term "0"))
                           (rule "eqSymm" (formula "27"))
                           (rule "applyEq" (formula "27") (term "1") (ifseqformula "28"))
                            (builtin "One Step Simplification" (formula "27"))
                           (rule "eqSymm" (formula "27") (term "1"))
                           (rule "polySimp_homoEq" (formula "27") (term "1"))
                           (rule "polySimp_mulLiterals" (formula "27") (term "1,0,1"))
                           (rule "polySimp_elimOne" (formula "27") (term "1,0,1"))
                           (rule "polySimp_sepPosMonomial" (formula "27") (term "1"))
                           (rule "inEqSimp_contradInEq0" (formula "27") (term "0,0") (ifseqformula "3"))
                           (rule "qeq_literals" (formula "27") (term "0,0,0"))
                            (builtin "One Step Simplification" (formula "27"))
                           (rule "true_left" (formula "27"))
                           (rule "div_axiom" (formula "27") (term "0,1") (inst "quotient=quotient_1"))
                            (builtin "One Step Simplification" (formula "27"))
                           (rule "true_left" (formula "27"))
                           (rule "Use_information_flow_contract_for_compareTo_325434207" (formula "18") (ifseqformula "18"))
                            (builtin "One Step Simplification" (formula "18") (ifInst ""  (formula "91")) (ifInst ""  (formula "91")))
                           (rule "true_left" (formula "18"))
                           (rule "Use_information_flow_contract_for_getOrder_757678341" (formula "57") (ifseqformula "24"))
                           (rule "applyEq" (formula "57") (term "0,0,1") (ifseqformula "55"))
                           (rule "eqSymm" (formula "57") (term "0,1"))
                           (rule "replace_known_left" (formula "57") (term "0,1") (ifseqformula "22"))
                            (builtin "One Step Simplification" (formula "57"))
                           (rule "applyEq" (formula "57") (term "0,1") (ifseqformula "6"))
                           (rule "eqSymm" (formula "57") (term "1"))
                           (rule "replace_known_left" (formula "57") (term "1") (ifseqformula "26"))
                            (builtin "One Step Simplification" (formula "57"))
                           (rule "true_left" (formula "57"))
                           (rule "Use_information_flow_contract_for_multiply_1272441881_0" (formula "70") (ifseqformula "34"))
                           (rule "replaceKnownSelect_taclet21_11" (formula "70") (term "1,1,1"))
                           (rule "replaceKnownSelect_taclet21_12" (formula "70") (term "0,1,1"))
                           (rule "replaceKnownAuxiliaryConstant_taclet00021_17" (formula "70") (term "1,1,1"))
                           (rule "replaceKnownAuxiliaryConstant_taclet1100021_19" (formula "70") (term "0,1,1"))
                           (rule "replaceKnownSelect_taclet21_8" (formula "70") (term "1,1,0,1"))
                           (rule "replaceKnownSelect_taclet21_9" (formula "70") (term "0,1,0,1"))
                           (rule "replaceKnownAuxiliaryConstant_taclet21_10" (formula "70") (term "1,1,0,1"))
                            (builtin "One Step Simplification" (formula "70") (ifInst ""  (formula "82")) (ifInst ""  (formula "81")))
                           (rule "eqSymm" (formula "70") (term "1,1"))
                           (rule "replace_known_right" (formula "70") (term "1,1") (ifseqformula "99"))
                            (builtin "One Step Simplification" (formula "70"))
                           (rule "pullOutSelect" (formula "70") (term "1,0,1") (inst "selectSK=org_bouncycastle_math_ec_ECPoint_value_4"))
                           (rule "simplifySelectOfAnonEQ" (formula "70") (ifseqformula "25"))
                            (builtin "One Step Simplification" (formula "70") (ifInst ""  (formula "96")) (ifInst ""  (formula "13")))
                           (rule "applyEqReverse" (formula "71") (term "1,0,1") (ifseqformula "70"))
                           (rule "hideAuxiliaryEq" (formula "70"))
                           (rule "pullOutSelect" (formula "70") (term "0,0,1") (inst "selectSK=org_bouncycastle_math_ec_ECPoint_value_5"))
                           (rule "simplifySelectOfAnonEQ" (formula "70") (ifseqformula "59"))
                            (builtin "One Step Simplification" (formula "70") (ifInst ""  (formula "97")) (ifInst ""  (formula "46")))
                           (rule "applyEqReverse" (formula "71") (term "0,0,1") (ifseqformula "70"))
                           (rule "hideAuxiliaryEq" (formula "70"))
                           (rule "replace_known_left" (formula "70") (term "0,1") (ifseqformula "4"))
                            (builtin "One Step Simplification" (formula "70"))
                           (rule "notLeft" (formula "70"))
                           (rule "Class_invariant_axiom_for_org_bouncycastle_math_ec_ECPoint" (formula "76") (term "1"))
                            (builtin "One Step Simplification" (formula "76"))
                           (rule "Class_invariant_axiom_for_org_bouncycastle_math_ec_ECPoint" (formula "76"))
                           (rule "closeTrue" (formula "76"))
                        )
                        (branch "CUT: result_228_A_1.value@heapAtPre_A«anonHeapFunction» = 0 FALSE"
                            (builtin "One Step Simplification" (formula "27"))
                           (rule "replace_known_right" (formula "28") (term "0") (ifseqformula "79"))
                            (builtin "One Step Simplification" (formula "28"))
                           (rule "replace_known_right" (formula "29") (term "0") (ifseqformula "79"))
                            (builtin "One Step Simplification" (formula "29"))
                           (rule "applyEq" (formula "31") (term "0,0") (ifseqformula "28"))
                           (rule "polySimp_mulComm0" (formula "31") (term "0"))
                           (rule "applyEq" (formula "29") (term "0") (ifseqformula "31"))
                           (rule "inEqSimp_homoInEq1" (formula "29"))
                           (rule "polySimp_mulComm0" (formula "29") (term "1,0"))
                           (rule "polySimp_rightDist" (formula "29") (term "1,0"))
                           (rule "polySimp_mulAssoc" (formula "29") (term "0,1,0"))
                           (rule "polySimp_mulComm0" (formula "29") (term "0,0,1,0"))
                           (rule "polySimp_mulLiterals" (formula "29") (term "0,1,0"))
                           (rule "polySimp_elimOne" (formula "29") (term "0,1,0"))
                           (rule "polySimp_addAssoc" (formula "29") (term "0"))
                           (rule "polySimp_addComm1" (formula "29") (term "0,0"))
                           (rule "polySimp_pullOutFactor2b" (formula "29") (term "0,0,0"))
                           (rule "add_literals" (formula "29") (term "1,1,0,0,0"))
                           (rule "times_zero_1" (formula "29") (term "1,0,0,0"))
                           (rule "add_zero_right" (formula "29") (term "0,0,0"))
                           (rule "applyEq" (formula "27") (term "0") (ifseqformula "31"))
                           (rule "inEqSimp_homoInEq0" (formula "27"))
                           (rule "polySimp_mulComm0" (formula "27") (term "1,0"))
                           (rule "polySimp_rightDist" (formula "27") (term "1,0"))
                           (rule "polySimp_mulAssoc" (formula "27") (term "0,1,0"))
                           (rule "polySimp_mulComm0" (formula "27") (term "0,0,1,0"))
                           (rule "polySimp_mulLiterals" (formula "27") (term "0,1,0"))
                           (rule "polySimp_elimOne" (formula "27") (term "0,1,0"))
                           (rule "polySimp_addAssoc" (formula "27") (term "0"))
                           (rule "polySimp_pullOutFactor2" (formula "27") (term "0,0"))
                           (rule "add_literals" (formula "27") (term "1,0,0"))
                           (rule "times_zero_1" (formula "27") (term "0,0"))
                           (rule "add_zero_left" (formula "27") (term "0"))
                           (rule "applyEq" (formula "30") (term "0,1") (ifseqformula "28"))
                           (rule "inEqSimp_sepNegMonomial0" (formula "29"))
                           (rule "polySimp_mulLiterals" (formula "29") (term "0"))
                           (rule "polySimp_elimOne" (formula "29") (term "0"))
                           (rule "inEqSimp_invertInEq1" (formula "27"))
                           (rule "polySimp_mulLiterals" (formula "27") (term "0"))
                           (rule "mul_literals" (formula "27") (term "1"))
                           (rule "polySimp_elimOne" (formula "27") (term "0"))
                           (rule "inEqSimp_strengthen1" (formula "26") (ifseqformula "79"))
                           (rule "add_literals" (formula "26") (term "1"))
                           (rule "inEqSimp_contradEq7" (formula "79") (ifseqformula "26"))
                           (rule "times_zero_1" (formula "79") (term "1,0,0"))
                           (rule "add_literals" (formula "79") (term "0,0"))
                           (rule "leq_literals" (formula "79") (term "0"))
                            (builtin "One Step Simplification" (formula "79"))
                           (rule "false_right" (formula "79"))
                           (rule "inEqSimp_exactShadow3" (formula "29") (ifseqformula "27"))
                           (rule "add_zero_right" (formula "29") (term "0"))
                           (rule "polySimp_rightDist" (formula "29") (term "0"))
                           (rule "polySimp_mulLiterals" (formula "29") (term "1,0"))
                           (rule "mul_literals" (formula "29") (term "0,0"))
                           (rule "polySimp_elimOne" (formula "29") (term "1,0"))
                           (rule "inEqSimp_sepPosMonomial1" (formula "29"))
                           (rule "mul_literals" (formula "29") (term "1"))
                           (rule "Use_information_flow_contract_for_compareTo_325434207" (formula "18") (ifseqformula "18"))
                            (builtin "One Step Simplification" (formula "18") (ifInst ""  (formula "94")) (ifInst ""  (formula "94")))
                           (rule "true_left" (formula "18"))
                           (rule "Use_information_flow_contract_for_getOrder_757678341" (formula "60") (ifseqformula "24"))
                           (rule "replace_known_left" (formula "60") (term "1,1") (ifseqformula "6"))
                            (builtin "One Step Simplification" (formula "60"))
                           (rule "true_left" (formula "60"))
                           (rule "Use_information_flow_contract_for_multiply_1272441881" (formula "73") (ifseqformula "37"))
                           (rule "replaceKnownSelect_taclet21_12" (formula "73") (term "0,1,1"))
                           (rule "replaceKnownSelect_taclet21_11" (formula "73") (term "1,1,1"))
                           (rule "replaceKnownAuxiliaryConstant_taclet1100021_19" (formula "73") (term "0,1,1"))
                           (rule "replaceKnownAuxiliaryConstant_taclet00021_17" (formula "73") (term "1,1,1"))
                           (rule "replaceKnownSelect_taclet21_9" (formula "73") (term "0,1,0,1"))
                           (rule "replaceKnownSelect_taclet21_8" (formula "73") (term "1,1,0,1"))
                           (rule "replaceKnownAuxiliaryConstant_taclet021_15" (formula "73") (term "0,1,0,1"))
                           (rule "replaceKnownAuxiliaryConstant_taclet21_10" (formula "73") (term "1,1,0,1"))
                           (rule "replaceKnownAuxiliaryConstant_taclet021_15" (formula "73") (term "1,1,0,1"))
                            (builtin "One Step Simplification" (formula "73") (ifInst ""  (formula "85")) (ifInst ""  (formula "84")))
                           (rule "eqSymm" (formula "73") (term "1,1"))
                           (rule "replace_known_right" (formula "73") (term "1,1") (ifseqformula "102"))
                            (builtin "One Step Simplification" (formula "73"))
                           (rule "pullOutSelect" (formula "73") (term "0,0,1") (inst "selectSK=org_bouncycastle_math_ec_ECPoint_value_4"))
                           (rule "simplifySelectOfAnonEQ" (formula "73") (ifseqformula "62"))
                            (builtin "One Step Simplification" (formula "73") (ifInst ""  (formula "100")) (ifInst ""  (formula "49")))
                           (rule "applyEqReverse" (formula "74") (term "0,0,1") (ifseqformula "73"))
                           (rule "hideAuxiliaryEq" (formula "73"))
                           (rule "eqSymm" (formula "73") (term "0,1"))
                           (rule "applyEq" (formula "73") (term "1,0,1") (ifseqformula "4"))
                           (rule "pullOutSelect" (formula "73") (term "0,0,1") (inst "selectSK=org_bouncycastle_math_ec_ECPoint_value_5"))
                           (rule "simplifySelectOfAnonEQ" (formula "73") (ifseqformula "25"))
                            (builtin "One Step Simplification" (formula "73") (ifInst ""  (formula "99")) (ifInst ""  (formula "13")))
                           (rule "applyEqReverse" (formula "74") (term "0,0,1") (ifseqformula "73"))
                            (builtin "One Step Simplification" (formula "74"))
                           (rule "notLeft" (formula "74"))
                           (rule "hideAuxiliaryEq" (formula "73"))
                           (rule "Class_invariant_axiom_for_org_bouncycastle_math_ec_ECPoint" (formula "79") (term "1"))
                            (builtin "One Step Simplification" (formula "79"))
                           (rule "Class_invariant_axiom_for_org_bouncycastle_math_ec_ECPoint" (formula "79"))
                           (rule "closeTrue" (formula "79"))
                        )
                     )
                     (branch "result_228_A_1.value@heapAtPre_A«anonHeapFunction» ≥ 0 FALSE"
                        (rule "inEqSimp_geqRight" (formula "77"))
                        (rule "times_zero_1" (formula "1") (term "1,0,0"))
                        (rule "add_zero_right" (formula "1") (term "0,0"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "1"))
                        (rule "mul_literals" (formula "1") (term "1"))
                        (rule "inEqSimp_contradEq3" (formula "28") (term "0") (ifseqformula "1"))
                        (rule "times_zero_1" (formula "28") (term "1,0,0,0"))
                        (rule "add_zero_right" (formula "28") (term "0,0,0"))
                        (rule "qeq_literals" (formula "28") (term "0,0"))
                         (builtin "One Step Simplification" (formula "28"))
                        (rule "andLeft" (formula "28"))
                        (rule "andLeft" (formula "28"))
                        (rule "applyEq" (formula "32") (term "0,0") (ifseqformula "29"))
                        (rule "polySimp_mulComm0" (formula "32") (term "0"))
                        (rule "applyEq" (formula "28") (term "0") (ifseqformula "32"))
                        (rule "inEqSimp_homoInEq0" (formula "28"))
                        (rule "polySimp_mulComm0" (formula "28") (term "1,0"))
                        (rule "polySimp_rightDist" (formula "28") (term "1,0"))
                        (rule "polySimp_mulAssoc" (formula "28") (term "0,1,0"))
                        (rule "polySimp_mulComm0" (formula "28") (term "0,0,1,0"))
                        (rule "polySimp_mulLiterals" (formula "28") (term "0,1,0"))
                        (rule "polySimp_elimOne" (formula "28") (term "0,1,0"))
                        (rule "polySimp_addAssoc" (formula "28") (term "0"))
                        (rule "polySimp_pullOutFactor2" (formula "28") (term "0,0"))
                        (rule "add_literals" (formula "28") (term "1,0,0"))
                        (rule "times_zero_1" (formula "28") (term "0,0"))
                        (rule "add_zero_left" (formula "28") (term "0"))
                        (rule "applyEq" (formula "30") (term "0") (ifseqformula "32"))
                        (rule "inEqSimp_homoInEq1" (formula "30"))
                        (rule "polySimp_mulComm0" (formula "30") (term "1,0"))
                        (rule "polySimp_rightDist" (formula "30") (term "1,0"))
                        (rule "polySimp_mulAssoc" (formula "30") (term "0,1,0"))
                        (rule "polySimp_mulComm0" (formula "30") (term "0,0,1,0"))
                        (rule "polySimp_mulLiterals" (formula "30") (term "0,1,0"))
                        (rule "polySimp_elimOne" (formula "30") (term "0,1,0"))
                        (rule "polySimp_addAssoc" (formula "30") (term "0"))
                        (rule "polySimp_addComm1" (formula "30") (term "0,0"))
                        (rule "polySimp_pullOutFactor2b" (formula "30") (term "0,0,0"))
                        (rule "add_literals" (formula "30") (term "1,1,0,0,0"))
                        (rule "times_zero_1" (formula "30") (term "1,0,0,0"))
                        (rule "add_zero_right" (formula "30") (term "0,0,0"))
                        (rule "applyEq" (formula "31") (term "0,1") (ifseqformula "29"))
                        (rule "inEqSimp_invertInEq1" (formula "28"))
                        (rule "polySimp_mulLiterals" (formula "28") (term "0"))
                        (rule "mul_literals" (formula "28") (term "1"))
                        (rule "polySimp_elimOne" (formula "28") (term "0"))
                        (rule "inEqSimp_sepNegMonomial0" (formula "30"))
                        (rule "polySimp_mulLiterals" (formula "30") (term "0"))
                        (rule "polySimp_elimOne" (formula "30") (term "0"))
                        (rule "inEqSimp_exactShadow3" (formula "30") (ifseqformula "28"))
                        (rule "add_zero_right" (formula "30") (term "0"))
                        (rule "polySimp_rightDist" (formula "30") (term "0"))
                        (rule "mul_literals" (formula "30") (term "0,0"))
                        (rule "inEqSimp_sepNegMonomial1" (formula "30"))
                        (rule "polySimp_mulLiterals" (formula "30") (term "0"))
                        (rule "polySimp_elimOne" (formula "30") (term "0"))
                        (rule "cnf_rightDist" (formula "2") (term "0,0,0"))
                        (rule "distr_forallAnd" (formula "2") (term "0,0"))
                        (rule "distr_forallAnd" (formula "2") (term "0"))
                        (rule "distr_forallAnd" (formula "2"))
                        (rule "andLeft" (formula "2"))
                        (rule "commute_or_2" (formula "2") (term "0,0,0"))
                         (builtin "One Step Simplification" (formula "2"))
                        (rule "eqSymm" (formula "2") (term "1,0,0,0,0"))
                        (rule "castedGetAny" (formula "2") (term "0,0,0,0,0,0"))
                        (rule "castedGetAny" (formula "2") (term "1,0,0,1,0,0,0"))
                        (rule "castedGetAny" (formula "2") (term "0,1,0,0,0,0"))
                         (builtin "One Step Simplification" (formula "2"))
                        (rule "true_left" (formula "2"))
                        (rule "shift_paren_or" (formula "2") (term "0,0,0"))
                         (builtin "One Step Simplification" (formula "2"))
                        (rule "eqSymm" (formula "2") (term "1,1,0,0,0"))
                        (rule "castedGetAny" (formula "2") (term "1,0,0,0,0,0,0"))
                        (rule "castedGetAny" (formula "2") (term "0,0,1,0,0,0"))
                        (rule "castedGetAny" (formula "2") (term "0,1,1,0,0,0"))
                         (builtin "One Step Simplification" (formula "2"))
                        (rule "true_left" (formula "2"))
                        (rule "Use_information_flow_contract_for_compareTo_325434207" (formula "19") (ifseqformula "19"))
                         (builtin "One Step Simplification" (formula "19") (ifInst ""  (formula "94")) (ifInst ""  (formula "94")))
                        (rule "true_left" (formula "19"))
                        (rule "Use_information_flow_contract_for_getOrder_757678341" (formula "60") (ifseqformula "25"))
                        (rule "replace_known_left" (formula "60") (term "1,1") (ifseqformula "7"))
                         (builtin "One Step Simplification" (formula "60"))
                        (rule "true_left" (formula "60"))
                        (rule "Use_information_flow_contract_for_getOrder_757678341" (formula "60") (ifseqformula "60"))
                         (builtin "One Step Simplification" (formula "60"))
                        (rule "true_left" (formula "60"))
                        (rule "Use_information_flow_contract_for_compareTo_325434207" (formula "54") (ifseqformula "19"))
                        (rule "replace_known_left" (formula "54") (term "0,0,1") (ifseqformula "6"))
                         (builtin "One Step Simplification" (formula "54") (ifInst ""  (formula "95")) (ifInst ""  (formula "94")))
                        (rule "applyEqRigid" (formula "54") (term "0,0,1") (ifseqformula "56"))
                        (rule "eqSymm" (formula "54") (term "0,1"))
                        (rule "replace_known_left" (formula "54") (term "0,1") (ifseqformula "20"))
                         (builtin "One Step Simplification" (formula "54"))
                        (rule "Class_invariant_axiom_for_java_math_BigInteger" (formula "54") (term "1,0"))
                        (rule "replace_known_right" (formula "54") (term "0,0,1,0") (ifseqformula "94"))
                         (builtin "One Step Simplification" (formula "54") (ifInst ""  (formula "20")))
                        (rule "Class_invariant_axiom_for_java_math_BigInteger" (formula "54") (term "0"))
                        (rule "replace_known_left" (formula "54") (term "1,0") (ifseqformula "56"))
                         (builtin "One Step Simplification" (formula "54") (ifInst ""  (formula "95")))
                        (rule "applyEq" (formula "55") (term "4") (ifseqformula "54"))
                        (rule "applyEq" (formula "46") (term "0") (ifseqformula "54"))
                        (rule "applyEq" (formula "52") (term "0") (ifseqformula "53"))
                        (rule "Use_information_flow_contract_for_getOrder_757678341" (formula "25") (ifseqformula "25"))
                         (builtin "One Step Simplification" (formula "25"))
                        (rule "true_left" (formula "25"))
                        (rule "Use_information_flow_contract_for_getOrder_757678341" (formula "25") (ifseqformula "59"))
                        (rule "eqSymm" (formula "25") (term "1,1"))
                        (rule "eqSymm" (formula "25") (term "0,1"))
                        (rule "replace_known_left" (formula "25") (term "1,1") (ifseqformula "7"))
                         (builtin "One Step Simplification" (formula "25"))
                        (rule "true_left" (formula "25"))
                        (rule "Use_information_flow_contract_for_multiply_1272441881_0" (formula "72") (ifseqformula "37"))
                        (rule "replaceKnownSelect_taclet21_12" (formula "72") (term "0,1,1"))
                        (rule "replaceKnownSelect_taclet21_11" (formula "72") (term "1,1,1"))
                        (rule "replaceKnownAuxiliaryConstant_taclet1100021_19" (formula "72") (term "0,1,1"))
                        (rule "replaceKnownAuxiliaryConstant_taclet00021_17" (formula "72") (term "1,1,1"))
                        (rule "replaceKnownSelect_taclet21_8" (formula "72") (term "1,1,0,1"))
                        (rule "replaceKnownSelect_taclet21_9" (formula "72") (term "0,1,0,1"))
                        (rule "replaceKnownAuxiliaryConstant_taclet21_10" (formula "72") (term "1,1,0,1"))
                         (builtin "One Step Simplification" (formula "72") (ifInst ""  (formula "84")) (ifInst ""  (formula "83")))
                        (rule "eqSymm" (formula "72") (term "1,1"))
                        (rule "replace_known_right" (formula "72") (term "1,1") (ifseqformula "101"))
                         (builtin "One Step Simplification" (formula "72"))
                        (rule "pullOutSelect" (formula "72") (term "1,0,1") (inst "selectSK=org_bouncycastle_math_ec_ECPoint_value_4"))
                        (rule "simplifySelectOfAnonEQ" (formula "72") (ifseqformula "26"))
                         (builtin "One Step Simplification" (formula "72") (ifInst ""  (formula "98")) (ifInst ""  (formula "14")))
                        (rule "applyEqReverse" (formula "73") (term "1,0,1") (ifseqformula "72"))
                        (rule "hideAuxiliaryEq" (formula "72"))
                        (rule "pullOutSelect" (formula "72") (term "0,0,1") (inst "selectSK=org_bouncycastle_math_ec_ECPoint_value_5"))
                        (rule "simplifySelectOfAnonEQ" (formula "72") (ifseqformula "61"))
                         (builtin "One Step Simplification" (formula "72") (ifInst ""  (formula "99")) (ifInst ""  (formula "48")))
                        (rule "applyEqReverse" (formula "73") (term "0,0,1") (ifseqformula "72"))
                        (rule "hideAuxiliaryEq" (formula "72"))
                        (rule "replace_known_left" (formula "72") (term "0,1") (ifseqformula "5"))
                         (builtin "One Step Simplification" (formula "72"))
                        (rule "notLeft" (formula "72"))
                        (rule "Class_invariant_axiom_for_org_bouncycastle_math_ec_ECPoint" (formula "78") (term "1"))
                         (builtin "One Step Simplification" (formula "78"))
                        (rule "Class_invariant_axiom_for_org_bouncycastle_math_ec_ECPoint" (formula "78"))
                        (rule "closeTrue" (formula "78"))
                     )
                  )
               )
            )
            (branch " resultAtPost_226_A.<created>@heapAtPre_A«anonHeapFunction» = TRUE FALSE"
               (rule "applyEqReverse" (formula "4") (term "1,0") (ifseqformula "3"))
               (rule "hideAuxiliaryEq" (formula "3"))
               (rule "replace_known_right" (formula "3") (term "1,0,0") (ifseqformula "77"))
                (builtin "One Step Simplification" (formula "3"))
               (rule "replace_known_right" (formula "34") (term "1") (ifseqformula "77"))
                (builtin "One Step Simplification" (formula "34"))
               (rule "ifthenelse_split" (formula "1") (term "0"))
               (branch " resultAtPost_226_B.<created>@heapAtPre_B«anonHeapFunction» = TRUE TRUE"
                  (rule "applyEqReverse" (formula "3") (term "1,0") (ifseqformula "2"))
                  (rule "hideAuxiliaryEq" (formula "2"))
                  (rule "replace_known_left" (formula "2") (term "1,0,0") (ifseqformula "1"))
                   (builtin "One Step Simplification" (formula "2"))
                  (rule "applyEqReverse" (formula "98") (term "0") (ifseqformula "2"))
                  (rule "hideAuxiliaryEq" (formula "2"))
                  (rule "replace_known_left" (formula "69") (term "1") (ifseqformula "1"))
                   (builtin "One Step Simplification" (formula "69"))
                  (rule "true_left" (formula "69"))
                  (rule "Class_axiom_0_in_de_polyas_core3_open_cred_CredTool" (inst "seq=seq") (inst "i=i") (inst "str=str") (inst "seq_0=seq_0") (inst "i_0=i_0") (inst "sv_heap=heapAtPre_B<<anonHeapFunction>>"))
                  (rule "andLeft" (formula "1"))
                  (rule "castedGetAny" (formula "1") (term "0,0,0,0,0"))
                  (rule "castedGetAny" (formula "1") (term "0,0,1,0,0"))
                  (rule "castedGetAny" (formula "2") (term "0,1,1,0,0,0"))
                  (rule "nnf_imp2or" (formula "1") (term "0,0"))
                   (builtin "One Step Simplification" (formula "1"))
                  (rule "nnf_imp2or" (formula "2") (term "0,0,0"))
                  (rule "nnf_notAnd" (formula "2") (term "0,0,0,0"))
                   (builtin "One Step Simplification" (formula "2"))
                  (rule "nnf_imp2or" (formula "2") (term "1,0,0,0"))
                  (rule "nnf_notOr" (formula "2") (term "0,0,0,0,0"))
                  (rule "nnf_notAnd" (formula "2") (term "0,1,0,0,0"))
                   (builtin "One Step Simplification" (formula "2"))
                  (rule "commute_or" (formula "2") (term "0,0,0,0"))
                  (rule "commute_or_2" (formula "2") (term "0,0,0"))
                  (rule "shift_paren_or" (formula "2") (term "0,0,0,0"))
                  (rule "commute_and" (formula "2") (term "1,0,0,0"))
                  (rule "shift_paren_or" (formula "2") (term "0,0,0,0,0"))
                  (rule "commute_or_2" (formula "2") (term "0,0,0,0,0"))
                   (builtin "One Step Simplification" (formula "2"))
                  (rule "commute_or_2" (formula "2") (term "0,0,0,0"))
                  (rule "cnf_rightDist" (formula "2") (term "0,0,0"))
                  (rule "distr_forallAnd" (formula "2") (term "0,0"))
                  (rule "distr_forallAnd" (formula "2") (term "0"))
                  (rule "distr_forallAnd" (formula "2"))
                  (rule "andLeft" (formula "2"))
                  (rule "commute_or_2" (formula "2") (term "0,0,0"))
                   (builtin "One Step Simplification" (formula "2"))
                  (rule "eqSymm" (formula "2") (term "1,0,0,0,0"))
                  (rule "castedGetAny" (formula "2") (term "1,0,0,1,0,0,0"))
                  (rule "castedGetAny" (formula "2") (term "0,0,0,0,0,0"))
                  (rule "castedGetAny" (formula "2") (term "0,1,0,0,0,0"))
                   (builtin "One Step Simplification" (formula "2"))
                  (rule "true_left" (formula "2"))
                  (rule "shift_paren_or" (formula "2") (term "0,0,0"))
                   (builtin "One Step Simplification" (formula "2"))
                  (rule "eqSymm" (formula "2") (term "1,1,0,0,0"))
                  (rule "castedGetAny" (formula "2") (term "0,0,1,0,0,0"))
                  (rule "castedGetAny" (formula "2") (term "0,0,0,0,0,0"))
                  (rule "castedGetAny" (formula "2") (term "0,1,1,0,0,0"))
                   (builtin "One Step Simplification" (formula "2"))
                  (rule "true_left" (formula "2"))
                  (rule "Class_axiom_0_in_de_polyas_core3_open_cred_CredTool" (inst "seq=seq") (inst "i=i") (inst "str=str") (inst "seq_0=seq_0") (inst "i_0=i_0") (inst "sv_heap=anon_heap_mod<<anonHeapFunction>>"))
                  (rule "andLeft" (formula "1"))
                  (rule "castedGetAny" (formula "1") (term "0,0,0,0,0"))
                  (rule "castedGetAny" (formula "1") (term "0,0,1,0,0"))
                  (rule "castedGetAny" (formula "2") (term "0,1,1,0,0,0"))
                  (rule "nnf_imp2or" (formula "1") (term "0,0"))
                   (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "3")))
                  (rule "true_left" (formula "1"))
                  (rule "nnf_imp2or" (formula "1") (term "0,0,0"))
                  (rule "nnf_imp2or" (formula "1") (term "1,0,0,0"))
                  (rule "nnf_notAnd" (formula "1") (term "0,0,0,0"))
                   (builtin "One Step Simplification" (formula "1"))
                  (rule "nnf_notAnd" (formula "1") (term "0,1,0,0,0"))
                   (builtin "One Step Simplification" (formula "1"))
                  (rule "nnf_notOr" (formula "1") (term "0,0,0,0,0"))
                  (rule "commute_or" (formula "1") (term "0,0,0,0"))
                  (rule "commute_or_2" (formula "1") (term "0,0,0"))
                  (rule "shift_paren_or" (formula "1") (term "0,0,0,0"))
                  (rule "commute_and" (formula "1") (term "1,0,0,0"))
                  (rule "shift_paren_or" (formula "1") (term "0,0,0,0,0"))
                  (rule "commute_or_2" (formula "1") (term "0,0,0,0,0"))
                   (builtin "One Step Simplification" (formula "1"))
                  (rule "commute_or_2" (formula "1") (term "0,0,0,0"))
                  (rule "cnf_rightDist" (formula "1") (term "0,0,0"))
                  (rule "distr_forallAnd" (formula "1") (term "0,0"))
                  (rule "distr_forallAnd" (formula "1") (term "0"))
                  (rule "distr_forallAnd" (formula "1"))
                  (rule "andLeft" (formula "1"))
                  (rule "commute_or_2" (formula "1") (term "0,0,0"))
                   (builtin "One Step Simplification" (formula "1"))
                  (rule "eqSymm" (formula "1") (term "1,0,0,0,0"))
                  (rule "castedGetAny" (formula "1") (term "1,0,0,1,0,0,0"))
                  (rule "castedGetAny" (formula "1") (term "0,0,0,0,0,0"))
                  (rule "castedGetAny" (formula "1") (term "0,1,0,0,0,0"))
                   (builtin "One Step Simplification" (formula "1"))
                  (rule "true_left" (formula "1"))
                  (rule "shift_paren_or" (formula "1") (term "0,0,0"))
                   (builtin "One Step Simplification" (formula "1"))
                  (rule "eqSymm" (formula "1") (term "1,1,0,0,0"))
                  (rule "castedGetAny" (formula "1") (term "0,0,1,0,0,0"))
                  (rule "castedGetAny" (formula "1") (term "0,0,0,0,0,0"))
                  (rule "castedGetAny" (formula "1") (term "0,1,1,0,0,0"))
                   (builtin "One Step Simplification" (formula "1"))
                  (rule "true_left" (formula "1"))
                  (rule "Class_axiom_0_in_de_polyas_core3_open_cred_CredTool" (inst "seq=seq") (inst "i=i") (inst "str=str") (inst "seq_0=seq_0") (inst "i_0=i_0") (inst "sv_heap=anon_heap_multiply<<anonHeapFunction>>"))
                  (rule "andLeft" (formula "1"))
                  (rule "castedGetAny" (formula "1") (term "0,0,0,0,0"))
                  (rule "castedGetAny" (formula "1") (term "0,0,1,0,0"))
                  (rule "castedGetAny" (formula "2") (term "0,1,1,0,0,0"))
                  (rule "nnf_imp2or" (formula "1") (term "0,0"))
                   (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "3")))
                  (rule "true_left" (formula "1"))
                  (rule "nnf_imp2or" (formula "1") (term "0,0,0"))
                  (rule "nnf_imp2or" (formula "1") (term "1,0,0,0"))
                  (rule "nnf_notAnd" (formula "1") (term "0,0,0,0"))
                   (builtin "One Step Simplification" (formula "1"))
                  (rule "nnf_notOr" (formula "1") (term "0,0,0,0,0"))
                  (rule "nnf_notAnd" (formula "1") (term "0,1,0,0,0"))
                   (builtin "One Step Simplification" (formula "1"))
                  (rule "commute_or" (formula "1") (term "0,0,0,0"))
                  (rule "commute_or_2" (formula "1") (term "0,0,0"))
                  (rule "shift_paren_or" (formula "1") (term "0,0,0,0"))
                  (rule "Class_axiom_0_in_de_polyas_core3_open_cred_CredTool" (inst "seq=seq") (inst "i=i") (inst "str=str") (inst "seq_0=seq_0") (inst "i_0=i_0") (inst "sv_heap=heapAtPre_A<<anonHeapFunction>>"))
                  (rule "andLeft" (formula "1"))
                  (rule "castedGetAny" (formula "1") (term "0,0,0,0,0"))
                  (rule "castedGetAny" (formula "1") (term "0,0,1,0,0"))
                  (rule "castedGetAny" (formula "2") (term "0,1,1,0,0,0"))
                  (rule "nnf_imp2or" (formula "1") (term "0,0"))
                   (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "4")))
                  (rule "true_left" (formula "1"))
                  (rule "nnf_imp2or" (formula "1") (term "0,0,0"))
                  (rule "nnf_notAnd" (formula "1") (term "0,0,0,0"))
                   (builtin "One Step Simplification" (formula "1"))
                  (rule "nnf_imp2or" (formula "1") (term "1,0,0,0"))
                  (rule "nnf_notOr" (formula "1") (term "0,0,0,0,0"))
                  (rule "nnf_notAnd" (formula "1") (term "0,1,0,0,0"))
                   (builtin "One Step Simplification" (formula "1"))
                  (rule "commute_or" (formula "1") (term "0,0,0,0"))
                  (rule "commute_or_2" (formula "1") (term "0,0,0"))
                  (rule "Class_axiom_0_in_de_polyas_core3_open_cred_CredTool" (inst "seq=seq") (inst "i=i") (inst "str=str") (inst "seq_0=seq_0") (inst "i_0=i_0") (inst "sv_heap=anon(heapAtPre_A<<anonHeapFunction>>,
     empty,
     anon_heap_mod<<anonHeapFunction>>)"))
                   (builtin "One Step Simplification" (formula "1"))
                  (rule "andLeft" (formula "1"))
                  (rule "castedGetAny" (formula "1") (term "0,0,1,0,0"))
                  (rule "castedGetAny" (formula "1") (term "0,0,0,0,0"))
                  (rule "castedGetAny" (formula "2") (term "0,1,1,0,0,0"))
                  (rule "nnf_imp2or" (formula "1") (term "0,0"))
                   (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "5")))
                  (rule "true_left" (formula "1"))
                  (rule "nnf_imp2or" (formula "1") (term "0,0,0"))
                  (rule "nnf_notAnd" (formula "1") (term "0,0,0,0"))
                   (builtin "One Step Simplification" (formula "1"))
                  (rule "nnf_imp2or" (formula "1") (term "1,0,0,0"))
                  (rule "nnf_notOr" (formula "1") (term "0,0,0,0,0"))
                  (rule "nnf_notAnd" (formula "1") (term "0,1,0,0,0"))
                   (builtin "One Step Simplification" (formula "1"))
                  (rule "nnf_notOr" (formula "1") (term "1,0,0,0,0,0"))
                  (rule "Class_axiom_0_in_de_polyas_core3_open_cred_CredTool" (inst "seq=seq") (inst "i=i") (inst "str=str") (inst "seq_0=seq_0") (inst "i_0=i_0") (inst "sv_heap=heapAfter_mod_A_0"))
                  (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "1,0,0,0,0,0,1") (ifseqformula "30"))
                  (rule "andLeft" (formula "1"))
                  (rule "castedGetAny" (formula "1") (term "0,0,0,0,0"))
                  (rule "castedGetAny" (formula "1") (term "0,0,1,0,0"))
                  (rule "castedGetAny" (formula "2") (term "0,1,1,0,0,0"))
                  (rule "nnf_imp2or" (formula "1") (term "0,0"))
                   (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "6")))
                  (rule "true_left" (formula "1"))
                  (rule "nnf_imp2or" (formula "1") (term "0,0,0"))
                  (rule "nnf_imp2or" (formula "1") (term "1,0,0,0"))
                  (rule "nnf_notAnd" (formula "1") (term "0,0,0,0"))
                   (builtin "One Step Simplification" (formula "1"))
                  (rule "nnf_notOr" (formula "1") (term "0,0,0,0,0"))
                  (rule "nnf_notAnd" (formula "1") (term "0,1,0,0,0"))
                   (builtin "One Step Simplification" (formula "1"))
                  (rule "nnf_notOr" (formula "1") (term "1,0,0,0,0,0"))
                  (rule "Class_axiom_0_in_de_polyas_core3_open_cred_CredTool" (inst "seq=seq") (inst "i=i") (inst "str=str") (inst "seq_0=seq_0") (inst "i_0=i_0") (inst "sv_heap=anon(heapAfter_mod_A_0,
     empty,
     anon_heap_multiply<<anonHeapFunction>>)"))
                   (builtin "One Step Simplification" (formula "1"))
                  (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,1,0,0,0,0,0,1") (ifseqformula "30"))
                  (rule "andLeft" (formula "1"))
                  (rule "castedGetAny" (formula "1") (term "0,0,0,0,0"))
                  (rule "castedGetAny" (formula "1") (term "0,0,1,0,0"))
                  (rule "castedGetAny" (formula "2") (term "0,1,1,0,0,0"))
                  (rule "nnf_imp2or" (formula "1") (term "0,0"))
                   (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "6")))
                  (rule "true_left" (formula "1"))
                  (rule "nnf_imp2or" (formula "1") (term "0,0,0"))
                  (rule "nnf_notAnd" (formula "1") (term "0,0,0,0"))
                   (builtin "One Step Simplification" (formula "1"))
                  (rule "nnf_imp2or" (formula "1") (term "1,0,0,0"))
                  (rule "nnf_notOr" (formula "1") (term "0,0,0,0,0"))
                  (rule "nnf_notAnd" (formula "1") (term "0,1,0,0,0"))
                   (builtin "One Step Simplification" (formula "1"))
                  (rule "nnf_notOr" (formula "1") (term "1,0,0,0,0,0"))
                  (rule "nnf_notOr" (formula "1") (term "0,1,0,0,0,0,0"))
                  (rule "Class_axiom_0_in_de_polyas_core3_open_cred_CredTool" (inst "seq=seq") (inst "i=i") (inst "str=str") (inst "seq_0=seq_0") (inst "i_0=i_0") (inst "sv_heap=heapAfter_multiply_A_1"))
                  (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "1,0,0,0,0,0,1") (ifseqformula "37"))
                  (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,1,0,0,0,0,0,1") (ifseqformula "31"))
                  (rule "andLeft" (formula "1"))
                  (rule "castedGetAny" (formula "1") (term "0,0,0,0,0"))
                  (rule "castedGetAny" (formula "2") (term "0,1,1,0,0,0"))
                  (rule "castedGetAny" (formula "1") (term "0,0,1,0,0"))
                  (rule "nnf_imp2or" (formula "1") (term "0,0"))
                   (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "7")))
                  (rule "true_left" (formula "1"))
                  (rule "nnf_imp2or" (formula "1") (term "0,0,0"))
                  (rule "nnf_imp2or" (formula "1") (term "1,0,0,0"))
                  (rule "nnf_notAnd" (formula "1") (term "0,0,0,0"))
                   (builtin "One Step Simplification" (formula "1"))
                  (rule "nnf_notOr" (formula "1") (term "0,0,0,0,0"))
                  (rule "nnf_notAnd" (formula "1") (term "0,1,0,0,0"))
                   (builtin "One Step Simplification" (formula "1"))
                  (rule "nnf_notOr" (formula "1") (term "1,0,0,0,0,0"))
                  (rule "nnf_notOr" (formula "1") (term "0,1,0,0,0,0,0"))
                  (rule "Class_axiom_0_in_de_polyas_core3_open_cred_CredTool" (inst "seq=seq") (inst "i=i") (inst "str=str") (inst "seq_0=seq_0") (inst "i_0=i_0") (inst "sv_heap=heapAtPost_A"))
                  (rule "andLeft" (formula "1"))
                  (rule "castedGetAny" (formula "1") (term "0,0,0,0,0"))
                  (rule "castedGetAny" (formula "2") (term "0,1,1,0,0,0"))
                  (rule "castedGetAny" (formula "1") (term "0,0,1,0,0"))
                  (rule "applyEq" (formula "2") (term "0,0,1,0,0,0,0,0") (ifseqformula "46"))
                  (rule "selectCreatedOfAnonAsFormulaEQ" (formula "2") (term "1,0,0,0,0,0") (ifseqformula "38"))
                  (rule "selectCreatedOfAnonAsFormulaEQ" (formula "2") (term "0,1,0,0,0,0,0") (ifseqformula "32"))
                  (rule "nnf_imp2or" (formula "1") (term "0,0"))
                   (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "7")))
                  (rule "true_left" (formula "1"))
                  (rule "nnf_imp2or" (formula "1") (term "0,0,0"))
                  (rule "nnf_imp2or" (formula "1") (term "1,0,0,0"))
                  (rule "nnf_notAnd" (formula "1") (term "0,0,0,0"))
                   (builtin "One Step Simplification" (formula "1"))
                  (rule "nnf_notAnd" (formula "1") (term "0,1,0,0,0"))
                   (builtin "One Step Simplification" (formula "1"))
                  (rule "nnf_notOr" (formula "1") (term "0,0,0,0,0"))
                  (rule "nnf_notOr" (formula "1") (term "1,0,0,0,0,0"))
                  (rule "nnf_notOr" (formula "1") (term "0,1,0,0,0,0,0"))
                  (rule "Class_axiom_0_in_de_polyas_core3_open_cred_CredTool" (inst "seq=seq") (inst "i=i") (inst "str=str") (inst "seq_0=seq_0") (inst "i_0=i_0") (inst "sv_heap=anon(heapAtPre_B<<anonHeapFunction>>,
     empty,
     anon_heap_mod<<anonHeapFunction>>)"))
                   (builtin "One Step Simplification" (formula "1"))
                  (rule "andLeft" (formula "1"))
                  (rule "castedGetAny" (formula "2") (term "0,1,1,0,0,0"))
                  (rule "castedGetAny" (formula "1") (term "0,0,1,0,0"))
                  (rule "castedGetAny" (formula "1") (term "0,0,0,0,0"))
                  (rule "nnf_imp2or" (formula "1") (term "0,0"))
                   (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "7")))
                  (rule "true_left" (formula "1"))
                  (rule "nnf_imp2or" (formula "1") (term "0,0,0"))
                  (rule "nnf_imp2or" (formula "1") (term "1,0,0,0"))
                  (rule "nnf_notAnd" (formula "1") (term "0,0,0,0"))
                   (builtin "One Step Simplification" (formula "1"))
                  (rule "nnf_notAnd" (formula "1") (term "0,1,0,0,0"))
                   (builtin "One Step Simplification" (formula "1"))
                  (rule "nnf_notOr" (formula "1") (term "0,0,0,0,0"))
                  (rule "nnf_notOr" (formula "1") (term "1,0,0,0,0,0"))
                  (rule "Class_axiom_0_in_de_polyas_core3_open_cred_CredTool" (inst "seq=seq") (inst "i=i") (inst "str=str") (inst "seq_0=seq_0") (inst "i_0=i_0") (inst "sv_heap=heapAfter_mod_B_0"))
                  (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "1,0,0,0,0,0,1") (ifseqformula "66"))
                  (rule "andLeft" (formula "1"))
                  (rule "castedGetAny" (formula "1") (term "0,0,0,0,0"))
                  (rule "castedGetAny" (formula "2") (term "0,1,1,0,0,0"))
                  (rule "castedGetAny" (formula "1") (term "0,0,1,0,0"))
                  (rule "nnf_imp2or" (formula "1") (term "0,0"))
                   (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "8")))
                  (rule "true_left" (formula "1"))
                  (rule "nnf_imp2or" (formula "1") (term "0,0,0"))
                  (rule "nnf_imp2or" (formula "1") (term "1,0,0,0"))
                  (rule "nnf_notAnd" (formula "1") (term "0,0,0,0"))
                   (builtin "One Step Simplification" (formula "1"))
                  (rule "nnf_notOr" (formula "1") (term "0,0,0,0,0"))
                  (rule "nnf_notAnd" (formula "1") (term "0,1,0,0,0"))
                   (builtin "One Step Simplification" (formula "1"))
                  (rule "nnf_notOr" (formula "1") (term "1,0,0,0,0,0"))
                  (rule "Class_axiom_0_in_de_polyas_core3_open_cred_CredTool" (inst "seq=seq") (inst "i=i") (inst "str=str") (inst "seq_0=seq_0") (inst "i_0=i_0") (inst "sv_heap=anon(heapAfter_mod_B_0,
     empty,
     anon_heap_multiply<<anonHeapFunction>>)"))
                   (builtin "One Step Simplification" (formula "1"))
                  (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,1,0,0,0,0,0,1") (ifseqformula "66"))
                  (rule "andLeft" (formula "1"))
                  (rule "castedGetAny" (formula "1") (term "0,0,1,0,0"))
                  (rule "castedGetAny" (formula "2") (term "0,1,1,0,0,0"))
                  (rule "castedGetAny" (formula "1") (term "0,0,0,0,0"))
                  (rule "nnf_imp2or" (formula "1") (term "0,0"))
                   (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "8")))
                  (rule "true_left" (formula "1"))
                  (rule "nnf_imp2or" (formula "1") (term "0,0,0"))
                  (rule "nnf_imp2or" (formula "1") (term "1,0,0,0"))
                  (rule "nnf_notAnd" (formula "1") (term "0,0,0,0"))
                   (builtin "One Step Simplification" (formula "1"))
                  (rule "nnf_notOr" (formula "1") (term "0,0,0,0,0"))
                  (rule "nnf_notAnd" (formula "1") (term "0,1,0,0,0"))
                   (builtin "One Step Simplification" (formula "1"))
                  (rule "nnf_notOr" (formula "1") (term "1,0,0,0,0,0"))
                  (rule "nnf_notOr" (formula "1") (term "0,1,0,0,0,0,0"))
                  (rule "Class_axiom_0_in_de_polyas_core3_open_cred_CredTool" (inst "seq=seq") (inst "i=i") (inst "str=str") (inst "seq_0=seq_0") (inst "i_0=i_0") (inst "sv_heap=heapAfter_multiply_B_1"))
                  (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "1,0,0,0,0,0,1") (ifseqformula "75"))
                  (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,1,0,0,0,0,0,1") (ifseqformula "67"))
                  (rule "andLeft" (formula "1"))
                  (rule "castedGetAny" (formula "1") (term "0,0,1,0,0"))
                  (rule "castedGetAny" (formula "2") (term "0,1,1,0,0,0"))
                  (rule "castedGetAny" (formula "1") (term "0,0,0,0,0"))
                  (rule "nnf_imp2or" (formula "1") (term "0,0"))
                   (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "9")))
                  (rule "true_left" (formula "1"))
                  (rule "nnf_imp2or" (formula "1") (term "0,0,0"))
                  (rule "nnf_imp2or" (formula "1") (term "1,0,0,0"))
                  (rule "nnf_notAnd" (formula "1") (term "0,0,0,0"))
                   (builtin "One Step Simplification" (formula "1"))
                  (rule "nnf_notOr" (formula "1") (term "0,0,0,0,0"))
                  (rule "nnf_notAnd" (formula "1") (term "0,1,0,0,0"))
                   (builtin "One Step Simplification" (formula "1"))
                  (rule "nnf_notOr" (formula "1") (term "1,0,0,0,0,0"))
                  (rule "nnf_notOr" (formula "1") (term "0,1,0,0,0,0,0"))
                  (rule "Class_axiom_0_in_de_polyas_core3_open_cred_CredTool" (inst "seq=seq") (inst "i=i") (inst "str=str") (inst "seq_0=seq_0") (inst "i_0=i_0") (inst "sv_heap=heapAtPost_B"))
                  (rule "andLeft" (formula "1"))
                  (rule "castedGetAny" (formula "2") (term "0,1,1,0,0,0"))
                  (rule "castedGetAny" (formula "1") (term "0,0,0,0,0"))
                  (rule "castedGetAny" (formula "1") (term "0,0,1,0,0"))
                  (rule "applyEq" (formula "2") (term "0,0,1,0,0,0,0,0") (ifseqformula "83"))
                  (rule "selectCreatedOfAnonAsFormulaEQ" (formula "2") (term "1,0,0,0,0,0") (ifseqformula "76"))
                  (rule "selectCreatedOfAnonAsFormulaEQ" (formula "2") (term "0,1,0,0,0,0,0") (ifseqformula "68"))
                  (rule "nnf_imp2or" (formula "1") (term "0,0"))
                   (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "9")))
                  (rule "true_left" (formula "1"))
                  (rule "nnf_imp2or" (formula "1") (term "0,0,0"))
                  (rule "nnf_imp2or" (formula "1") (term "1,0,0,0"))
                  (rule "nnf_notAnd" (formula "1") (term "0,0,0,0"))
                   (builtin "One Step Simplification" (formula "1"))
                  (rule "nnf_notAnd" (formula "1") (term "0,1,0,0,0"))
                   (builtin "One Step Simplification" (formula "1"))
                  (rule "nnf_notOr" (formula "1") (term "0,0,0,0,0"))
                  (rule "nnf_notOr" (formula "1") (term "1,0,0,0,0,0"))
                  (rule "nnf_notOr" (formula "1") (term "0,1,0,0,0,0,0"))
                  (rule "div_axiom" (formula "33") (term "0,1") (inst "quotient=quotient_0"))
                  (rule "polySimp_mulComm0" (formula "33") (term "0,1,0,1"))
                  (rule "polySimp_mulComm0" (formula "33") (term "1,1,1,1,1"))
                  (rule "polySimp_mulComm0" (formula "33") (term "0,2,1,1"))
                  (rule "polySimp_mulComm0" (formula "33") (term "0,1,1,1"))
                  (rule "commute_or" (formula "4") (term "0,0,0,0"))
                  (rule "shift_paren_or" (formula "5") (term "0,0,0,0"))
                  (rule "commute_and" (formula "6") (term "1,0,0,0"))
                  (rule "shift_paren_or" (formula "6") (term "0,0,0,0,0"))
                  (rule "commute_or" (formula "4") (term "0,1,0,0,0"))
                  (rule "commute_and" (formula "5") (term "1,0,0,0"))
                  (rule "ifthenelse_split" (formula "9") (term "0"))
                  (branch " resultAtPost_226_A.<created>@anon_heap_mod«anonHeapFunction» = TRUE TRUE"
                     (rule "applyEqReverse" (formula "105") (term "1") (ifseqformula "10"))
                     (rule "hideAuxiliaryEq" (formula "10"))
                     (rule "replace_known_left" (formula "41") (term "0") (ifseqformula "9"))
                      (builtin "One Step Simplification" (formula "41"))
                     (rule "true_left" (formula "41"))
                     (rule "commute_or" (formula "3") (term "0,0,0,0"))
                     (rule "commute_or" (formula "3") (term "0,1,0,0,0"))
                     (rule "commute_or" (formula "2") (term "0,0,0,0"))
                     (rule "onlyCreatedObjectsAreReferenced" (formula "96") (term "0") (ifseqformula "55"))
                     (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "97"))
                      (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "61")))
                     (rule "true_left" (formula "1"))
                     (rule "onlyCreatedObjectsAreReferenced" (formula "27") (term "1,0") (ifseqformula "22"))
                     (rule "replace_known_right" (formula "27") (term "0") (ifseqformula "96"))
                      (builtin "One Step Simplification" (formula "27") (ifInst ""  (formula "28")))
                     (rule "true_left" (formula "27"))
                     (rule "onlyCreatedObjectsAreReferenced" (formula "14") (term "1,0") (ifseqformula "22"))
                     (rule "replace_known_right" (formula "14") (term "0") (ifseqformula "90"))
                      (builtin "One Step Simplification" (formula "14") (ifInst ""  (formula "15")))
                     (rule "true_left" (formula "14"))
                     (rule "onlyCreatedObjectsAreReferenced" (formula "92") (term "0") (ifseqformula "55"))
                     (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "93"))
                      (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "49")))
                     (rule "true_left" (formula "1"))
                     (rule "onlyCreatedObjectsAreReferenced" (formula "31") (term "0") (ifseqformula "22"))
                     (rule "replace_known_right" (formula "31") (term "0") (ifseqformula "94"))
                      (builtin "One Step Simplification" (formula "31") (ifInst ""  (formula "16")))
                     (rule "true_left" (formula "31"))
                     (rule "onlyCreatedObjectsAreReferenced" (formula "14") (term "1,1,0") (ifseqformula "22"))
                     (rule "replace_known_right" (formula "14") (term "0") (ifseqformula "92"))
                      (builtin "One Step Simplification" (formula "14") (ifInst ""  (formula "16")))
                     (rule "true_left" (formula "14"))
                     (rule "onlyCreatedObjectsAreReferenced" (formula "47") (term "1,0") (ifseqformula "55"))
                     (rule "replace_known_right" (formula "47") (term "0") (ifseqformula "91"))
                      (builtin "One Step Simplification" (formula "47") (ifInst ""  (formula "48")))
                     (rule "true_left" (formula "47"))
                     (rule "commute_or" (formula "2") (term "0,1,0,0,0"))
                     (rule "onlyCreatedObjectsAreReferenced" (formula "49") (term "1,0") (ifseqformula "55"))
                     (rule "replace_known_right" (formula "49") (term "0") (ifseqformula "95"))
                      (builtin "One Step Simplification" (formula "49") (ifInst ""  (formula "50")))
                     (rule "true_left" (formula "49"))
                     (rule "commute_or" (formula "1") (term "0,0,0,0"))
                     (rule "commute_or" (formula "1") (term "0,1,0,0,0"))
                     (rule "commute_or_2" (formula "4") (term "0,0,0"))
                     (rule "commute_or_2" (formula "3") (term "0,0,0"))
                     (rule "commute_and" (formula "33") (term "0,1"))
                     (rule "commute_or_2" (formula "6") (term "0,0,0,0,0"))
                      (builtin "One Step Simplification" (formula "6"))
                     (rule "commute_or_2" (formula "2") (term "0,0,0"))
                     (rule "commute_or_2" (formula "1") (term "0,0,0"))
                     (rule "shift_paren_or" (formula "5") (term "0,0,0,0,0"))
                     (rule "commute_or_2" (formula "6") (term "0,0,0,0"))
                     (rule "shift_paren_or" (formula "4") (term "0,0,0,0"))
                     (rule "commute_or_2" (formula "3") (term "1,0,0,0,0"))
                     (rule "shift_paren_or" (formula "2") (term "0,0,0,0"))
                     (rule "commute_or_2" (formula "1") (term "1,0,0,0,0"))
                     (rule "commute_or_2" (formula "5") (term "0,0,0,0,0"))
                      (builtin "One Step Simplification" (formula "5"))
                     (rule "commute_or_2" (formula "5") (term "0,0,0,0"))
                     (rule "shift_paren_or" (formula "3") (term "0,0,0,0"))
                     (rule "shift_paren_or" (formula "1") (term "0,0,0,0"))
                     (rule "cnf_rightDist" (formula "6") (term "0,0,0"))
                     (rule "distr_forallAnd" (formula "6") (term "0,0"))
                     (rule "distr_forallAnd" (formula "6") (term "0"))
                     (rule "distr_forallAnd" (formula "6"))
                     (rule "andLeft" (formula "6"))
                     (rule "commute_or_2" (formula "6") (term "0,0,0"))
                      (builtin "One Step Simplification" (formula "6"))
                     (rule "eqSymm" (formula "6") (term "1,0,0,0,0"))
                     (rule "castedGetAny" (formula "6") (term "1,0,0,1,0,0,0"))
                     (rule "castedGetAny" (formula "6") (term "0,0,0,0,0,0"))
                     (rule "castedGetAny" (formula "6") (term "0,1,0,0,0,0"))
                      (builtin "One Step Simplification" (formula "6"))
                     (rule "true_left" (formula "6"))
                     (rule "shift_paren_or" (formula "6") (term "0,0,0"))
                      (builtin "One Step Simplification" (formula "6"))
                     (rule "eqSymm" (formula "6") (term "1,1,0,0,0"))
                     (rule "castedGetAny" (formula "6") (term "0,0,1,0,0,0"))
                     (rule "castedGetAny" (formula "6") (term "0,0,0,0,0,0"))
                     (rule "castedGetAny" (formula "6") (term "0,1,1,0,0,0"))
                      (builtin "One Step Simplification" (formula "6"))
                     (rule "true_left" (formula "6"))
                     (rule "commute_and" (formula "4") (term "1,0,0,0"))
                     (rule "commute_and" (formula "3") (term "1,0,0,0"))
                     (rule "cnf_rightDist" (formula "5") (term "0,0,0"))
                     (rule "distr_forallAnd" (formula "5") (term "0,0"))
                     (rule "distr_forallAnd" (formula "5") (term "0"))
                     (rule "distr_forallAnd" (formula "5"))
                     (rule "andLeft" (formula "5"))
                     (rule "commute_or_2" (formula "5") (term "0,0,0"))
                      (builtin "One Step Simplification" (formula "5"))
                     (rule "eqSymm" (formula "5") (term "1,0,0,0,0"))
                     (rule "castedGetAny" (formula "5") (term "0,0,0,0,0,0"))
                     (rule "castedGetAny" (formula "5") (term "1,0,0,1,0,0,0"))
                     (rule "castedGetAny" (formula "5") (term "0,1,0,0,0,0"))
                      (builtin "One Step Simplification" (formula "5"))
                     (rule "true_left" (formula "5"))
                     (rule "commute_and" (formula "2") (term "1,0,0,0"))
                     (rule "shift_paren_or" (formula "5") (term "0,0,0"))
                      (builtin "One Step Simplification" (formula "5"))
                     (rule "eqSymm" (formula "5") (term "1,1,0,0,0"))
                     (rule "castedGetAny" (formula "5") (term "0,0,1,0,0,0"))
                     (rule "castedGetAny" (formula "5") (term "0,0,0,0,0,0"))
                     (rule "castedGetAny" (formula "5") (term "0,1,1,0,0,0"))
                      (builtin "One Step Simplification" (formula "5"))
                     (rule "true_left" (formula "5"))
                     (rule "commute_and" (formula "1") (term "1,0,0,0"))
                     (rule "shift_paren_or" (formula "4") (term "0,0,0,0,0"))
                      (builtin "One Step Simplification" (formula "4"))
                     (rule "shift_paren_or" (formula "2") (term "0,0,0,0,0"))
                      (builtin "One Step Simplification" (formula "2"))
                     (rule "shift_paren_or" (formula "3") (term "0,0,0,0,0"))
                      (builtin "One Step Simplification" (formula "3"))
                     (rule "shift_paren_or" (formula "1") (term "0,0,0,0,0"))
                      (builtin "One Step Simplification" (formula "1"))
                     (rule "commute_or_2" (formula "4") (term "0,0,0,0"))
                     (rule "commute_or_2" (formula "2") (term "0,0,0,0"))
                     (rule "cnf_rightDist" (formula "3") (term "0,0,0"))
                     (rule "distr_forallAnd" (formula "3") (term "0,0"))
                     (rule "distr_forallAnd" (formula "3") (term "0"))
                     (rule "distr_forallAnd" (formula "3"))
                     (rule "andLeft" (formula "3"))
                     (rule "shift_paren_or" (formula "4") (term "0,0,0"))
                      (builtin "One Step Simplification" (formula "4"))
                     (rule "eqSymm" (formula "4") (term "1,1,0,0,0"))
                     (rule "castedGetAny" (formula "4") (term "0,0,1,0,0,0"))
                     (rule "castedGetAny" (formula "4") (term "0,0,0,0,0,0"))
                     (rule "castedGetAny" (formula "4") (term "0,1,1,0,0,0"))
                      (builtin "One Step Simplification" (formula "4"))
                     (rule "true_left" (formula "4"))
                     (rule "cnf_rightDist" (formula "1") (term "0,0,0"))
                     (rule "distr_forallAnd" (formula "1") (term "0,0"))
                     (rule "distr_forallAnd" (formula "1") (term "0"))
                     (rule "distr_forallAnd" (formula "1"))
                     (rule "andLeft" (formula "1"))
                     (rule "shift_paren_or" (formula "2") (term "0,0,0"))
                      (builtin "One Step Simplification" (formula "2"))
                     (rule "eqSymm" (formula "2") (term "1,1,0,0,0"))
                     (rule "castedGetAny" (formula "2") (term "0,0,0,0,0,0"))
                     (rule "castedGetAny" (formula "2") (term "0,0,1,0,0,0"))
                     (rule "castedGetAny" (formula "2") (term "0,1,1,0,0,0"))
                      (builtin "One Step Simplification" (formula "2"))
                     (rule "true_left" (formula "2"))
                     (rule "cnf_rightDist" (formula "4") (term "0,0,0"))
                     (rule "distr_forallAnd" (formula "4") (term "0,0"))
                     (rule "distr_forallAnd" (formula "4") (term "0"))
                     (rule "distr_forallAnd" (formula "4"))
                     (rule "andLeft" (formula "4"))
                     (rule "cnf_rightDist" (formula "2") (term "0,0,0"))
                     (rule "distr_forallAnd" (formula "2") (term "0,0"))
                     (rule "distr_forallAnd" (formula "2") (term "0"))
                     (rule "distr_forallAnd" (formula "2"))
                     (rule "andLeft" (formula "2"))
                     (rule "shift_paren_or" (formula "5") (term "0,0,0"))
                      (builtin "One Step Simplification" (formula "5"))
                     (rule "eqSymm" (formula "5") (term "1,1,0,0,0"))
                     (rule "castedGetAny" (formula "5") (term "0,0,1,0,0,0"))
                     (rule "castedGetAny" (formula "5") (term "0,0,0,0,0,0"))
                     (rule "castedGetAny" (formula "5") (term "0,1,1,0,0,0"))
                      (builtin "One Step Simplification" (formula "5"))
                     (rule "true_left" (formula "5"))
                     (rule "cnf_rightDist" (formula "3") (term "0,0,0"))
                     (rule "distr_forallAnd" (formula "3") (term "0,0"))
                     (rule "distr_forallAnd" (formula "3") (term "0"))
                     (rule "distr_forallAnd" (formula "3"))
                     (rule "andLeft" (formula "3"))
                     (rule "cnf_rightDist" (formula "1") (term "0,0,0"))
                     (rule "distr_forallAnd" (formula "1") (term "0,0"))
                     (rule "distr_forallAnd" (formula "1") (term "0"))
                     (rule "distr_forallAnd" (formula "1"))
                     (rule "andLeft" (formula "1"))
                     (rule "shift_paren_or" (formula "2") (term "0,0,0"))
                      (builtin "One Step Simplification" (formula "2"))
                     (rule "eqSymm" (formula "2") (term "1,1,0,0,0"))
                     (rule "castedGetAny" (formula "2") (term "0,0,1,0,0,0"))
                     (rule "castedGetAny" (formula "2") (term "1,0,0,0,0,0,0"))
                     (rule "castedGetAny" (formula "2") (term "0,1,1,0,0,0"))
                      (builtin "One Step Simplification" (formula "2"))
                     (rule "true_left" (formula "2"))
                     (rule "cnf_rightDist" (formula "2") (term "0,0,0"))
                     (rule "distr_forallAnd" (formula "2") (term "0,0"))
                     (rule "distr_forallAnd" (formula "2") (term "0"))
                     (rule "distr_forallAnd" (formula "2"))
                     (rule "andLeft" (formula "2"))
                     (rule "commute_or_2" (formula "2") (term "0,0,0"))
                      (builtin "One Step Simplification" (formula "2"))
                     (rule "eqSymm" (formula "2") (term "1,0,0,0,0"))
                     (rule "castedGetAny" (formula "2") (term "1,0,0,1,0,0,0"))
                     (rule "castedGetAny" (formula "2") (term "0,0,0,0,0,0"))
                     (rule "castedGetAny" (formula "2") (term "0,1,0,0,0,0"))
                      (builtin "One Step Simplification" (formula "2"))
                     (rule "true_left" (formula "2"))
                     (rule "cnf_rightDist" (formula "1") (term "0,0,0"))
                     (rule "distr_forallAnd" (formula "1") (term "0,0"))
                     (rule "distr_forallAnd" (formula "1") (term "0"))
                     (rule "distr_forallAnd" (formula "1"))
                     (rule "andLeft" (formula "1"))
                     (rule "commute_or_2" (formula "1") (term "0,0,0"))
                      (builtin "One Step Simplification" (formula "1"))
                     (rule "eqSymm" (formula "1") (term "1,0,0,0,0"))
                     (rule "castedGetAny" (formula "1") (term "0,0,0,0,0,0"))
                     (rule "castedGetAny" (formula "1") (term "1,0,0,1,0,0,0"))
                     (rule "castedGetAny" (formula "1") (term "0,1,0,0,0,0"))
                      (builtin "One Step Simplification" (formula "1"))
                     (rule "true_left" (formula "1"))
                     (rule "shift_paren_or" (formula "1") (term "0,0,0"))
                      (builtin "One Step Simplification" (formula "1"))
                     (rule "eqSymm" (formula "1") (term "1,1,0,0,0"))
                     (rule "castedGetAny" (formula "1") (term "1,0,0,0,0,0,0"))
                     (rule "castedGetAny" (formula "1") (term "0,0,1,0,0,0"))
                     (rule "castedGetAny" (formula "1") (term "0,1,1,0,0,0"))
                      (builtin "One Step Simplification" (formula "1"))
                     (rule "true_left" (formula "1"))
                     (rule "ifthenelse_split_for" (formula "27") (term "1,1"))
                     (branch "result_228_A_1.value@heapAtPre_A«anonHeapFunction» ≥ 0 TRUE"
                        (rule "cnf_rightDist" (formula "28"))
                        (rule "andLeft" (formula "28"))
                        (rule "commute_or" (formula "29"))
                        (rule "cnf_rightDist" (formula "28"))
                        (rule "andLeft" (formula "28"))
                        (rule "commute_or" (formula "29"))
                        (rule "cut_direct" (formula "28") (term "0"))
                        (branch "CUT: result_228_A_1.value@heapAtPre_A«anonHeapFunction» = 0 TRUE"
                            (builtin "One Step Simplification" (formula "29"))
                           (rule "true_left" (formula "29"))
                           (rule "replace_known_left" (formula "29") (term "0") (ifseqformula "28"))
                            (builtin "One Step Simplification" (formula "29"))
                           (rule "true_left" (formula "29"))
                           (rule "replace_known_left" (formula "29") (term "0") (ifseqformula "28"))
                            (builtin "One Step Simplification" (formula "29"))
                           (rule "true_left" (formula "29"))
                           (rule "applyEq" (formula "30") (term "1,0,0") (ifseqformula "28"))
                           (rule "polySimp_mulComm0" (formula "30") (term "0"))
                           (rule "applyEq" (formula "27") (term "0") (ifseqformula "28"))
                           (rule "qeq_literals" (formula "27"))
                           (rule "true_left" (formula "27"))
                           (rule "applyEq" (formula "28") (term "1,0") (ifseqformula "27"))
                           (rule "eqSymm" (formula "28"))
                           (rule "polySimp_homoEq" (formula "28"))
                           (rule "polySimp_mulLiterals" (formula "28") (term "1,0"))
                           (rule "polySimp_elimOne" (formula "28") (term "1,0"))
                           (rule "applyEq" (formula "56") (term "1") (ifseqformula "27"))
                           (rule "applyEq" (formula "23") (term "1") (ifseqformula "27"))
                           (rule "applyEq" (formula "7") (term "1") (ifseqformula "27"))
                           (rule "applyEq" (formula "29") (term "0,0") (ifseqformula "27"))
                           (rule "times_zero_2" (formula "29") (term "0"))
                           (rule "polySimp_homoEq" (formula "29"))
                           (rule "mul_literals" (formula "29") (term "1,0"))
                           (rule "add_zero_right" (formula "29") (term "0"))
                           (rule "applyEq" (formula "28") (term "1,1,0") (ifseqformula "27"))
                           (rule "polySimp_addComm0" (formula "28") (term "0"))
                           (rule "polySimp_sepPosMonomial" (formula "29"))
                           (rule "polySimp_mulLiterals" (formula "29") (term "1"))
                           (rule "polySimp_elimOne" (formula "29") (term "1"))
                           (rule "applyEq" (formula "65") (term "1") (ifseqformula "29"))
                           (rule "polySimp_sepPosMonomial" (formula "28"))
                           (rule "jdiv_axiom" (formula "28") (term "0"))
                           (rule "eqSymm" (formula "28"))
                           (rule "applyEq" (formula "28") (term "1") (ifseqformula "29"))
                            (builtin "One Step Simplification" (formula "28"))
                           (rule "eqSymm" (formula "28") (term "1"))
                           (rule "polySimp_homoEq" (formula "28") (term "1"))
                           (rule "polySimp_mulLiterals" (formula "28") (term "1,0,1"))
                           (rule "polySimp_elimOne" (formula "28") (term "1,0,1"))
                           (rule "polySimp_sepPosMonomial" (formula "28") (term "1"))
                           (rule "inEqSimp_contradInEq0" (formula "28") (term "0,0") (ifseqformula "4"))
                           (rule "qeq_literals" (formula "28") (term "0,0,0"))
                            (builtin "One Step Simplification" (formula "28"))
                           (rule "true_left" (formula "28"))
                           (rule "div_axiom" (formula "28") (term "0,1") (inst "quotient=quotient_1"))
                            (builtin "One Step Simplification" (formula "28"))
                           (rule "true_left" (formula "28"))
                           (rule "Use_information_flow_contract_for_compareTo_325434207" (formula "19") (ifseqformula "19"))
                            (builtin "One Step Simplification" (formula "19") (ifInst ""  (formula "90")) (ifInst ""  (formula "90")))
                           (rule "true_left" (formula "19"))
                           (rule "Use_information_flow_contract_for_getOrder_757678341" (formula "58") (ifseqformula "25"))
                           (rule "applyEq" (formula "58") (term "0,0,1") (ifseqformula "56"))
                           (rule "eqSymm" (formula "58") (term "0,1"))
                           (rule "replace_known_left" (formula "58") (term "0,1") (ifseqformula "23"))
                            (builtin "One Step Simplification" (formula "58"))
                           (rule "applyEq" (formula "58") (term "0,1") (ifseqformula "7"))
                           (rule "eqSymm" (formula "58") (term "1"))
                           (rule "replace_known_left" (formula "58") (term "1") (ifseqformula "27"))
                            (builtin "One Step Simplification" (formula "58"))
                           (rule "true_left" (formula "58"))
                           (rule "Use_information_flow_contract_for_getOrder_757678341" (formula "58") (ifseqformula "58"))
                            (builtin "One Step Simplification" (formula "58"))
                           (rule "true_left" (formula "58"))
                           (rule "Use_information_flow_contract_for_getOrder_757678341" (formula "25") (ifseqformula "25"))
                            (builtin "One Step Simplification" (formula "25"))
                           (rule "true_left" (formula "25"))
                           (rule "Use_information_flow_contract_for_compareTo_325434207" (formula "19") (ifseqformula "52"))
                           (rule "eqSymm" (formula "19") (term "1,0,1"))
                           (rule "eqSymm" (formula "19") (term "1,1"))
                           (rule "eqSymm" (formula "19") (term "0,0,1"))
                           (rule "replace_known_left" (formula "19") (term "0,0,1") (ifseqformula "6"))
                            (builtin "One Step Simplification" (formula "19") (ifInst ""  (formula "90")) (ifInst ""  (formula "91")))
                           (rule "applyEq" (formula "19") (term "0,0,1") (ifseqformula "54"))
                           (rule "eqSymm" (formula "19") (term "0,1"))
                           (rule "replace_known_left" (formula "19") (term "0,1") (ifseqformula "21"))
                            (builtin "One Step Simplification" (formula "19"))
                           (rule "Class_invariant_axiom_for_java_math_BigInteger" (formula "19") (term "0,0"))
                           (rule "replace_known_left" (formula "19") (term "1,0,0") (ifseqformula "21"))
                            (builtin "One Step Simplification" (formula "19") (ifInst ""  (formula "90")))
                           (rule "Class_invariant_axiom_for_java_math_BigInteger" (formula "19") (term "0"))
                           (rule "replace_known_right" (formula "19") (term "0,0,0") (ifseqformula "91"))
                            (builtin "One Step Simplification" (formula "19") (ifInst ""  (formula "54")))
                           (rule "applyEq" (formula "52") (term "0") (ifseqformula "19"))
                           (rule "applyEq" (formula "45") (term "0") (ifseqformula "19"))
                           (rule "applyEq" (formula "51") (term "4") (ifseqformula "19"))
                           (rule "Use_information_flow_contract_for_multiply_1272441881_0" (formula "69") (ifseqformula "36"))
                           (rule "replaceKnownSelect_taclet21_12" (formula "69") (term "0,1,1"))
                           (rule "replaceKnownSelect_taclet21_11" (formula "69") (term "1,1,1"))
                           (rule "replaceKnownAuxiliaryConstant_taclet010021_18" (formula "69") (term "0,1,1"))
                           (rule "replaceKnownAuxiliaryConstant_taclet0010021_19" (formula "69") (term "1,1,1"))
                           (rule "replaceKnownSelect_taclet21_8" (formula "69") (term "1,1,0,1"))
                           (rule "replaceKnownSelect_taclet21_9" (formula "69") (term "0,1,0,1"))
                           (rule "replaceKnownAuxiliaryConstant_taclet21_10" (formula "69") (term "1,1,0,1"))
                            (builtin "One Step Simplification" (formula "69") (ifInst ""  (formula "80")) (ifInst ""  (formula "79")) (ifInst ""  (formula "97")))
                           (rule "pullOutSelect" (formula "69") (term "1,0,1") (inst "selectSK=org_bouncycastle_math_ec_ECPoint_value_4"))
                           (rule "simplifySelectOfAnonEQ" (formula "69") (ifseqformula "27"))
                            (builtin "One Step Simplification" (formula "69") (ifInst ""  (formula "94")) (ifInst ""  (formula "14")))
                           (rule "applyEqReverse" (formula "70") (term "1,0,1") (ifseqformula "69"))
                           (rule "hideAuxiliaryEq" (formula "69"))
                           (rule "pullOutSelect" (formula "69") (term "0,0,1") (inst "selectSK=org_bouncycastle_math_ec_ECPoint_value_5"))
                           (rule "simplifySelectOfAnonEQ" (formula "69") (ifseqformula "59"))
                            (builtin "One Step Simplification" (formula "69") (ifInst ""  (formula "95")) (ifInst ""  (formula "47")))
                           (rule "applyEqReverse" (formula "70") (term "0,0,1") (ifseqformula "69"))
                           (rule "hideAuxiliaryEq" (formula "69"))
                           (rule "replace_known_left" (formula "69") (term "0,1") (ifseqformula "5"))
                            (builtin "One Step Simplification" (formula "69"))
                           (rule "notLeft" (formula "69"))
                           (rule "Class_invariant_axiom_for_org_bouncycastle_math_ec_ECPoint" (formula "75") (term "0"))
                            (builtin "One Step Simplification" (formula "75"))
                           (rule "Class_invariant_axiom_for_org_bouncycastle_math_ec_ECPoint" (formula "75"))
                           (rule "closeTrue" (formula "75"))
                        )
                        (branch "CUT: result_228_A_1.value@heapAtPre_A«anonHeapFunction» = 0 FALSE"
                            (builtin "One Step Simplification" (formula "28"))
                           (rule "replace_known_right" (formula "30") (term "0") (ifseqformula "79"))
                            (builtin "One Step Simplification" (formula "30"))
                           (rule "replace_known_right" (formula "29") (term "0") (ifseqformula "79"))
                            (builtin "One Step Simplification" (formula "29"))
                           (rule "applyEq" (formula "32") (term "0,0") (ifseqformula "29"))
                           (rule "polySimp_mulComm0" (formula "32") (term "0"))
                           (rule "applyEq" (formula "30") (term "0") (ifseqformula "32"))
                           (rule "inEqSimp_homoInEq1" (formula "30"))
                           (rule "polySimp_mulComm0" (formula "30") (term "1,0"))
                           (rule "polySimp_rightDist" (formula "30") (term "1,0"))
                           (rule "polySimp_mulAssoc" (formula "30") (term "0,1,0"))
                           (rule "polySimp_mulComm0" (formula "30") (term "0,0,1,0"))
                           (rule "polySimp_mulLiterals" (formula "30") (term "0,1,0"))
                           (rule "polySimp_elimOne" (formula "30") (term "0,1,0"))
                           (rule "polySimp_addAssoc" (formula "30") (term "0"))
                           (rule "polySimp_addComm1" (formula "30") (term "0,0"))
                           (rule "polySimp_pullOutFactor2b" (formula "30") (term "0,0,0"))
                           (rule "add_literals" (formula "30") (term "1,1,0,0,0"))
                           (rule "times_zero_1" (formula "30") (term "1,0,0,0"))
                           (rule "add_literals" (formula "30") (term "0,0,0"))
                           (rule "applyEq" (formula "28") (term "0") (ifseqformula "32"))
                           (rule "inEqSimp_homoInEq0" (formula "28"))
                           (rule "polySimp_mulComm0" (formula "28") (term "1,0"))
                           (rule "polySimp_rightDist" (formula "28") (term "1,0"))
                           (rule "polySimp_mulAssoc" (formula "28") (term "0,1,0"))
                           (rule "polySimp_mulComm0" (formula "28") (term "0,0,1,0"))
                           (rule "polySimp_mulLiterals" (formula "28") (term "0,1,0"))
                           (rule "polySimp_elimOne" (formula "28") (term "0,1,0"))
                           (rule "polySimp_addAssoc" (formula "28") (term "0"))
                           (rule "polySimp_pullOutFactor2" (formula "28") (term "0,0"))
                           (rule "add_literals" (formula "28") (term "1,0,0"))
                           (rule "times_zero_1" (formula "28") (term "0,0"))
                           (rule "add_zero_left" (formula "28") (term "0"))
                           (rule "applyEq" (formula "31") (term "0,1") (ifseqformula "29"))
                           (rule "inEqSimp_sepNegMonomial0" (formula "30"))
                           (rule "polySimp_mulLiterals" (formula "30") (term "0"))
                           (rule "polySimp_elimOne" (formula "30") (term "0"))
                           (rule "inEqSimp_invertInEq1" (formula "28"))
                           (rule "polySimp_mulLiterals" (formula "28") (term "0"))
                           (rule "times_zero_2" (formula "28") (term "1"))
                           (rule "polySimp_elimOne" (formula "28") (term "0"))
                           (rule "inEqSimp_strengthen1" (formula "27") (ifseqformula "79"))
                           (rule "add_literals" (formula "27") (term "1"))
                           (rule "inEqSimp_contradEq7" (formula "79") (ifseqformula "27"))
                           (rule "mul_literals" (formula "79") (term "1,0,0"))
                           (rule "add_literals" (formula "79") (term "0,0"))
                           (rule "leq_literals" (formula "79") (term "0"))
                            (builtin "One Step Simplification" (formula "79"))
                           (rule "false_right" (formula "79"))
                           (rule "inEqSimp_exactShadow3" (formula "30") (ifseqformula "28"))
                           (rule "add_zero_right" (formula "30") (term "0"))
                           (rule "polySimp_rightDist" (formula "30") (term "0"))
                           (rule "mul_literals" (formula "30") (term "0,0"))
                           (rule "polySimp_mulLiterals" (formula "30") (term "1,0"))
                           (rule "polySimp_elimOne" (formula "30") (term "1,0"))
                           (rule "inEqSimp_sepPosMonomial1" (formula "30"))
                           (rule "mul_literals" (formula "30") (term "1"))
                           (rule "Use_information_flow_contract_for_compareTo_325434207" (formula "19") (ifseqformula "19"))
                            (builtin "One Step Simplification" (formula "19") (ifInst ""  (formula "93")) (ifInst ""  (formula "93")))
                           (rule "true_left" (formula "19"))
                           (rule "Use_information_flow_contract_for_getOrder_757678341" (formula "61") (ifseqformula "25"))
                           (rule "replace_known_left" (formula "61") (term "1,1") (ifseqformula "7"))
                            (builtin "One Step Simplification" (formula "61"))
                           (rule "true_left" (formula "61"))
                           (rule "Use_information_flow_contract_for_multiply_1272441881" (formula "73") (ifseqformula "38"))
                           (rule "replaceKnownSelect_taclet21_11" (formula "73") (term "1,1,1"))
                           (rule "replaceKnownSelect_taclet21_12" (formula "73") (term "0,1,1"))
                           (rule "replaceKnownAuxiliaryConstant_taclet0010021_19" (formula "73") (term "1,1,1"))
                           (rule "replaceKnownAuxiliaryConstant_taclet010021_18" (formula "73") (term "0,1,1"))
                           (rule "replaceKnownSelect_taclet21_9" (formula "73") (term "0,1,0,1"))
                           (rule "replaceKnownSelect_taclet21_8" (formula "73") (term "1,1,0,1"))
                           (rule "replaceKnownAuxiliaryConstant_taclet021_15" (formula "73") (term "0,1,0,1"))
                           (rule "replaceKnownAuxiliaryConstant_taclet21_10" (formula "73") (term "1,1,0,1"))
                           (rule "replaceKnownAuxiliaryConstant_taclet021_15" (formula "73") (term "1,1,0,1"))
                            (builtin "One Step Simplification" (formula "73") (ifInst ""  (formula "84")) (ifInst ""  (formula "83")) (ifInst ""  (formula "101")))
                           (rule "pullOutSelect" (formula "73") (term "1,0,1") (inst "selectSK=org_bouncycastle_math_ec_ECPoint_value_4"))
                           (rule "simplifySelectOfAnonEQ" (formula "73") (ifseqformula "26"))
                            (builtin "One Step Simplification" (formula "73") (ifInst ""  (formula "98")) (ifInst ""  (formula "14")))
                           (rule "applyEqReverse" (formula "74") (term "1,0,1") (ifseqformula "73"))
                           (rule "hideAuxiliaryEq" (formula "73"))
                           (rule "pullOutSelect" (formula "73") (term "0,0,1") (inst "selectSK=org_bouncycastle_math_ec_ECPoint_value_5"))
                           (rule "simplifySelectOfAnonEQ" (formula "73") (ifseqformula "63"))
                            (builtin "One Step Simplification" (formula "73") (ifInst ""  (formula "99")) (ifInst ""  (formula "50")))
                           (rule "applyEqReverse" (formula "74") (term "0,0,1") (ifseqformula "73"))
                           (rule "hideAuxiliaryEq" (formula "73"))
                           (rule "replace_known_left" (formula "73") (term "0,1") (ifseqformula "5"))
                            (builtin "One Step Simplification" (formula "73"))
                           (rule "notLeft" (formula "73"))
                           (rule "Class_invariant_axiom_for_org_bouncycastle_math_ec_ECPoint" (formula "79") (term "1"))
                            (builtin "One Step Simplification" (formula "79"))
                           (rule "Class_invariant_axiom_for_org_bouncycastle_math_ec_ECPoint" (formula "79"))
                           (rule "closeTrue" (formula "79"))
                        )
                     )
                     (branch "result_228_A_1.value@heapAtPre_A«anonHeapFunction» ≥ 0 FALSE"
                        (rule "inEqSimp_geqRight" (formula "76"))
                        (rule "mul_literals" (formula "1") (term "1,0,0"))
                        (rule "add_literals" (formula "1") (term "0,0"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "1"))
                        (rule "mul_literals" (formula "1") (term "1"))
                        (rule "inEqSimp_contradEq3" (formula "28") (term "0") (ifseqformula "1"))
                        (rule "mul_literals" (formula "28") (term "1,0,0,0"))
                        (rule "add_zero_right" (formula "28") (term "0,0,0"))
                        (rule "qeq_literals" (formula "28") (term "0,0"))
                         (builtin "One Step Simplification" (formula "28"))
                        (rule "andLeft" (formula "28"))
                        (rule "andLeft" (formula "28"))
                        (rule "applyEq" (formula "32") (term "0,0") (ifseqformula "29"))
                        (rule "polySimp_mulComm0" (formula "32") (term "0"))
                        (rule "applyEq" (formula "30") (term "0") (ifseqformula "32"))
                        (rule "inEqSimp_homoInEq1" (formula "30"))
                        (rule "polySimp_mulComm0" (formula "30") (term "1,0"))
                        (rule "polySimp_rightDist" (formula "30") (term "1,0"))
                        (rule "polySimp_mulAssoc" (formula "30") (term "0,1,0"))
                        (rule "polySimp_mulComm0" (formula "30") (term "0,0,1,0"))
                        (rule "polySimp_mulLiterals" (formula "30") (term "0,1,0"))
                        (rule "polySimp_elimOne" (formula "30") (term "0,1,0"))
                        (rule "polySimp_addAssoc" (formula "30") (term "0"))
                        (rule "polySimp_addComm1" (formula "30") (term "0,0"))
                        (rule "polySimp_pullOutFactor2b" (formula "30") (term "0,0,0"))
                        (rule "add_literals" (formula "30") (term "1,1,0,0,0"))
                        (rule "times_zero_1" (formula "30") (term "1,0,0,0"))
                        (rule "add_literals" (formula "30") (term "0,0,0"))
                        (rule "applyEq" (formula "28") (term "0") (ifseqformula "32"))
                        (rule "inEqSimp_homoInEq0" (formula "28"))
                        (rule "polySimp_mulComm0" (formula "28") (term "1,0"))
                        (rule "polySimp_rightDist" (formula "28") (term "1,0"))
                        (rule "polySimp_mulAssoc" (formula "28") (term "0,1,0"))
                        (rule "polySimp_mulComm0" (formula "28") (term "0,0,1,0"))
                        (rule "polySimp_mulLiterals" (formula "28") (term "0,1,0"))
                        (rule "polySimp_elimOne" (formula "28") (term "0,1,0"))
                        (rule "polySimp_addAssoc" (formula "28") (term "0"))
                        (rule "polySimp_pullOutFactor2" (formula "28") (term "0,0"))
                        (rule "add_literals" (formula "28") (term "1,0,0"))
                        (rule "times_zero_1" (formula "28") (term "0,0"))
                        (rule "add_zero_left" (formula "28") (term "0"))
                        (rule "applyEq" (formula "31") (term "0,1") (ifseqformula "29"))
                        (rule "inEqSimp_sepNegMonomial0" (formula "30"))
                        (rule "polySimp_mulLiterals" (formula "30") (term "0"))
                        (rule "polySimp_elimOne" (formula "30") (term "0"))
                        (rule "inEqSimp_invertInEq1" (formula "28"))
                        (rule "mul_literals" (formula "28") (term "1"))
                        (rule "polySimp_mulLiterals" (formula "28") (term "0"))
                        (rule "polySimp_elimOne" (formula "28") (term "0"))
                        (rule "inEqSimp_exactShadow3" (formula "30") (ifseqformula "28"))
                        (rule "add_zero_right" (formula "30") (term "0"))
                        (rule "polySimp_rightDist" (formula "30") (term "0"))
                        (rule "mul_literals" (formula "30") (term "0,0"))
                        (rule "inEqSimp_sepNegMonomial1" (formula "30"))
                        (rule "polySimp_mulLiterals" (formula "30") (term "0"))
                        (rule "polySimp_elimOne" (formula "30") (term "0"))
                        (rule "Use_information_flow_contract_for_compareTo_325434207" (formula "20") (ifseqformula "20"))
                         (builtin "One Step Simplification" (formula "20") (ifInst ""  (formula "93")) (ifInst ""  (formula "93")))
                        (rule "true_left" (formula "20"))
                        (rule "Use_information_flow_contract_for_getOrder_757678341" (formula "61") (ifseqformula "26"))
                        (rule "replace_known_left" (formula "61") (term "1,1") (ifseqformula "8"))
                         (builtin "One Step Simplification" (formula "61"))
                        (rule "true_left" (formula "61"))
                        (rule "Use_information_flow_contract_for_multiply_1272441881" (formula "73") (ifseqformula "38"))
                        (rule "replaceKnownSelect_taclet21_12" (formula "73") (term "0,1,1"))
                        (rule "replaceKnownSelect_taclet21_11" (formula "73") (term "1,1,1"))
                        (rule "replaceKnownAuxiliaryConstant_taclet010021_18" (formula "73") (term "0,1,1"))
                        (rule "replaceKnownAuxiliaryConstant_taclet0010021_19" (formula "73") (term "1,1,1"))
                        (rule "replaceKnownSelect_taclet21_8" (formula "73") (term "1,1,0,1"))
                        (rule "replaceKnownSelect_taclet21_9" (formula "73") (term "0,1,0,1"))
                        (rule "replaceKnownAuxiliaryConstant_taclet21_10" (formula "73") (term "1,1,0,1"))
                         (builtin "One Step Simplification" (formula "73") (ifInst ""  (formula "84")) (ifInst ""  (formula "83")) (ifInst ""  (formula "101")))
                        (rule "pullOutSelect" (formula "73") (term "0,0,1") (inst "selectSK=org_bouncycastle_math_ec_ECPoint_value_4"))
                        (rule "simplifySelectOfAnonEQ" (formula "73") (ifseqformula "63"))
                         (builtin "One Step Simplification" (formula "73") (ifInst ""  (formula "99")) (ifInst ""  (formula "50")))
                        (rule "applyEqReverse" (formula "74") (term "0,0,1") (ifseqformula "73"))
                        (rule "hideAuxiliaryEq" (formula "73"))
                        (rule "eqSymm" (formula "73") (term "0,1"))
                        (rule "applyEq" (formula "73") (term "1,0,1") (ifseqformula "6"))
                        (rule "pullOutSelect" (formula "73") (term "0,0,1") (inst "selectSK=org_bouncycastle_math_ec_ECPoint_value_5"))
                        (rule "simplifySelectOfAnonEQ" (formula "73") (ifseqformula "27"))
                         (builtin "One Step Simplification" (formula "73") (ifInst ""  (formula "98")) (ifInst ""  (formula "15")))
                        (rule "applyEqReverse" (formula "74") (term "0,0,1") (ifseqformula "73"))
                         (builtin "One Step Simplification" (formula "74"))
                        (rule "notLeft" (formula "74"))
                        (rule "hideAuxiliaryEq" (formula "73"))
                        (rule "Class_invariant_axiom_for_org_bouncycastle_math_ec_ECPoint" (formula "79") (term "1"))
                         (builtin "One Step Simplification" (formula "79"))
                        (rule "Class_invariant_axiom_for_org_bouncycastle_math_ec_ECPoint" (formula "79"))
                        (rule "closeTrue" (formula "79"))
                     )
                  )
                  (branch " resultAtPost_226_A.<created>@anon_heap_mod«anonHeapFunction» = TRUE FALSE"
                     (rule "applyEqReverse" (formula "105") (term "1") (ifseqformula "9"))
                     (rule "hideAuxiliaryEq" (formula "9"))
                     (rule "replace_known_right" (formula "40") (term "0") (ifseqformula "82"))
                      (builtin "One Step Simplification" (formula "40"))
                     (rule "commute_or" (formula "3") (term "0,0,0,0"))
                     (rule "commute_or" (formula "3") (term "0,1,0,0,0"))
                     (rule "commute_or" (formula "2") (term "0,0,0,0"))
                     (rule "onlyCreatedObjectsAreReferenced" (formula "13") (term "1,0") (ifseqformula "21"))
                     (rule "replace_known_left" (formula "13") (term "1") (ifseqformula "14"))
                      (builtin "One Step Simplification" (formula "13") (ifInst ""  (formula "91")))
                     (rule "true_left" (formula "13"))
                     (rule "onlyCreatedObjectsAreReferenced" (formula "30") (term "2") (ifseqformula "21"))
                     (rule "replace_known_left" (formula "30") (term "1") (ifseqformula "15"))
                      (builtin "One Step Simplification" (formula "30") (ifInst ""  (formula "95")))
                     (rule "true_left" (formula "30"))
                     (rule "onlyCreatedObjectsAreReferenced" (formula "13") (term "1,1,0") (ifseqformula "21"))
                     (rule "replace_known_left" (formula "13") (term "1") (ifseqformula "15"))
                      (builtin "One Step Simplification" (formula "13") (ifInst ""  (formula "93")))
                     (rule "true_left" (formula "13"))
                     (rule "onlyCreatedObjectsAreReferenced" (formula "48") (term "1,0") (ifseqformula "55"))
                     (rule "replace_known_left" (formula "48") (term "1") (ifseqformula "49"))
                      (builtin "One Step Simplification" (formula "48") (ifInst ""  (formula "94")))
                     (rule "true_left" (formula "48"))
                     (rule "onlyCreatedObjectsAreReferenced" (formula "47") (term "1,0") (ifseqformula "55"))
                     (rule "replace_known_left" (formula "47") (term "1") (ifseqformula "48"))
                      (builtin "One Step Simplification" (formula "47") (ifInst ""  (formula "92")))
                     (rule "true_left" (formula "47"))
                     (rule "onlyCreatedObjectsAreReferenced" (formula "97") (term "0") (ifseqformula "55"))
                     (rule "replace_known_left" (formula "1") (term "1") (ifseqformula "61"))
                      (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "98")))
                     (rule "true_left" (formula "1"))
                     (rule "onlyCreatedObjectsAreReferenced" (formula "26") (term "1,0") (ifseqformula "21"))
                     (rule "replace_known_left" (formula "26") (term "1") (ifseqformula "27"))
                      (builtin "One Step Simplification" (formula "26") (ifInst ""  (formula "97")))
                     (rule "true_left" (formula "26"))
                     (rule "onlyCreatedObjectsAreReferenced" (formula "64") (term "2") (ifseqformula "55"))
                     (rule "replace_known_left" (formula "64") (term "1") (ifseqformula "49"))
                      (builtin "One Step Simplification" (formula "64") (ifInst ""  (formula "96")))
                     (rule "true_left" (formula "64"))
                     (rule "commute_or" (formula "2") (term "0,1,0,0,0"))
                     (rule "commute_or" (formula "1") (term "0,0,0,0"))
                     (rule "commute_or" (formula "1") (term "0,1,0,0,0"))
                     (rule "commute_or_2" (formula "4") (term "0,0,0"))
                     (rule "commute_or_2" (formula "3") (term "0,0,0"))
                     (rule "commute_and" (formula "32") (term "0,1"))
                     (rule "commute_or_2" (formula "6") (term "0,0,0,0,0"))
                      (builtin "One Step Simplification" (formula "6"))
                     (rule "commute_or_2" (formula "2") (term "0,0,0"))
                     (rule "commute_or_2" (formula "1") (term "0,0,0"))
                     (rule "shift_paren_or" (formula "5") (term "0,0,0,0,0"))
                     (rule "commute_or_2" (formula "6") (term "0,0,0,0"))
                     (rule "shift_paren_or" (formula "4") (term "0,0,0,0"))
                     (rule "commute_or_2" (formula "3") (term "1,0,0,0,0"))
                     (rule "commute_or_2" (formula "2") (term "1,0,0,0,0"))
                     (rule "shift_paren_or" (formula "1") (term "0,0,0,0"))
                     (rule "commute_or_2" (formula "5") (term "0,0,0,0,0"))
                      (builtin "One Step Simplification" (formula "5"))
                     (rule "commute_or_2" (formula "5") (term "0,0,0,0"))
                     (rule "shift_paren_or" (formula "3") (term "0,0,0,0"))
                     (rule "shift_paren_or" (formula "2") (term "0,0,0,0"))
                     (rule "cnf_rightDist" (formula "6") (term "0,0,0"))
                     (rule "distr_forallAnd" (formula "6") (term "0,0"))
                     (rule "distr_forallAnd" (formula "6") (term "0"))
                     (rule "distr_forallAnd" (formula "6"))
                     (rule "andLeft" (formula "6"))
                     (rule "commute_or_2" (formula "6") (term "0,0,0"))
                      (builtin "One Step Simplification" (formula "6"))
                     (rule "eqSymm" (formula "6") (term "1,0,0,0,0"))
                     (rule "castedGetAny" (formula "6") (term "1,0,0,1,0,0,0"))
                     (rule "castedGetAny" (formula "6") (term "0,0,0,0,0,0"))
                     (rule "castedGetAny" (formula "6") (term "0,1,0,0,0,0"))
                      (builtin "One Step Simplification" (formula "6"))
                     (rule "true_left" (formula "6"))
                     (rule "shift_paren_or" (formula "6") (term "0,0,0"))
                      (builtin "One Step Simplification" (formula "6"))
                     (rule "eqSymm" (formula "6") (term "1,1,0,0,0"))
                     (rule "castedGetAny" (formula "6") (term "0,0,1,0,0,0"))
                     (rule "castedGetAny" (formula "6") (term "0,0,0,0,0,0"))
                     (rule "castedGetAny" (formula "6") (term "0,1,1,0,0,0"))
                      (builtin "One Step Simplification" (formula "6"))
                     (rule "true_left" (formula "6"))
                     (rule "commute_and" (formula "4") (term "1,0,0,0"))
                     (rule "commute_and" (formula "3") (term "1,0,0,0"))
                     (rule "commute_and" (formula "2") (term "1,0,0,0"))
                     (rule "cnf_rightDist" (formula "5") (term "0,0,0"))
                     (rule "distr_forallAnd" (formula "5") (term "0,0"))
                     (rule "distr_forallAnd" (formula "5") (term "0"))
                     (rule "distr_forallAnd" (formula "5"))
                     (rule "andLeft" (formula "5"))
                     (rule "commute_or_2" (formula "5") (term "0,0,0"))
                      (builtin "One Step Simplification" (formula "5"))
                     (rule "eqSymm" (formula "5") (term "1,0,0,0,0"))
                     (rule "castedGetAny" (formula "5") (term "1,0,0,1,0,0,0"))
                     (rule "castedGetAny" (formula "5") (term "0,0,0,0,0,0"))
                     (rule "castedGetAny" (formula "5") (term "0,1,0,0,0,0"))
                      (builtin "One Step Simplification" (formula "5"))
                     (rule "true_left" (formula "5"))
                     (rule "commute_and" (formula "1") (term "1,0,0,0"))
                     (rule "shift_paren_or" (formula "5") (term "0,0,0"))
                      (builtin "One Step Simplification" (formula "5"))
                     (rule "eqSymm" (formula "5") (term "1,1,0,0,0"))
                     (rule "castedGetAny" (formula "5") (term "0,0,1,0,0,0"))
                     (rule "castedGetAny" (formula "5") (term "0,0,0,0,0,0"))
                     (rule "castedGetAny" (formula "5") (term "0,1,1,0,0,0"))
                      (builtin "One Step Simplification" (formula "5"))
                     (rule "true_left" (formula "5"))
                     (rule "shift_paren_or" (formula "4") (term "0,0,0,0,0"))
                      (builtin "One Step Simplification" (formula "4"))
                     (rule "shift_paren_or" (formula "1") (term "0,0,0,0,0"))
                      (builtin "One Step Simplification" (formula "1"))
                     (rule "shift_paren_or" (formula "3") (term "0,0,0,0,0"))
                      (builtin "One Step Simplification" (formula "3"))
                     (rule "shift_paren_or" (formula "2") (term "0,0,0,0,0"))
                      (builtin "One Step Simplification" (formula "2"))
                     (rule "commute_or_2" (formula "4") (term "0,0,0,0"))
                     (rule "commute_or_2" (formula "1") (term "0,0,0,0"))
                     (rule "cnf_rightDist" (formula "3") (term "0,0,0"))
                     (rule "distr_forallAnd" (formula "3") (term "0,0"))
                     (rule "distr_forallAnd" (formula "3") (term "0"))
                     (rule "distr_forallAnd" (formula "3"))
                     (rule "andLeft" (formula "3"))
                     (rule "shift_paren_or" (formula "4") (term "0,0,0"))
                      (builtin "One Step Simplification" (formula "4"))
                     (rule "eqSymm" (formula "4") (term "1,1,0,0,0"))
                     (rule "castedGetAny" (formula "4") (term "0,0,0,0,0,0"))
                     (rule "castedGetAny" (formula "4") (term "0,0,1,0,0,0"))
                     (rule "castedGetAny" (formula "4") (term "0,1,1,0,0,0"))
                      (builtin "One Step Simplification" (formula "4"))
                     (rule "true_left" (formula "4"))
                     (rule "cnf_rightDist" (formula "2") (term "0,0,0"))
                     (rule "distr_forallAnd" (formula "2") (term "0,0"))
                     (rule "distr_forallAnd" (formula "2") (term "0"))
                     (rule "distr_forallAnd" (formula "2"))
                     (rule "andLeft" (formula "2"))
                     (rule "shift_paren_or" (formula "3") (term "0,0,0"))
                      (builtin "One Step Simplification" (formula "3"))
                     (rule "eqSymm" (formula "3") (term "1,1,0,0,0"))
                     (rule "castedGetAny" (formula "3") (term "0,0,0,0,0,0"))
                     (rule "castedGetAny" (formula "3") (term "0,0,1,0,0,0"))
                     (rule "castedGetAny" (formula "3") (term "0,1,1,0,0,0"))
                      (builtin "One Step Simplification" (formula "3"))
                     (rule "true_left" (formula "3"))
                     (rule "cnf_rightDist" (formula "4") (term "0,0,0"))
                     (rule "distr_forallAnd" (formula "4") (term "0,0"))
                     (rule "distr_forallAnd" (formula "4") (term "0"))
                     (rule "distr_forallAnd" (formula "4"))
                     (rule "andLeft" (formula "4"))
                     (rule "cnf_rightDist" (formula "1") (term "0,0,0"))
                     (rule "distr_forallAnd" (formula "1") (term "0,0"))
                     (rule "distr_forallAnd" (formula "1") (term "0"))
                     (rule "distr_forallAnd" (formula "1"))
                     (rule "andLeft" (formula "1"))
                     (rule "shift_paren_or" (formula "5") (term "0,0,0"))
                      (builtin "One Step Simplification" (formula "5"))
                     (rule "eqSymm" (formula "5") (term "1,1,0,0,0"))
                     (rule "castedGetAny" (formula "5") (term "0,0,0,0,0,0"))
                     (rule "castedGetAny" (formula "5") (term "0,0,1,0,0,0"))
                     (rule "castedGetAny" (formula "5") (term "0,1,1,0,0,0"))
                      (builtin "One Step Simplification" (formula "5"))
                     (rule "true_left" (formula "5"))
                     (rule "cnf_rightDist" (formula "3") (term "0,0,0"))
                     (rule "distr_forallAnd" (formula "3") (term "0,0"))
                     (rule "distr_forallAnd" (formula "3") (term "0"))
                     (rule "distr_forallAnd" (formula "3"))
                     (rule "andLeft" (formula "3"))
                     (rule "cnf_rightDist" (formula "2") (term "0,0,0"))
                     (rule "distr_forallAnd" (formula "2") (term "0,0"))
                     (rule "distr_forallAnd" (formula "2") (term "0"))
                     (rule "distr_forallAnd" (formula "2"))
                     (rule "andLeft" (formula "2"))
                     (rule "commute_or_2" (formula "2") (term "0,0,0"))
                      (builtin "One Step Simplification" (formula "2"))
                     (rule "eqSymm" (formula "2") (term "1,0,0,0,0"))
                     (rule "castedGetAny" (formula "2") (term "1,0,0,1,0,0,0"))
                     (rule "castedGetAny" (formula "2") (term "0,0,0,0,0,0"))
                     (rule "castedGetAny" (formula "2") (term "0,1,0,0,0,0"))
                      (builtin "One Step Simplification" (formula "2"))
                     (rule "true_left" (formula "2"))
                     (rule "shift_paren_or" (formula "3") (term "0,0,0"))
                      (builtin "One Step Simplification" (formula "3"))
                     (rule "eqSymm" (formula "3") (term "1,1,0,0,0"))
                     (rule "castedGetAny" (formula "3") (term "0,0,1,0,0,0"))
                     (rule "castedGetAny" (formula "3") (term "1,0,0,0,0,0,0"))
                     (rule "castedGetAny" (formula "3") (term "0,1,1,0,0,0"))
                      (builtin "One Step Simplification" (formula "3"))
                     (rule "true_left" (formula "3"))
                     (rule "shift_paren_or" (formula "2") (term "0,0,0"))
                      (builtin "One Step Simplification" (formula "2"))
                     (rule "eqSymm" (formula "2") (term "1,1,0,0,0"))
                     (rule "castedGetAny" (formula "2") (term "1,0,0,0,0,0,0"))
                     (rule "castedGetAny" (formula "2") (term "0,0,1,0,0,0"))
                     (rule "castedGetAny" (formula "2") (term "0,1,1,0,0,0"))
                      (builtin "One Step Simplification" (formula "2"))
                     (rule "true_left" (formula "2"))
                     (rule "cnf_rightDist" (formula "2") (term "0,0,0"))
                     (rule "distr_forallAnd" (formula "2") (term "0,0"))
                     (rule "distr_forallAnd" (formula "2") (term "0"))
                     (rule "distr_forallAnd" (formula "2"))
                     (rule "andLeft" (formula "2"))
                     (rule "commute_or_2" (formula "2") (term "0,0,0"))
                      (builtin "One Step Simplification" (formula "2"))
                     (rule "eqSymm" (formula "2") (term "1,0,0,0,0"))
                     (rule "castedGetAny" (formula "2") (term "1,0,0,1,0,0,0"))
                     (rule "castedGetAny" (formula "2") (term "0,0,0,0,0,0"))
                     (rule "castedGetAny" (formula "2") (term "0,1,0,0,0,0"))
                      (builtin "One Step Simplification" (formula "2"))
                     (rule "true_left" (formula "2"))
                     (rule "cnf_rightDist" (formula "1") (term "0,0,0"))
                     (rule "distr_forallAnd" (formula "1") (term "0,0"))
                     (rule "distr_forallAnd" (formula "1") (term "0"))
                     (rule "distr_forallAnd" (formula "1"))
                     (rule "andLeft" (formula "1"))
                     (rule "ifthenelse_split_for" (formula "29") (term "1,1"))
                     (branch "result_228_A_1.value@heapAtPre_A«anonHeapFunction» ≥ 0 TRUE"
                        (rule "cnf_rightDist" (formula "30"))
                        (rule "andLeft" (formula "30"))
                        (rule "commute_or" (formula "31"))
                        (rule "cnf_rightDist" (formula "30"))
                        (rule "andLeft" (formula "30"))
                        (rule "commute_or" (formula "31"))
                        (rule "shift_paren_or" (formula "3") (term "0,0,0"))
                         (builtin "One Step Simplification" (formula "3"))
                        (rule "eqSymm" (formula "3") (term "1,1,0,0,0"))
                        (rule "castedGetAny" (formula "3") (term "1,0,0,0,0,0,0"))
                        (rule "castedGetAny" (formula "3") (term "0,0,1,0,0,0"))
                        (rule "castedGetAny" (formula "3") (term "0,1,1,0,0,0"))
                         (builtin "One Step Simplification" (formula "3"))
                        (rule "true_left" (formula "3"))
                        (rule "shift_paren_or" (formula "2") (term "0,0,0"))
                         (builtin "One Step Simplification" (formula "2"))
                        (rule "eqSymm" (formula "2") (term "1,1,0,0,0"))
                        (rule "castedGetAny" (formula "2") (term "0,0,1,0,0,0"))
                        (rule "castedGetAny" (formula "2") (term "1,0,0,0,0,0,0"))
                        (rule "castedGetAny" (formula "2") (term "0,1,1,0,0,0"))
                         (builtin "One Step Simplification" (formula "2"))
                        (rule "true_left" (formula "2"))
                        (rule "cnf_rightDist" (formula "1") (term "0,0,0"))
                        (rule "distr_forallAnd" (formula "1") (term "0,0"))
                        (rule "distr_forallAnd" (formula "1") (term "0"))
                        (rule "distr_forallAnd" (formula "1"))
                        (rule "andLeft" (formula "1"))
                        (rule "commute_or_2" (formula "1") (term "0,0,0"))
                         (builtin "One Step Simplification" (formula "1"))
                        (rule "eqSymm" (formula "1") (term "1,0,0,0,0"))
                        (rule "castedGetAny" (formula "1") (term "0,0,0,0,0,0"))
                        (rule "castedGetAny" (formula "1") (term "1,0,0,1,0,0,0"))
                        (rule "castedGetAny" (formula "1") (term "0,1,0,0,0,0"))
                         (builtin "One Step Simplification" (formula "1"))
                        (rule "true_left" (formula "1"))
                        (rule "shift_paren_or" (formula "1") (term "0,0,0"))
                         (builtin "One Step Simplification" (formula "1"))
                        (rule "eqSymm" (formula "1") (term "1,1,0,0,0"))
                        (rule "castedGetAny" (formula "1") (term "0,0,1,0,0,0"))
                        (rule "castedGetAny" (formula "1") (term "1,0,0,0,0,0,0"))
                        (rule "castedGetAny" (formula "1") (term "0,1,1,0,0,0"))
                         (builtin "One Step Simplification" (formula "1"))
                        (rule "true_left" (formula "1"))
                        (rule "cut_direct" (formula "27") (term "0"))
                        (branch "CUT: result_228_A_1.value@heapAtPre_A«anonHeapFunction» = 0 TRUE"
                            (builtin "One Step Simplification" (formula "28"))
                           (rule "true_left" (formula "28"))
                           (rule "replace_known_left" (formula "28") (term "0") (ifseqformula "27"))
                            (builtin "One Step Simplification" (formula "28"))
                           (rule "true_left" (formula "28"))
                           (rule "replace_known_left" (formula "28") (term "0") (ifseqformula "27"))
                            (builtin "One Step Simplification" (formula "28"))
                           (rule "true_left" (formula "28"))
                           (rule "applyEq" (formula "29") (term "1,0,0") (ifseqformula "27"))
                           (rule "polySimp_mulComm0" (formula "29") (term "0"))
                           (rule "applyEq" (formula "26") (term "0") (ifseqformula "27"))
                           (rule "qeq_literals" (formula "26"))
                           (rule "true_left" (formula "26"))
                           (rule "applyEq" (formula "27") (term "1,0") (ifseqformula "26"))
                           (rule "eqSymm" (formula "27"))
                           (rule "polySimp_homoEq" (formula "27"))
                           (rule "polySimp_mulLiterals" (formula "27") (term "1,0"))
                           (rule "polySimp_elimOne" (formula "27") (term "1,0"))
                           (rule "applyEq" (formula "56") (term "1") (ifseqformula "26"))
                           (rule "applyEq" (formula "22") (term "1") (ifseqformula "26"))
                           (rule "applyEq" (formula "6") (term "1") (ifseqformula "26"))
                           (rule "applyEq" (formula "28") (term "0,0") (ifseqformula "26"))
                           (rule "times_zero_2" (formula "28") (term "0"))
                           (rule "polySimp_homoEq" (formula "28"))
                           (rule "mul_literals" (formula "28") (term "1,0"))
                           (rule "add_zero_right" (formula "28") (term "0"))
                           (rule "applyEq" (formula "27") (term "1,1,0") (ifseqformula "26"))
                           (rule "polySimp_addComm0" (formula "27") (term "0"))
                           (rule "polySimp_sepPosMonomial" (formula "28"))
                           (rule "polySimp_mulLiterals" (formula "28") (term "1"))
                           (rule "polySimp_elimOne" (formula "28") (term "1"))
                           (rule "applyEq" (formula "65") (term "1") (ifseqformula "28"))
                           (rule "polySimp_sepPosMonomial" (formula "27"))
                           (rule "jdiv_axiom" (formula "27") (term "0"))
                           (rule "eqSymm" (formula "27"))
                           (rule "applyEq" (formula "27") (term "1") (ifseqformula "28"))
                            (builtin "One Step Simplification" (formula "27"))
                           (rule "eqSymm" (formula "27") (term "1"))
                           (rule "polySimp_homoEq" (formula "27") (term "1"))
                           (rule "polySimp_mulLiterals" (formula "27") (term "1,0,1"))
                           (rule "polySimp_elimOne" (formula "27") (term "1,0,1"))
                           (rule "polySimp_sepPosMonomial" (formula "27") (term "1"))
                           (rule "inEqSimp_contradInEq0" (formula "27") (term "0,0") (ifseqformula "3"))
                           (rule "qeq_literals" (formula "27") (term "0,0,0"))
                            (builtin "One Step Simplification" (formula "27"))
                           (rule "true_left" (formula "27"))
                           (rule "div_axiom" (formula "27") (term "0,1") (inst "quotient=quotient_1"))
                            (builtin "One Step Simplification" (formula "27"))
                           (rule "true_left" (formula "27"))
                           (rule "Use_information_flow_contract_for_compareTo_325434207" (formula "18") (ifseqformula "18"))
                            (builtin "One Step Simplification" (formula "18") (ifInst ""  (formula "91")) (ifInst ""  (formula "91")))
                           (rule "true_left" (formula "18"))
                           (rule "Use_information_flow_contract_for_getOrder_757678341" (formula "58") (ifseqformula "24"))
                           (rule "applyEq" (formula "58") (term "0,0,1") (ifseqformula "56"))
                           (rule "eqSymm" (formula "58") (term "0,1"))
                           (rule "replace_known_left" (formula "58") (term "0,1") (ifseqformula "22"))
                            (builtin "One Step Simplification" (formula "58"))
                           (rule "applyEq" (formula "58") (term "0,1") (ifseqformula "6"))
                           (rule "eqSymm" (formula "58") (term "1"))
                           (rule "replace_known_left" (formula "58") (term "1") (ifseqformula "26"))
                            (builtin "One Step Simplification" (formula "58"))
                           (rule "true_left" (formula "58"))
                           (rule "Use_information_flow_contract_for_multiply_1272441881_0" (formula "70") (ifseqformula "35"))
                           (rule "replaceKnownSelect_taclet21_11" (formula "70") (term "1,1,1"))
                           (rule "replaceKnownSelect_taclet21_12" (formula "70") (term "0,1,1"))
                           (rule "replaceKnownAuxiliaryConstant_taclet1010021_19" (formula "70") (term "1,1,1"))
                           (rule "replaceKnownAuxiliaryConstant_taclet010021_18" (formula "70") (term "0,1,1"))
                           (rule "replaceKnownSelect_taclet21_8" (formula "70") (term "1,1,0,1"))
                           (rule "replaceKnownSelect_taclet21_9" (formula "70") (term "0,1,0,1"))
                           (rule "replaceKnownAuxiliaryConstant_taclet21_10" (formula "70") (term "1,1,0,1"))
                            (builtin "One Step Simplification" (formula "70") (ifInst ""  (formula "82")) (ifInst ""  (formula "81")) (ifInst ""  (formula "99")))
                           (rule "pullOutSelect" (formula "70") (term "1,0,1") (inst "selectSK=org_bouncycastle_math_ec_ECPoint_value_4"))
                           (rule "simplifySelectOfAnonEQ" (formula "70") (ifseqformula "25"))
                            (builtin "One Step Simplification" (formula "70") (ifInst ""  (formula "96")) (ifInst ""  (formula "13")))
                           (rule "applyEqReverse" (formula "71") (term "1,0,1") (ifseqformula "70"))
                           (rule "hideAuxiliaryEq" (formula "70"))
                           (rule "pullOutSelect" (formula "70") (term "0,0,1") (inst "selectSK=org_bouncycastle_math_ec_ECPoint_value_5"))
                           (rule "simplifySelectOfAnonEQ" (formula "70") (ifseqformula "60"))
                            (builtin "One Step Simplification" (formula "70") (ifInst ""  (formula "97")) (ifInst ""  (formula "47")))
                           (rule "applyEqReverse" (formula "71") (term "0,0,1") (ifseqformula "70"))
                           (rule "hideAuxiliaryEq" (formula "70"))
                           (rule "replace_known_left" (formula "70") (term "0,1") (ifseqformula "4"))
                            (builtin "One Step Simplification" (formula "70"))
                           (rule "notLeft" (formula "70"))
                           (rule "Class_invariant_axiom_for_org_bouncycastle_math_ec_ECPoint" (formula "76") (term "1"))
                            (builtin "One Step Simplification" (formula "76"))
                           (rule "Class_invariant_axiom_for_org_bouncycastle_math_ec_ECPoint" (formula "76"))
                           (rule "closeTrue" (formula "76"))
                        )
                        (branch "CUT: result_228_A_1.value@heapAtPre_A«anonHeapFunction» = 0 FALSE"
                            (builtin "One Step Simplification" (formula "27"))
                           (rule "replace_known_right" (formula "29") (term "0") (ifseqformula "79"))
                            (builtin "One Step Simplification" (formula "29"))
                           (rule "replace_known_right" (formula "28") (term "0") (ifseqformula "79"))
                            (builtin "One Step Simplification" (formula "28"))
                           (rule "applyEq" (formula "31") (term "0,0") (ifseqformula "28"))
                           (rule "polySimp_mulComm0" (formula "31") (term "0"))
                           (rule "applyEq" (formula "27") (term "0") (ifseqformula "31"))
                           (rule "inEqSimp_homoInEq0" (formula "27"))
                           (rule "polySimp_mulComm0" (formula "27") (term "1,0"))
                           (rule "polySimp_rightDist" (formula "27") (term "1,0"))
                           (rule "polySimp_mulAssoc" (formula "27") (term "0,1,0"))
                           (rule "polySimp_mulComm0" (formula "27") (term "0,0,1,0"))
                           (rule "polySimp_mulLiterals" (formula "27") (term "0,1,0"))
                           (rule "polySimp_elimOne" (formula "27") (term "0,1,0"))
                           (rule "polySimp_addAssoc" (formula "27") (term "0"))
                           (rule "polySimp_pullOutFactor2" (formula "27") (term "0,0"))
                           (rule "add_literals" (formula "27") (term "1,0,0"))
                           (rule "times_zero_1" (formula "27") (term "0,0"))
                           (rule "add_zero_left" (formula "27") (term "0"))
                           (rule "applyEq" (formula "29") (term "0") (ifseqformula "31"))
                           (rule "inEqSimp_homoInEq1" (formula "29"))
                           (rule "polySimp_mulComm0" (formula "29") (term "1,0"))
                           (rule "polySimp_rightDist" (formula "29") (term "1,0"))
                           (rule "polySimp_mulAssoc" (formula "29") (term "0,1,0"))
                           (rule "polySimp_mulComm0" (formula "29") (term "0,0,1,0"))
                           (rule "polySimp_mulLiterals" (formula "29") (term "0,1,0"))
                           (rule "polySimp_elimOne" (formula "29") (term "0,1,0"))
                           (rule "polySimp_addAssoc" (formula "29") (term "0"))
                           (rule "polySimp_addComm1" (formula "29") (term "0,0"))
                           (rule "polySimp_pullOutFactor2b" (formula "29") (term "0,0,0"))
                           (rule "add_literals" (formula "29") (term "1,1,0,0,0"))
                           (rule "times_zero_1" (formula "29") (term "1,0,0,0"))
                           (rule "add_zero_right" (formula "29") (term "0,0,0"))
                           (rule "applyEq" (formula "30") (term "0,1") (ifseqformula "28"))
                           (rule "inEqSimp_invertInEq1" (formula "27"))
                           (rule "polySimp_mulLiterals" (formula "27") (term "0"))
                           (rule "times_zero_2" (formula "27") (term "1"))
                           (rule "polySimp_elimOne" (formula "27") (term "0"))
                           (rule "inEqSimp_sepNegMonomial0" (formula "29"))
                           (rule "polySimp_mulLiterals" (formula "29") (term "0"))
                           (rule "polySimp_elimOne" (formula "29") (term "0"))
                           (rule "inEqSimp_strengthen1" (formula "26") (ifseqformula "79"))
                           (rule "add_literals" (formula "26") (term "1"))
                           (rule "inEqSimp_contradEq7" (formula "79") (ifseqformula "26"))
                           (rule "times_zero_1" (formula "79") (term "1,0,0"))
                           (rule "add_literals" (formula "79") (term "0,0"))
                           (rule "leq_literals" (formula "79") (term "0"))
                            (builtin "One Step Simplification" (formula "79"))
                           (rule "false_right" (formula "79"))
                           (rule "inEqSimp_exactShadow3" (formula "29") (ifseqformula "27"))
                           (rule "add_zero_right" (formula "29") (term "0"))
                           (rule "polySimp_rightDist" (formula "29") (term "0"))
                           (rule "polySimp_mulLiterals" (formula "29") (term "1,0"))
                           (rule "mul_literals" (formula "29") (term "0,0"))
                           (rule "polySimp_elimOne" (formula "29") (term "1,0"))
                           (rule "inEqSimp_sepPosMonomial1" (formula "29"))
                           (rule "mul_literals" (formula "29") (term "1"))
                           (rule "Use_information_flow_contract_for_compareTo_325434207" (formula "18") (ifseqformula "18"))
                            (builtin "One Step Simplification" (formula "18") (ifInst ""  (formula "94")) (ifInst ""  (formula "94")))
                           (rule "true_left" (formula "18"))
                           (rule "Use_information_flow_contract_for_getOrder_757678341" (formula "61") (ifseqformula "24"))
                           (rule "replace_known_left" (formula "61") (term "1,1") (ifseqformula "6"))
                            (builtin "One Step Simplification" (formula "61"))
                           (rule "true_left" (formula "61"))
                           (rule "Use_information_flow_contract_for_multiply_1272441881" (formula "73") (ifseqformula "38"))
                           (rule "replaceKnownSelect_taclet21_12" (formula "73") (term "0,1,1"))
                           (rule "replaceKnownSelect_taclet21_11" (formula "73") (term "1,1,1"))
                           (rule "replaceKnownAuxiliaryConstant_taclet010021_18" (formula "73") (term "0,1,1"))
                           (rule "replaceKnownAuxiliaryConstant_taclet1010021_19" (formula "73") (term "1,1,1"))
                           (rule "replaceKnownSelect_taclet21_9" (formula "73") (term "0,1,0,1"))
                           (rule "replaceKnownSelect_taclet21_8" (formula "73") (term "1,1,0,1"))
                           (rule "replaceKnownAuxiliaryConstant_taclet021_15" (formula "73") (term "0,1,0,1"))
                           (rule "replaceKnownAuxiliaryConstant_taclet21_10" (formula "73") (term "1,1,0,1"))
                           (rule "replaceKnownAuxiliaryConstant_taclet021_15" (formula "73") (term "1,1,0,1"))
                            (builtin "One Step Simplification" (formula "73") (ifInst ""  (formula "85")) (ifInst ""  (formula "84")) (ifInst ""  (formula "102")))
                           (rule "pullOutSelect" (formula "73") (term "1,0,1") (inst "selectSK=org_bouncycastle_math_ec_ECPoint_value_4"))
                           (rule "simplifySelectOfAnonEQ" (formula "73") (ifseqformula "25"))
                            (builtin "One Step Simplification" (formula "73") (ifInst ""  (formula "99")) (ifInst ""  (formula "13")))
                           (rule "applyEqReverse" (formula "74") (term "1,0,1") (ifseqformula "73"))
                           (rule "hideAuxiliaryEq" (formula "73"))
                           (rule "pullOutSelect" (formula "73") (term "0,0,1") (inst "selectSK=org_bouncycastle_math_ec_ECPoint_value_5"))
                           (rule "simplifySelectOfAnonEQ" (formula "73") (ifseqformula "63"))
                            (builtin "One Step Simplification" (formula "73") (ifInst ""  (formula "100")) (ifInst ""  (formula "50")))
                           (rule "applyEqReverse" (formula "74") (term "0,0,1") (ifseqformula "73"))
                           (rule "hideAuxiliaryEq" (formula "73"))
                           (rule "replace_known_left" (formula "73") (term "0,1") (ifseqformula "4"))
                            (builtin "One Step Simplification" (formula "73"))
                           (rule "notLeft" (formula "73"))
                           (rule "Class_invariant_axiom_for_org_bouncycastle_math_ec_ECPoint" (formula "79") (term "0"))
                            (builtin "One Step Simplification" (formula "79"))
                           (rule "Class_invariant_axiom_for_org_bouncycastle_math_ec_ECPoint" (formula "79"))
                           (rule "closeTrue" (formula "79"))
                        )
                     )
                     (branch "result_228_A_1.value@heapAtPre_A«anonHeapFunction» ≥ 0 FALSE"
                        (rule "inEqSimp_geqRight" (formula "79"))
                        (rule "mul_literals" (formula "1") (term "1,0,0"))
                        (rule "add_literals" (formula "1") (term "0,0"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "1"))
                        (rule "mul_literals" (formula "1") (term "1"))
                        (rule "inEqSimp_contradEq3" (formula "30") (term "0") (ifseqformula "1"))
                        (rule "mul_literals" (formula "30") (term "1,0,0,0"))
                        (rule "add_literals" (formula "30") (term "0,0,0"))
                        (rule "qeq_literals" (formula "30") (term "0,0"))
                         (builtin "One Step Simplification" (formula "30"))
                        (rule "andLeft" (formula "30"))
                        (rule "andLeft" (formula "30"))
                        (rule "applyEq" (formula "34") (term "0,0") (ifseqformula "31"))
                        (rule "polySimp_mulComm0" (formula "34") (term "0"))
                        (rule "applyEq" (formula "32") (term "0") (ifseqformula "34"))
                        (rule "inEqSimp_homoInEq1" (formula "32"))
                        (rule "polySimp_mulComm0" (formula "32") (term "1,0"))
                        (rule "polySimp_rightDist" (formula "32") (term "1,0"))
                        (rule "polySimp_mulAssoc" (formula "32") (term "0,1,0"))
                        (rule "polySimp_mulComm0" (formula "32") (term "0,0,1,0"))
                        (rule "polySimp_mulLiterals" (formula "32") (term "0,1,0"))
                        (rule "polySimp_elimOne" (formula "32") (term "0,1,0"))
                        (rule "polySimp_addAssoc" (formula "32") (term "0"))
                        (rule "polySimp_addComm1" (formula "32") (term "0,0"))
                        (rule "polySimp_pullOutFactor2b" (formula "32") (term "0,0,0"))
                        (rule "add_literals" (formula "32") (term "1,1,0,0,0"))
                        (rule "times_zero_1" (formula "32") (term "1,0,0,0"))
                        (rule "add_zero_right" (formula "32") (term "0,0,0"))
                        (rule "applyEq" (formula "30") (term "0") (ifseqformula "34"))
                        (rule "inEqSimp_homoInEq0" (formula "30"))
                        (rule "polySimp_mulComm0" (formula "30") (term "1,0"))
                        (rule "polySimp_rightDist" (formula "30") (term "1,0"))
                        (rule "polySimp_mulAssoc" (formula "30") (term "0,1,0"))
                        (rule "polySimp_mulComm0" (formula "30") (term "0,0,1,0"))
                        (rule "polySimp_mulLiterals" (formula "30") (term "0,1,0"))
                        (rule "polySimp_elimOne" (formula "30") (term "0,1,0"))
                        (rule "polySimp_addAssoc" (formula "30") (term "0"))
                        (rule "polySimp_pullOutFactor2" (formula "30") (term "0,0"))
                        (rule "add_literals" (formula "30") (term "1,0,0"))
                        (rule "times_zero_1" (formula "30") (term "0,0"))
                        (rule "add_zero_left" (formula "30") (term "0"))
                        (rule "applyEq" (formula "33") (term "0,1") (ifseqformula "31"))
                        (rule "inEqSimp_sepNegMonomial0" (formula "32"))
                        (rule "polySimp_mulLiterals" (formula "32") (term "0"))
                        (rule "polySimp_elimOne" (formula "32") (term "0"))
                        (rule "inEqSimp_invertInEq1" (formula "30"))
                        (rule "polySimp_mulLiterals" (formula "30") (term "0"))
                        (rule "mul_literals" (formula "30") (term "1"))
                        (rule "polySimp_elimOne" (formula "30") (term "0"))
                        (rule "inEqSimp_exactShadow3" (formula "32") (ifseqformula "30"))
                        (rule "add_zero_right" (formula "32") (term "0"))
                        (rule "polySimp_rightDist" (formula "32") (term "0"))
                        (rule "mul_literals" (formula "32") (term "0,0"))
                        (rule "inEqSimp_sepNegMonomial1" (formula "32"))
                        (rule "polySimp_mulLiterals" (formula "32") (term "0"))
                        (rule "polySimp_elimOne" (formula "32") (term "0"))
                        (rule "shift_paren_or" (formula "4") (term "0,0,0"))
                         (builtin "One Step Simplification" (formula "4"))
                        (rule "eqSymm" (formula "4") (term "1,1,0,0,0"))
                        (rule "castedGetAny" (formula "4") (term "1,0,0,0,0,0,0"))
                        (rule "castedGetAny" (formula "4") (term "0,0,1,0,0,0"))
                        (rule "castedGetAny" (formula "4") (term "0,1,1,0,0,0"))
                         (builtin "One Step Simplification" (formula "4"))
                        (rule "true_left" (formula "4"))
                        (rule "shift_paren_or" (formula "3") (term "0,0,0"))
                         (builtin "One Step Simplification" (formula "3"))
                        (rule "eqSymm" (formula "3") (term "1,1,0,0,0"))
                        (rule "castedGetAny" (formula "3") (term "1,0,0,0,0,0,0"))
                        (rule "castedGetAny" (formula "3") (term "0,0,1,0,0,0"))
                        (rule "castedGetAny" (formula "3") (term "0,1,1,0,0,0"))
                         (builtin "One Step Simplification" (formula "3"))
                        (rule "true_left" (formula "3"))
                        (rule "cnf_rightDist" (formula "2") (term "0,0,0"))
                        (rule "distr_forallAnd" (formula "2") (term "0,0"))
                        (rule "distr_forallAnd" (formula "2") (term "0"))
                        (rule "distr_forallAnd" (formula "2"))
                        (rule "andLeft" (formula "2"))
                        (rule "commute_or_2" (formula "2") (term "0,0,0"))
                         (builtin "One Step Simplification" (formula "2"))
                        (rule "eqSymm" (formula "2") (term "1,0,0,0,0"))
                        (rule "castedGetAny" (formula "2") (term "1,0,0,1,0,0,0"))
                        (rule "castedGetAny" (formula "2") (term "0,0,0,0,0,0"))
                        (rule "castedGetAny" (formula "2") (term "0,1,0,0,0,0"))
                         (builtin "One Step Simplification" (formula "2"))
                        (rule "true_left" (formula "2"))
                        (rule "shift_paren_or" (formula "2") (term "0,0,0"))
                         (builtin "One Step Simplification" (formula "2"))
                        (rule "eqSymm" (formula "2") (term "1,1,0,0,0"))
                        (rule "castedGetAny" (formula "2") (term "0,0,1,0,0,0"))
                        (rule "castedGetAny" (formula "2") (term "1,0,0,0,0,0,0"))
                        (rule "castedGetAny" (formula "2") (term "0,1,1,0,0,0"))
                         (builtin "One Step Simplification" (formula "2"))
                        (rule "true_left" (formula "2"))
                        (rule "Use_information_flow_contract_for_compareTo_325434207" (formula "19") (ifseqformula "19"))
                         (builtin "One Step Simplification" (formula "19") (ifInst ""  (formula "94")) (ifInst ""  (formula "94")))
                        (rule "true_left" (formula "19"))
                        (rule "Use_information_flow_contract_for_getOrder_757678341" (formula "61") (ifseqformula "25"))
                        (rule "replace_known_left" (formula "61") (term "1,1") (ifseqformula "7"))
                         (builtin "One Step Simplification" (formula "61"))
                        (rule "true_left" (formula "61"))
                        (rule "Use_information_flow_contract_for_getOrder_757678341" (formula "61") (ifseqformula "61"))
                         (builtin "One Step Simplification" (formula "61"))
                        (rule "true_left" (formula "61"))
                        (rule "Use_information_flow_contract_for_compareTo_325434207" (formula "55") (ifseqformula "19"))
                        (rule "replace_known_left" (formula "55") (term "0,0,1") (ifseqformula "6"))
                         (builtin "One Step Simplification" (formula "55") (ifInst ""  (formula "95")) (ifInst ""  (formula "94")))
                        (rule "applyEqRigid" (formula "55") (term "0,0,1") (ifseqformula "57"))
                        (rule "eqSymm" (formula "55") (term "0,1"))
                        (rule "replace_known_left" (formula "55") (term "0,1") (ifseqformula "20"))
                         (builtin "One Step Simplification" (formula "55"))
                        (rule "Class_invariant_axiom_for_java_math_BigInteger" (formula "55") (term "1,0"))
                        (rule "replace_known_right" (formula "55") (term "0,0,1,0") (ifseqformula "94"))
                         (builtin "One Step Simplification" (formula "55") (ifInst ""  (formula "20")))
                        (rule "Class_invariant_axiom_for_java_math_BigInteger" (formula "55") (term "0"))
                        (rule "replace_known_left" (formula "55") (term "1,0") (ifseqformula "57"))
                         (builtin "One Step Simplification" (formula "55") (ifInst ""  (formula "95")))
                        (rule "applyEq" (formula "54") (term "0") (ifseqformula "55"))
                        (rule "applyEq" (formula "55") (term "4") (ifseqformula "54"))
                        (rule "applyEq" (formula "47") (term "0") (ifseqformula "54"))
                        (rule "Use_information_flow_contract_for_getOrder_757678341" (formula "25") (ifseqformula "25"))
                         (builtin "One Step Simplification" (formula "25"))
                        (rule "true_left" (formula "25"))
                        (rule "Use_information_flow_contract_for_getOrder_757678341" (formula "25") (ifseqformula "60"))
                        (rule "eqSymm" (formula "25") (term "1,1"))
                        (rule "eqSymm" (formula "25") (term "0,1"))
                        (rule "replace_known_left" (formula "25") (term "1,1") (ifseqformula "7"))
                         (builtin "One Step Simplification" (formula "25"))
                        (rule "true_left" (formula "25"))
                        (rule "Use_information_flow_contract_for_multiply_1272441881" (formula "72") (ifseqformula "38"))
                        (rule "replaceKnownSelect_taclet21_12" (formula "72") (term "0,1,1"))
                        (rule "replaceKnownSelect_taclet21_11" (formula "72") (term "1,1,1"))
                        (rule "replaceKnownAuxiliaryConstant_taclet010021_18" (formula "72") (term "0,1,1"))
                        (rule "replaceKnownAuxiliaryConstant_taclet1010021_19" (formula "72") (term "1,1,1"))
                        (rule "replaceKnownSelect_taclet21_8" (formula "72") (term "1,1,0,1"))
                        (rule "replaceKnownSelect_taclet21_9" (formula "72") (term "0,1,0,1"))
                        (rule "replaceKnownAuxiliaryConstant_taclet21_10" (formula "72") (term "1,1,0,1"))
                         (builtin "One Step Simplification" (formula "72") (ifInst ""  (formula "84")) (ifInst ""  (formula "83")) (ifInst ""  (formula "101")))
                        (rule "pullOutSelect" (formula "72") (term "0,0,1") (inst "selectSK=org_bouncycastle_math_ec_ECPoint_value_4"))
                        (rule "simplifySelectOfAnonEQ" (formula "72") (ifseqformula "62"))
                         (builtin "One Step Simplification" (formula "72") (ifInst ""  (formula "99")) (ifInst ""  (formula "49")))
                        (rule "applyEqReverse" (formula "73") (term "0,0,1") (ifseqformula "72"))
                        (rule "hideAuxiliaryEq" (formula "72"))
                        (rule "eqSymm" (formula "72") (term "0,1"))
                        (rule "applyEq" (formula "72") (term "1,0,1") (ifseqformula "5"))
                        (rule "pullOutSelect" (formula "72") (term "0,0,1") (inst "selectSK=org_bouncycastle_math_ec_ECPoint_value_5"))
                        (rule "simplifySelectOfAnonEQ" (formula "72") (ifseqformula "26"))
                         (builtin "One Step Simplification" (formula "72") (ifInst ""  (formula "98")) (ifInst ""  (formula "14")))
                        (rule "applyEqReverse" (formula "73") (term "0,0,1") (ifseqformula "72"))
                         (builtin "One Step Simplification" (formula "73"))
                        (rule "notLeft" (formula "73"))
                        (rule "hideAuxiliaryEq" (formula "72"))
                        (rule "Class_invariant_axiom_for_org_bouncycastle_math_ec_ECPoint" (formula "78") (term "1"))
                         (builtin "One Step Simplification" (formula "78"))
                        (rule "Class_invariant_axiom_for_org_bouncycastle_math_ec_ECPoint" (formula "78"))
                        (rule "closeTrue" (formula "78"))
                     )
                  )
               )
               (branch " resultAtPost_226_B.<created>@heapAtPre_B«anonHeapFunction» = TRUE FALSE"
                  (rule "applyEqReverse" (formula "2") (term "1,0") (ifseqformula "1"))
                  (rule "hideAuxiliaryEq" (formula "1"))
                  (rule "replace_known_right" (formula "1") (term "1,0,0") (ifseqformula "76"))
                   (builtin "One Step Simplification" (formula "1"))
                  (rule "replace_known_right" (formula "69") (term "1") (ifseqformula "76"))
                   (builtin "One Step Simplification" (formula "69"))
                  (rule "Class_axiom_0_in_de_polyas_core3_open_cred_CredTool" (inst "seq=seq") (inst "i=i") (inst "str=str") (inst "seq_0=seq_0") (inst "i_0=i_0") (inst "sv_heap=heapAtPre_B<<anonHeapFunction>>"))
                  (rule "andLeft" (formula "1"))
                  (rule "castedGetAny" (formula "1") (term "0,0,0,0,0"))
                  (rule "castedGetAny" (formula "2") (term "0,1,1,0,0,0"))
                  (rule "castedGetAny" (formula "1") (term "0,0,1,0,0"))
                  (rule "nnf_imp2or" (formula "1") (term "0,0"))
                   (builtin "One Step Simplification" (formula "1"))
                  (rule "nnf_imp2or" (formula "2") (term "0,0,0"))
                  (rule "nnf_notAnd" (formula "2") (term "0,0,0,0"))
                   (builtin "One Step Simplification" (formula "2"))
                  (rule "nnf_imp2or" (formula "2") (term "1,0,0,0"))
                  (rule "nnf_notOr" (formula "2") (term "0,0,0,0,0"))
                  (rule "nnf_notAnd" (formula "2") (term "0,1,0,0,0"))
                   (builtin "One Step Simplification" (formula "2"))
                  (rule "commute_or" (formula "2") (term "0,0,0,0"))
                  (rule "commute_or_2" (formula "2") (term "0,0,0"))
                  (rule "shift_paren_or" (formula "2") (term "0,0,0,0"))
                  (rule "commute_and" (formula "2") (term "1,0,0,0"))
                  (rule "commute_or" (formula "2") (term "1,0,0,0,0,0"))
                  (rule "shift_paren_or" (formula "2") (term "0,0,0,0,0"))
                   (builtin "One Step Simplification" (formula "2"))
                  (rule "commute_or_2" (formula "2") (term "0,0,0,0"))
                  (rule "cnf_rightDist" (formula "2") (term "0,0,0"))
                  (rule "distr_forallAnd" (formula "2") (term "0,0"))
                  (rule "distr_forallAnd" (formula "2") (term "0"))
                  (rule "distr_forallAnd" (formula "2"))
                  (rule "andLeft" (formula "2"))
                  (rule "commute_or_2" (formula "2") (term "0,0,0"))
                   (builtin "One Step Simplification" (formula "2"))
                  (rule "eqSymm" (formula "2") (term "1,0,0,0,0"))
                  (rule "castedGetAny" (formula "2") (term "1,0,0,1,0,0,0"))
                  (rule "castedGetAny" (formula "2") (term "0,0,0,0,0,0"))
                  (rule "castedGetAny" (formula "2") (term "0,1,0,0,0,0"))
                   (builtin "One Step Simplification" (formula "2"))
                  (rule "true_left" (formula "2"))
                  (rule "shift_paren_or" (formula "2") (term "0,0,0"))
                   (builtin "One Step Simplification" (formula "2"))
                  (rule "eqSymm" (formula "2") (term "1,1,0,0,0"))
                  (rule "castedGetAny" (formula "2") (term "0,0,1,0,0,0"))
                  (rule "castedGetAny" (formula "2") (term "0,0,0,0,0,0"))
                  (rule "castedGetAny" (formula "2") (term "0,1,1,0,0,0"))
                   (builtin "One Step Simplification" (formula "2"))
                  (rule "true_left" (formula "2"))
                  (rule "Class_axiom_0_in_de_polyas_core3_open_cred_CredTool" (inst "seq=seq") (inst "i=i") (inst "str=str") (inst "seq_0=seq_0") (inst "i_0=i_0") (inst "sv_heap=anon_heap_mod<<anonHeapFunction>>"))
                  (rule "andLeft" (formula "1"))
                  (rule "castedGetAny" (formula "2") (term "0,1,1,0,0,0"))
                  (rule "castedGetAny" (formula "1") (term "0,0,0,0,0"))
                  (rule "castedGetAny" (formula "1") (term "0,0,1,0,0"))
                  (rule "nnf_imp2or" (formula "1") (term "0,0"))
                   (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "3")))
                  (rule "true_left" (formula "1"))
                  (rule "nnf_imp2or" (formula "1") (term "0,0,0"))
                  (rule "nnf_imp2or" (formula "1") (term "1,0,0,0"))
                  (rule "nnf_notAnd" (formula "1") (term "0,0,0,0"))
                   (builtin "One Step Simplification" (formula "1"))
                  (rule "nnf_notAnd" (formula "1") (term "0,1,0,0,0"))
                   (builtin "One Step Simplification" (formula "1"))
                  (rule "nnf_notOr" (formula "1") (term "0,0,0,0,0"))
                  (rule "commute_or" (formula "1") (term "0,0,0,0"))
                  (rule "commute_or_2" (formula "1") (term "0,0,0"))
                  (rule "shift_paren_or" (formula "1") (term "0,0,0,0"))
                  (rule "commute_and" (formula "1") (term "1,0,0,0"))
                  (rule "commute_or" (formula "1") (term "1,0,0,0,0,0"))
                  (rule "shift_paren_or" (formula "1") (term "0,0,0,0,0"))
                   (builtin "One Step Simplification" (formula "1"))
                  (rule "commute_or_2" (formula "1") (term "0,0,0,0"))
                  (rule "cnf_rightDist" (formula "1") (term "0,0,0"))
                  (rule "distr_forallAnd" (formula "1") (term "0,0"))
                  (rule "distr_forallAnd" (formula "1") (term "0"))
                  (rule "distr_forallAnd" (formula "1"))
                  (rule "andLeft" (formula "1"))
                  (rule "commute_or_2" (formula "1") (term "0,0,0"))
                   (builtin "One Step Simplification" (formula "1"))
                  (rule "eqSymm" (formula "1") (term "1,0,0,0,0"))
                  (rule "castedGetAny" (formula "1") (term "1,0,0,1,0,0,0"))
                  (rule "castedGetAny" (formula "1") (term "0,0,0,0,0,0"))
                  (rule "castedGetAny" (formula "1") (term "0,1,0,0,0,0"))
                   (builtin "One Step Simplification" (formula "1"))
                  (rule "true_left" (formula "1"))
                  (rule "shift_paren_or" (formula "1") (term "0,0,0"))
                   (builtin "One Step Simplification" (formula "1"))
                  (rule "eqSymm" (formula "1") (term "1,1,0,0,0"))
                  (rule "castedGetAny" (formula "1") (term "0,0,1,0,0,0"))
                  (rule "castedGetAny" (formula "1") (term "0,0,0,0,0,0"))
                  (rule "castedGetAny" (formula "1") (term "0,1,1,0,0,0"))
                   (builtin "One Step Simplification" (formula "1"))
                  (rule "true_left" (formula "1"))
                  (rule "Class_axiom_0_in_de_polyas_core3_open_cred_CredTool" (inst "seq=seq") (inst "i=i") (inst "str=str") (inst "seq_0=seq_0") (inst "i_0=i_0") (inst "sv_heap=anon_heap_multiply<<anonHeapFunction>>"))
                  (rule "andLeft" (formula "1"))
                  (rule "castedGetAny" (formula "2") (term "0,1,1,0,0,0"))
                  (rule "castedGetAny" (formula "1") (term "0,0,0,0,0"))
                  (rule "castedGetAny" (formula "1") (term "0,0,1,0,0"))
                  (rule "nnf_imp2or" (formula "1") (term "0,0"))
                   (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "3")))
                  (rule "true_left" (formula "1"))
                  (rule "nnf_imp2or" (formula "1") (term "0,0,0"))
                  (rule "nnf_notAnd" (formula "1") (term "0,0,0,0"))
                   (builtin "One Step Simplification" (formula "1"))
                  (rule "nnf_imp2or" (formula "1") (term "1,0,0,0"))
                  (rule "nnf_notOr" (formula "1") (term "0,0,0,0,0"))
                  (rule "nnf_notAnd" (formula "1") (term "0,1,0,0,0"))
                   (builtin "One Step Simplification" (formula "1"))
                  (rule "commute_or" (formula "1") (term "0,0,0,0"))
                  (rule "commute_or_2" (formula "1") (term "0,0,0"))
                  (rule "shift_paren_or" (formula "1") (term "0,0,0,0"))
                  (rule "Class_axiom_0_in_de_polyas_core3_open_cred_CredTool" (inst "seq=seq") (inst "i=i") (inst "str=str") (inst "seq_0=seq_0") (inst "i_0=i_0") (inst "sv_heap=heapAtPre_A<<anonHeapFunction>>"))
                  (rule "andLeft" (formula "1"))
                  (rule "castedGetAny" (formula "1") (term "0,0,1,0,0"))
                  (rule "castedGetAny" (formula "1") (term "0,0,0,0,0"))
                  (rule "castedGetAny" (formula "2") (term "0,1,1,0,0,0"))
                  (rule "nnf_imp2or" (formula "1") (term "0,0"))
                   (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "4")))
                  (rule "true_left" (formula "1"))
                  (rule "nnf_imp2or" (formula "1") (term "0,0,0"))
                  (rule "nnf_imp2or" (formula "1") (term "1,0,0,0"))
                  (rule "nnf_notAnd" (formula "1") (term "0,0,0,0"))
                   (builtin "One Step Simplification" (formula "1"))
                  (rule "nnf_notAnd" (formula "1") (term "0,1,0,0,0"))
                   (builtin "One Step Simplification" (formula "1"))
                  (rule "nnf_notOr" (formula "1") (term "0,0,0,0,0"))
                  (rule "commute_or" (formula "1") (term "0,0,0,0"))
                  (rule "commute_or_2" (formula "1") (term "0,0,0"))
                  (rule "Class_axiom_0_in_de_polyas_core3_open_cred_CredTool" (inst "seq=seq") (inst "i=i") (inst "str=str") (inst "seq_0=seq_0") (inst "i_0=i_0") (inst "sv_heap=anon(heapAtPre_A<<anonHeapFunction>>,
     empty,
     anon_heap_mod<<anonHeapFunction>>)"))
                   (builtin "One Step Simplification" (formula "1"))
                  (rule "andLeft" (formula "1"))
                  (rule "castedGetAny" (formula "1") (term "0,0,0,0,0"))
                  (rule "castedGetAny" (formula "1") (term "0,0,1,0,0"))
                  (rule "castedGetAny" (formula "2") (term "0,1,1,0,0,0"))
                  (rule "nnf_imp2or" (formula "1") (term "0,0"))
                   (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "5")))
                  (rule "true_left" (formula "1"))
                  (rule "nnf_imp2or" (formula "1") (term "0,0,0"))
                  (rule "nnf_imp2or" (formula "1") (term "1,0,0,0"))
                  (rule "nnf_notAnd" (formula "1") (term "0,0,0,0"))
                   (builtin "One Step Simplification" (formula "1"))
                  (rule "nnf_notOr" (formula "1") (term "0,0,0,0,0"))
                  (rule "nnf_notAnd" (formula "1") (term "0,1,0,0,0"))
                   (builtin "One Step Simplification" (formula "1"))
                  (rule "nnf_notOr" (formula "1") (term "1,0,0,0,0,0"))
                  (rule "Class_axiom_0_in_de_polyas_core3_open_cred_CredTool" (inst "seq=seq") (inst "i=i") (inst "str=str") (inst "seq_0=seq_0") (inst "i_0=i_0") (inst "sv_heap=heapAfter_mod_A_0"))
                  (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "1,0,0,0,0,0,1") (ifseqformula "30"))
                  (rule "andLeft" (formula "1"))
                  (rule "castedGetAny" (formula "2") (term "0,1,1,0,0,0"))
                  (rule "castedGetAny" (formula "1") (term "0,0,0,0,0"))
                  (rule "castedGetAny" (formula "1") (term "0,0,1,0,0"))
                  (rule "nnf_imp2or" (formula "1") (term "0,0"))
                   (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "6")))
                  (rule "true_left" (formula "1"))
                  (rule "nnf_imp2or" (formula "1") (term "0,0,0"))
                  (rule "nnf_imp2or" (formula "1") (term "1,0,0,0"))
                  (rule "nnf_notAnd" (formula "1") (term "0,0,0,0"))
                   (builtin "One Step Simplification" (formula "1"))
                  (rule "nnf_notOr" (formula "1") (term "0,0,0,0,0"))
                  (rule "nnf_notAnd" (formula "1") (term "0,1,0,0,0"))
                   (builtin "One Step Simplification" (formula "1"))
                  (rule "nnf_notOr" (formula "1") (term "1,0,0,0,0,0"))
                  (rule "Class_axiom_0_in_de_polyas_core3_open_cred_CredTool" (inst "seq=seq") (inst "i=i") (inst "str=str") (inst "seq_0=seq_0") (inst "i_0=i_0") (inst "sv_heap=anon(heapAfter_mod_A_0,
     empty,
     anon_heap_multiply<<anonHeapFunction>>)"))
                   (builtin "One Step Simplification" (formula "1"))
                  (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,1,0,0,0,0,0,1") (ifseqformula "30"))
                  (rule "andLeft" (formula "1"))
                  (rule "castedGetAny" (formula "1") (term "0,0,0,0,0"))
                  (rule "castedGetAny" (formula "1") (term "0,0,1,0,0"))
                  (rule "castedGetAny" (formula "2") (term "0,1,1,0,0,0"))
                  (rule "nnf_imp2or" (formula "1") (term "0,0"))
                   (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "6")))
                  (rule "true_left" (formula "1"))
                  (rule "nnf_imp2or" (formula "1") (term "0,0,0"))
                  (rule "nnf_imp2or" (formula "1") (term "1,0,0,0"))
                  (rule "nnf_notAnd" (formula "1") (term "0,0,0,0"))
                   (builtin "One Step Simplification" (formula "1"))
                  (rule "nnf_notOr" (formula "1") (term "0,0,0,0,0"))
                  (rule "nnf_notAnd" (formula "1") (term "0,1,0,0,0"))
                   (builtin "One Step Simplification" (formula "1"))
                  (rule "nnf_notOr" (formula "1") (term "1,0,0,0,0,0"))
                  (rule "nnf_notOr" (formula "1") (term "0,1,0,0,0,0,0"))
                  (rule "Class_axiom_0_in_de_polyas_core3_open_cred_CredTool" (inst "seq=seq") (inst "i=i") (inst "str=str") (inst "seq_0=seq_0") (inst "i_0=i_0") (inst "sv_heap=heapAfter_multiply_A_1"))
                  (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "1,0,0,0,0,0,1") (ifseqformula "37"))
                  (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,1,0,0,0,0,0,1") (ifseqformula "31"))
                  (rule "andLeft" (formula "1"))
                  (rule "castedGetAny" (formula "2") (term "0,1,1,0,0,0"))
                  (rule "castedGetAny" (formula "1") (term "0,0,0,0,0"))
                  (rule "castedGetAny" (formula "1") (term "0,0,1,0,0"))
                  (rule "nnf_imp2or" (formula "1") (term "0,0"))
                   (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "7")))
                  (rule "true_left" (formula "1"))
                  (rule "nnf_imp2or" (formula "1") (term "0,0,0"))
                  (rule "nnf_imp2or" (formula "1") (term "1,0,0,0"))
                  (rule "nnf_notAnd" (formula "1") (term "0,0,0,0"))
                   (builtin "One Step Simplification" (formula "1"))
                  (rule "nnf_notAnd" (formula "1") (term "0,1,0,0,0"))
                   (builtin "One Step Simplification" (formula "1"))
                  (rule "nnf_notOr" (formula "1") (term "0,0,0,0,0"))
                  (rule "nnf_notOr" (formula "1") (term "1,0,0,0,0,0"))
                  (rule "nnf_notOr" (formula "1") (term "0,1,0,0,0,0,0"))
                  (rule "Class_axiom_0_in_de_polyas_core3_open_cred_CredTool" (inst "seq=seq") (inst "i=i") (inst "str=str") (inst "seq_0=seq_0") (inst "i_0=i_0") (inst "sv_heap=heapAtPost_A"))
                  (rule "andLeft" (formula "1"))
                  (rule "castedGetAny" (formula "1") (term "0,0,0,0,0"))
                  (rule "castedGetAny" (formula "1") (term "0,0,1,0,0"))
                  (rule "castedGetAny" (formula "2") (term "0,1,1,0,0,0"))
                  (rule "applyEq" (formula "2") (term "0,0,1,0,0,0,0,0") (ifseqformula "46"))
                  (rule "selectCreatedOfAnonAsFormulaEQ" (formula "2") (term "1,0,0,0,0,0") (ifseqformula "38"))
                  (rule "selectCreatedOfAnonAsFormulaEQ" (formula "2") (term "0,1,0,0,0,0,0") (ifseqformula "32"))
                  (rule "nnf_imp2or" (formula "1") (term "0,0"))
                   (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "7")))
                  (rule "true_left" (formula "1"))
                  (rule "nnf_imp2or" (formula "1") (term "0,0,0"))
                  (rule "nnf_imp2or" (formula "1") (term "1,0,0,0"))
                  (rule "nnf_notAnd" (formula "1") (term "0,0,0,0"))
                   (builtin "One Step Simplification" (formula "1"))
                  (rule "nnf_notAnd" (formula "1") (term "0,1,0,0,0"))
                   (builtin "One Step Simplification" (formula "1"))
                  (rule "nnf_notOr" (formula "1") (term "0,0,0,0,0"))
                  (rule "nnf_notOr" (formula "1") (term "1,0,0,0,0,0"))
                  (rule "nnf_notOr" (formula "1") (term "0,1,0,0,0,0,0"))
                  (rule "Class_axiom_0_in_de_polyas_core3_open_cred_CredTool" (inst "seq=seq") (inst "i=i") (inst "str=str") (inst "seq_0=seq_0") (inst "i_0=i_0") (inst "sv_heap=anon(heapAtPre_B<<anonHeapFunction>>,
     empty,
     anon_heap_mod<<anonHeapFunction>>)"))
                   (builtin "One Step Simplification" (formula "1"))
                  (rule "andLeft" (formula "1"))
                  (rule "castedGetAny" (formula "1") (term "0,0,0,0,0"))
                  (rule "castedGetAny" (formula "2") (term "0,1,1,0,0,0"))
                  (rule "castedGetAny" (formula "1") (term "0,0,1,0,0"))
                  (rule "nnf_imp2or" (formula "1") (term "0,0"))
                   (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "7")))
                  (rule "true_left" (formula "1"))
                  (rule "nnf_imp2or" (formula "1") (term "0,0,0"))
                  (rule "nnf_imp2or" (formula "1") (term "1,0,0,0"))
                  (rule "nnf_notAnd" (formula "1") (term "0,0,0,0"))
                   (builtin "One Step Simplification" (formula "1"))
                  (rule "nnf_notOr" (formula "1") (term "0,0,0,0,0"))
                  (rule "nnf_notAnd" (formula "1") (term "0,1,0,0,0"))
                   (builtin "One Step Simplification" (formula "1"))
                  (rule "nnf_notOr" (formula "1") (term "1,0,0,0,0,0"))
                  (rule "Class_axiom_0_in_de_polyas_core3_open_cred_CredTool" (inst "seq=seq") (inst "i=i") (inst "str=str") (inst "seq_0=seq_0") (inst "i_0=i_0") (inst "sv_heap=heapAfter_mod_B_0"))
                  (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "1,0,0,0,0,0,1") (ifseqformula "66"))
                  (rule "andLeft" (formula "1"))
                  (rule "castedGetAny" (formula "1") (term "0,0,0,0,0"))
                  (rule "castedGetAny" (formula "1") (term "0,0,1,0,0"))
                  (rule "castedGetAny" (formula "2") (term "0,1,1,0,0,0"))
                  (rule "nnf_imp2or" (formula "1") (term "0,0"))
                   (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "8")))
                  (rule "true_left" (formula "1"))
                  (rule "nnf_imp2or" (formula "1") (term "0,0,0"))
                  (rule "nnf_notAnd" (formula "1") (term "0,0,0,0"))
                   (builtin "One Step Simplification" (formula "1"))
                  (rule "nnf_imp2or" (formula "1") (term "1,0,0,0"))
                  (rule "nnf_notOr" (formula "1") (term "0,0,0,0,0"))
                  (rule "nnf_notAnd" (formula "1") (term "0,1,0,0,0"))
                   (builtin "One Step Simplification" (formula "1"))
                  (rule "nnf_notOr" (formula "1") (term "1,0,0,0,0,0"))
                  (rule "Class_axiom_0_in_de_polyas_core3_open_cred_CredTool" (inst "seq=seq") (inst "i=i") (inst "str=str") (inst "seq_0=seq_0") (inst "i_0=i_0") (inst "sv_heap=anon(heapAfter_mod_B_0,
     empty,
     anon_heap_multiply<<anonHeapFunction>>)"))
                   (builtin "One Step Simplification" (formula "1"))
                  (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,1,0,0,0,0,0,1") (ifseqformula "66"))
                  (rule "andLeft" (formula "1"))
                  (rule "castedGetAny" (formula "1") (term "0,0,1,0,0"))
                  (rule "castedGetAny" (formula "1") (term "0,0,0,0,0"))
                  (rule "castedGetAny" (formula "2") (term "0,1,1,0,0,0"))
                  (rule "nnf_imp2or" (formula "1") (term "0,0"))
                   (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "8")))
                  (rule "true_left" (formula "1"))
                  (rule "nnf_imp2or" (formula "1") (term "0,0,0"))
                  (rule "nnf_notAnd" (formula "1") (term "0,0,0,0"))
                   (builtin "One Step Simplification" (formula "1"))
                  (rule "nnf_imp2or" (formula "1") (term "1,0,0,0"))
                  (rule "nnf_notOr" (formula "1") (term "0,0,0,0,0"))
                  (rule "nnf_notAnd" (formula "1") (term "0,1,0,0,0"))
                   (builtin "One Step Simplification" (formula "1"))
                  (rule "nnf_notOr" (formula "1") (term "1,0,0,0,0,0"))
                  (rule "nnf_notOr" (formula "1") (term "0,1,0,0,0,0,0"))
                  (rule "Class_axiom_0_in_de_polyas_core3_open_cred_CredTool" (inst "seq=seq") (inst "i=i") (inst "str=str") (inst "seq_0=seq_0") (inst "i_0=i_0") (inst "sv_heap=heapAfter_multiply_B_1"))
                  (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "1,0,0,0,0,0,1") (ifseqformula "75"))
                  (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,1,0,0,0,0,0,1") (ifseqformula "67"))
                  (rule "andLeft" (formula "1"))
                  (rule "castedGetAny" (formula "1") (term "0,0,1,0,0"))
                  (rule "castedGetAny" (formula "2") (term "0,1,1,0,0,0"))
                  (rule "castedGetAny" (formula "1") (term "0,0,0,0,0"))
                  (rule "nnf_imp2or" (formula "1") (term "0,0"))
                   (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "9")))
                  (rule "true_left" (formula "1"))
                  (rule "nnf_imp2or" (formula "1") (term "0,0,0"))
                  (rule "nnf_imp2or" (formula "1") (term "1,0,0,0"))
                  (rule "nnf_notAnd" (formula "1") (term "0,0,0,0"))
                   (builtin "One Step Simplification" (formula "1"))
                  (rule "nnf_notOr" (formula "1") (term "0,0,0,0,0"))
                  (rule "nnf_notAnd" (formula "1") (term "0,1,0,0,0"))
                   (builtin "One Step Simplification" (formula "1"))
                  (rule "nnf_notOr" (formula "1") (term "1,0,0,0,0,0"))
                  (rule "nnf_notOr" (formula "1") (term "0,1,0,0,0,0,0"))
                  (rule "Class_axiom_0_in_de_polyas_core3_open_cred_CredTool" (inst "seq=seq") (inst "i=i") (inst "str=str") (inst "seq_0=seq_0") (inst "i_0=i_0") (inst "sv_heap=heapAtPost_B"))
                  (rule "andLeft" (formula "1"))
                  (rule "castedGetAny" (formula "2") (term "0,1,1,0,0,0"))
                  (rule "castedGetAny" (formula "1") (term "0,0,0,0,0"))
                  (rule "castedGetAny" (formula "1") (term "0,0,1,0,0"))
                  (rule "applyEqRigid" (formula "2") (term "0,0,1,0,0,0,0,0") (ifseqformula "84"))
                  (rule "selectCreatedOfAnonAsFormulaEQ" (formula "2") (term "1,0,0,0,0,0") (ifseqformula "76"))
                  (rule "selectCreatedOfAnonAsFormulaEQ" (formula "2") (term "0,1,0,0,0,0,0") (ifseqformula "68"))
                  (rule "nnf_imp2or" (formula "1") (term "0,0"))
                   (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "9")))
                  (rule "true_left" (formula "1"))
                  (rule "nnf_imp2or" (formula "1") (term "0,0,0"))
                  (rule "nnf_imp2or" (formula "1") (term "1,0,0,0"))
                  (rule "nnf_notAnd" (formula "1") (term "0,0,0,0"))
                   (builtin "One Step Simplification" (formula "1"))
                  (rule "nnf_notOr" (formula "1") (term "0,0,0,0,0"))
                  (rule "nnf_notAnd" (formula "1") (term "0,1,0,0,0"))
                   (builtin "One Step Simplification" (formula "1"))
                  (rule "nnf_notOr" (formula "1") (term "1,0,0,0,0,0"))
                  (rule "nnf_notOr" (formula "1") (term "0,1,0,0,0,0,0"))
                  (rule "div_axiom" (formula "33") (term "0,1") (inst "quotient=quotient_0"))
                  (rule "polySimp_mulComm0" (formula "33") (term "1,1,1,1,1"))
                  (rule "polySimp_mulComm0" (formula "33") (term "0,2,1,1"))
                  (rule "polySimp_mulComm0" (formula "33") (term "0,1,0,1"))
                  (rule "polySimp_mulComm0" (formula "33") (term "0,1,1,1"))
                  (rule "commute_or" (formula "4") (term "0,0,0,0"))
                  (rule "shift_paren_or" (formula "5") (term "0,0,0,0"))
                  (rule "commute_and" (formula "6") (term "1,0,0,0"))
                  (rule "commute_or" (formula "6") (term "1,0,0,0,0,0"))
                  (rule "commute_or" (formula "4") (term "0,1,0,0,0"))
                  (rule "commute_and" (formula "5") (term "1,0,0,0"))
                  (rule "commute_or" (formula "3") (term "0,0,0,0"))
                  (rule "ifthenelse_split" (formula "9") (term "0"))
                  (branch " resultAtPost_226_A.<created>@anon_heap_mod«anonHeapFunction» = TRUE TRUE"
                     (rule "applyEqReverse" (formula "107") (term "1") (ifseqformula "10"))
                     (rule "hideAuxiliaryEq" (formula "10"))
                     (rule "eqSymm" (formula "106"))
                     (rule "replace_known_left" (formula "41") (term "0") (ifseqformula "9"))
                      (builtin "One Step Simplification" (formula "41"))
                     (rule "true_left" (formula "41"))
                     (rule "ifthenelse_split" (formula "8") (term "0"))
                     (branch " resultAtPost_226_B.<created>@anon_heap_mod«anonHeapFunction» = TRUE TRUE"
                        (rule "applyEqReverse" (formula "106") (term "1") (ifseqformula "9"))
                        (rule "hideAuxiliaryEq" (formula "9"))
                        (rule "eqSymm" (formula "105"))
                        (rule "replace_known_left" (formula "76") (term "0") (ifseqformula "8"))
                         (builtin "One Step Simplification" (formula "76"))
                        (rule "true_left" (formula "76"))
                        (rule "commute_or" (formula "3") (term "0,1,0,0,0"))
                        (rule "commute_or" (formula "2") (term "0,0,0,0"))
                        (rule "onlyCreatedObjectsAreReferenced" (formula "14") (term "1,0") (ifseqformula "22"))
                        (rule "replace_known_left" (formula "14") (term "1") (ifseqformula "15"))
                         (builtin "One Step Simplification" (formula "14") (ifInst ""  (formula "91")))
                        (rule "true_left" (formula "14"))
                        (rule "onlyCreatedObjectsAreReferenced" (formula "93") (term "0") (ifseqformula "55"))
                        (rule "replace_known_left" (formula "1") (term "1") (ifseqformula "49"))
                         (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "94")))
                        (rule "true_left" (formula "1"))
                        (rule "onlyCreatedObjectsAreReferenced" (formula "31") (term "0") (ifseqformula "22"))
                        (rule "replace_known_left" (formula "31") (term "1") (ifseqformula "16"))
                         (builtin "One Step Simplification" (formula "31") (ifInst ""  (formula "95")))
                        (rule "true_left" (formula "31"))
                        (rule "onlyCreatedObjectsAreReferenced" (formula "96") (term "0") (ifseqformula "22"))
                        (rule "replace_known_left" (formula "1") (term "1") (ifseqformula "28"))
                         (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "97")))
                        (rule "true_left" (formula "1"))
                        (rule "onlyCreatedObjectsAreReferenced" (formula "97") (term "0") (ifseqformula "55"))
                        (rule "replace_known_left" (formula "1") (term "1") (ifseqformula "61"))
                         (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "98")))
                        (rule "true_left" (formula "1"))
                        (rule "onlyCreatedObjectsAreReferenced" (formula "14") (term "1,1,0") (ifseqformula "22"))
                        (rule "replace_known_left" (formula "14") (term "1") (ifseqformula "16"))
                         (builtin "One Step Simplification" (formula "14") (ifInst ""  (formula "93")))
                        (rule "true_left" (formula "14"))
                        (rule "onlyCreatedObjectsAreReferenced" (formula "47") (term "1,0") (ifseqformula "55"))
                        (rule "replace_known_left" (formula "47") (term "1") (ifseqformula "48"))
                         (builtin "One Step Simplification" (formula "47") (ifInst ""  (formula "92")))
                        (rule "true_left" (formula "47"))
                        (rule "commute_or" (formula "2") (term "0,1,0,0,0"))
                        (rule "onlyCreatedObjectsAreReferenced" (formula "62") (term "1,0") (ifseqformula "55"))
                        (rule "replace_known_left" (formula "62") (term "1") (ifseqformula "49"))
                         (builtin "One Step Simplification" (formula "62") (ifInst ""  (formula "96")))
                        (rule "true_left" (formula "62"))
                        (rule "commute_or" (formula "1") (term "0,0,0,0"))
                        (rule "commute_or" (formula "1") (term "0,1,0,0,0"))
                        (rule "commute_or_2" (formula "4") (term "0,0,0"))
                        (rule "commute_and" (formula "33") (term "0,1"))
                        (rule "commute_or_2" (formula "3") (term "0,0,0"))
                        (rule "commute_or_2" (formula "2") (term "0,0,0"))
                        (rule "commute_or_2" (formula "1") (term "0,0,0"))
                        (rule "commute_or" (formula "5") (term "1,0,0,0,0,0"))
                        (rule "shift_paren_or" (formula "6") (term "0,0,0,0,0"))
                         (builtin "One Step Simplification" (formula "6"))
                        (rule "commute_or_2" (formula "6") (term "0,0,0,0"))
                        (rule "shift_paren_or" (formula "4") (term "0,0,0,0"))
                        (rule "shift_paren_or" (formula "3") (term "0,0,0,0"))
                        (rule "shift_paren_or" (formula "2") (term "0,0,0,0"))
                        (rule "commute_or_2" (formula "1") (term "1,0,0,0,0"))
                        (rule "shift_paren_or" (formula "1") (term "0,0,0,0"))
                        (rule "cnf_rightDist" (formula "6") (term "0,0,0"))
                        (rule "distr_forallAnd" (formula "6") (term "0,0"))
                        (rule "distr_forallAnd" (formula "6") (term "0"))
                        (rule "distr_forallAnd" (formula "6"))
                        (rule "andLeft" (formula "6"))
                        (rule "commute_or_2" (formula "6") (term "0,0,0"))
                         (builtin "One Step Simplification" (formula "6"))
                        (rule "eqSymm" (formula "6") (term "1,0,0,0,0"))
                        (rule "castedGetAny" (formula "6") (term "0,0,0,0,0,0"))
                        (rule "castedGetAny" (formula "6") (term "1,0,0,1,0,0,0"))
                        (rule "castedGetAny" (formula "6") (term "0,1,0,0,0,0"))
                         (builtin "One Step Simplification" (formula "6"))
                        (rule "true_left" (formula "6"))
                        (rule "shift_paren_or" (formula "6") (term "0,0,0"))
                         (builtin "One Step Simplification" (formula "6"))
                        (rule "eqSymm" (formula "6") (term "1,1,0,0,0"))
                        (rule "castedGetAny" (formula "6") (term "0,0,1,0,0,0"))
                        (rule "castedGetAny" (formula "6") (term "0,0,0,0,0,0"))
                        (rule "castedGetAny" (formula "6") (term "0,1,1,0,0,0"))
                         (builtin "One Step Simplification" (formula "6"))
                        (rule "true_left" (formula "6"))
                        (rule "commute_and" (formula "4") (term "1,0,0,0"))
                        (rule "commute_and" (formula "3") (term "1,0,0,0"))
                        (rule "commute_and" (formula "2") (term "1,0,0,0"))
                        (rule "commute_and" (formula "1") (term "1,0,0,0"))
                        (rule "shift_paren_or" (formula "5") (term "0,0,0,0,0"))
                         (builtin "One Step Simplification" (formula "5"))
                        (rule "commute_or_2" (formula "5") (term "0,0,0,0"))
                        (rule "shift_paren_or" (formula "4") (term "0,0,0,0,0"))
                         (builtin "One Step Simplification" (formula "4"))
                        (rule "commute_or_2" (formula "4") (term "0,0,0,0"))
                        (rule "shift_paren_or" (formula "3") (term "0,0,0,0,0"))
                         (builtin "One Step Simplification" (formula "3"))
                        (rule "commute_or_2" (formula "3") (term "0,0,0,0"))
                        (rule "shift_paren_or" (formula "2") (term "0,0,0,0,0"))
                         (builtin "One Step Simplification" (formula "2"))
                        (rule "commute_or_2" (formula "2") (term "0,0,0,0"))
                        (rule "shift_paren_or" (formula "1") (term "0,0,0,0,0"))
                         (builtin "One Step Simplification" (formula "1"))
                        (rule "cnf_rightDist" (formula "5") (term "0,0,0"))
                        (rule "distr_forallAnd" (formula "5") (term "0,0"))
                        (rule "distr_forallAnd" (formula "5") (term "0"))
                        (rule "distr_forallAnd" (formula "5"))
                        (rule "andLeft" (formula "5"))
                        (rule "commute_or_2" (formula "5") (term "0,0,0"))
                         (builtin "One Step Simplification" (formula "5"))
                        (rule "eqSymm" (formula "5") (term "1,0,0,0,0"))
                        (rule "castedGetAny" (formula "5") (term "1,0,0,1,0,0,0"))
                        (rule "castedGetAny" (formula "5") (term "0,0,0,0,0,0"))
                        (rule "castedGetAny" (formula "5") (term "0,1,0,0,0,0"))
                         (builtin "One Step Simplification" (formula "5"))
                        (rule "true_left" (formula "5"))
                        (rule "shift_paren_or" (formula "5") (term "0,0,0"))
                         (builtin "One Step Simplification" (formula "5"))
                        (rule "eqSymm" (formula "5") (term "1,1,0,0,0"))
                        (rule "castedGetAny" (formula "5") (term "0,0,0,0,0,0"))
                        (rule "castedGetAny" (formula "5") (term "0,0,1,0,0,0"))
                        (rule "castedGetAny" (formula "5") (term "0,1,1,0,0,0"))
                         (builtin "One Step Simplification" (formula "5"))
                        (rule "true_left" (formula "5"))
                        (rule "cnf_rightDist" (formula "4") (term "0,0,0"))
                        (rule "distr_forallAnd" (formula "4") (term "0,0"))
                        (rule "distr_forallAnd" (formula "4") (term "0"))
                        (rule "distr_forallAnd" (formula "4"))
                        (rule "andLeft" (formula "4"))
                        (rule "cnf_rightDist" (formula "3") (term "0,0,0"))
                        (rule "distr_forallAnd" (formula "3") (term "0,0"))
                        (rule "distr_forallAnd" (formula "3") (term "0"))
                        (rule "distr_forallAnd" (formula "3"))
                        (rule "andLeft" (formula "3"))
                        (rule "shift_paren_or" (formula "5") (term "0,0,0"))
                         (builtin "One Step Simplification" (formula "5"))
                        (rule "eqSymm" (formula "5") (term "1,1,0,0,0"))
                        (rule "castedGetAny" (formula "5") (term "0,0,0,0,0,0"))
                        (rule "castedGetAny" (formula "5") (term "0,0,1,0,0,0"))
                        (rule "castedGetAny" (formula "5") (term "0,1,1,0,0,0"))
                         (builtin "One Step Simplification" (formula "5"))
                        (rule "true_left" (formula "5"))
                        (rule "cnf_rightDist" (formula "2") (term "0,0,0"))
                        (rule "distr_forallAnd" (formula "2") (term "0,0"))
                        (rule "distr_forallAnd" (formula "2") (term "0"))
                        (rule "distr_forallAnd" (formula "2"))
                        (rule "andLeft" (formula "2"))
                        (rule "cnf_rightDist" (formula "1") (term "0,0,0"))
                        (rule "distr_forallAnd" (formula "1") (term "0,0"))
                        (rule "distr_forallAnd" (formula "1") (term "0"))
                        (rule "distr_forallAnd" (formula "1"))
                        (rule "andLeft" (formula "1"))
                        (rule "shift_paren_or" (formula "3") (term "0,0,0"))
                         (builtin "One Step Simplification" (formula "3"))
                        (rule "eqSymm" (formula "3") (term "1,1,0,0,0"))
                        (rule "castedGetAny" (formula "3") (term "0,0,0,0,0,0"))
                        (rule "castedGetAny" (formula "3") (term "0,0,1,0,0,0"))
                        (rule "castedGetAny" (formula "3") (term "0,1,1,0,0,0"))
                         (builtin "One Step Simplification" (formula "3"))
                        (rule "true_left" (formula "3"))
                        (rule "cnf_rightDist" (formula "4") (term "0,0,0"))
                        (rule "distr_forallAnd" (formula "4") (term "0,0"))
                        (rule "distr_forallAnd" (formula "4") (term "0"))
                        (rule "distr_forallAnd" (formula "4"))
                        (rule "andLeft" (formula "4"))
                        (rule "commute_or_2" (formula "4") (term "0,0,0"))
                         (builtin "One Step Simplification" (formula "4"))
                        (rule "eqSymm" (formula "4") (term "1,0,0,0,0"))
                        (rule "castedGetAny" (formula "4") (term "1,0,0,1,0,0,0"))
                        (rule "castedGetAny" (formula "4") (term "0,0,0,0,0,0"))
                        (rule "castedGetAny" (formula "4") (term "0,1,0,0,0,0"))
                         (builtin "One Step Simplification" (formula "4"))
                        (rule "true_left" (formula "4"))
                        (rule "cnf_rightDist" (formula "3") (term "0,0,0"))
                        (rule "distr_forallAnd" (formula "3") (term "0,0"))
                        (rule "distr_forallAnd" (formula "3") (term "0"))
                        (rule "distr_forallAnd" (formula "3"))
                        (rule "andLeft" (formula "3"))
                        (rule "shift_paren_or" (formula "5") (term "0,0,0"))
                         (builtin "One Step Simplification" (formula "5"))
                        (rule "eqSymm" (formula "5") (term "1,1,0,0,0"))
                        (rule "castedGetAny" (formula "5") (term "1,0,0,0,0,0,0"))
                        (rule "castedGetAny" (formula "5") (term "0,0,1,0,0,0"))
                        (rule "castedGetAny" (formula "5") (term "0,1,1,0,0,0"))
                         (builtin "One Step Simplification" (formula "5"))
                        (rule "true_left" (formula "5"))
                        (rule "cnf_rightDist" (formula "2") (term "0,0,0"))
                        (rule "distr_forallAnd" (formula "2") (term "0,0"))
                        (rule "distr_forallAnd" (formula "2") (term "0"))
                        (rule "distr_forallAnd" (formula "2"))
                        (rule "andLeft" (formula "2"))
                        (rule "commute_or_2" (formula "2") (term "0,0,0"))
                         (builtin "One Step Simplification" (formula "2"))
                        (rule "eqSymm" (formula "2") (term "1,0,0,0,0"))
                        (rule "castedGetAny" (formula "2") (term "1,0,0,1,0,0,0"))
                        (rule "castedGetAny" (formula "2") (term "0,0,0,0,0,0"))
                        (rule "castedGetAny" (formula "2") (term "0,1,0,0,0,0"))
                         (builtin "One Step Simplification" (formula "2"))
                        (rule "true_left" (formula "2"))
                        (rule "shift_paren_or" (formula "4") (term "0,0,0"))
                         (builtin "One Step Simplification" (formula "4"))
                        (rule "eqSymm" (formula "4") (term "1,1,0,0,0"))
                        (rule "castedGetAny" (formula "4") (term "0,0,1,0,0,0"))
                        (rule "castedGetAny" (formula "4") (term "1,0,0,0,0,0,0"))
                        (rule "castedGetAny" (formula "4") (term "0,1,1,0,0,0"))
                         (builtin "One Step Simplification" (formula "4"))
                        (rule "true_left" (formula "4"))
                        (rule "cnf_rightDist" (formula "1") (term "0,0,0"))
                        (rule "distr_forallAnd" (formula "1") (term "0,0"))
                        (rule "distr_forallAnd" (formula "1") (term "0"))
                        (rule "distr_forallAnd" (formula "1"))
                        (rule "andLeft" (formula "1"))
                        (rule "ifthenelse_split_for" (formula "31") (term "1,1"))
                        (branch "result_228_A_1.value@heapAtPre_A«anonHeapFunction» ≥ 0 TRUE"
                           (rule "cnf_rightDist" (formula "32"))
                           (rule "andLeft" (formula "32"))
                           (rule "commute_or" (formula "33"))
                           (rule "cnf_rightDist" (formula "32"))
                           (rule "andLeft" (formula "32"))
                           (rule "commute_or" (formula "33"))
                           (rule "shift_paren_or" (formula "3") (term "0,0,0"))
                            (builtin "One Step Simplification" (formula "3"))
                           (rule "eqSymm" (formula "3") (term "1,1,0,0,0"))
                           (rule "castedGetAny" (formula "3") (term "1,0,0,0,0,0,0"))
                           (rule "castedGetAny" (formula "3") (term "0,0,1,0,0,0"))
                           (rule "castedGetAny" (formula "3") (term "0,1,1,0,0,0"))
                            (builtin "One Step Simplification" (formula "3"))
                           (rule "true_left" (formula "3"))
                           (rule "cnf_rightDist" (formula "3") (term "0,0,0"))
                           (rule "distr_forallAnd" (formula "3") (term "0,0"))
                           (rule "distr_forallAnd" (formula "3") (term "0"))
                           (rule "distr_forallAnd" (formula "3"))
                           (rule "andLeft" (formula "3"))
                           (rule "shift_paren_or" (formula "2") (term "0,0,0"))
                            (builtin "One Step Simplification" (formula "2"))
                           (rule "eqSymm" (formula "2") (term "1,1,0,0,0"))
                           (rule "castedGetAny" (formula "2") (term "1,0,0,0,0,0,0"))
                           (rule "castedGetAny" (formula "2") (term "0,0,1,0,0,0"))
                           (rule "castedGetAny" (formula "2") (term "0,1,1,0,0,0"))
                            (builtin "One Step Simplification" (formula "2"))
                           (rule "true_left" (formula "2"))
                           (rule "commute_or_2" (formula "2") (term "0,0,0"))
                            (builtin "One Step Simplification" (formula "2"))
                           (rule "eqSymm" (formula "2") (term "1,0,0,0,0"))
                           (rule "castedGetAny" (formula "2") (term "1,0,0,1,0,0,0"))
                           (rule "castedGetAny" (formula "2") (term "0,0,0,0,0,0"))
                           (rule "castedGetAny" (formula "2") (term "0,1,0,0,0,0"))
                            (builtin "One Step Simplification" (formula "2"))
                           (rule "true_left" (formula "2"))
                           (rule "shift_paren_or" (formula "2") (term "0,0,0"))
                            (builtin "One Step Simplification" (formula "2"))
                           (rule "eqSymm" (formula "2") (term "1,1,0,0,0"))
                           (rule "castedGetAny" (formula "2") (term "0,0,1,0,0,0"))
                           (rule "castedGetAny" (formula "2") (term "1,0,0,0,0,0,0"))
                           (rule "castedGetAny" (formula "2") (term "0,1,1,0,0,0"))
                            (builtin "One Step Simplification" (formula "2"))
                           (rule "true_left" (formula "2"))
                           (rule "cnf_rightDist" (formula "1") (term "0,0,0"))
                           (rule "distr_forallAnd" (formula "1") (term "0,0"))
                           (rule "distr_forallAnd" (formula "1") (term "0"))
                           (rule "distr_forallAnd" (formula "1"))
                           (rule "andLeft" (formula "1"))
                           (rule "commute_or_2" (formula "1") (term "0,0,0"))
                            (builtin "One Step Simplification" (formula "1"))
                           (rule "eqSymm" (formula "1") (term "1,0,0,0,0"))
                           (rule "castedGetAny" (formula "1") (term "0,0,0,0,0,0"))
                           (rule "castedGetAny" (formula "1") (term "1,0,0,1,0,0,0"))
                           (rule "castedGetAny" (formula "1") (term "0,1,0,0,0,0"))
                            (builtin "One Step Simplification" (formula "1"))
                           (rule "true_left" (formula "1"))
                           (rule "shift_paren_or" (formula "1") (term "0,0,0"))
                            (builtin "One Step Simplification" (formula "1"))
                           (rule "eqSymm" (formula "1") (term "1,1,0,0,0"))
                           (rule "castedGetAny" (formula "1") (term "1,0,0,0,0,0,0"))
                           (rule "castedGetAny" (formula "1") (term "0,0,1,0,0,0"))
                           (rule "castedGetAny" (formula "1") (term "0,1,1,0,0,0"))
                            (builtin "One Step Simplification" (formula "1"))
                           (rule "true_left" (formula "1"))
                           (rule "cut_direct" (formula "28") (term "0"))
                           (branch "CUT: result_228_A_1.value@heapAtPre_A«anonHeapFunction» = 0 TRUE"
                               (builtin "One Step Simplification" (formula "29"))
                              (rule "true_left" (formula "29"))
                              (rule "replace_known_left" (formula "30") (term "0") (ifseqformula "28"))
                               (builtin "One Step Simplification" (formula "30"))
                              (rule "true_left" (formula "30"))
                              (rule "replace_known_left" (formula "29") (term "0") (ifseqformula "28"))
                               (builtin "One Step Simplification" (formula "29"))
                              (rule "true_left" (formula "29"))
                              (rule "applyEq" (formula "30") (term "1,0") (ifseqformula "28"))
                              (rule "times_zero_1" (formula "30") (term "0"))
                              (rule "polySimp_homoEq" (formula "30"))
                              (rule "mul_literals" (formula "30") (term "1,0"))
                              (rule "add_zero_right" (formula "30") (term "0"))
                              (rule "applyEq" (formula "27") (term "0") (ifseqformula "28"))
                              (rule "qeq_literals" (formula "27"))
                              (rule "true_left" (formula "27"))
                              (rule "applyEq" (formula "28") (term "1,0") (ifseqformula "27"))
                              (rule "eqSymm" (formula "28"))
                              (rule "polySimp_homoEq" (formula "28"))
                              (rule "polySimp_mulLiterals" (formula "28") (term "1,0"))
                              (rule "polySimp_elimOne" (formula "28") (term "1,0"))
                              (rule "applyEq" (formula "56") (term "1") (ifseqformula "27"))
                              (rule "applyEq" (formula "7") (term "1") (ifseqformula "27"))
                              (rule "applyEq" (formula "23") (term "1") (ifseqformula "27"))
                              (rule "applyEq" (formula "28") (term "1,1,0") (ifseqformula "27"))
                              (rule "polySimp_addComm0" (formula "28") (term "0"))
                              (rule "polySimp_sepPosMonomial" (formula "29"))
                              (rule "polySimp_mulLiterals" (formula "29") (term "1"))
                              (rule "polySimp_elimOne" (formula "29") (term "1"))
                              (rule "applyEq" (formula "65") (term "1") (ifseqformula "29"))
                              (rule "polySimp_sepPosMonomial" (formula "28"))
                              (rule "jdiv_axiom" (formula "28") (term "0"))
                              (rule "eqSymm" (formula "28"))
                              (rule "applyEq" (formula "28") (term "1") (ifseqformula "29"))
                               (builtin "One Step Simplification" (formula "28"))
                              (rule "eqSymm" (formula "28") (term "1"))
                              (rule "polySimp_homoEq" (formula "28") (term "1"))
                              (rule "polySimp_mulLiterals" (formula "28") (term "1,0,1"))
                              (rule "polySimp_elimOne" (formula "28") (term "1,0,1"))
                              (rule "polySimp_sepPosMonomial" (formula "28") (term "1"))
                              (rule "inEqSimp_contradInEq0" (formula "28") (term "0,0") (ifseqformula "4"))
                              (rule "qeq_literals" (formula "28") (term "0,0,0"))
                               (builtin "One Step Simplification" (formula "28"))
                              (rule "true_left" (formula "28"))
                              (rule "div_axiom" (formula "28") (term "0,1") (inst "quotient=quotient_1"))
                               (builtin "One Step Simplification" (formula "28"))
                              (rule "true_left" (formula "28"))
                              (rule "Use_information_flow_contract_for_compareTo_325434207" (formula "19") (ifseqformula "19"))
                               (builtin "One Step Simplification" (formula "19") (ifInst ""  (formula "91")) (ifInst ""  (formula "91")))
                              (rule "true_left" (formula "19"))
                              (rule "Use_information_flow_contract_for_getOrder_757678341" (formula "58") (ifseqformula "25"))
                              (rule "applyEq" (formula "58") (term "0,0,1") (ifseqformula "56"))
                              (rule "eqSymm" (formula "58") (term "0,1"))
                              (rule "replace_known_left" (formula "58") (term "0,1") (ifseqformula "23"))
                               (builtin "One Step Simplification" (formula "58"))
                              (rule "applyEq" (formula "58") (term "0,1") (ifseqformula "7"))
                              (rule "eqSymm" (formula "58") (term "1"))
                              (rule "replace_known_left" (formula "58") (term "1") (ifseqformula "27"))
                               (builtin "One Step Simplification" (formula "58"))
                              (rule "true_left" (formula "58"))
                              (rule "Use_information_flow_contract_for_multiply_1272441881" (formula "70") (ifseqformula "35"))
                              (rule "replaceKnownSelect_taclet21_11" (formula "70") (term "1,1,1"))
                              (rule "replaceKnownSelect_taclet21_12" (formula "70") (term "0,1,1"))
                              (rule "replaceKnownAuxiliaryConstant_taclet0110021_18" (formula "70") (term "1,1,1"))
                              (rule "replaceKnownAuxiliaryConstant_taclet00110021_19" (formula "70") (term "0,1,1"))
                              (rule "replaceKnownSelect_taclet21_8" (formula "70") (term "1,1,0,1"))
                              (rule "replaceKnownSelect_taclet21_9" (formula "70") (term "0,1,0,1"))
                              (rule "replaceKnownAuxiliaryConstant_taclet21_10" (formula "70") (term "1,1,0,1"))
                               (builtin "One Step Simplification" (formula "70") (ifInst ""  (formula "82")) (ifInst ""  (formula "81")) (ifInst ""  (formula "99")))
                              (rule "pullOutSelect" (formula "70") (term "1,0,1") (inst "selectSK=org_bouncycastle_math_ec_ECPoint_value_4"))
                              (rule "simplifySelectOfAnonEQ" (formula "70") (ifseqformula "26"))
                               (builtin "One Step Simplification" (formula "70") (ifInst ""  (formula "96")) (ifInst ""  (formula "14")))
                              (rule "applyEqReverse" (formula "71") (term "1,0,1") (ifseqformula "70"))
                              (rule "hideAuxiliaryEq" (formula "70"))
                              (rule "pullOutSelect" (formula "70") (term "0,0,1") (inst "selectSK=org_bouncycastle_math_ec_ECPoint_value_5"))
                              (rule "simplifySelectOfAnonEQ" (formula "70") (ifseqformula "60"))
                               (builtin "One Step Simplification" (formula "70") (ifInst ""  (formula "97")) (ifInst ""  (formula "47")))
                              (rule "applyEqReverse" (formula "71") (term "0,0,1") (ifseqformula "70"))
                              (rule "hideAuxiliaryEq" (formula "70"))
                              (rule "replace_known_left" (formula "70") (term "0,1") (ifseqformula "5"))
                               (builtin "One Step Simplification" (formula "70"))
                              (rule "notLeft" (formula "70"))
                              (rule "Class_invariant_axiom_for_org_bouncycastle_math_ec_ECPoint" (formula "76") (term "1"))
                               (builtin "One Step Simplification" (formula "76"))
                              (rule "Class_invariant_axiom_for_org_bouncycastle_math_ec_ECPoint" (formula "76"))
                              (rule "closeTrue" (formula "76"))
                           )
                           (branch "CUT: result_228_A_1.value@heapAtPre_A«anonHeapFunction» = 0 FALSE"
                               (builtin "One Step Simplification" (formula "28"))
                              (rule "replace_known_right" (formula "30") (term "0") (ifseqformula "79"))
                               (builtin "One Step Simplification" (formula "30"))
                              (rule "replace_known_right" (formula "29") (term "0") (ifseqformula "79"))
                               (builtin "One Step Simplification" (formula "29"))
                              (rule "applyEq" (formula "32") (term "0,0") (ifseqformula "29"))
                              (rule "polySimp_mulComm0" (formula "32") (term "0"))
                              (rule "applyEq" (formula "30") (term "0") (ifseqformula "32"))
                              (rule "inEqSimp_homoInEq1" (formula "30"))
                              (rule "polySimp_mulComm0" (formula "30") (term "1,0"))
                              (rule "polySimp_rightDist" (formula "30") (term "1,0"))
                              (rule "polySimp_mulAssoc" (formula "30") (term "0,1,0"))
                              (rule "polySimp_mulComm0" (formula "30") (term "0,0,1,0"))
                              (rule "polySimp_mulLiterals" (formula "30") (term "0,1,0"))
                              (rule "polySimp_elimOne" (formula "30") (term "0,1,0"))
                              (rule "polySimp_addAssoc" (formula "30") (term "0"))
                              (rule "polySimp_addComm1" (formula "30") (term "0,0"))
                              (rule "polySimp_pullOutFactor2b" (formula "30") (term "0,0,0"))
                              (rule "add_literals" (formula "30") (term "1,1,0,0,0"))
                              (rule "times_zero_1" (formula "30") (term "1,0,0,0"))
                              (rule "add_zero_right" (formula "30") (term "0,0,0"))
                              (rule "applyEq" (formula "28") (term "0") (ifseqformula "32"))
                              (rule "inEqSimp_homoInEq0" (formula "28"))
                              (rule "polySimp_mulComm0" (formula "28") (term "1,0"))
                              (rule "polySimp_rightDist" (formula "28") (term "1,0"))
                              (rule "polySimp_mulAssoc" (formula "28") (term "0,1,0"))
                              (rule "polySimp_mulComm0" (formula "28") (term "0,0,1,0"))
                              (rule "polySimp_mulLiterals" (formula "28") (term "0,1,0"))
                              (rule "polySimp_elimOne" (formula "28") (term "0,1,0"))
                              (rule "polySimp_addAssoc" (formula "28") (term "0"))
                              (rule "polySimp_pullOutFactor2" (formula "28") (term "0,0"))
                              (rule "add_literals" (formula "28") (term "1,0,0"))
                              (rule "times_zero_1" (formula "28") (term "0,0"))
                              (rule "add_zero_left" (formula "28") (term "0"))
                              (rule "applyEq" (formula "31") (term "0,1") (ifseqformula "29"))
                              (rule "inEqSimp_sepNegMonomial0" (formula "30"))
                              (rule "polySimp_mulLiterals" (formula "30") (term "0"))
                              (rule "polySimp_elimOne" (formula "30") (term "0"))
                              (rule "inEqSimp_invertInEq1" (formula "28"))
                              (rule "polySimp_mulLiterals" (formula "28") (term "0"))
                              (rule "mul_literals" (formula "28") (term "1"))
                              (rule "polySimp_elimOne" (formula "28") (term "0"))
                              (rule "inEqSimp_strengthen1" (formula "27") (ifseqformula "79"))
                              (rule "add_literals" (formula "27") (term "1"))
                              (rule "inEqSimp_contradEq7" (formula "79") (ifseqformula "27"))
                              (rule "times_zero_1" (formula "79") (term "1,0,0"))
                              (rule "add_literals" (formula "79") (term "0,0"))
                              (rule "leq_literals" (formula "79") (term "0"))
                               (builtin "One Step Simplification" (formula "79"))
                              (rule "false_right" (formula "79"))
                              (rule "inEqSimp_exactShadow3" (formula "30") (ifseqformula "28"))
                              (rule "add_zero_right" (formula "30") (term "0"))
                              (rule "polySimp_rightDist" (formula "30") (term "0"))
                              (rule "polySimp_mulLiterals" (formula "30") (term "1,0"))
                              (rule "mul_literals" (formula "30") (term "0,0"))
                              (rule "polySimp_elimOne" (formula "30") (term "1,0"))
                              (rule "inEqSimp_sepPosMonomial1" (formula "30"))
                              (rule "mul_literals" (formula "30") (term "1"))
                              (rule "Use_information_flow_contract_for_compareTo_325434207" (formula "19") (ifseqformula "19"))
                               (builtin "One Step Simplification" (formula "19") (ifInst ""  (formula "94")) (ifInst ""  (formula "94")))
                              (rule "true_left" (formula "19"))
                              (rule "Use_information_flow_contract_for_getOrder_757678341" (formula "61") (ifseqformula "25"))
                              (rule "replace_known_left" (formula "61") (term "1,1") (ifseqformula "7"))
                               (builtin "One Step Simplification" (formula "61"))
                              (rule "true_left" (formula "61"))
                              (rule "Use_information_flow_contract_for_multiply_1272441881_0" (formula "73") (ifseqformula "38"))
                              (rule "replaceKnownSelect_taclet21_12" (formula "73") (term "0,1,1"))
                              (rule "replaceKnownSelect_taclet21_11" (formula "73") (term "1,1,1"))
                              (rule "replaceKnownAuxiliaryConstant_taclet00110021_19" (formula "73") (term "0,1,1"))
                              (rule "replaceKnownAuxiliaryConstant_taclet0110021_18" (formula "73") (term "1,1,1"))
                              (rule "replaceKnownSelect_taclet21_9" (formula "73") (term "0,1,0,1"))
                              (rule "replaceKnownSelect_taclet21_8" (formula "73") (term "1,1,0,1"))
                              (rule "replaceKnownAuxiliaryConstant_taclet021_15" (formula "73") (term "0,1,0,1"))
                              (rule "replaceKnownAuxiliaryConstant_taclet21_10" (formula "73") (term "1,1,0,1"))
                              (rule "replaceKnownAuxiliaryConstant_taclet021_15" (formula "73") (term "1,1,0,1"))
                               (builtin "One Step Simplification" (formula "73") (ifInst ""  (formula "85")) (ifInst ""  (formula "84")) (ifInst ""  (formula "102")))
                              (rule "pullOutSelect" (formula "73") (term "1,0,1") (inst "selectSK=org_bouncycastle_math_ec_ECPoint_value_4"))
                              (rule "simplifySelectOfAnonEQ" (formula "73") (ifseqformula "26"))
                               (builtin "One Step Simplification" (formula "73") (ifInst ""  (formula "99")) (ifInst ""  (formula "14")))
                              (rule "applyEqReverse" (formula "74") (term "1,0,1") (ifseqformula "73"))
                              (rule "hideAuxiliaryEq" (formula "73"))
                              (rule "pullOutSelect" (formula "73") (term "0,0,1") (inst "selectSK=org_bouncycastle_math_ec_ECPoint_value_5"))
                              (rule "simplifySelectOfAnonEQ" (formula "73") (ifseqformula "63"))
                               (builtin "One Step Simplification" (formula "73") (ifInst ""  (formula "100")) (ifInst ""  (formula "50")))
                              (rule "applyEqReverse" (formula "74") (term "0,0,1") (ifseqformula "73"))
                              (rule "hideAuxiliaryEq" (formula "73"))
                              (rule "replace_known_left" (formula "73") (term "0,1") (ifseqformula "5"))
                               (builtin "One Step Simplification" (formula "73"))
                              (rule "notLeft" (formula "73"))
                              (rule "Class_invariant_axiom_for_org_bouncycastle_math_ec_ECPoint" (formula "79") (term "0"))
                               (builtin "One Step Simplification" (formula "79"))
                              (rule "Class_invariant_axiom_for_org_bouncycastle_math_ec_ECPoint" (formula "79"))
                              (rule "closeTrue" (formula "79"))
                           )
                        )
                        (branch "result_228_A_1.value@heapAtPre_A«anonHeapFunction» ≥ 0 FALSE"
                           (rule "inEqSimp_geqRight" (formula "80"))
                           (rule "times_zero_1" (formula "1") (term "1,0,0"))
                           (rule "add_literals" (formula "1") (term "0,0"))
                           (rule "inEqSimp_sepPosMonomial0" (formula "1"))
                           (rule "mul_literals" (formula "1") (term "1"))
                           (rule "inEqSimp_contradEq3" (formula "32") (term "0") (ifseqformula "1"))
                           (rule "mul_literals" (formula "32") (term "1,0,0,0"))
                           (rule "add_literals" (formula "32") (term "0,0,0"))
                           (rule "qeq_literals" (formula "32") (term "0,0"))
                            (builtin "One Step Simplification" (formula "32"))
                           (rule "andLeft" (formula "32"))
                           (rule "andLeft" (formula "32"))
                           (rule "applyEq" (formula "36") (term "0,0") (ifseqformula "33"))
                           (rule "polySimp_mulComm0" (formula "36") (term "0"))
                           (rule "applyEq" (formula "34") (term "0") (ifseqformula "36"))
                           (rule "inEqSimp_homoInEq1" (formula "34"))
                           (rule "polySimp_mulComm0" (formula "34") (term "1,0"))
                           (rule "polySimp_rightDist" (formula "34") (term "1,0"))
                           (rule "polySimp_mulAssoc" (formula "34") (term "0,1,0"))
                           (rule "polySimp_mulComm0" (formula "34") (term "0,0,1,0"))
                           (rule "polySimp_mulLiterals" (formula "34") (term "0,1,0"))
                           (rule "polySimp_elimOne" (formula "34") (term "0,1,0"))
                           (rule "polySimp_addAssoc" (formula "34") (term "0"))
                           (rule "polySimp_addComm1" (formula "34") (term "0,0"))
                           (rule "polySimp_pullOutFactor2b" (formula "34") (term "0,0,0"))
                           (rule "add_literals" (formula "34") (term "1,1,0,0,0"))
                           (rule "times_zero_1" (formula "34") (term "1,0,0,0"))
                           (rule "add_literals" (formula "34") (term "0,0,0"))
                           (rule "applyEq" (formula "32") (term "0") (ifseqformula "36"))
                           (rule "inEqSimp_homoInEq0" (formula "32"))
                           (rule "polySimp_mulComm0" (formula "32") (term "1,0"))
                           (rule "polySimp_rightDist" (formula "32") (term "1,0"))
                           (rule "polySimp_mulAssoc" (formula "32") (term "0,1,0"))
                           (rule "polySimp_mulComm0" (formula "32") (term "0,0,1,0"))
                           (rule "polySimp_mulLiterals" (formula "32") (term "0,1,0"))
                           (rule "polySimp_elimOne" (formula "32") (term "0,1,0"))
                           (rule "polySimp_addAssoc" (formula "32") (term "0"))
                           (rule "polySimp_pullOutFactor2" (formula "32") (term "0,0"))
                           (rule "add_literals" (formula "32") (term "1,0,0"))
                           (rule "times_zero_1" (formula "32") (term "0,0"))
                           (rule "add_zero_left" (formula "32") (term "0"))
                           (rule "applyEq" (formula "35") (term "0,1") (ifseqformula "33"))
                           (rule "inEqSimp_sepNegMonomial0" (formula "34"))
                           (rule "polySimp_mulLiterals" (formula "34") (term "0"))
                           (rule "polySimp_elimOne" (formula "34") (term "0"))
                           (rule "inEqSimp_invertInEq1" (formula "32"))
                           (rule "times_zero_2" (formula "32") (term "1"))
                           (rule "polySimp_mulLiterals" (formula "32") (term "0"))
                           (rule "polySimp_elimOne" (formula "32") (term "0"))
                           (rule "inEqSimp_exactShadow3" (formula "34") (ifseqformula "32"))
                           (rule "add_zero_right" (formula "34") (term "0"))
                           (rule "polySimp_rightDist" (formula "34") (term "0"))
                           (rule "mul_literals" (formula "34") (term "0,0"))
                           (rule "inEqSimp_sepNegMonomial1" (formula "34"))
                           (rule "polySimp_mulLiterals" (formula "34") (term "0"))
                           (rule "polySimp_elimOne" (formula "34") (term "0"))
                           (rule "shift_paren_or" (formula "4") (term "0,0,0"))
                            (builtin "One Step Simplification" (formula "4"))
                           (rule "eqSymm" (formula "4") (term "1,1,0,0,0"))
                           (rule "castedGetAny" (formula "4") (term "1,0,0,0,0,0,0"))
                           (rule "castedGetAny" (formula "4") (term "0,0,1,0,0,0"))
                           (rule "castedGetAny" (formula "4") (term "0,1,1,0,0,0"))
                            (builtin "One Step Simplification" (formula "4"))
                           (rule "true_left" (formula "4"))
                           (rule "cnf_rightDist" (formula "4") (term "0,0,0"))
                           (rule "distr_forallAnd" (formula "4") (term "0,0"))
                           (rule "distr_forallAnd" (formula "4") (term "0"))
                           (rule "distr_forallAnd" (formula "4"))
                           (rule "andLeft" (formula "4"))
                           (rule "shift_paren_or" (formula "3") (term "0,0,0"))
                            (builtin "One Step Simplification" (formula "3"))
                           (rule "eqSymm" (formula "3") (term "1,1,0,0,0"))
                           (rule "castedGetAny" (formula "3") (term "1,0,0,0,0,0,0"))
                           (rule "castedGetAny" (formula "3") (term "0,0,1,0,0,0"))
                           (rule "castedGetAny" (formula "3") (term "0,1,1,0,0,0"))
                            (builtin "One Step Simplification" (formula "3"))
                           (rule "true_left" (formula "3"))
                           (rule "cnf_rightDist" (formula "2") (term "0,0,0"))
                           (rule "distr_forallAnd" (formula "2") (term "0,0"))
                           (rule "distr_forallAnd" (formula "2") (term "0"))
                           (rule "distr_forallAnd" (formula "2"))
                           (rule "andLeft" (formula "2"))
                           (rule "commute_or_2" (formula "3") (term "0,0,0"))
                            (builtin "One Step Simplification" (formula "3"))
                           (rule "eqSymm" (formula "3") (term "1,0,0,0,0"))
                           (rule "castedGetAny" (formula "3") (term "1,0,0,1,0,0,0"))
                           (rule "castedGetAny" (formula "3") (term "0,0,0,0,0,0"))
                           (rule "castedGetAny" (formula "3") (term "0,1,0,0,0,0"))
                            (builtin "One Step Simplification" (formula "3"))
                           (rule "true_left" (formula "3"))
                           (rule "commute_or_2" (formula "2") (term "0,0,0"))
                            (builtin "One Step Simplification" (formula "2"))
                           (rule "eqSymm" (formula "2") (term "1,0,0,0,0"))
                           (rule "castedGetAny" (formula "2") (term "1,0,0,1,0,0,0"))
                           (rule "castedGetAny" (formula "2") (term "0,0,0,0,0,0"))
                           (rule "castedGetAny" (formula "2") (term "0,1,0,0,0,0"))
                            (builtin "One Step Simplification" (formula "2"))
                           (rule "true_left" (formula "2"))
                           (rule "shift_paren_or" (formula "2") (term "0,0,0"))
                            (builtin "One Step Simplification" (formula "2"))
                           (rule "eqSymm" (formula "2") (term "1,1,0,0,0"))
                           (rule "castedGetAny" (formula "2") (term "1,0,0,0,0,0,0"))
                           (rule "castedGetAny" (formula "2") (term "0,0,1,0,0,0"))
                           (rule "castedGetAny" (formula "2") (term "0,1,1,0,0,0"))
                            (builtin "One Step Simplification" (formula "2"))
                           (rule "true_left" (formula "2"))
                           (rule "Use_information_flow_contract_for_compareTo_325434207" (formula "20") (ifseqformula "20"))
                            (builtin "One Step Simplification" (formula "20") (ifInst ""  (formula "94")) (ifInst ""  (formula "94")))
                           (rule "true_left" (formula "20"))
                           (rule "Use_information_flow_contract_for_getOrder_757678341" (formula "61") (ifseqformula "26"))
                           (rule "replace_known_left" (formula "61") (term "1,1") (ifseqformula "8"))
                            (builtin "One Step Simplification" (formula "61"))
                           (rule "true_left" (formula "61"))
                           (rule "Use_information_flow_contract_for_getOrder_757678341" (formula "61") (ifseqformula "61"))
                            (builtin "One Step Simplification" (formula "61"))
                           (rule "true_left" (formula "61"))
                           (rule "Use_information_flow_contract_for_compareTo_325434207" (formula "55") (ifseqformula "20"))
                           (rule "replace_known_left" (formula "55") (term "0,0,1") (ifseqformula "7"))
                            (builtin "One Step Simplification" (formula "55") (ifInst ""  (formula "95")) (ifInst ""  (formula "94")))
                           (rule "applyEqRigid" (formula "55") (term "0,0,1") (ifseqformula "57"))
                           (rule "eqSymm" (formula "55") (term "0,1"))
                           (rule "replace_known_left" (formula "55") (term "0,1") (ifseqformula "21"))
                            (builtin "One Step Simplification" (formula "55"))
                           (rule "Class_invariant_axiom_for_java_math_BigInteger" (formula "55") (term "1,0"))
                           (rule "replace_known_right" (formula "55") (term "0,0,1,0") (ifseqformula "94"))
                            (builtin "One Step Simplification" (formula "55") (ifInst ""  (formula "21")))
                           (rule "Class_invariant_axiom_for_java_math_BigInteger" (formula "55") (term "0"))
                           (rule "replace_known_left" (formula "55") (term "1,0") (ifseqformula "57"))
                            (builtin "One Step Simplification" (formula "55") (ifInst ""  (formula "95")))
                           (rule "applyEq" (formula "56") (term "4") (ifseqformula "55"))
                           (rule "applyEq" (formula "54") (term "0") (ifseqformula "55"))
                           (rule "applyEq" (formula "47") (term "0") (ifseqformula "54"))
                           (rule "Use_information_flow_contract_for_getOrder_757678341" (formula "26") (ifseqformula "26"))
                            (builtin "One Step Simplification" (formula "26"))
                           (rule "true_left" (formula "26"))
                           (rule "Use_information_flow_contract_for_getOrder_757678341" (formula "26") (ifseqformula "60"))
                           (rule "eqSymm" (formula "26") (term "1,1"))
                           (rule "eqSymm" (formula "26") (term "0,1"))
                           (rule "replace_known_left" (formula "26") (term "1,1") (ifseqformula "8"))
                            (builtin "One Step Simplification" (formula "26"))
                           (rule "true_left" (formula "26"))
                           (rule "Use_information_flow_contract_for_multiply_1272441881_0" (formula "72") (ifseqformula "38"))
                           (rule "replaceKnownSelect_taclet21_12" (formula "72") (term "0,1,1"))
                           (rule "replaceKnownSelect_taclet21_11" (formula "72") (term "1,1,1"))
                           (rule "replaceKnownAuxiliaryConstant_taclet00110021_19" (formula "72") (term "0,1,1"))
                           (rule "replaceKnownAuxiliaryConstant_taclet0110021_18" (formula "72") (term "1,1,1"))
                           (rule "replaceKnownSelect_taclet21_8" (formula "72") (term "1,1,0,1"))
                           (rule "replaceKnownSelect_taclet21_9" (formula "72") (term "0,1,0,1"))
                           (rule "replaceKnownAuxiliaryConstant_taclet21_10" (formula "72") (term "1,1,0,1"))
                            (builtin "One Step Simplification" (formula "72") (ifInst ""  (formula "84")) (ifInst ""  (formula "83")) (ifInst ""  (formula "101")))
                           (rule "pullOutSelect" (formula "72") (term "0,0,1") (inst "selectSK=org_bouncycastle_math_ec_ECPoint_value_4"))
                           (rule "simplifySelectOfAnonEQ" (formula "72") (ifseqformula "62"))
                            (builtin "One Step Simplification" (formula "72") (ifInst ""  (formula "99")) (ifInst ""  (formula "49")))
                           (rule "applyEqReverse" (formula "73") (term "0,0,1") (ifseqformula "72"))
                           (rule "hideAuxiliaryEq" (formula "72"))
                           (rule "eqSymm" (formula "72") (term "0,1"))
                           (rule "applyEq" (formula "72") (term "1,0,1") (ifseqformula "6"))
                           (rule "pullOutSelect" (formula "72") (term "0,0,1") (inst "selectSK=org_bouncycastle_math_ec_ECPoint_value_5"))
                           (rule "simplifySelectOfAnonEQ" (formula "72") (ifseqformula "27"))
                            (builtin "One Step Simplification" (formula "72") (ifInst ""  (formula "98")) (ifInst ""  (formula "15")))
                           (rule "applyEqReverse" (formula "73") (term "0,0,1") (ifseqformula "72"))
                            (builtin "One Step Simplification" (formula "73"))
                           (rule "notLeft" (formula "73"))
                           (rule "hideAuxiliaryEq" (formula "72"))
                           (rule "Class_invariant_axiom_for_org_bouncycastle_math_ec_ECPoint" (formula "78") (term "1"))
                            (builtin "One Step Simplification" (formula "78"))
                           (rule "Class_invariant_axiom_for_org_bouncycastle_math_ec_ECPoint" (formula "78"))
                           (rule "closeTrue" (formula "78"))
                        )
                     )
                     (branch " resultAtPost_226_B.<created>@anon_heap_mod«anonHeapFunction» = TRUE FALSE"
                        (rule "applyEqReverse" (formula "106") (term "1") (ifseqformula "8"))
                        (rule "hideAuxiliaryEq" (formula "8"))
                        (rule "eqSymm" (formula "105"))
                        (rule "replace_known_right" (formula "75") (term "0") (ifseqformula "82"))
                         (builtin "One Step Simplification" (formula "75"))
                        (rule "commute_or" (formula "3") (term "0,1,0,0,0"))
                        (rule "commute_or" (formula "2") (term "0,0,0,0"))
                        (rule "onlyCreatedObjectsAreReferenced" (formula "13") (term "1,0") (ifseqformula "21"))
                        (rule "replace_known_right" (formula "13") (term "0") (ifseqformula "92"))
                         (builtin "One Step Simplification" (formula "13") (ifInst ""  (formula "14")))
                        (rule "true_left" (formula "13"))
                        (rule "onlyCreatedObjectsAreReferenced" (formula "97") (term "0") (ifseqformula "21"))
                        (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "98"))
                         (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "27")))
                        (rule "true_left" (formula "1"))
                        (rule "onlyCreatedObjectsAreReferenced" (formula "59") (term "1,0") (ifseqformula "54"))
                        (rule "replace_known_right" (formula "59") (term "0") (ifseqformula "99"))
                         (builtin "One Step Simplification" (formula "59") (ifInst ""  (formula "60")))
                        (rule "true_left" (formula "59"))
                        (rule "onlyCreatedObjectsAreReferenced" (formula "94") (term "0") (ifseqformula "54"))
                        (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "95"))
                         (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "48")))
                        (rule "true_left" (formula "1"))
                        (rule "onlyCreatedObjectsAreReferenced" (formula "30") (term "0") (ifseqformula "21"))
                        (rule "replace_known_right" (formula "30") (term "0") (ifseqformula "96"))
                         (builtin "One Step Simplification" (formula "30") (ifInst ""  (formula "15")))
                        (rule "true_left" (formula "30"))
                        (rule "onlyCreatedObjectsAreReferenced" (formula "13") (term "1,1,0") (ifseqformula "21"))
                        (rule "replace_known_right" (formula "13") (term "0") (ifseqformula "94"))
                         (builtin "One Step Simplification" (formula "13") (ifInst ""  (formula "15")))
                        (rule "true_left" (formula "13"))
                        (rule "onlyCreatedObjectsAreReferenced" (formula "46") (term "1,0") (ifseqformula "54"))
                        (rule "replace_known_right" (formula "46") (term "0") (ifseqformula "93"))
                         (builtin "One Step Simplification" (formula "46") (ifInst ""  (formula "47")))
                        (rule "true_left" (formula "46"))
                        (rule "commute_or" (formula "2") (term "0,1,0,0,0"))
                        (rule "onlyCreatedObjectsAreReferenced" (formula "48") (term "1,0") (ifseqformula "54"))
                        (rule "replace_known_left" (formula "48") (term "1") (ifseqformula "49"))
                         (builtin "One Step Simplification" (formula "48") (ifInst ""  (formula "97")))
                        (rule "true_left" (formula "48"))
                        (rule "commute_or" (formula "1") (term "0,0,0,0"))
                        (rule "commute_or" (formula "1") (term "0,1,0,0,0"))
                        (rule "commute_or_2" (formula "4") (term "0,0,0"))
                        (rule "commute_and" (formula "32") (term "0,1"))
                        (rule "commute_or_2" (formula "3") (term "0,0,0"))
                        (rule "commute_or_2" (formula "2") (term "0,0,0"))
                        (rule "commute_or_2" (formula "1") (term "0,0,0"))
                        (rule "shift_paren_or" (formula "5") (term "0,0,0,0,0"))
                        (rule "shift_paren_or" (formula "6") (term "0,0,0,0,0"))
                         (builtin "One Step Simplification" (formula "6"))
                        (rule "commute_or_2" (formula "6") (term "0,0,0,0"))
                        (rule "shift_paren_or" (formula "4") (term "0,0,0,0"))
                        (rule "commute_or_2" (formula "3") (term "1,0,0,0,0"))
                        (rule "commute_or_2" (formula "2") (term "1,0,0,0,0"))
                        (rule "shift_paren_or" (formula "1") (term "0,0,0,0"))
                        (rule "commute_or_2" (formula "5") (term "0,0,0,0,0"))
                         (builtin "One Step Simplification" (formula "5"))
                        (rule "commute_or_2" (formula "5") (term "0,0,0,0"))
                        (rule "shift_paren_or" (formula "3") (term "0,0,0,0"))
                        (rule "shift_paren_or" (formula "2") (term "0,0,0,0"))
                        (rule "cnf_rightDist" (formula "6") (term "0,0,0"))
                        (rule "distr_forallAnd" (formula "6") (term "0,0"))
                        (rule "distr_forallAnd" (formula "6") (term "0"))
                        (rule "distr_forallAnd" (formula "6"))
                        (rule "andLeft" (formula "6"))
                        (rule "commute_or_2" (formula "6") (term "0,0,0"))
                         (builtin "One Step Simplification" (formula "6"))
                        (rule "eqSymm" (formula "6") (term "1,0,0,0,0"))
                        (rule "castedGetAny" (formula "6") (term "0,0,0,0,0,0"))
                        (rule "castedGetAny" (formula "6") (term "1,0,0,1,0,0,0"))
                        (rule "castedGetAny" (formula "6") (term "0,1,0,0,0,0"))
                         (builtin "One Step Simplification" (formula "6"))
                        (rule "true_left" (formula "6"))
                        (rule "shift_paren_or" (formula "6") (term "0,0,0"))
                         (builtin "One Step Simplification" (formula "6"))
                        (rule "eqSymm" (formula "6") (term "1,1,0,0,0"))
                        (rule "castedGetAny" (formula "6") (term "0,0,1,0,0,0"))
                        (rule "castedGetAny" (formula "6") (term "0,0,0,0,0,0"))
                        (rule "castedGetAny" (formula "6") (term "0,1,1,0,0,0"))
                         (builtin "One Step Simplification" (formula "6"))
                        (rule "true_left" (formula "6"))
                        (rule "commute_and" (formula "4") (term "1,0,0,0"))
                        (rule "commute_and" (formula "3") (term "1,0,0,0"))
                        (rule "commute_and" (formula "2") (term "1,0,0,0"))
                        (rule "commute_and" (formula "1") (term "1,0,0,0"))
                        (rule "cnf_rightDist" (formula "5") (term "0,0,0"))
                        (rule "distr_forallAnd" (formula "5") (term "0,0"))
                        (rule "distr_forallAnd" (formula "5") (term "0"))
                        (rule "distr_forallAnd" (formula "5"))
                        (rule "andLeft" (formula "5"))
                        (rule "commute_or_2" (formula "5") (term "0,0,0"))
                         (builtin "One Step Simplification" (formula "5"))
                        (rule "eqSymm" (formula "5") (term "1,0,0,0,0"))
                        (rule "castedGetAny" (formula "5") (term "1,0,0,1,0,0,0"))
                        (rule "castedGetAny" (formula "5") (term "0,0,0,0,0,0"))
                        (rule "castedGetAny" (formula "5") (term "0,1,0,0,0,0"))
                         (builtin "One Step Simplification" (formula "5"))
                        (rule "true_left" (formula "5"))
                        (rule "shift_paren_or" (formula "5") (term "0,0,0"))
                         (builtin "One Step Simplification" (formula "5"))
                        (rule "eqSymm" (formula "5") (term "1,1,0,0,0"))
                        (rule "castedGetAny" (formula "5") (term "0,0,1,0,0,0"))
                        (rule "castedGetAny" (formula "5") (term "0,0,0,0,0,0"))
                        (rule "castedGetAny" (formula "5") (term "0,1,1,0,0,0"))
                         (builtin "One Step Simplification" (formula "5"))
                        (rule "true_left" (formula "5"))
                        (rule "shift_paren_or" (formula "4") (term "0,0,0,0,0"))
                         (builtin "One Step Simplification" (formula "4"))
                        (rule "shift_paren_or" (formula "1") (term "0,0,0,0,0"))
                         (builtin "One Step Simplification" (formula "1"))
                        (rule "shift_paren_or" (formula "3") (term "0,0,0,0,0"))
                         (builtin "One Step Simplification" (formula "3"))
                        (rule "shift_paren_or" (formula "2") (term "0,0,0,0,0"))
                         (builtin "One Step Simplification" (formula "2"))
                        (rule "commute_or_2" (formula "4") (term "0,0,0,0"))
                        (rule "commute_or_2" (formula "1") (term "0,0,0,0"))
                        (rule "cnf_rightDist" (formula "3") (term "0,0,0"))
                        (rule "distr_forallAnd" (formula "3") (term "0,0"))
                        (rule "distr_forallAnd" (formula "3") (term "0"))
                        (rule "distr_forallAnd" (formula "3"))
                        (rule "andLeft" (formula "3"))
                        (rule "shift_paren_or" (formula "4") (term "0,0,0"))
                         (builtin "One Step Simplification" (formula "4"))
                        (rule "eqSymm" (formula "4") (term "1,1,0,0,0"))
                        (rule "castedGetAny" (formula "4") (term "0,0,1,0,0,0"))
                        (rule "castedGetAny" (formula "4") (term "0,0,0,0,0,0"))
                        (rule "castedGetAny" (formula "4") (term "0,1,1,0,0,0"))
                         (builtin "One Step Simplification" (formula "4"))
                        (rule "true_left" (formula "4"))
                        (rule "cnf_rightDist" (formula "2") (term "0,0,0"))
                        (rule "distr_forallAnd" (formula "2") (term "0,0"))
                        (rule "distr_forallAnd" (formula "2") (term "0"))
                        (rule "distr_forallAnd" (formula "2"))
                        (rule "andLeft" (formula "2"))
                        (rule "shift_paren_or" (formula "3") (term "0,0,0"))
                         (builtin "One Step Simplification" (formula "3"))
                        (rule "eqSymm" (formula "3") (term "1,1,0,0,0"))
                        (rule "castedGetAny" (formula "3") (term "0,0,1,0,0,0"))
                        (rule "castedGetAny" (formula "3") (term "0,0,0,0,0,0"))
                        (rule "castedGetAny" (formula "3") (term "0,1,1,0,0,0"))
                         (builtin "One Step Simplification" (formula "3"))
                        (rule "true_left" (formula "3"))
                        (rule "cnf_rightDist" (formula "4") (term "0,0,0"))
                        (rule "distr_forallAnd" (formula "4") (term "0,0"))
                        (rule "distr_forallAnd" (formula "4") (term "0"))
                        (rule "distr_forallAnd" (formula "4"))
                        (rule "andLeft" (formula "4"))
                        (rule "cnf_rightDist" (formula "1") (term "0,0,0"))
                        (rule "distr_forallAnd" (formula "1") (term "0,0"))
                        (rule "distr_forallAnd" (formula "1") (term "0"))
                        (rule "distr_forallAnd" (formula "1"))
                        (rule "andLeft" (formula "1"))
                        (rule "shift_paren_or" (formula "5") (term "0,0,0"))
                         (builtin "One Step Simplification" (formula "5"))
                        (rule "eqSymm" (formula "5") (term "1,1,0,0,0"))
                        (rule "castedGetAny" (formula "5") (term "0,0,0,0,0,0"))
                        (rule "castedGetAny" (formula "5") (term "0,0,1,0,0,0"))
                        (rule "castedGetAny" (formula "5") (term "0,1,1,0,0,0"))
                         (builtin "One Step Simplification" (formula "5"))
                        (rule "true_left" (formula "5"))
                        (rule "cnf_rightDist" (formula "3") (term "0,0,0"))
                        (rule "distr_forallAnd" (formula "3") (term "0,0"))
                        (rule "distr_forallAnd" (formula "3") (term "0"))
                        (rule "distr_forallAnd" (formula "3"))
                        (rule "andLeft" (formula "3"))
                        (rule "cnf_rightDist" (formula "2") (term "0,0,0"))
                        (rule "distr_forallAnd" (formula "2") (term "0,0"))
                        (rule "distr_forallAnd" (formula "2") (term "0"))
                        (rule "distr_forallAnd" (formula "2"))
                        (rule "andLeft" (formula "2"))
                        (rule "commute_or_2" (formula "2") (term "0,0,0"))
                         (builtin "One Step Simplification" (formula "2"))
                        (rule "eqSymm" (formula "2") (term "1,0,0,0,0"))
                        (rule "castedGetAny" (formula "2") (term "1,0,0,1,0,0,0"))
                        (rule "castedGetAny" (formula "2") (term "0,0,0,0,0,0"))
                        (rule "castedGetAny" (formula "2") (term "0,1,0,0,0,0"))
                         (builtin "One Step Simplification" (formula "2"))
                        (rule "true_left" (formula "2"))
                        (rule "shift_paren_or" (formula "3") (term "0,0,0"))
                         (builtin "One Step Simplification" (formula "3"))
                        (rule "eqSymm" (formula "3") (term "1,1,0,0,0"))
                        (rule "castedGetAny" (formula "3") (term "0,0,1,0,0,0"))
                        (rule "castedGetAny" (formula "3") (term "1,0,0,0,0,0,0"))
                        (rule "castedGetAny" (formula "3") (term "0,1,1,0,0,0"))
                         (builtin "One Step Simplification" (formula "3"))
                        (rule "true_left" (formula "3"))
                        (rule "shift_paren_or" (formula "2") (term "0,0,0"))
                         (builtin "One Step Simplification" (formula "2"))
                        (rule "eqSymm" (formula "2") (term "1,1,0,0,0"))
                        (rule "castedGetAny" (formula "2") (term "1,0,0,0,0,0,0"))
                        (rule "castedGetAny" (formula "2") (term "0,0,1,0,0,0"))
                        (rule "castedGetAny" (formula "2") (term "0,1,1,0,0,0"))
                         (builtin "One Step Simplification" (formula "2"))
                        (rule "true_left" (formula "2"))
                        (rule "cnf_rightDist" (formula "2") (term "0,0,0"))
                        (rule "distr_forallAnd" (formula "2") (term "0,0"))
                        (rule "distr_forallAnd" (formula "2") (term "0"))
                        (rule "distr_forallAnd" (formula "2"))
                        (rule "andLeft" (formula "2"))
                        (rule "commute_or_2" (formula "2") (term "0,0,0"))
                         (builtin "One Step Simplification" (formula "2"))
                        (rule "eqSymm" (formula "2") (term "1,0,0,0,0"))
                        (rule "castedGetAny" (formula "2") (term "1,0,0,1,0,0,0"))
                        (rule "castedGetAny" (formula "2") (term "0,0,0,0,0,0"))
                        (rule "castedGetAny" (formula "2") (term "0,1,0,0,0,0"))
                         (builtin "One Step Simplification" (formula "2"))
                        (rule "true_left" (formula "2"))
                        (rule "ifthenelse_split_for" (formula "28") (term "1,1"))
                        (branch "result_228_A_1.value@heapAtPre_A«anonHeapFunction» ≥ 0 TRUE"
                           (rule "cnf_rightDist" (formula "29"))
                           (rule "andLeft" (formula "29"))
                           (rule "commute_or" (formula "30"))
                           (rule "cnf_rightDist" (formula "29"))
                           (rule "andLeft" (formula "29"))
                           (rule "commute_or" (formula "30"))
                           (rule "cnf_rightDist" (formula "1") (term "0,0,0"))
                           (rule "distr_forallAnd" (formula "1") (term "0,0"))
                           (rule "distr_forallAnd" (formula "1") (term "0"))
                           (rule "distr_forallAnd" (formula "1"))
                           (rule "andLeft" (formula "1"))
                           (rule "shift_paren_or" (formula "3") (term "0,0,0"))
                            (builtin "One Step Simplification" (formula "3"))
                           (rule "eqSymm" (formula "3") (term "1,1,0,0,0"))
                           (rule "castedGetAny" (formula "3") (term "0,0,1,0,0,0"))
                           (rule "castedGetAny" (formula "3") (term "1,0,0,0,0,0,0"))
                           (rule "castedGetAny" (formula "3") (term "0,1,1,0,0,0"))
                            (builtin "One Step Simplification" (formula "3"))
                           (rule "true_left" (formula "3"))
                           (rule "shift_paren_or" (formula "2") (term "0,0,0"))
                            (builtin "One Step Simplification" (formula "2"))
                           (rule "eqSymm" (formula "2") (term "1,1,0,0,0"))
                           (rule "castedGetAny" (formula "2") (term "1,0,0,0,0,0,0"))
                           (rule "castedGetAny" (formula "2") (term "0,0,1,0,0,0"))
                           (rule "castedGetAny" (formula "2") (term "0,1,1,0,0,0"))
                            (builtin "One Step Simplification" (formula "2"))
                           (rule "true_left" (formula "2"))
                           (rule "cnf_rightDist" (formula "1") (term "0,0,0"))
                           (rule "distr_forallAnd" (formula "1") (term "0,0"))
                           (rule "distr_forallAnd" (formula "1") (term "0"))
                           (rule "distr_forallAnd" (formula "1"))
                           (rule "andLeft" (formula "1"))
                           (rule "commute_or_2" (formula "1") (term "0,0,0"))
                            (builtin "One Step Simplification" (formula "1"))
                           (rule "eqSymm" (formula "1") (term "1,0,0,0,0"))
                           (rule "castedGetAny" (formula "1") (term "0,0,0,0,0,0"))
                           (rule "castedGetAny" (formula "1") (term "1,0,0,1,0,0,0"))
                           (rule "castedGetAny" (formula "1") (term "0,1,0,0,0,0"))
                            (builtin "One Step Simplification" (formula "1"))
                           (rule "true_left" (formula "1"))
                           (rule "shift_paren_or" (formula "1") (term "0,0,0"))
                            (builtin "One Step Simplification" (formula "1"))
                           (rule "eqSymm" (formula "1") (term "1,1,0,0,0"))
                           (rule "castedGetAny" (formula "1") (term "0,0,1,0,0,0"))
                           (rule "castedGetAny" (formula "1") (term "1,0,0,0,0,0,0"))
                           (rule "castedGetAny" (formula "1") (term "0,1,1,0,0,0"))
                            (builtin "One Step Simplification" (formula "1"))
                           (rule "true_left" (formula "1"))
                           (rule "cut_direct" (formula "27") (term "0"))
                           (branch "CUT: result_228_A_1.value@heapAtPre_A«anonHeapFunction» = 0 TRUE"
                               (builtin "One Step Simplification" (formula "28"))
                              (rule "true_left" (formula "28"))
                              (rule "replace_known_left" (formula "28") (term "0") (ifseqformula "27"))
                               (builtin "One Step Simplification" (formula "28"))
                              (rule "true_left" (formula "28"))
                              (rule "replace_known_left" (formula "28") (term "0") (ifseqformula "27"))
                               (builtin "One Step Simplification" (formula "28"))
                              (rule "true_left" (formula "28"))
                              (rule "applyEq" (formula "29") (term "1,0,0") (ifseqformula "27"))
                              (rule "polySimp_mulComm0" (formula "29") (term "0"))
                              (rule "applyEq" (formula "28") (term "1,0") (ifseqformula "27"))
                              (rule "eqSymm" (formula "28"))
                              (rule "polySimp_homoEq" (formula "28"))
                              (rule "polySimp_mulLiterals" (formula "28") (term "1,0"))
                              (rule "polySimp_elimOne" (formula "28") (term "1,0"))
                              (rule "applyEq" (formula "26") (term "0") (ifseqformula "27"))
                              (rule "qeq_literals" (formula "26"))
                              (rule "true_left" (formula "26"))
                              (rule "applyEq" (formula "6") (term "1") (ifseqformula "26"))
                              (rule "applyEq" (formula "55") (term "1") (ifseqformula "26"))
                              (rule "applyEq" (formula "22") (term "1") (ifseqformula "26"))
                              (rule "applyEq" (formula "28") (term "0,0") (ifseqformula "26"))
                              (rule "times_zero_2" (formula "28") (term "0"))
                              (rule "polySimp_homoEq" (formula "28"))
                              (rule "mul_literals" (formula "28") (term "1,0"))
                              (rule "add_zero_right" (formula "28") (term "0"))
                              (rule "applyEq" (formula "27") (term "1,1,0") (ifseqformula "26"))
                              (rule "polySimp_addComm0" (formula "27") (term "0"))
                              (rule "polySimp_sepPosMonomial" (formula "28"))
                              (rule "polySimp_mulLiterals" (formula "28") (term "1"))
                              (rule "polySimp_elimOne" (formula "28") (term "1"))
                              (rule "applyEq" (formula "64") (term "1") (ifseqformula "28"))
                              (rule "polySimp_sepPosMonomial" (formula "27"))
                              (rule "div_axiom" (formula "27") (term "0,1") (inst "quotient=quotient_1"))
                               (builtin "One Step Simplification" (formula "27"))
                              (rule "true_left" (formula "27"))
                              (rule "jdiv_axiom" (formula "27") (term "0"))
                              (rule "eqSymm" (formula "27"))
                              (rule "applyEq" (formula "27") (term "1") (ifseqformula "28"))
                               (builtin "One Step Simplification" (formula "27"))
                              (rule "eqSymm" (formula "27") (term "1"))
                              (rule "polySimp_homoEq" (formula "27") (term "1"))
                              (rule "polySimp_mulLiterals" (formula "27") (term "1,0,1"))
                              (rule "polySimp_elimOne" (formula "27") (term "1,0,1"))
                              (rule "polySimp_sepPosMonomial" (formula "27") (term "1"))
                              (rule "inEqSimp_contradInEq0" (formula "27") (term "0,0") (ifseqformula "3"))
                              (rule "qeq_literals" (formula "27") (term "0,0,0"))
                               (builtin "One Step Simplification" (formula "27"))
                              (rule "true_left" (formula "27"))
                              (rule "Use_information_flow_contract_for_compareTo_325434207" (formula "18") (ifseqformula "18"))
                               (builtin "One Step Simplification" (formula "18") (ifInst ""  (formula "92")) (ifInst ""  (formula "92")))
                              (rule "true_left" (formula "18"))
                              (rule "Use_information_flow_contract_for_getOrder_757678341" (formula "57") (ifseqformula "24"))
                              (rule "applyEq" (formula "57") (term "0,1,1") (ifseqformula "6"))
                              (rule "eqSymm" (formula "57") (term "1,1"))
                              (rule "replace_known_left" (formula "57") (term "1,1") (ifseqformula "26"))
                               (builtin "One Step Simplification" (formula "57"))
                              (rule "true_left" (formula "57"))
                              (rule "Use_information_flow_contract_for_getOrder_757678341" (formula "57") (ifseqformula "57"))
                               (builtin "One Step Simplification" (formula "57"))
                              (rule "true_left" (formula "57"))
                              (rule "Use_information_flow_contract_for_getOrder_757678341" (formula "24") (ifseqformula "24"))
                               (builtin "One Step Simplification" (formula "24"))
                              (rule "true_left" (formula "24"))
                              (rule "Use_information_flow_contract_for_compareTo_325434207" (formula "18") (ifseqformula "51"))
                              (rule "eqSymm" (formula "18") (term "1,1"))
                              (rule "eqSymm" (formula "18") (term "0,0,1"))
                              (rule "eqSymm" (formula "18") (term "1,0,1"))
                              (rule "replace_known_right" (formula "18") (term "0,1,1,0") (ifseqformula "93"))
                               (builtin "One Step Simplification" (formula "18") (ifInst ""  (formula "92")) (ifInst ""  (formula "5")))
                              (rule "applyEq" (formula "18") (term "0,0,1") (ifseqformula "53"))
                              (rule "eqSymm" (formula "18") (term "0,1"))
                              (rule "replace_known_left" (formula "18") (term "0,1") (ifseqformula "20"))
                               (builtin "One Step Simplification" (formula "18"))
                              (rule "Class_invariant_axiom_for_java_math_BigInteger" (formula "18") (term "1,0"))
                              (rule "replace_known_right" (formula "18") (term "0,0,1,0") (ifseqformula "93"))
                               (builtin "One Step Simplification" (formula "18") (ifInst ""  (formula "53")))
                              (rule "Class_invariant_axiom_for_java_math_BigInteger" (formula "18") (term "0"))
                              (rule "replace_known_right" (formula "18") (term "0,0,0") (ifseqformula "92"))
                               (builtin "One Step Simplification" (formula "18") (ifInst ""  (formula "20")))
                              (rule "applyEq" (formula "44") (term "0") (ifseqformula "18"))
                              (rule "applyEq" (formula "50") (term "0") (ifseqformula "18"))
                              (rule "applyEq" (formula "50") (term "4") (ifseqformula "18"))
                              (rule "Use_information_flow_contract_for_multiply_1272441881_0" (formula "69") (ifseqformula "35"))
                              (rule "replaceKnownSelect_taclet21_11" (formula "69") (term "1,1,1"))
                              (rule "replaceKnownSelect_taclet21_12" (formula "69") (term "0,1,1"))
                              (rule "replaceKnownAuxiliaryConstant_taclet0110021_18" (formula "69") (term "1,1,1"))
                              (rule "replaceKnownAuxiliaryConstant_taclet10110021_19" (formula "69") (term "0,1,1"))
                              (rule "replaceKnownSelect_taclet21_9" (formula "69") (term "0,1,0,1"))
                              (rule "replaceKnownSelect_taclet21_8" (formula "69") (term "1,1,0,1"))
                              (rule "replaceKnownAuxiliaryConstant_taclet021_15" (formula "69") (term "0,1,0,1"))
                              (rule "replaceKnownAuxiliaryConstant_taclet21_10" (formula "69") (term "1,1,0,1"))
                              (rule "replaceKnownAuxiliaryConstant_taclet021_15" (formula "69") (term "1,1,0,1"))
                               (builtin "One Step Simplification" (formula "69") (ifInst ""  (formula "82")) (ifInst ""  (formula "81")) (ifInst ""  (formula "99")))
                              (rule "pullOutSelect" (formula "69") (term "1,0,1") (inst "selectSK=org_bouncycastle_math_ec_ECPoint_value_4"))
                              (rule "simplifySelectOfAnonEQ" (formula "69") (ifseqformula "26"))
                               (builtin "One Step Simplification" (formula "69") (ifInst ""  (formula "96")) (ifInst ""  (formula "13")))
                              (rule "applyEqReverse" (formula "70") (term "1,0,1") (ifseqformula "69"))
                              (rule "hideAuxiliaryEq" (formula "69"))
                              (rule "pullOutSelect" (formula "69") (term "0,0,1") (inst "selectSK=org_bouncycastle_math_ec_ECPoint_value_5"))
                              (rule "simplifySelectOfAnonEQ" (formula "69") (ifseqformula "58"))
                               (builtin "One Step Simplification" (formula "69") (ifInst ""  (formula "97")) (ifInst ""  (formula "46")))
                              (rule "applyEqReverse" (formula "70") (term "0,0,1") (ifseqformula "69"))
                              (rule "hideAuxiliaryEq" (formula "69"))
                              (rule "replace_known_left" (formula "69") (term "0,1") (ifseqformula "4"))
                               (builtin "One Step Simplification" (formula "69"))
                              (rule "notLeft" (formula "69"))
                              (rule "Class_invariant_axiom_for_org_bouncycastle_math_ec_ECPoint" (formula "75") (term "1"))
                               (builtin "One Step Simplification" (formula "75"))
                              (rule "Class_invariant_axiom_for_org_bouncycastle_math_ec_ECPoint" (formula "75"))
                              (rule "closeTrue" (formula "75"))
                           )
                           (branch "CUT: result_228_A_1.value@heapAtPre_A«anonHeapFunction» = 0 FALSE"
                               (builtin "One Step Simplification" (formula "27"))
                              (rule "replace_known_right" (formula "28") (term "0") (ifseqformula "79"))
                               (builtin "One Step Simplification" (formula "28"))
                              (rule "replace_known_right" (formula "29") (term "0") (ifseqformula "79"))
                               (builtin "One Step Simplification" (formula "29"))
                              (rule "applyEq" (formula "31") (term "0,0") (ifseqformula "28"))
                              (rule "polySimp_mulComm0" (formula "31") (term "0"))
                              (rule "applyEq" (formula "29") (term "0") (ifseqformula "31"))
                              (rule "inEqSimp_homoInEq1" (formula "29"))
                              (rule "polySimp_mulComm0" (formula "29") (term "1,0"))
                              (rule "polySimp_rightDist" (formula "29") (term "1,0"))
                              (rule "polySimp_mulAssoc" (formula "29") (term "0,1,0"))
                              (rule "polySimp_mulComm0" (formula "29") (term "0,0,1,0"))
                              (rule "polySimp_mulLiterals" (formula "29") (term "0,1,0"))
                              (rule "polySimp_elimOne" (formula "29") (term "0,1,0"))
                              (rule "polySimp_addAssoc" (formula "29") (term "0"))
                              (rule "polySimp_addComm1" (formula "29") (term "0,0"))
                              (rule "polySimp_pullOutFactor2b" (formula "29") (term "0,0,0"))
                              (rule "add_literals" (formula "29") (term "1,1,0,0,0"))
                              (rule "times_zero_1" (formula "29") (term "1,0,0,0"))
                              (rule "add_zero_right" (formula "29") (term "0,0,0"))
                              (rule "applyEq" (formula "27") (term "0") (ifseqformula "31"))
                              (rule "inEqSimp_homoInEq0" (formula "27"))
                              (rule "polySimp_mulComm0" (formula "27") (term "1,0"))
                              (rule "polySimp_rightDist" (formula "27") (term "1,0"))
                              (rule "polySimp_mulAssoc" (formula "27") (term "0,1,0"))
                              (rule "polySimp_mulComm0" (formula "27") (term "0,0,1,0"))
                              (rule "polySimp_mulLiterals" (formula "27") (term "0,1,0"))
                              (rule "polySimp_elimOne" (formula "27") (term "0,1,0"))
                              (rule "polySimp_addAssoc" (formula "27") (term "0"))
                              (rule "polySimp_pullOutFactor2" (formula "27") (term "0,0"))
                              (rule "add_literals" (formula "27") (term "1,0,0"))
                              (rule "times_zero_1" (formula "27") (term "0,0"))
                              (rule "add_zero_left" (formula "27") (term "0"))
                              (rule "applyEq" (formula "30") (term "0,1") (ifseqformula "28"))
                              (rule "inEqSimp_sepNegMonomial0" (formula "29"))
                              (rule "polySimp_mulLiterals" (formula "29") (term "0"))
                              (rule "polySimp_elimOne" (formula "29") (term "0"))
                              (rule "inEqSimp_invertInEq1" (formula "27"))
                              (rule "polySimp_mulLiterals" (formula "27") (term "0"))
                              (rule "mul_literals" (formula "27") (term "1"))
                              (rule "polySimp_elimOne" (formula "27") (term "0"))
                              (rule "inEqSimp_strengthen1" (formula "26") (ifseqformula "79"))
                              (rule "add_literals" (formula "26") (term "1"))
                              (rule "inEqSimp_contradEq7" (formula "79") (ifseqformula "26"))
                              (rule "mul_literals" (formula "79") (term "1,0,0"))
                              (rule "add_zero_right" (formula "79") (term "0,0"))
                              (rule "leq_literals" (formula "79") (term "0"))
                               (builtin "One Step Simplification" (formula "79"))
                              (rule "false_right" (formula "79"))
                              (rule "inEqSimp_exactShadow3" (formula "29") (ifseqformula "27"))
                              (rule "add_zero_right" (formula "29") (term "0"))
                              (rule "polySimp_rightDist" (formula "29") (term "0"))
                              (rule "mul_literals" (formula "29") (term "0,0"))
                              (rule "polySimp_mulLiterals" (formula "29") (term "1,0"))
                              (rule "polySimp_elimOne" (formula "29") (term "1,0"))
                              (rule "inEqSimp_sepPosMonomial1" (formula "29"))
                              (rule "mul_literals" (formula "29") (term "1"))
                              (rule "Use_information_flow_contract_for_compareTo_325434207" (formula "18") (ifseqformula "18"))
                               (builtin "One Step Simplification" (formula "18") (ifInst ""  (formula "95")) (ifInst ""  (formula "95")))
                              (rule "true_left" (formula "18"))
                              (rule "Use_information_flow_contract_for_getOrder_757678341" (formula "60") (ifseqformula "24"))
                              (rule "replace_known_left" (formula "60") (term "1,1") (ifseqformula "6"))
                               (builtin "One Step Simplification" (formula "60"))
                              (rule "true_left" (formula "60"))
                              (rule "Use_information_flow_contract_for_getOrder_757678341" (formula "60") (ifseqformula "60"))
                               (builtin "One Step Simplification" (formula "60"))
                              (rule "true_left" (formula "60"))
                              (rule "Use_information_flow_contract_for_getOrder_757678341" (formula "24") (ifseqformula "24"))
                               (builtin "One Step Simplification" (formula "24"))
                              (rule "true_left" (formula "24"))
                              (rule "Use_information_flow_contract_for_compareTo_325434207" (formula "18") (ifseqformula "54"))
                              (rule "eqSymm" (formula "18") (term "1,0,1"))
                              (rule "eqSymm" (formula "18") (term "1,1"))
                              (rule "eqSymm" (formula "18") (term "0,0,1"))
                              (rule "replace_known_right" (formula "18") (term "0,1,1,0") (ifseqformula "96"))
                               (builtin "One Step Simplification" (formula "18") (ifInst ""  (formula "95")) (ifInst ""  (formula "5")))
                              (rule "applyEq" (formula "18") (term "0,0,1") (ifseqformula "56"))
                              (rule "eqSymm" (formula "18") (term "0,1"))
                              (rule "replace_known_left" (formula "18") (term "0,1") (ifseqformula "20"))
                               (builtin "One Step Simplification" (formula "18"))
                              (rule "Class_invariant_axiom_for_java_math_BigInteger" (formula "18") (term "0,0"))
                              (rule "replace_known_left" (formula "18") (term "1,0,0") (ifseqformula "20"))
                               (builtin "One Step Simplification" (formula "18") (ifInst ""  (formula "95")))
                              (rule "Class_invariant_axiom_for_java_math_BigInteger" (formula "18") (term "0"))
                              (rule "replace_known_right" (formula "18") (term "0,0,0") (ifseqformula "96"))
                               (builtin "One Step Simplification" (formula "18") (ifInst ""  (formula "56")))
                              (rule "applyEq" (formula "55") (term "4") (ifseqformula "18"))
                              (rule "applyEq" (formula "47") (term "0") (ifseqformula "18"))
                              (rule "applyEq" (formula "53") (term "0") (ifseqformula "18"))
                              (rule "Use_information_flow_contract_for_multiply_1272441881" (formula "72") (ifseqformula "38"))
                              (rule "replaceKnownSelect_taclet21_12" (formula "72") (term "0,1,1"))
                              (rule "replaceKnownSelect_taclet21_11" (formula "72") (term "1,1,1"))
                              (rule "replaceKnownAuxiliaryConstant_taclet10110021_19" (formula "72") (term "0,1,1"))
                              (rule "replaceKnownAuxiliaryConstant_taclet0110021_18" (formula "72") (term "1,1,1"))
                              (rule "replaceKnownSelect_taclet21_9" (formula "72") (term "0,1,0,1"))
                              (rule "replaceKnownSelect_taclet21_8" (formula "72") (term "1,1,0,1"))
                              (rule "replaceKnownAuxiliaryConstant_taclet021_15" (formula "72") (term "0,1,0,1"))
                              (rule "replaceKnownAuxiliaryConstant_taclet21_10" (formula "72") (term "1,1,0,1"))
                              (rule "replaceKnownAuxiliaryConstant_taclet021_15" (formula "72") (term "1,1,0,1"))
                               (builtin "One Step Simplification" (formula "72") (ifInst ""  (formula "85")) (ifInst ""  (formula "84")) (ifInst ""  (formula "102")))
                              (rule "pullOutSelect" (formula "72") (term "1,0,1") (inst "selectSK=org_bouncycastle_math_ec_ECPoint_value_4"))
                              (rule "simplifySelectOfAnonEQ" (formula "72") (ifseqformula "26"))
                               (builtin "One Step Simplification" (formula "72") (ifInst ""  (formula "99")) (ifInst ""  (formula "13")))
                              (rule "applyEqReverse" (formula "73") (term "1,0,1") (ifseqformula "72"))
                              (rule "hideAuxiliaryEq" (formula "72"))
                              (rule "pullOutSelect" (formula "72") (term "0,0,1") (inst "selectSK=org_bouncycastle_math_ec_ECPoint_value_5"))
                              (rule "simplifySelectOfAnonEQ" (formula "72") (ifseqformula "61"))
                               (builtin "One Step Simplification" (formula "72") (ifInst ""  (formula "100")) (ifInst ""  (formula "49")))
                              (rule "applyEqReverse" (formula "73") (term "0,0,1") (ifseqformula "72"))
                              (rule "hideAuxiliaryEq" (formula "72"))
                              (rule "replace_known_left" (formula "72") (term "0,1") (ifseqformula "4"))
                               (builtin "One Step Simplification" (formula "72"))
                              (rule "notLeft" (formula "72"))
                              (rule "Class_invariant_axiom_for_org_bouncycastle_math_ec_ECPoint" (formula "78") (term "0"))
                               (builtin "One Step Simplification" (formula "78"))
                              (rule "Class_invariant_axiom_for_org_bouncycastle_math_ec_ECPoint" (formula "78"))
                              (rule "closeTrue" (formula "78"))
                           )
                        )
                        (branch "result_228_A_1.value@heapAtPre_A«anonHeapFunction» ≥ 0 FALSE"
                           (rule "inEqSimp_geqRight" (formula "78"))
                           (rule "mul_literals" (formula "1") (term "1,0,0"))
                           (rule "add_literals" (formula "1") (term "0,0"))
                           (rule "inEqSimp_sepPosMonomial0" (formula "1"))
                           (rule "mul_literals" (formula "1") (term "1"))
                           (rule "inEqSimp_contradEq3" (formula "29") (term "0") (ifseqformula "1"))
                           (rule "mul_literals" (formula "29") (term "1,0,0,0"))
                           (rule "add_zero_right" (formula "29") (term "0,0,0"))
                           (rule "qeq_literals" (formula "29") (term "0,0"))
                            (builtin "One Step Simplification" (formula "29"))
                           (rule "andLeft" (formula "29"))
                           (rule "andLeft" (formula "29"))
                           (rule "applyEq" (formula "33") (term "0,0") (ifseqformula "30"))
                           (rule "polySimp_mulComm0" (formula "33") (term "0"))
                           (rule "applyEq" (formula "29") (term "0") (ifseqformula "33"))
                           (rule "inEqSimp_homoInEq0" (formula "29"))
                           (rule "polySimp_mulComm0" (formula "29") (term "1,0"))
                           (rule "polySimp_rightDist" (formula "29") (term "1,0"))
                           (rule "polySimp_mulAssoc" (formula "29") (term "0,1,0"))
                           (rule "polySimp_mulComm0" (formula "29") (term "0,0,1,0"))
                           (rule "polySimp_mulLiterals" (formula "29") (term "0,1,0"))
                           (rule "polySimp_elimOne" (formula "29") (term "0,1,0"))
                           (rule "polySimp_addAssoc" (formula "29") (term "0"))
                           (rule "polySimp_pullOutFactor2" (formula "29") (term "0,0"))
                           (rule "add_literals" (formula "29") (term "1,0,0"))
                           (rule "times_zero_1" (formula "29") (term "0,0"))
                           (rule "add_zero_left" (formula "29") (term "0"))
                           (rule "applyEq" (formula "31") (term "0") (ifseqformula "33"))
                           (rule "inEqSimp_homoInEq1" (formula "31"))
                           (rule "polySimp_mulComm0" (formula "31") (term "1,0"))
                           (rule "polySimp_rightDist" (formula "31") (term "1,0"))
                           (rule "polySimp_mulAssoc" (formula "31") (term "0,1,0"))
                           (rule "polySimp_mulComm0" (formula "31") (term "0,0,1,0"))
                           (rule "polySimp_mulLiterals" (formula "31") (term "0,1,0"))
                           (rule "polySimp_elimOne" (formula "31") (term "0,1,0"))
                           (rule "polySimp_addAssoc" (formula "31") (term "0"))
                           (rule "polySimp_addComm1" (formula "31") (term "0,0"))
                           (rule "polySimp_pullOutFactor2b" (formula "31") (term "0,0,0"))
                           (rule "add_literals" (formula "31") (term "1,1,0,0,0"))
                           (rule "times_zero_1" (formula "31") (term "1,0,0,0"))
                           (rule "add_literals" (formula "31") (term "0,0,0"))
                           (rule "applyEq" (formula "32") (term "0,1") (ifseqformula "30"))
                           (rule "inEqSimp_invertInEq1" (formula "29"))
                           (rule "polySimp_mulLiterals" (formula "29") (term "0"))
                           (rule "mul_literals" (formula "29") (term "1"))
                           (rule "polySimp_elimOne" (formula "29") (term "0"))
                           (rule "inEqSimp_sepNegMonomial0" (formula "31"))
                           (rule "polySimp_mulLiterals" (formula "31") (term "0"))
                           (rule "polySimp_elimOne" (formula "31") (term "0"))
                           (rule "inEqSimp_exactShadow3" (formula "31") (ifseqformula "29"))
                           (rule "add_zero_right" (formula "31") (term "0"))
                           (rule "polySimp_rightDist" (formula "31") (term "0"))
                           (rule "mul_literals" (formula "31") (term "0,0"))
                           (rule "inEqSimp_sepNegMonomial1" (formula "31"))
                           (rule "polySimp_mulLiterals" (formula "31") (term "0"))
                           (rule "polySimp_elimOne" (formula "31") (term "0"))
                           (rule "cnf_rightDist" (formula "2") (term "0,0,0"))
                           (rule "distr_forallAnd" (formula "2") (term "0,0"))
                           (rule "distr_forallAnd" (formula "2") (term "0"))
                           (rule "distr_forallAnd" (formula "2"))
                           (rule "andLeft" (formula "2"))
                           (rule "shift_paren_or" (formula "4") (term "0,0,0"))
                            (builtin "One Step Simplification" (formula "4"))
                           (rule "eqSymm" (formula "4") (term "1,1,0,0,0"))
                           (rule "castedGetAny" (formula "4") (term "1,0,0,0,0,0,0"))
                           (rule "castedGetAny" (formula "4") (term "0,0,1,0,0,0"))
                           (rule "castedGetAny" (formula "4") (term "0,1,1,0,0,0"))
                            (builtin "One Step Simplification" (formula "4"))
                           (rule "true_left" (formula "4"))
                           (rule "shift_paren_or" (formula "3") (term "0,0,0"))
                            (builtin "One Step Simplification" (formula "3"))
                           (rule "eqSymm" (formula "3") (term "1,1,0,0,0"))
                           (rule "castedGetAny" (formula "3") (term "0,0,1,0,0,0"))
                           (rule "castedGetAny" (formula "3") (term "1,0,0,0,0,0,0"))
                           (rule "castedGetAny" (formula "3") (term "0,1,1,0,0,0"))
                            (builtin "One Step Simplification" (formula "3"))
                           (rule "true_left" (formula "3"))
                           (rule "cnf_rightDist" (formula "2") (term "0,0,0"))
                           (rule "distr_forallAnd" (formula "2") (term "0,0"))
                           (rule "distr_forallAnd" (formula "2") (term "0"))
                           (rule "distr_forallAnd" (formula "2"))
                           (rule "andLeft" (formula "2"))
                           (rule "commute_or_2" (formula "2") (term "0,0,0"))
                            (builtin "One Step Simplification" (formula "2"))
                           (rule "eqSymm" (formula "2") (term "1,0,0,0,0"))
                           (rule "castedGetAny" (formula "2") (term "1,0,0,1,0,0,0"))
                           (rule "castedGetAny" (formula "2") (term "0,0,0,0,0,0"))
                           (rule "castedGetAny" (formula "2") (term "0,1,0,0,0,0"))
                            (builtin "One Step Simplification" (formula "2"))
                           (rule "true_left" (formula "2"))
                           (rule "shift_paren_or" (formula "2") (term "0,0,0"))
                            (builtin "One Step Simplification" (formula "2"))
                           (rule "eqSymm" (formula "2") (term "1,1,0,0,0"))
                           (rule "castedGetAny" (formula "2") (term "0,0,1,0,0,0"))
                           (rule "castedGetAny" (formula "2") (term "1,0,0,0,0,0,0"))
                           (rule "castedGetAny" (formula "2") (term "0,1,1,0,0,0"))
                            (builtin "One Step Simplification" (formula "2"))
                           (rule "true_left" (formula "2"))
                           (rule "Use_information_flow_contract_for_compareTo_325434207" (formula "19") (ifseqformula "19"))
                            (builtin "One Step Simplification" (formula "19") (ifInst ""  (formula "95")) (ifInst ""  (formula "95")))
                           (rule "true_left" (formula "19"))
                           (rule "Use_information_flow_contract_for_getOrder_757678341" (formula "60") (ifseqformula "25"))
                           (rule "replace_known_left" (formula "60") (term "1,1") (ifseqformula "7"))
                            (builtin "One Step Simplification" (formula "60"))
                           (rule "true_left" (formula "60"))
                           (rule "Use_information_flow_contract_for_multiply_1272441881_0" (formula "73") (ifseqformula "37"))
                           (rule "replaceKnownSelect_taclet21_11" (formula "73") (term "1,1,1"))
                           (rule "replaceKnownSelect_taclet21_12" (formula "73") (term "0,1,1"))
                           (rule "replaceKnownAuxiliaryConstant_taclet0110021_18" (formula "73") (term "1,1,1"))
                           (rule "replaceKnownAuxiliaryConstant_taclet10110021_19" (formula "73") (term "0,1,1"))
                           (rule "replaceKnownSelect_taclet21_8" (formula "73") (term "1,1,0,1"))
                           (rule "replaceKnownSelect_taclet21_9" (formula "73") (term "0,1,0,1"))
                           (rule "replaceKnownAuxiliaryConstant_taclet21_10" (formula "73") (term "1,1,0,1"))
                            (builtin "One Step Simplification" (formula "73") (ifInst ""  (formula "86")) (ifInst ""  (formula "85")) (ifInst ""  (formula "103")))
                           (rule "pullOutSelect" (formula "73") (term "0,0,1") (inst "selectSK=org_bouncycastle_math_ec_ECPoint_value_4"))
                           (rule "simplifySelectOfAnonEQ" (formula "73") (ifseqformula "62"))
                            (builtin "One Step Simplification" (formula "73") (ifInst ""  (formula "101")) (ifInst ""  (formula "49")))
                           (rule "applyEqReverse" (formula "74") (term "0,0,1") (ifseqformula "73"))
                           (rule "hideAuxiliaryEq" (formula "73"))
                           (rule "eqSymm" (formula "73") (term "0,1"))
                           (rule "applyEq" (formula "73") (term "1,0,1") (ifseqformula "5"))
                           (rule "pullOutSelect" (formula "73") (term "0,0,1") (inst "selectSK=org_bouncycastle_math_ec_ECPoint_value_5"))
                           (rule "simplifySelectOfAnonEQ" (formula "73") (ifseqformula "26"))
                            (builtin "One Step Simplification" (formula "73") (ifInst ""  (formula "100")) (ifInst ""  (formula "14")))
                           (rule "applyEqReverse" (formula "74") (term "0,0,1") (ifseqformula "73"))
                            (builtin "One Step Simplification" (formula "74"))
                           (rule "notLeft" (formula "74"))
                           (rule "hideAuxiliaryEq" (formula "73"))
                           (rule "Class_invariant_axiom_for_org_bouncycastle_math_ec_ECPoint" (formula "79") (term "0"))
                            (builtin "One Step Simplification" (formula "79"))
                           (rule "Class_invariant_axiom_for_org_bouncycastle_math_ec_ECPoint" (formula "79"))
                           (rule "closeTrue" (formula "79"))
                        )
                     )
                  )
                  (branch " resultAtPost_226_A.<created>@anon_heap_mod«anonHeapFunction» = TRUE FALSE"
                     (rule "applyEqReverse" (formula "107") (term "1") (ifseqformula "9"))
                     (rule "hideAuxiliaryEq" (formula "9"))
                     (rule "eqSymm" (formula "106"))
                     (rule "replace_known_right" (formula "40") (term "0") (ifseqformula "83"))
                      (builtin "One Step Simplification" (formula "40"))
                     (rule "ifthenelse_split" (formula "8") (term "0"))
                     (branch " resultAtPost_226_B.<created>@anon_heap_mod«anonHeapFunction» = TRUE TRUE"
                        (rule "applyEqReverse" (formula "107") (term "1") (ifseqformula "9"))
                        (rule "hideAuxiliaryEq" (formula "9"))
                        (rule "replace_known_left" (formula "76") (term "0") (ifseqformula "8"))
                         (builtin "One Step Simplification" (formula "76"))
                        (rule "true_left" (formula "76"))
                        (rule "commute_or" (formula "3") (term "0,1,0,0,0"))
                        (rule "commute_or" (formula "2") (term "0,0,0,0"))
                        (rule "onlyCreatedObjectsAreReferenced" (formula "13") (term "1,0") (ifseqformula "21"))
                        (rule "replace_known_right" (formula "13") (term "0") (ifseqformula "92"))
                         (builtin "One Step Simplification" (formula "13") (ifInst ""  (formula "14")))
                        (rule "true_left" (formula "13"))
                        (rule "onlyCreatedObjectsAreReferenced" (formula "97") (term "0") (ifseqformula "21"))
                        (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "98"))
                         (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "27")))
                        (rule "true_left" (formula "1"))
                        (rule "onlyCreatedObjectsAreReferenced" (formula "60") (term "1,0") (ifseqformula "55"))
                        (rule "replace_known_right" (formula "60") (term "0") (ifseqformula "99"))
                         (builtin "One Step Simplification" (formula "60") (ifInst ""  (formula "61")))
                        (rule "true_left" (formula "60"))
                        (rule "onlyCreatedObjectsAreReferenced" (formula "94") (term "0") (ifseqformula "55"))
                        (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "95"))
                         (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "49")))
                        (rule "true_left" (formula "1"))
                        (rule "onlyCreatedObjectsAreReferenced" (formula "30") (term "0") (ifseqformula "21"))
                        (rule "replace_known_right" (formula "30") (term "0") (ifseqformula "96"))
                         (builtin "One Step Simplification" (formula "30") (ifInst ""  (formula "15")))
                        (rule "true_left" (formula "30"))
                        (rule "onlyCreatedObjectsAreReferenced" (formula "13") (term "1,1,0") (ifseqformula "21"))
                        (rule "replace_known_right" (formula "13") (term "0") (ifseqformula "94"))
                         (builtin "One Step Simplification" (formula "13") (ifInst ""  (formula "15")))
                        (rule "true_left" (formula "13"))
                        (rule "onlyCreatedObjectsAreReferenced" (formula "47") (term "1,0") (ifseqformula "55"))
                        (rule "replace_known_right" (formula "47") (term "0") (ifseqformula "93"))
                         (builtin "One Step Simplification" (formula "47") (ifInst ""  (formula "48")))
                        (rule "true_left" (formula "47"))
                        (rule "commute_or" (formula "2") (term "0,1,0,0,0"))
                        (rule "onlyCreatedObjectsAreReferenced" (formula "62") (term "1,0") (ifseqformula "55"))
                        (rule "replace_known_right" (formula "62") (term "0") (ifseqformula "97"))
                         (builtin "One Step Simplification" (formula "62") (ifInst ""  (formula "49")))
                        (rule "true_left" (formula "62"))
                        (rule "commute_or" (formula "1") (term "0,0,0,0"))
                        (rule "commute_or" (formula "1") (term "0,1,0,0,0"))
                        (rule "commute_or_2" (formula "4") (term "0,0,0"))
                        (rule "commute_and" (formula "32") (term "0,1"))
                        (rule "commute_or_2" (formula "3") (term "0,0,0"))
                        (rule "commute_or_2" (formula "2") (term "0,0,0"))
                        (rule "commute_or_2" (formula "1") (term "0,0,0"))
                        (rule "shift_paren_or" (formula "5") (term "0,0,0,0,0"))
                        (rule "shift_paren_or" (formula "6") (term "0,0,0,0,0"))
                         (builtin "One Step Simplification" (formula "6"))
                        (rule "commute_or_2" (formula "6") (term "0,0,0,0"))
                        (rule "shift_paren_or" (formula "4") (term "0,0,0,0"))
                        (rule "shift_paren_or" (formula "3") (term "0,0,0,0"))
                        (rule "commute_or_2" (formula "2") (term "1,0,0,0,0"))
                        (rule "commute_or_2" (formula "1") (term "1,0,0,0,0"))
                        (rule "commute_or_2" (formula "5") (term "0,0,0,0,0"))
                         (builtin "One Step Simplification" (formula "5"))
                        (rule "commute_or_2" (formula "5") (term "0,0,0,0"))
                        (rule "shift_paren_or" (formula "2") (term "0,0,0,0"))
                        (rule "shift_paren_or" (formula "1") (term "0,0,0,0"))
                        (rule "cnf_rightDist" (formula "6") (term "0,0,0"))
                        (rule "distr_forallAnd" (formula "6") (term "0,0"))
                        (rule "distr_forallAnd" (formula "6") (term "0"))
                        (rule "distr_forallAnd" (formula "6"))
                        (rule "andLeft" (formula "6"))
                        (rule "commute_or_2" (formula "6") (term "0,0,0"))
                         (builtin "One Step Simplification" (formula "6"))
                        (rule "eqSymm" (formula "6") (term "1,0,0,0,0"))
                        (rule "castedGetAny" (formula "6") (term "0,0,0,0,0,0"))
                        (rule "castedGetAny" (formula "6") (term "1,0,0,1,0,0,0"))
                        (rule "castedGetAny" (formula "6") (term "0,1,0,0,0,0"))
                         (builtin "One Step Simplification" (formula "6"))
                        (rule "true_left" (formula "6"))
                        (rule "shift_paren_or" (formula "6") (term "0,0,0"))
                         (builtin "One Step Simplification" (formula "6"))
                        (rule "eqSymm" (formula "6") (term "1,1,0,0,0"))
                        (rule "castedGetAny" (formula "6") (term "0,0,1,0,0,0"))
                        (rule "castedGetAny" (formula "6") (term "0,0,0,0,0,0"))
                        (rule "castedGetAny" (formula "6") (term "0,1,1,0,0,0"))
                         (builtin "One Step Simplification" (formula "6"))
                        (rule "true_left" (formula "6"))
                        (rule "commute_and" (formula "4") (term "1,0,0,0"))
                        (rule "commute_and" (formula "3") (term "1,0,0,0"))
                        (rule "commute_and" (formula "2") (term "1,0,0,0"))
                        (rule "commute_and" (formula "1") (term "1,0,0,0"))
                        (rule "cnf_rightDist" (formula "5") (term "0,0,0"))
                        (rule "distr_forallAnd" (formula "5") (term "0,0"))
                        (rule "distr_forallAnd" (formula "5") (term "0"))
                        (rule "distr_forallAnd" (formula "5"))
                        (rule "andLeft" (formula "5"))
                        (rule "commute_or_2" (formula "5") (term "0,0,0"))
                         (builtin "One Step Simplification" (formula "5"))
                        (rule "eqSymm" (formula "5") (term "1,0,0,0,0"))
                        (rule "castedGetAny" (formula "5") (term "1,0,0,1,0,0,0"))
                        (rule "castedGetAny" (formula "5") (term "0,0,0,0,0,0"))
                        (rule "castedGetAny" (formula "5") (term "0,1,0,0,0,0"))
                         (builtin "One Step Simplification" (formula "5"))
                        (rule "true_left" (formula "5"))
                        (rule "shift_paren_or" (formula "5") (term "0,0,0"))
                         (builtin "One Step Simplification" (formula "5"))
                        (rule "eqSymm" (formula "5") (term "1,1,0,0,0"))
                        (rule "castedGetAny" (formula "5") (term "0,0,1,0,0,0"))
                        (rule "castedGetAny" (formula "5") (term "0,0,0,0,0,0"))
                        (rule "castedGetAny" (formula "5") (term "0,1,1,0,0,0"))
                         (builtin "One Step Simplification" (formula "5"))
                        (rule "true_left" (formula "5"))
                        (rule "shift_paren_or" (formula "4") (term "0,0,0,0,0"))
                         (builtin "One Step Simplification" (formula "4"))
                        (rule "shift_paren_or" (formula "3") (term "0,0,0,0,0"))
                         (builtin "One Step Simplification" (formula "3"))
                        (rule "shift_paren_or" (formula "2") (term "0,0,0,0,0"))
                         (builtin "One Step Simplification" (formula "2"))
                        (rule "shift_paren_or" (formula "1") (term "0,0,0,0,0"))
                         (builtin "One Step Simplification" (formula "1"))
                        (rule "commute_or_2" (formula "4") (term "0,0,0,0"))
                        (rule "commute_or_2" (formula "3") (term "0,0,0,0"))
                        (rule "cnf_rightDist" (formula "2") (term "0,0,0"))
                        (rule "distr_forallAnd" (formula "2") (term "0,0"))
                        (rule "distr_forallAnd" (formula "2") (term "0"))
                        (rule "distr_forallAnd" (formula "2"))
                        (rule "andLeft" (formula "2"))
                        (rule "shift_paren_or" (formula "3") (term "0,0,0"))
                         (builtin "One Step Simplification" (formula "3"))
                        (rule "eqSymm" (formula "3") (term "1,1,0,0,0"))
                        (rule "castedGetAny" (formula "3") (term "0,0,1,0,0,0"))
                        (rule "castedGetAny" (formula "3") (term "0,0,0,0,0,0"))
                        (rule "castedGetAny" (formula "3") (term "0,1,1,0,0,0"))
                         (builtin "One Step Simplification" (formula "3"))
                        (rule "true_left" (formula "3"))
                        (rule "cnf_rightDist" (formula "1") (term "0,0,0"))
                        (rule "distr_forallAnd" (formula "1") (term "0,0"))
                        (rule "distr_forallAnd" (formula "1") (term "0"))
                        (rule "distr_forallAnd" (formula "1"))
                        (rule "andLeft" (formula "1"))
                        (rule "shift_paren_or" (formula "2") (term "0,0,0"))
                         (builtin "One Step Simplification" (formula "2"))
                        (rule "eqSymm" (formula "2") (term "1,1,0,0,0"))
                        (rule "castedGetAny" (formula "2") (term "0,0,1,0,0,0"))
                        (rule "castedGetAny" (formula "2") (term "0,0,0,0,0,0"))
                        (rule "castedGetAny" (formula "2") (term "0,1,1,0,0,0"))
                         (builtin "One Step Simplification" (formula "2"))
                        (rule "true_left" (formula "2"))
                        (rule "cnf_rightDist" (formula "4") (term "0,0,0"))
                        (rule "distr_forallAnd" (formula "4") (term "0,0"))
                        (rule "distr_forallAnd" (formula "4") (term "0"))
                        (rule "distr_forallAnd" (formula "4"))
                        (rule "andLeft" (formula "4"))
                        (rule "cnf_rightDist" (formula "3") (term "0,0,0"))
                        (rule "distr_forallAnd" (formula "3") (term "0,0"))
                        (rule "distr_forallAnd" (formula "3") (term "0"))
                        (rule "distr_forallAnd" (formula "3"))
                        (rule "andLeft" (formula "3"))
                        (rule "shift_paren_or" (formula "5") (term "0,0,0"))
                         (builtin "One Step Simplification" (formula "5"))
                        (rule "eqSymm" (formula "5") (term "1,1,0,0,0"))
                        (rule "castedGetAny" (formula "5") (term "0,0,0,0,0,0"))
                        (rule "castedGetAny" (formula "5") (term "0,0,1,0,0,0"))
                        (rule "castedGetAny" (formula "5") (term "0,1,1,0,0,0"))
                         (builtin "One Step Simplification" (formula "5"))
                        (rule "true_left" (formula "5"))
                        (rule "cnf_rightDist" (formula "2") (term "0,0,0"))
                        (rule "distr_forallAnd" (formula "2") (term "0,0"))
                        (rule "distr_forallAnd" (formula "2") (term "0"))
                        (rule "distr_forallAnd" (formula "2"))
                        (rule "andLeft" (formula "2"))
                        (rule "commute_or_2" (formula "2") (term "0,0,0"))
                         (builtin "One Step Simplification" (formula "2"))
                        (rule "eqSymm" (formula "2") (term "1,0,0,0,0"))
                        (rule "castedGetAny" (formula "2") (term "0,0,0,0,0,0"))
                        (rule "castedGetAny" (formula "2") (term "1,0,0,1,0,0,0"))
                        (rule "castedGetAny" (formula "2") (term "0,1,0,0,0,0"))
                         (builtin "One Step Simplification" (formula "2"))
                        (rule "true_left" (formula "2"))
                        (rule "cnf_rightDist" (formula "1") (term "0,0,0"))
                        (rule "distr_forallAnd" (formula "1") (term "0,0"))
                        (rule "distr_forallAnd" (formula "1") (term "0"))
                        (rule "distr_forallAnd" (formula "1"))
                        (rule "andLeft" (formula "1"))
                        (rule "shift_paren_or" (formula "3") (term "0,0,0"))
                         (builtin "One Step Simplification" (formula "3"))
                        (rule "eqSymm" (formula "3") (term "1,1,0,0,0"))
                        (rule "castedGetAny" (formula "3") (term "0,0,1,0,0,0"))
                        (rule "castedGetAny" (formula "3") (term "1,0,0,0,0,0,0"))
                        (rule "castedGetAny" (formula "3") (term "0,1,1,0,0,0"))
                         (builtin "One Step Simplification" (formula "3"))
                        (rule "true_left" (formula "3"))
                        (rule "cnf_rightDist" (formula "4") (term "0,0,0"))
                        (rule "distr_forallAnd" (formula "4") (term "0,0"))
                        (rule "distr_forallAnd" (formula "4") (term "0"))
                        (rule "distr_forallAnd" (formula "4"))
                        (rule "andLeft" (formula "4"))
                        (rule "commute_or_2" (formula "4") (term "0,0,0"))
                         (builtin "One Step Simplification" (formula "4"))
                        (rule "eqSymm" (formula "4") (term "1,0,0,0,0"))
                        (rule "castedGetAny" (formula "4") (term "1,0,0,1,0,0,0"))
                        (rule "castedGetAny" (formula "4") (term "0,0,0,0,0,0"))
                        (rule "castedGetAny" (formula "4") (term "0,1,0,0,0,0"))
                         (builtin "One Step Simplification" (formula "4"))
                        (rule "true_left" (formula "4"))
                        (rule "shift_paren_or" (formula "2") (term "0,0,0"))
                         (builtin "One Step Simplification" (formula "2"))
                        (rule "eqSymm" (formula "2") (term "1,1,0,0,0"))
                        (rule "castedGetAny" (formula "2") (term "0,0,1,0,0,0"))
                        (rule "castedGetAny" (formula "2") (term "1,0,0,0,0,0,0"))
                        (rule "castedGetAny" (formula "2") (term "0,1,1,0,0,0"))
                         (builtin "One Step Simplification" (formula "2"))
                        (rule "true_left" (formula "2"))
                        (rule "cnf_rightDist" (formula "2") (term "0,0,0"))
                        (rule "distr_forallAnd" (formula "2") (term "0,0"))
                        (rule "distr_forallAnd" (formula "2") (term "0"))
                        (rule "distr_forallAnd" (formula "2"))
                        (rule "andLeft" (formula "2"))
                        (rule "ifthenelse_split_for" (formula "30") (term "1,1"))
                        (branch "result_228_A_1.value@heapAtPre_A«anonHeapFunction» ≥ 0 TRUE"
                           (rule "cnf_rightDist" (formula "31"))
                           (rule "andLeft" (formula "31"))
                           (rule "commute_or" (formula "32"))
                           (rule "cnf_rightDist" (formula "31"))
                           (rule "andLeft" (formula "31"))
                           (rule "commute_or" (formula "32"))
                           (rule "shift_paren_or" (formula "4") (term "0,0,0"))
                            (builtin "One Step Simplification" (formula "4"))
                           (rule "eqSymm" (formula "4") (term "1,1,0,0,0"))
                           (rule "castedGetAny" (formula "4") (term "1,0,0,0,0,0,0"))
                           (rule "castedGetAny" (formula "4") (term "0,0,1,0,0,0"))
                           (rule "castedGetAny" (formula "4") (term "0,1,1,0,0,0"))
                            (builtin "One Step Simplification" (formula "4"))
                           (rule "true_left" (formula "4"))
                           (rule "cnf_rightDist" (formula "1") (term "0,0,0"))
                           (rule "distr_forallAnd" (formula "1") (term "0,0"))
                           (rule "distr_forallAnd" (formula "1") (term "0"))
                           (rule "distr_forallAnd" (formula "1"))
                           (rule "andLeft" (formula "1"))
                           (rule "commute_or_2" (formula "1") (term "0,0,0"))
                            (builtin "One Step Simplification" (formula "1"))
                           (rule "eqSymm" (formula "1") (term "1,0,0,0,0"))
                           (rule "castedGetAny" (formula "1") (term "1,0,0,1,0,0,0"))
                           (rule "castedGetAny" (formula "1") (term "0,0,0,0,0,0"))
                           (rule "castedGetAny" (formula "1") (term "0,1,0,0,0,0"))
                            (builtin "One Step Simplification" (formula "1"))
                           (rule "true_left" (formula "1"))
                           (rule "shift_paren_or" (formula "3") (term "0,0,0"))
                            (builtin "One Step Simplification" (formula "3"))
                           (rule "eqSymm" (formula "3") (term "1,1,0,0,0"))
                           (rule "castedGetAny" (formula "3") (term "0,0,1,0,0,0"))
                           (rule "castedGetAny" (formula "3") (term "1,0,0,0,0,0,0"))
                           (rule "castedGetAny" (formula "3") (term "0,1,1,0,0,0"))
                            (builtin "One Step Simplification" (formula "3"))
                           (rule "true_left" (formula "3"))
                           (rule "shift_paren_or" (formula "1") (term "0,0,0"))
                            (builtin "One Step Simplification" (formula "1"))
                           (rule "eqSymm" (formula "1") (term "1,1,0,0,0"))
                           (rule "castedGetAny" (formula "1") (term "1,0,0,0,0,0,0"))
                           (rule "castedGetAny" (formula "1") (term "0,0,1,0,0,0"))
                           (rule "castedGetAny" (formula "1") (term "0,1,1,0,0,0"))
                            (builtin "One Step Simplification" (formula "1"))
                           (rule "true_left" (formula "1"))
                           (rule "cnf_rightDist" (formula "1") (term "0,0,0"))
                           (rule "distr_forallAnd" (formula "1") (term "0,0"))
                           (rule "distr_forallAnd" (formula "1") (term "0"))
                           (rule "distr_forallAnd" (formula "1"))
                           (rule "andLeft" (formula "1"))
                           (rule "commute_or_2" (formula "1") (term "0,0,0"))
                            (builtin "One Step Simplification" (formula "1"))
                           (rule "eqSymm" (formula "1") (term "1,0,0,0,0"))
                           (rule "castedGetAny" (formula "1") (term "0,0,0,0,0,0"))
                           (rule "castedGetAny" (formula "1") (term "1,0,0,1,0,0,0"))
                           (rule "castedGetAny" (formula "1") (term "0,1,0,0,0,0"))
                            (builtin "One Step Simplification" (formula "1"))
                           (rule "true_left" (formula "1"))
                           (rule "shift_paren_or" (formula "1") (term "0,0,0"))
                            (builtin "One Step Simplification" (formula "1"))
                           (rule "eqSymm" (formula "1") (term "1,1,0,0,0"))
                           (rule "castedGetAny" (formula "1") (term "1,0,0,0,0,0,0"))
                           (rule "castedGetAny" (formula "1") (term "0,0,1,0,0,0"))
                           (rule "castedGetAny" (formula "1") (term "0,1,1,0,0,0"))
                            (builtin "One Step Simplification" (formula "1"))
                           (rule "true_left" (formula "1"))
                           (rule "cut_direct" (formula "27") (term "0"))
                           (branch "CUT: result_228_A_1.value@heapAtPre_A«anonHeapFunction» = 0 TRUE"
                               (builtin "One Step Simplification" (formula "28"))
                              (rule "true_left" (formula "28"))
                              (rule "replace_known_left" (formula "28") (term "0") (ifseqformula "27"))
                               (builtin "One Step Simplification" (formula "28"))
                              (rule "true_left" (formula "28"))
                              (rule "replace_known_left" (formula "28") (term "0") (ifseqformula "27"))
                               (builtin "One Step Simplification" (formula "28"))
                              (rule "true_left" (formula "28"))
                              (rule "applyEq" (formula "28") (term "1,0") (ifseqformula "27"))
                              (rule "eqSymm" (formula "28"))
                              (rule "polySimp_homoEq" (formula "28"))
                              (rule "polySimp_mulLiterals" (formula "28") (term "1,0"))
                              (rule "polySimp_elimOne" (formula "28") (term "1,0"))
                              (rule "applyEq" (formula "29") (term "1,0") (ifseqformula "27"))
                              (rule "times_zero_1" (formula "29") (term "0"))
                              (rule "polySimp_homoEq" (formula "29"))
                              (rule "mul_literals" (formula "29") (term "1,0"))
                              (rule "add_zero_right" (formula "29") (term "0"))
                              (rule "applyEq" (formula "26") (term "0") (ifseqformula "27"))
                              (rule "qeq_literals" (formula "26"))
                              (rule "true_left" (formula "26"))
                              (rule "applyEq" (formula "56") (term "1") (ifseqformula "26"))
                              (rule "applyEq" (formula "22") (term "1") (ifseqformula "26"))
                              (rule "applyEq" (formula "6") (term "1") (ifseqformula "26"))
                              (rule "applyEq" (formula "27") (term "1,1,0") (ifseqformula "26"))
                              (rule "polySimp_addComm0" (formula "27") (term "0"))
                              (rule "polySimp_sepPosMonomial" (formula "28"))
                              (rule "polySimp_mulLiterals" (formula "28") (term "1"))
                              (rule "polySimp_elimOne" (formula "28") (term "1"))
                              (rule "applyEq" (formula "65") (term "1") (ifseqformula "28"))
                              (rule "polySimp_sepPosMonomial" (formula "27"))
                              (rule "div_axiom" (formula "27") (term "0,1") (inst "quotient=quotient_1"))
                               (builtin "One Step Simplification" (formula "27"))
                              (rule "true_left" (formula "27"))
                              (rule "jdiv_axiom" (formula "27") (term "0"))
                              (rule "eqSymm" (formula "27"))
                              (rule "applyEq" (formula "27") (term "1") (ifseqformula "28"))
                               (builtin "One Step Simplification" (formula "27"))
                              (rule "eqSymm" (formula "27") (term "1"))
                              (rule "polySimp_homoEq" (formula "27") (term "1"))
                              (rule "polySimp_mulLiterals" (formula "27") (term "1,0,1"))
                              (rule "polySimp_elimOne" (formula "27") (term "1,0,1"))
                              (rule "polySimp_sepPosMonomial" (formula "27") (term "1"))
                              (rule "inEqSimp_contradInEq0" (formula "27") (term "0,0") (ifseqformula "3"))
                              (rule "qeq_literals" (formula "27") (term "0,0,0"))
                               (builtin "One Step Simplification" (formula "27"))
                              (rule "true_left" (formula "27"))
                              (rule "Use_information_flow_contract_for_compareTo_325434207" (formula "18") (ifseqformula "18"))
                               (builtin "One Step Simplification" (formula "18") (ifInst ""  (formula "92")) (ifInst ""  (formula "92")))
                              (rule "true_left" (formula "18"))
                              (rule "Use_information_flow_contract_for_getOrder_757678341" (formula "58") (ifseqformula "24"))
                              (rule "applyEq" (formula "58") (term "0,1,1") (ifseqformula "6"))
                              (rule "eqSymm" (formula "58") (term "1,1"))
                              (rule "replace_known_left" (formula "58") (term "1,1") (ifseqformula "26"))
                               (builtin "One Step Simplification" (formula "58"))
                              (rule "true_left" (formula "58"))
                              (rule "Use_information_flow_contract_for_getOrder_757678341" (formula "58") (ifseqformula "58"))
                               (builtin "One Step Simplification" (formula "58"))
                              (rule "true_left" (formula "58"))
                              (rule "Use_information_flow_contract_for_getOrder_757678341" (formula "24") (ifseqformula "24"))
                               (builtin "One Step Simplification" (formula "24"))
                              (rule "true_left" (formula "24"))
                              (rule "Use_information_flow_contract_for_compareTo_325434207" (formula "18") (ifseqformula "52"))
                              (rule "eqSymm" (formula "18") (term "1,1"))
                              (rule "eqSymm" (formula "18") (term "0,0,1"))
                              (rule "eqSymm" (formula "18") (term "1,0,1"))
                              (rule "replace_known_right" (formula "18") (term "0,1,1,0") (ifseqformula "93"))
                               (builtin "One Step Simplification" (formula "18") (ifInst ""  (formula "92")) (ifInst ""  (formula "5")))
                              (rule "applyEq" (formula "18") (term "0,0,1") (ifseqformula "54"))
                              (rule "eqSymm" (formula "18") (term "0,1"))
                              (rule "replace_known_left" (formula "18") (term "0,1") (ifseqformula "20"))
                               (builtin "One Step Simplification" (formula "18"))
                              (rule "Class_invariant_axiom_for_java_math_BigInteger" (formula "18") (term "1,0"))
                              (rule "replace_known_right" (formula "18") (term "0,0,1,0") (ifseqformula "93"))
                               (builtin "One Step Simplification" (formula "18") (ifInst ""  (formula "54")))
                              (rule "Class_invariant_axiom_for_java_math_BigInteger" (formula "18") (term "0"))
                              (rule "replace_known_right" (formula "18") (term "0,0,0") (ifseqformula "92"))
                               (builtin "One Step Simplification" (formula "18") (ifInst ""  (formula "20")))
                              (rule "applyEq" (formula "53") (term "4") (ifseqformula "18"))
                              (rule "applyEq" (formula "52") (term "0") (ifseqformula "18"))
                              (rule "applyEq" (formula "45") (term "0") (ifseqformula "18"))
                              (rule "Use_information_flow_contract_for_multiply_1272441881" (formula "69") (ifseqformula "36"))
                              (rule "replaceKnownSelect_taclet21_11" (formula "69") (term "1,1,1"))
                              (rule "replaceKnownSelect_taclet21_12" (formula "69") (term "0,1,1"))
                              (rule "replaceKnownAuxiliaryConstant_taclet1110021_18" (formula "69") (term "1,1,1"))
                              (rule "replaceKnownAuxiliaryConstant_taclet01110021_19" (formula "69") (term "0,1,1"))
                              (rule "replaceKnownSelect_taclet21_9" (formula "69") (term "0,1,0,1"))
                              (rule "replaceKnownSelect_taclet21_8" (formula "69") (term "1,1,0,1"))
                              (rule "replaceKnownAuxiliaryConstant_taclet021_15" (formula "69") (term "0,1,0,1"))
                              (rule "replaceKnownAuxiliaryConstant_taclet21_10" (formula "69") (term "1,1,0,1"))
                              (rule "replaceKnownAuxiliaryConstant_taclet021_15" (formula "69") (term "1,1,0,1"))
                               (builtin "One Step Simplification" (formula "69") (ifInst ""  (formula "82")) (ifInst ""  (formula "81")))
                              (rule "eqSymm" (formula "69") (term "1,1"))
                              (rule "replace_known_right" (formula "69") (term "1,1") (ifseqformula "99"))
                               (builtin "One Step Simplification" (formula "69"))
                              (rule "pullOutSelect" (formula "69") (term "1,0,1") (inst "selectSK=org_bouncycastle_math_ec_ECPoint_value_4"))
                              (rule "simplifySelectOfAnonEQ" (formula "69") (ifseqformula "26"))
                               (builtin "One Step Simplification" (formula "69") (ifInst ""  (formula "96")) (ifInst ""  (formula "13")))
                              (rule "applyEqReverse" (formula "70") (term "1,0,1") (ifseqformula "69"))
                              (rule "hideAuxiliaryEq" (formula "69"))
                              (rule "pullOutSelect" (formula "69") (term "0,0,1") (inst "selectSK=org_bouncycastle_math_ec_ECPoint_value_5"))
                              (rule "simplifySelectOfAnonEQ" (formula "69") (ifseqformula "59"))
                               (builtin "One Step Simplification" (formula "69") (ifInst ""  (formula "97")) (ifInst ""  (formula "47")))
                              (rule "applyEqReverse" (formula "70") (term "0,0,1") (ifseqformula "69"))
                              (rule "hideAuxiliaryEq" (formula "69"))
                              (rule "replace_known_left" (formula "69") (term "0,1") (ifseqformula "4"))
                               (builtin "One Step Simplification" (formula "69"))
                              (rule "notLeft" (formula "69"))
                              (rule "Class_invariant_axiom_for_org_bouncycastle_math_ec_ECPoint" (formula "75") (term "1"))
                               (builtin "One Step Simplification" (formula "75"))
                              (rule "Class_invariant_axiom_for_org_bouncycastle_math_ec_ECPoint" (formula "75"))
                              (rule "closeTrue" (formula "75"))
                           )
                           (branch "CUT: result_228_A_1.value@heapAtPre_A«anonHeapFunction» = 0 FALSE"
                               (builtin "One Step Simplification" (formula "27"))
                              (rule "replace_known_right" (formula "29") (term "0") (ifseqformula "79"))
                               (builtin "One Step Simplification" (formula "29"))
                              (rule "replace_known_right" (formula "28") (term "0") (ifseqformula "79"))
                               (builtin "One Step Simplification" (formula "28"))
                              (rule "applyEq" (formula "31") (term "0,0") (ifseqformula "28"))
                              (rule "polySimp_mulComm0" (formula "31") (term "0"))
                              (rule "applyEq" (formula "27") (term "0") (ifseqformula "31"))
                              (rule "inEqSimp_homoInEq0" (formula "27"))
                              (rule "polySimp_mulComm0" (formula "27") (term "1,0"))
                              (rule "polySimp_rightDist" (formula "27") (term "1,0"))
                              (rule "polySimp_mulAssoc" (formula "27") (term "0,1,0"))
                              (rule "polySimp_mulComm0" (formula "27") (term "0,0,1,0"))
                              (rule "polySimp_mulLiterals" (formula "27") (term "0,1,0"))
                              (rule "polySimp_elimOne" (formula "27") (term "0,1,0"))
                              (rule "polySimp_addAssoc" (formula "27") (term "0"))
                              (rule "polySimp_pullOutFactor2" (formula "27") (term "0,0"))
                              (rule "add_literals" (formula "27") (term "1,0,0"))
                              (rule "times_zero_1" (formula "27") (term "0,0"))
                              (rule "add_zero_left" (formula "27") (term "0"))
                              (rule "applyEq" (formula "29") (term "0") (ifseqformula "31"))
                              (rule "inEqSimp_homoInEq1" (formula "29"))
                              (rule "polySimp_mulComm0" (formula "29") (term "1,0"))
                              (rule "polySimp_rightDist" (formula "29") (term "1,0"))
                              (rule "polySimp_mulAssoc" (formula "29") (term "0,1,0"))
                              (rule "polySimp_mulComm0" (formula "29") (term "0,0,1,0"))
                              (rule "polySimp_mulLiterals" (formula "29") (term "0,1,0"))
                              (rule "polySimp_elimOne" (formula "29") (term "0,1,0"))
                              (rule "polySimp_addAssoc" (formula "29") (term "0"))
                              (rule "polySimp_addComm1" (formula "29") (term "0,0"))
                              (rule "polySimp_pullOutFactor2b" (formula "29") (term "0,0,0"))
                              (rule "add_literals" (formula "29") (term "1,1,0,0,0"))
                              (rule "times_zero_1" (formula "29") (term "1,0,0,0"))
                              (rule "add_zero_right" (formula "29") (term "0,0,0"))
                              (rule "applyEq" (formula "30") (term "0,1") (ifseqformula "28"))
                              (rule "inEqSimp_invertInEq1" (formula "27"))
                              (rule "polySimp_mulLiterals" (formula "27") (term "0"))
                              (rule "mul_literals" (formula "27") (term "1"))
                              (rule "polySimp_elimOne" (formula "27") (term "0"))
                              (rule "inEqSimp_sepNegMonomial0" (formula "29"))
                              (rule "polySimp_mulLiterals" (formula "29") (term "0"))
                              (rule "polySimp_elimOne" (formula "29") (term "0"))
                              (rule "inEqSimp_strengthen1" (formula "26") (ifseqformula "79"))
                              (rule "add_literals" (formula "26") (term "1"))
                              (rule "inEqSimp_contradEq7" (formula "79") (ifseqformula "26"))
                              (rule "mul_literals" (formula "79") (term "1,0,0"))
                              (rule "add_zero_right" (formula "79") (term "0,0"))
                              (rule "leq_literals" (formula "79") (term "0"))
                               (builtin "One Step Simplification" (formula "79"))
                              (rule "false_right" (formula "79"))
                              (rule "inEqSimp_exactShadow3" (formula "29") (ifseqformula "27"))
                              (rule "add_zero_right" (formula "29") (term "0"))
                              (rule "polySimp_rightDist" (formula "29") (term "0"))
                              (rule "mul_literals" (formula "29") (term "0,0"))
                              (rule "polySimp_mulLiterals" (formula "29") (term "1,0"))
                              (rule "polySimp_elimOne" (formula "29") (term "1,0"))
                              (rule "inEqSimp_sepPosMonomial1" (formula "29"))
                              (rule "mul_literals" (formula "29") (term "1"))
                              (rule "Use_information_flow_contract_for_compareTo_325434207" (formula "18") (ifseqformula "18"))
                               (builtin "One Step Simplification" (formula "18") (ifInst ""  (formula "95")) (ifInst ""  (formula "95")))
                              (rule "true_left" (formula "18"))
                              (rule "Use_information_flow_contract_for_getOrder_757678341" (formula "61") (ifseqformula "24"))
                              (rule "replace_known_left" (formula "61") (term "1,1") (ifseqformula "6"))
                               (builtin "One Step Simplification" (formula "61"))
                              (rule "true_left" (formula "61"))
                              (rule "Use_information_flow_contract_for_getOrder_757678341" (formula "61") (ifseqformula "61"))
                               (builtin "One Step Simplification" (formula "61"))
                              (rule "true_left" (formula "61"))
                              (rule "Use_information_flow_contract_for_getOrder_757678341" (formula "24") (ifseqformula "24"))
                               (builtin "One Step Simplification" (formula "24"))
                              (rule "true_left" (formula "24"))
                              (rule "Use_information_flow_contract_for_compareTo_325434207" (formula "18") (ifseqformula "55"))
                              (rule "eqSymm" (formula "18") (term "1,0,1"))
                              (rule "eqSymm" (formula "18") (term "1,1"))
                              (rule "eqSymm" (formula "18") (term "0,0,1"))
                              (rule "replace_known_right" (formula "18") (term "0,1,1,0") (ifseqformula "96"))
                               (builtin "One Step Simplification" (formula "18") (ifInst ""  (formula "95")) (ifInst ""  (formula "5")))
                              (rule "applyEq" (formula "18") (term "0,0,1") (ifseqformula "57"))
                              (rule "eqSymm" (formula "18") (term "0,1"))
                              (rule "replace_known_left" (formula "18") (term "0,1") (ifseqformula "20"))
                               (builtin "One Step Simplification" (formula "18"))
                              (rule "Class_invariant_axiom_for_java_math_BigInteger" (formula "18") (term "0,0"))
                              (rule "replace_known_left" (formula "18") (term "1,0,0") (ifseqformula "20"))
                               (builtin "One Step Simplification" (formula "18") (ifInst ""  (formula "95")))
                              (rule "Class_invariant_axiom_for_java_math_BigInteger" (formula "18") (term "0"))
                              (rule "replace_known_right" (formula "18") (term "0,0,0") (ifseqformula "96"))
                               (builtin "One Step Simplification" (formula "18") (ifInst ""  (formula "57")))
                              (rule "applyEq" (formula "56") (term "4") (ifseqformula "18"))
                              (rule "applyEq" (formula "55") (term "0") (ifseqformula "18"))
                              (rule "applyEq" (formula "48") (term "0") (ifseqformula "18"))
                              (rule "Use_information_flow_contract_for_multiply_1272441881_0" (formula "72") (ifseqformula "39"))
                              (rule "replaceKnownSelect_taclet21_12" (formula "72") (term "0,1,1"))
                              (rule "replaceKnownSelect_taclet21_11" (formula "72") (term "1,1,1"))
                              (rule "replaceKnownAuxiliaryConstant_taclet01110021_19" (formula "72") (term "0,1,1"))
                              (rule "replaceKnownAuxiliaryConstant_taclet1110021_18" (formula "72") (term "1,1,1"))
                              (rule "replaceKnownSelect_taclet21_9" (formula "72") (term "0,1,0,1"))
                              (rule "replaceKnownSelect_taclet21_8" (formula "72") (term "1,1,0,1"))
                              (rule "replaceKnownAuxiliaryConstant_taclet021_15" (formula "72") (term "0,1,0,1"))
                              (rule "replaceKnownAuxiliaryConstant_taclet21_10" (formula "72") (term "1,1,0,1"))
                              (rule "replaceKnownAuxiliaryConstant_taclet021_15" (formula "72") (term "1,1,0,1"))
                               (builtin "One Step Simplification" (formula "72") (ifInst ""  (formula "85")) (ifInst ""  (formula "84")))
                              (rule "eqSymm" (formula "72") (term "1,1"))
                              (rule "replace_known_right" (formula "72") (term "1,1") (ifseqformula "102"))
                               (builtin "One Step Simplification" (formula "72"))
                              (rule "pullOutSelect" (formula "72") (term "0,0,1") (inst "selectSK=org_bouncycastle_math_ec_ECPoint_value_4"))
                              (rule "simplifySelectOfAnonEQ" (formula "72") (ifseqformula "62"))
                               (builtin "One Step Simplification" (formula "72") (ifInst ""  (formula "100")) (ifInst ""  (formula "50")))
                              (rule "applyEqReverse" (formula "73") (term "0,0,1") (ifseqformula "72"))
                              (rule "hideAuxiliaryEq" (formula "72"))
                              (rule "eqSymm" (formula "72") (term "0,1"))
                              (rule "applyEq" (formula "72") (term "1,0,1") (ifseqformula "4"))
                              (rule "pullOutSelect" (formula "72") (term "0,0,1") (inst "selectSK=org_bouncycastle_math_ec_ECPoint_value_5"))
                              (rule "simplifySelectOfAnonEQ" (formula "72") (ifseqformula "26"))
                               (builtin "One Step Simplification" (formula "72") (ifInst ""  (formula "99")) (ifInst ""  (formula "13")))
                              (rule "applyEqReverse" (formula "73") (term "0,0,1") (ifseqformula "72"))
                               (builtin "One Step Simplification" (formula "73"))
                              (rule "notLeft" (formula "73"))
                              (rule "hideAuxiliaryEq" (formula "72"))
                              (rule "Class_invariant_axiom_for_org_bouncycastle_math_ec_ECPoint" (formula "78") (term "1"))
                               (builtin "One Step Simplification" (formula "78"))
                              (rule "Class_invariant_axiom_for_org_bouncycastle_math_ec_ECPoint" (formula "78"))
                              (rule "closeTrue" (formula "78"))
                           )
                        )
                        (branch "result_228_A_1.value@heapAtPre_A«anonHeapFunction» ≥ 0 FALSE"
                           (rule "inEqSimp_geqRight" (formula "80"))
                           (rule "times_zero_1" (formula "1") (term "1,0,0"))
                           (rule "add_zero_right" (formula "1") (term "0,0"))
                           (rule "inEqSimp_sepPosMonomial0" (formula "1"))
                           (rule "mul_literals" (formula "1") (term "1"))
                           (rule "inEqSimp_contradEq3" (formula "31") (term "0") (ifseqformula "1"))
                           (rule "times_zero_1" (formula "31") (term "1,0,0,0"))
                           (rule "add_literals" (formula "31") (term "0,0,0"))
                           (rule "qeq_literals" (formula "31") (term "0,0"))
                            (builtin "One Step Simplification" (formula "31"))
                           (rule "andLeft" (formula "31"))
                           (rule "andLeft" (formula "31"))
                           (rule "applyEq" (formula "35") (term "0,0") (ifseqformula "32"))
                           (rule "polySimp_mulComm0" (formula "35") (term "0"))
                           (rule "applyEq" (formula "31") (term "0") (ifseqformula "35"))
                           (rule "inEqSimp_homoInEq0" (formula "31"))
                           (rule "polySimp_mulComm0" (formula "31") (term "1,0"))
                           (rule "polySimp_rightDist" (formula "31") (term "1,0"))
                           (rule "polySimp_mulAssoc" (formula "31") (term "0,1,0"))
                           (rule "polySimp_mulComm0" (formula "31") (term "0,0,1,0"))
                           (rule "polySimp_mulLiterals" (formula "31") (term "0,1,0"))
                           (rule "polySimp_elimOne" (formula "31") (term "0,1,0"))
                           (rule "polySimp_addAssoc" (formula "31") (term "0"))
                           (rule "polySimp_pullOutFactor2" (formula "31") (term "0,0"))
                           (rule "add_literals" (formula "31") (term "1,0,0"))
                           (rule "times_zero_1" (formula "31") (term "0,0"))
                           (rule "add_zero_left" (formula "31") (term "0"))
                           (rule "applyEq" (formula "33") (term "0") (ifseqformula "35"))
                           (rule "inEqSimp_homoInEq1" (formula "33"))
                           (rule "polySimp_mulComm0" (formula "33") (term "1,0"))
                           (rule "polySimp_rightDist" (formula "33") (term "1,0"))
                           (rule "polySimp_mulAssoc" (formula "33") (term "0,1,0"))
                           (rule "polySimp_mulComm0" (formula "33") (term "0,0,1,0"))
                           (rule "polySimp_mulLiterals" (formula "33") (term "0,1,0"))
                           (rule "polySimp_elimOne" (formula "33") (term "0,1,0"))
                           (rule "polySimp_addAssoc" (formula "33") (term "0"))
                           (rule "polySimp_addComm1" (formula "33") (term "0,0"))
                           (rule "polySimp_pullOutFactor2b" (formula "33") (term "0,0,0"))
                           (rule "add_literals" (formula "33") (term "1,1,0,0,0"))
                           (rule "times_zero_1" (formula "33") (term "1,0,0,0"))
                           (rule "add_literals" (formula "33") (term "0,0,0"))
                           (rule "applyEq" (formula "34") (term "0,1") (ifseqformula "32"))
                           (rule "inEqSimp_invertInEq1" (formula "31"))
                           (rule "mul_literals" (formula "31") (term "1"))
                           (rule "polySimp_mulLiterals" (formula "31") (term "0"))
                           (rule "polySimp_elimOne" (formula "31") (term "0"))
                           (rule "inEqSimp_sepNegMonomial0" (formula "33"))
                           (rule "polySimp_mulLiterals" (formula "33") (term "0"))
                           (rule "polySimp_elimOne" (formula "33") (term "0"))
                           (rule "inEqSimp_exactShadow3" (formula "33") (ifseqformula "31"))
                           (rule "add_zero_right" (formula "33") (term "0"))
                           (rule "polySimp_rightDist" (formula "33") (term "0"))
                           (rule "mul_literals" (formula "33") (term "0,0"))
                           (rule "inEqSimp_sepNegMonomial1" (formula "33"))
                           (rule "polySimp_mulLiterals" (formula "33") (term "0"))
                           (rule "polySimp_elimOne" (formula "33") (term "0"))
                           (rule "shift_paren_or" (formula "5") (term "0,0,0"))
                            (builtin "One Step Simplification" (formula "5"))
                           (rule "eqSymm" (formula "5") (term "1,1,0,0,0"))
                           (rule "castedGetAny" (formula "5") (term "0,0,1,0,0,0"))
                           (rule "castedGetAny" (formula "5") (term "1,0,0,0,0,0,0"))
                           (rule "castedGetAny" (formula "5") (term "0,1,1,0,0,0"))
                            (builtin "One Step Simplification" (formula "5"))
                           (rule "true_left" (formula "5"))
                           (rule "cnf_rightDist" (formula "2") (term "0,0,0"))
                           (rule "distr_forallAnd" (formula "2") (term "0,0"))
                           (rule "distr_forallAnd" (formula "2") (term "0"))
                           (rule "distr_forallAnd" (formula "2"))
                           (rule "andLeft" (formula "2"))
                           (rule "shift_paren_or" (formula "5") (term "0,0,0"))
                            (builtin "One Step Simplification" (formula "5"))
                           (rule "eqSymm" (formula "5") (term "1,1,0,0,0"))
                           (rule "castedGetAny" (formula "5") (term "0,0,1,0,0,0"))
                           (rule "castedGetAny" (formula "5") (term "1,0,0,0,0,0,0"))
                           (rule "castedGetAny" (formula "5") (term "0,1,1,0,0,0"))
                            (builtin "One Step Simplification" (formula "5"))
                           (rule "true_left" (formula "5"))
                           (rule "cnf_rightDist" (formula "4") (term "0,0,0"))
                           (rule "distr_forallAnd" (formula "4") (term "0,0"))
                           (rule "distr_forallAnd" (formula "4") (term "0"))
                           (rule "distr_forallAnd" (formula "4"))
                           (rule "andLeft" (formula "4"))
                           (rule "commute_or_2" (formula "2") (term "0,0,0"))
                            (builtin "One Step Simplification" (formula "2"))
                           (rule "eqSymm" (formula "2") (term "1,0,0,0,0"))
                           (rule "castedGetAny" (formula "2") (term "1,0,0,1,0,0,0"))
                           (rule "castedGetAny" (formula "2") (term "0,0,0,0,0,0"))
                           (rule "castedGetAny" (formula "2") (term "0,1,0,0,0,0"))
                            (builtin "One Step Simplification" (formula "2"))
                           (rule "true_left" (formula "2"))
                           (rule "commute_or_2" (formula "3") (term "0,0,0"))
                            (builtin "One Step Simplification" (formula "3"))
                           (rule "eqSymm" (formula "3") (term "1,0,0,0,0"))
                           (rule "castedGetAny" (formula "3") (term "0,0,0,0,0,0"))
                           (rule "castedGetAny" (formula "3") (term "1,0,0,1,0,0,0"))
                           (rule "castedGetAny" (formula "3") (term "0,1,0,0,0,0"))
                            (builtin "One Step Simplification" (formula "3"))
                           (rule "true_left" (formula "3"))
                           (rule "shift_paren_or" (formula "2") (term "0,0,0"))
                            (builtin "One Step Simplification" (formula "2"))
                           (rule "eqSymm" (formula "2") (term "1,1,0,0,0"))
                           (rule "castedGetAny" (formula "2") (term "1,0,0,0,0,0,0"))
                           (rule "castedGetAny" (formula "2") (term "0,0,1,0,0,0"))
                           (rule "castedGetAny" (formula "2") (term "0,1,1,0,0,0"))
                            (builtin "One Step Simplification" (formula "2"))
                           (rule "true_left" (formula "2"))
                           (rule "Use_information_flow_contract_for_compareTo_325434207" (formula "19") (ifseqformula "19"))
                            (builtin "One Step Simplification" (formula "19") (ifInst ""  (formula "95")) (ifInst ""  (formula "95")))
                           (rule "true_left" (formula "19"))
                           (rule "Use_information_flow_contract_for_getOrder_757678341" (formula "61") (ifseqformula "25"))
                           (rule "replace_known_left" (formula "61") (term "1,1") (ifseqformula "7"))
                            (builtin "One Step Simplification" (formula "61"))
                           (rule "true_left" (formula "61"))
                           (rule "Use_information_flow_contract_for_multiply_1272441881_0" (formula "73") (ifseqformula "38"))
                           (rule "replaceKnownSelect_taclet21_11" (formula "73") (term "1,1,1"))
                           (rule "replaceKnownSelect_taclet21_12" (formula "73") (term "0,1,1"))
                           (rule "replaceKnownAuxiliaryConstant_taclet1110021_18" (formula "73") (term "1,1,1"))
                           (rule "replaceKnownAuxiliaryConstant_taclet01110021_19" (formula "73") (term "0,1,1"))
                           (rule "replaceKnownSelect_taclet21_8" (formula "73") (term "1,1,0,1"))
                           (rule "replaceKnownSelect_taclet21_9" (formula "73") (term "0,1,0,1"))
                           (rule "replaceKnownAuxiliaryConstant_taclet21_10" (formula "73") (term "1,1,0,1"))
                            (builtin "One Step Simplification" (formula "73") (ifInst ""  (formula "86")) (ifInst ""  (formula "85")))
                           (rule "eqSymm" (formula "73") (term "1,1"))
                           (rule "replace_known_right" (formula "73") (term "1,1") (ifseqformula "103"))
                            (builtin "One Step Simplification" (formula "73"))
                           (rule "pullOutSelect" (formula "73") (term "1,0,1") (inst "selectSK=org_bouncycastle_math_ec_ECPoint_value_4"))
                           (rule "simplifySelectOfAnonEQ" (formula "73") (ifseqformula "26"))
                            (builtin "One Step Simplification" (formula "73") (ifInst ""  (formula "100")) (ifInst ""  (formula "14")))
                           (rule "applyEqReverse" (formula "74") (term "1,0,1") (ifseqformula "73"))
                           (rule "hideAuxiliaryEq" (formula "73"))
                           (rule "pullOutSelect" (formula "73") (term "0,0,1") (inst "selectSK=org_bouncycastle_math_ec_ECPoint_value_5"))
                           (rule "simplifySelectOfAnonEQ" (formula "73") (ifseqformula "63"))
                            (builtin "One Step Simplification" (formula "73") (ifInst ""  (formula "101")) (ifInst ""  (formula "50")))
                           (rule "applyEqReverse" (formula "74") (term "0,0,1") (ifseqformula "73"))
                           (rule "hideAuxiliaryEq" (formula "73"))
                           (rule "replace_known_left" (formula "73") (term "0,1") (ifseqformula "5"))
                            (builtin "One Step Simplification" (formula "73"))
                           (rule "notLeft" (formula "73"))
                           (rule "Class_invariant_axiom_for_org_bouncycastle_math_ec_ECPoint" (formula "79") (term "0"))
                            (builtin "One Step Simplification" (formula "79"))
                           (rule "Class_invariant_axiom_for_org_bouncycastle_math_ec_ECPoint" (formula "79"))
                           (rule "closeTrue" (formula "79"))
                        )
                     )
                     (branch " resultAtPost_226_B.<created>@anon_heap_mod«anonHeapFunction» = TRUE FALSE"
                        (rule "applyEqReverse" (formula "107") (term "1") (ifseqformula "8"))
                        (rule "hideAuxiliaryEq" (formula "8"))
                        (rule "eqSymm" (formula "106"))
                        (rule "replace_known_right" (formula "75") (term "0") (ifseqformula "82"))
                         (builtin "One Step Simplification" (formula "75"))
                        (rule "commute_or" (formula "3") (term "0,1,0,0,0"))
                        (rule "commute_or" (formula "2") (term "0,0,0,0"))
                        (rule "onlyCreatedObjectsAreReferenced" (formula "12") (term "1,0") (ifseqformula "20"))
                        (rule "replace_known_left" (formula "12") (term "1") (ifseqformula "13"))
                         (builtin "One Step Simplification" (formula "12") (ifInst ""  (formula "93")))
                        (rule "true_left" (formula "12"))
                        (rule "onlyCreatedObjectsAreReferenced" (formula "95") (term "0") (ifseqformula "54"))
                        (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "96"))
                         (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "48")))
                        (rule "true_left" (formula "1"))
                        (rule "onlyCreatedObjectsAreReferenced" (formula "29") (term "0") (ifseqformula "20"))
                        (rule "replace_known_right" (formula "29") (term "0") (ifseqformula "97"))
                         (builtin "One Step Simplification" (formula "29") (ifInst ""  (formula "14")))
                        (rule "true_left" (formula "29"))
                        (rule "onlyCreatedObjectsAreReferenced" (formula "99") (term "0") (ifseqformula "54"))
                        (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "100"))
                         (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "60")))
                        (rule "true_left" (formula "1"))
                        (rule "onlyCreatedObjectsAreReferenced" (formula "25") (term "1,0") (ifseqformula "20"))
                        (rule "replace_known_right" (formula "25") (term "0") (ifseqformula "99"))
                         (builtin "One Step Simplification" (formula "25") (ifInst ""  (formula "26")))
                        (rule "true_left" (formula "25"))
                        (rule "onlyCreatedObjectsAreReferenced" (formula "12") (term "1,1,0") (ifseqformula "20"))
                        (rule "replace_known_right" (formula "12") (term "0") (ifseqformula "95"))
                         (builtin "One Step Simplification" (formula "12") (ifInst ""  (formula "14")))
                        (rule "true_left" (formula "12"))
                        (rule "onlyCreatedObjectsAreReferenced" (formula "46") (term "1,0") (ifseqformula "54"))
                        (rule "replace_known_left" (formula "46") (term "1") (ifseqformula "47"))
                         (builtin "One Step Simplification" (formula "46") (ifInst ""  (formula "94")))
                        (rule "true_left" (formula "46"))
                        (rule "commute_or" (formula "2") (term "0,1,0,0,0"))
                        (rule "onlyCreatedObjectsAreReferenced" (formula "61") (term "1,0") (ifseqformula "54"))
                        (rule "replace_known_right" (formula "61") (term "0") (ifseqformula "98"))
                         (builtin "One Step Simplification" (formula "61") (ifInst ""  (formula "48")))
                        (rule "true_left" (formula "61"))
                        (rule "commute_or" (formula "1") (term "0,0,0,0"))
                        (rule "commute_or" (formula "1") (term "0,1,0,0,0"))
                        (rule "commute_or_2" (formula "4") (term "0,0,0"))
                        (rule "commute_and" (formula "31") (term "0,1"))
                        (rule "commute_or_2" (formula "3") (term "0,0,0"))
                        (rule "commute_or_2" (formula "2") (term "0,0,0"))
                        (rule "commute_or_2" (formula "1") (term "0,0,0"))
                        (rule "shift_paren_or" (formula "5") (term "0,0,0,0,0"))
                        (rule "shift_paren_or" (formula "6") (term "0,0,0,0,0"))
                         (builtin "One Step Simplification" (formula "6"))
                        (rule "commute_or_2" (formula "6") (term "0,0,0,0"))
                        (rule "shift_paren_or" (formula "4") (term "0,0,0,0"))
                        (rule "commute_or_2" (formula "3") (term "1,0,0,0,0"))
                        (rule "shift_paren_or" (formula "2") (term "0,0,0,0"))
                        (rule "commute_or_2" (formula "1") (term "1,0,0,0,0"))
                        (rule "commute_or_2" (formula "5") (term "0,0,0,0,0"))
                         (builtin "One Step Simplification" (formula "5"))
                        (rule "commute_or_2" (formula "5") (term "0,0,0,0"))
                        (rule "shift_paren_or" (formula "3") (term "0,0,0,0"))
                        (rule "shift_paren_or" (formula "1") (term "0,0,0,0"))
                        (rule "cnf_rightDist" (formula "6") (term "0,0,0"))
                        (rule "distr_forallAnd" (formula "6") (term "0,0"))
                        (rule "distr_forallAnd" (formula "6") (term "0"))
                        (rule "distr_forallAnd" (formula "6"))
                        (rule "andLeft" (formula "6"))
                        (rule "commute_or_2" (formula "6") (term "0,0,0"))
                         (builtin "One Step Simplification" (formula "6"))
                        (rule "eqSymm" (formula "6") (term "1,0,0,0,0"))
                        (rule "castedGetAny" (formula "6") (term "1,0,0,1,0,0,0"))
                        (rule "castedGetAny" (formula "6") (term "0,0,0,0,0,0"))
                        (rule "castedGetAny" (formula "6") (term "0,1,0,0,0,0"))
                         (builtin "One Step Simplification" (formula "6"))
                        (rule "true_left" (formula "6"))
                        (rule "shift_paren_or" (formula "6") (term "0,0,0"))
                         (builtin "One Step Simplification" (formula "6"))
                        (rule "eqSymm" (formula "6") (term "1,1,0,0,0"))
                        (rule "castedGetAny" (formula "6") (term "0,0,0,0,0,0"))
                        (rule "castedGetAny" (formula "6") (term "0,0,1,0,0,0"))
                        (rule "castedGetAny" (formula "6") (term "0,1,1,0,0,0"))
                         (builtin "One Step Simplification" (formula "6"))
                        (rule "true_left" (formula "6"))
                        (rule "commute_and" (formula "4") (term "1,0,0,0"))
                        (rule "commute_and" (formula "3") (term "1,0,0,0"))
                        (rule "commute_and" (formula "2") (term "1,0,0,0"))
                        (rule "commute_and" (formula "1") (term "1,0,0,0"))
                        (rule "cnf_rightDist" (formula "5") (term "0,0,0"))
                        (rule "distr_forallAnd" (formula "5") (term "0,0"))
                        (rule "distr_forallAnd" (formula "5") (term "0"))
                        (rule "distr_forallAnd" (formula "5"))
                        (rule "andLeft" (formula "5"))
                        (rule "commute_or_2" (formula "5") (term "0,0,0"))
                         (builtin "One Step Simplification" (formula "5"))
                        (rule "eqSymm" (formula "5") (term "1,0,0,0,0"))
                        (rule "castedGetAny" (formula "5") (term "1,0,0,1,0,0,0"))
                        (rule "castedGetAny" (formula "5") (term "0,0,0,0,0,0"))
                        (rule "castedGetAny" (formula "5") (term "0,1,0,0,0,0"))
                         (builtin "One Step Simplification" (formula "5"))
                        (rule "true_left" (formula "5"))
                        (rule "shift_paren_or" (formula "5") (term "0,0,0"))
                         (builtin "One Step Simplification" (formula "5"))
                        (rule "eqSymm" (formula "5") (term "1,1,0,0,0"))
                        (rule "castedGetAny" (formula "5") (term "0,0,0,0,0,0"))
                        (rule "castedGetAny" (formula "5") (term "0,0,1,0,0,0"))
                        (rule "castedGetAny" (formula "5") (term "0,1,1,0,0,0"))
                         (builtin "One Step Simplification" (formula "5"))
                        (rule "true_left" (formula "5"))
                        (rule "shift_paren_or" (formula "4") (term "0,0,0,0,0"))
                         (builtin "One Step Simplification" (formula "4"))
                        (rule "shift_paren_or" (formula "2") (term "0,0,0,0,0"))
                         (builtin "One Step Simplification" (formula "2"))
                        (rule "shift_paren_or" (formula "3") (term "0,0,0,0,0"))
                         (builtin "One Step Simplification" (formula "3"))
                        (rule "shift_paren_or" (formula "1") (term "0,0,0,0,0"))
                         (builtin "One Step Simplification" (formula "1"))
                        (rule "commute_or_2" (formula "4") (term "0,0,0,0"))
                        (rule "commute_or_2" (formula "2") (term "0,0,0,0"))
                        (rule "cnf_rightDist" (formula "3") (term "0,0,0"))
                        (rule "distr_forallAnd" (formula "3") (term "0,0"))
                        (rule "distr_forallAnd" (formula "3") (term "0"))
                        (rule "distr_forallAnd" (formula "3"))
                        (rule "andLeft" (formula "3"))
                        (rule "shift_paren_or" (formula "4") (term "0,0,0"))
                         (builtin "One Step Simplification" (formula "4"))
                        (rule "eqSymm" (formula "4") (term "1,1,0,0,0"))
                        (rule "castedGetAny" (formula "4") (term "0,0,0,0,0,0"))
                        (rule "castedGetAny" (formula "4") (term "0,0,1,0,0,0"))
                        (rule "castedGetAny" (formula "4") (term "0,1,1,0,0,0"))
                         (builtin "One Step Simplification" (formula "4"))
                        (rule "true_left" (formula "4"))
                        (rule "cnf_rightDist" (formula "1") (term "0,0,0"))
                        (rule "distr_forallAnd" (formula "1") (term "0,0"))
                        (rule "distr_forallAnd" (formula "1") (term "0"))
                        (rule "distr_forallAnd" (formula "1"))
                        (rule "andLeft" (formula "1"))
                        (rule "shift_paren_or" (formula "2") (term "0,0,0"))
                         (builtin "One Step Simplification" (formula "2"))
                        (rule "eqSymm" (formula "2") (term "1,1,0,0,0"))
                        (rule "castedGetAny" (formula "2") (term "0,0,0,0,0,0"))
                        (rule "castedGetAny" (formula "2") (term "0,0,1,0,0,0"))
                        (rule "castedGetAny" (formula "2") (term "0,1,1,0,0,0"))
                         (builtin "One Step Simplification" (formula "2"))
                        (rule "true_left" (formula "2"))
                        (rule "cnf_rightDist" (formula "4") (term "0,0,0"))
                        (rule "distr_forallAnd" (formula "4") (term "0,0"))
                        (rule "distr_forallAnd" (formula "4") (term "0"))
                        (rule "distr_forallAnd" (formula "4"))
                        (rule "andLeft" (formula "4"))
                        (rule "cnf_rightDist" (formula "2") (term "0,0,0"))
                        (rule "distr_forallAnd" (formula "2") (term "0,0"))
                        (rule "distr_forallAnd" (formula "2") (term "0"))
                        (rule "distr_forallAnd" (formula "2"))
                        (rule "andLeft" (formula "2"))
                        (rule "shift_paren_or" (formula "5") (term "0,0,0"))
                         (builtin "One Step Simplification" (formula "5"))
                        (rule "eqSymm" (formula "5") (term "1,1,0,0,0"))
                        (rule "castedGetAny" (formula "5") (term "0,0,0,0,0,0"))
                        (rule "castedGetAny" (formula "5") (term "0,0,1,0,0,0"))
                        (rule "castedGetAny" (formula "5") (term "0,1,1,0,0,0"))
                         (builtin "One Step Simplification" (formula "5"))
                        (rule "true_left" (formula "5"))
                        (rule "cnf_rightDist" (formula "3") (term "0,0,0"))
                        (rule "distr_forallAnd" (formula "3") (term "0,0"))
                        (rule "distr_forallAnd" (formula "3") (term "0"))
                        (rule "distr_forallAnd" (formula "3"))
                        (rule "andLeft" (formula "3"))
                        (rule "cnf_rightDist" (formula "1") (term "0,0,0"))
                        (rule "distr_forallAnd" (formula "1") (term "0,0"))
                        (rule "distr_forallAnd" (formula "1") (term "0"))
                        (rule "distr_forallAnd" (formula "1"))
                        (rule "andLeft" (formula "1"))
                        (rule "shift_paren_or" (formula "2") (term "0,0,0"))
                         (builtin "One Step Simplification" (formula "2"))
                        (rule "eqSymm" (formula "2") (term "1,1,0,0,0"))
                        (rule "castedGetAny" (formula "2") (term "1,0,0,0,0,0,0"))
                        (rule "castedGetAny" (formula "2") (term "0,0,1,0,0,0"))
                        (rule "castedGetAny" (formula "2") (term "0,1,1,0,0,0"))
                         (builtin "One Step Simplification" (formula "2"))
                        (rule "true_left" (formula "2"))
                        (rule "cnf_rightDist" (formula "2") (term "0,0,0"))
                        (rule "distr_forallAnd" (formula "2") (term "0,0"))
                        (rule "distr_forallAnd" (formula "2") (term "0"))
                        (rule "distr_forallAnd" (formula "2"))
                        (rule "andLeft" (formula "2"))
                        (rule "commute_or_2" (formula "2") (term "0,0,0"))
                         (builtin "One Step Simplification" (formula "2"))
                        (rule "eqSymm" (formula "2") (term "1,0,0,0,0"))
                        (rule "castedGetAny" (formula "2") (term "0,0,0,0,0,0"))
                        (rule "castedGetAny" (formula "2") (term "1,0,0,1,0,0,0"))
                        (rule "castedGetAny" (formula "2") (term "0,1,0,0,0,0"))
                         (builtin "One Step Simplification" (formula "2"))
                        (rule "true_left" (formula "2"))
                        (rule "cnf_rightDist" (formula "1") (term "0,0,0"))
                        (rule "distr_forallAnd" (formula "1") (term "0,0"))
                        (rule "distr_forallAnd" (formula "1") (term "0"))
                        (rule "distr_forallAnd" (formula "1"))
                        (rule "andLeft" (formula "1"))
                        (rule "commute_or_2" (formula "1") (term "0,0,0"))
                         (builtin "One Step Simplification" (formula "1"))
                        (rule "eqSymm" (formula "1") (term "1,0,0,0,0"))
                        (rule "castedGetAny" (formula "1") (term "0,0,0,0,0,0"))
                        (rule "castedGetAny" (formula "1") (term "1,0,0,1,0,0,0"))
                        (rule "castedGetAny" (formula "1") (term "0,1,0,0,0,0"))
                         (builtin "One Step Simplification" (formula "1"))
                        (rule "true_left" (formula "1"))
                        (rule "shift_paren_or" (formula "1") (term "0,0,0"))
                         (builtin "One Step Simplification" (formula "1"))
                        (rule "eqSymm" (formula "1") (term "1,1,0,0,0"))
                        (rule "castedGetAny" (formula "1") (term "0,0,1,0,0,0"))
                        (rule "castedGetAny" (formula "1") (term "1,0,0,0,0,0,0"))
                        (rule "castedGetAny" (formula "1") (term "0,1,1,0,0,0"))
                         (builtin "One Step Simplification" (formula "1"))
                        (rule "true_left" (formula "1"))
                        (rule "ifthenelse_split_for" (formula "25") (term "1,1"))
                        (branch "result_228_A_1.value@heapAtPre_A«anonHeapFunction» ≥ 0 TRUE"
                           (rule "cnf_rightDist" (formula "26"))
                           (rule "andLeft" (formula "26"))
                           (rule "commute_or" (formula "27"))
                           (rule "cnf_rightDist" (formula "26"))
                           (rule "andLeft" (formula "26"))
                           (rule "commute_or" (formula "27"))
                           (rule "cut_direct" (formula "26") (term "0"))
                           (branch "CUT: result_228_A_1.value@heapAtPre_A«anonHeapFunction» = 0 TRUE"
                               (builtin "One Step Simplification" (formula "27"))
                              (rule "true_left" (formula "27"))
                              (rule "replace_known_left" (formula "28") (term "0") (ifseqformula "26"))
                               (builtin "One Step Simplification" (formula "28"))
                              (rule "true_left" (formula "28"))
                              (rule "replace_known_left" (formula "27") (term "0") (ifseqformula "26"))
                               (builtin "One Step Simplification" (formula "27"))
                              (rule "true_left" (formula "27"))
                              (rule "applyEq" (formula "25") (term "0") (ifseqformula "26"))
                              (rule "qeq_literals" (formula "25"))
                              (rule "true_left" (formula "25"))
                              (rule "applyEq" (formula "27") (term "1,0") (ifseqformula "25"))
                              (rule "times_zero_1" (formula "27") (term "0"))
                              (rule "polySimp_homoEq" (formula "27"))
                              (rule "mul_literals" (formula "27") (term "1,0"))
                              (rule "add_zero_right" (formula "27") (term "0"))
                              (rule "applyEq" (formula "26") (term "1,0") (ifseqformula "25"))
                              (rule "eqSymm" (formula "26"))
                              (rule "polySimp_homoEq" (formula "26"))
                              (rule "polySimp_mulLiterals" (formula "26") (term "1,0"))
                              (rule "polySimp_elimOne" (formula "26") (term "1,0"))
                              (rule "applyEq" (formula "5") (term "1") (ifseqformula "25"))
                              (rule "applyEq" (formula "21") (term "1") (ifseqformula "25"))
                              (rule "applyEq" (formula "55") (term "1") (ifseqformula "25"))
                              (rule "applyEq" (formula "26") (term "1,1,0") (ifseqformula "25"))
                              (rule "polySimp_addComm0" (formula "26") (term "0"))
                              (rule "polySimp_sepPosMonomial" (formula "27"))
                              (rule "polySimp_mulLiterals" (formula "27") (term "1"))
                              (rule "polySimp_elimOne" (formula "27") (term "1"))
                              (rule "applyEq" (formula "64") (term "1") (ifseqformula "27"))
                              (rule "polySimp_sepPosMonomial" (formula "26"))
                              (rule "div_axiom" (formula "26") (term "0,1") (inst "quotient=quotient_1"))
                               (builtin "One Step Simplification" (formula "26"))
                              (rule "true_left" (formula "26"))
                              (rule "jdiv_axiom" (formula "26") (term "0"))
                              (rule "eqSymm" (formula "26"))
                              (rule "applyEq" (formula "26") (term "1") (ifseqformula "27"))
                               (builtin "One Step Simplification" (formula "26"))
                              (rule "eqSymm" (formula "26") (term "1"))
                              (rule "polySimp_homoEq" (formula "26") (term "1"))
                              (rule "polySimp_mulLiterals" (formula "26") (term "1,0,1"))
                              (rule "polySimp_elimOne" (formula "26") (term "1,0,1"))
                              (rule "polySimp_sepPosMonomial" (formula "26") (term "1"))
                              (rule "inEqSimp_contradInEq0" (formula "26") (term "0,0") (ifseqformula "2"))
                              (rule "qeq_literals" (formula "26") (term "0,0,0"))
                               (builtin "One Step Simplification" (formula "26"))
                              (rule "true_left" (formula "26"))
                              (rule "Use_information_flow_contract_for_compareTo_325434207" (formula "17") (ifseqformula "17"))
                               (builtin "One Step Simplification" (formula "17") (ifInst ""  (formula "93")) (ifInst ""  (formula "93")))
                              (rule "true_left" (formula "17"))
                              (rule "Use_information_flow_contract_for_getOrder_757678341" (formula "57") (ifseqformula "23"))
                              (rule "applyEq" (formula "57") (term "0,0,1") (ifseqformula "55"))
                              (rule "eqSymm" (formula "57") (term "0,1"))
                              (rule "replace_known_left" (formula "57") (term "0,1") (ifseqformula "21"))
                               (builtin "One Step Simplification" (formula "57"))
                              (rule "applyEq" (formula "57") (term "0,1") (ifseqformula "5"))
                              (rule "eqSymm" (formula "57") (term "1"))
                              (rule "replace_known_left" (formula "57") (term "1") (ifseqformula "25"))
                               (builtin "One Step Simplification" (formula "57"))
                              (rule "true_left" (formula "57"))
                              (rule "Use_information_flow_contract_for_getOrder_757678341" (formula "57") (ifseqformula "57"))
                               (builtin "One Step Simplification" (formula "57"))
                              (rule "true_left" (formula "57"))
                              (rule "Use_information_flow_contract_for_compareTo_325434207" (formula "51") (ifseqformula "17"))
                              (rule "replace_known_right" (formula "51") (term "0,1,0,0") (ifseqformula "94"))
                               (builtin "One Step Simplification" (formula "51") (ifInst ""  (formula "93")) (ifInst ""  (formula "4")))
                              (rule "applyEqRigid" (formula "51") (term "0,0,1") (ifseqformula "53"))
                              (rule "eqSymm" (formula "51") (term "0,1"))
                              (rule "replace_known_left" (formula "51") (term "0,1") (ifseqformula "18"))
                               (builtin "One Step Simplification" (formula "51"))
                              (rule "Class_invariant_axiom_for_java_math_BigInteger" (formula "51") (term "1,0"))
                              (rule "replace_known_left" (formula "51") (term "1,1,0") (ifseqformula "18"))
                               (builtin "One Step Simplification" (formula "51") (ifInst ""  (formula "93")))
                              (rule "Class_invariant_axiom_for_java_math_BigInteger" (formula "51") (term "0"))
                              (rule "replace_known_left" (formula "51") (term "1,0") (ifseqformula "53"))
                               (builtin "One Step Simplification" (formula "51") (ifInst ""  (formula "94")))
                              (rule "applyEq" (formula "52") (term "4") (ifseqformula "51"))
                              (rule "applyEq" (formula "50") (term "0") (ifseqformula "51"))
                              (rule "applyEq" (formula "43") (term "0") (ifseqformula "50"))
                              (rule "Use_information_flow_contract_for_getOrder_757678341" (formula "23") (ifseqformula "23"))
                               (builtin "One Step Simplification" (formula "23"))
                              (rule "true_left" (formula "23"))
                              (rule "Use_information_flow_contract_for_getOrder_757678341" (formula "23") (ifseqformula "56"))
                              (rule "eqSymm" (formula "23") (term "0,1"))
                              (rule "eqSymm" (formula "23") (term "1,1"))
                              (rule "applyEq" (formula "23") (term "0,1,1") (ifseqformula "5"))
                              (rule "eqSymm" (formula "23") (term "1,1"))
                              (rule "replace_known_left" (formula "23") (term "1,1") (ifseqformula "26"))
                               (builtin "One Step Simplification" (formula "23"))
                              (rule "true_left" (formula "23"))
                              (rule "Use_information_flow_contract_for_multiply_1272441881" (formula "69") (ifseqformula "34"))
                              (rule "replaceKnownSelect_taclet21_12" (formula "69") (term "0,1,1"))
                              (rule "replaceKnownSelect_taclet21_11" (formula "69") (term "1,1,1"))
                              (rule "replaceKnownAuxiliaryConstant_taclet11110021_19" (formula "69") (term "0,1,1"))
                              (rule "replaceKnownAuxiliaryConstant_taclet1110021_18" (formula "69") (term "1,1,1"))
                              (rule "replaceKnownSelect_taclet21_8" (formula "69") (term "1,1,0,1"))
                              (rule "replaceKnownSelect_taclet21_9" (formula "69") (term "0,1,0,1"))
                              (rule "replaceKnownAuxiliaryConstant_taclet21_10" (formula "69") (term "1,1,0,1"))
                               (builtin "One Step Simplification" (formula "69") (ifInst ""  (formula "83")) (ifInst ""  (formula "82")) (ifInst ""  (formula "100")))
                              (rule "pullOutSelect" (formula "69") (term "0,0,1") (inst "selectSK=org_bouncycastle_math_ec_ECPoint_value_4"))
                              (rule "simplifySelectOfAnonEQ" (formula "69") (ifseqformula "58"))
                               (builtin "One Step Simplification" (formula "69") (ifInst ""  (formula "98")) (ifInst ""  (formula "45")))
                              (rule "applyEqReverse" (formula "70") (term "0,0,1") (ifseqformula "69"))
                              (rule "hideAuxiliaryEq" (formula "69"))
                              (rule "eqSymm" (formula "69") (term "0,1"))
                              (rule "applyEq" (formula "69") (term "1,0,1") (ifseqformula "3"))
                              (rule "pullOutSelect" (formula "69") (term "0,0,1") (inst "selectSK=org_bouncycastle_math_ec_ECPoint_value_5"))
                              (rule "simplifySelectOfAnonEQ" (formula "69") (ifseqformula "24"))
                               (builtin "One Step Simplification" (formula "69") (ifInst ""  (formula "97")) (ifInst ""  (formula "12")))
                              (rule "applyEqReverse" (formula "70") (term "0,0,1") (ifseqformula "69"))
                               (builtin "One Step Simplification" (formula "70"))
                              (rule "notLeft" (formula "70"))
                              (rule "hideAuxiliaryEq" (formula "69"))
                              (rule "Class_invariant_axiom_for_org_bouncycastle_math_ec_ECPoint" (formula "75") (term "0"))
                               (builtin "One Step Simplification" (formula "75"))
                              (rule "Class_invariant_axiom_for_org_bouncycastle_math_ec_ECPoint" (formula "75"))
                              (rule "closeTrue" (formula "75"))
                           )
                           (branch "CUT: result_228_A_1.value@heapAtPre_A«anonHeapFunction» = 0 FALSE"
                               (builtin "One Step Simplification" (formula "26"))
                              (rule "replace_known_right" (formula "27") (term "0") (ifseqformula "79"))
                               (builtin "One Step Simplification" (formula "27"))
                              (rule "replace_known_right" (formula "28") (term "0") (ifseqformula "79"))
                               (builtin "One Step Simplification" (formula "28"))
                              (rule "applyEq" (formula "30") (term "0,0") (ifseqformula "27"))
                              (rule "polySimp_mulComm0" (formula "30") (term "0"))
                              (rule "applyEq" (formula "28") (term "0") (ifseqformula "30"))
                              (rule "inEqSimp_homoInEq1" (formula "28"))
                              (rule "polySimp_mulComm0" (formula "28") (term "1,0"))
                              (rule "polySimp_rightDist" (formula "28") (term "1,0"))
                              (rule "polySimp_mulAssoc" (formula "28") (term "0,1,0"))
                              (rule "polySimp_mulComm0" (formula "28") (term "0,0,1,0"))
                              (rule "polySimp_mulLiterals" (formula "28") (term "0,1,0"))
                              (rule "polySimp_elimOne" (formula "28") (term "0,1,0"))
                              (rule "polySimp_addAssoc" (formula "28") (term "0"))
                              (rule "polySimp_addComm1" (formula "28") (term "0,0"))
                              (rule "polySimp_pullOutFactor2b" (formula "28") (term "0,0,0"))
                              (rule "add_literals" (formula "28") (term "1,1,0,0,0"))
                              (rule "times_zero_1" (formula "28") (term "1,0,0,0"))
                              (rule "add_literals" (formula "28") (term "0,0,0"))
                              (rule "applyEq" (formula "26") (term "0") (ifseqformula "30"))
                              (rule "inEqSimp_homoInEq0" (formula "26"))
                              (rule "polySimp_mulComm0" (formula "26") (term "1,0"))
                              (rule "polySimp_rightDist" (formula "26") (term "1,0"))
                              (rule "polySimp_mulAssoc" (formula "26") (term "0,1,0"))
                              (rule "polySimp_mulComm0" (formula "26") (term "0,0,1,0"))
                              (rule "polySimp_mulLiterals" (formula "26") (term "0,1,0"))
                              (rule "polySimp_elimOne" (formula "26") (term "0,1,0"))
                              (rule "polySimp_addAssoc" (formula "26") (term "0"))
                              (rule "polySimp_pullOutFactor2" (formula "26") (term "0,0"))
                              (rule "add_literals" (formula "26") (term "1,0,0"))
                              (rule "times_zero_1" (formula "26") (term "0,0"))
                              (rule "add_zero_left" (formula "26") (term "0"))
                              (rule "applyEq" (formula "29") (term "0,1") (ifseqformula "27"))
                              (rule "inEqSimp_sepNegMonomial0" (formula "28"))
                              (rule "polySimp_mulLiterals" (formula "28") (term "0"))
                              (rule "polySimp_elimOne" (formula "28") (term "0"))
                              (rule "inEqSimp_invertInEq1" (formula "26"))
                              (rule "polySimp_mulLiterals" (formula "26") (term "0"))
                              (rule "mul_literals" (formula "26") (term "1"))
                              (rule "polySimp_elimOne" (formula "26") (term "0"))
                              (rule "inEqSimp_strengthen1" (formula "25") (ifseqformula "79"))
                              (rule "add_literals" (formula "25") (term "1"))
                              (rule "inEqSimp_contradEq7" (formula "79") (ifseqformula "25"))
                              (rule "times_zero_1" (formula "79") (term "1,0,0"))
                              (rule "add_literals" (formula "79") (term "0,0"))
                              (rule "leq_literals" (formula "79") (term "0"))
                               (builtin "One Step Simplification" (formula "79"))
                              (rule "false_right" (formula "79"))
                              (rule "inEqSimp_exactShadow3" (formula "28") (ifseqformula "26"))
                              (rule "add_zero_right" (formula "28") (term "0"))
                              (rule "polySimp_rightDist" (formula "28") (term "0"))
                              (rule "polySimp_mulLiterals" (formula "28") (term "1,0"))
                              (rule "mul_literals" (formula "28") (term "0,0"))
                              (rule "polySimp_elimOne" (formula "28") (term "1,0"))
                              (rule "inEqSimp_sepPosMonomial1" (formula "28"))
                              (rule "mul_literals" (formula "28") (term "1"))
                              (rule "Use_information_flow_contract_for_compareTo_325434207" (formula "17") (ifseqformula "17"))
                               (builtin "One Step Simplification" (formula "17") (ifInst ""  (formula "96")) (ifInst ""  (formula "96")))
                              (rule "true_left" (formula "17"))
                              (rule "Use_information_flow_contract_for_getOrder_757678341" (formula "60") (ifseqformula "23"))
                              (rule "replace_known_left" (formula "60") (term "1,1") (ifseqformula "5"))
                               (builtin "One Step Simplification" (formula "60"))
                              (rule "true_left" (formula "60"))
                              (rule "Use_information_flow_contract_for_multiply_1272441881_0" (formula "73") (ifseqformula "37"))
                              (rule "replaceKnownSelect_taclet21_12" (formula "73") (term "0,1,1"))
                              (rule "replaceKnownSelect_taclet21_11" (formula "73") (term "1,1,1"))
                              (rule "replaceKnownAuxiliaryConstant_taclet11110021_19" (formula "73") (term "0,1,1"))
                              (rule "replaceKnownAuxiliaryConstant_taclet1110021_18" (formula "73") (term "1,1,1"))
                              (rule "replaceKnownSelect_taclet21_8" (formula "73") (term "1,1,0,1"))
                              (rule "replaceKnownSelect_taclet21_9" (formula "73") (term "0,1,0,1"))
                              (rule "replaceKnownAuxiliaryConstant_taclet21_10" (formula "73") (term "1,1,0,1"))
                               (builtin "One Step Simplification" (formula "73") (ifInst ""  (formula "87")) (ifInst ""  (formula "86")) (ifInst ""  (formula "104")))
                              (rule "pullOutSelect" (formula "73") (term "1,0,1") (inst "selectSK=org_bouncycastle_math_ec_ECPoint_value_4"))
                              (rule "simplifySelectOfAnonEQ" (formula "73") (ifseqformula "24"))
                               (builtin "One Step Simplification" (formula "73") (ifInst ""  (formula "101")) (ifInst ""  (formula "12")))
                              (rule "applyEqReverse" (formula "74") (term "1,0,1") (ifseqformula "73"))
                              (rule "hideAuxiliaryEq" (formula "73"))
                              (rule "pullOutSelect" (formula "73") (term "0,0,1") (inst "selectSK=org_bouncycastle_math_ec_ECPoint_value_5"))
                              (rule "simplifySelectOfAnonEQ" (formula "73") (ifseqformula "62"))
                               (builtin "One Step Simplification" (formula "73") (ifInst ""  (formula "102")) (ifInst ""  (formula "49")))
                              (rule "applyEqReverse" (formula "74") (term "0,0,1") (ifseqformula "73"))
                              (rule "hideAuxiliaryEq" (formula "73"))
                              (rule "replace_known_left" (formula "73") (term "0,1") (ifseqformula "3"))
                               (builtin "One Step Simplification" (formula "73"))
                              (rule "notLeft" (formula "73"))
                              (rule "Class_invariant_axiom_for_org_bouncycastle_math_ec_ECPoint" (formula "79") (term "1"))
                               (builtin "One Step Simplification" (formula "79"))
                              (rule "Class_invariant_axiom_for_org_bouncycastle_math_ec_ECPoint" (formula "79"))
                              (rule "closeTrue" (formula "79"))
                           )
                        )
                        (branch "result_228_A_1.value@heapAtPre_A«anonHeapFunction» ≥ 0 FALSE"
                           (rule "inEqSimp_geqRight" (formula "76"))
                           (rule "mul_literals" (formula "1") (term "1,0,0"))
                           (rule "add_literals" (formula "1") (term "0,0"))
                           (rule "inEqSimp_sepPosMonomial0" (formula "1"))
                           (rule "mul_literals" (formula "1") (term "1"))
                           (rule "inEqSimp_contradEq3" (formula "26") (term "0") (ifseqformula "1"))
                           (rule "times_zero_1" (formula "26") (term "1,0,0,0"))
                           (rule "add_literals" (formula "26") (term "0,0,0"))
                           (rule "qeq_literals" (formula "26") (term "0,0"))
                            (builtin "One Step Simplification" (formula "26"))
                           (rule "andLeft" (formula "26"))
                           (rule "andLeft" (formula "26"))
                           (rule "applyEq" (formula "30") (term "0,0") (ifseqformula "27"))
                           (rule "polySimp_mulComm0" (formula "30") (term "0"))
                           (rule "applyEq" (formula "26") (term "0") (ifseqformula "30"))
                           (rule "inEqSimp_homoInEq0" (formula "26"))
                           (rule "polySimp_mulComm0" (formula "26") (term "1,0"))
                           (rule "polySimp_rightDist" (formula "26") (term "1,0"))
                           (rule "polySimp_mulAssoc" (formula "26") (term "0,1,0"))
                           (rule "polySimp_mulComm0" (formula "26") (term "0,0,1,0"))
                           (rule "polySimp_mulLiterals" (formula "26") (term "0,1,0"))
                           (rule "polySimp_elimOne" (formula "26") (term "0,1,0"))
                           (rule "polySimp_addAssoc" (formula "26") (term "0"))
                           (rule "polySimp_pullOutFactor2" (formula "26") (term "0,0"))
                           (rule "add_literals" (formula "26") (term "1,0,0"))
                           (rule "times_zero_1" (formula "26") (term "0,0"))
                           (rule "add_zero_left" (formula "26") (term "0"))
                           (rule "applyEq" (formula "28") (term "0") (ifseqformula "30"))
                           (rule "inEqSimp_homoInEq1" (formula "28"))
                           (rule "polySimp_mulComm0" (formula "28") (term "1,0"))
                           (rule "polySimp_rightDist" (formula "28") (term "1,0"))
                           (rule "polySimp_mulAssoc" (formula "28") (term "0,1,0"))
                           (rule "polySimp_mulComm0" (formula "28") (term "0,0,1,0"))
                           (rule "polySimp_mulLiterals" (formula "28") (term "0,1,0"))
                           (rule "polySimp_elimOne" (formula "28") (term "0,1,0"))
                           (rule "polySimp_addAssoc" (formula "28") (term "0"))
                           (rule "polySimp_addComm1" (formula "28") (term "0,0"))
                           (rule "polySimp_pullOutFactor2b" (formula "28") (term "0,0,0"))
                           (rule "add_literals" (formula "28") (term "1,1,0,0,0"))
                           (rule "times_zero_1" (formula "28") (term "1,0,0,0"))
                           (rule "add_literals" (formula "28") (term "0,0,0"))
                           (rule "applyEq" (formula "29") (term "0,1") (ifseqformula "27"))
                           (rule "inEqSimp_invertInEq1" (formula "26"))
                           (rule "times_zero_2" (formula "26") (term "1"))
                           (rule "polySimp_mulLiterals" (formula "26") (term "0"))
                           (rule "polySimp_elimOne" (formula "26") (term "0"))
                           (rule "inEqSimp_sepNegMonomial0" (formula "28"))
                           (rule "polySimp_mulLiterals" (formula "28") (term "0"))
                           (rule "polySimp_elimOne" (formula "28") (term "0"))
                           (rule "inEqSimp_exactShadow3" (formula "28") (ifseqformula "26"))
                           (rule "add_zero_right" (formula "28") (term "0"))
                           (rule "polySimp_rightDist" (formula "28") (term "0"))
                           (rule "mul_literals" (formula "28") (term "0,0"))
                           (rule "inEqSimp_sepNegMonomial1" (formula "28"))
                           (rule "polySimp_mulLiterals" (formula "28") (term "0"))
                           (rule "polySimp_elimOne" (formula "28") (term "0"))
                           (rule "Use_information_flow_contract_for_compareTo_325434207" (formula "18") (ifseqformula "18"))
                            (builtin "One Step Simplification" (formula "18") (ifInst ""  (formula "96")) (ifInst ""  (formula "96")))
                           (rule "true_left" (formula "18"))
                           (rule "Use_information_flow_contract_for_getOrder_757678341" (formula "60") (ifseqformula "24"))
                           (rule "replace_known_left" (formula "60") (term "1,1") (ifseqformula "6"))
                            (builtin "One Step Simplification" (formula "60"))
                           (rule "true_left" (formula "60"))
                           (rule "Use_information_flow_contract_for_multiply_1272441881" (formula "73") (ifseqformula "37"))
                           (rule "replaceKnownSelect_taclet21_11" (formula "73") (term "1,1,1"))
                           (rule "replaceKnownSelect_taclet21_12" (formula "73") (term "0,1,1"))
                           (rule "replaceKnownAuxiliaryConstant_taclet1110021_18" (formula "73") (term "1,1,1"))
                           (rule "replaceKnownAuxiliaryConstant_taclet11110021_19" (formula "73") (term "0,1,1"))
                           (rule "replaceKnownSelect_taclet21_8" (formula "73") (term "1,1,0,1"))
                           (rule "replaceKnownSelect_taclet21_9" (formula "73") (term "0,1,0,1"))
                           (rule "replaceKnownAuxiliaryConstant_taclet21_10" (formula "73") (term "1,1,0,1"))
                            (builtin "One Step Simplification" (formula "73") (ifInst ""  (formula "87")) (ifInst ""  (formula "86")) (ifInst ""  (formula "104")))
                           (rule "pullOutSelect" (formula "73") (term "1,0,1") (inst "selectSK=org_bouncycastle_math_ec_ECPoint_value_4"))
                           (rule "simplifySelectOfAnonEQ" (formula "73") (ifseqformula "25"))
                            (builtin "One Step Simplification" (formula "73") (ifInst ""  (formula "101")) (ifInst ""  (formula "13")))
                           (rule "applyEqReverse" (formula "74") (term "1,0,1") (ifseqformula "73"))
                           (rule "hideAuxiliaryEq" (formula "73"))
                           (rule "pullOutSelect" (formula "73") (term "0,0,1") (inst "selectSK=org_bouncycastle_math_ec_ECPoint_value_5"))
                           (rule "simplifySelectOfAnonEQ" (formula "73") (ifseqformula "62"))
                            (builtin "One Step Simplification" (formula "73") (ifInst ""  (formula "102")) (ifInst ""  (formula "49")))
                           (rule "applyEqReverse" (formula "74") (term "0,0,1") (ifseqformula "73"))
                           (rule "hideAuxiliaryEq" (formula "73"))
                           (rule "replace_known_left" (formula "73") (term "0,1") (ifseqformula "4"))
                            (builtin "One Step Simplification" (formula "73"))
                           (rule "notLeft" (formula "73"))
                           (rule "Class_invariant_axiom_for_org_bouncycastle_math_ec_ECPoint" (formula "79") (term "0"))
                            (builtin "One Step Simplification" (formula "79"))
                           (rule "Class_invariant_axiom_for_org_bouncycastle_math_ec_ECPoint" (formula "79"))
                           (rule "closeTrue" (formula "79"))
                        )
                     )
                  )
               )
            )
         )
         (branch " result_229_B_0.<created>@heapAtPre_B«anonHeapFunction» = TRUE FALSE"
            (rule "eqSymm" (formula "66"))
            (rule "replace_known_right" (formula "62") (term "1") (ifseqformula "78"))
             (builtin "One Step Simplification" (formula "62"))
            (rule "applyEq" (formula "29") (term "1,1") (ifseqformula "66"))
            (rule "polySimp_addComm0" (formula "29") (term "1"))
            (rule "ifthenelse_split" (formula "3") (term "0"))
            (branch " resultAtPost_226_A.<created>@heapAtPre_A«anonHeapFunction» = TRUE TRUE"
               (rule "applyEqReverse" (formula "5") (term "1,0") (ifseqformula "4"))
               (rule "hideAuxiliaryEq" (formula "4"))
               (rule "replace_known_left" (formula "4") (term "1,0,0") (ifseqformula "3"))
                (builtin "One Step Simplification" (formula "4"))
               (rule "applyEqReverse" (formula "99") (term "1") (ifseqformula "4"))
               (rule "hideAuxiliaryEq" (formula "4"))
               (rule "eqSymm" (formula "98"))
               (rule "replace_known_left" (formula "34") (term "1") (ifseqformula "3"))
                (builtin "One Step Simplification" (formula "34"))
               (rule "true_left" (formula "34"))
               (rule "ifthenelse_split" (formula "1") (term "0"))
               (branch " resultAtPost_226_B.<created>@heapAtPre_B«anonHeapFunction» = TRUE TRUE"
                  (rule "applyEqReverse" (formula "3") (term "1,0") (ifseqformula "2"))
                  (rule "hideAuxiliaryEq" (formula "2"))
                  (rule "replace_known_left" (formula "2") (term "1,0,0") (ifseqformula "1"))
                   (builtin "One Step Simplification" (formula "2"))
                  (rule "applyEqReverse" (formula "97") (term "1") (ifseqformula "2"))
                  (rule "hideAuxiliaryEq" (formula "2"))
                  (rule "eqSymm" (formula "96"))
                  (rule "replace_known_left" (formula "68") (term "1") (ifseqformula "1"))
                   (builtin "One Step Simplification" (formula "68"))
                  (rule "true_left" (formula "68"))
                  (rule "Class_axiom_0_in_de_polyas_core3_open_cred_CredTool" (inst "seq=seq") (inst "i=i") (inst "str=str") (inst "seq_0=seq_0") (inst "i_0=i_0") (inst "sv_heap=heapAtPre_B<<anonHeapFunction>>"))
                  (rule "andLeft" (formula "1"))
                  (rule "castedGetAny" (formula "1") (term "0,0,0,0,0"))
                  (rule "castedGetAny" (formula "1") (term "0,0,1,0,0"))
                  (rule "castedGetAny" (formula "2") (term "0,1,1,0,0,0"))
                  (rule "nnf_imp2or" (formula "1") (term "0,0"))
                   (builtin "One Step Simplification" (formula "1"))
                  (rule "nnf_imp2or" (formula "2") (term "0,0,0"))
                  (rule "nnf_notAnd" (formula "2") (term "0,0,0,0"))
                   (builtin "One Step Simplification" (formula "2"))
                  (rule "nnf_imp2or" (formula "2") (term "1,0,0,0"))
                  (rule "nnf_notOr" (formula "2") (term "0,0,0,0,0"))
                  (rule "nnf_notAnd" (formula "2") (term "0,1,0,0,0"))
                   (builtin "One Step Simplification" (formula "2"))
                  (rule "commute_or" (formula "2") (term "0,0,0,0"))
                  (rule "commute_or_2" (formula "2") (term "0,0,0"))
                  (rule "shift_paren_or" (formula "2") (term "0,0,0,0"))
                  (rule "commute_and" (formula "2") (term "1,0,0,0"))
                  (rule "shift_paren_or" (formula "2") (term "0,0,0,0,0"))
                  (rule "commute_or_2" (formula "2") (term "0,0,0,0,0"))
                   (builtin "One Step Simplification" (formula "2"))
                  (rule "commute_or_2" (formula "2") (term "0,0,0,0"))
                  (rule "cnf_rightDist" (formula "2") (term "0,0,0"))
                  (rule "distr_forallAnd" (formula "2") (term "0,0"))
                  (rule "distr_forallAnd" (formula "2") (term "0"))
                  (rule "distr_forallAnd" (formula "2"))
                  (rule "andLeft" (formula "2"))
                  (rule "commute_or_2" (formula "2") (term "0,0,0"))
                   (builtin "One Step Simplification" (formula "2"))
                  (rule "eqSymm" (formula "2") (term "1,0,0,0,0"))
                  (rule "castedGetAny" (formula "2") (term "1,0,0,1,0,0,0"))
                  (rule "castedGetAny" (formula "2") (term "0,0,0,0,0,0"))
                  (rule "castedGetAny" (formula "2") (term "0,1,0,0,0,0"))
                   (builtin "One Step Simplification" (formula "2"))
                  (rule "true_left" (formula "2"))
                  (rule "shift_paren_or" (formula "2") (term "0,0,0"))
                   (builtin "One Step Simplification" (formula "2"))
                  (rule "eqSymm" (formula "2") (term "1,1,0,0,0"))
                  (rule "castedGetAny" (formula "2") (term "0,0,1,0,0,0"))
                  (rule "castedGetAny" (formula "2") (term "0,0,0,0,0,0"))
                  (rule "castedGetAny" (formula "2") (term "0,1,1,0,0,0"))
                   (builtin "One Step Simplification" (formula "2"))
                  (rule "true_left" (formula "2"))
                  (rule "Class_axiom_0_in_de_polyas_core3_open_cred_CredTool" (inst "seq=seq") (inst "i=i") (inst "str=str") (inst "seq_0=seq_0") (inst "i_0=i_0") (inst "sv_heap=anon_heap_mod<<anonHeapFunction>>"))
                  (rule "andLeft" (formula "1"))
                  (rule "castedGetAny" (formula "1") (term "0,0,0,0,0"))
                  (rule "castedGetAny" (formula "1") (term "0,0,1,0,0"))
                  (rule "castedGetAny" (formula "2") (term "0,1,1,0,0,0"))
                  (rule "nnf_imp2or" (formula "1") (term "0,0"))
                   (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "3")))
                  (rule "true_left" (formula "1"))
                  (rule "nnf_imp2or" (formula "1") (term "0,0,0"))
                  (rule "nnf_notAnd" (formula "1") (term "0,0,0,0"))
                   (builtin "One Step Simplification" (formula "1"))
                  (rule "nnf_imp2or" (formula "1") (term "1,0,0,0"))
                  (rule "nnf_notOr" (formula "1") (term "0,0,0,0,0"))
                  (rule "nnf_notAnd" (formula "1") (term "0,1,0,0,0"))
                   (builtin "One Step Simplification" (formula "1"))
                  (rule "commute_or" (formula "1") (term "0,0,0,0"))
                  (rule "commute_or_2" (formula "1") (term "0,0,0"))
                  (rule "shift_paren_or" (formula "1") (term "0,0,0,0"))
                  (rule "commute_and" (formula "1") (term "1,0,0,0"))
                  (rule "shift_paren_or" (formula "1") (term "0,0,0,0,0"))
                  (rule "commute_or_2" (formula "1") (term "0,0,0,0,0"))
                   (builtin "One Step Simplification" (formula "1"))
                  (rule "commute_or_2" (formula "1") (term "0,0,0,0"))
                  (rule "cnf_rightDist" (formula "1") (term "0,0,0"))
                  (rule "distr_forallAnd" (formula "1") (term "0,0"))
                  (rule "distr_forallAnd" (formula "1") (term "0"))
                  (rule "distr_forallAnd" (formula "1"))
                  (rule "andLeft" (formula "1"))
                  (rule "commute_or_2" (formula "1") (term "0,0,0"))
                   (builtin "One Step Simplification" (formula "1"))
                  (rule "eqSymm" (formula "1") (term "1,0,0,0,0"))
                  (rule "castedGetAny" (formula "1") (term "1,0,0,1,0,0,0"))
                  (rule "castedGetAny" (formula "1") (term "0,0,0,0,0,0"))
                  (rule "castedGetAny" (formula "1") (term "0,1,0,0,0,0"))
                   (builtin "One Step Simplification" (formula "1"))
                  (rule "true_left" (formula "1"))
                  (rule "shift_paren_or" (formula "1") (term "0,0,0"))
                   (builtin "One Step Simplification" (formula "1"))
                  (rule "eqSymm" (formula "1") (term "1,1,0,0,0"))
                  (rule "castedGetAny" (formula "1") (term "0,0,1,0,0,0"))
                  (rule "castedGetAny" (formula "1") (term "0,0,0,0,0,0"))
                  (rule "castedGetAny" (formula "1") (term "0,1,1,0,0,0"))
                   (builtin "One Step Simplification" (formula "1"))
                  (rule "true_left" (formula "1"))
                  (rule "Class_axiom_0_in_de_polyas_core3_open_cred_CredTool" (inst "seq=seq") (inst "i=i") (inst "str=str") (inst "seq_0=seq_0") (inst "i_0=i_0") (inst "sv_heap=anon_heap_multiply<<anonHeapFunction>>"))
                  (rule "andLeft" (formula "1"))
                  (rule "castedGetAny" (formula "1") (term "0,0,0,0,0"))
                  (rule "castedGetAny" (formula "1") (term "0,0,1,0,0"))
                  (rule "castedGetAny" (formula "2") (term "0,1,1,0,0,0"))
                  (rule "nnf_imp2or" (formula "1") (term "0,0"))
                   (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "3")))
                  (rule "true_left" (formula "1"))
                  (rule "nnf_imp2or" (formula "1") (term "0,0,0"))
                  (rule "nnf_imp2or" (formula "1") (term "1,0,0,0"))
                  (rule "nnf_notAnd" (formula "1") (term "0,0,0,0"))
                   (builtin "One Step Simplification" (formula "1"))
                  (rule "nnf_notAnd" (formula "1") (term "0,1,0,0,0"))
                   (builtin "One Step Simplification" (formula "1"))
                  (rule "nnf_notOr" (formula "1") (term "0,0,0,0,0"))
                  (rule "commute_or" (formula "1") (term "0,0,0,0"))
                  (rule "commute_or_2" (formula "1") (term "0,0,0"))
                  (rule "Class_axiom_0_in_de_polyas_core3_open_cred_CredTool" (inst "seq=seq") (inst "i=i") (inst "str=str") (inst "seq_0=seq_0") (inst "i_0=i_0") (inst "sv_heap=heapAtPre_A<<anonHeapFunction>>"))
                  (rule "andLeft" (formula "1"))
                  (rule "castedGetAny" (formula "1") (term "0,0,0,0,0"))
                  (rule "castedGetAny" (formula "1") (term "0,0,1,0,0"))
                  (rule "castedGetAny" (formula "2") (term "0,1,1,0,0,0"))
                  (rule "nnf_imp2or" (formula "1") (term "0,0"))
                   (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "4")))
                  (rule "true_left" (formula "1"))
                  (rule "nnf_imp2or" (formula "1") (term "0,0,0"))
                  (rule "nnf_notAnd" (formula "1") (term "0,0,0,0"))
                   (builtin "One Step Simplification" (formula "1"))
                  (rule "nnf_imp2or" (formula "1") (term "1,0,0,0"))
                  (rule "nnf_notOr" (formula "1") (term "0,0,0,0,0"))
                  (rule "nnf_notAnd" (formula "1") (term "0,1,0,0,0"))
                   (builtin "One Step Simplification" (formula "1"))
                  (rule "Class_axiom_0_in_de_polyas_core3_open_cred_CredTool" (inst "seq=seq") (inst "i=i") (inst "str=str") (inst "seq_0=seq_0") (inst "i_0=i_0") (inst "sv_heap=anon(heapAtPre_A<<anonHeapFunction>>,
     empty,
     anon_heap_mod<<anonHeapFunction>>)"))
                   (builtin "One Step Simplification" (formula "1"))
                  (rule "andLeft" (formula "1"))
                  (rule "castedGetAny" (formula "1") (term "0,0,1,0,0"))
                  (rule "castedGetAny" (formula "1") (term "0,0,0,0,0"))
                  (rule "castedGetAny" (formula "2") (term "0,1,1,0,0,0"))
                  (rule "nnf_imp2or" (formula "1") (term "0,0"))
                   (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "5")))
                  (rule "true_left" (formula "1"))
                  (rule "nnf_imp2or" (formula "1") (term "0,0,0"))
                  (rule "nnf_notAnd" (formula "1") (term "0,0,0,0"))
                   (builtin "One Step Simplification" (formula "1"))
                  (rule "nnf_imp2or" (formula "1") (term "1,0,0,0"))
                  (rule "nnf_notOr" (formula "1") (term "0,0,0,0,0"))
                  (rule "nnf_notAnd" (formula "1") (term "0,1,0,0,0"))
                   (builtin "One Step Simplification" (formula "1"))
                  (rule "nnf_notOr" (formula "1") (term "1,0,0,0,0,0"))
                  (rule "commute_or" (formula "2") (term "0,0,0,0"))
                  (rule "commute_or_2" (formula "2") (term "0,0,0"))
                  (rule "Class_axiom_0_in_de_polyas_core3_open_cred_CredTool" (inst "seq=seq") (inst "i=i") (inst "str=str") (inst "seq_0=seq_0") (inst "i_0=i_0") (inst "sv_heap=heapAfter_mod_A_0"))
                  (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "1,0,0,0,0,0,1") (ifseqformula "30"))
                  (rule "andLeft" (formula "1"))
                  (rule "castedGetAny" (formula "1") (term "0,0,0,0,0"))
                  (rule "castedGetAny" (formula "1") (term "0,0,1,0,0"))
                  (rule "castedGetAny" (formula "2") (term "0,1,1,0,0,0"))
                  (rule "nnf_imp2or" (formula "1") (term "0,0"))
                   (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "6")))
                  (rule "true_left" (formula "1"))
                  (rule "nnf_imp2or" (formula "1") (term "0,0,0"))
                  (rule "nnf_imp2or" (formula "1") (term "1,0,0,0"))
                  (rule "nnf_notAnd" (formula "1") (term "0,0,0,0"))
                   (builtin "One Step Simplification" (formula "1"))
                  (rule "nnf_notAnd" (formula "1") (term "0,1,0,0,0"))
                   (builtin "One Step Simplification" (formula "1"))
                  (rule "nnf_notOr" (formula "1") (term "0,0,0,0,0"))
                  (rule "nnf_notOr" (formula "1") (term "1,0,0,0,0,0"))
                  (rule "Class_axiom_0_in_de_polyas_core3_open_cred_CredTool" (inst "seq=seq") (inst "i=i") (inst "str=str") (inst "seq_0=seq_0") (inst "i_0=i_0") (inst "sv_heap=anon(heapAfter_mod_A_0,
     empty,
     anon_heap_multiply<<anonHeapFunction>>)"))
                   (builtin "One Step Simplification" (formula "1"))
                  (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,1,0,0,0,0,0,1") (ifseqformula "30"))
                  (rule "andLeft" (formula "1"))
                  (rule "castedGetAny" (formula "1") (term "0,0,0,0,0"))
                  (rule "castedGetAny" (formula "2") (term "0,1,1,0,0,0"))
                  (rule "castedGetAny" (formula "1") (term "0,0,1,0,0"))
                  (rule "nnf_imp2or" (formula "1") (term "0,0"))
                   (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "6")))
                  (rule "true_left" (formula "1"))
                  (rule "nnf_imp2or" (formula "1") (term "0,0,0"))
                  (rule "nnf_notAnd" (formula "1") (term "0,0,0,0"))
                   (builtin "One Step Simplification" (formula "1"))
                  (rule "nnf_imp2or" (formula "1") (term "1,0,0,0"))
                  (rule "nnf_notOr" (formula "1") (term "0,0,0,0,0"))
                  (rule "nnf_notAnd" (formula "1") (term "0,1,0,0,0"))
                   (builtin "One Step Simplification" (formula "1"))
                  (rule "nnf_notOr" (formula "1") (term "1,0,0,0,0,0"))
                  (rule "nnf_notOr" (formula "1") (term "0,1,0,0,0,0,0"))
                  (rule "Class_axiom_0_in_de_polyas_core3_open_cred_CredTool" (inst "seq=seq") (inst "i=i") (inst "str=str") (inst "seq_0=seq_0") (inst "i_0=i_0") (inst "sv_heap=heapAfter_multiply_A_1"))
                  (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "1,0,0,0,0,0,1") (ifseqformula "37"))
                  (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,1,0,0,0,0,0,1") (ifseqformula "31"))
                  (rule "andLeft" (formula "1"))
                  (rule "castedGetAny" (formula "2") (term "0,1,1,0,0,0"))
                  (rule "castedGetAny" (formula "1") (term "0,0,1,0,0"))
                  (rule "castedGetAny" (formula "1") (term "0,0,0,0,0"))
                  (rule "nnf_imp2or" (formula "1") (term "0,0"))
                   (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "7")))
                  (rule "true_left" (formula "1"))
                  (rule "nnf_imp2or" (formula "1") (term "0,0,0"))
                  (rule "nnf_imp2or" (formula "1") (term "1,0,0,0"))
                  (rule "nnf_notAnd" (formula "1") (term "0,0,0,0"))
                   (builtin "One Step Simplification" (formula "1"))
                  (rule "nnf_notAnd" (formula "1") (term "0,1,0,0,0"))
                   (builtin "One Step Simplification" (formula "1"))
                  (rule "nnf_notOr" (formula "1") (term "0,0,0,0,0"))
                  (rule "nnf_notOr" (formula "1") (term "1,0,0,0,0,0"))
                  (rule "nnf_notOr" (formula "1") (term "0,1,0,0,0,0,0"))
                  (rule "Class_axiom_0_in_de_polyas_core3_open_cred_CredTool" (inst "seq=seq") (inst "i=i") (inst "str=str") (inst "seq_0=seq_0") (inst "i_0=i_0") (inst "sv_heap=heapAtPost_A"))
                  (rule "andLeft" (formula "1"))
                  (rule "castedGetAny" (formula "2") (term "0,1,1,0,0,0"))
                  (rule "castedGetAny" (formula "1") (term "0,0,0,0,0"))
                  (rule "castedGetAny" (formula "1") (term "0,0,1,0,0"))
                  (rule "applyEqRigid" (formula "2") (term "0,0,1,0,0,0,0,0") (ifseqformula "45"))
                  (rule "selectCreatedOfAnonAsFormulaEQ" (formula "2") (term "1,0,0,0,0,0") (ifseqformula "38"))
                  (rule "selectCreatedOfAnonAsFormulaEQ" (formula "2") (term "0,1,0,0,0,0,0") (ifseqformula "32"))
                  (rule "nnf_imp2or" (formula "1") (term "0,0"))
                   (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "7")))
                  (rule "true_left" (formula "1"))
                  (rule "nnf_imp2or" (formula "1") (term "0,0,0"))
                  (rule "nnf_imp2or" (formula "1") (term "1,0,0,0"))
                  (rule "nnf_notAnd" (formula "1") (term "0,0,0,0"))
                   (builtin "One Step Simplification" (formula "1"))
                  (rule "nnf_notOr" (formula "1") (term "0,0,0,0,0"))
                  (rule "nnf_notAnd" (formula "1") (term "0,1,0,0,0"))
                   (builtin "One Step Simplification" (formula "1"))
                  (rule "nnf_notOr" (formula "1") (term "1,0,0,0,0,0"))
                  (rule "nnf_notOr" (formula "1") (term "0,1,0,0,0,0,0"))
                  (rule "Class_axiom_0_in_de_polyas_core3_open_cred_CredTool" (inst "seq=seq") (inst "i=i") (inst "str=str") (inst "seq_0=seq_0") (inst "i_0=i_0") (inst "sv_heap=anon(heapAtPre_B<<anonHeapFunction>>,
     empty,
     anon_heap_mod<<anonHeapFunction>>)"))
                   (builtin "One Step Simplification" (formula "1"))
                  (rule "andLeft" (formula "1"))
                  (rule "castedGetAny" (formula "1") (term "0,0,0,0,0"))
                  (rule "castedGetAny" (formula "1") (term "0,0,1,0,0"))
                  (rule "castedGetAny" (formula "2") (term "0,1,1,0,0,0"))
                  (rule "nnf_imp2or" (formula "1") (term "0,0"))
                   (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "7")))
                  (rule "true_left" (formula "1"))
                  (rule "nnf_imp2or" (formula "1") (term "0,0,0"))
                  (rule "nnf_imp2or" (formula "1") (term "1,0,0,0"))
                  (rule "nnf_notAnd" (formula "1") (term "0,0,0,0"))
                   (builtin "One Step Simplification" (formula "1"))
                  (rule "nnf_notAnd" (formula "1") (term "0,1,0,0,0"))
                   (builtin "One Step Simplification" (formula "1"))
                  (rule "nnf_notOr" (formula "1") (term "0,0,0,0,0"))
                  (rule "nnf_notOr" (formula "1") (term "1,0,0,0,0,0"))
                  (rule "Class_axiom_0_in_de_polyas_core3_open_cred_CredTool" (inst "seq=seq") (inst "i=i") (inst "str=str") (inst "seq_0=seq_0") (inst "i_0=i_0") (inst "sv_heap=heapAfter_mod_B_0"))
                  (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "1,0,0,0,0,0,1") (ifseqformula "65"))
                  (rule "andLeft" (formula "1"))
                  (rule "castedGetAny" (formula "1") (term "0,0,0,0,0"))
                  (rule "castedGetAny" (formula "2") (term "0,1,1,0,0,0"))
                  (rule "castedGetAny" (formula "1") (term "0,0,1,0,0"))
                  (rule "nnf_imp2or" (formula "1") (term "0,0"))
                   (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "8")))
                  (rule "true_left" (formula "1"))
                  (rule "nnf_imp2or" (formula "1") (term "0,0,0"))
                  (rule "nnf_notAnd" (formula "1") (term "0,0,0,0"))
                   (builtin "One Step Simplification" (formula "1"))
                  (rule "nnf_imp2or" (formula "1") (term "1,0,0,0"))
                  (rule "nnf_notOr" (formula "1") (term "0,0,0,0,0"))
                  (rule "nnf_notAnd" (formula "1") (term "0,1,0,0,0"))
                   (builtin "One Step Simplification" (formula "1"))
                  (rule "nnf_notOr" (formula "1") (term "1,0,0,0,0,0"))
                  (rule "Class_axiom_0_in_de_polyas_core3_open_cred_CredTool" (inst "seq=seq") (inst "i=i") (inst "str=str") (inst "seq_0=seq_0") (inst "i_0=i_0") (inst "sv_heap=anon(heapAfter_mod_B_0,
     empty,
     anon_heap_multiply<<anonHeapFunction>>)"))
                   (builtin "One Step Simplification" (formula "1"))
                  (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,1,0,0,0,0,0,1") (ifseqformula "65"))
                  (rule "andLeft" (formula "1"))
                  (rule "castedGetAny" (formula "1") (term "0,0,1,0,0"))
                  (rule "castedGetAny" (formula "1") (term "0,0,0,0,0"))
                  (rule "castedGetAny" (formula "2") (term "0,1,1,0,0,0"))
                  (rule "nnf_imp2or" (formula "1") (term "0,0"))
                   (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "8")))
                  (rule "true_left" (formula "1"))
                  (rule "nnf_imp2or" (formula "1") (term "0,0,0"))
                  (rule "nnf_imp2or" (formula "1") (term "1,0,0,0"))
                  (rule "nnf_notAnd" (formula "1") (term "0,0,0,0"))
                   (builtin "One Step Simplification" (formula "1"))
                  (rule "nnf_notAnd" (formula "1") (term "0,1,0,0,0"))
                   (builtin "One Step Simplification" (formula "1"))
                  (rule "nnf_notOr" (formula "1") (term "0,0,0,0,0"))
                  (rule "nnf_notOr" (formula "1") (term "1,0,0,0,0,0"))
                  (rule "nnf_notOr" (formula "1") (term "0,1,0,0,0,0,0"))
                  (rule "Class_axiom_0_in_de_polyas_core3_open_cred_CredTool" (inst "seq=seq") (inst "i=i") (inst "str=str") (inst "seq_0=seq_0") (inst "i_0=i_0") (inst "sv_heap=heapAfter_multiply_B_1"))
                  (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "1,0,0,0,0,0,1") (ifseqformula "74"))
                  (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,1,0,0,0,0,0,1") (ifseqformula "66"))
                  (rule "andLeft" (formula "1"))
                  (rule "castedGetAny" (formula "1") (term "0,0,1,0,0"))
                  (rule "castedGetAny" (formula "1") (term "0,0,0,0,0"))
                  (rule "castedGetAny" (formula "2") (term "0,1,1,0,0,0"))
                  (rule "nnf_imp2or" (formula "1") (term "0,0"))
                   (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "9")))
                  (rule "true_left" (formula "1"))
                  (rule "nnf_imp2or" (formula "1") (term "0,0,0"))
                  (rule "nnf_imp2or" (formula "1") (term "1,0,0,0"))
                  (rule "nnf_notAnd" (formula "1") (term "0,0,0,0"))
                   (builtin "One Step Simplification" (formula "1"))
                  (rule "nnf_notOr" (formula "1") (term "0,0,0,0,0"))
                  (rule "nnf_notAnd" (formula "1") (term "0,1,0,0,0"))
                   (builtin "One Step Simplification" (formula "1"))
                  (rule "nnf_notOr" (formula "1") (term "1,0,0,0,0,0"))
                  (rule "nnf_notOr" (formula "1") (term "0,1,0,0,0,0,0"))
                  (rule "Class_axiom_0_in_de_polyas_core3_open_cred_CredTool" (inst "seq=seq") (inst "i=i") (inst "str=str") (inst "seq_0=seq_0") (inst "i_0=i_0") (inst "sv_heap=heapAtPost_B"))
                  (rule "andLeft" (formula "1"))
                  (rule "castedGetAny" (formula "2") (term "0,1,1,0,0,0"))
                  (rule "castedGetAny" (formula "1") (term "0,0,1,0,0"))
                  (rule "castedGetAny" (formula "1") (term "0,0,0,0,0"))
                  (rule "applyEqRigid" (formula "2") (term "0,0,1,0,0,0,0,0") (ifseqformula "82"))
                  (rule "selectCreatedOfAnonAsFormulaEQ" (formula "2") (term "1,0,0,0,0,0") (ifseqformula "75"))
                  (rule "selectCreatedOfAnonAsFormulaEQ" (formula "2") (term "0,1,0,0,0,0,0") (ifseqformula "67"))
                  (rule "nnf_imp2or" (formula "1") (term "0,0"))
                   (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "9")))
                  (rule "true_left" (formula "1"))
                  (rule "nnf_imp2or" (formula "1") (term "0,0,0"))
                  (rule "nnf_imp2or" (formula "1") (term "1,0,0,0"))
                  (rule "nnf_notAnd" (formula "1") (term "0,0,0,0"))
                   (builtin "One Step Simplification" (formula "1"))
                  (rule "nnf_notAnd" (formula "1") (term "0,1,0,0,0"))
                   (builtin "One Step Simplification" (formula "1"))
                  (rule "nnf_notOr" (formula "1") (term "0,0,0,0,0"))
                  (rule "nnf_notOr" (formula "1") (term "1,0,0,0,0,0"))
                  (rule "nnf_notOr" (formula "1") (term "0,1,0,0,0,0,0"))
                  (rule "div_axiom" (formula "33") (term "0,1") (inst "quotient=quotient_0"))
                  (rule "polySimp_mulComm0" (formula "33") (term "0,1,1,1"))
                  (rule "polySimp_mulComm0" (formula "33") (term "0,1,0,1"))
                  (rule "polySimp_mulComm0" (formula "33") (term "0,2,1,1"))
                  (rule "polySimp_mulComm0" (formula "33") (term "1,1,1,1,1"))
                  (rule "shift_paren_or" (formula "6") (term "0,0,0,0"))
                  (rule "commute_or" (formula "4") (term "0,0,0,0"))
                  (rule "commute_and" (formula "6") (term "1,0,0,0"))
                  (rule "commute_or" (formula "4") (term "0,1,0,0,0"))
                  (rule "shift_paren_or" (formula "5") (term "0,0,0,0"))
                  (rule "commute_or" (formula "3") (term "0,0,0,0"))
                  (rule "commute_and" (formula "5") (term "1,0,0,0"))
                  (rule "commute_or" (formula "3") (term "0,1,0,0,0"))
                  (rule "commute_or" (formula "2") (term "0,0,0,0"))
                  (rule "onlyCreatedObjectsAreReferenced" (formula "95") (term "0") (ifseqformula "22"))
                  (rule "replace_known_left" (formula "1") (term "1") (ifseqformula "28"))
                   (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "96")))
                  (rule "true_left" (formula "1"))
                  (rule "onlyCreatedObjectsAreReferenced" (formula "31") (term "2") (ifseqformula "22"))
                  (rule "replace_known_right" (formula "31") (term "0") (ifseqformula "94"))
                   (builtin "One Step Simplification" (formula "31") (ifInst ""  (formula "16")))
                  (rule "true_left" (formula "31"))
                  (rule "onlyCreatedObjectsAreReferenced" (formula "14") (term "1,1,0") (ifseqformula "22"))
                  (rule "replace_known_right" (formula "14") (term "0") (ifseqformula "92"))
                   (builtin "One Step Simplification" (formula "14") (ifInst ""  (formula "16")))
                  (rule "true_left" (formula "14"))
                  (rule "onlyCreatedObjectsAreReferenced" (formula "48") (term "1,0") (ifseqformula "55"))
                  (rule "replace_known_right" (formula "48") (term "0") (ifseqformula "93"))
                   (builtin "One Step Simplification" (formula "48") (ifInst ""  (formula "49")))
                  (rule "true_left" (formula "48"))
                  (rule "onlyCreatedObjectsAreReferenced" (formula "14") (term "1,0") (ifseqformula "22"))
                  (rule "replace_known_right" (formula "14") (term "0") (ifseqformula "90"))
                   (builtin "One Step Simplification" (formula "14") (ifInst ""  (formula "15")))
                  (rule "true_left" (formula "14"))
                  (rule "onlyCreatedObjectsAreReferenced" (formula "47") (term "1,0") (ifseqformula "55"))
                  (rule "replace_known_right" (formula "47") (term "0") (ifseqformula "91"))
                   (builtin "One Step Simplification" (formula "47") (ifInst ""  (formula "48")))
                  (rule "true_left" (formula "47"))
                  (rule "onlyCreatedObjectsAreReferenced" (formula "60") (term "1,0") (ifseqformula "55"))
                  (rule "replace_known_right" (formula "60") (term "0") (ifseqformula "97"))
                   (builtin "One Step Simplification" (formula "60") (ifInst ""  (formula "61")))
                  (rule "true_left" (formula "60"))
                  (rule "onlyCreatedObjectsAreReferenced" (formula "64") (term "2") (ifseqformula "55"))
                  (rule "replace_known_left" (formula "64") (term "1") (ifseqformula "49"))
                   (builtin "One Step Simplification" (formula "64") (ifInst ""  (formula "95")))
                  (rule "true_left" (formula "64"))
                  (rule "commute_or" (formula "2") (term "0,1,0,0,0"))
                  (rule "commute_or" (formula "1") (term "0,0,0,0"))
                  (rule "commute_or" (formula "1") (term "0,1,0,0,0"))
                  (rule "commute_or_2" (formula "4") (term "0,0,0"))
                  (rule "commute_or_2" (formula "3") (term "0,0,0"))
                  (rule "commute_and" (formula "33") (term "0,1"))
                  (rule "commute_or_2" (formula "2") (term "0,0,0"))
                  (rule "commute_or_2" (formula "1") (term "0,0,0"))
                  (rule "shift_paren_or" (formula "6") (term "0,0,0,0,0"))
                  (rule "shift_paren_or" (formula "5") (term "0,0,0,0,0"))
                  (rule "shift_paren_or" (formula "4") (term "0,0,0,0"))
                  (rule "commute_or_2" (formula "3") (term "1,0,0,0,0"))
                  (rule "shift_paren_or" (formula "2") (term "0,0,0,0"))
                  (rule "commute_or_2" (formula "1") (term "1,0,0,0,0"))
                  (rule "commute_or_2" (formula "6") (term "0,0,0,0,0"))
                   (builtin "One Step Simplification" (formula "6"))
                  (rule "commute_or_2" (formula "6") (term "0,0,0,0"))
                  (rule "commute_or_2" (formula "5") (term "0,0,0,0,0"))
                   (builtin "One Step Simplification" (formula "5"))
                  (rule "commute_or_2" (formula "5") (term "0,0,0,0"))
                  (rule "shift_paren_or" (formula "3") (term "0,0,0,0"))
                  (rule "shift_paren_or" (formula "1") (term "0,0,0,0"))
                  (rule "commute_and" (formula "4") (term "1,0,0,0"))
                  (rule "commute_and" (formula "3") (term "1,0,0,0"))
                  (rule "cnf_rightDist" (formula "6") (term "0,0,0"))
                  (rule "distr_forallAnd" (formula "6") (term "0,0"))
                  (rule "distr_forallAnd" (formula "6") (term "0"))
                  (rule "distr_forallAnd" (formula "6"))
                  (rule "andLeft" (formula "6"))
                  (rule "commute_or_2" (formula "6") (term "0,0,0"))
                   (builtin "One Step Simplification" (formula "6"))
                  (rule "eqSymm" (formula "6") (term "1,0,0,0,0"))
                  (rule "castedGetAny" (formula "6") (term "1,0,0,1,0,0,0"))
                  (rule "castedGetAny" (formula "6") (term "0,0,0,0,0,0"))
                  (rule "castedGetAny" (formula "6") (term "0,1,0,0,0,0"))
                   (builtin "One Step Simplification" (formula "6"))
                  (rule "true_left" (formula "6"))
                  (rule "shift_paren_or" (formula "6") (term "0,0,0"))
                   (builtin "One Step Simplification" (formula "6"))
                  (rule "eqSymm" (formula "6") (term "1,1,0,0,0"))
                  (rule "castedGetAny" (formula "6") (term "0,0,1,0,0,0"))
                  (rule "castedGetAny" (formula "6") (term "0,0,0,0,0,0"))
                  (rule "castedGetAny" (formula "6") (term "0,1,1,0,0,0"))
                   (builtin "One Step Simplification" (formula "6"))
                  (rule "true_left" (formula "6"))
                  (rule "commute_and" (formula "2") (term "1,0,0,0"))
                  (rule "commute_and" (formula "1") (term "1,0,0,0"))
                  (rule "cnf_rightDist" (formula "5") (term "0,0,0"))
                  (rule "distr_forallAnd" (formula "5") (term "0,0"))
                  (rule "distr_forallAnd" (formula "5") (term "0"))
                  (rule "distr_forallAnd" (formula "5"))
                  (rule "andLeft" (formula "5"))
                  (rule "commute_or_2" (formula "5") (term "0,0,0"))
                   (builtin "One Step Simplification" (formula "5"))
                  (rule "eqSymm" (formula "5") (term "1,0,0,0,0"))
                  (rule "castedGetAny" (formula "5") (term "0,0,0,0,0,0"))
                  (rule "castedGetAny" (formula "5") (term "1,0,0,1,0,0,0"))
                  (rule "castedGetAny" (formula "5") (term "0,1,0,0,0,0"))
                   (builtin "One Step Simplification" (formula "5"))
                  (rule "true_left" (formula "5"))
                  (rule "shift_paren_or" (formula "4") (term "0,0,0,0,0"))
                   (builtin "One Step Simplification" (formula "4"))
                  (rule "shift_paren_or" (formula "5") (term "0,0,0"))
                   (builtin "One Step Simplification" (formula "5"))
                  (rule "eqSymm" (formula "5") (term "1,1,0,0,0"))
                  (rule "castedGetAny" (formula "5") (term "0,0,0,0,0,0"))
                  (rule "castedGetAny" (formula "5") (term "0,0,1,0,0,0"))
                  (rule "castedGetAny" (formula "5") (term "0,1,1,0,0,0"))
                   (builtin "One Step Simplification" (formula "5"))
                  (rule "true_left" (formula "5"))
                  (rule "shift_paren_or" (formula "2") (term "0,0,0,0,0"))
                   (builtin "One Step Simplification" (formula "2"))
                  (rule "shift_paren_or" (formula "3") (term "0,0,0,0,0"))
                   (builtin "One Step Simplification" (formula "3"))
                  (rule "commute_or_2" (formula "4") (term "0,0,0,0"))
                  (rule "shift_paren_or" (formula "1") (term "0,0,0,0,0"))
                   (builtin "One Step Simplification" (formula "1"))
                  (rule "commute_or_2" (formula "2") (term "0,0,0,0"))
                  (rule "cnf_rightDist" (formula "3") (term "0,0,0"))
                  (rule "distr_forallAnd" (formula "3") (term "0,0"))
                  (rule "distr_forallAnd" (formula "3") (term "0"))
                  (rule "distr_forallAnd" (formula "3"))
                  (rule "andLeft" (formula "3"))
                  (rule "shift_paren_or" (formula "4") (term "0,0,0"))
                   (builtin "One Step Simplification" (formula "4"))
                  (rule "eqSymm" (formula "4") (term "1,1,0,0,0"))
                  (rule "castedGetAny" (formula "4") (term "0,0,1,0,0,0"))
                  (rule "castedGetAny" (formula "4") (term "0,0,0,0,0,0"))
                  (rule "castedGetAny" (formula "4") (term "0,1,1,0,0,0"))
                   (builtin "One Step Simplification" (formula "4"))
                  (rule "true_left" (formula "4"))
                  (rule "cnf_rightDist" (formula "4") (term "0,0,0"))
                  (rule "distr_forallAnd" (formula "4") (term "0,0"))
                  (rule "distr_forallAnd" (formula "4") (term "0"))
                  (rule "distr_forallAnd" (formula "4"))
                  (rule "andLeft" (formula "4"))
                  (rule "shift_paren_or" (formula "5") (term "0,0,0"))
                   (builtin "One Step Simplification" (formula "5"))
                  (rule "eqSymm" (formula "5") (term "1,1,0,0,0"))
                  (rule "castedGetAny" (formula "5") (term "0,0,1,0,0,0"))
                  (rule "castedGetAny" (formula "5") (term "0,0,0,0,0,0"))
                  (rule "castedGetAny" (formula "5") (term "0,1,1,0,0,0"))
                   (builtin "One Step Simplification" (formula "5"))
                  (rule "true_left" (formula "5"))
                  (rule "cnf_rightDist" (formula "1") (term "0,0,0"))
                  (rule "distr_forallAnd" (formula "1") (term "0,0"))
                  (rule "distr_forallAnd" (formula "1") (term "0"))
                  (rule "distr_forallAnd" (formula "1"))
                  (rule "andLeft" (formula "1"))
                  (rule "cnf_rightDist" (formula "3") (term "0,0,0"))
                  (rule "distr_forallAnd" (formula "3") (term "0,0"))
                  (rule "distr_forallAnd" (formula "3") (term "0"))
                  (rule "distr_forallAnd" (formula "3"))
                  (rule "andLeft" (formula "3"))
                  (rule "shift_paren_or" (formula "2") (term "0,0,0"))
                   (builtin "One Step Simplification" (formula "2"))
                  (rule "eqSymm" (formula "2") (term "1,1,0,0,0"))
                  (rule "castedGetAny" (formula "2") (term "0,0,1,0,0,0"))
                  (rule "castedGetAny" (formula "2") (term "0,0,0,0,0,0"))
                  (rule "castedGetAny" (formula "2") (term "0,1,1,0,0,0"))
                   (builtin "One Step Simplification" (formula "2"))
                  (rule "true_left" (formula "2"))
                  (rule "cnf_rightDist" (formula "3") (term "0,0,0"))
                  (rule "distr_forallAnd" (formula "3") (term "0,0"))
                  (rule "distr_forallAnd" (formula "3") (term "0"))
                  (rule "distr_forallAnd" (formula "3"))
                  (rule "andLeft" (formula "3"))
                  (rule "cnf_rightDist" (formula "4") (term "0,0,0"))
                  (rule "distr_forallAnd" (formula "4") (term "0,0"))
                  (rule "distr_forallAnd" (formula "4") (term "0"))
                  (rule "distr_forallAnd" (formula "4"))
                  (rule "andLeft" (formula "4"))
                  (rule "commute_or_2" (formula "4") (term "0,0,0"))
                   (builtin "One Step Simplification" (formula "4"))
                  (rule "eqSymm" (formula "4") (term "1,0,0,0,0"))
                  (rule "castedGetAny" (formula "4") (term "1,0,0,1,0,0,0"))
                  (rule "castedGetAny" (formula "4") (term "0,0,0,0,0,0"))
                  (rule "castedGetAny" (formula "4") (term "0,1,0,0,0,0"))
                   (builtin "One Step Simplification" (formula "4"))
                  (rule "true_left" (formula "4"))
                  (rule "shift_paren_or" (formula "3") (term "0,0,0"))
                   (builtin "One Step Simplification" (formula "3"))
                  (rule "eqSymm" (formula "3") (term "1,1,0,0,0"))
                  (rule "castedGetAny" (formula "3") (term "1,0,0,0,0,0,0"))
                  (rule "castedGetAny" (formula "3") (term "0,0,1,0,0,0"))
                  (rule "castedGetAny" (formula "3") (term "0,1,1,0,0,0"))
                   (builtin "One Step Simplification" (formula "3"))
                  (rule "true_left" (formula "3"))
                  (rule "shift_paren_or" (formula "3") (term "0,0,0"))
                   (builtin "One Step Simplification" (formula "3"))
                  (rule "eqSymm" (formula "3") (term "1,1,0,0,0"))
                  (rule "castedGetAny" (formula "3") (term "0,0,1,0,0,0"))
                  (rule "castedGetAny" (formula "3") (term "1,0,0,0,0,0,0"))
                  (rule "castedGetAny" (formula "3") (term "0,1,1,0,0,0"))
                   (builtin "One Step Simplification" (formula "3"))
                  (rule "true_left" (formula "3"))
                  (rule "cnf_rightDist" (formula "1") (term "0,0,0"))
                  (rule "distr_forallAnd" (formula "1") (term "0,0"))
                  (rule "distr_forallAnd" (formula "1") (term "0"))
                  (rule "distr_forallAnd" (formula "1"))
                  (rule "andLeft" (formula "1"))
                  (rule "cnf_rightDist" (formula "2") (term "0,0,0"))
                  (rule "distr_forallAnd" (formula "2") (term "0,0"))
                  (rule "distr_forallAnd" (formula "2") (term "0"))
                  (rule "distr_forallAnd" (formula "2"))
                  (rule "andLeft" (formula "2"))
                  (rule "commute_or_2" (formula "2") (term "0,0,0"))
                   (builtin "One Step Simplification" (formula "2"))
                  (rule "eqSymm" (formula "2") (term "1,0,0,0,0"))
                  (rule "castedGetAny" (formula "2") (term "1,0,0,1,0,0,0"))
                  (rule "castedGetAny" (formula "2") (term "0,0,0,0,0,0"))
                  (rule "castedGetAny" (formula "2") (term "0,1,0,0,0,0"))
                   (builtin "One Step Simplification" (formula "2"))
                  (rule "true_left" (formula "2"))
                  (rule "ifthenelse_split_for" (formula "29") (term "1,1"))
                  (branch "result_228_A_1.value@heapAtPre_A«anonHeapFunction» ≥ 0 TRUE"
                     (rule "cnf_rightDist" (formula "30"))
                     (rule "andLeft" (formula "30"))
                     (rule "commute_or" (formula "31"))
                     (rule "cnf_rightDist" (formula "30"))
                     (rule "andLeft" (formula "30"))
                     (rule "commute_or" (formula "31"))
                     (rule "shift_paren_or" (formula "1") (term "0,0,0"))
                      (builtin "One Step Simplification" (formula "1"))
                     (rule "eqSymm" (formula "1") (term "1,1,0,0,0"))
                     (rule "castedGetAny" (formula "1") (term "1,0,0,0,0,0,0"))
                     (rule "castedGetAny" (formula "1") (term "0,0,1,0,0,0"))
                     (rule "castedGetAny" (formula "1") (term "0,1,1,0,0,0"))
                      (builtin "One Step Simplification" (formula "1"))
                     (rule "true_left" (formula "1"))
                     (rule "shift_paren_or" (formula "1") (term "0,0,0"))
                      (builtin "One Step Simplification" (formula "1"))
                     (rule "eqSymm" (formula "1") (term "1,1,0,0,0"))
                     (rule "castedGetAny" (formula "1") (term "1,0,0,0,0,0,0"))
                     (rule "castedGetAny" (formula "1") (term "0,0,1,0,0,0"))
                     (rule "castedGetAny" (formula "1") (term "0,1,1,0,0,0"))
                      (builtin "One Step Simplification" (formula "1"))
                     (rule "true_left" (formula "1"))
                     (rule "cut_direct" (formula "28") (term "0"))
                     (branch "CUT: result_228_A_1.value@heapAtPre_A«anonHeapFunction» = 0 TRUE"
                         (builtin "One Step Simplification" (formula "29"))
                        (rule "true_left" (formula "29"))
                        (rule "replace_known_left" (formula "30") (term "0") (ifseqformula "28"))
                         (builtin "One Step Simplification" (formula "30"))
                        (rule "true_left" (formula "30"))
                        (rule "replace_known_left" (formula "29") (term "0") (ifseqformula "28"))
                         (builtin "One Step Simplification" (formula "29"))
                        (rule "true_left" (formula "29"))
                        (rule "applyEq" (formula "27") (term "0") (ifseqformula "28"))
                        (rule "qeq_literals" (formula "27"))
                        (rule "true_left" (formula "27"))
                        (rule "applyEq" (formula "29") (term "1,0") (ifseqformula "27"))
                        (rule "times_zero_1" (formula "29") (term "0"))
                        (rule "polySimp_homoEq" (formula "29"))
                        (rule "mul_literals" (formula "29") (term "1,0"))
                        (rule "add_zero_right" (formula "29") (term "0"))
                        (rule "applyEq" (formula "28") (term "1,0") (ifseqformula "27"))
                        (rule "eqSymm" (formula "28"))
                        (rule "polySimp_homoEq" (formula "28"))
                        (rule "polySimp_mulLiterals" (formula "28") (term "1,0"))
                        (rule "polySimp_elimOne" (formula "28") (term "1,0"))
                        (rule "applyEq" (formula "56") (term "1") (ifseqformula "27"))
                        (rule "applyEq" (formula "23") (term "1") (ifseqformula "27"))
                        (rule "applyEq" (formula "7") (term "1") (ifseqformula "27"))
                        (rule "applyEq" (formula "28") (term "1,1,0") (ifseqformula "27"))
                        (rule "polySimp_addComm0" (formula "28") (term "0"))
                        (rule "polySimp_sepNegMonomial" (formula "29"))
                        (rule "polySimp_mulLiterals" (formula "29") (term "0"))
                        (rule "polySimp_elimOne" (formula "29") (term "0"))
                        (rule "applyEq" (formula "4") (term "0") (ifseqformula "29"))
                        (rule "applyEq" (formula "28") (term "0,1,0") (ifseqformula "29"))
                        (rule "polySimp_addComm0" (formula "28") (term "0"))
                        (rule "applyEq" (formula "28") (term "0,0,1,0") (ifseqformula "29"))
                        (rule "polySimp_addComm0" (formula "28") (term "0"))
                        (rule "applyEq" (formula "6") (term "1") (ifseqformula "29"))
                        (rule "polySimp_sepPosMonomial" (formula "28"))
                        (rule "div_axiom" (formula "28") (term "0,1") (inst "quotient=quotient_1"))
                         (builtin "One Step Simplification" (formula "28"))
                        (rule "true_left" (formula "28"))
                        (rule "jdiv_axiom" (formula "28") (term "0"))
                        (rule "eqSymm" (formula "28"))
                        (rule "applyEq" (formula "28") (term "1") (ifseqformula "29"))
                         (builtin "One Step Simplification" (formula "28"))
                        (rule "eqSymm" (formula "28") (term "1"))
                        (rule "polySimp_homoEq" (formula "28") (term "1"))
                        (rule "polySimp_mulLiterals" (formula "28") (term "1,0,1"))
                        (rule "polySimp_elimOne" (formula "28") (term "1,0,1"))
                        (rule "polySimp_sepPosMonomial" (formula "28") (term "1"))
                        (rule "inEqSimp_contradInEq0" (formula "28") (term "0,0") (ifseqformula "4"))
                        (rule "qeq_literals" (formula "28") (term "0,0,0"))
                         (builtin "One Step Simplification" (formula "28"))
                        (rule "true_left" (formula "28"))
                        (rule "Use_information_flow_contract_for_compareTo_325434207" (formula "19") (ifseqformula "19"))
                         (builtin "One Step Simplification" (formula "19") (ifInst ""  (formula "90")) (ifInst ""  (formula "90")))
                        (rule "true_left" (formula "19"))
                        (rule "Use_information_flow_contract_for_getOrder_757678341" (formula "58") (ifseqformula "25"))
                        (rule "applyEq" (formula "58") (term "0,0,1") (ifseqformula "56"))
                        (rule "eqSymm" (formula "58") (term "0,1"))
                        (rule "replace_known_left" (formula "58") (term "0,1") (ifseqformula "23"))
                         (builtin "One Step Simplification" (formula "58"))
                        (rule "applyEq" (formula "58") (term "0,1") (ifseqformula "7"))
                        (rule "eqSymm" (formula "58") (term "1"))
                        (rule "replace_known_left" (formula "58") (term "1") (ifseqformula "27"))
                         (builtin "One Step Simplification" (formula "58"))
                        (rule "true_left" (formula "58"))
                        (rule "Use_information_flow_contract_for_getOrder_757678341" (formula "58") (ifseqformula "58"))
                         (builtin "One Step Simplification" (formula "58"))
                        (rule "true_left" (formula "58"))
                        (rule "Use_information_flow_contract_for_getOrder_757678341" (formula "25") (ifseqformula "25"))
                         (builtin "One Step Simplification" (formula "25"))
                        (rule "true_left" (formula "25"))
                        (rule "Use_information_flow_contract_for_compareTo_325434207" (formula "19") (ifseqformula "52"))
                        (rule "eqSymm" (formula "19") (term "1,0,1"))
                        (rule "eqSymm" (formula "19") (term "0,0,1"))
                        (rule "eqSymm" (formula "19") (term "1,1"))
                        (rule "replace_known_right" (formula "19") (term "0,1,1,0") (ifseqformula "91"))
                         (builtin "One Step Simplification" (formula "19") (ifInst ""  (formula "90")))
                        (rule "applyEq" (formula "19") (term "0,1,0,1") (ifseqformula "54"))
                        (rule "eqSymm" (formula "19") (term "1,0,1"))
                        (rule "replace_known_left" (formula "19") (term "1,0,1") (ifseqformula "21"))
                         (builtin "One Step Simplification" (formula "19"))
                        (rule "applyEq" (formula "19") (term "0,0,1") (ifseqformula "6"))
                        (rule "eqSymm" (formula "19") (term "0,1"))
                        (rule "replace_known_left" (formula "19") (term "0,1") (ifseqformula "30"))
                         (builtin "One Step Simplification" (formula "19"))
                        (rule "Class_invariant_axiom_for_java_math_BigInteger" (formula "19") (term "1,0"))
                        (rule "replace_known_right" (formula "19") (term "0,0,1,0") (ifseqformula "91"))
                         (builtin "One Step Simplification" (formula "19") (ifInst ""  (formula "54")))
                        (rule "Class_invariant_axiom_for_java_math_BigInteger" (formula "19") (term "0"))
                        (rule "replace_known_right" (formula "19") (term "0,0,0") (ifseqformula "90"))
                         (builtin "One Step Simplification" (formula "19") (ifInst ""  (formula "21")))
                        (rule "applyEq" (formula "52") (term "0") (ifseqformula "19"))
                        (rule "applyEq" (formula "52") (term "4") (ifseqformula "19"))
                        (rule "applyEq" (formula "45") (term "0") (ifseqformula "19"))
                        (rule "Use_information_flow_contract_for_multiply_1272441881_0" (formula "69") (ifseqformula "36"))
                        (rule "replaceKnownSelect_taclet21_12" (formula "69") (term "0,1,1"))
                        (rule "replaceKnownSelect_taclet21_11" (formula "69") (term "1,1,1"))
                        (rule "replaceKnownAuxiliaryConstant_taclet001021_19" (formula "69") (term "0,1,1"))
                        (rule "replaceKnownAuxiliaryConstant_taclet01021_17" (formula "69") (term "1,1,1"))
                        (rule "replaceKnownSelect_taclet21_8" (formula "69") (term "1,1,0,1"))
                        (rule "replaceKnownSelect_taclet21_9" (formula "69") (term "0,1,0,1"))
                        (rule "replaceKnownAuxiliaryConstant_taclet21_10" (formula "69") (term "1,1,0,1"))
                         (builtin "One Step Simplification" (formula "69") (ifInst ""  (formula "80")) (ifInst ""  (formula "79")) (ifInst ""  (formula "97")))
                        (rule "pullOutSelect" (formula "69") (term "1,0,1") (inst "selectSK=org_bouncycastle_math_ec_ECPoint_value_4"))
                        (rule "simplifySelectOfAnonEQ" (formula "69") (ifseqformula "27"))
                         (builtin "One Step Simplification" (formula "69") (ifInst ""  (formula "94")) (ifInst ""  (formula "14")))
                        (rule "applyEqReverse" (formula "70") (term "1,0,1") (ifseqformula "69"))
                        (rule "hideAuxiliaryEq" (formula "69"))
                        (rule "pullOutSelect" (formula "69") (term "0,0,1") (inst "selectSK=org_bouncycastle_math_ec_ECPoint_value_5"))
                        (rule "simplifySelectOfAnonEQ" (formula "69") (ifseqformula "59"))
                         (builtin "One Step Simplification" (formula "69") (ifInst ""  (formula "95")) (ifInst ""  (formula "47")))
                        (rule "applyEqReverse" (formula "70") (term "0,0,1") (ifseqformula "69"))
                        (rule "hideAuxiliaryEq" (formula "69"))
                        (rule "replace_known_left" (formula "69") (term "0,1") (ifseqformula "5"))
                         (builtin "One Step Simplification" (formula "69"))
                        (rule "notLeft" (formula "69"))
                        (rule "Class_invariant_axiom_for_org_bouncycastle_math_ec_ECPoint" (formula "75") (term "0"))
                         (builtin "One Step Simplification" (formula "75"))
                        (rule "Class_invariant_axiom_for_org_bouncycastle_math_ec_ECPoint" (formula "75"))
                        (rule "closeTrue" (formula "75"))
                     )
                     (branch "CUT: result_228_A_1.value@heapAtPre_A«anonHeapFunction» = 0 FALSE"
                         (builtin "One Step Simplification" (formula "28"))
                        (rule "replace_known_right" (formula "29") (term "0") (ifseqformula "79"))
                         (builtin "One Step Simplification" (formula "29"))
                        (rule "replace_known_right" (formula "30") (term "0") (ifseqformula "79"))
                         (builtin "One Step Simplification" (formula "30"))
                        (rule "applyEq" (formula "32") (term "0,0") (ifseqformula "29"))
                        (rule "polySimp_mulComm0" (formula "32") (term "0"))
                        (rule "applyEq" (formula "28") (term "0") (ifseqformula "32"))
                        (rule "inEqSimp_homoInEq0" (formula "28"))
                        (rule "polySimp_mulComm0" (formula "28") (term "1,0"))
                        (rule "polySimp_rightDist" (formula "28") (term "1,0"))
                        (rule "polySimp_mulLiterals" (formula "28") (term "1,1,0"))
                        (rule "polySimp_elimOne" (formula "28") (term "1,1,0"))
                        (rule "polySimp_mulComm0" (formula "28") (term "0,1,0"))
                        (rule "polySimp_addAssoc" (formula "28") (term "0"))
                        (rule "polySimp_addComm0" (formula "28") (term "0,0"))
                        (rule "polySimp_pullOutFactor2b" (formula "28") (term "0"))
                        (rule "add_literals" (formula "28") (term "1,1,0"))
                        (rule "times_zero_1" (formula "28") (term "1,0"))
                        (rule "add_zero_right" (formula "28") (term "0"))
                        (rule "applyEq" (formula "30") (term "0") (ifseqformula "32"))
                        (rule "inEqSimp_homoInEq1" (formula "30"))
                        (rule "polySimp_mulComm0" (formula "30") (term "1,0"))
                        (rule "polySimp_rightDist" (formula "30") (term "1,0"))
                        (rule "polySimp_mulLiterals" (formula "30") (term "1,1,0"))
                        (rule "polySimp_elimOne" (formula "30") (term "1,1,0"))
                        (rule "polySimp_mulComm0" (formula "30") (term "0,1,0"))
                        (rule "polySimp_addComm1" (formula "30") (term "0"))
                        (rule "polySimp_addAssoc" (formula "30") (term "0,0"))
                        (rule "polySimp_addComm1" (formula "30") (term "0,0,0"))
                        (rule "polySimp_pullOutFactor2b" (formula "30") (term "0,0"))
                        (rule "add_literals" (formula "30") (term "1,1,0,0"))
                        (rule "times_zero_1" (formula "30") (term "1,0,0"))
                        (rule "add_zero_right" (formula "30") (term "0,0"))
                        (rule "applyEq" (formula "31") (term "0,1") (ifseqformula "29"))
                        (rule "inEqSimp_invertInEq1" (formula "28"))
                        (rule "mul_literals" (formula "28") (term "1"))
                        (rule "polySimp_mulLiterals" (formula "28") (term "0"))
                        (rule "polySimp_elimOne" (formula "28") (term "0"))
                        (rule "inEqSimp_sepNegMonomial0" (formula "30"))
                        (rule "polySimp_mulLiterals" (formula "30") (term "0"))
                        (rule "polySimp_elimOne" (formula "30") (term "0"))
                        (rule "inEqSimp_strengthen1" (formula "27") (ifseqformula "79"))
                        (rule "add_literals" (formula "27") (term "1"))
                        (rule "inEqSimp_contradEq7" (formula "79") (ifseqformula "27"))
                        (rule "mul_literals" (formula "79") (term "1,0,0"))
                        (rule "add_literals" (formula "79") (term "0,0"))
                        (rule "leq_literals" (formula "79") (term "0"))
                         (builtin "One Step Simplification" (formula "79"))
                        (rule "false_right" (formula "79"))
                        (rule "Use_information_flow_contract_for_compareTo_325434207" (formula "19") (ifseqformula "19"))
                         (builtin "One Step Simplification" (formula "19") (ifInst ""  (formula "93")) (ifInst ""  (formula "93")))
                        (rule "true_left" (formula "19"))
                        (rule "Use_information_flow_contract_for_getOrder_757678341" (formula "61") (ifseqformula "25"))
                        (rule "replace_known_left" (formula "61") (term "1,1") (ifseqformula "7"))
                         (builtin "One Step Simplification" (formula "61"))
                        (rule "true_left" (formula "61"))
                        (rule "Use_information_flow_contract_for_getOrder_757678341" (formula "61") (ifseqformula "61"))
                         (builtin "One Step Simplification" (formula "61"))
                        (rule "true_left" (formula "61"))
                        (rule "Use_information_flow_contract_for_compareTo_325434207" (formula "55") (ifseqformula "19"))
                        (rule "replace_known_right" (formula "55") (term "0,1,1,0") (ifseqformula "93"))
                         (builtin "One Step Simplification" (formula "55") (ifInst ""  (formula "94")) (ifInst ""  (formula "6")))
                        (rule "applyEqRigid" (formula "55") (term "0,0,1") (ifseqformula "57"))
                        (rule "eqSymm" (formula "55") (term "0,1"))
                        (rule "replace_known_left" (formula "55") (term "0,1") (ifseqformula "20"))
                         (builtin "One Step Simplification" (formula "55"))
                        (rule "Class_invariant_axiom_for_java_math_BigInteger" (formula "55") (term "1,0"))
                        (rule "replace_known_left" (formula "55") (term "1,1,0") (ifseqformula "20"))
                         (builtin "One Step Simplification" (formula "55") (ifInst ""  (formula "93")))
                        (rule "Class_invariant_axiom_for_java_math_BigInteger" (formula "55") (term "0"))
                        (rule "replace_known_right" (formula "55") (term "0,0,0") (ifseqformula "94"))
                         (builtin "One Step Simplification" (formula "55") (ifInst ""  (formula "57")))
                        (rule "applyEq" (formula "56") (term "4") (ifseqformula "55"))
                        (rule "applyEq" (formula "47") (term "0") (ifseqformula "55"))
                        (rule "applyEq" (formula "53") (term "0") (ifseqformula "54"))
                        (rule "Use_information_flow_contract_for_getOrder_757678341" (formula "25") (ifseqformula "25"))
                         (builtin "One Step Simplification" (formula "25"))
                        (rule "true_left" (formula "25"))
                        (rule "Use_information_flow_contract_for_getOrder_757678341" (formula "25") (ifseqformula "60"))
                        (rule "eqSymm" (formula "25") (term "0,1"))
                        (rule "eqSymm" (formula "25") (term "1,1"))
                        (rule "replace_known_left" (formula "25") (term "1,1") (ifseqformula "7"))
                         (builtin "One Step Simplification" (formula "25"))
                        (rule "true_left" (formula "25"))
                        (rule "Use_information_flow_contract_for_multiply_1272441881" (formula "72") (ifseqformula "38"))
                        (rule "replaceKnownSelect_taclet21_11" (formula "72") (term "1,1,1"))
                        (rule "replaceKnownSelect_taclet21_12" (formula "72") (term "0,1,1"))
                        (rule "replaceKnownAuxiliaryConstant_taclet01021_17" (formula "72") (term "1,1,1"))
                        (rule "replaceKnownAuxiliaryConstant_taclet001021_19" (formula "72") (term "0,1,1"))
                        (rule "replaceKnownSelect_taclet21_9" (formula "72") (term "0,1,0,1"))
                        (rule "replaceKnownSelect_taclet21_8" (formula "72") (term "1,1,0,1"))
                        (rule "replaceKnownAuxiliaryConstant_taclet021_15" (formula "72") (term "0,1,0,1"))
                        (rule "replaceKnownAuxiliaryConstant_taclet21_10" (formula "72") (term "1,1,0,1"))
                        (rule "replaceKnownAuxiliaryConstant_taclet021_15" (formula "72") (term "1,1,0,1"))
                         (builtin "One Step Simplification" (formula "72") (ifInst ""  (formula "83")) (ifInst ""  (formula "82")) (ifInst ""  (formula "100")))
                        (rule "pullOutSelect" (formula "72") (term "0,0,1") (inst "selectSK=org_bouncycastle_math_ec_ECPoint_value_4"))
                        (rule "simplifySelectOfAnonEQ" (formula "72") (ifseqformula "62"))
                         (builtin "One Step Simplification" (formula "72") (ifInst ""  (formula "98")) (ifInst ""  (formula "49")))
                        (rule "applyEqReverse" (formula "73") (term "0,0,1") (ifseqformula "72"))
                        (rule "hideAuxiliaryEq" (formula "72"))
                        (rule "eqSymm" (formula "72") (term "0,1"))
                        (rule "applyEq" (formula "72") (term "1,0,1") (ifseqformula "5"))
                        (rule "pullOutSelect" (formula "72") (term "0,0,1") (inst "selectSK=org_bouncycastle_math_ec_ECPoint_value_5"))
                        (rule "simplifySelectOfAnonEQ" (formula "72") (ifseqformula "26"))
                         (builtin "One Step Simplification" (formula "72") (ifInst ""  (formula "97")) (ifInst ""  (formula "14")))
                        (rule "applyEqReverse" (formula "73") (term "0,0,1") (ifseqformula "72"))
                         (builtin "One Step Simplification" (formula "73"))
                        (rule "notLeft" (formula "73"))
                        (rule "hideAuxiliaryEq" (formula "72"))
                        (rule "Class_invariant_axiom_for_org_bouncycastle_math_ec_ECPoint" (formula "78") (term "1"))
                         (builtin "One Step Simplification" (formula "78"))
                        (rule "Class_invariant_axiom_for_org_bouncycastle_math_ec_ECPoint" (formula "78"))
                        (rule "closeTrue" (formula "78"))
                     )
                  )
                  (branch "result_228_A_1.value@heapAtPre_A«anonHeapFunction» ≥ 0 FALSE"
                     (rule "inEqSimp_geqRight" (formula "78"))
                     (rule "mul_literals" (formula "1") (term "1,0,0"))
                     (rule "add_zero_right" (formula "1") (term "0,0"))
                     (rule "inEqSimp_sepPosMonomial0" (formula "1"))
                     (rule "mul_literals" (formula "1") (term "1"))
                     (rule "inEqSimp_contradEq3" (formula "30") (term "0") (ifseqformula "1"))
                     (rule "mul_literals" (formula "30") (term "1,0,0,0"))
                     (rule "add_literals" (formula "30") (term "0,0,0"))
                     (rule "qeq_literals" (formula "30") (term "0,0"))
                      (builtin "One Step Simplification" (formula "30"))
                     (rule "andLeft" (formula "30"))
                     (rule "andLeft" (formula "30"))
                     (rule "applyEq" (formula "34") (term "0,0") (ifseqformula "31"))
                     (rule "polySimp_mulComm0" (formula "34") (term "0"))
                     (rule "applyEq" (formula "30") (term "0") (ifseqformula "34"))
                     (rule "inEqSimp_homoInEq0" (formula "30"))
                     (rule "polySimp_mulComm0" (formula "30") (term "1,0"))
                     (rule "polySimp_rightDist" (formula "30") (term "1,0"))
                     (rule "polySimp_mulLiterals" (formula "30") (term "1,1,0"))
                     (rule "polySimp_elimOne" (formula "30") (term "1,1,0"))
                     (rule "polySimp_mulComm0" (formula "30") (term "0,1,0"))
                     (rule "polySimp_addAssoc" (formula "30") (term "0"))
                     (rule "polySimp_addComm0" (formula "30") (term "0,0"))
                     (rule "polySimp_pullOutFactor2b" (formula "30") (term "0"))
                     (rule "add_literals" (formula "30") (term "1,1,0"))
                     (rule "times_zero_1" (formula "30") (term "1,0"))
                     (rule "add_zero_right" (formula "30") (term "0"))
                     (rule "applyEq" (formula "32") (term "0") (ifseqformula "34"))
                     (rule "inEqSimp_homoInEq1" (formula "32"))
                     (rule "polySimp_mulComm0" (formula "32") (term "1,0"))
                     (rule "polySimp_rightDist" (formula "32") (term "1,0"))
                     (rule "polySimp_mulLiterals" (formula "32") (term "1,1,0"))
                     (rule "polySimp_elimOne" (formula "32") (term "1,1,0"))
                     (rule "polySimp_mulComm0" (formula "32") (term "0,1,0"))
                     (rule "polySimp_addComm1" (formula "32") (term "0"))
                     (rule "polySimp_addAssoc" (formula "32") (term "0,0"))
                     (rule "polySimp_addComm1" (formula "32") (term "0,0,0"))
                     (rule "polySimp_pullOutFactor2b" (formula "32") (term "0,0"))
                     (rule "add_literals" (formula "32") (term "1,1,0,0"))
                     (rule "times_zero_1" (formula "32") (term "1,0,0"))
                     (rule "add_zero_right" (formula "32") (term "0,0"))
                     (rule "applyEq" (formula "33") (term "0,1") (ifseqformula "31"))
                     (rule "inEqSimp_invertInEq1" (formula "30"))
                     (rule "polySimp_mulLiterals" (formula "30") (term "0"))
                     (rule "mul_literals" (formula "30") (term "1"))
                     (rule "polySimp_elimOne" (formula "30") (term "0"))
                     (rule "inEqSimp_sepPosMonomial0" (formula "32"))
                     (rule "polySimp_mulComm0" (formula "32") (term "1"))
                     (rule "polySimp_rightDist" (formula "32") (term "1"))
                     (rule "polySimp_mulLiterals" (formula "32") (term "1,1"))
                     (rule "mul_literals" (formula "32") (term "0,1"))
                     (rule "polySimp_elimOne" (formula "32") (term "1,1"))
                     (rule "shift_paren_or" (formula "2") (term "0,0,0"))
                      (builtin "One Step Simplification" (formula "2"))
                     (rule "eqSymm" (formula "2") (term "1,1,0,0,0"))
                     (rule "castedGetAny" (formula "2") (term "0,0,1,0,0,0"))
                     (rule "castedGetAny" (formula "2") (term "1,0,0,0,0,0,0"))
                     (rule "castedGetAny" (formula "2") (term "0,1,1,0,0,0"))
                      (builtin "One Step Simplification" (formula "2"))
                     (rule "true_left" (formula "2"))
                     (rule "shift_paren_or" (formula "2") (term "0,0,0"))
                      (builtin "One Step Simplification" (formula "2"))
                     (rule "eqSymm" (formula "2") (term "1,1,0,0,0"))
                     (rule "castedGetAny" (formula "2") (term "1,0,0,0,0,0,0"))
                     (rule "castedGetAny" (formula "2") (term "0,0,1,0,0,0"))
                     (rule "castedGetAny" (formula "2") (term "0,1,1,0,0,0"))
                      (builtin "One Step Simplification" (formula "2"))
                     (rule "true_left" (formula "2"))
                     (rule "Use_information_flow_contract_for_compareTo_325434207" (formula "20") (ifseqformula "20"))
                      (builtin "One Step Simplification" (formula "20") (ifInst ""  (formula "93")) (ifInst ""  (formula "93")))
                     (rule "true_left" (formula "20"))
                     (rule "Use_information_flow_contract_for_getOrder_757678341" (formula "61") (ifseqformula "26"))
                     (rule "replace_known_left" (formula "61") (term "1,1") (ifseqformula "8"))
                      (builtin "One Step Simplification" (formula "61"))
                     (rule "true_left" (formula "61"))
                     (rule "Use_information_flow_contract_for_multiply_1272441881" (formula "73") (ifseqformula "38"))
                     (rule "replaceKnownSelect_taclet21_11" (formula "73") (term "1,1,1"))
                     (rule "replaceKnownSelect_taclet21_12" (formula "73") (term "0,1,1"))
                     (rule "replaceKnownAuxiliaryConstant_taclet01021_17" (formula "73") (term "1,1,1"))
                     (rule "replaceKnownAuxiliaryConstant_taclet001021_19" (formula "73") (term "0,1,1"))
                     (rule "replaceKnownSelect_taclet21_8" (formula "73") (term "1,1,0,1"))
                     (rule "replaceKnownSelect_taclet21_9" (formula "73") (term "0,1,0,1"))
                     (rule "replaceKnownAuxiliaryConstant_taclet21_10" (formula "73") (term "1,1,0,1"))
                      (builtin "One Step Simplification" (formula "73") (ifInst ""  (formula "84")) (ifInst ""  (formula "83")) (ifInst ""  (formula "101")))
                     (rule "pullOutSelect" (formula "73") (term "1,0,1") (inst "selectSK=org_bouncycastle_math_ec_ECPoint_value_4"))
                     (rule "simplifySelectOfAnonEQ" (formula "73") (ifseqformula "27"))
                      (builtin "One Step Simplification" (formula "73") (ifInst ""  (formula "98")) (ifInst ""  (formula "15")))
                     (rule "applyEqReverse" (formula "74") (term "1,0,1") (ifseqformula "73"))
                     (rule "hideAuxiliaryEq" (formula "73"))
                     (rule "pullOutSelect" (formula "73") (term "0,0,1") (inst "selectSK=org_bouncycastle_math_ec_ECPoint_value_5"))
                     (rule "simplifySelectOfAnonEQ" (formula "73") (ifseqformula "63"))
                      (builtin "One Step Simplification" (formula "73") (ifInst ""  (formula "99")) (ifInst ""  (formula "50")))
                     (rule "applyEqReverse" (formula "74") (term "0,0,1") (ifseqformula "73"))
                     (rule "hideAuxiliaryEq" (formula "73"))
                     (rule "replace_known_left" (formula "73") (term "0,1") (ifseqformula "6"))
                      (builtin "One Step Simplification" (formula "73"))
                     (rule "notLeft" (formula "73"))
                     (rule "Class_invariant_axiom_for_org_bouncycastle_math_ec_ECPoint" (formula "79") (term "0"))
                      (builtin "One Step Simplification" (formula "79"))
                     (rule "Class_invariant_axiom_for_org_bouncycastle_math_ec_ECPoint" (formula "79"))
                     (rule "closeTrue" (formula "79"))
                  )
               )
               (branch " resultAtPost_226_B.<created>@heapAtPre_B«anonHeapFunction» = TRUE FALSE"
                  (rule "applyEqReverse" (formula "2") (term "1,0") (ifseqformula "1"))
                  (rule "hideAuxiliaryEq" (formula "1"))
                  (rule "replace_known_right" (formula "1") (term "1,0,0") (ifseqformula "75"))
                   (builtin "One Step Simplification" (formula "1"))
                  (rule "replace_known_right" (formula "68") (term "1") (ifseqformula "75"))
                   (builtin "One Step Simplification" (formula "68"))
                  (rule "Class_axiom_0_in_de_polyas_core3_open_cred_CredTool" (inst "seq=seq") (inst "i=i") (inst "str=str") (inst "seq_0=seq_0") (inst "i_0=i_0") (inst "sv_heap=heapAtPre_B<<anonHeapFunction>>"))
                  (rule "andLeft" (formula "1"))
                  (rule "castedGetAny" (formula "1") (term "0,0,1,0,0"))
                  (rule "castedGetAny" (formula "2") (term "0,1,1,0,0,0"))
                  (rule "castedGetAny" (formula "1") (term "0,0,0,0,0"))
                  (rule "nnf_imp2or" (formula "1") (term "0,0"))
                   (builtin "One Step Simplification" (formula "1"))
                  (rule "nnf_imp2or" (formula "2") (term "0,0,0"))
                  (rule "nnf_imp2or" (formula "2") (term "1,0,0,0"))
                  (rule "nnf_notAnd" (formula "2") (term "0,0,0,0"))
                   (builtin "One Step Simplification" (formula "2"))
                  (rule "nnf_notOr" (formula "2") (term "0,0,0,0,0"))
                  (rule "nnf_notAnd" (formula "2") (term "0,1,0,0,0"))
                   (builtin "One Step Simplification" (formula "2"))
                  (rule "commute_or" (formula "2") (term "0,0,0,0"))
                  (rule "commute_or_2" (formula "2") (term "0,0,0"))
                  (rule "shift_paren_or" (formula "2") (term "0,0,0,0"))
                  (rule "commute_and" (formula "2") (term "1,0,0,0"))
                  (rule "shift_paren_or" (formula "2") (term "0,0,0,0,0"))
                  (rule "commute_or_2" (formula "2") (term "0,0,0,0,0"))
                   (builtin "One Step Simplification" (formula "2"))
                  (rule "commute_or_2" (formula "2") (term "0,0,0,0"))
                  (rule "cnf_rightDist" (formula "2") (term "0,0,0"))
                  (rule "distr_forallAnd" (formula "2") (term "0,0"))
                  (rule "distr_forallAnd" (formula "2") (term "0"))
                  (rule "distr_forallAnd" (formula "2"))
                  (rule "andLeft" (formula "2"))
                  (rule "commute_or_2" (formula "2") (term "0,0,0"))
                   (builtin "One Step Simplification" (formula "2"))
                  (rule "eqSymm" (formula "2") (term "1,0,0,0,0"))
                  (rule "castedGetAny" (formula "2") (term "0,0,0,0,0,0"))
                  (rule "castedGetAny" (formula "2") (term "1,0,0,1,0,0,0"))
                  (rule "castedGetAny" (formula "2") (term "0,1,0,0,0,0"))
                   (builtin "One Step Simplification" (formula "2"))
                  (rule "true_left" (formula "2"))
                  (rule "shift_paren_or" (formula "2") (term "0,0,0"))
                   (builtin "One Step Simplification" (formula "2"))
                  (rule "eqSymm" (formula "2") (term "1,1,0,0,0"))
                  (rule "castedGetAny" (formula "2") (term "0,0,0,0,0,0"))
                  (rule "castedGetAny" (formula "2") (term "0,0,1,0,0,0"))
                  (rule "castedGetAny" (formula "2") (term "0,1,1,0,0,0"))
                   (builtin "One Step Simplification" (formula "2"))
                  (rule "true_left" (formula "2"))
                  (rule "Class_axiom_0_in_de_polyas_core3_open_cred_CredTool" (inst "seq=seq") (inst "i=i") (inst "str=str") (inst "seq_0=seq_0") (inst "i_0=i_0") (inst "sv_heap=anon_heap_mod<<anonHeapFunction>>"))
                  (rule "andLeft" (formula "1"))
                  (rule "castedGetAny" (formula "2") (term "0,1,1,0,0,0"))
                  (rule "castedGetAny" (formula "1") (term "0,0,0,0,0"))
                  (rule "castedGetAny" (formula "1") (term "0,0,1,0,0"))
                  (rule "nnf_imp2or" (formula "1") (term "0,0"))
                   (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "3")))
                  (rule "true_left" (formula "1"))
                  (rule "nnf_imp2or" (formula "1") (term "0,0,0"))
                  (rule "nnf_notAnd" (formula "1") (term "0,0,0,0"))
                   (builtin "One Step Simplification" (formula "1"))
                  (rule "nnf_imp2or" (formula "1") (term "1,0,0,0"))
                  (rule "nnf_notOr" (formula "1") (term "0,0,0,0,0"))
                  (rule "nnf_notAnd" (formula "1") (term "0,1,0,0,0"))
                   (builtin "One Step Simplification" (formula "1"))
                  (rule "commute_or" (formula "1") (term "0,0,0,0"))
                  (rule "commute_or_2" (formula "1") (term "0,0,0"))
                  (rule "shift_paren_or" (formula "1") (term "0,0,0,0"))
                  (rule "commute_and" (formula "1") (term "1,0,0,0"))
                  (rule "shift_paren_or" (formula "1") (term "0,0,0,0,0"))
                  (rule "commute_or_2" (formula "1") (term "0,0,0,0,0"))
                   (builtin "One Step Simplification" (formula "1"))
                  (rule "commute_or_2" (formula "1") (term "0,0,0,0"))
                  (rule "cnf_rightDist" (formula "1") (term "0,0,0"))
                  (rule "distr_forallAnd" (formula "1") (term "0,0"))
                  (rule "distr_forallAnd" (formula "1") (term "0"))
                  (rule "distr_forallAnd" (formula "1"))
                  (rule "andLeft" (formula "1"))
                  (rule "commute_or_2" (formula "1") (term "0,0,0"))
                   (builtin "One Step Simplification" (formula "1"))
                  (rule "eqSymm" (formula "1") (term "1,0,0,0,0"))
                  (rule "castedGetAny" (formula "1") (term "0,0,0,0,0,0"))
                  (rule "castedGetAny" (formula "1") (term "1,0,0,1,0,0,0"))
                  (rule "castedGetAny" (formula "1") (term "0,1,0,0,0,0"))
                   (builtin "One Step Simplification" (formula "1"))
                  (rule "true_left" (formula "1"))
                  (rule "shift_paren_or" (formula "1") (term "0,0,0"))
                   (builtin "One Step Simplification" (formula "1"))
                  (rule "eqSymm" (formula "1") (term "1,1,0,0,0"))
                  (rule "castedGetAny" (formula "1") (term "0,0,0,0,0,0"))
                  (rule "castedGetAny" (formula "1") (term "0,0,1,0,0,0"))
                  (rule "castedGetAny" (formula "1") (term "0,1,1,0,0,0"))
                   (builtin "One Step Simplification" (formula "1"))
                  (rule "true_left" (formula "1"))
                  (rule "Class_axiom_0_in_de_polyas_core3_open_cred_CredTool" (inst "seq=seq") (inst "i=i") (inst "str=str") (inst "seq_0=seq_0") (inst "i_0=i_0") (inst "sv_heap=anon_heap_multiply<<anonHeapFunction>>"))
                  (rule "andLeft" (formula "1"))
                  (rule "castedGetAny" (formula "2") (term "0,1,1,0,0,0"))
                  (rule "castedGetAny" (formula "1") (term "0,0,0,0,0"))
                  (rule "castedGetAny" (formula "1") (term "0,0,1,0,0"))
                  (rule "nnf_imp2or" (formula "1") (term "0,0"))
                   (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "3")))
                  (rule "true_left" (formula "1"))
                  (rule "nnf_imp2or" (formula "1") (term "0,0,0"))
                  (rule "nnf_notAnd" (formula "1") (term "0,0,0,0"))
                   (builtin "One Step Simplification" (formula "1"))
                  (rule "nnf_imp2or" (formula "1") (term "1,0,0,0"))
                  (rule "nnf_notOr" (formula "1") (term "0,0,0,0,0"))
                  (rule "nnf_notAnd" (formula "1") (term "0,1,0,0,0"))
                   (builtin "One Step Simplification" (formula "1"))
                  (rule "commute_or" (formula "1") (term "0,0,0,0"))
                  (rule "commute_or_2" (formula "1") (term "0,0,0"))
                  (rule "Class_axiom_0_in_de_polyas_core3_open_cred_CredTool" (inst "seq=seq") (inst "i=i") (inst "str=str") (inst "seq_0=seq_0") (inst "i_0=i_0") (inst "sv_heap=heapAtPre_A<<anonHeapFunction>>"))
                  (rule "andLeft" (formula "1"))
                  (rule "castedGetAny" (formula "1") (term "0,0,0,0,0"))
                  (rule "castedGetAny" (formula "2") (term "0,1,1,0,0,0"))
                  (rule "castedGetAny" (formula "1") (term "0,0,1,0,0"))
                  (rule "nnf_imp2or" (formula "1") (term "0,0"))
                   (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "4")))
                  (rule "true_left" (formula "1"))
                  (rule "nnf_imp2or" (formula "1") (term "0,0,0"))
                  (rule "nnf_imp2or" (formula "1") (term "1,0,0,0"))
                  (rule "nnf_notAnd" (formula "1") (term "0,0,0,0"))
                   (builtin "One Step Simplification" (formula "1"))
                  (rule "nnf_notAnd" (formula "1") (term "0,1,0,0,0"))
                   (builtin "One Step Simplification" (formula "1"))
                  (rule "nnf_notOr" (formula "1") (term "0,0,0,0,0"))
                  (rule "commute_or" (formula "1") (term "0,0,0,0"))
                  (rule "commute_or_2" (formula "1") (term "0,0,0"))
                  (rule "Class_axiom_0_in_de_polyas_core3_open_cred_CredTool" (inst "seq=seq") (inst "i=i") (inst "str=str") (inst "seq_0=seq_0") (inst "i_0=i_0") (inst "sv_heap=anon(heapAtPre_A<<anonHeapFunction>>,
     empty,
     anon_heap_mod<<anonHeapFunction>>)"))
                   (builtin "One Step Simplification" (formula "1"))
                  (rule "andLeft" (formula "1"))
                  (rule "castedGetAny" (formula "2") (term "0,1,1,0,0,0"))
                  (rule "castedGetAny" (formula "1") (term "0,0,0,0,0"))
                  (rule "castedGetAny" (formula "1") (term "0,0,1,0,0"))
                  (rule "nnf_imp2or" (formula "1") (term "0,0"))
                   (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "5")))
                  (rule "true_left" (formula "1"))
                  (rule "nnf_imp2or" (formula "1") (term "0,0,0"))
                  (rule "nnf_imp2or" (formula "1") (term "1,0,0,0"))
                  (rule "nnf_notAnd" (formula "1") (term "0,0,0,0"))
                   (builtin "One Step Simplification" (formula "1"))
                  (rule "nnf_notOr" (formula "1") (term "0,0,0,0,0"))
                  (rule "nnf_notAnd" (formula "1") (term "0,1,0,0,0"))
                   (builtin "One Step Simplification" (formula "1"))
                  (rule "nnf_notOr" (formula "1") (term "1,0,0,0,0,0"))
                  (rule "Class_axiom_0_in_de_polyas_core3_open_cred_CredTool" (inst "seq=seq") (inst "i=i") (inst "str=str") (inst "seq_0=seq_0") (inst "i_0=i_0") (inst "sv_heap=heapAfter_mod_A_0"))
                  (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "1,0,0,0,0,0,1") (ifseqformula "30"))
                  (rule "andLeft" (formula "1"))
                  (rule "castedGetAny" (formula "1") (term "0,0,0,0,0"))
                  (rule "castedGetAny" (formula "1") (term "0,0,1,0,0"))
                  (rule "castedGetAny" (formula "2") (term "0,1,1,0,0,0"))
                  (rule "nnf_imp2or" (formula "1") (term "0,0"))
                   (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "6")))
                  (rule "true_left" (formula "1"))
                  (rule "nnf_imp2or" (formula "1") (term "0,0,0"))
                  (rule "nnf_imp2or" (formula "1") (term "1,0,0,0"))
                  (rule "nnf_notAnd" (formula "1") (term "0,0,0,0"))
                   (builtin "One Step Simplification" (formula "1"))
                  (rule "nnf_notOr" (formula "1") (term "0,0,0,0,0"))
                  (rule "nnf_notAnd" (formula "1") (term "0,1,0,0,0"))
                   (builtin "One Step Simplification" (formula "1"))
                  (rule "nnf_notOr" (formula "1") (term "1,0,0,0,0,0"))
                  (rule "Class_axiom_0_in_de_polyas_core3_open_cred_CredTool" (inst "seq=seq") (inst "i=i") (inst "str=str") (inst "seq_0=seq_0") (inst "i_0=i_0") (inst "sv_heap=anon(heapAfter_mod_A_0,
     empty,
     anon_heap_multiply<<anonHeapFunction>>)"))
                   (builtin "One Step Simplification" (formula "1"))
                  (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,1,0,0,0,0,0,1") (ifseqformula "30"))
                  (rule "andLeft" (formula "1"))
                  (rule "castedGetAny" (formula "1") (term "0,0,1,0,0"))
                  (rule "castedGetAny" (formula "2") (term "0,1,1,0,0,0"))
                  (rule "castedGetAny" (formula "1") (term "0,0,0,0,0"))
                  (rule "nnf_imp2or" (formula "1") (term "0,0"))
                   (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "6")))
                  (rule "true_left" (formula "1"))
                  (rule "nnf_imp2or" (formula "1") (term "0,0,0"))
                  (rule "nnf_notAnd" (formula "1") (term "0,0,0,0"))
                   (builtin "One Step Simplification" (formula "1"))
                  (rule "nnf_imp2or" (formula "1") (term "1,0,0,0"))
                  (rule "nnf_notOr" (formula "1") (term "0,0,0,0,0"))
                  (rule "nnf_notAnd" (formula "1") (term "0,1,0,0,0"))
                   (builtin "One Step Simplification" (formula "1"))
                  (rule "nnf_notOr" (formula "1") (term "1,0,0,0,0,0"))
                  (rule "nnf_notOr" (formula "1") (term "0,1,0,0,0,0,0"))
                  (rule "Class_axiom_0_in_de_polyas_core3_open_cred_CredTool" (inst "seq=seq") (inst "i=i") (inst "str=str") (inst "seq_0=seq_0") (inst "i_0=i_0") (inst "sv_heap=heapAfter_multiply_A_1"))
                  (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "1,0,0,0,0,0,1") (ifseqformula "37"))
                  (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,1,0,0,0,0,0,1") (ifseqformula "31"))
                  (rule "andLeft" (formula "1"))
                  (rule "castedGetAny" (formula "1") (term "0,0,0,0,0"))
                  (rule "castedGetAny" (formula "2") (term "0,1,1,0,0,0"))
                  (rule "castedGetAny" (formula "1") (term "0,0,1,0,0"))
                  (rule "nnf_imp2or" (formula "1") (term "0,0"))
                   (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "7")))
                  (rule "true_left" (formula "1"))
                  (rule "nnf_imp2or" (formula "1") (term "0,0,0"))
                  (rule "nnf_notAnd" (formula "1") (term "0,0,0,0"))
                   (builtin "One Step Simplification" (formula "1"))
                  (rule "nnf_imp2or" (formula "1") (term "1,0,0,0"))
                  (rule "nnf_notOr" (formula "1") (term "0,0,0,0,0"))
                  (rule "nnf_notAnd" (formula "1") (term "0,1,0,0,0"))
                   (builtin "One Step Simplification" (formula "1"))
                  (rule "nnf_notOr" (formula "1") (term "1,0,0,0,0,0"))
                  (rule "nnf_notOr" (formula "1") (term "0,1,0,0,0,0,0"))
                  (rule "Class_axiom_0_in_de_polyas_core3_open_cred_CredTool" (inst "seq=seq") (inst "i=i") (inst "str=str") (inst "seq_0=seq_0") (inst "i_0=i_0") (inst "sv_heap=heapAtPost_A"))
                  (rule "andLeft" (formula "1"))
                  (rule "castedGetAny" (formula "1") (term "0,0,0,0,0"))
                  (rule "castedGetAny" (formula "1") (term "0,0,1,0,0"))
                  (rule "castedGetAny" (formula "2") (term "0,1,1,0,0,0"))
                  (rule "applyEqRigid" (formula "2") (term "0,0,1,0,0,0,0,0") (ifseqformula "45"))
                  (rule "selectCreatedOfAnonAsFormulaEQ" (formula "2") (term "1,0,0,0,0,0") (ifseqformula "38"))
                  (rule "selectCreatedOfAnonAsFormulaEQ" (formula "2") (term "0,1,0,0,0,0,0") (ifseqformula "32"))
                  (rule "nnf_imp2or" (formula "1") (term "0,0"))
                   (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "7")))
                  (rule "true_left" (formula "1"))
                  (rule "nnf_imp2or" (formula "1") (term "0,0,0"))
                  (rule "nnf_imp2or" (formula "1") (term "1,0,0,0"))
                  (rule "nnf_notAnd" (formula "1") (term "0,0,0,0"))
                   (builtin "One Step Simplification" (formula "1"))
                  (rule "nnf_notAnd" (formula "1") (term "0,1,0,0,0"))
                   (builtin "One Step Simplification" (formula "1"))
                  (rule "nnf_notOr" (formula "1") (term "0,0,0,0,0"))
                  (rule "nnf_notOr" (formula "1") (term "1,0,0,0,0,0"))
                  (rule "nnf_notOr" (formula "1") (term "0,1,0,0,0,0,0"))
                  (rule "Class_axiom_0_in_de_polyas_core3_open_cred_CredTool" (inst "seq=seq") (inst "i=i") (inst "str=str") (inst "seq_0=seq_0") (inst "i_0=i_0") (inst "sv_heap=anon(heapAtPre_B<<anonHeapFunction>>,
     empty,
     anon_heap_mod<<anonHeapFunction>>)"))
                   (builtin "One Step Simplification" (formula "1"))
                  (rule "andLeft" (formula "1"))
                  (rule "castedGetAny" (formula "2") (term "0,1,1,0,0,0"))
                  (rule "castedGetAny" (formula "1") (term "0,0,1,0,0"))
                  (rule "castedGetAny" (formula "1") (term "0,0,0,0,0"))
                  (rule "nnf_imp2or" (formula "1") (term "0,0"))
                   (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "7")))
                  (rule "true_left" (formula "1"))
                  (rule "nnf_imp2or" (formula "1") (term "0,0,0"))
                  (rule "nnf_notAnd" (formula "1") (term "0,0,0,0"))
                   (builtin "One Step Simplification" (formula "1"))
                  (rule "nnf_imp2or" (formula "1") (term "1,0,0,0"))
                  (rule "nnf_notOr" (formula "1") (term "0,0,0,0,0"))
                  (rule "nnf_notAnd" (formula "1") (term "0,1,0,0,0"))
                   (builtin "One Step Simplification" (formula "1"))
                  (rule "nnf_notOr" (formula "1") (term "1,0,0,0,0,0"))
                  (rule "Class_axiom_0_in_de_polyas_core3_open_cred_CredTool" (inst "seq=seq") (inst "i=i") (inst "str=str") (inst "seq_0=seq_0") (inst "i_0=i_0") (inst "sv_heap=heapAfter_mod_B_0"))
                  (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "1,0,0,0,0,0,1") (ifseqformula "65"))
                  (rule "andLeft" (formula "1"))
                  (rule "castedGetAny" (formula "2") (term "0,1,1,0,0,0"))
                  (rule "castedGetAny" (formula "1") (term "0,0,1,0,0"))
                  (rule "castedGetAny" (formula "1") (term "0,0,0,0,0"))
                  (rule "nnf_imp2or" (formula "1") (term "0,0"))
                   (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "8")))
                  (rule "true_left" (formula "1"))
                  (rule "nnf_imp2or" (formula "1") (term "0,0,0"))
                  (rule "nnf_notAnd" (formula "1") (term "0,0,0,0"))
                   (builtin "One Step Simplification" (formula "1"))
                  (rule "nnf_imp2or" (formula "1") (term "1,0,0,0"))
                  (rule "nnf_notOr" (formula "1") (term "0,0,0,0,0"))
                  (rule "nnf_notAnd" (formula "1") (term "0,1,0,0,0"))
                   (builtin "One Step Simplification" (formula "1"))
                  (rule "nnf_notOr" (formula "1") (term "1,0,0,0,0,0"))
                  (rule "Class_axiom_0_in_de_polyas_core3_open_cred_CredTool" (inst "seq=seq") (inst "i=i") (inst "str=str") (inst "seq_0=seq_0") (inst "i_0=i_0") (inst "sv_heap=anon(heapAfter_mod_B_0,
     empty,
     anon_heap_multiply<<anonHeapFunction>>)"))
                   (builtin "One Step Simplification" (formula "1"))
                  (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,1,0,0,0,0,0,1") (ifseqformula "65"))
                  (rule "andLeft" (formula "1"))
                  (rule "castedGetAny" (formula "2") (term "0,1,1,0,0,0"))
                  (rule "castedGetAny" (formula "1") (term "0,0,1,0,0"))
                  (rule "castedGetAny" (formula "1") (term "0,0,0,0,0"))
                  (rule "nnf_imp2or" (formula "1") (term "0,0"))
                   (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "8")))
                  (rule "true_left" (formula "1"))
                  (rule "nnf_imp2or" (formula "1") (term "0,0,0"))
                  (rule "nnf_imp2or" (formula "1") (term "1,0,0,0"))
                  (rule "nnf_notAnd" (formula "1") (term "0,0,0,0"))
                   (builtin "One Step Simplification" (formula "1"))
                  (rule "nnf_notAnd" (formula "1") (term "0,1,0,0,0"))
                   (builtin "One Step Simplification" (formula "1"))
                  (rule "nnf_notOr" (formula "1") (term "0,0,0,0,0"))
                  (rule "nnf_notOr" (formula "1") (term "1,0,0,0,0,0"))
                  (rule "nnf_notOr" (formula "1") (term "0,1,0,0,0,0,0"))
                  (rule "Class_axiom_0_in_de_polyas_core3_open_cred_CredTool" (inst "seq=seq") (inst "i=i") (inst "str=str") (inst "seq_0=seq_0") (inst "i_0=i_0") (inst "sv_heap=heapAfter_multiply_B_1"))
                  (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "1,0,0,0,0,0,1") (ifseqformula "74"))
                  (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,1,0,0,0,0,0,1") (ifseqformula "66"))
                  (rule "andLeft" (formula "1"))
                  (rule "castedGetAny" (formula "1") (term "0,0,0,0,0"))
                  (rule "castedGetAny" (formula "1") (term "0,0,1,0,0"))
                  (rule "castedGetAny" (formula "2") (term "0,1,1,0,0,0"))
                  (rule "nnf_imp2or" (formula "1") (term "0,0"))
                   (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "9")))
                  (rule "true_left" (formula "1"))
                  (rule "nnf_imp2or" (formula "1") (term "0,0,0"))
                  (rule "nnf_notAnd" (formula "1") (term "0,0,0,0"))
                   (builtin "One Step Simplification" (formula "1"))
                  (rule "nnf_imp2or" (formula "1") (term "1,0,0,0"))
                  (rule "nnf_notOr" (formula "1") (term "0,0,0,0,0"))
                  (rule "nnf_notAnd" (formula "1") (term "0,1,0,0,0"))
                   (builtin "One Step Simplification" (formula "1"))
                  (rule "nnf_notOr" (formula "1") (term "1,0,0,0,0,0"))
                  (rule "nnf_notOr" (formula "1") (term "0,1,0,0,0,0,0"))
                  (rule "Class_axiom_0_in_de_polyas_core3_open_cred_CredTool" (inst "seq=seq") (inst "i=i") (inst "str=str") (inst "seq_0=seq_0") (inst "i_0=i_0") (inst "sv_heap=heapAtPost_B"))
                  (rule "andLeft" (formula "1"))
                  (rule "castedGetAny" (formula "1") (term "0,0,0,0,0"))
                  (rule "castedGetAny" (formula "1") (term "0,0,1,0,0"))
                  (rule "castedGetAny" (formula "2") (term "0,1,1,0,0,0"))
                  (rule "applyEq" (formula "2") (term "0,0,1,0,0,0,0,0") (ifseqformula "83"))
                  (rule "selectCreatedOfAnonAsFormulaEQ" (formula "2") (term "1,0,0,0,0,0") (ifseqformula "75"))
                  (rule "selectCreatedOfAnonAsFormulaEQ" (formula "2") (term "0,1,0,0,0,0,0") (ifseqformula "67"))
                  (rule "nnf_imp2or" (formula "1") (term "0,0"))
                   (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "9")))
                  (rule "true_left" (formula "1"))
                  (rule "nnf_imp2or" (formula "1") (term "0,0,0"))
                  (rule "nnf_notAnd" (formula "1") (term "0,0,0,0"))
                   (builtin "One Step Simplification" (formula "1"))
                  (rule "nnf_imp2or" (formula "1") (term "1,0,0,0"))
                  (rule "nnf_notOr" (formula "1") (term "0,0,0,0,0"))
                  (rule "nnf_notAnd" (formula "1") (term "0,1,0,0,0"))
                   (builtin "One Step Simplification" (formula "1"))
                  (rule "nnf_notOr" (formula "1") (term "1,0,0,0,0,0"))
                  (rule "nnf_notOr" (formula "1") (term "0,1,0,0,0,0,0"))
                  (rule "shift_paren_or" (formula "6") (term "0,0,0,0"))
                  (rule "div_axiom" (formula "33") (term "0,1") (inst "quotient=quotient_0"))
                  (rule "polySimp_mulComm0" (formula "33") (term "0,2,1,1"))
                  (rule "polySimp_mulComm0" (formula "33") (term "1,1,1,1,1"))
                  (rule "polySimp_mulComm0" (formula "33") (term "0,1,0,1"))
                  (rule "polySimp_mulComm0" (formula "33") (term "0,1,1,1"))
                  (rule "commute_or" (formula "4") (term "0,0,0,0"))
                  (rule "shift_paren_or" (formula "5") (term "0,0,0,0"))
                  (rule "commute_and" (formula "6") (term "1,0,0,0"))
                  (rule "commute_or" (formula "4") (term "0,1,0,0,0"))
                  (rule "commute_and" (formula "5") (term "1,0,0,0"))
                  (rule "commute_or" (formula "3") (term "0,0,0,0"))
                  (rule "ifthenelse_split" (formula "8") (term "0"))
                  (branch " resultAtPost_226_B.<created>@anon_heap_mod«anonHeapFunction» = TRUE TRUE"
                     (rule "applyEqReverse" (formula "106") (term "1") (ifseqformula "9"))
                     (rule "hideAuxiliaryEq" (formula "9"))
                     (rule "replace_known_left" (formula "76") (term "0") (ifseqformula "8"))
                      (builtin "One Step Simplification" (formula "76"))
                     (rule "true_left" (formula "76"))
                     (rule "commute_or" (formula "3") (term "0,1,0,0,0"))
                     (rule "commute_or" (formula "2") (term "0,0,0,0"))
                     (rule "onlyCreatedObjectsAreReferenced" (formula "31") (term "2") (ifseqformula "22"))
                     (rule "replace_known_left" (formula "31") (term "1") (ifseqformula "16"))
                      (builtin "One Step Simplification" (formula "31") (ifInst ""  (formula "95")))
                     (rule "true_left" (formula "31"))
                     (rule "onlyCreatedObjectsAreReferenced" (formula "14") (term "1,1,0") (ifseqformula "22"))
                     (rule "replace_known_left" (formula "14") (term "1") (ifseqformula "16"))
                      (builtin "One Step Simplification" (formula "14") (ifInst ""  (formula "93")))
                     (rule "true_left" (formula "14"))
                     (rule "onlyCreatedObjectsAreReferenced" (formula "14") (term "1,0") (ifseqformula "22"))
                     (rule "replace_known_left" (formula "14") (term "1") (ifseqformula "15"))
                      (builtin "One Step Simplification" (formula "14") (ifInst ""  (formula "91")))
                     (rule "true_left" (formula "14"))
                     (rule "onlyCreatedObjectsAreReferenced" (formula "93") (term "0") (ifseqformula "55"))
                     (rule "replace_known_left" (formula "1") (term "1") (ifseqformula "49"))
                      (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "94")))
                     (rule "true_left" (formula "1"))
                     (rule "onlyCreatedObjectsAreReferenced" (formula "97") (term "0") (ifseqformula "55"))
                     (rule "replace_known_left" (formula "1") (term "1") (ifseqformula "61"))
                      (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "98")))
                     (rule "true_left" (formula "1"))
                     (rule "onlyCreatedObjectsAreReferenced" (formula "27") (term "1,0") (ifseqformula "22"))
                     (rule "replace_known_left" (formula "27") (term "1") (ifseqformula "28"))
                      (builtin "One Step Simplification" (formula "27") (ifInst ""  (formula "97")))
                     (rule "true_left" (formula "27"))
                     (rule "onlyCreatedObjectsAreReferenced" (formula "47") (term "1,0") (ifseqformula "55"))
                     (rule "replace_known_left" (formula "47") (term "1") (ifseqformula "48"))
                      (builtin "One Step Simplification" (formula "47") (ifInst ""  (formula "92")))
                     (rule "true_left" (formula "47"))
                     (rule "onlyCreatedObjectsAreReferenced" (formula "64") (term "2") (ifseqformula "55"))
                     (rule "replace_known_left" (formula "64") (term "1") (ifseqformula "49"))
                      (builtin "One Step Simplification" (formula "64") (ifInst ""  (formula "96")))
                     (rule "true_left" (formula "64"))
                     (rule "commute_or" (formula "2") (term "0,1,0,0,0"))
                     (rule "commute_or" (formula "1") (term "0,0,0,0"))
                     (rule "commute_or" (formula "1") (term "0,1,0,0,0"))
                     (rule "commute_or_2" (formula "4") (term "0,0,0"))
                     (rule "commute_or_2" (formula "3") (term "0,0,0"))
                     (rule "commute_and" (formula "33") (term "0,1"))
                     (rule "commute_or_2" (formula "2") (term "0,0,0"))
                     (rule "commute_or_2" (formula "1") (term "0,0,0"))
                     (rule "shift_paren_or" (formula "6") (term "0,0,0,0,0"))
                     (rule "shift_paren_or" (formula "5") (term "0,0,0,0,0"))
                     (rule "shift_paren_or" (formula "4") (term "0,0,0,0"))
                     (rule "shift_paren_or" (formula "3") (term "0,0,0,0"))
                     (rule "commute_or_2" (formula "2") (term "1,0,0,0,0"))
                     (rule "commute_or_2" (formula "1") (term "1,0,0,0,0"))
                     (rule "commute_or_2" (formula "6") (term "0,0,0,0,0"))
                      (builtin "One Step Simplification" (formula "6"))
                     (rule "commute_or_2" (formula "6") (term "0,0,0,0"))
                     (rule "commute_or_2" (formula "5") (term "0,0,0,0,0"))
                      (builtin "One Step Simplification" (formula "5"))
                     (rule "commute_or_2" (formula "5") (term "0,0,0,0"))
                     (rule "shift_paren_or" (formula "2") (term "0,0,0,0"))
                     (rule "shift_paren_or" (formula "1") (term "0,0,0,0"))
                     (rule "commute_and" (formula "4") (term "1,0,0,0"))
                     (rule "commute_and" (formula "3") (term "1,0,0,0"))
                     (rule "cnf_rightDist" (formula "6") (term "0,0,0"))
                     (rule "distr_forallAnd" (formula "6") (term "0,0"))
                     (rule "distr_forallAnd" (formula "6") (term "0"))
                     (rule "distr_forallAnd" (formula "6"))
                     (rule "andLeft" (formula "6"))
                     (rule "commute_or_2" (formula "6") (term "0,0,0"))
                      (builtin "One Step Simplification" (formula "6"))
                     (rule "eqSymm" (formula "6") (term "1,0,0,0,0"))
                     (rule "castedGetAny" (formula "6") (term "1,0,0,1,0,0,0"))
                     (rule "castedGetAny" (formula "6") (term "0,0,0,0,0,0"))
                     (rule "castedGetAny" (formula "6") (term "0,1,0,0,0,0"))
                      (builtin "One Step Simplification" (formula "6"))
                     (rule "true_left" (formula "6"))
                     (rule "shift_paren_or" (formula "6") (term "0,0,0"))
                      (builtin "One Step Simplification" (formula "6"))
                     (rule "eqSymm" (formula "6") (term "1,1,0,0,0"))
                     (rule "castedGetAny" (formula "6") (term "0,0,1,0,0,0"))
                     (rule "castedGetAny" (formula "6") (term "0,0,0,0,0,0"))
                     (rule "castedGetAny" (formula "6") (term "0,1,1,0,0,0"))
                      (builtin "One Step Simplification" (formula "6"))
                     (rule "true_left" (formula "6"))
                     (rule "commute_and" (formula "2") (term "1,0,0,0"))
                     (rule "commute_and" (formula "1") (term "1,0,0,0"))
                     (rule "cnf_rightDist" (formula "5") (term "0,0,0"))
                     (rule "distr_forallAnd" (formula "5") (term "0,0"))
                     (rule "distr_forallAnd" (formula "5") (term "0"))
                     (rule "distr_forallAnd" (formula "5"))
                     (rule "andLeft" (formula "5"))
                     (rule "commute_or_2" (formula "5") (term "0,0,0"))
                      (builtin "One Step Simplification" (formula "5"))
                     (rule "eqSymm" (formula "5") (term "1,0,0,0,0"))
                     (rule "castedGetAny" (formula "5") (term "1,0,0,1,0,0,0"))
                     (rule "castedGetAny" (formula "5") (term "0,0,0,0,0,0"))
                     (rule "castedGetAny" (formula "5") (term "0,1,0,0,0,0"))
                      (builtin "One Step Simplification" (formula "5"))
                     (rule "true_left" (formula "5"))
                     (rule "shift_paren_or" (formula "4") (term "0,0,0,0,0"))
                      (builtin "One Step Simplification" (formula "4"))
                     (rule "shift_paren_or" (formula "3") (term "0,0,0,0,0"))
                      (builtin "One Step Simplification" (formula "3"))
                     (rule "shift_paren_or" (formula "5") (term "0,0,0"))
                      (builtin "One Step Simplification" (formula "5"))
                     (rule "eqSymm" (formula "5") (term "1,1,0,0,0"))
                     (rule "castedGetAny" (formula "5") (term "0,0,1,0,0,0"))
                     (rule "castedGetAny" (formula "5") (term "0,0,0,0,0,0"))
                     (rule "castedGetAny" (formula "5") (term "0,1,1,0,0,0"))
                      (builtin "One Step Simplification" (formula "5"))
                     (rule "true_left" (formula "5"))
                     (rule "shift_paren_or" (formula "2") (term "0,0,0,0,0"))
                      (builtin "One Step Simplification" (formula "2"))
                     (rule "commute_or_2" (formula "4") (term "0,0,0,0"))
                     (rule "shift_paren_or" (formula "1") (term "0,0,0,0,0"))
                      (builtin "One Step Simplification" (formula "1"))
                     (rule "commute_or_2" (formula "3") (term "0,0,0,0"))
                     (rule "cnf_rightDist" (formula "2") (term "0,0,0"))
                     (rule "distr_forallAnd" (formula "2") (term "0,0"))
                     (rule "distr_forallAnd" (formula "2") (term "0"))
                     (rule "distr_forallAnd" (formula "2"))
                     (rule "andLeft" (formula "2"))
                     (rule "shift_paren_or" (formula "3") (term "0,0,0"))
                      (builtin "One Step Simplification" (formula "3"))
                     (rule "eqSymm" (formula "3") (term "1,1,0,0,0"))
                     (rule "castedGetAny" (formula "3") (term "0,0,0,0,0,0"))
                     (rule "castedGetAny" (formula "3") (term "0,0,1,0,0,0"))
                     (rule "castedGetAny" (formula "3") (term "0,1,1,0,0,0"))
                      (builtin "One Step Simplification" (formula "3"))
                     (rule "true_left" (formula "3"))
                     (rule "cnf_rightDist" (formula "4") (term "0,0,0"))
                     (rule "distr_forallAnd" (formula "4") (term "0,0"))
                     (rule "distr_forallAnd" (formula "4") (term "0"))
                     (rule "distr_forallAnd" (formula "4"))
                     (rule "andLeft" (formula "4"))
                     (rule "shift_paren_or" (formula "5") (term "0,0,0"))
                      (builtin "One Step Simplification" (formula "5"))
                     (rule "eqSymm" (formula "5") (term "1,1,0,0,0"))
                     (rule "castedGetAny" (formula "5") (term "0,0,0,0,0,0"))
                     (rule "castedGetAny" (formula "5") (term "0,0,1,0,0,0"))
                     (rule "castedGetAny" (formula "5") (term "0,1,1,0,0,0"))
                      (builtin "One Step Simplification" (formula "5"))
                     (rule "true_left" (formula "5"))
                     (rule "cnf_rightDist" (formula "1") (term "0,0,0"))
                     (rule "distr_forallAnd" (formula "1") (term "0,0"))
                     (rule "distr_forallAnd" (formula "1") (term "0"))
                     (rule "distr_forallAnd" (formula "1"))
                     (rule "andLeft" (formula "1"))
                     (rule "cnf_rightDist" (formula "4") (term "0,0,0"))
                     (rule "distr_forallAnd" (formula "4") (term "0,0"))
                     (rule "distr_forallAnd" (formula "4") (term "0"))
                     (rule "distr_forallAnd" (formula "4"))
                     (rule "andLeft" (formula "4"))
                     (rule "shift_paren_or" (formula "2") (term "0,0,0"))
                      (builtin "One Step Simplification" (formula "2"))
                     (rule "eqSymm" (formula "2") (term "1,1,0,0,0"))
                     (rule "castedGetAny" (formula "2") (term "0,0,0,0,0,0"))
                     (rule "castedGetAny" (formula "2") (term "0,0,1,0,0,0"))
                     (rule "castedGetAny" (formula "2") (term "0,1,1,0,0,0"))
                      (builtin "One Step Simplification" (formula "2"))
                     (rule "true_left" (formula "2"))
                     (rule "cnf_rightDist" (formula "2") (term "0,0,0"))
                     (rule "distr_forallAnd" (formula "2") (term "0,0"))
                     (rule "distr_forallAnd" (formula "2") (term "0"))
                     (rule "distr_forallAnd" (formula "2"))
                     (rule "andLeft" (formula "2"))
                     (rule "commute_or_2" (formula "2") (term "0,0,0"))
                      (builtin "One Step Simplification" (formula "2"))
                     (rule "eqSymm" (formula "2") (term "1,0,0,0,0"))
                     (rule "castedGetAny" (formula "2") (term "1,0,0,1,0,0,0"))
                     (rule "castedGetAny" (formula "2") (term "0,0,0,0,0,0"))
                     (rule "castedGetAny" (formula "2") (term "0,1,0,0,0,0"))
                      (builtin "One Step Simplification" (formula "2"))
                     (rule "true_left" (formula "2"))
                     (rule "cnf_rightDist" (formula "4") (term "0,0,0"))
                     (rule "distr_forallAnd" (formula "4") (term "0,0"))
                     (rule "distr_forallAnd" (formula "4") (term "0"))
                     (rule "distr_forallAnd" (formula "4"))
                     (rule "andLeft" (formula "4"))
                     (rule "commute_or_2" (formula "4") (term "0,0,0"))
                      (builtin "One Step Simplification" (formula "4"))
                     (rule "eqSymm" (formula "4") (term "1,0,0,0,0"))
                     (rule "castedGetAny" (formula "4") (term "1,0,0,1,0,0,0"))
                     (rule "castedGetAny" (formula "4") (term "0,0,0,0,0,0"))
                     (rule "castedGetAny" (formula "4") (term "0,1,0,0,0,0"))
                      (builtin "One Step Simplification" (formula "4"))
                     (rule "true_left" (formula "4"))
                     (rule "shift_paren_or" (formula "2") (term "0,0,0"))
                      (builtin "One Step Simplification" (formula "2"))
                     (rule "eqSymm" (formula "2") (term "1,1,0,0,0"))
                     (rule "castedGetAny" (formula "2") (term "0,0,1,0,0,0"))
                     (rule "castedGetAny" (formula "2") (term "1,0,0,0,0,0,0"))
                     (rule "castedGetAny" (formula "2") (term "0,1,1,0,0,0"))
                      (builtin "One Step Simplification" (formula "2"))
                     (rule "true_left" (formula "2"))
                     (rule "cnf_rightDist" (formula "1") (term "0,0,0"))
                     (rule "distr_forallAnd" (formula "1") (term "0,0"))
                     (rule "distr_forallAnd" (formula "1") (term "0"))
                     (rule "distr_forallAnd" (formula "1"))
                     (rule "andLeft" (formula "1"))
                     (rule "cnf_rightDist" (formula "3") (term "0,0,0"))
                     (rule "distr_forallAnd" (formula "3") (term "0,0"))
                     (rule "distr_forallAnd" (formula "3") (term "0"))
                     (rule "distr_forallAnd" (formula "3"))
                     (rule "andLeft" (formula "3"))
                     (rule "ifthenelse_split_for" (formula "30") (term "1,1"))
                     (branch "result_228_A_1.value@heapAtPre_A«anonHeapFunction» ≥ 0 TRUE"
                        (rule "cnf_rightDist" (formula "31"))
                        (rule "andLeft" (formula "31"))
                        (rule "commute_or" (formula "32"))
                        (rule "cnf_rightDist" (formula "31"))
                        (rule "andLeft" (formula "31"))
                        (rule "commute_or" (formula "32"))
                        (rule "shift_paren_or" (formula "2") (term "0,0,0"))
                         (builtin "One Step Simplification" (formula "2"))
                        (rule "eqSymm" (formula "2") (term "1,1,0,0,0"))
                        (rule "castedGetAny" (formula "2") (term "0,0,1,0,0,0"))
                        (rule "castedGetAny" (formula "2") (term "1,0,0,0,0,0,0"))
                        (rule "castedGetAny" (formula "2") (term "0,1,1,0,0,0"))
                         (builtin "One Step Simplification" (formula "2"))
                        (rule "true_left" (formula "2"))
                        (rule "cnf_rightDist" (formula "1") (term "0,0,0"))
                        (rule "distr_forallAnd" (formula "1") (term "0,0"))
                        (rule "distr_forallAnd" (formula "1") (term "0"))
                        (rule "distr_forallAnd" (formula "1"))
                        (rule "andLeft" (formula "1"))
                        (rule "commute_or_2" (formula "1") (term "0,0,0"))
                         (builtin "One Step Simplification" (formula "1"))
                        (rule "eqSymm" (formula "1") (term "1,0,0,0,0"))
                        (rule "castedGetAny" (formula "1") (term "1,0,0,1,0,0,0"))
                        (rule "castedGetAny" (formula "1") (term "0,0,0,0,0,0"))
                        (rule "castedGetAny" (formula "1") (term "0,1,0,0,0,0"))
                         (builtin "One Step Simplification" (formula "1"))
                        (rule "true_left" (formula "1"))
                        (rule "shift_paren_or" (formula "1") (term "0,0,0"))
                         (builtin "One Step Simplification" (formula "1"))
                        (rule "eqSymm" (formula "1") (term "1,1,0,0,0"))
                        (rule "castedGetAny" (formula "1") (term "1,0,0,0,0,0,0"))
                        (rule "castedGetAny" (formula "1") (term "0,0,1,0,0,0"))
                        (rule "castedGetAny" (formula "1") (term "0,1,1,0,0,0"))
                         (builtin "One Step Simplification" (formula "1"))
                        (rule "true_left" (formula "1"))
                        (rule "cnf_rightDist" (formula "1") (term "0,0,0"))
                        (rule "distr_forallAnd" (formula "1") (term "0,0"))
                        (rule "distr_forallAnd" (formula "1") (term "0"))
                        (rule "distr_forallAnd" (formula "1"))
                        (rule "andLeft" (formula "1"))
                        (rule "commute_or_2" (formula "1") (term "0,0,0"))
                         (builtin "One Step Simplification" (formula "1"))
                        (rule "eqSymm" (formula "1") (term "1,0,0,0,0"))
                        (rule "castedGetAny" (formula "1") (term "0,0,0,0,0,0"))
                        (rule "castedGetAny" (formula "1") (term "1,0,0,1,0,0,0"))
                        (rule "castedGetAny" (formula "1") (term "0,1,0,0,0,0"))
                         (builtin "One Step Simplification" (formula "1"))
                        (rule "true_left" (formula "1"))
                        (rule "shift_paren_or" (formula "1") (term "0,0,0"))
                         (builtin "One Step Simplification" (formula "1"))
                        (rule "eqSymm" (formula "1") (term "1,1,0,0,0"))
                        (rule "castedGetAny" (formula "1") (term "1,0,0,0,0,0,0"))
                        (rule "castedGetAny" (formula "1") (term "0,0,1,0,0,0"))
                        (rule "castedGetAny" (formula "1") (term "0,1,1,0,0,0"))
                         (builtin "One Step Simplification" (formula "1"))
                        (rule "true_left" (formula "1"))
                        (rule "cut_direct" (formula "28") (term "0"))
                        (branch "CUT: result_228_A_1.value@heapAtPre_A«anonHeapFunction» = 0 TRUE"
                            (builtin "One Step Simplification" (formula "29"))
                           (rule "true_left" (formula "29"))
                           (rule "replace_known_left" (formula "30") (term "0") (ifseqformula "28"))
                            (builtin "One Step Simplification" (formula "30"))
                           (rule "true_left" (formula "30"))
                           (rule "replace_known_left" (formula "29") (term "0") (ifseqformula "28"))
                            (builtin "One Step Simplification" (formula "29"))
                           (rule "true_left" (formula "29"))
                           (rule "applyEq" (formula "30") (term "1,0,0") (ifseqformula "28"))
                           (rule "polySimp_mulComm0" (formula "30") (term "0"))
                           (rule "applyEq" (formula "29") (term "1,0") (ifseqformula "28"))
                           (rule "eqSymm" (formula "29"))
                           (rule "polySimp_homoEq" (formula "29"))
                           (rule "polySimp_mulLiterals" (formula "29") (term "1,0"))
                           (rule "polySimp_elimOne" (formula "29") (term "1,0"))
                           (rule "applyEq" (formula "27") (term "0") (ifseqformula "28"))
                           (rule "qeq_literals" (formula "27"))
                           (rule "true_left" (formula "27"))
                           (rule "applyEq" (formula "7") (term "1") (ifseqformula "27"))
                           (rule "applyEq" (formula "56") (term "1") (ifseqformula "27"))
                           (rule "applyEq" (formula "23") (term "1") (ifseqformula "27"))
                           (rule "applyEq" (formula "29") (term "0,0") (ifseqformula "27"))
                           (rule "times_zero_2" (formula "29") (term "0"))
                           (rule "polySimp_homoEq" (formula "29"))
                           (rule "mul_literals" (formula "29") (term "1,0"))
                           (rule "add_zero_right" (formula "29") (term "0"))
                           (rule "applyEq" (formula "28") (term "1,1,0") (ifseqformula "27"))
                           (rule "polySimp_addComm0" (formula "28") (term "0"))
                           (rule "polySimp_sepNegMonomial" (formula "29"))
                           (rule "polySimp_mulLiterals" (formula "29") (term "0"))
                           (rule "polySimp_elimOne" (formula "29") (term "0"))
                           (rule "applyEq" (formula "4") (term "0") (ifseqformula "29"))
                           (rule "applyEq" (formula "28") (term "0,1,0") (ifseqformula "29"))
                           (rule "polySimp_addComm0" (formula "28") (term "0"))
                           (rule "applyEq" (formula "28") (term "0,0,1,0") (ifseqformula "29"))
                           (rule "polySimp_addComm0" (formula "28") (term "0"))
                           (rule "applyEq" (formula "6") (term "1") (ifseqformula "29"))
                           (rule "polySimp_sepPosMonomial" (formula "28"))
                           (rule "jdiv_axiom" (formula "28") (term "0"))
                           (rule "eqSymm" (formula "28"))
                           (rule "applyEq" (formula "28") (term "1") (ifseqformula "29"))
                            (builtin "One Step Simplification" (formula "28"))
                           (rule "eqSymm" (formula "28") (term "1"))
                           (rule "polySimp_homoEq" (formula "28") (term "1"))
                           (rule "polySimp_mulLiterals" (formula "28") (term "1,0,1"))
                           (rule "polySimp_elimOne" (formula "28") (term "1,0,1"))
                           (rule "polySimp_sepPosMonomial" (formula "28") (term "1"))
                           (rule "inEqSimp_contradInEq0" (formula "28") (term "0,0") (ifseqformula "4"))
                           (rule "qeq_literals" (formula "28") (term "0,0,0"))
                            (builtin "One Step Simplification" (formula "28"))
                           (rule "true_left" (formula "28"))
                           (rule "div_axiom" (formula "28") (term "0,1") (inst "quotient=quotient_1"))
                            (builtin "One Step Simplification" (formula "28"))
                           (rule "true_left" (formula "28"))
                           (rule "Use_information_flow_contract_for_compareTo_325434207" (formula "19") (ifseqformula "19"))
                            (builtin "One Step Simplification" (formula "19") (ifInst ""  (formula "91")) (ifInst ""  (formula "91")))
                           (rule "true_left" (formula "19"))
                           (rule "Use_information_flow_contract_for_getOrder_757678341" (formula "58") (ifseqformula "25"))
                           (rule "applyEq" (formula "58") (term "0,0,1") (ifseqformula "56"))
                           (rule "eqSymm" (formula "58") (term "0,1"))
                           (rule "replace_known_left" (formula "58") (term "0,1") (ifseqformula "23"))
                            (builtin "One Step Simplification" (formula "58"))
                           (rule "applyEq" (formula "58") (term "0,1") (ifseqformula "7"))
                           (rule "eqSymm" (formula "58") (term "1"))
                           (rule "replace_known_left" (formula "58") (term "1") (ifseqformula "27"))
                            (builtin "One Step Simplification" (formula "58"))
                           (rule "true_left" (formula "58"))
                           (rule "Use_information_flow_contract_for_multiply_1272441881_0" (formula "70") (ifseqformula "35"))
                           (rule "replaceKnownSelect_taclet21_11" (formula "70") (term "1,1,1"))
                           (rule "replaceKnownSelect_taclet21_12" (formula "70") (term "0,1,1"))
                           (rule "replaceKnownAuxiliaryConstant_taclet01021_17" (formula "70") (term "1,1,1"))
                           (rule "replaceKnownAuxiliaryConstant_taclet0101021_19" (formula "70") (term "0,1,1"))
                           (rule "replaceKnownSelect_taclet21_8" (formula "70") (term "1,1,0,1"))
                           (rule "replaceKnownSelect_taclet21_9" (formula "70") (term "0,1,0,1"))
                           (rule "replaceKnownAuxiliaryConstant_taclet21_10" (formula "70") (term "1,1,0,1"))
                            (builtin "One Step Simplification" (formula "70") (ifInst ""  (formula "82")) (ifInst ""  (formula "81")))
                           (rule "eqSymm" (formula "70") (term "1,1"))
                           (rule "replace_known_right" (formula "70") (term "1,1") (ifseqformula "99"))
                            (builtin "One Step Simplification" (formula "70"))
                           (rule "pullOutSelect" (formula "70") (term "1,0,1") (inst "selectSK=org_bouncycastle_math_ec_ECPoint_value_4"))
                           (rule "simplifySelectOfAnonEQ" (formula "70") (ifseqformula "26"))
                            (builtin "One Step Simplification" (formula "70") (ifInst ""  (formula "96")) (ifInst ""  (formula "14")))
                           (rule "applyEqReverse" (formula "71") (term "1,0,1") (ifseqformula "70"))
                           (rule "hideAuxiliaryEq" (formula "70"))
                           (rule "pullOutSelect" (formula "70") (term "0,0,1") (inst "selectSK=org_bouncycastle_math_ec_ECPoint_value_5"))
                           (rule "simplifySelectOfAnonEQ" (formula "70") (ifseqformula "60"))
                            (builtin "One Step Simplification" (formula "70") (ifInst ""  (formula "97")) (ifInst ""  (formula "47")))
                           (rule "applyEqReverse" (formula "71") (term "0,0,1") (ifseqformula "70"))
                           (rule "hideAuxiliaryEq" (formula "70"))
                           (rule "replace_known_left" (formula "70") (term "0,1") (ifseqformula "5"))
                            (builtin "One Step Simplification" (formula "70"))
                           (rule "notLeft" (formula "70"))
                           (rule "Class_invariant_axiom_for_org_bouncycastle_math_ec_ECPoint" (formula "76") (term "1"))
                            (builtin "One Step Simplification" (formula "76"))
                           (rule "Class_invariant_axiom_for_org_bouncycastle_math_ec_ECPoint" (formula "76"))
                           (rule "closeTrue" (formula "76"))
                        )
                        (branch "CUT: result_228_A_1.value@heapAtPre_A«anonHeapFunction» = 0 FALSE"
                            (builtin "One Step Simplification" (formula "28"))
                           (rule "replace_known_right" (formula "30") (term "0") (ifseqformula "79"))
                            (builtin "One Step Simplification" (formula "30"))
                           (rule "replace_known_right" (formula "29") (term "0") (ifseqformula "79"))
                            (builtin "One Step Simplification" (formula "29"))
                           (rule "applyEq" (formula "32") (term "0,0") (ifseqformula "29"))
                           (rule "polySimp_mulComm0" (formula "32") (term "0"))
                           (rule "applyEq" (formula "30") (term "0") (ifseqformula "32"))
                           (rule "inEqSimp_homoInEq1" (formula "30"))
                           (rule "polySimp_mulComm0" (formula "30") (term "1,0"))
                           (rule "polySimp_rightDist" (formula "30") (term "1,0"))
                           (rule "polySimp_mulLiterals" (formula "30") (term "1,1,0"))
                           (rule "polySimp_elimOne" (formula "30") (term "1,1,0"))
                           (rule "polySimp_mulComm0" (formula "30") (term "0,1,0"))
                           (rule "polySimp_addComm1" (formula "30") (term "0"))
                           (rule "polySimp_addAssoc" (formula "30") (term "0,0"))
                           (rule "polySimp_addComm1" (formula "30") (term "0,0,0"))
                           (rule "polySimp_pullOutFactor2b" (formula "30") (term "0,0"))
                           (rule "add_literals" (formula "30") (term "1,1,0,0"))
                           (rule "times_zero_1" (formula "30") (term "1,0,0"))
                           (rule "add_zero_right" (formula "30") (term "0,0"))
                           (rule "applyEq" (formula "28") (term "0") (ifseqformula "32"))
                           (rule "inEqSimp_homoInEq0" (formula "28"))
                           (rule "polySimp_mulComm0" (formula "28") (term "1,0"))
                           (rule "polySimp_rightDist" (formula "28") (term "1,0"))
                           (rule "polySimp_mulLiterals" (formula "28") (term "1,1,0"))
                           (rule "polySimp_elimOne" (formula "28") (term "1,1,0"))
                           (rule "polySimp_mulComm0" (formula "28") (term "0,1,0"))
                           (rule "polySimp_addAssoc" (formula "28") (term "0"))
                           (rule "polySimp_addComm0" (formula "28") (term "0,0"))
                           (rule "polySimp_pullOutFactor2b" (formula "28") (term "0"))
                           (rule "add_literals" (formula "28") (term "1,1,0"))
                           (rule "times_zero_1" (formula "28") (term "1,0"))
                           (rule "add_zero_right" (formula "28") (term "0"))
                           (rule "applyEq" (formula "31") (term "0,1") (ifseqformula "29"))
                           (rule "inEqSimp_sepNegMonomial0" (formula "30"))
                           (rule "polySimp_mulLiterals" (formula "30") (term "0"))
                           (rule "polySimp_elimOne" (formula "30") (term "0"))
                           (rule "inEqSimp_invertInEq1" (formula "28"))
                           (rule "polySimp_mulLiterals" (formula "28") (term "0"))
                           (rule "mul_literals" (formula "28") (term "1"))
                           (rule "polySimp_elimOne" (formula "28") (term "0"))
                           (rule "inEqSimp_strengthen1" (formula "27") (ifseqformula "79"))
                           (rule "add_literals" (formula "27") (term "1"))
                           (rule "inEqSimp_contradEq7" (formula "79") (ifseqformula "27"))
                           (rule "times_zero_1" (formula "79") (term "1,0,0"))
                           (rule "add_literals" (formula "79") (term "0,0"))
                           (rule "leq_literals" (formula "79") (term "0"))
                            (builtin "One Step Simplification" (formula "79"))
                           (rule "false_right" (formula "79"))
                           (rule "Use_information_flow_contract_for_compareTo_325434207" (formula "19") (ifseqformula "19"))
                            (builtin "One Step Simplification" (formula "19") (ifInst ""  (formula "94")) (ifInst ""  (formula "94")))
                           (rule "true_left" (formula "19"))
                           (rule "Use_information_flow_contract_for_getOrder_757678341" (formula "61") (ifseqformula "25"))
                           (rule "replace_known_left" (formula "61") (term "1,1") (ifseqformula "7"))
                            (builtin "One Step Simplification" (formula "61"))
                           (rule "true_left" (formula "61"))
                           (rule "Use_information_flow_contract_for_getOrder_757678341" (formula "61") (ifseqformula "61"))
                            (builtin "One Step Simplification" (formula "61"))
                           (rule "true_left" (formula "61"))
                           (rule "Use_information_flow_contract_for_compareTo_325434207" (formula "55") (ifseqformula "19"))
                           (rule "replace_known_left" (formula "55") (term "0,0,1") (ifseqformula "6"))
                            (builtin "One Step Simplification" (formula "55") (ifInst ""  (formula "95")) (ifInst ""  (formula "94")))
                           (rule "applyEq" (formula "55") (term "0,0,1") (ifseqformula "57"))
                           (rule "eqSymm" (formula "55") (term "0,1"))
                           (rule "replace_known_left" (formula "55") (term "0,1") (ifseqformula "20"))
                            (builtin "One Step Simplification" (formula "55"))
                           (rule "Class_invariant_axiom_for_java_math_BigInteger" (formula "55") (term "1,0"))
                           (rule "replace_known_right" (formula "55") (term "0,0,1,0") (ifseqformula "94"))
                            (builtin "One Step Simplification" (formula "55") (ifInst ""  (formula "20")))
                           (rule "Class_invariant_axiom_for_java_math_BigInteger" (formula "55") (term "0"))
                           (rule "replace_known_left" (formula "55") (term "1,0") (ifseqformula "57"))
                            (builtin "One Step Simplification" (formula "55") (ifInst ""  (formula "95")))
                           (rule "applyEq" (formula "56") (term "4") (ifseqformula "55"))
                           (rule "applyEq" (formula "54") (term "0") (ifseqformula "55"))
                           (rule "applyEq" (formula "47") (term "0") (ifseqformula "54"))
                           (rule "Use_information_flow_contract_for_getOrder_757678341" (formula "25") (ifseqformula "25"))
                            (builtin "One Step Simplification" (formula "25"))
                           (rule "true_left" (formula "25"))
                           (rule "Use_information_flow_contract_for_mod_596311583" (formula "68") (ifseqformula "35"))
                           (rule "replaceKnownSelect_taclet21_8" (formula "68") (term "1,1,1"))
                           (rule "replaceKnownSelect_taclet21_9" (formula "68") (term "0,1,1"))
                           (rule "replaceKnownAuxiliaryConstant_taclet21_10" (formula "68") (term "1,1,1"))
                            (builtin "One Step Simplification" (formula "68") (ifInst ""  (formula "86")) (ifInst ""  (formula "85")) (ifInst ""  (formula "6")) (ifInst ""  (formula "7")))
                           (rule "true_left" (formula "68"))
                           (rule "Use_information_flow_contract_for_multiply_1272441881" (formula "72") (ifseqformula "38"))
                           (rule "replaceKnownSelect_taclet21_12" (formula "72") (term "0,1,1"))
                           (rule "replaceKnownSelect_taclet21_11" (formula "72") (term "1,1,1"))
                           (rule "replaceKnownAuxiliaryConstant_taclet0101021_19" (formula "72") (term "0,1,1"))
                           (rule "replaceKnownAuxiliaryConstant_taclet01021_17" (formula "72") (term "1,1,1"))
                           (rule "replaceKnownSelect_taclet21_8" (formula "72") (term "1,1,0,1"))
                           (rule "replaceKnownSelect_taclet21_9" (formula "72") (term "0,1,0,1"))
                           (rule "replaceKnownAuxiliaryConstant_taclet21_10" (formula "72") (term "1,1,0,1"))
                            (builtin "One Step Simplification" (formula "72") (ifInst ""  (formula "84")) (ifInst ""  (formula "83")))
                           (rule "eqSymm" (formula "72") (term "1,1"))
                           (rule "replace_known_right" (formula "72") (term "1,1") (ifseqformula "101"))
                            (builtin "One Step Simplification" (formula "72"))
                           (rule "pullOutSelect" (formula "72") (term "0,0,1") (inst "selectSK=org_bouncycastle_math_ec_ECPoint_value_4"))
                           (rule "simplifySelectOfAnonEQ" (formula "72") (ifseqformula "62"))
                            (builtin "One Step Simplification" (formula "72") (ifInst ""  (formula "99")) (ifInst ""  (formula "49")))
                           (rule "applyEqReverse" (formula "73") (term "0,0,1") (ifseqformula "72"))
                           (rule "hideAuxiliaryEq" (formula "72"))
                           (rule "eqSymm" (formula "72") (term "0,1"))
                           (rule "applyEq" (formula "72") (term "1,0,1") (ifseqformula "5"))
                           (rule "pullOutSelect" (formula "72") (term "0,0,1") (inst "selectSK=org_bouncycastle_math_ec_ECPoint_value_5"))
                           (rule "simplifySelectOfAnonEQ" (formula "72") (ifseqformula "26"))
                            (builtin "One Step Simplification" (formula "72") (ifInst ""  (formula "98")) (ifInst ""  (formula "14")))
                           (rule "applyEqReverse" (formula "73") (term "0,0,1") (ifseqformula "72"))
                            (builtin "One Step Simplification" (formula "73"))
                           (rule "notLeft" (formula "73"))
                           (rule "hideAuxiliaryEq" (formula "72"))
                           (rule "Class_invariant_axiom_for_org_bouncycastle_math_ec_ECPoint" (formula "78") (term "0"))
                            (builtin "One Step Simplification" (formula "78"))
                           (rule "Class_invariant_axiom_for_org_bouncycastle_math_ec_ECPoint" (formula "78"))
                           (rule "closeTrue" (formula "78"))
                        )
                     )
                     (branch "result_228_A_1.value@heapAtPre_A«anonHeapFunction» ≥ 0 FALSE"
                        (rule "inEqSimp_geqRight" (formula "79"))
                        (rule "times_zero_1" (formula "1") (term "1,0,0"))
                        (rule "add_zero_right" (formula "1") (term "0,0"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "1"))
                        (rule "mul_literals" (formula "1") (term "1"))
                        (rule "inEqSimp_contradEq3" (formula "31") (term "0") (ifseqformula "1"))
                        (rule "mul_literals" (formula "31") (term "1,0,0,0"))
                        (rule "add_literals" (formula "31") (term "0,0,0"))
                        (rule "qeq_literals" (formula "31") (term "0,0"))
                         (builtin "One Step Simplification" (formula "31"))
                        (rule "andLeft" (formula "31"))
                        (rule "andLeft" (formula "31"))
                        (rule "applyEq" (formula "35") (term "0,0") (ifseqformula "32"))
                        (rule "polySimp_mulComm0" (formula "35") (term "0"))
                        (rule "applyEq" (formula "31") (term "0") (ifseqformula "35"))
                        (rule "inEqSimp_homoInEq0" (formula "31"))
                        (rule "polySimp_mulComm0" (formula "31") (term "1,0"))
                        (rule "polySimp_rightDist" (formula "31") (term "1,0"))
                        (rule "polySimp_mulLiterals" (formula "31") (term "1,1,0"))
                        (rule "polySimp_elimOne" (formula "31") (term "1,1,0"))
                        (rule "polySimp_mulComm0" (formula "31") (term "0,1,0"))
                        (rule "polySimp_addAssoc" (formula "31") (term "0"))
                        (rule "polySimp_addComm0" (formula "31") (term "0,0"))
                        (rule "polySimp_pullOutFactor2b" (formula "31") (term "0"))
                        (rule "add_literals" (formula "31") (term "1,1,0"))
                        (rule "times_zero_1" (formula "31") (term "1,0"))
                        (rule "add_zero_right" (formula "31") (term "0"))
                        (rule "applyEq" (formula "33") (term "0") (ifseqformula "35"))
                        (rule "inEqSimp_homoInEq1" (formula "33"))
                        (rule "polySimp_mulComm0" (formula "33") (term "1,0"))
                        (rule "polySimp_rightDist" (formula "33") (term "1,0"))
                        (rule "polySimp_mulLiterals" (formula "33") (term "1,1,0"))
                        (rule "polySimp_elimOne" (formula "33") (term "1,1,0"))
                        (rule "polySimp_mulComm0" (formula "33") (term "0,1,0"))
                        (rule "polySimp_addComm1" (formula "33") (term "0"))
                        (rule "polySimp_addAssoc" (formula "33") (term "0,0"))
                        (rule "polySimp_addComm1" (formula "33") (term "0,0,0"))
                        (rule "polySimp_pullOutFactor2b" (formula "33") (term "0,0"))
                        (rule "add_literals" (formula "33") (term "1,1,0,0"))
                        (rule "times_zero_1" (formula "33") (term "1,0,0"))
                        (rule "add_zero_right" (formula "33") (term "0,0"))
                        (rule "applyEq" (formula "34") (term "0,1") (ifseqformula "32"))
                        (rule "inEqSimp_invertInEq1" (formula "31"))
                        (rule "times_zero_2" (formula "31") (term "1"))
                        (rule "polySimp_mulLiterals" (formula "31") (term "0"))
                        (rule "polySimp_elimOne" (formula "31") (term "0"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "33"))
                        (rule "polySimp_mulComm0" (formula "33") (term "1"))
                        (rule "polySimp_rightDist" (formula "33") (term "1"))
                        (rule "polySimp_mulLiterals" (formula "33") (term "1,1"))
                        (rule "mul_literals" (formula "33") (term "0,1"))
                        (rule "polySimp_elimOne" (formula "33") (term "1,1"))
                        (rule "shift_paren_or" (formula "3") (term "0,0,0"))
                         (builtin "One Step Simplification" (formula "3"))
                        (rule "eqSymm" (formula "3") (term "1,1,0,0,0"))
                        (rule "castedGetAny" (formula "3") (term "0,0,1,0,0,0"))
                        (rule "castedGetAny" (formula "3") (term "1,0,0,0,0,0,0"))
                        (rule "castedGetAny" (formula "3") (term "0,1,1,0,0,0"))
                         (builtin "One Step Simplification" (formula "3"))
                        (rule "true_left" (formula "3"))
                        (rule "cnf_rightDist" (formula "2") (term "0,0,0"))
                        (rule "distr_forallAnd" (formula "2") (term "0,0"))
                        (rule "distr_forallAnd" (formula "2") (term "0"))
                        (rule "distr_forallAnd" (formula "2"))
                        (rule "andLeft" (formula "2"))
                        (rule "cnf_rightDist" (formula "4") (term "0,0,0"))
                        (rule "distr_forallAnd" (formula "4") (term "0,0"))
                        (rule "distr_forallAnd" (formula "4") (term "0"))
                        (rule "distr_forallAnd" (formula "4"))
                        (rule "andLeft" (formula "4"))
                        (rule "commute_or_2" (formula "2") (term "0,0,0"))
                         (builtin "One Step Simplification" (formula "2"))
                        (rule "eqSymm" (formula "2") (term "1,0,0,0,0"))
                        (rule "castedGetAny" (formula "2") (term "1,0,0,1,0,0,0"))
                        (rule "castedGetAny" (formula "2") (term "0,0,0,0,0,0"))
                        (rule "castedGetAny" (formula "2") (term "0,1,0,0,0,0"))
                         (builtin "One Step Simplification" (formula "2"))
                        (rule "true_left" (formula "2"))
                        (rule "commute_or_2" (formula "3") (term "0,0,0"))
                         (builtin "One Step Simplification" (formula "3"))
                        (rule "eqSymm" (formula "3") (term "1,0,0,0,0"))
                        (rule "castedGetAny" (formula "3") (term "0,0,0,0,0,0"))
                        (rule "castedGetAny" (formula "3") (term "1,0,0,1,0,0,0"))
                        (rule "castedGetAny" (formula "3") (term "0,1,0,0,0,0"))
                         (builtin "One Step Simplification" (formula "3"))
                        (rule "true_left" (formula "3"))
                        (rule "shift_paren_or" (formula "2") (term "0,0,0"))
                         (builtin "One Step Simplification" (formula "2"))
                        (rule "eqSymm" (formula "2") (term "1,1,0,0,0"))
                        (rule "castedGetAny" (formula "2") (term "1,0,0,0,0,0,0"))
                        (rule "castedGetAny" (formula "2") (term "0,0,1,0,0,0"))
                        (rule "castedGetAny" (formula "2") (term "0,1,1,0,0,0"))
                         (builtin "One Step Simplification" (formula "2"))
                        (rule "true_left" (formula "2"))
                        (rule "Use_information_flow_contract_for_compareTo_325434207" (formula "20") (ifseqformula "20"))
                         (builtin "One Step Simplification" (formula "20") (ifInst ""  (formula "94")) (ifInst ""  (formula "94")))
                        (rule "true_left" (formula "20"))
                        (rule "Use_information_flow_contract_for_getOrder_757678341" (formula "61") (ifseqformula "26"))
                        (rule "replace_known_left" (formula "61") (term "1,1") (ifseqformula "8"))
                         (builtin "One Step Simplification" (formula "61"))
                        (rule "true_left" (formula "61"))
                        (rule "Use_information_flow_contract_for_getOrder_757678341" (formula "61") (ifseqformula "61"))
                         (builtin "One Step Simplification" (formula "61"))
                        (rule "true_left" (formula "61"))
                        (rule "Use_information_flow_contract_for_getOrder_757678341" (formula "26") (ifseqformula "26"))
                         (builtin "One Step Simplification" (formula "26"))
                        (rule "true_left" (formula "26"))
                        (rule "Use_information_flow_contract_for_compareTo_325434207" (formula "20") (ifseqformula "55"))
                        (rule "eqSymm" (formula "20") (term "1,0,1"))
                        (rule "eqSymm" (formula "20") (term "1,1"))
                        (rule "eqSymm" (formula "20") (term "0,0,1"))
                        (rule "replace_known_right" (formula "20") (term "0,1,0,0") (ifseqformula "94"))
                         (builtin "One Step Simplification" (formula "20") (ifInst ""  (formula "95")) (ifInst ""  (formula "7")))
                        (rule "applyEqRigid" (formula "20") (term "0,0,1") (ifseqformula "57"))
                        (rule "eqSymm" (formula "20") (term "0,1"))
                        (rule "replace_known_left" (formula "20") (term "0,1") (ifseqformula "22"))
                         (builtin "One Step Simplification" (formula "20"))
                        (rule "Class_invariant_axiom_for_java_math_BigInteger" (formula "20") (term "1,0"))
                        (rule "replace_known_right" (formula "20") (term "0,0,1,0") (ifseqformula "95"))
                         (builtin "One Step Simplification" (formula "20") (ifInst ""  (formula "57")))
                        (rule "Class_invariant_axiom_for_java_math_BigInteger" (formula "20") (term "0"))
                        (rule "replace_known_right" (formula "20") (term "0,0,0") (ifseqformula "94"))
                         (builtin "One Step Simplification" (formula "20") (ifInst ""  (formula "22")))
                        (rule "applyEq" (formula "56") (term "4") (ifseqformula "20"))
                        (rule "applyEq" (formula "55") (term "0") (ifseqformula "20"))
                        (rule "applyEq" (formula "48") (term "0") (ifseqformula "20"))
                        (rule "Use_information_flow_contract_for_multiply_1272441881_0" (formula "72") (ifseqformula "39"))
                        (rule "replaceKnownSelect_taclet21_12" (formula "72") (term "0,1,1"))
                        (rule "replaceKnownSelect_taclet21_11" (formula "72") (term "1,1,1"))
                        (rule "replaceKnownAuxiliaryConstant_taclet0101021_19" (formula "72") (term "0,1,1"))
                        (rule "replaceKnownAuxiliaryConstant_taclet01021_17" (formula "72") (term "1,1,1"))
                        (rule "replaceKnownSelect_taclet21_8" (formula "72") (term "1,1,0,1"))
                        (rule "replaceKnownSelect_taclet21_9" (formula "72") (term "0,1,0,1"))
                        (rule "replaceKnownAuxiliaryConstant_taclet21_10" (formula "72") (term "1,1,0,1"))
                         (builtin "One Step Simplification" (formula "72") (ifInst ""  (formula "84")) (ifInst ""  (formula "83")))
                        (rule "eqSymm" (formula "72") (term "1,1"))
                        (rule "replace_known_right" (formula "72") (term "1,1") (ifseqformula "101"))
                         (builtin "One Step Simplification" (formula "72"))
                        (rule "pullOutSelect" (formula "72") (term "1,0,1") (inst "selectSK=org_bouncycastle_math_ec_ECPoint_value_4"))
                        (rule "simplifySelectOfAnonEQ" (formula "72") (ifseqformula "28"))
                         (builtin "One Step Simplification" (formula "72") (ifInst ""  (formula "98")) (ifInst ""  (formula "15")))
                        (rule "applyEqReverse" (formula "73") (term "1,0,1") (ifseqformula "72"))
                        (rule "hideAuxiliaryEq" (formula "72"))
                        (rule "pullOutSelect" (formula "72") (term "0,0,1") (inst "selectSK=org_bouncycastle_math_ec_ECPoint_value_5"))
                        (rule "simplifySelectOfAnonEQ" (formula "72") (ifseqformula "62"))
                         (builtin "One Step Simplification" (formula "72") (ifInst ""  (formula "99")) (ifInst ""  (formula "50")))
                        (rule "applyEqReverse" (formula "73") (term "0,0,1") (ifseqformula "72"))
                        (rule "hideAuxiliaryEq" (formula "72"))
                        (rule "replace_known_left" (formula "72") (term "0,1") (ifseqformula "6"))
                         (builtin "One Step Simplification" (formula "72"))
                        (rule "notLeft" (formula "72"))
                        (rule "Class_invariant_axiom_for_org_bouncycastle_math_ec_ECPoint" (formula "78") (term "1"))
                         (builtin "One Step Simplification" (formula "78"))
                        (rule "Class_invariant_axiom_for_org_bouncycastle_math_ec_ECPoint" (formula "78"))
                        (rule "closeTrue" (formula "78"))
                     )
                  )
                  (branch " resultAtPost_226_B.<created>@anon_heap_mod«anonHeapFunction» = TRUE FALSE"
                     (rule "applyEqReverse" (formula "106") (term "1") (ifseqformula "8"))
                     (rule "hideAuxiliaryEq" (formula "8"))
                     (rule "replace_known_right" (formula "75") (term "0") (ifseqformula "82"))
                      (builtin "One Step Simplification" (formula "75"))
                     (rule "commute_or" (formula "3") (term "0,1,0,0,0"))
                     (rule "commute_or" (formula "2") (term "0,0,0,0"))
                     (rule "onlyCreatedObjectsAreReferenced" (formula "98") (term "0") (ifseqformula "54"))
                     (rule "replace_known_left" (formula "1") (term "1") (ifseqformula "60"))
                      (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "99")))
                     (rule "true_left" (formula "1"))
                     (rule "onlyCreatedObjectsAreReferenced" (formula "30") (term "2") (ifseqformula "21"))
                     (rule "replace_known_right" (formula "30") (term "0") (ifseqformula "96"))
                      (builtin "One Step Simplification" (formula "30") (ifInst ""  (formula "15")))
                     (rule "true_left" (formula "30"))
                     (rule "onlyCreatedObjectsAreReferenced" (formula "13") (term "1,1,0") (ifseqformula "21"))
                     (rule "replace_known_right" (formula "13") (term "0") (ifseqformula "94"))
                      (builtin "One Step Simplification" (formula "13") (ifInst ""  (formula "15")))
                     (rule "true_left" (formula "13"))
                     (rule "onlyCreatedObjectsAreReferenced" (formula "13") (term "1,0") (ifseqformula "21"))
                     (rule "replace_known_right" (formula "13") (term "0") (ifseqformula "92"))
                      (builtin "One Step Simplification" (formula "13") (ifInst ""  (formula "14")))
                     (rule "true_left" (formula "13"))
                     (rule "onlyCreatedObjectsAreReferenced" (formula "47") (term "1,0") (ifseqformula "54"))
                     (rule "replace_known_right" (formula "47") (term "0") (ifseqformula "95"))
                      (builtin "One Step Simplification" (formula "47") (ifInst ""  (formula "48")))
                     (rule "true_left" (formula "47"))
                     (rule "onlyCreatedObjectsAreReferenced" (formula "26") (term "1,0") (ifseqformula "21"))
                     (rule "replace_known_right" (formula "26") (term "0") (ifseqformula "98"))
                      (builtin "One Step Simplification" (formula "26") (ifInst ""  (formula "27")))
                     (rule "true_left" (formula "26"))
                     (rule "onlyCreatedObjectsAreReferenced" (formula "46") (term "1,0") (ifseqformula "54"))
                     (rule "replace_known_right" (formula "46") (term "0") (ifseqformula "93"))
                      (builtin "One Step Simplification" (formula "46") (ifInst ""  (formula "47")))
                     (rule "true_left" (formula "46"))
                     (rule "onlyCreatedObjectsAreReferenced" (formula "63") (term "2") (ifseqformula "54"))
                     (rule "replace_known_right" (formula "63") (term "0") (ifseqformula "97"))
                      (builtin "One Step Simplification" (formula "63") (ifInst ""  (formula "48")))
                     (rule "true_left" (formula "63"))
                     (rule "commute_or" (formula "2") (term "0,1,0,0,0"))
                     (rule "commute_or" (formula "1") (term "0,0,0,0"))
                     (rule "commute_or" (formula "1") (term "0,1,0,0,0"))
                     (rule "commute_or_2" (formula "4") (term "0,0,0"))
                     (rule "commute_or_2" (formula "3") (term "0,0,0"))
                     (rule "commute_and" (formula "32") (term "0,1"))
                     (rule "commute_or_2" (formula "2") (term "0,0,0"))
                     (rule "commute_or_2" (formula "1") (term "0,0,0"))
                     (rule "shift_paren_or" (formula "6") (term "0,0,0,0,0"))
                     (rule "commute_or" (formula "5") (term "1,0,0,0,0,0"))
                     (rule "shift_paren_or" (formula "4") (term "0,0,0,0"))
                     (rule "commute_or_2" (formula "3") (term "1,0,0,0,0"))
                     (rule "commute_or_2" (formula "2") (term "1,0,0,0,0"))
                     (rule "shift_paren_or" (formula "1") (term "0,0,0,0"))
                     (rule "commute_or_2" (formula "6") (term "0,0,0,0,0"))
                      (builtin "One Step Simplification" (formula "6"))
                     (rule "commute_or_2" (formula "6") (term "0,0,0,0"))
                     (rule "shift_paren_or" (formula "3") (term "0,0,0,0"))
                     (rule "shift_paren_or" (formula "2") (term "0,0,0,0"))
                     (rule "commute_and" (formula "4") (term "1,0,0,0"))
                     (rule "commute_and" (formula "3") (term "1,0,0,0"))
                     (rule "commute_and" (formula "2") (term "1,0,0,0"))
                     (rule "cnf_rightDist" (formula "6") (term "0,0,0"))
                     (rule "distr_forallAnd" (formula "6") (term "0,0"))
                     (rule "distr_forallAnd" (formula "6") (term "0"))
                     (rule "distr_forallAnd" (formula "6"))
                     (rule "andLeft" (formula "6"))
                     (rule "commute_or_2" (formula "6") (term "0,0,0"))
                      (builtin "One Step Simplification" (formula "6"))
                     (rule "eqSymm" (formula "6") (term "1,0,0,0,0"))
                     (rule "castedGetAny" (formula "6") (term "0,0,0,0,0,0"))
                     (rule "castedGetAny" (formula "6") (term "1,0,0,1,0,0,0"))
                     (rule "castedGetAny" (formula "6") (term "0,1,0,0,0,0"))
                      (builtin "One Step Simplification" (formula "6"))
                     (rule "true_left" (formula "6"))
                     (rule "shift_paren_or" (formula "6") (term "0,0,0"))
                      (builtin "One Step Simplification" (formula "6"))
                     (rule "eqSymm" (formula "6") (term "1,1,0,0,0"))
                     (rule "castedGetAny" (formula "6") (term "0,0,1,0,0,0"))
                     (rule "castedGetAny" (formula "6") (term "0,0,0,0,0,0"))
                     (rule "castedGetAny" (formula "6") (term "0,1,1,0,0,0"))
                      (builtin "One Step Simplification" (formula "6"))
                     (rule "true_left" (formula "6"))
                     (rule "commute_and" (formula "1") (term "1,0,0,0"))
                     (rule "shift_paren_or" (formula "5") (term "0,0,0,0,0"))
                      (builtin "One Step Simplification" (formula "5"))
                     (rule "commute_or_2" (formula "5") (term "0,0,0,0"))
                     (rule "shift_paren_or" (formula "4") (term "0,0,0,0,0"))
                      (builtin "One Step Simplification" (formula "4"))
                     (rule "commute_or_2" (formula "4") (term "0,0,0,0"))
                     (rule "shift_paren_or" (formula "1") (term "0,0,0,0,0"))
                      (builtin "One Step Simplification" (formula "1"))
                     (rule "commute_or_2" (formula "1") (term "0,0,0,0"))
                     (rule "shift_paren_or" (formula "3") (term "0,0,0,0,0"))
                      (builtin "One Step Simplification" (formula "3"))
                     (rule "shift_paren_or" (formula "2") (term "0,0,0,0,0"))
                      (builtin "One Step Simplification" (formula "2"))
                     (rule "cnf_rightDist" (formula "5") (term "0,0,0"))
                     (rule "distr_forallAnd" (formula "5") (term "0,0"))
                     (rule "distr_forallAnd" (formula "5") (term "0"))
                     (rule "distr_forallAnd" (formula "5"))
                     (rule "andLeft" (formula "5"))
                     (rule "commute_or_2" (formula "5") (term "0,0,0"))
                      (builtin "One Step Simplification" (formula "5"))
                     (rule "eqSymm" (formula "5") (term "1,0,0,0,0"))
                     (rule "castedGetAny" (formula "5") (term "1,0,0,1,0,0,0"))
                     (rule "castedGetAny" (formula "5") (term "0,0,0,0,0,0"))
                     (rule "castedGetAny" (formula "5") (term "0,1,0,0,0,0"))
                      (builtin "One Step Simplification" (formula "5"))
                     (rule "true_left" (formula "5"))
                     (rule "shift_paren_or" (formula "5") (term "0,0,0"))
                      (builtin "One Step Simplification" (formula "5"))
                     (rule "eqSymm" (formula "5") (term "1,1,0,0,0"))
                     (rule "castedGetAny" (formula "5") (term "0,0,1,0,0,0"))
                     (rule "castedGetAny" (formula "5") (term "0,0,0,0,0,0"))
                     (rule "castedGetAny" (formula "5") (term "0,1,1,0,0,0"))
                      (builtin "One Step Simplification" (formula "5"))
                     (rule "true_left" (formula "5"))
                     (rule "cnf_rightDist" (formula "4") (term "0,0,0"))
                     (rule "distr_forallAnd" (formula "4") (term "0,0"))
                     (rule "distr_forallAnd" (formula "4") (term "0"))
                     (rule "distr_forallAnd" (formula "4"))
                     (rule "andLeft" (formula "4"))
                     (rule "cnf_rightDist" (formula "1") (term "0,0,0"))
                     (rule "distr_forallAnd" (formula "1") (term "0,0"))
                     (rule "distr_forallAnd" (formula "1") (term "0"))
                     (rule "distr_forallAnd" (formula "1"))
                     (rule "andLeft" (formula "1"))
                     (rule "shift_paren_or" (formula "5") (term "0,0,0"))
                      (builtin "One Step Simplification" (formula "5"))
                     (rule "eqSymm" (formula "5") (term "1,1,0,0,0"))
                     (rule "castedGetAny" (formula "5") (term "0,0,1,0,0,0"))
                     (rule "castedGetAny" (formula "5") (term "0,0,0,0,0,0"))
                     (rule "castedGetAny" (formula "5") (term "0,1,1,0,0,0"))
                      (builtin "One Step Simplification" (formula "5"))
                     (rule "true_left" (formula "5"))
                     (rule "cnf_rightDist" (formula "3") (term "0,0,0"))
                     (rule "distr_forallAnd" (formula "3") (term "0,0"))
                     (rule "distr_forallAnd" (formula "3") (term "0"))
                     (rule "distr_forallAnd" (formula "3"))
                     (rule "andLeft" (formula "3"))
                     (rule "cnf_rightDist" (formula "2") (term "0,0,0"))
                     (rule "distr_forallAnd" (formula "2") (term "0,0"))
                     (rule "distr_forallAnd" (formula "2") (term "0"))
                     (rule "distr_forallAnd" (formula "2"))
                     (rule "andLeft" (formula "2"))
                     (rule "shift_paren_or" (formula "4") (term "0,0,0"))
                      (builtin "One Step Simplification" (formula "4"))
                     (rule "eqSymm" (formula "4") (term "1,1,0,0,0"))
                     (rule "castedGetAny" (formula "4") (term "0,0,0,0,0,0"))
                     (rule "castedGetAny" (formula "4") (term "0,0,1,0,0,0"))
                     (rule "castedGetAny" (formula "4") (term "0,1,1,0,0,0"))
                      (builtin "One Step Simplification" (formula "4"))
                     (rule "true_left" (formula "4"))
                     (rule "cnf_rightDist" (formula "4") (term "0,0,0"))
                     (rule "distr_forallAnd" (formula "4") (term "0,0"))
                     (rule "distr_forallAnd" (formula "4") (term "0"))
                     (rule "distr_forallAnd" (formula "4"))
                     (rule "andLeft" (formula "4"))
                     (rule "commute_or_2" (formula "4") (term "0,0,0"))
                      (builtin "One Step Simplification" (formula "4"))
                     (rule "eqSymm" (formula "4") (term "1,0,0,0,0"))
                     (rule "castedGetAny" (formula "4") (term "0,0,0,0,0,0"))
                     (rule "castedGetAny" (formula "4") (term "1,0,0,1,0,0,0"))
                     (rule "castedGetAny" (formula "4") (term "0,1,0,0,0,0"))
                      (builtin "One Step Simplification" (formula "4"))
                     (rule "true_left" (formula "4"))
                     (rule "cnf_rightDist" (formula "1") (term "0,0,0"))
                     (rule "distr_forallAnd" (formula "1") (term "0,0"))
                     (rule "distr_forallAnd" (formula "1") (term "0"))
                     (rule "distr_forallAnd" (formula "1"))
                     (rule "andLeft" (formula "1"))
                     (rule "shift_paren_or" (formula "4") (term "0,0,0"))
                      (builtin "One Step Simplification" (formula "4"))
                     (rule "eqSymm" (formula "4") (term "1,1,0,0,0"))
                     (rule "castedGetAny" (formula "4") (term "0,0,1,0,0,0"))
                     (rule "castedGetAny" (formula "4") (term "1,0,0,0,0,0,0"))
                     (rule "castedGetAny" (formula "4") (term "0,1,1,0,0,0"))
                      (builtin "One Step Simplification" (formula "4"))
                     (rule "true_left" (formula "4"))
                     (rule "cnf_rightDist" (formula "3") (term "0,0,0"))
                     (rule "distr_forallAnd" (formula "3") (term "0,0"))
                     (rule "distr_forallAnd" (formula "3") (term "0"))
                     (rule "distr_forallAnd" (formula "3"))
                     (rule "andLeft" (formula "3"))
                     (rule "shift_paren_or" (formula "1") (term "0,0,0"))
                      (builtin "One Step Simplification" (formula "1"))
                     (rule "eqSymm" (formula "1") (term "1,1,0,0,0"))
                     (rule "castedGetAny" (formula "1") (term "0,0,1,0,0,0"))
                     (rule "castedGetAny" (formula "1") (term "1,0,0,0,0,0,0"))
                     (rule "castedGetAny" (formula "1") (term "0,1,1,0,0,0"))
                      (builtin "One Step Simplification" (formula "1"))
                     (rule "true_left" (formula "1"))
                     (rule "cnf_rightDist" (formula "1") (term "0,0,0"))
                     (rule "distr_forallAnd" (formula "1") (term "0,0"))
                     (rule "distr_forallAnd" (formula "1") (term "0"))
                     (rule "distr_forallAnd" (formula "1"))
                     (rule "andLeft" (formula "1"))
                     (rule "commute_or_2" (formula "1") (term "0,0,0"))
                      (builtin "One Step Simplification" (formula "1"))
                     (rule "eqSymm" (formula "1") (term "1,0,0,0,0"))
                     (rule "castedGetAny" (formula "1") (term "1,0,0,1,0,0,0"))
                     (rule "castedGetAny" (formula "1") (term "0,0,0,0,0,0"))
                     (rule "castedGetAny" (formula "1") (term "0,1,0,0,0,0"))
                      (builtin "One Step Simplification" (formula "1"))
                     (rule "true_left" (formula "1"))
                     (rule "ifthenelse_split_for" (formula "28") (term "1,1"))
                     (branch "result_228_A_1.value@heapAtPre_A«anonHeapFunction» ≥ 0 TRUE"
                        (rule "cnf_rightDist" (formula "29"))
                        (rule "andLeft" (formula "29"))
                        (rule "commute_or" (formula "30"))
                        (rule "cnf_rightDist" (formula "29"))
                        (rule "andLeft" (formula "29"))
                        (rule "commute_or" (formula "30"))
                        (rule "shift_paren_or" (formula "1") (term "0,0,0"))
                         (builtin "One Step Simplification" (formula "1"))
                        (rule "eqSymm" (formula "1") (term "1,1,0,0,0"))
                        (rule "castedGetAny" (formula "1") (term "1,0,0,0,0,0,0"))
                        (rule "castedGetAny" (formula "1") (term "0,0,1,0,0,0"))
                        (rule "castedGetAny" (formula "1") (term "0,1,1,0,0,0"))
                         (builtin "One Step Simplification" (formula "1"))
                        (rule "true_left" (formula "1"))
                        (rule "cnf_rightDist" (formula "1") (term "0,0,0"))
                        (rule "distr_forallAnd" (formula "1") (term "0,0"))
                        (rule "distr_forallAnd" (formula "1") (term "0"))
                        (rule "distr_forallAnd" (formula "1"))
                        (rule "andLeft" (formula "1"))
                        (rule "commute_or_2" (formula "1") (term "0,0,0"))
                         (builtin "One Step Simplification" (formula "1"))
                        (rule "eqSymm" (formula "1") (term "1,0,0,0,0"))
                        (rule "castedGetAny" (formula "1") (term "1,0,0,1,0,0,0"))
                        (rule "castedGetAny" (formula "1") (term "0,0,0,0,0,0"))
                        (rule "castedGetAny" (formula "1") (term "0,1,0,0,0,0"))
                         (builtin "One Step Simplification" (formula "1"))
                        (rule "true_left" (formula "1"))
                        (rule "shift_paren_or" (formula "1") (term "0,0,0"))
                         (builtin "One Step Simplification" (formula "1"))
                        (rule "eqSymm" (formula "1") (term "1,1,0,0,0"))
                        (rule "castedGetAny" (formula "1") (term "0,0,1,0,0,0"))
                        (rule "castedGetAny" (formula "1") (term "1,0,0,0,0,0,0"))
                        (rule "castedGetAny" (formula "1") (term "0,1,1,0,0,0"))
                         (builtin "One Step Simplification" (formula "1"))
                        (rule "true_left" (formula "1"))
                        (rule "cut_direct" (formula "27") (term "0"))
                        (branch "CUT: result_228_A_1.value@heapAtPre_A«anonHeapFunction» = 0 TRUE"
                            (builtin "One Step Simplification" (formula "28"))
                           (rule "true_left" (formula "28"))
                           (rule "replace_known_left" (formula "29") (term "0") (ifseqformula "27"))
                            (builtin "One Step Simplification" (formula "29"))
                           (rule "true_left" (formula "29"))
                           (rule "replace_known_left" (formula "28") (term "0") (ifseqformula "27"))
                            (builtin "One Step Simplification" (formula "28"))
                           (rule "true_left" (formula "28"))
                           (rule "applyEq" (formula "29") (term "1,0") (ifseqformula "27"))
                           (rule "times_zero_1" (formula "29") (term "0"))
                           (rule "polySimp_homoEq" (formula "29"))
                           (rule "mul_literals" (formula "29") (term "1,0"))
                           (rule "add_zero_right" (formula "29") (term "0"))
                           (rule "applyEq" (formula "26") (term "0") (ifseqformula "27"))
                           (rule "qeq_literals" (formula "26"))
                           (rule "true_left" (formula "26"))
                           (rule "applyEq" (formula "27") (term "1,0") (ifseqformula "26"))
                           (rule "eqSymm" (formula "27"))
                           (rule "polySimp_homoEq" (formula "27"))
                           (rule "polySimp_mulLiterals" (formula "27") (term "1,0"))
                           (rule "polySimp_elimOne" (formula "27") (term "1,0"))
                           (rule "applyEq" (formula "6") (term "1") (ifseqformula "26"))
                           (rule "applyEq" (formula "55") (term "1") (ifseqformula "26"))
                           (rule "applyEq" (formula "22") (term "1") (ifseqformula "26"))
                           (rule "applyEq" (formula "27") (term "1,1,0") (ifseqformula "26"))
                           (rule "polySimp_addComm0" (formula "27") (term "0"))
                           (rule "polySimp_sepNegMonomial" (formula "28"))
                           (rule "polySimp_mulLiterals" (formula "28") (term "0"))
                           (rule "polySimp_elimOne" (formula "28") (term "0"))
                           (rule "applyEq" (formula "3") (term "0") (ifseqformula "28"))
                           (rule "applyEq" (formula "27") (term "0,1,0") (ifseqformula "28"))
                           (rule "polySimp_addComm0" (formula "27") (term "0"))
                           (rule "applyEq" (formula "27") (term "0,0,1,0") (ifseqformula "28"))
                           (rule "polySimp_addComm0" (formula "27") (term "0"))
                           (rule "applyEq" (formula "5") (term "1") (ifseqformula "28"))
                           (rule "polySimp_sepPosMonomial" (formula "27"))
                           (rule "div_axiom" (formula "27") (term "0,1") (inst "quotient=quotient_1"))
                            (builtin "One Step Simplification" (formula "27"))
                           (rule "true_left" (formula "27"))
                           (rule "jdiv_axiom" (formula "27") (term "0"))
                           (rule "eqSymm" (formula "27"))
                           (rule "applyEq" (formula "27") (term "1") (ifseqformula "28"))
                            (builtin "One Step Simplification" (formula "27"))
                           (rule "eqSymm" (formula "27") (term "1"))
                           (rule "polySimp_homoEq" (formula "27") (term "1"))
                           (rule "polySimp_mulLiterals" (formula "27") (term "1,0,1"))
                           (rule "polySimp_elimOne" (formula "27") (term "1,0,1"))
                           (rule "polySimp_sepPosMonomial" (formula "27") (term "1"))
                           (rule "inEqSimp_contradInEq0" (formula "27") (term "0,0") (ifseqformula "3"))
                           (rule "qeq_literals" (formula "27") (term "0,0,0"))
                            (builtin "One Step Simplification" (formula "27"))
                           (rule "true_left" (formula "27"))
                           (rule "Use_information_flow_contract_for_compareTo_325434207" (formula "18") (ifseqformula "18"))
                            (builtin "One Step Simplification" (formula "18") (ifInst ""  (formula "92")) (ifInst ""  (formula "92")))
                           (rule "true_left" (formula "18"))
                           (rule "Use_information_flow_contract_for_getOrder_757678341" (formula "57") (ifseqformula "24"))
                           (rule "applyEq" (formula "57") (term "0,1,1") (ifseqformula "6"))
                           (rule "eqSymm" (formula "57") (term "1,1"))
                           (rule "replace_known_left" (formula "57") (term "1,1") (ifseqformula "26"))
                            (builtin "One Step Simplification" (formula "57"))
                           (rule "true_left" (formula "57"))
                           (rule "Use_information_flow_contract_for_getOrder_757678341" (formula "57") (ifseqformula "57"))
                            (builtin "One Step Simplification" (formula "57"))
                           (rule "true_left" (formula "57"))
                           (rule "Use_information_flow_contract_for_getOrder_757678341" (formula "24") (ifseqformula "24"))
                            (builtin "One Step Simplification" (formula "24"))
                           (rule "true_left" (formula "24"))
                           (rule "Use_information_flow_contract_for_compareTo_325434207" (formula "18") (ifseqformula "51"))
                           (rule "eqSymm" (formula "18") (term "1,1"))
                           (rule "eqSymm" (formula "18") (term "0,0,1"))
                           (rule "eqSymm" (formula "18") (term "1,0,1"))
                           (rule "replace_known_right" (formula "18") (term "0,1,1,0") (ifseqformula "93"))
                            (builtin "One Step Simplification" (formula "18") (ifInst ""  (formula "92")))
                           (rule "applyEqRigid" (formula "18") (term "0,1,0,1") (ifseqformula "53"))
                           (rule "eqSymm" (formula "18") (term "1,0,1"))
                           (rule "replace_known_left" (formula "18") (term "1,0,1") (ifseqformula "20"))
                            (builtin "One Step Simplification" (formula "18"))
                           (rule "applyEq" (formula "18") (term "0,0,1") (ifseqformula "5"))
                           (rule "eqSymm" (formula "18") (term "0,1"))
                           (rule "replace_known_left" (formula "18") (term "0,1") (ifseqformula "29"))
                            (builtin "One Step Simplification" (formula "18"))
                           (rule "Class_invariant_axiom_for_java_math_BigInteger" (formula "18") (term "1,0"))
                           (rule "replace_known_right" (formula "18") (term "0,0,1,0") (ifseqformula "93"))
                            (builtin "One Step Simplification" (formula "18") (ifInst ""  (formula "53")))
                           (rule "Class_invariant_axiom_for_java_math_BigInteger" (formula "18") (term "0"))
                           (rule "replace_known_right" (formula "18") (term "0,0,0") (ifseqformula "92"))
                            (builtin "One Step Simplification" (formula "18") (ifInst ""  (formula "20")))
                           (rule "applyEq" (formula "51") (term "0") (ifseqformula "18"))
                           (rule "applyEq" (formula "51") (term "4") (ifseqformula "18"))
                           (rule "applyEq" (formula "44") (term "0") (ifseqformula "18"))
                           (rule "Use_information_flow_contract_for_multiply_1272441881_0" (formula "69") (ifseqformula "35"))
                           (rule "replaceKnownSelect_taclet21_11" (formula "69") (term "1,1,1"))
                           (rule "replaceKnownSelect_taclet21_12" (formula "69") (term "0,1,1"))
                           (rule "replaceKnownAuxiliaryConstant_taclet01021_17" (formula "69") (term "1,1,1"))
                           (rule "replaceKnownAuxiliaryConstant_taclet1101021_19" (formula "69") (term "0,1,1"))
                           (rule "replaceKnownSelect_taclet21_9" (formula "69") (term "0,1,0,1"))
                           (rule "replaceKnownSelect_taclet21_8" (formula "69") (term "1,1,0,1"))
                           (rule "replaceKnownAuxiliaryConstant_taclet021_15" (formula "69") (term "0,1,0,1"))
                           (rule "replaceKnownAuxiliaryConstant_taclet21_10" (formula "69") (term "1,1,0,1"))
                           (rule "replaceKnownAuxiliaryConstant_taclet021_15" (formula "69") (term "1,1,0,1"))
                            (builtin "One Step Simplification" (formula "69") (ifInst ""  (formula "82")) (ifInst ""  (formula "81")))
                           (rule "eqSymm" (formula "69") (term "1,1"))
                           (rule "replace_known_right" (formula "69") (term "1,1") (ifseqformula "99"))
                            (builtin "One Step Simplification" (formula "69"))
                           (rule "pullOutSelect" (formula "69") (term "1,0,1") (inst "selectSK=org_bouncycastle_math_ec_ECPoint_value_4"))
                           (rule "simplifySelectOfAnonEQ" (formula "69") (ifseqformula "26"))
                            (builtin "One Step Simplification" (formula "69") (ifInst ""  (formula "96")) (ifInst ""  (formula "13")))
                           (rule "applyEqReverse" (formula "70") (term "1,0,1") (ifseqformula "69"))
                           (rule "hideAuxiliaryEq" (formula "69"))
                           (rule "pullOutSelect" (formula "69") (term "0,0,1") (inst "selectSK=org_bouncycastle_math_ec_ECPoint_value_5"))
                           (rule "simplifySelectOfAnonEQ" (formula "69") (ifseqformula "58"))
                            (builtin "One Step Simplification" (formula "69") (ifInst ""  (formula "97")) (ifInst ""  (formula "46")))
                           (rule "applyEqReverse" (formula "70") (term "0,0,1") (ifseqformula "69"))
                           (rule "hideAuxiliaryEq" (formula "69"))
                           (rule "replace_known_left" (formula "69") (term "0,1") (ifseqformula "4"))
                            (builtin "One Step Simplification" (formula "69"))
                           (rule "notLeft" (formula "69"))
                           (rule "Class_invariant_axiom_for_org_bouncycastle_math_ec_ECPoint" (formula "75") (term "1"))
                            (builtin "One Step Simplification" (formula "75"))
                           (rule "Class_invariant_axiom_for_org_bouncycastle_math_ec_ECPoint" (formula "75"))
                           (rule "closeTrue" (formula "75"))
                        )
                        (branch "CUT: result_228_A_1.value@heapAtPre_A«anonHeapFunction» = 0 FALSE"
                            (builtin "One Step Simplification" (formula "27"))
                           (rule "replace_known_right" (formula "28") (term "0") (ifseqformula "79"))
                            (builtin "One Step Simplification" (formula "28"))
                           (rule "replace_known_right" (formula "29") (term "0") (ifseqformula "79"))
                            (builtin "One Step Simplification" (formula "29"))
                           (rule "applyEq" (formula "31") (term "0,0") (ifseqformula "28"))
                           (rule "polySimp_mulComm0" (formula "31") (term "0"))
                           (rule "applyEq" (formula "29") (term "0") (ifseqformula "31"))
                           (rule "inEqSimp_homoInEq1" (formula "29"))
                           (rule "polySimp_mulComm0" (formula "29") (term "1,0"))
                           (rule "polySimp_rightDist" (formula "29") (term "1,0"))
                           (rule "polySimp_mulLiterals" (formula "29") (term "1,1,0"))
                           (rule "polySimp_elimOne" (formula "29") (term "1,1,0"))
                           (rule "polySimp_mulComm0" (formula "29") (term "0,1,0"))
                           (rule "polySimp_addComm1" (formula "29") (term "0"))
                           (rule "polySimp_addAssoc" (formula "29") (term "0,0"))
                           (rule "polySimp_addComm1" (formula "29") (term "0,0,0"))
                           (rule "polySimp_pullOutFactor2b" (formula "29") (term "0,0"))
                           (rule "add_literals" (formula "29") (term "1,1,0,0"))
                           (rule "times_zero_1" (formula "29") (term "1,0,0"))
                           (rule "add_zero_right" (formula "29") (term "0,0"))
                           (rule "applyEq" (formula "27") (term "0") (ifseqformula "31"))
                           (rule "inEqSimp_homoInEq0" (formula "27"))
                           (rule "polySimp_mulComm0" (formula "27") (term "1,0"))
                           (rule "polySimp_rightDist" (formula "27") (term "1,0"))
                           (rule "polySimp_mulLiterals" (formula "27") (term "1,1,0"))
                           (rule "polySimp_elimOne" (formula "27") (term "1,1,0"))
                           (rule "polySimp_mulComm0" (formula "27") (term "0,1,0"))
                           (rule "polySimp_addAssoc" (formula "27") (term "0"))
                           (rule "polySimp_addComm0" (formula "27") (term "0,0"))
                           (rule "polySimp_pullOutFactor2b" (formula "27") (term "0"))
                           (rule "add_literals" (formula "27") (term "1,1,0"))
                           (rule "times_zero_1" (formula "27") (term "1,0"))
                           (rule "add_zero_right" (formula "27") (term "0"))
                           (rule "applyEq" (formula "30") (term "0,1") (ifseqformula "28"))
                           (rule "inEqSimp_sepNegMonomial0" (formula "29"))
                           (rule "polySimp_mulLiterals" (formula "29") (term "0"))
                           (rule "polySimp_elimOne" (formula "29") (term "0"))
                           (rule "inEqSimp_invertInEq1" (formula "27"))
                           (rule "polySimp_mulLiterals" (formula "27") (term "0"))
                           (rule "mul_literals" (formula "27") (term "1"))
                           (rule "polySimp_elimOne" (formula "27") (term "0"))
                           (rule "inEqSimp_strengthen1" (formula "26") (ifseqformula "79"))
                           (rule "add_literals" (formula "26") (term "1"))
                           (rule "inEqSimp_contradEq7" (formula "79") (ifseqformula "26"))
                           (rule "mul_literals" (formula "79") (term "1,0,0"))
                           (rule "add_zero_right" (formula "79") (term "0,0"))
                           (rule "leq_literals" (formula "79") (term "0"))
                            (builtin "One Step Simplification" (formula "79"))
                           (rule "false_right" (formula "79"))
                           (rule "Use_information_flow_contract_for_compareTo_325434207" (formula "18") (ifseqformula "18"))
                            (builtin "One Step Simplification" (formula "18") (ifInst ""  (formula "95")) (ifInst ""  (formula "95")))
                           (rule "true_left" (formula "18"))
                           (rule "Use_information_flow_contract_for_getOrder_757678341" (formula "60") (ifseqformula "24"))
                           (rule "replace_known_left" (formula "60") (term "1,1") (ifseqformula "6"))
                            (builtin "One Step Simplification" (formula "60"))
                           (rule "true_left" (formula "60"))
                           (rule "Use_information_flow_contract_for_getOrder_757678341" (formula "60") (ifseqformula "60"))
                            (builtin "One Step Simplification" (formula "60"))
                           (rule "true_left" (formula "60"))
                           (rule "Use_information_flow_contract_for_getOrder_757678341" (formula "24") (ifseqformula "24"))
                            (builtin "One Step Simplification" (formula "24"))
                           (rule "true_left" (formula "24"))
                           (rule "Use_information_flow_contract_for_compareTo_325434207" (formula "18") (ifseqformula "54"))
                           (rule "eqSymm" (formula "18") (term "1,0,1"))
                           (rule "eqSymm" (formula "18") (term "1,1"))
                           (rule "eqSymm" (formula "18") (term "0,0,1"))
                           (rule "replace_known_right" (formula "18") (term "0,1,1,0") (ifseqformula "96"))
                            (builtin "One Step Simplification" (formula "18") (ifInst ""  (formula "95")) (ifInst ""  (formula "5")))
                           (rule "applyEq" (formula "18") (term "0,0,1") (ifseqformula "56"))
                           (rule "eqSymm" (formula "18") (term "0,1"))
                           (rule "replace_known_left" (formula "18") (term "0,1") (ifseqformula "20"))
                            (builtin "One Step Simplification" (formula "18"))
                           (rule "Class_invariant_axiom_for_java_math_BigInteger" (formula "18") (term "1,0"))
                           (rule "replace_known_left" (formula "18") (term "1,1,0") (ifseqformula "56"))
                            (builtin "One Step Simplification" (formula "18") (ifInst ""  (formula "96")))
                           (rule "Class_invariant_axiom_for_java_math_BigInteger" (formula "18") (term "0"))
                           (rule "replace_known_right" (formula "18") (term "0,0,0") (ifseqformula "95"))
                            (builtin "One Step Simplification" (formula "18") (ifInst ""  (formula "20")))
                           (rule "applyEq" (formula "54") (term "0") (ifseqformula "18"))
                           (rule "applyEq" (formula "47") (term "0") (ifseqformula "18"))
                           (rule "applyEq" (formula "53") (term "4") (ifseqformula "18"))
                           (rule "Use_information_flow_contract_for_multiply_1272441881_0" (formula "72") (ifseqformula "38"))
                           (rule "replaceKnownSelect_taclet21_12" (formula "72") (term "0,1,1"))
                           (rule "replaceKnownSelect_taclet21_11" (formula "72") (term "1,1,1"))
                           (rule "replaceKnownAuxiliaryConstant_taclet1101021_19" (formula "72") (term "0,1,1"))
                           (rule "replaceKnownAuxiliaryConstant_taclet01021_17" (formula "72") (term "1,1,1"))
                           (rule "replaceKnownSelect_taclet21_9" (formula "72") (term "0,1,0,1"))
                           (rule "replaceKnownSelect_taclet21_8" (formula "72") (term "1,1,0,1"))
                           (rule "replaceKnownAuxiliaryConstant_taclet021_15" (formula "72") (term "0,1,0,1"))
                           (rule "replaceKnownAuxiliaryConstant_taclet21_10" (formula "72") (term "1,1,0,1"))
                           (rule "replaceKnownAuxiliaryConstant_taclet021_15" (formula "72") (term "1,1,0,1"))
                            (builtin "One Step Simplification" (formula "72") (ifInst ""  (formula "85")) (ifInst ""  (formula "84")))
                           (rule "eqSymm" (formula "72") (term "1,1"))
                           (rule "replace_known_right" (formula "72") (term "1,1") (ifseqformula "102"))
                            (builtin "One Step Simplification" (formula "72"))
                           (rule "pullOutSelect" (formula "72") (term "0,0,1") (inst "selectSK=org_bouncycastle_math_ec_ECPoint_value_4"))
                           (rule "simplifySelectOfAnonEQ" (formula "72") (ifseqformula "61"))
                            (builtin "One Step Simplification" (formula "72") (ifInst ""  (formula "100")) (ifInst ""  (formula "49")))
                           (rule "applyEqReverse" (formula "73") (term "0,0,1") (ifseqformula "72"))
                           (rule "hideAuxiliaryEq" (formula "72"))
                           (rule "eqSymm" (formula "72") (term "0,1"))
                           (rule "applyEq" (formula "72") (term "1,0,1") (ifseqformula "4"))
                           (rule "pullOutSelect" (formula "72") (term "0,0,1") (inst "selectSK=org_bouncycastle_math_ec_ECPoint_value_5"))
                           (rule "simplifySelectOfAnonEQ" (formula "72") (ifseqformula "26"))
                            (builtin "One Step Simplification" (formula "72") (ifInst ""  (formula "99")) (ifInst ""  (formula "13")))
                           (rule "applyEqReverse" (formula "73") (term "0,0,1") (ifseqformula "72"))
                            (builtin "One Step Simplification" (formula "73"))
                           (rule "notLeft" (formula "73"))
                           (rule "hideAuxiliaryEq" (formula "72"))
                           (rule "Class_invariant_axiom_for_org_bouncycastle_math_ec_ECPoint" (formula "78") (term "0"))
                            (builtin "One Step Simplification" (formula "78"))
                           (rule "Class_invariant_axiom_for_org_bouncycastle_math_ec_ECPoint" (formula "78"))
                           (rule "closeTrue" (formula "78"))
                        )
                     )
                     (branch "result_228_A_1.value@heapAtPre_A«anonHeapFunction» ≥ 0 FALSE"
                        (rule "inEqSimp_geqRight" (formula "78"))
                        (rule "mul_literals" (formula "1") (term "1,0,0"))
                        (rule "add_literals" (formula "1") (term "0,0"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "1"))
                        (rule "mul_literals" (formula "1") (term "1"))
                        (rule "inEqSimp_contradEq3" (formula "29") (term "0") (ifseqformula "1"))
                        (rule "times_zero_1" (formula "29") (term "1,0,0,0"))
                        (rule "add_literals" (formula "29") (term "0,0,0"))
                        (rule "qeq_literals" (formula "29") (term "0,0"))
                         (builtin "One Step Simplification" (formula "29"))
                        (rule "andLeft" (formula "29"))
                        (rule "andLeft" (formula "29"))
                        (rule "applyEq" (formula "33") (term "0,0") (ifseqformula "30"))
                        (rule "polySimp_mulComm0" (formula "33") (term "0"))
                        (rule "applyEq" (formula "29") (term "0") (ifseqformula "33"))
                        (rule "inEqSimp_homoInEq0" (formula "29"))
                        (rule "polySimp_mulComm0" (formula "29") (term "1,0"))
                        (rule "polySimp_rightDist" (formula "29") (term "1,0"))
                        (rule "polySimp_mulLiterals" (formula "29") (term "1,1,0"))
                        (rule "polySimp_elimOne" (formula "29") (term "1,1,0"))
                        (rule "polySimp_mulComm0" (formula "29") (term "0,1,0"))
                        (rule "polySimp_addAssoc" (formula "29") (term "0"))
                        (rule "polySimp_addComm0" (formula "29") (term "0,0"))
                        (rule "polySimp_pullOutFactor2b" (formula "29") (term "0"))
                        (rule "add_literals" (formula "29") (term "1,1,0"))
                        (rule "times_zero_1" (formula "29") (term "1,0"))
                        (rule "add_zero_right" (formula "29") (term "0"))
                        (rule "applyEq" (formula "31") (term "0") (ifseqformula "33"))
                        (rule "inEqSimp_homoInEq1" (formula "31"))
                        (rule "polySimp_mulComm0" (formula "31") (term "1,0"))
                        (rule "polySimp_rightDist" (formula "31") (term "1,0"))
                        (rule "polySimp_mulLiterals" (formula "31") (term "1,1,0"))
                        (rule "polySimp_elimOne" (formula "31") (term "1,1,0"))
                        (rule "polySimp_mulComm0" (formula "31") (term "0,1,0"))
                        (rule "polySimp_addComm1" (formula "31") (term "0"))
                        (rule "polySimp_addAssoc" (formula "31") (term "0,0"))
                        (rule "polySimp_addComm1" (formula "31") (term "0,0,0"))
                        (rule "polySimp_pullOutFactor2b" (formula "31") (term "0,0"))
                        (rule "add_literals" (formula "31") (term "1,1,0,0"))
                        (rule "times_zero_1" (formula "31") (term "1,0,0"))
                        (rule "add_zero_right" (formula "31") (term "0,0"))
                        (rule "applyEq" (formula "32") (term "0,1") (ifseqformula "30"))
                        (rule "inEqSimp_invertInEq1" (formula "29"))
                        (rule "times_zero_2" (formula "29") (term "1"))
                        (rule "polySimp_mulLiterals" (formula "29") (term "0"))
                        (rule "polySimp_elimOne" (formula "29") (term "0"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "31"))
                        (rule "polySimp_mulComm0" (formula "31") (term "1"))
                        (rule "polySimp_rightDist" (formula "31") (term "1"))
                        (rule "polySimp_mulLiterals" (formula "31") (term "1,1"))
                        (rule "mul_literals" (formula "31") (term "0,1"))
                        (rule "polySimp_elimOne" (formula "31") (term "1,1"))
                        (rule "shift_paren_or" (formula "2") (term "0,0,0"))
                         (builtin "One Step Simplification" (formula "2"))
                        (rule "eqSymm" (formula "2") (term "1,1,0,0,0"))
                        (rule "castedGetAny" (formula "2") (term "1,0,0,0,0,0,0"))
                        (rule "castedGetAny" (formula "2") (term "0,0,1,0,0,0"))
                        (rule "castedGetAny" (formula "2") (term "0,1,1,0,0,0"))
                         (builtin "One Step Simplification" (formula "2"))
                        (rule "true_left" (formula "2"))
                        (rule "cnf_rightDist" (formula "2") (term "0,0,0"))
                        (rule "distr_forallAnd" (formula "2") (term "0,0"))
                        (rule "distr_forallAnd" (formula "2") (term "0"))
                        (rule "distr_forallAnd" (formula "2"))
                        (rule "andLeft" (formula "2"))
                        (rule "commute_or_2" (formula "2") (term "0,0,0"))
                         (builtin "One Step Simplification" (formula "2"))
                        (rule "eqSymm" (formula "2") (term "1,0,0,0,0"))
                        (rule "castedGetAny" (formula "2") (term "1,0,0,1,0,0,0"))
                        (rule "castedGetAny" (formula "2") (term "0,0,0,0,0,0"))
                        (rule "castedGetAny" (formula "2") (term "0,1,0,0,0,0"))
                         (builtin "One Step Simplification" (formula "2"))
                        (rule "true_left" (formula "2"))
                        (rule "shift_paren_or" (formula "2") (term "0,0,0"))
                         (builtin "One Step Simplification" (formula "2"))
                        (rule "eqSymm" (formula "2") (term "1,1,0,0,0"))
                        (rule "castedGetAny" (formula "2") (term "1,0,0,0,0,0,0"))
                        (rule "castedGetAny" (formula "2") (term "0,0,1,0,0,0"))
                        (rule "castedGetAny" (formula "2") (term "0,1,1,0,0,0"))
                         (builtin "One Step Simplification" (formula "2"))
                        (rule "true_left" (formula "2"))
                        (rule "Use_information_flow_contract_for_compareTo_325434207" (formula "19") (ifseqformula "19"))
                         (builtin "One Step Simplification" (formula "19") (ifInst ""  (formula "95")) (ifInst ""  (formula "95")))
                        (rule "true_left" (formula "19"))
                        (rule "Use_information_flow_contract_for_getOrder_757678341" (formula "60") (ifseqformula "25"))
                        (rule "replace_known_left" (formula "60") (term "1,1") (ifseqformula "7"))
                         (builtin "One Step Simplification" (formula "60"))
                        (rule "true_left" (formula "60"))
                        (rule "Use_information_flow_contract_for_multiply_1272441881_0" (formula "73") (ifseqformula "37"))
                        (rule "replaceKnownSelect_taclet21_11" (formula "73") (term "1,1,1"))
                        (rule "replaceKnownSelect_taclet21_12" (formula "73") (term "0,1,1"))
                        (rule "replaceKnownAuxiliaryConstant_taclet01021_17" (formula "73") (term "1,1,1"))
                        (rule "replaceKnownAuxiliaryConstant_taclet1101021_19" (formula "73") (term "0,1,1"))
                        (rule "replaceKnownSelect_taclet21_8" (formula "73") (term "1,1,0,1"))
                        (rule "replaceKnownSelect_taclet21_9" (formula "73") (term "0,1,0,1"))
                        (rule "replaceKnownAuxiliaryConstant_taclet21_10" (formula "73") (term "1,1,0,1"))
                         (builtin "One Step Simplification" (formula "73") (ifInst ""  (formula "86")) (ifInst ""  (formula "85")))
                        (rule "eqSymm" (formula "73") (term "1,1"))
                        (rule "replace_known_right" (formula "73") (term "1,1") (ifseqformula "103"))
                         (builtin "One Step Simplification" (formula "73"))
                        (rule "pullOutSelect" (formula "73") (term "1,0,1") (inst "selectSK=org_bouncycastle_math_ec_ECPoint_value_4"))
                        (rule "simplifySelectOfAnonEQ" (formula "73") (ifseqformula "26"))
                         (builtin "One Step Simplification" (formula "73") (ifInst ""  (formula "100")) (ifInst ""  (formula "14")))
                        (rule "applyEqReverse" (formula "74") (term "1,0,1") (ifseqformula "73"))
                        (rule "hideAuxiliaryEq" (formula "73"))
                        (rule "pullOutSelect" (formula "73") (term "0,0,1") (inst "selectSK=org_bouncycastle_math_ec_ECPoint_value_5"))
                        (rule "simplifySelectOfAnonEQ" (formula "73") (ifseqformula "62"))
                         (builtin "One Step Simplification" (formula "73") (ifInst ""  (formula "101")) (ifInst ""  (formula "49")))
                        (rule "applyEqReverse" (formula "74") (term "0,0,1") (ifseqformula "73"))
                        (rule "hideAuxiliaryEq" (formula "73"))
                        (rule "replace_known_left" (formula "73") (term "0,1") (ifseqformula "5"))
                         (builtin "One Step Simplification" (formula "73"))
                        (rule "notLeft" (formula "73"))
                        (rule "Class_invariant_axiom_for_org_bouncycastle_math_ec_ECPoint" (formula "79") (term "0"))
                         (builtin "One Step Simplification" (formula "79"))
                        (rule "Class_invariant_axiom_for_org_bouncycastle_math_ec_ECPoint" (formula "79"))
                        (rule "closeTrue" (formula "79"))
                     )
                  )
               )
            )
            (branch " resultAtPost_226_A.<created>@heapAtPre_A«anonHeapFunction» = TRUE FALSE"
               (rule "applyEqReverse" (formula "4") (term "1,0") (ifseqformula "3"))
               (rule "hideAuxiliaryEq" (formula "3"))
               (rule "replace_known_right" (formula "3") (term "1,0,0") (ifseqformula "77"))
                (builtin "One Step Simplification" (formula "3"))
               (rule "replace_known_right" (formula "34") (term "1") (ifseqformula "77"))
                (builtin "One Step Simplification" (formula "34"))
               (rule "ifthenelse_split" (formula "1") (term "0"))
               (branch " resultAtPost_226_B.<created>@heapAtPre_B«anonHeapFunction» = TRUE TRUE"
                  (rule "applyEqReverse" (formula "3") (term "1,0") (ifseqformula "2"))
                  (rule "hideAuxiliaryEq" (formula "2"))
                  (rule "replace_known_left" (formula "2") (term "1,0,0") (ifseqformula "1"))
                   (builtin "One Step Simplification" (formula "2"))
                  (rule "applyEqReverse" (formula "99") (term "0") (ifseqformula "2"))
                  (rule "hideAuxiliaryEq" (formula "2"))
                  (rule "replace_known_left" (formula "69") (term "1") (ifseqformula "1"))
                   (builtin "One Step Simplification" (formula "69"))
                  (rule "true_left" (formula "69"))
                  (rule "Class_axiom_0_in_de_polyas_core3_open_cred_CredTool" (inst "seq=seq") (inst "i=i") (inst "str=str") (inst "seq_0=seq_0") (inst "i_0=i_0") (inst "sv_heap=heapAtPre_B<<anonHeapFunction>>"))
                  (rule "andLeft" (formula "1"))
                  (rule "castedGetAny" (formula "1") (term "0,0,1,0,0"))
                  (rule "castedGetAny" (formula "2") (term "0,1,1,0,0,0"))
                  (rule "castedGetAny" (formula "1") (term "0,0,0,0,0"))
                  (rule "nnf_imp2or" (formula "1") (term "0,0"))
                   (builtin "One Step Simplification" (formula "1"))
                  (rule "nnf_imp2or" (formula "2") (term "0,0,0"))
                  (rule "nnf_imp2or" (formula "2") (term "1,0,0,0"))
                  (rule "nnf_notAnd" (formula "2") (term "0,0,0,0"))
                   (builtin "One Step Simplification" (formula "2"))
                  (rule "nnf_notAnd" (formula "2") (term "0,1,0,0,0"))
                   (builtin "One Step Simplification" (formula "2"))
                  (rule "nnf_notOr" (formula "2") (term "0,0,0,0,0"))
                  (rule "commute_or" (formula "2") (term "0,0,0,0"))
                  (rule "commute_or_2" (formula "2") (term "0,0,0"))
                  (rule "shift_paren_or" (formula "2") (term "0,0,0,0"))
                  (rule "commute_and" (formula "2") (term "1,0,0,0"))
                  (rule "shift_paren_or" (formula "2") (term "0,0,0,0,0"))
                  (rule "commute_or_2" (formula "2") (term "0,0,0,0,0"))
                   (builtin "One Step Simplification" (formula "2"))
                  (rule "commute_or_2" (formula "2") (term "0,0,0,0"))
                  (rule "cnf_rightDist" (formula "2") (term "0,0,0"))
                  (rule "distr_forallAnd" (formula "2") (term "0,0"))
                  (rule "distr_forallAnd" (formula "2") (term "0"))
                  (rule "distr_forallAnd" (formula "2"))
                  (rule "andLeft" (formula "2"))
                  (rule "commute_or_2" (formula "2") (term "0,0,0"))
                   (builtin "One Step Simplification" (formula "2"))
                  (rule "eqSymm" (formula "2") (term "1,0,0,0,0"))
                  (rule "castedGetAny" (formula "2") (term "0,0,0,0,0,0"))
                  (rule "castedGetAny" (formula "2") (term "1,0,0,1,0,0,0"))
                  (rule "castedGetAny" (formula "2") (term "0,1,0,0,0,0"))
                   (builtin "One Step Simplification" (formula "2"))
                  (rule "true_left" (formula "2"))
                  (rule "shift_paren_or" (formula "2") (term "0,0,0"))
                   (builtin "One Step Simplification" (formula "2"))
                  (rule "eqSymm" (formula "2") (term "1,1,0,0,0"))
                  (rule "castedGetAny" (formula "2") (term "0,0,0,0,0,0"))
                  (rule "castedGetAny" (formula "2") (term "0,0,1,0,0,0"))
                  (rule "castedGetAny" (formula "2") (term "0,1,1,0,0,0"))
                   (builtin "One Step Simplification" (formula "2"))
                  (rule "true_left" (formula "2"))
                  (rule "Class_axiom_0_in_de_polyas_core3_open_cred_CredTool" (inst "seq=seq") (inst "i=i") (inst "str=str") (inst "seq_0=seq_0") (inst "i_0=i_0") (inst "sv_heap=anon_heap_mod<<anonHeapFunction>>"))
                  (rule "andLeft" (formula "1"))
                  (rule "castedGetAny" (formula "2") (term "0,1,1,0,0,0"))
                  (rule "castedGetAny" (formula "1") (term "0,0,0,0,0"))
                  (rule "castedGetAny" (formula "1") (term "0,0,1,0,0"))
                  (rule "nnf_imp2or" (formula "1") (term "0,0"))
                   (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "3")))
                  (rule "true_left" (formula "1"))
                  (rule "nnf_imp2or" (formula "1") (term "0,0,0"))
                  (rule "nnf_notAnd" (formula "1") (term "0,0,0,0"))
                   (builtin "One Step Simplification" (formula "1"))
                  (rule "nnf_imp2or" (formula "1") (term "1,0,0,0"))
                  (rule "nnf_notOr" (formula "1") (term "0,0,0,0,0"))
                  (rule "nnf_notAnd" (formula "1") (term "0,1,0,0,0"))
                   (builtin "One Step Simplification" (formula "1"))
                  (rule "commute_or" (formula "1") (term "0,0,0,0"))
                  (rule "commute_or_2" (formula "1") (term "0,0,0"))
                  (rule "shift_paren_or" (formula "1") (term "0,0,0,0"))
                  (rule "commute_and" (formula "1") (term "1,0,0,0"))
                  (rule "shift_paren_or" (formula "1") (term "0,0,0,0,0"))
                  (rule "commute_or_2" (formula "1") (term "0,0,0,0,0"))
                   (builtin "One Step Simplification" (formula "1"))
                  (rule "commute_or_2" (formula "1") (term "0,0,0,0"))
                  (rule "cnf_rightDist" (formula "1") (term "0,0,0"))
                  (rule "distr_forallAnd" (formula "1") (term "0,0"))
                  (rule "distr_forallAnd" (formula "1") (term "0"))
                  (rule "distr_forallAnd" (formula "1"))
                  (rule "andLeft" (formula "1"))
                  (rule "commute_or_2" (formula "1") (term "0,0,0"))
                   (builtin "One Step Simplification" (formula "1"))
                  (rule "eqSymm" (formula "1") (term "1,0,0,0,0"))
                  (rule "castedGetAny" (formula "1") (term "0,0,0,0,0,0"))
                  (rule "castedGetAny" (formula "1") (term "1,0,0,1,0,0,0"))
                  (rule "castedGetAny" (formula "1") (term "0,1,0,0,0,0"))
                   (builtin "One Step Simplification" (formula "1"))
                  (rule "true_left" (formula "1"))
                  (rule "shift_paren_or" (formula "1") (term "0,0,0"))
                   (builtin "One Step Simplification" (formula "1"))
                  (rule "eqSymm" (formula "1") (term "1,1,0,0,0"))
                  (rule "castedGetAny" (formula "1") (term "0,0,0,0,0,0"))
                  (rule "castedGetAny" (formula "1") (term "0,0,1,0,0,0"))
                  (rule "castedGetAny" (formula "1") (term "0,1,1,0,0,0"))
                   (builtin "One Step Simplification" (formula "1"))
                  (rule "true_left" (formula "1"))
                  (rule "Class_axiom_0_in_de_polyas_core3_open_cred_CredTool" (inst "seq=seq") (inst "i=i") (inst "str=str") (inst "seq_0=seq_0") (inst "i_0=i_0") (inst "sv_heap=anon_heap_multiply<<anonHeapFunction>>"))
                  (rule "andLeft" (formula "1"))
                  (rule "castedGetAny" (formula "2") (term "0,1,1,0,0,0"))
                  (rule "castedGetAny" (formula "1") (term "0,0,0,0,0"))
                  (rule "castedGetAny" (formula "1") (term "0,0,1,0,0"))
                  (rule "nnf_imp2or" (formula "1") (term "0,0"))
                   (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "3")))
                  (rule "true_left" (formula "1"))
                  (rule "nnf_imp2or" (formula "1") (term "0,0,0"))
                  (rule "nnf_notAnd" (formula "1") (term "0,0,0,0"))
                   (builtin "One Step Simplification" (formula "1"))
                  (rule "nnf_imp2or" (formula "1") (term "1,0,0,0"))
                  (rule "nnf_notOr" (formula "1") (term "0,0,0,0,0"))
                  (rule "nnf_notAnd" (formula "1") (term "0,1,0,0,0"))
                   (builtin "One Step Simplification" (formula "1"))
                  (rule "commute_or" (formula "1") (term "0,0,0,0"))
                  (rule "commute_or_2" (formula "1") (term "0,0,0"))
                  (rule "Class_axiom_0_in_de_polyas_core3_open_cred_CredTool" (inst "seq=seq") (inst "i=i") (inst "str=str") (inst "seq_0=seq_0") (inst "i_0=i_0") (inst "sv_heap=heapAtPre_A<<anonHeapFunction>>"))
                  (rule "andLeft" (formula "1"))
                  (rule "castedGetAny" (formula "1") (term "0,0,0,0,0"))
                  (rule "castedGetAny" (formula "2") (term "0,1,1,0,0,0"))
                  (rule "castedGetAny" (formula "1") (term "0,0,1,0,0"))
                  (rule "nnf_imp2or" (formula "1") (term "0,0"))
                   (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "4")))
                  (rule "true_left" (formula "1"))
                  (rule "nnf_imp2or" (formula "1") (term "0,0,0"))
                  (rule "nnf_imp2or" (formula "1") (term "1,0,0,0"))
                  (rule "nnf_notAnd" (formula "1") (term "0,0,0,0"))
                   (builtin "One Step Simplification" (formula "1"))
                  (rule "nnf_notAnd" (formula "1") (term "0,1,0,0,0"))
                   (builtin "One Step Simplification" (formula "1"))
                  (rule "nnf_notOr" (formula "1") (term "0,0,0,0,0"))
                  (rule "commute_or" (formula "1") (term "0,0,0,0"))
                  (rule "commute_or_2" (formula "1") (term "0,0,0"))
                  (rule "Class_axiom_0_in_de_polyas_core3_open_cred_CredTool" (inst "seq=seq") (inst "i=i") (inst "str=str") (inst "seq_0=seq_0") (inst "i_0=i_0") (inst "sv_heap=anon(heapAtPre_A<<anonHeapFunction>>,
     empty,
     anon_heap_mod<<anonHeapFunction>>)"))
                   (builtin "One Step Simplification" (formula "1"))
                  (rule "andLeft" (formula "1"))
                  (rule "castedGetAny" (formula "2") (term "0,1,1,0,0,0"))
                  (rule "castedGetAny" (formula "1") (term "0,0,0,0,0"))
                  (rule "castedGetAny" (formula "1") (term "0,0,1,0,0"))
                  (rule "nnf_imp2or" (formula "1") (term "0,0"))
                   (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "5")))
                  (rule "true_left" (formula "1"))
                  (rule "nnf_imp2or" (formula "1") (term "0,0,0"))
                  (rule "nnf_imp2or" (formula "1") (term "1,0,0,0"))
                  (rule "nnf_notAnd" (formula "1") (term "0,0,0,0"))
                   (builtin "One Step Simplification" (formula "1"))
                  (rule "nnf_notOr" (formula "1") (term "0,0,0,0,0"))
                  (rule "nnf_notAnd" (formula "1") (term "0,1,0,0,0"))
                   (builtin "One Step Simplification" (formula "1"))
                  (rule "nnf_notOr" (formula "1") (term "1,0,0,0,0,0"))
                  (rule "Class_axiom_0_in_de_polyas_core3_open_cred_CredTool" (inst "seq=seq") (inst "i=i") (inst "str=str") (inst "seq_0=seq_0") (inst "i_0=i_0") (inst "sv_heap=heapAfter_mod_A_0"))
                  (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "1,0,0,0,0,0,1") (ifseqformula "30"))
                  (rule "andLeft" (formula "1"))
                  (rule "castedGetAny" (formula "1") (term "0,0,0,0,0"))
                  (rule "castedGetAny" (formula "1") (term "0,0,1,0,0"))
                  (rule "castedGetAny" (formula "2") (term "0,1,1,0,0,0"))
                  (rule "nnf_imp2or" (formula "1") (term "0,0"))
                   (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "6")))
                  (rule "true_left" (formula "1"))
                  (rule "nnf_imp2or" (formula "1") (term "0,0,0"))
                  (rule "nnf_imp2or" (formula "1") (term "1,0,0,0"))
                  (rule "nnf_notAnd" (formula "1") (term "0,0,0,0"))
                   (builtin "One Step Simplification" (formula "1"))
                  (rule "nnf_notOr" (formula "1") (term "0,0,0,0,0"))
                  (rule "nnf_notAnd" (formula "1") (term "0,1,0,0,0"))
                   (builtin "One Step Simplification" (formula "1"))
                  (rule "nnf_notOr" (formula "1") (term "1,0,0,0,0,0"))
                  (rule "shift_paren_or" (formula "3") (term "0,0,0,0"))
                  (rule "Class_axiom_0_in_de_polyas_core3_open_cred_CredTool" (inst "seq=seq") (inst "i=i") (inst "str=str") (inst "seq_0=seq_0") (inst "i_0=i_0") (inst "sv_heap=anon(heapAfter_mod_A_0,
     empty,
     anon_heap_multiply<<anonHeapFunction>>)"))
                   (builtin "One Step Simplification" (formula "1"))
                  (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,1,0,0,0,0,0,1") (ifseqformula "30"))
                  (rule "andLeft" (formula "1"))
                  (rule "castedGetAny" (formula "1") (term "0,0,1,0,0"))
                  (rule "castedGetAny" (formula "2") (term "0,1,1,0,0,0"))
                  (rule "castedGetAny" (formula "1") (term "0,0,0,0,0"))
                  (rule "nnf_imp2or" (formula "1") (term "0,0"))
                   (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "6")))
                  (rule "true_left" (formula "1"))
                  (rule "nnf_imp2or" (formula "1") (term "0,0,0"))
                  (rule "nnf_notAnd" (formula "1") (term "0,0,0,0"))
                   (builtin "One Step Simplification" (formula "1"))
                  (rule "nnf_imp2or" (formula "1") (term "1,0,0,0"))
                  (rule "nnf_notOr" (formula "1") (term "0,0,0,0,0"))
                  (rule "nnf_notAnd" (formula "1") (term "0,1,0,0,0"))
                   (builtin "One Step Simplification" (formula "1"))
                  (rule "nnf_notOr" (formula "1") (term "1,0,0,0,0,0"))
                  (rule "nnf_notOr" (formula "1") (term "0,1,0,0,0,0,0"))
                  (rule "Class_axiom_0_in_de_polyas_core3_open_cred_CredTool" (inst "seq=seq") (inst "i=i") (inst "str=str") (inst "seq_0=seq_0") (inst "i_0=i_0") (inst "sv_heap=heapAfter_multiply_A_1"))
                  (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "1,0,0,0,0,0,1") (ifseqformula "37"))
                  (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,1,0,0,0,0,0,1") (ifseqformula "31"))
                  (rule "andLeft" (formula "1"))
                  (rule "castedGetAny" (formula "1") (term "0,0,0,0,0"))
                  (rule "castedGetAny" (formula "2") (term "0,1,1,0,0,0"))
                  (rule "castedGetAny" (formula "1") (term "0,0,1,0,0"))
                  (rule "nnf_imp2or" (formula "1") (term "0,0"))
                   (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "7")))
                  (rule "true_left" (formula "1"))
                  (rule "nnf_imp2or" (formula "1") (term "0,0,0"))
                  (rule "nnf_notAnd" (formula "1") (term "0,0,0,0"))
                   (builtin "One Step Simplification" (formula "1"))
                  (rule "nnf_imp2or" (formula "1") (term "1,0,0,0"))
                  (rule "nnf_notOr" (formula "1") (term "0,0,0,0,0"))
                  (rule "nnf_notAnd" (formula "1") (term "0,1,0,0,0"))
                   (builtin "One Step Simplification" (formula "1"))
                  (rule "nnf_notOr" (formula "1") (term "1,0,0,0,0,0"))
                  (rule "nnf_notOr" (formula "1") (term "0,1,0,0,0,0,0"))
                  (rule "Class_axiom_0_in_de_polyas_core3_open_cred_CredTool" (inst "seq=seq") (inst "i=i") (inst "str=str") (inst "seq_0=seq_0") (inst "i_0=i_0") (inst "sv_heap=heapAtPost_A"))
                  (rule "andLeft" (formula "1"))
                  (rule "castedGetAny" (formula "1") (term "0,0,0,0,0"))
                  (rule "castedGetAny" (formula "1") (term "0,0,1,0,0"))
                  (rule "castedGetAny" (formula "2") (term "0,1,1,0,0,0"))
                  (rule "applyEqRigid" (formula "2") (term "0,0,1,0,0,0,0,0") (ifseqformula "46"))
                  (rule "selectCreatedOfAnonAsFormulaEQ" (formula "2") (term "1,0,0,0,0,0") (ifseqformula "38"))
                  (rule "selectCreatedOfAnonAsFormulaEQ" (formula "2") (term "0,1,0,0,0,0,0") (ifseqformula "32"))
                  (rule "nnf_imp2or" (formula "1") (term "0,0"))
                   (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "7")))
                  (rule "true_left" (formula "1"))
                  (rule "nnf_imp2or" (formula "1") (term "0,0,0"))
                  (rule "nnf_imp2or" (formula "1") (term "1,0,0,0"))
                  (rule "nnf_notAnd" (formula "1") (term "0,0,0,0"))
                   (builtin "One Step Simplification" (formula "1"))
                  (rule "nnf_notAnd" (formula "1") (term "0,1,0,0,0"))
                   (builtin "One Step Simplification" (formula "1"))
                  (rule "nnf_notOr" (formula "1") (term "0,0,0,0,0"))
                  (rule "nnf_notOr" (formula "1") (term "1,0,0,0,0,0"))
                  (rule "nnf_notOr" (formula "1") (term "0,1,0,0,0,0,0"))
                  (rule "Class_axiom_0_in_de_polyas_core3_open_cred_CredTool" (inst "seq=seq") (inst "i=i") (inst "str=str") (inst "seq_0=seq_0") (inst "i_0=i_0") (inst "sv_heap=anon(heapAtPre_B<<anonHeapFunction>>,
     empty,
     anon_heap_mod<<anonHeapFunction>>)"))
                   (builtin "One Step Simplification" (formula "1"))
                  (rule "andLeft" (formula "1"))
                  (rule "castedGetAny" (formula "2") (term "0,1,1,0,0,0"))
                  (rule "castedGetAny" (formula "1") (term "0,0,1,0,0"))
                  (rule "castedGetAny" (formula "1") (term "0,0,0,0,0"))
                  (rule "nnf_imp2or" (formula "1") (term "0,0"))
                   (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "7")))
                  (rule "true_left" (formula "1"))
                  (rule "nnf_imp2or" (formula "1") (term "0,0,0"))
                  (rule "nnf_notAnd" (formula "1") (term "0,0,0,0"))
                   (builtin "One Step Simplification" (formula "1"))
                  (rule "nnf_imp2or" (formula "1") (term "1,0,0,0"))
                  (rule "nnf_notOr" (formula "1") (term "0,0,0,0,0"))
                  (rule "nnf_notAnd" (formula "1") (term "0,1,0,0,0"))
                   (builtin "One Step Simplification" (formula "1"))
                  (rule "nnf_notOr" (formula "1") (term "1,0,0,0,0,0"))
                  (rule "Class_axiom_0_in_de_polyas_core3_open_cred_CredTool" (inst "seq=seq") (inst "i=i") (inst "str=str") (inst "seq_0=seq_0") (inst "i_0=i_0") (inst "sv_heap=heapAfter_mod_B_0"))
                  (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "1,0,0,0,0,0,1") (ifseqformula "66"))
                  (rule "andLeft" (formula "1"))
                  (rule "castedGetAny" (formula "2") (term "0,1,1,0,0,0"))
                  (rule "castedGetAny" (formula "1") (term "0,0,1,0,0"))
                  (rule "castedGetAny" (formula "1") (term "0,0,0,0,0"))
                  (rule "nnf_imp2or" (formula "1") (term "0,0"))
                   (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "8")))
                  (rule "true_left" (formula "1"))
                  (rule "nnf_imp2or" (formula "1") (term "0,0,0"))
                  (rule "nnf_notAnd" (formula "1") (term "0,0,0,0"))
                   (builtin "One Step Simplification" (formula "1"))
                  (rule "nnf_imp2or" (formula "1") (term "1,0,0,0"))
                  (rule "nnf_notOr" (formula "1") (term "0,0,0,0,0"))
                  (rule "nnf_notAnd" (formula "1") (term "0,1,0,0,0"))
                   (builtin "One Step Simplification" (formula "1"))
                  (rule "nnf_notOr" (formula "1") (term "1,0,0,0,0,0"))
                  (rule "Class_axiom_0_in_de_polyas_core3_open_cred_CredTool" (inst "seq=seq") (inst "i=i") (inst "str=str") (inst "seq_0=seq_0") (inst "i_0=i_0") (inst "sv_heap=anon(heapAfter_mod_B_0,
     empty,
     anon_heap_multiply<<anonHeapFunction>>)"))
                   (builtin "One Step Simplification" (formula "1"))
                  (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,1,0,0,0,0,0,1") (ifseqformula "66"))
                  (rule "andLeft" (formula "1"))
                  (rule "castedGetAny" (formula "2") (term "0,1,1,0,0,0"))
                  (rule "castedGetAny" (formula "1") (term "0,0,1,0,0"))
                  (rule "castedGetAny" (formula "1") (term "0,0,0,0,0"))
                  (rule "nnf_imp2or" (formula "1") (term "0,0"))
                   (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "8")))
                  (rule "true_left" (formula "1"))
                  (rule "nnf_imp2or" (formula "1") (term "0,0,0"))
                  (rule "nnf_imp2or" (formula "1") (term "1,0,0,0"))
                  (rule "nnf_notAnd" (formula "1") (term "0,0,0,0"))
                   (builtin "One Step Simplification" (formula "1"))
                  (rule "nnf_notAnd" (formula "1") (term "0,1,0,0,0"))
                   (builtin "One Step Simplification" (formula "1"))
                  (rule "nnf_notOr" (formula "1") (term "0,0,0,0,0"))
                  (rule "nnf_notOr" (formula "1") (term "1,0,0,0,0,0"))
                  (rule "nnf_notOr" (formula "1") (term "0,1,0,0,0,0,0"))
                  (rule "Class_axiom_0_in_de_polyas_core3_open_cred_CredTool" (inst "seq=seq") (inst "i=i") (inst "str=str") (inst "seq_0=seq_0") (inst "i_0=i_0") (inst "sv_heap=heapAfter_multiply_B_1"))
                  (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "1,0,0,0,0,0,1") (ifseqformula "75"))
                  (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,1,0,0,0,0,0,1") (ifseqformula "67"))
                  (rule "andLeft" (formula "1"))
                  (rule "castedGetAny" (formula "1") (term "0,0,0,0,0"))
                  (rule "castedGetAny" (formula "1") (term "0,0,1,0,0"))
                  (rule "castedGetAny" (formula "2") (term "0,1,1,0,0,0"))
                  (rule "nnf_imp2or" (formula "1") (term "0,0"))
                   (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "9")))
                  (rule "true_left" (formula "1"))
                  (rule "nnf_imp2or" (formula "1") (term "0,0,0"))
                  (rule "nnf_notAnd" (formula "1") (term "0,0,0,0"))
                   (builtin "One Step Simplification" (formula "1"))
                  (rule "nnf_imp2or" (formula "1") (term "1,0,0,0"))
                  (rule "nnf_notOr" (formula "1") (term "0,0,0,0,0"))
                  (rule "nnf_notAnd" (formula "1") (term "0,1,0,0,0"))
                   (builtin "One Step Simplification" (formula "1"))
                  (rule "nnf_notOr" (formula "1") (term "1,0,0,0,0,0"))
                  (rule "nnf_notOr" (formula "1") (term "0,1,0,0,0,0,0"))
                  (rule "Class_axiom_0_in_de_polyas_core3_open_cred_CredTool" (inst "seq=seq") (inst "i=i") (inst "str=str") (inst "seq_0=seq_0") (inst "i_0=i_0") (inst "sv_heap=heapAtPost_B"))
                  (rule "andLeft" (formula "1"))
                  (rule "castedGetAny" (formula "1") (term "0,0,0,0,0"))
                  (rule "castedGetAny" (formula "1") (term "0,0,1,0,0"))
                  (rule "castedGetAny" (formula "2") (term "0,1,1,0,0,0"))
                  (rule "applyEq" (formula "2") (term "0,0,1,0,0,0,0,0") (ifseqformula "83"))
                  (rule "selectCreatedOfAnonAsFormulaEQ" (formula "2") (term "1,0,0,0,0,0") (ifseqformula "76"))
                  (rule "selectCreatedOfAnonAsFormulaEQ" (formula "2") (term "0,1,0,0,0,0,0") (ifseqformula "68"))
                  (rule "nnf_imp2or" (formula "1") (term "0,0"))
                   (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "9")))
                  (rule "true_left" (formula "1"))
                  (rule "nnf_imp2or" (formula "1") (term "0,0,0"))
                  (rule "nnf_notAnd" (formula "1") (term "0,0,0,0"))
                   (builtin "One Step Simplification" (formula "1"))
                  (rule "nnf_imp2or" (formula "1") (term "1,0,0,0"))
                  (rule "nnf_notOr" (formula "1") (term "0,0,0,0,0"))
                  (rule "nnf_notAnd" (formula "1") (term "0,1,0,0,0"))
                   (builtin "One Step Simplification" (formula "1"))
                  (rule "nnf_notOr" (formula "1") (term "1,0,0,0,0,0"))
                  (rule "nnf_notOr" (formula "1") (term "0,1,0,0,0,0,0"))
                  (rule "div_axiom" (formula "33") (term "0,1") (inst "quotient=quotient_0"))
                  (rule "polySimp_mulComm0" (formula "33") (term "0,2,1,1"))
                  (rule "polySimp_mulComm0" (formula "33") (term "1,1,1,1,1"))
                  (rule "polySimp_mulComm0" (formula "33") (term "0,1,0,1"))
                  (rule "polySimp_mulComm0" (formula "33") (term "0,1,1,1"))
                  (rule "commute_or" (formula "4") (term "0,0,0,0"))
                  (rule "shift_paren_or" (formula "5") (term "0,0,0,0"))
                  (rule "commute_and" (formula "6") (term "1,0,0,0"))
                  (rule "commute_or" (formula "4") (term "0,1,0,0,0"))
                  (rule "commute_and" (formula "5") (term "1,0,0,0"))
                  (rule "ifthenelse_split" (formula "9") (term "0"))
                  (branch " resultAtPost_226_A.<created>@anon_heap_mod«anonHeapFunction» = TRUE TRUE"
                     (rule "applyEqReverse" (formula "106") (term "1") (ifseqformula "10"))
                     (rule "hideAuxiliaryEq" (formula "10"))
                     (rule "replace_known_left" (formula "41") (term "0") (ifseqformula "9"))
                      (builtin "One Step Simplification" (formula "41"))
                     (rule "true_left" (formula "41"))
                     (rule "commute_or" (formula "3") (term "0,0,0,0"))
                     (rule "commute_or" (formula "3") (term "0,1,0,0,0"))
                     (rule "shift_paren_or" (formula "6") (term "0,0,0,0,0"))
                     (rule "commute_or" (formula "2") (term "0,0,0,0"))
                     (rule "onlyCreatedObjectsAreReferenced" (formula "31") (term "2") (ifseqformula "22"))
                     (rule "replace_known_left" (formula "31") (term "1") (ifseqformula "16"))
                      (builtin "One Step Simplification" (formula "31") (ifInst ""  (formula "95")))
                     (rule "true_left" (formula "31"))
                     (rule "onlyCreatedObjectsAreReferenced" (formula "14") (term "1,1,0") (ifseqformula "22"))
                     (rule "replace_known_left" (formula "14") (term "1") (ifseqformula "16"))
                      (builtin "One Step Simplification" (formula "14") (ifInst ""  (formula "93")))
                     (rule "true_left" (formula "14"))
                     (rule "onlyCreatedObjectsAreReferenced" (formula "14") (term "1,0") (ifseqformula "22"))
                     (rule "replace_known_left" (formula "14") (term "1") (ifseqformula "15"))
                      (builtin "One Step Simplification" (formula "14") (ifInst ""  (formula "91")))
                     (rule "true_left" (formula "14"))
                     (rule "onlyCreatedObjectsAreReferenced" (formula "93") (term "0") (ifseqformula "55"))
                     (rule "replace_known_left" (formula "1") (term "1") (ifseqformula "49"))
                      (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "94")))
                     (rule "true_left" (formula "1"))
                     (rule "onlyCreatedObjectsAreReferenced" (formula "97") (term "0") (ifseqformula "55"))
                     (rule "replace_known_left" (formula "1") (term "1") (ifseqformula "61"))
                      (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "98")))
                     (rule "true_left" (formula "1"))
                     (rule "onlyCreatedObjectsAreReferenced" (formula "27") (term "1,0") (ifseqformula "22"))
                     (rule "replace_known_left" (formula "27") (term "1") (ifseqformula "28"))
                      (builtin "One Step Simplification" (formula "27") (ifInst ""  (formula "97")))
                     (rule "true_left" (formula "27"))
                     (rule "onlyCreatedObjectsAreReferenced" (formula "47") (term "1,0") (ifseqformula "55"))
                     (rule "replace_known_left" (formula "47") (term "1") (ifseqformula "48"))
                      (builtin "One Step Simplification" (formula "47") (ifInst ""  (formula "92")))
                     (rule "true_left" (formula "47"))
                     (rule "onlyCreatedObjectsAreReferenced" (formula "64") (term "2") (ifseqformula "55"))
                     (rule "replace_known_left" (formula "64") (term "1") (ifseqformula "49"))
                      (builtin "One Step Simplification" (formula "64") (ifInst ""  (formula "96")))
                     (rule "true_left" (formula "64"))
                     (rule "commute_or" (formula "2") (term "0,1,0,0,0"))
                     (rule "commute_or" (formula "1") (term "0,0,0,0"))
                     (rule "commute_or" (formula "1") (term "0,1,0,0,0"))
                     (rule "commute_or_2" (formula "4") (term "0,0,0"))
                     (rule "commute_or_2" (formula "3") (term "0,0,0"))
                     (rule "commute_and" (formula "33") (term "0,1"))
                     (rule "commute_or_2" (formula "2") (term "0,0,0"))
                     (rule "commute_or_2" (formula "1") (term "0,0,0"))
                     (rule "commute_or_2" (formula "6") (term "0,0,0,0,0"))
                      (builtin "One Step Simplification" (formula "6"))
                     (rule "shift_paren_or" (formula "5") (term "0,0,0,0,0"))
                     (rule "commute_or_2" (formula "6") (term "0,0,0,0"))
                     (rule "shift_paren_or" (formula "4") (term "0,0,0,0"))
                     (rule "commute_or_2" (formula "3") (term "1,0,0,0,0"))
                     (rule "shift_paren_or" (formula "2") (term "0,0,0,0"))
                     (rule "shift_paren_or" (formula "1") (term "0,0,0,0"))
                     (rule "commute_or_2" (formula "5") (term "0,0,0,0,0"))
                      (builtin "One Step Simplification" (formula "5"))
                     (rule "commute_or_2" (formula "5") (term "0,0,0,0"))
                     (rule "shift_paren_or" (formula "3") (term "0,0,0,0"))
                     (rule "cnf_rightDist" (formula "6") (term "0,0,0"))
                     (rule "distr_forallAnd" (formula "6") (term "0,0"))
                     (rule "distr_forallAnd" (formula "6") (term "0"))
                     (rule "distr_forallAnd" (formula "6"))
                     (rule "andLeft" (formula "6"))
                     (rule "commute_or_2" (formula "6") (term "0,0,0"))
                      (builtin "One Step Simplification" (formula "6"))
                     (rule "eqSymm" (formula "6") (term "1,0,0,0,0"))
                     (rule "castedGetAny" (formula "6") (term "1,0,0,1,0,0,0"))
                     (rule "castedGetAny" (formula "6") (term "0,0,0,0,0,0"))
                     (rule "castedGetAny" (formula "6") (term "0,1,0,0,0,0"))
                      (builtin "One Step Simplification" (formula "6"))
                     (rule "true_left" (formula "6"))
                     (rule "shift_paren_or" (formula "6") (term "0,0,0"))
                      (builtin "One Step Simplification" (formula "6"))
                     (rule "eqSymm" (formula "6") (term "1,1,0,0,0"))
                     (rule "castedGetAny" (formula "6") (term "0,0,1,0,0,0"))
                     (rule "castedGetAny" (formula "6") (term "0,0,0,0,0,0"))
                     (rule "castedGetAny" (formula "6") (term "0,1,1,0,0,0"))
                      (builtin "One Step Simplification" (formula "6"))
                     (rule "true_left" (formula "6"))
                     (rule "commute_and" (formula "4") (term "1,0,0,0"))
                     (rule "commute_and" (formula "3") (term "1,0,0,0"))
                     (rule "commute_and" (formula "2") (term "1,0,0,0"))
                     (rule "commute_and" (formula "1") (term "1,0,0,0"))
                     (rule "cnf_rightDist" (formula "5") (term "0,0,0"))
                     (rule "distr_forallAnd" (formula "5") (term "0,0"))
                     (rule "distr_forallAnd" (formula "5") (term "0"))
                     (rule "distr_forallAnd" (formula "5"))
                     (rule "andLeft" (formula "5"))
                     (rule "commute_or_2" (formula "5") (term "0,0,0"))
                      (builtin "One Step Simplification" (formula "5"))
                     (rule "eqSymm" (formula "5") (term "1,0,0,0,0"))
                     (rule "castedGetAny" (formula "5") (term "1,0,0,1,0,0,0"))
                     (rule "castedGetAny" (formula "5") (term "0,0,0,0,0,0"))
                     (rule "castedGetAny" (formula "5") (term "0,1,0,0,0,0"))
                      (builtin "One Step Simplification" (formula "5"))
                     (rule "true_left" (formula "5"))
                     (rule "shift_paren_or" (formula "5") (term "0,0,0"))
                      (builtin "One Step Simplification" (formula "5"))
                     (rule "eqSymm" (formula "5") (term "1,1,0,0,0"))
                     (rule "castedGetAny" (formula "5") (term "0,0,1,0,0,0"))
                     (rule "castedGetAny" (formula "5") (term "0,0,0,0,0,0"))
                     (rule "castedGetAny" (formula "5") (term "0,1,1,0,0,0"))
                      (builtin "One Step Simplification" (formula "5"))
                     (rule "true_left" (formula "5"))
                     (rule "shift_paren_or" (formula "4") (term "0,0,0,0,0"))
                      (builtin "One Step Simplification" (formula "4"))
                     (rule "shift_paren_or" (formula "2") (term "0,0,0,0,0"))
                      (builtin "One Step Simplification" (formula "2"))
                     (rule "shift_paren_or" (formula "1") (term "0,0,0,0,0"))
                      (builtin "One Step Simplification" (formula "1"))
                     (rule "shift_paren_or" (formula "3") (term "0,0,0,0,0"))
                      (builtin "One Step Simplification" (formula "3"))
                     (rule "commute_or_2" (formula "4") (term "0,0,0,0"))
                     (rule "commute_or_2" (formula "2") (term "0,0,0,0"))
                     (rule "commute_or_2" (formula "1") (term "0,0,0,0"))
                     (rule "cnf_rightDist" (formula "3") (term "0,0,0"))
                     (rule "distr_forallAnd" (formula "3") (term "0,0"))
                     (rule "distr_forallAnd" (formula "3") (term "0"))
                     (rule "distr_forallAnd" (formula "3"))
                     (rule "andLeft" (formula "3"))
                     (rule "shift_paren_or" (formula "4") (term "0,0,0"))
                      (builtin "One Step Simplification" (formula "4"))
                     (rule "eqSymm" (formula "4") (term "1,1,0,0,0"))
                     (rule "castedGetAny" (formula "4") (term "0,0,0,0,0,0"))
                     (rule "castedGetAny" (formula "4") (term "0,0,1,0,0,0"))
                     (rule "castedGetAny" (formula "4") (term "0,1,1,0,0,0"))
                      (builtin "One Step Simplification" (formula "4"))
                     (rule "true_left" (formula "4"))
                     (rule "cnf_rightDist" (formula "4") (term "0,0,0"))
                     (rule "distr_forallAnd" (formula "4") (term "0,0"))
                     (rule "distr_forallAnd" (formula "4") (term "0"))
                     (rule "distr_forallAnd" (formula "4"))
                     (rule "andLeft" (formula "4"))
                     (rule "shift_paren_or" (formula "5") (term "0,0,0"))
                      (builtin "One Step Simplification" (formula "5"))
                     (rule "eqSymm" (formula "5") (term "1,1,0,0,0"))
                     (rule "castedGetAny" (formula "5") (term "0,0,0,0,0,0"))
                     (rule "castedGetAny" (formula "5") (term "0,0,1,0,0,0"))
                     (rule "castedGetAny" (formula "5") (term "0,1,1,0,0,0"))
                      (builtin "One Step Simplification" (formula "5"))
                     (rule "true_left" (formula "5"))
                     (rule "cnf_rightDist" (formula "2") (term "0,0,0"))
                     (rule "distr_forallAnd" (formula "2") (term "0,0"))
                     (rule "distr_forallAnd" (formula "2") (term "0"))
                     (rule "distr_forallAnd" (formula "2"))
                     (rule "andLeft" (formula "2"))
                     (rule "cnf_rightDist" (formula "1") (term "0,0,0"))
                     (rule "distr_forallAnd" (formula "1") (term "0,0"))
                     (rule "distr_forallAnd" (formula "1") (term "0"))
                     (rule "distr_forallAnd" (formula "1"))
                     (rule "andLeft" (formula "1"))
                     (rule "shift_paren_or" (formula "3") (term "0,0,0"))
                      (builtin "One Step Simplification" (formula "3"))
                     (rule "eqSymm" (formula "3") (term "1,1,0,0,0"))
                     (rule "castedGetAny" (formula "3") (term "0,0,0,0,0,0"))
                     (rule "castedGetAny" (formula "3") (term "0,0,1,0,0,0"))
                     (rule "castedGetAny" (formula "3") (term "0,1,1,0,0,0"))
                      (builtin "One Step Simplification" (formula "3"))
                     (rule "true_left" (formula "3"))
                     (rule "cnf_rightDist" (formula "3") (term "0,0,0"))
                     (rule "distr_forallAnd" (formula "3") (term "0,0"))
                     (rule "distr_forallAnd" (formula "3") (term "0"))
                     (rule "distr_forallAnd" (formula "3"))
                     (rule "andLeft" (formula "3"))
                     (rule "cnf_rightDist" (formula "4") (term "0,0,0"))
                     (rule "distr_forallAnd" (formula "4") (term "0,0"))
                     (rule "distr_forallAnd" (formula "4") (term "0"))
                     (rule "distr_forallAnd" (formula "4"))
                     (rule "andLeft" (formula "4"))
                     (rule "commute_or_2" (formula "4") (term "0,0,0"))
                      (builtin "One Step Simplification" (formula "4"))
                     (rule "eqSymm" (formula "4") (term "1,0,0,0,0"))
                     (rule "castedGetAny" (formula "4") (term "1,0,0,1,0,0,0"))
                     (rule "castedGetAny" (formula "4") (term "0,0,0,0,0,0"))
                     (rule "castedGetAny" (formula "4") (term "0,1,0,0,0,0"))
                      (builtin "One Step Simplification" (formula "4"))
                     (rule "true_left" (formula "4"))
                     (rule "shift_paren_or" (formula "3") (term "0,0,0"))
                      (builtin "One Step Simplification" (formula "3"))
                     (rule "eqSymm" (formula "3") (term "1,1,0,0,0"))
                     (rule "castedGetAny" (formula "3") (term "0,0,1,0,0,0"))
                     (rule "castedGetAny" (formula "3") (term "1,0,0,0,0,0,0"))
                     (rule "castedGetAny" (formula "3") (term "0,1,1,0,0,0"))
                      (builtin "One Step Simplification" (formula "3"))
                     (rule "true_left" (formula "3"))
                     (rule "shift_paren_or" (formula "3") (term "0,0,0"))
                      (builtin "One Step Simplification" (formula "3"))
                     (rule "eqSymm" (formula "3") (term "1,1,0,0,0"))
                     (rule "castedGetAny" (formula "3") (term "1,0,0,0,0,0,0"))
                     (rule "castedGetAny" (formula "3") (term "0,0,1,0,0,0"))
                     (rule "castedGetAny" (formula "3") (term "0,1,1,0,0,0"))
                      (builtin "One Step Simplification" (formula "3"))
                     (rule "true_left" (formula "3"))
                     (rule "cnf_rightDist" (formula "2") (term "0,0,0"))
                     (rule "distr_forallAnd" (formula "2") (term "0,0"))
                     (rule "distr_forallAnd" (formula "2") (term "0"))
                     (rule "distr_forallAnd" (formula "2"))
                     (rule "andLeft" (formula "2"))
                     (rule "commute_or_2" (formula "2") (term "0,0,0"))
                      (builtin "One Step Simplification" (formula "2"))
                     (rule "eqSymm" (formula "2") (term "1,0,0,0,0"))
                     (rule "castedGetAny" (formula "2") (term "1,0,0,1,0,0,0"))
                     (rule "castedGetAny" (formula "2") (term "0,0,0,0,0,0"))
                     (rule "castedGetAny" (formula "2") (term "0,1,0,0,0,0"))
                      (builtin "One Step Simplification" (formula "2"))
                     (rule "true_left" (formula "2"))
                     (rule "cnf_rightDist" (formula "1") (term "0,0,0"))
                     (rule "distr_forallAnd" (formula "1") (term "0,0"))
                     (rule "distr_forallAnd" (formula "1") (term "0"))
                     (rule "distr_forallAnd" (formula "1"))
                     (rule "andLeft" (formula "1"))
                     (rule "ifthenelse_split_for" (formula "30") (term "1,1"))
                     (branch "result_228_A_1.value@heapAtPre_A«anonHeapFunction» ≥ 0 TRUE"
                        (rule "cnf_rightDist" (formula "31"))
                        (rule "andLeft" (formula "31"))
                        (rule "commute_or" (formula "32"))
                        (rule "cnf_rightDist" (formula "31"))
                        (rule "andLeft" (formula "31"))
                        (rule "commute_or" (formula "32"))
                        (rule "shift_paren_or" (formula "3") (term "0,0,0"))
                         (builtin "One Step Simplification" (formula "3"))
                        (rule "eqSymm" (formula "3") (term "1,1,0,0,0"))
                        (rule "castedGetAny" (formula "3") (term "1,0,0,0,0,0,0"))
                        (rule "castedGetAny" (formula "3") (term "0,0,1,0,0,0"))
                        (rule "castedGetAny" (formula "3") (term "0,1,1,0,0,0"))
                         (builtin "One Step Simplification" (formula "3"))
                        (rule "true_left" (formula "3"))
                        (rule "shift_paren_or" (formula "2") (term "0,0,0"))
                         (builtin "One Step Simplification" (formula "2"))
                        (rule "eqSymm" (formula "2") (term "1,1,0,0,0"))
                        (rule "castedGetAny" (formula "2") (term "0,0,1,0,0,0"))
                        (rule "castedGetAny" (formula "2") (term "1,0,0,0,0,0,0"))
                        (rule "castedGetAny" (formula "2") (term "0,1,1,0,0,0"))
                         (builtin "One Step Simplification" (formula "2"))
                        (rule "true_left" (formula "2"))
                        (rule "cnf_rightDist" (formula "1") (term "0,0,0"))
                        (rule "distr_forallAnd" (formula "1") (term "0,0"))
                        (rule "distr_forallAnd" (formula "1") (term "0"))
                        (rule "distr_forallAnd" (formula "1"))
                        (rule "andLeft" (formula "1"))
                        (rule "commute_or_2" (formula "1") (term "0,0,0"))
                         (builtin "One Step Simplification" (formula "1"))
                        (rule "eqSymm" (formula "1") (term "1,0,0,0,0"))
                        (rule "castedGetAny" (formula "1") (term "0,0,0,0,0,0"))
                        (rule "castedGetAny" (formula "1") (term "1,0,0,1,0,0,0"))
                        (rule "castedGetAny" (formula "1") (term "0,1,0,0,0,0"))
                         (builtin "One Step Simplification" (formula "1"))
                        (rule "true_left" (formula "1"))
                        (rule "shift_paren_or" (formula "1") (term "0,0,0"))
                         (builtin "One Step Simplification" (formula "1"))
                        (rule "eqSymm" (formula "1") (term "1,1,0,0,0"))
                        (rule "castedGetAny" (formula "1") (term "0,0,1,0,0,0"))
                        (rule "castedGetAny" (formula "1") (term "1,0,0,0,0,0,0"))
                        (rule "castedGetAny" (formula "1") (term "0,1,1,0,0,0"))
                         (builtin "One Step Simplification" (formula "1"))
                        (rule "true_left" (formula "1"))
                        (rule "cut_direct" (formula "28") (term "0"))
                        (branch "CUT: result_228_A_1.value@heapAtPre_A«anonHeapFunction» = 0 TRUE"
                            (builtin "One Step Simplification" (formula "29"))
                           (rule "true_left" (formula "29"))
                           (rule "replace_known_left" (formula "29") (term "0") (ifseqformula "28"))
                            (builtin "One Step Simplification" (formula "29"))
                           (rule "true_left" (formula "29"))
                           (rule "replace_known_left" (formula "29") (term "0") (ifseqformula "28"))
                            (builtin "One Step Simplification" (formula "29"))
                           (rule "true_left" (formula "29"))
                           (rule "applyEq" (formula "30") (term "1,0") (ifseqformula "28"))
                           (rule "times_zero_1" (formula "30") (term "0"))
                           (rule "polySimp_homoEq" (formula "30"))
                           (rule "mul_literals" (formula "30") (term "1,0"))
                           (rule "add_zero_right" (formula "30") (term "0"))
                           (rule "applyEq" (formula "27") (term "0") (ifseqformula "28"))
                           (rule "qeq_literals" (formula "27"))
                           (rule "true_left" (formula "27"))
                           (rule "applyEq" (formula "28") (term "1,0") (ifseqformula "27"))
                           (rule "eqSymm" (formula "28"))
                           (rule "polySimp_homoEq" (formula "28"))
                           (rule "polySimp_mulLiterals" (formula "28") (term "1,0"))
                           (rule "polySimp_elimOne" (formula "28") (term "1,0"))
                           (rule "applyEq" (formula "7") (term "1") (ifseqformula "27"))
                           (rule "applyEq" (formula "56") (term "1") (ifseqformula "27"))
                           (rule "applyEq" (formula "23") (term "1") (ifseqformula "27"))
                           (rule "applyEq" (formula "28") (term "1,1,0") (ifseqformula "27"))
                           (rule "polySimp_addComm0" (formula "28") (term "0"))
                           (rule "polySimp_sepNegMonomial" (formula "29"))
                           (rule "polySimp_mulLiterals" (formula "29") (term "0"))
                           (rule "polySimp_elimOne" (formula "29") (term "0"))
                           (rule "applyEq" (formula "28") (term "0,1,0") (ifseqformula "29"))
                           (rule "polySimp_addComm0" (formula "28") (term "0"))
                           (rule "applyEq" (formula "4") (term "0") (ifseqformula "29"))
                           (rule "applyEq" (formula "28") (term "0,0,1,0") (ifseqformula "29"))
                           (rule "polySimp_addComm0" (formula "28") (term "0"))
                           (rule "applyEq" (formula "6") (term "1") (ifseqformula "29"))
                           (rule "polySimp_sepPosMonomial" (formula "28"))
                           (rule "div_axiom" (formula "28") (term "0,1") (inst "quotient=quotient_1"))
                            (builtin "One Step Simplification" (formula "28"))
                           (rule "true_left" (formula "28"))
                           (rule "jdiv_axiom" (formula "28") (term "0"))
                           (rule "eqSymm" (formula "28"))
                           (rule "applyEq" (formula "28") (term "1") (ifseqformula "29"))
                            (builtin "One Step Simplification" (formula "28"))
                           (rule "eqSymm" (formula "28") (term "1"))
                           (rule "polySimp_homoEq" (formula "28") (term "1"))
                           (rule "polySimp_mulLiterals" (formula "28") (term "1,0,1"))
                           (rule "polySimp_elimOne" (formula "28") (term "1,0,1"))
                           (rule "polySimp_sepPosMonomial" (formula "28") (term "1"))
                           (rule "inEqSimp_contradInEq0" (formula "28") (term "0,0") (ifseqformula "4"))
                           (rule "qeq_literals" (formula "28") (term "0,0,0"))
                            (builtin "One Step Simplification" (formula "28"))
                           (rule "true_left" (formula "28"))
                           (rule "Use_information_flow_contract_for_compareTo_325434207" (formula "19") (ifseqformula "19"))
                            (builtin "One Step Simplification" (formula "19") (ifInst ""  (formula "91")) (ifInst ""  (formula "91")))
                           (rule "true_left" (formula "19"))
                           (rule "Use_information_flow_contract_for_getOrder_757678341" (formula "58") (ifseqformula "25"))
                           (rule "applyEq" (formula "58") (term "0,0,1") (ifseqformula "56"))
                           (rule "eqSymm" (formula "58") (term "0,1"))
                           (rule "replace_known_left" (formula "58") (term "0,1") (ifseqformula "23"))
                            (builtin "One Step Simplification" (formula "58"))
                           (rule "applyEq" (formula "58") (term "0,1") (ifseqformula "7"))
                           (rule "eqSymm" (formula "58") (term "1"))
                           (rule "replace_known_left" (formula "58") (term "1") (ifseqformula "27"))
                            (builtin "One Step Simplification" (formula "58"))
                           (rule "true_left" (formula "58"))
                           (rule "Use_information_flow_contract_for_multiply_1272441881" (formula "70") (ifseqformula "35"))
                           (rule "replaceKnownSelect_taclet21_11" (formula "70") (term "1,1,1"))
                           (rule "replaceKnownSelect_taclet21_12" (formula "70") (term "0,1,1"))
                           (rule "replaceKnownAuxiliaryConstant_taclet0011021_19" (formula "70") (term "1,1,1"))
                           (rule "replaceKnownAuxiliaryConstant_taclet011021_18" (formula "70") (term "0,1,1"))
                           (rule "replaceKnownSelect_taclet21_8" (formula "70") (term "1,1,0,1"))
                           (rule "replaceKnownSelect_taclet21_9" (formula "70") (term "0,1,0,1"))
                           (rule "replaceKnownAuxiliaryConstant_taclet21_10" (formula "70") (term "1,1,0,1"))
                            (builtin "One Step Simplification" (formula "70") (ifInst ""  (formula "82")) (ifInst ""  (formula "81")) (ifInst ""  (formula "99")))
                           (rule "pullOutSelect" (formula "70") (term "1,0,1") (inst "selectSK=org_bouncycastle_math_ec_ECPoint_value_4"))
                           (rule "simplifySelectOfAnonEQ" (formula "70") (ifseqformula "26"))
                            (builtin "One Step Simplification" (formula "70") (ifInst ""  (formula "96")) (ifInst ""  (formula "14")))
                           (rule "applyEqReverse" (formula "71") (term "1,0,1") (ifseqformula "70"))
                           (rule "hideAuxiliaryEq" (formula "70"))
                           (rule "pullOutSelect" (formula "70") (term "0,0,1") (inst "selectSK=org_bouncycastle_math_ec_ECPoint_value_5"))
                           (rule "simplifySelectOfAnonEQ" (formula "70") (ifseqformula "60"))
                            (builtin "One Step Simplification" (formula "70") (ifInst ""  (formula "97")) (ifInst ""  (formula "47")))
                           (rule "applyEqReverse" (formula "71") (term "0,0,1") (ifseqformula "70"))
                           (rule "hideAuxiliaryEq" (formula "70"))
                           (rule "replace_known_left" (formula "70") (term "0,1") (ifseqformula "5"))
                            (builtin "One Step Simplification" (formula "70"))
                           (rule "notLeft" (formula "70"))
                           (rule "Class_invariant_axiom_for_org_bouncycastle_math_ec_ECPoint" (formula "76") (term "1"))
                            (builtin "One Step Simplification" (formula "76"))
                           (rule "Class_invariant_axiom_for_org_bouncycastle_math_ec_ECPoint" (formula "76"))
                           (rule "closeTrue" (formula "76"))
                        )
                        (branch "CUT: result_228_A_1.value@heapAtPre_A«anonHeapFunction» = 0 FALSE"
                            (builtin "One Step Simplification" (formula "28"))
                           (rule "replace_known_right" (formula "29") (term "0") (ifseqformula "79"))
                            (builtin "One Step Simplification" (formula "29"))
                           (rule "replace_known_right" (formula "30") (term "0") (ifseqformula "79"))
                            (builtin "One Step Simplification" (formula "30"))
                           (rule "applyEq" (formula "32") (term "0,0") (ifseqformula "29"))
                           (rule "polySimp_mulComm0" (formula "32") (term "0"))
                           (rule "applyEq" (formula "30") (term "0") (ifseqformula "32"))
                           (rule "inEqSimp_homoInEq1" (formula "30"))
                           (rule "polySimp_mulComm0" (formula "30") (term "1,0"))
                           (rule "polySimp_rightDist" (formula "30") (term "1,0"))
                           (rule "polySimp_mulLiterals" (formula "30") (term "1,1,0"))
                           (rule "polySimp_elimOne" (formula "30") (term "1,1,0"))
                           (rule "polySimp_mulComm0" (formula "30") (term "0,1,0"))
                           (rule "polySimp_addComm1" (formula "30") (term "0"))
                           (rule "polySimp_addAssoc" (formula "30") (term "0,0"))
                           (rule "polySimp_addComm1" (formula "30") (term "0,0,0"))
                           (rule "polySimp_pullOutFactor2b" (formula "30") (term "0,0"))
                           (rule "add_literals" (formula "30") (term "1,1,0,0"))
                           (rule "times_zero_1" (formula "30") (term "1,0,0"))
                           (rule "add_zero_right" (formula "30") (term "0,0"))
                           (rule "applyEq" (formula "28") (term "0") (ifseqformula "32"))
                           (rule "inEqSimp_homoInEq0" (formula "28"))
                           (rule "polySimp_mulComm0" (formula "28") (term "1,0"))
                           (rule "polySimp_rightDist" (formula "28") (term "1,0"))
                           (rule "polySimp_mulLiterals" (formula "28") (term "1,1,0"))
                           (rule "polySimp_elimOne" (formula "28") (term "1,1,0"))
                           (rule "polySimp_mulComm0" (formula "28") (term "0,1,0"))
                           (rule "polySimp_addAssoc" (formula "28") (term "0"))
                           (rule "polySimp_addComm0" (formula "28") (term "0,0"))
                           (rule "polySimp_pullOutFactor2b" (formula "28") (term "0"))
                           (rule "add_literals" (formula "28") (term "1,1,0"))
                           (rule "times_zero_1" (formula "28") (term "1,0"))
                           (rule "add_zero_right" (formula "28") (term "0"))
                           (rule "applyEq" (formula "31") (term "0,1") (ifseqformula "29"))
                           (rule "inEqSimp_sepNegMonomial0" (formula "30"))
                           (rule "polySimp_mulLiterals" (formula "30") (term "0"))
                           (rule "polySimp_elimOne" (formula "30") (term "0"))
                           (rule "inEqSimp_invertInEq1" (formula "28"))
                           (rule "polySimp_mulLiterals" (formula "28") (term "0"))
                           (rule "mul_literals" (formula "28") (term "1"))
                           (rule "polySimp_elimOne" (formula "28") (term "0"))
                           (rule "inEqSimp_strengthen1" (formula "27") (ifseqformula "79"))
                           (rule "add_literals" (formula "27") (term "1"))
                           (rule "inEqSimp_contradEq7" (formula "79") (ifseqformula "27"))
                           (rule "times_zero_1" (formula "79") (term "1,0,0"))
                           (rule "add_literals" (formula "79") (term "0,0"))
                           (rule "leq_literals" (formula "79") (term "0"))
                            (builtin "One Step Simplification" (formula "79"))
                           (rule "false_right" (formula "79"))
                           (rule "Use_information_flow_contract_for_compareTo_325434207" (formula "19") (ifseqformula "19"))
                            (builtin "One Step Simplification" (formula "19") (ifInst ""  (formula "94")) (ifInst ""  (formula "94")))
                           (rule "true_left" (formula "19"))
                           (rule "Use_information_flow_contract_for_getOrder_757678341" (formula "61") (ifseqformula "25"))
                           (rule "replace_known_left" (formula "61") (term "1,1") (ifseqformula "7"))
                            (builtin "One Step Simplification" (formula "61"))
                           (rule "true_left" (formula "61"))
                           (rule "Use_information_flow_contract_for_getOrder_757678341" (formula "61") (ifseqformula "61"))
                            (builtin "One Step Simplification" (formula "61"))
                           (rule "true_left" (formula "61"))
                           (rule "Use_information_flow_contract_for_compareTo_325434207" (formula "55") (ifseqformula "19"))
                           (rule "replace_known_left" (formula "55") (term "0,0,1") (ifseqformula "6"))
                            (builtin "One Step Simplification" (formula "55") (ifInst ""  (formula "95")) (ifInst ""  (formula "94")))
                           (rule "applyEq" (formula "55") (term "0,0,1") (ifseqformula "57"))
                           (rule "eqSymm" (formula "55") (term "0,1"))
                           (rule "replace_known_left" (formula "55") (term "0,1") (ifseqformula "20"))
                            (builtin "One Step Simplification" (formula "55"))
                           (rule "Class_invariant_axiom_for_java_math_BigInteger" (formula "55") (term "1,0"))
                           (rule "replace_known_right" (formula "55") (term "0,0,1,0") (ifseqformula "94"))
                            (builtin "One Step Simplification" (formula "55") (ifInst ""  (formula "20")))
                           (rule "Class_invariant_axiom_for_java_math_BigInteger" (formula "55") (term "0"))
                           (rule "replace_known_left" (formula "55") (term "1,0") (ifseqformula "57"))
                            (builtin "One Step Simplification" (formula "55") (ifInst ""  (formula "95")))
                           (rule "applyEq" (formula "56") (term "4") (ifseqformula "55"))
                           (rule "applyEq" (formula "47") (term "0") (ifseqformula "55"))
                           (rule "applyEq" (formula "53") (term "0") (ifseqformula "54"))
                           (rule "Use_information_flow_contract_for_getOrder_757678341" (formula "25") (ifseqformula "25"))
                            (builtin "One Step Simplification" (formula "25"))
                           (rule "true_left" (formula "25"))
                           (rule "Use_information_flow_contract_for_getOrder_757678341" (formula "25") (ifseqformula "60"))
                           (rule "eqSymm" (formula "25") (term "1,1"))
                           (rule "eqSymm" (formula "25") (term "0,1"))
                           (rule "replace_known_left" (formula "25") (term "1,1") (ifseqformula "7"))
                            (builtin "One Step Simplification" (formula "25"))
                           (rule "true_left" (formula "25"))
                           (rule "Use_information_flow_contract_for_multiply_1272441881_0" (formula "72") (ifseqformula "38"))
                           (rule "replaceKnownSelect_taclet21_12" (formula "72") (term "0,1,1"))
                           (rule "replaceKnownSelect_taclet21_11" (formula "72") (term "1,1,1"))
                           (rule "replaceKnownAuxiliaryConstant_taclet011021_18" (formula "72") (term "0,1,1"))
                           (rule "replaceKnownAuxiliaryConstant_taclet0011021_19" (formula "72") (term "1,1,1"))
                           (rule "replaceKnownSelect_taclet21_9" (formula "72") (term "0,1,0,1"))
                           (rule "replaceKnownSelect_taclet21_8" (formula "72") (term "1,1,0,1"))
                           (rule "replaceKnownAuxiliaryConstant_taclet021_15" (formula "72") (term "0,1,0,1"))
                           (rule "replaceKnownAuxiliaryConstant_taclet21_10" (formula "72") (term "1,1,0,1"))
                           (rule "replaceKnownAuxiliaryConstant_taclet021_15" (formula "72") (term "1,1,0,1"))
                            (builtin "One Step Simplification" (formula "72") (ifInst ""  (formula "84")) (ifInst ""  (formula "83")) (ifInst ""  (formula "101")))
                           (rule "pullOutSelect" (formula "72") (term "0,0,1") (inst "selectSK=org_bouncycastle_math_ec_ECPoint_value_4"))
                           (rule "simplifySelectOfAnonEQ" (formula "72") (ifseqformula "62"))
                            (builtin "One Step Simplification" (formula "72") (ifInst ""  (formula "99")) (ifInst ""  (formula "49")))
                           (rule "applyEqReverse" (formula "73") (term "0,0,1") (ifseqformula "72"))
                           (rule "hideAuxiliaryEq" (formula "72"))
                           (rule "eqSymm" (formula "72") (term "0,1"))
                           (rule "applyEq" (formula "72") (term "1,0,1") (ifseqformula "5"))
                           (rule "pullOutSelect" (formula "72") (term "0,0,1") (inst "selectSK=org_bouncycastle_math_ec_ECPoint_value_5"))
                           (rule "simplifySelectOfAnonEQ" (formula "72") (ifseqformula "26"))
                            (builtin "One Step Simplification" (formula "72") (ifInst ""  (formula "98")) (ifInst ""  (formula "14")))
                           (rule "applyEqReverse" (formula "73") (term "0,0,1") (ifseqformula "72"))
                            (builtin "One Step Simplification" (formula "73"))
                           (rule "notLeft" (formula "73"))
                           (rule "hideAuxiliaryEq" (formula "72"))
                           (rule "Class_invariant_axiom_for_org_bouncycastle_math_ec_ECPoint" (formula "78") (term "1"))
                            (builtin "One Step Simplification" (formula "78"))
                           (rule "Class_invariant_axiom_for_org_bouncycastle_math_ec_ECPoint" (formula "78"))
                           (rule "closeTrue" (formula "78"))
                        )
                     )
                     (branch "result_228_A_1.value@heapAtPre_A«anonHeapFunction» ≥ 0 FALSE"
                        (rule "inEqSimp_geqRight" (formula "79"))
                        (rule "mul_literals" (formula "1") (term "1,0,0"))
                        (rule "add_literals" (formula "1") (term "0,0"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "1"))
                        (rule "mul_literals" (formula "1") (term "1"))
                        (rule "inEqSimp_contradEq3" (formula "31") (term "0") (ifseqformula "1"))
                        (rule "mul_literals" (formula "31") (term "1,0,0,0"))
                        (rule "add_literals" (formula "31") (term "0,0,0"))
                        (rule "qeq_literals" (formula "31") (term "0,0"))
                         (builtin "One Step Simplification" (formula "31"))
                        (rule "andLeft" (formula "31"))
                        (rule "andLeft" (formula "31"))
                        (rule "applyEq" (formula "35") (term "0,0") (ifseqformula "32"))
                        (rule "polySimp_mulComm0" (formula "35") (term "0"))
                        (rule "applyEq" (formula "33") (term "0") (ifseqformula "35"))
                        (rule "inEqSimp_homoInEq1" (formula "33"))
                        (rule "polySimp_mulComm0" (formula "33") (term "1,0"))
                        (rule "polySimp_rightDist" (formula "33") (term "1,0"))
                        (rule "polySimp_mulLiterals" (formula "33") (term "1,1,0"))
                        (rule "polySimp_elimOne" (formula "33") (term "1,1,0"))
                        (rule "polySimp_mulComm0" (formula "33") (term "0,1,0"))
                        (rule "polySimp_addComm1" (formula "33") (term "0"))
                        (rule "polySimp_addAssoc" (formula "33") (term "0,0"))
                        (rule "polySimp_addComm1" (formula "33") (term "0,0,0"))
                        (rule "polySimp_pullOutFactor2b" (formula "33") (term "0,0"))
                        (rule "add_literals" (formula "33") (term "1,1,0,0"))
                        (rule "times_zero_1" (formula "33") (term "1,0,0"))
                        (rule "add_zero_right" (formula "33") (term "0,0"))
                        (rule "applyEq" (formula "31") (term "0") (ifseqformula "35"))
                        (rule "inEqSimp_homoInEq0" (formula "31"))
                        (rule "polySimp_mulComm0" (formula "31") (term "1,0"))
                        (rule "polySimp_rightDist" (formula "31") (term "1,0"))
                        (rule "polySimp_mulLiterals" (formula "31") (term "1,1,0"))
                        (rule "polySimp_elimOne" (formula "31") (term "1,1,0"))
                        (rule "polySimp_mulComm0" (formula "31") (term "0,1,0"))
                        (rule "polySimp_addAssoc" (formula "31") (term "0"))
                        (rule "polySimp_addComm0" (formula "31") (term "0,0"))
                        (rule "polySimp_pullOutFactor2b" (formula "31") (term "0"))
                        (rule "add_literals" (formula "31") (term "1,1,0"))
                        (rule "times_zero_1" (formula "31") (term "1,0"))
                        (rule "add_zero_right" (formula "31") (term "0"))
                        (rule "applyEq" (formula "34") (term "0,1") (ifseqformula "32"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "33"))
                        (rule "polySimp_mulComm0" (formula "33") (term "1"))
                        (rule "polySimp_rightDist" (formula "33") (term "1"))
                        (rule "polySimp_mulLiterals" (formula "33") (term "1,1"))
                        (rule "mul_literals" (formula "33") (term "0,1"))
                        (rule "polySimp_elimOne" (formula "33") (term "1,1"))
                        (rule "inEqSimp_invertInEq1" (formula "31"))
                        (rule "mul_literals" (formula "31") (term "1"))
                        (rule "polySimp_mulLiterals" (formula "31") (term "0"))
                        (rule "polySimp_elimOne" (formula "31") (term "0"))
                        (rule "shift_paren_or" (formula "4") (term "0,0,0"))
                         (builtin "One Step Simplification" (formula "4"))
                        (rule "eqSymm" (formula "4") (term "1,1,0,0,0"))
                        (rule "castedGetAny" (formula "4") (term "1,0,0,0,0,0,0"))
                        (rule "castedGetAny" (formula "4") (term "0,0,1,0,0,0"))
                        (rule "castedGetAny" (formula "4") (term "0,1,1,0,0,0"))
                         (builtin "One Step Simplification" (formula "4"))
                        (rule "true_left" (formula "4"))
                        (rule "shift_paren_or" (formula "3") (term "0,0,0"))
                         (builtin "One Step Simplification" (formula "3"))
                        (rule "eqSymm" (formula "3") (term "1,1,0,0,0"))
                        (rule "castedGetAny" (formula "3") (term "1,0,0,0,0,0,0"))
                        (rule "castedGetAny" (formula "3") (term "0,0,1,0,0,0"))
                        (rule "castedGetAny" (formula "3") (term "0,1,1,0,0,0"))
                         (builtin "One Step Simplification" (formula "3"))
                        (rule "true_left" (formula "3"))
                        (rule "cnf_rightDist" (formula "2") (term "0,0,0"))
                        (rule "distr_forallAnd" (formula "2") (term "0,0"))
                        (rule "distr_forallAnd" (formula "2") (term "0"))
                        (rule "distr_forallAnd" (formula "2"))
                        (rule "andLeft" (formula "2"))
                        (rule "commute_or_2" (formula "2") (term "0,0,0"))
                         (builtin "One Step Simplification" (formula "2"))
                        (rule "eqSymm" (formula "2") (term "1,0,0,0,0"))
                        (rule "castedGetAny" (formula "2") (term "1,0,0,1,0,0,0"))
                        (rule "castedGetAny" (formula "2") (term "0,0,0,0,0,0"))
                        (rule "castedGetAny" (formula "2") (term "0,1,0,0,0,0"))
                         (builtin "One Step Simplification" (formula "2"))
                        (rule "true_left" (formula "2"))
                        (rule "shift_paren_or" (formula "2") (term "0,0,0"))
                         (builtin "One Step Simplification" (formula "2"))
                        (rule "eqSymm" (formula "2") (term "1,1,0,0,0"))
                        (rule "castedGetAny" (formula "2") (term "0,0,1,0,0,0"))
                        (rule "castedGetAny" (formula "2") (term "1,0,0,0,0,0,0"))
                        (rule "castedGetAny" (formula "2") (term "0,1,1,0,0,0"))
                         (builtin "One Step Simplification" (formula "2"))
                        (rule "true_left" (formula "2"))
                        (rule "Use_information_flow_contract_for_compareTo_325434207" (formula "20") (ifseqformula "20"))
                         (builtin "One Step Simplification" (formula "20") (ifInst ""  (formula "94")) (ifInst ""  (formula "94")))
                        (rule "true_left" (formula "20"))
                        (rule "Use_information_flow_contract_for_getOrder_757678341" (formula "61") (ifseqformula "26"))
                        (rule "replace_known_left" (formula "61") (term "1,1") (ifseqformula "8"))
                         (builtin "One Step Simplification" (formula "61"))
                        (rule "true_left" (formula "61"))
                        (rule "Use_information_flow_contract_for_getOrder_757678341" (formula "61") (ifseqformula "61"))
                         (builtin "One Step Simplification" (formula "61"))
                        (rule "true_left" (formula "61"))
                        (rule "Use_information_flow_contract_for_getOrder_757678341" (formula "26") (ifseqformula "26"))
                         (builtin "One Step Simplification" (formula "26"))
                        (rule "true_left" (formula "26"))
                        (rule "Use_information_flow_contract_for_compareTo_325434207" (formula "20") (ifseqformula "55"))
                        (rule "eqSymm" (formula "20") (term "1,0,1"))
                        (rule "eqSymm" (formula "20") (term "1,1"))
                        (rule "eqSymm" (formula "20") (term "0,0,1"))
                        (rule "replace_known_right" (formula "20") (term "0,1,0,0") (ifseqformula "94"))
                         (builtin "One Step Simplification" (formula "20") (ifInst ""  (formula "95")) (ifInst ""  (formula "7")))
                        (rule "applyEqRigid" (formula "20") (term "0,0,1") (ifseqformula "57"))
                        (rule "eqSymm" (formula "20") (term "0,1"))
                        (rule "replace_known_left" (formula "20") (term "0,1") (ifseqformula "22"))
                         (builtin "One Step Simplification" (formula "20"))
                        (rule "Class_invariant_axiom_for_java_math_BigInteger" (formula "20") (term "1,0"))
                        (rule "replace_known_right" (formula "20") (term "0,0,1,0") (ifseqformula "95"))
                         (builtin "One Step Simplification" (formula "20") (ifInst ""  (formula "57")))
                        (rule "Class_invariant_axiom_for_java_math_BigInteger" (formula "20") (term "0"))
                        (rule "replace_known_right" (formula "20") (term "0,0,0") (ifseqformula "94"))
                         (builtin "One Step Simplification" (formula "20") (ifInst ""  (formula "22")))
                        (rule "applyEq" (formula "56") (term "4") (ifseqformula "20"))
                        (rule "applyEq" (formula "55") (term "0") (ifseqformula "20"))
                        (rule "applyEq" (formula "48") (term "0") (ifseqformula "20"))
                        (rule "Use_information_flow_contract_for_multiply_1272441881_0" (formula "72") (ifseqformula "39"))
                        (rule "replaceKnownSelect_taclet21_12" (formula "72") (term "0,1,1"))
                        (rule "replaceKnownSelect_taclet21_11" (formula "72") (term "1,1,1"))
                        (rule "replaceKnownAuxiliaryConstant_taclet011021_18" (formula "72") (term "0,1,1"))
                        (rule "replaceKnownAuxiliaryConstant_taclet0011021_19" (formula "72") (term "1,1,1"))
                        (rule "replaceKnownSelect_taclet21_8" (formula "72") (term "1,1,0,1"))
                        (rule "replaceKnownSelect_taclet21_9" (formula "72") (term "0,1,0,1"))
                        (rule "replaceKnownAuxiliaryConstant_taclet21_10" (formula "72") (term "1,1,0,1"))
                         (builtin "One Step Simplification" (formula "72") (ifInst ""  (formula "84")) (ifInst ""  (formula "83")) (ifInst ""  (formula "101")))
                        (rule "pullOutSelect" (formula "72") (term "1,0,1") (inst "selectSK=org_bouncycastle_math_ec_ECPoint_value_4"))
                        (rule "simplifySelectOfAnonEQ" (formula "72") (ifseqformula "28"))
                         (builtin "One Step Simplification" (formula "72") (ifInst ""  (formula "98")) (ifInst ""  (formula "15")))
                        (rule "applyEqReverse" (formula "73") (term "1,0,1") (ifseqformula "72"))
                        (rule "hideAuxiliaryEq" (formula "72"))
                        (rule "pullOutSelect" (formula "72") (term "0,0,1") (inst "selectSK=org_bouncycastle_math_ec_ECPoint_value_5"))
                        (rule "simplifySelectOfAnonEQ" (formula "72") (ifseqformula "62"))
                         (builtin "One Step Simplification" (formula "72") (ifInst ""  (formula "99")) (ifInst ""  (formula "50")))
                        (rule "applyEqReverse" (formula "73") (term "0,0,1") (ifseqformula "72"))
                        (rule "hideAuxiliaryEq" (formula "72"))
                        (rule "replace_known_left" (formula "72") (term "0,1") (ifseqformula "6"))
                         (builtin "One Step Simplification" (formula "72"))
                        (rule "notLeft" (formula "72"))
                        (rule "Class_invariant_axiom_for_org_bouncycastle_math_ec_ECPoint" (formula "78") (term "1"))
                         (builtin "One Step Simplification" (formula "78"))
                        (rule "Class_invariant_axiom_for_org_bouncycastle_math_ec_ECPoint" (formula "78"))
                        (rule "closeTrue" (formula "78"))
                     )
                  )
                  (branch " resultAtPost_226_A.<created>@anon_heap_mod«anonHeapFunction» = TRUE FALSE"
                     (rule "applyEqReverse" (formula "106") (term "1") (ifseqformula "9"))
                     (rule "hideAuxiliaryEq" (formula "9"))
                     (rule "replace_known_right" (formula "40") (term "0") (ifseqformula "82"))
                      (builtin "One Step Simplification" (formula "40"))
                     (rule "commute_or" (formula "3") (term "0,0,0,0"))
                     (rule "commute_or" (formula "3") (term "0,1,0,0,0"))
                     (rule "shift_paren_or" (formula "6") (term "0,0,0,0,0"))
                     (rule "commute_or" (formula "2") (term "0,0,0,0"))
                     (rule "onlyCreatedObjectsAreReferenced" (formula "30") (term "2") (ifseqformula "21"))
                     (rule "replace_known_left" (formula "30") (term "1") (ifseqformula "15"))
                      (builtin "One Step Simplification" (formula "30") (ifInst ""  (formula "96")))
                     (rule "true_left" (formula "30"))
                     (rule "onlyCreatedObjectsAreReferenced" (formula "98") (term "0") (ifseqformula "55"))
                     (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "99"))
                      (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "61")))
                     (rule "true_left" (formula "1"))
                     (rule "onlyCreatedObjectsAreReferenced" (formula "26") (term "1,0") (ifseqformula "21"))
                     (rule "replace_known_right" (formula "26") (term "0") (ifseqformula "98"))
                      (builtin "One Step Simplification" (formula "26") (ifInst ""  (formula "27")))
                     (rule "true_left" (formula "26"))
                     (rule "onlyCreatedObjectsAreReferenced" (formula "13") (term "1,1,0") (ifseqformula "21"))
                     (rule "replace_known_right" (formula "13") (term "0") (ifseqformula "94"))
                      (builtin "One Step Simplification" (formula "13") (ifInst ""  (formula "15")))
                     (rule "true_left" (formula "13"))
                     (rule "onlyCreatedObjectsAreReferenced" (formula "48") (term "1,0") (ifseqformula "55"))
                     (rule "replace_known_right" (formula "48") (term "0") (ifseqformula "95"))
                      (builtin "One Step Simplification" (formula "48") (ifInst ""  (formula "49")))
                     (rule "true_left" (formula "48"))
                     (rule "onlyCreatedObjectsAreReferenced" (formula "13") (term "1,0") (ifseqformula "21"))
                     (rule "replace_known_right" (formula "13") (term "0") (ifseqformula "92"))
                      (builtin "One Step Simplification" (formula "13") (ifInst ""  (formula "14")))
                     (rule "true_left" (formula "13"))
                     (rule "onlyCreatedObjectsAreReferenced" (formula "47") (term "1,0") (ifseqformula "55"))
                     (rule "replace_known_right" (formula "47") (term "0") (ifseqformula "93"))
                      (builtin "One Step Simplification" (formula "47") (ifInst ""  (formula "48")))
                     (rule "true_left" (formula "47"))
                     (rule "onlyCreatedObjectsAreReferenced" (formula "62") (term "1,0") (ifseqformula "55"))
                     (rule "replace_known_right" (formula "62") (term "0") (ifseqformula "97"))
                      (builtin "One Step Simplification" (formula "62") (ifInst ""  (formula "49")))
                     (rule "true_left" (formula "62"))
                     (rule "commute_or" (formula "2") (term "0,1,0,0,0"))
                     (rule "commute_or" (formula "1") (term "0,0,0,0"))
                     (rule "commute_or" (formula "1") (term "0,1,0,0,0"))
                     (rule "commute_or_2" (formula "4") (term "0,0,0"))
                     (rule "commute_or_2" (formula "3") (term "0,0,0"))
                     (rule "commute_and" (formula "32") (term "0,1"))
                     (rule "commute_or_2" (formula "2") (term "0,0,0"))
                     (rule "commute_or_2" (formula "1") (term "0,0,0"))
                     (rule "commute_or_2" (formula "6") (term "0,0,0,0,0"))
                      (builtin "One Step Simplification" (formula "6"))
                     (rule "shift_paren_or" (formula "5") (term "0,0,0,0,0"))
                     (rule "commute_or_2" (formula "6") (term "0,0,0,0"))
                     (rule "shift_paren_or" (formula "4") (term "0,0,0,0"))
                     (rule "commute_or_2" (formula "3") (term "1,0,0,0,0"))
                     (rule "commute_or_2" (formula "2") (term "1,0,0,0,0"))
                     (rule "commute_or_2" (formula "1") (term "1,0,0,0,0"))
                     (rule "commute_or_2" (formula "5") (term "0,0,0,0,0"))
                      (builtin "One Step Simplification" (formula "5"))
                     (rule "commute_or_2" (formula "5") (term "0,0,0,0"))
                     (rule "shift_paren_or" (formula "3") (term "0,0,0,0"))
                     (rule "shift_paren_or" (formula "2") (term "0,0,0,0"))
                     (rule "shift_paren_or" (formula "1") (term "0,0,0,0"))
                     (rule "cnf_rightDist" (formula "6") (term "0,0,0"))
                     (rule "distr_forallAnd" (formula "6") (term "0,0"))
                     (rule "distr_forallAnd" (formula "6") (term "0"))
                     (rule "distr_forallAnd" (formula "6"))
                     (rule "andLeft" (formula "6"))
                     (rule "commute_or_2" (formula "6") (term "0,0,0"))
                      (builtin "One Step Simplification" (formula "6"))
                     (rule "eqSymm" (formula "6") (term "1,0,0,0,0"))
                     (rule "castedGetAny" (formula "6") (term "0,0,0,0,0,0"))
                     (rule "castedGetAny" (formula "6") (term "1,0,0,1,0,0,0"))
                     (rule "castedGetAny" (formula "6") (term "0,1,0,0,0,0"))
                      (builtin "One Step Simplification" (formula "6"))
                     (rule "true_left" (formula "6"))
                     (rule "shift_paren_or" (formula "6") (term "0,0,0"))
                      (builtin "One Step Simplification" (formula "6"))
                     (rule "eqSymm" (formula "6") (term "1,1,0,0,0"))
                     (rule "castedGetAny" (formula "6") (term "0,0,1,0,0,0"))
                     (rule "castedGetAny" (formula "6") (term "0,0,0,0,0,0"))
                     (rule "castedGetAny" (formula "6") (term "0,1,1,0,0,0"))
                      (builtin "One Step Simplification" (formula "6"))
                     (rule "true_left" (formula "6"))
                     (rule "commute_and" (formula "4") (term "1,0,0,0"))
                     (rule "commute_and" (formula "3") (term "1,0,0,0"))
                     (rule "commute_and" (formula "2") (term "1,0,0,0"))
                     (rule "commute_and" (formula "1") (term "1,0,0,0"))
                     (rule "cnf_rightDist" (formula "5") (term "0,0,0"))
                     (rule "distr_forallAnd" (formula "5") (term "0,0"))
                     (rule "distr_forallAnd" (formula "5") (term "0"))
                     (rule "distr_forallAnd" (formula "5"))
                     (rule "andLeft" (formula "5"))
                     (rule "commute_or_2" (formula "5") (term "0,0,0"))
                      (builtin "One Step Simplification" (formula "5"))
                     (rule "eqSymm" (formula "5") (term "1,0,0,0,0"))
                     (rule "castedGetAny" (formula "5") (term "1,0,0,1,0,0,0"))
                     (rule "castedGetAny" (formula "5") (term "0,0,0,0,0,0"))
                     (rule "castedGetAny" (formula "5") (term "0,1,0,0,0,0"))
                      (builtin "One Step Simplification" (formula "5"))
                     (rule "true_left" (formula "5"))
                     (rule "shift_paren_or" (formula "5") (term "0,0,0"))
                      (builtin "One Step Simplification" (formula "5"))
                     (rule "eqSymm" (formula "5") (term "1,1,0,0,0"))
                     (rule "castedGetAny" (formula "5") (term "0,0,1,0,0,0"))
                     (rule "castedGetAny" (formula "5") (term "0,0,0,0,0,0"))
                     (rule "castedGetAny" (formula "5") (term "0,1,1,0,0,0"))
                      (builtin "One Step Simplification" (formula "5"))
                     (rule "true_left" (formula "5"))
                     (rule "shift_paren_or" (formula "4") (term "0,0,0,0,0"))
                      (builtin "One Step Simplification" (formula "4"))
                     (rule "shift_paren_or" (formula "3") (term "0,0,0,0,0"))
                      (builtin "One Step Simplification" (formula "3"))
                     (rule "shift_paren_or" (formula "2") (term "0,0,0,0,0"))
                      (builtin "One Step Simplification" (formula "2"))
                     (rule "shift_paren_or" (formula "1") (term "0,0,0,0,0"))
                      (builtin "One Step Simplification" (formula "1"))
                     (rule "commute_or_2" (formula "4") (term "0,0,0,0"))
                     (rule "cnf_rightDist" (formula "3") (term "0,0,0"))
                     (rule "distr_forallAnd" (formula "3") (term "0,0"))
                     (rule "distr_forallAnd" (formula "3") (term "0"))
                     (rule "distr_forallAnd" (formula "3"))
                     (rule "andLeft" (formula "3"))
                     (rule "shift_paren_or" (formula "4") (term "0,0,0"))
                      (builtin "One Step Simplification" (formula "4"))
                     (rule "eqSymm" (formula "4") (term "1,1,0,0,0"))
                     (rule "castedGetAny" (formula "4") (term "0,0,1,0,0,0"))
                     (rule "castedGetAny" (formula "4") (term "0,0,0,0,0,0"))
                     (rule "castedGetAny" (formula "4") (term "0,1,1,0,0,0"))
                      (builtin "One Step Simplification" (formula "4"))
                     (rule "true_left" (formula "4"))
                     (rule "cnf_rightDist" (formula "2") (term "0,0,0"))
                     (rule "distr_forallAnd" (formula "2") (term "0,0"))
                     (rule "distr_forallAnd" (formula "2") (term "0"))
                     (rule "distr_forallAnd" (formula "2"))
                     (rule "andLeft" (formula "2"))
                     (rule "shift_paren_or" (formula "3") (term "0,0,0"))
                      (builtin "One Step Simplification" (formula "3"))
                     (rule "eqSymm" (formula "3") (term "1,1,0,0,0"))
                     (rule "castedGetAny" (formula "3") (term "0,0,1,0,0,0"))
                     (rule "castedGetAny" (formula "3") (term "0,0,0,0,0,0"))
                     (rule "castedGetAny" (formula "3") (term "0,1,1,0,0,0"))
                      (builtin "One Step Simplification" (formula "3"))
                     (rule "true_left" (formula "3"))
                     (rule "cnf_rightDist" (formula "1") (term "0,0,0"))
                     (rule "distr_forallAnd" (formula "1") (term "0,0"))
                     (rule "distr_forallAnd" (formula "1") (term "0"))
                     (rule "distr_forallAnd" (formula "1"))
                     (rule "andLeft" (formula "1"))
                     (rule "cnf_rightDist" (formula "5") (term "0,0,0"))
                     (rule "distr_forallAnd" (formula "5") (term "0,0"))
                     (rule "distr_forallAnd" (formula "5") (term "0"))
                     (rule "distr_forallAnd" (formula "5"))
                     (rule "andLeft" (formula "5"))
                     (rule "shift_paren_or" (formula "2") (term "0,0,0"))
                      (builtin "One Step Simplification" (formula "2"))
                     (rule "eqSymm" (formula "2") (term "1,1,0,0,0"))
                     (rule "castedGetAny" (formula "2") (term "0,0,0,0,0,0"))
                     (rule "castedGetAny" (formula "2") (term "0,0,1,0,0,0"))
                     (rule "castedGetAny" (formula "2") (term "0,1,1,0,0,0"))
                      (builtin "One Step Simplification" (formula "2"))
                     (rule "true_left" (formula "2"))
                     (rule "cnf_rightDist" (formula "3") (term "0,0,0"))
                     (rule "distr_forallAnd" (formula "3") (term "0,0"))
                     (rule "distr_forallAnd" (formula "3") (term "0"))
                     (rule "distr_forallAnd" (formula "3"))
                     (rule "andLeft" (formula "3"))
                     (rule "cnf_rightDist" (formula "2") (term "0,0,0"))
                     (rule "distr_forallAnd" (formula "2") (term "0,0"))
                     (rule "distr_forallAnd" (formula "2") (term "0"))
                     (rule "distr_forallAnd" (formula "2"))
                     (rule "andLeft" (formula "2"))
                     (rule "commute_or_2" (formula "2") (term "0,0,0"))
                      (builtin "One Step Simplification" (formula "2"))
                     (rule "eqSymm" (formula "2") (term "1,0,0,0,0"))
                     (rule "castedGetAny" (formula "2") (term "1,0,0,1,0,0,0"))
                     (rule "castedGetAny" (formula "2") (term "0,0,0,0,0,0"))
                     (rule "castedGetAny" (formula "2") (term "0,1,0,0,0,0"))
                      (builtin "One Step Simplification" (formula "2"))
                     (rule "true_left" (formula "2"))
                     (rule "shift_paren_or" (formula "3") (term "0,0,0"))
                      (builtin "One Step Simplification" (formula "3"))
                     (rule "eqSymm" (formula "3") (term "1,1,0,0,0"))
                     (rule "castedGetAny" (formula "3") (term "0,0,1,0,0,0"))
                     (rule "castedGetAny" (formula "3") (term "1,0,0,0,0,0,0"))
                     (rule "castedGetAny" (formula "3") (term "0,1,1,0,0,0"))
                      (builtin "One Step Simplification" (formula "3"))
                     (rule "true_left" (formula "3"))
                     (rule "shift_paren_or" (formula "2") (term "0,0,0"))
                      (builtin "One Step Simplification" (formula "2"))
                     (rule "eqSymm" (formula "2") (term "1,1,0,0,0"))
                     (rule "castedGetAny" (formula "2") (term "1,0,0,0,0,0,0"))
                     (rule "castedGetAny" (formula "2") (term "0,0,1,0,0,0"))
                     (rule "castedGetAny" (formula "2") (term "0,1,1,0,0,0"))
                      (builtin "One Step Simplification" (formula "2"))
                     (rule "true_left" (formula "2"))
                     (rule "cnf_rightDist" (formula "1") (term "0,0,0"))
                     (rule "distr_forallAnd" (formula "1") (term "0,0"))
                     (rule "distr_forallAnd" (formula "1") (term "0"))
                     (rule "distr_forallAnd" (formula "1"))
                     (rule "andLeft" (formula "1"))
                     (rule "cnf_rightDist" (formula "3") (term "0,0,0"))
                     (rule "distr_forallAnd" (formula "3") (term "0,0"))
                     (rule "distr_forallAnd" (formula "3") (term "0"))
                     (rule "distr_forallAnd" (formula "3"))
                     (rule "andLeft" (formula "3"))
                     (rule "commute_or_2" (formula "3") (term "0,0,0"))
                      (builtin "One Step Simplification" (formula "3"))
                     (rule "eqSymm" (formula "3") (term "1,0,0,0,0"))
                     (rule "castedGetAny" (formula "3") (term "1,0,0,1,0,0,0"))
                     (rule "castedGetAny" (formula "3") (term "0,0,0,0,0,0"))
                     (rule "castedGetAny" (formula "3") (term "0,1,0,0,0,0"))
                      (builtin "One Step Simplification" (formula "3"))
                     (rule "true_left" (formula "3"))
                     (rule "ifthenelse_split_for" (formula "29") (term "1,1"))
                     (branch "result_228_A_1.value@heapAtPre_A«anonHeapFunction» ≥ 0 TRUE"
                        (rule "cnf_rightDist" (formula "30"))
                        (rule "andLeft" (formula "30"))
                        (rule "commute_or" (formula "31"))
                        (rule "cnf_rightDist" (formula "30"))
                        (rule "andLeft" (formula "30"))
                        (rule "commute_or" (formula "31"))
                        (rule "shift_paren_or" (formula "2") (term "0,0,0"))
                         (builtin "One Step Simplification" (formula "2"))
                        (rule "eqSymm" (formula "2") (term "1,1,0,0,0"))
                        (rule "castedGetAny" (formula "2") (term "0,0,1,0,0,0"))
                        (rule "castedGetAny" (formula "2") (term "1,0,0,0,0,0,0"))
                        (rule "castedGetAny" (formula "2") (term "0,1,1,0,0,0"))
                         (builtin "One Step Simplification" (formula "2"))
                        (rule "true_left" (formula "2"))
                        (rule "shift_paren_or" (formula "2") (term "0,0,0"))
                         (builtin "One Step Simplification" (formula "2"))
                        (rule "eqSymm" (formula "2") (term "1,1,0,0,0"))
                        (rule "castedGetAny" (formula "2") (term "1,0,0,0,0,0,0"))
                        (rule "castedGetAny" (formula "2") (term "0,0,1,0,0,0"))
                        (rule "castedGetAny" (formula "2") (term "0,1,1,0,0,0"))
                         (builtin "One Step Simplification" (formula "2"))
                        (rule "true_left" (formula "2"))
                        (rule "cnf_rightDist" (formula "1") (term "0,0,0"))
                        (rule "distr_forallAnd" (formula "1") (term "0,0"))
                        (rule "distr_forallAnd" (formula "1") (term "0"))
                        (rule "distr_forallAnd" (formula "1"))
                        (rule "andLeft" (formula "1"))
                        (rule "commute_or_2" (formula "1") (term "0,0,0"))
                         (builtin "One Step Simplification" (formula "1"))
                        (rule "eqSymm" (formula "1") (term "1,0,0,0,0"))
                        (rule "castedGetAny" (formula "1") (term "1,0,0,1,0,0,0"))
                        (rule "castedGetAny" (formula "1") (term "0,0,0,0,0,0"))
                        (rule "castedGetAny" (formula "1") (term "0,1,0,0,0,0"))
                         (builtin "One Step Simplification" (formula "1"))
                        (rule "true_left" (formula "1"))
                        (rule "shift_paren_or" (formula "1") (term "0,0,0"))
                         (builtin "One Step Simplification" (formula "1"))
                        (rule "eqSymm" (formula "1") (term "1,1,0,0,0"))
                        (rule "castedGetAny" (formula "1") (term "0,0,1,0,0,0"))
                        (rule "castedGetAny" (formula "1") (term "1,0,0,0,0,0,0"))
                        (rule "castedGetAny" (formula "1") (term "0,1,1,0,0,0"))
                         (builtin "One Step Simplification" (formula "1"))
                        (rule "true_left" (formula "1"))
                        (rule "cut_direct" (formula "27") (term "0"))
                        (branch "CUT: result_228_A_1.value@heapAtPre_A«anonHeapFunction» = 0 TRUE"
                            (builtin "One Step Simplification" (formula "28"))
                           (rule "true_left" (formula "28"))
                           (rule "replace_known_left" (formula "28") (term "0") (ifseqformula "27"))
                            (builtin "One Step Simplification" (formula "28"))
                           (rule "true_left" (formula "28"))
                           (rule "replace_known_left" (formula "28") (term "0") (ifseqformula "27"))
                            (builtin "One Step Simplification" (formula "28"))
                           (rule "true_left" (formula "28"))
                           (rule "applyEq" (formula "29") (term "1,0") (ifseqformula "27"))
                           (rule "times_zero_1" (formula "29") (term "0"))
                           (rule "polySimp_homoEq" (formula "29"))
                           (rule "mul_literals" (formula "29") (term "1,0"))
                           (rule "add_zero_right" (formula "29") (term "0"))
                           (rule "applyEq" (formula "28") (term "1,0") (ifseqformula "27"))
                           (rule "eqSymm" (formula "28"))
                           (rule "polySimp_homoEq" (formula "28"))
                           (rule "polySimp_mulLiterals" (formula "28") (term "1,0"))
                           (rule "polySimp_elimOne" (formula "28") (term "1,0"))
                           (rule "applyEq" (formula "26") (term "0") (ifseqformula "27"))
                           (rule "qeq_literals" (formula "26"))
                           (rule "true_left" (formula "26"))
                           (rule "applyEq" (formula "56") (term "1") (ifseqformula "26"))
                           (rule "applyEq" (formula "6") (term "1") (ifseqformula "26"))
                           (rule "applyEq" (formula "22") (term "1") (ifseqformula "26"))
                           (rule "applyEq" (formula "27") (term "1,1,0") (ifseqformula "26"))
                           (rule "polySimp_addComm0" (formula "27") (term "0"))
                           (rule "polySimp_sepNegMonomial" (formula "28"))
                           (rule "polySimp_mulLiterals" (formula "28") (term "0"))
                           (rule "polySimp_elimOne" (formula "28") (term "0"))
                           (rule "applyEq" (formula "27") (term "0,1,0") (ifseqformula "28"))
                           (rule "polySimp_addComm0" (formula "27") (term "0"))
                           (rule "applyEq" (formula "3") (term "0") (ifseqformula "28"))
                           (rule "applyEq" (formula "27") (term "0,0,1,0") (ifseqformula "28"))
                           (rule "polySimp_addComm0" (formula "27") (term "0"))
                           (rule "applyEq" (formula "5") (term "1") (ifseqformula "28"))
                           (rule "polySimp_sepPosMonomial" (formula "27"))
                           (rule "jdiv_axiom" (formula "27") (term "0"))
                           (rule "eqSymm" (formula "27"))
                           (rule "applyEq" (formula "27") (term "1") (ifseqformula "28"))
                            (builtin "One Step Simplification" (formula "27"))
                           (rule "eqSymm" (formula "27") (term "1"))
                           (rule "polySimp_homoEq" (formula "27") (term "1"))
                           (rule "polySimp_mulLiterals" (formula "27") (term "1,0,1"))
                           (rule "polySimp_elimOne" (formula "27") (term "1,0,1"))
                           (rule "polySimp_sepPosMonomial" (formula "27") (term "1"))
                           (rule "inEqSimp_contradInEq0" (formula "27") (term "0,0") (ifseqformula "3"))
                           (rule "qeq_literals" (formula "27") (term "0,0,0"))
                            (builtin "One Step Simplification" (formula "27"))
                           (rule "true_left" (formula "27"))
                           (rule "div_axiom" (formula "27") (term "0,1") (inst "quotient=quotient_1"))
                            (builtin "One Step Simplification" (formula "27"))
                           (rule "true_left" (formula "27"))
                           (rule "Use_information_flow_contract_for_compareTo_325434207" (formula "18") (ifseqformula "18"))
                            (builtin "One Step Simplification" (formula "18") (ifInst ""  (formula "92")) (ifInst ""  (formula "92")))
                           (rule "true_left" (formula "18"))
                           (rule "Use_information_flow_contract_for_getOrder_757678341" (formula "58") (ifseqformula "24"))
                           (rule "applyEq" (formula "58") (term "0,1,1") (ifseqformula "6"))
                           (rule "eqSymm" (formula "58") (term "1,1"))
                           (rule "replace_known_left" (formula "58") (term "1,1") (ifseqformula "26"))
                            (builtin "One Step Simplification" (formula "58"))
                           (rule "true_left" (formula "58"))
                           (rule "Use_information_flow_contract_for_getOrder_757678341" (formula "58") (ifseqformula "58"))
                            (builtin "One Step Simplification" (formula "58"))
                           (rule "true_left" (formula "58"))
                           (rule "Use_information_flow_contract_for_getOrder_757678341" (formula "24") (ifseqformula "24"))
                            (builtin "One Step Simplification" (formula "24"))
                           (rule "true_left" (formula "24"))
                           (rule "Use_information_flow_contract_for_compareTo_325434207" (formula "18") (ifseqformula "52"))
                           (rule "eqSymm" (formula "18") (term "1,1"))
                           (rule "eqSymm" (formula "18") (term "0,0,1"))
                           (rule "eqSymm" (formula "18") (term "1,0,1"))
                           (rule "replace_known_right" (formula "18") (term "0,1,1,0") (ifseqformula "93"))
                            (builtin "One Step Simplification" (formula "18") (ifInst ""  (formula "92")))
                           (rule "applyEqRigid" (formula "18") (term "0,1,0,1") (ifseqformula "54"))
                           (rule "eqSymm" (formula "18") (term "1,0,1"))
                           (rule "replace_known_left" (formula "18") (term "1,0,1") (ifseqformula "20"))
                            (builtin "One Step Simplification" (formula "18"))
                           (rule "applyEq" (formula "18") (term "0,0,1") (ifseqformula "5"))
                           (rule "eqSymm" (formula "18") (term "0,1"))
                           (rule "replace_known_left" (formula "18") (term "0,1") (ifseqformula "29"))
                            (builtin "One Step Simplification" (formula "18"))
                           (rule "Class_invariant_axiom_for_java_math_BigInteger" (formula "18") (term "1,0"))
                           (rule "replace_known_right" (formula "18") (term "0,0,1,0") (ifseqformula "93"))
                            (builtin "One Step Simplification" (formula "18") (ifInst ""  (formula "54")))
                           (rule "Class_invariant_axiom_for_java_math_BigInteger" (formula "18") (term "0"))
                           (rule "replace_known_right" (formula "18") (term "0,0,0") (ifseqformula "92"))
                            (builtin "One Step Simplification" (formula "18") (ifInst ""  (formula "20")))
                           (rule "applyEq" (formula "45") (term "0") (ifseqformula "18"))
                           (rule "applyEq" (formula "52") (term "4") (ifseqformula "18"))
                           (rule "applyEq" (formula "51") (term "0") (ifseqformula "18"))
                           (rule "Use_information_flow_contract_for_multiply_1272441881_0" (formula "69") (ifseqformula "36"))
                           (rule "replaceKnownSelect_taclet21_11" (formula "69") (term "1,1,1"))
                           (rule "replaceKnownSelect_taclet21_12" (formula "69") (term "0,1,1"))
                           (rule "replaceKnownAuxiliaryConstant_taclet1011021_19" (formula "69") (term "1,1,1"))
                           (rule "replaceKnownAuxiliaryConstant_taclet011021_18" (formula "69") (term "0,1,1"))
                           (rule "replaceKnownSelect_taclet21_9" (formula "69") (term "0,1,0,1"))
                           (rule "replaceKnownSelect_taclet21_8" (formula "69") (term "1,1,0,1"))
                           (rule "replaceKnownAuxiliaryConstant_taclet021_15" (formula "69") (term "0,1,0,1"))
                           (rule "replaceKnownAuxiliaryConstant_taclet21_10" (formula "69") (term "1,1,0,1"))
                           (rule "replaceKnownAuxiliaryConstant_taclet021_15" (formula "69") (term "1,1,0,1"))
                            (builtin "One Step Simplification" (formula "69") (ifInst ""  (formula "82")) (ifInst ""  (formula "81")) (ifInst ""  (formula "99")))
                           (rule "pullOutSelect" (formula "69") (term "1,0,1") (inst "selectSK=org_bouncycastle_math_ec_ECPoint_value_4"))
                           (rule "simplifySelectOfAnonEQ" (formula "69") (ifseqformula "26"))
                            (builtin "One Step Simplification" (formula "69") (ifInst ""  (formula "96")) (ifInst ""  (formula "13")))
                           (rule "applyEqReverse" (formula "70") (term "1,0,1") (ifseqformula "69"))
                           (rule "hideAuxiliaryEq" (formula "69"))
                           (rule "pullOutSelect" (formula "69") (term "0,0,1") (inst "selectSK=org_bouncycastle_math_ec_ECPoint_value_5"))
                           (rule "simplifySelectOfAnonEQ" (formula "69") (ifseqformula "59"))
                            (builtin "One Step Simplification" (formula "69") (ifInst ""  (formula "97")) (ifInst ""  (formula "47")))
                           (rule "applyEqReverse" (formula "70") (term "0,0,1") (ifseqformula "69"))
                           (rule "hideAuxiliaryEq" (formula "69"))
                           (rule "replace_known_left" (formula "69") (term "0,1") (ifseqformula "4"))
                            (builtin "One Step Simplification" (formula "69"))
                           (rule "notLeft" (formula "69"))
                           (rule "Class_invariant_axiom_for_org_bouncycastle_math_ec_ECPoint" (formula "75") (term "1"))
                            (builtin "One Step Simplification" (formula "75"))
                           (rule "Class_invariant_axiom_for_org_bouncycastle_math_ec_ECPoint" (formula "75"))
                           (rule "closeTrue" (formula "75"))
                        )
                        (branch "CUT: result_228_A_1.value@heapAtPre_A«anonHeapFunction» = 0 FALSE"
                            (builtin "One Step Simplification" (formula "27"))
                           (rule "replace_known_right" (formula "28") (term "0") (ifseqformula "79"))
                            (builtin "One Step Simplification" (formula "28"))
                           (rule "replace_known_right" (formula "29") (term "0") (ifseqformula "79"))
                            (builtin "One Step Simplification" (formula "29"))
                           (rule "applyEq" (formula "31") (term "0,0") (ifseqformula "28"))
                           (rule "polySimp_mulComm0" (formula "31") (term "0"))
                           (rule "applyEq" (formula "29") (term "0") (ifseqformula "31"))
                           (rule "inEqSimp_homoInEq1" (formula "29"))
                           (rule "polySimp_mulComm0" (formula "29") (term "1,0"))
                           (rule "polySimp_rightDist" (formula "29") (term "1,0"))
                           (rule "polySimp_mulLiterals" (formula "29") (term "1,1,0"))
                           (rule "polySimp_elimOne" (formula "29") (term "1,1,0"))
                           (rule "polySimp_mulComm0" (formula "29") (term "0,1,0"))
                           (rule "polySimp_addComm1" (formula "29") (term "0"))
                           (rule "polySimp_addAssoc" (formula "29") (term "0,0"))
                           (rule "polySimp_addComm1" (formula "29") (term "0,0,0"))
                           (rule "polySimp_pullOutFactor2b" (formula "29") (term "0,0"))
                           (rule "add_literals" (formula "29") (term "1,1,0,0"))
                           (rule "times_zero_1" (formula "29") (term "1,0,0"))
                           (rule "add_zero_right" (formula "29") (term "0,0"))
                           (rule "applyEq" (formula "27") (term "0") (ifseqformula "31"))
                           (rule "inEqSimp_homoInEq0" (formula "27"))
                           (rule "polySimp_mulComm0" (formula "27") (term "1,0"))
                           (rule "polySimp_rightDist" (formula "27") (term "1,0"))
                           (rule "polySimp_mulLiterals" (formula "27") (term "1,1,0"))
                           (rule "polySimp_elimOne" (formula "27") (term "1,1,0"))
                           (rule "polySimp_mulComm0" (formula "27") (term "0,1,0"))
                           (rule "polySimp_addAssoc" (formula "27") (term "0"))
                           (rule "polySimp_addComm0" (formula "27") (term "0,0"))
                           (rule "polySimp_pullOutFactor2b" (formula "27") (term "0"))
                           (rule "add_literals" (formula "27") (term "1,1,0"))
                           (rule "times_zero_1" (formula "27") (term "1,0"))
                           (rule "add_zero_right" (formula "27") (term "0"))
                           (rule "applyEq" (formula "30") (term "0,1") (ifseqformula "28"))
                           (rule "inEqSimp_sepNegMonomial0" (formula "29"))
                           (rule "polySimp_mulLiterals" (formula "29") (term "0"))
                           (rule "polySimp_elimOne" (formula "29") (term "0"))
                           (rule "inEqSimp_invertInEq1" (formula "27"))
                           (rule "polySimp_mulLiterals" (formula "27") (term "0"))
                           (rule "mul_literals" (formula "27") (term "1"))
                           (rule "polySimp_elimOne" (formula "27") (term "0"))
                           (rule "inEqSimp_strengthen1" (formula "26") (ifseqformula "79"))
                           (rule "add_literals" (formula "26") (term "1"))
                           (rule "inEqSimp_contradEq7" (formula "79") (ifseqformula "26"))
                           (rule "mul_literals" (formula "79") (term "1,0,0"))
                           (rule "add_zero_right" (formula "79") (term "0,0"))
                           (rule "leq_literals" (formula "79") (term "0"))
                            (builtin "One Step Simplification" (formula "79"))
                           (rule "false_right" (formula "79"))
                           (rule "Use_information_flow_contract_for_compareTo_325434207" (formula "18") (ifseqformula "18"))
                            (builtin "One Step Simplification" (formula "18") (ifInst ""  (formula "95")) (ifInst ""  (formula "95")))
                           (rule "true_left" (formula "18"))
                           (rule "Use_information_flow_contract_for_getOrder_757678341" (formula "61") (ifseqformula "24"))
                           (rule "replace_known_left" (formula "61") (term "1,1") (ifseqformula "6"))
                            (builtin "One Step Simplification" (formula "61"))
                           (rule "true_left" (formula "61"))
                           (rule "Use_information_flow_contract_for_getOrder_757678341" (formula "61") (ifseqformula "61"))
                            (builtin "One Step Simplification" (formula "61"))
                           (rule "true_left" (formula "61"))
                           (rule "Use_information_flow_contract_for_getOrder_757678341" (formula "24") (ifseqformula "24"))
                            (builtin "One Step Simplification" (formula "24"))
                           (rule "true_left" (formula "24"))
                           (rule "Use_information_flow_contract_for_compareTo_325434207" (formula "18") (ifseqformula "55"))
                           (rule "eqSymm" (formula "18") (term "1,0,1"))
                           (rule "eqSymm" (formula "18") (term "1,1"))
                           (rule "eqSymm" (formula "18") (term "0,0,1"))
                           (rule "replace_known_right" (formula "18") (term "0,1,1,0") (ifseqformula "96"))
                            (builtin "One Step Simplification" (formula "18") (ifInst ""  (formula "95")) (ifInst ""  (formula "5")))
                           (rule "applyEq" (formula "18") (term "0,0,1") (ifseqformula "57"))
                           (rule "eqSymm" (formula "18") (term "0,1"))
                           (rule "replace_known_left" (formula "18") (term "0,1") (ifseqformula "20"))
                            (builtin "One Step Simplification" (formula "18"))
                           (rule "Class_invariant_axiom_for_java_math_BigInteger" (formula "18") (term "1,0"))
                           (rule "replace_known_left" (formula "18") (term "1,1,0") (ifseqformula "57"))
                            (builtin "One Step Simplification" (formula "18") (ifInst ""  (formula "96")))
                           (rule "Class_invariant_axiom_for_java_math_BigInteger" (formula "18") (term "0"))
                           (rule "replace_known_right" (formula "18") (term "0,0,0") (ifseqformula "95"))
                            (builtin "One Step Simplification" (formula "18") (ifInst ""  (formula "20")))
                           (rule "applyEq" (formula "55") (term "0") (ifseqformula "18"))
                           (rule "applyEq" (formula "48") (term "0") (ifseqformula "18"))
                           (rule "applyEq" (formula "54") (term "4") (ifseqformula "18"))
                           (rule "Use_information_flow_contract_for_multiply_1272441881" (formula "72") (ifseqformula "39"))
                           (rule "replaceKnownSelect_taclet21_12" (formula "72") (term "0,1,1"))
                           (rule "replaceKnownSelect_taclet21_11" (formula "72") (term "1,1,1"))
                           (rule "replaceKnownAuxiliaryConstant_taclet011021_18" (formula "72") (term "0,1,1"))
                           (rule "replaceKnownAuxiliaryConstant_taclet1011021_19" (formula "72") (term "1,1,1"))
                           (rule "replaceKnownSelect_taclet21_9" (formula "72") (term "0,1,0,1"))
                           (rule "replaceKnownSelect_taclet21_8" (formula "72") (term "1,1,0,1"))
                           (rule "replaceKnownAuxiliaryConstant_taclet021_15" (formula "72") (term "0,1,0,1"))
                           (rule "replaceKnownAuxiliaryConstant_taclet21_10" (formula "72") (term "1,1,0,1"))
                           (rule "replaceKnownAuxiliaryConstant_taclet021_15" (formula "72") (term "1,1,0,1"))
                            (builtin "One Step Simplification" (formula "72") (ifInst ""  (formula "85")) (ifInst ""  (formula "84")) (ifInst ""  (formula "102")))
                           (rule "pullOutSelect" (formula "72") (term "0,0,1") (inst "selectSK=org_bouncycastle_math_ec_ECPoint_value_4"))
                           (rule "simplifySelectOfAnonEQ" (formula "72") (ifseqformula "62"))
                            (builtin "One Step Simplification" (formula "72") (ifInst ""  (formula "100")) (ifInst ""  (formula "50")))
                           (rule "applyEqReverse" (formula "73") (term "0,0,1") (ifseqformula "72"))
                           (rule "hideAuxiliaryEq" (formula "72"))
                           (rule "eqSymm" (formula "72") (term "0,1"))
                           (rule "applyEq" (formula "72") (term "1,0,1") (ifseqformula "4"))
                           (rule "pullOutSelect" (formula "72") (term "0,0,1") (inst "selectSK=org_bouncycastle_math_ec_ECPoint_value_5"))
                           (rule "simplifySelectOfAnonEQ" (formula "72") (ifseqformula "26"))
                            (builtin "One Step Simplification" (formula "72") (ifInst ""  (formula "99")) (ifInst ""  (formula "13")))
                           (rule "applyEqReverse" (formula "73") (term "0,0,1") (ifseqformula "72"))
                            (builtin "One Step Simplification" (formula "73"))
                           (rule "notLeft" (formula "73"))
                           (rule "hideAuxiliaryEq" (formula "72"))
                           (rule "Class_invariant_axiom_for_org_bouncycastle_math_ec_ECPoint" (formula "78") (term "0"))
                            (builtin "One Step Simplification" (formula "78"))
                           (rule "Class_invariant_axiom_for_org_bouncycastle_math_ec_ECPoint" (formula "78"))
                           (rule "closeTrue" (formula "78"))
                        )
                     )
                     (branch "result_228_A_1.value@heapAtPre_A«anonHeapFunction» ≥ 0 FALSE"
                        (rule "inEqSimp_geqRight" (formula "79"))
                        (rule "mul_literals" (formula "1") (term "1,0,0"))
                        (rule "add_literals" (formula "1") (term "0,0"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "1"))
                        (rule "mul_literals" (formula "1") (term "1"))
                        (rule "inEqSimp_contradEq3" (formula "30") (term "0") (ifseqformula "1"))
                        (rule "mul_literals" (formula "30") (term "1,0,0,0"))
                        (rule "add_zero_right" (formula "30") (term "0,0,0"))
                        (rule "qeq_literals" (formula "30") (term "0,0"))
                         (builtin "One Step Simplification" (formula "30"))
                        (rule "andLeft" (formula "30"))
                        (rule "andLeft" (formula "30"))
                        (rule "applyEq" (formula "34") (term "0,0") (ifseqformula "31"))
                        (rule "polySimp_mulComm0" (formula "34") (term "0"))
                        (rule "applyEq" (formula "30") (term "0") (ifseqformula "34"))
                        (rule "inEqSimp_homoInEq0" (formula "30"))
                        (rule "polySimp_mulComm0" (formula "30") (term "1,0"))
                        (rule "polySimp_rightDist" (formula "30") (term "1,0"))
                        (rule "polySimp_mulLiterals" (formula "30") (term "1,1,0"))
                        (rule "polySimp_elimOne" (formula "30") (term "1,1,0"))
                        (rule "polySimp_mulComm0" (formula "30") (term "0,1,0"))
                        (rule "polySimp_addAssoc" (formula "30") (term "0"))
                        (rule "polySimp_addComm0" (formula "30") (term "0,0"))
                        (rule "polySimp_pullOutFactor2b" (formula "30") (term "0"))
                        (rule "add_literals" (formula "30") (term "1,1,0"))
                        (rule "times_zero_1" (formula "30") (term "1,0"))
                        (rule "add_zero_right" (formula "30") (term "0"))
                        (rule "applyEq" (formula "32") (term "0") (ifseqformula "34"))
                        (rule "inEqSimp_homoInEq1" (formula "32"))
                        (rule "polySimp_mulComm0" (formula "32") (term "1,0"))
                        (rule "polySimp_rightDist" (formula "32") (term "1,0"))
                        (rule "polySimp_mulLiterals" (formula "32") (term "1,1,0"))
                        (rule "polySimp_elimOne" (formula "32") (term "1,1,0"))
                        (rule "polySimp_mulComm0" (formula "32") (term "0,1,0"))
                        (rule "polySimp_addComm1" (formula "32") (term "0"))
                        (rule "polySimp_addAssoc" (formula "32") (term "0,0"))
                        (rule "polySimp_addComm1" (formula "32") (term "0,0,0"))
                        (rule "polySimp_pullOutFactor2b" (formula "32") (term "0,0"))
                        (rule "add_literals" (formula "32") (term "1,1,0,0"))
                        (rule "times_zero_1" (formula "32") (term "1,0,0"))
                        (rule "add_zero_right" (formula "32") (term "0,0"))
                        (rule "applyEq" (formula "33") (term "0,1") (ifseqformula "31"))
                        (rule "inEqSimp_invertInEq1" (formula "30"))
                        (rule "polySimp_mulLiterals" (formula "30") (term "0"))
                        (rule "mul_literals" (formula "30") (term "1"))
                        (rule "polySimp_elimOne" (formula "30") (term "0"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "32"))
                        (rule "polySimp_mulComm0" (formula "32") (term "1"))
                        (rule "polySimp_rightDist" (formula "32") (term "1"))
                        (rule "mul_literals" (formula "32") (term "0,1"))
                        (rule "polySimp_mulLiterals" (formula "32") (term "1,1"))
                        (rule "polySimp_elimOne" (formula "32") (term "1,1"))
                        (rule "shift_paren_or" (formula "3") (term "0,0,0"))
                         (builtin "One Step Simplification" (formula "3"))
                        (rule "eqSymm" (formula "3") (term "1,1,0,0,0"))
                        (rule "castedGetAny" (formula "3") (term "1,0,0,0,0,0,0"))
                        (rule "castedGetAny" (formula "3") (term "0,0,1,0,0,0"))
                        (rule "castedGetAny" (formula "3") (term "0,1,1,0,0,0"))
                         (builtin "One Step Simplification" (formula "3"))
                        (rule "true_left" (formula "3"))
                        (rule "shift_paren_or" (formula "3") (term "0,0,0"))
                         (builtin "One Step Simplification" (formula "3"))
                        (rule "eqSymm" (formula "3") (term "1,1,0,0,0"))
                        (rule "castedGetAny" (formula "3") (term "1,0,0,0,0,0,0"))
                        (rule "castedGetAny" (formula "3") (term "0,0,1,0,0,0"))
                        (rule "castedGetAny" (formula "3") (term "0,1,1,0,0,0"))
                         (builtin "One Step Simplification" (formula "3"))
                        (rule "true_left" (formula "3"))
                        (rule "cnf_rightDist" (formula "2") (term "0,0,0"))
                        (rule "distr_forallAnd" (formula "2") (term "0,0"))
                        (rule "distr_forallAnd" (formula "2") (term "0"))
                        (rule "distr_forallAnd" (formula "2"))
                        (rule "andLeft" (formula "2"))
                        (rule "commute_or_2" (formula "2") (term "0,0,0"))
                         (builtin "One Step Simplification" (formula "2"))
                        (rule "eqSymm" (formula "2") (term "1,0,0,0,0"))
                        (rule "castedGetAny" (formula "2") (term "1,0,0,1,0,0,0"))
                        (rule "castedGetAny" (formula "2") (term "0,0,0,0,0,0"))
                        (rule "castedGetAny" (formula "2") (term "0,1,0,0,0,0"))
                         (builtin "One Step Simplification" (formula "2"))
                        (rule "true_left" (formula "2"))
                        (rule "shift_paren_or" (formula "2") (term "0,0,0"))
                         (builtin "One Step Simplification" (formula "2"))
                        (rule "eqSymm" (formula "2") (term "1,1,0,0,0"))
                        (rule "castedGetAny" (formula "2") (term "1,0,0,0,0,0,0"))
                        (rule "castedGetAny" (formula "2") (term "0,0,1,0,0,0"))
                        (rule "castedGetAny" (formula "2") (term "0,1,1,0,0,0"))
                         (builtin "One Step Simplification" (formula "2"))
                        (rule "true_left" (formula "2"))
                        (rule "Use_information_flow_contract_for_compareTo_325434207" (formula "19") (ifseqformula "19"))
                         (builtin "One Step Simplification" (formula "19") (ifInst ""  (formula "95")) (ifInst ""  (formula "95")))
                        (rule "true_left" (formula "19"))
                        (rule "Use_information_flow_contract_for_getOrder_757678341" (formula "61") (ifseqformula "25"))
                        (rule "replace_known_left" (formula "61") (term "1,1") (ifseqformula "7"))
                         (builtin "One Step Simplification" (formula "61"))
                        (rule "true_left" (formula "61"))
                        (rule "Use_information_flow_contract_for_multiply_1272441881_0" (formula "73") (ifseqformula "38"))
                        (rule "replaceKnownSelect_taclet21_11" (formula "73") (term "1,1,1"))
                        (rule "replaceKnownSelect_taclet21_12" (formula "73") (term "0,1,1"))
                        (rule "replaceKnownAuxiliaryConstant_taclet1011021_19" (formula "73") (term "1,1,1"))
                        (rule "replaceKnownAuxiliaryConstant_taclet011021_18" (formula "73") (term "0,1,1"))
                        (rule "replaceKnownSelect_taclet21_8" (formula "73") (term "1,1,0,1"))
                        (rule "replaceKnownSelect_taclet21_9" (formula "73") (term "0,1,0,1"))
                        (rule "replaceKnownAuxiliaryConstant_taclet21_10" (formula "73") (term "1,1,0,1"))
                         (builtin "One Step Simplification" (formula "73") (ifInst ""  (formula "86")) (ifInst ""  (formula "85")) (ifInst ""  (formula "103")))
                        (rule "pullOutSelect" (formula "73") (term "0,0,1") (inst "selectSK=org_bouncycastle_math_ec_ECPoint_value_4"))
                        (rule "simplifySelectOfAnonEQ" (formula "73") (ifseqformula "63"))
                         (builtin "One Step Simplification" (formula "73") (ifInst ""  (formula "101")) (ifInst ""  (formula "50")))
                        (rule "applyEqReverse" (formula "74") (term "0,0,1") (ifseqformula "73"))
                        (rule "hideAuxiliaryEq" (formula "73"))
                        (rule "eqSymm" (formula "73") (term "0,1"))
                        (rule "applyEq" (formula "73") (term "1,0,1") (ifseqformula "5"))
                        (rule "pullOutSelect" (formula "73") (term "0,0,1") (inst "selectSK=org_bouncycastle_math_ec_ECPoint_value_5"))
                        (rule "simplifySelectOfAnonEQ" (formula "73") (ifseqformula "26"))
                         (builtin "One Step Simplification" (formula "73") (ifInst ""  (formula "100")) (ifInst ""  (formula "14")))
                        (rule "applyEqReverse" (formula "74") (term "0,0,1") (ifseqformula "73"))
                         (builtin "One Step Simplification" (formula "74"))
                        (rule "notLeft" (formula "74"))
                        (rule "hideAuxiliaryEq" (formula "73"))
                        (rule "Class_invariant_axiom_for_org_bouncycastle_math_ec_ECPoint" (formula "79") (term "1"))
                         (builtin "One Step Simplification" (formula "79"))
                        (rule "Class_invariant_axiom_for_org_bouncycastle_math_ec_ECPoint" (formula "79"))
                        (rule "closeTrue" (formula "79"))
                     )
                  )
               )
               (branch " resultAtPost_226_B.<created>@heapAtPre_B«anonHeapFunction» = TRUE FALSE"
                  (rule "applyEqReverse" (formula "2") (term "1,0") (ifseqformula "1"))
                  (rule "hideAuxiliaryEq" (formula "1"))
                  (rule "replace_known_right" (formula "1") (term "1,0,0") (ifseqformula "76"))
                   (builtin "One Step Simplification" (formula "1"))
                  (rule "replace_known_right" (formula "69") (term "1") (ifseqformula "76"))
                   (builtin "One Step Simplification" (formula "69"))
                  (rule "Class_axiom_0_in_de_polyas_core3_open_cred_CredTool" (inst "seq=seq") (inst "i=i") (inst "str=str") (inst "seq_0=seq_0") (inst "i_0=i_0") (inst "sv_heap=heapAtPre_B<<anonHeapFunction>>"))
                  (rule "andLeft" (formula "1"))
                  (rule "castedGetAny" (formula "1") (term "0,0,1,0,0"))
                  (rule "castedGetAny" (formula "2") (term "0,1,1,0,0,0"))
                  (rule "castedGetAny" (formula "1") (term "0,0,0,0,0"))
                  (rule "nnf_imp2or" (formula "1") (term "0,0"))
                   (builtin "One Step Simplification" (formula "1"))
                  (rule "nnf_imp2or" (formula "2") (term "0,0,0"))
                  (rule "nnf_imp2or" (formula "2") (term "1,0,0,0"))
                  (rule "nnf_notAnd" (formula "2") (term "0,0,0,0"))
                   (builtin "One Step Simplification" (formula "2"))
                  (rule "nnf_notOr" (formula "2") (term "0,0,0,0,0"))
                  (rule "nnf_notAnd" (formula "2") (term "0,1,0,0,0"))
                   (builtin "One Step Simplification" (formula "2"))
                  (rule "commute_or" (formula "2") (term "0,0,0,0"))
                  (rule "commute_or_2" (formula "2") (term "0,0,0"))
                  (rule "shift_paren_or" (formula "2") (term "0,0,0,0"))
                  (rule "commute_and" (formula "2") (term "1,0,0,0"))
                  (rule "commute_or" (formula "2") (term "1,0,0,0,0,0"))
                  (rule "shift_paren_or" (formula "2") (term "0,0,0,0,0"))
                   (builtin "One Step Simplification" (formula "2"))
                  (rule "commute_or_2" (formula "2") (term "0,0,0,0"))
                  (rule "cnf_rightDist" (formula "2") (term "0,0,0"))
                  (rule "distr_forallAnd" (formula "2") (term "0,0"))
                  (rule "distr_forallAnd" (formula "2") (term "0"))
                  (rule "distr_forallAnd" (formula "2"))
                  (rule "andLeft" (formula "2"))
                  (rule "commute_or_2" (formula "2") (term "0,0,0"))
                   (builtin "One Step Simplification" (formula "2"))
                  (rule "eqSymm" (formula "2") (term "1,0,0,0,0"))
                  (rule "castedGetAny" (formula "2") (term "0,0,0,0,0,0"))
                  (rule "castedGetAny" (formula "2") (term "1,0,0,1,0,0,0"))
                  (rule "castedGetAny" (formula "2") (term "0,1,0,0,0,0"))
                   (builtin "One Step Simplification" (formula "2"))
                  (rule "true_left" (formula "2"))
                  (rule "shift_paren_or" (formula "2") (term "0,0,0"))
                   (builtin "One Step Simplification" (formula "2"))
                  (rule "eqSymm" (formula "2") (term "1,1,0,0,0"))
                  (rule "castedGetAny" (formula "2") (term "0,0,0,0,0,0"))
                  (rule "castedGetAny" (formula "2") (term "0,0,1,0,0,0"))
                  (rule "castedGetAny" (formula "2") (term "0,1,1,0,0,0"))
                   (builtin "One Step Simplification" (formula "2"))
                  (rule "true_left" (formula "2"))
                  (rule "Class_axiom_0_in_de_polyas_core3_open_cred_CredTool" (inst "seq=seq") (inst "i=i") (inst "str=str") (inst "seq_0=seq_0") (inst "i_0=i_0") (inst "sv_heap=anon_heap_mod<<anonHeapFunction>>"))
                  (rule "andLeft" (formula "1"))
                  (rule "castedGetAny" (formula "2") (term "0,1,1,0,0,0"))
                  (rule "castedGetAny" (formula "1") (term "0,0,0,0,0"))
                  (rule "castedGetAny" (formula "1") (term "0,0,1,0,0"))
                  (rule "nnf_imp2or" (formula "1") (term "0,0"))
                   (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "3")))
                  (rule "true_left" (formula "1"))
                  (rule "nnf_imp2or" (formula "1") (term "0,0,0"))
                  (rule "nnf_notAnd" (formula "1") (term "0,0,0,0"))
                   (builtin "One Step Simplification" (formula "1"))
                  (rule "nnf_imp2or" (formula "1") (term "1,0,0,0"))
                  (rule "nnf_notOr" (formula "1") (term "0,0,0,0,0"))
                  (rule "nnf_notAnd" (formula "1") (term "0,1,0,0,0"))
                   (builtin "One Step Simplification" (formula "1"))
                  (rule "commute_or" (formula "1") (term "0,0,0,0"))
                  (rule "commute_or_2" (formula "1") (term "0,0,0"))
                  (rule "shift_paren_or" (formula "1") (term "0,0,0,0"))
                  (rule "commute_and" (formula "1") (term "1,0,0,0"))
                  (rule "shift_paren_or" (formula "1") (term "0,0,0,0,0"))
                  (rule "commute_or_2" (formula "1") (term "0,0,0,0,0"))
                   (builtin "One Step Simplification" (formula "1"))
                  (rule "commute_or_2" (formula "1") (term "0,0,0,0"))
                  (rule "cnf_rightDist" (formula "1") (term "0,0,0"))
                  (rule "distr_forallAnd" (formula "1") (term "0,0"))
                  (rule "distr_forallAnd" (formula "1") (term "0"))
                  (rule "distr_forallAnd" (formula "1"))
                  (rule "andLeft" (formula "1"))
                  (rule "commute_or_2" (formula "1") (term "0,0,0"))
                   (builtin "One Step Simplification" (formula "1"))
                  (rule "eqSymm" (formula "1") (term "1,0,0,0,0"))
                  (rule "castedGetAny" (formula "1") (term "0,0,0,0,0,0"))
                  (rule "castedGetAny" (formula "1") (term "1,0,0,1,0,0,0"))
                  (rule "castedGetAny" (formula "1") (term "0,1,0,0,0,0"))
                   (builtin "One Step Simplification" (formula "1"))
                  (rule "true_left" (formula "1"))
                  (rule "shift_paren_or" (formula "1") (term "0,0,0"))
                   (builtin "One Step Simplification" (formula "1"))
                  (rule "eqSymm" (formula "1") (term "1,1,0,0,0"))
                  (rule "castedGetAny" (formula "1") (term "0,0,0,0,0,0"))
                  (rule "castedGetAny" (formula "1") (term "0,0,1,0,0,0"))
                  (rule "castedGetAny" (formula "1") (term "0,1,1,0,0,0"))
                   (builtin "One Step Simplification" (formula "1"))
                  (rule "true_left" (formula "1"))
                  (rule "Class_axiom_0_in_de_polyas_core3_open_cred_CredTool" (inst "seq=seq") (inst "i=i") (inst "str=str") (inst "seq_0=seq_0") (inst "i_0=i_0") (inst "sv_heap=anon_heap_multiply<<anonHeapFunction>>"))
                  (rule "andLeft" (formula "1"))
                  (rule "castedGetAny" (formula "2") (term "0,1,1,0,0,0"))
                  (rule "castedGetAny" (formula "1") (term "0,0,0,0,0"))
                  (rule "castedGetAny" (formula "1") (term "0,0,1,0,0"))
                  (rule "nnf_imp2or" (formula "1") (term "0,0"))
                   (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "3")))
                  (rule "true_left" (formula "1"))
                  (rule "nnf_imp2or" (formula "1") (term "0,0,0"))
                  (rule "nnf_notAnd" (formula "1") (term "0,0,0,0"))
                   (builtin "One Step Simplification" (formula "1"))
                  (rule "nnf_imp2or" (formula "1") (term "1,0,0,0"))
                  (rule "nnf_notOr" (formula "1") (term "0,0,0,0,0"))
                  (rule "nnf_notAnd" (formula "1") (term "0,1,0,0,0"))
                   (builtin "One Step Simplification" (formula "1"))
                  (rule "commute_or" (formula "1") (term "0,0,0,0"))
                  (rule "commute_or_2" (formula "1") (term "0,0,0"))
                  (rule "shift_paren_or" (formula "1") (term "0,0,0,0"))
                  (rule "Class_axiom_0_in_de_polyas_core3_open_cred_CredTool" (inst "seq=seq") (inst "i=i") (inst "str=str") (inst "seq_0=seq_0") (inst "i_0=i_0") (inst "sv_heap=heapAtPre_A<<anonHeapFunction>>"))
                  (rule "andLeft" (formula "1"))
                  (rule "castedGetAny" (formula "1") (term "0,0,0,0,0"))
                  (rule "castedGetAny" (formula "1") (term "0,0,1,0,0"))
                  (rule "castedGetAny" (formula "2") (term "0,1,1,0,0,0"))
                  (rule "nnf_imp2or" (formula "1") (term "0,0"))
                   (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "4")))
                  (rule "true_left" (formula "1"))
                  (rule "nnf_imp2or" (formula "1") (term "0,0,0"))
                  (rule "nnf_notAnd" (formula "1") (term "0,0,0,0"))
                   (builtin "One Step Simplification" (formula "1"))
                  (rule "nnf_imp2or" (formula "1") (term "1,0,0,0"))
                  (rule "nnf_notOr" (formula "1") (term "0,0,0,0,0"))
                  (rule "nnf_notAnd" (formula "1") (term "0,1,0,0,0"))
                   (builtin "One Step Simplification" (formula "1"))
                  (rule "commute_or" (formula "1") (term "0,0,0,0"))
                  (rule "commute_or_2" (formula "1") (term "0,0,0"))
                  (rule "Class_axiom_0_in_de_polyas_core3_open_cred_CredTool" (inst "seq=seq") (inst "i=i") (inst "str=str") (inst "seq_0=seq_0") (inst "i_0=i_0") (inst "sv_heap=anon(heapAtPre_A<<anonHeapFunction>>,
     empty,
     anon_heap_mod<<anonHeapFunction>>)"))
                   (builtin "One Step Simplification" (formula "1"))
                  (rule "andLeft" (formula "1"))
                  (rule "castedGetAny" (formula "1") (term "0,0,0,0,0"))
                  (rule "castedGetAny" (formula "1") (term "0,0,1,0,0"))
                  (rule "castedGetAny" (formula "2") (term "0,1,1,0,0,0"))
                  (rule "nnf_imp2or" (formula "1") (term "0,0"))
                   (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "5")))
                  (rule "true_left" (formula "1"))
                  (rule "nnf_imp2or" (formula "1") (term "0,0,0"))
                  (rule "nnf_notAnd" (formula "1") (term "0,0,0,0"))
                   (builtin "One Step Simplification" (formula "1"))
                  (rule "nnf_imp2or" (formula "1") (term "1,0,0,0"))
                  (rule "nnf_notOr" (formula "1") (term "0,0,0,0,0"))
                  (rule "nnf_notAnd" (formula "1") (term "0,1,0,0,0"))
                   (builtin "One Step Simplification" (formula "1"))
                  (rule "nnf_notOr" (formula "1") (term "1,0,0,0,0,0"))
                  (rule "Class_axiom_0_in_de_polyas_core3_open_cred_CredTool" (inst "seq=seq") (inst "i=i") (inst "str=str") (inst "seq_0=seq_0") (inst "i_0=i_0") (inst "sv_heap=heapAfter_mod_A_0"))
                  (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "1,0,0,0,0,0,1") (ifseqformula "30"))
                  (rule "andLeft" (formula "1"))
                  (rule "castedGetAny" (formula "1") (term "0,0,0,0,0"))
                  (rule "castedGetAny" (formula "2") (term "0,1,1,0,0,0"))
                  (rule "castedGetAny" (formula "1") (term "0,0,1,0,0"))
                  (rule "nnf_imp2or" (formula "1") (term "0,0"))
                   (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "6")))
                  (rule "true_left" (formula "1"))
                  (rule "nnf_imp2or" (formula "1") (term "0,0,0"))
                  (rule "nnf_notAnd" (formula "1") (term "0,0,0,0"))
                   (builtin "One Step Simplification" (formula "1"))
                  (rule "nnf_imp2or" (formula "1") (term "1,0,0,0"))
                  (rule "nnf_notOr" (formula "1") (term "0,0,0,0,0"))
                  (rule "nnf_notAnd" (formula "1") (term "0,1,0,0,0"))
                   (builtin "One Step Simplification" (formula "1"))
                  (rule "nnf_notOr" (formula "1") (term "1,0,0,0,0,0"))
                  (rule "Class_axiom_0_in_de_polyas_core3_open_cred_CredTool" (inst "seq=seq") (inst "i=i") (inst "str=str") (inst "seq_0=seq_0") (inst "i_0=i_0") (inst "sv_heap=anon(heapAfter_mod_A_0,
     empty,
     anon_heap_multiply<<anonHeapFunction>>)"))
                   (builtin "One Step Simplification" (formula "1"))
                  (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,1,0,0,0,0,0,1") (ifseqformula "30"))
                  (rule "andLeft" (formula "1"))
                  (rule "castedGetAny" (formula "1") (term "0,0,0,0,0"))
                  (rule "castedGetAny" (formula "2") (term "0,1,1,0,0,0"))
                  (rule "castedGetAny" (formula "1") (term "0,0,1,0,0"))
                  (rule "nnf_imp2or" (formula "1") (term "0,0"))
                   (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "6")))
                  (rule "true_left" (formula "1"))
                  (rule "nnf_imp2or" (formula "1") (term "0,0,0"))
                  (rule "nnf_imp2or" (formula "1") (term "1,0,0,0"))
                  (rule "nnf_notAnd" (formula "1") (term "0,0,0,0"))
                   (builtin "One Step Simplification" (formula "1"))
                  (rule "nnf_notOr" (formula "1") (term "0,0,0,0,0"))
                  (rule "nnf_notAnd" (formula "1") (term "0,1,0,0,0"))
                   (builtin "One Step Simplification" (formula "1"))
                  (rule "nnf_notOr" (formula "1") (term "1,0,0,0,0,0"))
                  (rule "nnf_notOr" (formula "1") (term "0,1,0,0,0,0,0"))
                  (rule "Class_axiom_0_in_de_polyas_core3_open_cred_CredTool" (inst "seq=seq") (inst "i=i") (inst "str=str") (inst "seq_0=seq_0") (inst "i_0=i_0") (inst "sv_heap=heapAfter_multiply_A_1"))
                  (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "1,0,0,0,0,0,1") (ifseqformula "37"))
                  (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,1,0,0,0,0,0,1") (ifseqformula "31"))
                  (rule "andLeft" (formula "1"))
                  (rule "castedGetAny" (formula "1") (term "0,0,0,0,0"))
                  (rule "castedGetAny" (formula "1") (term "0,0,1,0,0"))
                  (rule "castedGetAny" (formula "2") (term "0,1,1,0,0,0"))
                  (rule "nnf_imp2or" (formula "1") (term "0,0"))
                   (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "7")))
                  (rule "true_left" (formula "1"))
                  (rule "nnf_imp2or" (formula "1") (term "0,0,0"))
                  (rule "nnf_imp2or" (formula "1") (term "1,0,0,0"))
                  (rule "nnf_notAnd" (formula "1") (term "0,0,0,0"))
                   (builtin "One Step Simplification" (formula "1"))
                  (rule "nnf_notAnd" (formula "1") (term "0,1,0,0,0"))
                   (builtin "One Step Simplification" (formula "1"))
                  (rule "nnf_notOr" (formula "1") (term "0,0,0,0,0"))
                  (rule "nnf_notOr" (formula "1") (term "1,0,0,0,0,0"))
                  (rule "nnf_notOr" (formula "1") (term "0,1,0,0,0,0,0"))
                  (rule "Class_axiom_0_in_de_polyas_core3_open_cred_CredTool" (inst "seq=seq") (inst "i=i") (inst "str=str") (inst "seq_0=seq_0") (inst "i_0=i_0") (inst "sv_heap=heapAtPost_A"))
                  (rule "andLeft" (formula "1"))
                  (rule "castedGetAny" (formula "1") (term "0,0,0,0,0"))
                  (rule "castedGetAny" (formula "2") (term "0,1,1,0,0,0"))
                  (rule "castedGetAny" (formula "1") (term "0,0,1,0,0"))
                  (rule "applyEq" (formula "2") (term "0,0,1,0,0,0,0,0") (ifseqformula "46"))
                  (rule "selectCreatedOfAnonAsFormulaEQ" (formula "2") (term "1,0,0,0,0,0") (ifseqformula "38"))
                  (rule "selectCreatedOfAnonAsFormulaEQ" (formula "2") (term "0,1,0,0,0,0,0") (ifseqformula "32"))
                  (rule "nnf_imp2or" (formula "1") (term "0,0"))
                   (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "7")))
                  (rule "true_left" (formula "1"))
                  (rule "nnf_imp2or" (formula "1") (term "0,0,0"))
                  (rule "nnf_imp2or" (formula "1") (term "1,0,0,0"))
                  (rule "nnf_notAnd" (formula "1") (term "0,0,0,0"))
                   (builtin "One Step Simplification" (formula "1"))
                  (rule "nnf_notAnd" (formula "1") (term "0,1,0,0,0"))
                   (builtin "One Step Simplification" (formula "1"))
                  (rule "nnf_notOr" (formula "1") (term "0,0,0,0,0"))
                  (rule "nnf_notOr" (formula "1") (term "1,0,0,0,0,0"))
                  (rule "nnf_notOr" (formula "1") (term "0,1,0,0,0,0,0"))
                  (rule "Class_axiom_0_in_de_polyas_core3_open_cred_CredTool" (inst "seq=seq") (inst "i=i") (inst "str=str") (inst "seq_0=seq_0") (inst "i_0=i_0") (inst "sv_heap=anon(heapAtPre_B<<anonHeapFunction>>,
     empty,
     anon_heap_mod<<anonHeapFunction>>)"))
                   (builtin "One Step Simplification" (formula "1"))
                  (rule "andLeft" (formula "1"))
                  (rule "castedGetAny" (formula "2") (term "0,1,1,0,0,0"))
                  (rule "castedGetAny" (formula "1") (term "0,0,1,0,0"))
                  (rule "castedGetAny" (formula "1") (term "0,0,0,0,0"))
                  (rule "nnf_imp2or" (formula "1") (term "0,0"))
                   (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "7")))
                  (rule "true_left" (formula "1"))
                  (rule "nnf_imp2or" (formula "1") (term "0,0,0"))
                  (rule "nnf_notAnd" (formula "1") (term "0,0,0,0"))
                   (builtin "One Step Simplification" (formula "1"))
                  (rule "nnf_imp2or" (formula "1") (term "1,0,0,0"))
                  (rule "nnf_notOr" (formula "1") (term "0,0,0,0,0"))
                  (rule "nnf_notAnd" (formula "1") (term "0,1,0,0,0"))
                   (builtin "One Step Simplification" (formula "1"))
                  (rule "nnf_notOr" (formula "1") (term "1,0,0,0,0,0"))
                  (rule "Class_axiom_0_in_de_polyas_core3_open_cred_CredTool" (inst "seq=seq") (inst "i=i") (inst "str=str") (inst "seq_0=seq_0") (inst "i_0=i_0") (inst "sv_heap=heapAfter_mod_B_0"))
                  (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "1,0,0,0,0,0,1") (ifseqformula "66"))
                  (rule "andLeft" (formula "1"))
                  (rule "castedGetAny" (formula "1") (term "0,0,0,0,0"))
                  (rule "castedGetAny" (formula "1") (term "0,0,1,0,0"))
                  (rule "castedGetAny" (formula "2") (term "0,1,1,0,0,0"))
                  (rule "nnf_imp2or" (formula "1") (term "0,0"))
                   (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "8")))
                  (rule "true_left" (formula "1"))
                  (rule "nnf_imp2or" (formula "1") (term "0,0,0"))
                  (rule "nnf_imp2or" (formula "1") (term "1,0,0,0"))
                  (rule "nnf_notAnd" (formula "1") (term "0,0,0,0"))
                   (builtin "One Step Simplification" (formula "1"))
                  (rule "nnf_notOr" (formula "1") (term "0,0,0,0,0"))
                  (rule "nnf_notAnd" (formula "1") (term "0,1,0,0,0"))
                   (builtin "One Step Simplification" (formula "1"))
                  (rule "nnf_notOr" (formula "1") (term "1,0,0,0,0,0"))
                  (rule "Class_axiom_0_in_de_polyas_core3_open_cred_CredTool" (inst "seq=seq") (inst "i=i") (inst "str=str") (inst "seq_0=seq_0") (inst "i_0=i_0") (inst "sv_heap=anon(heapAfter_mod_B_0,
     empty,
     anon_heap_multiply<<anonHeapFunction>>)"))
                   (builtin "One Step Simplification" (formula "1"))
                  (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,1,0,0,0,0,0,1") (ifseqformula "66"))
                  (rule "andLeft" (formula "1"))
                  (rule "castedGetAny" (formula "2") (term "0,1,1,0,0,0"))
                  (rule "castedGetAny" (formula "1") (term "0,0,1,0,0"))
                  (rule "castedGetAny" (formula "1") (term "0,0,0,0,0"))
                  (rule "nnf_imp2or" (formula "1") (term "0,0"))
                   (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "8")))
                  (rule "true_left" (formula "1"))
                  (rule "nnf_imp2or" (formula "1") (term "0,0,0"))
                  (rule "nnf_notAnd" (formula "1") (term "0,0,0,0"))
                   (builtin "One Step Simplification" (formula "1"))
                  (rule "nnf_imp2or" (formula "1") (term "1,0,0,0"))
                  (rule "nnf_notOr" (formula "1") (term "0,0,0,0,0"))
                  (rule "nnf_notAnd" (formula "1") (term "0,1,0,0,0"))
                   (builtin "One Step Simplification" (formula "1"))
                  (rule "nnf_notOr" (formula "1") (term "1,0,0,0,0,0"))
                  (rule "nnf_notOr" (formula "1") (term "0,1,0,0,0,0,0"))
                  (rule "Class_axiom_0_in_de_polyas_core3_open_cred_CredTool" (inst "seq=seq") (inst "i=i") (inst "str=str") (inst "seq_0=seq_0") (inst "i_0=i_0") (inst "sv_heap=heapAfter_multiply_B_1"))
                  (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "1,0,0,0,0,0,1") (ifseqformula "75"))
                  (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,1,0,0,0,0,0,1") (ifseqformula "67"))
                  (rule "andLeft" (formula "1"))
                  (rule "castedGetAny" (formula "2") (term "0,1,1,0,0,0"))
                  (rule "castedGetAny" (formula "1") (term "0,0,1,0,0"))
                  (rule "castedGetAny" (formula "1") (term "0,0,0,0,0"))
                  (rule "nnf_imp2or" (formula "1") (term "0,0"))
                   (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "9")))
                  (rule "true_left" (formula "1"))
                  (rule "nnf_imp2or" (formula "1") (term "0,0,0"))
                  (rule "nnf_imp2or" (formula "1") (term "1,0,0,0"))
                  (rule "nnf_notAnd" (formula "1") (term "0,0,0,0"))
                   (builtin "One Step Simplification" (formula "1"))
                  (rule "nnf_notOr" (formula "1") (term "0,0,0,0,0"))
                  (rule "nnf_notAnd" (formula "1") (term "0,1,0,0,0"))
                   (builtin "One Step Simplification" (formula "1"))
                  (rule "nnf_notOr" (formula "1") (term "1,0,0,0,0,0"))
                  (rule "nnf_notOr" (formula "1") (term "0,1,0,0,0,0,0"))
                  (rule "Class_axiom_0_in_de_polyas_core3_open_cred_CredTool" (inst "seq=seq") (inst "i=i") (inst "str=str") (inst "seq_0=seq_0") (inst "i_0=i_0") (inst "sv_heap=heapAtPost_B"))
                  (rule "andLeft" (formula "1"))
                  (rule "castedGetAny" (formula "1") (term "0,0,1,0,0"))
                  (rule "castedGetAny" (formula "2") (term "0,1,1,0,0,0"))
                  (rule "castedGetAny" (formula "1") (term "0,0,0,0,0"))
                  (rule "applyEqRigid" (formula "2") (term "0,0,1,0,0,0,0,0") (ifseqformula "84"))
                  (rule "selectCreatedOfAnonAsFormulaEQ" (formula "2") (term "1,0,0,0,0,0") (ifseqformula "76"))
                  (rule "selectCreatedOfAnonAsFormulaEQ" (formula "2") (term "0,1,0,0,0,0,0") (ifseqformula "68"))
                  (rule "nnf_imp2or" (formula "1") (term "0,0"))
                   (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "9")))
                  (rule "true_left" (formula "1"))
                  (rule "nnf_imp2or" (formula "1") (term "0,0,0"))
                  (rule "nnf_imp2or" (formula "1") (term "1,0,0,0"))
                  (rule "nnf_notAnd" (formula "1") (term "0,0,0,0"))
                   (builtin "One Step Simplification" (formula "1"))
                  (rule "nnf_notAnd" (formula "1") (term "0,1,0,0,0"))
                   (builtin "One Step Simplification" (formula "1"))
                  (rule "nnf_notOr" (formula "1") (term "0,0,0,0,0"))
                  (rule "nnf_notOr" (formula "1") (term "1,0,0,0,0,0"))
                  (rule "nnf_notOr" (formula "1") (term "0,1,0,0,0,0,0"))
                  (rule "div_axiom" (formula "33") (term "0,1") (inst "quotient=quotient_0"))
                  (rule "polySimp_mulComm0" (formula "33") (term "0,2,1,1"))
                  (rule "polySimp_mulComm0" (formula "33") (term "0,1,0,1"))
                  (rule "polySimp_mulComm0" (formula "33") (term "1,1,1,1,1"))
                  (rule "polySimp_mulComm0" (formula "33") (term "0,1,1,1"))
                  (rule "commute_or" (formula "4") (term "0,0,0,0"))
                  (rule "shift_paren_or" (formula "5") (term "0,0,0,0"))
                  (rule "commute_and" (formula "6") (term "1,0,0,0"))
                  (rule "shift_paren_or" (formula "6") (term "0,0,0,0,0"))
                  (rule "commute_or" (formula "4") (term "0,1,0,0,0"))
                  (rule "commute_and" (formula "5") (term "1,0,0,0"))
                  (rule "commute_or" (formula "3") (term "0,0,0,0"))
                  (rule "ifthenelse_split" (formula "9") (term "0"))
                  (branch " resultAtPost_226_A.<created>@anon_heap_mod«anonHeapFunction» = TRUE TRUE"
                     (rule "applyEqReverse" (formula "108") (term "1") (ifseqformula "10"))
                     (rule "hideAuxiliaryEq" (formula "10"))
                     (rule "eqSymm" (formula "107"))
                     (rule "replace_known_left" (formula "41") (term "0") (ifseqformula "9"))
                      (builtin "One Step Simplification" (formula "41"))
                     (rule "true_left" (formula "41"))
                     (rule "ifthenelse_split" (formula "8") (term "0"))
                     (branch " resultAtPost_226_B.<created>@anon_heap_mod«anonHeapFunction» = TRUE TRUE"
                        (rule "applyEqReverse" (formula "107") (term "1") (ifseqformula "9"))
                        (rule "hideAuxiliaryEq" (formula "9"))
                        (rule "eqSymm" (formula "106"))
                        (rule "replace_known_left" (formula "76") (term "0") (ifseqformula "8"))
                         (builtin "One Step Simplification" (formula "76"))
                        (rule "true_left" (formula "76"))
                        (rule "commute_or" (formula "3") (term "0,1,0,0,0"))
                        (rule "commute_or" (formula "2") (term "0,0,0,0"))
                        (rule "onlyCreatedObjectsAreReferenced" (formula "14") (term "1,0") (ifseqformula "22"))
                        (rule "replace_known_right" (formula "14") (term "0") (ifseqformula "92"))
                         (builtin "One Step Simplification" (formula "14") (ifInst ""  (formula "15")))
                        (rule "true_left" (formula "14"))
                        (rule "onlyCreatedObjectsAreReferenced" (formula "94") (term "0") (ifseqformula "55"))
                        (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "95"))
                         (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "49")))
                        (rule "true_left" (formula "1"))
                        (rule "onlyCreatedObjectsAreReferenced" (formula "31") (term "0") (ifseqformula "22"))
                        (rule "replace_known_right" (formula "31") (term "0") (ifseqformula "96"))
                         (builtin "One Step Simplification" (formula "31") (ifInst ""  (formula "16")))
                        (rule "true_left" (formula "31"))
                        (rule "onlyCreatedObjectsAreReferenced" (formula "14") (term "1,1,0") (ifseqformula "22"))
                        (rule "replace_known_right" (formula "14") (term "0") (ifseqformula "94"))
                         (builtin "One Step Simplification" (formula "14") (ifInst ""  (formula "16")))
                        (rule "true_left" (formula "14"))
                        (rule "onlyCreatedObjectsAreReferenced" (formula "98") (term "0") (ifseqformula "55"))
                        (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "99"))
                         (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "61")))
                        (rule "true_left" (formula "1"))
                        (rule "onlyCreatedObjectsAreReferenced" (formula "27") (term "1,0") (ifseqformula "22"))
                        (rule "replace_known_right" (formula "27") (term "0") (ifseqformula "98"))
                         (builtin "One Step Simplification" (formula "27") (ifInst ""  (formula "28")))
                        (rule "true_left" (formula "27"))
                        (rule "onlyCreatedObjectsAreReferenced" (formula "47") (term "1,0") (ifseqformula "55"))
                        (rule "replace_known_right" (formula "47") (term "0") (ifseqformula "93"))
                         (builtin "One Step Simplification" (formula "47") (ifInst ""  (formula "48")))
                        (rule "true_left" (formula "47"))
                        (rule "commute_or" (formula "2") (term "0,1,0,0,0"))
                        (rule "onlyCreatedObjectsAreReferenced" (formula "64") (term "2") (ifseqformula "55"))
                        (rule "replace_known_right" (formula "64") (term "0") (ifseqformula "97"))
                         (builtin "One Step Simplification" (formula "64") (ifInst ""  (formula "49")))
                        (rule "true_left" (formula "64"))
                        (rule "commute_or" (formula "1") (term "0,0,0,0"))
                        (rule "commute_or" (formula "1") (term "0,1,0,0,0"))
                        (rule "commute_or_2" (formula "4") (term "0,0,0"))
                        (rule "commute_and" (formula "33") (term "0,1"))
                        (rule "commute_or_2" (formula "3") (term "0,0,0"))
                        (rule "commute_or_2" (formula "6") (term "0,0,0,0,0"))
                         (builtin "One Step Simplification" (formula "6"))
                        (rule "commute_or_2" (formula "2") (term "0,0,0"))
                        (rule "commute_or_2" (formula "1") (term "0,0,0"))
                        (rule "shift_paren_or" (formula "5") (term "0,0,0,0,0"))
                        (rule "commute_or_2" (formula "6") (term "0,0,0,0"))
                        (rule "shift_paren_or" (formula "4") (term "0,0,0,0"))
                        (rule "commute_or_2" (formula "3") (term "1,0,0,0,0"))
                        (rule "shift_paren_or" (formula "2") (term "0,0,0,0"))
                        (rule "shift_paren_or" (formula "1") (term "0,0,0,0"))
                        (rule "commute_or_2" (formula "5") (term "0,0,0,0,0"))
                         (builtin "One Step Simplification" (formula "5"))
                        (rule "commute_or_2" (formula "5") (term "0,0,0,0"))
                        (rule "shift_paren_or" (formula "3") (term "0,0,0,0"))
                        (rule "cnf_rightDist" (formula "6") (term "0,0,0"))
                        (rule "distr_forallAnd" (formula "6") (term "0,0"))
                        (rule "distr_forallAnd" (formula "6") (term "0"))
                        (rule "distr_forallAnd" (formula "6"))
                        (rule "andLeft" (formula "6"))
                        (rule "commute_or_2" (formula "6") (term "0,0,0"))
                         (builtin "One Step Simplification" (formula "6"))
                        (rule "eqSymm" (formula "6") (term "1,0,0,0,0"))
                        (rule "castedGetAny" (formula "6") (term "0,0,0,0,0,0"))
                        (rule "castedGetAny" (formula "6") (term "1,0,0,1,0,0,0"))
                        (rule "castedGetAny" (formula "6") (term "0,1,0,0,0,0"))
                         (builtin "One Step Simplification" (formula "6"))
                        (rule "true_left" (formula "6"))
                        (rule "shift_paren_or" (formula "6") (term "0,0,0"))
                         (builtin "One Step Simplification" (formula "6"))
                        (rule "eqSymm" (formula "6") (term "1,1,0,0,0"))
                        (rule "castedGetAny" (formula "6") (term "0,0,1,0,0,0"))
                        (rule "castedGetAny" (formula "6") (term "0,0,0,0,0,0"))
                        (rule "castedGetAny" (formula "6") (term "0,1,1,0,0,0"))
                         (builtin "One Step Simplification" (formula "6"))
                        (rule "true_left" (formula "6"))
                        (rule "commute_and" (formula "4") (term "1,0,0,0"))
                        (rule "commute_and" (formula "3") (term "1,0,0,0"))
                        (rule "cnf_rightDist" (formula "5") (term "0,0,0"))
                        (rule "distr_forallAnd" (formula "5") (term "0,0"))
                        (rule "distr_forallAnd" (formula "5") (term "0"))
                        (rule "distr_forallAnd" (formula "5"))
                        (rule "andLeft" (formula "5"))
                        (rule "commute_or_2" (formula "5") (term "0,0,0"))
                         (builtin "One Step Simplification" (formula "5"))
                        (rule "eqSymm" (formula "5") (term "1,0,0,0,0"))
                        (rule "castedGetAny" (formula "5") (term "1,0,0,1,0,0,0"))
                        (rule "castedGetAny" (formula "5") (term "0,0,0,0,0,0"))
                        (rule "castedGetAny" (formula "5") (term "0,1,0,0,0,0"))
                         (builtin "One Step Simplification" (formula "5"))
                        (rule "true_left" (formula "5"))
                        (rule "shift_paren_or" (formula "5") (term "0,0,0"))
                         (builtin "One Step Simplification" (formula "5"))
                        (rule "eqSymm" (formula "5") (term "1,1,0,0,0"))
                        (rule "castedGetAny" (formula "5") (term "0,0,1,0,0,0"))
                        (rule "castedGetAny" (formula "5") (term "0,0,0,0,0,0"))
                        (rule "castedGetAny" (formula "5") (term "0,1,1,0,0,0"))
                         (builtin "One Step Simplification" (formula "5"))
                        (rule "true_left" (formula "5"))
                        (rule "commute_and" (formula "2") (term "1,0,0,0"))
                        (rule "commute_and" (formula "1") (term "1,0,0,0"))
                        (rule "shift_paren_or" (formula "4") (term "0,0,0,0,0"))
                         (builtin "One Step Simplification" (formula "4"))
                        (rule "shift_paren_or" (formula "2") (term "0,0,0,0,0"))
                         (builtin "One Step Simplification" (formula "2"))
                        (rule "shift_paren_or" (formula "1") (term "0,0,0,0,0"))
                         (builtin "One Step Simplification" (formula "1"))
                        (rule "shift_paren_or" (formula "3") (term "0,0,0,0,0"))
                         (builtin "One Step Simplification" (formula "3"))
                        (rule "commute_or_2" (formula "4") (term "0,0,0,0"))
                        (rule "commute_or_2" (formula "2") (term "0,0,0,0"))
                        (rule "commute_or_2" (formula "1") (term "0,0,0,0"))
                        (rule "cnf_rightDist" (formula "3") (term "0,0,0"))
                        (rule "distr_forallAnd" (formula "3") (term "0,0"))
                        (rule "distr_forallAnd" (formula "3") (term "0"))
                        (rule "distr_forallAnd" (formula "3"))
                        (rule "andLeft" (formula "3"))
                        (rule "shift_paren_or" (formula "4") (term "0,0,0"))
                         (builtin "One Step Simplification" (formula "4"))
                        (rule "eqSymm" (formula "4") (term "1,1,0,0,0"))
                        (rule "castedGetAny" (formula "4") (term "0,0,1,0,0,0"))
                        (rule "castedGetAny" (formula "4") (term "0,0,0,0,0,0"))
                        (rule "castedGetAny" (formula "4") (term "0,1,1,0,0,0"))
                         (builtin "One Step Simplification" (formula "4"))
                        (rule "true_left" (formula "4"))
                        (rule "cnf_rightDist" (formula "4") (term "0,0,0"))
                        (rule "distr_forallAnd" (formula "4") (term "0,0"))
                        (rule "distr_forallAnd" (formula "4") (term "0"))
                        (rule "distr_forallAnd" (formula "4"))
                        (rule "andLeft" (formula "4"))
                        (rule "shift_paren_or" (formula "5") (term "0,0,0"))
                         (builtin "One Step Simplification" (formula "5"))
                        (rule "eqSymm" (formula "5") (term "1,1,0,0,0"))
                        (rule "castedGetAny" (formula "5") (term "0,0,1,0,0,0"))
                        (rule "castedGetAny" (formula "5") (term "0,0,0,0,0,0"))
                        (rule "castedGetAny" (formula "5") (term "0,1,1,0,0,0"))
                         (builtin "One Step Simplification" (formula "5"))
                        (rule "true_left" (formula "5"))
                        (rule "cnf_rightDist" (formula "2") (term "0,0,0"))
                        (rule "distr_forallAnd" (formula "2") (term "0,0"))
                        (rule "distr_forallAnd" (formula "2") (term "0"))
                        (rule "distr_forallAnd" (formula "2"))
                        (rule "andLeft" (formula "2"))
                        (rule "cnf_rightDist" (formula "1") (term "0,0,0"))
                        (rule "distr_forallAnd" (formula "1") (term "0,0"))
                        (rule "distr_forallAnd" (formula "1") (term "0"))
                        (rule "distr_forallAnd" (formula "1"))
                        (rule "andLeft" (formula "1"))
                        (rule "shift_paren_or" (formula "3") (term "0,0,0"))
                         (builtin "One Step Simplification" (formula "3"))
                        (rule "eqSymm" (formula "3") (term "1,1,0,0,0"))
                        (rule "castedGetAny" (formula "3") (term "0,0,0,0,0,0"))
                        (rule "castedGetAny" (formula "3") (term "0,0,1,0,0,0"))
                        (rule "castedGetAny" (formula "3") (term "0,1,1,0,0,0"))
                         (builtin "One Step Simplification" (formula "3"))
                        (rule "true_left" (formula "3"))
                        (rule "cnf_rightDist" (formula "3") (term "0,0,0"))
                        (rule "distr_forallAnd" (formula "3") (term "0,0"))
                        (rule "distr_forallAnd" (formula "3") (term "0"))
                        (rule "distr_forallAnd" (formula "3"))
                        (rule "andLeft" (formula "3"))
                        (rule "cnf_rightDist" (formula "4") (term "0,0,0"))
                        (rule "distr_forallAnd" (formula "4") (term "0,0"))
                        (rule "distr_forallAnd" (formula "4") (term "0"))
                        (rule "distr_forallAnd" (formula "4"))
                        (rule "andLeft" (formula "4"))
                        (rule "commute_or_2" (formula "4") (term "0,0,0"))
                         (builtin "One Step Simplification" (formula "4"))
                        (rule "eqSymm" (formula "4") (term "1,0,0,0,0"))
                        (rule "castedGetAny" (formula "4") (term "1,0,0,1,0,0,0"))
                        (rule "castedGetAny" (formula "4") (term "0,0,0,0,0,0"))
                        (rule "castedGetAny" (formula "4") (term "0,1,0,0,0,0"))
                         (builtin "One Step Simplification" (formula "4"))
                        (rule "true_left" (formula "4"))
                        (rule "shift_paren_or" (formula "3") (term "0,0,0"))
                         (builtin "One Step Simplification" (formula "3"))
                        (rule "eqSymm" (formula "3") (term "1,1,0,0,0"))
                        (rule "castedGetAny" (formula "3") (term "0,0,1,0,0,0"))
                        (rule "castedGetAny" (formula "3") (term "1,0,0,0,0,0,0"))
                        (rule "castedGetAny" (formula "3") (term "0,1,1,0,0,0"))
                         (builtin "One Step Simplification" (formula "3"))
                        (rule "true_left" (formula "3"))
                        (rule "shift_paren_or" (formula "3") (term "0,0,0"))
                         (builtin "One Step Simplification" (formula "3"))
                        (rule "eqSymm" (formula "3") (term "1,1,0,0,0"))
                        (rule "castedGetAny" (formula "3") (term "1,0,0,0,0,0,0"))
                        (rule "castedGetAny" (formula "3") (term "0,0,1,0,0,0"))
                        (rule "castedGetAny" (formula "3") (term "0,1,1,0,0,0"))
                         (builtin "One Step Simplification" (formula "3"))
                        (rule "true_left" (formula "3"))
                        (rule "cnf_rightDist" (formula "2") (term "0,0,0"))
                        (rule "distr_forallAnd" (formula "2") (term "0,0"))
                        (rule "distr_forallAnd" (formula "2") (term "0"))
                        (rule "distr_forallAnd" (formula "2"))
                        (rule "andLeft" (formula "2"))
                        (rule "commute_or_2" (formula "2") (term "0,0,0"))
                         (builtin "One Step Simplification" (formula "2"))
                        (rule "eqSymm" (formula "2") (term "1,0,0,0,0"))
                        (rule "castedGetAny" (formula "2") (term "1,0,0,1,0,0,0"))
                        (rule "castedGetAny" (formula "2") (term "0,0,0,0,0,0"))
                        (rule "castedGetAny" (formula "2") (term "0,1,0,0,0,0"))
                         (builtin "One Step Simplification" (formula "2"))
                        (rule "true_left" (formula "2"))
                        (rule "ifthenelse_split_for" (formula "29") (term "1,1"))
                        (branch "result_228_A_1.value@heapAtPre_A«anonHeapFunction» ≥ 0 TRUE"
                           (rule "cnf_rightDist" (formula "30"))
                           (rule "andLeft" (formula "30"))
                           (rule "commute_or" (formula "31"))
                           (rule "cnf_rightDist" (formula "30"))
                           (rule "andLeft" (formula "30"))
                           (rule "commute_or" (formula "31"))
                           (rule "cnf_rightDist" (formula "1") (term "0,0,0"))
                           (rule "distr_forallAnd" (formula "1") (term "0,0"))
                           (rule "distr_forallAnd" (formula "1") (term "0"))
                           (rule "distr_forallAnd" (formula "1"))
                           (rule "andLeft" (formula "1"))
                           (rule "shift_paren_or" (formula "3") (term "0,0,0"))
                            (builtin "One Step Simplification" (formula "3"))
                           (rule "eqSymm" (formula "3") (term "1,1,0,0,0"))
                           (rule "castedGetAny" (formula "3") (term "0,0,1,0,0,0"))
                           (rule "castedGetAny" (formula "3") (term "1,0,0,0,0,0,0"))
                           (rule "castedGetAny" (formula "3") (term "0,1,1,0,0,0"))
                            (builtin "One Step Simplification" (formula "3"))
                           (rule "true_left" (formula "3"))
                           (rule "shift_paren_or" (formula "2") (term "0,0,0"))
                            (builtin "One Step Simplification" (formula "2"))
                           (rule "eqSymm" (formula "2") (term "1,1,0,0,0"))
                           (rule "castedGetAny" (formula "2") (term "1,0,0,0,0,0,0"))
                           (rule "castedGetAny" (formula "2") (term "0,0,1,0,0,0"))
                           (rule "castedGetAny" (formula "2") (term "0,1,1,0,0,0"))
                            (builtin "One Step Simplification" (formula "2"))
                           (rule "true_left" (formula "2"))
                           (rule "cnf_rightDist" (formula "1") (term "0,0,0"))
                           (rule "distr_forallAnd" (formula "1") (term "0,0"))
                           (rule "distr_forallAnd" (formula "1") (term "0"))
                           (rule "distr_forallAnd" (formula "1"))
                           (rule "andLeft" (formula "1"))
                           (rule "commute_or_2" (formula "1") (term "0,0,0"))
                            (builtin "One Step Simplification" (formula "1"))
                           (rule "eqSymm" (formula "1") (term "1,0,0,0,0"))
                           (rule "castedGetAny" (formula "1") (term "0,0,0,0,0,0"))
                           (rule "castedGetAny" (formula "1") (term "1,0,0,1,0,0,0"))
                           (rule "castedGetAny" (formula "1") (term "0,1,0,0,0,0"))
                            (builtin "One Step Simplification" (formula "1"))
                           (rule "true_left" (formula "1"))
                           (rule "shift_paren_or" (formula "1") (term "0,0,0"))
                            (builtin "One Step Simplification" (formula "1"))
                           (rule "eqSymm" (formula "1") (term "1,1,0,0,0"))
                           (rule "castedGetAny" (formula "1") (term "0,0,1,0,0,0"))
                           (rule "castedGetAny" (formula "1") (term "1,0,0,0,0,0,0"))
                           (rule "castedGetAny" (formula "1") (term "0,1,1,0,0,0"))
                            (builtin "One Step Simplification" (formula "1"))
                           (rule "true_left" (formula "1"))
                           (rule "cut_direct" (formula "28") (term "0"))
                           (branch "CUT: result_228_A_1.value@heapAtPre_A«anonHeapFunction» = 0 TRUE"
                               (builtin "One Step Simplification" (formula "29"))
                              (rule "true_left" (formula "29"))
                              (rule "replace_known_left" (formula "30") (term "0") (ifseqformula "28"))
                               (builtin "One Step Simplification" (formula "30"))
                              (rule "true_left" (formula "30"))
                              (rule "replace_known_left" (formula "29") (term "0") (ifseqformula "28"))
                               (builtin "One Step Simplification" (formula "29"))
                              (rule "true_left" (formula "29"))
                              (rule "applyEq" (formula "27") (term "0") (ifseqformula "28"))
                              (rule "qeq_literals" (formula "27"))
                              (rule "true_left" (formula "27"))
                              (rule "applyEq" (formula "29") (term "1,0,0") (ifseqformula "27"))
                              (rule "polySimp_mulComm0" (formula "29") (term "0"))
                              (rule "applyEq" (formula "28") (term "1,0") (ifseqformula "27"))
                              (rule "eqSymm" (formula "28"))
                              (rule "polySimp_homoEq" (formula "28"))
                              (rule "polySimp_mulLiterals" (formula "28") (term "1,0"))
                              (rule "polySimp_elimOne" (formula "28") (term "1,0"))
                              (rule "applyEq" (formula "56") (term "1") (ifseqformula "27"))
                              (rule "applyEq" (formula "7") (term "1") (ifseqformula "27"))
                              (rule "applyEq" (formula "23") (term "1") (ifseqformula "27"))
                              (rule "applyEq" (formula "29") (term "0,0") (ifseqformula "27"))
                              (rule "times_zero_2" (formula "29") (term "0"))
                              (rule "polySimp_homoEq" (formula "29"))
                              (rule "mul_literals" (formula "29") (term "1,0"))
                              (rule "add_zero_right" (formula "29") (term "0"))
                              (rule "applyEq" (formula "28") (term "1,1,0") (ifseqformula "27"))
                              (rule "polySimp_addComm0" (formula "28") (term "0"))
                              (rule "polySimp_sepNegMonomial" (formula "29"))
                              (rule "polySimp_mulLiterals" (formula "29") (term "0"))
                              (rule "polySimp_elimOne" (formula "29") (term "0"))
                              (rule "applyEq" (formula "28") (term "0,1,0") (ifseqformula "29"))
                              (rule "polySimp_addComm0" (formula "28") (term "0"))
                              (rule "applyEq" (formula "4") (term "0") (ifseqformula "29"))
                              (rule "applyEq" (formula "28") (term "0,0,1,0") (ifseqformula "29"))
                              (rule "polySimp_addComm0" (formula "28") (term "0"))
                              (rule "applyEq" (formula "6") (term "1") (ifseqformula "29"))
                              (rule "polySimp_sepPosMonomial" (formula "28"))
                              (rule "div_axiom" (formula "28") (term "0,1") (inst "quotient=quotient_1"))
                               (builtin "One Step Simplification" (formula "28"))
                              (rule "true_left" (formula "28"))
                              (rule "jdiv_axiom" (formula "28") (term "0"))
                              (rule "eqSymm" (formula "28"))
                              (rule "applyEq" (formula "28") (term "1") (ifseqformula "29"))
                               (builtin "One Step Simplification" (formula "28"))
                              (rule "eqSymm" (formula "28") (term "1"))
                              (rule "polySimp_homoEq" (formula "28") (term "1"))
                              (rule "polySimp_mulLiterals" (formula "28") (term "1,0,1"))
                              (rule "polySimp_elimOne" (formula "28") (term "1,0,1"))
                              (rule "polySimp_sepPosMonomial" (formula "28") (term "1"))
                              (rule "inEqSimp_contradInEq0" (formula "28") (term "0,0") (ifseqformula "4"))
                              (rule "qeq_literals" (formula "28") (term "0,0,0"))
                               (builtin "One Step Simplification" (formula "28"))
                              (rule "true_left" (formula "28"))
                              (rule "Use_information_flow_contract_for_compareTo_325434207" (formula "19") (ifseqformula "19"))
                               (builtin "One Step Simplification" (formula "19") (ifInst ""  (formula "92")) (ifInst ""  (formula "92")))
                              (rule "true_left" (formula "19"))
                              (rule "Use_information_flow_contract_for_getOrder_757678341" (formula "58") (ifseqformula "25"))
                              (rule "applyEq" (formula "58") (term "0,1,1") (ifseqformula "7"))
                              (rule "eqSymm" (formula "58") (term "1,1"))
                              (rule "replace_known_left" (formula "58") (term "1,1") (ifseqformula "27"))
                               (builtin "One Step Simplification" (formula "58"))
                              (rule "true_left" (formula "58"))
                              (rule "Use_information_flow_contract_for_getOrder_757678341" (formula "58") (ifseqformula "58"))
                               (builtin "One Step Simplification" (formula "58"))
                              (rule "true_left" (formula "58"))
                              (rule "Use_information_flow_contract_for_getOrder_757678341" (formula "25") (ifseqformula "25"))
                               (builtin "One Step Simplification" (formula "25"))
                              (rule "true_left" (formula "25"))
                              (rule "Use_information_flow_contract_for_compareTo_325434207" (formula "19") (ifseqformula "52"))
                              (rule "eqSymm" (formula "19") (term "1,1"))
                              (rule "eqSymm" (formula "19") (term "0,0,1"))
                              (rule "eqSymm" (formula "19") (term "1,0,1"))
                              (rule "replace_known_right" (formula "19") (term "0,1,1,0") (ifseqformula "93"))
                               (builtin "One Step Simplification" (formula "19") (ifInst ""  (formula "92")))
                              (rule "applyEqRigid" (formula "19") (term "0,1,0,1") (ifseqformula "54"))
                              (rule "eqSymm" (formula "19") (term "1,0,1"))
                              (rule "replace_known_left" (formula "19") (term "1,0,1") (ifseqformula "21"))
                               (builtin "One Step Simplification" (formula "19"))
                              (rule "applyEq" (formula "19") (term "0,0,1") (ifseqformula "6"))
                              (rule "eqSymm" (formula "19") (term "0,1"))
                              (rule "replace_known_left" (formula "19") (term "0,1") (ifseqformula "30"))
                               (builtin "One Step Simplification" (formula "19"))
                              (rule "Class_invariant_axiom_for_java_math_BigInteger" (formula "19") (term "1,0"))
                              (rule "replace_known_right" (formula "19") (term "0,0,1,0") (ifseqformula "93"))
                               (builtin "One Step Simplification" (formula "19") (ifInst ""  (formula "54")))
                              (rule "Class_invariant_axiom_for_java_math_BigInteger" (formula "19") (term "0"))
                              (rule "replace_known_right" (formula "19") (term "0,0,0") (ifseqformula "92"))
                               (builtin "One Step Simplification" (formula "19") (ifInst ""  (formula "21")))
                              (rule "applyEq" (formula "53") (term "4") (ifseqformula "19"))
                              (rule "applyEq" (formula "45") (term "0") (ifseqformula "19"))
                              (rule "applyEq" (formula "51") (term "0") (ifseqformula "19"))
                              (rule "Use_information_flow_contract_for_multiply_1272441881" (formula "69") (ifseqformula "36"))
                              (rule "replaceKnownSelect_taclet21_11" (formula "69") (term "1,1,1"))
                              (rule "replaceKnownSelect_taclet21_12" (formula "69") (term "0,1,1"))
                              (rule "replaceKnownAuxiliaryConstant_taclet0111021_18" (formula "69") (term "1,1,1"))
                              (rule "replaceKnownAuxiliaryConstant_taclet00111021_19" (formula "69") (term "0,1,1"))
                              (rule "replaceKnownSelect_taclet21_9" (formula "69") (term "0,1,0,1"))
                              (rule "replaceKnownSelect_taclet21_8" (formula "69") (term "1,1,0,1"))
                              (rule "replaceKnownAuxiliaryConstant_taclet021_15" (formula "69") (term "0,1,0,1"))
                              (rule "replaceKnownAuxiliaryConstant_taclet21_10" (formula "69") (term "1,1,0,1"))
                              (rule "replaceKnownAuxiliaryConstant_taclet021_15" (formula "69") (term "1,1,0,1"))
                               (builtin "One Step Simplification" (formula "69") (ifInst ""  (formula "82")) (ifInst ""  (formula "81")) (ifInst ""  (formula "99")))
                              (rule "pullOutSelect" (formula "69") (term "1,0,1") (inst "selectSK=org_bouncycastle_math_ec_ECPoint_value_4"))
                              (rule "simplifySelectOfAnonEQ" (formula "69") (ifseqformula "27"))
                               (builtin "One Step Simplification" (formula "69") (ifInst ""  (formula "96")) (ifInst ""  (formula "14")))
                              (rule "applyEqReverse" (formula "70") (term "1,0,1") (ifseqformula "69"))
                              (rule "hideAuxiliaryEq" (formula "69"))
                              (rule "pullOutSelect" (formula "69") (term "0,0,1") (inst "selectSK=org_bouncycastle_math_ec_ECPoint_value_5"))
                              (rule "simplifySelectOfAnonEQ" (formula "69") (ifseqformula "59"))
                               (builtin "One Step Simplification" (formula "69") (ifInst ""  (formula "97")) (ifInst ""  (formula "47")))
                              (rule "applyEqReverse" (formula "70") (term "0,0,1") (ifseqformula "69"))
                              (rule "hideAuxiliaryEq" (formula "69"))
                              (rule "replace_known_left" (formula "69") (term "0,1") (ifseqformula "5"))
                               (builtin "One Step Simplification" (formula "69"))
                              (rule "notLeft" (formula "69"))
                              (rule "Class_invariant_axiom_for_org_bouncycastle_math_ec_ECPoint" (formula "75") (term "1"))
                               (builtin "One Step Simplification" (formula "75"))
                              (rule "Class_invariant_axiom_for_org_bouncycastle_math_ec_ECPoint" (formula "75"))
                              (rule "closeTrue" (formula "75"))
                           )
                           (branch "CUT: result_228_A_1.value@heapAtPre_A«anonHeapFunction» = 0 FALSE"
                               (builtin "One Step Simplification" (formula "28"))
                              (rule "replace_known_right" (formula "29") (term "0") (ifseqformula "79"))
                               (builtin "One Step Simplification" (formula "29"))
                              (rule "replace_known_right" (formula "30") (term "0") (ifseqformula "79"))
                               (builtin "One Step Simplification" (formula "30"))
                              (rule "applyEq" (formula "32") (term "0,0") (ifseqformula "29"))
                              (rule "polySimp_mulComm0" (formula "32") (term "0"))
                              (rule "applyEq" (formula "28") (term "0") (ifseqformula "32"))
                              (rule "inEqSimp_homoInEq0" (formula "28"))
                              (rule "polySimp_mulComm0" (formula "28") (term "1,0"))
                              (rule "polySimp_rightDist" (formula "28") (term "1,0"))
                              (rule "polySimp_mulLiterals" (formula "28") (term "1,1,0"))
                              (rule "polySimp_elimOne" (formula "28") (term "1,1,0"))
                              (rule "polySimp_mulComm0" (formula "28") (term "0,1,0"))
                              (rule "polySimp_addAssoc" (formula "28") (term "0"))
                              (rule "polySimp_addComm0" (formula "28") (term "0,0"))
                              (rule "polySimp_pullOutFactor2b" (formula "28") (term "0"))
                              (rule "add_literals" (formula "28") (term "1,1,0"))
                              (rule "times_zero_1" (formula "28") (term "1,0"))
                              (rule "add_zero_right" (formula "28") (term "0"))
                              (rule "applyEq" (formula "30") (term "0") (ifseqformula "32"))
                              (rule "inEqSimp_homoInEq1" (formula "30"))
                              (rule "polySimp_mulComm0" (formula "30") (term "1,0"))
                              (rule "polySimp_rightDist" (formula "30") (term "1,0"))
                              (rule "polySimp_mulLiterals" (formula "30") (term "1,1,0"))
                              (rule "polySimp_elimOne" (formula "30") (term "1,1,0"))
                              (rule "polySimp_mulComm0" (formula "30") (term "0,1,0"))
                              (rule "polySimp_addComm1" (formula "30") (term "0"))
                              (rule "polySimp_addAssoc" (formula "30") (term "0,0"))
                              (rule "polySimp_addComm1" (formula "30") (term "0,0,0"))
                              (rule "polySimp_pullOutFactor2b" (formula "30") (term "0,0"))
                              (rule "add_literals" (formula "30") (term "1,1,0,0"))
                              (rule "times_zero_1" (formula "30") (term "1,0,0"))
                              (rule "add_zero_right" (formula "30") (term "0,0"))
                              (rule "applyEq" (formula "31") (term "0,1") (ifseqformula "29"))
                              (rule "inEqSimp_invertInEq1" (formula "28"))
                              (rule "polySimp_mulLiterals" (formula "28") (term "0"))
                              (rule "mul_literals" (formula "28") (term "1"))
                              (rule "polySimp_elimOne" (formula "28") (term "0"))
                              (rule "inEqSimp_sepNegMonomial0" (formula "30"))
                              (rule "polySimp_mulLiterals" (formula "30") (term "0"))
                              (rule "polySimp_elimOne" (formula "30") (term "0"))
                              (rule "inEqSimp_strengthen1" (formula "27") (ifseqformula "79"))
                              (rule "add_literals" (formula "27") (term "1"))
                              (rule "inEqSimp_contradEq7" (formula "79") (ifseqformula "27"))
                              (rule "mul_literals" (formula "79") (term "1,0,0"))
                              (rule "add_zero_right" (formula "79") (term "0,0"))
                              (rule "leq_literals" (formula "79") (term "0"))
                               (builtin "One Step Simplification" (formula "79"))
                              (rule "false_right" (formula "79"))
                              (rule "Use_information_flow_contract_for_compareTo_325434207" (formula "19") (ifseqformula "19"))
                               (builtin "One Step Simplification" (formula "19") (ifInst ""  (formula "95")) (ifInst ""  (formula "95")))
                              (rule "true_left" (formula "19"))
                              (rule "Use_information_flow_contract_for_getOrder_757678341" (formula "61") (ifseqformula "25"))
                              (rule "replace_known_left" (formula "61") (term "1,1") (ifseqformula "7"))
                               (builtin "One Step Simplification" (formula "61"))
                              (rule "true_left" (formula "61"))
                              (rule "Use_information_flow_contract_for_getOrder_757678341" (formula "61") (ifseqformula "61"))
                               (builtin "One Step Simplification" (formula "61"))
                              (rule "true_left" (formula "61"))
                              (rule "Use_information_flow_contract_for_getOrder_757678341" (formula "25") (ifseqformula "25"))
                               (builtin "One Step Simplification" (formula "25"))
                              (rule "true_left" (formula "25"))
                              (rule "Use_information_flow_contract_for_compareTo_325434207" (formula "19") (ifseqformula "55"))
                              (rule "eqSymm" (formula "19") (term "1,0,1"))
                              (rule "eqSymm" (formula "19") (term "1,1"))
                              (rule "eqSymm" (formula "19") (term "0,0,1"))
                              (rule "replace_known_right" (formula "19") (term "0,1,1,0") (ifseqformula "96"))
                               (builtin "One Step Simplification" (formula "19") (ifInst ""  (formula "95")) (ifInst ""  (formula "6")))
                              (rule "applyEq" (formula "19") (term "0,0,1") (ifseqformula "57"))
                              (rule "eqSymm" (formula "19") (term "0,1"))
                              (rule "replace_known_left" (formula "19") (term "0,1") (ifseqformula "21"))
                               (builtin "One Step Simplification" (formula "19"))
                              (rule "Class_invariant_axiom_for_java_math_BigInteger" (formula "19") (term "1,0"))
                              (rule "replace_known_left" (formula "19") (term "1,1,0") (ifseqformula "57"))
                               (builtin "One Step Simplification" (formula "19") (ifInst ""  (formula "96")))
                              (rule "Class_invariant_axiom_for_java_math_BigInteger" (formula "19") (term "0"))
                              (rule "replace_known_right" (formula "19") (term "0,0,0") (ifseqformula "95"))
                               (builtin "One Step Simplification" (formula "19") (ifInst ""  (formula "21")))
                              (rule "applyEq" (formula "48") (term "0") (ifseqformula "19"))
                              (rule "applyEq" (formula "54") (term "0") (ifseqformula "19"))
                              (rule "applyEq" (formula "54") (term "4") (ifseqformula "19"))
                              (rule "Use_information_flow_contract_for_multiply_1272441881_0" (formula "72") (ifseqformula "39"))
                              (rule "replaceKnownSelect_taclet21_12" (formula "72") (term "0,1,1"))
                              (rule "replaceKnownSelect_taclet21_11" (formula "72") (term "1,1,1"))
                              (rule "replaceKnownAuxiliaryConstant_taclet00111021_19" (formula "72") (term "0,1,1"))
                              (rule "replaceKnownAuxiliaryConstant_taclet0111021_18" (formula "72") (term "1,1,1"))
                              (rule "replaceKnownSelect_taclet21_9" (formula "72") (term "0,1,0,1"))
                              (rule "replaceKnownSelect_taclet21_8" (formula "72") (term "1,1,0,1"))
                              (rule "replaceKnownAuxiliaryConstant_taclet021_15" (formula "72") (term "0,1,0,1"))
                              (rule "replaceKnownAuxiliaryConstant_taclet21_10" (formula "72") (term "1,1,0,1"))
                              (rule "replaceKnownAuxiliaryConstant_taclet021_15" (formula "72") (term "1,1,0,1"))
                               (builtin "One Step Simplification" (formula "72") (ifInst ""  (formula "85")) (ifInst ""  (formula "84")) (ifInst ""  (formula "102")))
                              (rule "pullOutSelect" (formula "72") (term "0,0,1") (inst "selectSK=org_bouncycastle_math_ec_ECPoint_value_4"))
                              (rule "simplifySelectOfAnonEQ" (formula "72") (ifseqformula "62"))
                               (builtin "One Step Simplification" (formula "72") (ifInst ""  (formula "100")) (ifInst ""  (formula "50")))
                              (rule "applyEqReverse" (formula "73") (term "0,0,1") (ifseqformula "72"))
                              (rule "hideAuxiliaryEq" (formula "72"))
                              (rule "eqSymm" (formula "72") (term "0,1"))
                              (rule "applyEq" (formula "72") (term "1,0,1") (ifseqformula "5"))
                              (rule "pullOutSelect" (formula "72") (term "0,0,1") (inst "selectSK=org_bouncycastle_math_ec_ECPoint_value_5"))
                              (rule "simplifySelectOfAnonEQ" (formula "72") (ifseqformula "27"))
                               (builtin "One Step Simplification" (formula "72") (ifInst ""  (formula "99")) (ifInst ""  (formula "14")))
                              (rule "applyEqReverse" (formula "73") (term "0,0,1") (ifseqformula "72"))
                               (builtin "One Step Simplification" (formula "73"))
                              (rule "notLeft" (formula "73"))
                              (rule "hideAuxiliaryEq" (formula "72"))
                              (rule "Class_invariant_axiom_for_org_bouncycastle_math_ec_ECPoint" (formula "78") (term "0"))
                               (builtin "One Step Simplification" (formula "78"))
                              (rule "Class_invariant_axiom_for_org_bouncycastle_math_ec_ECPoint" (formula "78"))
                              (rule "closeTrue" (formula "78"))
                           )
                        )
                        (branch "result_228_A_1.value@heapAtPre_A«anonHeapFunction» ≥ 0 FALSE"
                           (rule "inEqSimp_geqRight" (formula "78"))
                           (rule "mul_literals" (formula "1") (term "1,0,0"))
                           (rule "add_literals" (formula "1") (term "0,0"))
                           (rule "inEqSimp_sepPosMonomial0" (formula "1"))
                           (rule "mul_literals" (formula "1") (term "1"))
                           (rule "inEqSimp_contradEq3" (formula "30") (term "0") (ifseqformula "1"))
                           (rule "mul_literals" (formula "30") (term "1,0,0,0"))
                           (rule "add_zero_right" (formula "30") (term "0,0,0"))
                           (rule "qeq_literals" (formula "30") (term "0,0"))
                            (builtin "One Step Simplification" (formula "30"))
                           (rule "andLeft" (formula "30"))
                           (rule "andLeft" (formula "30"))
                           (rule "applyEq" (formula "34") (term "0,0") (ifseqformula "31"))
                           (rule "polySimp_mulComm0" (formula "34") (term "0"))
                           (rule "applyEq" (formula "32") (term "0") (ifseqformula "34"))
                           (rule "inEqSimp_homoInEq1" (formula "32"))
                           (rule "polySimp_mulComm0" (formula "32") (term "1,0"))
                           (rule "polySimp_rightDist" (formula "32") (term "1,0"))
                           (rule "polySimp_mulLiterals" (formula "32") (term "1,1,0"))
                           (rule "polySimp_elimOne" (formula "32") (term "1,1,0"))
                           (rule "polySimp_mulComm0" (formula "32") (term "0,1,0"))
                           (rule "polySimp_addComm1" (formula "32") (term "0"))
                           (rule "polySimp_addAssoc" (formula "32") (term "0,0"))
                           (rule "polySimp_addComm1" (formula "32") (term "0,0,0"))
                           (rule "polySimp_pullOutFactor2b" (formula "32") (term "0,0"))
                           (rule "add_literals" (formula "32") (term "1,1,0,0"))
                           (rule "times_zero_1" (formula "32") (term "1,0,0"))
                           (rule "add_zero_right" (formula "32") (term "0,0"))
                           (rule "applyEq" (formula "30") (term "0") (ifseqformula "34"))
                           (rule "inEqSimp_homoInEq0" (formula "30"))
                           (rule "polySimp_mulComm0" (formula "30") (term "1,0"))
                           (rule "polySimp_rightDist" (formula "30") (term "1,0"))
                           (rule "polySimp_mulLiterals" (formula "30") (term "1,1,0"))
                           (rule "polySimp_elimOne" (formula "30") (term "1,1,0"))
                           (rule "polySimp_mulComm0" (formula "30") (term "0,1,0"))
                           (rule "polySimp_addAssoc" (formula "30") (term "0"))
                           (rule "polySimp_addComm0" (formula "30") (term "0,0"))
                           (rule "polySimp_pullOutFactor2b" (formula "30") (term "0"))
                           (rule "add_literals" (formula "30") (term "1,1,0"))
                           (rule "times_zero_1" (formula "30") (term "1,0"))
                           (rule "add_zero_right" (formula "30") (term "0"))
                           (rule "applyEq" (formula "33") (term "0,1") (ifseqformula "31"))
                           (rule "inEqSimp_sepPosMonomial0" (formula "32"))
                           (rule "polySimp_mulComm0" (formula "32") (term "1"))
                           (rule "polySimp_rightDist" (formula "32") (term "1"))
                           (rule "polySimp_mulLiterals" (formula "32") (term "1,1"))
                           (rule "mul_literals" (formula "32") (term "0,1"))
                           (rule "polySimp_elimOne" (formula "32") (term "1,1"))
                           (rule "inEqSimp_invertInEq1" (formula "30"))
                           (rule "polySimp_mulLiterals" (formula "30") (term "0"))
                           (rule "mul_literals" (formula "30") (term "1"))
                           (rule "polySimp_elimOne" (formula "30") (term "0"))
                           (rule "cnf_rightDist" (formula "2") (term "0,0,0"))
                           (rule "distr_forallAnd" (formula "2") (term "0,0"))
                           (rule "distr_forallAnd" (formula "2") (term "0"))
                           (rule "distr_forallAnd" (formula "2"))
                           (rule "andLeft" (formula "2"))
                           (rule "shift_paren_or" (formula "4") (term "0,0,0"))
                            (builtin "One Step Simplification" (formula "4"))
                           (rule "eqSymm" (formula "4") (term "1,1,0,0,0"))
                           (rule "castedGetAny" (formula "4") (term "1,0,0,0,0,0,0"))
                           (rule "castedGetAny" (formula "4") (term "0,0,1,0,0,0"))
                           (rule "castedGetAny" (formula "4") (term "0,1,1,0,0,0"))
                            (builtin "One Step Simplification" (formula "4"))
                           (rule "true_left" (formula "4"))
                           (rule "shift_paren_or" (formula "3") (term "0,0,0"))
                            (builtin "One Step Simplification" (formula "3"))
                           (rule "eqSymm" (formula "3") (term "1,1,0,0,0"))
                           (rule "castedGetAny" (formula "3") (term "0,0,1,0,0,0"))
                           (rule "castedGetAny" (formula "3") (term "1,0,0,0,0,0,0"))
                           (rule "castedGetAny" (formula "3") (term "0,1,1,0,0,0"))
                            (builtin "One Step Simplification" (formula "3"))
                           (rule "true_left" (formula "3"))
                           (rule "cnf_rightDist" (formula "2") (term "0,0,0"))
                           (rule "distr_forallAnd" (formula "2") (term "0,0"))
                           (rule "distr_forallAnd" (formula "2") (term "0"))
                           (rule "distr_forallAnd" (formula "2"))
                           (rule "andLeft" (formula "2"))
                           (rule "commute_or_2" (formula "2") (term "0,0,0"))
                            (builtin "One Step Simplification" (formula "2"))
                           (rule "eqSymm" (formula "2") (term "1,0,0,0,0"))
                           (rule "castedGetAny" (formula "2") (term "1,0,0,1,0,0,0"))
                           (rule "castedGetAny" (formula "2") (term "0,0,0,0,0,0"))
                           (rule "castedGetAny" (formula "2") (term "0,1,0,0,0,0"))
                            (builtin "One Step Simplification" (formula "2"))
                           (rule "true_left" (formula "2"))
                           (rule "shift_paren_or" (formula "2") (term "0,0,0"))
                            (builtin "One Step Simplification" (formula "2"))
                           (rule "eqSymm" (formula "2") (term "1,1,0,0,0"))
                           (rule "castedGetAny" (formula "2") (term "1,0,0,0,0,0,0"))
                           (rule "castedGetAny" (formula "2") (term "0,0,1,0,0,0"))
                           (rule "castedGetAny" (formula "2") (term "0,1,1,0,0,0"))
                            (builtin "One Step Simplification" (formula "2"))
                           (rule "true_left" (formula "2"))
                           (rule "Use_information_flow_contract_for_compareTo_325434207" (formula "20") (ifseqformula "20"))
                            (builtin "One Step Simplification" (formula "20") (ifInst ""  (formula "95")) (ifInst ""  (formula "95")))
                           (rule "true_left" (formula "20"))
                           (rule "Use_information_flow_contract_for_getOrder_757678341" (formula "61") (ifseqformula "26"))
                           (rule "replace_known_left" (formula "61") (term "1,1") (ifseqformula "8"))
                            (builtin "One Step Simplification" (formula "61"))
                           (rule "true_left" (formula "61"))
                           (rule "Use_information_flow_contract_for_multiply_1272441881" (formula "73") (ifseqformula "38"))
                           (rule "replaceKnownSelect_taclet21_11" (formula "73") (term "1,1,1"))
                           (rule "replaceKnownSelect_taclet21_12" (formula "73") (term "0,1,1"))
                           (rule "replaceKnownAuxiliaryConstant_taclet0111021_18" (formula "73") (term "1,1,1"))
                           (rule "replaceKnownAuxiliaryConstant_taclet00111021_19" (formula "73") (term "0,1,1"))
                           (rule "replaceKnownSelect_taclet21_8" (formula "73") (term "1,1,0,1"))
                           (rule "replaceKnownSelect_taclet21_9" (formula "73") (term "0,1,0,1"))
                           (rule "replaceKnownAuxiliaryConstant_taclet21_10" (formula "73") (term "1,1,0,1"))
                            (builtin "One Step Simplification" (formula "73") (ifInst ""  (formula "86")) (ifInst ""  (formula "85")) (ifInst ""  (formula "103")))
                           (rule "pullOutSelect" (formula "73") (term "0,0,1") (inst "selectSK=org_bouncycastle_math_ec_ECPoint_value_4"))
                           (rule "simplifySelectOfAnonEQ" (formula "73") (ifseqformula "63"))
                            (builtin "One Step Simplification" (formula "73") (ifInst ""  (formula "101")) (ifInst ""  (formula "50")))
                           (rule "applyEqReverse" (formula "74") (term "0,0,1") (ifseqformula "73"))
                           (rule "hideAuxiliaryEq" (formula "73"))
                           (rule "eqSymm" (formula "73") (term "0,1"))
                           (rule "applyEq" (formula "73") (term "1,0,1") (ifseqformula "6"))
                           (rule "pullOutSelect" (formula "73") (term "0,0,1") (inst "selectSK=org_bouncycastle_math_ec_ECPoint_value_5"))
                           (rule "simplifySelectOfAnonEQ" (formula "73") (ifseqformula "27"))
                            (builtin "One Step Simplification" (formula "73") (ifInst ""  (formula "100")) (ifInst ""  (formula "15")))
                           (rule "applyEqReverse" (formula "74") (term "0,0,1") (ifseqformula "73"))
                            (builtin "One Step Simplification" (formula "74"))
                           (rule "notLeft" (formula "74"))
                           (rule "hideAuxiliaryEq" (formula "73"))
                           (rule "Class_invariant_axiom_for_org_bouncycastle_math_ec_ECPoint" (formula "79") (term "1"))
                            (builtin "One Step Simplification" (formula "79"))
                           (rule "Class_invariant_axiom_for_org_bouncycastle_math_ec_ECPoint" (formula "79"))
                           (rule "closeTrue" (formula "79"))
                        )
                     )
                     (branch " resultAtPost_226_B.<created>@anon_heap_mod«anonHeapFunction» = TRUE FALSE"
                        (rule "applyEqReverse" (formula "107") (term "1") (ifseqformula "8"))
                        (rule "hideAuxiliaryEq" (formula "8"))
                        (rule "eqSymm" (formula "106"))
                        (rule "replace_known_right" (formula "75") (term "0") (ifseqformula "82"))
                         (builtin "One Step Simplification" (formula "75"))
                        (rule "commute_or" (formula "3") (term "0,1,0,0,0"))
                        (rule "commute_or" (formula "2") (term "0,0,0,0"))
                        (rule "onlyCreatedObjectsAreReferenced" (formula "30") (term "2") (ifseqformula "21"))
                        (rule "replace_known_left" (formula "30") (term "1") (ifseqformula "15"))
                         (builtin "One Step Simplification" (formula "30") (ifInst ""  (formula "97")))
                        (rule "true_left" (formula "30"))
                        (rule "onlyCreatedObjectsAreReferenced" (formula "98") (term "0") (ifseqformula "21"))
                        (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "99"))
                         (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "27")))
                        (rule "true_left" (formula "1"))
                        (rule "onlyCreatedObjectsAreReferenced" (formula "13") (term "1,1,0") (ifseqformula "21"))
                        (rule "replace_known_right" (formula "13") (term "0") (ifseqformula "95"))
                         (builtin "One Step Simplification" (formula "13") (ifInst ""  (formula "15")))
                        (rule "true_left" (formula "13"))
                        (rule "onlyCreatedObjectsAreReferenced" (formula "47") (term "1,0") (ifseqformula "54"))
                        (rule "replace_known_right" (formula "47") (term "0") (ifseqformula "96"))
                         (builtin "One Step Simplification" (formula "47") (ifInst ""  (formula "48")))
                        (rule "true_left" (formula "47"))
                        (rule "onlyCreatedObjectsAreReferenced" (formula "46") (term "1,0") (ifseqformula "54"))
                        (rule "replace_known_left" (formula "46") (term "1") (ifseqformula "47"))
                         (builtin "One Step Simplification" (formula "46") (ifInst ""  (formula "94")))
                        (rule "true_left" (formula "46"))
                        (rule "onlyCreatedObjectsAreReferenced" (formula "99") (term "0") (ifseqformula "54"))
                        (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "100"))
                         (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "60")))
                        (rule "true_left" (formula "1"))
                        (rule "onlyCreatedObjectsAreReferenced" (formula "13") (term "1,0") (ifseqformula "21"))
                        (rule "replace_known_left" (formula "13") (term "1") (ifseqformula "14"))
                         (builtin "One Step Simplification" (formula "13") (ifInst ""  (formula "93")))
                        (rule "true_left" (formula "13"))
                        (rule "commute_or" (formula "2") (term "0,1,0,0,0"))
                        (rule "onlyCreatedObjectsAreReferenced" (formula "61") (term "1,0") (ifseqformula "54"))
                        (rule "replace_known_right" (formula "61") (term "0") (ifseqformula "98"))
                         (builtin "One Step Simplification" (formula "61") (ifInst ""  (formula "48")))
                        (rule "true_left" (formula "61"))
                        (rule "commute_or" (formula "1") (term "0,0,0,0"))
                        (rule "commute_or" (formula "1") (term "0,1,0,0,0"))
                        (rule "commute_or_2" (formula "4") (term "0,0,0"))
                        (rule "commute_and" (formula "32") (term "0,1"))
                        (rule "commute_or_2" (formula "3") (term "0,0,0"))
                        (rule "commute_or_2" (formula "6") (term "0,0,0,0,0"))
                         (builtin "One Step Simplification" (formula "6"))
                        (rule "commute_or_2" (formula "2") (term "0,0,0"))
                        (rule "commute_or_2" (formula "1") (term "0,0,0"))
                        (rule "commute_or" (formula "5") (term "1,0,0,0,0,0"))
                        (rule "commute_or_2" (formula "6") (term "0,0,0,0"))
                        (rule "shift_paren_or" (formula "4") (term "0,0,0,0"))
                        (rule "commute_or_2" (formula "3") (term "1,0,0,0,0"))
                        (rule "commute_or_2" (formula "2") (term "1,0,0,0,0"))
                        (rule "shift_paren_or" (formula "1") (term "0,0,0,0"))
                        (rule "shift_paren_or" (formula "3") (term "0,0,0,0"))
                        (rule "shift_paren_or" (formula "2") (term "0,0,0,0"))
                        (rule "cnf_rightDist" (formula "6") (term "0,0,0"))
                        (rule "distr_forallAnd" (formula "6") (term "0,0"))
                        (rule "distr_forallAnd" (formula "6") (term "0"))
                        (rule "distr_forallAnd" (formula "6"))
                        (rule "andLeft" (formula "6"))
                        (rule "commute_or_2" (formula "6") (term "0,0,0"))
                         (builtin "One Step Simplification" (formula "6"))
                        (rule "eqSymm" (formula "6") (term "1,0,0,0,0"))
                        (rule "castedGetAny" (formula "6") (term "1,0,0,1,0,0,0"))
                        (rule "castedGetAny" (formula "6") (term "0,0,0,0,0,0"))
                        (rule "castedGetAny" (formula "6") (term "0,1,0,0,0,0"))
                         (builtin "One Step Simplification" (formula "6"))
                        (rule "true_left" (formula "6"))
                        (rule "shift_paren_or" (formula "6") (term "0,0,0"))
                         (builtin "One Step Simplification" (formula "6"))
                        (rule "eqSymm" (formula "6") (term "1,1,0,0,0"))
                        (rule "castedGetAny" (formula "6") (term "0,0,1,0,0,0"))
                        (rule "castedGetAny" (formula "6") (term "0,0,0,0,0,0"))
                        (rule "castedGetAny" (formula "6") (term "0,1,1,0,0,0"))
                         (builtin "One Step Simplification" (formula "6"))
                        (rule "true_left" (formula "6"))
                        (rule "commute_and" (formula "4") (term "1,0,0,0"))
                        (rule "commute_and" (formula "3") (term "1,0,0,0"))
                        (rule "commute_and" (formula "2") (term "1,0,0,0"))
                        (rule "commute_and" (formula "1") (term "1,0,0,0"))
                        (rule "shift_paren_or" (formula "5") (term "0,0,0,0,0"))
                         (builtin "One Step Simplification" (formula "5"))
                        (rule "commute_or_2" (formula "5") (term "0,0,0,0"))
                        (rule "shift_paren_or" (formula "4") (term "0,0,0,0,0"))
                         (builtin "One Step Simplification" (formula "4"))
                        (rule "commute_or_2" (formula "4") (term "0,0,0,0"))
                        (rule "shift_paren_or" (formula "1") (term "0,0,0,0,0"))
                         (builtin "One Step Simplification" (formula "1"))
                        (rule "commute_or_2" (formula "1") (term "0,0,0,0"))
                        (rule "shift_paren_or" (formula "3") (term "0,0,0,0,0"))
                         (builtin "One Step Simplification" (formula "3"))
                        (rule "shift_paren_or" (formula "2") (term "0,0,0,0,0"))
                         (builtin "One Step Simplification" (formula "2"))
                        (rule "cnf_rightDist" (formula "5") (term "0,0,0"))
                        (rule "distr_forallAnd" (formula "5") (term "0,0"))
                        (rule "distr_forallAnd" (formula "5") (term "0"))
                        (rule "distr_forallAnd" (formula "5"))
                        (rule "andLeft" (formula "5"))
                        (rule "commute_or_2" (formula "5") (term "0,0,0"))
                         (builtin "One Step Simplification" (formula "5"))
                        (rule "eqSymm" (formula "5") (term "1,0,0,0,0"))
                        (rule "castedGetAny" (formula "5") (term "0,0,0,0,0,0"))
                        (rule "castedGetAny" (formula "5") (term "1,0,0,1,0,0,0"))
                        (rule "castedGetAny" (formula "5") (term "0,1,0,0,0,0"))
                         (builtin "One Step Simplification" (formula "5"))
                        (rule "true_left" (formula "5"))
                        (rule "shift_paren_or" (formula "5") (term "0,0,0"))
                         (builtin "One Step Simplification" (formula "5"))
                        (rule "eqSymm" (formula "5") (term "1,1,0,0,0"))
                        (rule "castedGetAny" (formula "5") (term "0,0,0,0,0,0"))
                        (rule "castedGetAny" (formula "5") (term "0,0,1,0,0,0"))
                        (rule "castedGetAny" (formula "5") (term "0,1,1,0,0,0"))
                         (builtin "One Step Simplification" (formula "5"))
                        (rule "true_left" (formula "5"))
                        (rule "cnf_rightDist" (formula "4") (term "0,0,0"))
                        (rule "distr_forallAnd" (formula "4") (term "0,0"))
                        (rule "distr_forallAnd" (formula "4") (term "0"))
                        (rule "distr_forallAnd" (formula "4"))
                        (rule "andLeft" (formula "4"))
                        (rule "cnf_rightDist" (formula "1") (term "0,0,0"))
                        (rule "distr_forallAnd" (formula "1") (term "0,0"))
                        (rule "distr_forallAnd" (formula "1") (term "0"))
                        (rule "distr_forallAnd" (formula "1"))
                        (rule "andLeft" (formula "1"))
                        (rule "shift_paren_or" (formula "5") (term "0,0,0"))
                         (builtin "One Step Simplification" (formula "5"))
                        (rule "eqSymm" (formula "5") (term "1,1,0,0,0"))
                        (rule "castedGetAny" (formula "5") (term "0,0,1,0,0,0"))
                        (rule "castedGetAny" (formula "5") (term "0,0,0,0,0,0"))
                        (rule "castedGetAny" (formula "5") (term "0,1,1,0,0,0"))
                         (builtin "One Step Simplification" (formula "5"))
                        (rule "true_left" (formula "5"))
                        (rule "cnf_rightDist" (formula "3") (term "0,0,0"))
                        (rule "distr_forallAnd" (formula "3") (term "0,0"))
                        (rule "distr_forallAnd" (formula "3") (term "0"))
                        (rule "distr_forallAnd" (formula "3"))
                        (rule "andLeft" (formula "3"))
                        (rule "cnf_rightDist" (formula "2") (term "0,0,0"))
                        (rule "distr_forallAnd" (formula "2") (term "0,0"))
                        (rule "distr_forallAnd" (formula "2") (term "0"))
                        (rule "distr_forallAnd" (formula "2"))
                        (rule "andLeft" (formula "2"))
                        (rule "shift_paren_or" (formula "4") (term "0,0,0"))
                         (builtin "One Step Simplification" (formula "4"))
                        (rule "eqSymm" (formula "4") (term "1,1,0,0,0"))
                        (rule "castedGetAny" (formula "4") (term "0,0,0,0,0,0"))
                        (rule "castedGetAny" (formula "4") (term "0,0,1,0,0,0"))
                        (rule "castedGetAny" (formula "4") (term "0,1,1,0,0,0"))
                         (builtin "One Step Simplification" (formula "4"))
                        (rule "true_left" (formula "4"))
                        (rule "cnf_rightDist" (formula "4") (term "0,0,0"))
                        (rule "distr_forallAnd" (formula "4") (term "0,0"))
                        (rule "distr_forallAnd" (formula "4") (term "0"))
                        (rule "distr_forallAnd" (formula "4"))
                        (rule "andLeft" (formula "4"))
                        (rule "commute_or_2" (formula "4") (term "0,0,0"))
                         (builtin "One Step Simplification" (formula "4"))
                        (rule "eqSymm" (formula "4") (term "1,0,0,0,0"))
                        (rule "castedGetAny" (formula "4") (term "0,0,0,0,0,0"))
                        (rule "castedGetAny" (formula "4") (term "1,0,0,1,0,0,0"))
                        (rule "castedGetAny" (formula "4") (term "0,1,0,0,0,0"))
                         (builtin "One Step Simplification" (formula "4"))
                        (rule "true_left" (formula "4"))
                        (rule "cnf_rightDist" (formula "1") (term "0,0,0"))
                        (rule "distr_forallAnd" (formula "1") (term "0,0"))
                        (rule "distr_forallAnd" (formula "1") (term "0"))
                        (rule "distr_forallAnd" (formula "1"))
                        (rule "andLeft" (formula "1"))
                        (rule "shift_paren_or" (formula "4") (term "0,0,0"))
                         (builtin "One Step Simplification" (formula "4"))
                        (rule "eqSymm" (formula "4") (term "1,1,0,0,0"))
                        (rule "castedGetAny" (formula "4") (term "1,0,0,0,0,0,0"))
                        (rule "castedGetAny" (formula "4") (term "0,0,1,0,0,0"))
                        (rule "castedGetAny" (formula "4") (term "0,1,1,0,0,0"))
                         (builtin "One Step Simplification" (formula "4"))
                        (rule "true_left" (formula "4"))
                        (rule "cnf_rightDist" (formula "3") (term "0,0,0"))
                        (rule "distr_forallAnd" (formula "3") (term "0,0"))
                        (rule "distr_forallAnd" (formula "3") (term "0"))
                        (rule "distr_forallAnd" (formula "3"))
                        (rule "andLeft" (formula "3"))
                        (rule "shift_paren_or" (formula "1") (term "0,0,0"))
                         (builtin "One Step Simplification" (formula "1"))
                        (rule "eqSymm" (formula "1") (term "1,1,0,0,0"))
                        (rule "castedGetAny" (formula "1") (term "1,0,0,0,0,0,0"))
                        (rule "castedGetAny" (formula "1") (term "0,0,1,0,0,0"))
                        (rule "castedGetAny" (formula "1") (term "0,1,1,0,0,0"))
                         (builtin "One Step Simplification" (formula "1"))
                        (rule "true_left" (formula "1"))
                        (rule "cnf_rightDist" (formula "1") (term "0,0,0"))
                        (rule "distr_forallAnd" (formula "1") (term "0,0"))
                        (rule "distr_forallAnd" (formula "1") (term "0"))
                        (rule "distr_forallAnd" (formula "1"))
                        (rule "andLeft" (formula "1"))
                        (rule "commute_or_2" (formula "1") (term "0,0,0"))
                         (builtin "One Step Simplification" (formula "1"))
                        (rule "eqSymm" (formula "1") (term "1,0,0,0,0"))
                        (rule "castedGetAny" (formula "1") (term "1,0,0,1,0,0,0"))
                        (rule "castedGetAny" (formula "1") (term "0,0,0,0,0,0"))
                        (rule "castedGetAny" (formula "1") (term "0,1,0,0,0,0"))
                         (builtin "One Step Simplification" (formula "1"))
                        (rule "true_left" (formula "1"))
                        (rule "ifthenelse_split_for" (formula "28") (term "1,1"))
                        (branch "result_228_A_1.value@heapAtPre_A«anonHeapFunction» ≥ 0 TRUE"
                           (rule "cnf_rightDist" (formula "29"))
                           (rule "andLeft" (formula "29"))
                           (rule "commute_or" (formula "30"))
                           (rule "cnf_rightDist" (formula "29"))
                           (rule "andLeft" (formula "29"))
                           (rule "commute_or" (formula "30"))
                           (rule "shift_paren_or" (formula "1") (term "0,0,0"))
                            (builtin "One Step Simplification" (formula "1"))
                           (rule "eqSymm" (formula "1") (term "1,1,0,0,0"))
                           (rule "castedGetAny" (formula "1") (term "1,0,0,0,0,0,0"))
                           (rule "castedGetAny" (formula "1") (term "0,0,1,0,0,0"))
                           (rule "castedGetAny" (formula "1") (term "0,1,1,0,0,0"))
                            (builtin "One Step Simplification" (formula "1"))
                           (rule "true_left" (formula "1"))
                           (rule "cnf_rightDist" (formula "1") (term "0,0,0"))
                           (rule "distr_forallAnd" (formula "1") (term "0,0"))
                           (rule "distr_forallAnd" (formula "1") (term "0"))
                           (rule "distr_forallAnd" (formula "1"))
                           (rule "andLeft" (formula "1"))
                           (rule "commute_or_2" (formula "1") (term "0,0,0"))
                            (builtin "One Step Simplification" (formula "1"))
                           (rule "eqSymm" (formula "1") (term "1,0,0,0,0"))
                           (rule "castedGetAny" (formula "1") (term "0,0,0,0,0,0"))
                           (rule "castedGetAny" (formula "1") (term "1,0,0,1,0,0,0"))
                           (rule "castedGetAny" (formula "1") (term "0,1,0,0,0,0"))
                            (builtin "One Step Simplification" (formula "1"))
                           (rule "true_left" (formula "1"))
                           (rule "shift_paren_or" (formula "1") (term "0,0,0"))
                            (builtin "One Step Simplification" (formula "1"))
                           (rule "eqSymm" (formula "1") (term "1,1,0,0,0"))
                           (rule "castedGetAny" (formula "1") (term "0,0,1,0,0,0"))
                           (rule "castedGetAny" (formula "1") (term "1,0,0,0,0,0,0"))
                           (rule "castedGetAny" (formula "1") (term "0,1,1,0,0,0"))
                            (builtin "One Step Simplification" (formula "1"))
                           (rule "true_left" (formula "1"))
                           (rule "cut_direct" (formula "27") (term "0"))
                           (branch "CUT: result_228_A_1.value@heapAtPre_A«anonHeapFunction» = 0 TRUE"
                               (builtin "One Step Simplification" (formula "28"))
                              (rule "true_left" (formula "28"))
                              (rule "replace_known_left" (formula "28") (term "0") (ifseqformula "27"))
                               (builtin "One Step Simplification" (formula "28"))
                              (rule "true_left" (formula "28"))
                              (rule "replace_known_left" (formula "28") (term "0") (ifseqformula "27"))
                               (builtin "One Step Simplification" (formula "28"))
                              (rule "true_left" (formula "28"))
                              (rule "applyEq" (formula "26") (term "0") (ifseqformula "27"))
                              (rule "qeq_literals" (formula "26"))
                              (rule "true_left" (formula "26"))
                              (rule "applyEq" (formula "28") (term "1,0,0") (ifseqformula "26"))
                              (rule "polySimp_mulComm0" (formula "28") (term "0"))
                              (rule "applyEq" (formula "27") (term "1,0") (ifseqformula "26"))
                              (rule "eqSymm" (formula "27"))
                              (rule "polySimp_homoEq" (formula "27"))
                              (rule "polySimp_mulLiterals" (formula "27") (term "1,0"))
                              (rule "polySimp_elimOne" (formula "27") (term "1,0"))
                              (rule "applyEq" (formula "55") (term "1") (ifseqformula "26"))
                              (rule "applyEq" (formula "6") (term "1") (ifseqformula "26"))
                              (rule "applyEq" (formula "22") (term "1") (ifseqformula "26"))
                              (rule "applyEq" (formula "28") (term "0,0") (ifseqformula "26"))
                              (rule "times_zero_2" (formula "28") (term "0"))
                              (rule "polySimp_homoEq" (formula "28"))
                              (rule "mul_literals" (formula "28") (term "1,0"))
                              (rule "add_zero_right" (formula "28") (term "0"))
                              (rule "applyEq" (formula "27") (term "1,1,0") (ifseqformula "26"))
                              (rule "polySimp_addComm0" (formula "27") (term "0"))
                              (rule "polySimp_sepNegMonomial" (formula "28"))
                              (rule "polySimp_mulLiterals" (formula "28") (term "0"))
                              (rule "polySimp_elimOne" (formula "28") (term "0"))
                              (rule "applyEq" (formula "3") (term "0") (ifseqformula "28"))
                              (rule "applyEq" (formula "27") (term "0,1,0") (ifseqformula "28"))
                              (rule "polySimp_addComm0" (formula "27") (term "0"))
                              (rule "applyEq" (formula "27") (term "0,0,1,0") (ifseqformula "28"))
                              (rule "polySimp_addComm0" (formula "27") (term "0"))
                              (rule "applyEq" (formula "5") (term "1") (ifseqformula "28"))
                              (rule "polySimp_sepPosMonomial" (formula "27"))
                              (rule "jdiv_axiom" (formula "27") (term "0"))
                              (rule "eqSymm" (formula "27"))
                              (rule "applyEq" (formula "27") (term "1") (ifseqformula "28"))
                               (builtin "One Step Simplification" (formula "27"))
                              (rule "eqSymm" (formula "27") (term "1"))
                              (rule "polySimp_homoEq" (formula "27") (term "1"))
                              (rule "polySimp_mulLiterals" (formula "27") (term "1,0,1"))
                              (rule "polySimp_elimOne" (formula "27") (term "1,0,1"))
                              (rule "polySimp_sepPosMonomial" (formula "27") (term "1"))
                              (rule "inEqSimp_contradInEq0" (formula "27") (term "0,0") (ifseqformula "3"))
                              (rule "qeq_literals" (formula "27") (term "0,0,0"))
                               (builtin "One Step Simplification" (formula "27"))
                              (rule "true_left" (formula "27"))
                              (rule "div_axiom" (formula "27") (term "0,1") (inst "quotient=quotient_1"))
                               (builtin "One Step Simplification" (formula "27"))
                              (rule "true_left" (formula "27"))
                              (rule "Use_information_flow_contract_for_compareTo_325434207" (formula "18") (ifseqformula "18"))
                               (builtin "One Step Simplification" (formula "18") (ifInst ""  (formula "93")) (ifInst ""  (formula "93")))
                              (rule "true_left" (formula "18"))
                              (rule "Use_information_flow_contract_for_getOrder_757678341" (formula "57") (ifseqformula "24"))
                              (rule "applyEq" (formula "57") (term "0,0,1") (ifseqformula "55"))
                              (rule "eqSymm" (formula "57") (term "0,1"))
                              (rule "replace_known_left" (formula "57") (term "0,1") (ifseqformula "22"))
                               (builtin "One Step Simplification" (formula "57"))
                              (rule "applyEq" (formula "57") (term "0,1") (ifseqformula "6"))
                              (rule "eqSymm" (formula "57") (term "1"))
                              (rule "replace_known_left" (formula "57") (term "1") (ifseqformula "26"))
                               (builtin "One Step Simplification" (formula "57"))
                              (rule "true_left" (formula "57"))
                              (rule "Use_information_flow_contract_for_getOrder_757678341" (formula "57") (ifseqformula "57"))
                               (builtin "One Step Simplification" (formula "57"))
                              (rule "true_left" (formula "57"))
                              (rule "Use_information_flow_contract_for_compareTo_325434207" (formula "51") (ifseqformula "18"))
                              (rule "replace_known_right" (formula "51") (term "0,1,0,0") (ifseqformula "94"))
                               (builtin "One Step Simplification" (formula "51") (ifInst ""  (formula "93")))
                              (rule "applyEqRigid" (formula "51") (term "0,1,0,1") (ifseqformula "53"))
                              (rule "eqSymm" (formula "51") (term "1,0,1"))
                              (rule "replace_known_left" (formula "51") (term "1,0,1") (ifseqformula "19"))
                               (builtin "One Step Simplification" (formula "51"))
                              (rule "applyEq" (formula "51") (term "0,0,1") (ifseqformula "5"))
                              (rule "eqSymm" (formula "51") (term "0,1"))
                              (rule "replace_known_left" (formula "51") (term "0,1") (ifseqformula "28"))
                               (builtin "One Step Simplification" (formula "51"))
                              (rule "Class_invariant_axiom_for_java_math_BigInteger" (formula "51") (term "1,0"))
                              (rule "replace_known_left" (formula "51") (term "1,1,0") (ifseqformula "19"))
                               (builtin "One Step Simplification" (formula "51") (ifInst ""  (formula "93")))
                              (rule "Class_invariant_axiom_for_java_math_BigInteger" (formula "51") (term "0"))
                              (rule "replace_known_left" (formula "51") (term "1,0") (ifseqformula "53"))
                               (builtin "One Step Simplification" (formula "51") (ifInst ""  (formula "94")))
                              (rule "applyEq" (formula "43") (term "0") (ifseqformula "51"))
                              (rule "applyEq" (formula "51") (term "4") (ifseqformula "50"))
                              (rule "applyEq" (formula "49") (term "0") (ifseqformula "50"))
                              (rule "Use_information_flow_contract_for_getOrder_757678341" (formula "24") (ifseqformula "24"))
                               (builtin "One Step Simplification" (formula "24"))
                              (rule "true_left" (formula "24"))
                              (rule "Use_information_flow_contract_for_getOrder_757678341" (formula "24") (ifseqformula "56"))
                              (rule "eqSymm" (formula "24") (term "0,1"))
                              (rule "eqSymm" (formula "24") (term "1,1"))
                              (rule "applyEq" (formula "24") (term "0,1,1") (ifseqformula "6"))
                              (rule "eqSymm" (formula "24") (term "1,1"))
                              (rule "replace_known_left" (formula "24") (term "1,1") (ifseqformula "27"))
                               (builtin "One Step Simplification" (formula "24"))
                              (rule "true_left" (formula "24"))
                              (rule "Use_information_flow_contract_for_multiply_1272441881_0" (formula "69") (ifseqformula "34"))
                              (rule "replaceKnownSelect_taclet21_12" (formula "69") (term "0,1,1"))
                              (rule "replaceKnownSelect_taclet21_11" (formula "69") (term "1,1,1"))
                              (rule "replaceKnownAuxiliaryConstant_taclet10111021_19" (formula "69") (term "0,1,1"))
                              (rule "replaceKnownAuxiliaryConstant_taclet0111021_18" (formula "69") (term "1,1,1"))
                              (rule "replaceKnownSelect_taclet21_8" (formula "69") (term "1,1,0,1"))
                              (rule "replaceKnownSelect_taclet21_9" (formula "69") (term "0,1,0,1"))
                              (rule "replaceKnownAuxiliaryConstant_taclet21_10" (formula "69") (term "1,1,0,1"))
                               (builtin "One Step Simplification" (formula "69") (ifInst ""  (formula "83")) (ifInst ""  (formula "82")) (ifInst ""  (formula "100")))
                              (rule "pullOutSelect" (formula "69") (term "0,0,1") (inst "selectSK=org_bouncycastle_math_ec_ECPoint_value_4"))
                              (rule "simplifySelectOfAnonEQ" (formula "69") (ifseqformula "58"))
                               (builtin "One Step Simplification" (formula "69") (ifInst ""  (formula "98")) (ifInst ""  (formula "45")))
                              (rule "applyEqReverse" (formula "70") (term "0,0,1") (ifseqformula "69"))
                              (rule "hideAuxiliaryEq" (formula "69"))
                              (rule "eqSymm" (formula "69") (term "0,1"))
                              (rule "applyEq" (formula "69") (term "1,0,1") (ifseqformula "4"))
                              (rule "pullOutSelect" (formula "69") (term "0,0,1") (inst "selectSK=org_bouncycastle_math_ec_ECPoint_value_5"))
                              (rule "simplifySelectOfAnonEQ" (formula "69") (ifseqformula "25"))
                               (builtin "One Step Simplification" (formula "69") (ifInst ""  (formula "97")) (ifInst ""  (formula "13")))
                              (rule "applyEqReverse" (formula "70") (term "0,0,1") (ifseqformula "69"))
                               (builtin "One Step Simplification" (formula "70"))
                              (rule "notLeft" (formula "70"))
                              (rule "hideAuxiliaryEq" (formula "69"))
                              (rule "Class_invariant_axiom_for_org_bouncycastle_math_ec_ECPoint" (formula "75") (term "0"))
                               (builtin "One Step Simplification" (formula "75"))
                              (rule "Class_invariant_axiom_for_org_bouncycastle_math_ec_ECPoint" (formula "75"))
                              (rule "closeTrue" (formula "75"))
                           )
                           (branch "CUT: result_228_A_1.value@heapAtPre_A«anonHeapFunction» = 0 FALSE"
                               (builtin "One Step Simplification" (formula "27"))
                              (rule "replace_known_right" (formula "29") (term "0") (ifseqformula "79"))
                               (builtin "One Step Simplification" (formula "29"))
                              (rule "replace_known_right" (formula "28") (term "0") (ifseqformula "79"))
                               (builtin "One Step Simplification" (formula "28"))
                              (rule "applyEq" (formula "31") (term "0,0") (ifseqformula "28"))
                              (rule "polySimp_mulComm0" (formula "31") (term "0"))
                              (rule "applyEq" (formula "29") (term "0") (ifseqformula "31"))
                              (rule "inEqSimp_homoInEq1" (formula "29"))
                              (rule "polySimp_mulComm0" (formula "29") (term "1,0"))
                              (rule "polySimp_rightDist" (formula "29") (term "1,0"))
                              (rule "polySimp_mulLiterals" (formula "29") (term "1,1,0"))
                              (rule "polySimp_elimOne" (formula "29") (term "1,1,0"))
                              (rule "polySimp_mulComm0" (formula "29") (term "0,1,0"))
                              (rule "polySimp_addComm1" (formula "29") (term "0"))
                              (rule "polySimp_addAssoc" (formula "29") (term "0,0"))
                              (rule "polySimp_addComm1" (formula "29") (term "0,0,0"))
                              (rule "polySimp_pullOutFactor2b" (formula "29") (term "0,0"))
                              (rule "add_literals" (formula "29") (term "1,1,0,0"))
                              (rule "times_zero_1" (formula "29") (term "1,0,0"))
                              (rule "add_zero_right" (formula "29") (term "0,0"))
                              (rule "applyEq" (formula "27") (term "0") (ifseqformula "31"))
                              (rule "inEqSimp_homoInEq0" (formula "27"))
                              (rule "polySimp_mulComm0" (formula "27") (term "1,0"))
                              (rule "polySimp_rightDist" (formula "27") (term "1,0"))
                              (rule "polySimp_mulLiterals" (formula "27") (term "1,1,0"))
                              (rule "polySimp_elimOne" (formula "27") (term "1,1,0"))
                              (rule "polySimp_mulComm0" (formula "27") (term "0,1,0"))
                              (rule "polySimp_addAssoc" (formula "27") (term "0"))
                              (rule "polySimp_addComm0" (formula "27") (term "0,0"))
                              (rule "polySimp_pullOutFactor2b" (formula "27") (term "0"))
                              (rule "add_literals" (formula "27") (term "1,1,0"))
                              (rule "times_zero_1" (formula "27") (term "1,0"))
                              (rule "add_zero_right" (formula "27") (term "0"))
                              (rule "applyEq" (formula "30") (term "0,1") (ifseqformula "28"))
                              (rule "inEqSimp_sepNegMonomial0" (formula "29"))
                              (rule "polySimp_mulLiterals" (formula "29") (term "0"))
                              (rule "polySimp_elimOne" (formula "29") (term "0"))
                              (rule "inEqSimp_invertInEq1" (formula "27"))
                              (rule "polySimp_mulLiterals" (formula "27") (term "0"))
                              (rule "mul_literals" (formula "27") (term "1"))
                              (rule "polySimp_elimOne" (formula "27") (term "0"))
                              (rule "inEqSimp_strengthen1" (formula "26") (ifseqformula "79"))
                              (rule "add_zero_right" (formula "26") (term "1"))
                              (rule "inEqSimp_contradEq7" (formula "79") (ifseqformula "26"))
                              (rule "times_zero_1" (formula "79") (term "1,0,0"))
                              (rule "add_literals" (formula "79") (term "0,0"))
                              (rule "leq_literals" (formula "79") (term "0"))
                               (builtin "One Step Simplification" (formula "79"))
                              (rule "false_right" (formula "79"))
                              (rule "Use_information_flow_contract_for_compareTo_325434207" (formula "18") (ifseqformula "18"))
                               (builtin "One Step Simplification" (formula "18") (ifInst ""  (formula "96")) (ifInst ""  (formula "96")))
                              (rule "true_left" (formula "18"))
                              (rule "Use_information_flow_contract_for_getOrder_757678341" (formula "60") (ifseqformula "24"))
                              (rule "replace_known_left" (formula "60") (term "1,1") (ifseqformula "6"))
                               (builtin "One Step Simplification" (formula "60"))
                              (rule "true_left" (formula "60"))
                              (rule "Use_information_flow_contract_for_multiply_1272441881_0" (formula "73") (ifseqformula "37"))
                              (rule "replaceKnownSelect_taclet21_12" (formula "73") (term "0,1,1"))
                              (rule "replaceKnownSelect_taclet21_11" (formula "73") (term "1,1,1"))
                              (rule "replaceKnownAuxiliaryConstant_taclet10111021_19" (formula "73") (term "0,1,1"))
                              (rule "replaceKnownAuxiliaryConstant_taclet0111021_18" (formula "73") (term "1,1,1"))
                              (rule "replaceKnownSelect_taclet21_8" (formula "73") (term "1,1,0,1"))
                              (rule "replaceKnownSelect_taclet21_9" (formula "73") (term "0,1,0,1"))
                              (rule "replaceKnownAuxiliaryConstant_taclet21_10" (formula "73") (term "1,1,0,1"))
                               (builtin "One Step Simplification" (formula "73") (ifInst ""  (formula "87")) (ifInst ""  (formula "86")) (ifInst ""  (formula "104")))
                              (rule "pullOutSelect" (formula "73") (term "1,0,1") (inst "selectSK=org_bouncycastle_math_ec_ECPoint_value_4"))
                              (rule "simplifySelectOfAnonEQ" (formula "73") (ifseqformula "25"))
                               (builtin "One Step Simplification" (formula "73") (ifInst ""  (formula "101")) (ifInst ""  (formula "13")))
                              (rule "applyEqReverse" (formula "74") (term "1,0,1") (ifseqformula "73"))
                              (rule "hideAuxiliaryEq" (formula "73"))
                              (rule "pullOutSelect" (formula "73") (term "0,0,1") (inst "selectSK=org_bouncycastle_math_ec_ECPoint_value_5"))
                              (rule "simplifySelectOfAnonEQ" (formula "73") (ifseqformula "62"))
                               (builtin "One Step Simplification" (formula "73") (ifInst ""  (formula "102")) (ifInst ""  (formula "49")))
                              (rule "applyEqReverse" (formula "74") (term "0,0,1") (ifseqformula "73"))
                              (rule "hideAuxiliaryEq" (formula "73"))
                              (rule "replace_known_left" (formula "73") (term "0,1") (ifseqformula "4"))
                               (builtin "One Step Simplification" (formula "73"))
                              (rule "notLeft" (formula "73"))
                              (rule "Class_invariant_axiom_for_org_bouncycastle_math_ec_ECPoint" (formula "79") (term "0"))
                               (builtin "One Step Simplification" (formula "79"))
                              (rule "Class_invariant_axiom_for_org_bouncycastle_math_ec_ECPoint" (formula "79"))
                              (rule "closeTrue" (formula "79"))
                           )
                        )
                        (branch "result_228_A_1.value@heapAtPre_A«anonHeapFunction» ≥ 0 FALSE"
                           (rule "inEqSimp_geqRight" (formula "78"))
                           (rule "mul_literals" (formula "1") (term "1,0,0"))
                           (rule "add_zero_right" (formula "1") (term "0,0"))
                           (rule "inEqSimp_sepPosMonomial0" (formula "1"))
                           (rule "mul_literals" (formula "1") (term "1"))
                           (rule "inEqSimp_contradEq3" (formula "29") (term "0") (ifseqformula "1"))
                           (rule "mul_literals" (formula "29") (term "1,0,0,0"))
                           (rule "add_literals" (formula "29") (term "0,0,0"))
                           (rule "qeq_literals" (formula "29") (term "0,0"))
                            (builtin "One Step Simplification" (formula "29"))
                           (rule "andLeft" (formula "29"))
                           (rule "andLeft" (formula "29"))
                           (rule "applyEq" (formula "33") (term "0,0") (ifseqformula "30"))
                           (rule "polySimp_mulComm0" (formula "33") (term "0"))
                           (rule "applyEq" (formula "31") (term "0") (ifseqformula "33"))
                           (rule "inEqSimp_homoInEq1" (formula "31"))
                           (rule "polySimp_mulComm0" (formula "31") (term "1,0"))
                           (rule "polySimp_rightDist" (formula "31") (term "1,0"))
                           (rule "polySimp_mulLiterals" (formula "31") (term "1,1,0"))
                           (rule "polySimp_elimOne" (formula "31") (term "1,1,0"))
                           (rule "polySimp_mulComm0" (formula "31") (term "0,1,0"))
                           (rule "polySimp_addComm1" (formula "31") (term "0"))
                           (rule "polySimp_addAssoc" (formula "31") (term "0,0"))
                           (rule "polySimp_addComm1" (formula "31") (term "0,0,0"))
                           (rule "polySimp_pullOutFactor2b" (formula "31") (term "0,0"))
                           (rule "add_literals" (formula "31") (term "1,1,0,0"))
                           (rule "times_zero_1" (formula "31") (term "1,0,0"))
                           (rule "add_zero_right" (formula "31") (term "0,0"))
                           (rule "applyEq" (formula "29") (term "0") (ifseqformula "33"))
                           (rule "inEqSimp_homoInEq0" (formula "29"))
                           (rule "polySimp_mulComm0" (formula "29") (term "1,0"))
                           (rule "polySimp_rightDist" (formula "29") (term "1,0"))
                           (rule "polySimp_mulLiterals" (formula "29") (term "1,1,0"))
                           (rule "polySimp_elimOne" (formula "29") (term "1,1,0"))
                           (rule "polySimp_mulComm0" (formula "29") (term "0,1,0"))
                           (rule "polySimp_addAssoc" (formula "29") (term "0"))
                           (rule "polySimp_addComm0" (formula "29") (term "0,0"))
                           (rule "polySimp_pullOutFactor2b" (formula "29") (term "0"))
                           (rule "add_literals" (formula "29") (term "1,1,0"))
                           (rule "times_zero_1" (formula "29") (term "1,0"))
                           (rule "add_zero_right" (formula "29") (term "0"))
                           (rule "applyEq" (formula "32") (term "0,1") (ifseqformula "30"))
                           (rule "inEqSimp_sepPosMonomial0" (formula "31"))
                           (rule "polySimp_mulComm0" (formula "31") (term "1"))
                           (rule "polySimp_rightDist" (formula "31") (term "1"))
                           (rule "polySimp_mulLiterals" (formula "31") (term "1,1"))
                           (rule "mul_literals" (formula "31") (term "0,1"))
                           (rule "polySimp_elimOne" (formula "31") (term "1,1"))
                           (rule "inEqSimp_invertInEq1" (formula "29"))
                           (rule "mul_literals" (formula "29") (term "1"))
                           (rule "polySimp_mulLiterals" (formula "29") (term "0"))
                           (rule "polySimp_elimOne" (formula "29") (term "0"))
                           (rule "shift_paren_or" (formula "2") (term "0,0,0"))
                            (builtin "One Step Simplification" (formula "2"))
                           (rule "eqSymm" (formula "2") (term "1,1,0,0,0"))
                           (rule "castedGetAny" (formula "2") (term "1,0,0,0,0,0,0"))
                           (rule "castedGetAny" (formula "2") (term "0,0,1,0,0,0"))
                           (rule "castedGetAny" (formula "2") (term "0,1,1,0,0,0"))
                            (builtin "One Step Simplification" (formula "2"))
                           (rule "true_left" (formula "2"))
                           (rule "cnf_rightDist" (formula "2") (term "0,0,0"))
                           (rule "distr_forallAnd" (formula "2") (term "0,0"))
                           (rule "distr_forallAnd" (formula "2") (term "0"))
                           (rule "distr_forallAnd" (formula "2"))
                           (rule "andLeft" (formula "2"))
                           (rule "commute_or_2" (formula "2") (term "0,0,0"))
                            (builtin "One Step Simplification" (formula "2"))
                           (rule "eqSymm" (formula "2") (term "1,0,0,0,0"))
                           (rule "castedGetAny" (formula "2") (term "0,0,0,0,0,0"))
                           (rule "castedGetAny" (formula "2") (term "1,0,0,1,0,0,0"))
                           (rule "castedGetAny" (formula "2") (term "0,1,0,0,0,0"))
                            (builtin "One Step Simplification" (formula "2"))
                           (rule "true_left" (formula "2"))
                           (rule "shift_paren_or" (formula "2") (term "0,0,0"))
                            (builtin "One Step Simplification" (formula "2"))
                           (rule "eqSymm" (formula "2") (term "1,1,0,0,0"))
                           (rule "castedGetAny" (formula "2") (term "0,0,1,0,0,0"))
                           (rule "castedGetAny" (formula "2") (term "1,0,0,0,0,0,0"))
                           (rule "castedGetAny" (formula "2") (term "0,1,1,0,0,0"))
                            (builtin "One Step Simplification" (formula "2"))
                           (rule "true_left" (formula "2"))
                           (rule "Use_information_flow_contract_for_compareTo_325434207" (formula "19") (ifseqformula "19"))
                            (builtin "One Step Simplification" (formula "19") (ifInst ""  (formula "96")) (ifInst ""  (formula "96")))
                           (rule "true_left" (formula "19"))
                           (rule "Use_information_flow_contract_for_getOrder_757678341" (formula "60") (ifseqformula "25"))
                           (rule "replace_known_left" (formula "60") (term "1,1") (ifseqformula "7"))
                            (builtin "One Step Simplification" (formula "60"))
                           (rule "true_left" (formula "60"))
                           (rule "Use_information_flow_contract_for_multiply_1272441881" (formula "73") (ifseqformula "37"))
                           (rule "replaceKnownSelect_taclet21_11" (formula "73") (term "1,1,1"))
                           (rule "replaceKnownSelect_taclet21_12" (formula "73") (term "0,1,1"))
                           (rule "replaceKnownAuxiliaryConstant_taclet0111021_18" (formula "73") (term "1,1,1"))
                           (rule "replaceKnownAuxiliaryConstant_taclet10111021_19" (formula "73") (term "0,1,1"))
                           (rule "replaceKnownSelect_taclet21_8" (formula "73") (term "1,1,0,1"))
                           (rule "replaceKnownSelect_taclet21_9" (formula "73") (term "0,1,0,1"))
                           (rule "replaceKnownAuxiliaryConstant_taclet21_10" (formula "73") (term "1,1,0,1"))
                            (builtin "One Step Simplification" (formula "73") (ifInst ""  (formula "87")) (ifInst ""  (formula "86")) (ifInst ""  (formula "104")))
                           (rule "pullOutSelect" (formula "73") (term "1,0,1") (inst "selectSK=org_bouncycastle_math_ec_ECPoint_value_4"))
                           (rule "simplifySelectOfAnonEQ" (formula "73") (ifseqformula "26"))
                            (builtin "One Step Simplification" (formula "73") (ifInst ""  (formula "101")) (ifInst ""  (formula "14")))
                           (rule "applyEqReverse" (formula "74") (term "1,0,1") (ifseqformula "73"))
                           (rule "hideAuxiliaryEq" (formula "73"))
                           (rule "pullOutSelect" (formula "73") (term "0,0,1") (inst "selectSK=org_bouncycastle_math_ec_ECPoint_value_5"))
                           (rule "simplifySelectOfAnonEQ" (formula "73") (ifseqformula "62"))
                            (builtin "One Step Simplification" (formula "73") (ifInst ""  (formula "102")) (ifInst ""  (formula "49")))
                           (rule "applyEqReverse" (formula "74") (term "0,0,1") (ifseqformula "73"))
                           (rule "hideAuxiliaryEq" (formula "73"))
                           (rule "replace_known_left" (formula "73") (term "0,1") (ifseqformula "5"))
                            (builtin "One Step Simplification" (formula "73"))
                           (rule "notLeft" (formula "73"))
                           (rule "Class_invariant_axiom_for_org_bouncycastle_math_ec_ECPoint" (formula "79") (term "0"))
                            (builtin "One Step Simplification" (formula "79"))
                           (rule "Class_invariant_axiom_for_org_bouncycastle_math_ec_ECPoint" (formula "79"))
                           (rule "closeTrue" (formula "79"))
                        )
                     )
                  )
                  (branch " resultAtPost_226_A.<created>@anon_heap_mod«anonHeapFunction» = TRUE FALSE"
                     (rule "applyEqReverse" (formula "108") (term "1") (ifseqformula "9"))
                     (rule "hideAuxiliaryEq" (formula "9"))
                     (rule "eqSymm" (formula "107"))
                     (rule "replace_known_right" (formula "40") (term "0") (ifseqformula "83"))
                      (builtin "One Step Simplification" (formula "40"))
                     (rule "ifthenelse_split" (formula "8") (term "0"))
                     (branch " resultAtPost_226_B.<created>@anon_heap_mod«anonHeapFunction» = TRUE TRUE"
                        (rule "applyEqReverse" (formula "108") (term "1") (ifseqformula "9"))
                        (rule "hideAuxiliaryEq" (formula "9"))
                        (rule "replace_known_left" (formula "76") (term "0") (ifseqformula "8"))
                         (builtin "One Step Simplification" (formula "76"))
                        (rule "true_left" (formula "76"))
                        (rule "commute_or" (formula "3") (term "0,1,0,0,0"))
                        (rule "commute_or" (formula "2") (term "0,0,0,0"))
                        (rule "onlyCreatedObjectsAreReferenced" (formula "30") (term "2") (ifseqformula "21"))
                        (rule "replace_known_left" (formula "30") (term "1") (ifseqformula "15"))
                         (builtin "One Step Simplification" (formula "30") (ifInst ""  (formula "97")))
                        (rule "true_left" (formula "30"))
                        (rule "onlyCreatedObjectsAreReferenced" (formula "98") (term "0") (ifseqformula "21"))
                        (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "99"))
                         (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "27")))
                        (rule "true_left" (formula "1"))
                        (rule "onlyCreatedObjectsAreReferenced" (formula "13") (term "1,1,0") (ifseqformula "21"))
                        (rule "replace_known_right" (formula "13") (term "0") (ifseqformula "95"))
                         (builtin "One Step Simplification" (formula "13") (ifInst ""  (formula "15")))
                        (rule "true_left" (formula "13"))
                        (rule "onlyCreatedObjectsAreReferenced" (formula "48") (term "1,0") (ifseqformula "55"))
                        (rule "replace_known_right" (formula "48") (term "0") (ifseqformula "96"))
                         (builtin "One Step Simplification" (formula "48") (ifInst ""  (formula "49")))
                        (rule "true_left" (formula "48"))
                        (rule "onlyCreatedObjectsAreReferenced" (formula "47") (term "1,0") (ifseqformula "55"))
                        (rule "replace_known_left" (formula "47") (term "1") (ifseqformula "48"))
                         (builtin "One Step Simplification" (formula "47") (ifInst ""  (formula "94")))
                        (rule "true_left" (formula "47"))
                        (rule "onlyCreatedObjectsAreReferenced" (formula "99") (term "0") (ifseqformula "55"))
                        (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "100"))
                         (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "61")))
                        (rule "true_left" (formula "1"))
                        (rule "onlyCreatedObjectsAreReferenced" (formula "13") (term "1,0") (ifseqformula "21"))
                        (rule "replace_known_left" (formula "13") (term "1") (ifseqformula "14"))
                         (builtin "One Step Simplification" (formula "13") (ifInst ""  (formula "93")))
                        (rule "true_left" (formula "13"))
                        (rule "commute_or" (formula "2") (term "0,1,0,0,0"))
                        (rule "onlyCreatedObjectsAreReferenced" (formula "64") (term "2") (ifseqformula "55"))
                        (rule "replace_known_right" (formula "64") (term "0") (ifseqformula "98"))
                         (builtin "One Step Simplification" (formula "64") (ifInst ""  (formula "49")))
                        (rule "true_left" (formula "64"))
                        (rule "commute_or" (formula "1") (term "0,0,0,0"))
                        (rule "commute_or" (formula "1") (term "0,1,0,0,0"))
                        (rule "commute_or_2" (formula "4") (term "0,0,0"))
                        (rule "commute_and" (formula "32") (term "0,1"))
                        (rule "commute_or_2" (formula "3") (term "0,0,0"))
                        (rule "commute_or_2" (formula "6") (term "0,0,0,0,0"))
                         (builtin "One Step Simplification" (formula "6"))
                        (rule "commute_or_2" (formula "2") (term "0,0,0"))
                        (rule "commute_or_2" (formula "1") (term "0,0,0"))
                        (rule "commute_or" (formula "5") (term "1,0,0,0,0,0"))
                        (rule "commute_or_2" (formula "6") (term "0,0,0,0"))
                        (rule "shift_paren_or" (formula "4") (term "0,0,0,0"))
                        (rule "shift_paren_or" (formula "3") (term "0,0,0,0"))
                        (rule "commute_or_2" (formula "2") (term "1,0,0,0,0"))
                        (rule "commute_or_2" (formula "1") (term "1,0,0,0,0"))
                        (rule "shift_paren_or" (formula "2") (term "0,0,0,0"))
                        (rule "shift_paren_or" (formula "1") (term "0,0,0,0"))
                        (rule "cnf_rightDist" (formula "6") (term "0,0,0"))
                        (rule "distr_forallAnd" (formula "6") (term "0,0"))
                        (rule "distr_forallAnd" (formula "6") (term "0"))
                        (rule "distr_forallAnd" (formula "6"))
                        (rule "andLeft" (formula "6"))
                        (rule "commute_or_2" (formula "6") (term "0,0,0"))
                         (builtin "One Step Simplification" (formula "6"))
                        (rule "eqSymm" (formula "6") (term "1,0,0,0,0"))
                        (rule "castedGetAny" (formula "6") (term "1,0,0,1,0,0,0"))
                        (rule "castedGetAny" (formula "6") (term "0,0,0,0,0,0"))
                        (rule "castedGetAny" (formula "6") (term "0,1,0,0,0,0"))
                         (builtin "One Step Simplification" (formula "6"))
                        (rule "true_left" (formula "6"))
                        (rule "shift_paren_or" (formula "6") (term "0,0,0"))
                         (builtin "One Step Simplification" (formula "6"))
                        (rule "eqSymm" (formula "6") (term "1,1,0,0,0"))
                        (rule "castedGetAny" (formula "6") (term "0,0,1,0,0,0"))
                        (rule "castedGetAny" (formula "6") (term "0,0,0,0,0,0"))
                        (rule "castedGetAny" (formula "6") (term "0,1,1,0,0,0"))
                         (builtin "One Step Simplification" (formula "6"))
                        (rule "true_left" (formula "6"))
                        (rule "commute_and" (formula "4") (term "1,0,0,0"))
                        (rule "commute_and" (formula "3") (term "1,0,0,0"))
                        (rule "commute_and" (formula "2") (term "1,0,0,0"))
                        (rule "commute_and" (formula "1") (term "1,0,0,0"))
                        (rule "shift_paren_or" (formula "5") (term "0,0,0,0,0"))
                         (builtin "One Step Simplification" (formula "5"))
                        (rule "commute_or_2" (formula "5") (term "0,0,0,0"))
                        (rule "shift_paren_or" (formula "4") (term "0,0,0,0,0"))
                         (builtin "One Step Simplification" (formula "4"))
                        (rule "commute_or_2" (formula "4") (term "0,0,0,0"))
                        (rule "shift_paren_or" (formula "3") (term "0,0,0,0,0"))
                         (builtin "One Step Simplification" (formula "3"))
                        (rule "commute_or_2" (formula "3") (term "0,0,0,0"))
                        (rule "shift_paren_or" (formula "2") (term "0,0,0,0,0"))
                         (builtin "One Step Simplification" (formula "2"))
                        (rule "shift_paren_or" (formula "1") (term "0,0,0,0,0"))
                         (builtin "One Step Simplification" (formula "1"))
                        (rule "cnf_rightDist" (formula "5") (term "0,0,0"))
                        (rule "distr_forallAnd" (formula "5") (term "0,0"))
                        (rule "distr_forallAnd" (formula "5") (term "0"))
                        (rule "distr_forallAnd" (formula "5"))
                        (rule "andLeft" (formula "5"))
                        (rule "commute_or_2" (formula "5") (term "0,0,0"))
                         (builtin "One Step Simplification" (formula "5"))
                        (rule "eqSymm" (formula "5") (term "1,0,0,0,0"))
                        (rule "castedGetAny" (formula "5") (term "0,0,0,0,0,0"))
                        (rule "castedGetAny" (formula "5") (term "1,0,0,1,0,0,0"))
                        (rule "castedGetAny" (formula "5") (term "0,1,0,0,0,0"))
                         (builtin "One Step Simplification" (formula "5"))
                        (rule "true_left" (formula "5"))
                        (rule "shift_paren_or" (formula "5") (term "0,0,0"))
                         (builtin "One Step Simplification" (formula "5"))
                        (rule "eqSymm" (formula "5") (term "1,1,0,0,0"))
                        (rule "castedGetAny" (formula "5") (term "0,0,0,0,0,0"))
                        (rule "castedGetAny" (formula "5") (term "0,0,1,0,0,0"))
                        (rule "castedGetAny" (formula "5") (term "0,1,1,0,0,0"))
                         (builtin "One Step Simplification" (formula "5"))
                        (rule "true_left" (formula "5"))
                        (rule "cnf_rightDist" (formula "4") (term "0,0,0"))
                        (rule "distr_forallAnd" (formula "4") (term "0,0"))
                        (rule "distr_forallAnd" (formula "4") (term "0"))
                        (rule "distr_forallAnd" (formula "4"))
                        (rule "andLeft" (formula "4"))
                        (rule "shift_paren_or" (formula "5") (term "0,0,0"))
                         (builtin "One Step Simplification" (formula "5"))
                        (rule "eqSymm" (formula "5") (term "1,1,0,0,0"))
                        (rule "castedGetAny" (formula "5") (term "0,0,1,0,0,0"))
                        (rule "castedGetAny" (formula "5") (term "0,0,0,0,0,0"))
                        (rule "castedGetAny" (formula "5") (term "0,1,1,0,0,0"))
                         (builtin "One Step Simplification" (formula "5"))
                        (rule "true_left" (formula "5"))
                        (rule "cnf_rightDist" (formula "3") (term "0,0,0"))
                        (rule "distr_forallAnd" (formula "3") (term "0,0"))
                        (rule "distr_forallAnd" (formula "3") (term "0"))
                        (rule "distr_forallAnd" (formula "3"))
                        (rule "andLeft" (formula "3"))
                        (rule "cnf_rightDist" (formula "2") (term "0,0,0"))
                        (rule "distr_forallAnd" (formula "2") (term "0,0"))
                        (rule "distr_forallAnd" (formula "2") (term "0"))
                        (rule "distr_forallAnd" (formula "2"))
                        (rule "andLeft" (formula "2"))
                        (rule "cnf_rightDist" (formula "1") (term "0,0,0"))
                        (rule "distr_forallAnd" (formula "1") (term "0,0"))
                        (rule "distr_forallAnd" (formula "1") (term "0"))
                        (rule "distr_forallAnd" (formula "1"))
                        (rule "andLeft" (formula "1"))
                        (rule "shift_paren_or" (formula "4") (term "0,0,0"))
                         (builtin "One Step Simplification" (formula "4"))
                        (rule "eqSymm" (formula "4") (term "1,1,0,0,0"))
                        (rule "castedGetAny" (formula "4") (term "0,0,0,0,0,0"))
                        (rule "castedGetAny" (formula "4") (term "0,0,1,0,0,0"))
                        (rule "castedGetAny" (formula "4") (term "0,1,1,0,0,0"))
                         (builtin "One Step Simplification" (formula "4"))
                        (rule "true_left" (formula "4"))
                        (rule "cnf_rightDist" (formula "4") (term "0,0,0"))
                        (rule "distr_forallAnd" (formula "4") (term "0,0"))
                        (rule "distr_forallAnd" (formula "4") (term "0"))
                        (rule "distr_forallAnd" (formula "4"))
                        (rule "andLeft" (formula "4"))
                        (rule "commute_or_2" (formula "4") (term "0,0,0"))
                         (builtin "One Step Simplification" (formula "4"))
                        (rule "eqSymm" (formula "4") (term "1,0,0,0,0"))
                        (rule "castedGetAny" (formula "4") (term "0,0,0,0,0,0"))
                        (rule "castedGetAny" (formula "4") (term "1,0,0,1,0,0,0"))
                        (rule "castedGetAny" (formula "4") (term "0,1,0,0,0,0"))
                         (builtin "One Step Simplification" (formula "4"))
                        (rule "true_left" (formula "4"))
                        (rule "shift_paren_or" (formula "4") (term "0,0,0"))
                         (builtin "One Step Simplification" (formula "4"))
                        (rule "eqSymm" (formula "4") (term "1,1,0,0,0"))
                        (rule "castedGetAny" (formula "4") (term "1,0,0,0,0,0,0"))
                        (rule "castedGetAny" (formula "4") (term "0,0,1,0,0,0"))
                        (rule "castedGetAny" (formula "4") (term "0,1,1,0,0,0"))
                         (builtin "One Step Simplification" (formula "4"))
                        (rule "true_left" (formula "4"))
                        (rule "cnf_rightDist" (formula "3") (term "0,0,0"))
                        (rule "distr_forallAnd" (formula "3") (term "0,0"))
                        (rule "distr_forallAnd" (formula "3") (term "0"))
                        (rule "distr_forallAnd" (formula "3"))
                        (rule "andLeft" (formula "3"))
                        (rule "cnf_rightDist" (formula "2") (term "0,0,0"))
                        (rule "distr_forallAnd" (formula "2") (term "0,0"))
                        (rule "distr_forallAnd" (formula "2") (term "0"))
                        (rule "distr_forallAnd" (formula "2"))
                        (rule "andLeft" (formula "2"))
                        (rule "commute_or_2" (formula "2") (term "0,0,0"))
                         (builtin "One Step Simplification" (formula "2"))
                        (rule "eqSymm" (formula "2") (term "1,0,0,0,0"))
                        (rule "castedGetAny" (formula "2") (term "0,0,0,0,0,0"))
                        (rule "castedGetAny" (formula "2") (term "1,0,0,1,0,0,0"))
                        (rule "castedGetAny" (formula "2") (term "0,1,0,0,0,0"))
                         (builtin "One Step Simplification" (formula "2"))
                        (rule "true_left" (formula "2"))
                        (rule "cnf_rightDist" (formula "1") (term "0,0,0"))
                        (rule "distr_forallAnd" (formula "1") (term "0,0"))
                        (rule "distr_forallAnd" (formula "1") (term "0"))
                        (rule "distr_forallAnd" (formula "1"))
                        (rule "andLeft" (formula "1"))
                        (rule "shift_paren_or" (formula "4") (term "0,0,0"))
                         (builtin "One Step Simplification" (formula "4"))
                        (rule "eqSymm" (formula "4") (term "1,1,0,0,0"))
                        (rule "castedGetAny" (formula "4") (term "0,0,1,0,0,0"))
                        (rule "castedGetAny" (formula "4") (term "1,0,0,0,0,0,0"))
                        (rule "castedGetAny" (formula "4") (term "0,1,1,0,0,0"))
                         (builtin "One Step Simplification" (formula "4"))
                        (rule "true_left" (formula "4"))
                        (rule "ifthenelse_split_for" (formula "29") (term "1,1"))
                        (branch "result_228_A_1.value@heapAtPre_A«anonHeapFunction» ≥ 0 TRUE"
                           (rule "cnf_rightDist" (formula "30"))
                           (rule "andLeft" (formula "30"))
                           (rule "commute_or" (formula "31"))
                           (rule "cnf_rightDist" (formula "30"))
                           (rule "andLeft" (formula "30"))
                           (rule "commute_or" (formula "31"))
                           (rule "shift_paren_or" (formula "2") (term "0,0,0"))
                            (builtin "One Step Simplification" (formula "2"))
                           (rule "eqSymm" (formula "2") (term "1,1,0,0,0"))
                           (rule "castedGetAny" (formula "2") (term "0,0,1,0,0,0"))
                           (rule "castedGetAny" (formula "2") (term "1,0,0,0,0,0,0"))
                           (rule "castedGetAny" (formula "2") (term "0,1,1,0,0,0"))
                            (builtin "One Step Simplification" (formula "2"))
                           (rule "true_left" (formula "2"))
                           (rule "cnf_rightDist" (formula "2") (term "0,0,0"))
                           (rule "distr_forallAnd" (formula "2") (term "0,0"))
                           (rule "distr_forallAnd" (formula "2") (term "0"))
                           (rule "distr_forallAnd" (formula "2"))
                           (rule "andLeft" (formula "2"))
                           (rule "commute_or_2" (formula "2") (term "0,0,0"))
                            (builtin "One Step Simplification" (formula "2"))
                           (rule "eqSymm" (formula "2") (term "1,0,0,0,0"))
                           (rule "castedGetAny" (formula "2") (term "1,0,0,1,0,0,0"))
                           (rule "castedGetAny" (formula "2") (term "0,0,0,0,0,0"))
                           (rule "castedGetAny" (formula "2") (term "0,1,0,0,0,0"))
                            (builtin "One Step Simplification" (formula "2"))
                           (rule "true_left" (formula "2"))
                           (rule "shift_paren_or" (formula "2") (term "0,0,0"))
                            (builtin "One Step Simplification" (formula "2"))
                           (rule "eqSymm" (formula "2") (term "1,1,0,0,0"))
                           (rule "castedGetAny" (formula "2") (term "1,0,0,0,0,0,0"))
                           (rule "castedGetAny" (formula "2") (term "0,0,1,0,0,0"))
                           (rule "castedGetAny" (formula "2") (term "0,1,1,0,0,0"))
                            (builtin "One Step Simplification" (formula "2"))
                           (rule "true_left" (formula "2"))
                           (rule "cnf_rightDist" (formula "1") (term "0,0,0"))
                           (rule "distr_forallAnd" (formula "1") (term "0,0"))
                           (rule "distr_forallAnd" (formula "1") (term "0"))
                           (rule "distr_forallAnd" (formula "1"))
                           (rule "andLeft" (formula "1"))
                           (rule "commute_or_2" (formula "1") (term "0,0,0"))
                            (builtin "One Step Simplification" (formula "1"))
                           (rule "eqSymm" (formula "1") (term "1,0,0,0,0"))
                           (rule "castedGetAny" (formula "1") (term "0,0,0,0,0,0"))
                           (rule "castedGetAny" (formula "1") (term "1,0,0,1,0,0,0"))
                           (rule "castedGetAny" (formula "1") (term "0,1,0,0,0,0"))
                            (builtin "One Step Simplification" (formula "1"))
                           (rule "true_left" (formula "1"))
                           (rule "shift_paren_or" (formula "1") (term "0,0,0"))
                            (builtin "One Step Simplification" (formula "1"))
                           (rule "eqSymm" (formula "1") (term "1,1,0,0,0"))
                           (rule "castedGetAny" (formula "1") (term "1,0,0,0,0,0,0"))
                           (rule "castedGetAny" (formula "1") (term "0,0,1,0,0,0"))
                           (rule "castedGetAny" (formula "1") (term "0,1,1,0,0,0"))
                            (builtin "One Step Simplification" (formula "1"))
                           (rule "true_left" (formula "1"))
                           (rule "cut_direct" (formula "27") (term "0"))
                           (branch "CUT: result_228_A_1.value@heapAtPre_A«anonHeapFunction» = 0 TRUE"
                               (builtin "One Step Simplification" (formula "28"))
                              (rule "true_left" (formula "28"))
                              (rule "replace_known_left" (formula "29") (term "0") (ifseqformula "27"))
                               (builtin "One Step Simplification" (formula "29"))
                              (rule "true_left" (formula "29"))
                              (rule "replace_known_left" (formula "28") (term "0") (ifseqformula "27"))
                               (builtin "One Step Simplification" (formula "28"))
                              (rule "true_left" (formula "28"))
                              (rule "applyEq" (formula "28") (term "1,0") (ifseqformula "27"))
                              (rule "eqSymm" (formula "28"))
                              (rule "polySimp_homoEq" (formula "28"))
                              (rule "polySimp_mulLiterals" (formula "28") (term "1,0"))
                              (rule "polySimp_elimOne" (formula "28") (term "1,0"))
                              (rule "applyEq" (formula "29") (term "1,0,0") (ifseqformula "27"))
                              (rule "polySimp_mulComm0" (formula "29") (term "0"))
                              (rule "applyEq" (formula "26") (term "0") (ifseqformula "27"))
                              (rule "qeq_literals" (formula "26"))
                              (rule "true_left" (formula "26"))
                              (rule "applyEq" (formula "22") (term "1") (ifseqformula "26"))
                              (rule "applyEq" (formula "6") (term "1") (ifseqformula "26"))
                              (rule "applyEq" (formula "56") (term "1") (ifseqformula "26"))
                              (rule "applyEq" (formula "27") (term "1,1,0") (ifseqformula "26"))
                              (rule "polySimp_addComm0" (formula "27") (term "0"))
                              (rule "applyEq" (formula "28") (term "0,0") (ifseqformula "26"))
                              (rule "times_zero_2" (formula "28") (term "0"))
                              (rule "polySimp_homoEq" (formula "28"))
                              (rule "mul_literals" (formula "28") (term "1,0"))
                              (rule "add_zero_right" (formula "28") (term "0"))
                              (rule "polySimp_sepPosMonomial" (formula "27"))
                              (rule "polySimp_sepNegMonomial" (formula "28"))
                              (rule "polySimp_mulLiterals" (formula "28") (term "0"))
                              (rule "polySimp_elimOne" (formula "28") (term "0"))
                              (rule "applyEq" (formula "27") (term "0,0") (ifseqformula "28"))
                              (rule "eqSymm" (formula "27"))
                              (rule "polySimp_homoEq" (formula "27"))
                              (rule "polySimp_mulLiterals" (formula "27") (term "1,0"))
                              (rule "polySimp_elimOne" (formula "27") (term "1,0"))
                              (rule "applyEq" (formula "3") (term "0") (ifseqformula "28"))
                              (rule "applyEq" (formula "27") (term "0,0,1,0") (ifseqformula "28"))
                              (rule "polySimp_addComm0" (formula "27") (term "0"))
                              (rule "applyEq" (formula "5") (term "1") (ifseqformula "28"))
                              (rule "polySimp_sepPosMonomial" (formula "27"))
                              (rule "div_axiom" (formula "27") (term "0,1") (inst "quotient=quotient_1"))
                               (builtin "One Step Simplification" (formula "27"))
                              (rule "true_left" (formula "27"))
                              (rule "jdiv_axiom" (formula "27") (term "0"))
                              (rule "eqSymm" (formula "27"))
                              (rule "applyEq" (formula "27") (term "1") (ifseqformula "28"))
                               (builtin "One Step Simplification" (formula "27"))
                              (rule "eqSymm" (formula "27") (term "1"))
                              (rule "polySimp_homoEq" (formula "27") (term "1"))
                              (rule "polySimp_mulLiterals" (formula "27") (term "1,0,1"))
                              (rule "polySimp_elimOne" (formula "27") (term "1,0,1"))
                              (rule "polySimp_sepPosMonomial" (formula "27") (term "1"))
                              (rule "inEqSimp_contradInEq0" (formula "27") (term "0,0") (ifseqformula "3"))
                              (rule "qeq_literals" (formula "27") (term "0,0,0"))
                               (builtin "One Step Simplification" (formula "27"))
                              (rule "true_left" (formula "27"))
                              (rule "Use_information_flow_contract_for_compareTo_325434207" (formula "18") (ifseqformula "18"))
                               (builtin "One Step Simplification" (formula "18") (ifInst ""  (formula "93")) (ifInst ""  (formula "93")))
                              (rule "true_left" (formula "18"))
                              (rule "Use_information_flow_contract_for_getOrder_757678341" (formula "58") (ifseqformula "24"))
                              (rule "applyEq" (formula "58") (term "0,0,1") (ifseqformula "56"))
                              (rule "eqSymm" (formula "58") (term "0,1"))
                              (rule "replace_known_left" (formula "58") (term "0,1") (ifseqformula "22"))
                               (builtin "One Step Simplification" (formula "58"))
                              (rule "applyEq" (formula "58") (term "0,1") (ifseqformula "6"))
                              (rule "eqSymm" (formula "58") (term "1"))
                              (rule "replace_known_left" (formula "58") (term "1") (ifseqformula "26"))
                               (builtin "One Step Simplification" (formula "58"))
                              (rule "true_left" (formula "58"))
                              (rule "Use_information_flow_contract_for_getOrder_757678341" (formula "58") (ifseqformula "58"))
                               (builtin "One Step Simplification" (formula "58"))
                              (rule "true_left" (formula "58"))
                              (rule "Use_information_flow_contract_for_compareTo_325434207" (formula "52") (ifseqformula "18"))
                              (rule "replace_known_right" (formula "52") (term "0,1,0,0") (ifseqformula "94"))
                               (builtin "One Step Simplification" (formula "52") (ifInst ""  (formula "93")))
                              (rule "applyEqRigid" (formula "52") (term "0,1,0,1") (ifseqformula "54"))
                              (rule "eqSymm" (formula "52") (term "1,0,1"))
                              (rule "replace_known_left" (formula "52") (term "1,0,1") (ifseqformula "19"))
                               (builtin "One Step Simplification" (formula "52"))
                              (rule "applyEq" (formula "52") (term "0,0,1") (ifseqformula "5"))
                              (rule "eqSymm" (formula "52") (term "0,1"))
                              (rule "replace_known_left" (formula "52") (term "0,1") (ifseqformula "28"))
                               (builtin "One Step Simplification" (formula "52"))
                              (rule "Class_invariant_axiom_for_java_math_BigInteger" (formula "52") (term "1,0"))
                              (rule "replace_known_left" (formula "52") (term "1,1,0") (ifseqformula "19"))
                               (builtin "One Step Simplification" (formula "52") (ifInst ""  (formula "93")))
                              (rule "Class_invariant_axiom_for_java_math_BigInteger" (formula "52") (term "0"))
                              (rule "replace_known_left" (formula "52") (term "1,0") (ifseqformula "54"))
                               (builtin "One Step Simplification" (formula "52") (ifInst ""  (formula "94")))
                              (rule "applyEq" (formula "44") (term "0") (ifseqformula "52"))
                              (rule "applyEq" (formula "50") (term "0") (ifseqformula "51"))
                              (rule "applyEq" (formula "51") (term "4") (ifseqformula "50"))
                              (rule "Use_information_flow_contract_for_getOrder_757678341" (formula "24") (ifseqformula "24"))
                               (builtin "One Step Simplification" (formula "24"))
                              (rule "true_left" (formula "24"))
                              (rule "Use_information_flow_contract_for_getOrder_757678341" (formula "24") (ifseqformula "57"))
                              (rule "eqSymm" (formula "24") (term "0,1"))
                              (rule "eqSymm" (formula "24") (term "1,1"))
                              (rule "applyEq" (formula "24") (term "0,1,1") (ifseqformula "6"))
                              (rule "eqSymm" (formula "24") (term "1,1"))
                              (rule "replace_known_left" (formula "24") (term "1,1") (ifseqformula "27"))
                               (builtin "One Step Simplification" (formula "24"))
                              (rule "true_left" (formula "24"))
                              (rule "Use_information_flow_contract_for_multiply_1272441881_0" (formula "69") (ifseqformula "35"))
                              (rule "replaceKnownSelect_taclet21_12" (formula "69") (term "0,1,1"))
                              (rule "replaceKnownSelect_taclet21_11" (formula "69") (term "1,1,1"))
                              (rule "replaceKnownAuxiliaryConstant_taclet01111021_19" (formula "69") (term "0,1,1"))
                              (rule "replaceKnownAuxiliaryConstant_taclet1111021_18" (formula "69") (term "1,1,1"))
                              (rule "replaceKnownSelect_taclet21_8" (formula "69") (term "1,1,0,1"))
                              (rule "replaceKnownSelect_taclet21_9" (formula "69") (term "0,1,0,1"))
                              (rule "replaceKnownAuxiliaryConstant_taclet21_10" (formula "69") (term "1,1,0,1"))
                               (builtin "One Step Simplification" (formula "69") (ifInst ""  (formula "83")) (ifInst ""  (formula "82")))
                              (rule "eqSymm" (formula "69") (term "1,1"))
                              (rule "replace_known_right" (formula "69") (term "1,1") (ifseqformula "100"))
                               (builtin "One Step Simplification" (formula "69"))
                              (rule "pullOutSelect" (formula "69") (term "1,0,1") (inst "selectSK=org_bouncycastle_math_ec_ECPoint_value_4"))
                              (rule "simplifySelectOfAnonEQ" (formula "69") (ifseqformula "25"))
                               (builtin "One Step Simplification" (formula "69") (ifInst ""  (formula "97")) (ifInst ""  (formula "13")))
                              (rule "applyEqReverse" (formula "70") (term "1,0,1") (ifseqformula "69"))
                              (rule "hideAuxiliaryEq" (formula "69"))
                              (rule "pullOutSelect" (formula "69") (term "0,0,1") (inst "selectSK=org_bouncycastle_math_ec_ECPoint_value_5"))
                              (rule "simplifySelectOfAnonEQ" (formula "69") (ifseqformula "59"))
                               (builtin "One Step Simplification" (formula "69") (ifInst ""  (formula "98")) (ifInst ""  (formula "46")))
                              (rule "applyEqReverse" (formula "70") (term "0,0,1") (ifseqformula "69"))
                              (rule "hideAuxiliaryEq" (formula "69"))
                              (rule "replace_known_left" (formula "69") (term "0,1") (ifseqformula "4"))
                               (builtin "One Step Simplification" (formula "69"))
                              (rule "notLeft" (formula "69"))
                              (rule "Class_invariant_axiom_for_org_bouncycastle_math_ec_ECPoint" (formula "75") (term "1"))
                               (builtin "One Step Simplification" (formula "75"))
                              (rule "Class_invariant_axiom_for_org_bouncycastle_math_ec_ECPoint" (formula "75"))
                              (rule "closeTrue" (formula "75"))
                           )
                           (branch "CUT: result_228_A_1.value@heapAtPre_A«anonHeapFunction» = 0 FALSE"
                               (builtin "One Step Simplification" (formula "27"))
                              (rule "replace_known_right" (formula "28") (term "0") (ifseqformula "79"))
                               (builtin "One Step Simplification" (formula "28"))
                              (rule "replace_known_right" (formula "29") (term "0") (ifseqformula "79"))
                               (builtin "One Step Simplification" (formula "29"))
                              (rule "applyEq" (formula "31") (term "0,0") (ifseqformula "28"))
                              (rule "polySimp_mulComm0" (formula "31") (term "0"))
                              (rule "applyEq" (formula "29") (term "0") (ifseqformula "31"))
                              (rule "inEqSimp_homoInEq1" (formula "29"))
                              (rule "polySimp_mulComm0" (formula "29") (term "1,0"))
                              (rule "polySimp_rightDist" (formula "29") (term "1,0"))
                              (rule "polySimp_mulLiterals" (formula "29") (term "1,1,0"))
                              (rule "polySimp_elimOne" (formula "29") (term "1,1,0"))
                              (rule "polySimp_mulComm0" (formula "29") (term "0,1,0"))
                              (rule "polySimp_addComm1" (formula "29") (term "0"))
                              (rule "polySimp_addAssoc" (formula "29") (term "0,0"))
                              (rule "polySimp_addComm1" (formula "29") (term "0,0,0"))
                              (rule "polySimp_pullOutFactor2b" (formula "29") (term "0,0"))
                              (rule "add_literals" (formula "29") (term "1,1,0,0"))
                              (rule "times_zero_1" (formula "29") (term "1,0,0"))
                              (rule "add_zero_right" (formula "29") (term "0,0"))
                              (rule "applyEq" (formula "27") (term "0") (ifseqformula "31"))
                              (rule "inEqSimp_homoInEq0" (formula "27"))
                              (rule "polySimp_mulComm0" (formula "27") (term "1,0"))
                              (rule "polySimp_rightDist" (formula "27") (term "1,0"))
                              (rule "polySimp_mulLiterals" (formula "27") (term "1,1,0"))
                              (rule "polySimp_elimOne" (formula "27") (term "1,1,0"))
                              (rule "polySimp_mulComm0" (formula "27") (term "0,1,0"))
                              (rule "polySimp_addAssoc" (formula "27") (term "0"))
                              (rule "polySimp_addComm0" (formula "27") (term "0,0"))
                              (rule "polySimp_pullOutFactor2b" (formula "27") (term "0"))
                              (rule "add_literals" (formula "27") (term "1,1,0"))
                              (rule "times_zero_1" (formula "27") (term "1,0"))
                              (rule "add_zero_right" (formula "27") (term "0"))
                              (rule "applyEq" (formula "30") (term "0,1") (ifseqformula "28"))
                              (rule "inEqSimp_sepNegMonomial0" (formula "29"))
                              (rule "polySimp_mulLiterals" (formula "29") (term "0"))
                              (rule "polySimp_elimOne" (formula "29") (term "0"))
                              (rule "inEqSimp_invertInEq1" (formula "27"))
                              (rule "polySimp_mulLiterals" (formula "27") (term "0"))
                              (rule "mul_literals" (formula "27") (term "1"))
                              (rule "polySimp_elimOne" (formula "27") (term "0"))
                              (rule "inEqSimp_strengthen1" (formula "26") (ifseqformula "79"))
                              (rule "add_zero_right" (formula "26") (term "1"))
                              (rule "inEqSimp_contradEq7" (formula "79") (ifseqformula "26"))
                              (rule "times_zero_1" (formula "79") (term "1,0,0"))
                              (rule "add_literals" (formula "79") (term "0,0"))
                              (rule "leq_literals" (formula "79") (term "0"))
                               (builtin "One Step Simplification" (formula "79"))
                              (rule "false_right" (formula "79"))
                              (rule "Use_information_flow_contract_for_compareTo_325434207" (formula "18") (ifseqformula "18"))
                               (builtin "One Step Simplification" (formula "18") (ifInst ""  (formula "96")) (ifInst ""  (formula "96")))
                              (rule "true_left" (formula "18"))
                              (rule "Use_information_flow_contract_for_getOrder_757678341" (formula "61") (ifseqformula "24"))
                              (rule "replace_known_left" (formula "61") (term "1,1") (ifseqformula "6"))
                               (builtin "One Step Simplification" (formula "61"))
                              (rule "true_left" (formula "61"))
                              (rule "Use_information_flow_contract_for_multiply_1272441881" (formula "73") (ifseqformula "38"))
                              (rule "replaceKnownSelect_taclet21_12" (formula "73") (term "0,1,1"))
                              (rule "replaceKnownSelect_taclet21_11" (formula "73") (term "1,1,1"))
                              (rule "replaceKnownAuxiliaryConstant_taclet01111021_19" (formula "73") (term "0,1,1"))
                              (rule "replaceKnownAuxiliaryConstant_taclet1111021_18" (formula "73") (term "1,1,1"))
                              (rule "replaceKnownSelect_taclet21_8" (formula "73") (term "1,1,0,1"))
                              (rule "replaceKnownSelect_taclet21_9" (formula "73") (term "0,1,0,1"))
                              (rule "replaceKnownAuxiliaryConstant_taclet21_10" (formula "73") (term "1,1,0,1"))
                               (builtin "One Step Simplification" (formula "73") (ifInst ""  (formula "87")) (ifInst ""  (formula "86")))
                              (rule "eqSymm" (formula "73") (term "1,1"))
                              (rule "replace_known_right" (formula "73") (term "1,1") (ifseqformula "104"))
                               (builtin "One Step Simplification" (formula "73"))
                              (rule "pullOutSelect" (formula "73") (term "1,0,1") (inst "selectSK=org_bouncycastle_math_ec_ECPoint_value_4"))
                              (rule "simplifySelectOfAnonEQ" (formula "73") (ifseqformula "25"))
                               (builtin "One Step Simplification" (formula "73") (ifInst ""  (formula "101")) (ifInst ""  (formula "13")))
                              (rule "applyEqReverse" (formula "74") (term "1,0,1") (ifseqformula "73"))
                              (rule "hideAuxiliaryEq" (formula "73"))
                              (rule "pullOutSelect" (formula "73") (term "0,0,1") (inst "selectSK=org_bouncycastle_math_ec_ECPoint_value_5"))
                              (rule "simplifySelectOfAnonEQ" (formula "73") (ifseqformula "63"))
                               (builtin "One Step Simplification" (formula "73") (ifInst ""  (formula "102")) (ifInst ""  (formula "50")))
                              (rule "applyEqReverse" (formula "74") (term "0,0,1") (ifseqformula "73"))
                              (rule "hideAuxiliaryEq" (formula "73"))
                              (rule "replace_known_left" (formula "73") (term "0,1") (ifseqformula "4"))
                               (builtin "One Step Simplification" (formula "73"))
                              (rule "notLeft" (formula "73"))
                              (rule "Class_invariant_axiom_for_org_bouncycastle_math_ec_ECPoint" (formula "79") (term "1"))
                               (builtin "One Step Simplification" (formula "79"))
                              (rule "Class_invariant_axiom_for_org_bouncycastle_math_ec_ECPoint" (formula "79"))
                              (rule "closeTrue" (formula "79"))
                           )
                        )
                        (branch "result_228_A_1.value@heapAtPre_A«anonHeapFunction» ≥ 0 FALSE"
                           (rule "inEqSimp_geqRight" (formula "79"))
                           (rule "mul_literals" (formula "1") (term "1,0,0"))
                           (rule "add_literals" (formula "1") (term "0,0"))
                           (rule "inEqSimp_sepPosMonomial0" (formula "1"))
                           (rule "mul_literals" (formula "1") (term "1"))
                           (rule "inEqSimp_contradEq3" (formula "30") (term "0") (ifseqformula "1"))
                           (rule "times_zero_1" (formula "30") (term "1,0,0,0"))
                           (rule "add_literals" (formula "30") (term "0,0,0"))
                           (rule "qeq_literals" (formula "30") (term "0,0"))
                            (builtin "One Step Simplification" (formula "30"))
                           (rule "andLeft" (formula "30"))
                           (rule "andLeft" (formula "30"))
                           (rule "applyEq" (formula "34") (term "0,0") (ifseqformula "31"))
                           (rule "polySimp_mulComm0" (formula "34") (term "0"))
                           (rule "applyEq" (formula "32") (term "0") (ifseqformula "34"))
                           (rule "inEqSimp_homoInEq1" (formula "32"))
                           (rule "polySimp_mulComm0" (formula "32") (term "1,0"))
                           (rule "polySimp_rightDist" (formula "32") (term "1,0"))
                           (rule "polySimp_mulLiterals" (formula "32") (term "1,1,0"))
                           (rule "polySimp_elimOne" (formula "32") (term "1,1,0"))
                           (rule "polySimp_mulComm0" (formula "32") (term "0,1,0"))
                           (rule "polySimp_addComm1" (formula "32") (term "0"))
                           (rule "polySimp_addAssoc" (formula "32") (term "0,0"))
                           (rule "polySimp_addComm1" (formula "32") (term "0,0,0"))
                           (rule "polySimp_pullOutFactor2b" (formula "32") (term "0,0"))
                           (rule "add_literals" (formula "32") (term "1,1,0,0"))
                           (rule "times_zero_1" (formula "32") (term "1,0,0"))
                           (rule "add_zero_right" (formula "32") (term "0,0"))
                           (rule "applyEq" (formula "30") (term "0") (ifseqformula "34"))
                           (rule "inEqSimp_homoInEq0" (formula "30"))
                           (rule "polySimp_mulComm0" (formula "30") (term "1,0"))
                           (rule "polySimp_rightDist" (formula "30") (term "1,0"))
                           (rule "polySimp_mulLiterals" (formula "30") (term "1,1,0"))
                           (rule "polySimp_elimOne" (formula "30") (term "1,1,0"))
                           (rule "polySimp_mulComm0" (formula "30") (term "0,1,0"))
                           (rule "polySimp_addAssoc" (formula "30") (term "0"))
                           (rule "polySimp_addComm0" (formula "30") (term "0,0"))
                           (rule "polySimp_pullOutFactor2b" (formula "30") (term "0"))
                           (rule "add_literals" (formula "30") (term "1,1,0"))
                           (rule "times_zero_1" (formula "30") (term "1,0"))
                           (rule "add_zero_right" (formula "30") (term "0"))
                           (rule "applyEq" (formula "33") (term "0,1") (ifseqformula "31"))
                           (rule "inEqSimp_sepPosMonomial0" (formula "32"))
                           (rule "polySimp_mulComm0" (formula "32") (term "1"))
                           (rule "polySimp_rightDist" (formula "32") (term "1"))
                           (rule "polySimp_mulLiterals" (formula "32") (term "1,1"))
                           (rule "mul_literals" (formula "32") (term "0,1"))
                           (rule "polySimp_elimOne" (formula "32") (term "1,1"))
                           (rule "inEqSimp_invertInEq1" (formula "30"))
                           (rule "mul_literals" (formula "30") (term "1"))
                           (rule "polySimp_mulLiterals" (formula "30") (term "0"))
                           (rule "polySimp_elimOne" (formula "30") (term "0"))
                           (rule "shift_paren_or" (formula "3") (term "0,0,0"))
                            (builtin "One Step Simplification" (formula "3"))
                           (rule "eqSymm" (formula "3") (term "1,1,0,0,0"))
                           (rule "castedGetAny" (formula "3") (term "0,0,1,0,0,0"))
                           (rule "castedGetAny" (formula "3") (term "1,0,0,0,0,0,0"))
                           (rule "castedGetAny" (formula "3") (term "0,1,1,0,0,0"))
                            (builtin "One Step Simplification" (formula "3"))
                           (rule "true_left" (formula "3"))
                           (rule "cnf_rightDist" (formula "3") (term "0,0,0"))
                           (rule "distr_forallAnd" (formula "3") (term "0,0"))
                           (rule "distr_forallAnd" (formula "3") (term "0"))
                           (rule "distr_forallAnd" (formula "3"))
                           (rule "andLeft" (formula "3"))
                           (rule "cnf_rightDist" (formula "2") (term "0,0,0"))
                           (rule "distr_forallAnd" (formula "2") (term "0,0"))
                           (rule "distr_forallAnd" (formula "2") (term "0"))
                           (rule "distr_forallAnd" (formula "2"))
                           (rule "andLeft" (formula "2"))
                           (rule "commute_or_2" (formula "3") (term "0,0,0"))
                            (builtin "One Step Simplification" (formula "3"))
                           (rule "eqSymm" (formula "3") (term "1,0,0,0,0"))
                           (rule "castedGetAny" (formula "3") (term "1,0,0,1,0,0,0"))
                           (rule "castedGetAny" (formula "3") (term "0,0,0,0,0,0"))
                           (rule "castedGetAny" (formula "3") (term "0,1,0,0,0,0"))
                            (builtin "One Step Simplification" (formula "3"))
                           (rule "true_left" (formula "3"))
                           (rule "commute_or_2" (formula "2") (term "0,0,0"))
                            (builtin "One Step Simplification" (formula "2"))
                           (rule "eqSymm" (formula "2") (term "1,0,0,0,0"))
                           (rule "castedGetAny" (formula "2") (term "0,0,0,0,0,0"))
                           (rule "castedGetAny" (formula "2") (term "1,0,0,1,0,0,0"))
                           (rule "castedGetAny" (formula "2") (term "0,1,0,0,0,0"))
                            (builtin "One Step Simplification" (formula "2"))
                           (rule "true_left" (formula "2"))
                           (rule "shift_paren_or" (formula "2") (term "0,0,0"))
                            (builtin "One Step Simplification" (formula "2"))
                           (rule "eqSymm" (formula "2") (term "1,1,0,0,0"))
                           (rule "castedGetAny" (formula "2") (term "0,0,1,0,0,0"))
                           (rule "castedGetAny" (formula "2") (term "1,0,0,0,0,0,0"))
                           (rule "castedGetAny" (formula "2") (term "0,1,1,0,0,0"))
                            (builtin "One Step Simplification" (formula "2"))
                           (rule "true_left" (formula "2"))
                           (rule "Use_information_flow_contract_for_compareTo_325434207" (formula "19") (ifseqformula "19"))
                            (builtin "One Step Simplification" (formula "19") (ifInst ""  (formula "96")) (ifInst ""  (formula "96")))
                           (rule "true_left" (formula "19"))
                           (rule "Use_information_flow_contract_for_getOrder_757678341" (formula "61") (ifseqformula "25"))
                           (rule "replace_known_left" (formula "61") (term "1,1") (ifseqformula "7"))
                            (builtin "One Step Simplification" (formula "61"))
                           (rule "true_left" (formula "61"))
                           (rule "Use_information_flow_contract_for_multiply_1272441881" (formula "73") (ifseqformula "38"))
                           (rule "replaceKnownSelect_taclet21_11" (formula "73") (term "1,1,1"))
                           (rule "replaceKnownSelect_taclet21_12" (formula "73") (term "0,1,1"))
                           (rule "replaceKnownAuxiliaryConstant_taclet1111021_18" (formula "73") (term "1,1,1"))
                           (rule "replaceKnownAuxiliaryConstant_taclet01111021_19" (formula "73") (term "0,1,1"))
                           (rule "replaceKnownSelect_taclet21_8" (formula "73") (term "1,1,0,1"))
                           (rule "replaceKnownSelect_taclet21_9" (formula "73") (term "0,1,0,1"))
                           (rule "replaceKnownAuxiliaryConstant_taclet21_10" (formula "73") (term "1,1,0,1"))
                            (builtin "One Step Simplification" (formula "73") (ifInst ""  (formula "87")) (ifInst ""  (formula "86")))
                           (rule "eqSymm" (formula "73") (term "1,1"))
                           (rule "replace_known_right" (formula "73") (term "1,1") (ifseqformula "104"))
                            (builtin "One Step Simplification" (formula "73"))
                           (rule "pullOutSelect" (formula "73") (term "1,0,1") (inst "selectSK=org_bouncycastle_math_ec_ECPoint_value_4"))
                           (rule "simplifySelectOfAnonEQ" (formula "73") (ifseqformula "26"))
                            (builtin "One Step Simplification" (formula "73") (ifInst ""  (formula "101")) (ifInst ""  (formula "14")))
                           (rule "applyEqReverse" (formula "74") (term "1,0,1") (ifseqformula "73"))
                           (rule "hideAuxiliaryEq" (formula "73"))
                           (rule "pullOutSelect" (formula "73") (term "0,0,1") (inst "selectSK=org_bouncycastle_math_ec_ECPoint_value_5"))
                           (rule "simplifySelectOfAnonEQ" (formula "73") (ifseqformula "63"))
                            (builtin "One Step Simplification" (formula "73") (ifInst ""  (formula "102")) (ifInst ""  (formula "50")))
                           (rule "applyEqReverse" (formula "74") (term "0,0,1") (ifseqformula "73"))
                           (rule "hideAuxiliaryEq" (formula "73"))
                           (rule "replace_known_left" (formula "73") (term "0,1") (ifseqformula "5"))
                            (builtin "One Step Simplification" (formula "73"))
                           (rule "notLeft" (formula "73"))
                           (rule "Class_invariant_axiom_for_org_bouncycastle_math_ec_ECPoint" (formula "79") (term "1"))
                            (builtin "One Step Simplification" (formula "79"))
                           (rule "Class_invariant_axiom_for_org_bouncycastle_math_ec_ECPoint" (formula "79"))
                           (rule "closeTrue" (formula "79"))
                        )
                     )
                     (branch " resultAtPost_226_B.<created>@anon_heap_mod«anonHeapFunction» = TRUE FALSE"
                        (rule "applyEqReverse" (formula "108") (term "1") (ifseqformula "8"))
                        (rule "hideAuxiliaryEq" (formula "8"))
                        (rule "eqSymm" (formula "107"))
                        (rule "replace_known_right" (formula "75") (term "0") (ifseqformula "82"))
                         (builtin "One Step Simplification" (formula "75"))
                        (rule "commute_or" (formula "3") (term "0,1,0,0,0"))
                        (rule "commute_or" (formula "2") (term "0,0,0,0"))
                        (rule "onlyCreatedObjectsAreReferenced" (formula "100") (term "0") (ifseqformula "54"))
                        (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "101"))
                         (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "60")))
                        (rule "true_left" (formula "1"))
                        (rule "onlyCreatedObjectsAreReferenced" (formula "99") (term "0") (ifseqformula "20"))
                        (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "100"))
                         (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "26")))
                        (rule "true_left" (formula "1"))
                        (rule "onlyCreatedObjectsAreReferenced" (formula "12") (term "1,0") (ifseqformula "20"))
                        (rule "replace_known_left" (formula "12") (term "1") (ifseqformula "13"))
                         (builtin "One Step Simplification" (formula "12") (ifInst ""  (formula "94")))
                        (rule "true_left" (formula "12"))
                        (rule "onlyCreatedObjectsAreReferenced" (formula "96") (term "0") (ifseqformula "54"))
                        (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "97"))
                         (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "48")))
                        (rule "true_left" (formula "1"))
                        (rule "onlyCreatedObjectsAreReferenced" (formula "29") (term "0") (ifseqformula "20"))
                        (rule "replace_known_right" (formula "29") (term "0") (ifseqformula "98"))
                         (builtin "One Step Simplification" (formula "29") (ifInst ""  (formula "14")))
                        (rule "true_left" (formula "29"))
                        (rule "onlyCreatedObjectsAreReferenced" (formula "12") (term "1,1,0") (ifseqformula "20"))
                        (rule "replace_known_right" (formula "12") (term "0") (ifseqformula "96"))
                         (builtin "One Step Simplification" (formula "12") (ifInst ""  (formula "14")))
                        (rule "true_left" (formula "12"))
                        (rule "onlyCreatedObjectsAreReferenced" (formula "46") (term "1,0") (ifseqformula "54"))
                        (rule "replace_known_left" (formula "46") (term "1") (ifseqformula "47"))
                         (builtin "One Step Simplification" (formula "46") (ifInst ""  (formula "95")))
                        (rule "true_left" (formula "46"))
                        (rule "onlyCreatedObjectsAreReferenced" (formula "61") (term "1,0") (ifseqformula "54"))
                        (rule "replace_known_right" (formula "61") (term "0") (ifseqformula "99"))
                         (builtin "One Step Simplification" (formula "61") (ifInst ""  (formula "48")))
                        (rule "true_left" (formula "61"))
                        (rule "commute_or" (formula "2") (term "0,1,0,0,0"))
                        (rule "commute_or" (formula "1") (term "0,0,0,0"))
                        (rule "commute_or" (formula "1") (term "0,1,0,0,0"))
                        (rule "commute_or_2" (formula "4") (term "0,0,0"))
                        (rule "commute_and" (formula "31") (term "0,1"))
                        (rule "commute_or_2" (formula "3") (term "0,0,0"))
                        (rule "commute_or_2" (formula "6") (term "0,0,0,0,0"))
                         (builtin "One Step Simplification" (formula "6"))
                        (rule "commute_or_2" (formula "2") (term "0,0,0"))
                        (rule "commute_or_2" (formula "1") (term "0,0,0"))
                        (rule "commute_or" (formula "5") (term "1,0,0,0,0,0"))
                        (rule "commute_or_2" (formula "6") (term "0,0,0,0"))
                        (rule "shift_paren_or" (formula "4") (term "0,0,0,0"))
                        (rule "shift_paren_or" (formula "3") (term "0,0,0,0"))
                        (rule "shift_paren_or" (formula "2") (term "0,0,0,0"))
                        (rule "shift_paren_or" (formula "1") (term "0,0,0,0"))
                        (rule "cnf_rightDist" (formula "6") (term "0,0,0"))
                        (rule "distr_forallAnd" (formula "6") (term "0,0"))
                        (rule "distr_forallAnd" (formula "6") (term "0"))
                        (rule "distr_forallAnd" (formula "6"))
                        (rule "andLeft" (formula "6"))
                        (rule "commute_or_2" (formula "6") (term "0,0,0"))
                         (builtin "One Step Simplification" (formula "6"))
                        (rule "eqSymm" (formula "6") (term "1,0,0,0,0"))
                        (rule "castedGetAny" (formula "6") (term "0,0,0,0,0,0"))
                        (rule "castedGetAny" (formula "6") (term "1,0,0,1,0,0,0"))
                        (rule "castedGetAny" (formula "6") (term "0,1,0,0,0,0"))
                         (builtin "One Step Simplification" (formula "6"))
                        (rule "true_left" (formula "6"))
                        (rule "shift_paren_or" (formula "6") (term "0,0,0"))
                         (builtin "One Step Simplification" (formula "6"))
                        (rule "eqSymm" (formula "6") (term "1,1,0,0,0"))
                        (rule "castedGetAny" (formula "6") (term "0,0,1,0,0,0"))
                        (rule "castedGetAny" (formula "6") (term "0,0,0,0,0,0"))
                        (rule "castedGetAny" (formula "6") (term "0,1,1,0,0,0"))
                         (builtin "One Step Simplification" (formula "6"))
                        (rule "true_left" (formula "6"))
                        (rule "commute_and" (formula "4") (term "1,0,0,0"))
                        (rule "commute_and" (formula "3") (term "1,0,0,0"))
                        (rule "commute_and" (formula "2") (term "1,0,0,0"))
                        (rule "commute_and" (formula "1") (term "1,0,0,0"))
                        (rule "shift_paren_or" (formula "5") (term "0,0,0,0,0"))
                         (builtin "One Step Simplification" (formula "5"))
                        (rule "commute_or_2" (formula "5") (term "0,0,0,0"))
                        (rule "shift_paren_or" (formula "4") (term "0,0,0,0,0"))
                         (builtin "One Step Simplification" (formula "4"))
                        (rule "commute_or_2" (formula "4") (term "0,0,0,0"))
                        (rule "shift_paren_or" (formula "3") (term "0,0,0,0,0"))
                         (builtin "One Step Simplification" (formula "3"))
                        (rule "commute_or_2" (formula "3") (term "0,0,0,0"))
                        (rule "shift_paren_or" (formula "2") (term "0,0,0,0,0"))
                         (builtin "One Step Simplification" (formula "2"))
                        (rule "commute_or_2" (formula "2") (term "0,0,0,0"))
                        (rule "shift_paren_or" (formula "1") (term "0,0,0,0,0"))
                         (builtin "One Step Simplification" (formula "1"))
                        (rule "commute_or_2" (formula "1") (term "0,0,0,0"))
                        (rule "cnf_rightDist" (formula "5") (term "0,0,0"))
                        (rule "distr_forallAnd" (formula "5") (term "0,0"))
                        (rule "distr_forallAnd" (formula "5") (term "0"))
                        (rule "distr_forallAnd" (formula "5"))
                        (rule "andLeft" (formula "5"))
                        (rule "commute_or_2" (formula "5") (term "0,0,0"))
                         (builtin "One Step Simplification" (formula "5"))
                        (rule "eqSymm" (formula "5") (term "1,0,0,0,0"))
                        (rule "castedGetAny" (formula "5") (term "1,0,0,1,0,0,0"))
                        (rule "castedGetAny" (formula "5") (term "0,0,0,0,0,0"))
                        (rule "castedGetAny" (formula "5") (term "0,1,0,0,0,0"))
                         (builtin "One Step Simplification" (formula "5"))
                        (rule "true_left" (formula "5"))
                        (rule "shift_paren_or" (formula "5") (term "0,0,0"))
                         (builtin "One Step Simplification" (formula "5"))
                        (rule "eqSymm" (formula "5") (term "1,1,0,0,0"))
                        (rule "castedGetAny" (formula "5") (term "0,0,0,0,0,0"))
                        (rule "castedGetAny" (formula "5") (term "0,0,1,0,0,0"))
                        (rule "castedGetAny" (formula "5") (term "0,1,1,0,0,0"))
                         (builtin "One Step Simplification" (formula "5"))
                        (rule "true_left" (formula "5"))
                        (rule "cnf_rightDist" (formula "4") (term "0,0,0"))
                        (rule "distr_forallAnd" (formula "4") (term "0,0"))
                        (rule "distr_forallAnd" (formula "4") (term "0"))
                        (rule "distr_forallAnd" (formula "4"))
                        (rule "andLeft" (formula "4"))
                        (rule "cnf_rightDist" (formula "3") (term "0,0,0"))
                        (rule "distr_forallAnd" (formula "3") (term "0,0"))
                        (rule "distr_forallAnd" (formula "3") (term "0"))
                        (rule "distr_forallAnd" (formula "3"))
                        (rule "andLeft" (formula "3"))
                        (rule "shift_paren_or" (formula "5") (term "0,0,0"))
                         (builtin "One Step Simplification" (formula "5"))
                        (rule "eqSymm" (formula "5") (term "1,1,0,0,0"))
                        (rule "castedGetAny" (formula "5") (term "0,0,0,0,0,0"))
                        (rule "castedGetAny" (formula "5") (term "0,0,1,0,0,0"))
                        (rule "castedGetAny" (formula "5") (term "0,1,1,0,0,0"))
                         (builtin "One Step Simplification" (formula "5"))
                        (rule "true_left" (formula "5"))
                        (rule "cnf_rightDist" (formula "2") (term "0,0,0"))
                        (rule "distr_forallAnd" (formula "2") (term "0,0"))
                        (rule "distr_forallAnd" (formula "2") (term "0"))
                        (rule "distr_forallAnd" (formula "2"))
                        (rule "andLeft" (formula "2"))
                        (rule "cnf_rightDist" (formula "1") (term "0,0,0"))
                        (rule "distr_forallAnd" (formula "1") (term "0,0"))
                        (rule "distr_forallAnd" (formula "1") (term "0"))
                        (rule "distr_forallAnd" (formula "1"))
                        (rule "andLeft" (formula "1"))
                        (rule "shift_paren_or" (formula "3") (term "0,0,0"))
                         (builtin "One Step Simplification" (formula "3"))
                        (rule "eqSymm" (formula "3") (term "1,1,0,0,0"))
                        (rule "castedGetAny" (formula "3") (term "0,0,0,0,0,0"))
                        (rule "castedGetAny" (formula "3") (term "0,0,1,0,0,0"))
                        (rule "castedGetAny" (formula "3") (term "0,1,1,0,0,0"))
                         (builtin "One Step Simplification" (formula "3"))
                        (rule "true_left" (formula "3"))
                        (rule "cnf_rightDist" (formula "4") (term "0,0,0"))
                        (rule "distr_forallAnd" (formula "4") (term "0,0"))
                        (rule "distr_forallAnd" (formula "4") (term "0"))
                        (rule "distr_forallAnd" (formula "4"))
                        (rule "andLeft" (formula "4"))
                        (rule "commute_or_2" (formula "4") (term "0,0,0"))
                         (builtin "One Step Simplification" (formula "4"))
                        (rule "eqSymm" (formula "4") (term "1,0,0,0,0"))
                        (rule "castedGetAny" (formula "4") (term "0,0,0,0,0,0"))
                        (rule "castedGetAny" (formula "4") (term "1,0,0,1,0,0,0"))
                        (rule "castedGetAny" (formula "4") (term "0,1,0,0,0,0"))
                         (builtin "One Step Simplification" (formula "4"))
                        (rule "true_left" (formula "4"))
                        (rule "cnf_rightDist" (formula "3") (term "0,0,0"))
                        (rule "distr_forallAnd" (formula "3") (term "0,0"))
                        (rule "distr_forallAnd" (formula "3") (term "0"))
                        (rule "distr_forallAnd" (formula "3"))
                        (rule "andLeft" (formula "3"))
                        (rule "shift_paren_or" (formula "5") (term "0,0,0"))
                         (builtin "One Step Simplification" (formula "5"))
                        (rule "eqSymm" (formula "5") (term "1,1,0,0,0"))
                        (rule "castedGetAny" (formula "5") (term "0,0,1,0,0,0"))
                        (rule "castedGetAny" (formula "5") (term "1,0,0,0,0,0,0"))
                        (rule "castedGetAny" (formula "5") (term "0,1,1,0,0,0"))
                         (builtin "One Step Simplification" (formula "5"))
                        (rule "true_left" (formula "5"))
                        (rule "cnf_rightDist" (formula "2") (term "0,0,0"))
                        (rule "distr_forallAnd" (formula "2") (term "0,0"))
                        (rule "distr_forallAnd" (formula "2") (term "0"))
                        (rule "distr_forallAnd" (formula "2"))
                        (rule "andLeft" (formula "2"))
                        (rule "commute_or_2" (formula "2") (term "0,0,0"))
                         (builtin "One Step Simplification" (formula "2"))
                        (rule "eqSymm" (formula "2") (term "1,0,0,0,0"))
                        (rule "castedGetAny" (formula "2") (term "0,0,0,0,0,0"))
                        (rule "castedGetAny" (formula "2") (term "1,0,0,1,0,0,0"))
                        (rule "castedGetAny" (formula "2") (term "0,1,0,0,0,0"))
                         (builtin "One Step Simplification" (formula "2"))
                        (rule "true_left" (formula "2"))
                        (rule "shift_paren_or" (formula "4") (term "0,0,0"))
                         (builtin "One Step Simplification" (formula "4"))
                        (rule "eqSymm" (formula "4") (term "1,1,0,0,0"))
                        (rule "castedGetAny" (formula "4") (term "0,0,1,0,0,0"))
                        (rule "castedGetAny" (formula "4") (term "1,0,0,0,0,0,0"))
                        (rule "castedGetAny" (formula "4") (term "0,1,1,0,0,0"))
                         (builtin "One Step Simplification" (formula "4"))
                        (rule "true_left" (formula "4"))
                        (rule "cnf_rightDist" (formula "1") (term "0,0,0"))
                        (rule "distr_forallAnd" (formula "1") (term "0,0"))
                        (rule "distr_forallAnd" (formula "1") (term "0"))
                        (rule "distr_forallAnd" (formula "1"))
                        (rule "andLeft" (formula "1"))
                        (rule "shift_paren_or" (formula "3") (term "0,0,0"))
                         (builtin "One Step Simplification" (formula "3"))
                        (rule "eqSymm" (formula "3") (term "1,1,0,0,0"))
                        (rule "castedGetAny" (formula "3") (term "0,0,1,0,0,0"))
                        (rule "castedGetAny" (formula "3") (term "1,0,0,0,0,0,0"))
                        (rule "castedGetAny" (formula "3") (term "0,1,1,0,0,0"))
                         (builtin "One Step Simplification" (formula "3"))
                        (rule "true_left" (formula "3"))
                        (rule "ifthenelse_split_for" (formula "28") (term "1,1"))
                        (branch "result_228_A_1.value@heapAtPre_A«anonHeapFunction» ≥ 0 TRUE"
                           (rule "cnf_rightDist" (formula "29"))
                           (rule "andLeft" (formula "29"))
                           (rule "commute_or" (formula "30"))
                           (rule "cnf_rightDist" (formula "29"))
                           (rule "andLeft" (formula "29"))
                           (rule "commute_or" (formula "30"))
                           (rule "cnf_rightDist" (formula "3") (term "0,0,0"))
                           (rule "distr_forallAnd" (formula "3") (term "0,0"))
                           (rule "distr_forallAnd" (formula "3") (term "0"))
                           (rule "distr_forallAnd" (formula "3"))
                           (rule "andLeft" (formula "3"))
                           (rule "shift_paren_or" (formula "2") (term "0,0,0"))
                            (builtin "One Step Simplification" (formula "2"))
                           (rule "eqSymm" (formula "2") (term "1,1,0,0,0"))
                           (rule "castedGetAny" (formula "2") (term "1,0,0,0,0,0,0"))
                           (rule "castedGetAny" (formula "2") (term "0,0,1,0,0,0"))
                           (rule "castedGetAny" (formula "2") (term "0,1,1,0,0,0"))
                            (builtin "One Step Simplification" (formula "2"))
                           (rule "true_left" (formula "2"))
                           (rule "commute_or_2" (formula "2") (term "0,0,0"))
                            (builtin "One Step Simplification" (formula "2"))
                           (rule "eqSymm" (formula "2") (term "1,0,0,0,0"))
                           (rule "castedGetAny" (formula "2") (term "1,0,0,1,0,0,0"))
                           (rule "castedGetAny" (formula "2") (term "0,0,0,0,0,0"))
                           (rule "castedGetAny" (formula "2") (term "0,1,0,0,0,0"))
                            (builtin "One Step Simplification" (formula "2"))
                           (rule "true_left" (formula "2"))
                           (rule "shift_paren_or" (formula "2") (term "0,0,0"))
                            (builtin "One Step Simplification" (formula "2"))
                           (rule "eqSymm" (formula "2") (term "1,1,0,0,0"))
                           (rule "castedGetAny" (formula "2") (term "0,0,1,0,0,0"))
                           (rule "castedGetAny" (formula "2") (term "1,0,0,0,0,0,0"))
                           (rule "castedGetAny" (formula "2") (term "0,1,1,0,0,0"))
                            (builtin "One Step Simplification" (formula "2"))
                           (rule "true_left" (formula "2"))
                           (rule "cnf_rightDist" (formula "1") (term "0,0,0"))
                           (rule "distr_forallAnd" (formula "1") (term "0,0"))
                           (rule "distr_forallAnd" (formula "1") (term "0"))
                           (rule "distr_forallAnd" (formula "1"))
                           (rule "andLeft" (formula "1"))
                           (rule "commute_or_2" (formula "1") (term "0,0,0"))
                            (builtin "One Step Simplification" (formula "1"))
                           (rule "eqSymm" (formula "1") (term "1,0,0,0,0"))
                           (rule "castedGetAny" (formula "1") (term "0,0,0,0,0,0"))
                           (rule "castedGetAny" (formula "1") (term "1,0,0,1,0,0,0"))
                           (rule "castedGetAny" (formula "1") (term "0,1,0,0,0,0"))
                            (builtin "One Step Simplification" (formula "1"))
                           (rule "true_left" (formula "1"))
                           (rule "shift_paren_or" (formula "1") (term "0,0,0"))
                            (builtin "One Step Simplification" (formula "1"))
                           (rule "eqSymm" (formula "1") (term "1,1,0,0,0"))
                           (rule "castedGetAny" (formula "1") (term "0,0,1,0,0,0"))
                           (rule "castedGetAny" (formula "1") (term "1,0,0,0,0,0,0"))
                           (rule "castedGetAny" (formula "1") (term "0,1,1,0,0,0"))
                            (builtin "One Step Simplification" (formula "1"))
                           (rule "true_left" (formula "1"))
                           (rule "cut_direct" (formula "26") (term "0"))
                           (branch "CUT: result_228_A_1.value@heapAtPre_A«anonHeapFunction» = 0 TRUE"
                               (builtin "One Step Simplification" (formula "27"))
                              (rule "true_left" (formula "27"))
                              (rule "replace_known_left" (formula "28") (term "0") (ifseqformula "26"))
                               (builtin "One Step Simplification" (formula "28"))
                              (rule "true_left" (formula "28"))
                              (rule "replace_known_left" (formula "27") (term "0") (ifseqformula "26"))
                               (builtin "One Step Simplification" (formula "27"))
                              (rule "true_left" (formula "27"))
                              (rule "applyEq" (formula "28") (term "1,0,0") (ifseqformula "26"))
                              (rule "polySimp_mulComm0" (formula "28") (term "0"))
                              (rule "applyEq" (formula "25") (term "0") (ifseqformula "26"))
                              (rule "qeq_literals" (formula "25"))
                              (rule "true_left" (formula "25"))
                              (rule "applyEq" (formula "26") (term "1,0") (ifseqformula "25"))
                              (rule "eqSymm" (formula "26"))
                              (rule "polySimp_homoEq" (formula "26"))
                              (rule "polySimp_mulLiterals" (formula "26") (term "1,0"))
                              (rule "polySimp_elimOne" (formula "26") (term "1,0"))
                              (rule "applyEq" (formula "5") (term "1") (ifseqformula "25"))
                              (rule "applyEq" (formula "55") (term "1") (ifseqformula "25"))
                              (rule "applyEq" (formula "21") (term "1") (ifseqformula "25"))
                              (rule "applyEq" (formula "27") (term "0,0") (ifseqformula "25"))
                              (rule "times_zero_2" (formula "27") (term "0"))
                              (rule "polySimp_homoEq" (formula "27"))
                              (rule "mul_literals" (formula "27") (term "1,0"))
                              (rule "add_zero_right" (formula "27") (term "0"))
                              (rule "applyEq" (formula "26") (term "1,1,0") (ifseqformula "25"))
                              (rule "polySimp_addComm0" (formula "26") (term "0"))
                              (rule "polySimp_sepNegMonomial" (formula "27"))
                              (rule "polySimp_mulLiterals" (formula "27") (term "0"))
                              (rule "polySimp_elimOne" (formula "27") (term "0"))
                              (rule "applyEq" (formula "2") (term "0") (ifseqformula "27"))
                              (rule "applyEq" (formula "26") (term "0,1,0") (ifseqformula "27"))
                              (rule "polySimp_addComm0" (formula "26") (term "0"))
                              (rule "applyEq" (formula "26") (term "0,0,1,0") (ifseqformula "27"))
                              (rule "polySimp_addComm0" (formula "26") (term "0"))
                              (rule "applyEq" (formula "4") (term "1") (ifseqformula "27"))
                              (rule "polySimp_sepPosMonomial" (formula "26"))
                              (rule "div_axiom" (formula "26") (term "0,1") (inst "quotient=quotient_1"))
                               (builtin "One Step Simplification" (formula "26"))
                              (rule "true_left" (formula "26"))
                              (rule "jdiv_axiom" (formula "26") (term "0"))
                              (rule "eqSymm" (formula "26"))
                              (rule "applyEq" (formula "26") (term "1") (ifseqformula "27"))
                               (builtin "One Step Simplification" (formula "26"))
                              (rule "eqSymm" (formula "26") (term "1"))
                              (rule "polySimp_homoEq" (formula "26") (term "1"))
                              (rule "polySimp_mulLiterals" (formula "26") (term "1,0,1"))
                              (rule "polySimp_elimOne" (formula "26") (term "1,0,1"))
                              (rule "polySimp_sepPosMonomial" (formula "26") (term "1"))
                              (rule "inEqSimp_contradInEq0" (formula "26") (term "0,0") (ifseqformula "2"))
                              (rule "qeq_literals" (formula "26") (term "0,0,0"))
                               (builtin "One Step Simplification" (formula "26"))
                              (rule "true_left" (formula "26"))
                              (rule "Use_information_flow_contract_for_compareTo_325434207" (formula "17") (ifseqformula "17"))
                               (builtin "One Step Simplification" (formula "17") (ifInst ""  (formula "94")) (ifInst ""  (formula "94")))
                              (rule "true_left" (formula "17"))
                              (rule "Use_information_flow_contract_for_getOrder_757678341" (formula "57") (ifseqformula "23"))
                              (rule "applyEq" (formula "57") (term "0,1,1") (ifseqformula "5"))
                              (rule "eqSymm" (formula "57") (term "1,1"))
                              (rule "replace_known_left" (formula "57") (term "1,1") (ifseqformula "25"))
                               (builtin "One Step Simplification" (formula "57"))
                              (rule "true_left" (formula "57"))
                              (rule "Use_information_flow_contract_for_multiply_1272441881_0" (formula "70") (ifseqformula "34"))
                              (rule "replaceKnownSelect_taclet21_11" (formula "70") (term "1,1,1"))
                              (rule "replaceKnownSelect_taclet21_12" (formula "70") (term "0,1,1"))
                              (rule "replaceKnownAuxiliaryConstant_taclet1111021_18" (formula "70") (term "1,1,1"))
                              (rule "replaceKnownAuxiliaryConstant_taclet11111021_19" (formula "70") (term "0,1,1"))
                              (rule "replaceKnownSelect_taclet21_9" (formula "70") (term "0,1,0,1"))
                              (rule "replaceKnownSelect_taclet21_8" (formula "70") (term "1,1,0,1"))
                              (rule "replaceKnownAuxiliaryConstant_taclet021_15" (formula "70") (term "0,1,0,1"))
                              (rule "replaceKnownAuxiliaryConstant_taclet21_10" (formula "70") (term "1,1,0,1"))
                              (rule "replaceKnownAuxiliaryConstant_taclet021_15" (formula "70") (term "1,1,0,1"))
                               (builtin "One Step Simplification" (formula "70") (ifInst ""  (formula "85")) (ifInst ""  (formula "84")) (ifInst ""  (formula "102")))
                              (rule "pullOutSelect" (formula "70") (term "0,0,1") (inst "selectSK=org_bouncycastle_math_ec_ECPoint_value_4"))
                              (rule "simplifySelectOfAnonEQ" (formula "70") (ifseqformula "59"))
                               (builtin "One Step Simplification" (formula "70") (ifInst ""  (formula "100")) (ifInst ""  (formula "46")))
                              (rule "applyEqReverse" (formula "71") (term "0,0,1") (ifseqformula "70"))
                              (rule "hideAuxiliaryEq" (formula "70"))
                              (rule "eqSymm" (formula "70") (term "0,1"))
                              (rule "applyEq" (formula "70") (term "1,0,1") (ifseqformula "3"))
                              (rule "pullOutSelect" (formula "70") (term "0,0,1") (inst "selectSK=org_bouncycastle_math_ec_ECPoint_value_5"))
                              (rule "simplifySelectOfAnonEQ" (formula "70") (ifseqformula "24"))
                               (builtin "One Step Simplification" (formula "70") (ifInst ""  (formula "99")) (ifInst ""  (formula "12")))
                              (rule "applyEqReverse" (formula "71") (term "0,0,1") (ifseqformula "70"))
                               (builtin "One Step Simplification" (formula "71"))
                              (rule "notLeft" (formula "71"))
                              (rule "hideAuxiliaryEq" (formula "70"))
                              (rule "Class_invariant_axiom_for_org_bouncycastle_math_ec_ECPoint" (formula "76") (term "0"))
                               (builtin "One Step Simplification" (formula "76"))
                              (rule "Class_invariant_axiom_for_org_bouncycastle_math_ec_ECPoint" (formula "76"))
                              (rule "closeTrue" (formula "76"))
                           )
                           (branch "CUT: result_228_A_1.value@heapAtPre_A«anonHeapFunction» = 0 FALSE"
                               (builtin "One Step Simplification" (formula "26"))
                              (rule "replace_known_right" (formula "28") (term "0") (ifseqformula "79"))
                               (builtin "One Step Simplification" (formula "28"))
                              (rule "replace_known_right" (formula "27") (term "0") (ifseqformula "79"))
                               (builtin "One Step Simplification" (formula "27"))
                              (rule "applyEq" (formula "30") (term "0,0") (ifseqformula "27"))
                              (rule "polySimp_mulComm0" (formula "30") (term "0"))
                              (rule "applyEq" (formula "28") (term "0") (ifseqformula "30"))
                              (rule "inEqSimp_homoInEq1" (formula "28"))
                              (rule "polySimp_mulComm0" (formula "28") (term "1,0"))
                              (rule "polySimp_rightDist" (formula "28") (term "1,0"))
                              (rule "polySimp_mulLiterals" (formula "28") (term "1,1,0"))
                              (rule "polySimp_elimOne" (formula "28") (term "1,1,0"))
                              (rule "polySimp_mulComm0" (formula "28") (term "0,1,0"))
                              (rule "polySimp_addComm1" (formula "28") (term "0"))
                              (rule "polySimp_addAssoc" (formula "28") (term "0,0"))
                              (rule "polySimp_addComm1" (formula "28") (term "0,0,0"))
                              (rule "polySimp_pullOutFactor2b" (formula "28") (term "0,0"))
                              (rule "add_literals" (formula "28") (term "1,1,0,0"))
                              (rule "times_zero_1" (formula "28") (term "1,0,0"))
                              (rule "add_zero_right" (formula "28") (term "0,0"))
                              (rule "applyEq" (formula "26") (term "0") (ifseqformula "30"))
                              (rule "inEqSimp_homoInEq0" (formula "26"))
                              (rule "polySimp_mulComm0" (formula "26") (term "1,0"))
                              (rule "polySimp_rightDist" (formula "26") (term "1,0"))
                              (rule "polySimp_mulLiterals" (formula "26") (term "1,1,0"))
                              (rule "polySimp_elimOne" (formula "26") (term "1,1,0"))
                              (rule "polySimp_mulComm0" (formula "26") (term "0,1,0"))
                              (rule "polySimp_addAssoc" (formula "26") (term "0"))
                              (rule "polySimp_addComm0" (formula "26") (term "0,0"))
                              (rule "polySimp_pullOutFactor2b" (formula "26") (term "0"))
                              (rule "add_literals" (formula "26") (term "1,1,0"))
                              (rule "times_zero_1" (formula "26") (term "1,0"))
                              (rule "add_zero_right" (formula "26") (term "0"))
                              (rule "applyEq" (formula "29") (term "0,1") (ifseqformula "27"))
                              (rule "inEqSimp_sepNegMonomial0" (formula "28"))
                              (rule "polySimp_mulLiterals" (formula "28") (term "0"))
                              (rule "polySimp_elimOne" (formula "28") (term "0"))
                              (rule "inEqSimp_invertInEq1" (formula "26"))
                              (rule "mul_literals" (formula "26") (term "1"))
                              (rule "polySimp_mulLiterals" (formula "26") (term "0"))
                              (rule "polySimp_elimOne" (formula "26") (term "0"))
                              (rule "inEqSimp_strengthen1" (formula "25") (ifseqformula "79"))
                              (rule "add_zero_right" (formula "25") (term "1"))
                              (rule "inEqSimp_contradEq7" (formula "79") (ifseqformula "25"))
                              (rule "times_zero_1" (formula "79") (term "1,0,0"))
                              (rule "add_literals" (formula "79") (term "0,0"))
                              (rule "leq_literals" (formula "79") (term "0"))
                               (builtin "One Step Simplification" (formula "79"))
                              (rule "false_right" (formula "79"))
                              (rule "Use_information_flow_contract_for_compareTo_325434207" (formula "17") (ifseqformula "17"))
                               (builtin "One Step Simplification" (formula "17") (ifInst ""  (formula "97")) (ifInst ""  (formula "97")))
                              (rule "true_left" (formula "17"))
                              (rule "Use_information_flow_contract_for_getOrder_757678341" (formula "60") (ifseqformula "23"))
                              (rule "replace_known_left" (formula "60") (term "1,1") (ifseqformula "5"))
                               (builtin "One Step Simplification" (formula "60"))
                              (rule "true_left" (formula "60"))
                              (rule "Use_information_flow_contract_for_multiply_1272441881_0" (formula "73") (ifseqformula "37"))
                              (rule "replaceKnownSelect_taclet21_12" (formula "73") (term "0,1,1"))
                              (rule "replaceKnownSelect_taclet21_11" (formula "73") (term "1,1,1"))
                              (rule "replaceKnownAuxiliaryConstant_taclet11111021_19" (formula "73") (term "0,1,1"))
                              (rule "replaceKnownAuxiliaryConstant_taclet1111021_18" (formula "73") (term "1,1,1"))
                              (rule "replaceKnownSelect_taclet21_8" (formula "73") (term "1,1,0,1"))
                              (rule "replaceKnownSelect_taclet21_9" (formula "73") (term "0,1,0,1"))
                              (rule "replaceKnownAuxiliaryConstant_taclet21_10" (formula "73") (term "1,1,0,1"))
                               (builtin "One Step Simplification" (formula "73") (ifInst ""  (formula "88")) (ifInst ""  (formula "87")) (ifInst ""  (formula "105")))
                              (rule "pullOutSelect" (formula "73") (term "0,0,1") (inst "selectSK=org_bouncycastle_math_ec_ECPoint_value_4"))
                              (rule "simplifySelectOfAnonEQ" (formula "73") (ifseqformula "62"))
                               (builtin "One Step Simplification" (formula "73") (ifInst ""  (formula "103")) (ifInst ""  (formula "49")))
                              (rule "applyEqReverse" (formula "74") (term "0,0,1") (ifseqformula "73"))
                              (rule "hideAuxiliaryEq" (formula "73"))
                              (rule "eqSymm" (formula "73") (term "0,1"))
                              (rule "applyEq" (formula "73") (term "1,0,1") (ifseqformula "3"))
                              (rule "pullOutSelect" (formula "73") (term "0,0,1") (inst "selectSK=org_bouncycastle_math_ec_ECPoint_value_5"))
                              (rule "simplifySelectOfAnonEQ" (formula "73") (ifseqformula "24"))
                               (builtin "One Step Simplification" (formula "73") (ifInst ""  (formula "102")) (ifInst ""  (formula "12")))
                              (rule "applyEqReverse" (formula "74") (term "0,0,1") (ifseqformula "73"))
                               (builtin "One Step Simplification" (formula "74"))
                              (rule "notLeft" (formula "74"))
                              (rule "hideAuxiliaryEq" (formula "73"))
                              (rule "Class_invariant_axiom_for_org_bouncycastle_math_ec_ECPoint" (formula "79") (term "0"))
                               (builtin "One Step Simplification" (formula "79"))
                              (rule "Class_invariant_axiom_for_org_bouncycastle_math_ec_ECPoint" (formula "79"))
                              (rule "closeTrue" (formula "79"))
                           )
                        )
                        (branch "result_228_A_1.value@heapAtPre_A«anonHeapFunction» ≥ 0 FALSE"
                           (rule "inEqSimp_geqRight" (formula "79"))
                           (rule "times_zero_1" (formula "1") (term "1,0,0"))
                           (rule "add_literals" (formula "1") (term "0,0"))
                           (rule "inEqSimp_sepPosMonomial0" (formula "1"))
                           (rule "mul_literals" (formula "1") (term "1"))
                           (rule "inEqSimp_contradEq3" (formula "29") (term "0") (ifseqformula "1"))
                           (rule "mul_literals" (formula "29") (term "1,0,0,0"))
                           (rule "add_literals" (formula "29") (term "0,0,0"))
                           (rule "qeq_literals" (formula "29") (term "0,0"))
                            (builtin "One Step Simplification" (formula "29"))
                           (rule "andLeft" (formula "29"))
                           (rule "andLeft" (formula "29"))
                           (rule "applyEq" (formula "33") (term "0,0") (ifseqformula "30"))
                           (rule "polySimp_mulComm0" (formula "33") (term "0"))
                           (rule "applyEq" (formula "31") (term "0") (ifseqformula "33"))
                           (rule "inEqSimp_homoInEq1" (formula "31"))
                           (rule "polySimp_mulComm0" (formula "31") (term "1,0"))
                           (rule "polySimp_rightDist" (formula "31") (term "1,0"))
                           (rule "polySimp_mulLiterals" (formula "31") (term "1,1,0"))
                           (rule "polySimp_elimOne" (formula "31") (term "1,1,0"))
                           (rule "polySimp_mulComm0" (formula "31") (term "0,1,0"))
                           (rule "polySimp_addComm1" (formula "31") (term "0"))
                           (rule "polySimp_addAssoc" (formula "31") (term "0,0"))
                           (rule "polySimp_addComm1" (formula "31") (term "0,0,0"))
                           (rule "polySimp_pullOutFactor2b" (formula "31") (term "0,0"))
                           (rule "add_literals" (formula "31") (term "1,1,0,0"))
                           (rule "times_zero_1" (formula "31") (term "1,0,0"))
                           (rule "add_zero_right" (formula "31") (term "0,0"))
                           (rule "applyEq" (formula "29") (term "0") (ifseqformula "33"))
                           (rule "inEqSimp_homoInEq0" (formula "29"))
                           (rule "polySimp_mulComm0" (formula "29") (term "1,0"))
                           (rule "polySimp_rightDist" (formula "29") (term "1,0"))
                           (rule "polySimp_mulLiterals" (formula "29") (term "1,1,0"))
                           (rule "polySimp_elimOne" (formula "29") (term "1,1,0"))
                           (rule "polySimp_mulComm0" (formula "29") (term "0,1,0"))
                           (rule "polySimp_addAssoc" (formula "29") (term "0"))
                           (rule "polySimp_addComm0" (formula "29") (term "0,0"))
                           (rule "polySimp_pullOutFactor2b" (formula "29") (term "0"))
                           (rule "add_literals" (formula "29") (term "1,1,0"))
                           (rule "times_zero_1" (formula "29") (term "1,0"))
                           (rule "add_zero_right" (formula "29") (term "0"))
                           (rule "applyEq" (formula "32") (term "0,1") (ifseqformula "30"))
                           (rule "inEqSimp_sepPosMonomial0" (formula "31"))
                           (rule "polySimp_mulComm0" (formula "31") (term "1"))
                           (rule "polySimp_rightDist" (formula "31") (term "1"))
                           (rule "mul_literals" (formula "31") (term "0,1"))
                           (rule "polySimp_mulLiterals" (formula "31") (term "1,1"))
                           (rule "polySimp_elimOne" (formula "31") (term "1,1"))
                           (rule "inEqSimp_invertInEq1" (formula "29"))
                           (rule "polySimp_mulLiterals" (formula "29") (term "0"))
                           (rule "mul_literals" (formula "29") (term "1"))
                           (rule "polySimp_elimOne" (formula "29") (term "0"))
                           (rule "cnf_rightDist" (formula "4") (term "0,0,0"))
                           (rule "distr_forallAnd" (formula "4") (term "0,0"))
                           (rule "distr_forallAnd" (formula "4") (term "0"))
                           (rule "distr_forallAnd" (formula "4"))
                           (rule "andLeft" (formula "4"))
                           (rule "shift_paren_or" (formula "3") (term "0,0,0"))
                            (builtin "One Step Simplification" (formula "3"))
                           (rule "eqSymm" (formula "3") (term "1,1,0,0,0"))
                           (rule "castedGetAny" (formula "3") (term "1,0,0,0,0,0,0"))
                           (rule "castedGetAny" (formula "3") (term "0,0,1,0,0,0"))
                           (rule "castedGetAny" (formula "3") (term "0,1,1,0,0,0"))
                            (builtin "One Step Simplification" (formula "3"))
                           (rule "true_left" (formula "3"))
                           (rule "cnf_rightDist" (formula "2") (term "0,0,0"))
                           (rule "distr_forallAnd" (formula "2") (term "0,0"))
                           (rule "distr_forallAnd" (formula "2") (term "0"))
                           (rule "distr_forallAnd" (formula "2"))
                           (rule "andLeft" (formula "2"))
                           (rule "commute_or_2" (formula "3") (term "0,0,0"))
                            (builtin "One Step Simplification" (formula "3"))
                           (rule "eqSymm" (formula "3") (term "1,0,0,0,0"))
                           (rule "castedGetAny" (formula "3") (term "1,0,0,1,0,0,0"))
                           (rule "castedGetAny" (formula "3") (term "0,0,0,0,0,0"))
                           (rule "castedGetAny" (formula "3") (term "0,1,0,0,0,0"))
                            (builtin "One Step Simplification" (formula "3"))
                           (rule "true_left" (formula "3"))
                           (rule "commute_or_2" (formula "2") (term "0,0,0"))
                            (builtin "One Step Simplification" (formula "2"))
                           (rule "eqSymm" (formula "2") (term "1,0,0,0,0"))
                           (rule "castedGetAny" (formula "2") (term "0,0,0,0,0,0"))
                           (rule "castedGetAny" (formula "2") (term "1,0,0,1,0,0,0"))
                           (rule "castedGetAny" (formula "2") (term "0,1,0,0,0,0"))
                            (builtin "One Step Simplification" (formula "2"))
                           (rule "true_left" (formula "2"))
                           (rule "shift_paren_or" (formula "2") (term "0,0,0"))
                            (builtin "One Step Simplification" (formula "2"))
                           (rule "eqSymm" (formula "2") (term "1,1,0,0,0"))
                           (rule "castedGetAny" (formula "2") (term "0,0,1,0,0,0"))
                           (rule "castedGetAny" (formula "2") (term "1,0,0,0,0,0,0"))
                           (rule "castedGetAny" (formula "2") (term "0,1,1,0,0,0"))
                            (builtin "One Step Simplification" (formula "2"))
                           (rule "true_left" (formula "2"))
                           (rule "Use_information_flow_contract_for_compareTo_325434207" (formula "18") (ifseqformula "18"))
                            (builtin "One Step Simplification" (formula "18") (ifInst ""  (formula "97")) (ifInst ""  (formula "97")))
                           (rule "true_left" (formula "18"))
                           (rule "Use_information_flow_contract_for_getOrder_757678341" (formula "60") (ifseqformula "24"))
                           (rule "replace_known_left" (formula "60") (term "1,1") (ifseqformula "6"))
                            (builtin "One Step Simplification" (formula "60"))
                           (rule "true_left" (formula "60"))
                           (rule "Use_information_flow_contract_for_getOrder_757678341" (formula "60") (ifseqformula "60"))
                            (builtin "One Step Simplification" (formula "60"))
                           (rule "true_left" (formula "60"))
                           (rule "Use_information_flow_contract_for_compareTo_325434207" (formula "54") (ifseqformula "18"))
                           (rule "replace_known_right" (formula "54") (term "0,1,0,0") (ifseqformula "98"))
                            (builtin "One Step Simplification" (formula "54") (ifInst ""  (formula "97")) (ifInst ""  (formula "5")))
                           (rule "applyEq" (formula "54") (term "0,0,1") (ifseqformula "56"))
                           (rule "eqSymm" (formula "54") (term "0,1"))
                           (rule "replace_known_left" (formula "54") (term "0,1") (ifseqformula "19"))
                            (builtin "One Step Simplification" (formula "54"))
                           (rule "Class_invariant_axiom_for_java_math_BigInteger" (formula "54") (term "1,0"))
                           (rule "replace_known_left" (formula "54") (term "1,1,0") (ifseqformula "19"))
                            (builtin "One Step Simplification" (formula "54") (ifInst ""  (formula "97")))
                           (rule "Class_invariant_axiom_for_java_math_BigInteger" (formula "54") (term "0"))
                           (rule "replace_known_right" (formula "54") (term "0,0,0") (ifseqformula "98"))
                            (builtin "One Step Simplification" (formula "54") (ifInst ""  (formula "56")))
                           (rule "applyEq" (formula "55") (term "4") (ifseqformula "54"))
                           (rule "applyEq" (formula "53") (term "0") (ifseqformula "54"))
                           (rule "applyEq" (formula "46") (term "0") (ifseqformula "53"))
                           (rule "Use_information_flow_contract_for_getOrder_757678341" (formula "24") (ifseqformula "24"))
                            (builtin "One Step Simplification" (formula "24"))
                           (rule "true_left" (formula "24"))
                           (rule "Use_information_flow_contract_for_getOrder_757678341" (formula "24") (ifseqformula "59"))
                           (rule "eqSymm" (formula "24") (term "0,1"))
                           (rule "eqSymm" (formula "24") (term "1,1"))
                           (rule "replace_known_left" (formula "24") (term "1,1") (ifseqformula "6"))
                            (builtin "One Step Simplification" (formula "24"))
                           (rule "true_left" (formula "24"))
                           (rule "Use_information_flow_contract_for_multiply_1272441881_0" (formula "72") (ifseqformula "37"))
                           (rule "replaceKnownSelect_taclet21_12" (formula "72") (term "0,1,1"))
                           (rule "replaceKnownSelect_taclet21_11" (formula "72") (term "1,1,1"))
                           (rule "replaceKnownAuxiliaryConstant_taclet11111021_19" (formula "72") (term "0,1,1"))
                           (rule "replaceKnownAuxiliaryConstant_taclet1111021_18" (formula "72") (term "1,1,1"))
                           (rule "replaceKnownSelect_taclet21_8" (formula "72") (term "1,1,0,1"))
                           (rule "replaceKnownSelect_taclet21_9" (formula "72") (term "0,1,0,1"))
                           (rule "replaceKnownAuxiliaryConstant_taclet21_10" (formula "72") (term "1,1,0,1"))
                            (builtin "One Step Simplification" (formula "72") (ifInst ""  (formula "87")) (ifInst ""  (formula "86")) (ifInst ""  (formula "104")))
                           (rule "pullOutSelect" (formula "72") (term "1,0,1") (inst "selectSK=org_bouncycastle_math_ec_ECPoint_value_4"))
                           (rule "simplifySelectOfAnonEQ" (formula "72") (ifseqformula "25"))
                            (builtin "One Step Simplification" (formula "72") (ifInst ""  (formula "101")) (ifInst ""  (formula "13")))
                           (rule "applyEqReverse" (formula "73") (term "1,0,1") (ifseqformula "72"))
                           (rule "hideAuxiliaryEq" (formula "72"))
                           (rule "pullOutSelect" (formula "72") (term "0,0,1") (inst "selectSK=org_bouncycastle_math_ec_ECPoint_value_5"))
                           (rule "simplifySelectOfAnonEQ" (formula "72") (ifseqformula "61"))
                            (builtin "One Step Simplification" (formula "72") (ifInst ""  (formula "102")) (ifInst ""  (formula "48")))
                           (rule "applyEqReverse" (formula "73") (term "0,0,1") (ifseqformula "72"))
                           (rule "hideAuxiliaryEq" (formula "72"))
                           (rule "replace_known_left" (formula "72") (term "0,1") (ifseqformula "4"))
                            (builtin "One Step Simplification" (formula "72"))
                           (rule "notLeft" (formula "72"))
                           (rule "Class_invariant_axiom_for_org_bouncycastle_math_ec_ECPoint" (formula "78") (term "1"))
                            (builtin "One Step Simplification" (formula "78"))
                           (rule "Class_invariant_axiom_for_org_bouncycastle_math_ec_ECPoint" (formula "78"))
                           (rule "closeTrue" (formula "78"))
                        )
                     )
                  )
               )
            )
         )
      )
      (branch " result_229_A_0.<created>@heapAtPre_A«anonHeapFunction» = TRUE FALSE"
         (rule "applyEqReverse" (formula "67") (term "1") (ifseqformula "66"))
         (rule "applyEqReverse" (formula "30") (term "0,1") (ifseqformula "66"))
         (rule "hideAuxiliaryEq" (formula "66"))
         (rule "replace_known_right" (formula "28") (term "1") (ifseqformula "78"))
          (builtin "One Step Simplification" (formula "28"))
         (rule "ifthenelse_split" (formula "66") (term "0"))
         (branch " result_229_B_0.<created>@heapAtPre_B«anonHeapFunction» = TRUE TRUE"
            (rule "replace_known_left" (formula "63") (term "1") (ifseqformula "66"))
             (builtin "One Step Simplification" (formula "63"))
            (rule "true_left" (formula "63"))
            (rule "ifthenelse_split" (formula "3") (term "0"))
            (branch " resultAtPost_226_A.<created>@heapAtPre_A«anonHeapFunction» = TRUE TRUE"
               (rule "applyEqReverse" (formula "5") (term "1,0") (ifseqformula "4"))
               (rule "hideAuxiliaryEq" (formula "4"))
               (rule "replace_known_left" (formula "4") (term "1,0,0") (ifseqformula "3"))
                (builtin "One Step Simplification" (formula "4"))
               (rule "applyEqReverse" (formula "99") (term "1") (ifseqformula "4"))
               (rule "hideAuxiliaryEq" (formula "4"))
               (rule "eqSymm" (formula "98"))
               (rule "replace_known_left" (formula "35") (term "1") (ifseqformula "3"))
                (builtin "One Step Simplification" (formula "35"))
               (rule "true_left" (formula "35"))
               (rule "ifthenelse_split" (formula "1") (term "0"))
               (branch " resultAtPost_226_B.<created>@heapAtPre_B«anonHeapFunction» = TRUE TRUE"
                  (rule "applyEqReverse" (formula "3") (term "1,0") (ifseqformula "2"))
                  (rule "hideAuxiliaryEq" (formula "2"))
                  (rule "replace_known_left" (formula "2") (term "1,0,0") (ifseqformula "1"))
                   (builtin "One Step Simplification" (formula "2"))
                  (rule "applyEqReverse" (formula "97") (term "1") (ifseqformula "2"))
                  (rule "hideAuxiliaryEq" (formula "2"))
                  (rule "eqSymm" (formula "96"))
                  (rule "replace_known_left" (formula "68") (term "1") (ifseqformula "1"))
                   (builtin "One Step Simplification" (formula "68"))
                  (rule "true_left" (formula "68"))
                  (rule "Class_axiom_0_in_de_polyas_core3_open_cred_CredTool" (inst "seq=seq") (inst "i=i") (inst "str=str") (inst "seq_0=seq_0") (inst "i_0=i_0") (inst "sv_heap=heapAtPre_B<<anonHeapFunction>>"))
                  (rule "andLeft" (formula "1"))
                  (rule "castedGetAny" (formula "1") (term "0,0,0,0,0"))
                  (rule "castedGetAny" (formula "1") (term "0,0,1,0,0"))
                  (rule "castedGetAny" (formula "2") (term "0,1,1,0,0,0"))
                  (rule "nnf_imp2or" (formula "1") (term "0,0"))
                   (builtin "One Step Simplification" (formula "1"))
                  (rule "nnf_imp2or" (formula "2") (term "0,0,0"))
                  (rule "nnf_notAnd" (formula "2") (term "0,0,0,0"))
                   (builtin "One Step Simplification" (formula "2"))
                  (rule "nnf_imp2or" (formula "2") (term "1,0,0,0"))
                  (rule "nnf_notOr" (formula "2") (term "0,0,0,0,0"))
                  (rule "nnf_notAnd" (formula "2") (term "0,1,0,0,0"))
                   (builtin "One Step Simplification" (formula "2"))
                  (rule "commute_or" (formula "2") (term "0,0,0,0"))
                  (rule "commute_or_2" (formula "2") (term "0,0,0"))
                  (rule "shift_paren_or" (formula "2") (term "0,0,0,0"))
                  (rule "commute_and" (formula "2") (term "1,0,0,0"))
                  (rule "shift_paren_or" (formula "2") (term "0,0,0,0,0"))
                  (rule "commute_or_2" (formula "2") (term "0,0,0,0,0"))
                   (builtin "One Step Simplification" (formula "2"))
                  (rule "commute_or_2" (formula "2") (term "0,0,0,0"))
                  (rule "cnf_rightDist" (formula "2") (term "0,0,0"))
                  (rule "distr_forallAnd" (formula "2") (term "0,0"))
                  (rule "distr_forallAnd" (formula "2") (term "0"))
                  (rule "distr_forallAnd" (formula "2"))
                  (rule "andLeft" (formula "2"))
                  (rule "commute_or_2" (formula "2") (term "0,0,0"))
                   (builtin "One Step Simplification" (formula "2"))
                  (rule "eqSymm" (formula "2") (term "1,0,0,0,0"))
                  (rule "castedGetAny" (formula "2") (term "1,0,0,1,0,0,0"))
                  (rule "castedGetAny" (formula "2") (term "0,0,0,0,0,0"))
                  (rule "castedGetAny" (formula "2") (term "0,1,0,0,0,0"))
                   (builtin "One Step Simplification" (formula "2"))
                  (rule "true_left" (formula "2"))
                  (rule "shift_paren_or" (formula "2") (term "0,0,0"))
                   (builtin "One Step Simplification" (formula "2"))
                  (rule "eqSymm" (formula "2") (term "1,1,0,0,0"))
                  (rule "castedGetAny" (formula "2") (term "0,0,1,0,0,0"))
                  (rule "castedGetAny" (formula "2") (term "0,0,0,0,0,0"))
                  (rule "castedGetAny" (formula "2") (term "0,1,1,0,0,0"))
                   (builtin "One Step Simplification" (formula "2"))
                  (rule "true_left" (formula "2"))
                  (rule "Class_axiom_0_in_de_polyas_core3_open_cred_CredTool" (inst "seq=seq") (inst "i=i") (inst "str=str") (inst "seq_0=seq_0") (inst "i_0=i_0") (inst "sv_heap=anon_heap_mod<<anonHeapFunction>>"))
                  (rule "andLeft" (formula "1"))
                  (rule "castedGetAny" (formula "1") (term "0,0,0,0,0"))
                  (rule "castedGetAny" (formula "1") (term "0,0,1,0,0"))
                  (rule "castedGetAny" (formula "2") (term "0,1,1,0,0,0"))
                  (rule "nnf_imp2or" (formula "1") (term "0,0"))
                   (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "3")))
                  (rule "true_left" (formula "1"))
                  (rule "nnf_imp2or" (formula "1") (term "0,0,0"))
                  (rule "nnf_notAnd" (formula "1") (term "0,0,0,0"))
                   (builtin "One Step Simplification" (formula "1"))
                  (rule "nnf_imp2or" (formula "1") (term "1,0,0,0"))
                  (rule "nnf_notOr" (formula "1") (term "0,0,0,0,0"))
                  (rule "nnf_notAnd" (formula "1") (term "0,1,0,0,0"))
                   (builtin "One Step Simplification" (formula "1"))
                  (rule "commute_or" (formula "1") (term "0,0,0,0"))
                  (rule "commute_or_2" (formula "1") (term "0,0,0"))
                  (rule "shift_paren_or" (formula "1") (term "0,0,0,0"))
                  (rule "commute_and" (formula "1") (term "1,0,0,0"))
                  (rule "shift_paren_or" (formula "1") (term "0,0,0,0,0"))
                  (rule "commute_or_2" (formula "1") (term "0,0,0,0,0"))
                   (builtin "One Step Simplification" (formula "1"))
                  (rule "commute_or_2" (formula "1") (term "0,0,0,0"))
                  (rule "cnf_rightDist" (formula "1") (term "0,0,0"))
                  (rule "distr_forallAnd" (formula "1") (term "0,0"))
                  (rule "distr_forallAnd" (formula "1") (term "0"))
                  (rule "distr_forallAnd" (formula "1"))
                  (rule "andLeft" (formula "1"))
                  (rule "commute_or_2" (formula "1") (term "0,0,0"))
                   (builtin "One Step Simplification" (formula "1"))
                  (rule "eqSymm" (formula "1") (term "1,0,0,0,0"))
                  (rule "castedGetAny" (formula "1") (term "1,0,0,1,0,0,0"))
                  (rule "castedGetAny" (formula "1") (term "0,0,0,0,0,0"))
                  (rule "castedGetAny" (formula "1") (term "0,1,0,0,0,0"))
                   (builtin "One Step Simplification" (formula "1"))
                  (rule "true_left" (formula "1"))
                  (rule "shift_paren_or" (formula "1") (term "0,0,0"))
                   (builtin "One Step Simplification" (formula "1"))
                  (rule "eqSymm" (formula "1") (term "1,1,0,0,0"))
                  (rule "castedGetAny" (formula "1") (term "0,0,1,0,0,0"))
                  (rule "castedGetAny" (formula "1") (term "0,0,0,0,0,0"))
                  (rule "castedGetAny" (formula "1") (term "0,1,1,0,0,0"))
                   (builtin "One Step Simplification" (formula "1"))
                  (rule "true_left" (formula "1"))
                  (rule "Class_axiom_0_in_de_polyas_core3_open_cred_CredTool" (inst "seq=seq") (inst "i=i") (inst "str=str") (inst "seq_0=seq_0") (inst "i_0=i_0") (inst "sv_heap=anon_heap_multiply<<anonHeapFunction>>"))
                  (rule "andLeft" (formula "1"))
                  (rule "castedGetAny" (formula "1") (term "0,0,0,0,0"))
                  (rule "castedGetAny" (formula "1") (term "0,0,1,0,0"))
                  (rule "castedGetAny" (formula "2") (term "0,1,1,0,0,0"))
                  (rule "nnf_imp2or" (formula "1") (term "0,0"))
                   (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "3")))
                  (rule "true_left" (formula "1"))
                  (rule "nnf_imp2or" (formula "1") (term "0,0,0"))
                  (rule "nnf_notAnd" (formula "1") (term "0,0,0,0"))
                   (builtin "One Step Simplification" (formula "1"))
                  (rule "nnf_imp2or" (formula "1") (term "1,0,0,0"))
                  (rule "nnf_notOr" (formula "1") (term "0,0,0,0,0"))
                  (rule "nnf_notAnd" (formula "1") (term "0,1,0,0,0"))
                   (builtin "One Step Simplification" (formula "1"))
                  (rule "commute_or" (formula "1") (term "0,0,0,0"))
                  (rule "commute_or_2" (formula "1") (term "0,0,0"))
                  (rule "Class_axiom_0_in_de_polyas_core3_open_cred_CredTool" (inst "seq=seq") (inst "i=i") (inst "str=str") (inst "seq_0=seq_0") (inst "i_0=i_0") (inst "sv_heap=heapAtPre_A<<anonHeapFunction>>"))
                  (rule "andLeft" (formula "1"))
                  (rule "castedGetAny" (formula "1") (term "0,0,0,0,0"))
                  (rule "castedGetAny" (formula "1") (term "0,0,1,0,0"))
                  (rule "castedGetAny" (formula "2") (term "0,1,1,0,0,0"))
                  (rule "nnf_imp2or" (formula "1") (term "0,0"))
                   (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "4")))
                  (rule "true_left" (formula "1"))
                  (rule "nnf_imp2or" (formula "1") (term "0,0,0"))
                  (rule "nnf_notAnd" (formula "1") (term "0,0,0,0"))
                   (builtin "One Step Simplification" (formula "1"))
                  (rule "nnf_imp2or" (formula "1") (term "1,0,0,0"))
                  (rule "nnf_notOr" (formula "1") (term "0,0,0,0,0"))
                  (rule "nnf_notAnd" (formula "1") (term "0,1,0,0,0"))
                   (builtin "One Step Simplification" (formula "1"))
                  (rule "commute_or" (formula "1") (term "0,0,0,0"))
                  (rule "commute_or_2" (formula "1") (term "0,0,0"))
                  (rule "Class_axiom_0_in_de_polyas_core3_open_cred_CredTool" (inst "seq=seq") (inst "i=i") (inst "str=str") (inst "seq_0=seq_0") (inst "i_0=i_0") (inst "sv_heap=anon(heapAtPre_A<<anonHeapFunction>>,
     empty,
     anon_heap_mod<<anonHeapFunction>>)"))
                   (builtin "One Step Simplification" (formula "1"))
                  (rule "andLeft" (formula "1"))
                  (rule "castedGetAny" (formula "1") (term "0,0,1,0,0"))
                  (rule "castedGetAny" (formula "1") (term "0,0,0,0,0"))
                  (rule "castedGetAny" (formula "2") (term "0,1,1,0,0,0"))
                  (rule "nnf_imp2or" (formula "1") (term "0,0"))
                   (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "5")))
                  (rule "true_left" (formula "1"))
                  (rule "nnf_imp2or" (formula "1") (term "0,0,0"))
                  (rule "nnf_imp2or" (formula "1") (term "1,0,0,0"))
                  (rule "nnf_notAnd" (formula "1") (term "0,0,0,0"))
                   (builtin "One Step Simplification" (formula "1"))
                  (rule "nnf_notOr" (formula "1") (term "0,0,0,0,0"))
                  (rule "nnf_notAnd" (formula "1") (term "0,1,0,0,0"))
                   (builtin "One Step Simplification" (formula "1"))
                  (rule "nnf_notOr" (formula "1") (term "1,0,0,0,0,0"))
                  (rule "Class_axiom_0_in_de_polyas_core3_open_cred_CredTool" (inst "seq=seq") (inst "i=i") (inst "str=str") (inst "seq_0=seq_0") (inst "i_0=i_0") (inst "sv_heap=heapAfter_mod_A_0"))
                  (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "1,0,0,0,0,0,1") (ifseqformula "30"))
                  (rule "andLeft" (formula "1"))
                  (rule "castedGetAny" (formula "1") (term "0,0,0,0,0"))
                  (rule "castedGetAny" (formula "1") (term "0,0,1,0,0"))
                  (rule "castedGetAny" (formula "2") (term "0,1,1,0,0,0"))
                  (rule "nnf_imp2or" (formula "1") (term "0,0"))
                   (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "6")))
                  (rule "true_left" (formula "1"))
                  (rule "nnf_imp2or" (formula "1") (term "0,0,0"))
                  (rule "nnf_imp2or" (formula "1") (term "1,0,0,0"))
                  (rule "nnf_notAnd" (formula "1") (term "0,0,0,0"))
                   (builtin "One Step Simplification" (formula "1"))
                  (rule "nnf_notAnd" (formula "1") (term "0,1,0,0,0"))
                   (builtin "One Step Simplification" (formula "1"))
                  (rule "nnf_notOr" (formula "1") (term "0,0,0,0,0"))
                  (rule "nnf_notOr" (formula "1") (term "1,0,0,0,0,0"))
                  (rule "Class_axiom_0_in_de_polyas_core3_open_cred_CredTool" (inst "seq=seq") (inst "i=i") (inst "str=str") (inst "seq_0=seq_0") (inst "i_0=i_0") (inst "sv_heap=anon(heapAfter_mod_A_0,
     empty,
     anon_heap_multiply<<anonHeapFunction>>)"))
                   (builtin "One Step Simplification" (formula "1"))
                  (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,1,0,0,0,0,0,1") (ifseqformula "30"))
                  (rule "andLeft" (formula "1"))
                  (rule "castedGetAny" (formula "1") (term "0,0,0,0,0"))
                  (rule "castedGetAny" (formula "2") (term "0,1,1,0,0,0"))
                  (rule "castedGetAny" (formula "1") (term "0,0,1,0,0"))
                  (rule "nnf_imp2or" (formula "1") (term "0,0"))
                   (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "6")))
                  (rule "true_left" (formula "1"))
                  (rule "nnf_imp2or" (formula "1") (term "0,0,0"))
                  (rule "nnf_notAnd" (formula "1") (term "0,0,0,0"))
                   (builtin "One Step Simplification" (formula "1"))
                  (rule "nnf_imp2or" (formula "1") (term "1,0,0,0"))
                  (rule "nnf_notOr" (formula "1") (term "0,0,0,0,0"))
                  (rule "nnf_notAnd" (formula "1") (term "0,1,0,0,0"))
                   (builtin "One Step Simplification" (formula "1"))
                  (rule "nnf_notOr" (formula "1") (term "1,0,0,0,0,0"))
                  (rule "nnf_notOr" (formula "1") (term "0,1,0,0,0,0,0"))
                  (rule "Class_axiom_0_in_de_polyas_core3_open_cred_CredTool" (inst "seq=seq") (inst "i=i") (inst "str=str") (inst "seq_0=seq_0") (inst "i_0=i_0") (inst "sv_heap=heapAfter_multiply_A_1"))
                  (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "1,0,0,0,0,0,1") (ifseqformula "38"))
                  (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,1,0,0,0,0,0,1") (ifseqformula "31"))
                  (rule "andLeft" (formula "1"))
                  (rule "castedGetAny" (formula "1") (term "0,0,0,0,0"))
                  (rule "castedGetAny" (formula "2") (term "0,1,1,0,0,0"))
                  (rule "castedGetAny" (formula "1") (term "0,0,1,0,0"))
                  (rule "nnf_imp2or" (formula "1") (term "0,0"))
                   (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "7")))
                  (rule "true_left" (formula "1"))
                  (rule "nnf_imp2or" (formula "1") (term "0,0,0"))
                  (rule "nnf_imp2or" (formula "1") (term "1,0,0,0"))
                  (rule "nnf_notAnd" (formula "1") (term "0,0,0,0"))
                   (builtin "One Step Simplification" (formula "1"))
                  (rule "nnf_notOr" (formula "1") (term "0,0,0,0,0"))
                  (rule "nnf_notAnd" (formula "1") (term "0,1,0,0,0"))
                   (builtin "One Step Simplification" (formula "1"))
                  (rule "nnf_notOr" (formula "1") (term "1,0,0,0,0,0"))
                  (rule "nnf_notOr" (formula "1") (term "0,1,0,0,0,0,0"))
                  (rule "Class_axiom_0_in_de_polyas_core3_open_cred_CredTool" (inst "seq=seq") (inst "i=i") (inst "str=str") (inst "seq_0=seq_0") (inst "i_0=i_0") (inst "sv_heap=heapAtPost_A"))
                  (rule "andLeft" (formula "1"))
                  (rule "castedGetAny" (formula "2") (term "0,1,1,0,0,0"))
                  (rule "castedGetAny" (formula "1") (term "0,0,0,0,0"))
                  (rule "castedGetAny" (formula "1") (term "0,0,1,0,0"))
                  (rule "applyEqRigid" (formula "2") (term "0,0,1,0,0,0,0,0") (ifseqformula "46"))
                  (rule "selectCreatedOfAnonAsFormulaEQ" (formula "2") (term "1,0,0,0,0,0") (ifseqformula "39"))
                  (rule "selectCreatedOfAnonAsFormulaEQ" (formula "2") (term "0,1,0,0,0,0,0") (ifseqformula "32"))
                  (rule "nnf_imp2or" (formula "1") (term "0,0"))
                   (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "7")))
                  (rule "true_left" (formula "1"))
                  (rule "nnf_imp2or" (formula "1") (term "0,0,0"))
                  (rule "nnf_imp2or" (formula "1") (term "1,0,0,0"))
                  (rule "nnf_notAnd" (formula "1") (term "0,0,0,0"))
                   (builtin "One Step Simplification" (formula "1"))
                  (rule "nnf_notOr" (formula "1") (term "0,0,0,0,0"))
                  (rule "nnf_notAnd" (formula "1") (term "0,1,0,0,0"))
                   (builtin "One Step Simplification" (formula "1"))
                  (rule "nnf_notOr" (formula "1") (term "1,0,0,0,0,0"))
                  (rule "nnf_notOr" (formula "1") (term "0,1,0,0,0,0,0"))
                  (rule "Class_axiom_0_in_de_polyas_core3_open_cred_CredTool" (inst "seq=seq") (inst "i=i") (inst "str=str") (inst "seq_0=seq_0") (inst "i_0=i_0") (inst "sv_heap=anon(heapAtPre_B<<anonHeapFunction>>,
     empty,
     anon_heap_mod<<anonHeapFunction>>)"))
                   (builtin "One Step Simplification" (formula "1"))
                  (rule "andLeft" (formula "1"))
                  (rule "castedGetAny" (formula "1") (term "0,0,0,0,0"))
                  (rule "castedGetAny" (formula "1") (term "0,0,1,0,0"))
                  (rule "castedGetAny" (formula "2") (term "0,1,1,0,0,0"))
                  (rule "nnf_imp2or" (formula "1") (term "0,0"))
                   (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "7")))
                  (rule "true_left" (formula "1"))
                  (rule "nnf_imp2or" (formula "1") (term "0,0,0"))
                  (rule "nnf_imp2or" (formula "1") (term "1,0,0,0"))
                  (rule "nnf_notAnd" (formula "1") (term "0,0,0,0"))
                   (builtin "One Step Simplification" (formula "1"))
                  (rule "nnf_notAnd" (formula "1") (term "0,1,0,0,0"))
                   (builtin "One Step Simplification" (formula "1"))
                  (rule "nnf_notOr" (formula "1") (term "0,0,0,0,0"))
                  (rule "nnf_notOr" (formula "1") (term "1,0,0,0,0,0"))
                  (rule "Class_axiom_0_in_de_polyas_core3_open_cred_CredTool" (inst "seq=seq") (inst "i=i") (inst "str=str") (inst "seq_0=seq_0") (inst "i_0=i_0") (inst "sv_heap=heapAfter_mod_B_0"))
                  (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "1,0,0,0,0,0,1") (ifseqformula "66"))
                  (rule "andLeft" (formula "1"))
                  (rule "castedGetAny" (formula "1") (term "0,0,0,0,0"))
                  (rule "castedGetAny" (formula "2") (term "0,1,1,0,0,0"))
                  (rule "castedGetAny" (formula "1") (term "0,0,1,0,0"))
                  (rule "nnf_imp2or" (formula "1") (term "0,0"))
                   (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "8")))
                  (rule "true_left" (formula "1"))
                  (rule "nnf_imp2or" (formula "1") (term "0,0,0"))
                  (rule "nnf_notAnd" (formula "1") (term "0,0,0,0"))
                   (builtin "One Step Simplification" (formula "1"))
                  (rule "nnf_imp2or" (formula "1") (term "1,0,0,0"))
                  (rule "nnf_notOr" (formula "1") (term "0,0,0,0,0"))
                  (rule "nnf_notAnd" (formula "1") (term "0,1,0,0,0"))
                   (builtin "One Step Simplification" (formula "1"))
                  (rule "nnf_notOr" (formula "1") (term "1,0,0,0,0,0"))
                  (rule "Class_axiom_0_in_de_polyas_core3_open_cred_CredTool" (inst "seq=seq") (inst "i=i") (inst "str=str") (inst "seq_0=seq_0") (inst "i_0=i_0") (inst "sv_heap=anon(heapAfter_mod_B_0,
     empty,
     anon_heap_multiply<<anonHeapFunction>>)"))
                   (builtin "One Step Simplification" (formula "1"))
                  (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,1,0,0,0,0,0,1") (ifseqformula "66"))
                  (rule "andLeft" (formula "1"))
                  (rule "castedGetAny" (formula "1") (term "0,0,0,0,0"))
                  (rule "castedGetAny" (formula "2") (term "0,1,1,0,0,0"))
                  (rule "castedGetAny" (formula "1") (term "0,0,1,0,0"))
                  (rule "nnf_imp2or" (formula "1") (term "0,0"))
                   (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "8")))
                  (rule "true_left" (formula "1"))
                  (rule "nnf_imp2or" (formula "1") (term "0,0,0"))
                  (rule "nnf_imp2or" (formula "1") (term "1,0,0,0"))
                  (rule "nnf_notAnd" (formula "1") (term "0,0,0,0"))
                   (builtin "One Step Simplification" (formula "1"))
                  (rule "nnf_notOr" (formula "1") (term "0,0,0,0,0"))
                  (rule "nnf_notAnd" (formula "1") (term "0,1,0,0,0"))
                   (builtin "One Step Simplification" (formula "1"))
                  (rule "nnf_notOr" (formula "1") (term "1,0,0,0,0,0"))
                  (rule "nnf_notOr" (formula "1") (term "0,1,0,0,0,0,0"))
                  (rule "Class_axiom_0_in_de_polyas_core3_open_cred_CredTool" (inst "seq=seq") (inst "i=i") (inst "str=str") (inst "seq_0=seq_0") (inst "i_0=i_0") (inst "sv_heap=heapAfter_multiply_B_1"))
                  (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "1,0,0,0,0,0,1") (ifseqformula "74"))
                  (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,1,0,0,0,0,0,1") (ifseqformula "67"))
                  (rule "andLeft" (formula "1"))
                  (rule "castedGetAny" (formula "1") (term "0,0,1,0,0"))
                  (rule "castedGetAny" (formula "1") (term "0,0,0,0,0"))
                  (rule "castedGetAny" (formula "2") (term "0,1,1,0,0,0"))
                  (rule "nnf_imp2or" (formula "1") (term "0,0"))
                   (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "9")))
                  (rule "true_left" (formula "1"))
                  (rule "nnf_imp2or" (formula "1") (term "0,0,0"))
                  (rule "nnf_imp2or" (formula "1") (term "1,0,0,0"))
                  (rule "nnf_notAnd" (formula "1") (term "0,0,0,0"))
                   (builtin "One Step Simplification" (formula "1"))
                  (rule "nnf_notOr" (formula "1") (term "0,0,0,0,0"))
                  (rule "nnf_notAnd" (formula "1") (term "0,1,0,0,0"))
                   (builtin "One Step Simplification" (formula "1"))
                  (rule "nnf_notOr" (formula "1") (term "1,0,0,0,0,0"))
                  (rule "nnf_notOr" (formula "1") (term "0,1,0,0,0,0,0"))
                  (rule "Class_axiom_0_in_de_polyas_core3_open_cred_CredTool" (inst "seq=seq") (inst "i=i") (inst "str=str") (inst "seq_0=seq_0") (inst "i_0=i_0") (inst "sv_heap=heapAtPost_B"))
                  (rule "andLeft" (formula "1"))
                  (rule "castedGetAny" (formula "2") (term "0,1,1,0,0,0"))
                  (rule "castedGetAny" (formula "1") (term "0,0,1,0,0"))
                  (rule "castedGetAny" (formula "1") (term "0,0,0,0,0"))
                  (rule "applyEqRigid" (formula "2") (term "0,0,1,0,0,0,0,0") (ifseqformula "82"))
                  (rule "selectCreatedOfAnonAsFormulaEQ" (formula "2") (term "1,0,0,0,0,0") (ifseqformula "75"))
                  (rule "selectCreatedOfAnonAsFormulaEQ" (formula "2") (term "0,1,0,0,0,0,0") (ifseqformula "68"))
                  (rule "nnf_imp2or" (formula "1") (term "0,0"))
                   (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "9")))
                  (rule "true_left" (formula "1"))
                  (rule "nnf_imp2or" (formula "1") (term "0,0,0"))
                  (rule "nnf_imp2or" (formula "1") (term "1,0,0,0"))
                  (rule "nnf_notAnd" (formula "1") (term "0,0,0,0"))
                   (builtin "One Step Simplification" (formula "1"))
                  (rule "nnf_notAnd" (formula "1") (term "0,1,0,0,0"))
                   (builtin "One Step Simplification" (formula "1"))
                  (rule "nnf_notOr" (formula "1") (term "0,0,0,0,0"))
                  (rule "nnf_notOr" (formula "1") (term "1,0,0,0,0,0"))
                  (rule "nnf_notOr" (formula "1") (term "0,1,0,0,0,0,0"))
                  (rule "shift_paren_or" (formula "6") (term "0,0,0,0"))
                  (rule "div_axiom" (formula "34") (term "0,1") (inst "quotient=quotient_0"))
                  (rule "polySimp_mulComm0" (formula "34") (term "0,1,0,1"))
                  (rule "polySimp_mulComm0" (formula "34") (term "0,1,1,1"))
                  (rule "polySimp_mulComm0" (formula "34") (term "1,1,1,1,1"))
                  (rule "polySimp_mulComm0" (formula "34") (term "0,2,1,1"))
                  (rule "commute_or" (formula "4") (term "0,0,0,0"))
                  (rule "shift_paren_or" (formula "5") (term "0,0,0,0"))
                  (rule "commute_and" (formula "6") (term "1,0,0,0"))
                  (rule "commute_or" (formula "4") (term "0,1,0,0,0"))
                  (rule "commute_and" (formula "5") (term "1,0,0,0"))
                  (rule "commute_or" (formula "3") (term "0,0,0,0"))
                  (rule "commute_or" (formula "3") (term "0,1,0,0,0"))
                  (rule "commute_or" (formula "2") (term "0,0,0,0"))
                  (rule "onlyCreatedObjectsAreReferenced" (formula "95") (term "0") (ifseqformula "22"))
                  (rule "replace_known_left" (formula "1") (term "1") (ifseqformula "28"))
                   (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "96")))
                  (rule "true_left" (formula "1"))
                  (rule "onlyCreatedObjectsAreReferenced" (formula "61") (term "1,0") (ifseqformula "56"))
                  (rule "replace_known_right" (formula "61") (term "0") (ifseqformula "97"))
                   (builtin "One Step Simplification" (formula "61") (ifInst ""  (formula "62")))
                  (rule "true_left" (formula "61"))
                  (rule "onlyCreatedObjectsAreReferenced" (formula "31") (term "2") (ifseqformula "22"))
                  (rule "replace_known_right" (formula "31") (term "0") (ifseqformula "94"))
                   (builtin "One Step Simplification" (formula "31") (ifInst ""  (formula "16")))
                  (rule "true_left" (formula "31"))
                  (rule "onlyCreatedObjectsAreReferenced" (formula "14") (term "1,0") (ifseqformula "22"))
                  (rule "replace_known_right" (formula "14") (term "0") (ifseqformula "90"))
                   (builtin "One Step Simplification" (formula "14") (ifInst ""  (formula "15")))
                  (rule "true_left" (formula "14"))
                  (rule "onlyCreatedObjectsAreReferenced" (formula "14") (term "1,1,0") (ifseqformula "22"))
                  (rule "replace_known_right" (formula "14") (term "0") (ifseqformula "92"))
                   (builtin "One Step Simplification" (formula "14") (ifInst ""  (formula "16")))
                  (rule "true_left" (formula "14"))
                  (rule "onlyCreatedObjectsAreReferenced" (formula "92") (term "0") (ifseqformula "56"))
                  (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "93"))
                   (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "50")))
                  (rule "true_left" (formula "1"))
                  (rule "onlyCreatedObjectsAreReferenced" (formula "48") (term "1,0") (ifseqformula "56"))
                  (rule "replace_known_right" (formula "48") (term "0") (ifseqformula "91"))
                   (builtin "One Step Simplification" (formula "48") (ifInst ""  (formula "49")))
                  (rule "true_left" (formula "48"))
                  (rule "onlyCreatedObjectsAreReferenced" (formula "65") (term "2") (ifseqformula "56"))
                  (rule "replace_known_left" (formula "65") (term "1") (ifseqformula "50"))
                   (builtin "One Step Simplification" (formula "65") (ifInst ""  (formula "95")))
                  (rule "true_left" (formula "65"))
                  (rule "commute_or" (formula "2") (term "0,1,0,0,0"))
                  (rule "commute_or" (formula "1") (term "0,0,0,0"))
                  (rule "commute_or" (formula "1") (term "0,1,0,0,0"))
                  (rule "commute_or_2" (formula "4") (term "0,0,0"))
                  (rule "commute_or_2" (formula "3") (term "0,0,0"))
                  (rule "commute_and" (formula "34") (term "0,1"))
                  (rule "commute_or_2" (formula "2") (term "0,0,0"))
                  (rule "commute_or_2" (formula "1") (term "0,0,0"))
                  (rule "shift_paren_or" (formula "6") (term "0,0,0,0,0"))
                  (rule "shift_paren_or" (formula "5") (term "0,0,0,0,0"))
                  (rule "commute_or_2" (formula "4") (term "1,0,0,0,0"))
                  (rule "shift_paren_or" (formula "3") (term "0,0,0,0"))
                  (rule "commute_or_2" (formula "2") (term "1,0,0,0,0"))
                  (rule "commute_or_2" (formula "1") (term "1,0,0,0,0"))
                  (rule "commute_or_2" (formula "6") (term "0,0,0,0,0"))
                   (builtin "One Step Simplification" (formula "6"))
                  (rule "commute_or_2" (formula "6") (term "0,0,0,0"))
                  (rule "commute_or_2" (formula "5") (term "0,0,0,0,0"))
                   (builtin "One Step Simplification" (formula "5"))
                  (rule "commute_or_2" (formula "5") (term "0,0,0,0"))
                  (rule "shift_paren_or" (formula "4") (term "0,0,0,0"))
                  (rule "shift_paren_or" (formula "2") (term "0,0,0,0"))
                  (rule "shift_paren_or" (formula "1") (term "0,0,0,0"))
                  (rule "commute_and" (formula "4") (term "1,0,0,0"))
                  (rule "commute_and" (formula "3") (term "1,0,0,0"))
                  (rule "commute_and" (formula "2") (term "1,0,0,0"))
                  (rule "cnf_rightDist" (formula "6") (term "0,0,0"))
                  (rule "distr_forallAnd" (formula "6") (term "0,0"))
                  (rule "distr_forallAnd" (formula "6") (term "0"))
                  (rule "distr_forallAnd" (formula "6"))
                  (rule "andLeft" (formula "6"))
                  (rule "commute_or_2" (formula "6") (term "0,0,0"))
                   (builtin "One Step Simplification" (formula "6"))
                  (rule "eqSymm" (formula "6") (term "1,0,0,0,0"))
                  (rule "castedGetAny" (formula "6") (term "1,0,0,1,0,0,0"))
                  (rule "castedGetAny" (formula "6") (term "0,0,0,0,0,0"))
                  (rule "castedGetAny" (formula "6") (term "0,1,0,0,0,0"))
                   (builtin "One Step Simplification" (formula "6"))
                  (rule "true_left" (formula "6"))
                  (rule "shift_paren_or" (formula "6") (term "0,0,0"))
                   (builtin "One Step Simplification" (formula "6"))
                  (rule "eqSymm" (formula "6") (term "1,1,0,0,0"))
                  (rule "castedGetAny" (formula "6") (term "0,0,1,0,0,0"))
                  (rule "castedGetAny" (formula "6") (term "0,0,0,0,0,0"))
                  (rule "castedGetAny" (formula "6") (term "0,1,1,0,0,0"))
                   (builtin "One Step Simplification" (formula "6"))
                  (rule "true_left" (formula "6"))
                  (rule "commute_and" (formula "1") (term "1,0,0,0"))
                  (rule "cnf_rightDist" (formula "5") (term "0,0,0"))
                  (rule "distr_forallAnd" (formula "5") (term "0,0"))
                  (rule "distr_forallAnd" (formula "5") (term "0"))
                  (rule "distr_forallAnd" (formula "5"))
                  (rule "andLeft" (formula "5"))
                  (rule "commute_or_2" (formula "5") (term "0,0,0"))
                   (builtin "One Step Simplification" (formula "5"))
                  (rule "eqSymm" (formula "5") (term "1,0,0,0,0"))
                  (rule "castedGetAny" (formula "5") (term "0,0,0,0,0,0"))
                  (rule "castedGetAny" (formula "5") (term "1,0,0,1,0,0,0"))
                  (rule "castedGetAny" (formula "5") (term "0,1,0,0,0,0"))
                   (builtin "One Step Simplification" (formula "5"))
                  (rule "true_left" (formula "5"))
                  (rule "shift_paren_or" (formula "3") (term "0,0,0,0,0"))
                   (builtin "One Step Simplification" (formula "3"))
                  (rule "shift_paren_or" (formula "5") (term "0,0,0"))
                   (builtin "One Step Simplification" (formula "5"))
                  (rule "eqSymm" (formula "5") (term "1,1,0,0,0"))
                  (rule "castedGetAny" (formula "5") (term "0,0,0,0,0,0"))
                  (rule "castedGetAny" (formula "5") (term "0,0,1,0,0,0"))
                  (rule "castedGetAny" (formula "5") (term "0,1,1,0,0,0"))
                   (builtin "One Step Simplification" (formula "5"))
                  (rule "true_left" (formula "5"))
                  (rule "shift_paren_or" (formula "4") (term "0,0,0,0,0"))
                   (builtin "One Step Simplification" (formula "4"))
                  (rule "shift_paren_or" (formula "2") (term "0,0,0,0,0"))
                   (builtin "One Step Simplification" (formula "2"))
                  (rule "shift_paren_or" (formula "1") (term "0,0,0,0,0"))
                   (builtin "One Step Simplification" (formula "1"))
                  (rule "commute_or_2" (formula "3") (term "0,0,0,0"))
                  (rule "cnf_rightDist" (formula "4") (term "0,0,0"))
                  (rule "distr_forallAnd" (formula "4") (term "0,0"))
                  (rule "distr_forallAnd" (formula "4") (term "0"))
                  (rule "distr_forallAnd" (formula "4"))
                  (rule "andLeft" (formula "4"))
                  (rule "shift_paren_or" (formula "5") (term "0,0,0"))
                   (builtin "One Step Simplification" (formula "5"))
                  (rule "eqSymm" (formula "5") (term "1,1,0,0,0"))
                  (rule "castedGetAny" (formula "5") (term "0,0,1,0,0,0"))
                  (rule "castedGetAny" (formula "5") (term "0,0,0,0,0,0"))
                  (rule "castedGetAny" (formula "5") (term "0,1,1,0,0,0"))
                   (builtin "One Step Simplification" (formula "5"))
                  (rule "true_left" (formula "5"))
                  (rule "cnf_rightDist" (formula "2") (term "0,0,0"))
                  (rule "distr_forallAnd" (formula "2") (term "0,0"))
                  (rule "distr_forallAnd" (formula "2") (term "0"))
                  (rule "distr_forallAnd" (formula "2"))
                  (rule "andLeft" (formula "2"))
                  (rule "shift_paren_or" (formula "3") (term "0,0,0"))
                   (builtin "One Step Simplification" (formula "3"))
                  (rule "eqSymm" (formula "3") (term "1,1,0,0,0"))
                  (rule "castedGetAny" (formula "3") (term "0,0,1,0,0,0"))
                  (rule "castedGetAny" (formula "3") (term "0,0,0,0,0,0"))
                  (rule "castedGetAny" (formula "3") (term "0,1,1,0,0,0"))
                   (builtin "One Step Simplification" (formula "3"))
                  (rule "true_left" (formula "3"))
                  (rule "cnf_rightDist" (formula "1") (term "0,0,0"))
                  (rule "distr_forallAnd" (formula "1") (term "0,0"))
                  (rule "distr_forallAnd" (formula "1") (term "0"))
                  (rule "distr_forallAnd" (formula "1"))
                  (rule "andLeft" (formula "1"))
                  (rule "cnf_rightDist" (formula "4") (term "0,0,0"))
                  (rule "distr_forallAnd" (formula "4") (term "0,0"))
                  (rule "distr_forallAnd" (formula "4") (term "0"))
                  (rule "distr_forallAnd" (formula "4"))
                  (rule "andLeft" (formula "4"))
                  (rule "shift_paren_or" (formula "2") (term "0,0,0"))
                   (builtin "One Step Simplification" (formula "2"))
                  (rule "eqSymm" (formula "2") (term "1,1,0,0,0"))
                  (rule "castedGetAny" (formula "2") (term "0,0,1,0,0,0"))
                  (rule "castedGetAny" (formula "2") (term "0,0,0,0,0,0"))
                  (rule "castedGetAny" (formula "2") (term "0,1,1,0,0,0"))
                   (builtin "One Step Simplification" (formula "2"))
                  (rule "true_left" (formula "2"))
                  (rule "cnf_rightDist" (formula "4") (term "0,0,0"))
                  (rule "distr_forallAnd" (formula "4") (term "0,0"))
                  (rule "distr_forallAnd" (formula "4") (term "0"))
                  (rule "distr_forallAnd" (formula "4"))
                  (rule "andLeft" (formula "4"))
                  (rule "commute_or_2" (formula "4") (term "0,0,0"))
                   (builtin "One Step Simplification" (formula "4"))
                  (rule "eqSymm" (formula "4") (term "1,0,0,0,0"))
                  (rule "castedGetAny" (formula "4") (term "1,0,0,1,0,0,0"))
                  (rule "castedGetAny" (formula "4") (term "0,0,0,0,0,0"))
                  (rule "castedGetAny" (formula "4") (term "0,1,0,0,0,0"))
                   (builtin "One Step Simplification" (formula "4"))
                  (rule "true_left" (formula "4"))
                  (rule "cnf_rightDist" (formula "2") (term "0,0,0"))
                  (rule "distr_forallAnd" (formula "2") (term "0,0"))
                  (rule "distr_forallAnd" (formula "2") (term "0"))
                  (rule "distr_forallAnd" (formula "2"))
                  (rule "andLeft" (formula "2"))
                  (rule "commute_or_2" (formula "2") (term "0,0,0"))
                   (builtin "One Step Simplification" (formula "2"))
                  (rule "eqSymm" (formula "2") (term "1,0,0,0,0"))
                  (rule "castedGetAny" (formula "2") (term "1,0,0,1,0,0,0"))
                  (rule "castedGetAny" (formula "2") (term "0,0,0,0,0,0"))
                  (rule "castedGetAny" (formula "2") (term "0,1,0,0,0,0"))
                   (builtin "One Step Simplification" (formula "2"))
                  (rule "true_left" (formula "2"))
                  (rule "shift_paren_or" (formula "3") (term "0,0,0"))
                   (builtin "One Step Simplification" (formula "3"))
                  (rule "eqSymm" (formula "3") (term "1,1,0,0,0"))
                  (rule "castedGetAny" (formula "3") (term "1,0,0,0,0,0,0"))
                  (rule "castedGetAny" (formula "3") (term "0,0,1,0,0,0"))
                  (rule "castedGetAny" (formula "3") (term "0,1,1,0,0,0"))
                   (builtin "One Step Simplification" (formula "3"))
                  (rule "true_left" (formula "3"))
                  (rule "cnf_rightDist" (formula "1") (term "0,0,0"))
                  (rule "distr_forallAnd" (formula "1") (term "0,0"))
                  (rule "distr_forallAnd" (formula "1") (term "0"))
                  (rule "distr_forallAnd" (formula "1"))
                  (rule "andLeft" (formula "1"))
                  (rule "cnf_rightDist" (formula "3") (term "0,0,0"))
                  (rule "distr_forallAnd" (formula "3") (term "0,0"))
                  (rule "distr_forallAnd" (formula "3") (term "0"))
                  (rule "distr_forallAnd" (formula "3"))
                  (rule "andLeft" (formula "3"))
                  (rule "ifthenelse_split_for" (formula "31") (term "1,1"))
                  (branch "result_228_A_1.value@heapAtPre_A«anonHeapFunction» ≥ 0 TRUE"
                     (rule "cnf_rightDist" (formula "32"))
                     (rule "andLeft" (formula "32"))
                     (rule "commute_or" (formula "33"))
                     (rule "cnf_rightDist" (formula "32"))
                     (rule "andLeft" (formula "32"))
                     (rule "commute_or" (formula "33"))
                     (rule "shift_paren_or" (formula "2") (term "0,0,0"))
                      (builtin "One Step Simplification" (formula "2"))
                     (rule "eqSymm" (formula "2") (term "1,1,0,0,0"))
                     (rule "castedGetAny" (formula "2") (term "1,0,0,0,0,0,0"))
                     (rule "castedGetAny" (formula "2") (term "0,0,1,0,0,0"))
                     (rule "castedGetAny" (formula "2") (term "0,1,1,0,0,0"))
                      (builtin "One Step Simplification" (formula "2"))
                     (rule "true_left" (formula "2"))
                     (rule "cnf_rightDist" (formula "1") (term "0,0,0"))
                     (rule "distr_forallAnd" (formula "1") (term "0,0"))
                     (rule "distr_forallAnd" (formula "1") (term "0"))
                     (rule "distr_forallAnd" (formula "1"))
                     (rule "andLeft" (formula "1"))
                     (rule "commute_or_2" (formula "1") (term "0,0,0"))
                      (builtin "One Step Simplification" (formula "1"))
                     (rule "eqSymm" (formula "1") (term "1,0,0,0,0"))
                     (rule "castedGetAny" (formula "1") (term "0,0,0,0,0,0"))
                     (rule "castedGetAny" (formula "1") (term "1,0,0,1,0,0,0"))
                     (rule "castedGetAny" (formula "1") (term "0,1,0,0,0,0"))
                      (builtin "One Step Simplification" (formula "1"))
                     (rule "true_left" (formula "1"))
                     (rule "shift_paren_or" (formula "1") (term "0,0,0"))
                      (builtin "One Step Simplification" (formula "1"))
                     (rule "eqSymm" (formula "1") (term "1,1,0,0,0"))
                     (rule "castedGetAny" (formula "1") (term "1,0,0,0,0,0,0"))
                     (rule "castedGetAny" (formula "1") (term "0,0,1,0,0,0"))
                     (rule "castedGetAny" (formula "1") (term "0,1,1,0,0,0"))
                      (builtin "One Step Simplification" (formula "1"))
                     (rule "true_left" (formula "1"))
                     (rule "cnf_rightDist" (formula "1") (term "0,0,0"))
                     (rule "distr_forallAnd" (formula "1") (term "0,0"))
                     (rule "distr_forallAnd" (formula "1") (term "0"))
                     (rule "distr_forallAnd" (formula "1"))
                     (rule "andLeft" (formula "1"))
                     (rule "commute_or_2" (formula "1") (term "0,0,0"))
                      (builtin "One Step Simplification" (formula "1"))
                     (rule "eqSymm" (formula "1") (term "1,0,0,0,0"))
                     (rule "castedGetAny" (formula "1") (term "0,0,0,0,0,0"))
                     (rule "castedGetAny" (formula "1") (term "1,0,0,1,0,0,0"))
                     (rule "castedGetAny" (formula "1") (term "0,1,0,0,0,0"))
                      (builtin "One Step Simplification" (formula "1"))
                     (rule "true_left" (formula "1"))
                     (rule "shift_paren_or" (formula "1") (term "0,0,0"))
                      (builtin "One Step Simplification" (formula "1"))
                     (rule "eqSymm" (formula "1") (term "1,1,0,0,0"))
                     (rule "castedGetAny" (formula "1") (term "1,0,0,0,0,0,0"))
                     (rule "castedGetAny" (formula "1") (term "0,0,1,0,0,0"))
                     (rule "castedGetAny" (formula "1") (term "0,1,1,0,0,0"))
                      (builtin "One Step Simplification" (formula "1"))
                     (rule "true_left" (formula "1"))
                     (rule "cut_direct" (formula "29") (term "0"))
                     (branch "CUT: result_228_A_1.value@heapAtPre_A«anonHeapFunction» = 0 TRUE"
                         (builtin "One Step Simplification" (formula "30"))
                        (rule "true_left" (formula "30"))
                        (rule "replace_known_left" (formula "30") (term "0") (ifseqformula "29"))
                         (builtin "One Step Simplification" (formula "30"))
                        (rule "true_left" (formula "30"))
                        (rule "replace_known_left" (formula "30") (term "0") (ifseqformula "29"))
                         (builtin "One Step Simplification" (formula "30"))
                        (rule "true_left" (formula "30"))
                        (rule "applyEq" (formula "30") (term "1,0") (ifseqformula "29"))
                        (rule "eqSymm" (formula "30"))
                        (rule "polySimp_homoEq" (formula "30"))
                        (rule "polySimp_mulLiterals" (formula "30") (term "1,0"))
                        (rule "polySimp_elimOne" (formula "30") (term "1,0"))
                        (rule "applyEq" (formula "28") (term "0") (ifseqformula "29"))
                        (rule "qeq_literals" (formula "28"))
                        (rule "true_left" (formula "28"))
                        (rule "applyEq" (formula "30") (term "1,0,0") (ifseqformula "28"))
                        (rule "polySimp_mulComm0" (formula "30") (term "0"))
                        (rule "applyEq" (formula "57") (term "1") (ifseqformula "28"))
                        (rule "applyEq" (formula "23") (term "1") (ifseqformula "28"))
                        (rule "applyEq" (formula "7") (term "1") (ifseqformula "28"))
                        (rule "applyEq" (formula "29") (term "1,1,0") (ifseqformula "28"))
                        (rule "polySimp_addComm0" (formula "29") (term "0"))
                        (rule "applyEq" (formula "30") (term "0,0") (ifseqformula "28"))
                        (rule "times_zero_2" (formula "30") (term "0"))
                        (rule "polySimp_homoEq" (formula "30"))
                        (rule "mul_literals" (formula "30") (term "1,0"))
                        (rule "add_zero_right" (formula "30") (term "0"))
                        (rule "polySimp_sepPosMonomial" (formula "29"))
                        (rule "polySimp_sepNegMonomial" (formula "30"))
                        (rule "polySimp_mulLiterals" (formula "30") (term "0"))
                        (rule "polySimp_elimOne" (formula "30") (term "0"))
                        (rule "applyEq" (formula "29") (term "0,0") (ifseqformula "30"))
                        (rule "eqSymm" (formula "29"))
                        (rule "polySimp_homoEq" (formula "29"))
                        (rule "polySimp_mulLiterals" (formula "29") (term "1,0"))
                        (rule "polySimp_elimOne" (formula "29") (term "1,0"))
                        (rule "applyEq" (formula "4") (term "0") (ifseqformula "30"))
                        (rule "applyEq" (formula "29") (term "0,0,1,0") (ifseqformula "30"))
                        (rule "polySimp_addComm0" (formula "29") (term "0"))
                        (rule "applyEq" (formula "6") (term "1") (ifseqformula "30"))
                        (rule "polySimp_sepPosMonomial" (formula "29"))
                        (rule "jdiv_axiom" (formula "29") (term "0"))
                        (rule "eqSymm" (formula "29"))
                        (rule "applyEq" (formula "29") (term "1") (ifseqformula "30"))
                         (builtin "One Step Simplification" (formula "29"))
                        (rule "eqSymm" (formula "29") (term "1"))
                        (rule "polySimp_homoEq" (formula "29") (term "1"))
                        (rule "polySimp_mulLiterals" (formula "29") (term "1,0,1"))
                        (rule "polySimp_elimOne" (formula "29") (term "1,0,1"))
                        (rule "polySimp_sepPosMonomial" (formula "29") (term "1"))
                        (rule "inEqSimp_contradInEq0" (formula "29") (term "0,0") (ifseqformula "4"))
                        (rule "qeq_literals" (formula "29") (term "0,0,0"))
                         (builtin "One Step Simplification" (formula "29"))
                        (rule "true_left" (formula "29"))
                        (rule "div_axiom" (formula "29") (term "0,1") (inst "quotient=quotient_1"))
                         (builtin "One Step Simplification" (formula "29"))
                        (rule "true_left" (formula "29"))
                        (rule "Use_information_flow_contract_for_compareTo_325434207" (formula "19") (ifseqformula "19"))
                         (builtin "One Step Simplification" (formula "19") (ifInst ""  (formula "90")) (ifInst ""  (formula "90")))
                        (rule "true_left" (formula "19"))
                        (rule "Use_information_flow_contract_for_getOrder_757678341" (formula "59") (ifseqformula "25"))
                        (rule "applyEq" (formula "59") (term "0,0,1") (ifseqformula "57"))
                        (rule "eqSymm" (formula "59") (term "0,1"))
                        (rule "replace_known_left" (formula "59") (term "0,1") (ifseqformula "23"))
                         (builtin "One Step Simplification" (formula "59"))
                        (rule "applyEq" (formula "59") (term "0,1") (ifseqformula "7"))
                        (rule "eqSymm" (formula "59") (term "1"))
                        (rule "replace_known_left" (formula "59") (term "1") (ifseqformula "28"))
                         (builtin "One Step Simplification" (formula "59"))
                        (rule "true_left" (formula "59"))
                        (rule "Use_information_flow_contract_for_getOrder_757678341" (formula "59") (ifseqformula "59"))
                         (builtin "One Step Simplification" (formula "59"))
                        (rule "true_left" (formula "59"))
                        (rule "Use_information_flow_contract_for_getOrder_757678341" (formula "25") (ifseqformula "25"))
                         (builtin "One Step Simplification" (formula "25"))
                        (rule "true_left" (formula "25"))
                        (rule "Use_information_flow_contract_for_compareTo_325434207" (formula "19") (ifseqformula "53"))
                        (rule "eqSymm" (formula "19") (term "1,0,1"))
                        (rule "eqSymm" (formula "19") (term "0,0,1"))
                        (rule "eqSymm" (formula "19") (term "1,1"))
                        (rule "replace_known_right" (formula "19") (term "0,1,1,0") (ifseqformula "91"))
                         (builtin "One Step Simplification" (formula "19") (ifInst ""  (formula "90")))
                        (rule "applyEq" (formula "19") (term "0,1,0,1") (ifseqformula "55"))
                        (rule "eqSymm" (formula "19") (term "1,0,1"))
                        (rule "replace_known_left" (formula "19") (term "1,0,1") (ifseqformula "21"))
                         (builtin "One Step Simplification" (formula "19"))
                        (rule "applyEq" (formula "19") (term "0,0,1") (ifseqformula "6"))
                        (rule "eqSymm" (formula "19") (term "0,1"))
                        (rule "replace_known_left" (formula "19") (term "0,1") (ifseqformula "31"))
                         (builtin "One Step Simplification" (formula "19"))
                        (rule "Class_invariant_axiom_for_java_math_BigInteger" (formula "19") (term "1,0"))
                        (rule "replace_known_right" (formula "19") (term "0,0,1,0") (ifseqformula "91"))
                         (builtin "One Step Simplification" (formula "19") (ifInst ""  (formula "55")))
                        (rule "Class_invariant_axiom_for_java_math_BigInteger" (formula "19") (term "0"))
                        (rule "replace_known_right" (formula "19") (term "0,0,0") (ifseqformula "90"))
                         (builtin "One Step Simplification" (formula "19") (ifInst ""  (formula "21")))
                        (rule "applyEq" (formula "53") (term "0") (ifseqformula "19"))
                        (rule "applyEq" (formula "46") (term "0") (ifseqformula "19"))
                        (rule "applyEq" (formula "52") (term "4") (ifseqformula "19"))
                        (rule "Use_information_flow_contract_for_multiply_1272441881" (formula "69") (ifseqformula "37"))
                        (rule "replaceKnownSelect_taclet21_12" (formula "69") (term "0,1,1"))
                        (rule "replaceKnownSelect_taclet21_11" (formula "69") (term "1,1,1"))
                        (rule "replaceKnownAuxiliaryConstant_taclet000121_19" (formula "69") (term "0,1,1"))
                        (rule "replaceKnownAuxiliaryConstant_taclet00121_17" (formula "69") (term "1,1,1"))
                        (rule "replaceKnownSelect_taclet21_8" (formula "69") (term "1,1,0,1"))
                        (rule "replaceKnownSelect_taclet21_9" (formula "69") (term "0,1,0,1"))
                        (rule "replaceKnownAuxiliaryConstant_taclet21_10" (formula "69") (term "1,1,0,1"))
                         (builtin "One Step Simplification" (formula "69") (ifInst ""  (formula "80")) (ifInst ""  (formula "79")) (ifInst ""  (formula "97")))
                        (rule "pullOutSelect" (formula "69") (term "1,0,1") (inst "selectSK=org_bouncycastle_math_ec_ECPoint_value_4"))
                        (rule "simplifySelectOfAnonEQ" (formula "69") (ifseqformula "27"))
                         (builtin "One Step Simplification" (formula "69") (ifInst ""  (formula "94")) (ifInst ""  (formula "14")))
                        (rule "applyEqReverse" (formula "70") (term "1,0,1") (ifseqformula "69"))
                        (rule "hideAuxiliaryEq" (formula "69"))
                        (rule "pullOutSelect" (formula "69") (term "0,0,1") (inst "selectSK=org_bouncycastle_math_ec_ECPoint_value_5"))
                        (rule "simplifySelectOfAnonEQ" (formula "69") (ifseqformula "60"))
                         (builtin "One Step Simplification" (formula "69") (ifInst ""  (formula "95")) (ifInst ""  (formula "48")))
                        (rule "applyEqReverse" (formula "70") (term "0,0,1") (ifseqformula "69"))
                        (rule "hideAuxiliaryEq" (formula "69"))
                        (rule "replace_known_left" (formula "69") (term "0,1") (ifseqformula "5"))
                         (builtin "One Step Simplification" (formula "69"))
                        (rule "notLeft" (formula "69"))
                        (rule "Class_invariant_axiom_for_org_bouncycastle_math_ec_ECPoint" (formula "75") (term "0"))
                         (builtin "One Step Simplification" (formula "75"))
                        (rule "Class_invariant_axiom_for_org_bouncycastle_math_ec_ECPoint" (formula "75"))
                        (rule "closeTrue" (formula "75"))
                     )
                     (branch "CUT: result_228_A_1.value@heapAtPre_A«anonHeapFunction» = 0 FALSE"
                         (builtin "One Step Simplification" (formula "29"))
                        (rule "replace_known_right" (formula "30") (term "0") (ifseqformula "79"))
                         (builtin "One Step Simplification" (formula "30"))
                        (rule "replace_known_right" (formula "31") (term "0") (ifseqformula "79"))
                         (builtin "One Step Simplification" (formula "31"))
                        (rule "applyEq" (formula "33") (term "0,0") (ifseqformula "30"))
                        (rule "polySimp_mulComm0" (formula "33") (term "0"))
                        (rule "applyEq" (formula "31") (term "0") (ifseqformula "33"))
                        (rule "inEqSimp_homoInEq1" (formula "31"))
                        (rule "polySimp_mulComm0" (formula "31") (term "1,0"))
                        (rule "polySimp_rightDist" (formula "31") (term "1,0"))
                        (rule "polySimp_mulLiterals" (formula "31") (term "1,1,0"))
                        (rule "polySimp_elimOne" (formula "31") (term "1,1,0"))
                        (rule "polySimp_mulComm0" (formula "31") (term "0,1,0"))
                        (rule "polySimp_addComm1" (formula "31") (term "0"))
                        (rule "polySimp_addAssoc" (formula "31") (term "0,0"))
                        (rule "polySimp_addComm1" (formula "31") (term "0,0,0"))
                        (rule "polySimp_pullOutFactor2b" (formula "31") (term "0,0"))
                        (rule "add_literals" (formula "31") (term "1,1,0,0"))
                        (rule "times_zero_1" (formula "31") (term "1,0,0"))
                        (rule "add_zero_right" (formula "31") (term "0,0"))
                        (rule "applyEq" (formula "29") (term "0") (ifseqformula "33"))
                        (rule "inEqSimp_homoInEq0" (formula "29"))
                        (rule "polySimp_mulComm0" (formula "29") (term "1,0"))
                        (rule "polySimp_rightDist" (formula "29") (term "1,0"))
                        (rule "polySimp_mulLiterals" (formula "29") (term "1,1,0"))
                        (rule "polySimp_elimOne" (formula "29") (term "1,1,0"))
                        (rule "polySimp_mulComm0" (formula "29") (term "0,1,0"))
                        (rule "polySimp_addAssoc" (formula "29") (term "0"))
                        (rule "polySimp_addComm0" (formula "29") (term "0,0"))
                        (rule "polySimp_pullOutFactor2b" (formula "29") (term "0"))
                        (rule "add_literals" (formula "29") (term "1,1,0"))
                        (rule "times_zero_1" (formula "29") (term "1,0"))
                        (rule "add_zero_right" (formula "29") (term "0"))
                        (rule "applyEq" (formula "32") (term "0,1") (ifseqformula "30"))
                        (rule "inEqSimp_sepNegMonomial0" (formula "31"))
                        (rule "polySimp_mulLiterals" (formula "31") (term "0"))
                        (rule "polySimp_elimOne" (formula "31") (term "0"))
                        (rule "inEqSimp_invertInEq1" (formula "29"))
                        (rule "polySimp_mulLiterals" (formula "29") (term "0"))
                        (rule "times_zero_2" (formula "29") (term "1"))
                        (rule "polySimp_elimOne" (formula "29") (term "0"))
                        (rule "inEqSimp_strengthen1" (formula "28") (ifseqformula "79"))
                        (rule "add_literals" (formula "28") (term "1"))
                        (rule "inEqSimp_contradEq7" (formula "79") (ifseqformula "28"))
                        (rule "mul_literals" (formula "79") (term "1,0,0"))
                        (rule "add_literals" (formula "79") (term "0,0"))
                        (rule "leq_literals" (formula "79") (term "0"))
                         (builtin "One Step Simplification" (formula "79"))
                        (rule "false_right" (formula "79"))
                        (rule "Use_information_flow_contract_for_compareTo_325434207" (formula "19") (ifseqformula "19"))
                         (builtin "One Step Simplification" (formula "19") (ifInst ""  (formula "93")) (ifInst ""  (formula "93")))
                        (rule "true_left" (formula "19"))
                        (rule "Use_information_flow_contract_for_getOrder_757678341" (formula "62") (ifseqformula "25"))
                        (rule "replace_known_left" (formula "62") (term "1,1") (ifseqformula "7"))
                         (builtin "One Step Simplification" (formula "62"))
                        (rule "true_left" (formula "62"))
                        (rule "Use_information_flow_contract_for_getOrder_757678341" (formula "62") (ifseqformula "62"))
                         (builtin "One Step Simplification" (formula "62"))
                        (rule "true_left" (formula "62"))
                        (rule "Use_information_flow_contract_for_compareTo_325434207" (formula "56") (ifseqformula "19"))
                        (rule "replace_known_right" (formula "56") (term "0,1,1,0") (ifseqformula "93"))
                         (builtin "One Step Simplification" (formula "56") (ifInst ""  (formula "94")) (ifInst ""  (formula "6")))
                        (rule "applyEqRigid" (formula "56") (term "0,0,1") (ifseqformula "58"))
                        (rule "eqSymm" (formula "56") (term "0,1"))
                        (rule "replace_known_left" (formula "56") (term "0,1") (ifseqformula "20"))
                         (builtin "One Step Simplification" (formula "56"))
                        (rule "Class_invariant_axiom_for_java_math_BigInteger" (formula "56") (term "1,0"))
                        (rule "replace_known_left" (formula "56") (term "1,1,0") (ifseqformula "20"))
                         (builtin "One Step Simplification" (formula "56") (ifInst ""  (formula "93")))
                        (rule "Class_invariant_axiom_for_java_math_BigInteger" (formula "56") (term "0"))
                        (rule "replace_known_right" (formula "56") (term "0,0,0") (ifseqformula "94"))
                         (builtin "One Step Simplification" (formula "56") (ifInst ""  (formula "58")))
                        (rule "applyEq" (formula "55") (term "0") (ifseqformula "56"))
                        (rule "applyEq" (formula "48") (term "0") (ifseqformula "55"))
                        (rule "applyEq" (formula "55") (term "4") (ifseqformula "54"))
                        (rule "Use_information_flow_contract_for_getOrder_757678341" (formula "25") (ifseqformula "25"))
                         (builtin "One Step Simplification" (formula "25"))
                        (rule "true_left" (formula "25"))
                        (rule "Use_information_flow_contract_for_multiply_1272441881_0" (formula "72") (ifseqformula "39"))
                        (rule "replaceKnownSelect_taclet21_11" (formula "72") (term "1,1,1"))
                        (rule "replaceKnownSelect_taclet21_12" (formula "72") (term "0,1,1"))
                        (rule "replaceKnownAuxiliaryConstant_taclet00121_17" (formula "72") (term "1,1,1"))
                        (rule "replaceKnownAuxiliaryConstant_taclet000121_19" (formula "72") (term "0,1,1"))
                        (rule "replaceKnownSelect_taclet21_9" (formula "72") (term "0,1,0,1"))
                        (rule "replaceKnownSelect_taclet21_8" (formula "72") (term "1,1,0,1"))
                        (rule "replaceKnownAuxiliaryConstant_taclet121_15" (formula "72") (term "0,1,0,1"))
                        (rule "replaceKnownAuxiliaryConstant_taclet21_10" (formula "72") (term "1,1,0,1"))
                        (rule "replaceKnownAuxiliaryConstant_taclet121_15" (formula "72") (term "1,1,0,1"))
                         (builtin "One Step Simplification" (formula "72") (ifInst ""  (formula "83")) (ifInst ""  (formula "82")) (ifInst ""  (formula "100")))
                        (rule "pullOutSelect" (formula "72") (term "0,0,1") (inst "selectSK=org_bouncycastle_math_ec_ECPoint_value_4"))
                        (rule "simplifySelectOfAnonEQ" (formula "72") (ifseqformula "63"))
                         (builtin "One Step Simplification" (formula "72") (ifInst ""  (formula "98")) (ifInst ""  (formula "50")))
                        (rule "applyEqReverse" (formula "73") (term "0,0,1") (ifseqformula "72"))
                        (rule "hideAuxiliaryEq" (formula "72"))
                        (rule "eqSymm" (formula "72") (term "0,1"))
                        (rule "applyEq" (formula "72") (term "1,0,1") (ifseqformula "5"))
                        (rule "pullOutSelect" (formula "72") (term "0,0,1") (inst "selectSK=org_bouncycastle_math_ec_ECPoint_value_5"))
                        (rule "simplifySelectOfAnonEQ" (formula "72") (ifseqformula "26"))
                         (builtin "One Step Simplification" (formula "72") (ifInst ""  (formula "97")) (ifInst ""  (formula "14")))
                        (rule "applyEqReverse" (formula "73") (term "0,0,1") (ifseqformula "72"))
                         (builtin "One Step Simplification" (formula "73"))
                        (rule "notLeft" (formula "73"))
                        (rule "hideAuxiliaryEq" (formula "72"))
                        (rule "Class_invariant_axiom_for_org_bouncycastle_math_ec_ECPoint" (formula "78") (term "0"))
                         (builtin "One Step Simplification" (formula "78"))
                        (rule "Class_invariant_axiom_for_org_bouncycastle_math_ec_ECPoint" (formula "78"))
                        (rule "closeTrue" (formula "78"))
                     )
                  )
                  (branch "result_228_A_1.value@heapAtPre_A«anonHeapFunction» ≥ 0 FALSE"
                     (rule "inEqSimp_geqRight" (formula "79"))
                     (rule "mul_literals" (formula "1") (term "1,0,0"))
                     (rule "add_zero_right" (formula "1") (term "0,0"))
                     (rule "inEqSimp_sepPosMonomial0" (formula "1"))
                     (rule "mul_literals" (formula "1") (term "1"))
                     (rule "inEqSimp_contradEq3" (formula "32") (term "0") (ifseqformula "1"))
                     (rule "mul_literals" (formula "32") (term "1,0,0,0"))
                     (rule "add_zero_right" (formula "32") (term "0,0,0"))
                     (rule "qeq_literals" (formula "32") (term "0,0"))
                      (builtin "One Step Simplification" (formula "32"))
                     (rule "andLeft" (formula "32"))
                     (rule "andLeft" (formula "32"))
                     (rule "applyEq" (formula "36") (term "0,0") (ifseqformula "33"))
                     (rule "polySimp_mulComm0" (formula "36") (term "0"))
                     (rule "applyEq" (formula "32") (term "0") (ifseqformula "36"))
                     (rule "inEqSimp_homoInEq0" (formula "32"))
                     (rule "polySimp_mulComm0" (formula "32") (term "1,0"))
                     (rule "polySimp_rightDist" (formula "32") (term "1,0"))
                     (rule "polySimp_mulLiterals" (formula "32") (term "1,1,0"))
                     (rule "polySimp_elimOne" (formula "32") (term "1,1,0"))
                     (rule "polySimp_mulComm0" (formula "32") (term "0,1,0"))
                     (rule "polySimp_addAssoc" (formula "32") (term "0"))
                     (rule "polySimp_addComm0" (formula "32") (term "0,0"))
                     (rule "polySimp_pullOutFactor2b" (formula "32") (term "0"))
                     (rule "add_literals" (formula "32") (term "1,1,0"))
                     (rule "times_zero_1" (formula "32") (term "1,0"))
                     (rule "add_zero_right" (formula "32") (term "0"))
                     (rule "applyEq" (formula "34") (term "0") (ifseqformula "36"))
                     (rule "inEqSimp_homoInEq1" (formula "34"))
                     (rule "polySimp_mulComm0" (formula "34") (term "1,0"))
                     (rule "polySimp_rightDist" (formula "34") (term "1,0"))
                     (rule "polySimp_mulLiterals" (formula "34") (term "1,1,0"))
                     (rule "polySimp_elimOne" (formula "34") (term "1,1,0"))
                     (rule "polySimp_mulComm0" (formula "34") (term "0,1,0"))
                     (rule "polySimp_addComm1" (formula "34") (term "0"))
                     (rule "polySimp_addAssoc" (formula "34") (term "0,0"))
                     (rule "polySimp_addComm1" (formula "34") (term "0,0,0"))
                     (rule "polySimp_pullOutFactor2b" (formula "34") (term "0,0"))
                     (rule "add_literals" (formula "34") (term "1,1,0,0"))
                     (rule "times_zero_1" (formula "34") (term "1,0,0"))
                     (rule "add_zero_right" (formula "34") (term "0,0"))
                     (rule "applyEq" (formula "35") (term "0,1") (ifseqformula "33"))
                     (rule "inEqSimp_invertInEq1" (formula "32"))
                     (rule "mul_literals" (formula "32") (term "1"))
                     (rule "polySimp_mulLiterals" (formula "32") (term "0"))
                     (rule "polySimp_elimOne" (formula "32") (term "0"))
                     (rule "inEqSimp_sepPosMonomial0" (formula "34"))
                     (rule "polySimp_mulComm0" (formula "34") (term "1"))
                     (rule "polySimp_rightDist" (formula "34") (term "1"))
                     (rule "mul_literals" (formula "34") (term "0,1"))
                     (rule "polySimp_mulLiterals" (formula "34") (term "1,1"))
                     (rule "polySimp_elimOne" (formula "34") (term "1,1"))
                     (rule "shift_paren_or" (formula "3") (term "0,0,0"))
                      (builtin "One Step Simplification" (formula "3"))
                     (rule "eqSymm" (formula "3") (term "1,1,0,0,0"))
                     (rule "castedGetAny" (formula "3") (term "1,0,0,0,0,0,0"))
                     (rule "castedGetAny" (formula "3") (term "0,0,1,0,0,0"))
                     (rule "castedGetAny" (formula "3") (term "0,1,1,0,0,0"))
                      (builtin "One Step Simplification" (formula "3"))
                     (rule "true_left" (formula "3"))
                     (rule "cnf_rightDist" (formula "2") (term "0,0,0"))
                     (rule "distr_forallAnd" (formula "2") (term "0,0"))
                     (rule "distr_forallAnd" (formula "2") (term "0"))
                     (rule "distr_forallAnd" (formula "2"))
                     (rule "andLeft" (formula "2"))
                     (rule "cnf_rightDist" (formula "4") (term "0,0,0"))
                     (rule "distr_forallAnd" (formula "4") (term "0,0"))
                     (rule "distr_forallAnd" (formula "4") (term "0"))
                     (rule "distr_forallAnd" (formula "4"))
                     (rule "andLeft" (formula "4"))
                     (rule "commute_or_2" (formula "2") (term "0,0,0"))
                      (builtin "One Step Simplification" (formula "2"))
                     (rule "eqSymm" (formula "2") (term "1,0,0,0,0"))
                     (rule "castedGetAny" (formula "2") (term "1,0,0,1,0,0,0"))
                     (rule "castedGetAny" (formula "2") (term "0,0,0,0,0,0"))
                     (rule "castedGetAny" (formula "2") (term "0,1,0,0,0,0"))
                      (builtin "One Step Simplification" (formula "2"))
                     (rule "true_left" (formula "2"))
                     (rule "commute_or_2" (formula "3") (term "0,0,0"))
                      (builtin "One Step Simplification" (formula "3"))
                     (rule "eqSymm" (formula "3") (term "1,0,0,0,0"))
                     (rule "castedGetAny" (formula "3") (term "1,0,0,1,0,0,0"))
                     (rule "castedGetAny" (formula "3") (term "0,0,0,0,0,0"))
                     (rule "castedGetAny" (formula "3") (term "0,1,0,0,0,0"))
                      (builtin "One Step Simplification" (formula "3"))
                     (rule "true_left" (formula "3"))
                     (rule "shift_paren_or" (formula "2") (term "0,0,0"))
                      (builtin "One Step Simplification" (formula "2"))
                     (rule "eqSymm" (formula "2") (term "1,1,0,0,0"))
                     (rule "castedGetAny" (formula "2") (term "1,0,0,0,0,0,0"))
                     (rule "castedGetAny" (formula "2") (term "0,0,1,0,0,0"))
                     (rule "castedGetAny" (formula "2") (term "0,1,1,0,0,0"))
                      (builtin "One Step Simplification" (formula "2"))
                     (rule "true_left" (formula "2"))
                     (rule "Use_information_flow_contract_for_compareTo_325434207" (formula "20") (ifseqformula "20"))
                      (builtin "One Step Simplification" (formula "20") (ifInst ""  (formula "93")) (ifInst ""  (formula "93")))
                     (rule "true_left" (formula "20"))
                     (rule "Use_information_flow_contract_for_getOrder_757678341" (formula "62") (ifseqformula "26"))
                     (rule "replace_known_left" (formula "62") (term "1,1") (ifseqformula "8"))
                      (builtin "One Step Simplification" (formula "62"))
                     (rule "true_left" (formula "62"))
                     (rule "Use_information_flow_contract_for_multiply_1272441881" (formula "73") (ifseqformula "39"))
                     (rule "replaceKnownSelect_taclet21_11" (formula "73") (term "1,1,1"))
                     (rule "replaceKnownSelect_taclet21_12" (formula "73") (term "0,1,1"))
                     (rule "replaceKnownAuxiliaryConstant_taclet00121_17" (formula "73") (term "1,1,1"))
                     (rule "replaceKnownAuxiliaryConstant_taclet000121_19" (formula "73") (term "0,1,1"))
                     (rule "replaceKnownSelect_taclet21_8" (formula "73") (term "1,1,0,1"))
                     (rule "replaceKnownSelect_taclet21_9" (formula "73") (term "0,1,0,1"))
                     (rule "replaceKnownAuxiliaryConstant_taclet21_10" (formula "73") (term "1,1,0,1"))
                      (builtin "One Step Simplification" (formula "73") (ifInst ""  (formula "84")) (ifInst ""  (formula "83")) (ifInst ""  (formula "101")))
                     (rule "pullOutSelect" (formula "73") (term "1,0,1") (inst "selectSK=org_bouncycastle_math_ec_ECPoint_value_4"))
                     (rule "simplifySelectOfAnonEQ" (formula "73") (ifseqformula "27"))
                      (builtin "One Step Simplification" (formula "73") (ifInst ""  (formula "98")) (ifInst ""  (formula "15")))
                     (rule "applyEqReverse" (formula "74") (term "1,0,1") (ifseqformula "73"))
                     (rule "hideAuxiliaryEq" (formula "73"))
                     (rule "pullOutSelect" (formula "73") (term "0,0,1") (inst "selectSK=org_bouncycastle_math_ec_ECPoint_value_5"))
                     (rule "simplifySelectOfAnonEQ" (formula "73") (ifseqformula "64"))
                      (builtin "One Step Simplification" (formula "73") (ifInst ""  (formula "99")) (ifInst ""  (formula "51")))
                     (rule "applyEqReverse" (formula "74") (term "0,0,1") (ifseqformula "73"))
                     (rule "hideAuxiliaryEq" (formula "73"))
                     (rule "replace_known_left" (formula "73") (term "0,1") (ifseqformula "6"))
                      (builtin "One Step Simplification" (formula "73"))
                     (rule "notLeft" (formula "73"))
                     (rule "Class_invariant_axiom_for_org_bouncycastle_math_ec_ECPoint" (formula "79") (term "0"))
                      (builtin "One Step Simplification" (formula "79"))
                     (rule "Class_invariant_axiom_for_org_bouncycastle_math_ec_ECPoint" (formula "79"))
                     (rule "closeTrue" (formula "79"))
                  )
               )
               (branch " resultAtPost_226_B.<created>@heapAtPre_B«anonHeapFunction» = TRUE FALSE"
                  (rule "applyEqReverse" (formula "2") (term "1,0") (ifseqformula "1"))
                  (rule "hideAuxiliaryEq" (formula "1"))
                  (rule "replace_known_right" (formula "1") (term "1,0,0") (ifseqformula "75"))
                   (builtin "One Step Simplification" (formula "1"))
                  (rule "replace_known_right" (formula "68") (term "1") (ifseqformula "75"))
                   (builtin "One Step Simplification" (formula "68"))
                  (rule "Class_axiom_0_in_de_polyas_core3_open_cred_CredTool" (inst "seq=seq") (inst "i=i") (inst "str=str") (inst "seq_0=seq_0") (inst "i_0=i_0") (inst "sv_heap=heapAtPre_B<<anonHeapFunction>>"))
                  (rule "andLeft" (formula "1"))
                  (rule "castedGetAny" (formula "1") (term "0,0,1,0,0"))
                  (rule "castedGetAny" (formula "2") (term "0,1,1,0,0,0"))
                  (rule "castedGetAny" (formula "1") (term "0,0,0,0,0"))
                  (rule "nnf_imp2or" (formula "1") (term "0,0"))
                   (builtin "One Step Simplification" (formula "1"))
                  (rule "nnf_imp2or" (formula "2") (term "0,0,0"))
                  (rule "nnf_imp2or" (formula "2") (term "1,0,0,0"))
                  (rule "nnf_notAnd" (formula "2") (term "0,0,0,0"))
                   (builtin "One Step Simplification" (formula "2"))
                  (rule "nnf_notAnd" (formula "2") (term "0,1,0,0,0"))
                   (builtin "One Step Simplification" (formula "2"))
                  (rule "nnf_notOr" (formula "2") (term "0,0,0,0,0"))
                  (rule "commute_or" (formula "2") (term "0,0,0,0"))
                  (rule "commute_or_2" (formula "2") (term "0,0,0"))
                  (rule "shift_paren_or" (formula "2") (term "0,0,0,0"))
                  (rule "commute_and" (formula "2") (term "1,0,0,0"))
                  (rule "shift_paren_or" (formula "2") (term "0,0,0,0,0"))
                  (rule "commute_or_2" (formula "2") (term "0,0,0,0,0"))
                   (builtin "One Step Simplification" (formula "2"))
                  (rule "commute_or_2" (formula "2") (term "0,0,0,0"))
                  (rule "cnf_rightDist" (formula "2") (term "0,0,0"))
                  (rule "distr_forallAnd" (formula "2") (term "0,0"))
                  (rule "distr_forallAnd" (formula "2") (term "0"))
                  (rule "distr_forallAnd" (formula "2"))
                  (rule "andLeft" (formula "2"))
                  (rule "commute_or_2" (formula "2") (term "0,0,0"))
                   (builtin "One Step Simplification" (formula "2"))
                  (rule "eqSymm" (formula "2") (term "1,0,0,0,0"))
                  (rule "castedGetAny" (formula "2") (term "0,0,0,0,0,0"))
                  (rule "castedGetAny" (formula "2") (term "1,0,0,1,0,0,0"))
                  (rule "castedGetAny" (formula "2") (term "0,1,0,0,0,0"))
                   (builtin "One Step Simplification" (formula "2"))
                  (rule "true_left" (formula "2"))
                  (rule "shift_paren_or" (formula "2") (term "0,0,0"))
                   (builtin "One Step Simplification" (formula "2"))
                  (rule "eqSymm" (formula "2") (term "1,1,0,0,0"))
                  (rule "castedGetAny" (formula "2") (term "0,0,0,0,0,0"))
                  (rule "castedGetAny" (formula "2") (term "0,0,1,0,0,0"))
                  (rule "castedGetAny" (formula "2") (term "0,1,1,0,0,0"))
                   (builtin "One Step Simplification" (formula "2"))
                  (rule "true_left" (formula "2"))
                  (rule "Class_axiom_0_in_de_polyas_core3_open_cred_CredTool" (inst "seq=seq") (inst "i=i") (inst "str=str") (inst "seq_0=seq_0") (inst "i_0=i_0") (inst "sv_heap=anon_heap_mod<<anonHeapFunction>>"))
                  (rule "andLeft" (formula "1"))
                  (rule "castedGetAny" (formula "2") (term "0,1,1,0,0,0"))
                  (rule "castedGetAny" (formula "1") (term "0,0,0,0,0"))
                  (rule "castedGetAny" (formula "1") (term "0,0,1,0,0"))
                  (rule "nnf_imp2or" (formula "1") (term "0,0"))
                   (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "3")))
                  (rule "true_left" (formula "1"))
                  (rule "nnf_imp2or" (formula "1") (term "0,0,0"))
                  (rule "nnf_notAnd" (formula "1") (term "0,0,0,0"))
                   (builtin "One Step Simplification" (formula "1"))
                  (rule "nnf_imp2or" (formula "1") (term "1,0,0,0"))
                  (rule "nnf_notOr" (formula "1") (term "0,0,0,0,0"))
                  (rule "nnf_notAnd" (formula "1") (term "0,1,0,0,0"))
                   (builtin "One Step Simplification" (formula "1"))
                  (rule "commute_or" (formula "1") (term "0,0,0,0"))
                  (rule "commute_or_2" (formula "1") (term "0,0,0"))
                  (rule "shift_paren_or" (formula "1") (term "0,0,0,0"))
                  (rule "commute_and" (formula "1") (term "1,0,0,0"))
                  (rule "shift_paren_or" (formula "1") (term "0,0,0,0,0"))
                  (rule "commute_or_2" (formula "1") (term "0,0,0,0,0"))
                   (builtin "One Step Simplification" (formula "1"))
                  (rule "commute_or_2" (formula "1") (term "0,0,0,0"))
                  (rule "cnf_rightDist" (formula "1") (term "0,0,0"))
                  (rule "distr_forallAnd" (formula "1") (term "0,0"))
                  (rule "distr_forallAnd" (formula "1") (term "0"))
                  (rule "distr_forallAnd" (formula "1"))
                  (rule "andLeft" (formula "1"))
                  (rule "commute_or_2" (formula "1") (term "0,0,0"))
                   (builtin "One Step Simplification" (formula "1"))
                  (rule "eqSymm" (formula "1") (term "1,0,0,0,0"))
                  (rule "castedGetAny" (formula "1") (term "0,0,0,0,0,0"))
                  (rule "castedGetAny" (formula "1") (term "1,0,0,1,0,0,0"))
                  (rule "castedGetAny" (formula "1") (term "0,1,0,0,0,0"))
                   (builtin "One Step Simplification" (formula "1"))
                  (rule "true_left" (formula "1"))
                  (rule "shift_paren_or" (formula "1") (term "0,0,0"))
                   (builtin "One Step Simplification" (formula "1"))
                  (rule "eqSymm" (formula "1") (term "1,1,0,0,0"))
                  (rule "castedGetAny" (formula "1") (term "0,0,0,0,0,0"))
                  (rule "castedGetAny" (formula "1") (term "0,0,1,0,0,0"))
                  (rule "castedGetAny" (formula "1") (term "0,1,1,0,0,0"))
                   (builtin "One Step Simplification" (formula "1"))
                  (rule "true_left" (formula "1"))
                  (rule "Class_axiom_0_in_de_polyas_core3_open_cred_CredTool" (inst "seq=seq") (inst "i=i") (inst "str=str") (inst "seq_0=seq_0") (inst "i_0=i_0") (inst "sv_heap=anon_heap_multiply<<anonHeapFunction>>"))
                  (rule "andLeft" (formula "1"))
                  (rule "castedGetAny" (formula "2") (term "0,1,1,0,0,0"))
                  (rule "castedGetAny" (formula "1") (term "0,0,0,0,0"))
                  (rule "castedGetAny" (formula "1") (term "0,0,1,0,0"))
                  (rule "nnf_imp2or" (formula "1") (term "0,0"))
                   (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "3")))
                  (rule "true_left" (formula "1"))
                  (rule "nnf_imp2or" (formula "1") (term "0,0,0"))
                  (rule "nnf_notAnd" (formula "1") (term "0,0,0,0"))
                   (builtin "One Step Simplification" (formula "1"))
                  (rule "nnf_imp2or" (formula "1") (term "1,0,0,0"))
                  (rule "nnf_notOr" (formula "1") (term "0,0,0,0,0"))
                  (rule "nnf_notAnd" (formula "1") (term "0,1,0,0,0"))
                   (builtin "One Step Simplification" (formula "1"))
                  (rule "commute_or" (formula "1") (term "0,0,0,0"))
                  (rule "commute_or_2" (formula "1") (term "0,0,0"))
                  (rule "shift_paren_or" (formula "1") (term "0,0,0,0"))
                  (rule "Class_axiom_0_in_de_polyas_core3_open_cred_CredTool" (inst "seq=seq") (inst "i=i") (inst "str=str") (inst "seq_0=seq_0") (inst "i_0=i_0") (inst "sv_heap=heapAtPre_A<<anonHeapFunction>>"))
                  (rule "andLeft" (formula "1"))
                  (rule "castedGetAny" (formula "1") (term "0,0,0,0,0"))
                  (rule "castedGetAny" (formula "2") (term "0,1,1,0,0,0"))
                  (rule "castedGetAny" (formula "1") (term "0,0,1,0,0"))
                  (rule "nnf_imp2or" (formula "1") (term "0,0"))
                   (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "4")))
                  (rule "true_left" (formula "1"))
                  (rule "nnf_imp2or" (formula "1") (term "0,0,0"))
                  (rule "nnf_imp2or" (formula "1") (term "1,0,0,0"))
                  (rule "nnf_notAnd" (formula "1") (term "0,0,0,0"))
                   (builtin "One Step Simplification" (formula "1"))
                  (rule "nnf_notAnd" (formula "1") (term "0,1,0,0,0"))
                   (builtin "One Step Simplification" (formula "1"))
                  (rule "nnf_notOr" (formula "1") (term "0,0,0,0,0"))
                  (rule "commute_or" (formula "1") (term "0,0,0,0"))
                  (rule "commute_or_2" (formula "1") (term "0,0,0"))
                  (rule "Class_axiom_0_in_de_polyas_core3_open_cred_CredTool" (inst "seq=seq") (inst "i=i") (inst "str=str") (inst "seq_0=seq_0") (inst "i_0=i_0") (inst "sv_heap=anon(heapAtPre_A<<anonHeapFunction>>,
     empty,
     anon_heap_mod<<anonHeapFunction>>)"))
                   (builtin "One Step Simplification" (formula "1"))
                  (rule "andLeft" (formula "1"))
                  (rule "castedGetAny" (formula "2") (term "0,1,1,0,0,0"))
                  (rule "castedGetAny" (formula "1") (term "0,0,0,0,0"))
                  (rule "castedGetAny" (formula "1") (term "0,0,1,0,0"))
                  (rule "nnf_imp2or" (formula "1") (term "0,0"))
                   (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "5")))
                  (rule "true_left" (formula "1"))
                  (rule "nnf_imp2or" (formula "1") (term "0,0,0"))
                  (rule "nnf_imp2or" (formula "1") (term "1,0,0,0"))
                  (rule "nnf_notAnd" (formula "1") (term "0,0,0,0"))
                   (builtin "One Step Simplification" (formula "1"))
                  (rule "nnf_notOr" (formula "1") (term "0,0,0,0,0"))
                  (rule "nnf_notAnd" (formula "1") (term "0,1,0,0,0"))
                   (builtin "One Step Simplification" (formula "1"))
                  (rule "nnf_notOr" (formula "1") (term "1,0,0,0,0,0"))
                  (rule "Class_axiom_0_in_de_polyas_core3_open_cred_CredTool" (inst "seq=seq") (inst "i=i") (inst "str=str") (inst "seq_0=seq_0") (inst "i_0=i_0") (inst "sv_heap=heapAfter_mod_A_0"))
                  (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "1,0,0,0,0,0,1") (ifseqformula "30"))
                  (rule "andLeft" (formula "1"))
                  (rule "castedGetAny" (formula "1") (term "0,0,0,0,0"))
                  (rule "castedGetAny" (formula "1") (term "0,0,1,0,0"))
                  (rule "castedGetAny" (formula "2") (term "0,1,1,0,0,0"))
                  (rule "nnf_imp2or" (formula "1") (term "0,0"))
                   (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "6")))
                  (rule "true_left" (formula "1"))
                  (rule "nnf_imp2or" (formula "1") (term "0,0,0"))
                  (rule "nnf_imp2or" (formula "1") (term "1,0,0,0"))
                  (rule "nnf_notAnd" (formula "1") (term "0,0,0,0"))
                   (builtin "One Step Simplification" (formula "1"))
                  (rule "nnf_notOr" (formula "1") (term "0,0,0,0,0"))
                  (rule "nnf_notAnd" (formula "1") (term "0,1,0,0,0"))
                   (builtin "One Step Simplification" (formula "1"))
                  (rule "nnf_notOr" (formula "1") (term "1,0,0,0,0,0"))
                  (rule "Class_axiom_0_in_de_polyas_core3_open_cred_CredTool" (inst "seq=seq") (inst "i=i") (inst "str=str") (inst "seq_0=seq_0") (inst "i_0=i_0") (inst "sv_heap=anon(heapAfter_mod_A_0,
     empty,
     anon_heap_multiply<<anonHeapFunction>>)"))
                   (builtin "One Step Simplification" (formula "1"))
                  (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,1,0,0,0,0,0,1") (ifseqformula "30"))
                  (rule "andLeft" (formula "1"))
                  (rule "castedGetAny" (formula "1") (term "0,0,1,0,0"))
                  (rule "castedGetAny" (formula "2") (term "0,1,1,0,0,0"))
                  (rule "castedGetAny" (formula "1") (term "0,0,0,0,0"))
                  (rule "nnf_imp2or" (formula "1") (term "0,0"))
                   (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "6")))
                  (rule "true_left" (formula "1"))
                  (rule "nnf_imp2or" (formula "1") (term "0,0,0"))
                  (rule "nnf_notAnd" (formula "1") (term "0,0,0,0"))
                   (builtin "One Step Simplification" (formula "1"))
                  (rule "nnf_imp2or" (formula "1") (term "1,0,0,0"))
                  (rule "nnf_notOr" (formula "1") (term "0,0,0,0,0"))
                  (rule "nnf_notAnd" (formula "1") (term "0,1,0,0,0"))
                   (builtin "One Step Simplification" (formula "1"))
                  (rule "nnf_notOr" (formula "1") (term "1,0,0,0,0,0"))
                  (rule "nnf_notOr" (formula "1") (term "0,1,0,0,0,0,0"))
                  (rule "Class_axiom_0_in_de_polyas_core3_open_cred_CredTool" (inst "seq=seq") (inst "i=i") (inst "str=str") (inst "seq_0=seq_0") (inst "i_0=i_0") (inst "sv_heap=heapAfter_multiply_A_1"))
                  (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "1,0,0,0,0,0,1") (ifseqformula "38"))
                  (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,1,0,0,0,0,0,1") (ifseqformula "31"))
                  (rule "andLeft" (formula "1"))
                  (rule "castedGetAny" (formula "1") (term "0,0,0,0,0"))
                  (rule "castedGetAny" (formula "2") (term "0,1,1,0,0,0"))
                  (rule "castedGetAny" (formula "1") (term "0,0,1,0,0"))
                  (rule "nnf_imp2or" (formula "1") (term "0,0"))
                   (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "7")))
                  (rule "true_left" (formula "1"))
                  (rule "nnf_imp2or" (formula "1") (term "0,0,0"))
                  (rule "nnf_imp2or" (formula "1") (term "1,0,0,0"))
                  (rule "nnf_notAnd" (formula "1") (term "0,0,0,0"))
                   (builtin "One Step Simplification" (formula "1"))
                  (rule "nnf_notAnd" (formula "1") (term "0,1,0,0,0"))
                   (builtin "One Step Simplification" (formula "1"))
                  (rule "nnf_notOr" (formula "1") (term "0,0,0,0,0"))
                  (rule "nnf_notOr" (formula "1") (term "1,0,0,0,0,0"))
                  (rule "nnf_notOr" (formula "1") (term "0,1,0,0,0,0,0"))
                  (rule "Class_axiom_0_in_de_polyas_core3_open_cred_CredTool" (inst "seq=seq") (inst "i=i") (inst "str=str") (inst "seq_0=seq_0") (inst "i_0=i_0") (inst "sv_heap=heapAtPost_A"))
                  (rule "andLeft" (formula "1"))
                  (rule "castedGetAny" (formula "2") (term "0,1,1,0,0,0"))
                  (rule "castedGetAny" (formula "1") (term "0,0,0,0,0"))
                  (rule "castedGetAny" (formula "1") (term "0,0,1,0,0"))
                  (rule "applyEqRigid" (formula "2") (term "0,0,1,0,0,0,0,0") (ifseqformula "46"))
                  (rule "selectCreatedOfAnonAsFormulaEQ" (formula "2") (term "1,0,0,0,0,0") (ifseqformula "39"))
                  (rule "selectCreatedOfAnonAsFormulaEQ" (formula "2") (term "0,1,0,0,0,0,0") (ifseqformula "32"))
                  (rule "nnf_imp2or" (formula "1") (term "0,0"))
                   (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "7")))
                  (rule "true_left" (formula "1"))
                  (rule "nnf_imp2or" (formula "1") (term "0,0,0"))
                  (rule "nnf_imp2or" (formula "1") (term "1,0,0,0"))
                  (rule "nnf_notAnd" (formula "1") (term "0,0,0,0"))
                   (builtin "One Step Simplification" (formula "1"))
                  (rule "nnf_notAnd" (formula "1") (term "0,1,0,0,0"))
                   (builtin "One Step Simplification" (formula "1"))
                  (rule "nnf_notOr" (formula "1") (term "0,0,0,0,0"))
                  (rule "nnf_notOr" (formula "1") (term "1,0,0,0,0,0"))
                  (rule "nnf_notOr" (formula "1") (term "0,1,0,0,0,0,0"))
                  (rule "Class_axiom_0_in_de_polyas_core3_open_cred_CredTool" (inst "seq=seq") (inst "i=i") (inst "str=str") (inst "seq_0=seq_0") (inst "i_0=i_0") (inst "sv_heap=anon(heapAtPre_B<<anonHeapFunction>>,
     empty,
     anon_heap_mod<<anonHeapFunction>>)"))
                   (builtin "One Step Simplification" (formula "1"))
                  (rule "andLeft" (formula "1"))
                  (rule "castedGetAny" (formula "1") (term "0,0,0,0,0"))
                  (rule "castedGetAny" (formula "1") (term "0,0,1,0,0"))
                  (rule "castedGetAny" (formula "2") (term "0,1,1,0,0,0"))
                  (rule "nnf_imp2or" (formula "1") (term "0,0"))
                   (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "7")))
                  (rule "true_left" (formula "1"))
                  (rule "nnf_imp2or" (formula "1") (term "0,0,0"))
                  (rule "nnf_notAnd" (formula "1") (term "0,0,0,0"))
                   (builtin "One Step Simplification" (formula "1"))
                  (rule "nnf_imp2or" (formula "1") (term "1,0,0,0"))
                  (rule "nnf_notOr" (formula "1") (term "0,0,0,0,0"))
                  (rule "nnf_notAnd" (formula "1") (term "0,1,0,0,0"))
                   (builtin "One Step Simplification" (formula "1"))
                  (rule "nnf_notOr" (formula "1") (term "1,0,0,0,0,0"))
                  (rule "Class_axiom_0_in_de_polyas_core3_open_cred_CredTool" (inst "seq=seq") (inst "i=i") (inst "str=str") (inst "seq_0=seq_0") (inst "i_0=i_0") (inst "sv_heap=heapAfter_mod_B_0"))
                  (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "1,0,0,0,0,0,1") (ifseqformula "66"))
                  (rule "andLeft" (formula "1"))
                  (rule "castedGetAny" (formula "2") (term "0,1,1,0,0,0"))
                  (rule "castedGetAny" (formula "1") (term "0,0,1,0,0"))
                  (rule "castedGetAny" (formula "1") (term "0,0,0,0,0"))
                  (rule "nnf_imp2or" (formula "1") (term "0,0"))
                   (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "8")))
                  (rule "true_left" (formula "1"))
                  (rule "nnf_imp2or" (formula "1") (term "0,0,0"))
                  (rule "nnf_notAnd" (formula "1") (term "0,0,0,0"))
                   (builtin "One Step Simplification" (formula "1"))
                  (rule "nnf_imp2or" (formula "1") (term "1,0,0,0"))
                  (rule "nnf_notOr" (formula "1") (term "0,0,0,0,0"))
                  (rule "nnf_notAnd" (formula "1") (term "0,1,0,0,0"))
                   (builtin "One Step Simplification" (formula "1"))
                  (rule "nnf_notOr" (formula "1") (term "1,0,0,0,0,0"))
                  (rule "Class_axiom_0_in_de_polyas_core3_open_cred_CredTool" (inst "seq=seq") (inst "i=i") (inst "str=str") (inst "seq_0=seq_0") (inst "i_0=i_0") (inst "sv_heap=anon(heapAfter_mod_B_0,
     empty,
     anon_heap_multiply<<anonHeapFunction>>)"))
                   (builtin "One Step Simplification" (formula "1"))
                  (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,1,0,0,0,0,0,1") (ifseqformula "66"))
                  (rule "andLeft" (formula "1"))
                  (rule "castedGetAny" (formula "2") (term "0,1,1,0,0,0"))
                  (rule "castedGetAny" (formula "1") (term "0,0,1,0,0"))
                  (rule "castedGetAny" (formula "1") (term "0,0,0,0,0"))
                  (rule "nnf_imp2or" (formula "1") (term "0,0"))
                   (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "8")))
                  (rule "true_left" (formula "1"))
                  (rule "nnf_imp2or" (formula "1") (term "0,0,0"))
                  (rule "nnf_imp2or" (formula "1") (term "1,0,0,0"))
                  (rule "nnf_notAnd" (formula "1") (term "0,0,0,0"))
                   (builtin "One Step Simplification" (formula "1"))
                  (rule "nnf_notAnd" (formula "1") (term "0,1,0,0,0"))
                   (builtin "One Step Simplification" (formula "1"))
                  (rule "nnf_notOr" (formula "1") (term "0,0,0,0,0"))
                  (rule "nnf_notOr" (formula "1") (term "1,0,0,0,0,0"))
                  (rule "nnf_notOr" (formula "1") (term "0,1,0,0,0,0,0"))
                  (rule "Class_axiom_0_in_de_polyas_core3_open_cred_CredTool" (inst "seq=seq") (inst "i=i") (inst "str=str") (inst "seq_0=seq_0") (inst "i_0=i_0") (inst "sv_heap=heapAfter_multiply_B_1"))
                  (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "1,0,0,0,0,0,1") (ifseqformula "74"))
                  (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,1,0,0,0,0,0,1") (ifseqformula "67"))
                  (rule "andLeft" (formula "1"))
                  (rule "castedGetAny" (formula "1") (term "0,0,0,0,0"))
                  (rule "castedGetAny" (formula "1") (term "0,0,1,0,0"))
                  (rule "castedGetAny" (formula "2") (term "0,1,1,0,0,0"))
                  (rule "nnf_imp2or" (formula "1") (term "0,0"))
                   (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "9")))
                  (rule "true_left" (formula "1"))
                  (rule "nnf_imp2or" (formula "1") (term "0,0,0"))
                  (rule "nnf_notAnd" (formula "1") (term "0,0,0,0"))
                   (builtin "One Step Simplification" (formula "1"))
                  (rule "nnf_imp2or" (formula "1") (term "1,0,0,0"))
                  (rule "nnf_notOr" (formula "1") (term "0,0,0,0,0"))
                  (rule "nnf_notAnd" (formula "1") (term "0,1,0,0,0"))
                   (builtin "One Step Simplification" (formula "1"))
                  (rule "nnf_notOr" (formula "1") (term "1,0,0,0,0,0"))
                  (rule "nnf_notOr" (formula "1") (term "0,1,0,0,0,0,0"))
                  (rule "Class_axiom_0_in_de_polyas_core3_open_cred_CredTool" (inst "seq=seq") (inst "i=i") (inst "str=str") (inst "seq_0=seq_0") (inst "i_0=i_0") (inst "sv_heap=heapAtPost_B"))
                  (rule "andLeft" (formula "1"))
                  (rule "castedGetAny" (formula "1") (term "0,0,0,0,0"))
                  (rule "castedGetAny" (formula "1") (term "0,0,1,0,0"))
                  (rule "castedGetAny" (formula "2") (term "0,1,1,0,0,0"))
                  (rule "applyEq" (formula "2") (term "0,0,1,0,0,0,0,0") (ifseqformula "83"))
                  (rule "selectCreatedOfAnonAsFormulaEQ" (formula "2") (term "1,0,0,0,0,0") (ifseqformula "75"))
                  (rule "selectCreatedOfAnonAsFormulaEQ" (formula "2") (term "0,1,0,0,0,0,0") (ifseqformula "68"))
                  (rule "nnf_imp2or" (formula "1") (term "0,0"))
                   (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "9")))
                  (rule "true_left" (formula "1"))
                  (rule "nnf_imp2or" (formula "1") (term "0,0,0"))
                  (rule "nnf_notAnd" (formula "1") (term "0,0,0,0"))
                   (builtin "One Step Simplification" (formula "1"))
                  (rule "nnf_imp2or" (formula "1") (term "1,0,0,0"))
                  (rule "nnf_notOr" (formula "1") (term "0,0,0,0,0"))
                  (rule "nnf_notAnd" (formula "1") (term "0,1,0,0,0"))
                   (builtin "One Step Simplification" (formula "1"))
                  (rule "nnf_notOr" (formula "1") (term "1,0,0,0,0,0"))
                  (rule "nnf_notOr" (formula "1") (term "0,1,0,0,0,0,0"))
                  (rule "div_axiom" (formula "34") (term "0,1") (inst "quotient=quotient_0"))
                  (rule "polySimp_mulComm0" (formula "34") (term "0,2,1,1"))
                  (rule "polySimp_mulComm0" (formula "34") (term "1,1,1,1,1"))
                  (rule "polySimp_mulComm0" (formula "34") (term "0,1,0,1"))
                  (rule "polySimp_mulComm0" (formula "34") (term "0,1,1,1"))
                  (rule "commute_or" (formula "4") (term "0,0,0,0"))
                  (rule "shift_paren_or" (formula "5") (term "0,0,0,0"))
                  (rule "commute_and" (formula "6") (term "1,0,0,0"))
                  (rule "shift_paren_or" (formula "6") (term "0,0,0,0,0"))
                  (rule "commute_or" (formula "4") (term "0,1,0,0,0"))
                  (rule "commute_and" (formula "5") (term "1,0,0,0"))
                  (rule "commute_or" (formula "3") (term "0,0,0,0"))
                  (rule "ifthenelse_split" (formula "8") (term "0"))
                  (branch " resultAtPost_226_B.<created>@anon_heap_mod«anonHeapFunction» = TRUE TRUE"
                     (rule "applyEqReverse" (formula "106") (term "1") (ifseqformula "9"))
                     (rule "hideAuxiliaryEq" (formula "9"))
                     (rule "replace_known_left" (formula "76") (term "0") (ifseqformula "8"))
                      (builtin "One Step Simplification" (formula "76"))
                     (rule "true_left" (formula "76"))
                     (rule "commute_or" (formula "3") (term "0,1,0,0,0"))
                     (rule "commute_or" (formula "2") (term "0,0,0,0"))
                     (rule "onlyCreatedObjectsAreReferenced" (formula "31") (term "2") (ifseqformula "22"))
                     (rule "replace_known_left" (formula "31") (term "1") (ifseqformula "16"))
                      (builtin "One Step Simplification" (formula "31") (ifInst ""  (formula "95")))
                     (rule "true_left" (formula "31"))
                     (rule "onlyCreatedObjectsAreReferenced" (formula "96") (term "0") (ifseqformula "22"))
                     (rule "replace_known_left" (formula "1") (term "1") (ifseqformula "28"))
                      (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "97")))
                     (rule "true_left" (formula "1"))
                     (rule "onlyCreatedObjectsAreReferenced" (formula "14") (term "1,1,0") (ifseqformula "22"))
                     (rule "replace_known_left" (formula "14") (term "1") (ifseqformula "16"))
                      (builtin "One Step Simplification" (formula "14") (ifInst ""  (formula "93")))
                     (rule "true_left" (formula "14"))
                     (rule "onlyCreatedObjectsAreReferenced" (formula "49") (term "1,0") (ifseqformula "56"))
                     (rule "replace_known_left" (formula "49") (term "1") (ifseqformula "50"))
                      (builtin "One Step Simplification" (formula "49") (ifInst ""  (formula "94")))
                     (rule "true_left" (formula "49"))
                     (rule "onlyCreatedObjectsAreReferenced" (formula "61") (term "1,0") (ifseqformula "56"))
                     (rule "replace_known_left" (formula "61") (term "1") (ifseqformula "62"))
                      (builtin "One Step Simplification" (formula "61") (ifInst ""  (formula "98")))
                     (rule "true_left" (formula "61"))
                     (rule "onlyCreatedObjectsAreReferenced" (formula "48") (term "1,0") (ifseqformula "56"))
                     (rule "replace_known_left" (formula "48") (term "1") (ifseqformula "49"))
                      (builtin "One Step Simplification" (formula "48") (ifInst ""  (formula "92")))
                     (rule "true_left" (formula "48"))
                     (rule "onlyCreatedObjectsAreReferenced" (formula "14") (term "1,0") (ifseqformula "22"))
                     (rule "replace_known_left" (formula "14") (term "1") (ifseqformula "15"))
                      (builtin "One Step Simplification" (formula "14") (ifInst ""  (formula "91")))
                     (rule "true_left" (formula "14"))
                     (rule "onlyCreatedObjectsAreReferenced" (formula "63") (term "1,0") (ifseqformula "56"))
                     (rule "replace_known_left" (formula "63") (term "1") (ifseqformula "50"))
                      (builtin "One Step Simplification" (formula "63") (ifInst ""  (formula "96")))
                     (rule "true_left" (formula "63"))
                     (rule "commute_or" (formula "2") (term "0,1,0,0,0"))
                     (rule "commute_or" (formula "1") (term "0,0,0,0"))
                     (rule "commute_or" (formula "1") (term "0,1,0,0,0"))
                     (rule "commute_or_2" (formula "4") (term "0,0,0"))
                     (rule "commute_or_2" (formula "3") (term "0,0,0"))
                     (rule "commute_and" (formula "34") (term "0,1"))
                     (rule "commute_or_2" (formula "6") (term "0,0,0,0,0"))
                      (builtin "One Step Simplification" (formula "6"))
                     (rule "commute_or_2" (formula "2") (term "0,0,0"))
                     (rule "commute_or_2" (formula "1") (term "0,0,0"))
                     (rule "shift_paren_or" (formula "5") (term "0,0,0,0,0"))
                     (rule "commute_or_2" (formula "6") (term "0,0,0,0"))
                     (rule "commute_or_2" (formula "4") (term "1,0,0,0,0"))
                     (rule "commute_or_2" (formula "3") (term "1,0,0,0,0"))
                     (rule "commute_or_2" (formula "2") (term "1,0,0,0,0"))
                     (rule "shift_paren_or" (formula "1") (term "0,0,0,0"))
                     (rule "commute_or_2" (formula "5") (term "0,0,0,0,0"))
                      (builtin "One Step Simplification" (formula "5"))
                     (rule "commute_or_2" (formula "5") (term "0,0,0,0"))
                     (rule "shift_paren_or" (formula "4") (term "0,0,0,0"))
                     (rule "shift_paren_or" (formula "3") (term "0,0,0,0"))
                     (rule "shift_paren_or" (formula "2") (term "0,0,0,0"))
                     (rule "cnf_rightDist" (formula "6") (term "0,0,0"))
                     (rule "distr_forallAnd" (formula "6") (term "0,0"))
                     (rule "distr_forallAnd" (formula "6") (term "0"))
                     (rule "distr_forallAnd" (formula "6"))
                     (rule "andLeft" (formula "6"))
                     (rule "commute_or_2" (formula "6") (term "0,0,0"))
                      (builtin "One Step Simplification" (formula "6"))
                     (rule "eqSymm" (formula "6") (term "1,0,0,0,0"))
                     (rule "castedGetAny" (formula "6") (term "1,0,0,1,0,0,0"))
                     (rule "castedGetAny" (formula "6") (term "0,0,0,0,0,0"))
                     (rule "castedGetAny" (formula "6") (term "0,1,0,0,0,0"))
                      (builtin "One Step Simplification" (formula "6"))
                     (rule "true_left" (formula "6"))
                     (rule "shift_paren_or" (formula "6") (term "0,0,0"))
                      (builtin "One Step Simplification" (formula "6"))
                     (rule "eqSymm" (formula "6") (term "1,1,0,0,0"))
                     (rule "castedGetAny" (formula "6") (term "0,0,1,0,0,0"))
                     (rule "castedGetAny" (formula "6") (term "0,0,0,0,0,0"))
                     (rule "castedGetAny" (formula "6") (term "0,1,1,0,0,0"))
                      (builtin "One Step Simplification" (formula "6"))
                     (rule "true_left" (formula "6"))
                     (rule "commute_and" (formula "4") (term "1,0,0,0"))
                     (rule "commute_and" (formula "3") (term "1,0,0,0"))
                     (rule "commute_and" (formula "2") (term "1,0,0,0"))
                     (rule "cnf_rightDist" (formula "5") (term "0,0,0"))
                     (rule "distr_forallAnd" (formula "5") (term "0,0"))
                     (rule "distr_forallAnd" (formula "5") (term "0"))
                     (rule "distr_forallAnd" (formula "5"))
                     (rule "andLeft" (formula "5"))
                     (rule "commute_or_2" (formula "5") (term "0,0,0"))
                      (builtin "One Step Simplification" (formula "5"))
                     (rule "eqSymm" (formula "5") (term "1,0,0,0,0"))
                     (rule "castedGetAny" (formula "5") (term "1,0,0,1,0,0,0"))
                     (rule "castedGetAny" (formula "5") (term "0,0,0,0,0,0"))
                     (rule "castedGetAny" (formula "5") (term "0,1,0,0,0,0"))
                      (builtin "One Step Simplification" (formula "5"))
                     (rule "true_left" (formula "5"))
                     (rule "commute_and" (formula "1") (term "1,0,0,0"))
                     (rule "shift_paren_or" (formula "5") (term "0,0,0"))
                      (builtin "One Step Simplification" (formula "5"))
                     (rule "eqSymm" (formula "5") (term "1,1,0,0,0"))
                     (rule "castedGetAny" (formula "5") (term "0,0,1,0,0,0"))
                     (rule "castedGetAny" (formula "5") (term "0,0,0,0,0,0"))
                     (rule "castedGetAny" (formula "5") (term "0,1,1,0,0,0"))
                      (builtin "One Step Simplification" (formula "5"))
                     (rule "true_left" (formula "5"))
                     (rule "shift_paren_or" (formula "1") (term "0,0,0,0,0"))
                      (builtin "One Step Simplification" (formula "1"))
                     (rule "shift_paren_or" (formula "4") (term "0,0,0,0,0"))
                      (builtin "One Step Simplification" (formula "4"))
                     (rule "shift_paren_or" (formula "3") (term "0,0,0,0,0"))
                      (builtin "One Step Simplification" (formula "3"))
                     (rule "shift_paren_or" (formula "2") (term "0,0,0,0,0"))
                      (builtin "One Step Simplification" (formula "2"))
                     (rule "commute_or_2" (formula "1") (term "0,0,0,0"))
                     (rule "cnf_rightDist" (formula "4") (term "0,0,0"))
                     (rule "distr_forallAnd" (formula "4") (term "0,0"))
                     (rule "distr_forallAnd" (formula "4") (term "0"))
                     (rule "distr_forallAnd" (formula "4"))
                     (rule "andLeft" (formula "4"))
                     (rule "shift_paren_or" (formula "5") (term "0,0,0"))
                      (builtin "One Step Simplification" (formula "5"))
                     (rule "eqSymm" (formula "5") (term "1,1,0,0,0"))
                     (rule "castedGetAny" (formula "5") (term "0,0,0,0,0,0"))
                     (rule "castedGetAny" (formula "5") (term "0,0,1,0,0,0"))
                     (rule "castedGetAny" (formula "5") (term "0,1,1,0,0,0"))
                      (builtin "One Step Simplification" (formula "5"))
                     (rule "true_left" (formula "5"))
                     (rule "cnf_rightDist" (formula "3") (term "0,0,0"))
                     (rule "distr_forallAnd" (formula "3") (term "0,0"))
                     (rule "distr_forallAnd" (formula "3") (term "0"))
                     (rule "distr_forallAnd" (formula "3"))
                     (rule "andLeft" (formula "3"))
                     (rule "shift_paren_or" (formula "4") (term "0,0,0"))
                      (builtin "One Step Simplification" (formula "4"))
                     (rule "eqSymm" (formula "4") (term "1,1,0,0,0"))
                     (rule "castedGetAny" (formula "4") (term "0,0,0,0,0,0"))
                     (rule "castedGetAny" (formula "4") (term "0,0,1,0,0,0"))
                     (rule "castedGetAny" (formula "4") (term "0,1,1,0,0,0"))
                      (builtin "One Step Simplification" (formula "4"))
                     (rule "true_left" (formula "4"))
                     (rule "cnf_rightDist" (formula "2") (term "0,0,0"))
                     (rule "distr_forallAnd" (formula "2") (term "0,0"))
                     (rule "distr_forallAnd" (formula "2") (term "0"))
                     (rule "distr_forallAnd" (formula "2"))
                     (rule "andLeft" (formula "2"))
                     (rule "cnf_rightDist" (formula "1") (term "0,0,0"))
                     (rule "distr_forallAnd" (formula "1") (term "0,0"))
                     (rule "distr_forallAnd" (formula "1") (term "0"))
                     (rule "distr_forallAnd" (formula "1"))
                     (rule "andLeft" (formula "1"))
                     (rule "shift_paren_or" (formula "3") (term "0,0,0"))
                      (builtin "One Step Simplification" (formula "3"))
                     (rule "eqSymm" (formula "3") (term "1,1,0,0,0"))
                     (rule "castedGetAny" (formula "3") (term "0,0,0,0,0,0"))
                     (rule "castedGetAny" (formula "3") (term "0,0,1,0,0,0"))
                     (rule "castedGetAny" (formula "3") (term "0,1,1,0,0,0"))
                      (builtin "One Step Simplification" (formula "3"))
                     (rule "true_left" (formula "3"))
                     (rule "cnf_rightDist" (formula "4") (term "0,0,0"))
                     (rule "distr_forallAnd" (formula "4") (term "0,0"))
                     (rule "distr_forallAnd" (formula "4") (term "0"))
                     (rule "distr_forallAnd" (formula "4"))
                     (rule "andLeft" (formula "4"))
                     (rule "commute_or_2" (formula "4") (term "0,0,0"))
                      (builtin "One Step Simplification" (formula "4"))
                     (rule "eqSymm" (formula "4") (term "1,0,0,0,0"))
                     (rule "castedGetAny" (formula "4") (term "1,0,0,1,0,0,0"))
                     (rule "castedGetAny" (formula "4") (term "0,0,0,0,0,0"))
                     (rule "castedGetAny" (formula "4") (term "0,1,0,0,0,0"))
                      (builtin "One Step Simplification" (formula "4"))
                     (rule "true_left" (formula "4"))
                     (rule "cnf_rightDist" (formula "3") (term "0,0,0"))
                     (rule "distr_forallAnd" (formula "3") (term "0,0"))
                     (rule "distr_forallAnd" (formula "3") (term "0"))
                     (rule "distr_forallAnd" (formula "3"))
                     (rule "andLeft" (formula "3"))
                     (rule "shift_paren_or" (formula "5") (term "0,0,0"))
                      (builtin "One Step Simplification" (formula "5"))
                     (rule "eqSymm" (formula "5") (term "1,1,0,0,0"))
                     (rule "castedGetAny" (formula "5") (term "1,0,0,0,0,0,0"))
                     (rule "castedGetAny" (formula "5") (term "0,0,1,0,0,0"))
                     (rule "castedGetAny" (formula "5") (term "0,1,1,0,0,0"))
                      (builtin "One Step Simplification" (formula "5"))
                     (rule "true_left" (formula "5"))
                     (rule "cnf_rightDist" (formula "2") (term "0,0,0"))
                     (rule "distr_forallAnd" (formula "2") (term "0,0"))
                     (rule "distr_forallAnd" (formula "2") (term "0"))
                     (rule "distr_forallAnd" (formula "2"))
                     (rule "andLeft" (formula "2"))
                     (rule "commute_or_2" (formula "2") (term "0,0,0"))
                      (builtin "One Step Simplification" (formula "2"))
                     (rule "eqSymm" (formula "2") (term "1,0,0,0,0"))
                     (rule "castedGetAny" (formula "2") (term "1,0,0,1,0,0,0"))
                     (rule "castedGetAny" (formula "2") (term "0,0,0,0,0,0"))
                     (rule "castedGetAny" (formula "2") (term "0,1,0,0,0,0"))
                      (builtin "One Step Simplification" (formula "2"))
                     (rule "true_left" (formula "2"))
                     (rule "shift_paren_or" (formula "4") (term "0,0,0"))
                      (builtin "One Step Simplification" (formula "4"))
                     (rule "eqSymm" (formula "4") (term "1,1,0,0,0"))
                     (rule "castedGetAny" (formula "4") (term "0,0,1,0,0,0"))
                     (rule "castedGetAny" (formula "4") (term "1,0,0,0,0,0,0"))
                     (rule "castedGetAny" (formula "4") (term "0,1,1,0,0,0"))
                      (builtin "One Step Simplification" (formula "4"))
                     (rule "true_left" (formula "4"))
                     (rule "cnf_rightDist" (formula "1") (term "0,0,0"))
                     (rule "distr_forallAnd" (formula "1") (term "0,0"))
                     (rule "distr_forallAnd" (formula "1") (term "0"))
                     (rule "distr_forallAnd" (formula "1"))
                     (rule "andLeft" (formula "1"))
                     (rule "ifthenelse_split_for" (formula "32") (term "1,1"))
                     (branch "result_228_A_1.value@heapAtPre_A«anonHeapFunction» ≥ 0 TRUE"
                        (rule "cnf_rightDist" (formula "33"))
                        (rule "andLeft" (formula "33"))
                        (rule "commute_or" (formula "34"))
                        (rule "cnf_rightDist" (formula "33"))
                        (rule "andLeft" (formula "33"))
                        (rule "commute_or" (formula "34"))
                        (rule "shift_paren_or" (formula "3") (term "0,0,0"))
                         (builtin "One Step Simplification" (formula "3"))
                        (rule "eqSymm" (formula "3") (term "1,1,0,0,0"))
                        (rule "castedGetAny" (formula "3") (term "1,0,0,0,0,0,0"))
                        (rule "castedGetAny" (formula "3") (term "0,0,1,0,0,0"))
                        (rule "castedGetAny" (formula "3") (term "0,1,1,0,0,0"))
                         (builtin "One Step Simplification" (formula "3"))
                        (rule "true_left" (formula "3"))
                        (rule "cnf_rightDist" (formula "3") (term "0,0,0"))
                        (rule "distr_forallAnd" (formula "3") (term "0,0"))
                        (rule "distr_forallAnd" (formula "3") (term "0"))
                        (rule "distr_forallAnd" (formula "3"))
                        (rule "andLeft" (formula "3"))
                        (rule "commute_or_2" (formula "3") (term "0,0,0"))
                         (builtin "One Step Simplification" (formula "3"))
                        (rule "eqSymm" (formula "3") (term "1,0,0,0,0"))
                        (rule "castedGetAny" (formula "3") (term "0,0,0,0,0,0"))
                        (rule "castedGetAny" (formula "3") (term "1,0,0,1,0,0,0"))
                        (rule "castedGetAny" (formula "3") (term "0,1,0,0,0,0"))
                         (builtin "One Step Simplification" (formula "3"))
                        (rule "true_left" (formula "3"))
                        (rule "shift_paren_or" (formula "2") (term "0,0,0"))
                         (builtin "One Step Simplification" (formula "2"))
                        (rule "eqSymm" (formula "2") (term "1,1,0,0,0"))
                        (rule "castedGetAny" (formula "2") (term "1,0,0,0,0,0,0"))
                        (rule "castedGetAny" (formula "2") (term "0,0,1,0,0,0"))
                        (rule "castedGetAny" (formula "2") (term "0,1,1,0,0,0"))
                         (builtin "One Step Simplification" (formula "2"))
                        (rule "true_left" (formula "2"))
                        (rule "shift_paren_or" (formula "2") (term "0,0,0"))
                         (builtin "One Step Simplification" (formula "2"))
                        (rule "eqSymm" (formula "2") (term "1,1,0,0,0"))
                        (rule "castedGetAny" (formula "2") (term "1,0,0,0,0,0,0"))
                        (rule "castedGetAny" (formula "2") (term "0,0,1,0,0,0"))
                        (rule "castedGetAny" (formula "2") (term "0,1,1,0,0,0"))
                         (builtin "One Step Simplification" (formula "2"))
                        (rule "true_left" (formula "2"))
                        (rule "cnf_rightDist" (formula "1") (term "0,0,0"))
                        (rule "distr_forallAnd" (formula "1") (term "0,0"))
                        (rule "distr_forallAnd" (formula "1") (term "0"))
                        (rule "distr_forallAnd" (formula "1"))
                        (rule "andLeft" (formula "1"))
                        (rule "commute_or_2" (formula "1") (term "0,0,0"))
                         (builtin "One Step Simplification" (formula "1"))
                        (rule "eqSymm" (formula "1") (term "1,0,0,0,0"))
                        (rule "castedGetAny" (formula "1") (term "0,0,0,0,0,0"))
                        (rule "castedGetAny" (formula "1") (term "1,0,0,1,0,0,0"))
                        (rule "castedGetAny" (formula "1") (term "0,1,0,0,0,0"))
                         (builtin "One Step Simplification" (formula "1"))
                        (rule "true_left" (formula "1"))
                        (rule "shift_paren_or" (formula "1") (term "0,0,0"))
                         (builtin "One Step Simplification" (formula "1"))
                        (rule "eqSymm" (formula "1") (term "1,1,0,0,0"))
                        (rule "castedGetAny" (formula "1") (term "1,0,0,0,0,0,0"))
                        (rule "castedGetAny" (formula "1") (term "0,0,1,0,0,0"))
                        (rule "castedGetAny" (formula "1") (term "0,1,1,0,0,0"))
                         (builtin "One Step Simplification" (formula "1"))
                        (rule "true_left" (formula "1"))
                        (rule "cut_direct" (formula "29") (term "0"))
                        (branch "CUT: result_228_A_1.value@heapAtPre_A«anonHeapFunction» = 0 TRUE"
                            (builtin "One Step Simplification" (formula "30"))
                           (rule "true_left" (formula "30"))
                           (rule "replace_known_left" (formula "30") (term "0") (ifseqformula "29"))
                            (builtin "One Step Simplification" (formula "30"))
                           (rule "true_left" (formula "30"))
                           (rule "replace_known_left" (formula "30") (term "0") (ifseqformula "29"))
                            (builtin "One Step Simplification" (formula "30"))
                           (rule "true_left" (formula "30"))
                           (rule "applyEq" (formula "31") (term "1,0") (ifseqformula "29"))
                           (rule "times_zero_1" (formula "31") (term "0"))
                           (rule "polySimp_homoEq" (formula "31"))
                           (rule "mul_literals" (formula "31") (term "1,0"))
                           (rule "add_zero_right" (formula "31") (term "0"))
                           (rule "applyEq" (formula "30") (term "1,0") (ifseqformula "29"))
                           (rule "eqSymm" (formula "30"))
                           (rule "polySimp_homoEq" (formula "30"))
                           (rule "polySimp_mulLiterals" (formula "30") (term "1,0"))
                           (rule "polySimp_elimOne" (formula "30") (term "1,0"))
                           (rule "applyEq" (formula "28") (term "0") (ifseqformula "29"))
                           (rule "qeq_literals" (formula "28"))
                           (rule "true_left" (formula "28"))
                           (rule "applyEq" (formula "23") (term "1") (ifseqformula "28"))
                           (rule "applyEq" (formula "57") (term "1") (ifseqformula "28"))
                           (rule "applyEq" (formula "7") (term "1") (ifseqformula "28"))
                           (rule "applyEq" (formula "29") (term "1,1,0") (ifseqformula "28"))
                           (rule "polySimp_addComm0" (formula "29") (term "0"))
                           (rule "polySimp_sepNegMonomial" (formula "30"))
                           (rule "polySimp_mulLiterals" (formula "30") (term "0"))
                           (rule "polySimp_elimOne" (formula "30") (term "0"))
                           (rule "applyEq" (formula "29") (term "0,1,0") (ifseqformula "30"))
                           (rule "polySimp_addComm0" (formula "29") (term "0"))
                           (rule "applyEq" (formula "4") (term "0") (ifseqformula "30"))
                           (rule "applyEq" (formula "29") (term "0,0,1,0") (ifseqformula "30"))
                           (rule "polySimp_addComm0" (formula "29") (term "0"))
                           (rule "applyEq" (formula "6") (term "1") (ifseqformula "30"))
                           (rule "polySimp_sepPosMonomial" (formula "29"))
                           (rule "div_axiom" (formula "29") (term "0,1") (inst "quotient=quotient_1"))
                            (builtin "One Step Simplification" (formula "29"))
                           (rule "true_left" (formula "29"))
                           (rule "jdiv_axiom" (formula "29") (term "0"))
                           (rule "eqSymm" (formula "29"))
                           (rule "applyEq" (formula "29") (term "1") (ifseqformula "30"))
                            (builtin "One Step Simplification" (formula "29"))
                           (rule "eqSymm" (formula "29") (term "1"))
                           (rule "polySimp_homoEq" (formula "29") (term "1"))
                           (rule "polySimp_mulLiterals" (formula "29") (term "1,0,1"))
                           (rule "polySimp_elimOne" (formula "29") (term "1,0,1"))
                           (rule "polySimp_sepPosMonomial" (formula "29") (term "1"))
                           (rule "inEqSimp_contradInEq0" (formula "29") (term "0,0") (ifseqformula "4"))
                           (rule "qeq_literals" (formula "29") (term "0,0,0"))
                            (builtin "One Step Simplification" (formula "29"))
                           (rule "true_left" (formula "29"))
                           (rule "Use_information_flow_contract_for_compareTo_325434207" (formula "19") (ifseqformula "19"))
                            (builtin "One Step Simplification" (formula "19") (ifInst ""  (formula "91")) (ifInst ""  (formula "91")))
                           (rule "true_left" (formula "19"))
                           (rule "Use_information_flow_contract_for_getOrder_757678341" (formula "59") (ifseqformula "25"))
                           (rule "applyEq" (formula "59") (term "0,0,1") (ifseqformula "57"))
                           (rule "eqSymm" (formula "59") (term "0,1"))
                           (rule "replace_known_left" (formula "59") (term "0,1") (ifseqformula "23"))
                            (builtin "One Step Simplification" (formula "59"))
                           (rule "applyEq" (formula "59") (term "0,1") (ifseqformula "7"))
                           (rule "eqSymm" (formula "59") (term "1"))
                           (rule "replace_known_left" (formula "59") (term "1") (ifseqformula "28"))
                            (builtin "One Step Simplification" (formula "59"))
                           (rule "true_left" (formula "59"))
                           (rule "Use_information_flow_contract_for_multiply_1272441881" (formula "70") (ifseqformula "36"))
                           (rule "replaceKnownSelect_taclet21_11" (formula "70") (term "1,1,1"))
                           (rule "replaceKnownSelect_taclet21_12" (formula "70") (term "0,1,1"))
                           (rule "replaceKnownAuxiliaryConstant_taclet00121_17" (formula "70") (term "1,1,1"))
                           (rule "replaceKnownAuxiliaryConstant_taclet0100121_19" (formula "70") (term "0,1,1"))
                           (rule "replaceKnownSelect_taclet21_8" (formula "70") (term "1,1,0,1"))
                           (rule "replaceKnownSelect_taclet21_9" (formula "70") (term "0,1,0,1"))
                           (rule "replaceKnownAuxiliaryConstant_taclet21_10" (formula "70") (term "1,1,0,1"))
                            (builtin "One Step Simplification" (formula "70") (ifInst ""  (formula "82")) (ifInst ""  (formula "81")))
                           (rule "eqSymm" (formula "70") (term "1,1"))
                           (rule "replace_known_right" (formula "70") (term "1,1") (ifseqformula "99"))
                            (builtin "One Step Simplification" (formula "70"))
                           (rule "pullOutSelect" (formula "70") (term "1,0,1") (inst "selectSK=org_bouncycastle_math_ec_ECPoint_value_4"))
                           (rule "simplifySelectOfAnonEQ" (formula "70") (ifseqformula "26"))
                            (builtin "One Step Simplification" (formula "70") (ifInst ""  (formula "96")) (ifInst ""  (formula "14")))
                           (rule "applyEqReverse" (formula "71") (term "1,0,1") (ifseqformula "70"))
                           (rule "hideAuxiliaryEq" (formula "70"))
                           (rule "pullOutSelect" (formula "70") (term "0,0,1") (inst "selectSK=org_bouncycastle_math_ec_ECPoint_value_5"))
                           (rule "simplifySelectOfAnonEQ" (formula "70") (ifseqformula "61"))
                            (builtin "One Step Simplification" (formula "70") (ifInst ""  (formula "97")) (ifInst ""  (formula "48")))
                           (rule "applyEqReverse" (formula "71") (term "0,0,1") (ifseqformula "70"))
                           (rule "hideAuxiliaryEq" (formula "70"))
                           (rule "replace_known_left" (formula "70") (term "0,1") (ifseqformula "5"))
                            (builtin "One Step Simplification" (formula "70"))
                           (rule "notLeft" (formula "70"))
                           (rule "Class_invariant_axiom_for_org_bouncycastle_math_ec_ECPoint" (formula "76") (term "1"))
                            (builtin "One Step Simplification" (formula "76"))
                           (rule "Class_invariant_axiom_for_org_bouncycastle_math_ec_ECPoint" (formula "76"))
                           (rule "closeTrue" (formula "76"))
                        )
                        (branch "CUT: result_228_A_1.value@heapAtPre_A«anonHeapFunction» = 0 FALSE"
                            (builtin "One Step Simplification" (formula "29"))
                           (rule "replace_known_right" (formula "30") (term "0") (ifseqformula "79"))
                            (builtin "One Step Simplification" (formula "30"))
                           (rule "replace_known_right" (formula "31") (term "0") (ifseqformula "79"))
                            (builtin "One Step Simplification" (formula "31"))
                           (rule "applyEq" (formula "33") (term "0,0") (ifseqformula "30"))
                           (rule "polySimp_mulComm0" (formula "33") (term "0"))
                           (rule "applyEq" (formula "29") (term "0") (ifseqformula "33"))
                           (rule "inEqSimp_homoInEq0" (formula "29"))
                           (rule "polySimp_mulComm0" (formula "29") (term "1,0"))
                           (rule "polySimp_rightDist" (formula "29") (term "1,0"))
                           (rule "polySimp_mulLiterals" (formula "29") (term "1,1,0"))
                           (rule "polySimp_elimOne" (formula "29") (term "1,1,0"))
                           (rule "polySimp_mulComm0" (formula "29") (term "0,1,0"))
                           (rule "polySimp_addAssoc" (formula "29") (term "0"))
                           (rule "polySimp_addComm0" (formula "29") (term "0,0"))
                           (rule "polySimp_pullOutFactor2b" (formula "29") (term "0"))
                           (rule "add_literals" (formula "29") (term "1,1,0"))
                           (rule "times_zero_1" (formula "29") (term "1,0"))
                           (rule "add_zero_right" (formula "29") (term "0"))
                           (rule "applyEq" (formula "31") (term "0") (ifseqformula "33"))
                           (rule "inEqSimp_homoInEq1" (formula "31"))
                           (rule "polySimp_mulComm0" (formula "31") (term "1,0"))
                           (rule "polySimp_rightDist" (formula "31") (term "1,0"))
                           (rule "polySimp_mulLiterals" (formula "31") (term "1,1,0"))
                           (rule "polySimp_elimOne" (formula "31") (term "1,1,0"))
                           (rule "polySimp_mulComm0" (formula "31") (term "0,1,0"))
                           (rule "polySimp_addComm1" (formula "31") (term "0"))
                           (rule "polySimp_addAssoc" (formula "31") (term "0,0"))
                           (rule "polySimp_addComm1" (formula "31") (term "0,0,0"))
                           (rule "polySimp_pullOutFactor2b" (formula "31") (term "0,0"))
                           (rule "add_literals" (formula "31") (term "1,1,0,0"))
                           (rule "times_zero_1" (formula "31") (term "1,0,0"))
                           (rule "add_zero_right" (formula "31") (term "0,0"))
                           (rule "applyEq" (formula "32") (term "0,1") (ifseqformula "30"))
                           (rule "inEqSimp_invertInEq1" (formula "29"))
                           (rule "polySimp_mulLiterals" (formula "29") (term "0"))
                           (rule "times_zero_2" (formula "29") (term "1"))
                           (rule "polySimp_elimOne" (formula "29") (term "0"))
                           (rule "inEqSimp_sepNegMonomial0" (formula "31"))
                           (rule "polySimp_mulLiterals" (formula "31") (term "0"))
                           (rule "polySimp_elimOne" (formula "31") (term "0"))
                           (rule "inEqSimp_strengthen1" (formula "28") (ifseqformula "79"))
                           (rule "add_literals" (formula "28") (term "1"))
                           (rule "inEqSimp_contradEq7" (formula "79") (ifseqformula "28"))
                           (rule "times_zero_1" (formula "79") (term "1,0,0"))
                           (rule "add_literals" (formula "79") (term "0,0"))
                           (rule "leq_literals" (formula "79") (term "0"))
                            (builtin "One Step Simplification" (formula "79"))
                           (rule "false_right" (formula "79"))
                           (rule "Use_information_flow_contract_for_compareTo_325434207" (formula "19") (ifseqformula "19"))
                            (builtin "One Step Simplification" (formula "19") (ifInst ""  (formula "94")) (ifInst ""  (formula "94")))
                           (rule "true_left" (formula "19"))
                           (rule "Use_information_flow_contract_for_getOrder_757678341" (formula "62") (ifseqformula "25"))
                           (rule "replace_known_left" (formula "62") (term "1,1") (ifseqformula "7"))
                            (builtin "One Step Simplification" (formula "62"))
                           (rule "true_left" (formula "62"))
                           (rule "Use_information_flow_contract_for_getOrder_757678341" (formula "62") (ifseqformula "62"))
                            (builtin "One Step Simplification" (formula "62"))
                           (rule "true_left" (formula "62"))
                           (rule "Use_information_flow_contract_for_compareTo_325434207" (formula "56") (ifseqformula "19"))
                           (rule "replace_known_left" (formula "56") (term "0,0,1") (ifseqformula "6"))
                            (builtin "One Step Simplification" (formula "56") (ifInst ""  (formula "95")) (ifInst ""  (formula "94")))
                           (rule "applyEq" (formula "56") (term "0,0,1") (ifseqformula "58"))
                           (rule "eqSymm" (formula "56") (term "0,1"))
                           (rule "replace_known_left" (formula "56") (term "0,1") (ifseqformula "20"))
                            (builtin "One Step Simplification" (formula "56"))
                           (rule "Class_invariant_axiom_for_java_math_BigInteger" (formula "56") (term "1,0"))
                           (rule "replace_known_right" (formula "56") (term "0,0,1,0") (ifseqformula "94"))
                            (builtin "One Step Simplification" (formula "56") (ifInst ""  (formula "20")))
                           (rule "Class_invariant_axiom_for_java_math_BigInteger" (formula "56") (term "0"))
                           (rule "replace_known_left" (formula "56") (term "1,0") (ifseqformula "58"))
                            (builtin "One Step Simplification" (formula "56") (ifInst ""  (formula "95")))
                           (rule "applyEq" (formula "57") (term "4") (ifseqformula "56"))
                           (rule "applyEq" (formula "55") (term "0") (ifseqformula "56"))
                           (rule "applyEq" (formula "48") (term "0") (ifseqformula "55"))
                           (rule "Use_information_flow_contract_for_getOrder_757678341" (formula "25") (ifseqformula "25"))
                            (builtin "One Step Simplification" (formula "25"))
                           (rule "true_left" (formula "25"))
                           (rule "Use_information_flow_contract_for_getOrder_757678341" (formula "25") (ifseqformula "61"))
                           (rule "eqSymm" (formula "25") (term "1,1"))
                           (rule "eqSymm" (formula "25") (term "0,1"))
                           (rule "replace_known_left" (formula "25") (term "1,1") (ifseqformula "7"))
                            (builtin "One Step Simplification" (formula "25"))
                           (rule "true_left" (formula "25"))
                           (rule "Use_information_flow_contract_for_multiply_1272441881_0" (formula "72") (ifseqformula "39"))
                           (rule "replaceKnownSelect_taclet21_12" (formula "72") (term "0,1,1"))
                           (rule "replaceKnownSelect_taclet21_11" (formula "72") (term "1,1,1"))
                           (rule "replaceKnownAuxiliaryConstant_taclet0100121_19" (formula "72") (term "0,1,1"))
                           (rule "replaceKnownAuxiliaryConstant_taclet00121_17" (formula "72") (term "1,1,1"))
                           (rule "replaceKnownSelect_taclet21_9" (formula "72") (term "0,1,0,1"))
                           (rule "replaceKnownSelect_taclet21_8" (formula "72") (term "1,1,0,1"))
                           (rule "replaceKnownAuxiliaryConstant_taclet121_15" (formula "72") (term "0,1,0,1"))
                           (rule "replaceKnownAuxiliaryConstant_taclet21_10" (formula "72") (term "1,1,0,1"))
                           (rule "replaceKnownAuxiliaryConstant_taclet121_15" (formula "72") (term "1,1,0,1"))
                            (builtin "One Step Simplification" (formula "72") (ifInst ""  (formula "84")) (ifInst ""  (formula "83")))
                           (rule "eqSymm" (formula "72") (term "1,1"))
                           (rule "replace_known_right" (formula "72") (term "1,1") (ifseqformula "101"))
                            (builtin "One Step Simplification" (formula "72"))
                           (rule "pullOutSelect" (formula "72") (term "0,0,1") (inst "selectSK=org_bouncycastle_math_ec_ECPoint_value_4"))
                           (rule "simplifySelectOfAnonEQ" (formula "72") (ifseqformula "63"))
                            (builtin "One Step Simplification" (formula "72") (ifInst ""  (formula "99")) (ifInst ""  (formula "50")))
                           (rule "applyEqReverse" (formula "73") (term "0,0,1") (ifseqformula "72"))
                           (rule "hideAuxiliaryEq" (formula "72"))
                           (rule "eqSymm" (formula "72") (term "0,1"))
                           (rule "applyEq" (formula "72") (term "1,0,1") (ifseqformula "5"))
                           (rule "pullOutSelect" (formula "72") (term "0,0,1") (inst "selectSK=org_bouncycastle_math_ec_ECPoint_value_5"))
                           (rule "simplifySelectOfAnonEQ" (formula "72") (ifseqformula "26"))
                            (builtin "One Step Simplification" (formula "72") (ifInst ""  (formula "98")) (ifInst ""  (formula "14")))
                           (rule "applyEqReverse" (formula "73") (term "0,0,1") (ifseqformula "72"))
                            (builtin "One Step Simplification" (formula "73"))
                           (rule "notLeft" (formula "73"))
                           (rule "hideAuxiliaryEq" (formula "72"))
                           (rule "Class_invariant_axiom_for_org_bouncycastle_math_ec_ECPoint" (formula "78") (term "0"))
                            (builtin "One Step Simplification" (formula "78"))
                           (rule "Class_invariant_axiom_for_org_bouncycastle_math_ec_ECPoint" (formula "78"))
                           (rule "closeTrue" (formula "78"))
                        )
                     )
                     (branch "result_228_A_1.value@heapAtPre_A«anonHeapFunction» ≥ 0 FALSE"
                        (rule "inEqSimp_geqRight" (formula "80"))
                        (rule "times_zero_1" (formula "1") (term "1,0,0"))
                        (rule "add_literals" (formula "1") (term "0,0"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "1"))
                        (rule "mul_literals" (formula "1") (term "1"))
                        (rule "inEqSimp_contradEq3" (formula "33") (term "0") (ifseqformula "1"))
                        (rule "mul_literals" (formula "33") (term "1,0,0,0"))
                        (rule "add_literals" (formula "33") (term "0,0,0"))
                        (rule "qeq_literals" (formula "33") (term "0,0"))
                         (builtin "One Step Simplification" (formula "33"))
                        (rule "andLeft" (formula "33"))
                        (rule "andLeft" (formula "33"))
                        (rule "applyEq" (formula "37") (term "0,0") (ifseqformula "34"))
                        (rule "polySimp_mulComm0" (formula "37") (term "0"))
                        (rule "applyEq" (formula "33") (term "0") (ifseqformula "37"))
                        (rule "inEqSimp_homoInEq0" (formula "33"))
                        (rule "polySimp_mulComm0" (formula "33") (term "1,0"))
                        (rule "polySimp_rightDist" (formula "33") (term "1,0"))
                        (rule "polySimp_mulLiterals" (formula "33") (term "1,1,0"))
                        (rule "polySimp_elimOne" (formula "33") (term "1,1,0"))
                        (rule "polySimp_mulComm0" (formula "33") (term "0,1,0"))
                        (rule "polySimp_addAssoc" (formula "33") (term "0"))
                        (rule "polySimp_addComm0" (formula "33") (term "0,0"))
                        (rule "polySimp_pullOutFactor2b" (formula "33") (term "0"))
                        (rule "add_literals" (formula "33") (term "1,1,0"))
                        (rule "times_zero_1" (formula "33") (term "1,0"))
                        (rule "add_zero_right" (formula "33") (term "0"))
                        (rule "applyEq" (formula "35") (term "0") (ifseqformula "37"))
                        (rule "inEqSimp_homoInEq1" (formula "35"))
                        (rule "polySimp_mulComm0" (formula "35") (term "1,0"))
                        (rule "polySimp_rightDist" (formula "35") (term "1,0"))
                        (rule "polySimp_mulLiterals" (formula "35") (term "1,1,0"))
                        (rule "polySimp_elimOne" (formula "35") (term "1,1,0"))
                        (rule "polySimp_mulComm0" (formula "35") (term "0,1,0"))
                        (rule "polySimp_addComm1" (formula "35") (term "0"))
                        (rule "polySimp_addAssoc" (formula "35") (term "0,0"))
                        (rule "polySimp_addComm1" (formula "35") (term "0,0,0"))
                        (rule "polySimp_pullOutFactor2b" (formula "35") (term "0,0"))
                        (rule "add_literals" (formula "35") (term "1,1,0,0"))
                        (rule "times_zero_1" (formula "35") (term "1,0,0"))
                        (rule "add_zero_right" (formula "35") (term "0,0"))
                        (rule "applyEq" (formula "36") (term "0,1") (ifseqformula "34"))
                        (rule "inEqSimp_invertInEq1" (formula "33"))
                        (rule "mul_literals" (formula "33") (term "1"))
                        (rule "polySimp_mulLiterals" (formula "33") (term "0"))
                        (rule "polySimp_elimOne" (formula "33") (term "0"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "35"))
                        (rule "polySimp_mulComm0" (formula "35") (term "1"))
                        (rule "polySimp_rightDist" (formula "35") (term "1"))
                        (rule "polySimp_mulLiterals" (formula "35") (term "1,1"))
                        (rule "mul_literals" (formula "35") (term "0,1"))
                        (rule "polySimp_elimOne" (formula "35") (term "1,1"))
                        (rule "shift_paren_or" (formula "4") (term "0,0,0"))
                         (builtin "One Step Simplification" (formula "4"))
                        (rule "eqSymm" (formula "4") (term "1,1,0,0,0"))
                        (rule "castedGetAny" (formula "4") (term "1,0,0,0,0,0,0"))
                        (rule "castedGetAny" (formula "4") (term "0,0,1,0,0,0"))
                        (rule "castedGetAny" (formula "4") (term "0,1,1,0,0,0"))
                         (builtin "One Step Simplification" (formula "4"))
                        (rule "true_left" (formula "4"))
                        (rule "cnf_rightDist" (formula "4") (term "0,0,0"))
                        (rule "distr_forallAnd" (formula "4") (term "0,0"))
                        (rule "distr_forallAnd" (formula "4") (term "0"))
                        (rule "distr_forallAnd" (formula "4"))
                        (rule "andLeft" (formula "4"))
                        (rule "shift_paren_or" (formula "3") (term "0,0,0"))
                         (builtin "One Step Simplification" (formula "3"))
                        (rule "eqSymm" (formula "3") (term "1,1,0,0,0"))
                        (rule "castedGetAny" (formula "3") (term "1,0,0,0,0,0,0"))
                        (rule "castedGetAny" (formula "3") (term "0,0,1,0,0,0"))
                        (rule "castedGetAny" (formula "3") (term "0,1,1,0,0,0"))
                         (builtin "One Step Simplification" (formula "3"))
                        (rule "true_left" (formula "3"))
                        (rule "cnf_rightDist" (formula "2") (term "0,0,0"))
                        (rule "distr_forallAnd" (formula "2") (term "0,0"))
                        (rule "distr_forallAnd" (formula "2") (term "0"))
                        (rule "distr_forallAnd" (formula "2"))
                        (rule "andLeft" (formula "2"))
                        (rule "commute_or_2" (formula "3") (term "0,0,0"))
                         (builtin "One Step Simplification" (formula "3"))
                        (rule "eqSymm" (formula "3") (term "1,0,0,0,0"))
                        (rule "castedGetAny" (formula "3") (term "1,0,0,1,0,0,0"))
                        (rule "castedGetAny" (formula "3") (term "0,0,0,0,0,0"))
                        (rule "castedGetAny" (formula "3") (term "0,1,0,0,0,0"))
                         (builtin "One Step Simplification" (formula "3"))
                        (rule "true_left" (formula "3"))
                        (rule "commute_or_2" (formula "2") (term "0,0,0"))
                         (builtin "One Step Simplification" (formula "2"))
                        (rule "eqSymm" (formula "2") (term "1,0,0,0,0"))
                        (rule "castedGetAny" (formula "2") (term "1,0,0,1,0,0,0"))
                        (rule "castedGetAny" (formula "2") (term "0,0,0,0,0,0"))
                        (rule "castedGetAny" (formula "2") (term "0,1,0,0,0,0"))
                         (builtin "One Step Simplification" (formula "2"))
                        (rule "true_left" (formula "2"))
                        (rule "shift_paren_or" (formula "2") (term "0,0,0"))
                         (builtin "One Step Simplification" (formula "2"))
                        (rule "eqSymm" (formula "2") (term "1,1,0,0,0"))
                        (rule "castedGetAny" (formula "2") (term "0,0,1,0,0,0"))
                        (rule "castedGetAny" (formula "2") (term "1,0,0,0,0,0,0"))
                        (rule "castedGetAny" (formula "2") (term "0,1,1,0,0,0"))
                         (builtin "One Step Simplification" (formula "2"))
                        (rule "true_left" (formula "2"))
                        (rule "Use_information_flow_contract_for_compareTo_325434207" (formula "20") (ifseqformula "20"))
                         (builtin "One Step Simplification" (formula "20") (ifInst ""  (formula "94")) (ifInst ""  (formula "94")))
                        (rule "true_left" (formula "20"))
                        (rule "Use_information_flow_contract_for_getOrder_757678341" (formula "62") (ifseqformula "26"))
                        (rule "replace_known_left" (formula "62") (term "1,1") (ifseqformula "8"))
                         (builtin "One Step Simplification" (formula "62"))
                        (rule "true_left" (formula "62"))
                        (rule "Use_information_flow_contract_for_getOrder_757678341" (formula "62") (ifseqformula "62"))
                         (builtin "One Step Simplification" (formula "62"))
                        (rule "true_left" (formula "62"))
                        (rule "Use_information_flow_contract_for_getOrder_757678341" (formula "26") (ifseqformula "26"))
                         (builtin "One Step Simplification" (formula "26"))
                        (rule "true_left" (formula "26"))
                        (rule "Use_information_flow_contract_for_compareTo_325434207" (formula "20") (ifseqformula "56"))
                        (rule "eqSymm" (formula "20") (term "1,0,1"))
                        (rule "eqSymm" (formula "20") (term "1,1"))
                        (rule "eqSymm" (formula "20") (term "0,0,1"))
                        (rule "replace_known_right" (formula "20") (term "0,1,0,0") (ifseqformula "94"))
                         (builtin "One Step Simplification" (formula "20") (ifInst ""  (formula "95")) (ifInst ""  (formula "7")))
                        (rule "applyEqRigid" (formula "20") (term "0,0,1") (ifseqformula "58"))
                        (rule "eqSymm" (formula "20") (term "0,1"))
                        (rule "replace_known_left" (formula "20") (term "0,1") (ifseqformula "22"))
                         (builtin "One Step Simplification" (formula "20"))
                        (rule "Class_invariant_axiom_for_java_math_BigInteger" (formula "20") (term "1,0"))
                        (rule "replace_known_right" (formula "20") (term "0,0,1,0") (ifseqformula "95"))
                         (builtin "One Step Simplification" (formula "20") (ifInst ""  (formula "58")))
                        (rule "Class_invariant_axiom_for_java_math_BigInteger" (formula "20") (term "0"))
                        (rule "replace_known_right" (formula "20") (term "0,0,0") (ifseqformula "94"))
                         (builtin "One Step Simplification" (formula "20") (ifInst ""  (formula "22")))
                        (rule "applyEq" (formula "49") (term "0") (ifseqformula "20"))
                        (rule "applyEq" (formula "55") (term "0") (ifseqformula "20"))
                        (rule "applyEq" (formula "55") (term "4") (ifseqformula "20"))
                        (rule "Use_information_flow_contract_for_multiply_1272441881" (formula "72") (ifseqformula "40"))
                        (rule "replaceKnownSelect_taclet21_12" (formula "72") (term "0,1,1"))
                        (rule "replaceKnownSelect_taclet21_11" (formula "72") (term "1,1,1"))
                        (rule "replaceKnownAuxiliaryConstant_taclet0100121_19" (formula "72") (term "0,1,1"))
                        (rule "replaceKnownAuxiliaryConstant_taclet00121_17" (formula "72") (term "1,1,1"))
                        (rule "replaceKnownSelect_taclet21_8" (formula "72") (term "1,1,0,1"))
                        (rule "replaceKnownSelect_taclet21_9" (formula "72") (term "0,1,0,1"))
                        (rule "replaceKnownAuxiliaryConstant_taclet21_10" (formula "72") (term "1,1,0,1"))
                         (builtin "One Step Simplification" (formula "72") (ifInst ""  (formula "84")) (ifInst ""  (formula "83")))
                        (rule "eqSymm" (formula "72") (term "1,1"))
                        (rule "replace_known_right" (formula "72") (term "1,1") (ifseqformula "101"))
                         (builtin "One Step Simplification" (formula "72"))
                        (rule "pullOutSelect" (formula "72") (term "1,0,1") (inst "selectSK=org_bouncycastle_math_ec_ECPoint_value_4"))
                        (rule "simplifySelectOfAnonEQ" (formula "72") (ifseqformula "28"))
                         (builtin "One Step Simplification" (formula "72") (ifInst ""  (formula "98")) (ifInst ""  (formula "15")))
                        (rule "applyEqReverse" (formula "73") (term "1,0,1") (ifseqformula "72"))
                        (rule "hideAuxiliaryEq" (formula "72"))
                        (rule "pullOutSelect" (formula "72") (term "0,0,1") (inst "selectSK=org_bouncycastle_math_ec_ECPoint_value_5"))
                        (rule "simplifySelectOfAnonEQ" (formula "72") (ifseqformula "63"))
                         (builtin "One Step Simplification" (formula "72") (ifInst ""  (formula "99")) (ifInst ""  (formula "51")))
                        (rule "applyEqReverse" (formula "73") (term "0,0,1") (ifseqformula "72"))
                        (rule "hideAuxiliaryEq" (formula "72"))
                        (rule "replace_known_left" (formula "72") (term "0,1") (ifseqformula "6"))
                         (builtin "One Step Simplification" (formula "72"))
                        (rule "notLeft" (formula "72"))
                        (rule "Class_invariant_axiom_for_org_bouncycastle_math_ec_ECPoint" (formula "78") (term "1"))
                         (builtin "One Step Simplification" (formula "78"))
                        (rule "Class_invariant_axiom_for_org_bouncycastle_math_ec_ECPoint" (formula "78"))
                        (rule "closeTrue" (formula "78"))
                     )
                  )
                  (branch " resultAtPost_226_B.<created>@anon_heap_mod«anonHeapFunction» = TRUE FALSE"
                     (rule "applyEqReverse" (formula "106") (term "1") (ifseqformula "8"))
                     (rule "hideAuxiliaryEq" (formula "8"))
                     (rule "replace_known_right" (formula "75") (term "0") (ifseqformula "82"))
                      (builtin "One Step Simplification" (formula "75"))
                     (rule "commute_or" (formula "3") (term "0,1,0,0,0"))
                     (rule "commute_or" (formula "2") (term "0,0,0,0"))
                     (rule "onlyCreatedObjectsAreReferenced" (formula "98") (term "0") (ifseqformula "55"))
                     (rule "replace_known_left" (formula "1") (term "1") (ifseqformula "61"))
                      (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "99")))
                     (rule "true_left" (formula "1"))
                     (rule "onlyCreatedObjectsAreReferenced" (formula "26") (term "1,0") (ifseqformula "21"))
                     (rule "replace_known_right" (formula "26") (term "0") (ifseqformula "98"))
                      (builtin "One Step Simplification" (formula "26") (ifInst ""  (formula "27")))
                     (rule "true_left" (formula "26"))
                     (rule "onlyCreatedObjectsAreReferenced" (formula "13") (term "1,0") (ifseqformula "21"))
                     (rule "replace_known_right" (formula "13") (term "0") (ifseqformula "92"))
                      (builtin "One Step Simplification" (formula "13") (ifInst ""  (formula "14")))
                     (rule "true_left" (formula "13"))
                     (rule "onlyCreatedObjectsAreReferenced" (formula "94") (term "0") (ifseqformula "55"))
                     (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "95"))
                      (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "49")))
                     (rule "true_left" (formula "1"))
                     (rule "onlyCreatedObjectsAreReferenced" (formula "30") (term "0") (ifseqformula "21"))
                     (rule "replace_known_right" (formula "30") (term "0") (ifseqformula "96"))
                      (builtin "One Step Simplification" (formula "30") (ifInst ""  (formula "15")))
                     (rule "true_left" (formula "30"))
                     (rule "onlyCreatedObjectsAreReferenced" (formula "13") (term "1,1,0") (ifseqformula "21"))
                     (rule "replace_known_right" (formula "13") (term "0") (ifseqformula "94"))
                      (builtin "One Step Simplification" (formula "13") (ifInst ""  (formula "15")))
                     (rule "true_left" (formula "13"))
                     (rule "onlyCreatedObjectsAreReferenced" (formula "47") (term "1,0") (ifseqformula "55"))
                     (rule "replace_known_right" (formula "47") (term "0") (ifseqformula "93"))
                      (builtin "One Step Simplification" (formula "47") (ifInst ""  (formula "48")))
                     (rule "true_left" (formula "47"))
                     (rule "onlyCreatedObjectsAreReferenced" (formula "62") (term "1,0") (ifseqformula "55"))
                     (rule "replace_known_right" (formula "62") (term "0") (ifseqformula "97"))
                      (builtin "One Step Simplification" (formula "62") (ifInst ""  (formula "49")))
                     (rule "true_left" (formula "62"))
                     (rule "commute_or" (formula "2") (term "0,1,0,0,0"))
                     (rule "commute_or" (formula "1") (term "0,0,0,0"))
                     (rule "commute_or" (formula "1") (term "0,1,0,0,0"))
                     (rule "commute_or_2" (formula "4") (term "0,0,0"))
                     (rule "commute_or_2" (formula "3") (term "0,0,0"))
                     (rule "commute_and" (formula "33") (term "0,1"))
                     (rule "commute_or_2" (formula "6") (term "0,0,0,0,0"))
                      (builtin "One Step Simplification" (formula "6"))
                     (rule "commute_or_2" (formula "2") (term "0,0,0"))
                     (rule "commute_or_2" (formula "1") (term "0,0,0"))
                     (rule "shift_paren_or" (formula "5") (term "0,0,0,0,0"))
                     (rule "commute_or_2" (formula "6") (term "0,0,0,0"))
                     (rule "shift_paren_or" (formula "4") (term "0,0,0,0"))
                     (rule "commute_or_2" (formula "3") (term "1,0,0,0,0"))
                     (rule "shift_paren_or" (formula "2") (term "0,0,0,0"))
                     (rule "shift_paren_or" (formula "1") (term "0,0,0,0"))
                     (rule "commute_or_2" (formula "5") (term "0,0,0,0,0"))
                      (builtin "One Step Simplification" (formula "5"))
                     (rule "commute_or_2" (formula "5") (term "0,0,0,0"))
                     (rule "shift_paren_or" (formula "3") (term "0,0,0,0"))
                     (rule "cnf_rightDist" (formula "6") (term "0,0,0"))
                     (rule "distr_forallAnd" (formula "6") (term "0,0"))
                     (rule "distr_forallAnd" (formula "6") (term "0"))
                     (rule "distr_forallAnd" (formula "6"))
                     (rule "andLeft" (formula "6"))
                     (rule "commute_or_2" (formula "6") (term "0,0,0"))
                      (builtin "One Step Simplification" (formula "6"))
                     (rule "eqSymm" (formula "6") (term "1,0,0,0,0"))
                     (rule "castedGetAny" (formula "6") (term "0,0,0,0,0,0"))
                     (rule "castedGetAny" (formula "6") (term "1,0,0,1,0,0,0"))
                     (rule "castedGetAny" (formula "6") (term "0,1,0,0,0,0"))
                      (builtin "One Step Simplification" (formula "6"))
                     (rule "true_left" (formula "6"))
                     (rule "shift_paren_or" (formula "6") (term "0,0,0"))
                      (builtin "One Step Simplification" (formula "6"))
                     (rule "eqSymm" (formula "6") (term "1,1,0,0,0"))
                     (rule "castedGetAny" (formula "6") (term "0,0,1,0,0,0"))
                     (rule "castedGetAny" (formula "6") (term "0,0,0,0,0,0"))
                     (rule "castedGetAny" (formula "6") (term "0,1,1,0,0,0"))
                      (builtin "One Step Simplification" (formula "6"))
                     (rule "true_left" (formula "6"))
                     (rule "commute_and" (formula "4") (term "1,0,0,0"))
                     (rule "commute_and" (formula "3") (term "1,0,0,0"))
                     (rule "commute_and" (formula "2") (term "1,0,0,0"))
                     (rule "cnf_rightDist" (formula "5") (term "0,0,0"))
                     (rule "distr_forallAnd" (formula "5") (term "0,0"))
                     (rule "distr_forallAnd" (formula "5") (term "0"))
                     (rule "distr_forallAnd" (formula "5"))
                     (rule "andLeft" (formula "5"))
                     (rule "commute_or_2" (formula "5") (term "0,0,0"))
                      (builtin "One Step Simplification" (formula "5"))
                     (rule "eqSymm" (formula "5") (term "1,0,0,0,0"))
                     (rule "castedGetAny" (formula "5") (term "1,0,0,1,0,0,0"))
                     (rule "castedGetAny" (formula "5") (term "0,0,0,0,0,0"))
                     (rule "castedGetAny" (formula "5") (term "0,1,0,0,0,0"))
                      (builtin "One Step Simplification" (formula "5"))
                     (rule "true_left" (formula "5"))
                     (rule "shift_paren_or" (formula "5") (term "0,0,0"))
                      (builtin "One Step Simplification" (formula "5"))
                     (rule "eqSymm" (formula "5") (term "1,1,0,0,0"))
                     (rule "castedGetAny" (formula "5") (term "0,0,1,0,0,0"))
                     (rule "castedGetAny" (formula "5") (term "0,0,0,0,0,0"))
                     (rule "castedGetAny" (formula "5") (term "0,1,1,0,0,0"))
                      (builtin "One Step Simplification" (formula "5"))
                     (rule "true_left" (formula "5"))
                     (rule "commute_and" (formula "1") (term "1,0,0,0"))
                     (rule "shift_paren_or" (formula "4") (term "0,0,0,0,0"))
                      (builtin "One Step Simplification" (formula "4"))
                     (rule "shift_paren_or" (formula "2") (term "0,0,0,0,0"))
                      (builtin "One Step Simplification" (formula "2"))
                     (rule "shift_paren_or" (formula "1") (term "0,0,0,0,0"))
                      (builtin "One Step Simplification" (formula "1"))
                     (rule "shift_paren_or" (formula "3") (term "0,0,0,0,0"))
                      (builtin "One Step Simplification" (formula "3"))
                     (rule "commute_or_2" (formula "4") (term "0,0,0,0"))
                     (rule "commute_or_2" (formula "2") (term "0,0,0,0"))
                     (rule "commute_or_2" (formula "1") (term "0,0,0,0"))
                     (rule "cnf_rightDist" (formula "3") (term "0,0,0"))
                     (rule "distr_forallAnd" (formula "3") (term "0,0"))
                     (rule "distr_forallAnd" (formula "3") (term "0"))
                     (rule "distr_forallAnd" (formula "3"))
                     (rule "andLeft" (formula "3"))
                     (rule "shift_paren_or" (formula "4") (term "0,0,0"))
                      (builtin "One Step Simplification" (formula "4"))
                     (rule "eqSymm" (formula "4") (term "1,1,0,0,0"))
                     (rule "castedGetAny" (formula "4") (term "0,0,1,0,0,0"))
                     (rule "castedGetAny" (formula "4") (term "0,0,0,0,0,0"))
                     (rule "castedGetAny" (formula "4") (term "0,1,1,0,0,0"))
                      (builtin "One Step Simplification" (formula "4"))
                     (rule "true_left" (formula "4"))
                     (rule "cnf_rightDist" (formula "4") (term "0,0,0"))
                     (rule "distr_forallAnd" (formula "4") (term "0,0"))
                     (rule "distr_forallAnd" (formula "4") (term "0"))
                     (rule "distr_forallAnd" (formula "4"))
                     (rule "andLeft" (formula "4"))
                     (rule "shift_paren_or" (formula "5") (term "0,0,0"))
                      (builtin "One Step Simplification" (formula "5"))
                     (rule "eqSymm" (formula "5") (term "1,1,0,0,0"))
                     (rule "castedGetAny" (formula "5") (term "0,0,1,0,0,0"))
                     (rule "castedGetAny" (formula "5") (term "0,0,0,0,0,0"))
                     (rule "castedGetAny" (formula "5") (term "0,1,1,0,0,0"))
                      (builtin "One Step Simplification" (formula "5"))
                     (rule "true_left" (formula "5"))
                     (rule "cnf_rightDist" (formula "2") (term "0,0,0"))
                     (rule "distr_forallAnd" (formula "2") (term "0,0"))
                     (rule "distr_forallAnd" (formula "2") (term "0"))
                     (rule "distr_forallAnd" (formula "2"))
                     (rule "andLeft" (formula "2"))
                     (rule "cnf_rightDist" (formula "1") (term "0,0,0"))
                     (rule "distr_forallAnd" (formula "1") (term "0,0"))
                     (rule "distr_forallAnd" (formula "1") (term "0"))
                     (rule "distr_forallAnd" (formula "1"))
                     (rule "andLeft" (formula "1"))
                     (rule "shift_paren_or" (formula "3") (term "0,0,0"))
                      (builtin "One Step Simplification" (formula "3"))
                     (rule "eqSymm" (formula "3") (term "1,1,0,0,0"))
                     (rule "castedGetAny" (formula "3") (term "0,0,0,0,0,0"))
                     (rule "castedGetAny" (formula "3") (term "0,0,1,0,0,0"))
                     (rule "castedGetAny" (formula "3") (term "0,1,1,0,0,0"))
                      (builtin "One Step Simplification" (formula "3"))
                     (rule "true_left" (formula "3"))
                     (rule "cnf_rightDist" (formula "3") (term "0,0,0"))
                     (rule "distr_forallAnd" (formula "3") (term "0,0"))
                     (rule "distr_forallAnd" (formula "3") (term "0"))
                     (rule "distr_forallAnd" (formula "3"))
                     (rule "andLeft" (formula "3"))
                     (rule "cnf_rightDist" (formula "4") (term "0,0,0"))
                     (rule "distr_forallAnd" (formula "4") (term "0,0"))
                     (rule "distr_forallAnd" (formula "4") (term "0"))
                     (rule "distr_forallAnd" (formula "4"))
                     (rule "andLeft" (formula "4"))
                     (rule "commute_or_2" (formula "4") (term "0,0,0"))
                      (builtin "One Step Simplification" (formula "4"))
                     (rule "eqSymm" (formula "4") (term "1,0,0,0,0"))
                     (rule "castedGetAny" (formula "4") (term "1,0,0,1,0,0,0"))
                     (rule "castedGetAny" (formula "4") (term "0,0,0,0,0,0"))
                     (rule "castedGetAny" (formula "4") (term "0,1,0,0,0,0"))
                      (builtin "One Step Simplification" (formula "4"))
                     (rule "true_left" (formula "4"))
                     (rule "shift_paren_or" (formula "3") (term "0,0,0"))
                      (builtin "One Step Simplification" (formula "3"))
                     (rule "eqSymm" (formula "3") (term "1,1,0,0,0"))
                     (rule "castedGetAny" (formula "3") (term "0,0,1,0,0,0"))
                     (rule "castedGetAny" (formula "3") (term "1,0,0,0,0,0,0"))
                     (rule "castedGetAny" (formula "3") (term "0,1,1,0,0,0"))
                      (builtin "One Step Simplification" (formula "3"))
                     (rule "true_left" (formula "3"))
                     (rule "shift_paren_or" (formula "3") (term "0,0,0"))
                      (builtin "One Step Simplification" (formula "3"))
                     (rule "eqSymm" (formula "3") (term "1,1,0,0,0"))
                     (rule "castedGetAny" (formula "3") (term "1,0,0,0,0,0,0"))
                     (rule "castedGetAny" (formula "3") (term "0,0,1,0,0,0"))
                     (rule "castedGetAny" (formula "3") (term "0,1,1,0,0,0"))
                      (builtin "One Step Simplification" (formula "3"))
                     (rule "true_left" (formula "3"))
                     (rule "cnf_rightDist" (formula "2") (term "0,0,0"))
                     (rule "distr_forallAnd" (formula "2") (term "0,0"))
                     (rule "distr_forallAnd" (formula "2") (term "0"))
                     (rule "distr_forallAnd" (formula "2"))
                     (rule "andLeft" (formula "2"))
                     (rule "commute_or_2" (formula "2") (term "0,0,0"))
                      (builtin "One Step Simplification" (formula "2"))
                     (rule "eqSymm" (formula "2") (term "1,0,0,0,0"))
                     (rule "castedGetAny" (formula "2") (term "1,0,0,1,0,0,0"))
                     (rule "castedGetAny" (formula "2") (term "0,0,0,0,0,0"))
                     (rule "castedGetAny" (formula "2") (term "0,1,0,0,0,0"))
                      (builtin "One Step Simplification" (formula "2"))
                     (rule "true_left" (formula "2"))
                     (rule "cnf_rightDist" (formula "1") (term "0,0,0"))
                     (rule "distr_forallAnd" (formula "1") (term "0,0"))
                     (rule "distr_forallAnd" (formula "1") (term "0"))
                     (rule "distr_forallAnd" (formula "1"))
                     (rule "andLeft" (formula "1"))
                     (rule "ifthenelse_split_for" (formula "30") (term "1,1"))
                     (branch "result_228_A_1.value@heapAtPre_A«anonHeapFunction» ≥ 0 TRUE"
                        (rule "cnf_rightDist" (formula "31"))
                        (rule "andLeft" (formula "31"))
                        (rule "commute_or" (formula "32"))
                        (rule "cnf_rightDist" (formula "31"))
                        (rule "andLeft" (formula "31"))
                        (rule "commute_or" (formula "32"))
                        (rule "shift_paren_or" (formula "3") (term "0,0,0"))
                         (builtin "One Step Simplification" (formula "3"))
                        (rule "eqSymm" (formula "3") (term "1,1,0,0,0"))
                        (rule "castedGetAny" (formula "3") (term "0,0,1,0,0,0"))
                        (rule "castedGetAny" (formula "3") (term "1,0,0,0,0,0,0"))
                        (rule "castedGetAny" (formula "3") (term "0,1,1,0,0,0"))
                         (builtin "One Step Simplification" (formula "3"))
                        (rule "true_left" (formula "3"))
                        (rule "shift_paren_or" (formula "2") (term "0,0,0"))
                         (builtin "One Step Simplification" (formula "2"))
                        (rule "eqSymm" (formula "2") (term "1,1,0,0,0"))
                        (rule "castedGetAny" (formula "2") (term "1,0,0,0,0,0,0"))
                        (rule "castedGetAny" (formula "2") (term "0,0,1,0,0,0"))
                        (rule "castedGetAny" (formula "2") (term "0,1,1,0,0,0"))
                         (builtin "One Step Simplification" (formula "2"))
                        (rule "true_left" (formula "2"))
                        (rule "cnf_rightDist" (formula "1") (term "0,0,0"))
                        (rule "distr_forallAnd" (formula "1") (term "0,0"))
                        (rule "distr_forallAnd" (formula "1") (term "0"))
                        (rule "distr_forallAnd" (formula "1"))
                        (rule "andLeft" (formula "1"))
                        (rule "commute_or_2" (formula "1") (term "0,0,0"))
                         (builtin "One Step Simplification" (formula "1"))
                        (rule "eqSymm" (formula "1") (term "1,0,0,0,0"))
                        (rule "castedGetAny" (formula "1") (term "0,0,0,0,0,0"))
                        (rule "castedGetAny" (formula "1") (term "1,0,0,1,0,0,0"))
                        (rule "castedGetAny" (formula "1") (term "0,1,0,0,0,0"))
                         (builtin "One Step Simplification" (formula "1"))
                        (rule "true_left" (formula "1"))
                        (rule "shift_paren_or" (formula "1") (term "0,0,0"))
                         (builtin "One Step Simplification" (formula "1"))
                        (rule "eqSymm" (formula "1") (term "1,1,0,0,0"))
                        (rule "castedGetAny" (formula "1") (term "0,0,1,0,0,0"))
                        (rule "castedGetAny" (formula "1") (term "1,0,0,0,0,0,0"))
                        (rule "castedGetAny" (formula "1") (term "0,1,1,0,0,0"))
                         (builtin "One Step Simplification" (formula "1"))
                        (rule "true_left" (formula "1"))
                        (rule "cut_direct" (formula "28") (term "0"))
                        (branch "CUT: result_228_A_1.value@heapAtPre_A«anonHeapFunction» = 0 TRUE"
                            (builtin "One Step Simplification" (formula "29"))
                           (rule "true_left" (formula "29"))
                           (rule "replace_known_left" (formula "30") (term "0") (ifseqformula "28"))
                            (builtin "One Step Simplification" (formula "30"))
                           (rule "true_left" (formula "30"))
                           (rule "replace_known_left" (formula "29") (term "0") (ifseqformula "28"))
                            (builtin "One Step Simplification" (formula "29"))
                           (rule "true_left" (formula "29"))
                           (rule "applyEq" (formula "30") (term "1,0") (ifseqformula "28"))
                           (rule "times_zero_1" (formula "30") (term "0"))
                           (rule "polySimp_homoEq" (formula "30"))
                           (rule "mul_literals" (formula "30") (term "1,0"))
                           (rule "add_zero_right" (formula "30") (term "0"))
                           (rule "applyEq" (formula "29") (term "1,0") (ifseqformula "28"))
                           (rule "eqSymm" (formula "29"))
                           (rule "polySimp_homoEq" (formula "29"))
                           (rule "polySimp_mulLiterals" (formula "29") (term "1,0"))
                           (rule "polySimp_elimOne" (formula "29") (term "1,0"))
                           (rule "applyEq" (formula "27") (term "0") (ifseqformula "28"))
                           (rule "qeq_literals" (formula "27"))
                           (rule "true_left" (formula "27"))
                           (rule "applyEq" (formula "22") (term "1") (ifseqformula "27"))
                           (rule "applyEq" (formula "6") (term "1") (ifseqformula "27"))
                           (rule "applyEq" (formula "56") (term "1") (ifseqformula "27"))
                           (rule "applyEq" (formula "28") (term "1,1,0") (ifseqformula "27"))
                           (rule "polySimp_addComm0" (formula "28") (term "0"))
                           (rule "polySimp_sepNegMonomial" (formula "29"))
                           (rule "polySimp_mulLiterals" (formula "29") (term "0"))
                           (rule "polySimp_elimOne" (formula "29") (term "0"))
                           (rule "applyEq" (formula "28") (term "0,1,0") (ifseqformula "29"))
                           (rule "polySimp_addComm0" (formula "28") (term "0"))
                           (rule "applyEq" (formula "3") (term "0") (ifseqformula "29"))
                           (rule "applyEq" (formula "28") (term "0,0,1,0") (ifseqformula "29"))
                           (rule "polySimp_addComm0" (formula "28") (term "0"))
                           (rule "applyEq" (formula "5") (term "1") (ifseqformula "29"))
                           (rule "polySimp_sepPosMonomial" (formula "28"))
                           (rule "jdiv_axiom" (formula "28") (term "0"))
                           (rule "eqSymm" (formula "28"))
                           (rule "applyEq" (formula "28") (term "1") (ifseqformula "29"))
                            (builtin "One Step Simplification" (formula "28"))
                           (rule "eqSymm" (formula "28") (term "1"))
                           (rule "polySimp_homoEq" (formula "28") (term "1"))
                           (rule "polySimp_mulLiterals" (formula "28") (term "1,0,1"))
                           (rule "polySimp_elimOne" (formula "28") (term "1,0,1"))
                           (rule "polySimp_sepPosMonomial" (formula "28") (term "1"))
                           (rule "inEqSimp_contradInEq0" (formula "28") (term "0,0") (ifseqformula "3"))
                           (rule "qeq_literals" (formula "28") (term "0,0,0"))
                            (builtin "One Step Simplification" (formula "28"))
                           (rule "true_left" (formula "28"))
                           (rule "div_axiom" (formula "28") (term "0,1") (inst "quotient=quotient_1"))
                            (builtin "One Step Simplification" (formula "28"))
                           (rule "true_left" (formula "28"))
                           (rule "Use_information_flow_contract_for_compareTo_325434207" (formula "18") (ifseqformula "18"))
                            (builtin "One Step Simplification" (formula "18") (ifInst ""  (formula "92")) (ifInst ""  (formula "92")))
                           (rule "true_left" (formula "18"))
                           (rule "Use_information_flow_contract_for_getOrder_757678341" (formula "58") (ifseqformula "24"))
                           (rule "applyEq" (formula "58") (term "0,1,1") (ifseqformula "6"))
                           (rule "eqSymm" (formula "58") (term "1,1"))
                           (rule "replace_known_left" (formula "58") (term "1,1") (ifseqformula "27"))
                            (builtin "One Step Simplification" (formula "58"))
                           (rule "true_left" (formula "58"))
                           (rule "Use_information_flow_contract_for_getOrder_757678341" (formula "58") (ifseqformula "58"))
                            (builtin "One Step Simplification" (formula "58"))
                           (rule "true_left" (formula "58"))
                           (rule "Use_information_flow_contract_for_getOrder_757678341" (formula "24") (ifseqformula "24"))
                            (builtin "One Step Simplification" (formula "24"))
                           (rule "true_left" (formula "24"))
                           (rule "Use_information_flow_contract_for_compareTo_325434207" (formula "18") (ifseqformula "52"))
                           (rule "eqSymm" (formula "18") (term "1,1"))
                           (rule "eqSymm" (formula "18") (term "0,0,1"))
                           (rule "eqSymm" (formula "18") (term "1,0,1"))
                           (rule "replace_known_right" (formula "18") (term "0,1,1,0") (ifseqformula "93"))
                            (builtin "One Step Simplification" (formula "18") (ifInst ""  (formula "92")))
                           (rule "applyEqRigid" (formula "18") (term "0,1,0,1") (ifseqformula "54"))
                           (rule "eqSymm" (formula "18") (term "1,0,1"))
                           (rule "replace_known_left" (formula "18") (term "1,0,1") (ifseqformula "20"))
                            (builtin "One Step Simplification" (formula "18"))
                           (rule "applyEq" (formula "18") (term "0,0,1") (ifseqformula "5"))
                           (rule "eqSymm" (formula "18") (term "0,1"))
                           (rule "replace_known_left" (formula "18") (term "0,1") (ifseqformula "30"))
                            (builtin "One Step Simplification" (formula "18"))
                           (rule "Class_invariant_axiom_for_java_math_BigInteger" (formula "18") (term "1,0"))
                           (rule "replace_known_right" (formula "18") (term "0,0,1,0") (ifseqformula "93"))
                            (builtin "One Step Simplification" (formula "18") (ifInst ""  (formula "54")))
                           (rule "Class_invariant_axiom_for_java_math_BigInteger" (formula "18") (term "0"))
                           (rule "replace_known_right" (formula "18") (term "0,0,0") (ifseqformula "92"))
                            (builtin "One Step Simplification" (formula "18") (ifInst ""  (formula "20")))
                           (rule "applyEq" (formula "52") (term "0") (ifseqformula "18"))
                           (rule "applyEq" (formula "52") (term "4") (ifseqformula "18"))
                           (rule "applyEq" (formula "45") (term "0") (ifseqformula "18"))
                           (rule "Use_information_flow_contract_for_multiply_1272441881_0" (formula "69") (ifseqformula "36"))
                           (rule "replaceKnownSelect_taclet21_11" (formula "69") (term "1,1,1"))
                           (rule "replaceKnownSelect_taclet21_12" (formula "69") (term "0,1,1"))
                           (rule "replaceKnownAuxiliaryConstant_taclet00121_17" (formula "69") (term "1,1,1"))
                           (rule "replaceKnownAuxiliaryConstant_taclet1100121_19" (formula "69") (term "0,1,1"))
                           (rule "replaceKnownSelect_taclet21_9" (formula "69") (term "0,1,0,1"))
                           (rule "replaceKnownSelect_taclet21_8" (formula "69") (term "1,1,0,1"))
                           (rule "replaceKnownAuxiliaryConstant_taclet121_15" (formula "69") (term "0,1,0,1"))
                           (rule "replaceKnownAuxiliaryConstant_taclet21_10" (formula "69") (term "1,1,0,1"))
                           (rule "replaceKnownAuxiliaryConstant_taclet121_15" (formula "69") (term "1,1,0,1"))
                            (builtin "One Step Simplification" (formula "69") (ifInst ""  (formula "82")) (ifInst ""  (formula "81")))
                           (rule "eqSymm" (formula "69") (term "1,1"))
                           (rule "replace_known_right" (formula "69") (term "1,1") (ifseqformula "99"))
                            (builtin "One Step Simplification" (formula "69"))
                           (rule "pullOutSelect" (formula "69") (term "1,0,1") (inst "selectSK=org_bouncycastle_math_ec_ECPoint_value_4"))
                           (rule "simplifySelectOfAnonEQ" (formula "69") (ifseqformula "26"))
                            (builtin "One Step Simplification" (formula "69") (ifInst ""  (formula "96")) (ifInst ""  (formula "13")))
                           (rule "applyEqReverse" (formula "70") (term "1,0,1") (ifseqformula "69"))
                           (rule "hideAuxiliaryEq" (formula "69"))
                           (rule "pullOutSelect" (formula "69") (term "0,0,1") (inst "selectSK=org_bouncycastle_math_ec_ECPoint_value_5"))
                           (rule "simplifySelectOfAnonEQ" (formula "69") (ifseqformula "59"))
                            (builtin "One Step Simplification" (formula "69") (ifInst ""  (formula "97")) (ifInst ""  (formula "47")))
                           (rule "applyEqReverse" (formula "70") (term "0,0,1") (ifseqformula "69"))
                           (rule "hideAuxiliaryEq" (formula "69"))
                           (rule "replace_known_left" (formula "69") (term "0,1") (ifseqformula "4"))
                            (builtin "One Step Simplification" (formula "69"))
                           (rule "notLeft" (formula "69"))
                           (rule "Class_invariant_axiom_for_org_bouncycastle_math_ec_ECPoint" (formula "75") (term "1"))
                            (builtin "One Step Simplification" (formula "75"))
                           (rule "Class_invariant_axiom_for_org_bouncycastle_math_ec_ECPoint" (formula "75"))
                           (rule "closeTrue" (formula "75"))
                        )
                        (branch "CUT: result_228_A_1.value@heapAtPre_A«anonHeapFunction» = 0 FALSE"
                            (builtin "One Step Simplification" (formula "28"))
                           (rule "replace_known_right" (formula "29") (term "0") (ifseqformula "79"))
                            (builtin "One Step Simplification" (formula "29"))
                           (rule "replace_known_right" (formula "30") (term "0") (ifseqformula "79"))
                            (builtin "One Step Simplification" (formula "30"))
                           (rule "applyEq" (formula "32") (term "0,0") (ifseqformula "29"))
                           (rule "polySimp_mulComm0" (formula "32") (term "0"))
                           (rule "applyEq" (formula "30") (term "0") (ifseqformula "32"))
                           (rule "inEqSimp_homoInEq1" (formula "30"))
                           (rule "polySimp_mulComm0" (formula "30") (term "1,0"))
                           (rule "polySimp_rightDist" (formula "30") (term "1,0"))
                           (rule "polySimp_mulLiterals" (formula "30") (term "1,1,0"))
                           (rule "polySimp_elimOne" (formula "30") (term "1,1,0"))
                           (rule "polySimp_mulComm0" (formula "30") (term "0,1,0"))
                           (rule "polySimp_addComm1" (formula "30") (term "0"))
                           (rule "polySimp_addAssoc" (formula "30") (term "0,0"))
                           (rule "polySimp_addComm1" (formula "30") (term "0,0,0"))
                           (rule "polySimp_pullOutFactor2b" (formula "30") (term "0,0"))
                           (rule "add_literals" (formula "30") (term "1,1,0,0"))
                           (rule "times_zero_1" (formula "30") (term "1,0,0"))
                           (rule "add_zero_right" (formula "30") (term "0,0"))
                           (rule "applyEq" (formula "28") (term "0") (ifseqformula "32"))
                           (rule "inEqSimp_homoInEq0" (formula "28"))
                           (rule "polySimp_mulComm0" (formula "28") (term "1,0"))
                           (rule "polySimp_rightDist" (formula "28") (term "1,0"))
                           (rule "polySimp_mulLiterals" (formula "28") (term "1,1,0"))
                           (rule "polySimp_elimOne" (formula "28") (term "1,1,0"))
                           (rule "polySimp_mulComm0" (formula "28") (term "0,1,0"))
                           (rule "polySimp_addAssoc" (formula "28") (term "0"))
                           (rule "polySimp_addComm0" (formula "28") (term "0,0"))
                           (rule "polySimp_pullOutFactor2b" (formula "28") (term "0"))
                           (rule "add_literals" (formula "28") (term "1,1,0"))
                           (rule "times_zero_1" (formula "28") (term "1,0"))
                           (rule "add_zero_right" (formula "28") (term "0"))
                           (rule "applyEq" (formula "31") (term "0,1") (ifseqformula "29"))
                           (rule "inEqSimp_sepNegMonomial0" (formula "30"))
                           (rule "polySimp_mulLiterals" (formula "30") (term "0"))
                           (rule "polySimp_elimOne" (formula "30") (term "0"))
                           (rule "inEqSimp_invertInEq1" (formula "28"))
                           (rule "polySimp_mulLiterals" (formula "28") (term "0"))
                           (rule "mul_literals" (formula "28") (term "1"))
                           (rule "polySimp_elimOne" (formula "28") (term "0"))
                           (rule "inEqSimp_strengthen1" (formula "27") (ifseqformula "79"))
                           (rule "add_literals" (formula "27") (term "1"))
                           (rule "inEqSimp_contradEq7" (formula "79") (ifseqformula "27"))
                           (rule "mul_literals" (formula "79") (term "1,0,0"))
                           (rule "add_zero_right" (formula "79") (term "0,0"))
                           (rule "leq_literals" (formula "79") (term "0"))
                            (builtin "One Step Simplification" (formula "79"))
                           (rule "false_right" (formula "79"))
                           (rule "Use_information_flow_contract_for_compareTo_325434207" (formula "18") (ifseqformula "18"))
                            (builtin "One Step Simplification" (formula "18") (ifInst ""  (formula "95")) (ifInst ""  (formula "95")))
                           (rule "true_left" (formula "18"))
                           (rule "Use_information_flow_contract_for_getOrder_757678341" (formula "61") (ifseqformula "24"))
                           (rule "replace_known_left" (formula "61") (term "1,1") (ifseqformula "6"))
                            (builtin "One Step Simplification" (formula "61"))
                           (rule "true_left" (formula "61"))
                           (rule "Use_information_flow_contract_for_getOrder_757678341" (formula "61") (ifseqformula "61"))
                            (builtin "One Step Simplification" (formula "61"))
                           (rule "true_left" (formula "61"))
                           (rule "Use_information_flow_contract_for_getOrder_757678341" (formula "24") (ifseqformula "24"))
                            (builtin "One Step Simplification" (formula "24"))
                           (rule "true_left" (formula "24"))
                           (rule "Use_information_flow_contract_for_compareTo_325434207" (formula "18") (ifseqformula "55"))
                           (rule "eqSymm" (formula "18") (term "1,0,1"))
                           (rule "eqSymm" (formula "18") (term "1,1"))
                           (rule "eqSymm" (formula "18") (term "0,0,1"))
                           (rule "replace_known_right" (formula "18") (term "0,1,1,0") (ifseqformula "96"))
                            (builtin "One Step Simplification" (formula "18") (ifInst ""  (formula "95")) (ifInst ""  (formula "5")))
                           (rule "applyEq" (formula "18") (term "0,0,1") (ifseqformula "57"))
                           (rule "eqSymm" (formula "18") (term "0,1"))
                           (rule "replace_known_left" (formula "18") (term "0,1") (ifseqformula "20"))
                            (builtin "One Step Simplification" (formula "18"))
                           (rule "Class_invariant_axiom_for_java_math_BigInteger" (formula "18") (term "1,0"))
                           (rule "replace_known_left" (formula "18") (term "1,1,0") (ifseqformula "57"))
                            (builtin "One Step Simplification" (formula "18") (ifInst ""  (formula "96")))
                           (rule "Class_invariant_axiom_for_java_math_BigInteger" (formula "18") (term "0"))
                           (rule "replace_known_right" (formula "18") (term "0,0,0") (ifseqformula "95"))
                            (builtin "One Step Simplification" (formula "18") (ifInst ""  (formula "20")))
                           (rule "applyEq" (formula "55") (term "0") (ifseqformula "18"))
                           (rule "applyEq" (formula "48") (term "0") (ifseqformula "18"))
                           (rule "applyEq" (formula "54") (term "4") (ifseqformula "18"))
                           (rule "Use_information_flow_contract_for_multiply_1272441881" (formula "72") (ifseqformula "39"))
                           (rule "replaceKnownSelect_taclet21_12" (formula "72") (term "0,1,1"))
                           (rule "replaceKnownSelect_taclet21_11" (formula "72") (term "1,1,1"))
                           (rule "replaceKnownAuxiliaryConstant_taclet1100121_19" (formula "72") (term "0,1,1"))
                           (rule "replaceKnownAuxiliaryConstant_taclet00121_17" (formula "72") (term "1,1,1"))
                           (rule "replaceKnownSelect_taclet21_9" (formula "72") (term "0,1,0,1"))
                           (rule "replaceKnownSelect_taclet21_8" (formula "72") (term "1,1,0,1"))
                           (rule "replaceKnownAuxiliaryConstant_taclet121_15" (formula "72") (term "0,1,0,1"))
                           (rule "replaceKnownAuxiliaryConstant_taclet21_10" (formula "72") (term "1,1,0,1"))
                           (rule "replaceKnownAuxiliaryConstant_taclet121_15" (formula "72") (term "1,1,0,1"))
                            (builtin "One Step Simplification" (formula "72") (ifInst ""  (formula "85")) (ifInst ""  (formula "84")))
                           (rule "eqSymm" (formula "72") (term "1,1"))
                           (rule "replace_known_right" (formula "72") (term "1,1") (ifseqformula "102"))
                            (builtin "One Step Simplification" (formula "72"))
                           (rule "pullOutSelect" (formula "72") (term "0,0,1") (inst "selectSK=org_bouncycastle_math_ec_ECPoint_value_4"))
                           (rule "simplifySelectOfAnonEQ" (formula "72") (ifseqformula "62"))
                            (builtin "One Step Simplification" (formula "72") (ifInst ""  (formula "100")) (ifInst ""  (formula "50")))
                           (rule "applyEqReverse" (formula "73") (term "0,0,1") (ifseqformula "72"))
                           (rule "hideAuxiliaryEq" (formula "72"))
                           (rule "eqSymm" (formula "72") (term "0,1"))
                           (rule "applyEq" (formula "72") (term "1,0,1") (ifseqformula "4"))
                           (rule "pullOutSelect" (formula "72") (term "0,0,1") (inst "selectSK=org_bouncycastle_math_ec_ECPoint_value_5"))
                           (rule "simplifySelectOfAnonEQ" (formula "72") (ifseqformula "26"))
                            (builtin "One Step Simplification" (formula "72") (ifInst ""  (formula "99")) (ifInst ""  (formula "13")))
                           (rule "applyEqReverse" (formula "73") (term "0,0,1") (ifseqformula "72"))
                            (builtin "One Step Simplification" (formula "73"))
                           (rule "notLeft" (formula "73"))
                           (rule "hideAuxiliaryEq" (formula "72"))
                           (rule "Class_invariant_axiom_for_org_bouncycastle_math_ec_ECPoint" (formula "78") (term "0"))
                            (builtin "One Step Simplification" (formula "78"))
                           (rule "Class_invariant_axiom_for_org_bouncycastle_math_ec_ECPoint" (formula "78"))
                           (rule "closeTrue" (formula "78"))
                        )
                     )
                     (branch "result_228_A_1.value@heapAtPre_A«anonHeapFunction» ≥ 0 FALSE"
                        (rule "inEqSimp_geqRight" (formula "79"))
                        (rule "mul_literals" (formula "1") (term "1,0,0"))
                        (rule "add_literals" (formula "1") (term "0,0"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "1"))
                        (rule "mul_literals" (formula "1") (term "1"))
                        (rule "inEqSimp_contradEq3" (formula "31") (term "0") (ifseqformula "1"))
                        (rule "mul_literals" (formula "31") (term "1,0,0,0"))
                        (rule "add_zero_right" (formula "31") (term "0,0,0"))
                        (rule "qeq_literals" (formula "31") (term "0,0"))
                         (builtin "One Step Simplification" (formula "31"))
                        (rule "andLeft" (formula "31"))
                        (rule "andLeft" (formula "31"))
                        (rule "applyEq" (formula "35") (term "0,0") (ifseqformula "32"))
                        (rule "polySimp_mulComm0" (formula "35") (term "0"))
                        (rule "applyEq" (formula "31") (term "0") (ifseqformula "35"))
                        (rule "inEqSimp_homoInEq0" (formula "31"))
                        (rule "polySimp_mulComm0" (formula "31") (term "1,0"))
                        (rule "polySimp_rightDist" (formula "31") (term "1,0"))
                        (rule "polySimp_mulLiterals" (formula "31") (term "1,1,0"))
                        (rule "polySimp_elimOne" (formula "31") (term "1,1,0"))
                        (rule "polySimp_mulComm0" (formula "31") (term "0,1,0"))
                        (rule "polySimp_addAssoc" (formula "31") (term "0"))
                        (rule "polySimp_addComm0" (formula "31") (term "0,0"))
                        (rule "polySimp_pullOutFactor2b" (formula "31") (term "0"))
                        (rule "add_literals" (formula "31") (term "1,1,0"))
                        (rule "times_zero_1" (formula "31") (term "1,0"))
                        (rule "add_zero_right" (formula "31") (term "0"))
                        (rule "applyEq" (formula "33") (term "0") (ifseqformula "35"))
                        (rule "inEqSimp_homoInEq1" (formula "33"))
                        (rule "polySimp_mulComm0" (formula "33") (term "1,0"))
                        (rule "polySimp_rightDist" (formula "33") (term "1,0"))
                        (rule "polySimp_mulLiterals" (formula "33") (term "1,1,0"))
                        (rule "polySimp_elimOne" (formula "33") (term "1,1,0"))
                        (rule "polySimp_mulComm0" (formula "33") (term "0,1,0"))
                        (rule "polySimp_addComm1" (formula "33") (term "0"))
                        (rule "polySimp_addAssoc" (formula "33") (term "0,0"))
                        (rule "polySimp_addComm1" (formula "33") (term "0,0,0"))
                        (rule "polySimp_pullOutFactor2b" (formula "33") (term "0,0"))
                        (rule "add_literals" (formula "33") (term "1,1,0,0"))
                        (rule "times_zero_1" (formula "33") (term "1,0,0"))
                        (rule "add_zero_right" (formula "33") (term "0,0"))
                        (rule "applyEq" (formula "34") (term "0,1") (ifseqformula "32"))
                        (rule "inEqSimp_invertInEq1" (formula "31"))
                        (rule "polySimp_mulLiterals" (formula "31") (term "0"))
                        (rule "mul_literals" (formula "31") (term "1"))
                        (rule "polySimp_elimOne" (formula "31") (term "0"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "33"))
                        (rule "polySimp_mulComm0" (formula "33") (term "1"))
                        (rule "polySimp_rightDist" (formula "33") (term "1"))
                        (rule "mul_literals" (formula "33") (term "0,1"))
                        (rule "polySimp_mulLiterals" (formula "33") (term "1,1"))
                        (rule "polySimp_elimOne" (formula "33") (term "1,1"))
                        (rule "shift_paren_or" (formula "4") (term "0,0,0"))
                         (builtin "One Step Simplification" (formula "4"))
                        (rule "eqSymm" (formula "4") (term "1,1,0,0,0"))
                        (rule "castedGetAny" (formula "4") (term "0,0,1,0,0,0"))
                        (rule "castedGetAny" (formula "4") (term "1,0,0,0,0,0,0"))
                        (rule "castedGetAny" (formula "4") (term "0,1,1,0,0,0"))
                         (builtin "One Step Simplification" (formula "4"))
                        (rule "true_left" (formula "4"))
                        (rule "shift_paren_or" (formula "3") (term "0,0,0"))
                         (builtin "One Step Simplification" (formula "3"))
                        (rule "eqSymm" (formula "3") (term "1,1,0,0,0"))
                        (rule "castedGetAny" (formula "3") (term "0,0,1,0,0,0"))
                        (rule "castedGetAny" (formula "3") (term "1,0,0,0,0,0,0"))
                        (rule "castedGetAny" (formula "3") (term "0,1,1,0,0,0"))
                         (builtin "One Step Simplification" (formula "3"))
                        (rule "true_left" (formula "3"))
                        (rule "cnf_rightDist" (formula "2") (term "0,0,0"))
                        (rule "distr_forallAnd" (formula "2") (term "0,0"))
                        (rule "distr_forallAnd" (formula "2") (term "0"))
                        (rule "distr_forallAnd" (formula "2"))
                        (rule "andLeft" (formula "2"))
                        (rule "commute_or_2" (formula "2") (term "0,0,0"))
                         (builtin "One Step Simplification" (formula "2"))
                        (rule "eqSymm" (formula "2") (term "1,0,0,0,0"))
                        (rule "castedGetAny" (formula "2") (term "1,0,0,1,0,0,0"))
                        (rule "castedGetAny" (formula "2") (term "0,0,0,0,0,0"))
                        (rule "castedGetAny" (formula "2") (term "0,1,0,0,0,0"))
                         (builtin "One Step Simplification" (formula "2"))
                        (rule "true_left" (formula "2"))
                        (rule "shift_paren_or" (formula "2") (term "0,0,0"))
                         (builtin "One Step Simplification" (formula "2"))
                        (rule "eqSymm" (formula "2") (term "1,1,0,0,0"))
                        (rule "castedGetAny" (formula "2") (term "1,0,0,0,0,0,0"))
                        (rule "castedGetAny" (formula "2") (term "0,0,1,0,0,0"))
                        (rule "castedGetAny" (formula "2") (term "0,1,1,0,0,0"))
                         (builtin "One Step Simplification" (formula "2"))
                        (rule "true_left" (formula "2"))
                        (rule "Use_information_flow_contract_for_compareTo_325434207" (formula "19") (ifseqformula "19"))
                         (builtin "One Step Simplification" (formula "19") (ifInst ""  (formula "95")) (ifInst ""  (formula "95")))
                        (rule "true_left" (formula "19"))
                        (rule "Use_information_flow_contract_for_getOrder_757678341" (formula "61") (ifseqformula "25"))
                        (rule "replace_known_left" (formula "61") (term "1,1") (ifseqformula "7"))
                         (builtin "One Step Simplification" (formula "61"))
                        (rule "true_left" (formula "61"))
                        (rule "Use_information_flow_contract_for_multiply_1272441881_0" (formula "73") (ifseqformula "38"))
                        (rule "replaceKnownSelect_taclet21_11" (formula "73") (term "1,1,1"))
                        (rule "replaceKnownSelect_taclet21_12" (formula "73") (term "0,1,1"))
                        (rule "replaceKnownAuxiliaryConstant_taclet00121_17" (formula "73") (term "1,1,1"))
                        (rule "replaceKnownAuxiliaryConstant_taclet1100121_19" (formula "73") (term "0,1,1"))
                        (rule "replaceKnownSelect_taclet21_8" (formula "73") (term "1,1,0,1"))
                        (rule "replaceKnownSelect_taclet21_9" (formula "73") (term "0,1,0,1"))
                        (rule "replaceKnownAuxiliaryConstant_taclet21_10" (formula "73") (term "1,1,0,1"))
                         (builtin "One Step Simplification" (formula "73") (ifInst ""  (formula "86")) (ifInst ""  (formula "85")))
                        (rule "eqSymm" (formula "73") (term "1,1"))
                        (rule "replace_known_right" (formula "73") (term "1,1") (ifseqformula "103"))
                         (builtin "One Step Simplification" (formula "73"))
                        (rule "pullOutSelect" (formula "73") (term "1,0,1") (inst "selectSK=org_bouncycastle_math_ec_ECPoint_value_4"))
                        (rule "simplifySelectOfAnonEQ" (formula "73") (ifseqformula "26"))
                         (builtin "One Step Simplification" (formula "73") (ifInst ""  (formula "100")) (ifInst ""  (formula "14")))
                        (rule "applyEqReverse" (formula "74") (term "1,0,1") (ifseqformula "73"))
                        (rule "hideAuxiliaryEq" (formula "73"))
                        (rule "pullOutSelect" (formula "73") (term "0,0,1") (inst "selectSK=org_bouncycastle_math_ec_ECPoint_value_5"))
                        (rule "simplifySelectOfAnonEQ" (formula "73") (ifseqformula "63"))
                         (builtin "One Step Simplification" (formula "73") (ifInst ""  (formula "101")) (ifInst ""  (formula "50")))
                        (rule "applyEqReverse" (formula "74") (term "0,0,1") (ifseqformula "73"))
                        (rule "hideAuxiliaryEq" (formula "73"))
                        (rule "replace_known_left" (formula "73") (term "0,1") (ifseqformula "5"))
                         (builtin "One Step Simplification" (formula "73"))
                        (rule "notLeft" (formula "73"))
                        (rule "Class_invariant_axiom_for_org_bouncycastle_math_ec_ECPoint" (formula "79") (term "0"))
                         (builtin "One Step Simplification" (formula "79"))
                        (rule "Class_invariant_axiom_for_org_bouncycastle_math_ec_ECPoint" (formula "79"))
                        (rule "closeTrue" (formula "79"))
                     )
                  )
               )
            )
            (branch " resultAtPost_226_A.<created>@heapAtPre_A«anonHeapFunction» = TRUE FALSE"
               (rule "applyEqReverse" (formula "4") (term "1,0") (ifseqformula "3"))
               (rule "hideAuxiliaryEq" (formula "3"))
               (rule "replace_known_right" (formula "3") (term "1,0,0") (ifseqformula "77"))
                (builtin "One Step Simplification" (formula "3"))
               (rule "replace_known_right" (formula "35") (term "1") (ifseqformula "77"))
                (builtin "One Step Simplification" (formula "35"))
               (rule "ifthenelse_split" (formula "1") (term "0"))
               (branch " resultAtPost_226_B.<created>@heapAtPre_B«anonHeapFunction» = TRUE TRUE"
                  (rule "applyEqReverse" (formula "3") (term "1,0") (ifseqformula "2"))
                  (rule "hideAuxiliaryEq" (formula "2"))
                  (rule "replace_known_left" (formula "2") (term "1,0,0") (ifseqformula "1"))
                   (builtin "One Step Simplification" (formula "2"))
                  (rule "applyEqReverse" (formula "99") (term "0") (ifseqformula "2"))
                  (rule "hideAuxiliaryEq" (formula "2"))
                  (rule "replace_known_left" (formula "69") (term "1") (ifseqformula "1"))
                   (builtin "One Step Simplification" (formula "69"))
                  (rule "true_left" (formula "69"))
                  (rule "Class_axiom_0_in_de_polyas_core3_open_cred_CredTool" (inst "seq=seq") (inst "i=i") (inst "str=str") (inst "seq_0=seq_0") (inst "i_0=i_0") (inst "sv_heap=heapAtPre_B<<anonHeapFunction>>"))
                  (rule "andLeft" (formula "1"))
                  (rule "castedGetAny" (formula "1") (term "0,0,1,0,0"))
                  (rule "castedGetAny" (formula "2") (term "0,1,1,0,0,0"))
                  (rule "castedGetAny" (formula "1") (term "0,0,0,0,0"))
                  (rule "nnf_imp2or" (formula "1") (term "0,0"))
                   (builtin "One Step Simplification" (formula "1"))
                  (rule "nnf_imp2or" (formula "2") (term "0,0,0"))
                  (rule "nnf_imp2or" (formula "2") (term "1,0,0,0"))
                  (rule "nnf_notAnd" (formula "2") (term "0,0,0,0"))
                   (builtin "One Step Simplification" (formula "2"))
                  (rule "nnf_notAnd" (formula "2") (term "0,1,0,0,0"))
                   (builtin "One Step Simplification" (formula "2"))
                  (rule "nnf_notOr" (formula "2") (term "0,0,0,0,0"))
                  (rule "commute_or" (formula "2") (term "0,0,0,0"))
                  (rule "commute_or_2" (formula "2") (term "0,0,0"))
                  (rule "shift_paren_or" (formula "2") (term "0,0,0,0"))
                  (rule "commute_and" (formula "2") (term "1,0,0,0"))
                  (rule "shift_paren_or" (formula "2") (term "0,0,0,0,0"))
                  (rule "commute_or_2" (formula "2") (term "0,0,0,0,0"))
                   (builtin "One Step Simplification" (formula "2"))
                  (rule "commute_or_2" (formula "2") (term "0,0,0,0"))
                  (rule "cnf_rightDist" (formula "2") (term "0,0,0"))
                  (rule "distr_forallAnd" (formula "2") (term "0,0"))
                  (rule "distr_forallAnd" (formula "2") (term "0"))
                  (rule "distr_forallAnd" (formula "2"))
                  (rule "andLeft" (formula "2"))
                  (rule "commute_or_2" (formula "2") (term "0,0,0"))
                   (builtin "One Step Simplification" (formula "2"))
                  (rule "eqSymm" (formula "2") (term "1,0,0,0,0"))
                  (rule "castedGetAny" (formula "2") (term "0,0,0,0,0,0"))
                  (rule "castedGetAny" (formula "2") (term "1,0,0,1,0,0,0"))
                  (rule "castedGetAny" (formula "2") (term "0,1,0,0,0,0"))
                   (builtin "One Step Simplification" (formula "2"))
                  (rule "true_left" (formula "2"))
                  (rule "shift_paren_or" (formula "2") (term "0,0,0"))
                   (builtin "One Step Simplification" (formula "2"))
                  (rule "eqSymm" (formula "2") (term "1,1,0,0,0"))
                  (rule "castedGetAny" (formula "2") (term "0,0,0,0,0,0"))
                  (rule "castedGetAny" (formula "2") (term "0,0,1,0,0,0"))
                  (rule "castedGetAny" (formula "2") (term "0,1,1,0,0,0"))
                   (builtin "One Step Simplification" (formula "2"))
                  (rule "true_left" (formula "2"))
                  (rule "Class_axiom_0_in_de_polyas_core3_open_cred_CredTool" (inst "seq=seq") (inst "i=i") (inst "str=str") (inst "seq_0=seq_0") (inst "i_0=i_0") (inst "sv_heap=anon_heap_mod<<anonHeapFunction>>"))
                  (rule "andLeft" (formula "1"))
                  (rule "castedGetAny" (formula "2") (term "0,1,1,0,0,0"))
                  (rule "castedGetAny" (formula "1") (term "0,0,0,0,0"))
                  (rule "castedGetAny" (formula "1") (term "0,0,1,0,0"))
                  (rule "nnf_imp2or" (formula "1") (term "0,0"))
                   (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "3")))
                  (rule "true_left" (formula "1"))
                  (rule "nnf_imp2or" (formula "1") (term "0,0,0"))
                  (rule "nnf_notAnd" (formula "1") (term "0,0,0,0"))
                   (builtin "One Step Simplification" (formula "1"))
                  (rule "nnf_imp2or" (formula "1") (term "1,0,0,0"))
                  (rule "nnf_notOr" (formula "1") (term "0,0,0,0,0"))
                  (rule "nnf_notAnd" (formula "1") (term "0,1,0,0,0"))
                   (builtin "One Step Simplification" (formula "1"))
                  (rule "commute_or" (formula "1") (term "0,0,0,0"))
                  (rule "commute_or_2" (formula "1") (term "0,0,0"))
                  (rule "shift_paren_or" (formula "1") (term "0,0,0,0"))
                  (rule "commute_and" (formula "1") (term "1,0,0,0"))
                  (rule "shift_paren_or" (formula "1") (term "0,0,0,0,0"))
                  (rule "commute_or_2" (formula "1") (term "0,0,0,0,0"))
                   (builtin "One Step Simplification" (formula "1"))
                  (rule "commute_or_2" (formula "1") (term "0,0,0,0"))
                  (rule "cnf_rightDist" (formula "1") (term "0,0,0"))
                  (rule "distr_forallAnd" (formula "1") (term "0,0"))
                  (rule "distr_forallAnd" (formula "1") (term "0"))
                  (rule "distr_forallAnd" (formula "1"))
                  (rule "andLeft" (formula "1"))
                  (rule "commute_or_2" (formula "1") (term "0,0,0"))
                   (builtin "One Step Simplification" (formula "1"))
                  (rule "eqSymm" (formula "1") (term "1,0,0,0,0"))
                  (rule "castedGetAny" (formula "1") (term "0,0,0,0,0,0"))
                  (rule "castedGetAny" (formula "1") (term "1,0,0,1,0,0,0"))
                  (rule "castedGetAny" (formula "1") (term "0,1,0,0,0,0"))
                   (builtin "One Step Simplification" (formula "1"))
                  (rule "true_left" (formula "1"))
                  (rule "shift_paren_or" (formula "1") (term "0,0,0"))
                   (builtin "One Step Simplification" (formula "1"))
                  (rule "eqSymm" (formula "1") (term "1,1,0,0,0"))
                  (rule "castedGetAny" (formula "1") (term "0,0,0,0,0,0"))
                  (rule "castedGetAny" (formula "1") (term "0,0,1,0,0,0"))
                  (rule "castedGetAny" (formula "1") (term "0,1,1,0,0,0"))
                   (builtin "One Step Simplification" (formula "1"))
                  (rule "true_left" (formula "1"))
                  (rule "Class_axiom_0_in_de_polyas_core3_open_cred_CredTool" (inst "seq=seq") (inst "i=i") (inst "str=str") (inst "seq_0=seq_0") (inst "i_0=i_0") (inst "sv_heap=anon_heap_multiply<<anonHeapFunction>>"))
                  (rule "andLeft" (formula "1"))
                  (rule "castedGetAny" (formula "2") (term "0,1,1,0,0,0"))
                  (rule "castedGetAny" (formula "1") (term "0,0,0,0,0"))
                  (rule "castedGetAny" (formula "1") (term "0,0,1,0,0"))
                  (rule "nnf_imp2or" (formula "1") (term "0,0"))
                   (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "3")))
                  (rule "true_left" (formula "1"))
                  (rule "nnf_imp2or" (formula "1") (term "0,0,0"))
                  (rule "nnf_notAnd" (formula "1") (term "0,0,0,0"))
                   (builtin "One Step Simplification" (formula "1"))
                  (rule "nnf_imp2or" (formula "1") (term "1,0,0,0"))
                  (rule "nnf_notOr" (formula "1") (term "0,0,0,0,0"))
                  (rule "nnf_notAnd" (formula "1") (term "0,1,0,0,0"))
                   (builtin "One Step Simplification" (formula "1"))
                  (rule "commute_or" (formula "1") (term "0,0,0,0"))
                  (rule "commute_or_2" (formula "1") (term "0,0,0"))
                  (rule "shift_paren_or" (formula "1") (term "0,0,0,0"))
                  (rule "Class_axiom_0_in_de_polyas_core3_open_cred_CredTool" (inst "seq=seq") (inst "i=i") (inst "str=str") (inst "seq_0=seq_0") (inst "i_0=i_0") (inst "sv_heap=heapAtPre_A<<anonHeapFunction>>"))
                  (rule "andLeft" (formula "1"))
                  (rule "castedGetAny" (formula "1") (term "0,0,0,0,0"))
                  (rule "castedGetAny" (formula "2") (term "0,1,1,0,0,0"))
                  (rule "castedGetAny" (formula "1") (term "0,0,1,0,0"))
                  (rule "nnf_imp2or" (formula "1") (term "0,0"))
                   (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "4")))
                  (rule "true_left" (formula "1"))
                  (rule "nnf_imp2or" (formula "1") (term "0,0,0"))
                  (rule "nnf_imp2or" (formula "1") (term "1,0,0,0"))
                  (rule "nnf_notAnd" (formula "1") (term "0,0,0,0"))
                   (builtin "One Step Simplification" (formula "1"))
                  (rule "nnf_notAnd" (formula "1") (term "0,1,0,0,0"))
                   (builtin "One Step Simplification" (formula "1"))
                  (rule "nnf_notOr" (formula "1") (term "0,0,0,0,0"))
                  (rule "commute_or" (formula "1") (term "0,0,0,0"))
                  (rule "commute_or_2" (formula "1") (term "0,0,0"))
                  (rule "Class_axiom_0_in_de_polyas_core3_open_cred_CredTool" (inst "seq=seq") (inst "i=i") (inst "str=str") (inst "seq_0=seq_0") (inst "i_0=i_0") (inst "sv_heap=anon(heapAtPre_A<<anonHeapFunction>>,
     empty,
     anon_heap_mod<<anonHeapFunction>>)"))
                   (builtin "One Step Simplification" (formula "1"))
                  (rule "andLeft" (formula "1"))
                  (rule "castedGetAny" (formula "2") (term "0,1,1,0,0,0"))
                  (rule "castedGetAny" (formula "1") (term "0,0,0,0,0"))
                  (rule "castedGetAny" (formula "1") (term "0,0,1,0,0"))
                  (rule "nnf_imp2or" (formula "1") (term "0,0"))
                   (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "5")))
                  (rule "true_left" (formula "1"))
                  (rule "nnf_imp2or" (formula "1") (term "0,0,0"))
                  (rule "nnf_imp2or" (formula "1") (term "1,0,0,0"))
                  (rule "nnf_notAnd" (formula "1") (term "0,0,0,0"))
                   (builtin "One Step Simplification" (formula "1"))
                  (rule "nnf_notOr" (formula "1") (term "0,0,0,0,0"))
                  (rule "nnf_notAnd" (formula "1") (term "0,1,0,0,0"))
                   (builtin "One Step Simplification" (formula "1"))
                  (rule "nnf_notOr" (formula "1") (term "1,0,0,0,0,0"))
                  (rule "Class_axiom_0_in_de_polyas_core3_open_cred_CredTool" (inst "seq=seq") (inst "i=i") (inst "str=str") (inst "seq_0=seq_0") (inst "i_0=i_0") (inst "sv_heap=heapAfter_mod_A_0"))
                  (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "1,0,0,0,0,0,1") (ifseqformula "30"))
                  (rule "andLeft" (formula "1"))
                  (rule "castedGetAny" (formula "1") (term "0,0,0,0,0"))
                  (rule "castedGetAny" (formula "1") (term "0,0,1,0,0"))
                  (rule "castedGetAny" (formula "2") (term "0,1,1,0,0,0"))
                  (rule "nnf_imp2or" (formula "1") (term "0,0"))
                   (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "6")))
                  (rule "true_left" (formula "1"))
                  (rule "nnf_imp2or" (formula "1") (term "0,0,0"))
                  (rule "nnf_imp2or" (formula "1") (term "1,0,0,0"))
                  (rule "nnf_notAnd" (formula "1") (term "0,0,0,0"))
                   (builtin "One Step Simplification" (formula "1"))
                  (rule "nnf_notOr" (formula "1") (term "0,0,0,0,0"))
                  (rule "nnf_notAnd" (formula "1") (term "0,1,0,0,0"))
                   (builtin "One Step Simplification" (formula "1"))
                  (rule "nnf_notOr" (formula "1") (term "1,0,0,0,0,0"))
                  (rule "Class_axiom_0_in_de_polyas_core3_open_cred_CredTool" (inst "seq=seq") (inst "i=i") (inst "str=str") (inst "seq_0=seq_0") (inst "i_0=i_0") (inst "sv_heap=anon(heapAfter_mod_A_0,
     empty,
     anon_heap_multiply<<anonHeapFunction>>)"))
                   (builtin "One Step Simplification" (formula "1"))
                  (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,1,0,0,0,0,0,1") (ifseqformula "30"))
                  (rule "andLeft" (formula "1"))
                  (rule "castedGetAny" (formula "1") (term "0,0,1,0,0"))
                  (rule "castedGetAny" (formula "2") (term "0,1,1,0,0,0"))
                  (rule "castedGetAny" (formula "1") (term "0,0,0,0,0"))
                  (rule "nnf_imp2or" (formula "1") (term "0,0"))
                   (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "6")))
                  (rule "true_left" (formula "1"))
                  (rule "nnf_imp2or" (formula "1") (term "0,0,0"))
                  (rule "nnf_notAnd" (formula "1") (term "0,0,0,0"))
                   (builtin "One Step Simplification" (formula "1"))
                  (rule "nnf_imp2or" (formula "1") (term "1,0,0,0"))
                  (rule "nnf_notOr" (formula "1") (term "0,0,0,0,0"))
                  (rule "nnf_notAnd" (formula "1") (term "0,1,0,0,0"))
                   (builtin "One Step Simplification" (formula "1"))
                  (rule "nnf_notOr" (formula "1") (term "1,0,0,0,0,0"))
                  (rule "nnf_notOr" (formula "1") (term "0,1,0,0,0,0,0"))
                  (rule "Class_axiom_0_in_de_polyas_core3_open_cred_CredTool" (inst "seq=seq") (inst "i=i") (inst "str=str") (inst "seq_0=seq_0") (inst "i_0=i_0") (inst "sv_heap=heapAfter_multiply_A_1"))
                  (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "1,0,0,0,0,0,1") (ifseqformula "38"))
                  (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,1,0,0,0,0,0,1") (ifseqformula "31"))
                  (rule "andLeft" (formula "1"))
                  (rule "castedGetAny" (formula "1") (term "0,0,0,0,0"))
                  (rule "castedGetAny" (formula "2") (term "0,1,1,0,0,0"))
                  (rule "castedGetAny" (formula "1") (term "0,0,1,0,0"))
                  (rule "nnf_imp2or" (formula "1") (term "0,0"))
                   (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "7")))
                  (rule "true_left" (formula "1"))
                  (rule "nnf_imp2or" (formula "1") (term "0,0,0"))
                  (rule "nnf_imp2or" (formula "1") (term "1,0,0,0"))
                  (rule "nnf_notAnd" (formula "1") (term "0,0,0,0"))
                   (builtin "One Step Simplification" (formula "1"))
                  (rule "nnf_notAnd" (formula "1") (term "0,1,0,0,0"))
                   (builtin "One Step Simplification" (formula "1"))
                  (rule "nnf_notOr" (formula "1") (term "0,0,0,0,0"))
                  (rule "nnf_notOr" (formula "1") (term "1,0,0,0,0,0"))
                  (rule "nnf_notOr" (formula "1") (term "0,1,0,0,0,0,0"))
                  (rule "Class_axiom_0_in_de_polyas_core3_open_cred_CredTool" (inst "seq=seq") (inst "i=i") (inst "str=str") (inst "seq_0=seq_0") (inst "i_0=i_0") (inst "sv_heap=heapAtPost_A"))
                  (rule "andLeft" (formula "1"))
                  (rule "castedGetAny" (formula "2") (term "0,1,1,0,0,0"))
                  (rule "castedGetAny" (formula "1") (term "0,0,0,0,0"))
                  (rule "castedGetAny" (formula "1") (term "0,0,1,0,0"))
                  (rule "applyEqRigid" (formula "2") (term "0,0,1,0,0,0,0,0") (ifseqformula "47"))
                  (rule "selectCreatedOfAnonAsFormulaEQ" (formula "2") (term "1,0,0,0,0,0") (ifseqformula "39"))
                  (rule "selectCreatedOfAnonAsFormulaEQ" (formula "2") (term "0,1,0,0,0,0,0") (ifseqformula "32"))
                  (rule "nnf_imp2or" (formula "1") (term "0,0"))
                   (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "7")))
                  (rule "true_left" (formula "1"))
                  (rule "nnf_imp2or" (formula "1") (term "0,0,0"))
                  (rule "nnf_imp2or" (formula "1") (term "1,0,0,0"))
                  (rule "nnf_notAnd" (formula "1") (term "0,0,0,0"))
                   (builtin "One Step Simplification" (formula "1"))
                  (rule "nnf_notAnd" (formula "1") (term "0,1,0,0,0"))
                   (builtin "One Step Simplification" (formula "1"))
                  (rule "nnf_notOr" (formula "1") (term "0,0,0,0,0"))
                  (rule "nnf_notOr" (formula "1") (term "1,0,0,0,0,0"))
                  (rule "nnf_notOr" (formula "1") (term "0,1,0,0,0,0,0"))
                  (rule "Class_axiom_0_in_de_polyas_core3_open_cred_CredTool" (inst "seq=seq") (inst "i=i") (inst "str=str") (inst "seq_0=seq_0") (inst "i_0=i_0") (inst "sv_heap=anon(heapAtPre_B<<anonHeapFunction>>,
     empty,
     anon_heap_mod<<anonHeapFunction>>)"))
                   (builtin "One Step Simplification" (formula "1"))
                  (rule "andLeft" (formula "1"))
                  (rule "castedGetAny" (formula "2") (term "0,1,1,0,0,0"))
                  (rule "castedGetAny" (formula "1") (term "0,0,1,0,0"))
                  (rule "castedGetAny" (formula "1") (term "0,0,0,0,0"))
                  (rule "nnf_imp2or" (formula "1") (term "0,0"))
                   (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "7")))
                  (rule "true_left" (formula "1"))
                  (rule "nnf_imp2or" (formula "1") (term "0,0,0"))
                  (rule "nnf_notAnd" (formula "1") (term "0,0,0,0"))
                   (builtin "One Step Simplification" (formula "1"))
                  (rule "nnf_imp2or" (formula "1") (term "1,0,0,0"))
                  (rule "nnf_notOr" (formula "1") (term "0,0,0,0,0"))
                  (rule "nnf_notAnd" (formula "1") (term "0,1,0,0,0"))
                   (builtin "One Step Simplification" (formula "1"))
                  (rule "nnf_notOr" (formula "1") (term "1,0,0,0,0,0"))
                  (rule "Class_axiom_0_in_de_polyas_core3_open_cred_CredTool" (inst "seq=seq") (inst "i=i") (inst "str=str") (inst "seq_0=seq_0") (inst "i_0=i_0") (inst "sv_heap=heapAfter_mod_B_0"))
                  (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "1,0,0,0,0,0,1") (ifseqformula "67"))
                  (rule "andLeft" (formula "1"))
                  (rule "castedGetAny" (formula "2") (term "0,1,1,0,0,0"))
                  (rule "castedGetAny" (formula "1") (term "0,0,1,0,0"))
                  (rule "castedGetAny" (formula "1") (term "0,0,0,0,0"))
                  (rule "nnf_imp2or" (formula "1") (term "0,0"))
                   (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "8")))
                  (rule "true_left" (formula "1"))
                  (rule "nnf_imp2or" (formula "1") (term "0,0,0"))
                  (rule "nnf_notAnd" (formula "1") (term "0,0,0,0"))
                   (builtin "One Step Simplification" (formula "1"))
                  (rule "nnf_imp2or" (formula "1") (term "1,0,0,0"))
                  (rule "nnf_notOr" (formula "1") (term "0,0,0,0,0"))
                  (rule "nnf_notAnd" (formula "1") (term "0,1,0,0,0"))
                   (builtin "One Step Simplification" (formula "1"))
                  (rule "nnf_notOr" (formula "1") (term "1,0,0,0,0,0"))
                  (rule "Class_axiom_0_in_de_polyas_core3_open_cred_CredTool" (inst "seq=seq") (inst "i=i") (inst "str=str") (inst "seq_0=seq_0") (inst "i_0=i_0") (inst "sv_heap=anon(heapAfter_mod_B_0,
     empty,
     anon_heap_multiply<<anonHeapFunction>>)"))
                   (builtin "One Step Simplification" (formula "1"))
                  (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,1,0,0,0,0,0,1") (ifseqformula "67"))
                  (rule "andLeft" (formula "1"))
                  (rule "castedGetAny" (formula "2") (term "0,1,1,0,0,0"))
                  (rule "castedGetAny" (formula "1") (term "0,0,1,0,0"))
                  (rule "castedGetAny" (formula "1") (term "0,0,0,0,0"))
                  (rule "nnf_imp2or" (formula "1") (term "0,0"))
                   (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "8")))
                  (rule "true_left" (formula "1"))
                  (rule "nnf_imp2or" (formula "1") (term "0,0,0"))
                  (rule "nnf_imp2or" (formula "1") (term "1,0,0,0"))
                  (rule "nnf_notAnd" (formula "1") (term "0,0,0,0"))
                   (builtin "One Step Simplification" (formula "1"))
                  (rule "nnf_notAnd" (formula "1") (term "0,1,0,0,0"))
                   (builtin "One Step Simplification" (formula "1"))
                  (rule "nnf_notOr" (formula "1") (term "0,0,0,0,0"))
                  (rule "nnf_notOr" (formula "1") (term "1,0,0,0,0,0"))
                  (rule "nnf_notOr" (formula "1") (term "0,1,0,0,0,0,0"))
                  (rule "Class_axiom_0_in_de_polyas_core3_open_cred_CredTool" (inst "seq=seq") (inst "i=i") (inst "str=str") (inst "seq_0=seq_0") (inst "i_0=i_0") (inst "sv_heap=heapAfter_multiply_B_1"))
                  (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "1,0,0,0,0,0,1") (ifseqformula "75"))
                  (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,1,0,0,0,0,0,1") (ifseqformula "68"))
                  (rule "andLeft" (formula "1"))
                  (rule "castedGetAny" (formula "1") (term "0,0,0,0,0"))
                  (rule "castedGetAny" (formula "1") (term "0,0,1,0,0"))
                  (rule "castedGetAny" (formula "2") (term "0,1,1,0,0,0"))
                  (rule "nnf_imp2or" (formula "1") (term "0,0"))
                   (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "9")))
                  (rule "true_left" (formula "1"))
                  (rule "nnf_imp2or" (formula "1") (term "0,0,0"))
                  (rule "nnf_notAnd" (formula "1") (term "0,0,0,0"))
                   (builtin "One Step Simplification" (formula "1"))
                  (rule "nnf_imp2or" (formula "1") (term "1,0,0,0"))
                  (rule "nnf_notOr" (formula "1") (term "0,0,0,0,0"))
                  (rule "nnf_notAnd" (formula "1") (term "0,1,0,0,0"))
                   (builtin "One Step Simplification" (formula "1"))
                  (rule "nnf_notOr" (formula "1") (term "1,0,0,0,0,0"))
                  (rule "nnf_notOr" (formula "1") (term "0,1,0,0,0,0,0"))
                  (rule "Class_axiom_0_in_de_polyas_core3_open_cred_CredTool" (inst "seq=seq") (inst "i=i") (inst "str=str") (inst "seq_0=seq_0") (inst "i_0=i_0") (inst "sv_heap=heapAtPost_B"))
                  (rule "andLeft" (formula "1"))
                  (rule "castedGetAny" (formula "1") (term "0,0,0,0,0"))
                  (rule "castedGetAny" (formula "1") (term "0,0,1,0,0"))
                  (rule "castedGetAny" (formula "2") (term "0,1,1,0,0,0"))
                  (rule "applyEq" (formula "2") (term "0,0,1,0,0,0,0,0") (ifseqformula "83"))
                  (rule "selectCreatedOfAnonAsFormulaEQ" (formula "2") (term "1,0,0,0,0,0") (ifseqformula "76"))
                  (rule "selectCreatedOfAnonAsFormulaEQ" (formula "2") (term "0,1,0,0,0,0,0") (ifseqformula "69"))
                  (rule "nnf_imp2or" (formula "1") (term "0,0"))
                   (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "9")))
                  (rule "true_left" (formula "1"))
                  (rule "nnf_imp2or" (formula "1") (term "0,0,0"))
                  (rule "nnf_notAnd" (formula "1") (term "0,0,0,0"))
                   (builtin "One Step Simplification" (formula "1"))
                  (rule "nnf_imp2or" (formula "1") (term "1,0,0,0"))
                  (rule "nnf_notOr" (formula "1") (term "0,0,0,0,0"))
                  (rule "nnf_notAnd" (formula "1") (term "0,1,0,0,0"))
                   (builtin "One Step Simplification" (formula "1"))
                  (rule "nnf_notOr" (formula "1") (term "1,0,0,0,0,0"))
                  (rule "nnf_notOr" (formula "1") (term "0,1,0,0,0,0,0"))
                  (rule "div_axiom" (formula "34") (term "0,1") (inst "quotient=quotient_0"))
                  (rule "polySimp_mulComm0" (formula "34") (term "0,2,1,1"))
                  (rule "polySimp_mulComm0" (formula "34") (term "1,1,1,1,1"))
                  (rule "polySimp_mulComm0" (formula "34") (term "0,1,0,1"))
                  (rule "polySimp_mulComm0" (formula "34") (term "0,1,1,1"))
                  (rule "commute_or" (formula "4") (term "0,0,0,0"))
                  (rule "shift_paren_or" (formula "5") (term "0,0,0,0"))
                  (rule "commute_and" (formula "6") (term "1,0,0,0"))
                  (rule "shift_paren_or" (formula "6") (term "0,0,0,0,0"))
                  (rule "commute_or" (formula "4") (term "0,1,0,0,0"))
                  (rule "commute_and" (formula "5") (term "1,0,0,0"))
                  (rule "ifthenelse_split" (formula "9") (term "0"))
                  (branch " resultAtPost_226_A.<created>@anon_heap_mod«anonHeapFunction» = TRUE TRUE"
                     (rule "applyEqReverse" (formula "106") (term "1") (ifseqformula "10"))
                     (rule "hideAuxiliaryEq" (formula "10"))
                     (rule "replace_known_left" (formula "42") (term "0") (ifseqformula "9"))
                      (builtin "One Step Simplification" (formula "42"))
                     (rule "true_left" (formula "42"))
                     (rule "commute_or" (formula "3") (term "0,0,0,0"))
                     (rule "commute_or" (formula "3") (term "0,1,0,0,0"))
                     (rule "commute_or" (formula "2") (term "0,0,0,0"))
                     (rule "onlyCreatedObjectsAreReferenced" (formula "31") (term "2") (ifseqformula "22"))
                     (rule "replace_known_left" (formula "31") (term "1") (ifseqformula "16"))
                      (builtin "One Step Simplification" (formula "31") (ifInst ""  (formula "95")))
                     (rule "true_left" (formula "31"))
                     (rule "onlyCreatedObjectsAreReferenced" (formula "14") (term "1,1,0") (ifseqformula "22"))
                     (rule "replace_known_left" (formula "14") (term "1") (ifseqformula "16"))
                      (builtin "One Step Simplification" (formula "14") (ifInst ""  (formula "93")))
                     (rule "true_left" (formula "14"))
                     (rule "onlyCreatedObjectsAreReferenced" (formula "49") (term "1,0") (ifseqformula "56"))
                     (rule "replace_known_left" (formula "49") (term "1") (ifseqformula "50"))
                      (builtin "One Step Simplification" (formula "49") (ifInst ""  (formula "94")))
                     (rule "true_left" (formula "49"))
                     (rule "onlyCreatedObjectsAreReferenced" (formula "48") (term "1,0") (ifseqformula "56"))
                     (rule "replace_known_left" (formula "48") (term "1") (ifseqformula "49"))
                      (builtin "One Step Simplification" (formula "48") (ifInst ""  (formula "92")))
                     (rule "true_left" (formula "48"))
                     (rule "onlyCreatedObjectsAreReferenced" (formula "14") (term "1,0") (ifseqformula "22"))
                     (rule "replace_known_left" (formula "14") (term "1") (ifseqformula "15"))
                      (builtin "One Step Simplification" (formula "14") (ifInst ""  (formula "91")))
                     (rule "true_left" (formula "14"))
                     (rule "onlyCreatedObjectsAreReferenced" (formula "97") (term "0") (ifseqformula "56"))
                     (rule "replace_known_left" (formula "1") (term "1") (ifseqformula "62"))
                      (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "98")))
                     (rule "true_left" (formula "1"))
                     (rule "onlyCreatedObjectsAreReferenced" (formula "27") (term "1,0") (ifseqformula "22"))
                     (rule "replace_known_left" (formula "27") (term "1") (ifseqformula "28"))
                      (builtin "One Step Simplification" (formula "27") (ifInst ""  (formula "97")))
                     (rule "true_left" (formula "27"))
                     (rule "onlyCreatedObjectsAreReferenced" (formula "65") (term "2") (ifseqformula "56"))
                     (rule "replace_known_left" (formula "65") (term "1") (ifseqformula "50"))
                      (builtin "One Step Simplification" (formula "65") (ifInst ""  (formula "96")))
                     (rule "true_left" (formula "65"))
                     (rule "commute_or" (formula "2") (term "0,1,0,0,0"))
                     (rule "commute_or" (formula "1") (term "0,0,0,0"))
                     (rule "commute_or" (formula "1") (term "0,1,0,0,0"))
                     (rule "commute_or_2" (formula "4") (term "0,0,0"))
                     (rule "commute_or_2" (formula "3") (term "0,0,0"))
                     (rule "commute_and" (formula "34") (term "0,1"))
                     (rule "commute_or_2" (formula "6") (term "0,0,0,0,0"))
                      (builtin "One Step Simplification" (formula "6"))
                     (rule "commute_or_2" (formula "2") (term "0,0,0"))
                     (rule "commute_or_2" (formula "1") (term "0,0,0"))
                     (rule "commute_or" (formula "5") (term "1,0,0,0,0,0"))
                     (rule "commute_or_2" (formula "6") (term "0,0,0,0"))
                     (rule "shift_paren_or" (formula "4") (term "0,0,0,0"))
                     (rule "shift_paren_or" (formula "3") (term "0,0,0,0"))
                     (rule "commute_or_2" (formula "2") (term "1,0,0,0,0"))
                     (rule "shift_paren_or" (formula "1") (term "0,0,0,0"))
                     (rule "shift_paren_or" (formula "2") (term "0,0,0,0"))
                     (rule "cnf_rightDist" (formula "6") (term "0,0,0"))
                     (rule "distr_forallAnd" (formula "6") (term "0,0"))
                     (rule "distr_forallAnd" (formula "6") (term "0"))
                     (rule "distr_forallAnd" (formula "6"))
                     (rule "andLeft" (formula "6"))
                     (rule "commute_or_2" (formula "6") (term "0,0,0"))
                      (builtin "One Step Simplification" (formula "6"))
                     (rule "eqSymm" (formula "6") (term "1,0,0,0,0"))
                     (rule "castedGetAny" (formula "6") (term "0,0,0,0,0,0"))
                     (rule "castedGetAny" (formula "6") (term "1,0,0,1,0,0,0"))
                     (rule "castedGetAny" (formula "6") (term "0,1,0,0,0,0"))
                      (builtin "One Step Simplification" (formula "6"))
                     (rule "true_left" (formula "6"))
                     (rule "shift_paren_or" (formula "6") (term "0,0,0"))
                      (builtin "One Step Simplification" (formula "6"))
                     (rule "eqSymm" (formula "6") (term "1,1,0,0,0"))
                     (rule "castedGetAny" (formula "6") (term "0,0,1,0,0,0"))
                     (rule "castedGetAny" (formula "6") (term "0,0,0,0,0,0"))
                     (rule "castedGetAny" (formula "6") (term "0,1,1,0,0,0"))
                      (builtin "One Step Simplification" (formula "6"))
                     (rule "true_left" (formula "6"))
                     (rule "commute_and" (formula "4") (term "1,0,0,0"))
                     (rule "commute_and" (formula "3") (term "1,0,0,0"))
                     (rule "commute_and" (formula "2") (term "1,0,0,0"))
                     (rule "commute_and" (formula "1") (term "1,0,0,0"))
                     (rule "shift_paren_or" (formula "5") (term "0,0,0,0,0"))
                      (builtin "One Step Simplification" (formula "5"))
                     (rule "commute_or_2" (formula "5") (term "0,0,0,0"))
                     (rule "shift_paren_or" (formula "4") (term "0,0,0,0,0"))
                      (builtin "One Step Simplification" (formula "4"))
                     (rule "commute_or_2" (formula "4") (term "0,0,0,0"))
                     (rule "shift_paren_or" (formula "3") (term "0,0,0,0,0"))
                      (builtin "One Step Simplification" (formula "3"))
                     (rule "commute_or_2" (formula "3") (term "0,0,0,0"))
                     (rule "shift_paren_or" (formula "1") (term "0,0,0,0,0"))
                      (builtin "One Step Simplification" (formula "1"))
                     (rule "commute_or_2" (formula "1") (term "0,0,0,0"))
                     (rule "shift_paren_or" (formula "2") (term "0,0,0,0,0"))
                      (builtin "One Step Simplification" (formula "2"))
                     (rule "cnf_rightDist" (formula "5") (term "0,0,0"))
                     (rule "distr_forallAnd" (formula "5") (term "0,0"))
                     (rule "distr_forallAnd" (formula "5") (term "0"))
                     (rule "distr_forallAnd" (formula "5"))
                     (rule "andLeft" (formula "5"))
                     (rule "commute_or_2" (formula "5") (term "0,0,0"))
                      (builtin "One Step Simplification" (formula "5"))
                     (rule "eqSymm" (formula "5") (term "1,0,0,0,0"))
                     (rule "castedGetAny" (formula "5") (term "1,0,0,1,0,0,0"))
                     (rule "castedGetAny" (formula "5") (term "0,0,0,0,0,0"))
                     (rule "castedGetAny" (formula "5") (term "0,1,0,0,0,0"))
                      (builtin "One Step Simplification" (formula "5"))
                     (rule "true_left" (formula "5"))
                     (rule "shift_paren_or" (formula "5") (term "0,0,0"))
                      (builtin "One Step Simplification" (formula "5"))
                     (rule "eqSymm" (formula "5") (term "1,1,0,0,0"))
                     (rule "castedGetAny" (formula "5") (term "0,0,0,0,0,0"))
                     (rule "castedGetAny" (formula "5") (term "0,0,1,0,0,0"))
                     (rule "castedGetAny" (formula "5") (term "0,1,1,0,0,0"))
                      (builtin "One Step Simplification" (formula "5"))
                     (rule "true_left" (formula "5"))
                     (rule "cnf_rightDist" (formula "4") (term "0,0,0"))
                     (rule "distr_forallAnd" (formula "4") (term "0,0"))
                     (rule "distr_forallAnd" (formula "4") (term "0"))
                     (rule "distr_forallAnd" (formula "4"))
                     (rule "andLeft" (formula "4"))
                     (rule "cnf_rightDist" (formula "3") (term "0,0,0"))
                     (rule "distr_forallAnd" (formula "3") (term "0,0"))
                     (rule "distr_forallAnd" (formula "3") (term "0"))
                     (rule "distr_forallAnd" (formula "3"))
                     (rule "andLeft" (formula "3"))
                     (rule "shift_paren_or" (formula "5") (term "0,0,0"))
                      (builtin "One Step Simplification" (formula "5"))
                     (rule "eqSymm" (formula "5") (term "1,1,0,0,0"))
                     (rule "castedGetAny" (formula "5") (term "0,0,0,0,0,0"))
                     (rule "castedGetAny" (formula "5") (term "0,0,1,0,0,0"))
                     (rule "castedGetAny" (formula "5") (term "0,1,1,0,0,0"))
                      (builtin "One Step Simplification" (formula "5"))
                     (rule "true_left" (formula "5"))
                     (rule "cnf_rightDist" (formula "1") (term "0,0,0"))
                     (rule "distr_forallAnd" (formula "1") (term "0,0"))
                     (rule "distr_forallAnd" (formula "1") (term "0"))
                     (rule "distr_forallAnd" (formula "1"))
                     (rule "andLeft" (formula "1"))
                     (rule "cnf_rightDist" (formula "3") (term "0,0,0"))
                     (rule "distr_forallAnd" (formula "3") (term "0,0"))
                     (rule "distr_forallAnd" (formula "3") (term "0"))
                     (rule "distr_forallAnd" (formula "3"))
                     (rule "andLeft" (formula "3"))
                     (rule "shift_paren_or" (formula "2") (term "0,0,0"))
                      (builtin "One Step Simplification" (formula "2"))
                     (rule "eqSymm" (formula "2") (term "1,1,0,0,0"))
                     (rule "castedGetAny" (formula "2") (term "0,0,0,0,0,0"))
                     (rule "castedGetAny" (formula "2") (term "0,0,1,0,0,0"))
                     (rule "castedGetAny" (formula "2") (term "0,1,1,0,0,0"))
                      (builtin "One Step Simplification" (formula "2"))
                     (rule "true_left" (formula "2"))
                     (rule "cnf_rightDist" (formula "4") (term "0,0,0"))
                     (rule "distr_forallAnd" (formula "4") (term "0,0"))
                     (rule "distr_forallAnd" (formula "4") (term "0"))
                     (rule "distr_forallAnd" (formula "4"))
                     (rule "andLeft" (formula "4"))
                     (rule "commute_or_2" (formula "4") (term "0,0,0"))
                      (builtin "One Step Simplification" (formula "4"))
                     (rule "eqSymm" (formula "4") (term "1,0,0,0,0"))
                     (rule "castedGetAny" (formula "4") (term "1,0,0,1,0,0,0"))
                     (rule "castedGetAny" (formula "4") (term "0,0,0,0,0,0"))
                     (rule "castedGetAny" (formula "4") (term "0,1,0,0,0,0"))
                      (builtin "One Step Simplification" (formula "4"))
                     (rule "true_left" (formula "4"))
                     (rule "cnf_rightDist" (formula "3") (term "0,0,0"))
                     (rule "distr_forallAnd" (formula "3") (term "0,0"))
                     (rule "distr_forallAnd" (formula "3") (term "0"))
                     (rule "distr_forallAnd" (formula "3"))
                     (rule "andLeft" (formula "3"))
                     (rule "shift_paren_or" (formula "5") (term "0,0,0"))
                      (builtin "One Step Simplification" (formula "5"))
                     (rule "eqSymm" (formula "5") (term "1,1,0,0,0"))
                     (rule "castedGetAny" (formula "5") (term "1,0,0,0,0,0,0"))
                     (rule "castedGetAny" (formula "5") (term "0,0,1,0,0,0"))
                     (rule "castedGetAny" (formula "5") (term "0,1,1,0,0,0"))
                      (builtin "One Step Simplification" (formula "5"))
                     (rule "true_left" (formula "5"))
                     (rule "cnf_rightDist" (formula "1") (term "0,0,0"))
                     (rule "distr_forallAnd" (formula "1") (term "0,0"))
                     (rule "distr_forallAnd" (formula "1") (term "0"))
                     (rule "distr_forallAnd" (formula "1"))
                     (rule "andLeft" (formula "1"))
                     (rule "shift_paren_or" (formula "3") (term "0,0,0"))
                      (builtin "One Step Simplification" (formula "3"))
                     (rule "eqSymm" (formula "3") (term "1,1,0,0,0"))
                     (rule "castedGetAny" (formula "3") (term "0,0,1,0,0,0"))
                     (rule "castedGetAny" (formula "3") (term "1,0,0,0,0,0,0"))
                     (rule "castedGetAny" (formula "3") (term "0,1,1,0,0,0"))
                      (builtin "One Step Simplification" (formula "3"))
                     (rule "true_left" (formula "3"))
                     (rule "cnf_rightDist" (formula "1") (term "0,0,0"))
                     (rule "distr_forallAnd" (formula "1") (term "0,0"))
                     (rule "distr_forallAnd" (formula "1") (term "0"))
                     (rule "distr_forallAnd" (formula "1"))
                     (rule "andLeft" (formula "1"))
                     (rule "commute_or_2" (formula "1") (term "0,0,0"))
                      (builtin "One Step Simplification" (formula "1"))
                     (rule "eqSymm" (formula "1") (term "1,0,0,0,0"))
                     (rule "castedGetAny" (formula "1") (term "1,0,0,1,0,0,0"))
                     (rule "castedGetAny" (formula "1") (term "0,0,0,0,0,0"))
                     (rule "castedGetAny" (formula "1") (term "0,1,0,0,0,0"))
                      (builtin "One Step Simplification" (formula "1"))
                     (rule "true_left" (formula "1"))
                     (rule "ifthenelse_split_for" (formula "30") (term "1,1"))
                     (branch "result_228_A_1.value@heapAtPre_A«anonHeapFunction» ≥ 0 TRUE"
                        (rule "cnf_rightDist" (formula "31"))
                        (rule "andLeft" (formula "31"))
                        (rule "commute_or" (formula "32"))
                        (rule "cnf_rightDist" (formula "31"))
                        (rule "andLeft" (formula "31"))
                        (rule "commute_or" (formula "32"))
                        (rule "shift_paren_or" (formula "1") (term "0,0,0"))
                         (builtin "One Step Simplification" (formula "1"))
                        (rule "eqSymm" (formula "1") (term "1,1,0,0,0"))
                        (rule "castedGetAny" (formula "1") (term "0,0,1,0,0,0"))
                        (rule "castedGetAny" (formula "1") (term "1,0,0,0,0,0,0"))
                        (rule "castedGetAny" (formula "1") (term "0,1,1,0,0,0"))
                         (builtin "One Step Simplification" (formula "1"))
                        (rule "true_left" (formula "1"))
                        (rule "cnf_rightDist" (formula "1") (term "0,0,0"))
                        (rule "distr_forallAnd" (formula "1") (term "0,0"))
                        (rule "distr_forallAnd" (formula "1") (term "0"))
                        (rule "distr_forallAnd" (formula "1"))
                        (rule "andLeft" (formula "1"))
                        (rule "commute_or_2" (formula "1") (term "0,0,0"))
                         (builtin "One Step Simplification" (formula "1"))
                        (rule "eqSymm" (formula "1") (term "1,0,0,0,0"))
                        (rule "castedGetAny" (formula "1") (term "0,0,0,0,0,0"))
                        (rule "castedGetAny" (formula "1") (term "1,0,0,1,0,0,0"))
                        (rule "castedGetAny" (formula "1") (term "0,1,0,0,0,0"))
                         (builtin "One Step Simplification" (formula "1"))
                        (rule "true_left" (formula "1"))
                        (rule "shift_paren_or" (formula "1") (term "0,0,0"))
                         (builtin "One Step Simplification" (formula "1"))
                        (rule "eqSymm" (formula "1") (term "1,1,0,0,0"))
                        (rule "castedGetAny" (formula "1") (term "1,0,0,0,0,0,0"))
                        (rule "castedGetAny" (formula "1") (term "0,0,1,0,0,0"))
                        (rule "castedGetAny" (formula "1") (term "0,1,1,0,0,0"))
                         (builtin "One Step Simplification" (formula "1"))
                        (rule "true_left" (formula "1"))
                        (rule "cut_direct" (formula "29") (term "0"))
                        (branch "CUT: result_228_A_1.value@heapAtPre_A«anonHeapFunction» = 0 TRUE"
                            (builtin "One Step Simplification" (formula "30"))
                           (rule "true_left" (formula "30"))
                           (rule "replace_known_left" (formula "31") (term "0") (ifseqformula "29"))
                            (builtin "One Step Simplification" (formula "31"))
                           (rule "true_left" (formula "31"))
                           (rule "replace_known_left" (formula "30") (term "0") (ifseqformula "29"))
                            (builtin "One Step Simplification" (formula "30"))
                           (rule "true_left" (formula "30"))
                           (rule "applyEq" (formula "31") (term "1,0") (ifseqformula "29"))
                           (rule "times_zero_1" (formula "31") (term "0"))
                           (rule "polySimp_homoEq" (formula "31"))
                           (rule "mul_literals" (formula "31") (term "1,0"))
                           (rule "add_zero_right" (formula "31") (term "0"))
                           (rule "applyEq" (formula "28") (term "0") (ifseqformula "29"))
                           (rule "qeq_literals" (formula "28"))
                           (rule "true_left" (formula "28"))
                           (rule "applyEq" (formula "29") (term "1,0") (ifseqformula "28"))
                           (rule "eqSymm" (formula "29"))
                           (rule "polySimp_homoEq" (formula "29"))
                           (rule "polySimp_mulLiterals" (formula "29") (term "1,0"))
                           (rule "polySimp_elimOne" (formula "29") (term "1,0"))
                           (rule "applyEq" (formula "57") (term "1") (ifseqformula "28"))
                           (rule "applyEq" (formula "7") (term "1") (ifseqformula "28"))
                           (rule "applyEq" (formula "23") (term "1") (ifseqformula "28"))
                           (rule "applyEq" (formula "29") (term "1,1,0") (ifseqformula "28"))
                           (rule "polySimp_addComm0" (formula "29") (term "0"))
                           (rule "polySimp_sepNegMonomial" (formula "30"))
                           (rule "polySimp_mulLiterals" (formula "30") (term "0"))
                           (rule "polySimp_elimOne" (formula "30") (term "0"))
                           (rule "applyEq" (formula "4") (term "0") (ifseqformula "30"))
                           (rule "applyEq" (formula "29") (term "0,1,0") (ifseqformula "30"))
                           (rule "polySimp_addComm0" (formula "29") (term "0"))
                           (rule "applyEq" (formula "29") (term "0,0,1,0") (ifseqformula "30"))
                           (rule "polySimp_addComm0" (formula "29") (term "0"))
                           (rule "applyEq" (formula "6") (term "1") (ifseqformula "30"))
                           (rule "polySimp_sepPosMonomial" (formula "29"))
                           (rule "jdiv_axiom" (formula "29") (term "0"))
                           (rule "eqSymm" (formula "29"))
                           (rule "applyEq" (formula "29") (term "1") (ifseqformula "30"))
                            (builtin "One Step Simplification" (formula "29"))
                           (rule "eqSymm" (formula "29") (term "1"))
                           (rule "polySimp_homoEq" (formula "29") (term "1"))
                           (rule "polySimp_mulLiterals" (formula "29") (term "1,0,1"))
                           (rule "polySimp_elimOne" (formula "29") (term "1,0,1"))
                           (rule "polySimp_sepPosMonomial" (formula "29") (term "1"))
                           (rule "inEqSimp_contradInEq0" (formula "29") (term "0,0") (ifseqformula "4"))
                           (rule "qeq_literals" (formula "29") (term "0,0,0"))
                            (builtin "One Step Simplification" (formula "29"))
                           (rule "true_left" (formula "29"))
                           (rule "div_axiom" (formula "29") (term "0,1") (inst "quotient=quotient_1"))
                            (builtin "One Step Simplification" (formula "29"))
                           (rule "true_left" (formula "29"))
                           (rule "Use_information_flow_contract_for_compareTo_325434207" (formula "19") (ifseqformula "19"))
                            (builtin "One Step Simplification" (formula "19") (ifInst ""  (formula "91")) (ifInst ""  (formula "91")))
                           (rule "true_left" (formula "19"))
                           (rule "Use_information_flow_contract_for_getOrder_757678341" (formula "59") (ifseqformula "25"))
                           (rule "applyEq" (formula "59") (term "0,0,1") (ifseqformula "57"))
                           (rule "eqSymm" (formula "59") (term "0,1"))
                           (rule "replace_known_left" (formula "59") (term "0,1") (ifseqformula "23"))
                            (builtin "One Step Simplification" (formula "59"))
                           (rule "applyEq" (formula "59") (term "0,1") (ifseqformula "7"))
                           (rule "eqSymm" (formula "59") (term "1"))
                           (rule "replace_known_left" (formula "59") (term "1") (ifseqformula "28"))
                            (builtin "One Step Simplification" (formula "59"))
                           (rule "true_left" (formula "59"))
                           (rule "Use_information_flow_contract_for_multiply_1272441881" (formula "70") (ifseqformula "36"))
                           (rule "replaceKnownSelect_taclet21_11" (formula "70") (term "1,1,1"))
                           (rule "replaceKnownSelect_taclet21_12" (formula "70") (term "0,1,1"))
                           (rule "replaceKnownAuxiliaryConstant_taclet0010121_19" (formula "70") (term "1,1,1"))
                           (rule "replaceKnownAuxiliaryConstant_taclet010121_18" (formula "70") (term "0,1,1"))
                           (rule "replaceKnownSelect_taclet21_8" (formula "70") (term "1,1,0,1"))
                           (rule "replaceKnownSelect_taclet21_9" (formula "70") (term "0,1,0,1"))
                           (rule "replaceKnownAuxiliaryConstant_taclet21_10" (formula "70") (term "1,1,0,1"))
                            (builtin "One Step Simplification" (formula "70") (ifInst ""  (formula "82")) (ifInst ""  (formula "81")) (ifInst ""  (formula "99")))
                           (rule "pullOutSelect" (formula "70") (term "1,0,1") (inst "selectSK=org_bouncycastle_math_ec_ECPoint_value_4"))
                           (rule "simplifySelectOfAnonEQ" (formula "70") (ifseqformula "26"))
                            (builtin "One Step Simplification" (formula "70") (ifInst ""  (formula "96")) (ifInst ""  (formula "14")))
                           (rule "applyEqReverse" (formula "71") (term "1,0,1") (ifseqformula "70"))
                           (rule "hideAuxiliaryEq" (formula "70"))
                           (rule "pullOutSelect" (formula "70") (term "0,0,1") (inst "selectSK=org_bouncycastle_math_ec_ECPoint_value_5"))
                           (rule "simplifySelectOfAnonEQ" (formula "70") (ifseqformula "61"))
                            (builtin "One Step Simplification" (formula "70") (ifInst ""  (formula "97")) (ifInst ""  (formula "48")))
                           (rule "applyEqReverse" (formula "71") (term "0,0,1") (ifseqformula "70"))
                           (rule "hideAuxiliaryEq" (formula "70"))
                           (rule "replace_known_left" (formula "70") (term "0,1") (ifseqformula "5"))
                            (builtin "One Step Simplification" (formula "70"))
                           (rule "notLeft" (formula "70"))
                           (rule "Class_invariant_axiom_for_org_bouncycastle_math_ec_ECPoint" (formula "76") (term "1"))
                            (builtin "One Step Simplification" (formula "76"))
                           (rule "Class_invariant_axiom_for_org_bouncycastle_math_ec_ECPoint" (formula "76"))
                           (rule "closeTrue" (formula "76"))
                        )
                        (branch "CUT: result_228_A_1.value@heapAtPre_A«anonHeapFunction» = 0 FALSE"
                            (builtin "One Step Simplification" (formula "29"))
                           (rule "replace_known_right" (formula "30") (term "0") (ifseqformula "79"))
                            (builtin "One Step Simplification" (formula "30"))
                           (rule "replace_known_right" (formula "31") (term "0") (ifseqformula "79"))
                            (builtin "One Step Simplification" (formula "31"))
                           (rule "applyEq" (formula "33") (term "0,0") (ifseqformula "30"))
                           (rule "polySimp_mulComm0" (formula "33") (term "0"))
                           (rule "applyEq" (formula "29") (term "0") (ifseqformula "33"))
                           (rule "inEqSimp_homoInEq0" (formula "29"))
                           (rule "polySimp_mulComm0" (formula "29") (term "1,0"))
                           (rule "polySimp_rightDist" (formula "29") (term "1,0"))
                           (rule "polySimp_mulLiterals" (formula "29") (term "1,1,0"))
                           (rule "polySimp_elimOne" (formula "29") (term "1,1,0"))
                           (rule "polySimp_mulComm0" (formula "29") (term "0,1,0"))
                           (rule "polySimp_addAssoc" (formula "29") (term "0"))
                           (rule "polySimp_addComm0" (formula "29") (term "0,0"))
                           (rule "polySimp_pullOutFactor2b" (formula "29") (term "0"))
                           (rule "add_literals" (formula "29") (term "1,1,0"))
                           (rule "times_zero_1" (formula "29") (term "1,0"))
                           (rule "add_zero_right" (formula "29") (term "0"))
                           (rule "applyEq" (formula "31") (term "0") (ifseqformula "33"))
                           (rule "inEqSimp_homoInEq1" (formula "31"))
                           (rule "polySimp_mulComm0" (formula "31") (term "1,0"))
                           (rule "polySimp_rightDist" (formula "31") (term "1,0"))
                           (rule "polySimp_mulLiterals" (formula "31") (term "1,1,0"))
                           (rule "polySimp_elimOne" (formula "31") (term "1,1,0"))
                           (rule "polySimp_mulComm0" (formula "31") (term "0,1,0"))
                           (rule "polySimp_addComm1" (formula "31") (term "0"))
                           (rule "polySimp_addAssoc" (formula "31") (term "0,0"))
                           (rule "polySimp_addComm1" (formula "31") (term "0,0,0"))
                           (rule "polySimp_pullOutFactor2b" (formula "31") (term "0,0"))
                           (rule "add_literals" (formula "31") (term "1,1,0,0"))
                           (rule "times_zero_1" (formula "31") (term "1,0,0"))
                           (rule "add_zero_right" (formula "31") (term "0,0"))
                           (rule "applyEq" (formula "32") (term "0,1") (ifseqformula "30"))
                           (rule "inEqSimp_invertInEq1" (formula "29"))
                           (rule "polySimp_mulLiterals" (formula "29") (term "0"))
                           (rule "times_zero_2" (formula "29") (term "1"))
                           (rule "polySimp_elimOne" (formula "29") (term "0"))
                           (rule "inEqSimp_sepNegMonomial0" (formula "31"))
                           (rule "polySimp_mulLiterals" (formula "31") (term "0"))
                           (rule "polySimp_elimOne" (formula "31") (term "0"))
                           (rule "inEqSimp_strengthen1" (formula "28") (ifseqformula "79"))
                           (rule "add_literals" (formula "28") (term "1"))
                           (rule "inEqSimp_contradEq7" (formula "79") (ifseqformula "28"))
                           (rule "times_zero_1" (formula "79") (term "1,0,0"))
                           (rule "add_literals" (formula "79") (term "0,0"))
                           (rule "leq_literals" (formula "79") (term "0"))
                            (builtin "One Step Simplification" (formula "79"))
                           (rule "false_right" (formula "79"))
                           (rule "Use_information_flow_contract_for_compareTo_325434207" (formula "19") (ifseqformula "19"))
                            (builtin "One Step Simplification" (formula "19") (ifInst ""  (formula "94")) (ifInst ""  (formula "94")))
                           (rule "true_left" (formula "19"))
                           (rule "Use_information_flow_contract_for_getOrder_757678341" (formula "62") (ifseqformula "25"))
                           (rule "replace_known_left" (formula "62") (term "1,1") (ifseqformula "7"))
                            (builtin "One Step Simplification" (formula "62"))
                           (rule "true_left" (formula "62"))
                           (rule "Use_information_flow_contract_for_getOrder_757678341" (formula "62") (ifseqformula "62"))
                            (builtin "One Step Simplification" (formula "62"))
                           (rule "true_left" (formula "62"))
                           (rule "Use_information_flow_contract_for_compareTo_325434207" (formula "56") (ifseqformula "19"))
                           (rule "replace_known_left" (formula "56") (term "0,0,1") (ifseqformula "6"))
                            (builtin "One Step Simplification" (formula "56") (ifInst ""  (formula "95")) (ifInst ""  (formula "94")))
                           (rule "applyEq" (formula "56") (term "0,0,1") (ifseqformula "58"))
                           (rule "eqSymm" (formula "56") (term "0,1"))
                           (rule "replace_known_left" (formula "56") (term "0,1") (ifseqformula "20"))
                            (builtin "One Step Simplification" (formula "56"))
                           (rule "Class_invariant_axiom_for_java_math_BigInteger" (formula "56") (term "1,0"))
                           (rule "replace_known_right" (formula "56") (term "0,0,1,0") (ifseqformula "94"))
                            (builtin "One Step Simplification" (formula "56") (ifInst ""  (formula "20")))
                           (rule "Class_invariant_axiom_for_java_math_BigInteger" (formula "56") (term "0"))
                           (rule "replace_known_left" (formula "56") (term "1,0") (ifseqformula "58"))
                            (builtin "One Step Simplification" (formula "56") (ifInst ""  (formula "95")))
                           (rule "applyEq" (formula "55") (term "0") (ifseqformula "56"))
                           (rule "applyEq" (formula "56") (term "4") (ifseqformula "55"))
                           (rule "applyEq" (formula "48") (term "0") (ifseqformula "55"))
                           (rule "Use_information_flow_contract_for_getOrder_757678341" (formula "25") (ifseqformula "25"))
                            (builtin "One Step Simplification" (formula "25"))
                           (rule "true_left" (formula "25"))
                           (rule "Use_information_flow_contract_for_getOrder_757678341" (formula "25") (ifseqformula "61"))
                           (rule "eqSymm" (formula "25") (term "1,1"))
                           (rule "eqSymm" (formula "25") (term "0,1"))
                           (rule "replace_known_left" (formula "25") (term "1,1") (ifseqformula "7"))
                            (builtin "One Step Simplification" (formula "25"))
                           (rule "true_left" (formula "25"))
                           (rule "Use_information_flow_contract_for_multiply_1272441881" (formula "72") (ifseqformula "39"))
                           (rule "replaceKnownSelect_taclet21_12" (formula "72") (term "0,1,1"))
                           (rule "replaceKnownSelect_taclet21_11" (formula "72") (term "1,1,1"))
                           (rule "replaceKnownAuxiliaryConstant_taclet010121_18" (formula "72") (term "0,1,1"))
                           (rule "replaceKnownAuxiliaryConstant_taclet0010121_19" (formula "72") (term "1,1,1"))
                           (rule "replaceKnownSelect_taclet21_9" (formula "72") (term "0,1,0,1"))
                           (rule "replaceKnownSelect_taclet21_8" (formula "72") (term "1,1,0,1"))
                           (rule "replaceKnownAuxiliaryConstant_taclet121_15" (formula "72") (term "0,1,0,1"))
                           (rule "replaceKnownAuxiliaryConstant_taclet21_10" (formula "72") (term "1,1,0,1"))
                           (rule "replaceKnownAuxiliaryConstant_taclet121_15" (formula "72") (term "1,1,0,1"))
                            (builtin "One Step Simplification" (formula "72") (ifInst ""  (formula "84")) (ifInst ""  (formula "83")) (ifInst ""  (formula "101")))
                           (rule "pullOutSelect" (formula "72") (term "0,0,1") (inst "selectSK=org_bouncycastle_math_ec_ECPoint_value_4"))
                           (rule "simplifySelectOfAnonEQ" (formula "72") (ifseqformula "63"))
                            (builtin "One Step Simplification" (formula "72") (ifInst ""  (formula "99")) (ifInst ""  (formula "50")))
                           (rule "applyEqReverse" (formula "73") (term "0,0,1") (ifseqformula "72"))
                           (rule "hideAuxiliaryEq" (formula "72"))
                           (rule "eqSymm" (formula "72") (term "0,1"))
                           (rule "applyEq" (formula "72") (term "1,0,1") (ifseqformula "5"))
                           (rule "pullOutSelect" (formula "72") (term "0,0,1") (inst "selectSK=org_bouncycastle_math_ec_ECPoint_value_5"))
                           (rule "simplifySelectOfAnonEQ" (formula "72") (ifseqformula "26"))
                            (builtin "One Step Simplification" (formula "72") (ifInst ""  (formula "98")) (ifInst ""  (formula "14")))
                           (rule "applyEqReverse" (formula "73") (term "0,0,1") (ifseqformula "72"))
                            (builtin "One Step Simplification" (formula "73"))
                           (rule "notLeft" (formula "73"))
                           (rule "hideAuxiliaryEq" (formula "72"))
                           (rule "Class_invariant_axiom_for_org_bouncycastle_math_ec_ECPoint" (formula "78") (term "1"))
                            (builtin "One Step Simplification" (formula "78"))
                           (rule "Class_invariant_axiom_for_org_bouncycastle_math_ec_ECPoint" (formula "78"))
                           (rule "closeTrue" (formula "78"))
                        )
                     )
                     (branch "result_228_A_1.value@heapAtPre_A«anonHeapFunction» ≥ 0 FALSE"
                        (rule "inEqSimp_geqRight" (formula "78"))
                        (rule "mul_literals" (formula "1") (term "1,0,0"))
                        (rule "add_zero_right" (formula "1") (term "0,0"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "1"))
                        (rule "mul_literals" (formula "1") (term "1"))
                        (rule "inEqSimp_contradEq3" (formula "31") (term "0") (ifseqformula "1"))
                        (rule "mul_literals" (formula "31") (term "1,0,0,0"))
                        (rule "add_zero_right" (formula "31") (term "0,0,0"))
                        (rule "qeq_literals" (formula "31") (term "0,0"))
                         (builtin "One Step Simplification" (formula "31"))
                        (rule "andLeft" (formula "31"))
                        (rule "andLeft" (formula "31"))
                        (rule "applyEq" (formula "35") (term "0,0") (ifseqformula "32"))
                        (rule "polySimp_mulComm0" (formula "35") (term "0"))
                        (rule "applyEq" (formula "33") (term "0") (ifseqformula "35"))
                        (rule "inEqSimp_homoInEq1" (formula "33"))
                        (rule "polySimp_mulComm0" (formula "33") (term "1,0"))
                        (rule "polySimp_rightDist" (formula "33") (term "1,0"))
                        (rule "polySimp_mulLiterals" (formula "33") (term "1,1,0"))
                        (rule "polySimp_elimOne" (formula "33") (term "1,1,0"))
                        (rule "polySimp_mulComm0" (formula "33") (term "0,1,0"))
                        (rule "polySimp_addComm1" (formula "33") (term "0"))
                        (rule "polySimp_addAssoc" (formula "33") (term "0,0"))
                        (rule "polySimp_addComm1" (formula "33") (term "0,0,0"))
                        (rule "polySimp_pullOutFactor2b" (formula "33") (term "0,0"))
                        (rule "add_literals" (formula "33") (term "1,1,0,0"))
                        (rule "times_zero_1" (formula "33") (term "1,0,0"))
                        (rule "add_zero_right" (formula "33") (term "0,0"))
                        (rule "applyEq" (formula "31") (term "0") (ifseqformula "35"))
                        (rule "inEqSimp_homoInEq0" (formula "31"))
                        (rule "polySimp_mulComm0" (formula "31") (term "1,0"))
                        (rule "polySimp_rightDist" (formula "31") (term "1,0"))
                        (rule "polySimp_mulLiterals" (formula "31") (term "1,1,0"))
                        (rule "polySimp_elimOne" (formula "31") (term "1,1,0"))
                        (rule "polySimp_mulComm0" (formula "31") (term "0,1,0"))
                        (rule "polySimp_addAssoc" (formula "31") (term "0"))
                        (rule "polySimp_addComm0" (formula "31") (term "0,0"))
                        (rule "polySimp_pullOutFactor2b" (formula "31") (term "0"))
                        (rule "add_literals" (formula "31") (term "1,1,0"))
                        (rule "times_zero_1" (formula "31") (term "1,0"))
                        (rule "add_zero_right" (formula "31") (term "0"))
                        (rule "applyEq" (formula "34") (term "0,1") (ifseqformula "32"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "33"))
                        (rule "polySimp_mulComm0" (formula "33") (term "1"))
                        (rule "polySimp_rightDist" (formula "33") (term "1"))
                        (rule "polySimp_mulLiterals" (formula "33") (term "1,1"))
                        (rule "mul_literals" (formula "33") (term "0,1"))
                        (rule "polySimp_elimOne" (formula "33") (term "1,1"))
                        (rule "inEqSimp_invertInEq1" (formula "31"))
                        (rule "polySimp_mulLiterals" (formula "31") (term "0"))
                        (rule "mul_literals" (formula "31") (term "1"))
                        (rule "polySimp_elimOne" (formula "31") (term "0"))
                        (rule "shift_paren_or" (formula "2") (term "0,0,0"))
                         (builtin "One Step Simplification" (formula "2"))
                        (rule "eqSymm" (formula "2") (term "1,1,0,0,0"))
                        (rule "castedGetAny" (formula "2") (term "1,0,0,0,0,0,0"))
                        (rule "castedGetAny" (formula "2") (term "0,0,1,0,0,0"))
                        (rule "castedGetAny" (formula "2") (term "0,1,1,0,0,0"))
                         (builtin "One Step Simplification" (formula "2"))
                        (rule "true_left" (formula "2"))
                        (rule "cnf_rightDist" (formula "2") (term "0,0,0"))
                        (rule "distr_forallAnd" (formula "2") (term "0,0"))
                        (rule "distr_forallAnd" (formula "2") (term "0"))
                        (rule "distr_forallAnd" (formula "2"))
                        (rule "andLeft" (formula "2"))
                        (rule "commute_or_2" (formula "2") (term "0,0,0"))
                         (builtin "One Step Simplification" (formula "2"))
                        (rule "eqSymm" (formula "2") (term "1,0,0,0,0"))
                        (rule "castedGetAny" (formula "2") (term "1,0,0,1,0,0,0"))
                        (rule "castedGetAny" (formula "2") (term "0,0,0,0,0,0"))
                        (rule "castedGetAny" (formula "2") (term "0,1,0,0,0,0"))
                         (builtin "One Step Simplification" (formula "2"))
                        (rule "true_left" (formula "2"))
                        (rule "shift_paren_or" (formula "2") (term "0,0,0"))
                         (builtin "One Step Simplification" (formula "2"))
                        (rule "eqSymm" (formula "2") (term "1,1,0,0,0"))
                        (rule "castedGetAny" (formula "2") (term "1,0,0,0,0,0,0"))
                        (rule "castedGetAny" (formula "2") (term "0,0,1,0,0,0"))
                        (rule "castedGetAny" (formula "2") (term "0,1,1,0,0,0"))
                         (builtin "One Step Simplification" (formula "2"))
                        (rule "true_left" (formula "2"))
                        (rule "Use_information_flow_contract_for_compareTo_325434207" (formula "20") (ifseqformula "20"))
                         (builtin "One Step Simplification" (formula "20") (ifInst ""  (formula "94")) (ifInst ""  (formula "94")))
                        (rule "true_left" (formula "20"))
                        (rule "Use_information_flow_contract_for_getOrder_757678341" (formula "62") (ifseqformula "26"))
                        (rule "replace_known_left" (formula "62") (term "1,1") (ifseqformula "8"))
                         (builtin "One Step Simplification" (formula "62"))
                        (rule "true_left" (formula "62"))
                        (rule "Use_information_flow_contract_for_getOrder_757678341" (formula "62") (ifseqformula "62"))
                         (builtin "One Step Simplification" (formula "62"))
                        (rule "true_left" (formula "62"))
                        (rule "Use_information_flow_contract_for_getOrder_757678341" (formula "26") (ifseqformula "26"))
                         (builtin "One Step Simplification" (formula "26"))
                        (rule "true_left" (formula "26"))
                        (rule "Use_information_flow_contract_for_compareTo_325434207" (formula "20") (ifseqformula "56"))
                        (rule "eqSymm" (formula "20") (term "1,0,1"))
                        (rule "eqSymm" (formula "20") (term "1,1"))
                        (rule "eqSymm" (formula "20") (term "0,0,1"))
                        (rule "replace_known_right" (formula "20") (term "0,1,0,0") (ifseqformula "94"))
                         (builtin "One Step Simplification" (formula "20") (ifInst ""  (formula "95")) (ifInst ""  (formula "7")))
                        (rule "applyEqRigid" (formula "20") (term "0,0,1") (ifseqformula "58"))
                        (rule "eqSymm" (formula "20") (term "0,1"))
                        (rule "replace_known_left" (formula "20") (term "0,1") (ifseqformula "22"))
                         (builtin "One Step Simplification" (formula "20"))
                        (rule "Class_invariant_axiom_for_java_math_BigInteger" (formula "20") (term "1,0"))
                        (rule "replace_known_right" (formula "20") (term "0,0,1,0") (ifseqformula "95"))
                         (builtin "One Step Simplification" (formula "20") (ifInst ""  (formula "58")))
                        (rule "Class_invariant_axiom_for_java_math_BigInteger" (formula "20") (term "0"))
                        (rule "replace_known_right" (formula "20") (term "0,0,0") (ifseqformula "94"))
                         (builtin "One Step Simplification" (formula "20") (ifInst ""  (formula "22")))
                        (rule "applyEq" (formula "49") (term "0") (ifseqformula "20"))
                        (rule "applyEq" (formula "55") (term "0") (ifseqformula "20"))
                        (rule "applyEq" (formula "55") (term "4") (ifseqformula "20"))
                        (rule "Use_information_flow_contract_for_multiply_1272441881_0" (formula "72") (ifseqformula "40"))
                        (rule "replaceKnownSelect_taclet21_12" (formula "72") (term "0,1,1"))
                        (rule "replaceKnownSelect_taclet21_11" (formula "72") (term "1,1,1"))
                        (rule "replaceKnownAuxiliaryConstant_taclet010121_18" (formula "72") (term "0,1,1"))
                        (rule "replaceKnownAuxiliaryConstant_taclet0010121_19" (formula "72") (term "1,1,1"))
                        (rule "replaceKnownSelect_taclet21_8" (formula "72") (term "1,1,0,1"))
                        (rule "replaceKnownSelect_taclet21_9" (formula "72") (term "0,1,0,1"))
                        (rule "replaceKnownAuxiliaryConstant_taclet21_10" (formula "72") (term "1,1,0,1"))
                         (builtin "One Step Simplification" (formula "72") (ifInst ""  (formula "84")) (ifInst ""  (formula "83")) (ifInst ""  (formula "101")))
                        (rule "pullOutSelect" (formula "72") (term "1,0,1") (inst "selectSK=org_bouncycastle_math_ec_ECPoint_value_4"))
                        (rule "simplifySelectOfAnonEQ" (formula "72") (ifseqformula "28"))
                         (builtin "One Step Simplification" (formula "72") (ifInst ""  (formula "98")) (ifInst ""  (formula "15")))
                        (rule "applyEqReverse" (formula "73") (term "1,0,1") (ifseqformula "72"))
                        (rule "hideAuxiliaryEq" (formula "72"))
                        (rule "pullOutSelect" (formula "72") (term "0,0,1") (inst "selectSK=org_bouncycastle_math_ec_ECPoint_value_5"))
                        (rule "simplifySelectOfAnonEQ" (formula "72") (ifseqformula "63"))
                         (builtin "One Step Simplification" (formula "72") (ifInst ""  (formula "99")) (ifInst ""  (formula "51")))
                        (rule "applyEqReverse" (formula "73") (term "0,0,1") (ifseqformula "72"))
                        (rule "hideAuxiliaryEq" (formula "72"))
                        (rule "replace_known_left" (formula "72") (term "0,1") (ifseqformula "6"))
                         (builtin "One Step Simplification" (formula "72"))
                        (rule "notLeft" (formula "72"))
                        (rule "Class_invariant_axiom_for_org_bouncycastle_math_ec_ECPoint" (formula "78") (term "1"))
                         (builtin "One Step Simplification" (formula "78"))
                        (rule "Class_invariant_axiom_for_org_bouncycastle_math_ec_ECPoint" (formula "78"))
                        (rule "closeTrue" (formula "78"))
                     )
                  )
                  (branch " resultAtPost_226_A.<created>@anon_heap_mod«anonHeapFunction» = TRUE FALSE"
                     (rule "applyEqReverse" (formula "106") (term "1") (ifseqformula "9"))
                     (rule "hideAuxiliaryEq" (formula "9"))
                     (rule "replace_known_right" (formula "41") (term "0") (ifseqformula "82"))
                      (builtin "One Step Simplification" (formula "41"))
                     (rule "commute_or" (formula "3") (term "0,0,0,0"))
                     (rule "commute_or" (formula "3") (term "0,1,0,0,0"))
                     (rule "commute_or" (formula "2") (term "0,0,0,0"))
                     (rule "onlyCreatedObjectsAreReferenced" (formula "98") (term "0") (ifseqformula "56"))
                     (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "99"))
                      (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "62")))
                     (rule "true_left" (formula "1"))
                     (rule "onlyCreatedObjectsAreReferenced" (formula "97") (term "0") (ifseqformula "21"))
                     (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "98"))
                      (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "27")))
                     (rule "true_left" (formula "1"))
                     (rule "onlyCreatedObjectsAreReferenced" (formula "13") (term "1,0") (ifseqformula "21"))
                     (rule "replace_known_right" (formula "13") (term "0") (ifseqformula "92"))
                      (builtin "One Step Simplification" (formula "13") (ifInst ""  (formula "14")))
                     (rule "true_left" (formula "13"))
                     (rule "onlyCreatedObjectsAreReferenced" (formula "94") (term "0") (ifseqformula "56"))
                     (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "95"))
                      (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "50")))
                     (rule "true_left" (formula "1"))
                     (rule "onlyCreatedObjectsAreReferenced" (formula "30") (term "0") (ifseqformula "21"))
                     (rule "replace_known_right" (formula "30") (term "0") (ifseqformula "96"))
                      (builtin "One Step Simplification" (formula "30") (ifInst ""  (formula "15")))
                     (rule "true_left" (formula "30"))
                     (rule "onlyCreatedObjectsAreReferenced" (formula "13") (term "1,1,0") (ifseqformula "21"))
                     (rule "replace_known_right" (formula "13") (term "0") (ifseqformula "94"))
                      (builtin "One Step Simplification" (formula "13") (ifInst ""  (formula "15")))
                     (rule "true_left" (formula "13"))
                     (rule "onlyCreatedObjectsAreReferenced" (formula "48") (term "1,0") (ifseqformula "56"))
                     (rule "replace_known_right" (formula "48") (term "0") (ifseqformula "93"))
                      (builtin "One Step Simplification" (formula "48") (ifInst ""  (formula "49")))
                     (rule "true_left" (formula "48"))
                     (rule "onlyCreatedObjectsAreReferenced" (formula "63") (term "1,0") (ifseqformula "56"))
                     (rule "replace_known_right" (formula "63") (term "0") (ifseqformula "97"))
                      (builtin "One Step Simplification" (formula "63") (ifInst ""  (formula "50")))
                     (rule "true_left" (formula "63"))
                     (rule "commute_or" (formula "2") (term "0,1,0,0,0"))
                     (rule "commute_or" (formula "1") (term "0,0,0,0"))
                     (rule "commute_or" (formula "1") (term "0,1,0,0,0"))
                     (rule "commute_or_2" (formula "4") (term "0,0,0"))
                     (rule "commute_or_2" (formula "3") (term "0,0,0"))
                     (rule "commute_and" (formula "33") (term "0,1"))
                     (rule "commute_or_2" (formula "6") (term "0,0,0,0,0"))
                      (builtin "One Step Simplification" (formula "6"))
                     (rule "commute_or_2" (formula "2") (term "0,0,0"))
                     (rule "commute_or_2" (formula "1") (term "0,0,0"))
                     (rule "shift_paren_or" (formula "5") (term "0,0,0,0,0"))
                     (rule "commute_or_2" (formula "6") (term "0,0,0,0"))
                     (rule "shift_paren_or" (formula "4") (term "0,0,0,0"))
                     (rule "commute_or_2" (formula "3") (term "1,0,0,0,0"))
                     (rule "shift_paren_or" (formula "2") (term "0,0,0,0"))
                     (rule "shift_paren_or" (formula "1") (term "0,0,0,0"))
                     (rule "commute_or_2" (formula "5") (term "0,0,0,0,0"))
                      (builtin "One Step Simplification" (formula "5"))
                     (rule "commute_or_2" (formula "5") (term "0,0,0,0"))
                     (rule "shift_paren_or" (formula "3") (term "0,0,0,0"))
                     (rule "cnf_rightDist" (formula "6") (term "0,0,0"))
                     (rule "distr_forallAnd" (formula "6") (term "0,0"))
                     (rule "distr_forallAnd" (formula "6") (term "0"))
                     (rule "distr_forallAnd" (formula "6"))
                     (rule "andLeft" (formula "6"))
                     (rule "commute_or_2" (formula "6") (term "0,0,0"))
                      (builtin "One Step Simplification" (formula "6"))
                     (rule "eqSymm" (formula "6") (term "1,0,0,0,0"))
                     (rule "castedGetAny" (formula "6") (term "0,0,0,0,0,0"))
                     (rule "castedGetAny" (formula "6") (term "1,0,0,1,0,0,0"))
                     (rule "castedGetAny" (formula "6") (term "0,1,0,0,0,0"))
                      (builtin "One Step Simplification" (formula "6"))
                     (rule "true_left" (formula "6"))
                     (rule "shift_paren_or" (formula "6") (term "0,0,0"))
                      (builtin "One Step Simplification" (formula "6"))
                     (rule "eqSymm" (formula "6") (term "1,1,0,0,0"))
                     (rule "castedGetAny" (formula "6") (term "0,0,1,0,0,0"))
                     (rule "castedGetAny" (formula "6") (term "0,0,0,0,0,0"))
                     (rule "castedGetAny" (formula "6") (term "0,1,1,0,0,0"))
                      (builtin "One Step Simplification" (formula "6"))
                     (rule "true_left" (formula "6"))
                     (rule "commute_and" (formula "4") (term "1,0,0,0"))
                     (rule "commute_and" (formula "3") (term "1,0,0,0"))
                     (rule "commute_and" (formula "2") (term "1,0,0,0"))
                     (rule "cnf_rightDist" (formula "5") (term "0,0,0"))
                     (rule "distr_forallAnd" (formula "5") (term "0,0"))
                     (rule "distr_forallAnd" (formula "5") (term "0"))
                     (rule "distr_forallAnd" (formula "5"))
                     (rule "andLeft" (formula "5"))
                     (rule "commute_or_2" (formula "5") (term "0,0,0"))
                      (builtin "One Step Simplification" (formula "5"))
                     (rule "eqSymm" (formula "5") (term "1,0,0,0,0"))
                     (rule "castedGetAny" (formula "5") (term "1,0,0,1,0,0,0"))
                     (rule "castedGetAny" (formula "5") (term "0,0,0,0,0,0"))
                     (rule "castedGetAny" (formula "5") (term "0,1,0,0,0,0"))
                      (builtin "One Step Simplification" (formula "5"))
                     (rule "true_left" (formula "5"))
                     (rule "shift_paren_or" (formula "5") (term "0,0,0"))
                      (builtin "One Step Simplification" (formula "5"))
                     (rule "eqSymm" (formula "5") (term "1,1,0,0,0"))
                     (rule "castedGetAny" (formula "5") (term "0,0,1,0,0,0"))
                     (rule "castedGetAny" (formula "5") (term "0,0,0,0,0,0"))
                     (rule "castedGetAny" (formula "5") (term "0,1,1,0,0,0"))
                      (builtin "One Step Simplification" (formula "5"))
                     (rule "true_left" (formula "5"))
                     (rule "commute_and" (formula "1") (term "1,0,0,0"))
                     (rule "shift_paren_or" (formula "4") (term "0,0,0,0,0"))
                      (builtin "One Step Simplification" (formula "4"))
                     (rule "shift_paren_or" (formula "2") (term "0,0,0,0,0"))
                      (builtin "One Step Simplification" (formula "2"))
                     (rule "shift_paren_or" (formula "1") (term "0,0,0,0,0"))
                      (builtin "One Step Simplification" (formula "1"))
                     (rule "shift_paren_or" (formula "3") (term "0,0,0,0,0"))
                      (builtin "One Step Simplification" (formula "3"))
                     (rule "commute_or_2" (formula "4") (term "0,0,0,0"))
                     (rule "commute_or_2" (formula "2") (term "0,0,0,0"))
                     (rule "commute_or_2" (formula "1") (term "0,0,0,0"))
                     (rule "cnf_rightDist" (formula "3") (term "0,0,0"))
                     (rule "distr_forallAnd" (formula "3") (term "0,0"))
                     (rule "distr_forallAnd" (formula "3") (term "0"))
                     (rule "distr_forallAnd" (formula "3"))
                     (rule "andLeft" (formula "3"))
                     (rule "shift_paren_or" (formula "4") (term "0,0,0"))
                      (builtin "One Step Simplification" (formula "4"))
                     (rule "eqSymm" (formula "4") (term "1,1,0,0,0"))
                     (rule "castedGetAny" (formula "4") (term "0,0,1,0,0,0"))
                     (rule "castedGetAny" (formula "4") (term "0,0,0,0,0,0"))
                     (rule "castedGetAny" (formula "4") (term "0,1,1,0,0,0"))
                      (builtin "One Step Simplification" (formula "4"))
                     (rule "true_left" (formula "4"))
                     (rule "cnf_rightDist" (formula "4") (term "0,0,0"))
                     (rule "distr_forallAnd" (formula "4") (term "0,0"))
                     (rule "distr_forallAnd" (formula "4") (term "0"))
                     (rule "distr_forallAnd" (formula "4"))
                     (rule "andLeft" (formula "4"))
                     (rule "shift_paren_or" (formula "5") (term "0,0,0"))
                      (builtin "One Step Simplification" (formula "5"))
                     (rule "eqSymm" (formula "5") (term "1,1,0,0,0"))
                     (rule "castedGetAny" (formula "5") (term "0,0,1,0,0,0"))
                     (rule "castedGetAny" (formula "5") (term "0,0,0,0,0,0"))
                     (rule "castedGetAny" (formula "5") (term "0,1,1,0,0,0"))
                      (builtin "One Step Simplification" (formula "5"))
                     (rule "true_left" (formula "5"))
                     (rule "cnf_rightDist" (formula "2") (term "0,0,0"))
                     (rule "distr_forallAnd" (formula "2") (term "0,0"))
                     (rule "distr_forallAnd" (formula "2") (term "0"))
                     (rule "distr_forallAnd" (formula "2"))
                     (rule "andLeft" (formula "2"))
                     (rule "cnf_rightDist" (formula "1") (term "0,0,0"))
                     (rule "distr_forallAnd" (formula "1") (term "0,0"))
                     (rule "distr_forallAnd" (formula "1") (term "0"))
                     (rule "distr_forallAnd" (formula "1"))
                     (rule "andLeft" (formula "1"))
                     (rule "shift_paren_or" (formula "3") (term "0,0,0"))
                      (builtin "One Step Simplification" (formula "3"))
                     (rule "eqSymm" (formula "3") (term "1,1,0,0,0"))
                     (rule "castedGetAny" (formula "3") (term "0,0,0,0,0,0"))
                     (rule "castedGetAny" (formula "3") (term "0,0,1,0,0,0"))
                     (rule "castedGetAny" (formula "3") (term "0,1,1,0,0,0"))
                      (builtin "One Step Simplification" (formula "3"))
                     (rule "true_left" (formula "3"))
                     (rule "cnf_rightDist" (formula "3") (term "0,0,0"))
                     (rule "distr_forallAnd" (formula "3") (term "0,0"))
                     (rule "distr_forallAnd" (formula "3") (term "0"))
                     (rule "distr_forallAnd" (formula "3"))
                     (rule "andLeft" (formula "3"))
                     (rule "cnf_rightDist" (formula "4") (term "0,0,0"))
                     (rule "distr_forallAnd" (formula "4") (term "0,0"))
                     (rule "distr_forallAnd" (formula "4") (term "0"))
                     (rule "distr_forallAnd" (formula "4"))
                     (rule "andLeft" (formula "4"))
                     (rule "commute_or_2" (formula "4") (term "0,0,0"))
                      (builtin "One Step Simplification" (formula "4"))
                     (rule "eqSymm" (formula "4") (term "1,0,0,0,0"))
                     (rule "castedGetAny" (formula "4") (term "1,0,0,1,0,0,0"))
                     (rule "castedGetAny" (formula "4") (term "0,0,0,0,0,0"))
                     (rule "castedGetAny" (formula "4") (term "0,1,0,0,0,0"))
                      (builtin "One Step Simplification" (formula "4"))
                     (rule "true_left" (formula "4"))
                     (rule "shift_paren_or" (formula "3") (term "0,0,0"))
                      (builtin "One Step Simplification" (formula "3"))
                     (rule "eqSymm" (formula "3") (term "1,1,0,0,0"))
                     (rule "castedGetAny" (formula "3") (term "0,0,1,0,0,0"))
                     (rule "castedGetAny" (formula "3") (term "1,0,0,0,0,0,0"))
                     (rule "castedGetAny" (formula "3") (term "0,1,1,0,0,0"))
                      (builtin "One Step Simplification" (formula "3"))
                     (rule "true_left" (formula "3"))
                     (rule "shift_paren_or" (formula "3") (term "0,0,0"))
                      (builtin "One Step Simplification" (formula "3"))
                     (rule "eqSymm" (formula "3") (term "1,1,0,0,0"))
                     (rule "castedGetAny" (formula "3") (term "1,0,0,0,0,0,0"))
                     (rule "castedGetAny" (formula "3") (term "0,0,1,0,0,0"))
                     (rule "castedGetAny" (formula "3") (term "0,1,1,0,0,0"))
                      (builtin "One Step Simplification" (formula "3"))
                     (rule "true_left" (formula "3"))
                     (rule "cnf_rightDist" (formula "2") (term "0,0,0"))
                     (rule "distr_forallAnd" (formula "2") (term "0,0"))
                     (rule "distr_forallAnd" (formula "2") (term "0"))
                     (rule "distr_forallAnd" (formula "2"))
                     (rule "andLeft" (formula "2"))
                     (rule "commute_or_2" (formula "2") (term "0,0,0"))
                      (builtin "One Step Simplification" (formula "2"))
                     (rule "eqSymm" (formula "2") (term "1,0,0,0,0"))
                     (rule "castedGetAny" (formula "2") (term "0,0,0,0,0,0"))
                     (rule "castedGetAny" (formula "2") (term "1,0,0,1,0,0,0"))
                     (rule "castedGetAny" (formula "2") (term "0,1,0,0,0,0"))
                      (builtin "One Step Simplification" (formula "2"))
                     (rule "true_left" (formula "2"))
                     (rule "cnf_rightDist" (formula "1") (term "0,0,0"))
                     (rule "distr_forallAnd" (formula "1") (term "0,0"))
                     (rule "distr_forallAnd" (formula "1") (term "0"))
                     (rule "distr_forallAnd" (formula "1"))
                     (rule "andLeft" (formula "1"))
                     (rule "ifthenelse_split_for" (formula "30") (term "1,1"))
                     (branch "result_228_A_1.value@heapAtPre_A«anonHeapFunction» ≥ 0 TRUE"
                        (rule "cnf_rightDist" (formula "31"))
                        (rule "andLeft" (formula "31"))
                        (rule "commute_or" (formula "32"))
                        (rule "cnf_rightDist" (formula "31"))
                        (rule "andLeft" (formula "31"))
                        (rule "commute_or" (formula "32"))
                        (rule "shift_paren_or" (formula "3") (term "0,0,0"))
                         (builtin "One Step Simplification" (formula "3"))
                        (rule "eqSymm" (formula "3") (term "1,1,0,0,0"))
                        (rule "castedGetAny" (formula "3") (term "0,0,1,0,0,0"))
                        (rule "castedGetAny" (formula "3") (term "1,0,0,0,0,0,0"))
                        (rule "castedGetAny" (formula "3") (term "0,1,1,0,0,0"))
                         (builtin "One Step Simplification" (formula "3"))
                        (rule "true_left" (formula "3"))
                        (rule "shift_paren_or" (formula "2") (term "0,0,0"))
                         (builtin "One Step Simplification" (formula "2"))
                        (rule "eqSymm" (formula "2") (term "1,1,0,0,0"))
                        (rule "castedGetAny" (formula "2") (term "1,0,0,0,0,0,0"))
                        (rule "castedGetAny" (formula "2") (term "0,0,1,0,0,0"))
                        (rule "castedGetAny" (formula "2") (term "0,1,1,0,0,0"))
                         (builtin "One Step Simplification" (formula "2"))
                        (rule "true_left" (formula "2"))
                        (rule "cnf_rightDist" (formula "1") (term "0,0,0"))
                        (rule "distr_forallAnd" (formula "1") (term "0,0"))
                        (rule "distr_forallAnd" (formula "1") (term "0"))
                        (rule "distr_forallAnd" (formula "1"))
                        (rule "andLeft" (formula "1"))
                        (rule "commute_or_2" (formula "1") (term "0,0,0"))
                         (builtin "One Step Simplification" (formula "1"))
                        (rule "eqSymm" (formula "1") (term "1,0,0,0,0"))
                        (rule "castedGetAny" (formula "1") (term "0,0,0,0,0,0"))
                        (rule "castedGetAny" (formula "1") (term "1,0,0,1,0,0,0"))
                        (rule "castedGetAny" (formula "1") (term "0,1,0,0,0,0"))
                         (builtin "One Step Simplification" (formula "1"))
                        (rule "true_left" (formula "1"))
                        (rule "shift_paren_or" (formula "1") (term "0,0,0"))
                         (builtin "One Step Simplification" (formula "1"))
                        (rule "eqSymm" (formula "1") (term "1,1,0,0,0"))
                        (rule "castedGetAny" (formula "1") (term "0,0,1,0,0,0"))
                        (rule "castedGetAny" (formula "1") (term "1,0,0,0,0,0,0"))
                        (rule "castedGetAny" (formula "1") (term "0,1,1,0,0,0"))
                         (builtin "One Step Simplification" (formula "1"))
                        (rule "true_left" (formula "1"))
                        (rule "cut_direct" (formula "28") (term "0"))
                        (branch "CUT: result_228_A_1.value@heapAtPre_A«anonHeapFunction» = 0 TRUE"
                            (builtin "One Step Simplification" (formula "29"))
                           (rule "true_left" (formula "29"))
                           (rule "replace_known_left" (formula "30") (term "0") (ifseqformula "28"))
                            (builtin "One Step Simplification" (formula "30"))
                           (rule "true_left" (formula "30"))
                           (rule "replace_known_left" (formula "29") (term "0") (ifseqformula "28"))
                            (builtin "One Step Simplification" (formula "29"))
                           (rule "true_left" (formula "29"))
                           (rule "applyEq" (formula "27") (term "0") (ifseqformula "28"))
                           (rule "qeq_literals" (formula "27"))
                           (rule "true_left" (formula "27"))
                           (rule "applyEq" (formula "29") (term "1,0") (ifseqformula "27"))
                           (rule "times_zero_1" (formula "29") (term "0"))
                           (rule "polySimp_homoEq" (formula "29"))
                           (rule "mul_literals" (formula "29") (term "1,0"))
                           (rule "add_zero_right" (formula "29") (term "0"))
                           (rule "applyEq" (formula "28") (term "1,0") (ifseqformula "27"))
                           (rule "eqSymm" (formula "28"))
                           (rule "polySimp_homoEq" (formula "28"))
                           (rule "polySimp_mulLiterals" (formula "28") (term "1,0"))
                           (rule "polySimp_elimOne" (formula "28") (term "1,0"))
                           (rule "applyEq" (formula "22") (term "1") (ifseqformula "27"))
                           (rule "applyEq" (formula "57") (term "1") (ifseqformula "27"))
                           (rule "applyEq" (formula "6") (term "1") (ifseqformula "27"))
                           (rule "applyEq" (formula "28") (term "1,1,0") (ifseqformula "27"))
                           (rule "polySimp_addComm0" (formula "28") (term "0"))
                           (rule "polySimp_sepNegMonomial" (formula "29"))
                           (rule "polySimp_mulLiterals" (formula "29") (term "0"))
                           (rule "polySimp_elimOne" (formula "29") (term "0"))
                           (rule "applyEq" (formula "3") (term "0") (ifseqformula "29"))
                           (rule "applyEq" (formula "28") (term "0,1,0") (ifseqformula "29"))
                           (rule "polySimp_addComm0" (formula "28") (term "0"))
                           (rule "applyEq" (formula "28") (term "0,0,1,0") (ifseqformula "29"))
                           (rule "polySimp_addComm0" (formula "28") (term "0"))
                           (rule "applyEq" (formula "5") (term "1") (ifseqformula "29"))
                           (rule "polySimp_sepPosMonomial" (formula "28"))
                           (rule "jdiv_axiom" (formula "28") (term "0"))
                           (rule "eqSymm" (formula "28"))
                           (rule "applyEq" (formula "28") (term "1") (ifseqformula "29"))
                            (builtin "One Step Simplification" (formula "28"))
                           (rule "eqSymm" (formula "28") (term "1"))
                           (rule "polySimp_homoEq" (formula "28") (term "1"))
                           (rule "polySimp_mulLiterals" (formula "28") (term "1,0,1"))
                           (rule "polySimp_elimOne" (formula "28") (term "1,0,1"))
                           (rule "polySimp_sepPosMonomial" (formula "28") (term "1"))
                           (rule "inEqSimp_contradInEq0" (formula "28") (term "0,0") (ifseqformula "3"))
                           (rule "qeq_literals" (formula "28") (term "0,0,0"))
                            (builtin "One Step Simplification" (formula "28"))
                           (rule "true_left" (formula "28"))
                           (rule "div_axiom" (formula "28") (term "0,1") (inst "quotient=quotient_1"))
                            (builtin "One Step Simplification" (formula "28"))
                           (rule "true_left" (formula "28"))
                           (rule "Use_information_flow_contract_for_compareTo_325434207" (formula "18") (ifseqformula "18"))
                            (builtin "One Step Simplification" (formula "18") (ifInst ""  (formula "92")) (ifInst ""  (formula "92")))
                           (rule "true_left" (formula "18"))
                           (rule "Use_information_flow_contract_for_getOrder_757678341" (formula "59") (ifseqformula "24"))
                           (rule "applyEq" (formula "59") (term "0,1,1") (ifseqformula "6"))
                           (rule "eqSymm" (formula "59") (term "1,1"))
                           (rule "replace_known_left" (formula "59") (term "1,1") (ifseqformula "27"))
                            (builtin "One Step Simplification" (formula "59"))
                           (rule "true_left" (formula "59"))
                           (rule "Use_information_flow_contract_for_getOrder_757678341" (formula "59") (ifseqformula "59"))
                            (builtin "One Step Simplification" (formula "59"))
                           (rule "true_left" (formula "59"))
                           (rule "Use_information_flow_contract_for_getOrder_757678341" (formula "24") (ifseqformula "24"))
                            (builtin "One Step Simplification" (formula "24"))
                           (rule "true_left" (formula "24"))
                           (rule "Use_information_flow_contract_for_compareTo_325434207" (formula "18") (ifseqformula "53"))
                           (rule "eqSymm" (formula "18") (term "1,1"))
                           (rule "eqSymm" (formula "18") (term "0,0,1"))
                           (rule "eqSymm" (formula "18") (term "1,0,1"))
                           (rule "replace_known_right" (formula "18") (term "0,1,1,0") (ifseqformula "93"))
                            (builtin "One Step Simplification" (formula "18") (ifInst ""  (formula "92")))
                           (rule "applyEqRigid" (formula "18") (term "0,1,0,1") (ifseqformula "55"))
                           (rule "eqSymm" (formula "18") (term "1,0,1"))
                           (rule "replace_known_left" (formula "18") (term "1,0,1") (ifseqformula "20"))
                            (builtin "One Step Simplification" (formula "18"))
                           (rule "applyEq" (formula "18") (term "0,0,1") (ifseqformula "5"))
                           (rule "eqSymm" (formula "18") (term "0,1"))
                           (rule "replace_known_left" (formula "18") (term "0,1") (ifseqformula "30"))
                            (builtin "One Step Simplification" (formula "18"))
                           (rule "Class_invariant_axiom_for_java_math_BigInteger" (formula "18") (term "1,0"))
                           (rule "replace_known_right" (formula "18") (term "0,0,1,0") (ifseqformula "93"))
                            (builtin "One Step Simplification" (formula "18") (ifInst ""  (formula "55")))
                           (rule "Class_invariant_axiom_for_java_math_BigInteger" (formula "18") (term "0"))
                           (rule "replace_known_right" (formula "18") (term "0,0,0") (ifseqformula "92"))
                            (builtin "One Step Simplification" (formula "18") (ifInst ""  (formula "20")))
                           (rule "applyEq" (formula "54") (term "4") (ifseqformula "18"))
                           (rule "applyEq" (formula "46") (term "0") (ifseqformula "18"))
                           (rule "applyEq" (formula "52") (term "0") (ifseqformula "18"))
                           (rule "Use_information_flow_contract_for_multiply_1272441881_0" (formula "69") (ifseqformula "37"))
                           (rule "replaceKnownSelect_taclet21_11" (formula "69") (term "1,1,1"))
                           (rule "replaceKnownSelect_taclet21_12" (formula "69") (term "0,1,1"))
                           (rule "replaceKnownAuxiliaryConstant_taclet1010121_19" (formula "69") (term "1,1,1"))
                           (rule "replaceKnownAuxiliaryConstant_taclet010121_18" (formula "69") (term "0,1,1"))
                           (rule "replaceKnownSelect_taclet21_9" (formula "69") (term "0,1,0,1"))
                           (rule "replaceKnownSelect_taclet21_8" (formula "69") (term "1,1,0,1"))
                           (rule "replaceKnownAuxiliaryConstant_taclet121_15" (formula "69") (term "0,1,0,1"))
                           (rule "replaceKnownAuxiliaryConstant_taclet21_10" (formula "69") (term "1,1,0,1"))
                           (rule "replaceKnownAuxiliaryConstant_taclet121_15" (formula "69") (term "1,1,0,1"))
                            (builtin "One Step Simplification" (formula "69") (ifInst ""  (formula "82")) (ifInst ""  (formula "81")) (ifInst ""  (formula "99")))
                           (rule "pullOutSelect" (formula "69") (term "1,0,1") (inst "selectSK=org_bouncycastle_math_ec_ECPoint_value_4"))
                           (rule "simplifySelectOfAnonEQ" (formula "69") (ifseqformula "26"))
                            (builtin "One Step Simplification" (formula "69") (ifInst ""  (formula "96")) (ifInst ""  (formula "13")))
                           (rule "applyEqReverse" (formula "70") (term "1,0,1") (ifseqformula "69"))
                           (rule "hideAuxiliaryEq" (formula "69"))
                           (rule "pullOutSelect" (formula "69") (term "0,0,1") (inst "selectSK=org_bouncycastle_math_ec_ECPoint_value_5"))
                           (rule "simplifySelectOfAnonEQ" (formula "69") (ifseqformula "60"))
                            (builtin "One Step Simplification" (formula "69") (ifInst ""  (formula "97")) (ifInst ""  (formula "48")))
                           (rule "applyEqReverse" (formula "70") (term "0,0,1") (ifseqformula "69"))
                           (rule "hideAuxiliaryEq" (formula "69"))
                           (rule "replace_known_left" (formula "69") (term "0,1") (ifseqformula "4"))
                            (builtin "One Step Simplification" (formula "69"))
                           (rule "notLeft" (formula "69"))
                           (rule "Class_invariant_axiom_for_org_bouncycastle_math_ec_ECPoint" (formula "75") (term "1"))
                            (builtin "One Step Simplification" (formula "75"))
                           (rule "Class_invariant_axiom_for_org_bouncycastle_math_ec_ECPoint" (formula "75"))
                           (rule "closeTrue" (formula "75"))
                        )
                        (branch "CUT: result_228_A_1.value@heapAtPre_A«anonHeapFunction» = 0 FALSE"
                            (builtin "One Step Simplification" (formula "28"))
                           (rule "replace_known_right" (formula "30") (term "0") (ifseqformula "79"))
                            (builtin "One Step Simplification" (formula "30"))
                           (rule "replace_known_right" (formula "29") (term "0") (ifseqformula "79"))
                            (builtin "One Step Simplification" (formula "29"))
                           (rule "applyEq" (formula "32") (term "0,0") (ifseqformula "29"))
                           (rule "polySimp_mulComm0" (formula "32") (term "0"))
                           (rule "applyEq" (formula "30") (term "0") (ifseqformula "32"))
                           (rule "inEqSimp_homoInEq1" (formula "30"))
                           (rule "polySimp_mulComm0" (formula "30") (term "1,0"))
                           (rule "polySimp_rightDist" (formula "30") (term "1,0"))
                           (rule "polySimp_mulLiterals" (formula "30") (term "1,1,0"))
                           (rule "polySimp_elimOne" (formula "30") (term "1,1,0"))
                           (rule "polySimp_mulComm0" (formula "30") (term "0,1,0"))
                           (rule "polySimp_addComm1" (formula "30") (term "0"))
                           (rule "polySimp_addAssoc" (formula "30") (term "0,0"))
                           (rule "polySimp_addComm1" (formula "30") (term "0,0,0"))
                           (rule "polySimp_pullOutFactor2b" (formula "30") (term "0,0"))
                           (rule "add_literals" (formula "30") (term "1,1,0,0"))
                           (rule "times_zero_1" (formula "30") (term "1,0,0"))
                           (rule "add_zero_right" (formula "30") (term "0,0"))
                           (rule "applyEq" (formula "28") (term "0") (ifseqformula "32"))
                           (rule "inEqSimp_homoInEq0" (formula "28"))
                           (rule "polySimp_mulComm0" (formula "28") (term "1,0"))
                           (rule "polySimp_rightDist" (formula "28") (term "1,0"))
                           (rule "polySimp_mulLiterals" (formula "28") (term "1,1,0"))
                           (rule "polySimp_elimOne" (formula "28") (term "1,1,0"))
                           (rule "polySimp_mulComm0" (formula "28") (term "0,1,0"))
                           (rule "polySimp_addAssoc" (formula "28") (term "0"))
                           (rule "polySimp_addComm0" (formula "28") (term "0,0"))
                           (rule "polySimp_pullOutFactor2b" (formula "28") (term "0"))
                           (rule "add_literals" (formula "28") (term "1,1,0"))
                           (rule "times_zero_1" (formula "28") (term "1,0"))
                           (rule "add_zero_right" (formula "28") (term "0"))
                           (rule "applyEq" (formula "31") (term "0,1") (ifseqformula "29"))
                           (rule "inEqSimp_sepNegMonomial0" (formula "30"))
                           (rule "polySimp_mulLiterals" (formula "30") (term "0"))
                           (rule "polySimp_elimOne" (formula "30") (term "0"))
                           (rule "inEqSimp_invertInEq1" (formula "28"))
                           (rule "polySimp_mulLiterals" (formula "28") (term "0"))
                           (rule "mul_literals" (formula "28") (term "1"))
                           (rule "polySimp_elimOne" (formula "28") (term "0"))
                           (rule "inEqSimp_strengthen1" (formula "27") (ifseqformula "79"))
                           (rule "add_literals" (formula "27") (term "1"))
                           (rule "inEqSimp_contradEq7" (formula "79") (ifseqformula "27"))
                           (rule "mul_literals" (formula "79") (term "1,0,0"))
                           (rule "add_zero_right" (formula "79") (term "0,0"))
                           (rule "leq_literals" (formula "79") (term "0"))
                            (builtin "One Step Simplification" (formula "79"))
                           (rule "false_right" (formula "79"))
                           (rule "Use_information_flow_contract_for_compareTo_325434207" (formula "18") (ifseqformula "18"))
                            (builtin "One Step Simplification" (formula "18") (ifInst ""  (formula "95")) (ifInst ""  (formula "95")))
                           (rule "true_left" (formula "18"))
                           (rule "Use_information_flow_contract_for_getOrder_757678341" (formula "62") (ifseqformula "24"))
                           (rule "replace_known_left" (formula "62") (term "1,1") (ifseqformula "6"))
                            (builtin "One Step Simplification" (formula "62"))
                           (rule "true_left" (formula "62"))
                           (rule "Use_information_flow_contract_for_getOrder_757678341" (formula "62") (ifseqformula "62"))
                            (builtin "One Step Simplification" (formula "62"))
                           (rule "true_left" (formula "62"))
                           (rule "Use_information_flow_contract_for_getOrder_757678341" (formula "24") (ifseqformula "24"))
                            (builtin "One Step Simplification" (formula "24"))
                           (rule "true_left" (formula "24"))
                           (rule "Use_information_flow_contract_for_compareTo_325434207" (formula "18") (ifseqformula "56"))
                           (rule "eqSymm" (formula "18") (term "1,0,1"))
                           (rule "eqSymm" (formula "18") (term "1,1"))
                           (rule "eqSymm" (formula "18") (term "0,0,1"))
                           (rule "replace_known_right" (formula "18") (term "0,1,1,0") (ifseqformula "96"))
                            (builtin "One Step Simplification" (formula "18") (ifInst ""  (formula "95")) (ifInst ""  (formula "5")))
                           (rule "applyEq" (formula "18") (term "0,0,1") (ifseqformula "58"))
                           (rule "eqSymm" (formula "18") (term "0,1"))
                           (rule "replace_known_left" (formula "18") (term "0,1") (ifseqformula "20"))
                            (builtin "One Step Simplification" (formula "18"))
                           (rule "Class_invariant_axiom_for_java_math_BigInteger" (formula "18") (term "1,0"))
                           (rule "replace_known_left" (formula "18") (term "1,1,0") (ifseqformula "58"))
                            (builtin "One Step Simplification" (formula "18") (ifInst ""  (formula "96")))
                           (rule "Class_invariant_axiom_for_java_math_BigInteger" (formula "18") (term "0"))
                           (rule "replace_known_right" (formula "18") (term "0,0,0") (ifseqformula "95"))
                            (builtin "One Step Simplification" (formula "18") (ifInst ""  (formula "20")))
                           (rule "applyEq" (formula "57") (term "4") (ifseqformula "18"))
                           (rule "applyEq" (formula "49") (term "0") (ifseqformula "18"))
                           (rule "applyEq" (formula "55") (term "0") (ifseqformula "18"))
                           (rule "Use_information_flow_contract_for_multiply_1272441881_0" (formula "72") (ifseqformula "40"))
                           (rule "replaceKnownSelect_taclet21_12" (formula "72") (term "0,1,1"))
                           (rule "replaceKnownSelect_taclet21_11" (formula "72") (term "1,1,1"))
                           (rule "replaceKnownAuxiliaryConstant_taclet010121_18" (formula "72") (term "0,1,1"))
                           (rule "replaceKnownAuxiliaryConstant_taclet1010121_19" (formula "72") (term "1,1,1"))
                           (rule "replaceKnownSelect_taclet21_9" (formula "72") (term "0,1,0,1"))
                           (rule "replaceKnownSelect_taclet21_8" (formula "72") (term "1,1,0,1"))
                           (rule "replaceKnownAuxiliaryConstant_taclet121_15" (formula "72") (term "0,1,0,1"))
                           (rule "replaceKnownAuxiliaryConstant_taclet21_10" (formula "72") (term "1,1,0,1"))
                           (rule "replaceKnownAuxiliaryConstant_taclet121_15" (formula "72") (term "1,1,0,1"))
                            (builtin "One Step Simplification" (formula "72") (ifInst ""  (formula "85")) (ifInst ""  (formula "84")) (ifInst ""  (formula "102")))
                           (rule "pullOutSelect" (formula "72") (term "0,0,1") (inst "selectSK=org_bouncycastle_math_ec_ECPoint_value_4"))
                           (rule "simplifySelectOfAnonEQ" (formula "72") (ifseqformula "63"))
                            (builtin "One Step Simplification" (formula "72") (ifInst ""  (formula "100")) (ifInst ""  (formula "51")))
                           (rule "applyEqReverse" (formula "73") (term "0,0,1") (ifseqformula "72"))
                           (rule "hideAuxiliaryEq" (formula "72"))
                           (rule "eqSymm" (formula "72") (term "0,1"))
                           (rule "applyEq" (formula "72") (term "1,0,1") (ifseqformula "4"))
                           (rule "pullOutSelect" (formula "72") (term "0,0,1") (inst "selectSK=org_bouncycastle_math_ec_ECPoint_value_5"))
                           (rule "simplifySelectOfAnonEQ" (formula "72") (ifseqformula "26"))
                            (builtin "One Step Simplification" (formula "72") (ifInst ""  (formula "99")) (ifInst ""  (formula "13")))
                           (rule "applyEqReverse" (formula "73") (term "0,0,1") (ifseqformula "72"))
                            (builtin "One Step Simplification" (formula "73"))
                           (rule "notLeft" (formula "73"))
                           (rule "hideAuxiliaryEq" (formula "72"))
                           (rule "Class_invariant_axiom_for_org_bouncycastle_math_ec_ECPoint" (formula "78") (term "0"))
                            (builtin "One Step Simplification" (formula "78"))
                           (rule "Class_invariant_axiom_for_org_bouncycastle_math_ec_ECPoint" (formula "78"))
                           (rule "closeTrue" (formula "78"))
                        )
                     )
                     (branch "result_228_A_1.value@heapAtPre_A«anonHeapFunction» ≥ 0 FALSE"
                        (rule "inEqSimp_geqRight" (formula "79"))
                        (rule "mul_literals" (formula "1") (term "1,0,0"))
                        (rule "add_literals" (formula "1") (term "0,0"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "1"))
                        (rule "mul_literals" (formula "1") (term "1"))
                        (rule "inEqSimp_contradEq3" (formula "31") (term "0") (ifseqformula "1"))
                        (rule "mul_literals" (formula "31") (term "1,0,0,0"))
                        (rule "add_zero_right" (formula "31") (term "0,0,0"))
                        (rule "qeq_literals" (formula "31") (term "0,0"))
                         (builtin "One Step Simplification" (formula "31"))
                        (rule "andLeft" (formula "31"))
                        (rule "andLeft" (formula "31"))
                        (rule "applyEq" (formula "35") (term "0,0") (ifseqformula "32"))
                        (rule "polySimp_mulComm0" (formula "35") (term "0"))
                        (rule "applyEq" (formula "31") (term "0") (ifseqformula "35"))
                        (rule "inEqSimp_homoInEq0" (formula "31"))
                        (rule "polySimp_mulComm0" (formula "31") (term "1,0"))
                        (rule "polySimp_rightDist" (formula "31") (term "1,0"))
                        (rule "polySimp_mulLiterals" (formula "31") (term "1,1,0"))
                        (rule "polySimp_elimOne" (formula "31") (term "1,1,0"))
                        (rule "polySimp_mulComm0" (formula "31") (term "0,1,0"))
                        (rule "polySimp_addAssoc" (formula "31") (term "0"))
                        (rule "polySimp_addComm0" (formula "31") (term "0,0"))
                        (rule "polySimp_pullOutFactor2b" (formula "31") (term "0"))
                        (rule "add_literals" (formula "31") (term "1,1,0"))
                        (rule "times_zero_1" (formula "31") (term "1,0"))
                        (rule "add_zero_right" (formula "31") (term "0"))
                        (rule "applyEq" (formula "33") (term "0") (ifseqformula "35"))
                        (rule "inEqSimp_homoInEq1" (formula "33"))
                        (rule "polySimp_mulComm0" (formula "33") (term "1,0"))
                        (rule "polySimp_rightDist" (formula "33") (term "1,0"))
                        (rule "polySimp_mulLiterals" (formula "33") (term "1,1,0"))
                        (rule "polySimp_elimOne" (formula "33") (term "1,1,0"))
                        (rule "polySimp_mulComm0" (formula "33") (term "0,1,0"))
                        (rule "polySimp_addComm1" (formula "33") (term "0"))
                        (rule "polySimp_addAssoc" (formula "33") (term "0,0"))
                        (rule "polySimp_addComm1" (formula "33") (term "0,0,0"))
                        (rule "polySimp_pullOutFactor2b" (formula "33") (term "0,0"))
                        (rule "add_literals" (formula "33") (term "1,1,0,0"))
                        (rule "times_zero_1" (formula "33") (term "1,0,0"))
                        (rule "add_zero_right" (formula "33") (term "0,0"))
                        (rule "applyEq" (formula "34") (term "0,1") (ifseqformula "32"))
                        (rule "inEqSimp_invertInEq1" (formula "31"))
                        (rule "polySimp_mulLiterals" (formula "31") (term "0"))
                        (rule "mul_literals" (formula "31") (term "1"))
                        (rule "polySimp_elimOne" (formula "31") (term "0"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "33"))
                        (rule "polySimp_mulComm0" (formula "33") (term "1"))
                        (rule "polySimp_rightDist" (formula "33") (term "1"))
                        (rule "mul_literals" (formula "33") (term "0,1"))
                        (rule "polySimp_mulLiterals" (formula "33") (term "1,1"))
                        (rule "polySimp_elimOne" (formula "33") (term "1,1"))
                        (rule "shift_paren_or" (formula "4") (term "0,0,0"))
                         (builtin "One Step Simplification" (formula "4"))
                        (rule "eqSymm" (formula "4") (term "1,1,0,0,0"))
                        (rule "castedGetAny" (formula "4") (term "0,0,1,0,0,0"))
                        (rule "castedGetAny" (formula "4") (term "1,0,0,0,0,0,0"))
                        (rule "castedGetAny" (formula "4") (term "0,1,1,0,0,0"))
                         (builtin "One Step Simplification" (formula "4"))
                        (rule "true_left" (formula "4"))
                        (rule "shift_paren_or" (formula "3") (term "0,0,0"))
                         (builtin "One Step Simplification" (formula "3"))
                        (rule "eqSymm" (formula "3") (term "1,1,0,0,0"))
                        (rule "castedGetAny" (formula "3") (term "0,0,1,0,0,0"))
                        (rule "castedGetAny" (formula "3") (term "1,0,0,0,0,0,0"))
                        (rule "castedGetAny" (formula "3") (term "0,1,1,0,0,0"))
                         (builtin "One Step Simplification" (formula "3"))
                        (rule "true_left" (formula "3"))
                        (rule "cnf_rightDist" (formula "2") (term "0,0,0"))
                        (rule "distr_forallAnd" (formula "2") (term "0,0"))
                        (rule "distr_forallAnd" (formula "2") (term "0"))
                        (rule "distr_forallAnd" (formula "2"))
                        (rule "andLeft" (formula "2"))
                        (rule "commute_or_2" (formula "2") (term "0,0,0"))
                         (builtin "One Step Simplification" (formula "2"))
                        (rule "eqSymm" (formula "2") (term "1,0,0,0,0"))
                        (rule "castedGetAny" (formula "2") (term "1,0,0,1,0,0,0"))
                        (rule "castedGetAny" (formula "2") (term "0,0,0,0,0,0"))
                        (rule "castedGetAny" (formula "2") (term "0,1,0,0,0,0"))
                         (builtin "One Step Simplification" (formula "2"))
                        (rule "true_left" (formula "2"))
                        (rule "shift_paren_or" (formula "2") (term "0,0,0"))
                         (builtin "One Step Simplification" (formula "2"))
                        (rule "eqSymm" (formula "2") (term "1,1,0,0,0"))
                        (rule "castedGetAny" (formula "2") (term "1,0,0,0,0,0,0"))
                        (rule "castedGetAny" (formula "2") (term "0,0,1,0,0,0"))
                        (rule "castedGetAny" (formula "2") (term "0,1,1,0,0,0"))
                         (builtin "One Step Simplification" (formula "2"))
                        (rule "true_left" (formula "2"))
                        (rule "Use_information_flow_contract_for_compareTo_325434207" (formula "19") (ifseqformula "19"))
                         (builtin "One Step Simplification" (formula "19") (ifInst ""  (formula "95")) (ifInst ""  (formula "95")))
                        (rule "true_left" (formula "19"))
                        (rule "Use_information_flow_contract_for_getOrder_757678341" (formula "62") (ifseqformula "25"))
                        (rule "replace_known_left" (formula "62") (term "1,1") (ifseqformula "7"))
                         (builtin "One Step Simplification" (formula "62"))
                        (rule "true_left" (formula "62"))
                        (rule "Use_information_flow_contract_for_multiply_1272441881" (formula "73") (ifseqformula "39"))
                        (rule "replaceKnownSelect_taclet21_11" (formula "73") (term "1,1,1"))
                        (rule "replaceKnownSelect_taclet21_12" (formula "73") (term "0,1,1"))
                        (rule "replaceKnownAuxiliaryConstant_taclet1010121_19" (formula "73") (term "1,1,1"))
                        (rule "replaceKnownAuxiliaryConstant_taclet010121_18" (formula "73") (term "0,1,1"))
                        (rule "replaceKnownSelect_taclet21_8" (formula "73") (term "1,1,0,1"))
                        (rule "replaceKnownSelect_taclet21_9" (formula "73") (term "0,1,0,1"))
                        (rule "replaceKnownAuxiliaryConstant_taclet21_10" (formula "73") (term "1,1,0,1"))
                         (builtin "One Step Simplification" (formula "73") (ifInst ""  (formula "86")) (ifInst ""  (formula "85")) (ifInst ""  (formula "103")))
                        (rule "pullOutSelect" (formula "73") (term "0,0,1") (inst "selectSK=org_bouncycastle_math_ec_ECPoint_value_4"))
                        (rule "simplifySelectOfAnonEQ" (formula "73") (ifseqformula "64"))
                         (builtin "One Step Simplification" (formula "73") (ifInst ""  (formula "101")) (ifInst ""  (formula "51")))
                        (rule "applyEqReverse" (formula "74") (term "0,0,1") (ifseqformula "73"))
                        (rule "hideAuxiliaryEq" (formula "73"))
                        (rule "eqSymm" (formula "73") (term "0,1"))
                        (rule "applyEq" (formula "73") (term "1,0,1") (ifseqformula "5"))
                        (rule "pullOutSelect" (formula "73") (term "0,0,1") (inst "selectSK=org_bouncycastle_math_ec_ECPoint_value_5"))
                        (rule "simplifySelectOfAnonEQ" (formula "73") (ifseqformula "26"))
                         (builtin "One Step Simplification" (formula "73") (ifInst ""  (formula "100")) (ifInst ""  (formula "14")))
                        (rule "applyEqReverse" (formula "74") (term "0,0,1") (ifseqformula "73"))
                         (builtin "One Step Simplification" (formula "74"))
                        (rule "notLeft" (formula "74"))
                        (rule "hideAuxiliaryEq" (formula "73"))
                        (rule "Class_invariant_axiom_for_org_bouncycastle_math_ec_ECPoint" (formula "79") (term "1"))
                         (builtin "One Step Simplification" (formula "79"))
                        (rule "Class_invariant_axiom_for_org_bouncycastle_math_ec_ECPoint" (formula "79"))
                        (rule "closeTrue" (formula "79"))
                     )
                  )
               )
               (branch " resultAtPost_226_B.<created>@heapAtPre_B«anonHeapFunction» = TRUE FALSE"
                  (rule "applyEqReverse" (formula "2") (term "1,0") (ifseqformula "1"))
                  (rule "hideAuxiliaryEq" (formula "1"))
                  (rule "replace_known_right" (formula "1") (term "1,0,0") (ifseqformula "76"))
                   (builtin "One Step Simplification" (formula "1"))
                  (rule "replace_known_right" (formula "69") (term "1") (ifseqformula "76"))
                   (builtin "One Step Simplification" (formula "69"))
                  (rule "Class_axiom_0_in_de_polyas_core3_open_cred_CredTool" (inst "seq=seq") (inst "i=i") (inst "str=str") (inst "seq_0=seq_0") (inst "i_0=i_0") (inst "sv_heap=heapAtPre_B<<anonHeapFunction>>"))
                  (rule "andLeft" (formula "1"))
                  (rule "castedGetAny" (formula "1") (term "0,0,1,0,0"))
                  (rule "castedGetAny" (formula "2") (term "0,1,1,0,0,0"))
                  (rule "castedGetAny" (formula "1") (term "0,0,0,0,0"))
                  (rule "nnf_imp2or" (formula "1") (term "0,0"))
                   (builtin "One Step Simplification" (formula "1"))
                  (rule "nnf_imp2or" (formula "2") (term "0,0,0"))
                  (rule "nnf_imp2or" (formula "2") (term "1,0,0,0"))
                  (rule "nnf_notAnd" (formula "2") (term "0,0,0,0"))
                   (builtin "One Step Simplification" (formula "2"))
                  (rule "nnf_notOr" (formula "2") (term "0,0,0,0,0"))
                  (rule "nnf_notAnd" (formula "2") (term "0,1,0,0,0"))
                   (builtin "One Step Simplification" (formula "2"))
                  (rule "commute_or" (formula "2") (term "0,0,0,0"))
                  (rule "commute_or_2" (formula "2") (term "0,0,0"))
                  (rule "shift_paren_or" (formula "2") (term "0,0,0,0"))
                  (rule "commute_and" (formula "2") (term "1,0,0,0"))
                  (rule "commute_or" (formula "2") (term "1,0,0,0,0,0"))
                  (rule "shift_paren_or" (formula "2") (term "0,0,0,0,0"))
                   (builtin "One Step Simplification" (formula "2"))
                  (rule "commute_or_2" (formula "2") (term "0,0,0,0"))
                  (rule "cnf_rightDist" (formula "2") (term "0,0,0"))
                  (rule "distr_forallAnd" (formula "2") (term "0,0"))
                  (rule "distr_forallAnd" (formula "2") (term "0"))
                  (rule "distr_forallAnd" (formula "2"))
                  (rule "andLeft" (formula "2"))
                  (rule "commute_or_2" (formula "2") (term "0,0,0"))
                   (builtin "One Step Simplification" (formula "2"))
                  (rule "eqSymm" (formula "2") (term "1,0,0,0,0"))
                  (rule "castedGetAny" (formula "2") (term "0,0,0,0,0,0"))
                  (rule "castedGetAny" (formula "2") (term "1,0,0,1,0,0,0"))
                  (rule "castedGetAny" (formula "2") (term "0,1,0,0,0,0"))
                   (builtin "One Step Simplification" (formula "2"))
                  (rule "true_left" (formula "2"))
                  (rule "shift_paren_or" (formula "2") (term "0,0,0"))
                   (builtin "One Step Simplification" (formula "2"))
                  (rule "eqSymm" (formula "2") (term "1,1,0,0,0"))
                  (rule "castedGetAny" (formula "2") (term "0,0,0,0,0,0"))
                  (rule "castedGetAny" (formula "2") (term "0,0,1,0,0,0"))
                  (rule "castedGetAny" (formula "2") (term "0,1,1,0,0,0"))
                   (builtin "One Step Simplification" (formula "2"))
                  (rule "true_left" (formula "2"))
                  (rule "Class_axiom_0_in_de_polyas_core3_open_cred_CredTool" (inst "seq=seq") (inst "i=i") (inst "str=str") (inst "seq_0=seq_0") (inst "i_0=i_0") (inst "sv_heap=anon_heap_mod<<anonHeapFunction>>"))
                  (rule "andLeft" (formula "1"))
                  (rule "castedGetAny" (formula "2") (term "0,1,1,0,0,0"))
                  (rule "castedGetAny" (formula "1") (term "0,0,0,0,0"))
                  (rule "castedGetAny" (formula "1") (term "0,0,1,0,0"))
                  (rule "nnf_imp2or" (formula "1") (term "0,0"))
                   (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "3")))
                  (rule "true_left" (formula "1"))
                  (rule "nnf_imp2or" (formula "1") (term "0,0,0"))
                  (rule "nnf_notAnd" (formula "1") (term "0,0,0,0"))
                   (builtin "One Step Simplification" (formula "1"))
                  (rule "nnf_imp2or" (formula "1") (term "1,0,0,0"))
                  (rule "nnf_notOr" (formula "1") (term "0,0,0,0,0"))
                  (rule "nnf_notAnd" (formula "1") (term "0,1,0,0,0"))
                   (builtin "One Step Simplification" (formula "1"))
                  (rule "commute_or" (formula "1") (term "0,0,0,0"))
                  (rule "commute_or_2" (formula "1") (term "0,0,0"))
                  (rule "shift_paren_or" (formula "1") (term "0,0,0,0"))
                  (rule "commute_and" (formula "1") (term "1,0,0,0"))
                  (rule "shift_paren_or" (formula "1") (term "0,0,0,0,0"))
                  (rule "commute_or_2" (formula "1") (term "0,0,0,0,0"))
                   (builtin "One Step Simplification" (formula "1"))
                  (rule "commute_or_2" (formula "1") (term "0,0,0,0"))
                  (rule "cnf_rightDist" (formula "1") (term "0,0,0"))
                  (rule "distr_forallAnd" (formula "1") (term "0,0"))
                  (rule "distr_forallAnd" (formula "1") (term "0"))
                  (rule "distr_forallAnd" (formula "1"))
                  (rule "andLeft" (formula "1"))
                  (rule "commute_or_2" (formula "1") (term "0,0,0"))
                   (builtin "One Step Simplification" (formula "1"))
                  (rule "eqSymm" (formula "1") (term "1,0,0,0,0"))
                  (rule "castedGetAny" (formula "1") (term "0,0,0,0,0,0"))
                  (rule "castedGetAny" (formula "1") (term "1,0,0,1,0,0,0"))
                  (rule "castedGetAny" (formula "1") (term "0,1,0,0,0,0"))
                   (builtin "One Step Simplification" (formula "1"))
                  (rule "true_left" (formula "1"))
                  (rule "shift_paren_or" (formula "1") (term "0,0,0"))
                   (builtin "One Step Simplification" (formula "1"))
                  (rule "eqSymm" (formula "1") (term "1,1,0,0,0"))
                  (rule "castedGetAny" (formula "1") (term "0,0,0,0,0,0"))
                  (rule "castedGetAny" (formula "1") (term "0,0,1,0,0,0"))
                  (rule "castedGetAny" (formula "1") (term "0,1,1,0,0,0"))
                   (builtin "One Step Simplification" (formula "1"))
                  (rule "true_left" (formula "1"))
                  (rule "Class_axiom_0_in_de_polyas_core3_open_cred_CredTool" (inst "seq=seq") (inst "i=i") (inst "str=str") (inst "seq_0=seq_0") (inst "i_0=i_0") (inst "sv_heap=anon_heap_multiply<<anonHeapFunction>>"))
                  (rule "andLeft" (formula "1"))
                  (rule "castedGetAny" (formula "2") (term "0,1,1,0,0,0"))
                  (rule "castedGetAny" (formula "1") (term "0,0,0,0,0"))
                  (rule "castedGetAny" (formula "1") (term "0,0,1,0,0"))
                  (rule "nnf_imp2or" (formula "1") (term "0,0"))
                   (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "3")))
                  (rule "true_left" (formula "1"))
                  (rule "nnf_imp2or" (formula "1") (term "0,0,0"))
                  (rule "nnf_imp2or" (formula "1") (term "1,0,0,0"))
                  (rule "nnf_notAnd" (formula "1") (term "0,0,0,0"))
                   (builtin "One Step Simplification" (formula "1"))
                  (rule "nnf_notAnd" (formula "1") (term "0,1,0,0,0"))
                   (builtin "One Step Simplification" (formula "1"))
                  (rule "nnf_notOr" (formula "1") (term "0,0,0,0,0"))
                  (rule "commute_or" (formula "1") (term "0,0,0,0"))
                  (rule "commute_or_2" (formula "1") (term "0,0,0"))
                  (rule "shift_paren_or" (formula "1") (term "0,0,0,0"))
                  (rule "Class_axiom_0_in_de_polyas_core3_open_cred_CredTool" (inst "seq=seq") (inst "i=i") (inst "str=str") (inst "seq_0=seq_0") (inst "i_0=i_0") (inst "sv_heap=heapAtPre_A<<anonHeapFunction>>"))
                  (rule "andLeft" (formula "1"))
                  (rule "castedGetAny" (formula "1") (term "0,0,0,0,0"))
                  (rule "castedGetAny" (formula "1") (term "0,0,1,0,0"))
                  (rule "castedGetAny" (formula "2") (term "0,1,1,0,0,0"))
                  (rule "nnf_imp2or" (formula "1") (term "0,0"))
                   (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "4")))
                  (rule "true_left" (formula "1"))
                  (rule "nnf_imp2or" (formula "1") (term "0,0,0"))
                  (rule "nnf_notAnd" (formula "1") (term "0,0,0,0"))
                   (builtin "One Step Simplification" (formula "1"))
                  (rule "nnf_imp2or" (formula "1") (term "1,0,0,0"))
                  (rule "nnf_notOr" (formula "1") (term "0,0,0,0,0"))
                  (rule "nnf_notAnd" (formula "1") (term "0,1,0,0,0"))
                   (builtin "One Step Simplification" (formula "1"))
                  (rule "commute_or" (formula "1") (term "0,0,0,0"))
                  (rule "commute_or_2" (formula "1") (term "0,0,0"))
                  (rule "Class_axiom_0_in_de_polyas_core3_open_cred_CredTool" (inst "seq=seq") (inst "i=i") (inst "str=str") (inst "seq_0=seq_0") (inst "i_0=i_0") (inst "sv_heap=anon(heapAtPre_A<<anonHeapFunction>>,
     empty,
     anon_heap_mod<<anonHeapFunction>>)"))
                   (builtin "One Step Simplification" (formula "1"))
                  (rule "andLeft" (formula "1"))
                  (rule "castedGetAny" (formula "1") (term "0,0,0,0,0"))
                  (rule "castedGetAny" (formula "1") (term "0,0,1,0,0"))
                  (rule "castedGetAny" (formula "2") (term "0,1,1,0,0,0"))
                  (rule "nnf_imp2or" (formula "1") (term "0,0"))
                   (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "5")))
                  (rule "true_left" (formula "1"))
                  (rule "nnf_imp2or" (formula "1") (term "0,0,0"))
                  (rule "nnf_notAnd" (formula "1") (term "0,0,0,0"))
                   (builtin "One Step Simplification" (formula "1"))
                  (rule "nnf_imp2or" (formula "1") (term "1,0,0,0"))
                  (rule "nnf_notOr" (formula "1") (term "0,0,0,0,0"))
                  (rule "nnf_notAnd" (formula "1") (term "0,1,0,0,0"))
                   (builtin "One Step Simplification" (formula "1"))
                  (rule "nnf_notOr" (formula "1") (term "1,0,0,0,0,0"))
                  (rule "Class_axiom_0_in_de_polyas_core3_open_cred_CredTool" (inst "seq=seq") (inst "i=i") (inst "str=str") (inst "seq_0=seq_0") (inst "i_0=i_0") (inst "sv_heap=heapAfter_mod_A_0"))
                  (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "1,0,0,0,0,0,1") (ifseqformula "30"))
                  (rule "andLeft" (formula "1"))
                  (rule "castedGetAny" (formula "1") (term "0,0,0,0,0"))
                  (rule "castedGetAny" (formula "2") (term "0,1,1,0,0,0"))
                  (rule "castedGetAny" (formula "1") (term "0,0,1,0,0"))
                  (rule "nnf_imp2or" (formula "1") (term "0,0"))
                   (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "6")))
                  (rule "true_left" (formula "1"))
                  (rule "nnf_imp2or" (formula "1") (term "0,0,0"))
                  (rule "nnf_notAnd" (formula "1") (term "0,0,0,0"))
                   (builtin "One Step Simplification" (formula "1"))
                  (rule "nnf_imp2or" (formula "1") (term "1,0,0,0"))
                  (rule "nnf_notOr" (formula "1") (term "0,0,0,0,0"))
                  (rule "nnf_notAnd" (formula "1") (term "0,1,0,0,0"))
                   (builtin "One Step Simplification" (formula "1"))
                  (rule "nnf_notOr" (formula "1") (term "1,0,0,0,0,0"))
                  (rule "Class_axiom_0_in_de_polyas_core3_open_cred_CredTool" (inst "seq=seq") (inst "i=i") (inst "str=str") (inst "seq_0=seq_0") (inst "i_0=i_0") (inst "sv_heap=anon(heapAfter_mod_A_0,
     empty,
     anon_heap_multiply<<anonHeapFunction>>)"))
                   (builtin "One Step Simplification" (formula "1"))
                  (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,1,0,0,0,0,0,1") (ifseqformula "30"))
                  (rule "andLeft" (formula "1"))
                  (rule "castedGetAny" (formula "1") (term "0,0,0,0,0"))
                  (rule "castedGetAny" (formula "2") (term "0,1,1,0,0,0"))
                  (rule "castedGetAny" (formula "1") (term "0,0,1,0,0"))
                  (rule "nnf_imp2or" (formula "1") (term "0,0"))
                   (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "6")))
                  (rule "true_left" (formula "1"))
                  (rule "nnf_imp2or" (formula "1") (term "0,0,0"))
                  (rule "nnf_imp2or" (formula "1") (term "1,0,0,0"))
                  (rule "nnf_notAnd" (formula "1") (term "0,0,0,0"))
                   (builtin "One Step Simplification" (formula "1"))
                  (rule "nnf_notOr" (formula "1") (term "0,0,0,0,0"))
                  (rule "nnf_notAnd" (formula "1") (term "0,1,0,0,0"))
                   (builtin "One Step Simplification" (formula "1"))
                  (rule "nnf_notOr" (formula "1") (term "1,0,0,0,0,0"))
                  (rule "nnf_notOr" (formula "1") (term "0,1,0,0,0,0,0"))
                  (rule "Class_axiom_0_in_de_polyas_core3_open_cred_CredTool" (inst "seq=seq") (inst "i=i") (inst "str=str") (inst "seq_0=seq_0") (inst "i_0=i_0") (inst "sv_heap=heapAfter_multiply_A_1"))
                  (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "1,0,0,0,0,0,1") (ifseqformula "38"))
                  (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,1,0,0,0,0,0,1") (ifseqformula "31"))
                  (rule "andLeft" (formula "1"))
                  (rule "castedGetAny" (formula "1") (term "0,0,0,0,0"))
                  (rule "castedGetAny" (formula "1") (term "0,0,1,0,0"))
                  (rule "castedGetAny" (formula "2") (term "0,1,1,0,0,0"))
                  (rule "nnf_imp2or" (formula "1") (term "0,0"))
                   (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "7")))
                  (rule "true_left" (formula "1"))
                  (rule "nnf_imp2or" (formula "1") (term "0,0,0"))
                  (rule "nnf_imp2or" (formula "1") (term "1,0,0,0"))
                  (rule "nnf_notAnd" (formula "1") (term "0,0,0,0"))
                   (builtin "One Step Simplification" (formula "1"))
                  (rule "nnf_notAnd" (formula "1") (term "0,1,0,0,0"))
                   (builtin "One Step Simplification" (formula "1"))
                  (rule "nnf_notOr" (formula "1") (term "0,0,0,0,0"))
                  (rule "nnf_notOr" (formula "1") (term "1,0,0,0,0,0"))
                  (rule "nnf_notOr" (formula "1") (term "0,1,0,0,0,0,0"))
                  (rule "Class_axiom_0_in_de_polyas_core3_open_cred_CredTool" (inst "seq=seq") (inst "i=i") (inst "str=str") (inst "seq_0=seq_0") (inst "i_0=i_0") (inst "sv_heap=heapAtPost_A"))
                  (rule "andLeft" (formula "1"))
                  (rule "castedGetAny" (formula "1") (term "0,0,0,0,0"))
                  (rule "castedGetAny" (formula "2") (term "0,1,1,0,0,0"))
                  (rule "castedGetAny" (formula "1") (term "0,0,1,0,0"))
                  (rule "applyEq" (formula "2") (term "0,0,1,0,0,0,0,0") (ifseqformula "47"))
                  (rule "selectCreatedOfAnonAsFormulaEQ" (formula "2") (term "1,0,0,0,0,0") (ifseqformula "39"))
                  (rule "selectCreatedOfAnonAsFormulaEQ" (formula "2") (term "0,1,0,0,0,0,0") (ifseqformula "32"))
                  (rule "nnf_imp2or" (formula "1") (term "0,0"))
                   (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "7")))
                  (rule "true_left" (formula "1"))
                  (rule "nnf_imp2or" (formula "1") (term "0,0,0"))
                  (rule "nnf_imp2or" (formula "1") (term "1,0,0,0"))
                  (rule "nnf_notAnd" (formula "1") (term "0,0,0,0"))
                   (builtin "One Step Simplification" (formula "1"))
                  (rule "nnf_notAnd" (formula "1") (term "0,1,0,0,0"))
                   (builtin "One Step Simplification" (formula "1"))
                  (rule "nnf_notOr" (formula "1") (term "0,0,0,0,0"))
                  (rule "nnf_notOr" (formula "1") (term "1,0,0,0,0,0"))
                  (rule "nnf_notOr" (formula "1") (term "0,1,0,0,0,0,0"))
                  (rule "Class_axiom_0_in_de_polyas_core3_open_cred_CredTool" (inst "seq=seq") (inst "i=i") (inst "str=str") (inst "seq_0=seq_0") (inst "i_0=i_0") (inst "sv_heap=anon(heapAtPre_B<<anonHeapFunction>>,
     empty,
     anon_heap_mod<<anonHeapFunction>>)"))
                   (builtin "One Step Simplification" (formula "1"))
                  (rule "andLeft" (formula "1"))
                  (rule "castedGetAny" (formula "2") (term "0,1,1,0,0,0"))
                  (rule "castedGetAny" (formula "1") (term "0,0,1,0,0"))
                  (rule "castedGetAny" (formula "1") (term "0,0,0,0,0"))
                  (rule "nnf_imp2or" (formula "1") (term "0,0"))
                   (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "7")))
                  (rule "true_left" (formula "1"))
                  (rule "nnf_imp2or" (formula "1") (term "0,0,0"))
                  (rule "nnf_notAnd" (formula "1") (term "0,0,0,0"))
                   (builtin "One Step Simplification" (formula "1"))
                  (rule "nnf_imp2or" (formula "1") (term "1,0,0,0"))
                  (rule "nnf_notOr" (formula "1") (term "0,0,0,0,0"))
                  (rule "nnf_notAnd" (formula "1") (term "0,1,0,0,0"))
                   (builtin "One Step Simplification" (formula "1"))
                  (rule "nnf_notOr" (formula "1") (term "1,0,0,0,0,0"))
                  (rule "Class_axiom_0_in_de_polyas_core3_open_cred_CredTool" (inst "seq=seq") (inst "i=i") (inst "str=str") (inst "seq_0=seq_0") (inst "i_0=i_0") (inst "sv_heap=heapAfter_mod_B_0"))
                  (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "1,0,0,0,0,0,1") (ifseqformula "67"))
                  (rule "andLeft" (formula "1"))
                  (rule "castedGetAny" (formula "1") (term "0,0,1,0,0"))
                  (rule "castedGetAny" (formula "2") (term "0,1,1,0,0,0"))
                  (rule "castedGetAny" (formula "1") (term "0,0,0,0,0"))
                  (rule "nnf_imp2or" (formula "1") (term "0,0"))
                   (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "8")))
                  (rule "true_left" (formula "1"))
                  (rule "nnf_imp2or" (formula "1") (term "0,0,0"))
                  (rule "nnf_notAnd" (formula "1") (term "0,0,0,0"))
                   (builtin "One Step Simplification" (formula "1"))
                  (rule "nnf_imp2or" (formula "1") (term "1,0,0,0"))
                  (rule "nnf_notOr" (formula "1") (term "0,0,0,0,0"))
                  (rule "nnf_notAnd" (formula "1") (term "0,1,0,0,0"))
                   (builtin "One Step Simplification" (formula "1"))
                  (rule "nnf_notOr" (formula "1") (term "1,0,0,0,0,0"))
                  (rule "Class_axiom_0_in_de_polyas_core3_open_cred_CredTool" (inst "seq=seq") (inst "i=i") (inst "str=str") (inst "seq_0=seq_0") (inst "i_0=i_0") (inst "sv_heap=anon(heapAfter_mod_B_0,
     empty,
     anon_heap_multiply<<anonHeapFunction>>)"))
                   (builtin "One Step Simplification" (formula "1"))
                  (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,1,0,0,0,0,0,1") (ifseqformula "67"))
                  (rule "andLeft" (formula "1"))
                  (rule "castedGetAny" (formula "1") (term "0,0,1,0,0"))
                  (rule "castedGetAny" (formula "1") (term "0,0,0,0,0"))
                  (rule "castedGetAny" (formula "2") (term "0,1,1,0,0,0"))
                  (rule "nnf_imp2or" (formula "1") (term "0,0"))
                   (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "8")))
                  (rule "true_left" (formula "1"))
                  (rule "nnf_imp2or" (formula "1") (term "0,0,0"))
                  (rule "nnf_notAnd" (formula "1") (term "0,0,0,0"))
                   (builtin "One Step Simplification" (formula "1"))
                  (rule "nnf_imp2or" (formula "1") (term "1,0,0,0"))
                  (rule "nnf_notOr" (formula "1") (term "0,0,0,0,0"))
                  (rule "nnf_notAnd" (formula "1") (term "0,1,0,0,0"))
                   (builtin "One Step Simplification" (formula "1"))
                  (rule "nnf_notOr" (formula "1") (term "1,0,0,0,0,0"))
                  (rule "nnf_notOr" (formula "1") (term "0,1,0,0,0,0,0"))
                  (rule "Class_axiom_0_in_de_polyas_core3_open_cred_CredTool" (inst "seq=seq") (inst "i=i") (inst "str=str") (inst "seq_0=seq_0") (inst "i_0=i_0") (inst "sv_heap=heapAfter_multiply_B_1"))
                  (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "1,0,0,0,0,0,1") (ifseqformula "75"))
                  (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,1,0,0,0,0,0,1") (ifseqformula "68"))
                  (rule "andLeft" (formula "1"))
                  (rule "castedGetAny" (formula "2") (term "0,1,1,0,0,0"))
                  (rule "castedGetAny" (formula "1") (term "0,0,1,0,0"))
                  (rule "castedGetAny" (formula "1") (term "0,0,0,0,0"))
                  (rule "nnf_imp2or" (formula "1") (term "0,0"))
                   (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "9")))
                  (rule "true_left" (formula "1"))
                  (rule "nnf_imp2or" (formula "1") (term "0,0,0"))
                  (rule "nnf_imp2or" (formula "1") (term "1,0,0,0"))
                  (rule "nnf_notAnd" (formula "1") (term "0,0,0,0"))
                   (builtin "One Step Simplification" (formula "1"))
                  (rule "nnf_notOr" (formula "1") (term "0,0,0,0,0"))
                  (rule "nnf_notAnd" (formula "1") (term "0,1,0,0,0"))
                   (builtin "One Step Simplification" (formula "1"))
                  (rule "nnf_notOr" (formula "1") (term "1,0,0,0,0,0"))
                  (rule "nnf_notOr" (formula "1") (term "0,1,0,0,0,0,0"))
                  (rule "Class_axiom_0_in_de_polyas_core3_open_cred_CredTool" (inst "seq=seq") (inst "i=i") (inst "str=str") (inst "seq_0=seq_0") (inst "i_0=i_0") (inst "sv_heap=heapAtPost_B"))
                  (rule "andLeft" (formula "1"))
                  (rule "castedGetAny" (formula "1") (term "0,0,1,0,0"))
                  (rule "castedGetAny" (formula "2") (term "0,1,1,0,0,0"))
                  (rule "castedGetAny" (formula "1") (term "0,0,0,0,0"))
                  (rule "applyEqRigid" (formula "2") (term "0,0,1,0,0,0,0,0") (ifseqformula "84"))
                  (rule "selectCreatedOfAnonAsFormulaEQ" (formula "2") (term "1,0,0,0,0,0") (ifseqformula "76"))
                  (rule "selectCreatedOfAnonAsFormulaEQ" (formula "2") (term "0,1,0,0,0,0,0") (ifseqformula "69"))
                  (rule "nnf_imp2or" (formula "1") (term "0,0"))
                   (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "9")))
                  (rule "true_left" (formula "1"))
                  (rule "nnf_imp2or" (formula "1") (term "0,0,0"))
                  (rule "nnf_imp2or" (formula "1") (term "1,0,0,0"))
                  (rule "nnf_notAnd" (formula "1") (term "0,0,0,0"))
                   (builtin "One Step Simplification" (formula "1"))
                  (rule "nnf_notAnd" (formula "1") (term "0,1,0,0,0"))
                   (builtin "One Step Simplification" (formula "1"))
                  (rule "nnf_notOr" (formula "1") (term "0,0,0,0,0"))
                  (rule "nnf_notOr" (formula "1") (term "1,0,0,0,0,0"))
                  (rule "nnf_notOr" (formula "1") (term "0,1,0,0,0,0,0"))
                  (rule "div_axiom" (formula "34") (term "0,1") (inst "quotient=quotient_0"))
                  (rule "polySimp_mulComm0" (formula "34") (term "0,2,1,1"))
                  (rule "polySimp_mulComm0" (formula "34") (term "0,1,0,1"))
                  (rule "polySimp_mulComm0" (formula "34") (term "1,1,1,1,1"))
                  (rule "polySimp_mulComm0" (formula "34") (term "0,1,1,1"))
                  (rule "commute_or" (formula "4") (term "0,0,0,0"))
                  (rule "shift_paren_or" (formula "5") (term "0,0,0,0"))
                  (rule "commute_and" (formula "6") (term "1,0,0,0"))
                  (rule "shift_paren_or" (formula "6") (term "0,0,0,0,0"))
                  (rule "commute_or" (formula "4") (term "0,1,0,0,0"))
                  (rule "commute_and" (formula "5") (term "1,0,0,0"))
                  (rule "commute_or" (formula "3") (term "0,0,0,0"))
                  (rule "ifthenelse_split" (formula "9") (term "0"))
                  (branch " resultAtPost_226_A.<created>@anon_heap_mod«anonHeapFunction» = TRUE TRUE"
                     (rule "applyEqReverse" (formula "108") (term "1") (ifseqformula "10"))
                     (rule "hideAuxiliaryEq" (formula "10"))
                     (rule "eqSymm" (formula "107"))
                     (rule "replace_known_left" (formula "42") (term "0") (ifseqformula "9"))
                      (builtin "One Step Simplification" (formula "42"))
                     (rule "true_left" (formula "42"))
                     (rule "ifthenelse_split" (formula "8") (term "0"))
                     (branch " resultAtPost_226_B.<created>@anon_heap_mod«anonHeapFunction» = TRUE TRUE"
                        (rule "applyEqReverse" (formula "107") (term "1") (ifseqformula "9"))
                        (rule "hideAuxiliaryEq" (formula "9"))
                        (rule "eqSymm" (formula "106"))
                        (rule "replace_known_left" (formula "76") (term "0") (ifseqformula "8"))
                         (builtin "One Step Simplification" (formula "76"))
                        (rule "true_left" (formula "76"))
                        (rule "commute_or" (formula "3") (term "0,1,0,0,0"))
                        (rule "commute_or" (formula "2") (term "0,0,0,0"))
                        (rule "onlyCreatedObjectsAreReferenced" (formula "14") (term "1,0") (ifseqformula "22"))
                        (rule "replace_known_right" (formula "14") (term "0") (ifseqformula "92"))
                         (builtin "One Step Simplification" (formula "14") (ifInst ""  (formula "15")))
                        (rule "true_left" (formula "14"))
                        (rule "onlyCreatedObjectsAreReferenced" (formula "98") (term "0") (ifseqformula "56"))
                        (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "99"))
                         (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "62")))
                        (rule "true_left" (formula "1"))
                        (rule "onlyCreatedObjectsAreReferenced" (formula "97") (term "0") (ifseqformula "22"))
                        (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "98"))
                         (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "28")))
                        (rule "true_left" (formula "1"))
                        (rule "onlyCreatedObjectsAreReferenced" (formula "31") (term "2") (ifseqformula "22"))
                        (rule "replace_known_right" (formula "31") (term "0") (ifseqformula "96"))
                         (builtin "One Step Simplification" (formula "31") (ifInst ""  (formula "16")))
                        (rule "true_left" (formula "31"))
                        (rule "onlyCreatedObjectsAreReferenced" (formula "94") (term "0") (ifseqformula "56"))
                        (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "95"))
                         (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "50")))
                        (rule "true_left" (formula "1"))
                        (rule "onlyCreatedObjectsAreReferenced" (formula "14") (term "1,1,0") (ifseqformula "22"))
                        (rule "replace_known_right" (formula "14") (term "0") (ifseqformula "94"))
                         (builtin "One Step Simplification" (formula "14") (ifInst ""  (formula "16")))
                        (rule "true_left" (formula "14"))
                        (rule "onlyCreatedObjectsAreReferenced" (formula "48") (term "1,0") (ifseqformula "56"))
                        (rule "replace_known_right" (formula "48") (term "0") (ifseqformula "93"))
                         (builtin "One Step Simplification" (formula "48") (ifInst ""  (formula "49")))
                        (rule "true_left" (formula "48"))
                        (rule "commute_or" (formula "2") (term "0,1,0,0,0"))
                        (rule "onlyCreatedObjectsAreReferenced" (formula "63") (term "1,0") (ifseqformula "56"))
                        (rule "replace_known_left" (formula "63") (term "1") (ifseqformula "50"))
                         (builtin "One Step Simplification" (formula "63") (ifInst ""  (formula "97")))
                        (rule "true_left" (formula "63"))
                        (rule "commute_or" (formula "1") (term "0,0,0,0"))
                        (rule "commute_or" (formula "1") (term "0,1,0,0,0"))
                        (rule "commute_or_2" (formula "4") (term "0,0,0"))
                        (rule "commute_and" (formula "34") (term "0,1"))
                        (rule "commute_or_2" (formula "3") (term "0,0,0"))
                        (rule "commute_or_2" (formula "6") (term "0,0,0,0,0"))
                         (builtin "One Step Simplification" (formula "6"))
                        (rule "commute_or_2" (formula "2") (term "0,0,0"))
                        (rule "commute_or_2" (formula "1") (term "0,0,0"))
                        (rule "shift_paren_or" (formula "5") (term "0,0,0,0,0"))
                        (rule "commute_or_2" (formula "6") (term "0,0,0,0"))
                        (rule "shift_paren_or" (formula "4") (term "0,0,0,0"))
                        (rule "commute_or_2" (formula "3") (term "1,0,0,0,0"))
                        (rule "shift_paren_or" (formula "2") (term "0,0,0,0"))
                        (rule "shift_paren_or" (formula "1") (term "0,0,0,0"))
                        (rule "commute_or_2" (formula "5") (term "0,0,0,0,0"))
                         (builtin "One Step Simplification" (formula "5"))
                        (rule "commute_or_2" (formula "5") (term "0,0,0,0"))
                        (rule "shift_paren_or" (formula "3") (term "0,0,0,0"))
                        (rule "cnf_rightDist" (formula "6") (term "0,0,0"))
                        (rule "distr_forallAnd" (formula "6") (term "0,0"))
                        (rule "distr_forallAnd" (formula "6") (term "0"))
                        (rule "distr_forallAnd" (formula "6"))
                        (rule "andLeft" (formula "6"))
                        (rule "commute_or_2" (formula "6") (term "0,0,0"))
                         (builtin "One Step Simplification" (formula "6"))
                        (rule "eqSymm" (formula "6") (term "1,0,0,0,0"))
                        (rule "castedGetAny" (formula "6") (term "0,0,0,0,0,0"))
                        (rule "castedGetAny" (formula "6") (term "1,0,0,1,0,0,0"))
                        (rule "castedGetAny" (formula "6") (term "0,1,0,0,0,0"))
                         (builtin "One Step Simplification" (formula "6"))
                        (rule "true_left" (formula "6"))
                        (rule "shift_paren_or" (formula "6") (term "0,0,0"))
                         (builtin "One Step Simplification" (formula "6"))
                        (rule "eqSymm" (formula "6") (term "1,1,0,0,0"))
                        (rule "castedGetAny" (formula "6") (term "0,0,1,0,0,0"))
                        (rule "castedGetAny" (formula "6") (term "0,0,0,0,0,0"))
                        (rule "castedGetAny" (formula "6") (term "0,1,1,0,0,0"))
                         (builtin "One Step Simplification" (formula "6"))
                        (rule "true_left" (formula "6"))
                        (rule "commute_and" (formula "4") (term "1,0,0,0"))
                        (rule "commute_and" (formula "3") (term "1,0,0,0"))
                        (rule "commute_and" (formula "2") (term "1,0,0,0"))
                        (rule "cnf_rightDist" (formula "5") (term "0,0,0"))
                        (rule "distr_forallAnd" (formula "5") (term "0,0"))
                        (rule "distr_forallAnd" (formula "5") (term "0"))
                        (rule "distr_forallAnd" (formula "5"))
                        (rule "andLeft" (formula "5"))
                        (rule "commute_or_2" (formula "5") (term "0,0,0"))
                         (builtin "One Step Simplification" (formula "5"))
                        (rule "eqSymm" (formula "5") (term "1,0,0,0,0"))
                        (rule "castedGetAny" (formula "5") (term "1,0,0,1,0,0,0"))
                        (rule "castedGetAny" (formula "5") (term "0,0,0,0,0,0"))
                        (rule "castedGetAny" (formula "5") (term "0,1,0,0,0,0"))
                         (builtin "One Step Simplification" (formula "5"))
                        (rule "true_left" (formula "5"))
                        (rule "shift_paren_or" (formula "5") (term "0,0,0"))
                         (builtin "One Step Simplification" (formula "5"))
                        (rule "eqSymm" (formula "5") (term "1,1,0,0,0"))
                        (rule "castedGetAny" (formula "5") (term "0,0,1,0,0,0"))
                        (rule "castedGetAny" (formula "5") (term "0,0,0,0,0,0"))
                        (rule "castedGetAny" (formula "5") (term "0,1,1,0,0,0"))
                         (builtin "One Step Simplification" (formula "5"))
                        (rule "true_left" (formula "5"))
                        (rule "commute_and" (formula "1") (term "1,0,0,0"))
                        (rule "shift_paren_or" (formula "4") (term "0,0,0,0,0"))
                         (builtin "One Step Simplification" (formula "4"))
                        (rule "shift_paren_or" (formula "2") (term "0,0,0,0,0"))
                         (builtin "One Step Simplification" (formula "2"))
                        (rule "shift_paren_or" (formula "1") (term "0,0,0,0,0"))
                         (builtin "One Step Simplification" (formula "1"))
                        (rule "shift_paren_or" (formula "3") (term "0,0,0,0,0"))
                         (builtin "One Step Simplification" (formula "3"))
                        (rule "commute_or_2" (formula "4") (term "0,0,0,0"))
                        (rule "commute_or_2" (formula "2") (term "0,0,0,0"))
                        (rule "commute_or_2" (formula "1") (term "0,0,0,0"))
                        (rule "cnf_rightDist" (formula "3") (term "0,0,0"))
                        (rule "distr_forallAnd" (formula "3") (term "0,0"))
                        (rule "distr_forallAnd" (formula "3") (term "0"))
                        (rule "distr_forallAnd" (formula "3"))
                        (rule "andLeft" (formula "3"))
                        (rule "shift_paren_or" (formula "4") (term "0,0,0"))
                         (builtin "One Step Simplification" (formula "4"))
                        (rule "eqSymm" (formula "4") (term "1,1,0,0,0"))
                        (rule "castedGetAny" (formula "4") (term "0,0,1,0,0,0"))
                        (rule "castedGetAny" (formula "4") (term "0,0,0,0,0,0"))
                        (rule "castedGetAny" (formula "4") (term "0,1,1,0,0,0"))
                         (builtin "One Step Simplification" (formula "4"))
                        (rule "true_left" (formula "4"))
                        (rule "cnf_rightDist" (formula "4") (term "0,0,0"))
                        (rule "distr_forallAnd" (formula "4") (term "0,0"))
                        (rule "distr_forallAnd" (formula "4") (term "0"))
                        (rule "distr_forallAnd" (formula "4"))
                        (rule "andLeft" (formula "4"))
                        (rule "shift_paren_or" (formula "5") (term "0,0,0"))
                         (builtin "One Step Simplification" (formula "5"))
                        (rule "eqSymm" (formula "5") (term "1,1,0,0,0"))
                        (rule "castedGetAny" (formula "5") (term "0,0,1,0,0,0"))
                        (rule "castedGetAny" (formula "5") (term "0,0,0,0,0,0"))
                        (rule "castedGetAny" (formula "5") (term "0,1,1,0,0,0"))
                         (builtin "One Step Simplification" (formula "5"))
                        (rule "true_left" (formula "5"))
                        (rule "cnf_rightDist" (formula "2") (term "0,0,0"))
                        (rule "distr_forallAnd" (formula "2") (term "0,0"))
                        (rule "distr_forallAnd" (formula "2") (term "0"))
                        (rule "distr_forallAnd" (formula "2"))
                        (rule "andLeft" (formula "2"))
                        (rule "cnf_rightDist" (formula "1") (term "0,0,0"))
                        (rule "distr_forallAnd" (formula "1") (term "0,0"))
                        (rule "distr_forallAnd" (formula "1") (term "0"))
                        (rule "distr_forallAnd" (formula "1"))
                        (rule "andLeft" (formula "1"))
                        (rule "shift_paren_or" (formula "3") (term "0,0,0"))
                         (builtin "One Step Simplification" (formula "3"))
                        (rule "eqSymm" (formula "3") (term "1,1,0,0,0"))
                        (rule "castedGetAny" (formula "3") (term "0,0,0,0,0,0"))
                        (rule "castedGetAny" (formula "3") (term "0,0,1,0,0,0"))
                        (rule "castedGetAny" (formula "3") (term "0,1,1,0,0,0"))
                         (builtin "One Step Simplification" (formula "3"))
                        (rule "true_left" (formula "3"))
                        (rule "cnf_rightDist" (formula "3") (term "0,0,0"))
                        (rule "distr_forallAnd" (formula "3") (term "0,0"))
                        (rule "distr_forallAnd" (formula "3") (term "0"))
                        (rule "distr_forallAnd" (formula "3"))
                        (rule "andLeft" (formula "3"))
                        (rule "cnf_rightDist" (formula "4") (term "0,0,0"))
                        (rule "distr_forallAnd" (formula "4") (term "0,0"))
                        (rule "distr_forallAnd" (formula "4") (term "0"))
                        (rule "distr_forallAnd" (formula "4"))
                        (rule "andLeft" (formula "4"))
                        (rule "commute_or_2" (formula "4") (term "0,0,0"))
                         (builtin "One Step Simplification" (formula "4"))
                        (rule "eqSymm" (formula "4") (term "1,0,0,0,0"))
                        (rule "castedGetAny" (formula "4") (term "1,0,0,1,0,0,0"))
                        (rule "castedGetAny" (formula "4") (term "0,0,0,0,0,0"))
                        (rule "castedGetAny" (formula "4") (term "0,1,0,0,0,0"))
                         (builtin "One Step Simplification" (formula "4"))
                        (rule "true_left" (formula "4"))
                        (rule "shift_paren_or" (formula "3") (term "0,0,0"))
                         (builtin "One Step Simplification" (formula "3"))
                        (rule "eqSymm" (formula "3") (term "1,1,0,0,0"))
                        (rule "castedGetAny" (formula "3") (term "0,0,1,0,0,0"))
                        (rule "castedGetAny" (formula "3") (term "1,0,0,0,0,0,0"))
                        (rule "castedGetAny" (formula "3") (term "0,1,1,0,0,0"))
                         (builtin "One Step Simplification" (formula "3"))
                        (rule "true_left" (formula "3"))
                        (rule "shift_paren_or" (formula "3") (term "0,0,0"))
                         (builtin "One Step Simplification" (formula "3"))
                        (rule "eqSymm" (formula "3") (term "1,1,0,0,0"))
                        (rule "castedGetAny" (formula "3") (term "1,0,0,0,0,0,0"))
                        (rule "castedGetAny" (formula "3") (term "0,0,1,0,0,0"))
                        (rule "castedGetAny" (formula "3") (term "0,1,1,0,0,0"))
                         (builtin "One Step Simplification" (formula "3"))
                        (rule "true_left" (formula "3"))
                        (rule "cnf_rightDist" (formula "2") (term "0,0,0"))
                        (rule "distr_forallAnd" (formula "2") (term "0,0"))
                        (rule "distr_forallAnd" (formula "2") (term "0"))
                        (rule "distr_forallAnd" (formula "2"))
                        (rule "andLeft" (formula "2"))
                        (rule "commute_or_2" (formula "2") (term "0,0,0"))
                         (builtin "One Step Simplification" (formula "2"))
                        (rule "eqSymm" (formula "2") (term "1,0,0,0,0"))
                        (rule "castedGetAny" (formula "2") (term "1,0,0,1,0,0,0"))
                        (rule "castedGetAny" (formula "2") (term "0,0,0,0,0,0"))
                        (rule "castedGetAny" (formula "2") (term "0,1,0,0,0,0"))
                         (builtin "One Step Simplification" (formula "2"))
                        (rule "true_left" (formula "2"))
                        (rule "ifthenelse_split_for" (formula "30") (term "1,1"))
                        (branch "result_228_A_1.value@heapAtPre_A«anonHeapFunction» ≥ 0 TRUE"
                           (rule "cnf_rightDist" (formula "31"))
                           (rule "andLeft" (formula "31"))
                           (rule "commute_or" (formula "32"))
                           (rule "cnf_rightDist" (formula "31"))
                           (rule "andLeft" (formula "31"))
                           (rule "commute_or" (formula "32"))
                           (rule "cnf_rightDist" (formula "1") (term "0,0,0"))
                           (rule "distr_forallAnd" (formula "1") (term "0,0"))
                           (rule "distr_forallAnd" (formula "1") (term "0"))
                           (rule "distr_forallAnd" (formula "1"))
                           (rule "andLeft" (formula "1"))
                           (rule "shift_paren_or" (formula "3") (term "0,0,0"))
                            (builtin "One Step Simplification" (formula "3"))
                           (rule "eqSymm" (formula "3") (term "1,1,0,0,0"))
                           (rule "castedGetAny" (formula "3") (term "0,0,1,0,0,0"))
                           (rule "castedGetAny" (formula "3") (term "1,0,0,0,0,0,0"))
                           (rule "castedGetAny" (formula "3") (term "0,1,1,0,0,0"))
                            (builtin "One Step Simplification" (formula "3"))
                           (rule "true_left" (formula "3"))
                           (rule "shift_paren_or" (formula "2") (term "0,0,0"))
                            (builtin "One Step Simplification" (formula "2"))
                           (rule "eqSymm" (formula "2") (term "1,1,0,0,0"))
                           (rule "castedGetAny" (formula "2") (term "1,0,0,0,0,0,0"))
                           (rule "castedGetAny" (formula "2") (term "0,0,1,0,0,0"))
                           (rule "castedGetAny" (formula "2") (term "0,1,1,0,0,0"))
                            (builtin "One Step Simplification" (formula "2"))
                           (rule "true_left" (formula "2"))
                           (rule "cnf_rightDist" (formula "1") (term "0,0,0"))
                           (rule "distr_forallAnd" (formula "1") (term "0,0"))
                           (rule "distr_forallAnd" (formula "1") (term "0"))
                           (rule "distr_forallAnd" (formula "1"))
                           (rule "andLeft" (formula "1"))
                           (rule "commute_or_2" (formula "1") (term "0,0,0"))
                            (builtin "One Step Simplification" (formula "1"))
                           (rule "eqSymm" (formula "1") (term "1,0,0,0,0"))
                           (rule "castedGetAny" (formula "1") (term "0,0,0,0,0,0"))
                           (rule "castedGetAny" (formula "1") (term "1,0,0,1,0,0,0"))
                           (rule "castedGetAny" (formula "1") (term "0,1,0,0,0,0"))
                            (builtin "One Step Simplification" (formula "1"))
                           (rule "true_left" (formula "1"))
                           (rule "shift_paren_or" (formula "1") (term "0,0,0"))
                            (builtin "One Step Simplification" (formula "1"))
                           (rule "eqSymm" (formula "1") (term "1,1,0,0,0"))
                           (rule "castedGetAny" (formula "1") (term "0,0,1,0,0,0"))
                           (rule "castedGetAny" (formula "1") (term "1,0,0,0,0,0,0"))
                           (rule "castedGetAny" (formula "1") (term "0,1,1,0,0,0"))
                            (builtin "One Step Simplification" (formula "1"))
                           (rule "true_left" (formula "1"))
                           (rule "cut_direct" (formula "29") (term "0"))
                           (branch "CUT: result_228_A_1.value@heapAtPre_A«anonHeapFunction» = 0 TRUE"
                               (builtin "One Step Simplification" (formula "30"))
                              (rule "true_left" (formula "30"))
                              (rule "replace_known_left" (formula "30") (term "0") (ifseqformula "29"))
                               (builtin "One Step Simplification" (formula "30"))
                              (rule "true_left" (formula "30"))
                              (rule "replace_known_left" (formula "30") (term "0") (ifseqformula "29"))
                               (builtin "One Step Simplification" (formula "30"))
                              (rule "true_left" (formula "30"))
                              (rule "applyEq" (formula "28") (term "0") (ifseqformula "29"))
                              (rule "qeq_literals" (formula "28"))
                              (rule "true_left" (formula "28"))
                              (rule "applyEq" (formula "30") (term "1,0,0") (ifseqformula "28"))
                              (rule "polySimp_mulComm0" (formula "30") (term "0"))
                              (rule "applyEq" (formula "29") (term "1,0") (ifseqformula "28"))
                              (rule "eqSymm" (formula "29"))
                              (rule "polySimp_homoEq" (formula "29"))
                              (rule "polySimp_mulLiterals" (formula "29") (term "1,0"))
                              (rule "polySimp_elimOne" (formula "29") (term "1,0"))
                              (rule "applyEq" (formula "23") (term "1") (ifseqformula "28"))
                              (rule "applyEq" (formula "7") (term "1") (ifseqformula "28"))
                              (rule "applyEq" (formula "57") (term "1") (ifseqformula "28"))
                              (rule "applyEq" (formula "30") (term "0,0") (ifseqformula "28"))
                              (rule "times_zero_2" (formula "30") (term "0"))
                              (rule "polySimp_homoEq" (formula "30"))
                              (rule "mul_literals" (formula "30") (term "1,0"))
                              (rule "add_zero_right" (formula "30") (term "0"))
                              (rule "applyEq" (formula "29") (term "1,1,0") (ifseqformula "28"))
                              (rule "polySimp_addComm0" (formula "29") (term "0"))
                              (rule "polySimp_sepNegMonomial" (formula "30"))
                              (rule "polySimp_mulLiterals" (formula "30") (term "0"))
                              (rule "polySimp_elimOne" (formula "30") (term "0"))
                              (rule "applyEq" (formula "4") (term "0") (ifseqformula "30"))
                              (rule "applyEq" (formula "29") (term "0,1,0") (ifseqformula "30"))
                              (rule "polySimp_addComm0" (formula "29") (term "0"))
                              (rule "applyEq" (formula "29") (term "0,0,1,0") (ifseqformula "30"))
                              (rule "polySimp_addComm0" (formula "29") (term "0"))
                              (rule "applyEq" (formula "6") (term "1") (ifseqformula "30"))
                              (rule "polySimp_sepPosMonomial" (formula "29"))
                              (rule "jdiv_axiom" (formula "29") (term "0"))
                              (rule "eqSymm" (formula "29"))
                              (rule "applyEq" (formula "29") (term "1") (ifseqformula "30"))
                               (builtin "One Step Simplification" (formula "29"))
                              (rule "eqSymm" (formula "29") (term "1"))
                              (rule "polySimp_homoEq" (formula "29") (term "1"))
                              (rule "polySimp_mulLiterals" (formula "29") (term "1,0,1"))
                              (rule "polySimp_elimOne" (formula "29") (term "1,0,1"))
                              (rule "polySimp_sepPosMonomial" (formula "29") (term "1"))
                              (rule "inEqSimp_contradInEq0" (formula "29") (term "0,0") (ifseqformula "4"))
                              (rule "qeq_literals" (formula "29") (term "0,0,0"))
                               (builtin "One Step Simplification" (formula "29"))
                              (rule "true_left" (formula "29"))
                              (rule "div_axiom" (formula "29") (term "0,1") (inst "quotient=quotient_1"))
                               (builtin "One Step Simplification" (formula "29"))
                              (rule "true_left" (formula "29"))
                              (rule "Use_information_flow_contract_for_compareTo_325434207" (formula "19") (ifseqformula "19"))
                               (builtin "One Step Simplification" (formula "19") (ifInst ""  (formula "92")) (ifInst ""  (formula "92")))
                              (rule "true_left" (formula "19"))
                              (rule "Use_information_flow_contract_for_getOrder_757678341" (formula "59") (ifseqformula "25"))
                              (rule "applyEq" (formula "59") (term "0,1,1") (ifseqformula "7"))
                              (rule "eqSymm" (formula "59") (term "1,1"))
                              (rule "replace_known_left" (formula "59") (term "1,1") (ifseqformula "28"))
                               (builtin "One Step Simplification" (formula "59"))
                              (rule "true_left" (formula "59"))
                              (rule "Use_information_flow_contract_for_getOrder_757678341" (formula "59") (ifseqformula "59"))
                               (builtin "One Step Simplification" (formula "59"))
                              (rule "true_left" (formula "59"))
                              (rule "Use_information_flow_contract_for_getOrder_757678341" (formula "25") (ifseqformula "25"))
                               (builtin "One Step Simplification" (formula "25"))
                              (rule "true_left" (formula "25"))
                              (rule "Use_information_flow_contract_for_compareTo_325434207" (formula "19") (ifseqformula "53"))
                              (rule "eqSymm" (formula "19") (term "1,1"))
                              (rule "eqSymm" (formula "19") (term "0,0,1"))
                              (rule "eqSymm" (formula "19") (term "1,0,1"))
                              (rule "replace_known_right" (formula "19") (term "0,1,1,0") (ifseqformula "93"))
                               (builtin "One Step Simplification" (formula "19") (ifInst ""  (formula "92")))
                              (rule "applyEqRigid" (formula "19") (term "0,1,0,1") (ifseqformula "55"))
                              (rule "eqSymm" (formula "19") (term "1,0,1"))
                              (rule "replace_known_left" (formula "19") (term "1,0,1") (ifseqformula "21"))
                               (builtin "One Step Simplification" (formula "19"))
                              (rule "applyEq" (formula "19") (term "0,0,1") (ifseqformula "6"))
                              (rule "eqSymm" (formula "19") (term "0,1"))
                              (rule "replace_known_left" (formula "19") (term "0,1") (ifseqformula "31"))
                               (builtin "One Step Simplification" (formula "19"))
                              (rule "Class_invariant_axiom_for_java_math_BigInteger" (formula "19") (term "1,0"))
                              (rule "replace_known_right" (formula "19") (term "0,0,1,0") (ifseqformula "93"))
                               (builtin "One Step Simplification" (formula "19") (ifInst ""  (formula "55")))
                              (rule "Class_invariant_axiom_for_java_math_BigInteger" (formula "19") (term "0"))
                              (rule "replace_known_right" (formula "19") (term "0,0,0") (ifseqformula "92"))
                               (builtin "One Step Simplification" (formula "19") (ifInst ""  (formula "21")))
                              (rule "applyEq" (formula "53") (term "0") (ifseqformula "19"))
                              (rule "applyEq" (formula "53") (term "4") (ifseqformula "19"))
                              (rule "applyEq" (formula "46") (term "0") (ifseqformula "19"))
                              (rule "Use_information_flow_contract_for_multiply_1272441881" (formula "69") (ifseqformula "37"))
                              (rule "replaceKnownSelect_taclet21_11" (formula "69") (term "1,1,1"))
                              (rule "replaceKnownSelect_taclet21_12" (formula "69") (term "0,1,1"))
                              (rule "replaceKnownAuxiliaryConstant_taclet0110121_18" (formula "69") (term "1,1,1"))
                              (rule "replaceKnownAuxiliaryConstant_taclet00110121_19" (formula "69") (term "0,1,1"))
                              (rule "replaceKnownSelect_taclet21_9" (formula "69") (term "0,1,0,1"))
                              (rule "replaceKnownSelect_taclet21_8" (formula "69") (term "1,1,0,1"))
                              (rule "replaceKnownAuxiliaryConstant_taclet121_15" (formula "69") (term "0,1,0,1"))
                              (rule "replaceKnownAuxiliaryConstant_taclet21_10" (formula "69") (term "1,1,0,1"))
                              (rule "replaceKnownAuxiliaryConstant_taclet121_15" (formula "69") (term "1,1,0,1"))
                               (builtin "One Step Simplification" (formula "69") (ifInst ""  (formula "82")) (ifInst ""  (formula "81")) (ifInst ""  (formula "99")))
                              (rule "pullOutSelect" (formula "69") (term "1,0,1") (inst "selectSK=org_bouncycastle_math_ec_ECPoint_value_4"))
                              (rule "simplifySelectOfAnonEQ" (formula "69") (ifseqformula "27"))
                               (builtin "One Step Simplification" (formula "69") (ifInst ""  (formula "96")) (ifInst ""  (formula "14")))
                              (rule "applyEqReverse" (formula "70") (term "1,0,1") (ifseqformula "69"))
                              (rule "hideAuxiliaryEq" (formula "69"))
                              (rule "pullOutSelect" (formula "69") (term "0,0,1") (inst "selectSK=org_bouncycastle_math_ec_ECPoint_value_5"))
                              (rule "simplifySelectOfAnonEQ" (formula "69") (ifseqformula "60"))
                               (builtin "One Step Simplification" (formula "69") (ifInst ""  (formula "97")) (ifInst ""  (formula "48")))
                              (rule "applyEqReverse" (formula "70") (term "0,0,1") (ifseqformula "69"))
                              (rule "hideAuxiliaryEq" (formula "69"))
                              (rule "replace_known_left" (formula "69") (term "0,1") (ifseqformula "5"))
                               (builtin "One Step Simplification" (formula "69"))
                              (rule "notLeft" (formula "69"))
                              (rule "Class_invariant_axiom_for_org_bouncycastle_math_ec_ECPoint" (formula "75") (term "1"))
                               (builtin "One Step Simplification" (formula "75"))
                              (rule "Class_invariant_axiom_for_org_bouncycastle_math_ec_ECPoint" (formula "75"))
                              (rule "closeTrue" (formula "75"))
                           )
                           (branch "CUT: result_228_A_1.value@heapAtPre_A«anonHeapFunction» = 0 FALSE"
                               (builtin "One Step Simplification" (formula "29"))
                              (rule "replace_known_right" (formula "30") (term "0") (ifseqformula "79"))
                               (builtin "One Step Simplification" (formula "30"))
                              (rule "replace_known_right" (formula "31") (term "0") (ifseqformula "79"))
                               (builtin "One Step Simplification" (formula "31"))
                              (rule "applyEq" (formula "33") (term "0,0") (ifseqformula "30"))
                              (rule "polySimp_mulComm0" (formula "33") (term "0"))
                              (rule "applyEq" (formula "29") (term "0") (ifseqformula "33"))
                              (rule "inEqSimp_homoInEq0" (formula "29"))
                              (rule "polySimp_mulComm0" (formula "29") (term "1,0"))
                              (rule "polySimp_rightDist" (formula "29") (term "1,0"))
                              (rule "polySimp_mulLiterals" (formula "29") (term "1,1,0"))
                              (rule "polySimp_elimOne" (formula "29") (term "1,1,0"))
                              (rule "polySimp_mulComm0" (formula "29") (term "0,1,0"))
                              (rule "polySimp_addAssoc" (formula "29") (term "0"))
                              (rule "polySimp_addComm0" (formula "29") (term "0,0"))
                              (rule "polySimp_pullOutFactor2b" (formula "29") (term "0"))
                              (rule "add_literals" (formula "29") (term "1,1,0"))
                              (rule "times_zero_1" (formula "29") (term "1,0"))
                              (rule "add_zero_right" (formula "29") (term "0"))
                              (rule "applyEq" (formula "31") (term "0") (ifseqformula "33"))
                              (rule "inEqSimp_homoInEq1" (formula "31"))
                              (rule "polySimp_mulComm0" (formula "31") (term "1,0"))
                              (rule "polySimp_rightDist" (formula "31") (term "1,0"))
                              (rule "polySimp_mulLiterals" (formula "31") (term "1,1,0"))
                              (rule "polySimp_elimOne" (formula "31") (term "1,1,0"))
                              (rule "polySimp_mulComm0" (formula "31") (term "0,1,0"))
                              (rule "polySimp_addComm1" (formula "31") (term "0"))
                              (rule "polySimp_addAssoc" (formula "31") (term "0,0"))
                              (rule "polySimp_addComm1" (formula "31") (term "0,0,0"))
                              (rule "polySimp_pullOutFactor2b" (formula "31") (term "0,0"))
                              (rule "add_literals" (formula "31") (term "1,1,0,0"))
                              (rule "times_zero_1" (formula "31") (term "1,0,0"))
                              (rule "add_zero_right" (formula "31") (term "0,0"))
                              (rule "applyEq" (formula "32") (term "0,1") (ifseqformula "30"))
                              (rule "inEqSimp_invertInEq1" (formula "29"))
                              (rule "polySimp_mulLiterals" (formula "29") (term "0"))
                              (rule "mul_literals" (formula "29") (term "1"))
                              (rule "polySimp_elimOne" (formula "29") (term "0"))
                              (rule "inEqSimp_sepNegMonomial0" (formula "31"))
                              (rule "polySimp_mulLiterals" (formula "31") (term "0"))
                              (rule "polySimp_elimOne" (formula "31") (term "0"))
                              (rule "inEqSimp_strengthen1" (formula "28") (ifseqformula "79"))
                              (rule "add_literals" (formula "28") (term "1"))
                              (rule "inEqSimp_contradEq7" (formula "79") (ifseqformula "28"))
                              (rule "mul_literals" (formula "79") (term "1,0,0"))
                              (rule "add_zero_right" (formula "79") (term "0,0"))
                              (rule "leq_literals" (formula "79") (term "0"))
                               (builtin "One Step Simplification" (formula "79"))
                              (rule "false_right" (formula "79"))
                              (rule "Use_information_flow_contract_for_compareTo_325434207" (formula "19") (ifseqformula "19"))
                               (builtin "One Step Simplification" (formula "19") (ifInst ""  (formula "95")) (ifInst ""  (formula "95")))
                              (rule "true_left" (formula "19"))
                              (rule "Use_information_flow_contract_for_getOrder_757678341" (formula "62") (ifseqformula "25"))
                              (rule "replace_known_left" (formula "62") (term "1,1") (ifseqformula "7"))
                               (builtin "One Step Simplification" (formula "62"))
                              (rule "true_left" (formula "62"))
                              (rule "Use_information_flow_contract_for_getOrder_757678341" (formula "62") (ifseqformula "62"))
                               (builtin "One Step Simplification" (formula "62"))
                              (rule "true_left" (formula "62"))
                              (rule "Use_information_flow_contract_for_getOrder_757678341" (formula "25") (ifseqformula "25"))
                               (builtin "One Step Simplification" (formula "25"))
                              (rule "true_left" (formula "25"))
                              (rule "Use_information_flow_contract_for_compareTo_325434207" (formula "19") (ifseqformula "56"))
                              (rule "eqSymm" (formula "19") (term "1,0,1"))
                              (rule "eqSymm" (formula "19") (term "1,1"))
                              (rule "eqSymm" (formula "19") (term "0,0,1"))
                              (rule "replace_known_right" (formula "19") (term "0,1,1,0") (ifseqformula "96"))
                               (builtin "One Step Simplification" (formula "19") (ifInst ""  (formula "95")) (ifInst ""  (formula "6")))
                              (rule "applyEq" (formula "19") (term "0,0,1") (ifseqformula "58"))
                              (rule "eqSymm" (formula "19") (term "0,1"))
                              (rule "replace_known_left" (formula "19") (term "0,1") (ifseqformula "21"))
                               (builtin "One Step Simplification" (formula "19"))
                              (rule "Class_invariant_axiom_for_java_math_BigInteger" (formula "19") (term "1,0"))
                              (rule "replace_known_left" (formula "19") (term "1,1,0") (ifseqformula "58"))
                               (builtin "One Step Simplification" (formula "19") (ifInst ""  (formula "96")))
                              (rule "Class_invariant_axiom_for_java_math_BigInteger" (formula "19") (term "0"))
                              (rule "replace_known_right" (formula "19") (term "0,0,0") (ifseqformula "95"))
                               (builtin "One Step Simplification" (formula "19") (ifInst ""  (formula "21")))
                              (rule "applyEq" (formula "56") (term "0") (ifseqformula "19"))
                              (rule "applyEq" (formula "56") (term "4") (ifseqformula "19"))
                              (rule "applyEq" (formula "49") (term "0") (ifseqformula "19"))
                              (rule "Use_information_flow_contract_for_multiply_1272441881" (formula "72") (ifseqformula "40"))
                              (rule "replaceKnownSelect_taclet21_12" (formula "72") (term "0,1,1"))
                              (rule "replaceKnownSelect_taclet21_11" (formula "72") (term "1,1,1"))
                              (rule "replaceKnownAuxiliaryConstant_taclet00110121_19" (formula "72") (term "0,1,1"))
                              (rule "replaceKnownAuxiliaryConstant_taclet0110121_18" (formula "72") (term "1,1,1"))
                              (rule "replaceKnownSelect_taclet21_9" (formula "72") (term "0,1,0,1"))
                              (rule "replaceKnownSelect_taclet21_8" (formula "72") (term "1,1,0,1"))
                              (rule "replaceKnownAuxiliaryConstant_taclet121_15" (formula "72") (term "0,1,0,1"))
                              (rule "replaceKnownAuxiliaryConstant_taclet21_10" (formula "72") (term "1,1,0,1"))
                              (rule "replaceKnownAuxiliaryConstant_taclet121_15" (formula "72") (term "1,1,0,1"))
                               (builtin "One Step Simplification" (formula "72") (ifInst ""  (formula "85")) (ifInst ""  (formula "84")) (ifInst ""  (formula "102")))
                              (rule "pullOutSelect" (formula "72") (term "0,0,1") (inst "selectSK=org_bouncycastle_math_ec_ECPoint_value_4"))
                              (rule "simplifySelectOfAnonEQ" (formula "72") (ifseqformula "63"))
                               (builtin "One Step Simplification" (formula "72") (ifInst ""  (formula "100")) (ifInst ""  (formula "51")))
                              (rule "applyEqReverse" (formula "73") (term "0,0,1") (ifseqformula "72"))
                              (rule "hideAuxiliaryEq" (formula "72"))
                              (rule "eqSymm" (formula "72") (term "0,1"))
                              (rule "applyEq" (formula "72") (term "1,0,1") (ifseqformula "5"))
                              (rule "pullOutSelect" (formula "72") (term "0,0,1") (inst "selectSK=org_bouncycastle_math_ec_ECPoint_value_5"))
                              (rule "simplifySelectOfAnonEQ" (formula "72") (ifseqformula "27"))
                               (builtin "One Step Simplification" (formula "72") (ifInst ""  (formula "99")) (ifInst ""  (formula "14")))
                              (rule "applyEqReverse" (formula "73") (term "0,0,1") (ifseqformula "72"))
                               (builtin "One Step Simplification" (formula "73"))
                              (rule "notLeft" (formula "73"))
                              (rule "hideAuxiliaryEq" (formula "72"))
                              (rule "Class_invariant_axiom_for_org_bouncycastle_math_ec_ECPoint" (formula "78") (term "0"))
                               (builtin "One Step Simplification" (formula "78"))
                              (rule "Class_invariant_axiom_for_org_bouncycastle_math_ec_ECPoint" (formula "78"))
                              (rule "closeTrue" (formula "78"))
                           )
                        )
                        (branch "result_228_A_1.value@heapAtPre_A«anonHeapFunction» ≥ 0 FALSE"
                           (rule "inEqSimp_geqRight" (formula "78"))
                           (rule "mul_literals" (formula "1") (term "1,0,0"))
                           (rule "add_literals" (formula "1") (term "0,0"))
                           (rule "inEqSimp_sepPosMonomial0" (formula "1"))
                           (rule "mul_literals" (formula "1") (term "1"))
                           (rule "inEqSimp_contradEq3" (formula "31") (term "0") (ifseqformula "1"))
                           (rule "mul_literals" (formula "31") (term "1,0,0,0"))
                           (rule "add_zero_right" (formula "31") (term "0,0,0"))
                           (rule "qeq_literals" (formula "31") (term "0,0"))
                            (builtin "One Step Simplification" (formula "31"))
                           (rule "andLeft" (formula "31"))
                           (rule "andLeft" (formula "31"))
                           (rule "applyEq" (formula "35") (term "0,0") (ifseqformula "32"))
                           (rule "polySimp_mulComm0" (formula "35") (term "0"))
                           (rule "applyEq" (formula "31") (term "0") (ifseqformula "35"))
                           (rule "inEqSimp_homoInEq0" (formula "31"))
                           (rule "polySimp_mulComm0" (formula "31") (term "1,0"))
                           (rule "polySimp_rightDist" (formula "31") (term "1,0"))
                           (rule "polySimp_mulLiterals" (formula "31") (term "1,1,0"))
                           (rule "polySimp_elimOne" (formula "31") (term "1,1,0"))
                           (rule "polySimp_mulComm0" (formula "31") (term "0,1,0"))
                           (rule "polySimp_addAssoc" (formula "31") (term "0"))
                           (rule "polySimp_addComm0" (formula "31") (term "0,0"))
                           (rule "polySimp_pullOutFactor2b" (formula "31") (term "0"))
                           (rule "add_literals" (formula "31") (term "1,1,0"))
                           (rule "times_zero_1" (formula "31") (term "1,0"))
                           (rule "add_zero_right" (formula "31") (term "0"))
                           (rule "applyEq" (formula "33") (term "0") (ifseqformula "35"))
                           (rule "inEqSimp_homoInEq1" (formula "33"))
                           (rule "polySimp_mulComm0" (formula "33") (term "1,0"))
                           (rule "polySimp_rightDist" (formula "33") (term "1,0"))
                           (rule "polySimp_mulLiterals" (formula "33") (term "1,1,0"))
                           (rule "polySimp_elimOne" (formula "33") (term "1,1,0"))
                           (rule "polySimp_mulComm0" (formula "33") (term "0,1,0"))
                           (rule "polySimp_addComm1" (formula "33") (term "0"))
                           (rule "polySimp_addAssoc" (formula "33") (term "0,0"))
                           (rule "polySimp_addComm1" (formula "33") (term "0,0,0"))
                           (rule "polySimp_pullOutFactor2b" (formula "33") (term "0,0"))
                           (rule "add_literals" (formula "33") (term "1,1,0,0"))
                           (rule "times_zero_1" (formula "33") (term "1,0,0"))
                           (rule "add_zero_right" (formula "33") (term "0,0"))
                           (rule "applyEq" (formula "34") (term "0,1") (ifseqformula "32"))
                           (rule "inEqSimp_invertInEq1" (formula "31"))
                           (rule "polySimp_mulLiterals" (formula "31") (term "0"))
                           (rule "mul_literals" (formula "31") (term "1"))
                           (rule "polySimp_elimOne" (formula "31") (term "0"))
                           (rule "inEqSimp_sepPosMonomial0" (formula "33"))
                           (rule "polySimp_mulComm0" (formula "33") (term "1"))
                           (rule "polySimp_rightDist" (formula "33") (term "1"))
                           (rule "polySimp_mulLiterals" (formula "33") (term "1,1"))
                           (rule "mul_literals" (formula "33") (term "0,1"))
                           (rule "polySimp_elimOne" (formula "33") (term "1,1"))
                           (rule "cnf_rightDist" (formula "2") (term "0,0,0"))
                           (rule "distr_forallAnd" (formula "2") (term "0,0"))
                           (rule "distr_forallAnd" (formula "2") (term "0"))
                           (rule "distr_forallAnd" (formula "2"))
                           (rule "andLeft" (formula "2"))
                           (rule "shift_paren_or" (formula "4") (term "0,0,0"))
                            (builtin "One Step Simplification" (formula "4"))
                           (rule "eqSymm" (formula "4") (term "1,1,0,0,0"))
                           (rule "castedGetAny" (formula "4") (term "0,0,1,0,0,0"))
                           (rule "castedGetAny" (formula "4") (term "1,0,0,0,0,0,0"))
                           (rule "castedGetAny" (formula "4") (term "0,1,1,0,0,0"))
                            (builtin "One Step Simplification" (formula "4"))
                           (rule "true_left" (formula "4"))
                           (rule "shift_paren_or" (formula "3") (term "0,0,0"))
                            (builtin "One Step Simplification" (formula "3"))
                           (rule "eqSymm" (formula "3") (term "1,1,0,0,0"))
                           (rule "castedGetAny" (formula "3") (term "0,0,1,0,0,0"))
                           (rule "castedGetAny" (formula "3") (term "1,0,0,0,0,0,0"))
                           (rule "castedGetAny" (formula "3") (term "0,1,1,0,0,0"))
                            (builtin "One Step Simplification" (formula "3"))
                           (rule "true_left" (formula "3"))
                           (rule "cnf_rightDist" (formula "2") (term "0,0,0"))
                           (rule "distr_forallAnd" (formula "2") (term "0,0"))
                           (rule "distr_forallAnd" (formula "2") (term "0"))
                           (rule "distr_forallAnd" (formula "2"))
                           (rule "andLeft" (formula "2"))
                           (rule "commute_or_2" (formula "2") (term "0,0,0"))
                            (builtin "One Step Simplification" (formula "2"))
                           (rule "eqSymm" (formula "2") (term "1,0,0,0,0"))
                           (rule "castedGetAny" (formula "2") (term "1,0,0,1,0,0,0"))
                           (rule "castedGetAny" (formula "2") (term "0,0,0,0,0,0"))
                           (rule "castedGetAny" (formula "2") (term "0,1,0,0,0,0"))
                            (builtin "One Step Simplification" (formula "2"))
                           (rule "true_left" (formula "2"))
                           (rule "shift_paren_or" (formula "2") (term "0,0,0"))
                            (builtin "One Step Simplification" (formula "2"))
                           (rule "eqSymm" (formula "2") (term "1,1,0,0,0"))
                           (rule "castedGetAny" (formula "2") (term "1,0,0,0,0,0,0"))
                           (rule "castedGetAny" (formula "2") (term "0,0,1,0,0,0"))
                           (rule "castedGetAny" (formula "2") (term "0,1,1,0,0,0"))
                            (builtin "One Step Simplification" (formula "2"))
                           (rule "true_left" (formula "2"))
                           (rule "Use_information_flow_contract_for_compareTo_325434207" (formula "20") (ifseqformula "20"))
                            (builtin "One Step Simplification" (formula "20") (ifInst ""  (formula "95")) (ifInst ""  (formula "95")))
                           (rule "true_left" (formula "20"))
                           (rule "Use_information_flow_contract_for_getOrder_757678341" (formula "62") (ifseqformula "26"))
                           (rule "replace_known_left" (formula "62") (term "1,1") (ifseqformula "8"))
                            (builtin "One Step Simplification" (formula "62"))
                           (rule "true_left" (formula "62"))
                           (rule "Use_information_flow_contract_for_multiply_1272441881_0" (formula "73") (ifseqformula "39"))
                           (rule "replaceKnownSelect_taclet21_11" (formula "73") (term "1,1,1"))
                           (rule "replaceKnownSelect_taclet21_12" (formula "73") (term "0,1,1"))
                           (rule "replaceKnownAuxiliaryConstant_taclet0110121_18" (formula "73") (term "1,1,1"))
                           (rule "replaceKnownAuxiliaryConstant_taclet00110121_19" (formula "73") (term "0,1,1"))
                           (rule "replaceKnownSelect_taclet21_8" (formula "73") (term "1,1,0,1"))
                           (rule "replaceKnownSelect_taclet21_9" (formula "73") (term "0,1,0,1"))
                           (rule "replaceKnownAuxiliaryConstant_taclet21_10" (formula "73") (term "1,1,0,1"))
                            (builtin "One Step Simplification" (formula "73") (ifInst ""  (formula "86")) (ifInst ""  (formula "85")) (ifInst ""  (formula "103")))
                           (rule "pullOutSelect" (formula "73") (term "0,0,1") (inst "selectSK=org_bouncycastle_math_ec_ECPoint_value_4"))
                           (rule "simplifySelectOfAnonEQ" (formula "73") (ifseqformula "64"))
                            (builtin "One Step Simplification" (formula "73") (ifInst ""  (formula "101")) (ifInst ""  (formula "51")))
                           (rule "applyEqReverse" (formula "74") (term "0,0,1") (ifseqformula "73"))
                           (rule "hideAuxiliaryEq" (formula "73"))
                           (rule "eqSymm" (formula "73") (term "0,1"))
                           (rule "applyEq" (formula "73") (term "1,0,1") (ifseqformula "6"))
                           (rule "pullOutSelect" (formula "73") (term "0,0,1") (inst "selectSK=org_bouncycastle_math_ec_ECPoint_value_5"))
                           (rule "simplifySelectOfAnonEQ" (formula "73") (ifseqformula "27"))
                            (builtin "One Step Simplification" (formula "73") (ifInst ""  (formula "100")) (ifInst ""  (formula "15")))
                           (rule "applyEqReverse" (formula "74") (term "0,0,1") (ifseqformula "73"))
                            (builtin "One Step Simplification" (formula "74"))
                           (rule "notLeft" (formula "74"))
                           (rule "hideAuxiliaryEq" (formula "73"))
                           (rule "Class_invariant_axiom_for_org_bouncycastle_math_ec_ECPoint" (formula "79") (term "1"))
                            (builtin "One Step Simplification" (formula "79"))
                           (rule "Class_invariant_axiom_for_org_bouncycastle_math_ec_ECPoint" (formula "79"))
                           (rule "closeTrue" (formula "79"))
                        )
                     )
                     (branch " resultAtPost_226_B.<created>@anon_heap_mod«anonHeapFunction» = TRUE FALSE"
                        (rule "applyEqReverse" (formula "107") (term "1") (ifseqformula "8"))
                        (rule "hideAuxiliaryEq" (formula "8"))
                        (rule "eqSymm" (formula "106"))
                        (rule "replace_known_right" (formula "75") (term "0") (ifseqformula "82"))
                         (builtin "One Step Simplification" (formula "75"))
                        (rule "commute_or" (formula "3") (term "0,1,0,0,0"))
                        (rule "commute_or" (formula "2") (term "0,0,0,0"))
                        (rule "onlyCreatedObjectsAreReferenced" (formula "98") (term "0") (ifseqformula "21"))
                        (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "99"))
                         (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "27")))
                        (rule "true_left" (formula "1"))
                        (rule "onlyCreatedObjectsAreReferenced" (formula "99") (term "0") (ifseqformula "55"))
                        (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "100"))
                         (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "61")))
                        (rule "true_left" (formula "1"))
                        (rule "onlyCreatedObjectsAreReferenced" (formula "13") (term "1,0") (ifseqformula "21"))
                        (rule "replace_known_left" (formula "13") (term "1") (ifseqformula "14"))
                         (builtin "One Step Simplification" (formula "13") (ifInst ""  (formula "93")))
                        (rule "true_left" (formula "13"))
                        (rule "onlyCreatedObjectsAreReferenced" (formula "95") (term "0") (ifseqformula "55"))
                        (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "96"))
                         (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "49")))
                        (rule "true_left" (formula "1"))
                        (rule "onlyCreatedObjectsAreReferenced" (formula "30") (term "0") (ifseqformula "21"))
                        (rule "replace_known_right" (formula "30") (term "0") (ifseqformula "97"))
                         (builtin "One Step Simplification" (formula "30") (ifInst ""  (formula "15")))
                        (rule "true_left" (formula "30"))
                        (rule "onlyCreatedObjectsAreReferenced" (formula "13") (term "1,1,0") (ifseqformula "21"))
                        (rule "replace_known_right" (formula "13") (term "0") (ifseqformula "95"))
                         (builtin "One Step Simplification" (formula "13") (ifInst ""  (formula "15")))
                        (rule "true_left" (formula "13"))
                        (rule "onlyCreatedObjectsAreReferenced" (formula "47") (term "1,0") (ifseqformula "55"))
                        (rule "replace_known_left" (formula "47") (term "1") (ifseqformula "48"))
                         (builtin "One Step Simplification" (formula "47") (ifInst ""  (formula "94")))
                        (rule "true_left" (formula "47"))
                        (rule "commute_or" (formula "2") (term "0,1,0,0,0"))
                        (rule "onlyCreatedObjectsAreReferenced" (formula "64") (term "2") (ifseqformula "55"))
                        (rule "replace_known_left" (formula "64") (term "1") (ifseqformula "49"))
                         (builtin "One Step Simplification" (formula "64") (ifInst ""  (formula "98")))
                        (rule "true_left" (formula "64"))
                        (rule "commute_or" (formula "1") (term "0,0,0,0"))
                        (rule "commute_or" (formula "1") (term "0,1,0,0,0"))
                        (rule "commute_or_2" (formula "4") (term "0,0,0"))
                        (rule "commute_and" (formula "33") (term "0,1"))
                        (rule "commute_or_2" (formula "3") (term "0,0,0"))
                        (rule "commute_or_2" (formula "6") (term "0,0,0,0,0"))
                         (builtin "One Step Simplification" (formula "6"))
                        (rule "commute_or_2" (formula "2") (term "0,0,0"))
                        (rule "commute_or_2" (formula "1") (term "0,0,0"))
                        (rule "shift_paren_or" (formula "5") (term "0,0,0,0,0"))
                        (rule "commute_or_2" (formula "6") (term "0,0,0,0"))
                        (rule "commute_or_2" (formula "4") (term "1,0,0,0,0"))
                        (rule "shift_paren_or" (formula "3") (term "0,0,0,0"))
                        (rule "commute_or_2" (formula "2") (term "1,0,0,0,0"))
                        (rule "commute_or_2" (formula "1") (term "1,0,0,0,0"))
                        (rule "commute_or_2" (formula "5") (term "0,0,0,0,0"))
                         (builtin "One Step Simplification" (formula "5"))
                        (rule "commute_or_2" (formula "5") (term "0,0,0,0"))
                        (rule "shift_paren_or" (formula "4") (term "0,0,0,0"))
                        (rule "shift_paren_or" (formula "2") (term "0,0,0,0"))
                        (rule "shift_paren_or" (formula "1") (term "0,0,0,0"))
                        (rule "cnf_rightDist" (formula "6") (term "0,0,0"))
                        (rule "distr_forallAnd" (formula "6") (term "0,0"))
                        (rule "distr_forallAnd" (formula "6") (term "0"))
                        (rule "distr_forallAnd" (formula "6"))
                        (rule "andLeft" (formula "6"))
                        (rule "commute_or_2" (formula "6") (term "0,0,0"))
                         (builtin "One Step Simplification" (formula "6"))
                        (rule "eqSymm" (formula "6") (term "1,0,0,0,0"))
                        (rule "castedGetAny" (formula "6") (term "1,0,0,1,0,0,0"))
                        (rule "castedGetAny" (formula "6") (term "0,0,0,0,0,0"))
                        (rule "castedGetAny" (formula "6") (term "0,1,0,0,0,0"))
                         (builtin "One Step Simplification" (formula "6"))
                        (rule "true_left" (formula "6"))
                        (rule "shift_paren_or" (formula "6") (term "0,0,0"))
                         (builtin "One Step Simplification" (formula "6"))
                        (rule "eqSymm" (formula "6") (term "1,1,0,0,0"))
                        (rule "castedGetAny" (formula "6") (term "0,0,0,0,0,0"))
                        (rule "castedGetAny" (formula "6") (term "0,0,1,0,0,0"))
                        (rule "castedGetAny" (formula "6") (term "0,1,1,0,0,0"))
                         (builtin "One Step Simplification" (formula "6"))
                        (rule "true_left" (formula "6"))
                        (rule "commute_and" (formula "4") (term "1,0,0,0"))
                        (rule "commute_and" (formula "3") (term "1,0,0,0"))
                        (rule "commute_and" (formula "2") (term "1,0,0,0"))
                        (rule "cnf_rightDist" (formula "5") (term "0,0,0"))
                        (rule "distr_forallAnd" (formula "5") (term "0,0"))
                        (rule "distr_forallAnd" (formula "5") (term "0"))
                        (rule "distr_forallAnd" (formula "5"))
                        (rule "andLeft" (formula "5"))
                        (rule "commute_or_2" (formula "5") (term "0,0,0"))
                         (builtin "One Step Simplification" (formula "5"))
                        (rule "eqSymm" (formula "5") (term "1,0,0,0,0"))
                        (rule "castedGetAny" (formula "5") (term "1,0,0,1,0,0,0"))
                        (rule "castedGetAny" (formula "5") (term "0,0,0,0,0,0"))
                        (rule "castedGetAny" (formula "5") (term "0,1,0,0,0,0"))
                         (builtin "One Step Simplification" (formula "5"))
                        (rule "true_left" (formula "5"))
                        (rule "commute_and" (formula "1") (term "1,0,0,0"))
                        (rule "shift_paren_or" (formula "5") (term "0,0,0"))
                         (builtin "One Step Simplification" (formula "5"))
                        (rule "eqSymm" (formula "5") (term "1,1,0,0,0"))
                        (rule "castedGetAny" (formula "5") (term "0,0,0,0,0,0"))
                        (rule "castedGetAny" (formula "5") (term "0,0,1,0,0,0"))
                        (rule "castedGetAny" (formula "5") (term "0,1,1,0,0,0"))
                         (builtin "One Step Simplification" (formula "5"))
                        (rule "true_left" (formula "5"))
                        (rule "shift_paren_or" (formula "3") (term "0,0,0,0,0"))
                         (builtin "One Step Simplification" (formula "3"))
                        (rule "shift_paren_or" (formula "4") (term "0,0,0,0,0"))
                         (builtin "One Step Simplification" (formula "4"))
                        (rule "shift_paren_or" (formula "2") (term "0,0,0,0,0"))
                         (builtin "One Step Simplification" (formula "2"))
                        (rule "shift_paren_or" (formula "1") (term "0,0,0,0,0"))
                         (builtin "One Step Simplification" (formula "1"))
                        (rule "commute_or_2" (formula "3") (term "0,0,0,0"))
                        (rule "cnf_rightDist" (formula "4") (term "0,0,0"))
                        (rule "distr_forallAnd" (formula "4") (term "0,0"))
                        (rule "distr_forallAnd" (formula "4") (term "0"))
                        (rule "distr_forallAnd" (formula "4"))
                        (rule "andLeft" (formula "4"))
                        (rule "shift_paren_or" (formula "5") (term "0,0,0"))
                         (builtin "One Step Simplification" (formula "5"))
                        (rule "eqSymm" (formula "5") (term "1,1,0,0,0"))
                        (rule "castedGetAny" (formula "5") (term "0,0,1,0,0,0"))
                        (rule "castedGetAny" (formula "5") (term "0,0,0,0,0,0"))
                        (rule "castedGetAny" (formula "5") (term "0,1,1,0,0,0"))
                         (builtin "One Step Simplification" (formula "5"))
                        (rule "true_left" (formula "5"))
                        (rule "cnf_rightDist" (formula "2") (term "0,0,0"))
                        (rule "distr_forallAnd" (formula "2") (term "0,0"))
                        (rule "distr_forallAnd" (formula "2") (term "0"))
                        (rule "distr_forallAnd" (formula "2"))
                        (rule "andLeft" (formula "2"))
                        (rule "shift_paren_or" (formula "3") (term "0,0,0"))
                         (builtin "One Step Simplification" (formula "3"))
                        (rule "eqSymm" (formula "3") (term "1,1,0,0,0"))
                        (rule "castedGetAny" (formula "3") (term "0,0,1,0,0,0"))
                        (rule "castedGetAny" (formula "3") (term "0,0,0,0,0,0"))
                        (rule "castedGetAny" (formula "3") (term "0,1,1,0,0,0"))
                         (builtin "One Step Simplification" (formula "3"))
                        (rule "true_left" (formula "3"))
                        (rule "cnf_rightDist" (formula "1") (term "0,0,0"))
                        (rule "distr_forallAnd" (formula "1") (term "0,0"))
                        (rule "distr_forallAnd" (formula "1") (term "0"))
                        (rule "distr_forallAnd" (formula "1"))
                        (rule "andLeft" (formula "1"))
                        (rule "cnf_rightDist" (formula "4") (term "0,0,0"))
                        (rule "distr_forallAnd" (formula "4") (term "0,0"))
                        (rule "distr_forallAnd" (formula "4") (term "0"))
                        (rule "distr_forallAnd" (formula "4"))
                        (rule "andLeft" (formula "4"))
                        (rule "shift_paren_or" (formula "2") (term "0,0,0"))
                         (builtin "One Step Simplification" (formula "2"))
                        (rule "eqSymm" (formula "2") (term "1,1,0,0,0"))
                        (rule "castedGetAny" (formula "2") (term "0,0,0,0,0,0"))
                        (rule "castedGetAny" (formula "2") (term "0,0,1,0,0,0"))
                        (rule "castedGetAny" (formula "2") (term "0,1,1,0,0,0"))
                         (builtin "One Step Simplification" (formula "2"))
                        (rule "true_left" (formula "2"))
                        (rule "cnf_rightDist" (formula "4") (term "0,0,0"))
                        (rule "distr_forallAnd" (formula "4") (term "0,0"))
                        (rule "distr_forallAnd" (formula "4") (term "0"))
                        (rule "distr_forallAnd" (formula "4"))
                        (rule "andLeft" (formula "4"))
                        (rule "commute_or_2" (formula "4") (term "0,0,0"))
                         (builtin "One Step Simplification" (formula "4"))
                        (rule "eqSymm" (formula "4") (term "1,0,0,0,0"))
                        (rule "castedGetAny" (formula "4") (term "0,0,0,0,0,0"))
                        (rule "castedGetAny" (formula "4") (term "1,0,0,1,0,0,0"))
                        (rule "castedGetAny" (formula "4") (term "0,1,0,0,0,0"))
                         (builtin "One Step Simplification" (formula "4"))
                        (rule "true_left" (formula "4"))
                        (rule "cnf_rightDist" (formula "2") (term "0,0,0"))
                        (rule "distr_forallAnd" (formula "2") (term "0,0"))
                        (rule "distr_forallAnd" (formula "2") (term "0"))
                        (rule "distr_forallAnd" (formula "2"))
                        (rule "andLeft" (formula "2"))
                        (rule "commute_or_2" (formula "2") (term "0,0,0"))
                         (builtin "One Step Simplification" (formula "2"))
                        (rule "eqSymm" (formula "2") (term "1,0,0,0,0"))
                        (rule "castedGetAny" (formula "2") (term "0,0,0,0,0,0"))
                        (rule "castedGetAny" (formula "2") (term "1,0,0,1,0,0,0"))
                        (rule "castedGetAny" (formula "2") (term "0,1,0,0,0,0"))
                         (builtin "One Step Simplification" (formula "2"))
                        (rule "true_left" (formula "2"))
                        (rule "shift_paren_or" (formula "3") (term "0,0,0"))
                         (builtin "One Step Simplification" (formula "3"))
                        (rule "eqSymm" (formula "3") (term "1,1,0,0,0"))
                        (rule "castedGetAny" (formula "3") (term "1,0,0,0,0,0,0"))
                        (rule "castedGetAny" (formula "3") (term "0,0,1,0,0,0"))
                        (rule "castedGetAny" (formula "3") (term "0,1,1,0,0,0"))
                         (builtin "One Step Simplification" (formula "3"))
                        (rule "true_left" (formula "3"))
                        (rule "cnf_rightDist" (formula "1") (term "0,0,0"))
                        (rule "distr_forallAnd" (formula "1") (term "0,0"))
                        (rule "distr_forallAnd" (formula "1") (term "0"))
                        (rule "distr_forallAnd" (formula "1"))
                        (rule "andLeft" (formula "1"))
                        (rule "ifthenelse_split_for" (formula "30") (term "1,1"))
                        (branch "result_228_A_1.value@heapAtPre_A«anonHeapFunction» ≥ 0 TRUE"
                           (rule "cnf_rightDist" (formula "31"))
                           (rule "andLeft" (formula "31"))
                           (rule "commute_or" (formula "32"))
                           (rule "cnf_rightDist" (formula "31"))
                           (rule "andLeft" (formula "31"))
                           (rule "commute_or" (formula "32"))
                           (rule "cnf_rightDist" (formula "3") (term "0,0,0"))
                           (rule "distr_forallAnd" (formula "3") (term "0,0"))
                           (rule "distr_forallAnd" (formula "3") (term "0"))
                           (rule "distr_forallAnd" (formula "3"))
                           (rule "andLeft" (formula "3"))
                           (rule "shift_paren_or" (formula "2") (term "0,0,0"))
                            (builtin "One Step Simplification" (formula "2"))
                           (rule "eqSymm" (formula "2") (term "1,1,0,0,0"))
                           (rule "castedGetAny" (formula "2") (term "1,0,0,0,0,0,0"))
                           (rule "castedGetAny" (formula "2") (term "0,0,1,0,0,0"))
                           (rule "castedGetAny" (formula "2") (term "0,1,1,0,0,0"))
                            (builtin "One Step Simplification" (formula "2"))
                           (rule "true_left" (formula "2"))
                           (rule "cnf_rightDist" (formula "1") (term "0,0,0"))
                           (rule "distr_forallAnd" (formula "1") (term "0,0"))
                           (rule "distr_forallAnd" (formula "1") (term "0"))
                           (rule "distr_forallAnd" (formula "1"))
                           (rule "andLeft" (formula "1"))
                           (rule "commute_or_2" (formula "1") (term "0,0,0"))
                            (builtin "One Step Simplification" (formula "1"))
                           (rule "eqSymm" (formula "1") (term "1,0,0,0,0"))
                           (rule "castedGetAny" (formula "1") (term "0,0,0,0,0,0"))
                           (rule "castedGetAny" (formula "1") (term "1,0,0,1,0,0,0"))
                           (rule "castedGetAny" (formula "1") (term "0,1,0,0,0,0"))
                            (builtin "One Step Simplification" (formula "1"))
                           (rule "true_left" (formula "1"))
                           (rule "shift_paren_or" (formula "1") (term "0,0,0"))
                            (builtin "One Step Simplification" (formula "1"))
                           (rule "eqSymm" (formula "1") (term "1,1,0,0,0"))
                           (rule "castedGetAny" (formula "1") (term "0,0,1,0,0,0"))
                           (rule "castedGetAny" (formula "1") (term "1,0,0,0,0,0,0"))
                           (rule "castedGetAny" (formula "1") (term "0,1,1,0,0,0"))
                            (builtin "One Step Simplification" (formula "1"))
                           (rule "true_left" (formula "1"))
                           (rule "cnf_rightDist" (formula "1") (term "0,0,0"))
                           (rule "distr_forallAnd" (formula "1") (term "0,0"))
                           (rule "distr_forallAnd" (formula "1") (term "0"))
                           (rule "distr_forallAnd" (formula "1"))
                           (rule "andLeft" (formula "1"))
                           (rule "commute_or_2" (formula "1") (term "0,0,0"))
                            (builtin "One Step Simplification" (formula "1"))
                           (rule "eqSymm" (formula "1") (term "1,0,0,0,0"))
                           (rule "castedGetAny" (formula "1") (term "1,0,0,1,0,0,0"))
                           (rule "castedGetAny" (formula "1") (term "0,0,0,0,0,0"))
                           (rule "castedGetAny" (formula "1") (term "0,1,0,0,0,0"))
                            (builtin "One Step Simplification" (formula "1"))
                           (rule "true_left" (formula "1"))
                           (rule "shift_paren_or" (formula "1") (term "0,0,0"))
                            (builtin "One Step Simplification" (formula "1"))
                           (rule "eqSymm" (formula "1") (term "1,1,0,0,0"))
                           (rule "castedGetAny" (formula "1") (term "0,0,1,0,0,0"))
                           (rule "castedGetAny" (formula "1") (term "1,0,0,0,0,0,0"))
                           (rule "castedGetAny" (formula "1") (term "0,1,1,0,0,0"))
                            (builtin "One Step Simplification" (formula "1"))
                           (rule "true_left" (formula "1"))
                           (rule "cut_direct" (formula "28") (term "0"))
                           (branch "CUT: result_228_A_1.value@heapAtPre_A«anonHeapFunction» = 0 TRUE"
                               (builtin "One Step Simplification" (formula "29"))
                              (rule "true_left" (formula "29"))
                              (rule "replace_known_left" (formula "29") (term "0") (ifseqformula "28"))
                               (builtin "One Step Simplification" (formula "29"))
                              (rule "true_left" (formula "29"))
                              (rule "replace_known_left" (formula "29") (term "0") (ifseqformula "28"))
                               (builtin "One Step Simplification" (formula "29"))
                              (rule "true_left" (formula "29"))
                              (rule "applyEq" (formula "27") (term "0") (ifseqformula "28"))
                              (rule "qeq_literals" (formula "27"))
                              (rule "true_left" (formula "27"))
                              (rule "applyEq" (formula "29") (term "1,0") (ifseqformula "27"))
                              (rule "times_zero_1" (formula "29") (term "0"))
                              (rule "polySimp_homoEq" (formula "29"))
                              (rule "mul_literals" (formula "29") (term "1,0"))
                              (rule "add_zero_right" (formula "29") (term "0"))
                              (rule "applyEq" (formula "28") (term "1,0") (ifseqformula "27"))
                              (rule "eqSymm" (formula "28"))
                              (rule "polySimp_homoEq" (formula "28"))
                              (rule "polySimp_mulLiterals" (formula "28") (term "1,0"))
                              (rule "polySimp_elimOne" (formula "28") (term "1,0"))
                              (rule "applyEq" (formula "6") (term "1") (ifseqformula "27"))
                              (rule "applyEq" (formula "22") (term "1") (ifseqformula "27"))
                              (rule "applyEq" (formula "56") (term "1") (ifseqformula "27"))
                              (rule "applyEq" (formula "28") (term "1,1,0") (ifseqformula "27"))
                              (rule "polySimp_addComm0" (formula "28") (term "0"))
                              (rule "polySimp_sepNegMonomial" (formula "29"))
                              (rule "polySimp_mulLiterals" (formula "29") (term "0"))
                              (rule "polySimp_elimOne" (formula "29") (term "0"))
                              (rule "applyEq" (formula "28") (term "0,1,0") (ifseqformula "29"))
                              (rule "polySimp_addComm0" (formula "28") (term "0"))
                              (rule "applyEq" (formula "3") (term "0") (ifseqformula "29"))
                              (rule "applyEq" (formula "28") (term "0,0,1,0") (ifseqformula "29"))
                              (rule "polySimp_addComm0" (formula "28") (term "0"))
                              (rule "applyEq" (formula "5") (term "1") (ifseqformula "29"))
                              (rule "polySimp_sepPosMonomial" (formula "28"))
                              (rule "div_axiom" (formula "28") (term "0,1") (inst "quotient=quotient_1"))
                               (builtin "One Step Simplification" (formula "28"))
                              (rule "true_left" (formula "28"))
                              (rule "jdiv_axiom" (formula "28") (term "0"))
                              (rule "eqSymm" (formula "28"))
                              (rule "applyEq" (formula "28") (term "1") (ifseqformula "29"))
                               (builtin "One Step Simplification" (formula "28"))
                              (rule "eqSymm" (formula "28") (term "1"))
                              (rule "polySimp_homoEq" (formula "28") (term "1"))
                              (rule "polySimp_mulLiterals" (formula "28") (term "1,0,1"))
                              (rule "polySimp_elimOne" (formula "28") (term "1,0,1"))
                              (rule "polySimp_sepPosMonomial" (formula "28") (term "1"))
                              (rule "inEqSimp_contradInEq0" (formula "28") (term "0,0") (ifseqformula "3"))
                              (rule "qeq_literals" (formula "28") (term "0,0,0"))
                               (builtin "One Step Simplification" (formula "28"))
                              (rule "true_left" (formula "28"))
                              (rule "Use_information_flow_contract_for_compareTo_325434207" (formula "18") (ifseqformula "18"))
                               (builtin "One Step Simplification" (formula "18") (ifInst ""  (formula "93")) (ifInst ""  (formula "93")))
                              (rule "true_left" (formula "18"))
                              (rule "Use_information_flow_contract_for_getOrder_757678341" (formula "58") (ifseqformula "24"))
                              (rule "applyEq" (formula "58") (term "0,0,1") (ifseqformula "56"))
                              (rule "eqSymm" (formula "58") (term "0,1"))
                              (rule "replace_known_left" (formula "58") (term "0,1") (ifseqformula "22"))
                               (builtin "One Step Simplification" (formula "58"))
                              (rule "applyEq" (formula "58") (term "0,1") (ifseqformula "6"))
                              (rule "eqSymm" (formula "58") (term "1"))
                              (rule "replace_known_left" (formula "58") (term "1") (ifseqformula "27"))
                               (builtin "One Step Simplification" (formula "58"))
                              (rule "true_left" (formula "58"))
                              (rule "Use_information_flow_contract_for_getOrder_757678341" (formula "58") (ifseqformula "58"))
                               (builtin "One Step Simplification" (formula "58"))
                              (rule "true_left" (formula "58"))
                              (rule "Use_information_flow_contract_for_compareTo_325434207" (formula "52") (ifseqformula "18"))
                              (rule "replace_known_right" (formula "52") (term "0,1,0,0") (ifseqformula "94"))
                               (builtin "One Step Simplification" (formula "52") (ifInst ""  (formula "93")))
                              (rule "applyEqRigid" (formula "52") (term "0,1,0,1") (ifseqformula "54"))
                              (rule "eqSymm" (formula "52") (term "1,0,1"))
                              (rule "replace_known_left" (formula "52") (term "1,0,1") (ifseqformula "19"))
                               (builtin "One Step Simplification" (formula "52"))
                              (rule "applyEq" (formula "52") (term "0,0,1") (ifseqformula "5"))
                              (rule "eqSymm" (formula "52") (term "0,1"))
                              (rule "replace_known_left" (formula "52") (term "0,1") (ifseqformula "29"))
                               (builtin "One Step Simplification" (formula "52"))
                              (rule "Class_invariant_axiom_for_java_math_BigInteger" (formula "52") (term "1,0"))
                              (rule "replace_known_left" (formula "52") (term "1,1,0") (ifseqformula "19"))
                               (builtin "One Step Simplification" (formula "52") (ifInst ""  (formula "93")))
                              (rule "Class_invariant_axiom_for_java_math_BigInteger" (formula "52") (term "0"))
                              (rule "replace_known_left" (formula "52") (term "1,0") (ifseqformula "54"))
                               (builtin "One Step Simplification" (formula "52") (ifInst ""  (formula "94")))
                              (rule "applyEq" (formula "44") (term "0") (ifseqformula "52"))
                              (rule "applyEq" (formula "52") (term "4") (ifseqformula "51"))
                              (rule "applyEq" (formula "50") (term "0") (ifseqformula "51"))
                              (rule "Use_information_flow_contract_for_getOrder_757678341" (formula "24") (ifseqformula "24"))
                               (builtin "One Step Simplification" (formula "24"))
                              (rule "true_left" (formula "24"))
                              (rule "Use_information_flow_contract_for_getOrder_757678341" (formula "24") (ifseqformula "57"))
                              (rule "eqSymm" (formula "24") (term "0,1"))
                              (rule "eqSymm" (formula "24") (term "1,1"))
                              (rule "applyEq" (formula "24") (term "0,1,1") (ifseqformula "6"))
                              (rule "eqSymm" (formula "24") (term "1,1"))
                              (rule "replace_known_left" (formula "24") (term "1,1") (ifseqformula "28"))
                               (builtin "One Step Simplification" (formula "24"))
                              (rule "true_left" (formula "24"))
                              (rule "Use_information_flow_contract_for_multiply_1272441881_0" (formula "69") (ifseqformula "35"))
                              (rule "replaceKnownSelect_taclet21_12" (formula "69") (term "0,1,1"))
                              (rule "replaceKnownSelect_taclet21_11" (formula "69") (term "1,1,1"))
                              (rule "replaceKnownAuxiliaryConstant_taclet10110121_19" (formula "69") (term "0,1,1"))
                              (rule "replaceKnownAuxiliaryConstant_taclet0110121_18" (formula "69") (term "1,1,1"))
                              (rule "replaceKnownSelect_taclet21_8" (formula "69") (term "1,1,0,1"))
                              (rule "replaceKnownSelect_taclet21_9" (formula "69") (term "0,1,0,1"))
                              (rule "replaceKnownAuxiliaryConstant_taclet21_10" (formula "69") (term "1,1,0,1"))
                               (builtin "One Step Simplification" (formula "69") (ifInst ""  (formula "83")) (ifInst ""  (formula "82")) (ifInst ""  (formula "100")))
                              (rule "pullOutSelect" (formula "69") (term "0,0,1") (inst "selectSK=org_bouncycastle_math_ec_ECPoint_value_4"))
                              (rule "simplifySelectOfAnonEQ" (formula "69") (ifseqformula "59"))
                               (builtin "One Step Simplification" (formula "69") (ifInst ""  (formula "98")) (ifInst ""  (formula "46")))
                              (rule "applyEqReverse" (formula "70") (term "0,0,1") (ifseqformula "69"))
                              (rule "hideAuxiliaryEq" (formula "69"))
                              (rule "eqSymm" (formula "69") (term "0,1"))
                              (rule "applyEq" (formula "69") (term "1,0,1") (ifseqformula "4"))
                              (rule "pullOutSelect" (formula "69") (term "0,0,1") (inst "selectSK=org_bouncycastle_math_ec_ECPoint_value_5"))
                              (rule "simplifySelectOfAnonEQ" (formula "69") (ifseqformula "25"))
                               (builtin "One Step Simplification" (formula "69") (ifInst ""  (formula "97")) (ifInst ""  (formula "13")))
                              (rule "applyEqReverse" (formula "70") (term "0,0,1") (ifseqformula "69"))
                               (builtin "One Step Simplification" (formula "70"))
                              (rule "notLeft" (formula "70"))
                              (rule "hideAuxiliaryEq" (formula "69"))
                              (rule "Class_invariant_axiom_for_org_bouncycastle_math_ec_ECPoint" (formula "75") (term "0"))
                               (builtin "One Step Simplification" (formula "75"))
                              (rule "Class_invariant_axiom_for_org_bouncycastle_math_ec_ECPoint" (formula "75"))
                              (rule "closeTrue" (formula "75"))
                           )
                           (branch "CUT: result_228_A_1.value@heapAtPre_A«anonHeapFunction» = 0 FALSE"
                               (builtin "One Step Simplification" (formula "28"))
                              (rule "replace_known_right" (formula "29") (term "0") (ifseqformula "79"))
                               (builtin "One Step Simplification" (formula "29"))
                              (rule "replace_known_right" (formula "30") (term "0") (ifseqformula "79"))
                               (builtin "One Step Simplification" (formula "30"))
                              (rule "applyEq" (formula "32") (term "0,0") (ifseqformula "29"))
                              (rule "polySimp_mulComm0" (formula "32") (term "0"))
                              (rule "applyEq" (formula "30") (term "0") (ifseqformula "32"))
                              (rule "inEqSimp_homoInEq1" (formula "30"))
                              (rule "polySimp_mulComm0" (formula "30") (term "1,0"))
                              (rule "polySimp_rightDist" (formula "30") (term "1,0"))
                              (rule "polySimp_mulLiterals" (formula "30") (term "1,1,0"))
                              (rule "polySimp_elimOne" (formula "30") (term "1,1,0"))
                              (rule "polySimp_mulComm0" (formula "30") (term "0,1,0"))
                              (rule "polySimp_addComm1" (formula "30") (term "0"))
                              (rule "polySimp_addAssoc" (formula "30") (term "0,0"))
                              (rule "polySimp_addComm1" (formula "30") (term "0,0,0"))
                              (rule "polySimp_pullOutFactor2b" (formula "30") (term "0,0"))
                              (rule "add_literals" (formula "30") (term "1,1,0,0"))
                              (rule "times_zero_1" (formula "30") (term "1,0,0"))
                              (rule "add_zero_right" (formula "30") (term "0,0"))
                              (rule "applyEq" (formula "28") (term "0") (ifseqformula "32"))
                              (rule "inEqSimp_homoInEq0" (formula "28"))
                              (rule "polySimp_mulComm0" (formula "28") (term "1,0"))
                              (rule "polySimp_rightDist" (formula "28") (term "1,0"))
                              (rule "polySimp_mulLiterals" (formula "28") (term "1,1,0"))
                              (rule "polySimp_elimOne" (formula "28") (term "1,1,0"))
                              (rule "polySimp_mulComm0" (formula "28") (term "0,1,0"))
                              (rule "polySimp_addAssoc" (formula "28") (term "0"))
                              (rule "polySimp_addComm0" (formula "28") (term "0,0"))
                              (rule "polySimp_pullOutFactor2b" (formula "28") (term "0"))
                              (rule "add_literals" (formula "28") (term "1,1,0"))
                              (rule "times_zero_1" (formula "28") (term "1,0"))
                              (rule "add_zero_right" (formula "28") (term "0"))
                              (rule "applyEq" (formula "31") (term "0,1") (ifseqformula "29"))
                              (rule "inEqSimp_sepNegMonomial0" (formula "30"))
                              (rule "polySimp_mulLiterals" (formula "30") (term "0"))
                              (rule "polySimp_elimOne" (formula "30") (term "0"))
                              (rule "inEqSimp_invertInEq1" (formula "28"))
                              (rule "polySimp_mulLiterals" (formula "28") (term "0"))
                              (rule "mul_literals" (formula "28") (term "1"))
                              (rule "polySimp_elimOne" (formula "28") (term "0"))
                              (rule "inEqSimp_strengthen1" (formula "27") (ifseqformula "79"))
                              (rule "add_zero_right" (formula "27") (term "1"))
                              (rule "inEqSimp_contradEq7" (formula "79") (ifseqformula "27"))
                              (rule "times_zero_1" (formula "79") (term "1,0,0"))
                              (rule "add_literals" (formula "79") (term "0,0"))
                              (rule "leq_literals" (formula "79") (term "0"))
                               (builtin "One Step Simplification" (formula "79"))
                              (rule "false_right" (formula "79"))
                              (rule "Use_information_flow_contract_for_compareTo_325434207" (formula "18") (ifseqformula "18"))
                               (builtin "One Step Simplification" (formula "18") (ifInst ""  (formula "96")) (ifInst ""  (formula "96")))
                              (rule "true_left" (formula "18"))
                              (rule "Use_information_flow_contract_for_getOrder_757678341" (formula "61") (ifseqformula "24"))
                              (rule "replace_known_left" (formula "61") (term "1,1") (ifseqformula "6"))
                               (builtin "One Step Simplification" (formula "61"))
                              (rule "true_left" (formula "61"))
                              (rule "Use_information_flow_contract_for_multiply_1272441881_0" (formula "73") (ifseqformula "38"))
                              (rule "replaceKnownSelect_taclet21_12" (formula "73") (term "0,1,1"))
                              (rule "replaceKnownSelect_taclet21_11" (formula "73") (term "1,1,1"))
                              (rule "replaceKnownAuxiliaryConstant_taclet10110121_19" (formula "73") (term "0,1,1"))
                              (rule "replaceKnownAuxiliaryConstant_taclet0110121_18" (formula "73") (term "1,1,1"))
                              (rule "replaceKnownSelect_taclet21_8" (formula "73") (term "1,1,0,1"))
                              (rule "replaceKnownSelect_taclet21_9" (formula "73") (term "0,1,0,1"))
                              (rule "replaceKnownAuxiliaryConstant_taclet21_10" (formula "73") (term "1,1,0,1"))
                               (builtin "One Step Simplification" (formula "73") (ifInst ""  (formula "87")) (ifInst ""  (formula "86")) (ifInst ""  (formula "104")))
                              (rule "pullOutSelect" (formula "73") (term "1,0,1") (inst "selectSK=org_bouncycastle_math_ec_ECPoint_value_4"))
                              (rule "simplifySelectOfAnonEQ" (formula "73") (ifseqformula "25"))
                               (builtin "One Step Simplification" (formula "73") (ifInst ""  (formula "101")) (ifInst ""  (formula "13")))
                              (rule "applyEqReverse" (formula "74") (term "1,0,1") (ifseqformula "73"))
                              (rule "hideAuxiliaryEq" (formula "73"))
                              (rule "pullOutSelect" (formula "73") (term "0,0,1") (inst "selectSK=org_bouncycastle_math_ec_ECPoint_value_5"))
                              (rule "simplifySelectOfAnonEQ" (formula "73") (ifseqformula "63"))
                               (builtin "One Step Simplification" (formula "73") (ifInst ""  (formula "102")) (ifInst ""  (formula "50")))
                              (rule "applyEqReverse" (formula "74") (term "0,0,1") (ifseqformula "73"))
                              (rule "hideAuxiliaryEq" (formula "73"))
                              (rule "replace_known_left" (formula "73") (term "0,1") (ifseqformula "4"))
                               (builtin "One Step Simplification" (formula "73"))
                              (rule "notLeft" (formula "73"))
                              (rule "Class_invariant_axiom_for_org_bouncycastle_math_ec_ECPoint" (formula "79") (term "0"))
                               (builtin "One Step Simplification" (formula "79"))
                              (rule "Class_invariant_axiom_for_org_bouncycastle_math_ec_ECPoint" (formula "79"))
                              (rule "closeTrue" (formula "79"))
                           )
                        )
                        (branch "result_228_A_1.value@heapAtPre_A«anonHeapFunction» ≥ 0 FALSE"
                           (rule "inEqSimp_geqRight" (formula "79"))
                           (rule "mul_literals" (formula "1") (term "1,0,0"))
                           (rule "add_literals" (formula "1") (term "0,0"))
                           (rule "inEqSimp_sepPosMonomial0" (formula "1"))
                           (rule "mul_literals" (formula "1") (term "1"))
                           (rule "inEqSimp_contradEq3" (formula "31") (term "0") (ifseqformula "1"))
                           (rule "mul_literals" (formula "31") (term "1,0,0,0"))
                           (rule "add_literals" (formula "31") (term "0,0,0"))
                           (rule "qeq_literals" (formula "31") (term "0,0"))
                            (builtin "One Step Simplification" (formula "31"))
                           (rule "andLeft" (formula "31"))
                           (rule "andLeft" (formula "31"))
                           (rule "applyEq" (formula "35") (term "0,0") (ifseqformula "32"))
                           (rule "polySimp_mulComm0" (formula "35") (term "0"))
                           (rule "applyEq" (formula "31") (term "0") (ifseqformula "35"))
                           (rule "inEqSimp_homoInEq0" (formula "31"))
                           (rule "polySimp_mulComm0" (formula "31") (term "1,0"))
                           (rule "polySimp_rightDist" (formula "31") (term "1,0"))
                           (rule "polySimp_mulLiterals" (formula "31") (term "1,1,0"))
                           (rule "polySimp_elimOne" (formula "31") (term "1,1,0"))
                           (rule "polySimp_mulComm0" (formula "31") (term "0,1,0"))
                           (rule "polySimp_addAssoc" (formula "31") (term "0"))
                           (rule "polySimp_addComm0" (formula "31") (term "0,0"))
                           (rule "polySimp_pullOutFactor2b" (formula "31") (term "0"))
                           (rule "add_literals" (formula "31") (term "1,1,0"))
                           (rule "times_zero_1" (formula "31") (term "1,0"))
                           (rule "add_zero_right" (formula "31") (term "0"))
                           (rule "applyEq" (formula "33") (term "0") (ifseqformula "35"))
                           (rule "inEqSimp_homoInEq1" (formula "33"))
                           (rule "polySimp_mulComm0" (formula "33") (term "1,0"))
                           (rule "polySimp_rightDist" (formula "33") (term "1,0"))
                           (rule "polySimp_mulLiterals" (formula "33") (term "1,1,0"))
                           (rule "polySimp_elimOne" (formula "33") (term "1,1,0"))
                           (rule "polySimp_mulComm0" (formula "33") (term "0,1,0"))
                           (rule "polySimp_addComm1" (formula "33") (term "0"))
                           (rule "polySimp_addAssoc" (formula "33") (term "0,0"))
                           (rule "polySimp_addComm1" (formula "33") (term "0,0,0"))
                           (rule "polySimp_pullOutFactor2b" (formula "33") (term "0,0"))
                           (rule "add_literals" (formula "33") (term "1,1,0,0"))
                           (rule "times_zero_1" (formula "33") (term "1,0,0"))
                           (rule "add_zero_right" (formula "33") (term "0,0"))
                           (rule "applyEq" (formula "34") (term "0,1") (ifseqformula "32"))
                           (rule "inEqSimp_invertInEq1" (formula "31"))
                           (rule "times_zero_2" (formula "31") (term "1"))
                           (rule "polySimp_mulLiterals" (formula "31") (term "0"))
                           (rule "polySimp_elimOne" (formula "31") (term "0"))
                           (rule "inEqSimp_sepPosMonomial0" (formula "33"))
                           (rule "polySimp_mulComm0" (formula "33") (term "1"))
                           (rule "polySimp_rightDist" (formula "33") (term "1"))
                           (rule "polySimp_mulLiterals" (formula "33") (term "1,1"))
                           (rule "mul_literals" (formula "33") (term "0,1"))
                           (rule "polySimp_elimOne" (formula "33") (term "1,1"))
                           (rule "cnf_rightDist" (formula "4") (term "0,0,0"))
                           (rule "distr_forallAnd" (formula "4") (term "0,0"))
                           (rule "distr_forallAnd" (formula "4") (term "0"))
                           (rule "distr_forallAnd" (formula "4"))
                           (rule "andLeft" (formula "4"))
                           (rule "shift_paren_or" (formula "3") (term "0,0,0"))
                            (builtin "One Step Simplification" (formula "3"))
                           (rule "eqSymm" (formula "3") (term "1,1,0,0,0"))
                           (rule "castedGetAny" (formula "3") (term "1,0,0,0,0,0,0"))
                           (rule "castedGetAny" (formula "3") (term "0,0,1,0,0,0"))
                           (rule "castedGetAny" (formula "3") (term "0,1,1,0,0,0"))
                            (builtin "One Step Simplification" (formula "3"))
                           (rule "true_left" (formula "3"))
                           (rule "cnf_rightDist" (formula "2") (term "0,0,0"))
                           (rule "distr_forallAnd" (formula "2") (term "0,0"))
                           (rule "distr_forallAnd" (formula "2") (term "0"))
                           (rule "distr_forallAnd" (formula "2"))
                           (rule "andLeft" (formula "2"))
                           (rule "commute_or_2" (formula "2") (term "0,0,0"))
                            (builtin "One Step Simplification" (formula "2"))
                           (rule "eqSymm" (formula "2") (term "1,0,0,0,0"))
                           (rule "castedGetAny" (formula "2") (term "1,0,0,1,0,0,0"))
                           (rule "castedGetAny" (formula "2") (term "0,0,0,0,0,0"))
                           (rule "castedGetAny" (formula "2") (term "0,1,0,0,0,0"))
                            (builtin "One Step Simplification" (formula "2"))
                           (rule "true_left" (formula "2"))
                           (rule "shift_paren_or" (formula "2") (term "0,0,0"))
                            (builtin "One Step Simplification" (formula "2"))
                           (rule "eqSymm" (formula "2") (term "1,1,0,0,0"))
                           (rule "castedGetAny" (formula "2") (term "0,0,1,0,0,0"))
                           (rule "castedGetAny" (formula "2") (term "1,0,0,0,0,0,0"))
                           (rule "castedGetAny" (formula "2") (term "0,1,1,0,0,0"))
                            (builtin "One Step Simplification" (formula "2"))
                           (rule "true_left" (formula "2"))
                           (rule "cnf_rightDist" (formula "2") (term "0,0,0"))
                           (rule "distr_forallAnd" (formula "2") (term "0,0"))
                           (rule "distr_forallAnd" (formula "2") (term "0"))
                           (rule "distr_forallAnd" (formula "2"))
                           (rule "andLeft" (formula "2"))
                           (rule "commute_or_2" (formula "2") (term "0,0,0"))
                            (builtin "One Step Simplification" (formula "2"))
                           (rule "eqSymm" (formula "2") (term "1,0,0,0,0"))
                           (rule "castedGetAny" (formula "2") (term "0,0,0,0,0,0"))
                           (rule "castedGetAny" (formula "2") (term "1,0,0,1,0,0,0"))
                           (rule "castedGetAny" (formula "2") (term "0,1,0,0,0,0"))
                            (builtin "One Step Simplification" (formula "2"))
                           (rule "true_left" (formula "2"))
                           (rule "shift_paren_or" (formula "2") (term "0,0,0"))
                            (builtin "One Step Simplification" (formula "2"))
                           (rule "eqSymm" (formula "2") (term "1,1,0,0,0"))
                           (rule "castedGetAny" (formula "2") (term "0,0,1,0,0,0"))
                           (rule "castedGetAny" (formula "2") (term "1,0,0,0,0,0,0"))
                           (rule "castedGetAny" (formula "2") (term "0,1,1,0,0,0"))
                            (builtin "One Step Simplification" (formula "2"))
                           (rule "true_left" (formula "2"))
                           (rule "Use_information_flow_contract_for_compareTo_325434207" (formula "19") (ifseqformula "19"))
                            (builtin "One Step Simplification" (formula "19") (ifInst ""  (formula "96")) (ifInst ""  (formula "96")))
                           (rule "true_left" (formula "19"))
                           (rule "Use_information_flow_contract_for_getOrder_757678341" (formula "61") (ifseqformula "25"))
                           (rule "replace_known_left" (formula "61") (term "1,1") (ifseqformula "7"))
                            (builtin "One Step Simplification" (formula "61"))
                           (rule "true_left" (formula "61"))
                           (rule "Use_information_flow_contract_for_multiply_1272441881_0" (formula "73") (ifseqformula "38"))
                           (rule "replaceKnownSelect_taclet21_11" (formula "73") (term "1,1,1"))
                           (rule "replaceKnownSelect_taclet21_12" (formula "73") (term "0,1,1"))
                           (rule "replaceKnownAuxiliaryConstant_taclet0110121_18" (formula "73") (term "1,1,1"))
                           (rule "replaceKnownAuxiliaryConstant_taclet10110121_19" (formula "73") (term "0,1,1"))
                           (rule "replaceKnownSelect_taclet21_8" (formula "73") (term "1,1,0,1"))
                           (rule "replaceKnownSelect_taclet21_9" (formula "73") (term "0,1,0,1"))
                           (rule "replaceKnownAuxiliaryConstant_taclet21_10" (formula "73") (term "1,1,0,1"))
                            (builtin "One Step Simplification" (formula "73") (ifInst ""  (formula "87")) (ifInst ""  (formula "86")) (ifInst ""  (formula "104")))
                           (rule "pullOutSelect" (formula "73") (term "1,0,1") (inst "selectSK=org_bouncycastle_math_ec_ECPoint_value_4"))
                           (rule "simplifySelectOfAnonEQ" (formula "73") (ifseqformula "26"))
                            (builtin "One Step Simplification" (formula "73") (ifInst ""  (formula "101")) (ifInst ""  (formula "14")))
                           (rule "applyEqReverse" (formula "74") (term "1,0,1") (ifseqformula "73"))
                           (rule "hideAuxiliaryEq" (formula "73"))
                           (rule "pullOutSelect" (formula "73") (term "0,0,1") (inst "selectSK=org_bouncycastle_math_ec_ECPoint_value_5"))
                           (rule "simplifySelectOfAnonEQ" (formula "73") (ifseqformula "63"))
                            (builtin "One Step Simplification" (formula "73") (ifInst ""  (formula "102")) (ifInst ""  (formula "50")))
                           (rule "applyEqReverse" (formula "74") (term "0,0,1") (ifseqformula "73"))
                           (rule "hideAuxiliaryEq" (formula "73"))
                           (rule "replace_known_left" (formula "73") (term "0,1") (ifseqformula "5"))
                            (builtin "One Step Simplification" (formula "73"))
                           (rule "notLeft" (formula "73"))
                           (rule "Class_invariant_axiom_for_org_bouncycastle_math_ec_ECPoint" (formula "79") (term "0"))
                            (builtin "One Step Simplification" (formula "79"))
                           (rule "Class_invariant_axiom_for_org_bouncycastle_math_ec_ECPoint" (formula "79"))
                           (rule "closeTrue" (formula "79"))
                        )
                     )
                  )
                  (branch " resultAtPost_226_A.<created>@anon_heap_mod«anonHeapFunction» = TRUE FALSE"
                     (rule "applyEqReverse" (formula "108") (term "1") (ifseqformula "9"))
                     (rule "hideAuxiliaryEq" (formula "9"))
                     (rule "eqSymm" (formula "107"))
                     (rule "replace_known_right" (formula "41") (term "0") (ifseqformula "83"))
                      (builtin "One Step Simplification" (formula "41"))
                     (rule "ifthenelse_split" (formula "8") (term "0"))
                     (branch " resultAtPost_226_B.<created>@anon_heap_mod«anonHeapFunction» = TRUE TRUE"
                        (rule "applyEqReverse" (formula "108") (term "1") (ifseqformula "9"))
                        (rule "hideAuxiliaryEq" (formula "9"))
                        (rule "replace_known_left" (formula "76") (term "0") (ifseqformula "8"))
                         (builtin "One Step Simplification" (formula "76"))
                        (rule "true_left" (formula "76"))
                        (rule "commute_or" (formula "3") (term "0,1,0,0,0"))
                        (rule "commute_or" (formula "2") (term "0,0,0,0"))
                        (rule "onlyCreatedObjectsAreReferenced" (formula "99") (term "0") (ifseqformula "56"))
                        (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "100"))
                         (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "62")))
                        (rule "true_left" (formula "1"))
                        (rule "onlyCreatedObjectsAreReferenced" (formula "26") (term "1,0") (ifseqformula "21"))
                        (rule "replace_known_right" (formula "26") (term "0") (ifseqformula "99"))
                         (builtin "One Step Simplification" (formula "26") (ifInst ""  (formula "27")))
                        (rule "true_left" (formula "26"))
                        (rule "onlyCreatedObjectsAreReferenced" (formula "30") (term "2") (ifseqformula "21"))
                        (rule "replace_known_right" (formula "30") (term "0") (ifseqformula "97"))
                         (builtin "One Step Simplification" (formula "30") (ifInst ""  (formula "15")))
                        (rule "true_left" (formula "30"))
                        (rule "onlyCreatedObjectsAreReferenced" (formula "13") (term "1,0") (ifseqformula "21"))
                        (rule "replace_known_left" (formula "13") (term "1") (ifseqformula "14"))
                         (builtin "One Step Simplification" (formula "13") (ifInst ""  (formula "93")))
                        (rule "true_left" (formula "13"))
                        (rule "onlyCreatedObjectsAreReferenced" (formula "95") (term "0") (ifseqformula "56"))
                        (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "96"))
                         (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "50")))
                        (rule "true_left" (formula "1"))
                        (rule "onlyCreatedObjectsAreReferenced" (formula "13") (term "1,1,0") (ifseqformula "21"))
                        (rule "replace_known_right" (formula "13") (term "0") (ifseqformula "95"))
                         (builtin "One Step Simplification" (formula "13") (ifInst ""  (formula "15")))
                        (rule "true_left" (formula "13"))
                        (rule "onlyCreatedObjectsAreReferenced" (formula "48") (term "1,0") (ifseqformula "56"))
                        (rule "replace_known_left" (formula "48") (term "1") (ifseqformula "49"))
                         (builtin "One Step Simplification" (formula "48") (ifInst ""  (formula "94")))
                        (rule "true_left" (formula "48"))
                        (rule "commute_or" (formula "2") (term "0,1,0,0,0"))
                        (rule "onlyCreatedObjectsAreReferenced" (formula "63") (term "1,0") (ifseqformula "56"))
                        (rule "replace_known_right" (formula "63") (term "0") (ifseqformula "98"))
                         (builtin "One Step Simplification" (formula "63") (ifInst ""  (formula "50")))
                        (rule "true_left" (formula "63"))
                        (rule "commute_or" (formula "1") (term "0,0,0,0"))
                        (rule "commute_or" (formula "1") (term "0,1,0,0,0"))
                        (rule "commute_or_2" (formula "4") (term "0,0,0"))
                        (rule "commute_and" (formula "33") (term "0,1"))
                        (rule "commute_or_2" (formula "3") (term "0,0,0"))
                        (rule "commute_or_2" (formula "6") (term "0,0,0,0,0"))
                         (builtin "One Step Simplification" (formula "6"))
                        (rule "commute_or_2" (formula "2") (term "0,0,0"))
                        (rule "commute_or_2" (formula "1") (term "0,0,0"))
                        (rule "shift_paren_or" (formula "5") (term "0,0,0,0,0"))
                        (rule "commute_or_2" (formula "6") (term "0,0,0,0"))
                        (rule "shift_paren_or" (formula "4") (term "0,0,0,0"))
                        (rule "shift_paren_or" (formula "3") (term "0,0,0,0"))
                        (rule "shift_paren_or" (formula "2") (term "0,0,0,0"))
                        (rule "commute_or_2" (formula "1") (term "1,0,0,0,0"))
                        (rule "commute_or_2" (formula "5") (term "0,0,0,0,0"))
                         (builtin "One Step Simplification" (formula "5"))
                        (rule "commute_or_2" (formula "5") (term "0,0,0,0"))
                        (rule "shift_paren_or" (formula "1") (term "0,0,0,0"))
                        (rule "cnf_rightDist" (formula "6") (term "0,0,0"))
                        (rule "distr_forallAnd" (formula "6") (term "0,0"))
                        (rule "distr_forallAnd" (formula "6") (term "0"))
                        (rule "distr_forallAnd" (formula "6"))
                        (rule "andLeft" (formula "6"))
                        (rule "commute_or_2" (formula "6") (term "0,0,0"))
                         (builtin "One Step Simplification" (formula "6"))
                        (rule "eqSymm" (formula "6") (term "1,0,0,0,0"))
                        (rule "castedGetAny" (formula "6") (term "1,0,0,1,0,0,0"))
                        (rule "castedGetAny" (formula "6") (term "0,0,0,0,0,0"))
                        (rule "castedGetAny" (formula "6") (term "0,1,0,0,0,0"))
                         (builtin "One Step Simplification" (formula "6"))
                        (rule "true_left" (formula "6"))
                        (rule "shift_paren_or" (formula "6") (term "0,0,0"))
                         (builtin "One Step Simplification" (formula "6"))
                        (rule "eqSymm" (formula "6") (term "1,1,0,0,0"))
                        (rule "castedGetAny" (formula "6") (term "0,0,0,0,0,0"))
                        (rule "castedGetAny" (formula "6") (term "0,0,1,0,0,0"))
                        (rule "castedGetAny" (formula "6") (term "0,1,1,0,0,0"))
                         (builtin "One Step Simplification" (formula "6"))
                        (rule "true_left" (formula "6"))
                        (rule "commute_and" (formula "4") (term "1,0,0,0"))
                        (rule "commute_and" (formula "3") (term "1,0,0,0"))
                        (rule "cnf_rightDist" (formula "5") (term "0,0,0"))
                        (rule "distr_forallAnd" (formula "5") (term "0,0"))
                        (rule "distr_forallAnd" (formula "5") (term "0"))
                        (rule "distr_forallAnd" (formula "5"))
                        (rule "andLeft" (formula "5"))
                        (rule "commute_or_2" (formula "5") (term "0,0,0"))
                         (builtin "One Step Simplification" (formula "5"))
                        (rule "eqSymm" (formula "5") (term "1,0,0,0,0"))
                        (rule "castedGetAny" (formula "5") (term "1,0,0,1,0,0,0"))
                        (rule "castedGetAny" (formula "5") (term "0,0,0,0,0,0"))
                        (rule "castedGetAny" (formula "5") (term "0,1,0,0,0,0"))
                         (builtin "One Step Simplification" (formula "5"))
                        (rule "true_left" (formula "5"))
                        (rule "shift_paren_or" (formula "5") (term "0,0,0"))
                         (builtin "One Step Simplification" (formula "5"))
                        (rule "eqSymm" (formula "5") (term "1,1,0,0,0"))
                        (rule "castedGetAny" (formula "5") (term "0,0,0,0,0,0"))
                        (rule "castedGetAny" (formula "5") (term "0,0,1,0,0,0"))
                        (rule "castedGetAny" (formula "5") (term "0,1,1,0,0,0"))
                         (builtin "One Step Simplification" (formula "5"))
                        (rule "true_left" (formula "5"))
                        (rule "commute_and" (formula "2") (term "1,0,0,0"))
                        (rule "commute_and" (formula "1") (term "1,0,0,0"))
                        (rule "shift_paren_or" (formula "4") (term "0,0,0,0,0"))
                         (builtin "One Step Simplification" (formula "4"))
                        (rule "shift_paren_or" (formula "3") (term "0,0,0,0,0"))
                         (builtin "One Step Simplification" (formula "3"))
                        (rule "shift_paren_or" (formula "2") (term "0,0,0,0,0"))
                         (builtin "One Step Simplification" (formula "2"))
                        (rule "shift_paren_or" (formula "1") (term "0,0,0,0,0"))
                         (builtin "One Step Simplification" (formula "1"))
                        (rule "commute_or_2" (formula "4") (term "0,0,0,0"))
                        (rule "commute_or_2" (formula "3") (term "0,0,0,0"))
                        (rule "commute_or_2" (formula "2") (term "0,0,0,0"))
                        (rule "cnf_rightDist" (formula "1") (term "0,0,0"))
                        (rule "distr_forallAnd" (formula "1") (term "0,0"))
                        (rule "distr_forallAnd" (formula "1") (term "0"))
                        (rule "distr_forallAnd" (formula "1"))
                        (rule "andLeft" (formula "1"))
                        (rule "shift_paren_or" (formula "2") (term "0,0,0"))
                         (builtin "One Step Simplification" (formula "2"))
                        (rule "eqSymm" (formula "2") (term "1,1,0,0,0"))
                        (rule "castedGetAny" (formula "2") (term "0,0,0,0,0,0"))
                        (rule "castedGetAny" (formula "2") (term "0,0,1,0,0,0"))
                        (rule "castedGetAny" (formula "2") (term "0,1,1,0,0,0"))
                         (builtin "One Step Simplification" (formula "2"))
                        (rule "true_left" (formula "2"))
                        (rule "cnf_rightDist" (formula "4") (term "0,0,0"))
                        (rule "distr_forallAnd" (formula "4") (term "0,0"))
                        (rule "distr_forallAnd" (formula "4") (term "0"))
                        (rule "distr_forallAnd" (formula "4"))
                        (rule "andLeft" (formula "4"))
                        (rule "shift_paren_or" (formula "5") (term "0,0,0"))
                         (builtin "One Step Simplification" (formula "5"))
                        (rule "eqSymm" (formula "5") (term "1,1,0,0,0"))
                        (rule "castedGetAny" (formula "5") (term "0,0,1,0,0,0"))
                        (rule "castedGetAny" (formula "5") (term "0,0,0,0,0,0"))
                        (rule "castedGetAny" (formula "5") (term "0,1,1,0,0,0"))
                         (builtin "One Step Simplification" (formula "5"))
                        (rule "true_left" (formula "5"))
                        (rule "cnf_rightDist" (formula "3") (term "0,0,0"))
                        (rule "distr_forallAnd" (formula "3") (term "0,0"))
                        (rule "distr_forallAnd" (formula "3") (term "0"))
                        (rule "distr_forallAnd" (formula "3"))
                        (rule "andLeft" (formula "3"))
                        (rule "cnf_rightDist" (formula "2") (term "0,0,0"))
                        (rule "distr_forallAnd" (formula "2") (term "0,0"))
                        (rule "distr_forallAnd" (formula "2") (term "0"))
                        (rule "distr_forallAnd" (formula "2"))
                        (rule "andLeft" (formula "2"))
                        (rule "shift_paren_or" (formula "4") (term "0,0,0"))
                         (builtin "One Step Simplification" (formula "4"))
                        (rule "eqSymm" (formula "4") (term "1,1,0,0,0"))
                        (rule "castedGetAny" (formula "4") (term "0,0,0,0,0,0"))
                        (rule "castedGetAny" (formula "4") (term "0,0,1,0,0,0"))
                        (rule "castedGetAny" (formula "4") (term "0,1,1,0,0,0"))
                         (builtin "One Step Simplification" (formula "4"))
                        (rule "true_left" (formula "4"))
                        (rule "cnf_rightDist" (formula "1") (term "0,0,0"))
                        (rule "distr_forallAnd" (formula "1") (term "0,0"))
                        (rule "distr_forallAnd" (formula "1") (term "0"))
                        (rule "distr_forallAnd" (formula "1"))
                        (rule "andLeft" (formula "1"))
                        (rule "cnf_rightDist" (formula "4") (term "0,0,0"))
                        (rule "distr_forallAnd" (formula "4") (term "0,0"))
                        (rule "distr_forallAnd" (formula "4") (term "0"))
                        (rule "distr_forallAnd" (formula "4"))
                        (rule "andLeft" (formula "4"))
                        (rule "commute_or_2" (formula "4") (term "0,0,0"))
                         (builtin "One Step Simplification" (formula "4"))
                        (rule "eqSymm" (formula "4") (term "1,0,0,0,0"))
                        (rule "castedGetAny" (formula "4") (term "1,0,0,1,0,0,0"))
                        (rule "castedGetAny" (formula "4") (term "0,0,0,0,0,0"))
                        (rule "castedGetAny" (formula "4") (term "0,1,0,0,0,0"))
                         (builtin "One Step Simplification" (formula "4"))
                        (rule "true_left" (formula "4"))
                        (rule "shift_paren_or" (formula "1") (term "0,0,0"))
                         (builtin "One Step Simplification" (formula "1"))
                        (rule "eqSymm" (formula "1") (term "1,1,0,0,0"))
                        (rule "castedGetAny" (formula "1") (term "1,0,0,0,0,0,0"))
                        (rule "castedGetAny" (formula "1") (term "0,0,1,0,0,0"))
                        (rule "castedGetAny" (formula "1") (term "0,1,1,0,0,0"))
                         (builtin "One Step Simplification" (formula "1"))
                        (rule "true_left" (formula "1"))
                        (rule "shift_paren_or" (formula "3") (term "0,0,0"))
                         (builtin "One Step Simplification" (formula "3"))
                        (rule "eqSymm" (formula "3") (term "1,1,0,0,0"))
                        (rule "castedGetAny" (formula "3") (term "0,0,1,0,0,0"))
                        (rule "castedGetAny" (formula "3") (term "1,0,0,0,0,0,0"))
                        (rule "castedGetAny" (formula "3") (term "0,1,1,0,0,0"))
                         (builtin "One Step Simplification" (formula "3"))
                        (rule "true_left" (formula "3"))
                        (rule "cnf_rightDist" (formula "2") (term "0,0,0"))
                        (rule "distr_forallAnd" (formula "2") (term "0,0"))
                        (rule "distr_forallAnd" (formula "2") (term "0"))
                        (rule "distr_forallAnd" (formula "2"))
                        (rule "andLeft" (formula "2"))
                        (rule "cnf_rightDist" (formula "1") (term "0,0,0"))
                        (rule "distr_forallAnd" (formula "1") (term "0,0"))
                        (rule "distr_forallAnd" (formula "1") (term "0"))
                        (rule "distr_forallAnd" (formula "1"))
                        (rule "andLeft" (formula "1"))
                        (rule "ifthenelse_split_for" (formula "31") (term "1,1"))
                        (branch "result_228_A_1.value@heapAtPre_A«anonHeapFunction» ≥ 0 TRUE"
                           (rule "cnf_rightDist" (formula "32"))
                           (rule "andLeft" (formula "32"))
                           (rule "commute_or" (formula "33"))
                           (rule "cnf_rightDist" (formula "32"))
                           (rule "andLeft" (formula "32"))
                           (rule "commute_or" (formula "33"))
                           (rule "commute_or_2" (formula "1") (term "0,0,0"))
                            (builtin "One Step Simplification" (formula "1"))
                           (rule "eqSymm" (formula "1") (term "1,0,0,0,0"))
                           (rule "castedGetAny" (formula "1") (term "0,0,0,0,0,0"))
                           (rule "castedGetAny" (formula "1") (term "1,0,0,1,0,0,0"))
                           (rule "castedGetAny" (formula "1") (term "0,1,0,0,0,0"))
                            (builtin "One Step Simplification" (formula "1"))
                           (rule "true_left" (formula "1"))
                           (rule "shift_paren_or" (formula "3") (term "0,0,0"))
                            (builtin "One Step Simplification" (formula "3"))
                           (rule "eqSymm" (formula "3") (term "1,1,0,0,0"))
                           (rule "castedGetAny" (formula "3") (term "0,0,1,0,0,0"))
                           (rule "castedGetAny" (formula "3") (term "1,0,0,0,0,0,0"))
                           (rule "castedGetAny" (formula "3") (term "0,1,1,0,0,0"))
                            (builtin "One Step Simplification" (formula "3"))
                           (rule "true_left" (formula "3"))
                           (rule "shift_paren_or" (formula "1") (term "0,0,0"))
                            (builtin "One Step Simplification" (formula "1"))
                           (rule "eqSymm" (formula "1") (term "1,1,0,0,0"))
                           (rule "castedGetAny" (formula "1") (term "1,0,0,0,0,0,0"))
                           (rule "castedGetAny" (formula "1") (term "0,0,1,0,0,0"))
                           (rule "castedGetAny" (formula "1") (term "0,1,1,0,0,0"))
                            (builtin "One Step Simplification" (formula "1"))
                           (rule "true_left" (formula "1"))
                           (rule "cnf_rightDist" (formula "1") (term "0,0,0"))
                           (rule "distr_forallAnd" (formula "1") (term "0,0"))
                           (rule "distr_forallAnd" (formula "1") (term "0"))
                           (rule "distr_forallAnd" (formula "1"))
                           (rule "andLeft" (formula "1"))
                           (rule "commute_or_2" (formula "1") (term "0,0,0"))
                            (builtin "One Step Simplification" (formula "1"))
                           (rule "eqSymm" (formula "1") (term "1,0,0,0,0"))
                           (rule "castedGetAny" (formula "1") (term "1,0,0,1,0,0,0"))
                           (rule "castedGetAny" (formula "1") (term "0,0,0,0,0,0"))
                           (rule "castedGetAny" (formula "1") (term "0,1,0,0,0,0"))
                            (builtin "One Step Simplification" (formula "1"))
                           (rule "true_left" (formula "1"))
                           (rule "shift_paren_or" (formula "1") (term "0,0,0"))
                            (builtin "One Step Simplification" (formula "1"))
                           (rule "eqSymm" (formula "1") (term "1,1,0,0,0"))
                           (rule "castedGetAny" (formula "1") (term "0,0,1,0,0,0"))
                           (rule "castedGetAny" (formula "1") (term "1,0,0,0,0,0,0"))
                           (rule "castedGetAny" (formula "1") (term "0,1,1,0,0,0"))
                            (builtin "One Step Simplification" (formula "1"))
                           (rule "true_left" (formula "1"))
                           (rule "cut_direct" (formula "28") (term "0"))
                           (branch "CUT: result_228_A_1.value@heapAtPre_A«anonHeapFunction» = 0 TRUE"
                               (builtin "One Step Simplification" (formula "29"))
                              (rule "true_left" (formula "29"))
                              (rule "replace_known_left" (formula "30") (term "0") (ifseqformula "28"))
                               (builtin "One Step Simplification" (formula "30"))
                              (rule "true_left" (formula "30"))
                              (rule "replace_known_left" (formula "29") (term "0") (ifseqformula "28"))
                               (builtin "One Step Simplification" (formula "29"))
                              (rule "true_left" (formula "29"))
                              (rule "applyEq" (formula "29") (term "1,0") (ifseqformula "28"))
                              (rule "eqSymm" (formula "29"))
                              (rule "polySimp_homoEq" (formula "29"))
                              (rule "polySimp_mulLiterals" (formula "29") (term "1,0"))
                              (rule "polySimp_elimOne" (formula "29") (term "1,0"))
                              (rule "applyEq" (formula "30") (term "1,0,0") (ifseqformula "28"))
                              (rule "polySimp_mulComm0" (formula "30") (term "0"))
                              (rule "applyEq" (formula "27") (term "0") (ifseqformula "28"))
                              (rule "qeq_literals" (formula "27"))
                              (rule "true_left" (formula "27"))
                              (rule "applyEq" (formula "6") (term "1") (ifseqformula "27"))
                              (rule "applyEq" (formula "57") (term "1") (ifseqformula "27"))
                              (rule "applyEq" (formula "22") (term "1") (ifseqformula "27"))
                              (rule "applyEq" (formula "28") (term "1,1,0") (ifseqformula "27"))
                              (rule "polySimp_addComm0" (formula "28") (term "0"))
                              (rule "applyEq" (formula "29") (term "0,0") (ifseqformula "27"))
                              (rule "times_zero_2" (formula "29") (term "0"))
                              (rule "polySimp_homoEq" (formula "29"))
                              (rule "mul_literals" (formula "29") (term "1,0"))
                              (rule "add_zero_right" (formula "29") (term "0"))
                              (rule "polySimp_sepPosMonomial" (formula "28"))
                              (rule "polySimp_sepNegMonomial" (formula "29"))
                              (rule "polySimp_mulLiterals" (formula "29") (term "0"))
                              (rule "polySimp_elimOne" (formula "29") (term "0"))
                              (rule "applyEq" (formula "3") (term "0") (ifseqformula "29"))
                              (rule "applyEq" (formula "28") (term "0,0") (ifseqformula "29"))
                              (rule "eqSymm" (formula "28"))
                              (rule "polySimp_homoEq" (formula "28"))
                              (rule "polySimp_mulLiterals" (formula "28") (term "1,0"))
                              (rule "polySimp_elimOne" (formula "28") (term "1,0"))
                              (rule "applyEq" (formula "28") (term "0,0,1,0") (ifseqformula "29"))
                              (rule "polySimp_addComm0" (formula "28") (term "0"))
                              (rule "applyEq" (formula "5") (term "1") (ifseqformula "29"))
                              (rule "polySimp_sepPosMonomial" (formula "28"))
                              (rule "div_axiom" (formula "28") (term "0,1") (inst "quotient=quotient_1"))
                               (builtin "One Step Simplification" (formula "28"))
                              (rule "true_left" (formula "28"))
                              (rule "jdiv_axiom" (formula "28") (term "0"))
                              (rule "eqSymm" (formula "28"))
                              (rule "applyEq" (formula "28") (term "1") (ifseqformula "29"))
                               (builtin "One Step Simplification" (formula "28"))
                              (rule "eqSymm" (formula "28") (term "1"))
                              (rule "polySimp_homoEq" (formula "28") (term "1"))
                              (rule "polySimp_mulLiterals" (formula "28") (term "1,0,1"))
                              (rule "polySimp_elimOne" (formula "28") (term "1,0,1"))
                              (rule "polySimp_sepPosMonomial" (formula "28") (term "1"))
                              (rule "inEqSimp_contradInEq0" (formula "28") (term "0,0") (ifseqformula "3"))
                              (rule "qeq_literals" (formula "28") (term "0,0,0"))
                               (builtin "One Step Simplification" (formula "28"))
                              (rule "true_left" (formula "28"))
                              (rule "Use_information_flow_contract_for_compareTo_325434207" (formula "18") (ifseqformula "18"))
                               (builtin "One Step Simplification" (formula "18") (ifInst ""  (formula "93")) (ifInst ""  (formula "93")))
                              (rule "true_left" (formula "18"))
                              (rule "Use_information_flow_contract_for_getOrder_757678341" (formula "59") (ifseqformula "24"))
                              (rule "applyEq" (formula "59") (term "0,0,1") (ifseqformula "57"))
                              (rule "eqSymm" (formula "59") (term "0,1"))
                              (rule "replace_known_left" (formula "59") (term "0,1") (ifseqformula "22"))
                               (builtin "One Step Simplification" (formula "59"))
                              (rule "applyEq" (formula "59") (term "0,1") (ifseqformula "6"))
                              (rule "eqSymm" (formula "59") (term "1"))
                              (rule "replace_known_left" (formula "59") (term "1") (ifseqformula "27"))
                               (builtin "One Step Simplification" (formula "59"))
                              (rule "true_left" (formula "59"))
                              (rule "Use_information_flow_contract_for_getOrder_757678341" (formula "59") (ifseqformula "59"))
                               (builtin "One Step Simplification" (formula "59"))
                              (rule "true_left" (formula "59"))
                              (rule "Use_information_flow_contract_for_compareTo_325434207" (formula "53") (ifseqformula "18"))
                              (rule "replace_known_right" (formula "53") (term "0,1,0,0") (ifseqformula "94"))
                               (builtin "One Step Simplification" (formula "53") (ifInst ""  (formula "93")))
                              (rule "applyEqRigid" (formula "53") (term "0,1,0,1") (ifseqformula "55"))
                              (rule "eqSymm" (formula "53") (term "1,0,1"))
                              (rule "replace_known_left" (formula "53") (term "1,0,1") (ifseqformula "19"))
                               (builtin "One Step Simplification" (formula "53"))
                              (rule "applyEq" (formula "53") (term "0,0,1") (ifseqformula "5"))
                              (rule "eqSymm" (formula "53") (term "0,1"))
                              (rule "replace_known_left" (formula "53") (term "0,1") (ifseqformula "29"))
                               (builtin "One Step Simplification" (formula "53"))
                              (rule "Class_invariant_axiom_for_java_math_BigInteger" (formula "53") (term "1,0"))
                              (rule "replace_known_left" (formula "53") (term "1,1,0") (ifseqformula "19"))
                               (builtin "One Step Simplification" (formula "53") (ifInst ""  (formula "93")))
                              (rule "Class_invariant_axiom_for_java_math_BigInteger" (formula "53") (term "0"))
                              (rule "replace_known_left" (formula "53") (term "1,0") (ifseqformula "55"))
                               (builtin "One Step Simplification" (formula "53") (ifInst ""  (formula "94")))
                              (rule "applyEq" (formula "54") (term "4") (ifseqformula "53"))
                              (rule "applyEq" (formula "45") (term "0") (ifseqformula "53"))
                              (rule "applyEq" (formula "51") (term "0") (ifseqformula "52"))
                              (rule "Use_information_flow_contract_for_getOrder_757678341" (formula "24") (ifseqformula "24"))
                               (builtin "One Step Simplification" (formula "24"))
                              (rule "true_left" (formula "24"))
                              (rule "Use_information_flow_contract_for_getOrder_757678341" (formula "24") (ifseqformula "58"))
                              (rule "eqSymm" (formula "24") (term "0,1"))
                              (rule "eqSymm" (formula "24") (term "1,1"))
                              (rule "applyEq" (formula "24") (term "0,1,1") (ifseqformula "6"))
                              (rule "eqSymm" (formula "24") (term "1,1"))
                              (rule "replace_known_left" (formula "24") (term "1,1") (ifseqformula "28"))
                               (builtin "One Step Simplification" (formula "24"))
                              (rule "true_left" (formula "24"))
                              (rule "Use_information_flow_contract_for_multiply_1272441881" (formula "69") (ifseqformula "36"))
                              (rule "replaceKnownSelect_taclet21_12" (formula "69") (term "0,1,1"))
                              (rule "replaceKnownSelect_taclet21_11" (formula "69") (term "1,1,1"))
                              (rule "replaceKnownAuxiliaryConstant_taclet01110121_19" (formula "69") (term "0,1,1"))
                              (rule "replaceKnownAuxiliaryConstant_taclet1110121_18" (formula "69") (term "1,1,1"))
                              (rule "replaceKnownSelect_taclet21_8" (formula "69") (term "1,1,0,1"))
                              (rule "replaceKnownSelect_taclet21_9" (formula "69") (term "0,1,0,1"))
                              (rule "replaceKnownAuxiliaryConstant_taclet21_10" (formula "69") (term "1,1,0,1"))
                               (builtin "One Step Simplification" (formula "69") (ifInst ""  (formula "83")) (ifInst ""  (formula "82")))
                              (rule "eqSymm" (formula "69") (term "1,1"))
                              (rule "replace_known_right" (formula "69") (term "1,1") (ifseqformula "100"))
                               (builtin "One Step Simplification" (formula "69"))
                              (rule "pullOutSelect" (formula "69") (term "1,0,1") (inst "selectSK=org_bouncycastle_math_ec_ECPoint_value_4"))
                              (rule "simplifySelectOfAnonEQ" (formula "69") (ifseqformula "25"))
                               (builtin "One Step Simplification" (formula "69") (ifInst ""  (formula "97")) (ifInst ""  (formula "13")))
                              (rule "applyEqReverse" (formula "70") (term "1,0,1") (ifseqformula "69"))
                              (rule "hideAuxiliaryEq" (formula "69"))
                              (rule "pullOutSelect" (formula "69") (term "0,0,1") (inst "selectSK=org_bouncycastle_math_ec_ECPoint_value_5"))
                              (rule "simplifySelectOfAnonEQ" (formula "69") (ifseqformula "60"))
                               (builtin "One Step Simplification" (formula "69") (ifInst ""  (formula "98")) (ifInst ""  (formula "47")))
                              (rule "applyEqReverse" (formula "70") (term "0,0,1") (ifseqformula "69"))
                              (rule "hideAuxiliaryEq" (formula "69"))
                              (rule "replace_known_left" (formula "69") (term "0,1") (ifseqformula "4"))
                               (builtin "One Step Simplification" (formula "69"))
                              (rule "notLeft" (formula "69"))
                              (rule "Class_invariant_axiom_for_org_bouncycastle_math_ec_ECPoint" (formula "75") (term "1"))
                               (builtin "One Step Simplification" (formula "75"))
                              (rule "Class_invariant_axiom_for_org_bouncycastle_math_ec_ECPoint" (formula "75"))
                              (rule "closeTrue" (formula "75"))
                           )
                           (branch "CUT: result_228_A_1.value@heapAtPre_A«anonHeapFunction» = 0 FALSE"
                               (builtin "One Step Simplification" (formula "28"))
                              (rule "replace_known_right" (formula "30") (term "0") (ifseqformula "79"))
                               (builtin "One Step Simplification" (formula "30"))
                              (rule "replace_known_right" (formula "29") (term "0") (ifseqformula "79"))
                               (builtin "One Step Simplification" (formula "29"))
                              (rule "applyEq" (formula "32") (term "0,0") (ifseqformula "29"))
                              (rule "polySimp_mulComm0" (formula "32") (term "0"))
                              (rule "applyEq" (formula "30") (term "0") (ifseqformula "32"))
                              (rule "inEqSimp_homoInEq1" (formula "30"))
                              (rule "polySimp_mulComm0" (formula "30") (term "1,0"))
                              (rule "polySimp_rightDist" (formula "30") (term "1,0"))
                              (rule "polySimp_mulLiterals" (formula "30") (term "1,1,0"))
                              (rule "polySimp_elimOne" (formula "30") (term "1,1,0"))
                              (rule "polySimp_mulComm0" (formula "30") (term "0,1,0"))
                              (rule "polySimp_addComm1" (formula "30") (term "0"))
                              (rule "polySimp_addAssoc" (formula "30") (term "0,0"))
                              (rule "polySimp_addComm1" (formula "30") (term "0,0,0"))
                              (rule "polySimp_pullOutFactor2b" (formula "30") (term "0,0"))
                              (rule "add_literals" (formula "30") (term "1,1,0,0"))
                              (rule "times_zero_1" (formula "30") (term "1,0,0"))
                              (rule "add_zero_right" (formula "30") (term "0,0"))
                              (rule "applyEq" (formula "28") (term "0") (ifseqformula "32"))
                              (rule "inEqSimp_homoInEq0" (formula "28"))
                              (rule "polySimp_mulComm0" (formula "28") (term "1,0"))
                              (rule "polySimp_rightDist" (formula "28") (term "1,0"))
                              (rule "polySimp_mulLiterals" (formula "28") (term "1,1,0"))
                              (rule "polySimp_elimOne" (formula "28") (term "1,1,0"))
                              (rule "polySimp_mulComm0" (formula "28") (term "0,1,0"))
                              (rule "polySimp_addAssoc" (formula "28") (term "0"))
                              (rule "polySimp_addComm0" (formula "28") (term "0,0"))
                              (rule "polySimp_pullOutFactor2b" (formula "28") (term "0"))
                              (rule "add_literals" (formula "28") (term "1,1,0"))
                              (rule "times_zero_1" (formula "28") (term "1,0"))
                              (rule "add_zero_right" (formula "28") (term "0"))
                              (rule "applyEq" (formula "31") (term "0,1") (ifseqformula "29"))
                              (rule "inEqSimp_sepNegMonomial0" (formula "30"))
                              (rule "polySimp_mulLiterals" (formula "30") (term "0"))
                              (rule "polySimp_elimOne" (formula "30") (term "0"))
                              (rule "inEqSimp_invertInEq1" (formula "28"))
                              (rule "polySimp_mulLiterals" (formula "28") (term "0"))
                              (rule "mul_literals" (formula "28") (term "1"))
                              (rule "polySimp_elimOne" (formula "28") (term "0"))
                              (rule "inEqSimp_strengthen1" (formula "27") (ifseqformula "79"))
                              (rule "add_literals" (formula "27") (term "1"))
                              (rule "inEqSimp_contradEq7" (formula "79") (ifseqformula "27"))
                              (rule "times_zero_1" (formula "79") (term "1,0,0"))
                              (rule "add_literals" (formula "79") (term "0,0"))
                              (rule "leq_literals" (formula "79") (term "0"))
                               (builtin "One Step Simplification" (formula "79"))
                              (rule "false_right" (formula "79"))
                              (rule "Use_information_flow_contract_for_compareTo_325434207" (formula "18") (ifseqformula "18"))
                               (builtin "One Step Simplification" (formula "18") (ifInst ""  (formula "96")) (ifInst ""  (formula "96")))
                              (rule "true_left" (formula "18"))
                              (rule "Use_information_flow_contract_for_getOrder_757678341" (formula "62") (ifseqformula "24"))
                              (rule "replace_known_left" (formula "62") (term "1,1") (ifseqformula "6"))
                               (builtin "One Step Simplification" (formula "62"))
                              (rule "true_left" (formula "62"))
                              (rule "Use_information_flow_contract_for_multiply_1272441881" (formula "73") (ifseqformula "39"))
                              (rule "replaceKnownSelect_taclet21_12" (formula "73") (term "0,1,1"))
                              (rule "replaceKnownSelect_taclet21_11" (formula "73") (term "1,1,1"))
                              (rule "replaceKnownAuxiliaryConstant_taclet01110121_19" (formula "73") (term "0,1,1"))
                              (rule "replaceKnownAuxiliaryConstant_taclet1110121_18" (formula "73") (term "1,1,1"))
                              (rule "replaceKnownSelect_taclet21_8" (formula "73") (term "1,1,0,1"))
                              (rule "replaceKnownSelect_taclet21_9" (formula "73") (term "0,1,0,1"))
                              (rule "replaceKnownAuxiliaryConstant_taclet21_10" (formula "73") (term "1,1,0,1"))
                               (builtin "One Step Simplification" (formula "73") (ifInst ""  (formula "87")) (ifInst ""  (formula "86")))
                              (rule "eqSymm" (formula "73") (term "1,1"))
                              (rule "replace_known_right" (formula "73") (term "1,1") (ifseqformula "104"))
                               (builtin "One Step Simplification" (formula "73"))
                              (rule "pullOutSelect" (formula "73") (term "1,0,1") (inst "selectSK=org_bouncycastle_math_ec_ECPoint_value_4"))
                              (rule "simplifySelectOfAnonEQ" (formula "73") (ifseqformula "25"))
                               (builtin "One Step Simplification" (formula "73") (ifInst ""  (formula "101")) (ifInst ""  (formula "13")))
                              (rule "applyEqReverse" (formula "74") (term "1,0,1") (ifseqformula "73"))
                              (rule "hideAuxiliaryEq" (formula "73"))
                              (rule "pullOutSelect" (formula "73") (term "0,0,1") (inst "selectSK=org_bouncycastle_math_ec_ECPoint_value_5"))
                              (rule "simplifySelectOfAnonEQ" (formula "73") (ifseqformula "64"))
                               (builtin "One Step Simplification" (formula "73") (ifInst ""  (formula "102")) (ifInst ""  (formula "51")))
                              (rule "applyEqReverse" (formula "74") (term "0,0,1") (ifseqformula "73"))
                              (rule "hideAuxiliaryEq" (formula "73"))
                              (rule "replace_known_left" (formula "73") (term "0,1") (ifseqformula "4"))
                               (builtin "One Step Simplification" (formula "73"))
                              (rule "notLeft" (formula "73"))
                              (rule "Class_invariant_axiom_for_org_bouncycastle_math_ec_ECPoint" (formula "79") (term "1"))
                               (builtin "One Step Simplification" (formula "79"))
                              (rule "Class_invariant_axiom_for_org_bouncycastle_math_ec_ECPoint" (formula "79"))
                              (rule "closeTrue" (formula "79"))
                           )
                        )
                        (branch "result_228_A_1.value@heapAtPre_A«anonHeapFunction» ≥ 0 FALSE"
                           (rule "inEqSimp_geqRight" (formula "80"))
                           (rule "mul_literals" (formula "1") (term "1,0,0"))
                           (rule "add_literals" (formula "1") (term "0,0"))
                           (rule "inEqSimp_sepPosMonomial0" (formula "1"))
                           (rule "mul_literals" (formula "1") (term "1"))
                           (rule "inEqSimp_contradEq3" (formula "32") (term "0") (ifseqformula "1"))
                           (rule "times_zero_1" (formula "32") (term "1,0,0,0"))
                           (rule "add_literals" (formula "32") (term "0,0,0"))
                           (rule "qeq_literals" (formula "32") (term "0,0"))
                            (builtin "One Step Simplification" (formula "32"))
                           (rule "andLeft" (formula "32"))
                           (rule "andLeft" (formula "32"))
                           (rule "applyEq" (formula "36") (term "0,0") (ifseqformula "33"))
                           (rule "polySimp_mulComm0" (formula "36") (term "0"))
                           (rule "applyEq" (formula "32") (term "0") (ifseqformula "36"))
                           (rule "inEqSimp_homoInEq0" (formula "32"))
                           (rule "polySimp_mulComm0" (formula "32") (term "1,0"))
                           (rule "polySimp_rightDist" (formula "32") (term "1,0"))
                           (rule "polySimp_mulLiterals" (formula "32") (term "1,1,0"))
                           (rule "polySimp_elimOne" (formula "32") (term "1,1,0"))
                           (rule "polySimp_mulComm0" (formula "32") (term "0,1,0"))
                           (rule "polySimp_addAssoc" (formula "32") (term "0"))
                           (rule "polySimp_addComm0" (formula "32") (term "0,0"))
                           (rule "polySimp_pullOutFactor2b" (formula "32") (term "0"))
                           (rule "add_literals" (formula "32") (term "1,1,0"))
                           (rule "times_zero_1" (formula "32") (term "1,0"))
                           (rule "add_zero_right" (formula "32") (term "0"))
                           (rule "applyEq" (formula "34") (term "0") (ifseqformula "36"))
                           (rule "inEqSimp_homoInEq1" (formula "34"))
                           (rule "polySimp_mulComm0" (formula "34") (term "1,0"))
                           (rule "polySimp_rightDist" (formula "34") (term "1,0"))
                           (rule "polySimp_mulLiterals" (formula "34") (term "1,1,0"))
                           (rule "polySimp_elimOne" (formula "34") (term "1,1,0"))
                           (rule "polySimp_mulComm0" (formula "34") (term "0,1,0"))
                           (rule "polySimp_addComm1" (formula "34") (term "0"))
                           (rule "polySimp_addAssoc" (formula "34") (term "0,0"))
                           (rule "polySimp_addComm1" (formula "34") (term "0,0,0"))
                           (rule "polySimp_pullOutFactor2b" (formula "34") (term "0,0"))
                           (rule "add_literals" (formula "34") (term "1,1,0,0"))
                           (rule "times_zero_1" (formula "34") (term "1,0,0"))
                           (rule "add_zero_right" (formula "34") (term "0,0"))
                           (rule "applyEq" (formula "35") (term "0,1") (ifseqformula "33"))
                           (rule "inEqSimp_invertInEq1" (formula "32"))
                           (rule "polySimp_mulLiterals" (formula "32") (term "0"))
                           (rule "mul_literals" (formula "32") (term "1"))
                           (rule "polySimp_elimOne" (formula "32") (term "0"))
                           (rule "inEqSimp_sepPosMonomial0" (formula "34"))
                           (rule "polySimp_mulComm0" (formula "34") (term "1"))
                           (rule "polySimp_rightDist" (formula "34") (term "1"))
                           (rule "polySimp_mulLiterals" (formula "34") (term "1,1"))
                           (rule "mul_literals" (formula "34") (term "0,1"))
                           (rule "polySimp_elimOne" (formula "34") (term "1,1"))
                           (rule "commute_or_2" (formula "2") (term "0,0,0"))
                            (builtin "One Step Simplification" (formula "2"))
                           (rule "eqSymm" (formula "2") (term "1,0,0,0,0"))
                           (rule "castedGetAny" (formula "2") (term "1,0,0,1,0,0,0"))
                           (rule "castedGetAny" (formula "2") (term "0,0,0,0,0,0"))
                           (rule "castedGetAny" (formula "2") (term "0,1,0,0,0,0"))
                            (builtin "One Step Simplification" (formula "2"))
                           (rule "true_left" (formula "2"))
                           (rule "shift_paren_or" (formula "4") (term "0,0,0"))
                            (builtin "One Step Simplification" (formula "4"))
                           (rule "eqSymm" (formula "4") (term "1,1,0,0,0"))
                           (rule "castedGetAny" (formula "4") (term "1,0,0,0,0,0,0"))
                           (rule "castedGetAny" (formula "4") (term "0,0,1,0,0,0"))
                           (rule "castedGetAny" (formula "4") (term "0,1,1,0,0,0"))
                            (builtin "One Step Simplification" (formula "4"))
                           (rule "true_left" (formula "4"))
                           (rule "shift_paren_or" (formula "2") (term "0,0,0"))
                            (builtin "One Step Simplification" (formula "2"))
                           (rule "eqSymm" (formula "2") (term "1,1,0,0,0"))
                           (rule "castedGetAny" (formula "2") (term "1,0,0,0,0,0,0"))
                           (rule "castedGetAny" (formula "2") (term "0,0,1,0,0,0"))
                           (rule "castedGetAny" (formula "2") (term "0,1,1,0,0,0"))
                            (builtin "One Step Simplification" (formula "2"))
                           (rule "true_left" (formula "2"))
                           (rule "cnf_rightDist" (formula "2") (term "0,0,0"))
                           (rule "distr_forallAnd" (formula "2") (term "0,0"))
                           (rule "distr_forallAnd" (formula "2") (term "0"))
                           (rule "distr_forallAnd" (formula "2"))
                           (rule "andLeft" (formula "2"))
                           (rule "commute_or_2" (formula "2") (term "0,0,0"))
                            (builtin "One Step Simplification" (formula "2"))
                           (rule "eqSymm" (formula "2") (term "1,0,0,0,0"))
                           (rule "castedGetAny" (formula "2") (term "0,0,0,0,0,0"))
                           (rule "castedGetAny" (formula "2") (term "1,0,0,1,0,0,0"))
                           (rule "castedGetAny" (formula "2") (term "0,1,0,0,0,0"))
                            (builtin "One Step Simplification" (formula "2"))
                           (rule "true_left" (formula "2"))
                           (rule "shift_paren_or" (formula "2") (term "0,0,0"))
                            (builtin "One Step Simplification" (formula "2"))
                           (rule "eqSymm" (formula "2") (term "1,1,0,0,0"))
                           (rule "castedGetAny" (formula "2") (term "0,0,1,0,0,0"))
                           (rule "castedGetAny" (formula "2") (term "1,0,0,0,0,0,0"))
                           (rule "castedGetAny" (formula "2") (term "0,1,1,0,0,0"))
                            (builtin "One Step Simplification" (formula "2"))
                           (rule "true_left" (formula "2"))
                           (rule "Use_information_flow_contract_for_compareTo_325434207" (formula "19") (ifseqformula "19"))
                            (builtin "One Step Simplification" (formula "19") (ifInst ""  (formula "96")) (ifInst ""  (formula "96")))
                           (rule "true_left" (formula "19"))
                           (rule "Use_information_flow_contract_for_getOrder_757678341" (formula "62") (ifseqformula "25"))
                           (rule "replace_known_left" (formula "62") (term "1,1") (ifseqformula "7"))
                            (builtin "One Step Simplification" (formula "62"))
                           (rule "true_left" (formula "62"))
                           (rule "Use_information_flow_contract_for_multiply_1272441881" (formula "73") (ifseqformula "39"))
                           (rule "replaceKnownSelect_taclet21_11" (formula "73") (term "1,1,1"))
                           (rule "replaceKnownSelect_taclet21_12" (formula "73") (term "0,1,1"))
                           (rule "replaceKnownAuxiliaryConstant_taclet1110121_18" (formula "73") (term "1,1,1"))
                           (rule "replaceKnownAuxiliaryConstant_taclet01110121_19" (formula "73") (term "0,1,1"))
                           (rule "replaceKnownSelect_taclet21_8" (formula "73") (term "1,1,0,1"))
                           (rule "replaceKnownSelect_taclet21_9" (formula "73") (term "0,1,0,1"))
                           (rule "replaceKnownAuxiliaryConstant_taclet21_10" (formula "73") (term "1,1,0,1"))
                            (builtin "One Step Simplification" (formula "73") (ifInst ""  (formula "87")) (ifInst ""  (formula "86")))
                           (rule "eqSymm" (formula "73") (term "1,1"))
                           (rule "replace_known_right" (formula "73") (term "1,1") (ifseqformula "104"))
                            (builtin "One Step Simplification" (formula "73"))
                           (rule "pullOutSelect" (formula "73") (term "1,0,1") (inst "selectSK=org_bouncycastle_math_ec_ECPoint_value_4"))
                           (rule "simplifySelectOfAnonEQ" (formula "73") (ifseqformula "26"))
                            (builtin "One Step Simplification" (formula "73") (ifInst ""  (formula "101")) (ifInst ""  (formula "14")))
                           (rule "applyEqReverse" (formula "74") (term "1,0,1") (ifseqformula "73"))
                           (rule "hideAuxiliaryEq" (formula "73"))
                           (rule "pullOutSelect" (formula "73") (term "0,0,1") (inst "selectSK=org_bouncycastle_math_ec_ECPoint_value_5"))
                           (rule "simplifySelectOfAnonEQ" (formula "73") (ifseqformula "64"))
                            (builtin "One Step Simplification" (formula "73") (ifInst ""  (formula "102")) (ifInst ""  (formula "51")))
                           (rule "applyEqReverse" (formula "74") (term "0,0,1") (ifseqformula "73"))
                           (rule "hideAuxiliaryEq" (formula "73"))
                           (rule "replace_known_left" (formula "73") (term "0,1") (ifseqformula "5"))
                            (builtin "One Step Simplification" (formula "73"))
                           (rule "notLeft" (formula "73"))
                           (rule "Class_invariant_axiom_for_org_bouncycastle_math_ec_ECPoint" (formula "79") (term "1"))
                            (builtin "One Step Simplification" (formula "79"))
                           (rule "Class_invariant_axiom_for_org_bouncycastle_math_ec_ECPoint" (formula "79"))
                           (rule "closeTrue" (formula "79"))
                        )
                     )
                     (branch " resultAtPost_226_B.<created>@anon_heap_mod«anonHeapFunction» = TRUE FALSE"
                        (rule "applyEqReverse" (formula "108") (term "1") (ifseqformula "8"))
                        (rule "hideAuxiliaryEq" (formula "8"))
                        (rule "eqSymm" (formula "107"))
                        (rule "replace_known_right" (formula "75") (term "0") (ifseqformula "82"))
                         (builtin "One Step Simplification" (formula "75"))
                        (rule "commute_or" (formula "3") (term "0,1,0,0,0"))
                        (rule "commute_or" (formula "2") (term "0,0,0,0"))
                        (rule "onlyCreatedObjectsAreReferenced" (formula "100") (term "0") (ifseqformula "55"))
                        (rule "replace_known_left" (formula "1") (term "1") (ifseqformula "61"))
                         (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "101")))
                        (rule "true_left" (formula "1"))
                        (rule "onlyCreatedObjectsAreReferenced" (formula "25") (term "1,0") (ifseqformula "20"))
                        (rule "replace_known_right" (formula "25") (term "0") (ifseqformula "100"))
                         (builtin "One Step Simplification" (formula "25") (ifInst ""  (formula "26")))
                        (rule "true_left" (formula "25"))
                        (rule "onlyCreatedObjectsAreReferenced" (formula "29") (term "2") (ifseqformula "20"))
                        (rule "replace_known_right" (formula "29") (term "0") (ifseqformula "98"))
                         (builtin "One Step Simplification" (formula "29") (ifInst ""  (formula "14")))
                        (rule "true_left" (formula "29"))
                        (rule "onlyCreatedObjectsAreReferenced" (formula "12") (term "1,1,0") (ifseqformula "20"))
                        (rule "replace_known_right" (formula "12") (term "0") (ifseqformula "96"))
                         (builtin "One Step Simplification" (formula "12") (ifInst ""  (formula "14")))
                        (rule "true_left" (formula "12"))
                        (rule "onlyCreatedObjectsAreReferenced" (formula "48") (term "1,0") (ifseqformula "55"))
                        (rule "replace_known_right" (formula "48") (term "0") (ifseqformula "97"))
                         (builtin "One Step Simplification" (formula "48") (ifInst ""  (formula "49")))
                        (rule "true_left" (formula "48"))
                        (rule "onlyCreatedObjectsAreReferenced" (formula "47") (term "1,0") (ifseqformula "55"))
                        (rule "replace_known_left" (formula "47") (term "1") (ifseqformula "48"))
                         (builtin "One Step Simplification" (formula "47") (ifInst ""  (formula "95")))
                        (rule "true_left" (formula "47"))
                        (rule "onlyCreatedObjectsAreReferenced" (formula "12") (term "1,0") (ifseqformula "20"))
                        (rule "replace_known_left" (formula "12") (term "1") (ifseqformula "13"))
                         (builtin "One Step Simplification" (formula "12") (ifInst ""  (formula "94")))
                        (rule "true_left" (formula "12"))
                        (rule "commute_or" (formula "2") (term "0,1,0,0,0"))
                        (rule "onlyCreatedObjectsAreReferenced" (formula "64") (term "2") (ifseqformula "55"))
                        (rule "replace_known_right" (formula "64") (term "0") (ifseqformula "99"))
                         (builtin "One Step Simplification" (formula "64") (ifInst ""  (formula "49")))
                        (rule "true_left" (formula "64"))
                        (rule "commute_or" (formula "1") (term "0,0,0,0"))
                        (rule "commute_or" (formula "1") (term "0,1,0,0,0"))
                        (rule "commute_or_2" (formula "4") (term "0,0,0"))
                        (rule "commute_and" (formula "32") (term "0,1"))
                        (rule "commute_or_2" (formula "3") (term "0,0,0"))
                        (rule "commute_or_2" (formula "6") (term "0,0,0,0,0"))
                         (builtin "One Step Simplification" (formula "6"))
                        (rule "commute_or_2" (formula "2") (term "0,0,0"))
                        (rule "commute_or_2" (formula "1") (term "0,0,0"))
                        (rule "shift_paren_or" (formula "5") (term "0,0,0,0,0"))
                        (rule "commute_or_2" (formula "6") (term "0,0,0,0"))
                        (rule "shift_paren_or" (formula "4") (term "0,0,0,0"))
                        (rule "commute_or_2" (formula "3") (term "1,0,0,0,0"))
                        (rule "commute_or_2" (formula "2") (term "1,0,0,0,0"))
                        (rule "shift_paren_or" (formula "1") (term "0,0,0,0"))
                        (rule "commute_or_2" (formula "5") (term "0,0,0,0,0"))
                         (builtin "One Step Simplification" (formula "5"))
                        (rule "commute_or_2" (formula "5") (term "0,0,0,0"))
                        (rule "shift_paren_or" (formula "3") (term "0,0,0,0"))
                        (rule "shift_paren_or" (formula "2") (term "0,0,0,0"))
                        (rule "cnf_rightDist" (formula "6") (term "0,0,0"))
                        (rule "distr_forallAnd" (formula "6") (term "0,0"))
                        (rule "distr_forallAnd" (formula "6") (term "0"))
                        (rule "distr_forallAnd" (formula "6"))
                        (rule "andLeft" (formula "6"))
                        (rule "commute_or_2" (formula "6") (term "0,0,0"))
                         (builtin "One Step Simplification" (formula "6"))
                        (rule "eqSymm" (formula "6") (term "1,0,0,0,0"))
                        (rule "castedGetAny" (formula "6") (term "1,0,0,1,0,0,0"))
                        (rule "castedGetAny" (formula "6") (term "0,0,0,0,0,0"))
                        (rule "castedGetAny" (formula "6") (term "0,1,0,0,0,0"))
                         (builtin "One Step Simplification" (formula "6"))
                        (rule "true_left" (formula "6"))
                        (rule "shift_paren_or" (formula "6") (term "0,0,0"))
                         (builtin "One Step Simplification" (formula "6"))
                        (rule "eqSymm" (formula "6") (term "1,1,0,0,0"))
                        (rule "castedGetAny" (formula "6") (term "0,0,1,0,0,0"))
                        (rule "castedGetAny" (formula "6") (term "0,0,0,0,0,0"))
                        (rule "castedGetAny" (formula "6") (term "0,1,1,0,0,0"))
                         (builtin "One Step Simplification" (formula "6"))
                        (rule "true_left" (formula "6"))
                        (rule "commute_and" (formula "4") (term "1,0,0,0"))
                        (rule "commute_and" (formula "3") (term "1,0,0,0"))
                        (rule "cnf_rightDist" (formula "5") (term "0,0,0"))
                        (rule "distr_forallAnd" (formula "5") (term "0,0"))
                        (rule "distr_forallAnd" (formula "5") (term "0"))
                        (rule "distr_forallAnd" (formula "5"))
                        (rule "andLeft" (formula "5"))
                        (rule "commute_or_2" (formula "5") (term "0,0,0"))
                         (builtin "One Step Simplification" (formula "5"))
                        (rule "eqSymm" (formula "5") (term "1,0,0,0,0"))
                        (rule "castedGetAny" (formula "5") (term "1,0,0,1,0,0,0"))
                        (rule "castedGetAny" (formula "5") (term "0,0,0,0,0,0"))
                        (rule "castedGetAny" (formula "5") (term "0,1,0,0,0,0"))
                         (builtin "One Step Simplification" (formula "5"))
                        (rule "true_left" (formula "5"))
                        (rule "commute_and" (formula "2") (term "1,0,0,0"))
                        (rule "shift_paren_or" (formula "5") (term "0,0,0"))
                         (builtin "One Step Simplification" (formula "5"))
                        (rule "eqSymm" (formula "5") (term "1,1,0,0,0"))
                        (rule "castedGetAny" (formula "5") (term "0,0,1,0,0,0"))
                        (rule "castedGetAny" (formula "5") (term "0,0,0,0,0,0"))
                        (rule "castedGetAny" (formula "5") (term "0,1,1,0,0,0"))
                         (builtin "One Step Simplification" (formula "5"))
                        (rule "true_left" (formula "5"))
                        (rule "commute_and" (formula "1") (term "1,0,0,0"))
                        (rule "shift_paren_or" (formula "4") (term "0,0,0,0,0"))
                         (builtin "One Step Simplification" (formula "4"))
                        (rule "shift_paren_or" (formula "1") (term "0,0,0,0,0"))
                         (builtin "One Step Simplification" (formula "1"))
                        (rule "shift_paren_or" (formula "3") (term "0,0,0,0,0"))
                         (builtin "One Step Simplification" (formula "3"))
                        (rule "shift_paren_or" (formula "2") (term "0,0,0,0,0"))
                         (builtin "One Step Simplification" (formula "2"))
                        (rule "commute_or_2" (formula "4") (term "0,0,0,0"))
                        (rule "commute_or_2" (formula "1") (term "0,0,0,0"))
                        (rule "cnf_rightDist" (formula "3") (term "0,0,0"))
                        (rule "distr_forallAnd" (formula "3") (term "0,0"))
                        (rule "distr_forallAnd" (formula "3") (term "0"))
                        (rule "distr_forallAnd" (formula "3"))
                        (rule "andLeft" (formula "3"))
                        (rule "shift_paren_or" (formula "4") (term "0,0,0"))
                         (builtin "One Step Simplification" (formula "4"))
                        (rule "eqSymm" (formula "4") (term "1,1,0,0,0"))
                        (rule "castedGetAny" (formula "4") (term "0,0,0,0,0,0"))
                        (rule "castedGetAny" (formula "4") (term "0,0,1,0,0,0"))
                        (rule "castedGetAny" (formula "4") (term "0,1,1,0,0,0"))
                         (builtin "One Step Simplification" (formula "4"))
                        (rule "true_left" (formula "4"))
                        (rule "cnf_rightDist" (formula "2") (term "0,0,0"))
                        (rule "distr_forallAnd" (formula "2") (term "0,0"))
                        (rule "distr_forallAnd" (formula "2") (term "0"))
                        (rule "distr_forallAnd" (formula "2"))
                        (rule "andLeft" (formula "2"))
                        (rule "shift_paren_or" (formula "3") (term "0,0,0"))
                         (builtin "One Step Simplification" (formula "3"))
                        (rule "eqSymm" (formula "3") (term "1,1,0,0,0"))
                        (rule "castedGetAny" (formula "3") (term "0,0,0,0,0,0"))
                        (rule "castedGetAny" (formula "3") (term "0,0,1,0,0,0"))
                        (rule "castedGetAny" (formula "3") (term "0,1,1,0,0,0"))
                         (builtin "One Step Simplification" (formula "3"))
                        (rule "true_left" (formula "3"))
                        (rule "cnf_rightDist" (formula "4") (term "0,0,0"))
                        (rule "distr_forallAnd" (formula "4") (term "0,0"))
                        (rule "distr_forallAnd" (formula "4") (term "0"))
                        (rule "distr_forallAnd" (formula "4"))
                        (rule "andLeft" (formula "4"))
                        (rule "cnf_rightDist" (formula "1") (term "0,0,0"))
                        (rule "distr_forallAnd" (formula "1") (term "0,0"))
                        (rule "distr_forallAnd" (formula "1") (term "0"))
                        (rule "distr_forallAnd" (formula "1"))
                        (rule "andLeft" (formula "1"))
                        (rule "shift_paren_or" (formula "5") (term "0,0,0"))
                         (builtin "One Step Simplification" (formula "5"))
                        (rule "eqSymm" (formula "5") (term "1,1,0,0,0"))
                        (rule "castedGetAny" (formula "5") (term "0,0,0,0,0,0"))
                        (rule "castedGetAny" (formula "5") (term "0,0,1,0,0,0"))
                        (rule "castedGetAny" (formula "5") (term "0,1,1,0,0,0"))
                         (builtin "One Step Simplification" (formula "5"))
                        (rule "true_left" (formula "5"))
                        (rule "cnf_rightDist" (formula "3") (term "0,0,0"))
                        (rule "distr_forallAnd" (formula "3") (term "0,0"))
                        (rule "distr_forallAnd" (formula "3") (term "0"))
                        (rule "distr_forallAnd" (formula "3"))
                        (rule "andLeft" (formula "3"))
                        (rule "cnf_rightDist" (formula "2") (term "0,0,0"))
                        (rule "distr_forallAnd" (formula "2") (term "0,0"))
                        (rule "distr_forallAnd" (formula "2") (term "0"))
                        (rule "distr_forallAnd" (formula "2"))
                        (rule "andLeft" (formula "2"))
                        (rule "commute_or_2" (formula "2") (term "0,0,0"))
                         (builtin "One Step Simplification" (formula "2"))
                        (rule "eqSymm" (formula "2") (term "1,0,0,0,0"))
                        (rule "castedGetAny" (formula "2") (term "0,0,0,0,0,0"))
                        (rule "castedGetAny" (formula "2") (term "1,0,0,1,0,0,0"))
                        (rule "castedGetAny" (formula "2") (term "0,1,0,0,0,0"))
                         (builtin "One Step Simplification" (formula "2"))
                        (rule "true_left" (formula "2"))
                        (rule "shift_paren_or" (formula "3") (term "0,0,0"))
                         (builtin "One Step Simplification" (formula "3"))
                        (rule "eqSymm" (formula "3") (term "1,1,0,0,0"))
                        (rule "castedGetAny" (formula "3") (term "1,0,0,0,0,0,0"))
                        (rule "castedGetAny" (formula "3") (term "0,0,1,0,0,0"))
                        (rule "castedGetAny" (formula "3") (term "0,1,1,0,0,0"))
                         (builtin "One Step Simplification" (formula "3"))
                        (rule "true_left" (formula "3"))
                        (rule "shift_paren_or" (formula "2") (term "0,0,0"))
                         (builtin "One Step Simplification" (formula "2"))
                        (rule "eqSymm" (formula "2") (term "1,1,0,0,0"))
                        (rule "castedGetAny" (formula "2") (term "1,0,0,0,0,0,0"))
                        (rule "castedGetAny" (formula "2") (term "0,0,1,0,0,0"))
                        (rule "castedGetAny" (formula "2") (term "0,1,1,0,0,0"))
                         (builtin "One Step Simplification" (formula "2"))
                        (rule "true_left" (formula "2"))
                        (rule "cnf_rightDist" (formula "2") (term "0,0,0"))
                        (rule "distr_forallAnd" (formula "2") (term "0,0"))
                        (rule "distr_forallAnd" (formula "2") (term "0"))
                        (rule "distr_forallAnd" (formula "2"))
                        (rule "andLeft" (formula "2"))
                        (rule "commute_or_2" (formula "2") (term "0,0,0"))
                         (builtin "One Step Simplification" (formula "2"))
                        (rule "eqSymm" (formula "2") (term "1,0,0,0,0"))
                        (rule "castedGetAny" (formula "2") (term "0,0,0,0,0,0"))
                        (rule "castedGetAny" (formula "2") (term "1,0,0,1,0,0,0"))
                        (rule "castedGetAny" (formula "2") (term "0,1,0,0,0,0"))
                         (builtin "One Step Simplification" (formula "2"))
                        (rule "true_left" (formula "2"))
                        (rule "cnf_rightDist" (formula "1") (term "0,0,0"))
                        (rule "distr_forallAnd" (formula "1") (term "0,0"))
                        (rule "distr_forallAnd" (formula "1") (term "0"))
                        (rule "distr_forallAnd" (formula "1"))
                        (rule "andLeft" (formula "1"))
                        (rule "ifthenelse_split_for" (formula "29") (term "1,1"))
                        (branch "result_228_A_1.value@heapAtPre_A«anonHeapFunction» ≥ 0 TRUE"
                           (rule "cnf_rightDist" (formula "30"))
                           (rule "andLeft" (formula "30"))
                           (rule "commute_or" (formula "31"))
                           (rule "cnf_rightDist" (formula "30"))
                           (rule "andLeft" (formula "30"))
                           (rule "commute_or" (formula "31"))
                           (rule "shift_paren_or" (formula "3") (term "0,0,0"))
                            (builtin "One Step Simplification" (formula "3"))
                           (rule "eqSymm" (formula "3") (term "1,1,0,0,0"))
                           (rule "castedGetAny" (formula "3") (term "0,0,1,0,0,0"))
                           (rule "castedGetAny" (formula "3") (term "1,0,0,0,0,0,0"))
                           (rule "castedGetAny" (formula "3") (term "0,1,1,0,0,0"))
                            (builtin "One Step Simplification" (formula "3"))
                           (rule "true_left" (formula "3"))
                           (rule "shift_paren_or" (formula "2") (term "0,0,0"))
                            (builtin "One Step Simplification" (formula "2"))
                           (rule "eqSymm" (formula "2") (term "1,1,0,0,0"))
                           (rule "castedGetAny" (formula "2") (term "0,0,1,0,0,0"))
                           (rule "castedGetAny" (formula "2") (term "1,0,0,0,0,0,0"))
                           (rule "castedGetAny" (formula "2") (term "0,1,1,0,0,0"))
                            (builtin "One Step Simplification" (formula "2"))
                           (rule "true_left" (formula "2"))
                           (rule "cnf_rightDist" (formula "1") (term "0,0,0"))
                           (rule "distr_forallAnd" (formula "1") (term "0,0"))
                           (rule "distr_forallAnd" (formula "1") (term "0"))
                           (rule "distr_forallAnd" (formula "1"))
                           (rule "andLeft" (formula "1"))
                           (rule "commute_or_2" (formula "1") (term "0,0,0"))
                            (builtin "One Step Simplification" (formula "1"))
                           (rule "eqSymm" (formula "1") (term "1,0,0,0,0"))
                           (rule "castedGetAny" (formula "1") (term "0,0,0,0,0,0"))
                           (rule "castedGetAny" (formula "1") (term "1,0,0,1,0,0,0"))
                           (rule "castedGetAny" (formula "1") (term "0,1,0,0,0,0"))
                            (builtin "One Step Simplification" (formula "1"))
                           (rule "true_left" (formula "1"))
                           (rule "shift_paren_or" (formula "1") (term "0,0,0"))
                            (builtin "One Step Simplification" (formula "1"))
                           (rule "eqSymm" (formula "1") (term "1,1,0,0,0"))
                           (rule "castedGetAny" (formula "1") (term "0,0,1,0,0,0"))
                           (rule "castedGetAny" (formula "1") (term "1,0,0,0,0,0,0"))
                           (rule "castedGetAny" (formula "1") (term "0,1,1,0,0,0"))
                            (builtin "One Step Simplification" (formula "1"))
                           (rule "true_left" (formula "1"))
                           (rule "cut_direct" (formula "27") (term "0"))
                           (branch "CUT: result_228_A_1.value@heapAtPre_A«anonHeapFunction» = 0 TRUE"
                               (builtin "One Step Simplification" (formula "28"))
                              (rule "true_left" (formula "28"))
                              (rule "replace_known_left" (formula "28") (term "0") (ifseqformula "27"))
                               (builtin "One Step Simplification" (formula "28"))
                              (rule "true_left" (formula "28"))
                              (rule "replace_known_left" (formula "28") (term "0") (ifseqformula "27"))
                               (builtin "One Step Simplification" (formula "28"))
                              (rule "true_left" (formula "28"))
                              (rule "applyEq" (formula "29") (term "1,0,0") (ifseqformula "27"))
                              (rule "polySimp_mulComm0" (formula "29") (term "0"))
                              (rule "applyEq" (formula "26") (term "0") (ifseqformula "27"))
                              (rule "qeq_literals" (formula "26"))
                              (rule "true_left" (formula "26"))
                              (rule "applyEq" (formula "27") (term "1,0") (ifseqformula "26"))
                              (rule "eqSymm" (formula "27"))
                              (rule "polySimp_homoEq" (formula "27"))
                              (rule "polySimp_mulLiterals" (formula "27") (term "1,0"))
                              (rule "polySimp_elimOne" (formula "27") (term "1,0"))
                              (rule "applyEq" (formula "21") (term "1") (ifseqformula "26"))
                              (rule "applyEq" (formula "5") (term "1") (ifseqformula "26"))
                              (rule "applyEq" (formula "56") (term "1") (ifseqformula "26"))
                              (rule "applyEq" (formula "28") (term "0,0") (ifseqformula "26"))
                              (rule "times_zero_2" (formula "28") (term "0"))
                              (rule "polySimp_homoEq" (formula "28"))
                              (rule "mul_literals" (formula "28") (term "1,0"))
                              (rule "add_zero_right" (formula "28") (term "0"))
                              (rule "applyEq" (formula "27") (term "1,1,0") (ifseqformula "26"))
                              (rule "polySimp_addComm0" (formula "27") (term "0"))
                              (rule "polySimp_sepNegMonomial" (formula "28"))
                              (rule "polySimp_mulLiterals" (formula "28") (term "0"))
                              (rule "polySimp_elimOne" (formula "28") (term "0"))
                              (rule "applyEq" (formula "2") (term "0") (ifseqformula "28"))
                              (rule "applyEq" (formula "27") (term "0,1,0") (ifseqformula "28"))
                              (rule "polySimp_addComm0" (formula "27") (term "0"))
                              (rule "applyEq" (formula "27") (term "0,0,1,0") (ifseqformula "28"))
                              (rule "polySimp_addComm0" (formula "27") (term "0"))
                              (rule "applyEq" (formula "4") (term "1") (ifseqformula "28"))
                              (rule "polySimp_sepPosMonomial" (formula "27"))
                              (rule "div_axiom" (formula "27") (term "0,1") (inst "quotient=quotient_1"))
                               (builtin "One Step Simplification" (formula "27"))
                              (rule "true_left" (formula "27"))
                              (rule "jdiv_axiom" (formula "27") (term "0"))
                              (rule "eqSymm" (formula "27"))
                              (rule "applyEq" (formula "27") (term "1") (ifseqformula "28"))
                               (builtin "One Step Simplification" (formula "27"))
                              (rule "eqSymm" (formula "27") (term "1"))
                              (rule "polySimp_homoEq" (formula "27") (term "1"))
                              (rule "polySimp_mulLiterals" (formula "27") (term "1,0,1"))
                              (rule "polySimp_elimOne" (formula "27") (term "1,0,1"))
                              (rule "polySimp_sepPosMonomial" (formula "27") (term "1"))
                              (rule "inEqSimp_contradInEq0" (formula "27") (term "0,0") (ifseqformula "2"))
                              (rule "qeq_literals" (formula "27") (term "0,0,0"))
                               (builtin "One Step Simplification" (formula "27"))
                              (rule "true_left" (formula "27"))
                              (rule "Use_information_flow_contract_for_compareTo_325434207" (formula "17") (ifseqformula "17"))
                               (builtin "One Step Simplification" (formula "17") (ifInst ""  (formula "94")) (ifInst ""  (formula "94")))
                              (rule "true_left" (formula "17"))
                              (rule "Use_information_flow_contract_for_getOrder_757678341" (formula "58") (ifseqformula "23"))
                              (rule "applyEq" (formula "58") (term "0,1,1") (ifseqformula "5"))
                              (rule "eqSymm" (formula "58") (term "1,1"))
                              (rule "replace_known_left" (formula "58") (term "1,1") (ifseqformula "26"))
                               (builtin "One Step Simplification" (formula "58"))
                              (rule "true_left" (formula "58"))
                              (rule "Use_information_flow_contract_for_multiply_1272441881" (formula "70") (ifseqformula "35"))
                              (rule "replaceKnownSelect_taclet21_11" (formula "70") (term "1,1,1"))
                              (rule "replaceKnownSelect_taclet21_12" (formula "70") (term "0,1,1"))
                              (rule "replaceKnownAuxiliaryConstant_taclet1110121_18" (formula "70") (term "1,1,1"))
                              (rule "replaceKnownAuxiliaryConstant_taclet11110121_19" (formula "70") (term "0,1,1"))
                              (rule "replaceKnownSelect_taclet21_9" (formula "70") (term "0,1,0,1"))
                              (rule "replaceKnownSelect_taclet21_8" (formula "70") (term "1,1,0,1"))
                              (rule "replaceKnownAuxiliaryConstant_taclet121_15" (formula "70") (term "0,1,0,1"))
                              (rule "replaceKnownAuxiliaryConstant_taclet21_10" (formula "70") (term "1,1,0,1"))
                              (rule "replaceKnownAuxiliaryConstant_taclet121_15" (formula "70") (term "1,1,0,1"))
                               (builtin "One Step Simplification" (formula "70") (ifInst ""  (formula "85")) (ifInst ""  (formula "84")) (ifInst ""  (formula "102")))
                              (rule "pullOutSelect" (formula "70") (term "0,0,1") (inst "selectSK=org_bouncycastle_math_ec_ECPoint_value_4"))
                              (rule "simplifySelectOfAnonEQ" (formula "70") (ifseqformula "60"))
                               (builtin "One Step Simplification" (formula "70") (ifInst ""  (formula "100")) (ifInst ""  (formula "47")))
                              (rule "applyEqReverse" (formula "71") (term "0,0,1") (ifseqformula "70"))
                              (rule "hideAuxiliaryEq" (formula "70"))
                              (rule "eqSymm" (formula "70") (term "0,1"))
                              (rule "applyEq" (formula "70") (term "1,0,1") (ifseqformula "3"))
                              (rule "pullOutSelect" (formula "70") (term "0,0,1") (inst "selectSK=org_bouncycastle_math_ec_ECPoint_value_5"))
                              (rule "simplifySelectOfAnonEQ" (formula "70") (ifseqformula "24"))
                               (builtin "One Step Simplification" (formula "70") (ifInst ""  (formula "99")) (ifInst ""  (formula "12")))
                              (rule "applyEqReverse" (formula "71") (term "0,0,1") (ifseqformula "70"))
                               (builtin "One Step Simplification" (formula "71"))
                              (rule "notLeft" (formula "71"))
                              (rule "hideAuxiliaryEq" (formula "70"))
                              (rule "Class_invariant_axiom_for_org_bouncycastle_math_ec_ECPoint" (formula "76") (term "0"))
                               (builtin "One Step Simplification" (formula "76"))
                              (rule "Class_invariant_axiom_for_org_bouncycastle_math_ec_ECPoint" (formula "76"))
                              (rule "closeTrue" (formula "76"))
                           )
                           (branch "CUT: result_228_A_1.value@heapAtPre_A«anonHeapFunction» = 0 FALSE"
                               (builtin "One Step Simplification" (formula "27"))
                              (rule "replace_known_right" (formula "28") (term "0") (ifseqformula "79"))
                               (builtin "One Step Simplification" (formula "28"))
                              (rule "replace_known_right" (formula "29") (term "0") (ifseqformula "79"))
                               (builtin "One Step Simplification" (formula "29"))
                              (rule "applyEq" (formula "31") (term "0,0") (ifseqformula "28"))
                              (rule "polySimp_mulComm0" (formula "31") (term "0"))
                              (rule "applyEq" (formula "29") (term "0") (ifseqformula "31"))
                              (rule "inEqSimp_homoInEq1" (formula "29"))
                              (rule "polySimp_mulComm0" (formula "29") (term "1,0"))
                              (rule "polySimp_rightDist" (formula "29") (term "1,0"))
                              (rule "polySimp_mulLiterals" (formula "29") (term "1,1,0"))
                              (rule "polySimp_elimOne" (formula "29") (term "1,1,0"))
                              (rule "polySimp_mulComm0" (formula "29") (term "0,1,0"))
                              (rule "polySimp_addComm1" (formula "29") (term "0"))
                              (rule "polySimp_addAssoc" (formula "29") (term "0,0"))
                              (rule "polySimp_addComm1" (formula "29") (term "0,0,0"))
                              (rule "polySimp_pullOutFactor2b" (formula "29") (term "0,0"))
                              (rule "add_literals" (formula "29") (term "1,1,0,0"))
                              (rule "times_zero_1" (formula "29") (term "1,0,0"))
                              (rule "add_zero_right" (formula "29") (term "0,0"))
                              (rule "applyEq" (formula "27") (term "0") (ifseqformula "31"))
                              (rule "inEqSimp_homoInEq0" (formula "27"))
                              (rule "polySimp_mulComm0" (formula "27") (term "1,0"))
                              (rule "polySimp_rightDist" (formula "27") (term "1,0"))
                              (rule "polySimp_mulLiterals" (formula "27") (term "1,1,0"))
                              (rule "polySimp_elimOne" (formula "27") (term "1,1,0"))
                              (rule "polySimp_mulComm0" (formula "27") (term "0,1,0"))
                              (rule "polySimp_addAssoc" (formula "27") (term "0"))
                              (rule "polySimp_addComm0" (formula "27") (term "0,0"))
                              (rule "polySimp_pullOutFactor2b" (formula "27") (term "0"))
                              (rule "add_literals" (formula "27") (term "1,1,0"))
                              (rule "times_zero_1" (formula "27") (term "1,0"))
                              (rule "add_zero_right" (formula "27") (term "0"))
                              (rule "applyEq" (formula "30") (term "0,1") (ifseqformula "28"))
                              (rule "inEqSimp_sepNegMonomial0" (formula "29"))
                              (rule "polySimp_mulLiterals" (formula "29") (term "0"))
                              (rule "polySimp_elimOne" (formula "29") (term "0"))
                              (rule "inEqSimp_invertInEq1" (formula "27"))
                              (rule "mul_literals" (formula "27") (term "1"))
                              (rule "polySimp_mulLiterals" (formula "27") (term "0"))
                              (rule "polySimp_elimOne" (formula "27") (term "0"))
                              (rule "inEqSimp_strengthen1" (formula "26") (ifseqformula "79"))
                              (rule "add_zero_right" (formula "26") (term "1"))
                              (rule "inEqSimp_contradEq7" (formula "79") (ifseqformula "26"))
                              (rule "times_zero_1" (formula "79") (term "1,0,0"))
                              (rule "add_literals" (formula "79") (term "0,0"))
                              (rule "leq_literals" (formula "79") (term "0"))
                               (builtin "One Step Simplification" (formula "79"))
                              (rule "false_right" (formula "79"))
                              (rule "Use_information_flow_contract_for_compareTo_325434207" (formula "17") (ifseqformula "17"))
                               (builtin "One Step Simplification" (formula "17") (ifInst ""  (formula "97")) (ifInst ""  (formula "97")))
                              (rule "true_left" (formula "17"))
                              (rule "Use_information_flow_contract_for_getOrder_757678341" (formula "61") (ifseqformula "23"))
                              (rule "replace_known_left" (formula "61") (term "1,1") (ifseqformula "5"))
                               (builtin "One Step Simplification" (formula "61"))
                              (rule "true_left" (formula "61"))
                              (rule "Use_information_flow_contract_for_multiply_1272441881" (formula "73") (ifseqformula "38"))
                              (rule "replaceKnownSelect_taclet21_12" (formula "73") (term "0,1,1"))
                              (rule "replaceKnownSelect_taclet21_11" (formula "73") (term "1,1,1"))
                              (rule "replaceKnownAuxiliaryConstant_taclet11110121_19" (formula "73") (term "0,1,1"))
                              (rule "replaceKnownAuxiliaryConstant_taclet1110121_18" (formula "73") (term "1,1,1"))
                              (rule "replaceKnownSelect_taclet21_8" (formula "73") (term "1,1,0,1"))
                              (rule "replaceKnownSelect_taclet21_9" (formula "73") (term "0,1,0,1"))
                              (rule "replaceKnownAuxiliaryConstant_taclet21_10" (formula "73") (term "1,1,0,1"))
                               (builtin "One Step Simplification" (formula "73") (ifInst ""  (formula "88")) (ifInst ""  (formula "87")) (ifInst ""  (formula "105")))
                              (rule "pullOutSelect" (formula "73") (term "0,0,1") (inst "selectSK=org_bouncycastle_math_ec_ECPoint_value_4"))
                              (rule "simplifySelectOfAnonEQ" (formula "73") (ifseqformula "63"))
                               (builtin "One Step Simplification" (formula "73") (ifInst ""  (formula "103")) (ifInst ""  (formula "50")))
                              (rule "applyEqReverse" (formula "74") (term "0,0,1") (ifseqformula "73"))
                              (rule "hideAuxiliaryEq" (formula "73"))
                              (rule "eqSymm" (formula "73") (term "0,1"))
                              (rule "applyEq" (formula "73") (term "1,0,1") (ifseqformula "3"))
                              (rule "pullOutSelect" (formula "73") (term "0,0,1") (inst "selectSK=org_bouncycastle_math_ec_ECPoint_value_5"))
                              (rule "simplifySelectOfAnonEQ" (formula "73") (ifseqformula "24"))
                               (builtin "One Step Simplification" (formula "73") (ifInst ""  (formula "102")) (ifInst ""  (formula "12")))
                              (rule "applyEqReverse" (formula "74") (term "0,0,1") (ifseqformula "73"))
                               (builtin "One Step Simplification" (formula "74"))
                              (rule "notLeft" (formula "74"))
                              (rule "hideAuxiliaryEq" (formula "73"))
                              (rule "Class_invariant_axiom_for_org_bouncycastle_math_ec_ECPoint" (formula "79") (term "0"))
                               (builtin "One Step Simplification" (formula "79"))
                              (rule "Class_invariant_axiom_for_org_bouncycastle_math_ec_ECPoint" (formula "79"))
                              (rule "closeTrue" (formula "79"))
                           )
                        )
                        (branch "result_228_A_1.value@heapAtPre_A«anonHeapFunction» ≥ 0 FALSE"
                           (rule "inEqSimp_geqRight" (formula "79"))
                           (rule "times_zero_1" (formula "1") (term "1,0,0"))
                           (rule "add_literals" (formula "1") (term "0,0"))
                           (rule "inEqSimp_sepPosMonomial0" (formula "1"))
                           (rule "mul_literals" (formula "1") (term "1"))
                           (rule "inEqSimp_contradEq3" (formula "30") (term "0") (ifseqformula "1"))
                           (rule "mul_literals" (formula "30") (term "1,0,0,0"))
                           (rule "add_literals" (formula "30") (term "0,0,0"))
                           (rule "qeq_literals" (formula "30") (term "0,0"))
                            (builtin "One Step Simplification" (formula "30"))
                           (rule "andLeft" (formula "30"))
                           (rule "andLeft" (formula "30"))
                           (rule "applyEq" (formula "34") (term "0,0") (ifseqformula "31"))
                           (rule "polySimp_mulComm0" (formula "34") (term "0"))
                           (rule "applyEq" (formula "32") (term "0") (ifseqformula "34"))
                           (rule "inEqSimp_homoInEq1" (formula "32"))
                           (rule "polySimp_mulComm0" (formula "32") (term "1,0"))
                           (rule "polySimp_rightDist" (formula "32") (term "1,0"))
                           (rule "polySimp_mulLiterals" (formula "32") (term "1,1,0"))
                           (rule "polySimp_elimOne" (formula "32") (term "1,1,0"))
                           (rule "polySimp_mulComm0" (formula "32") (term "0,1,0"))
                           (rule "polySimp_addComm1" (formula "32") (term "0"))
                           (rule "polySimp_addAssoc" (formula "32") (term "0,0"))
                           (rule "polySimp_addComm1" (formula "32") (term "0,0,0"))
                           (rule "polySimp_pullOutFactor2b" (formula "32") (term "0,0"))
                           (rule "add_literals" (formula "32") (term "1,1,0,0"))
                           (rule "times_zero_1" (formula "32") (term "1,0,0"))
                           (rule "add_zero_right" (formula "32") (term "0,0"))
                           (rule "applyEq" (formula "30") (term "0") (ifseqformula "34"))
                           (rule "inEqSimp_homoInEq0" (formula "30"))
                           (rule "polySimp_mulComm0" (formula "30") (term "1,0"))
                           (rule "polySimp_rightDist" (formula "30") (term "1,0"))
                           (rule "polySimp_mulLiterals" (formula "30") (term "1,1,0"))
                           (rule "polySimp_elimOne" (formula "30") (term "1,1,0"))
                           (rule "polySimp_mulComm0" (formula "30") (term "0,1,0"))
                           (rule "polySimp_addAssoc" (formula "30") (term "0"))
                           (rule "polySimp_addComm0" (formula "30") (term "0,0"))
                           (rule "polySimp_pullOutFactor2b" (formula "30") (term "0"))
                           (rule "add_literals" (formula "30") (term "1,1,0"))
                           (rule "times_zero_1" (formula "30") (term "1,0"))
                           (rule "add_zero_right" (formula "30") (term "0"))
                           (rule "applyEq" (formula "33") (term "0,1") (ifseqformula "31"))
                           (rule "inEqSimp_sepPosMonomial0" (formula "32"))
                           (rule "polySimp_mulComm0" (formula "32") (term "1"))
                           (rule "polySimp_rightDist" (formula "32") (term "1"))
                           (rule "mul_literals" (formula "32") (term "0,1"))
                           (rule "polySimp_mulLiterals" (formula "32") (term "1,1"))
                           (rule "polySimp_elimOne" (formula "32") (term "1,1"))
                           (rule "inEqSimp_invertInEq1" (formula "30"))
                           (rule "polySimp_mulLiterals" (formula "30") (term "0"))
                           (rule "mul_literals" (formula "30") (term "1"))
                           (rule "polySimp_elimOne" (formula "30") (term "0"))
                           (rule "shift_paren_or" (formula "4") (term "0,0,0"))
                            (builtin "One Step Simplification" (formula "4"))
                           (rule "eqSymm" (formula "4") (term "1,1,0,0,0"))
                           (rule "castedGetAny" (formula "4") (term "1,0,0,0,0,0,0"))
                           (rule "castedGetAny" (formula "4") (term "0,0,1,0,0,0"))
                           (rule "castedGetAny" (formula "4") (term "0,1,1,0,0,0"))
                            (builtin "One Step Simplification" (formula "4"))
                           (rule "true_left" (formula "4"))
                           (rule "shift_paren_or" (formula "3") (term "0,0,0"))
                            (builtin "One Step Simplification" (formula "3"))
                           (rule "eqSymm" (formula "3") (term "1,1,0,0,0"))
                           (rule "castedGetAny" (formula "3") (term "1,0,0,0,0,0,0"))
                           (rule "castedGetAny" (formula "3") (term "0,0,1,0,0,0"))
                           (rule "castedGetAny" (formula "3") (term "0,1,1,0,0,0"))
                            (builtin "One Step Simplification" (formula "3"))
                           (rule "true_left" (formula "3"))
                           (rule "cnf_rightDist" (formula "2") (term "0,0,0"))
                           (rule "distr_forallAnd" (formula "2") (term "0,0"))
                           (rule "distr_forallAnd" (formula "2") (term "0"))
                           (rule "distr_forallAnd" (formula "2"))
                           (rule "andLeft" (formula "2"))
                           (rule "commute_or_2" (formula "2") (term "0,0,0"))
                            (builtin "One Step Simplification" (formula "2"))
                           (rule "eqSymm" (formula "2") (term "1,0,0,0,0"))
                           (rule "castedGetAny" (formula "2") (term "0,0,0,0,0,0"))
                           (rule "castedGetAny" (formula "2") (term "1,0,0,1,0,0,0"))
                           (rule "castedGetAny" (formula "2") (term "0,1,0,0,0,0"))
                            (builtin "One Step Simplification" (formula "2"))
                           (rule "true_left" (formula "2"))
                           (rule "shift_paren_or" (formula "2") (term "0,0,0"))
                            (builtin "One Step Simplification" (formula "2"))
                           (rule "eqSymm" (formula "2") (term "1,1,0,0,0"))
                           (rule "castedGetAny" (formula "2") (term "1,0,0,0,0,0,0"))
                           (rule "castedGetAny" (formula "2") (term "0,0,1,0,0,0"))
                           (rule "castedGetAny" (formula "2") (term "0,1,1,0,0,0"))
                            (builtin "One Step Simplification" (formula "2"))
                           (rule "true_left" (formula "2"))
                           (rule "Use_information_flow_contract_for_compareTo_325434207" (formula "18") (ifseqformula "18"))
                            (builtin "One Step Simplification" (formula "18") (ifInst ""  (formula "97")) (ifInst ""  (formula "97")))
                           (rule "true_left" (formula "18"))
                           (rule "Use_information_flow_contract_for_getOrder_757678341" (formula "61") (ifseqformula "24"))
                           (rule "replace_known_left" (formula "61") (term "1,1") (ifseqformula "6"))
                            (builtin "One Step Simplification" (formula "61"))
                           (rule "true_left" (formula "61"))
                           (rule "Use_information_flow_contract_for_getOrder_757678341" (formula "61") (ifseqformula "61"))
                            (builtin "One Step Simplification" (formula "61"))
                           (rule "true_left" (formula "61"))
                           (rule "Use_information_flow_contract_for_compareTo_325434207" (formula "55") (ifseqformula "18"))
                           (rule "replace_known_right" (formula "55") (term "0,1,0,0") (ifseqformula "98"))
                            (builtin "One Step Simplification" (formula "55") (ifInst ""  (formula "97")) (ifInst ""  (formula "5")))
                           (rule "applyEq" (formula "55") (term "0,0,1") (ifseqformula "57"))
                           (rule "eqSymm" (formula "55") (term "0,1"))
                           (rule "replace_known_left" (formula "55") (term "0,1") (ifseqformula "19"))
                            (builtin "One Step Simplification" (formula "55"))
                           (rule "Class_invariant_axiom_for_java_math_BigInteger" (formula "55") (term "1,0"))
                           (rule "replace_known_left" (formula "55") (term "1,1,0") (ifseqformula "19"))
                            (builtin "One Step Simplification" (formula "55") (ifInst ""  (formula "97")))
                           (rule "Class_invariant_axiom_for_java_math_BigInteger" (formula "55") (term "0"))
                           (rule "replace_known_right" (formula "55") (term "0,0,0") (ifseqformula "98"))
                            (builtin "One Step Simplification" (formula "55") (ifInst ""  (formula "57")))
                           (rule "applyEq" (formula "54") (term "0") (ifseqformula "55"))
                           (rule "applyEq" (formula "55") (term "4") (ifseqformula "54"))
                           (rule "applyEq" (formula "47") (term "0") (ifseqformula "54"))
                           (rule "Use_information_flow_contract_for_getOrder_757678341" (formula "24") (ifseqformula "24"))
                            (builtin "One Step Simplification" (formula "24"))
                           (rule "true_left" (formula "24"))
                           (rule "Use_information_flow_contract_for_getOrder_757678341" (formula "24") (ifseqformula "60"))
                           (rule "eqSymm" (formula "24") (term "0,1"))
                           (rule "eqSymm" (formula "24") (term "1,1"))
                           (rule "replace_known_left" (formula "24") (term "1,1") (ifseqformula "6"))
                            (builtin "One Step Simplification" (formula "24"))
                           (rule "true_left" (formula "24"))
                           (rule "Use_information_flow_contract_for_multiply_1272441881" (formula "72") (ifseqformula "38"))
                           (rule "replaceKnownSelect_taclet21_12" (formula "72") (term "0,1,1"))
                           (rule "replaceKnownSelect_taclet21_11" (formula "72") (term "1,1,1"))
                           (rule "replaceKnownAuxiliaryConstant_taclet11110121_19" (formula "72") (term "0,1,1"))
                           (rule "replaceKnownAuxiliaryConstant_taclet1110121_18" (formula "72") (term "1,1,1"))
                           (rule "replaceKnownSelect_taclet21_8" (formula "72") (term "1,1,0,1"))
                           (rule "replaceKnownSelect_taclet21_9" (formula "72") (term "0,1,0,1"))
                           (rule "replaceKnownAuxiliaryConstant_taclet21_10" (formula "72") (term "1,1,0,1"))
                            (builtin "One Step Simplification" (formula "72") (ifInst ""  (formula "87")) (ifInst ""  (formula "86")) (ifInst ""  (formula "104")))
                           (rule "pullOutSelect" (formula "72") (term "1,0,1") (inst "selectSK=org_bouncycastle_math_ec_ECPoint_value_4"))
                           (rule "simplifySelectOfAnonEQ" (formula "72") (ifseqformula "25"))
                            (builtin "One Step Simplification" (formula "72") (ifInst ""  (formula "101")) (ifInst ""  (formula "13")))
                           (rule "applyEqReverse" (formula "73") (term "1,0,1") (ifseqformula "72"))
                           (rule "hideAuxiliaryEq" (formula "72"))
                           (rule "pullOutSelect" (formula "72") (term "0,0,1") (inst "selectSK=org_bouncycastle_math_ec_ECPoint_value_5"))
                           (rule "simplifySelectOfAnonEQ" (formula "72") (ifseqformula "62"))
                            (builtin "One Step Simplification" (formula "72") (ifInst ""  (formula "102")) (ifInst ""  (formula "49")))
                           (rule "applyEqReverse" (formula "73") (term "0,0,1") (ifseqformula "72"))
                           (rule "hideAuxiliaryEq" (formula "72"))
                           (rule "replace_known_left" (formula "72") (term "0,1") (ifseqformula "4"))
                            (builtin "One Step Simplification" (formula "72"))
                           (rule "notLeft" (formula "72"))
                           (rule "Class_invariant_axiom_for_org_bouncycastle_math_ec_ECPoint" (formula "78") (term "1"))
                            (builtin "One Step Simplification" (formula "78"))
                           (rule "Class_invariant_axiom_for_org_bouncycastle_math_ec_ECPoint" (formula "78"))
                           (rule "closeTrue" (formula "78"))
                        )
                     )
                  )
               )
            )
         )
         (branch " result_229_B_0.<created>@heapAtPre_B«anonHeapFunction» = TRUE FALSE"
            (rule "replace_known_right" (formula "63") (term "1") (ifseqformula "78"))
             (builtin "One Step Simplification" (formula "63"))
            (rule "ifthenelse_split" (formula "3") (term "0"))
            (branch " resultAtPost_226_A.<created>@heapAtPre_A«anonHeapFunction» = TRUE TRUE"
               (rule "applyEqReverse" (formula "5") (term "1,0") (ifseqformula "4"))
               (rule "hideAuxiliaryEq" (formula "4"))
               (rule "replace_known_left" (formula "4") (term "1,0,0") (ifseqformula "3"))
                (builtin "One Step Simplification" (formula "4"))
               (rule "applyEqReverse" (formula "100") (term "1") (ifseqformula "4"))
               (rule "hideAuxiliaryEq" (formula "4"))
               (rule "eqSymm" (formula "99"))
               (rule "replace_known_left" (formula "35") (term "1") (ifseqformula "3"))
                (builtin "One Step Simplification" (formula "35"))
               (rule "true_left" (formula "35"))
               (rule "ifthenelse_split" (formula "1") (term "0"))
               (branch " resultAtPost_226_B.<created>@heapAtPre_B«anonHeapFunction» = TRUE TRUE"
                  (rule "applyEqReverse" (formula "3") (term "1,0") (ifseqformula "2"))
                  (rule "hideAuxiliaryEq" (formula "2"))
                  (rule "replace_known_left" (formula "2") (term "1,0,0") (ifseqformula "1"))
                   (builtin "One Step Simplification" (formula "2"))
                  (rule "applyEqReverse" (formula "98") (term "1") (ifseqformula "2"))
                  (rule "hideAuxiliaryEq" (formula "2"))
                  (rule "eqSymm" (formula "97"))
                  (rule "replace_known_left" (formula "68") (term "1") (ifseqformula "1"))
                   (builtin "One Step Simplification" (formula "68"))
                  (rule "true_left" (formula "68"))
                  (rule "Class_axiom_0_in_de_polyas_core3_open_cred_CredTool" (inst "seq=seq") (inst "i=i") (inst "str=str") (inst "seq_0=seq_0") (inst "i_0=i_0") (inst "sv_heap=heapAtPre_B<<anonHeapFunction>>"))
                  (rule "andLeft" (formula "1"))
                  (rule "castedGetAny" (formula "1") (term "0,0,0,0,0"))
                  (rule "castedGetAny" (formula "1") (term "0,0,1,0,0"))
                  (rule "castedGetAny" (formula "2") (term "0,1,1,0,0,0"))
                  (rule "nnf_imp2or" (formula "1") (term "0,0"))
                   (builtin "One Step Simplification" (formula "1"))
                  (rule "nnf_imp2or" (formula "2") (term "0,0,0"))
                  (rule "nnf_notAnd" (formula "2") (term "0,0,0,0"))
                   (builtin "One Step Simplification" (formula "2"))
                  (rule "nnf_imp2or" (formula "2") (term "1,0,0,0"))
                  (rule "nnf_notOr" (formula "2") (term "0,0,0,0,0"))
                  (rule "nnf_notAnd" (formula "2") (term "0,1,0,0,0"))
                   (builtin "One Step Simplification" (formula "2"))
                  (rule "commute_or" (formula "2") (term "0,0,0,0"))
                  (rule "commute_or_2" (formula "2") (term "0,0,0"))
                  (rule "shift_paren_or" (formula "2") (term "0,0,0,0"))
                  (rule "commute_and" (formula "2") (term "1,0,0,0"))
                  (rule "commute_or" (formula "2") (term "1,0,0,0,0,0"))
                  (rule "shift_paren_or" (formula "2") (term "0,0,0,0,0"))
                   (builtin "One Step Simplification" (formula "2"))
                  (rule "commute_or_2" (formula "2") (term "0,0,0,0"))
                  (rule "cnf_rightDist" (formula "2") (term "0,0,0"))
                  (rule "distr_forallAnd" (formula "2") (term "0,0"))
                  (rule "distr_forallAnd" (formula "2") (term "0"))
                  (rule "distr_forallAnd" (formula "2"))
                  (rule "andLeft" (formula "2"))
                  (rule "commute_or_2" (formula "2") (term "0,0,0"))
                   (builtin "One Step Simplification" (formula "2"))
                  (rule "eqSymm" (formula "2") (term "1,0,0,0,0"))
                  (rule "castedGetAny" (formula "2") (term "1,0,0,1,0,0,0"))
                  (rule "castedGetAny" (formula "2") (term "0,0,0,0,0,0"))
                  (rule "castedGetAny" (formula "2") (term "0,1,0,0,0,0"))
                   (builtin "One Step Simplification" (formula "2"))
                  (rule "true_left" (formula "2"))
                  (rule "shift_paren_or" (formula "2") (term "0,0,0"))
                   (builtin "One Step Simplification" (formula "2"))
                  (rule "eqSymm" (formula "2") (term "1,1,0,0,0"))
                  (rule "castedGetAny" (formula "2") (term "0,0,0,0,0,0"))
                  (rule "castedGetAny" (formula "2") (term "0,0,1,0,0,0"))
                  (rule "castedGetAny" (formula "2") (term "0,1,1,0,0,0"))
                   (builtin "One Step Simplification" (formula "2"))
                  (rule "true_left" (formula "2"))
                  (rule "Class_axiom_0_in_de_polyas_core3_open_cred_CredTool" (inst "seq=seq") (inst "i=i") (inst "str=str") (inst "seq_0=seq_0") (inst "i_0=i_0") (inst "sv_heap=anon_heap_mod<<anonHeapFunction>>"))
                  (rule "andLeft" (formula "1"))
                  (rule "castedGetAny" (formula "1") (term "0,0,1,0,0"))
                  (rule "castedGetAny" (formula "1") (term "0,0,0,0,0"))
                  (rule "castedGetAny" (formula "2") (term "0,1,1,0,0,0"))
                  (rule "nnf_imp2or" (formula "1") (term "0,0"))
                   (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "3")))
                  (rule "true_left" (formula "1"))
                  (rule "nnf_imp2or" (formula "1") (term "0,0,0"))
                  (rule "nnf_notAnd" (formula "1") (term "0,0,0,0"))
                   (builtin "One Step Simplification" (formula "1"))
                  (rule "nnf_imp2or" (formula "1") (term "1,0,0,0"))
                  (rule "nnf_notOr" (formula "1") (term "0,0,0,0,0"))
                  (rule "nnf_notAnd" (formula "1") (term "0,1,0,0,0"))
                   (builtin "One Step Simplification" (formula "1"))
                  (rule "commute_or" (formula "1") (term "0,0,0,0"))
                  (rule "commute_or_2" (formula "1") (term "0,0,0"))
                  (rule "shift_paren_or" (formula "1") (term "0,0,0,0"))
                  (rule "commute_and" (formula "1") (term "1,0,0,0"))
                  (rule "shift_paren_or" (formula "1") (term "0,0,0,0,0"))
                  (rule "commute_or_2" (formula "1") (term "0,0,0,0,0"))
                   (builtin "One Step Simplification" (formula "1"))
                  (rule "commute_or_2" (formula "1") (term "0,0,0,0"))
                  (rule "cnf_rightDist" (formula "1") (term "0,0,0"))
                  (rule "distr_forallAnd" (formula "1") (term "0,0"))
                  (rule "distr_forallAnd" (formula "1") (term "0"))
                  (rule "distr_forallAnd" (formula "1"))
                  (rule "andLeft" (formula "1"))
                  (rule "commute_or_2" (formula "1") (term "0,0,0"))
                   (builtin "One Step Simplification" (formula "1"))
                  (rule "eqSymm" (formula "1") (term "1,0,0,0,0"))
                  (rule "castedGetAny" (formula "1") (term "1,0,0,1,0,0,0"))
                  (rule "castedGetAny" (formula "1") (term "0,0,0,0,0,0"))
                  (rule "castedGetAny" (formula "1") (term "0,1,0,0,0,0"))
                   (builtin "One Step Simplification" (formula "1"))
                  (rule "true_left" (formula "1"))
                  (rule "shift_paren_or" (formula "1") (term "0,0,0"))
                   (builtin "One Step Simplification" (formula "1"))
                  (rule "eqSymm" (formula "1") (term "1,1,0,0,0"))
                  (rule "castedGetAny" (formula "1") (term "0,0,0,0,0,0"))
                  (rule "castedGetAny" (formula "1") (term "0,0,1,0,0,0"))
                  (rule "castedGetAny" (formula "1") (term "0,1,1,0,0,0"))
                   (builtin "One Step Simplification" (formula "1"))
                  (rule "true_left" (formula "1"))
                  (rule "Class_axiom_0_in_de_polyas_core3_open_cred_CredTool" (inst "seq=seq") (inst "i=i") (inst "str=str") (inst "seq_0=seq_0") (inst "i_0=i_0") (inst "sv_heap=anon_heap_multiply<<anonHeapFunction>>"))
                  (rule "andLeft" (formula "1"))
                  (rule "castedGetAny" (formula "1") (term "0,0,1,0,0"))
                  (rule "castedGetAny" (formula "1") (term "0,0,0,0,0"))
                  (rule "castedGetAny" (formula "2") (term "0,1,1,0,0,0"))
                  (rule "nnf_imp2or" (formula "1") (term "0,0"))
                   (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "3")))
                  (rule "true_left" (formula "1"))
                  (rule "nnf_imp2or" (formula "1") (term "0,0,0"))
                  (rule "nnf_notAnd" (formula "1") (term "0,0,0,0"))
                   (builtin "One Step Simplification" (formula "1"))
                  (rule "nnf_imp2or" (formula "1") (term "1,0,0,0"))
                  (rule "nnf_notOr" (formula "1") (term "0,0,0,0,0"))
                  (rule "nnf_notAnd" (formula "1") (term "0,1,0,0,0"))
                   (builtin "One Step Simplification" (formula "1"))
                  (rule "commute_or" (formula "1") (term "0,0,0,0"))
                  (rule "commute_or_2" (formula "1") (term "0,0,0"))
                  (rule "Class_axiom_0_in_de_polyas_core3_open_cred_CredTool" (inst "seq=seq") (inst "i=i") (inst "str=str") (inst "seq_0=seq_0") (inst "i_0=i_0") (inst "sv_heap=heapAtPre_A<<anonHeapFunction>>"))
                  (rule "andLeft" (formula "1"))
                  (rule "castedGetAny" (formula "2") (term "0,1,1,0,0,0"))
                  (rule "castedGetAny" (formula "1") (term "0,0,1,0,0"))
                  (rule "castedGetAny" (formula "1") (term "0,0,0,0,0"))
                  (rule "nnf_imp2or" (formula "1") (term "0,0"))
                   (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "4")))
                  (rule "true_left" (formula "1"))
                  (rule "nnf_imp2or" (formula "1") (term "0,0,0"))
                  (rule "nnf_imp2or" (formula "1") (term "1,0,0,0"))
                  (rule "nnf_notAnd" (formula "1") (term "0,0,0,0"))
                   (builtin "One Step Simplification" (formula "1"))
                  (rule "nnf_notOr" (formula "1") (term "0,0,0,0,0"))
                  (rule "nnf_notAnd" (formula "1") (term "0,1,0,0,0"))
                   (builtin "One Step Simplification" (formula "1"))
                  (rule "commute_or" (formula "1") (term "0,0,0,0"))
                  (rule "commute_or_2" (formula "1") (term "0,0,0"))
                  (rule "shift_paren_or" (formula "2") (term "0,0,0,0"))
                  (rule "Class_axiom_0_in_de_polyas_core3_open_cred_CredTool" (inst "seq=seq") (inst "i=i") (inst "str=str") (inst "seq_0=seq_0") (inst "i_0=i_0") (inst "sv_heap=anon(heapAtPre_A<<anonHeapFunction>>,
     empty,
     anon_heap_mod<<anonHeapFunction>>)"))
                   (builtin "One Step Simplification" (formula "1"))
                  (rule "andLeft" (formula "1"))
                  (rule "castedGetAny" (formula "1") (term "0,0,1,0,0"))
                  (rule "castedGetAny" (formula "2") (term "0,1,1,0,0,0"))
                  (rule "castedGetAny" (formula "1") (term "0,0,0,0,0"))
                  (rule "nnf_imp2or" (formula "1") (term "0,0"))
                   (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "5")))
                  (rule "true_left" (formula "1"))
                  (rule "nnf_imp2or" (formula "1") (term "0,0,0"))
                  (rule "nnf_imp2or" (formula "1") (term "1,0,0,0"))
                  (rule "nnf_notAnd" (formula "1") (term "0,0,0,0"))
                   (builtin "One Step Simplification" (formula "1"))
                  (rule "nnf_notAnd" (formula "1") (term "0,1,0,0,0"))
                   (builtin "One Step Simplification" (formula "1"))
                  (rule "nnf_notOr" (formula "1") (term "0,0,0,0,0"))
                  (rule "nnf_notOr" (formula "1") (term "1,0,0,0,0,0"))
                  (rule "Class_axiom_0_in_de_polyas_core3_open_cred_CredTool" (inst "seq=seq") (inst "i=i") (inst "str=str") (inst "seq_0=seq_0") (inst "i_0=i_0") (inst "sv_heap=heapAfter_mod_A_0"))
                  (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "1,0,0,0,0,0,1") (ifseqformula "30"))
                  (rule "andLeft" (formula "1"))
                  (rule "castedGetAny" (formula "2") (term "0,1,1,0,0,0"))
                  (rule "castedGetAny" (formula "1") (term "0,0,1,0,0"))
                  (rule "castedGetAny" (formula "1") (term "0,0,0,0,0"))
                  (rule "nnf_imp2or" (formula "1") (term "0,0"))
                   (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "6")))
                  (rule "true_left" (formula "1"))
                  (rule "nnf_imp2or" (formula "1") (term "0,0,0"))
                  (rule "nnf_notAnd" (formula "1") (term "0,0,0,0"))
                   (builtin "One Step Simplification" (formula "1"))
                  (rule "nnf_imp2or" (formula "1") (term "1,0,0,0"))
                  (rule "nnf_notOr" (formula "1") (term "0,0,0,0,0"))
                  (rule "nnf_notAnd" (formula "1") (term "0,1,0,0,0"))
                   (builtin "One Step Simplification" (formula "1"))
                  (rule "nnf_notOr" (formula "1") (term "1,0,0,0,0,0"))
                  (rule "Class_axiom_0_in_de_polyas_core3_open_cred_CredTool" (inst "seq=seq") (inst "i=i") (inst "str=str") (inst "seq_0=seq_0") (inst "i_0=i_0") (inst "sv_heap=anon(heapAfter_mod_A_0,
     empty,
     anon_heap_multiply<<anonHeapFunction>>)"))
                   (builtin "One Step Simplification" (formula "1"))
                  (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,1,0,0,0,0,0,1") (ifseqformula "30"))
                  (rule "andLeft" (formula "1"))
                  (rule "castedGetAny" (formula "1") (term "0,0,0,0,0"))
                  (rule "castedGetAny" (formula "2") (term "0,1,1,0,0,0"))
                  (rule "castedGetAny" (formula "1") (term "0,0,1,0,0"))
                  (rule "nnf_imp2or" (formula "1") (term "0,0"))
                   (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "6")))
                  (rule "true_left" (formula "1"))
                  (rule "nnf_imp2or" (formula "1") (term "0,0,0"))
                  (rule "nnf_notAnd" (formula "1") (term "0,0,0,0"))
                   (builtin "One Step Simplification" (formula "1"))
                  (rule "nnf_imp2or" (formula "1") (term "1,0,0,0"))
                  (rule "nnf_notOr" (formula "1") (term "0,0,0,0,0"))
                  (rule "nnf_notAnd" (formula "1") (term "0,1,0,0,0"))
                   (builtin "One Step Simplification" (formula "1"))
                  (rule "nnf_notOr" (formula "1") (term "1,0,0,0,0,0"))
                  (rule "nnf_notOr" (formula "1") (term "0,1,0,0,0,0,0"))
                  (rule "Class_axiom_0_in_de_polyas_core3_open_cred_CredTool" (inst "seq=seq") (inst "i=i") (inst "str=str") (inst "seq_0=seq_0") (inst "i_0=i_0") (inst "sv_heap=heapAfter_multiply_A_1"))
                  (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "1,0,0,0,0,0,1") (ifseqformula "38"))
                  (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,1,0,0,0,0,0,1") (ifseqformula "31"))
                  (rule "andLeft" (formula "1"))
                  (rule "castedGetAny" (formula "1") (term "0,0,1,0,0"))
                  (rule "castedGetAny" (formula "2") (term "0,1,1,0,0,0"))
                  (rule "castedGetAny" (formula "1") (term "0,0,0,0,0"))
                  (rule "nnf_imp2or" (formula "1") (term "0,0"))
                   (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "7")))
                  (rule "true_left" (formula "1"))
                  (rule "nnf_imp2or" (formula "1") (term "0,0,0"))
                  (rule "nnf_notAnd" (formula "1") (term "0,0,0,0"))
                   (builtin "One Step Simplification" (formula "1"))
                  (rule "nnf_imp2or" (formula "1") (term "1,0,0,0"))
                  (rule "nnf_notOr" (formula "1") (term "0,0,0,0,0"))
                  (rule "nnf_notAnd" (formula "1") (term "0,1,0,0,0"))
                   (builtin "One Step Simplification" (formula "1"))
                  (rule "nnf_notOr" (formula "1") (term "1,0,0,0,0,0"))
                  (rule "nnf_notOr" (formula "1") (term "0,1,0,0,0,0,0"))
                  (rule "Class_axiom_0_in_de_polyas_core3_open_cred_CredTool" (inst "seq=seq") (inst "i=i") (inst "str=str") (inst "seq_0=seq_0") (inst "i_0=i_0") (inst "sv_heap=heapAtPost_A"))
                  (rule "andLeft" (formula "1"))
                  (rule "castedGetAny" (formula "2") (term "0,1,1,0,0,0"))
                  (rule "castedGetAny" (formula "1") (term "0,0,1,0,0"))
                  (rule "castedGetAny" (formula "1") (term "0,0,0,0,0"))
                  (rule "applyEqRigid" (formula "2") (term "0,0,1,0,0,0,0,0") (ifseqformula "46"))
                  (rule "selectCreatedOfAnonAsFormulaEQ" (formula "2") (term "1,0,0,0,0,0") (ifseqformula "39"))
                  (rule "selectCreatedOfAnonAsFormulaEQ" (formula "2") (term "0,1,0,0,0,0,0") (ifseqformula "32"))
                  (rule "nnf_imp2or" (formula "1") (term "0,0"))
                   (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "7")))
                  (rule "true_left" (formula "1"))
                  (rule "nnf_imp2or" (formula "1") (term "0,0,0"))
                  (rule "nnf_imp2or" (formula "1") (term "1,0,0,0"))
                  (rule "nnf_notAnd" (formula "1") (term "0,0,0,0"))
                   (builtin "One Step Simplification" (formula "1"))
                  (rule "nnf_notAnd" (formula "1") (term "0,1,0,0,0"))
                   (builtin "One Step Simplification" (formula "1"))
                  (rule "nnf_notOr" (formula "1") (term "0,0,0,0,0"))
                  (rule "nnf_notOr" (formula "1") (term "1,0,0,0,0,0"))
                  (rule "nnf_notOr" (formula "1") (term "0,1,0,0,0,0,0"))
                  (rule "Class_axiom_0_in_de_polyas_core3_open_cred_CredTool" (inst "seq=seq") (inst "i=i") (inst "str=str") (inst "seq_0=seq_0") (inst "i_0=i_0") (inst "sv_heap=anon(heapAtPre_B<<anonHeapFunction>>,
     empty,
     anon_heap_mod<<anonHeapFunction>>)"))
                   (builtin "One Step Simplification" (formula "1"))
                  (rule "andLeft" (formula "1"))
                  (rule "castedGetAny" (formula "2") (term "0,1,1,0,0,0"))
                  (rule "castedGetAny" (formula "1") (term "0,0,1,0,0"))
                  (rule "castedGetAny" (formula "1") (term "0,0,0,0,0"))
                  (rule "nnf_imp2or" (formula "1") (term "0,0"))
                   (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "7")))
                  (rule "true_left" (formula "1"))
                  (rule "nnf_imp2or" (formula "1") (term "0,0,0"))
                  (rule "nnf_imp2or" (formula "1") (term "1,0,0,0"))
                  (rule "nnf_notAnd" (formula "1") (term "0,0,0,0"))
                   (builtin "One Step Simplification" (formula "1"))
                  (rule "nnf_notAnd" (formula "1") (term "0,1,0,0,0"))
                   (builtin "One Step Simplification" (formula "1"))
                  (rule "nnf_notOr" (formula "1") (term "0,0,0,0,0"))
                  (rule "nnf_notOr" (formula "1") (term "1,0,0,0,0,0"))
                  (rule "Class_axiom_0_in_de_polyas_core3_open_cred_CredTool" (inst "seq=seq") (inst "i=i") (inst "str=str") (inst "seq_0=seq_0") (inst "i_0=i_0") (inst "sv_heap=heapAfter_mod_B_0"))
                  (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "1,0,0,0,0,0,1") (ifseqformula "66"))
                  (rule "andLeft" (formula "1"))
                  (rule "castedGetAny" (formula "2") (term "0,1,1,0,0,0"))
                  (rule "castedGetAny" (formula "1") (term "0,0,0,0,0"))
                  (rule "castedGetAny" (formula "1") (term "0,0,1,0,0"))
                  (rule "nnf_imp2or" (formula "1") (term "0,0"))
                   (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "8")))
                  (rule "true_left" (formula "1"))
                  (rule "nnf_imp2or" (formula "1") (term "0,0,0"))
                  (rule "nnf_imp2or" (formula "1") (term "1,0,0,0"))
                  (rule "nnf_notAnd" (formula "1") (term "0,0,0,0"))
                   (builtin "One Step Simplification" (formula "1"))
                  (rule "nnf_notAnd" (formula "1") (term "0,1,0,0,0"))
                   (builtin "One Step Simplification" (formula "1"))
                  (rule "nnf_notOr" (formula "1") (term "0,0,0,0,0"))
                  (rule "nnf_notOr" (formula "1") (term "1,0,0,0,0,0"))
                  (rule "Class_axiom_0_in_de_polyas_core3_open_cred_CredTool" (inst "seq=seq") (inst "i=i") (inst "str=str") (inst "seq_0=seq_0") (inst "i_0=i_0") (inst "sv_heap=anon(heapAfter_mod_B_0,
     empty,
     anon_heap_multiply<<anonHeapFunction>>)"))
                   (builtin "One Step Simplification" (formula "1"))
                  (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,1,0,0,0,0,0,1") (ifseqformula "66"))
                  (rule "andLeft" (formula "1"))
                  (rule "castedGetAny" (formula "2") (term "0,1,1,0,0,0"))
                  (rule "castedGetAny" (formula "1") (term "0,0,0,0,0"))
                  (rule "castedGetAny" (formula "1") (term "0,0,1,0,0"))
                  (rule "nnf_imp2or" (formula "1") (term "0,0"))
                   (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "8")))
                  (rule "true_left" (formula "1"))
                  (rule "nnf_imp2or" (formula "1") (term "0,0,0"))
                  (rule "nnf_imp2or" (formula "1") (term "1,0,0,0"))
                  (rule "nnf_notAnd" (formula "1") (term "0,0,0,0"))
                   (builtin "One Step Simplification" (formula "1"))
                  (rule "nnf_notAnd" (formula "1") (term "0,1,0,0,0"))
                   (builtin "One Step Simplification" (formula "1"))
                  (rule "nnf_notOr" (formula "1") (term "0,0,0,0,0"))
                  (rule "nnf_notOr" (formula "1") (term "1,0,0,0,0,0"))
                  (rule "nnf_notOr" (formula "1") (term "0,1,0,0,0,0,0"))
                  (rule "Class_axiom_0_in_de_polyas_core3_open_cred_CredTool" (inst "seq=seq") (inst "i=i") (inst "str=str") (inst "seq_0=seq_0") (inst "i_0=i_0") (inst "sv_heap=heapAfter_multiply_B_1"))
                  (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "1,0,0,0,0,0,1") (ifseqformula "74"))
                  (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,1,0,0,0,0,0,1") (ifseqformula "67"))
                  (rule "andLeft" (formula "1"))
                  (rule "castedGetAny" (formula "1") (term "0,0,0,0,0"))
                  (rule "castedGetAny" (formula "1") (term "0,0,1,0,0"))
                  (rule "castedGetAny" (formula "2") (term "0,1,1,0,0,0"))
                  (rule "nnf_imp2or" (formula "1") (term "0,0"))
                   (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "9")))
                  (rule "true_left" (formula "1"))
                  (rule "nnf_imp2or" (formula "1") (term "0,0,0"))
                  (rule "nnf_notAnd" (formula "1") (term "0,0,0,0"))
                   (builtin "One Step Simplification" (formula "1"))
                  (rule "nnf_imp2or" (formula "1") (term "1,0,0,0"))
                  (rule "nnf_notOr" (formula "1") (term "0,0,0,0,0"))
                  (rule "nnf_notAnd" (formula "1") (term "0,1,0,0,0"))
                   (builtin "One Step Simplification" (formula "1"))
                  (rule "nnf_notOr" (formula "1") (term "1,0,0,0,0,0"))
                  (rule "nnf_notOr" (formula "1") (term "0,1,0,0,0,0,0"))
                  (rule "Class_axiom_0_in_de_polyas_core3_open_cred_CredTool" (inst "seq=seq") (inst "i=i") (inst "str=str") (inst "seq_0=seq_0") (inst "i_0=i_0") (inst "sv_heap=heapAtPost_B"))
                  (rule "andLeft" (formula "1"))
                  (rule "castedGetAny" (formula "1") (term "0,0,0,0,0"))
                  (rule "castedGetAny" (formula "1") (term "0,0,1,0,0"))
                  (rule "castedGetAny" (formula "2") (term "0,1,1,0,0,0"))
                  (rule "applyEqRigid" (formula "2") (term "0,0,1,0,0,0,0,0") (ifseqformula "82"))
                  (rule "selectCreatedOfAnonAsFormulaEQ" (formula "2") (term "1,0,0,0,0,0") (ifseqformula "75"))
                  (rule "selectCreatedOfAnonAsFormulaEQ" (formula "2") (term "0,1,0,0,0,0,0") (ifseqformula "68"))
                  (rule "nnf_imp2or" (formula "1") (term "0,0"))
                   (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "9")))
                  (rule "true_left" (formula "1"))
                  (rule "nnf_imp2or" (formula "1") (term "0,0,0"))
                  (rule "nnf_notAnd" (formula "1") (term "0,0,0,0"))
                   (builtin "One Step Simplification" (formula "1"))
                  (rule "nnf_imp2or" (formula "1") (term "1,0,0,0"))
                  (rule "nnf_notOr" (formula "1") (term "0,0,0,0,0"))
                  (rule "nnf_notAnd" (formula "1") (term "0,1,0,0,0"))
                   (builtin "One Step Simplification" (formula "1"))
                  (rule "nnf_notOr" (formula "1") (term "1,0,0,0,0,0"))
                  (rule "nnf_notOr" (formula "1") (term "0,1,0,0,0,0,0"))
                  (rule "div_axiom" (formula "34") (term "0,1") (inst "quotient=quotient_0"))
                  (rule "polySimp_mulComm0" (formula "34") (term "1,1,1,1,1"))
                  (rule "polySimp_mulComm0" (formula "34") (term "0,1,0,1"))
                  (rule "polySimp_mulComm0" (formula "34") (term "0,1,1,1"))
                  (rule "polySimp_mulComm0" (formula "34") (term "0,2,1,1"))
                  (rule "commute_or" (formula "4") (term "0,0,0,0"))
                  (rule "shift_paren_or" (formula "5") (term "0,0,0,0"))
                  (rule "commute_and" (formula "6") (term "1,0,0,0"))
                  (rule "commute_or" (formula "4") (term "0,1,0,0,0"))
                  (rule "commute_and" (formula "5") (term "1,0,0,0"))
                  (rule "shift_paren_or" (formula "6") (term "0,0,0,0,0"))
                  (rule "commute_or" (formula "3") (term "0,0,0,0"))
                  (rule "commute_or" (formula "3") (term "0,1,0,0,0"))
                  (rule "commute_or" (formula "2") (term "0,0,0,0"))
                  (rule "onlyCreatedObjectsAreReferenced" (formula "97") (term "0") (ifseqformula "56"))
                  (rule "replace_known_left" (formula "1") (term "1") (ifseqformula "62"))
                   (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "98")))
                  (rule "true_left" (formula "1"))
                  (rule "onlyCreatedObjectsAreReferenced" (formula "31") (term "2") (ifseqformula "22"))
                  (rule "replace_known_left" (formula "31") (term "1") (ifseqformula "16"))
                   (builtin "One Step Simplification" (formula "31") (ifInst ""  (formula "95")))
                  (rule "true_left" (formula "31"))
                  (rule "onlyCreatedObjectsAreReferenced" (formula "14") (term "1,1,0") (ifseqformula "22"))
                  (rule "replace_known_left" (formula "14") (term "1") (ifseqformula "16"))
                   (builtin "One Step Simplification" (formula "14") (ifInst ""  (formula "93")))
                  (rule "true_left" (formula "14"))
                  (rule "onlyCreatedObjectsAreReferenced" (formula "49") (term "1,0") (ifseqformula "56"))
                  (rule "replace_known_left" (formula "49") (term "1") (ifseqformula "50"))
                   (builtin "One Step Simplification" (formula "49") (ifInst ""  (formula "94")))
                  (rule "true_left" (formula "49"))
                  (rule "onlyCreatedObjectsAreReferenced" (formula "27") (term "1,0") (ifseqformula "22"))
                  (rule "replace_known_left" (formula "27") (term "1") (ifseqformula "28"))
                   (builtin "One Step Simplification" (formula "27") (ifInst ""  (formula "97")))
                  (rule "true_left" (formula "27"))
                  (rule "onlyCreatedObjectsAreReferenced" (formula "48") (term "1,0") (ifseqformula "56"))
                  (rule "replace_known_left" (formula "48") (term "1") (ifseqformula "49"))
                   (builtin "One Step Simplification" (formula "48") (ifInst ""  (formula "92")))
                  (rule "true_left" (formula "48"))
                  (rule "onlyCreatedObjectsAreReferenced" (formula "14") (term "1,0") (ifseqformula "22"))
                  (rule "replace_known_left" (formula "14") (term "1") (ifseqformula "15"))
                   (builtin "One Step Simplification" (formula "14") (ifInst ""  (formula "91")))
                  (rule "true_left" (formula "14"))
                  (rule "onlyCreatedObjectsAreReferenced" (formula "50") (term "1,0") (ifseqformula "56"))
                  (rule "replace_known_left" (formula "50") (term "1") (ifseqformula "51"))
                   (builtin "One Step Simplification" (formula "50") (ifInst ""  (formula "96")))
                  (rule "true_left" (formula "50"))
                  (rule "commute_or" (formula "2") (term "0,1,0,0,0"))
                  (rule "commute_or" (formula "1") (term "0,0,0,0"))
                  (rule "commute_or" (formula "1") (term "0,1,0,0,0"))
                  (rule "commute_or_2" (formula "4") (term "0,0,0"))
                  (rule "commute_or_2" (formula "3") (term "0,0,0"))
                  (rule "commute_and" (formula "34") (term "0,1"))
                  (rule "commute_or_2" (formula "2") (term "0,0,0"))
                  (rule "commute_or_2" (formula "1") (term "0,0,0"))
                  (rule "commute_or_2" (formula "6") (term "0,0,0,0,0"))
                   (builtin "One Step Simplification" (formula "6"))
                  (rule "shift_paren_or" (formula "5") (term "0,0,0,0,0"))
                  (rule "commute_or_2" (formula "6") (term "0,0,0,0"))
                  (rule "commute_or_2" (formula "4") (term "1,0,0,0,0"))
                  (rule "shift_paren_or" (formula "3") (term "0,0,0,0"))
                  (rule "shift_paren_or" (formula "2") (term "0,0,0,0"))
                  (rule "shift_paren_or" (formula "1") (term "0,0,0,0"))
                  (rule "commute_or_2" (formula "5") (term "0,0,0,0,0"))
                   (builtin "One Step Simplification" (formula "5"))
                  (rule "commute_or_2" (formula "5") (term "0,0,0,0"))
                  (rule "shift_paren_or" (formula "4") (term "0,0,0,0"))
                  (rule "cnf_rightDist" (formula "6") (term "0,0,0"))
                  (rule "distr_forallAnd" (formula "6") (term "0,0"))
                  (rule "distr_forallAnd" (formula "6") (term "0"))
                  (rule "distr_forallAnd" (formula "6"))
                  (rule "andLeft" (formula "6"))
                  (rule "commute_or_2" (formula "6") (term "0,0,0"))
                   (builtin "One Step Simplification" (formula "6"))
                  (rule "eqSymm" (formula "6") (term "1,0,0,0,0"))
                  (rule "castedGetAny" (formula "6") (term "1,0,0,1,0,0,0"))
                  (rule "castedGetAny" (formula "6") (term "0,0,0,0,0,0"))
                  (rule "castedGetAny" (formula "6") (term "0,1,0,0,0,0"))
                   (builtin "One Step Simplification" (formula "6"))
                  (rule "true_left" (formula "6"))
                  (rule "shift_paren_or" (formula "6") (term "0,0,0"))
                   (builtin "One Step Simplification" (formula "6"))
                  (rule "eqSymm" (formula "6") (term "1,1,0,0,0"))
                  (rule "castedGetAny" (formula "6") (term "0,0,1,0,0,0"))
                  (rule "castedGetAny" (formula "6") (term "0,0,0,0,0,0"))
                  (rule "castedGetAny" (formula "6") (term "0,1,1,0,0,0"))
                   (builtin "One Step Simplification" (formula "6"))
                  (rule "true_left" (formula "6"))
                  (rule "commute_and" (formula "4") (term "1,0,0,0"))
                  (rule "commute_and" (formula "3") (term "1,0,0,0"))
                  (rule "commute_and" (formula "2") (term "1,0,0,0"))
                  (rule "commute_and" (formula "1") (term "1,0,0,0"))
                  (rule "cnf_rightDist" (formula "5") (term "0,0,0"))
                  (rule "distr_forallAnd" (formula "5") (term "0,0"))
                  (rule "distr_forallAnd" (formula "5") (term "0"))
                  (rule "distr_forallAnd" (formula "5"))
                  (rule "andLeft" (formula "5"))
                  (rule "commute_or_2" (formula "5") (term "0,0,0"))
                   (builtin "One Step Simplification" (formula "5"))
                  (rule "eqSymm" (formula "5") (term "1,0,0,0,0"))
                  (rule "castedGetAny" (formula "5") (term "1,0,0,1,0,0,0"))
                  (rule "castedGetAny" (formula "5") (term "0,0,0,0,0,0"))
                  (rule "castedGetAny" (formula "5") (term "0,1,0,0,0,0"))
                   (builtin "One Step Simplification" (formula "5"))
                  (rule "true_left" (formula "5"))
                  (rule "shift_paren_or" (formula "5") (term "0,0,0"))
                   (builtin "One Step Simplification" (formula "5"))
                  (rule "eqSymm" (formula "5") (term "1,1,0,0,0"))
                  (rule "castedGetAny" (formula "5") (term "0,0,1,0,0,0"))
                  (rule "castedGetAny" (formula "5") (term "0,0,0,0,0,0"))
                  (rule "castedGetAny" (formula "5") (term "0,1,1,0,0,0"))
                   (builtin "One Step Simplification" (formula "5"))
                  (rule "true_left" (formula "5"))
                  (rule "shift_paren_or" (formula "3") (term "0,0,0,0,0"))
                   (builtin "One Step Simplification" (formula "3"))
                  (rule "shift_paren_or" (formula "2") (term "0,0,0,0,0"))
                   (builtin "One Step Simplification" (formula "2"))
                  (rule "shift_paren_or" (formula "1") (term "0,0,0,0,0"))
                   (builtin "One Step Simplification" (formula "1"))
                  (rule "shift_paren_or" (formula "4") (term "0,0,0,0,0"))
                   (builtin "One Step Simplification" (formula "4"))
                  (rule "commute_or_2" (formula "3") (term "0,0,0,0"))
                  (rule "commute_or_2" (formula "2") (term "0,0,0,0"))
                  (rule "commute_or_2" (formula "1") (term "0,0,0,0"))
                  (rule "cnf_rightDist" (formula "4") (term "0,0,0"))
                  (rule "distr_forallAnd" (formula "4") (term "0,0"))
                  (rule "distr_forallAnd" (formula "4") (term "0"))
                  (rule "distr_forallAnd" (formula "4"))
                  (rule "andLeft" (formula "4"))
                  (rule "shift_paren_or" (formula "5") (term "0,0,0"))
                   (builtin "One Step Simplification" (formula "5"))
                  (rule "eqSymm" (formula "5") (term "1,1,0,0,0"))
                  (rule "castedGetAny" (formula "5") (term "0,0,0,0,0,0"))
                  (rule "castedGetAny" (formula "5") (term "0,0,1,0,0,0"))
                  (rule "castedGetAny" (formula "5") (term "0,1,1,0,0,0"))
                   (builtin "One Step Simplification" (formula "5"))
                  (rule "true_left" (formula "5"))
                  (rule "cnf_rightDist" (formula "3") (term "0,0,0"))
                  (rule "distr_forallAnd" (formula "3") (term "0,0"))
                  (rule "distr_forallAnd" (formula "3") (term "0"))
                  (rule "distr_forallAnd" (formula "3"))
                  (rule "andLeft" (formula "3"))
                  (rule "shift_paren_or" (formula "4") (term "0,0,0"))
                   (builtin "One Step Simplification" (formula "4"))
                  (rule "eqSymm" (formula "4") (term "1,1,0,0,0"))
                  (rule "castedGetAny" (formula "4") (term "0,0,0,0,0,0"))
                  (rule "castedGetAny" (formula "4") (term "0,0,1,0,0,0"))
                  (rule "castedGetAny" (formula "4") (term "0,1,1,0,0,0"))
                   (builtin "One Step Simplification" (formula "4"))
                  (rule "true_left" (formula "4"))
                  (rule "cnf_rightDist" (formula "2") (term "0,0,0"))
                  (rule "distr_forallAnd" (formula "2") (term "0,0"))
                  (rule "distr_forallAnd" (formula "2") (term "0"))
                  (rule "distr_forallAnd" (formula "2"))
                  (rule "andLeft" (formula "2"))
                  (rule "cnf_rightDist" (formula "1") (term "0,0,0"))
                  (rule "distr_forallAnd" (formula "1") (term "0,0"))
                  (rule "distr_forallAnd" (formula "1") (term "0"))
                  (rule "distr_forallAnd" (formula "1"))
                  (rule "andLeft" (formula "1"))
                  (rule "shift_paren_or" (formula "3") (term "0,0,0"))
                   (builtin "One Step Simplification" (formula "3"))
                  (rule "eqSymm" (formula "3") (term "1,1,0,0,0"))
                  (rule "castedGetAny" (formula "3") (term "0,0,0,0,0,0"))
                  (rule "castedGetAny" (formula "3") (term "0,0,1,0,0,0"))
                  (rule "castedGetAny" (formula "3") (term "0,1,1,0,0,0"))
                   (builtin "One Step Simplification" (formula "3"))
                  (rule "true_left" (formula "3"))
                  (rule "cnf_rightDist" (formula "4") (term "0,0,0"))
                  (rule "distr_forallAnd" (formula "4") (term "0,0"))
                  (rule "distr_forallAnd" (formula "4") (term "0"))
                  (rule "distr_forallAnd" (formula "4"))
                  (rule "andLeft" (formula "4"))
                  (rule "commute_or_2" (formula "4") (term "0,0,0"))
                   (builtin "One Step Simplification" (formula "4"))
                  (rule "eqSymm" (formula "4") (term "1,0,0,0,0"))
                  (rule "castedGetAny" (formula "4") (term "1,0,0,1,0,0,0"))
                  (rule "castedGetAny" (formula "4") (term "0,0,0,0,0,0"))
                  (rule "castedGetAny" (formula "4") (term "0,1,0,0,0,0"))
                   (builtin "One Step Simplification" (formula "4"))
                  (rule "true_left" (formula "4"))
                  (rule "cnf_rightDist" (formula "3") (term "0,0,0"))
                  (rule "distr_forallAnd" (formula "3") (term "0,0"))
                  (rule "distr_forallAnd" (formula "3") (term "0"))
                  (rule "distr_forallAnd" (formula "3"))
                  (rule "andLeft" (formula "3"))
                  (rule "shift_paren_or" (formula "5") (term "0,0,0"))
                   (builtin "One Step Simplification" (formula "5"))
                  (rule "eqSymm" (formula "5") (term "1,1,0,0,0"))
                  (rule "castedGetAny" (formula "5") (term "1,0,0,0,0,0,0"))
                  (rule "castedGetAny" (formula "5") (term "0,0,1,0,0,0"))
                  (rule "castedGetAny" (formula "5") (term "0,1,1,0,0,0"))
                   (builtin "One Step Simplification" (formula "5"))
                  (rule "true_left" (formula "5"))
                  (rule "cnf_rightDist" (formula "2") (term "0,0,0"))
                  (rule "distr_forallAnd" (formula "2") (term "0,0"))
                  (rule "distr_forallAnd" (formula "2") (term "0"))
                  (rule "distr_forallAnd" (formula "2"))
                  (rule "andLeft" (formula "2"))
                  (rule "commute_or_2" (formula "2") (term "0,0,0"))
                   (builtin "One Step Simplification" (formula "2"))
                  (rule "eqSymm" (formula "2") (term "1,0,0,0,0"))
                  (rule "castedGetAny" (formula "2") (term "1,0,0,1,0,0,0"))
                  (rule "castedGetAny" (formula "2") (term "0,0,0,0,0,0"))
                  (rule "castedGetAny" (formula "2") (term "0,1,0,0,0,0"))
                   (builtin "One Step Simplification" (formula "2"))
                  (rule "true_left" (formula "2"))
                  (rule "shift_paren_or" (formula "4") (term "0,0,0"))
                   (builtin "One Step Simplification" (formula "4"))
                  (rule "eqSymm" (formula "4") (term "1,1,0,0,0"))
                  (rule "castedGetAny" (formula "4") (term "0,0,1,0,0,0"))
                  (rule "castedGetAny" (formula "4") (term "1,0,0,0,0,0,0"))
                  (rule "castedGetAny" (formula "4") (term "0,1,1,0,0,0"))
                   (builtin "One Step Simplification" (formula "4"))
                  (rule "true_left" (formula "4"))
                  (rule "cnf_rightDist" (formula "1") (term "0,0,0"))
                  (rule "distr_forallAnd" (formula "1") (term "0,0"))
                  (rule "distr_forallAnd" (formula "1") (term "0"))
                  (rule "distr_forallAnd" (formula "1"))
                  (rule "andLeft" (formula "1"))
                  (rule "shift_paren_or" (formula "3") (term "0,0,0"))
                   (builtin "One Step Simplification" (formula "3"))
                  (rule "eqSymm" (formula "3") (term "1,1,0,0,0"))
                  (rule "castedGetAny" (formula "3") (term "1,0,0,0,0,0,0"))
                  (rule "castedGetAny" (formula "3") (term "0,0,1,0,0,0"))
                  (rule "castedGetAny" (formula "3") (term "0,1,1,0,0,0"))
                   (builtin "One Step Simplification" (formula "3"))
                  (rule "true_left" (formula "3"))
                  (rule "ifthenelse_split_for" (formula "31") (term "1,1"))
                  (branch "result_228_A_1.value@heapAtPre_A«anonHeapFunction» ≥ 0 TRUE"
                     (rule "cnf_rightDist" (formula "32"))
                     (rule "andLeft" (formula "32"))
                     (rule "commute_or" (formula "33"))
                     (rule "cnf_rightDist" (formula "32"))
                     (rule "andLeft" (formula "32"))
                     (rule "commute_or" (formula "33"))
                     (rule "cnf_rightDist" (formula "3") (term "0,0,0"))
                     (rule "distr_forallAnd" (formula "3") (term "0,0"))
                     (rule "distr_forallAnd" (formula "3") (term "0"))
                     (rule "distr_forallAnd" (formula "3"))
                     (rule "andLeft" (formula "3"))
                     (rule "shift_paren_or" (formula "2") (term "0,0,0"))
                      (builtin "One Step Simplification" (formula "2"))
                     (rule "eqSymm" (formula "2") (term "1,1,0,0,0"))
                     (rule "castedGetAny" (formula "2") (term "1,0,0,0,0,0,0"))
                     (rule "castedGetAny" (formula "2") (term "0,0,1,0,0,0"))
                     (rule "castedGetAny" (formula "2") (term "0,1,1,0,0,0"))
                      (builtin "One Step Simplification" (formula "2"))
                     (rule "true_left" (formula "2"))
                     (rule "commute_or_2" (formula "2") (term "0,0,0"))
                      (builtin "One Step Simplification" (formula "2"))
                     (rule "eqSymm" (formula "2") (term "1,0,0,0,0"))
                     (rule "castedGetAny" (formula "2") (term "1,0,0,1,0,0,0"))
                     (rule "castedGetAny" (formula "2") (term "0,0,0,0,0,0"))
                     (rule "castedGetAny" (formula "2") (term "0,1,0,0,0,0"))
                      (builtin "One Step Simplification" (formula "2"))
                     (rule "true_left" (formula "2"))
                     (rule "shift_paren_or" (formula "2") (term "0,0,0"))
                      (builtin "One Step Simplification" (formula "2"))
                     (rule "eqSymm" (formula "2") (term "1,1,0,0,0"))
                     (rule "castedGetAny" (formula "2") (term "1,0,0,0,0,0,0"))
                     (rule "castedGetAny" (formula "2") (term "0,0,1,0,0,0"))
                     (rule "castedGetAny" (formula "2") (term "0,1,1,0,0,0"))
                      (builtin "One Step Simplification" (formula "2"))
                     (rule "true_left" (formula "2"))
                     (rule "cnf_rightDist" (formula "1") (term "0,0,0"))
                     (rule "distr_forallAnd" (formula "1") (term "0,0"))
                     (rule "distr_forallAnd" (formula "1") (term "0"))
                     (rule "distr_forallAnd" (formula "1"))
                     (rule "andLeft" (formula "1"))
                     (rule "commute_or_2" (formula "1") (term "0,0,0"))
                      (builtin "One Step Simplification" (formula "1"))
                     (rule "eqSymm" (formula "1") (term "1,0,0,0,0"))
                     (rule "castedGetAny" (formula "1") (term "0,0,0,0,0,0"))
                     (rule "castedGetAny" (formula "1") (term "1,0,0,1,0,0,0"))
                     (rule "castedGetAny" (formula "1") (term "0,1,0,0,0,0"))
                      (builtin "One Step Simplification" (formula "1"))
                     (rule "true_left" (formula "1"))
                     (rule "shift_paren_or" (formula "1") (term "0,0,0"))
                      (builtin "One Step Simplification" (formula "1"))
                     (rule "eqSymm" (formula "1") (term "1,1,0,0,0"))
                     (rule "castedGetAny" (formula "1") (term "1,0,0,0,0,0,0"))
                     (rule "castedGetAny" (formula "1") (term "0,0,1,0,0,0"))
                     (rule "castedGetAny" (formula "1") (term "0,1,1,0,0,0"))
                      (builtin "One Step Simplification" (formula "1"))
                     (rule "true_left" (formula "1"))
                     (rule "cut_direct" (formula "29") (term "0"))
                     (branch "CUT: result_228_A_1.value@heapAtPre_A«anonHeapFunction» = 0 TRUE"
                         (builtin "One Step Simplification" (formula "30"))
                        (rule "true_left" (formula "30"))
                        (rule "replace_known_left" (formula "30") (term "0") (ifseqformula "29"))
                         (builtin "One Step Simplification" (formula "30"))
                        (rule "true_left" (formula "30"))
                        (rule "replace_known_left" (formula "30") (term "0") (ifseqformula "29"))
                         (builtin "One Step Simplification" (formula "30"))
                        (rule "true_left" (formula "30"))
                        (rule "applyEq" (formula "28") (term "0") (ifseqformula "29"))
                        (rule "qeq_literals" (formula "28"))
                        (rule "true_left" (formula "28"))
                        (rule "applyEq" (formula "30") (term "1,0") (ifseqformula "28"))
                        (rule "times_zero_1" (formula "30") (term "0"))
                        (rule "polySimp_homoEq" (formula "30"))
                        (rule "mul_literals" (formula "30") (term "1,0"))
                        (rule "add_zero_right" (formula "30") (term "0"))
                        (rule "applyEq" (formula "29") (term "1,0") (ifseqformula "28"))
                        (rule "eqSymm" (formula "29"))
                        (rule "polySimp_homoEq" (formula "29"))
                        (rule "polySimp_mulLiterals" (formula "29") (term "1,0"))
                        (rule "polySimp_elimOne" (formula "29") (term "1,0"))
                        (rule "applyEq" (formula "7") (term "1") (ifseqformula "28"))
                        (rule "applyEq" (formula "57") (term "1") (ifseqformula "28"))
                        (rule "applyEq" (formula "23") (term "1") (ifseqformula "28"))
                        (rule "applyEq" (formula "29") (term "1,1,0") (ifseqformula "28"))
                        (rule "polySimp_addComm0" (formula "29") (term "0"))
                        (rule "polySimp_sepNegMonomial" (formula "30"))
                        (rule "polySimp_mulLiterals" (formula "30") (term "0"))
                        (rule "polySimp_elimOne" (formula "30") (term "0"))
                        (rule "applyEq" (formula "4") (term "0") (ifseqformula "30"))
                        (rule "applyEq" (formula "29") (term "0,1,0") (ifseqformula "30"))
                        (rule "polySimp_addComm0" (formula "29") (term "0"))
                        (rule "applyEq" (formula "29") (term "0,0,1,0") (ifseqformula "30"))
                        (rule "polySimp_addComm0" (formula "29") (term "0"))
                        (rule "applyEq" (formula "6") (term "1") (ifseqformula "30"))
                        (rule "polySimp_sepPosMonomial" (formula "29"))
                        (rule "div_axiom" (formula "29") (term "0,1") (inst "quotient=quotient_1"))
                         (builtin "One Step Simplification" (formula "29"))
                        (rule "true_left" (formula "29"))
                        (rule "jdiv_axiom" (formula "29") (term "0"))
                        (rule "eqSymm" (formula "29"))
                        (rule "applyEq" (formula "29") (term "1") (ifseqformula "30"))
                         (builtin "One Step Simplification" (formula "29"))
                        (rule "eqSymm" (formula "29") (term "1"))
                        (rule "polySimp_homoEq" (formula "29") (term "1"))
                        (rule "polySimp_mulLiterals" (formula "29") (term "1,0,1"))
                        (rule "polySimp_elimOne" (formula "29") (term "1,0,1"))
                        (rule "polySimp_sepPosMonomial" (formula "29") (term "1"))
                        (rule "inEqSimp_contradInEq0" (formula "29") (term "0,0") (ifseqformula "4"))
                        (rule "qeq_literals" (formula "29") (term "0,0,0"))
                         (builtin "One Step Simplification" (formula "29"))
                        (rule "true_left" (formula "29"))
                        (rule "Use_information_flow_contract_for_compareTo_325434207" (formula "19") (ifseqformula "19"))
                         (builtin "One Step Simplification" (formula "19") (ifInst ""  (formula "91")) (ifInst ""  (formula "91")))
                        (rule "true_left" (formula "19"))
                        (rule "Use_information_flow_contract_for_getOrder_757678341" (formula "59") (ifseqformula "25"))
                        (rule "applyEq" (formula "59") (term "0,0,1") (ifseqformula "57"))
                        (rule "eqSymm" (formula "59") (term "0,1"))
                        (rule "replace_known_left" (formula "59") (term "0,1") (ifseqformula "23"))
                         (builtin "One Step Simplification" (formula "59"))
                        (rule "applyEq" (formula "59") (term "0,1") (ifseqformula "7"))
                        (rule "eqSymm" (formula "59") (term "1"))
                        (rule "replace_known_left" (formula "59") (term "1") (ifseqformula "28"))
                         (builtin "One Step Simplification" (formula "59"))
                        (rule "true_left" (formula "59"))
                        (rule "Use_information_flow_contract_for_multiply_1272441881_0" (formula "70") (ifseqformula "36"))
                        (rule "replaceKnownSelect_taclet21_11" (formula "70") (term "1,1,1"))
                        (rule "replaceKnownSelect_taclet21_12" (formula "70") (term "0,1,1"))
                        (rule "replaceKnownAuxiliaryConstant_taclet01121_17" (formula "70") (term "1,1,1"))
                        (rule "replaceKnownAuxiliaryConstant_taclet001121_19" (formula "70") (term "0,1,1"))
                        (rule "replaceKnownSelect_taclet21_8" (formula "70") (term "1,1,0,1"))
                        (rule "replaceKnownSelect_taclet21_9" (formula "70") (term "0,1,0,1"))
                        (rule "replaceKnownAuxiliaryConstant_taclet21_10" (formula "70") (term "1,1,0,1"))
                         (builtin "One Step Simplification" (formula "70") (ifInst ""  (formula "82")) (ifInst ""  (formula "81")) (ifInst ""  (formula "99")))
                        (rule "pullOutSelect" (formula "70") (term "1,0,1") (inst "selectSK=org_bouncycastle_math_ec_ECPoint_value_4"))
                        (rule "simplifySelectOfAnonEQ" (formula "70") (ifseqformula "26"))
                         (builtin "One Step Simplification" (formula "70") (ifInst ""  (formula "96")) (ifInst ""  (formula "14")))
                        (rule "applyEqReverse" (formula "71") (term "1,0,1") (ifseqformula "70"))
                        (rule "hideAuxiliaryEq" (formula "70"))
                        (rule "pullOutSelect" (formula "70") (term "0,0,1") (inst "selectSK=org_bouncycastle_math_ec_ECPoint_value_5"))
                        (rule "simplifySelectOfAnonEQ" (formula "70") (ifseqformula "61"))
                         (builtin "One Step Simplification" (formula "70") (ifInst ""  (formula "97")) (ifInst ""  (formula "48")))
                        (rule "applyEqReverse" (formula "71") (term "0,0,1") (ifseqformula "70"))
                        (rule "hideAuxiliaryEq" (formula "70"))
                        (rule "replace_known_left" (formula "70") (term "0,1") (ifseqformula "5"))
                         (builtin "One Step Simplification" (formula "70"))
                        (rule "notLeft" (formula "70"))
                        (rule "Class_invariant_axiom_for_org_bouncycastle_math_ec_ECPoint" (formula "76") (term "1"))
                         (builtin "One Step Simplification" (formula "76"))
                        (rule "Class_invariant_axiom_for_org_bouncycastle_math_ec_ECPoint" (formula "76"))
                        (rule "closeTrue" (formula "76"))
                     )
                     (branch "CUT: result_228_A_1.value@heapAtPre_A«anonHeapFunction» = 0 FALSE"
                         (builtin "One Step Simplification" (formula "29"))
                        (rule "replace_known_right" (formula "31") (term "0") (ifseqformula "79"))
                         (builtin "One Step Simplification" (formula "31"))
                        (rule "replace_known_right" (formula "30") (term "0") (ifseqformula "79"))
                         (builtin "One Step Simplification" (formula "30"))
                        (rule "applyEq" (formula "33") (term "0,0") (ifseqformula "30"))
                        (rule "polySimp_mulComm0" (formula "33") (term "0"))
                        (rule "applyEq" (formula "29") (term "0") (ifseqformula "33"))
                        (rule "inEqSimp_homoInEq0" (formula "29"))
                        (rule "polySimp_mulComm0" (formula "29") (term "1,0"))
                        (rule "polySimp_rightDist" (formula "29") (term "1,0"))
                        (rule "polySimp_mulLiterals" (formula "29") (term "1,1,0"))
                        (rule "polySimp_elimOne" (formula "29") (term "1,1,0"))
                        (rule "polySimp_mulComm0" (formula "29") (term "0,1,0"))
                        (rule "polySimp_addAssoc" (formula "29") (term "0"))
                        (rule "polySimp_addComm0" (formula "29") (term "0,0"))
                        (rule "polySimp_pullOutFactor2b" (formula "29") (term "0"))
                        (rule "add_literals" (formula "29") (term "1,1,0"))
                        (rule "times_zero_1" (formula "29") (term "1,0"))
                        (rule "add_zero_right" (formula "29") (term "0"))
                        (rule "applyEq" (formula "31") (term "0") (ifseqformula "33"))
                        (rule "inEqSimp_homoInEq1" (formula "31"))
                        (rule "polySimp_mulComm0" (formula "31") (term "1,0"))
                        (rule "polySimp_rightDist" (formula "31") (term "1,0"))
                        (rule "polySimp_mulLiterals" (formula "31") (term "1,1,0"))
                        (rule "polySimp_elimOne" (formula "31") (term "1,1,0"))
                        (rule "polySimp_mulComm0" (formula "31") (term "0,1,0"))
                        (rule "polySimp_addComm1" (formula "31") (term "0"))
                        (rule "polySimp_addAssoc" (formula "31") (term "0,0"))
                        (rule "polySimp_addComm1" (formula "31") (term "0,0,0"))
                        (rule "polySimp_pullOutFactor2b" (formula "31") (term "0,0"))
                        (rule "add_literals" (formula "31") (term "1,1,0,0"))
                        (rule "times_zero_1" (formula "31") (term "1,0,0"))
                        (rule "add_zero_right" (formula "31") (term "0,0"))
                        (rule "applyEq" (formula "32") (term "0,1") (ifseqformula "30"))
                        (rule "inEqSimp_invertInEq1" (formula "29"))
                        (rule "polySimp_mulLiterals" (formula "29") (term "0"))
                        (rule "times_zero_2" (formula "29") (term "1"))
                        (rule "polySimp_elimOne" (formula "29") (term "0"))
                        (rule "inEqSimp_sepNegMonomial0" (formula "31"))
                        (rule "polySimp_mulLiterals" (formula "31") (term "0"))
                        (rule "polySimp_elimOne" (formula "31") (term "0"))
                        (rule "inEqSimp_strengthen1" (formula "28") (ifseqformula "79"))
                        (rule "add_literals" (formula "28") (term "1"))
                        (rule "inEqSimp_contradEq7" (formula "79") (ifseqformula "28"))
                        (rule "times_zero_1" (formula "79") (term "1,0,0"))
                        (rule "add_literals" (formula "79") (term "0,0"))
                        (rule "leq_literals" (formula "79") (term "0"))
                         (builtin "One Step Simplification" (formula "79"))
                        (rule "false_right" (formula "79"))
                        (rule "Use_information_flow_contract_for_compareTo_325434207" (formula "19") (ifseqformula "19"))
                         (builtin "One Step Simplification" (formula "19") (ifInst ""  (formula "94")) (ifInst ""  (formula "94")))
                        (rule "true_left" (formula "19"))
                        (rule "Use_information_flow_contract_for_getOrder_757678341" (formula "62") (ifseqformula "25"))
                        (rule "replace_known_left" (formula "62") (term "1,1") (ifseqformula "7"))
                         (builtin "One Step Simplification" (formula "62"))
                        (rule "true_left" (formula "62"))
                        (rule "Use_information_flow_contract_for_getOrder_757678341" (formula "62") (ifseqformula "62"))
                         (builtin "One Step Simplification" (formula "62"))
                        (rule "true_left" (formula "62"))
                        (rule "Use_information_flow_contract_for_compareTo_325434207" (formula "56") (ifseqformula "19"))
                        (rule "replace_known_left" (formula "56") (term "0,0,1") (ifseqformula "6"))
                         (builtin "One Step Simplification" (formula "56") (ifInst ""  (formula "95")) (ifInst ""  (formula "94")))
                        (rule "applyEq" (formula "56") (term "0,0,1") (ifseqformula "58"))
                        (rule "eqSymm" (formula "56") (term "0,1"))
                        (rule "replace_known_left" (formula "56") (term "0,1") (ifseqformula "20"))
                         (builtin "One Step Simplification" (formula "56"))
                        (rule "Class_invariant_axiom_for_java_math_BigInteger" (formula "56") (term "1,0"))
                        (rule "replace_known_right" (formula "56") (term "0,0,1,0") (ifseqformula "94"))
                         (builtin "One Step Simplification" (formula "56") (ifInst ""  (formula "20")))
                        (rule "Class_invariant_axiom_for_java_math_BigInteger" (formula "56") (term "0"))
                        (rule "replace_known_left" (formula "56") (term "1,0") (ifseqformula "58"))
                         (builtin "One Step Simplification" (formula "56") (ifInst ""  (formula "95")))
                        (rule "applyEq" (formula "57") (term "4") (ifseqformula "56"))
                        (rule "applyEq" (formula "55") (term "0") (ifseqformula "56"))
                        (rule "applyEq" (formula "48") (term "0") (ifseqformula "55"))
                        (rule "Use_information_flow_contract_for_getOrder_757678341" (formula "25") (ifseqformula "25"))
                         (builtin "One Step Simplification" (formula "25"))
                        (rule "true_left" (formula "25"))
                        (rule "Use_information_flow_contract_for_getOrder_757678341" (formula "25") (ifseqformula "61"))
                        (rule "eqSymm" (formula "25") (term "1,1"))
                        (rule "eqSymm" (formula "25") (term "0,1"))
                        (rule "replace_known_left" (formula "25") (term "1,1") (ifseqformula "7"))
                         (builtin "One Step Simplification" (formula "25"))
                        (rule "true_left" (formula "25"))
                        (rule "Use_information_flow_contract_for_multiply_1272441881" (formula "72") (ifseqformula "39"))
                        (rule "replaceKnownSelect_taclet21_12" (formula "72") (term "0,1,1"))
                        (rule "replaceKnownSelect_taclet21_11" (formula "72") (term "1,1,1"))
                        (rule "replaceKnownAuxiliaryConstant_taclet001121_19" (formula "72") (term "0,1,1"))
                        (rule "replaceKnownAuxiliaryConstant_taclet01121_17" (formula "72") (term "1,1,1"))
                        (rule "replaceKnownSelect_taclet21_9" (formula "72") (term "0,1,0,1"))
                        (rule "replaceKnownSelect_taclet21_8" (formula "72") (term "1,1,0,1"))
                        (rule "replaceKnownAuxiliaryConstant_taclet121_15" (formula "72") (term "0,1,0,1"))
                        (rule "replaceKnownAuxiliaryConstant_taclet21_10" (formula "72") (term "1,1,0,1"))
                        (rule "replaceKnownAuxiliaryConstant_taclet121_15" (formula "72") (term "1,1,0,1"))
                         (builtin "One Step Simplification" (formula "72") (ifInst ""  (formula "84")) (ifInst ""  (formula "83")) (ifInst ""  (formula "101")))
                        (rule "pullOutSelect" (formula "72") (term "0,0,1") (inst "selectSK=org_bouncycastle_math_ec_ECPoint_value_4"))
                        (rule "simplifySelectOfAnonEQ" (formula "72") (ifseqformula "63"))
                         (builtin "One Step Simplification" (formula "72") (ifInst ""  (formula "99")) (ifInst ""  (formula "50")))
                        (rule "applyEqReverse" (formula "73") (term "0,0,1") (ifseqformula "72"))
                        (rule "hideAuxiliaryEq" (formula "72"))
                        (rule "eqSymm" (formula "72") (term "0,1"))
                        (rule "applyEq" (formula "72") (term "1,0,1") (ifseqformula "5"))
                        (rule "pullOutSelect" (formula "72") (term "0,0,1") (inst "selectSK=org_bouncycastle_math_ec_ECPoint_value_5"))
                        (rule "simplifySelectOfAnonEQ" (formula "72") (ifseqformula "26"))
                         (builtin "One Step Simplification" (formula "72") (ifInst ""  (formula "98")) (ifInst ""  (formula "14")))
                        (rule "applyEqReverse" (formula "73") (term "0,0,1") (ifseqformula "72"))
                         (builtin "One Step Simplification" (formula "73"))
                        (rule "notLeft" (formula "73"))
                        (rule "hideAuxiliaryEq" (formula "72"))
                        (rule "Class_invariant_axiom_for_org_bouncycastle_math_ec_ECPoint" (formula "78") (term "1"))
                         (builtin "One Step Simplification" (formula "78"))
                        (rule "Class_invariant_axiom_for_org_bouncycastle_math_ec_ECPoint" (formula "78"))
                        (rule "closeTrue" (formula "78"))
                     )
                  )
                  (branch "result_228_A_1.value@heapAtPre_A«anonHeapFunction» ≥ 0 FALSE"
                     (rule "inEqSimp_geqRight" (formula "79"))
                     (rule "times_zero_1" (formula "1") (term "1,0,0"))
                     (rule "add_zero_right" (formula "1") (term "0,0"))
                     (rule "inEqSimp_sepPosMonomial0" (formula "1"))
                     (rule "mul_literals" (formula "1") (term "1"))
                     (rule "inEqSimp_contradEq3" (formula "32") (term "0") (ifseqformula "1"))
                     (rule "mul_literals" (formula "32") (term "1,0,0,0"))
                     (rule "add_literals" (formula "32") (term "0,0,0"))
                     (rule "qeq_literals" (formula "32") (term "0,0"))
                      (builtin "One Step Simplification" (formula "32"))
                     (rule "andLeft" (formula "32"))
                     (rule "andLeft" (formula "32"))
                     (rule "applyEq" (formula "36") (term "0,0") (ifseqformula "33"))
                     (rule "polySimp_mulComm0" (formula "36") (term "0"))
                     (rule "applyEq" (formula "32") (term "0") (ifseqformula "36"))
                     (rule "inEqSimp_homoInEq0" (formula "32"))
                     (rule "polySimp_mulComm0" (formula "32") (term "1,0"))
                     (rule "polySimp_rightDist" (formula "32") (term "1,0"))
                     (rule "polySimp_mulLiterals" (formula "32") (term "1,1,0"))
                     (rule "polySimp_elimOne" (formula "32") (term "1,1,0"))
                     (rule "polySimp_mulComm0" (formula "32") (term "0,1,0"))
                     (rule "polySimp_addAssoc" (formula "32") (term "0"))
                     (rule "polySimp_addComm0" (formula "32") (term "0,0"))
                     (rule "polySimp_pullOutFactor2b" (formula "32") (term "0"))
                     (rule "add_literals" (formula "32") (term "1,1,0"))
                     (rule "times_zero_1" (formula "32") (term "1,0"))
                     (rule "add_zero_right" (formula "32") (term "0"))
                     (rule "applyEq" (formula "34") (term "0") (ifseqformula "36"))
                     (rule "inEqSimp_homoInEq1" (formula "34"))
                     (rule "polySimp_mulComm0" (formula "34") (term "1,0"))
                     (rule "polySimp_rightDist" (formula "34") (term "1,0"))
                     (rule "polySimp_mulLiterals" (formula "34") (term "1,1,0"))
                     (rule "polySimp_elimOne" (formula "34") (term "1,1,0"))
                     (rule "polySimp_mulComm0" (formula "34") (term "0,1,0"))
                     (rule "polySimp_addComm1" (formula "34") (term "0"))
                     (rule "polySimp_addAssoc" (formula "34") (term "0,0"))
                     (rule "polySimp_addComm1" (formula "34") (term "0,0,0"))
                     (rule "polySimp_pullOutFactor2b" (formula "34") (term "0,0"))
                     (rule "add_literals" (formula "34") (term "1,1,0,0"))
                     (rule "times_zero_1" (formula "34") (term "1,0,0"))
                     (rule "add_zero_right" (formula "34") (term "0,0"))
                     (rule "applyEq" (formula "35") (term "0,1") (ifseqformula "33"))
                     (rule "inEqSimp_invertInEq1" (formula "32"))
                     (rule "times_zero_2" (formula "32") (term "1"))
                     (rule "polySimp_mulLiterals" (formula "32") (term "0"))
                     (rule "polySimp_elimOne" (formula "32") (term "0"))
                     (rule "inEqSimp_sepPosMonomial0" (formula "34"))
                     (rule "polySimp_mulComm0" (formula "34") (term "1"))
                     (rule "polySimp_rightDist" (formula "34") (term "1"))
                     (rule "polySimp_mulLiterals" (formula "34") (term "1,1"))
                     (rule "mul_literals" (formula "34") (term "0,1"))
                     (rule "polySimp_elimOne" (formula "34") (term "1,1"))
                     (rule "cnf_rightDist" (formula "4") (term "0,0,0"))
                     (rule "distr_forallAnd" (formula "4") (term "0,0"))
                     (rule "distr_forallAnd" (formula "4") (term "0"))
                     (rule "distr_forallAnd" (formula "4"))
                     (rule "andLeft" (formula "4"))
                     (rule "shift_paren_or" (formula "3") (term "0,0,0"))
                      (builtin "One Step Simplification" (formula "3"))
                     (rule "eqSymm" (formula "3") (term "1,1,0,0,0"))
                     (rule "castedGetAny" (formula "3") (term "1,0,0,0,0,0,0"))
                     (rule "castedGetAny" (formula "3") (term "0,0,1,0,0,0"))
                     (rule "castedGetAny" (formula "3") (term "0,1,1,0,0,0"))
                      (builtin "One Step Simplification" (formula "3"))
                     (rule "true_left" (formula "3"))
                     (rule "cnf_rightDist" (formula "2") (term "0,0,0"))
                     (rule "distr_forallAnd" (formula "2") (term "0,0"))
                     (rule "distr_forallAnd" (formula "2") (term "0"))
                     (rule "distr_forallAnd" (formula "2"))
                     (rule "andLeft" (formula "2"))
                     (rule "commute_or_2" (formula "3") (term "0,0,0"))
                      (builtin "One Step Simplification" (formula "3"))
                     (rule "eqSymm" (formula "3") (term "1,0,0,0,0"))
                     (rule "castedGetAny" (formula "3") (term "1,0,0,1,0,0,0"))
                     (rule "castedGetAny" (formula "3") (term "0,0,0,0,0,0"))
                     (rule "castedGetAny" (formula "3") (term "0,1,0,0,0,0"))
                      (builtin "One Step Simplification" (formula "3"))
                     (rule "true_left" (formula "3"))
                     (rule "commute_or_2" (formula "2") (term "0,0,0"))
                      (builtin "One Step Simplification" (formula "2"))
                     (rule "eqSymm" (formula "2") (term "1,0,0,0,0"))
                     (rule "castedGetAny" (formula "2") (term "1,0,0,1,0,0,0"))
                     (rule "castedGetAny" (formula "2") (term "0,0,0,0,0,0"))
                     (rule "castedGetAny" (formula "2") (term "0,1,0,0,0,0"))
                      (builtin "One Step Simplification" (formula "2"))
                     (rule "true_left" (formula "2"))
                     (rule "shift_paren_or" (formula "2") (term "0,0,0"))
                      (builtin "One Step Simplification" (formula "2"))
                     (rule "eqSymm" (formula "2") (term "1,1,0,0,0"))
                     (rule "castedGetAny" (formula "2") (term "0,0,1,0,0,0"))
                     (rule "castedGetAny" (formula "2") (term "1,0,0,0,0,0,0"))
                     (rule "castedGetAny" (formula "2") (term "0,1,1,0,0,0"))
                      (builtin "One Step Simplification" (formula "2"))
                     (rule "true_left" (formula "2"))
                     (rule "Use_information_flow_contract_for_compareTo_325434207" (formula "20") (ifseqformula "20"))
                      (builtin "One Step Simplification" (formula "20") (ifInst ""  (formula "94")) (ifInst ""  (formula "94")))
                     (rule "true_left" (formula "20"))
                     (rule "Use_information_flow_contract_for_getOrder_757678341" (formula "62") (ifseqformula "26"))
                     (rule "replace_known_left" (formula "62") (term "1,1") (ifseqformula "8"))
                      (builtin "One Step Simplification" (formula "62"))
                     (rule "true_left" (formula "62"))
                     (rule "Use_information_flow_contract_for_getOrder_757678341" (formula "62") (ifseqformula "62"))
                      (builtin "One Step Simplification" (formula "62"))
                     (rule "true_left" (formula "62"))
                     (rule "Use_information_flow_contract_for_getOrder_757678341" (formula "26") (ifseqformula "26"))
                      (builtin "One Step Simplification" (formula "26"))
                     (rule "true_left" (formula "26"))
                     (rule "Use_information_flow_contract_for_compareTo_325434207" (formula "20") (ifseqformula "56"))
                     (rule "eqSymm" (formula "20") (term "1,0,1"))
                     (rule "eqSymm" (formula "20") (term "1,1"))
                     (rule "eqSymm" (formula "20") (term "0,0,1"))
                     (rule "replace_known_right" (formula "20") (term "0,1,0,0") (ifseqformula "94"))
                      (builtin "One Step Simplification" (formula "20") (ifInst ""  (formula "95")) (ifInst ""  (formula "7")))
                     (rule "applyEqRigid" (formula "20") (term "0,0,1") (ifseqformula "58"))
                     (rule "eqSymm" (formula "20") (term "0,1"))
                     (rule "replace_known_left" (formula "20") (term "0,1") (ifseqformula "22"))
                      (builtin "One Step Simplification" (formula "20"))
                     (rule "Class_invariant_axiom_for_java_math_BigInteger" (formula "20") (term "1,0"))
                     (rule "replace_known_right" (formula "20") (term "0,0,1,0") (ifseqformula "95"))
                      (builtin "One Step Simplification" (formula "20") (ifInst ""  (formula "58")))
                     (rule "Class_invariant_axiom_for_java_math_BigInteger" (formula "20") (term "0"))
                     (rule "replace_known_right" (formula "20") (term "0,0,0") (ifseqformula "94"))
                      (builtin "One Step Simplification" (formula "20") (ifInst ""  (formula "22")))
                     (rule "applyEq" (formula "56") (term "0") (ifseqformula "20"))
                     (rule "applyEq" (formula "56") (term "4") (ifseqformula "20"))
                     (rule "applyEq" (formula "49") (term "0") (ifseqformula "20"))
                     (rule "Use_information_flow_contract_for_multiply_1272441881_0" (formula "72") (ifseqformula "40"))
                     (rule "replaceKnownSelect_taclet21_12" (formula "72") (term "0,1,1"))
                     (rule "replaceKnownSelect_taclet21_11" (formula "72") (term "1,1,1"))
                     (rule "replaceKnownAuxiliaryConstant_taclet001121_19" (formula "72") (term "0,1,1"))
                     (rule "replaceKnownAuxiliaryConstant_taclet01121_17" (formula "72") (term "1,1,1"))
                     (rule "replaceKnownSelect_taclet21_8" (formula "72") (term "1,1,0,1"))
                     (rule "replaceKnownSelect_taclet21_9" (formula "72") (term "0,1,0,1"))
                     (rule "replaceKnownAuxiliaryConstant_taclet21_10" (formula "72") (term "1,1,0,1"))
                      (builtin "One Step Simplification" (formula "72") (ifInst ""  (formula "84")) (ifInst ""  (formula "83")) (ifInst ""  (formula "101")))
                     (rule "pullOutSelect" (formula "72") (term "1,0,1") (inst "selectSK=org_bouncycastle_math_ec_ECPoint_value_4"))
                     (rule "simplifySelectOfAnonEQ" (formula "72") (ifseqformula "28"))
                      (builtin "One Step Simplification" (formula "72") (ifInst ""  (formula "98")) (ifInst ""  (formula "15")))
                     (rule "applyEqReverse" (formula "73") (term "1,0,1") (ifseqformula "72"))
                     (rule "hideAuxiliaryEq" (formula "72"))
                     (rule "pullOutSelect" (formula "72") (term "0,0,1") (inst "selectSK=org_bouncycastle_math_ec_ECPoint_value_5"))
                     (rule "simplifySelectOfAnonEQ" (formula "72") (ifseqformula "63"))
                      (builtin "One Step Simplification" (formula "72") (ifInst ""  (formula "99")) (ifInst ""  (formula "51")))
                     (rule "applyEqReverse" (formula "73") (term "0,0,1") (ifseqformula "72"))
                     (rule "hideAuxiliaryEq" (formula "72"))
                     (rule "replace_known_left" (formula "72") (term "0,1") (ifseqformula "6"))
                      (builtin "One Step Simplification" (formula "72"))
                     (rule "notLeft" (formula "72"))
                     (rule "Class_invariant_axiom_for_org_bouncycastle_math_ec_ECPoint" (formula "78") (term "1"))
                      (builtin "One Step Simplification" (formula "78"))
                     (rule "Class_invariant_axiom_for_org_bouncycastle_math_ec_ECPoint" (formula "78"))
                     (rule "closeTrue" (formula "78"))
                  )
               )
               (branch " resultAtPost_226_B.<created>@heapAtPre_B«anonHeapFunction» = TRUE FALSE"
                  (rule "applyEqReverse" (formula "2") (term "1,0") (ifseqformula "1"))
                  (rule "hideAuxiliaryEq" (formula "1"))
                  (rule "replace_known_right" (formula "1") (term "1,0,0") (ifseqformula "75"))
                   (builtin "One Step Simplification" (formula "1"))
                  (rule "replace_known_right" (formula "68") (term "1") (ifseqformula "75"))
                   (builtin "One Step Simplification" (formula "68"))
                  (rule "Class_axiom_0_in_de_polyas_core3_open_cred_CredTool" (inst "seq=seq") (inst "i=i") (inst "str=str") (inst "seq_0=seq_0") (inst "i_0=i_0") (inst "sv_heap=heapAtPre_B<<anonHeapFunction>>"))
                  (rule "andLeft" (formula "1"))
                  (rule "castedGetAny" (formula "1") (term "0,0,0,0,0"))
                  (rule "castedGetAny" (formula "2") (term "0,1,1,0,0,0"))
                  (rule "castedGetAny" (formula "1") (term "0,0,1,0,0"))
                  (rule "nnf_imp2or" (formula "1") (term "0,0"))
                   (builtin "One Step Simplification" (formula "1"))
                  (rule "nnf_imp2or" (formula "2") (term "0,0,0"))
                  (rule "nnf_imp2or" (formula "2") (term "1,0,0,0"))
                  (rule "nnf_notAnd" (formula "2") (term "0,0,0,0"))
                   (builtin "One Step Simplification" (formula "2"))
                  (rule "nnf_notOr" (formula "2") (term "0,0,0,0,0"))
                  (rule "nnf_notAnd" (formula "2") (term "0,1,0,0,0"))
                   (builtin "One Step Simplification" (formula "2"))
                  (rule "commute_or" (formula "2") (term "0,0,0,0"))
                  (rule "commute_or_2" (formula "2") (term "0,0,0"))
                  (rule "shift_paren_or" (formula "2") (term "0,0,0,0"))
                  (rule "commute_and" (formula "2") (term "1,0,0,0"))
                  (rule "shift_paren_or" (formula "2") (term "0,0,0,0,0"))
                  (rule "commute_or_2" (formula "2") (term "0,0,0,0,0"))
                   (builtin "One Step Simplification" (formula "2"))
                  (rule "commute_or_2" (formula "2") (term "0,0,0,0"))
                  (rule "cnf_rightDist" (formula "2") (term "0,0,0"))
                  (rule "distr_forallAnd" (formula "2") (term "0,0"))
                  (rule "distr_forallAnd" (formula "2") (term "0"))
                  (rule "distr_forallAnd" (formula "2"))
                  (rule "andLeft" (formula "2"))
                  (rule "commute_or_2" (formula "2") (term "0,0,0"))
                   (builtin "One Step Simplification" (formula "2"))
                  (rule "eqSymm" (formula "2") (term "1,0,0,0,0"))
                  (rule "castedGetAny" (formula "2") (term "1,0,0,1,0,0,0"))
                  (rule "castedGetAny" (formula "2") (term "0,0,0,0,0,0"))
                  (rule "castedGetAny" (formula "2") (term "0,1,0,0,0,0"))
                   (builtin "One Step Simplification" (formula "2"))
                  (rule "true_left" (formula "2"))
                  (rule "shift_paren_or" (formula "2") (term "0,0,0"))
                   (builtin "One Step Simplification" (formula "2"))
                  (rule "eqSymm" (formula "2") (term "1,1,0,0,0"))
                  (rule "castedGetAny" (formula "2") (term "0,0,1,0,0,0"))
                  (rule "castedGetAny" (formula "2") (term "0,0,0,0,0,0"))
                  (rule "castedGetAny" (formula "2") (term "0,1,1,0,0,0"))
                   (builtin "One Step Simplification" (formula "2"))
                  (rule "true_left" (formula "2"))
                  (rule "Class_axiom_0_in_de_polyas_core3_open_cred_CredTool" (inst "seq=seq") (inst "i=i") (inst "str=str") (inst "seq_0=seq_0") (inst "i_0=i_0") (inst "sv_heap=anon_heap_mod<<anonHeapFunction>>"))
                  (rule "andLeft" (formula "1"))
                  (rule "castedGetAny" (formula "1") (term "0,0,0,0,0"))
                  (rule "castedGetAny" (formula "2") (term "0,1,1,0,0,0"))
                  (rule "castedGetAny" (formula "1") (term "0,0,1,0,0"))
                  (rule "nnf_imp2or" (formula "1") (term "0,0"))
                   (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "3")))
                  (rule "true_left" (formula "1"))
                  (rule "nnf_imp2or" (formula "1") (term "0,0,0"))
                  (rule "nnf_notAnd" (formula "1") (term "0,0,0,0"))
                   (builtin "One Step Simplification" (formula "1"))
                  (rule "nnf_imp2or" (formula "1") (term "1,0,0,0"))
                  (rule "nnf_notOr" (formula "1") (term "0,0,0,0,0"))
                  (rule "nnf_notAnd" (formula "1") (term "0,1,0,0,0"))
                   (builtin "One Step Simplification" (formula "1"))
                  (rule "commute_or" (formula "1") (term "0,0,0,0"))
                  (rule "commute_or_2" (formula "1") (term "0,0,0"))
                  (rule "shift_paren_or" (formula "1") (term "0,0,0,0"))
                  (rule "commute_and" (formula "1") (term "1,0,0,0"))
                  (rule "shift_paren_or" (formula "1") (term "0,0,0,0,0"))
                  (rule "commute_or_2" (formula "1") (term "0,0,0,0,0"))
                   (builtin "One Step Simplification" (formula "1"))
                  (rule "commute_or_2" (formula "1") (term "0,0,0,0"))
                  (rule "cnf_rightDist" (formula "1") (term "0,0,0"))
                  (rule "distr_forallAnd" (formula "1") (term "0,0"))
                  (rule "distr_forallAnd" (formula "1") (term "0"))
                  (rule "distr_forallAnd" (formula "1"))
                  (rule "andLeft" (formula "1"))
                  (rule "commute_or_2" (formula "1") (term "0,0,0"))
                   (builtin "One Step Simplification" (formula "1"))
                  (rule "eqSymm" (formula "1") (term "1,0,0,0,0"))
                  (rule "castedGetAny" (formula "1") (term "1,0,0,1,0,0,0"))
                  (rule "castedGetAny" (formula "1") (term "0,0,0,0,0,0"))
                  (rule "castedGetAny" (formula "1") (term "0,1,0,0,0,0"))
                   (builtin "One Step Simplification" (formula "1"))
                  (rule "true_left" (formula "1"))
                  (rule "shift_paren_or" (formula "1") (term "0,0,0"))
                   (builtin "One Step Simplification" (formula "1"))
                  (rule "eqSymm" (formula "1") (term "1,1,0,0,0"))
                  (rule "castedGetAny" (formula "1") (term "0,0,1,0,0,0"))
                  (rule "castedGetAny" (formula "1") (term "0,0,0,0,0,0"))
                  (rule "castedGetAny" (formula "1") (term "0,1,1,0,0,0"))
                   (builtin "One Step Simplification" (formula "1"))
                  (rule "true_left" (formula "1"))
                  (rule "Class_axiom_0_in_de_polyas_core3_open_cred_CredTool" (inst "seq=seq") (inst "i=i") (inst "str=str") (inst "seq_0=seq_0") (inst "i_0=i_0") (inst "sv_heap=anon_heap_multiply<<anonHeapFunction>>"))
                  (rule "andLeft" (formula "1"))
                  (rule "castedGetAny" (formula "1") (term "0,0,0,0,0"))
                  (rule "castedGetAny" (formula "2") (term "0,1,1,0,0,0"))
                  (rule "castedGetAny" (formula "1") (term "0,0,1,0,0"))
                  (rule "nnf_imp2or" (formula "1") (term "0,0"))
                   (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "3")))
                  (rule "true_left" (formula "1"))
                  (rule "nnf_imp2or" (formula "1") (term "0,0,0"))
                  (rule "nnf_notAnd" (formula "1") (term "0,0,0,0"))
                   (builtin "One Step Simplification" (formula "1"))
                  (rule "nnf_imp2or" (formula "1") (term "1,0,0,0"))
                  (rule "nnf_notOr" (formula "1") (term "0,0,0,0,0"))
                  (rule "nnf_notAnd" (formula "1") (term "0,1,0,0,0"))
                   (builtin "One Step Simplification" (formula "1"))
                  (rule "commute_or" (formula "1") (term "0,0,0,0"))
                  (rule "commute_or_2" (formula "1") (term "0,0,0"))
                  (rule "shift_paren_or" (formula "1") (term "0,0,0,0"))
                  (rule "Class_axiom_0_in_de_polyas_core3_open_cred_CredTool" (inst "seq=seq") (inst "i=i") (inst "str=str") (inst "seq_0=seq_0") (inst "i_0=i_0") (inst "sv_heap=heapAtPre_A<<anonHeapFunction>>"))
                  (rule "andLeft" (formula "1"))
                  (rule "castedGetAny" (formula "1") (term "0,0,0,0,0"))
                  (rule "castedGetAny" (formula "2") (term "0,1,1,0,0,0"))
                  (rule "castedGetAny" (formula "1") (term "0,0,1,0,0"))
                  (rule "nnf_imp2or" (formula "1") (term "0,0"))
                   (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "4")))
                  (rule "true_left" (formula "1"))
                  (rule "nnf_imp2or" (formula "1") (term "0,0,0"))
                  (rule "nnf_notAnd" (formula "1") (term "0,0,0,0"))
                   (builtin "One Step Simplification" (formula "1"))
                  (rule "nnf_imp2or" (formula "1") (term "1,0,0,0"))
                  (rule "nnf_notOr" (formula "1") (term "0,0,0,0,0"))
                  (rule "nnf_notAnd" (formula "1") (term "0,1,0,0,0"))
                   (builtin "One Step Simplification" (formula "1"))
                  (rule "commute_or" (formula "1") (term "0,0,0,0"))
                  (rule "commute_or_2" (formula "1") (term "0,0,0"))
                  (rule "Class_axiom_0_in_de_polyas_core3_open_cred_CredTool" (inst "seq=seq") (inst "i=i") (inst "str=str") (inst "seq_0=seq_0") (inst "i_0=i_0") (inst "sv_heap=anon(heapAtPre_A<<anonHeapFunction>>,
     empty,
     anon_heap_mod<<anonHeapFunction>>)"))
                   (builtin "One Step Simplification" (formula "1"))
                  (rule "andLeft" (formula "1"))
                  (rule "castedGetAny" (formula "1") (term "0,0,0,0,0"))
                  (rule "castedGetAny" (formula "1") (term "0,0,1,0,0"))
                  (rule "castedGetAny" (formula "2") (term "0,1,1,0,0,0"))
                  (rule "nnf_imp2or" (formula "1") (term "0,0"))
                   (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "5")))
                  (rule "true_left" (formula "1"))
                  (rule "nnf_imp2or" (formula "1") (term "0,0,0"))
                  (rule "nnf_imp2or" (formula "1") (term "1,0,0,0"))
                  (rule "nnf_notAnd" (formula "1") (term "0,0,0,0"))
                   (builtin "One Step Simplification" (formula "1"))
                  (rule "nnf_notAnd" (formula "1") (term "0,1,0,0,0"))
                   (builtin "One Step Simplification" (formula "1"))
                  (rule "nnf_notOr" (formula "1") (term "0,0,0,0,0"))
                  (rule "nnf_notOr" (formula "1") (term "1,0,0,0,0,0"))
                  (rule "Class_axiom_0_in_de_polyas_core3_open_cred_CredTool" (inst "seq=seq") (inst "i=i") (inst "str=str") (inst "seq_0=seq_0") (inst "i_0=i_0") (inst "sv_heap=heapAfter_mod_A_0"))
                  (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "1,0,0,0,0,0,1") (ifseqformula "30"))
                  (rule "andLeft" (formula "1"))
                  (rule "castedGetAny" (formula "2") (term "0,1,1,0,0,0"))
                  (rule "castedGetAny" (formula "1") (term "0,0,0,0,0"))
                  (rule "castedGetAny" (formula "1") (term "0,0,1,0,0"))
                  (rule "nnf_imp2or" (formula "1") (term "0,0"))
                   (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "6")))
                  (rule "true_left" (formula "1"))
                  (rule "nnf_imp2or" (formula "1") (term "0,0,0"))
                  (rule "nnf_imp2or" (formula "1") (term "1,0,0,0"))
                  (rule "nnf_notAnd" (formula "1") (term "0,0,0,0"))
                   (builtin "One Step Simplification" (formula "1"))
                  (rule "nnf_notAnd" (formula "1") (term "0,1,0,0,0"))
                   (builtin "One Step Simplification" (formula "1"))
                  (rule "nnf_notOr" (formula "1") (term "0,0,0,0,0"))
                  (rule "nnf_notOr" (formula "1") (term "1,0,0,0,0,0"))
                  (rule "Class_axiom_0_in_de_polyas_core3_open_cred_CredTool" (inst "seq=seq") (inst "i=i") (inst "str=str") (inst "seq_0=seq_0") (inst "i_0=i_0") (inst "sv_heap=anon(heapAfter_mod_A_0,
     empty,
     anon_heap_multiply<<anonHeapFunction>>)"))
                   (builtin "One Step Simplification" (formula "1"))
                  (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,1,0,0,0,0,0,1") (ifseqformula "30"))
                  (rule "andLeft" (formula "1"))
                  (rule "castedGetAny" (formula "1") (term "0,0,0,0,0"))
                  (rule "castedGetAny" (formula "1") (term "0,0,1,0,0"))
                  (rule "castedGetAny" (formula "2") (term "0,1,1,0,0,0"))
                  (rule "nnf_imp2or" (formula "1") (term "0,0"))
                   (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "6")))
                  (rule "true_left" (formula "1"))
                  (rule "nnf_imp2or" (formula "1") (term "0,0,0"))
                  (rule "nnf_notAnd" (formula "1") (term "0,0,0,0"))
                   (builtin "One Step Simplification" (formula "1"))
                  (rule "nnf_imp2or" (formula "1") (term "1,0,0,0"))
                  (rule "nnf_notOr" (formula "1") (term "0,0,0,0,0"))
                  (rule "nnf_notAnd" (formula "1") (term "0,1,0,0,0"))
                   (builtin "One Step Simplification" (formula "1"))
                  (rule "nnf_notOr" (formula "1") (term "1,0,0,0,0,0"))
                  (rule "nnf_notOr" (formula "1") (term "0,1,0,0,0,0,0"))
                  (rule "Class_axiom_0_in_de_polyas_core3_open_cred_CredTool" (inst "seq=seq") (inst "i=i") (inst "str=str") (inst "seq_0=seq_0") (inst "i_0=i_0") (inst "sv_heap=heapAfter_multiply_A_1"))
                  (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "1,0,0,0,0,0,1") (ifseqformula "38"))
                  (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,1,0,0,0,0,0,1") (ifseqformula "31"))
                  (rule "andLeft" (formula "1"))
                  (rule "castedGetAny" (formula "1") (term "0,0,0,0,0"))
                  (rule "castedGetAny" (formula "1") (term "0,0,1,0,0"))
                  (rule "castedGetAny" (formula "2") (term "0,1,1,0,0,0"))
                  (rule "nnf_imp2or" (formula "1") (term "0,0"))
                   (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "7")))
                  (rule "true_left" (formula "1"))
                  (rule "nnf_imp2or" (formula "1") (term "0,0,0"))
                  (rule "nnf_imp2or" (formula "1") (term "1,0,0,0"))
                  (rule "nnf_notAnd" (formula "1") (term "0,0,0,0"))
                   (builtin "One Step Simplification" (formula "1"))
                  (rule "nnf_notOr" (formula "1") (term "0,0,0,0,0"))
                  (rule "nnf_notAnd" (formula "1") (term "0,1,0,0,0"))
                   (builtin "One Step Simplification" (formula "1"))
                  (rule "nnf_notOr" (formula "1") (term "1,0,0,0,0,0"))
                  (rule "nnf_notOr" (formula "1") (term "0,1,0,0,0,0,0"))
                  (rule "Class_axiom_0_in_de_polyas_core3_open_cred_CredTool" (inst "seq=seq") (inst "i=i") (inst "str=str") (inst "seq_0=seq_0") (inst "i_0=i_0") (inst "sv_heap=heapAtPost_A"))
                  (rule "andLeft" (formula "1"))
                  (rule "castedGetAny" (formula "2") (term "0,1,1,0,0,0"))
                  (rule "castedGetAny" (formula "1") (term "0,0,1,0,0"))
                  (rule "castedGetAny" (formula "1") (term "0,0,0,0,0"))
                  (rule "applyEqRigid" (formula "2") (term "0,0,1,0,0,0,0,0") (ifseqformula "46"))
                  (rule "selectCreatedOfAnonAsFormulaEQ" (formula "2") (term "1,0,0,0,0,0") (ifseqformula "39"))
                  (rule "selectCreatedOfAnonAsFormulaEQ" (formula "2") (term "0,1,0,0,0,0,0") (ifseqformula "32"))
                  (rule "nnf_imp2or" (formula "1") (term "0,0"))
                   (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "7")))
                  (rule "true_left" (formula "1"))
                  (rule "nnf_imp2or" (formula "1") (term "0,0,0"))
                  (rule "nnf_imp2or" (formula "1") (term "1,0,0,0"))
                  (rule "nnf_notAnd" (formula "1") (term "0,0,0,0"))
                   (builtin "One Step Simplification" (formula "1"))
                  (rule "nnf_notOr" (formula "1") (term "0,0,0,0,0"))
                  (rule "nnf_notAnd" (formula "1") (term "0,1,0,0,0"))
                   (builtin "One Step Simplification" (formula "1"))
                  (rule "nnf_notOr" (formula "1") (term "1,0,0,0,0,0"))
                  (rule "nnf_notOr" (formula "1") (term "0,1,0,0,0,0,0"))
                  (rule "Class_axiom_0_in_de_polyas_core3_open_cred_CredTool" (inst "seq=seq") (inst "i=i") (inst "str=str") (inst "seq_0=seq_0") (inst "i_0=i_0") (inst "sv_heap=anon(heapAtPre_B<<anonHeapFunction>>,
     empty,
     anon_heap_mod<<anonHeapFunction>>)"))
                   (builtin "One Step Simplification" (formula "1"))
                  (rule "andLeft" (formula "1"))
                  (rule "castedGetAny" (formula "1") (term "0,0,0,0,0"))
                  (rule "castedGetAny" (formula "1") (term "0,0,1,0,0"))
                  (rule "castedGetAny" (formula "2") (term "0,1,1,0,0,0"))
                  (rule "nnf_imp2or" (formula "1") (term "0,0"))
                   (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "7")))
                  (rule "true_left" (formula "1"))
                  (rule "nnf_imp2or" (formula "1") (term "0,0,0"))
                  (rule "nnf_notAnd" (formula "1") (term "0,0,0,0"))
                   (builtin "One Step Simplification" (formula "1"))
                  (rule "nnf_imp2or" (formula "1") (term "1,0,0,0"))
                  (rule "nnf_notOr" (formula "1") (term "0,0,0,0,0"))
                  (rule "nnf_notAnd" (formula "1") (term "0,1,0,0,0"))
                   (builtin "One Step Simplification" (formula "1"))
                  (rule "nnf_notOr" (formula "1") (term "1,0,0,0,0,0"))
                  (rule "Class_axiom_0_in_de_polyas_core3_open_cred_CredTool" (inst "seq=seq") (inst "i=i") (inst "str=str") (inst "seq_0=seq_0") (inst "i_0=i_0") (inst "sv_heap=heapAfter_mod_B_0"))
                  (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "1,0,0,0,0,0,1") (ifseqformula "66"))
                  (rule "andLeft" (formula "1"))
                  (rule "castedGetAny" (formula "1") (term "0,0,1,0,0"))
                  (rule "castedGetAny" (formula "2") (term "0,1,1,0,0,0"))
                  (rule "castedGetAny" (formula "1") (term "0,0,0,0,0"))
                  (rule "nnf_imp2or" (formula "1") (term "0,0"))
                   (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "8")))
                  (rule "true_left" (formula "1"))
                  (rule "nnf_imp2or" (formula "1") (term "0,0,0"))
                  (rule "nnf_imp2or" (formula "1") (term "1,0,0,0"))
                  (rule "nnf_notAnd" (formula "1") (term "0,0,0,0"))
                   (builtin "One Step Simplification" (formula "1"))
                  (rule "nnf_notAnd" (formula "1") (term "0,1,0,0,0"))
                   (builtin "One Step Simplification" (formula "1"))
                  (rule "nnf_notOr" (formula "1") (term "0,0,0,0,0"))
                  (rule "nnf_notOr" (formula "1") (term "1,0,0,0,0,0"))
                  (rule "Class_axiom_0_in_de_polyas_core3_open_cred_CredTool" (inst "seq=seq") (inst "i=i") (inst "str=str") (inst "seq_0=seq_0") (inst "i_0=i_0") (inst "sv_heap=anon(heapAfter_mod_B_0,
     empty,
     anon_heap_multiply<<anonHeapFunction>>)"))
                   (builtin "One Step Simplification" (formula "1"))
                  (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,1,0,0,0,0,0,1") (ifseqformula "66"))
                  (rule "andLeft" (formula "1"))
                  (rule "castedGetAny" (formula "1") (term "0,0,1,0,0"))
                  (rule "castedGetAny" (formula "2") (term "0,1,1,0,0,0"))
                  (rule "castedGetAny" (formula "1") (term "0,0,0,0,0"))
                  (rule "nnf_imp2or" (formula "1") (term "0,0"))
                   (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "8")))
                  (rule "true_left" (formula "1"))
                  (rule "nnf_imp2or" (formula "1") (term "0,0,0"))
                  (rule "nnf_imp2or" (formula "1") (term "1,0,0,0"))
                  (rule "nnf_notAnd" (formula "1") (term "0,0,0,0"))
                   (builtin "One Step Simplification" (formula "1"))
                  (rule "nnf_notAnd" (formula "1") (term "0,1,0,0,0"))
                   (builtin "One Step Simplification" (formula "1"))
                  (rule "nnf_notOr" (formula "1") (term "0,0,0,0,0"))
                  (rule "nnf_notOr" (formula "1") (term "1,0,0,0,0,0"))
                  (rule "nnf_notOr" (formula "1") (term "0,1,0,0,0,0,0"))
                  (rule "Class_axiom_0_in_de_polyas_core3_open_cred_CredTool" (inst "seq=seq") (inst "i=i") (inst "str=str") (inst "seq_0=seq_0") (inst "i_0=i_0") (inst "sv_heap=heapAfter_multiply_B_1"))
                  (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "1,0,0,0,0,0,1") (ifseqformula "74"))
                  (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,1,0,0,0,0,0,1") (ifseqformula "67"))
                  (rule "andLeft" (formula "1"))
                  (rule "castedGetAny" (formula "2") (term "0,1,1,0,0,0"))
                  (rule "castedGetAny" (formula "1") (term "0,0,0,0,0"))
                  (rule "castedGetAny" (formula "1") (term "0,0,1,0,0"))
                  (rule "nnf_imp2or" (formula "1") (term "0,0"))
                   (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "9")))
                  (rule "true_left" (formula "1"))
                  (rule "nnf_imp2or" (formula "1") (term "0,0,0"))
                  (rule "nnf_imp2or" (formula "1") (term "1,0,0,0"))
                  (rule "nnf_notAnd" (formula "1") (term "0,0,0,0"))
                   (builtin "One Step Simplification" (formula "1"))
                  (rule "nnf_notAnd" (formula "1") (term "0,1,0,0,0"))
                   (builtin "One Step Simplification" (formula "1"))
                  (rule "nnf_notOr" (formula "1") (term "0,0,0,0,0"))
                  (rule "nnf_notOr" (formula "1") (term "1,0,0,0,0,0"))
                  (rule "nnf_notOr" (formula "1") (term "0,1,0,0,0,0,0"))
                  (rule "Class_axiom_0_in_de_polyas_core3_open_cred_CredTool" (inst "seq=seq") (inst "i=i") (inst "str=str") (inst "seq_0=seq_0") (inst "i_0=i_0") (inst "sv_heap=heapAtPost_B"))
                  (rule "andLeft" (formula "1"))
                  (rule "castedGetAny" (formula "2") (term "0,1,1,0,0,0"))
                  (rule "castedGetAny" (formula "1") (term "0,0,1,0,0"))
                  (rule "castedGetAny" (formula "1") (term "0,0,0,0,0"))
                  (rule "applyEqRigid" (formula "2") (term "0,0,1,0,0,0,0,0") (ifseqformula "83"))
                  (rule "selectCreatedOfAnonAsFormulaEQ" (formula "2") (term "1,0,0,0,0,0") (ifseqformula "75"))
                  (rule "selectCreatedOfAnonAsFormulaEQ" (formula "2") (term "0,1,0,0,0,0,0") (ifseqformula "68"))
                  (rule "nnf_imp2or" (formula "1") (term "0,0"))
                   (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "9")))
                  (rule "true_left" (formula "1"))
                  (rule "nnf_imp2or" (formula "1") (term "0,0,0"))
                  (rule "nnf_imp2or" (formula "1") (term "1,0,0,0"))
                  (rule "nnf_notAnd" (formula "1") (term "0,0,0,0"))
                   (builtin "One Step Simplification" (formula "1"))
                  (rule "nnf_notOr" (formula "1") (term "0,0,0,0,0"))
                  (rule "nnf_notAnd" (formula "1") (term "0,1,0,0,0"))
                   (builtin "One Step Simplification" (formula "1"))
                  (rule "nnf_notOr" (formula "1") (term "1,0,0,0,0,0"))
                  (rule "nnf_notOr" (formula "1") (term "0,1,0,0,0,0,0"))
                  (rule "div_axiom" (formula "34") (term "0,1") (inst "quotient=quotient_0"))
                  (rule "polySimp_mulComm0" (formula "34") (term "0,1,0,1"))
                  (rule "polySimp_mulComm0" (formula "34") (term "0,2,1,1"))
                  (rule "polySimp_mulComm0" (formula "34") (term "1,1,1,1,1"))
                  (rule "polySimp_mulComm0" (formula "34") (term "0,1,1,1"))
                  (rule "commute_or" (formula "4") (term "0,0,0,0"))
                  (rule "shift_paren_or" (formula "5") (term "0,0,0,0"))
                  (rule "commute_and" (formula "6") (term "1,0,0,0"))
                  (rule "commute_or" (formula "6") (term "1,0,0,0,0,0"))
                  (rule "commute_or" (formula "4") (term "0,1,0,0,0"))
                  (rule "commute_and" (formula "5") (term "1,0,0,0"))
                  (rule "commute_or" (formula "3") (term "0,0,0,0"))
                  (rule "ifthenelse_split" (formula "8") (term "0"))
                  (branch " resultAtPost_226_B.<created>@anon_heap_mod«anonHeapFunction» = TRUE TRUE"
                     (rule "applyEqReverse" (formula "107") (term "1") (ifseqformula "9"))
                     (rule "hideAuxiliaryEq" (formula "9"))
                     (rule "replace_known_left" (formula "76") (term "0") (ifseqformula "8"))
                      (builtin "One Step Simplification" (formula "76"))
                     (rule "true_left" (formula "76"))
                     (rule "commute_or" (formula "3") (term "0,1,0,0,0"))
                     (rule "commute_or" (formula "2") (term "0,0,0,0"))
                     (rule "onlyCreatedObjectsAreReferenced" (formula "98") (term "0") (ifseqformula "56"))
                     (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "99"))
                      (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "62")))
                     (rule "true_left" (formula "1"))
                     (rule "onlyCreatedObjectsAreReferenced" (formula "14") (term "1,0") (ifseqformula "22"))
                     (rule "replace_known_right" (formula "14") (term "0") (ifseqformula "92"))
                      (builtin "One Step Simplification" (formula "14") (ifInst ""  (formula "15")))
                     (rule "true_left" (formula "14"))
                     (rule "onlyCreatedObjectsAreReferenced" (formula "27") (term "1,0") (ifseqformula "22"))
                     (rule "replace_known_right" (formula "27") (term "0") (ifseqformula "98"))
                      (builtin "One Step Simplification" (formula "27") (ifInst ""  (formula "28")))
                     (rule "true_left" (formula "27"))
                     (rule "onlyCreatedObjectsAreReferenced" (formula "31") (term "2") (ifseqformula "22"))
                     (rule "replace_known_right" (formula "31") (term "0") (ifseqformula "96"))
                      (builtin "One Step Simplification" (formula "31") (ifInst ""  (formula "16")))
                     (rule "true_left" (formula "31"))
                     (rule "onlyCreatedObjectsAreReferenced" (formula "14") (term "1,1,0") (ifseqformula "22"))
                     (rule "replace_known_right" (formula "14") (term "0") (ifseqformula "94"))
                      (builtin "One Step Simplification" (formula "14") (ifInst ""  (formula "16")))
                     (rule "true_left" (formula "14"))
                     (rule "onlyCreatedObjectsAreReferenced" (formula "49") (term "1,0") (ifseqformula "56"))
                     (rule "replace_known_right" (formula "49") (term "0") (ifseqformula "95"))
                      (builtin "One Step Simplification" (formula "49") (ifInst ""  (formula "50")))
                     (rule "true_left" (formula "49"))
                     (rule "onlyCreatedObjectsAreReferenced" (formula "48") (term "1,0") (ifseqformula "56"))
                     (rule "replace_known_right" (formula "48") (term "0") (ifseqformula "93"))
                      (builtin "One Step Simplification" (formula "48") (ifInst ""  (formula "49")))
                     (rule "true_left" (formula "48"))
                     (rule "onlyCreatedObjectsAreReferenced" (formula "63") (term "1,0") (ifseqformula "56"))
                     (rule "replace_known_right" (formula "63") (term "0") (ifseqformula "97"))
                      (builtin "One Step Simplification" (formula "63") (ifInst ""  (formula "50")))
                     (rule "true_left" (formula "63"))
                     (rule "commute_or" (formula "2") (term "0,1,0,0,0"))
                     (rule "commute_or" (formula "1") (term "0,0,0,0"))
                     (rule "commute_or" (formula "1") (term "0,1,0,0,0"))
                     (rule "commute_or_2" (formula "4") (term "0,0,0"))
                     (rule "commute_or_2" (formula "3") (term "0,0,0"))
                     (rule "commute_and" (formula "34") (term "0,1"))
                     (rule "commute_or_2" (formula "2") (term "0,0,0"))
                     (rule "commute_or_2" (formula "1") (term "0,0,0"))
                     (rule "commute_or" (formula "5") (term "1,0,0,0,0,0"))
                     (rule "shift_paren_or" (formula "6") (term "0,0,0,0,0"))
                      (builtin "One Step Simplification" (formula "6"))
                     (rule "commute_or_2" (formula "6") (term "0,0,0,0"))
                     (rule "shift_paren_or" (formula "4") (term "0,0,0,0"))
                     (rule "shift_paren_or" (formula "3") (term "0,0,0,0"))
                     (rule "commute_or_2" (formula "2") (term "1,0,0,0,0"))
                     (rule "commute_or_2" (formula "1") (term "1,0,0,0,0"))
                     (rule "shift_paren_or" (formula "2") (term "0,0,0,0"))
                     (rule "shift_paren_or" (formula "1") (term "0,0,0,0"))
                     (rule "cnf_rightDist" (formula "6") (term "0,0,0"))
                     (rule "distr_forallAnd" (formula "6") (term "0,0"))
                     (rule "distr_forallAnd" (formula "6") (term "0"))
                     (rule "distr_forallAnd" (formula "6"))
                     (rule "andLeft" (formula "6"))
                     (rule "commute_or_2" (formula "6") (term "0,0,0"))
                      (builtin "One Step Simplification" (formula "6"))
                     (rule "eqSymm" (formula "6") (term "1,0,0,0,0"))
                     (rule "castedGetAny" (formula "6") (term "0,0,0,0,0,0"))
                     (rule "castedGetAny" (formula "6") (term "1,0,0,1,0,0,0"))
                     (rule "castedGetAny" (formula "6") (term "0,1,0,0,0,0"))
                      (builtin "One Step Simplification" (formula "6"))
                     (rule "true_left" (formula "6"))
                     (rule "shift_paren_or" (formula "6") (term "0,0,0"))
                      (builtin "One Step Simplification" (formula "6"))
                     (rule "eqSymm" (formula "6") (term "1,1,0,0,0"))
                     (rule "castedGetAny" (formula "6") (term "0,0,1,0,0,0"))
                     (rule "castedGetAny" (formula "6") (term "0,0,0,0,0,0"))
                     (rule "castedGetAny" (formula "6") (term "0,1,1,0,0,0"))
                      (builtin "One Step Simplification" (formula "6"))
                     (rule "true_left" (formula "6"))
                     (rule "commute_and" (formula "4") (term "1,0,0,0"))
                     (rule "commute_and" (formula "3") (term "1,0,0,0"))
                     (rule "commute_and" (formula "2") (term "1,0,0,0"))
                     (rule "commute_and" (formula "1") (term "1,0,0,0"))
                     (rule "shift_paren_or" (formula "5") (term "0,0,0,0,0"))
                      (builtin "One Step Simplification" (formula "5"))
                     (rule "commute_or_2" (formula "5") (term "0,0,0,0"))
                     (rule "shift_paren_or" (formula "4") (term "0,0,0,0,0"))
                      (builtin "One Step Simplification" (formula "4"))
                     (rule "commute_or_2" (formula "4") (term "0,0,0,0"))
                     (rule "shift_paren_or" (formula "3") (term "0,0,0,0,0"))
                      (builtin "One Step Simplification" (formula "3"))
                     (rule "commute_or_2" (formula "3") (term "0,0,0,0"))
                     (rule "shift_paren_or" (formula "2") (term "0,0,0,0,0"))
                      (builtin "One Step Simplification" (formula "2"))
                     (rule "shift_paren_or" (formula "1") (term "0,0,0,0,0"))
                      (builtin "One Step Simplification" (formula "1"))
                     (rule "cnf_rightDist" (formula "5") (term "0,0,0"))
                     (rule "distr_forallAnd" (formula "5") (term "0,0"))
                     (rule "distr_forallAnd" (formula "5") (term "0"))
                     (rule "distr_forallAnd" (formula "5"))
                     (rule "andLeft" (formula "5"))
                     (rule "commute_or_2" (formula "5") (term "0,0,0"))
                      (builtin "One Step Simplification" (formula "5"))
                     (rule "eqSymm" (formula "5") (term "1,0,0,0,0"))
                     (rule "castedGetAny" (formula "5") (term "1,0,0,1,0,0,0"))
                     (rule "castedGetAny" (formula "5") (term "0,0,0,0,0,0"))
                     (rule "castedGetAny" (formula "5") (term "0,1,0,0,0,0"))
                      (builtin "One Step Simplification" (formula "5"))
                     (rule "true_left" (formula "5"))
                     (rule "shift_paren_or" (formula "5") (term "0,0,0"))
                      (builtin "One Step Simplification" (formula "5"))
                     (rule "eqSymm" (formula "5") (term "1,1,0,0,0"))
                     (rule "castedGetAny" (formula "5") (term "0,0,1,0,0,0"))
                     (rule "castedGetAny" (formula "5") (term "0,0,0,0,0,0"))
                     (rule "castedGetAny" (formula "5") (term "0,1,1,0,0,0"))
                      (builtin "One Step Simplification" (formula "5"))
                     (rule "true_left" (formula "5"))
                     (rule "cnf_rightDist" (formula "4") (term "0,0,0"))
                     (rule "distr_forallAnd" (formula "4") (term "0,0"))
                     (rule "distr_forallAnd" (formula "4") (term "0"))
                     (rule "distr_forallAnd" (formula "4"))
                     (rule "andLeft" (formula "4"))
                     (rule "cnf_rightDist" (formula "3") (term "0,0,0"))
                     (rule "distr_forallAnd" (formula "3") (term "0,0"))
                     (rule "distr_forallAnd" (formula "3") (term "0"))
                     (rule "distr_forallAnd" (formula "3"))
                     (rule "andLeft" (formula "3"))
                     (rule "shift_paren_or" (formula "5") (term "0,0,0"))
                      (builtin "One Step Simplification" (formula "5"))
                     (rule "eqSymm" (formula "5") (term "1,1,0,0,0"))
                     (rule "castedGetAny" (formula "5") (term "0,0,1,0,0,0"))
                     (rule "castedGetAny" (formula "5") (term "0,0,0,0,0,0"))
                     (rule "castedGetAny" (formula "5") (term "0,1,1,0,0,0"))
                      (builtin "One Step Simplification" (formula "5"))
                     (rule "true_left" (formula "5"))
                     (rule "cnf_rightDist" (formula "2") (term "0,0,0"))
                     (rule "distr_forallAnd" (formula "2") (term "0,0"))
                     (rule "distr_forallAnd" (formula "2") (term "0"))
                     (rule "distr_forallAnd" (formula "2"))
                     (rule "andLeft" (formula "2"))
                     (rule "cnf_rightDist" (formula "1") (term "0,0,0"))
                     (rule "distr_forallAnd" (formula "1") (term "0,0"))
                     (rule "distr_forallAnd" (formula "1") (term "0"))
                     (rule "distr_forallAnd" (formula "1"))
                     (rule "andLeft" (formula "1"))
                     (rule "shift_paren_or" (formula "3") (term "0,0,0"))
                      (builtin "One Step Simplification" (formula "3"))
                     (rule "eqSymm" (formula "3") (term "1,1,0,0,0"))
                     (rule "castedGetAny" (formula "3") (term "0,0,0,0,0,0"))
                     (rule "castedGetAny" (formula "3") (term "0,0,1,0,0,0"))
                     (rule "castedGetAny" (formula "3") (term "0,1,1,0,0,0"))
                      (builtin "One Step Simplification" (formula "3"))
                     (rule "true_left" (formula "3"))
                     (rule "cnf_rightDist" (formula "4") (term "0,0,0"))
                     (rule "distr_forallAnd" (formula "4") (term "0,0"))
                     (rule "distr_forallAnd" (formula "4") (term "0"))
                     (rule "distr_forallAnd" (formula "4"))
                     (rule "andLeft" (formula "4"))
                     (rule "commute_or_2" (formula "4") (term "0,0,0"))
                      (builtin "One Step Simplification" (formula "4"))
                     (rule "eqSymm" (formula "4") (term "1,0,0,0,0"))
                     (rule "castedGetAny" (formula "4") (term "0,0,0,0,0,0"))
                     (rule "castedGetAny" (formula "4") (term "1,0,0,1,0,0,0"))
                     (rule "castedGetAny" (formula "4") (term "0,1,0,0,0,0"))
                      (builtin "One Step Simplification" (formula "4"))
                     (rule "true_left" (formula "4"))
                     (rule "cnf_rightDist" (formula "3") (term "0,0,0"))
                     (rule "distr_forallAnd" (formula "3") (term "0,0"))
                     (rule "distr_forallAnd" (formula "3") (term "0"))
                     (rule "distr_forallAnd" (formula "3"))
                     (rule "andLeft" (formula "3"))
                     (rule "shift_paren_or" (formula "5") (term "0,0,0"))
                      (builtin "One Step Simplification" (formula "5"))
                     (rule "eqSymm" (formula "5") (term "1,1,0,0,0"))
                     (rule "castedGetAny" (formula "5") (term "0,0,1,0,0,0"))
                     (rule "castedGetAny" (formula "5") (term "1,0,0,0,0,0,0"))
                     (rule "castedGetAny" (formula "5") (term "0,1,1,0,0,0"))
                      (builtin "One Step Simplification" (formula "5"))
                     (rule "true_left" (formula "5"))
                     (rule "cnf_rightDist" (formula "2") (term "0,0,0"))
                     (rule "distr_forallAnd" (formula "2") (term "0,0"))
                     (rule "distr_forallAnd" (formula "2") (term "0"))
                     (rule "distr_forallAnd" (formula "2"))
                     (rule "andLeft" (formula "2"))
                     (rule "commute_or_2" (formula "2") (term "0,0,0"))
                      (builtin "One Step Simplification" (formula "2"))
                     (rule "eqSymm" (formula "2") (term "1,0,0,0,0"))
                     (rule "castedGetAny" (formula "2") (term "1,0,0,1,0,0,0"))
                     (rule "castedGetAny" (formula "2") (term "0,0,0,0,0,0"))
                     (rule "castedGetAny" (formula "2") (term "0,1,0,0,0,0"))
                      (builtin "One Step Simplification" (formula "2"))
                     (rule "true_left" (formula "2"))
                     (rule "shift_paren_or" (formula "4") (term "0,0,0"))
                      (builtin "One Step Simplification" (formula "4"))
                     (rule "eqSymm" (formula "4") (term "1,1,0,0,0"))
                     (rule "castedGetAny" (formula "4") (term "1,0,0,0,0,0,0"))
                     (rule "castedGetAny" (formula "4") (term "0,0,1,0,0,0"))
                     (rule "castedGetAny" (formula "4") (term "0,1,1,0,0,0"))
                      (builtin "One Step Simplification" (formula "4"))
                     (rule "true_left" (formula "4"))
                     (rule "cnf_rightDist" (formula "1") (term "0,0,0"))
                     (rule "distr_forallAnd" (formula "1") (term "0,0"))
                     (rule "distr_forallAnd" (formula "1") (term "0"))
                     (rule "distr_forallAnd" (formula "1"))
                     (rule "andLeft" (formula "1"))
                     (rule "shift_paren_or" (formula "3") (term "0,0,0"))
                      (builtin "One Step Simplification" (formula "3"))
                     (rule "eqSymm" (formula "3") (term "1,1,0,0,0"))
                     (rule "castedGetAny" (formula "3") (term "1,0,0,0,0,0,0"))
                     (rule "castedGetAny" (formula "3") (term "0,0,1,0,0,0"))
                     (rule "castedGetAny" (formula "3") (term "0,1,1,0,0,0"))
                      (builtin "One Step Simplification" (formula "3"))
                     (rule "true_left" (formula "3"))
                     (rule "ifthenelse_split_for" (formula "31") (term "1,1"))
                     (branch "result_228_A_1.value@heapAtPre_A«anonHeapFunction» ≥ 0 TRUE"
                        (rule "cnf_rightDist" (formula "32"))
                        (rule "andLeft" (formula "32"))
                        (rule "commute_or" (formula "33"))
                        (rule "cnf_rightDist" (formula "32"))
                        (rule "andLeft" (formula "32"))
                        (rule "commute_or" (formula "33"))
                        (rule "cnf_rightDist" (formula "3") (term "0,0,0"))
                        (rule "distr_forallAnd" (formula "3") (term "0,0"))
                        (rule "distr_forallAnd" (formula "3") (term "0"))
                        (rule "distr_forallAnd" (formula "3"))
                        (rule "andLeft" (formula "3"))
                        (rule "commute_or_2" (formula "3") (term "0,0,0"))
                         (builtin "One Step Simplification" (formula "3"))
                        (rule "eqSymm" (formula "3") (term "1,0,0,0,0"))
                        (rule "castedGetAny" (formula "3") (term "1,0,0,1,0,0,0"))
                        (rule "castedGetAny" (formula "3") (term "0,0,0,0,0,0"))
                        (rule "castedGetAny" (formula "3") (term "0,1,0,0,0,0"))
                         (builtin "One Step Simplification" (formula "3"))
                        (rule "true_left" (formula "3"))
                        (rule "shift_paren_or" (formula "2") (term "0,0,0"))
                         (builtin "One Step Simplification" (formula "2"))
                        (rule "eqSymm" (formula "2") (term "1,1,0,0,0"))
                        (rule "castedGetAny" (formula "2") (term "0,0,1,0,0,0"))
                        (rule "castedGetAny" (formula "2") (term "1,0,0,0,0,0,0"))
                        (rule "castedGetAny" (formula "2") (term "0,1,1,0,0,0"))
                         (builtin "One Step Simplification" (formula "2"))
                        (rule "true_left" (formula "2"))
                        (rule "shift_paren_or" (formula "2") (term "0,0,0"))
                         (builtin "One Step Simplification" (formula "2"))
                        (rule "eqSymm" (formula "2") (term "1,1,0,0,0"))
                        (rule "castedGetAny" (formula "2") (term "1,0,0,0,0,0,0"))
                        (rule "castedGetAny" (formula "2") (term "0,0,1,0,0,0"))
                        (rule "castedGetAny" (formula "2") (term "0,1,1,0,0,0"))
                         (builtin "One Step Simplification" (formula "2"))
                        (rule "true_left" (formula "2"))
                        (rule "cnf_rightDist" (formula "1") (term "0,0,0"))
                        (rule "distr_forallAnd" (formula "1") (term "0,0"))
                        (rule "distr_forallAnd" (formula "1") (term "0"))
                        (rule "distr_forallAnd" (formula "1"))
                        (rule "andLeft" (formula "1"))
                        (rule "commute_or_2" (formula "1") (term "0,0,0"))
                         (builtin "One Step Simplification" (formula "1"))
                        (rule "eqSymm" (formula "1") (term "1,0,0,0,0"))
                        (rule "castedGetAny" (formula "1") (term "0,0,0,0,0,0"))
                        (rule "castedGetAny" (formula "1") (term "1,0,0,1,0,0,0"))
                        (rule "castedGetAny" (formula "1") (term "0,1,0,0,0,0"))
                         (builtin "One Step Simplification" (formula "1"))
                        (rule "true_left" (formula "1"))
                        (rule "shift_paren_or" (formula "1") (term "0,0,0"))
                         (builtin "One Step Simplification" (formula "1"))
                        (rule "eqSymm" (formula "1") (term "1,1,0,0,0"))
                        (rule "castedGetAny" (formula "1") (term "1,0,0,0,0,0,0"))
                        (rule "castedGetAny" (formula "1") (term "0,0,1,0,0,0"))
                        (rule "castedGetAny" (formula "1") (term "0,1,1,0,0,0"))
                         (builtin "One Step Simplification" (formula "1"))
                        (rule "true_left" (formula "1"))
                        (rule "cut_direct" (formula "29") (term "0"))
                        (branch "CUT: result_228_A_1.value@heapAtPre_A«anonHeapFunction» = 0 TRUE"
                            (builtin "One Step Simplification" (formula "30"))
                           (rule "true_left" (formula "30"))
                           (rule "replace_known_left" (formula "30") (term "0") (ifseqformula "29"))
                            (builtin "One Step Simplification" (formula "30"))
                           (rule "true_left" (formula "30"))
                           (rule "replace_known_left" (formula "30") (term "0") (ifseqformula "29"))
                            (builtin "One Step Simplification" (formula "30"))
                           (rule "true_left" (formula "30"))
                           (rule "applyEq" (formula "31") (term "1,0") (ifseqformula "29"))
                           (rule "times_zero_1" (formula "31") (term "0"))
                           (rule "polySimp_homoEq" (formula "31"))
                           (rule "mul_literals" (formula "31") (term "1,0"))
                           (rule "add_zero_right" (formula "31") (term "0"))
                           (rule "applyEq" (formula "30") (term "1,0") (ifseqformula "29"))
                           (rule "eqSymm" (formula "30"))
                           (rule "polySimp_homoEq" (formula "30"))
                           (rule "polySimp_mulLiterals" (formula "30") (term "1,0"))
                           (rule "polySimp_elimOne" (formula "30") (term "1,0"))
                           (rule "applyEq" (formula "28") (term "0") (ifseqformula "29"))
                           (rule "qeq_literals" (formula "28"))
                           (rule "true_left" (formula "28"))
                           (rule "applyEq" (formula "57") (term "1") (ifseqformula "28"))
                           (rule "applyEq" (formula "23") (term "1") (ifseqformula "28"))
                           (rule "applyEq" (formula "7") (term "1") (ifseqformula "28"))
                           (rule "applyEq" (formula "29") (term "1,1,0") (ifseqformula "28"))
                           (rule "polySimp_addComm0" (formula "29") (term "0"))
                           (rule "polySimp_sepNegMonomial" (formula "30"))
                           (rule "polySimp_mulLiterals" (formula "30") (term "0"))
                           (rule "polySimp_elimOne" (formula "30") (term "0"))
                           (rule "applyEq" (formula "29") (term "0,1,0") (ifseqformula "30"))
                           (rule "polySimp_addComm0" (formula "29") (term "0"))
                           (rule "applyEq" (formula "4") (term "0") (ifseqformula "30"))
                           (rule "applyEq" (formula "29") (term "0,0,1,0") (ifseqformula "30"))
                           (rule "polySimp_addComm0" (formula "29") (term "0"))
                           (rule "applyEq" (formula "6") (term "1") (ifseqformula "30"))
                           (rule "polySimp_sepPosMonomial" (formula "29"))
                           (rule "jdiv_axiom" (formula "29") (term "0"))
                           (rule "eqSymm" (formula "29"))
                           (rule "applyEq" (formula "29") (term "1") (ifseqformula "30"))
                            (builtin "One Step Simplification" (formula "29"))
                           (rule "eqSymm" (formula "29") (term "1"))
                           (rule "polySimp_homoEq" (formula "29") (term "1"))
                           (rule "polySimp_mulLiterals" (formula "29") (term "1,0,1"))
                           (rule "polySimp_elimOne" (formula "29") (term "1,0,1"))
                           (rule "polySimp_sepPosMonomial" (formula "29") (term "1"))
                           (rule "inEqSimp_contradInEq0" (formula "29") (term "0,0") (ifseqformula "4"))
                           (rule "qeq_literals" (formula "29") (term "0,0,0"))
                            (builtin "One Step Simplification" (formula "29"))
                           (rule "true_left" (formula "29"))
                           (rule "div_axiom" (formula "29") (term "0,1") (inst "quotient=quotient_1"))
                            (builtin "One Step Simplification" (formula "29"))
                           (rule "true_left" (formula "29"))
                           (rule "Use_information_flow_contract_for_compareTo_325434207" (formula "19") (ifseqformula "19"))
                            (builtin "One Step Simplification" (formula "19") (ifInst ""  (formula "92")) (ifInst ""  (formula "92")))
                           (rule "true_left" (formula "19"))
                           (rule "Use_information_flow_contract_for_getOrder_757678341" (formula "59") (ifseqformula "25"))
                           (rule "applyEq" (formula "59") (term "0,1,1") (ifseqformula "7"))
                           (rule "eqSymm" (formula "59") (term "1,1"))
                           (rule "replace_known_left" (formula "59") (term "1,1") (ifseqformula "28"))
                            (builtin "One Step Simplification" (formula "59"))
                           (rule "true_left" (formula "59"))
                           (rule "Use_information_flow_contract_for_getOrder_757678341" (formula "59") (ifseqformula "59"))
                            (builtin "One Step Simplification" (formula "59"))
                           (rule "true_left" (formula "59"))
                           (rule "Use_information_flow_contract_for_getOrder_757678341" (formula "25") (ifseqformula "25"))
                            (builtin "One Step Simplification" (formula "25"))
                           (rule "true_left" (formula "25"))
                           (rule "Use_information_flow_contract_for_compareTo_325434207" (formula "19") (ifseqformula "53"))
                           (rule "eqSymm" (formula "19") (term "1,1"))
                           (rule "eqSymm" (formula "19") (term "0,0,1"))
                           (rule "eqSymm" (formula "19") (term "1,0,1"))
                           (rule "replace_known_right" (formula "19") (term "0,1,1,0") (ifseqformula "93"))
                            (builtin "One Step Simplification" (formula "19") (ifInst ""  (formula "92")))
                           (rule "applyEqRigid" (formula "19") (term "0,1,0,1") (ifseqformula "55"))
                           (rule "eqSymm" (formula "19") (term "1,0,1"))
                           (rule "replace_known_left" (formula "19") (term "1,0,1") (ifseqformula "21"))
                            (builtin "One Step Simplification" (formula "19"))
                           (rule "applyEq" (formula "19") (term "0,0,1") (ifseqformula "6"))
                           (rule "eqSymm" (formula "19") (term "0,1"))
                           (rule "replace_known_left" (formula "19") (term "0,1") (ifseqformula "31"))
                            (builtin "One Step Simplification" (formula "19"))
                           (rule "Class_invariant_axiom_for_java_math_BigInteger" (formula "19") (term "1,0"))
                           (rule "replace_known_right" (formula "19") (term "0,0,1,0") (ifseqformula "93"))
                            (builtin "One Step Simplification" (formula "19") (ifInst ""  (formula "55")))
                           (rule "Class_invariant_axiom_for_java_math_BigInteger" (formula "19") (term "0"))
                           (rule "replace_known_right" (formula "19") (term "0,0,0") (ifseqformula "92"))
                            (builtin "One Step Simplification" (formula "19") (ifInst ""  (formula "21")))
                           (rule "applyEq" (formula "54") (term "4") (ifseqformula "19"))
                           (rule "applyEq" (formula "46") (term "0") (ifseqformula "19"))
                           (rule "applyEq" (formula "52") (term "0") (ifseqformula "19"))
                           (rule "Use_information_flow_contract_for_multiply_1272441881_0" (formula "69") (ifseqformula "37"))
                           (rule "replaceKnownSelect_taclet21_11" (formula "69") (term "1,1,1"))
                           (rule "replaceKnownSelect_taclet21_12" (formula "69") (term "0,1,1"))
                           (rule "replaceKnownAuxiliaryConstant_taclet01121_17" (formula "69") (term "1,1,1"))
                           (rule "replaceKnownAuxiliaryConstant_taclet0101121_19" (formula "69") (term "0,1,1"))
                           (rule "replaceKnownSelect_taclet21_9" (formula "69") (term "0,1,0,1"))
                           (rule "replaceKnownSelect_taclet21_8" (formula "69") (term "1,1,0,1"))
                           (rule "replaceKnownAuxiliaryConstant_taclet121_15" (formula "69") (term "0,1,0,1"))
                           (rule "replaceKnownAuxiliaryConstant_taclet21_10" (formula "69") (term "1,1,0,1"))
                           (rule "replaceKnownAuxiliaryConstant_taclet121_15" (formula "69") (term "1,1,0,1"))
                            (builtin "One Step Simplification" (formula "69") (ifInst ""  (formula "82")) (ifInst ""  (formula "81")))
                           (rule "eqSymm" (formula "69") (term "1,1"))
                           (rule "replace_known_right" (formula "69") (term "1,1") (ifseqformula "99"))
                            (builtin "One Step Simplification" (formula "69"))
                           (rule "pullOutSelect" (formula "69") (term "1,0,1") (inst "selectSK=org_bouncycastle_math_ec_ECPoint_value_4"))
                           (rule "simplifySelectOfAnonEQ" (formula "69") (ifseqformula "27"))
                            (builtin "One Step Simplification" (formula "69") (ifInst ""  (formula "96")) (ifInst ""  (formula "14")))
                           (rule "applyEqReverse" (formula "70") (term "1,0,1") (ifseqformula "69"))
                           (rule "hideAuxiliaryEq" (formula "69"))
                           (rule "pullOutSelect" (formula "69") (term "0,0,1") (inst "selectSK=org_bouncycastle_math_ec_ECPoint_value_5"))
                           (rule "simplifySelectOfAnonEQ" (formula "69") (ifseqformula "60"))
                            (builtin "One Step Simplification" (formula "69") (ifInst ""  (formula "97")) (ifInst ""  (formula "48")))
                           (rule "applyEqReverse" (formula "70") (term "0,0,1") (ifseqformula "69"))
                           (rule "hideAuxiliaryEq" (formula "69"))
                           (rule "replace_known_left" (formula "69") (term "0,1") (ifseqformula "5"))
                            (builtin "One Step Simplification" (formula "69"))
                           (rule "notLeft" (formula "69"))
                           (rule "Class_invariant_axiom_for_org_bouncycastle_math_ec_ECPoint" (formula "75") (term "1"))
                            (builtin "One Step Simplification" (formula "75"))
                           (rule "Class_invariant_axiom_for_org_bouncycastle_math_ec_ECPoint" (formula "75"))
                           (rule "closeTrue" (formula "75"))
                        )
                        (branch "CUT: result_228_A_1.value@heapAtPre_A«anonHeapFunction» = 0 FALSE"
                            (builtin "One Step Simplification" (formula "29"))
                           (rule "replace_known_right" (formula "31") (term "0") (ifseqformula "79"))
                            (builtin "One Step Simplification" (formula "31"))
                           (rule "replace_known_right" (formula "30") (term "0") (ifseqformula "79"))
                            (builtin "One Step Simplification" (formula "30"))
                           (rule "applyEq" (formula "33") (term "0,0") (ifseqformula "30"))
                           (rule "polySimp_mulComm0" (formula "33") (term "0"))
                           (rule "applyEq" (formula "31") (term "0") (ifseqformula "33"))
                           (rule "inEqSimp_homoInEq1" (formula "31"))
                           (rule "polySimp_mulComm0" (formula "31") (term "1,0"))
                           (rule "polySimp_rightDist" (formula "31") (term "1,0"))
                           (rule "polySimp_mulLiterals" (formula "31") (term "1,1,0"))
                           (rule "polySimp_elimOne" (formula "31") (term "1,1,0"))
                           (rule "polySimp_mulComm0" (formula "31") (term "0,1,0"))
                           (rule "polySimp_addComm1" (formula "31") (term "0"))
                           (rule "polySimp_addAssoc" (formula "31") (term "0,0"))
                           (rule "polySimp_addComm1" (formula "31") (term "0,0,0"))
                           (rule "polySimp_pullOutFactor2b" (formula "31") (term "0,0"))
                           (rule "add_literals" (formula "31") (term "1,1,0,0"))
                           (rule "times_zero_1" (formula "31") (term "1,0,0"))
                           (rule "add_zero_right" (formula "31") (term "0,0"))
                           (rule "applyEq" (formula "29") (term "0") (ifseqformula "33"))
                           (rule "inEqSimp_homoInEq0" (formula "29"))
                           (rule "polySimp_mulComm0" (formula "29") (term "1,0"))
                           (rule "polySimp_rightDist" (formula "29") (term "1,0"))
                           (rule "polySimp_mulLiterals" (formula "29") (term "1,1,0"))
                           (rule "polySimp_elimOne" (formula "29") (term "1,1,0"))
                           (rule "polySimp_mulComm0" (formula "29") (term "0,1,0"))
                           (rule "polySimp_addAssoc" (formula "29") (term "0"))
                           (rule "polySimp_addComm0" (formula "29") (term "0,0"))
                           (rule "polySimp_pullOutFactor2b" (formula "29") (term "0"))
                           (rule "add_literals" (formula "29") (term "1,1,0"))
                           (rule "times_zero_1" (formula "29") (term "1,0"))
                           (rule "add_zero_right" (formula "29") (term "0"))
                           (rule "applyEq" (formula "32") (term "0,1") (ifseqformula "30"))
                           (rule "inEqSimp_sepNegMonomial0" (formula "31"))
                           (rule "polySimp_mulLiterals" (formula "31") (term "0"))
                           (rule "polySimp_elimOne" (formula "31") (term "0"))
                           (rule "inEqSimp_invertInEq1" (formula "29"))
                           (rule "polySimp_mulLiterals" (formula "29") (term "0"))
                           (rule "mul_literals" (formula "29") (term "1"))
                           (rule "polySimp_elimOne" (formula "29") (term "0"))
                           (rule "inEqSimp_strengthen1" (formula "28") (ifseqformula "79"))
                           (rule "add_literals" (formula "28") (term "1"))
                           (rule "inEqSimp_contradEq7" (formula "79") (ifseqformula "28"))
                           (rule "mul_literals" (formula "79") (term "1,0,0"))
                           (rule "add_zero_right" (formula "79") (term "0,0"))
                           (rule "leq_literals" (formula "79") (term "0"))
                            (builtin "One Step Simplification" (formula "79"))
                           (rule "false_right" (formula "79"))
                           (rule "Use_information_flow_contract_for_compareTo_325434207" (formula "19") (ifseqformula "19"))
                            (builtin "One Step Simplification" (formula "19") (ifInst ""  (formula "95")) (ifInst ""  (formula "95")))
                           (rule "true_left" (formula "19"))
                           (rule "Use_information_flow_contract_for_getOrder_757678341" (formula "62") (ifseqformula "25"))
                           (rule "replace_known_left" (formula "62") (term "1,1") (ifseqformula "7"))
                            (builtin "One Step Simplification" (formula "62"))
                           (rule "true_left" (formula "62"))
                           (rule "Use_information_flow_contract_for_getOrder_757678341" (formula "62") (ifseqformula "62"))
                            (builtin "One Step Simplification" (formula "62"))
                           (rule "true_left" (formula "62"))
                           (rule "Use_information_flow_contract_for_getOrder_757678341" (formula "25") (ifseqformula "25"))
                            (builtin "One Step Simplification" (formula "25"))
                           (rule "true_left" (formula "25"))
                           (rule "Use_information_flow_contract_for_compareTo_325434207" (formula "19") (ifseqformula "56"))
                           (rule "eqSymm" (formula "19") (term "1,0,1"))
                           (rule "eqSymm" (formula "19") (term "1,1"))
                           (rule "eqSymm" (formula "19") (term "0,0,1"))
                           (rule "replace_known_right" (formula "19") (term "0,1,1,0") (ifseqformula "96"))
                            (builtin "One Step Simplification" (formula "19") (ifInst ""  (formula "95")) (ifInst ""  (formula "6")))
                           (rule "applyEq" (formula "19") (term "0,0,1") (ifseqformula "58"))
                           (rule "eqSymm" (formula "19") (term "0,1"))
                           (rule "replace_known_left" (formula "19") (term "0,1") (ifseqformula "21"))
                            (builtin "One Step Simplification" (formula "19"))
                           (rule "Class_invariant_axiom_for_java_math_BigInteger" (formula "19") (term "1,0"))
                           (rule "replace_known_left" (formula "19") (term "1,1,0") (ifseqformula "58"))
                            (builtin "One Step Simplification" (formula "19") (ifInst ""  (formula "96")))
                           (rule "Class_invariant_axiom_for_java_math_BigInteger" (formula "19") (term "0"))
                           (rule "replace_known_right" (formula "19") (term "0,0,0") (ifseqformula "95"))
                            (builtin "One Step Simplification" (formula "19") (ifInst ""  (formula "21")))
                           (rule "applyEq" (formula "56") (term "0") (ifseqformula "19"))
                           (rule "applyEq" (formula "49") (term "0") (ifseqformula "19"))
                           (rule "applyEq" (formula "55") (term "4") (ifseqformula "19"))
                           (rule "Use_information_flow_contract_for_multiply_1272441881_0" (formula "72") (ifseqformula "40"))
                           (rule "replaceKnownSelect_taclet21_12" (formula "72") (term "0,1,1"))
                           (rule "replaceKnownSelect_taclet21_11" (formula "72") (term "1,1,1"))
                           (rule "replaceKnownAuxiliaryConstant_taclet0101121_19" (formula "72") (term "0,1,1"))
                           (rule "replaceKnownAuxiliaryConstant_taclet01121_17" (formula "72") (term "1,1,1"))
                           (rule "replaceKnownSelect_taclet21_9" (formula "72") (term "0,1,0,1"))
                           (rule "replaceKnownSelect_taclet21_8" (formula "72") (term "1,1,0,1"))
                           (rule "replaceKnownAuxiliaryConstant_taclet121_15" (formula "72") (term "0,1,0,1"))
                           (rule "replaceKnownAuxiliaryConstant_taclet21_10" (formula "72") (term "1,1,0,1"))
                           (rule "replaceKnownAuxiliaryConstant_taclet121_15" (formula "72") (term "1,1,0,1"))
                            (builtin "One Step Simplification" (formula "72") (ifInst ""  (formula "85")) (ifInst ""  (formula "84")))
                           (rule "eqSymm" (formula "72") (term "1,1"))
                           (rule "replace_known_right" (formula "72") (term "1,1") (ifseqformula "102"))
                            (builtin "One Step Simplification" (formula "72"))
                           (rule "pullOutSelect" (formula "72") (term "0,0,1") (inst "selectSK=org_bouncycastle_math_ec_ECPoint_value_4"))
                           (rule "simplifySelectOfAnonEQ" (formula "72") (ifseqformula "63"))
                            (builtin "One Step Simplification" (formula "72") (ifInst ""  (formula "100")) (ifInst ""  (formula "51")))
                           (rule "applyEqReverse" (formula "73") (term "0,0,1") (ifseqformula "72"))
                           (rule "hideAuxiliaryEq" (formula "72"))
                           (rule "eqSymm" (formula "72") (term "0,1"))
                           (rule "applyEq" (formula "72") (term "1,0,1") (ifseqformula "5"))
                           (rule "pullOutSelect" (formula "72") (term "0,0,1") (inst "selectSK=org_bouncycastle_math_ec_ECPoint_value_5"))
                           (rule "simplifySelectOfAnonEQ" (formula "72") (ifseqformula "27"))
                            (builtin "One Step Simplification" (formula "72") (ifInst ""  (formula "99")) (ifInst ""  (formula "14")))
                           (rule "applyEqReverse" (formula "73") (term "0,0,1") (ifseqformula "72"))
                            (builtin "One Step Simplification" (formula "73"))
                           (rule "notLeft" (formula "73"))
                           (rule "hideAuxiliaryEq" (formula "72"))
                           (rule "Class_invariant_axiom_for_org_bouncycastle_math_ec_ECPoint" (formula "78") (term "0"))
                            (builtin "One Step Simplification" (formula "78"))
                           (rule "Class_invariant_axiom_for_org_bouncycastle_math_ec_ECPoint" (formula "78"))
                           (rule "closeTrue" (formula "78"))
                        )
                     )
                     (branch "result_228_A_1.value@heapAtPre_A«anonHeapFunction» ≥ 0 FALSE"
                        (rule "inEqSimp_geqRight" (formula "79"))
                        (rule "mul_literals" (formula "1") (term "1,0,0"))
                        (rule "add_zero_right" (formula "1") (term "0,0"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "1"))
                        (rule "mul_literals" (formula "1") (term "1"))
                        (rule "inEqSimp_contradEq3" (formula "32") (term "0") (ifseqformula "1"))
                        (rule "mul_literals" (formula "32") (term "1,0,0,0"))
                        (rule "add_zero_right" (formula "32") (term "0,0,0"))
                        (rule "qeq_literals" (formula "32") (term "0,0"))
                         (builtin "One Step Simplification" (formula "32"))
                        (rule "andLeft" (formula "32"))
                        (rule "andLeft" (formula "32"))
                        (rule "applyEq" (formula "36") (term "0,0") (ifseqformula "33"))
                        (rule "polySimp_mulComm0" (formula "36") (term "0"))
                        (rule "applyEq" (formula "34") (term "0") (ifseqformula "36"))
                        (rule "inEqSimp_homoInEq1" (formula "34"))
                        (rule "polySimp_mulComm0" (formula "34") (term "1,0"))
                        (rule "polySimp_rightDist" (formula "34") (term "1,0"))
                        (rule "polySimp_mulLiterals" (formula "34") (term "1,1,0"))
                        (rule "polySimp_elimOne" (formula "34") (term "1,1,0"))
                        (rule "polySimp_mulComm0" (formula "34") (term "0,1,0"))
                        (rule "polySimp_addComm1" (formula "34") (term "0"))
                        (rule "polySimp_addAssoc" (formula "34") (term "0,0"))
                        (rule "polySimp_addComm1" (formula "34") (term "0,0,0"))
                        (rule "polySimp_pullOutFactor2b" (formula "34") (term "0,0"))
                        (rule "add_literals" (formula "34") (term "1,1,0,0"))
                        (rule "times_zero_1" (formula "34") (term "1,0,0"))
                        (rule "add_zero_right" (formula "34") (term "0,0"))
                        (rule "applyEq" (formula "32") (term "0") (ifseqformula "36"))
                        (rule "inEqSimp_homoInEq0" (formula "32"))
                        (rule "polySimp_mulComm0" (formula "32") (term "1,0"))
                        (rule "polySimp_rightDist" (formula "32") (term "1,0"))
                        (rule "polySimp_mulLiterals" (formula "32") (term "1,1,0"))
                        (rule "polySimp_elimOne" (formula "32") (term "1,1,0"))
                        (rule "polySimp_mulComm0" (formula "32") (term "0,1,0"))
                        (rule "polySimp_addAssoc" (formula "32") (term "0"))
                        (rule "polySimp_addComm0" (formula "32") (term "0,0"))
                        (rule "polySimp_pullOutFactor2b" (formula "32") (term "0"))
                        (rule "add_literals" (formula "32") (term "1,1,0"))
                        (rule "times_zero_1" (formula "32") (term "1,0"))
                        (rule "add_zero_right" (formula "32") (term "0"))
                        (rule "applyEq" (formula "35") (term "0,1") (ifseqformula "33"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "34"))
                        (rule "polySimp_mulComm0" (formula "34") (term "1"))
                        (rule "polySimp_rightDist" (formula "34") (term "1"))
                        (rule "mul_literals" (formula "34") (term "0,1"))
                        (rule "polySimp_mulLiterals" (formula "34") (term "1,1"))
                        (rule "polySimp_elimOne" (formula "34") (term "1,1"))
                        (rule "inEqSimp_invertInEq1" (formula "32"))
                        (rule "mul_literals" (formula "32") (term "1"))
                        (rule "polySimp_mulLiterals" (formula "32") (term "0"))
                        (rule "polySimp_elimOne" (formula "32") (term "0"))
                        (rule "cnf_rightDist" (formula "4") (term "0,0,0"))
                        (rule "distr_forallAnd" (formula "4") (term "0,0"))
                        (rule "distr_forallAnd" (formula "4") (term "0"))
                        (rule "distr_forallAnd" (formula "4"))
                        (rule "andLeft" (formula "4"))
                        (rule "shift_paren_or" (formula "3") (term "0,0,0"))
                         (builtin "One Step Simplification" (formula "3"))
                        (rule "eqSymm" (formula "3") (term "1,1,0,0,0"))
                        (rule "castedGetAny" (formula "3") (term "1,0,0,0,0,0,0"))
                        (rule "castedGetAny" (formula "3") (term "0,0,1,0,0,0"))
                        (rule "castedGetAny" (formula "3") (term "0,1,1,0,0,0"))
                         (builtin "One Step Simplification" (formula "3"))
                        (rule "true_left" (formula "3"))
                        (rule "cnf_rightDist" (formula "2") (term "0,0,0"))
                        (rule "distr_forallAnd" (formula "2") (term "0,0"))
                        (rule "distr_forallAnd" (formula "2") (term "0"))
                        (rule "distr_forallAnd" (formula "2"))
                        (rule "andLeft" (formula "2"))
                        (rule "commute_or_2" (formula "3") (term "0,0,0"))
                         (builtin "One Step Simplification" (formula "3"))
                        (rule "eqSymm" (formula "3") (term "1,0,0,0,0"))
                        (rule "castedGetAny" (formula "3") (term "1,0,0,1,0,0,0"))
                        (rule "castedGetAny" (formula "3") (term "0,0,0,0,0,0"))
                        (rule "castedGetAny" (formula "3") (term "0,1,0,0,0,0"))
                         (builtin "One Step Simplification" (formula "3"))
                        (rule "true_left" (formula "3"))
                        (rule "commute_or_2" (formula "2") (term "0,0,0"))
                         (builtin "One Step Simplification" (formula "2"))
                        (rule "eqSymm" (formula "2") (term "1,0,0,0,0"))
                        (rule "castedGetAny" (formula "2") (term "1,0,0,1,0,0,0"))
                        (rule "castedGetAny" (formula "2") (term "0,0,0,0,0,0"))
                        (rule "castedGetAny" (formula "2") (term "0,1,0,0,0,0"))
                         (builtin "One Step Simplification" (formula "2"))
                        (rule "true_left" (formula "2"))
                        (rule "shift_paren_or" (formula "2") (term "0,0,0"))
                         (builtin "One Step Simplification" (formula "2"))
                        (rule "eqSymm" (formula "2") (term "1,1,0,0,0"))
                        (rule "castedGetAny" (formula "2") (term "1,0,0,0,0,0,0"))
                        (rule "castedGetAny" (formula "2") (term "0,0,1,0,0,0"))
                        (rule "castedGetAny" (formula "2") (term "0,1,1,0,0,0"))
                         (builtin "One Step Simplification" (formula "2"))
                        (rule "true_left" (formula "2"))
                        (rule "Use_information_flow_contract_for_compareTo_325434207" (formula "20") (ifseqformula "20"))
                         (builtin "One Step Simplification" (formula "20") (ifInst ""  (formula "95")) (ifInst ""  (formula "95")))
                        (rule "true_left" (formula "20"))
                        (rule "Use_information_flow_contract_for_getOrder_757678341" (formula "62") (ifseqformula "26"))
                        (rule "replace_known_left" (formula "62") (term "1,1") (ifseqformula "8"))
                         (builtin "One Step Simplification" (formula "62"))
                        (rule "true_left" (formula "62"))
                        (rule "Use_information_flow_contract_for_multiply_1272441881" (formula "73") (ifseqformula "39"))
                        (rule "replaceKnownSelect_taclet21_11" (formula "73") (term "1,1,1"))
                        (rule "replaceKnownSelect_taclet21_12" (formula "73") (term "0,1,1"))
                        (rule "replaceKnownAuxiliaryConstant_taclet01121_17" (formula "73") (term "1,1,1"))
                        (rule "replaceKnownAuxiliaryConstant_taclet0101121_19" (formula "73") (term "0,1,1"))
                        (rule "replaceKnownSelect_taclet21_8" (formula "73") (term "1,1,0,1"))
                        (rule "replaceKnownSelect_taclet21_9" (formula "73") (term "0,1,0,1"))
                        (rule "replaceKnownAuxiliaryConstant_taclet21_10" (formula "73") (term "1,1,0,1"))
                         (builtin "One Step Simplification" (formula "73") (ifInst ""  (formula "86")) (ifInst ""  (formula "85")))
                        (rule "eqSymm" (formula "73") (term "1,1"))
                        (rule "replace_known_right" (formula "73") (term "1,1") (ifseqformula "103"))
                         (builtin "One Step Simplification" (formula "73"))
                        (rule "pullOutSelect" (formula "73") (term "1,0,1") (inst "selectSK=org_bouncycastle_math_ec_ECPoint_value_4"))
                        (rule "simplifySelectOfAnonEQ" (formula "73") (ifseqformula "27"))
                         (builtin "One Step Simplification" (formula "73") (ifInst ""  (formula "100")) (ifInst ""  (formula "15")))
                        (rule "applyEqReverse" (formula "74") (term "1,0,1") (ifseqformula "73"))
                        (rule "hideAuxiliaryEq" (formula "73"))
                        (rule "pullOutSelect" (formula "73") (term "0,0,1") (inst "selectSK=org_bouncycastle_math_ec_ECPoint_value_5"))
                        (rule "simplifySelectOfAnonEQ" (formula "73") (ifseqformula "64"))
                         (builtin "One Step Simplification" (formula "73") (ifInst ""  (formula "101")) (ifInst ""  (formula "51")))
                        (rule "applyEqReverse" (formula "74") (term "0,0,1") (ifseqformula "73"))
                        (rule "hideAuxiliaryEq" (formula "73"))
                        (rule "replace_known_left" (formula "73") (term "0,1") (ifseqformula "6"))
                         (builtin "One Step Simplification" (formula "73"))
                        (rule "notLeft" (formula "73"))
                        (rule "Class_invariant_axiom_for_org_bouncycastle_math_ec_ECPoint" (formula "79") (term "0"))
                         (builtin "One Step Simplification" (formula "79"))
                        (rule "Class_invariant_axiom_for_org_bouncycastle_math_ec_ECPoint" (formula "79"))
                        (rule "closeTrue" (formula "79"))
                     )
                  )
                  (branch " resultAtPost_226_B.<created>@anon_heap_mod«anonHeapFunction» = TRUE FALSE"
                     (rule "applyEqReverse" (formula "107") (term "1") (ifseqformula "8"))
                     (rule "hideAuxiliaryEq" (formula "8"))
                     (rule "replace_known_right" (formula "75") (term "0") (ifseqformula "82"))
                      (builtin "One Step Simplification" (formula "75"))
                     (rule "commute_or" (formula "3") (term "0,1,0,0,0"))
                     (rule "commute_or" (formula "2") (term "0,0,0,0"))
                     (rule "onlyCreatedObjectsAreReferenced" (formula "13") (term "1,0") (ifseqformula "21"))
                     (rule "replace_known_right" (formula "13") (term "0") (ifseqformula "93"))
                      (builtin "One Step Simplification" (formula "13") (ifInst ""  (formula "14")))
                     (rule "true_left" (formula "13"))
                     (rule "onlyCreatedObjectsAreReferenced" (formula "95") (term "0") (ifseqformula "55"))
                     (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "96"))
                      (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "49")))
                     (rule "true_left" (formula "1"))
                     (rule "onlyCreatedObjectsAreReferenced" (formula "30") (term "0") (ifseqformula "21"))
                     (rule "replace_known_right" (formula "30") (term "0") (ifseqformula "97"))
                      (builtin "One Step Simplification" (formula "30") (ifInst ""  (formula "15")))
                     (rule "true_left" (formula "30"))
                     (rule "onlyCreatedObjectsAreReferenced" (formula "99") (term "0") (ifseqformula "55"))
                     (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "100"))
                      (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "61")))
                     (rule "true_left" (formula "1"))
                     (rule "onlyCreatedObjectsAreReferenced" (formula "26") (term "1,0") (ifseqformula "21"))
                     (rule "replace_known_right" (formula "26") (term "0") (ifseqformula "99"))
                      (builtin "One Step Simplification" (formula "26") (ifInst ""  (formula "27")))
                     (rule "true_left" (formula "26"))
                     (rule "onlyCreatedObjectsAreReferenced" (formula "13") (term "1,1,0") (ifseqformula "21"))
                     (rule "replace_known_right" (formula "13") (term "0") (ifseqformula "95"))
                      (builtin "One Step Simplification" (formula "13") (ifInst ""  (formula "15")))
                     (rule "true_left" (formula "13"))
                     (rule "onlyCreatedObjectsAreReferenced" (formula "47") (term "1,0") (ifseqformula "55"))
                     (rule "replace_known_left" (formula "47") (term "1") (ifseqformula "48"))
                      (builtin "One Step Simplification" (formula "47") (ifInst ""  (formula "94")))
                     (rule "true_left" (formula "47"))
                     (rule "onlyCreatedObjectsAreReferenced" (formula "49") (term "1,0") (ifseqformula "55"))
                     (rule "replace_known_right" (formula "49") (term "0") (ifseqformula "98"))
                      (builtin "One Step Simplification" (formula "49") (ifInst ""  (formula "50")))
                     (rule "true_left" (formula "49"))
                     (rule "commute_or" (formula "2") (term "0,1,0,0,0"))
                     (rule "commute_or" (formula "1") (term "0,0,0,0"))
                     (rule "commute_or" (formula "1") (term "0,1,0,0,0"))
                     (rule "commute_or_2" (formula "4") (term "0,0,0"))
                     (rule "commute_or_2" (formula "3") (term "0,0,0"))
                     (rule "commute_and" (formula "33") (term "0,1"))
                     (rule "commute_or_2" (formula "2") (term "0,0,0"))
                     (rule "commute_or_2" (formula "1") (term "0,0,0"))
                     (rule "commute_or" (formula "5") (term "1,0,0,0,0,0"))
                     (rule "shift_paren_or" (formula "6") (term "0,0,0,0,0"))
                      (builtin "One Step Simplification" (formula "6"))
                     (rule "commute_or_2" (formula "6") (term "0,0,0,0"))
                     (rule "shift_paren_or" (formula "4") (term "0,0,0,0"))
                     (rule "commute_or_2" (formula "3") (term "1,0,0,0,0"))
                     (rule "shift_paren_or" (formula "2") (term "0,0,0,0"))
                     (rule "shift_paren_or" (formula "1") (term "0,0,0,0"))
                     (rule "shift_paren_or" (formula "3") (term "0,0,0,0"))
                     (rule "cnf_rightDist" (formula "6") (term "0,0,0"))
                     (rule "distr_forallAnd" (formula "6") (term "0,0"))
                     (rule "distr_forallAnd" (formula "6") (term "0"))
                     (rule "distr_forallAnd" (formula "6"))
                     (rule "andLeft" (formula "6"))
                     (rule "commute_or_2" (formula "6") (term "0,0,0"))
                      (builtin "One Step Simplification" (formula "6"))
                     (rule "eqSymm" (formula "6") (term "1,0,0,0,0"))
                     (rule "castedGetAny" (formula "6") (term "1,0,0,1,0,0,0"))
                     (rule "castedGetAny" (formula "6") (term "0,0,0,0,0,0"))
                     (rule "castedGetAny" (formula "6") (term "0,1,0,0,0,0"))
                      (builtin "One Step Simplification" (formula "6"))
                     (rule "true_left" (formula "6"))
                     (rule "shift_paren_or" (formula "6") (term "0,0,0"))
                      (builtin "One Step Simplification" (formula "6"))
                     (rule "eqSymm" (formula "6") (term "1,1,0,0,0"))
                     (rule "castedGetAny" (formula "6") (term "0,0,1,0,0,0"))
                     (rule "castedGetAny" (formula "6") (term "0,0,0,0,0,0"))
                     (rule "castedGetAny" (formula "6") (term "0,1,1,0,0,0"))
                      (builtin "One Step Simplification" (formula "6"))
                     (rule "true_left" (formula "6"))
                     (rule "commute_and" (formula "4") (term "1,0,0,0"))
                     (rule "commute_and" (formula "3") (term "1,0,0,0"))
                     (rule "commute_and" (formula "2") (term "1,0,0,0"))
                     (rule "commute_and" (formula "1") (term "1,0,0,0"))
                     (rule "shift_paren_or" (formula "5") (term "0,0,0,0,0"))
                      (builtin "One Step Simplification" (formula "5"))
                     (rule "commute_or_2" (formula "5") (term "0,0,0,0"))
                     (rule "shift_paren_or" (formula "4") (term "0,0,0,0,0"))
                      (builtin "One Step Simplification" (formula "4"))
                     (rule "commute_or_2" (formula "4") (term "0,0,0,0"))
                     (rule "shift_paren_or" (formula "2") (term "0,0,0,0,0"))
                      (builtin "One Step Simplification" (formula "2"))
                     (rule "commute_or_2" (formula "2") (term "0,0,0,0"))
                     (rule "shift_paren_or" (formula "1") (term "0,0,0,0,0"))
                      (builtin "One Step Simplification" (formula "1"))
                     (rule "commute_or_2" (formula "1") (term "0,0,0,0"))
                     (rule "shift_paren_or" (formula "3") (term "0,0,0,0,0"))
                      (builtin "One Step Simplification" (formula "3"))
                     (rule "cnf_rightDist" (formula "5") (term "0,0,0"))
                     (rule "distr_forallAnd" (formula "5") (term "0,0"))
                     (rule "distr_forallAnd" (formula "5") (term "0"))
                     (rule "distr_forallAnd" (formula "5"))
                     (rule "andLeft" (formula "5"))
                     (rule "commute_or_2" (formula "5") (term "0,0,0"))
                      (builtin "One Step Simplification" (formula "5"))
                     (rule "eqSymm" (formula "5") (term "1,0,0,0,0"))
                     (rule "castedGetAny" (formula "5") (term "0,0,0,0,0,0"))
                     (rule "castedGetAny" (formula "5") (term "1,0,0,1,0,0,0"))
                     (rule "castedGetAny" (formula "5") (term "0,1,0,0,0,0"))
                      (builtin "One Step Simplification" (formula "5"))
                     (rule "true_left" (formula "5"))
                     (rule "shift_paren_or" (formula "5") (term "0,0,0"))
                      (builtin "One Step Simplification" (formula "5"))
                     (rule "eqSymm" (formula "5") (term "1,1,0,0,0"))
                     (rule "castedGetAny" (formula "5") (term "0,0,0,0,0,0"))
                     (rule "castedGetAny" (formula "5") (term "0,0,1,0,0,0"))
                     (rule "castedGetAny" (formula "5") (term "0,1,1,0,0,0"))
                      (builtin "One Step Simplification" (formula "5"))
                     (rule "true_left" (formula "5"))
                     (rule "cnf_rightDist" (formula "4") (term "0,0,0"))
                     (rule "distr_forallAnd" (formula "4") (term "0,0"))
                     (rule "distr_forallAnd" (formula "4") (term "0"))
                     (rule "distr_forallAnd" (formula "4"))
                     (rule "andLeft" (formula "4"))
                     (rule "cnf_rightDist" (formula "2") (term "0,0,0"))
                     (rule "distr_forallAnd" (formula "2") (term "0,0"))
                     (rule "distr_forallAnd" (formula "2") (term "0"))
                     (rule "distr_forallAnd" (formula "2"))
                     (rule "andLeft" (formula "2"))
                     (rule "shift_paren_or" (formula "5") (term "0,0,0"))
                      (builtin "One Step Simplification" (formula "5"))
                     (rule "eqSymm" (formula "5") (term "1,1,0,0,0"))
                     (rule "castedGetAny" (formula "5") (term "0,0,1,0,0,0"))
                     (rule "castedGetAny" (formula "5") (term "0,0,0,0,0,0"))
                     (rule "castedGetAny" (formula "5") (term "0,1,1,0,0,0"))
                      (builtin "One Step Simplification" (formula "5"))
                     (rule "true_left" (formula "5"))
                     (rule "cnf_rightDist" (formula "1") (term "0,0,0"))
                     (rule "distr_forallAnd" (formula "1") (term "0,0"))
                     (rule "distr_forallAnd" (formula "1") (term "0"))
                     (rule "distr_forallAnd" (formula "1"))
                     (rule "andLeft" (formula "1"))
                     (rule "cnf_rightDist" (formula "4") (term "0,0,0"))
                     (rule "distr_forallAnd" (formula "4") (term "0,0"))
                     (rule "distr_forallAnd" (formula "4") (term "0"))
                     (rule "distr_forallAnd" (formula "4"))
                     (rule "andLeft" (formula "4"))
                     (rule "shift_paren_or" (formula "2") (term "0,0,0"))
                      (builtin "One Step Simplification" (formula "2"))
                     (rule "eqSymm" (formula "2") (term "1,1,0,0,0"))
                     (rule "castedGetAny" (formula "2") (term "0,0,0,0,0,0"))
                     (rule "castedGetAny" (formula "2") (term "0,0,1,0,0,0"))
                     (rule "castedGetAny" (formula "2") (term "0,1,1,0,0,0"))
                      (builtin "One Step Simplification" (formula "2"))
                     (rule "true_left" (formula "2"))
                     (rule "cnf_rightDist" (formula "4") (term "0,0,0"))
                     (rule "distr_forallAnd" (formula "4") (term "0,0"))
                     (rule "distr_forallAnd" (formula "4") (term "0"))
                     (rule "distr_forallAnd" (formula "4"))
                     (rule "andLeft" (formula "4"))
                     (rule "commute_or_2" (formula "4") (term "0,0,0"))
                      (builtin "One Step Simplification" (formula "4"))
                     (rule "eqSymm" (formula "4") (term "1,0,0,0,0"))
                     (rule "castedGetAny" (formula "4") (term "0,0,0,0,0,0"))
                     (rule "castedGetAny" (formula "4") (term "1,0,0,1,0,0,0"))
                     (rule "castedGetAny" (formula "4") (term "0,1,0,0,0,0"))
                      (builtin "One Step Simplification" (formula "4"))
                     (rule "true_left" (formula "4"))
                     (rule "cnf_rightDist" (formula "2") (term "0,0,0"))
                     (rule "distr_forallAnd" (formula "2") (term "0,0"))
                     (rule "distr_forallAnd" (formula "2") (term "0"))
                     (rule "distr_forallAnd" (formula "2"))
                     (rule "andLeft" (formula "2"))
                     (rule "commute_or_2" (formula "2") (term "0,0,0"))
                      (builtin "One Step Simplification" (formula "2"))
                     (rule "eqSymm" (formula "2") (term "1,0,0,0,0"))
                     (rule "castedGetAny" (formula "2") (term "1,0,0,1,0,0,0"))
                     (rule "castedGetAny" (formula "2") (term "0,0,0,0,0,0"))
                     (rule "castedGetAny" (formula "2") (term "0,1,0,0,0,0"))
                      (builtin "One Step Simplification" (formula "2"))
                     (rule "true_left" (formula "2"))
                     (rule "shift_paren_or" (formula "3") (term "0,0,0"))
                      (builtin "One Step Simplification" (formula "3"))
                     (rule "eqSymm" (formula "3") (term "1,1,0,0,0"))
                     (rule "castedGetAny" (formula "3") (term "1,0,0,0,0,0,0"))
                     (rule "castedGetAny" (formula "3") (term "0,0,1,0,0,0"))
                     (rule "castedGetAny" (formula "3") (term "0,1,1,0,0,0"))
                      (builtin "One Step Simplification" (formula "3"))
                     (rule "true_left" (formula "3"))
                     (rule "cnf_rightDist" (formula "1") (term "0,0,0"))
                     (rule "distr_forallAnd" (formula "1") (term "0,0"))
                     (rule "distr_forallAnd" (formula "1") (term "0"))
                     (rule "distr_forallAnd" (formula "1"))
                     (rule "andLeft" (formula "1"))
                     (rule "cnf_rightDist" (formula "3") (term "0,0,0"))
                     (rule "distr_forallAnd" (formula "3") (term "0,0"))
                     (rule "distr_forallAnd" (formula "3") (term "0"))
                     (rule "distr_forallAnd" (formula "3"))
                     (rule "andLeft" (formula "3"))
                     (rule "ifthenelse_split_for" (formula "30") (term "1,1"))
                     (branch "result_228_A_1.value@heapAtPre_A«anonHeapFunction» ≥ 0 TRUE"
                        (rule "cnf_rightDist" (formula "31"))
                        (rule "andLeft" (formula "31"))
                        (rule "commute_or" (formula "32"))
                        (rule "cnf_rightDist" (formula "31"))
                        (rule "andLeft" (formula "31"))
                        (rule "commute_or" (formula "32"))
                        (rule "shift_paren_or" (formula "2") (term "0,0,0"))
                         (builtin "One Step Simplification" (formula "2"))
                        (rule "eqSymm" (formula "2") (term "1,1,0,0,0"))
                        (rule "castedGetAny" (formula "2") (term "0,0,1,0,0,0"))
                        (rule "castedGetAny" (formula "2") (term "1,0,0,0,0,0,0"))
                        (rule "castedGetAny" (formula "2") (term "0,1,1,0,0,0"))
                         (builtin "One Step Simplification" (formula "2"))
                        (rule "true_left" (formula "2"))
                        (rule "cnf_rightDist" (formula "1") (term "0,0,0"))
                        (rule "distr_forallAnd" (formula "1") (term "0,0"))
                        (rule "distr_forallAnd" (formula "1") (term "0"))
                        (rule "distr_forallAnd" (formula "1"))
                        (rule "andLeft" (formula "1"))
                        (rule "commute_or_2" (formula "1") (term "0,0,0"))
                         (builtin "One Step Simplification" (formula "1"))
                        (rule "eqSymm" (formula "1") (term "1,0,0,0,0"))
                        (rule "castedGetAny" (formula "1") (term "0,0,0,0,0,0"))
                        (rule "castedGetAny" (formula "1") (term "1,0,0,1,0,0,0"))
                        (rule "castedGetAny" (formula "1") (term "0,1,0,0,0,0"))
                         (builtin "One Step Simplification" (formula "1"))
                        (rule "true_left" (formula "1"))
                        (rule "shift_paren_or" (formula "1") (term "0,0,0"))
                         (builtin "One Step Simplification" (formula "1"))
                        (rule "eqSymm" (formula "1") (term "1,1,0,0,0"))
                        (rule "castedGetAny" (formula "1") (term "1,0,0,0,0,0,0"))
                        (rule "castedGetAny" (formula "1") (term "0,0,1,0,0,0"))
                        (rule "castedGetAny" (formula "1") (term "0,1,1,0,0,0"))
                         (builtin "One Step Simplification" (formula "1"))
                        (rule "true_left" (formula "1"))
                        (rule "cnf_rightDist" (formula "1") (term "0,0,0"))
                        (rule "distr_forallAnd" (formula "1") (term "0,0"))
                        (rule "distr_forallAnd" (formula "1") (term "0"))
                        (rule "distr_forallAnd" (formula "1"))
                        (rule "andLeft" (formula "1"))
                        (rule "commute_or_2" (formula "1") (term "0,0,0"))
                         (builtin "One Step Simplification" (formula "1"))
                        (rule "eqSymm" (formula "1") (term "1,0,0,0,0"))
                        (rule "castedGetAny" (formula "1") (term "0,0,0,0,0,0"))
                        (rule "castedGetAny" (formula "1") (term "1,0,0,1,0,0,0"))
                        (rule "castedGetAny" (formula "1") (term "0,1,0,0,0,0"))
                         (builtin "One Step Simplification" (formula "1"))
                        (rule "true_left" (formula "1"))
                        (rule "shift_paren_or" (formula "1") (term "0,0,0"))
                         (builtin "One Step Simplification" (formula "1"))
                        (rule "eqSymm" (formula "1") (term "1,1,0,0,0"))
                        (rule "castedGetAny" (formula "1") (term "1,0,0,0,0,0,0"))
                        (rule "castedGetAny" (formula "1") (term "0,0,1,0,0,0"))
                        (rule "castedGetAny" (formula "1") (term "0,1,1,0,0,0"))
                         (builtin "One Step Simplification" (formula "1"))
                        (rule "true_left" (formula "1"))
                        (rule "cut_direct" (formula "28") (term "0"))
                        (branch "CUT: result_228_A_1.value@heapAtPre_A«anonHeapFunction» = 0 TRUE"
                            (builtin "One Step Simplification" (formula "29"))
                           (rule "true_left" (formula "29"))
                           (rule "replace_known_left" (formula "30") (term "0") (ifseqformula "28"))
                            (builtin "One Step Simplification" (formula "30"))
                           (rule "true_left" (formula "30"))
                           (rule "replace_known_left" (formula "29") (term "0") (ifseqformula "28"))
                            (builtin "One Step Simplification" (formula "29"))
                           (rule "true_left" (formula "29"))
                           (rule "applyEq" (formula "27") (term "0") (ifseqformula "28"))
                           (rule "qeq_literals" (formula "27"))
                           (rule "true_left" (formula "27"))
                           (rule "applyEq" (formula "29") (term "1,0") (ifseqformula "27"))
                           (rule "times_zero_1" (formula "29") (term "0"))
                           (rule "polySimp_homoEq" (formula "29"))
                           (rule "mul_literals" (formula "29") (term "1,0"))
                           (rule "add_zero_right" (formula "29") (term "0"))
                           (rule "applyEq" (formula "28") (term "1,0") (ifseqformula "27"))
                           (rule "eqSymm" (formula "28"))
                           (rule "polySimp_homoEq" (formula "28"))
                           (rule "polySimp_mulLiterals" (formula "28") (term "1,0"))
                           (rule "polySimp_elimOne" (formula "28") (term "1,0"))
                           (rule "applyEq" (formula "6") (term "1") (ifseqformula "27"))
                           (rule "applyEq" (formula "56") (term "1") (ifseqformula "27"))
                           (rule "applyEq" (formula "22") (term "1") (ifseqformula "27"))
                           (rule "applyEq" (formula "28") (term "1,1,0") (ifseqformula "27"))
                           (rule "polySimp_addComm0" (formula "28") (term "0"))
                           (rule "polySimp_sepNegMonomial" (formula "29"))
                           (rule "polySimp_mulLiterals" (formula "29") (term "0"))
                           (rule "polySimp_elimOne" (formula "29") (term "0"))
                           (rule "applyEq" (formula "3") (term "0") (ifseqformula "29"))
                           (rule "applyEq" (formula "28") (term "0,1,0") (ifseqformula "29"))
                           (rule "polySimp_addComm0" (formula "28") (term "0"))
                           (rule "applyEq" (formula "28") (term "0,0,1,0") (ifseqformula "29"))
                           (rule "polySimp_addComm0" (formula "28") (term "0"))
                           (rule "applyEq" (formula "5") (term "1") (ifseqformula "29"))
                           (rule "polySimp_sepPosMonomial" (formula "28"))
                           (rule "jdiv_axiom" (formula "28") (term "0"))
                           (rule "eqSymm" (formula "28"))
                           (rule "applyEq" (formula "28") (term "1") (ifseqformula "29"))
                            (builtin "One Step Simplification" (formula "28"))
                           (rule "eqSymm" (formula "28") (term "1"))
                           (rule "polySimp_homoEq" (formula "28") (term "1"))
                           (rule "polySimp_mulLiterals" (formula "28") (term "1,0,1"))
                           (rule "polySimp_elimOne" (formula "28") (term "1,0,1"))
                           (rule "polySimp_sepPosMonomial" (formula "28") (term "1"))
                           (rule "inEqSimp_contradInEq0" (formula "28") (term "0,0") (ifseqformula "3"))
                           (rule "qeq_literals" (formula "28") (term "0,0,0"))
                            (builtin "One Step Simplification" (formula "28"))
                           (rule "true_left" (formula "28"))
                           (rule "div_axiom" (formula "28") (term "0,1") (inst "quotient=quotient_1"))
                            (builtin "One Step Simplification" (formula "28"))
                           (rule "true_left" (formula "28"))
                           (rule "Use_information_flow_contract_for_compareTo_325434207" (formula "18") (ifseqformula "18"))
                            (builtin "One Step Simplification" (formula "18") (ifInst ""  (formula "93")) (ifInst ""  (formula "93")))
                           (rule "true_left" (formula "18"))
                           (rule "Use_information_flow_contract_for_getOrder_757678341" (formula "58") (ifseqformula "24"))
                           (rule "applyEq" (formula "58") (term "0,0,1") (ifseqformula "56"))
                           (rule "eqSymm" (formula "58") (term "0,1"))
                           (rule "replace_known_left" (formula "58") (term "0,1") (ifseqformula "22"))
                            (builtin "One Step Simplification" (formula "58"))
                           (rule "applyEq" (formula "58") (term "0,1") (ifseqformula "6"))
                           (rule "eqSymm" (formula "58") (term "1"))
                           (rule "replace_known_left" (formula "58") (term "1") (ifseqformula "27"))
                            (builtin "One Step Simplification" (formula "58"))
                           (rule "true_left" (formula "58"))
                           (rule "Use_information_flow_contract_for_getOrder_757678341" (formula "58") (ifseqformula "58"))
                            (builtin "One Step Simplification" (formula "58"))
                           (rule "true_left" (formula "58"))
                           (rule "Use_information_flow_contract_for_compareTo_325434207" (formula "52") (ifseqformula "18"))
                           (rule "replace_known_right" (formula "52") (term "0,1,0,0") (ifseqformula "94"))
                            (builtin "One Step Simplification" (formula "52") (ifInst ""  (formula "93")))
                           (rule "applyEqRigid" (formula "52") (term "0,1,0,1") (ifseqformula "54"))
                           (rule "eqSymm" (formula "52") (term "1,0,1"))
                           (rule "replace_known_left" (formula "52") (term "1,0,1") (ifseqformula "19"))
                            (builtin "One Step Simplification" (formula "52"))
                           (rule "applyEq" (formula "52") (term "0,0,1") (ifseqformula "5"))
                           (rule "eqSymm" (formula "52") (term "0,1"))
                           (rule "replace_known_left" (formula "52") (term "0,1") (ifseqformula "29"))
                            (builtin "One Step Simplification" (formula "52"))
                           (rule "Class_invariant_axiom_for_java_math_BigInteger" (formula "52") (term "1,0"))
                           (rule "replace_known_left" (formula "52") (term "1,1,0") (ifseqformula "19"))
                            (builtin "One Step Simplification" (formula "52") (ifInst ""  (formula "93")))
                           (rule "Class_invariant_axiom_for_java_math_BigInteger" (formula "52") (term "0"))
                           (rule "replace_known_left" (formula "52") (term "1,0") (ifseqformula "54"))
                            (builtin "One Step Simplification" (formula "52") (ifInst ""  (formula "94")))
                           (rule "applyEq" (formula "53") (term "4") (ifseqformula "52"))
                           (rule "applyEq" (formula "51") (term "0") (ifseqformula "52"))
                           (rule "applyEq" (formula "44") (term "0") (ifseqformula "51"))
                           (rule "Use_information_flow_contract_for_getOrder_757678341" (formula "24") (ifseqformula "24"))
                            (builtin "One Step Simplification" (formula "24"))
                           (rule "true_left" (formula "24"))
                           (rule "Use_information_flow_contract_for_getOrder_757678341" (formula "24") (ifseqformula "57"))
                           (rule "eqSymm" (formula "24") (term "0,1"))
                           (rule "eqSymm" (formula "24") (term "1,1"))
                           (rule "applyEq" (formula "24") (term "0,1,1") (ifseqformula "6"))
                           (rule "eqSymm" (formula "24") (term "1,1"))
                           (rule "replace_known_left" (formula "24") (term "1,1") (ifseqformula "28"))
                            (builtin "One Step Simplification" (formula "24"))
                           (rule "true_left" (formula "24"))
                           (rule "Use_information_flow_contract_for_multiply_1272441881_0" (formula "69") (ifseqformula "35"))
                           (rule "replaceKnownSelect_taclet21_12" (formula "69") (term "0,1,1"))
                           (rule "replaceKnownSelect_taclet21_11" (formula "69") (term "1,1,1"))
                           (rule "replaceKnownAuxiliaryConstant_taclet1101121_19" (formula "69") (term "0,1,1"))
                           (rule "replaceKnownAuxiliaryConstant_taclet01121_17" (formula "69") (term "1,1,1"))
                           (rule "replaceKnownSelect_taclet21_8" (formula "69") (term "1,1,0,1"))
                           (rule "replaceKnownSelect_taclet21_9" (formula "69") (term "0,1,0,1"))
                           (rule "replaceKnownAuxiliaryConstant_taclet21_10" (formula "69") (term "1,1,0,1"))
                            (builtin "One Step Simplification" (formula "69") (ifInst ""  (formula "83")) (ifInst ""  (formula "82")))
                           (rule "eqSymm" (formula "69") (term "1,1"))
                           (rule "replace_known_right" (formula "69") (term "1,1") (ifseqformula "100"))
                            (builtin "One Step Simplification" (formula "69"))
                           (rule "pullOutSelect" (formula "69") (term "1,0,1") (inst "selectSK=org_bouncycastle_math_ec_ECPoint_value_4"))
                           (rule "simplifySelectOfAnonEQ" (formula "69") (ifseqformula "25"))
                            (builtin "One Step Simplification" (formula "69") (ifInst ""  (formula "97")) (ifInst ""  (formula "13")))
                           (rule "applyEqReverse" (formula "70") (term "1,0,1") (ifseqformula "69"))
                           (rule "hideAuxiliaryEq" (formula "69"))
                           (rule "pullOutSelect" (formula "69") (term "0,0,1") (inst "selectSK=org_bouncycastle_math_ec_ECPoint_value_5"))
                           (rule "simplifySelectOfAnonEQ" (formula "69") (ifseqformula "59"))
                            (builtin "One Step Simplification" (formula "69") (ifInst ""  (formula "98")) (ifInst ""  (formula "46")))
                           (rule "applyEqReverse" (formula "70") (term "0,0,1") (ifseqformula "69"))
                           (rule "hideAuxiliaryEq" (formula "69"))
                           (rule "replace_known_left" (formula "69") (term "0,1") (ifseqformula "4"))
                            (builtin "One Step Simplification" (formula "69"))
                           (rule "notLeft" (formula "69"))
                           (rule "Class_invariant_axiom_for_org_bouncycastle_math_ec_ECPoint" (formula "75") (term "1"))
                            (builtin "One Step Simplification" (formula "75"))
                           (rule "Class_invariant_axiom_for_org_bouncycastle_math_ec_ECPoint" (formula "75"))
                           (rule "closeTrue" (formula "75"))
                        )
                        (branch "CUT: result_228_A_1.value@heapAtPre_A«anonHeapFunction» = 0 FALSE"
                            (builtin "One Step Simplification" (formula "28"))
                           (rule "replace_known_right" (formula "29") (term "0") (ifseqformula "79"))
                            (builtin "One Step Simplification" (formula "29"))
                           (rule "replace_known_right" (formula "30") (term "0") (ifseqformula "79"))
                            (builtin "One Step Simplification" (formula "30"))
                           (rule "applyEq" (formula "32") (term "0,0") (ifseqformula "29"))
                           (rule "polySimp_mulComm0" (formula "32") (term "0"))
                           (rule "applyEq" (formula "28") (term "0") (ifseqformula "32"))
                           (rule "inEqSimp_homoInEq0" (formula "28"))
                           (rule "polySimp_mulComm0" (formula "28") (term "1,0"))
                           (rule "polySimp_rightDist" (formula "28") (term "1,0"))
                           (rule "polySimp_mulLiterals" (formula "28") (term "1,1,0"))
                           (rule "polySimp_elimOne" (formula "28") (term "1,1,0"))
                           (rule "polySimp_mulComm0" (formula "28") (term "0,1,0"))
                           (rule "polySimp_addAssoc" (formula "28") (term "0"))
                           (rule "polySimp_addComm0" (formula "28") (term "0,0"))
                           (rule "polySimp_pullOutFactor2b" (formula "28") (term "0"))
                           (rule "add_literals" (formula "28") (term "1,1,0"))
                           (rule "times_zero_1" (formula "28") (term "1,0"))
                           (rule "add_zero_right" (formula "28") (term "0"))
                           (rule "applyEq" (formula "30") (term "0") (ifseqformula "32"))
                           (rule "inEqSimp_homoInEq1" (formula "30"))
                           (rule "polySimp_mulComm0" (formula "30") (term "1,0"))
                           (rule "polySimp_rightDist" (formula "30") (term "1,0"))
                           (rule "polySimp_mulLiterals" (formula "30") (term "1,1,0"))
                           (rule "polySimp_elimOne" (formula "30") (term "1,1,0"))
                           (rule "polySimp_mulComm0" (formula "30") (term "0,1,0"))
                           (rule "polySimp_addComm1" (formula "30") (term "0"))
                           (rule "polySimp_addAssoc" (formula "30") (term "0,0"))
                           (rule "polySimp_addComm1" (formula "30") (term "0,0,0"))
                           (rule "polySimp_pullOutFactor2b" (formula "30") (term "0,0"))
                           (rule "add_literals" (formula "30") (term "1,1,0,0"))
                           (rule "times_zero_1" (formula "30") (term "1,0,0"))
                           (rule "add_zero_right" (formula "30") (term "0,0"))
                           (rule "applyEq" (formula "31") (term "0,1") (ifseqformula "29"))
                           (rule "inEqSimp_invertInEq1" (formula "28"))
                           (rule "polySimp_mulLiterals" (formula "28") (term "0"))
                           (rule "mul_literals" (formula "28") (term "1"))
                           (rule "polySimp_elimOne" (formula "28") (term "0"))
                           (rule "inEqSimp_sepNegMonomial0" (formula "30"))
                           (rule "polySimp_mulLiterals" (formula "30") (term "0"))
                           (rule "polySimp_elimOne" (formula "30") (term "0"))
                           (rule "inEqSimp_strengthen1" (formula "27") (ifseqformula "79"))
                           (rule "add_zero_right" (formula "27") (term "1"))
                           (rule "inEqSimp_contradEq7" (formula "79") (ifseqformula "27"))
                           (rule "times_zero_1" (formula "79") (term "1,0,0"))
                           (rule "add_literals" (formula "79") (term "0,0"))
                           (rule "leq_literals" (formula "79") (term "0"))
                            (builtin "One Step Simplification" (formula "79"))
                           (rule "false_right" (formula "79"))
                           (rule "Use_information_flow_contract_for_compareTo_325434207" (formula "18") (ifseqformula "18"))
                            (builtin "One Step Simplification" (formula "18") (ifInst ""  (formula "96")) (ifInst ""  (formula "96")))
                           (rule "true_left" (formula "18"))
                           (rule "Use_information_flow_contract_for_getOrder_757678341" (formula "61") (ifseqformula "24"))
                           (rule "replace_known_left" (formula "61") (term "1,1") (ifseqformula "6"))
                            (builtin "One Step Simplification" (formula "61"))
                           (rule "true_left" (formula "61"))
                           (rule "Use_information_flow_contract_for_multiply_1272441881" (formula "73") (ifseqformula "38"))
                           (rule "replaceKnownSelect_taclet21_12" (formula "73") (term "0,1,1"))
                           (rule "replaceKnownSelect_taclet21_11" (formula "73") (term "1,1,1"))
                           (rule "replaceKnownAuxiliaryConstant_taclet1101121_19" (formula "73") (term "0,1,1"))
                           (rule "replaceKnownAuxiliaryConstant_taclet01121_17" (formula "73") (term "1,1,1"))
                           (rule "replaceKnownSelect_taclet21_8" (formula "73") (term "1,1,0,1"))
                           (rule "replaceKnownSelect_taclet21_9" (formula "73") (term "0,1,0,1"))
                           (rule "replaceKnownAuxiliaryConstant_taclet21_10" (formula "73") (term "1,1,0,1"))
                            (builtin "One Step Simplification" (formula "73") (ifInst ""  (formula "87")) (ifInst ""  (formula "86")))
                           (rule "eqSymm" (formula "73") (term "1,1"))
                           (rule "replace_known_right" (formula "73") (term "1,1") (ifseqformula "104"))
                            (builtin "One Step Simplification" (formula "73"))
                           (rule "pullOutSelect" (formula "73") (term "1,0,1") (inst "selectSK=org_bouncycastle_math_ec_ECPoint_value_4"))
                           (rule "simplifySelectOfAnonEQ" (formula "73") (ifseqformula "25"))
                            (builtin "One Step Simplification" (formula "73") (ifInst ""  (formula "101")) (ifInst ""  (formula "13")))
                           (rule "applyEqReverse" (formula "74") (term "1,0,1") (ifseqformula "73"))
                           (rule "hideAuxiliaryEq" (formula "73"))
                           (rule "pullOutSelect" (formula "73") (term "0,0,1") (inst "selectSK=org_bouncycastle_math_ec_ECPoint_value_5"))
                           (rule "simplifySelectOfAnonEQ" (formula "73") (ifseqformula "63"))
                            (builtin "One Step Simplification" (formula "73") (ifInst ""  (formula "102")) (ifInst ""  (formula "50")))
                           (rule "applyEqReverse" (formula "74") (term "0,0,1") (ifseqformula "73"))
                           (rule "hideAuxiliaryEq" (formula "73"))
                           (rule "replace_known_left" (formula "73") (term "0,1") (ifseqformula "4"))
                            (builtin "One Step Simplification" (formula "73"))
                           (rule "notLeft" (formula "73"))
                           (rule "Class_invariant_axiom_for_org_bouncycastle_math_ec_ECPoint" (formula "79") (term "1"))
                            (builtin "One Step Simplification" (formula "79"))
                           (rule "Class_invariant_axiom_for_org_bouncycastle_math_ec_ECPoint" (formula "79"))
                           (rule "closeTrue" (formula "79"))
                        )
                     )
                     (branch "result_228_A_1.value@heapAtPre_A«anonHeapFunction» ≥ 0 FALSE"
                        (rule "inEqSimp_geqRight" (formula "79"))
                        (rule "mul_literals" (formula "1") (term "1,0,0"))
                        (rule "add_literals" (formula "1") (term "0,0"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "1"))
                        (rule "mul_literals" (formula "1") (term "1"))
                        (rule "inEqSimp_contradEq3" (formula "31") (term "0") (ifseqformula "1"))
                        (rule "times_zero_1" (formula "31") (term "1,0,0,0"))
                        (rule "add_literals" (formula "31") (term "0,0,0"))
                        (rule "qeq_literals" (formula "31") (term "0,0"))
                         (builtin "One Step Simplification" (formula "31"))
                        (rule "andLeft" (formula "31"))
                        (rule "andLeft" (formula "31"))
                        (rule "applyEq" (formula "35") (term "0,0") (ifseqformula "32"))
                        (rule "polySimp_mulComm0" (formula "35") (term "0"))
                        (rule "applyEq" (formula "33") (term "0") (ifseqformula "35"))
                        (rule "inEqSimp_homoInEq1" (formula "33"))
                        (rule "polySimp_mulComm0" (formula "33") (term "1,0"))
                        (rule "polySimp_rightDist" (formula "33") (term "1,0"))
                        (rule "polySimp_mulLiterals" (formula "33") (term "1,1,0"))
                        (rule "polySimp_elimOne" (formula "33") (term "1,1,0"))
                        (rule "polySimp_mulComm0" (formula "33") (term "0,1,0"))
                        (rule "polySimp_addComm1" (formula "33") (term "0"))
                        (rule "polySimp_addAssoc" (formula "33") (term "0,0"))
                        (rule "polySimp_addComm1" (formula "33") (term "0,0,0"))
                        (rule "polySimp_pullOutFactor2b" (formula "33") (term "0,0"))
                        (rule "add_literals" (formula "33") (term "1,1,0,0"))
                        (rule "times_zero_1" (formula "33") (term "1,0,0"))
                        (rule "add_zero_right" (formula "33") (term "0,0"))
                        (rule "applyEq" (formula "31") (term "0") (ifseqformula "35"))
                        (rule "inEqSimp_homoInEq0" (formula "31"))
                        (rule "polySimp_mulComm0" (formula "31") (term "1,0"))
                        (rule "polySimp_rightDist" (formula "31") (term "1,0"))
                        (rule "polySimp_mulLiterals" (formula "31") (term "1,1,0"))
                        (rule "polySimp_elimOne" (formula "31") (term "1,1,0"))
                        (rule "polySimp_mulComm0" (formula "31") (term "0,1,0"))
                        (rule "polySimp_addAssoc" (formula "31") (term "0"))
                        (rule "polySimp_addComm0" (formula "31") (term "0,0"))
                        (rule "polySimp_pullOutFactor2b" (formula "31") (term "0"))
                        (rule "add_literals" (formula "31") (term "1,1,0"))
                        (rule "times_zero_1" (formula "31") (term "1,0"))
                        (rule "add_zero_right" (formula "31") (term "0"))
                        (rule "applyEq" (formula "34") (term "0,1") (ifseqformula "32"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "33"))
                        (rule "polySimp_mulComm0" (formula "33") (term "1"))
                        (rule "polySimp_rightDist" (formula "33") (term "1"))
                        (rule "polySimp_mulLiterals" (formula "33") (term "1,1"))
                        (rule "mul_literals" (formula "33") (term "0,1"))
                        (rule "polySimp_elimOne" (formula "33") (term "1,1"))
                        (rule "inEqSimp_invertInEq1" (formula "31"))
                        (rule "mul_literals" (formula "31") (term "1"))
                        (rule "polySimp_mulLiterals" (formula "31") (term "0"))
                        (rule "polySimp_elimOne" (formula "31") (term "0"))
                        (rule "shift_paren_or" (formula "3") (term "0,0,0"))
                         (builtin "One Step Simplification" (formula "3"))
                        (rule "eqSymm" (formula "3") (term "1,1,0,0,0"))
                        (rule "castedGetAny" (formula "3") (term "1,0,0,0,0,0,0"))
                        (rule "castedGetAny" (formula "3") (term "0,0,1,0,0,0"))
                        (rule "castedGetAny" (formula "3") (term "0,1,1,0,0,0"))
                         (builtin "One Step Simplification" (formula "3"))
                        (rule "true_left" (formula "3"))
                        (rule "cnf_rightDist" (formula "2") (term "0,0,0"))
                        (rule "distr_forallAnd" (formula "2") (term "0,0"))
                        (rule "distr_forallAnd" (formula "2") (term "0"))
                        (rule "distr_forallAnd" (formula "2"))
                        (rule "andLeft" (formula "2"))
                        (rule "cnf_rightDist" (formula "4") (term "0,0,0"))
                        (rule "distr_forallAnd" (formula "4") (term "0,0"))
                        (rule "distr_forallAnd" (formula "4") (term "0"))
                        (rule "distr_forallAnd" (formula "4"))
                        (rule "andLeft" (formula "4"))
                        (rule "commute_or_2" (formula "2") (term "0,0,0"))
                         (builtin "One Step Simplification" (formula "2"))
                        (rule "eqSymm" (formula "2") (term "1,0,0,0,0"))
                        (rule "castedGetAny" (formula "2") (term "1,0,0,1,0,0,0"))
                        (rule "castedGetAny" (formula "2") (term "0,0,0,0,0,0"))
                        (rule "castedGetAny" (formula "2") (term "0,1,0,0,0,0"))
                         (builtin "One Step Simplification" (formula "2"))
                        (rule "true_left" (formula "2"))
                        (rule "commute_or_2" (formula "3") (term "0,0,0"))
                         (builtin "One Step Simplification" (formula "3"))
                        (rule "eqSymm" (formula "3") (term "1,0,0,0,0"))
                        (rule "castedGetAny" (formula "3") (term "0,0,0,0,0,0"))
                        (rule "castedGetAny" (formula "3") (term "1,0,0,1,0,0,0"))
                        (rule "castedGetAny" (formula "3") (term "0,1,0,0,0,0"))
                         (builtin "One Step Simplification" (formula "3"))
                        (rule "true_left" (formula "3"))
                        (rule "shift_paren_or" (formula "2") (term "0,0,0"))
                         (builtin "One Step Simplification" (formula "2"))
                        (rule "eqSymm" (formula "2") (term "1,1,0,0,0"))
                        (rule "castedGetAny" (formula "2") (term "0,0,1,0,0,0"))
                        (rule "castedGetAny" (formula "2") (term "1,0,0,0,0,0,0"))
                        (rule "castedGetAny" (formula "2") (term "0,1,1,0,0,0"))
                         (builtin "One Step Simplification" (formula "2"))
                        (rule "true_left" (formula "2"))
                        (rule "Use_information_flow_contract_for_compareTo_325434207" (formula "19") (ifseqformula "19"))
                         (builtin "One Step Simplification" (formula "19") (ifInst ""  (formula "96")) (ifInst ""  (formula "96")))
                        (rule "true_left" (formula "19"))
                        (rule "Use_information_flow_contract_for_getOrder_757678341" (formula "61") (ifseqformula "25"))
                        (rule "replace_known_left" (formula "61") (term "1,1") (ifseqformula "7"))
                         (builtin "One Step Simplification" (formula "61"))
                        (rule "true_left" (formula "61"))
                        (rule "Use_information_flow_contract_for_multiply_1272441881_0" (formula "73") (ifseqformula "38"))
                        (rule "replaceKnownSelect_taclet21_11" (formula "73") (term "1,1,1"))
                        (rule "replaceKnownSelect_taclet21_12" (formula "73") (term "0,1,1"))
                        (rule "replaceKnownAuxiliaryConstant_taclet01121_17" (formula "73") (term "1,1,1"))
                        (rule "replaceKnownAuxiliaryConstant_taclet1101121_19" (formula "73") (term "0,1,1"))
                        (rule "replaceKnownSelect_taclet21_8" (formula "73") (term "1,1,0,1"))
                        (rule "replaceKnownSelect_taclet21_9" (formula "73") (term "0,1,0,1"))
                        (rule "replaceKnownAuxiliaryConstant_taclet21_10" (formula "73") (term "1,1,0,1"))
                         (builtin "One Step Simplification" (formula "73") (ifInst ""  (formula "87")) (ifInst ""  (formula "86")))
                        (rule "eqSymm" (formula "73") (term "1,1"))
                        (rule "replace_known_right" (formula "73") (term "1,1") (ifseqformula "104"))
                         (builtin "One Step Simplification" (formula "73"))
                        (rule "pullOutSelect" (formula "73") (term "1,0,1") (inst "selectSK=org_bouncycastle_math_ec_ECPoint_value_4"))
                        (rule "simplifySelectOfAnonEQ" (formula "73") (ifseqformula "26"))
                         (builtin "One Step Simplification" (formula "73") (ifInst ""  (formula "101")) (ifInst ""  (formula "14")))
                        (rule "applyEqReverse" (formula "74") (term "1,0,1") (ifseqformula "73"))
                        (rule "hideAuxiliaryEq" (formula "73"))
                        (rule "pullOutSelect" (formula "73") (term "0,0,1") (inst "selectSK=org_bouncycastle_math_ec_ECPoint_value_5"))
                        (rule "simplifySelectOfAnonEQ" (formula "73") (ifseqformula "63"))
                         (builtin "One Step Simplification" (formula "73") (ifInst ""  (formula "102")) (ifInst ""  (formula "50")))
                        (rule "applyEqReverse" (formula "74") (term "0,0,1") (ifseqformula "73"))
                        (rule "hideAuxiliaryEq" (formula "73"))
                        (rule "replace_known_left" (formula "73") (term "0,1") (ifseqformula "5"))
                         (builtin "One Step Simplification" (formula "73"))
                        (rule "notLeft" (formula "73"))
                        (rule "Class_invariant_axiom_for_org_bouncycastle_math_ec_ECPoint" (formula "79") (term "1"))
                         (builtin "One Step Simplification" (formula "79"))
                        (rule "Class_invariant_axiom_for_org_bouncycastle_math_ec_ECPoint" (formula "79"))
                        (rule "closeTrue" (formula "79"))
                     )
                  )
               )
            )
            (branch " resultAtPost_226_A.<created>@heapAtPre_A«anonHeapFunction» = TRUE FALSE"
               (rule "applyEqReverse" (formula "4") (term "1,0") (ifseqformula "3"))
               (rule "hideAuxiliaryEq" (formula "3"))
               (rule "replace_known_right" (formula "3") (term "1,0,0") (ifseqformula "77"))
                (builtin "One Step Simplification" (formula "3"))
               (rule "replace_known_right" (formula "35") (term "1") (ifseqformula "77"))
                (builtin "One Step Simplification" (formula "35"))
               (rule "ifthenelse_split" (formula "1") (term "0"))
               (branch " resultAtPost_226_B.<created>@heapAtPre_B«anonHeapFunction» = TRUE TRUE"
                  (rule "applyEqReverse" (formula "3") (term "1,0") (ifseqformula "2"))
                  (rule "hideAuxiliaryEq" (formula "2"))
                  (rule "replace_known_left" (formula "2") (term "1,0,0") (ifseqformula "1"))
                   (builtin "One Step Simplification" (formula "2"))
                  (rule "applyEqReverse" (formula "100") (term "0") (ifseqformula "2"))
                  (rule "hideAuxiliaryEq" (formula "2"))
                  (rule "replace_known_left" (formula "69") (term "1") (ifseqformula "1"))
                   (builtin "One Step Simplification" (formula "69"))
                  (rule "true_left" (formula "69"))
                  (rule "Class_axiom_0_in_de_polyas_core3_open_cred_CredTool" (inst "seq=seq") (inst "i=i") (inst "str=str") (inst "seq_0=seq_0") (inst "i_0=i_0") (inst "sv_heap=heapAtPre_B<<anonHeapFunction>>"))
                  (rule "andLeft" (formula "1"))
                  (rule "castedGetAny" (formula "1") (term "0,0,0,0,0"))
                  (rule "castedGetAny" (formula "2") (term "0,1,1,0,0,0"))
                  (rule "castedGetAny" (formula "1") (term "0,0,1,0,0"))
                  (rule "nnf_imp2or" (formula "1") (term "0,0"))
                   (builtin "One Step Simplification" (formula "1"))
                  (rule "nnf_imp2or" (formula "2") (term "0,0,0"))
                  (rule "nnf_notAnd" (formula "2") (term "0,0,0,0"))
                   (builtin "One Step Simplification" (formula "2"))
                  (rule "nnf_imp2or" (formula "2") (term "1,0,0,0"))
                  (rule "nnf_notOr" (formula "2") (term "0,0,0,0,0"))
                  (rule "nnf_notAnd" (formula "2") (term "0,1,0,0,0"))
                   (builtin "One Step Simplification" (formula "2"))
                  (rule "commute_or" (formula "2") (term "0,0,0,0"))
                  (rule "commute_or_2" (formula "2") (term "0,0,0"))
                  (rule "shift_paren_or" (formula "2") (term "0,0,0,0"))
                  (rule "commute_and" (formula "2") (term "1,0,0,0"))
                  (rule "shift_paren_or" (formula "2") (term "0,0,0,0,0"))
                  (rule "commute_or_2" (formula "2") (term "0,0,0,0,0"))
                   (builtin "One Step Simplification" (formula "2"))
                  (rule "commute_or_2" (formula "2") (term "0,0,0,0"))
                  (rule "cnf_rightDist" (formula "2") (term "0,0,0"))
                  (rule "distr_forallAnd" (formula "2") (term "0,0"))
                  (rule "distr_forallAnd" (formula "2") (term "0"))
                  (rule "distr_forallAnd" (formula "2"))
                  (rule "andLeft" (formula "2"))
                  (rule "commute_or_2" (formula "2") (term "0,0,0"))
                   (builtin "One Step Simplification" (formula "2"))
                  (rule "eqSymm" (formula "2") (term "1,0,0,0,0"))
                  (rule "castedGetAny" (formula "2") (term "1,0,0,1,0,0,0"))
                  (rule "castedGetAny" (formula "2") (term "0,0,0,0,0,0"))
                  (rule "castedGetAny" (formula "2") (term "0,1,0,0,0,0"))
                   (builtin "One Step Simplification" (formula "2"))
                  (rule "true_left" (formula "2"))
                  (rule "shift_paren_or" (formula "2") (term "0,0,0"))
                   (builtin "One Step Simplification" (formula "2"))
                  (rule "eqSymm" (formula "2") (term "1,1,0,0,0"))
                  (rule "castedGetAny" (formula "2") (term "0,0,1,0,0,0"))
                  (rule "castedGetAny" (formula "2") (term "0,0,0,0,0,0"))
                  (rule "castedGetAny" (formula "2") (term "0,1,1,0,0,0"))
                   (builtin "One Step Simplification" (formula "2"))
                  (rule "true_left" (formula "2"))
                  (rule "Class_axiom_0_in_de_polyas_core3_open_cred_CredTool" (inst "seq=seq") (inst "i=i") (inst "str=str") (inst "seq_0=seq_0") (inst "i_0=i_0") (inst "sv_heap=anon_heap_mod<<anonHeapFunction>>"))
                  (rule "andLeft" (formula "1"))
                  (rule "castedGetAny" (formula "1") (term "0,0,0,0,0"))
                  (rule "castedGetAny" (formula "2") (term "0,1,1,0,0,0"))
                  (rule "castedGetAny" (formula "1") (term "0,0,1,0,0"))
                  (rule "nnf_imp2or" (formula "1") (term "0,0"))
                   (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "3")))
                  (rule "true_left" (formula "1"))
                  (rule "nnf_imp2or" (formula "1") (term "0,0,0"))
                  (rule "nnf_notAnd" (formula "1") (term "0,0,0,0"))
                   (builtin "One Step Simplification" (formula "1"))
                  (rule "nnf_imp2or" (formula "1") (term "1,0,0,0"))
                  (rule "nnf_notOr" (formula "1") (term "0,0,0,0,0"))
                  (rule "nnf_notAnd" (formula "1") (term "0,1,0,0,0"))
                   (builtin "One Step Simplification" (formula "1"))
                  (rule "commute_or" (formula "1") (term "0,0,0,0"))
                  (rule "commute_or_2" (formula "1") (term "0,0,0"))
                  (rule "shift_paren_or" (formula "1") (term "0,0,0,0"))
                  (rule "commute_and" (formula "1") (term "1,0,0,0"))
                  (rule "shift_paren_or" (formula "1") (term "0,0,0,0,0"))
                  (rule "commute_or_2" (formula "1") (term "0,0,0,0,0"))
                   (builtin "One Step Simplification" (formula "1"))
                  (rule "commute_or_2" (formula "1") (term "0,0,0,0"))
                  (rule "cnf_rightDist" (formula "1") (term "0,0,0"))
                  (rule "distr_forallAnd" (formula "1") (term "0,0"))
                  (rule "distr_forallAnd" (formula "1") (term "0"))
                  (rule "distr_forallAnd" (formula "1"))
                  (rule "andLeft" (formula "1"))
                  (rule "commute_or_2" (formula "1") (term "0,0,0"))
                   (builtin "One Step Simplification" (formula "1"))
                  (rule "eqSymm" (formula "1") (term "1,0,0,0,0"))
                  (rule "castedGetAny" (formula "1") (term "1,0,0,1,0,0,0"))
                  (rule "castedGetAny" (formula "1") (term "0,0,0,0,0,0"))
                  (rule "castedGetAny" (formula "1") (term "0,1,0,0,0,0"))
                   (builtin "One Step Simplification" (formula "1"))
                  (rule "true_left" (formula "1"))
                  (rule "shift_paren_or" (formula "1") (term "0,0,0"))
                   (builtin "One Step Simplification" (formula "1"))
                  (rule "eqSymm" (formula "1") (term "1,1,0,0,0"))
                  (rule "castedGetAny" (formula "1") (term "0,0,1,0,0,0"))
                  (rule "castedGetAny" (formula "1") (term "0,0,0,0,0,0"))
                  (rule "castedGetAny" (formula "1") (term "0,1,1,0,0,0"))
                   (builtin "One Step Simplification" (formula "1"))
                  (rule "true_left" (formula "1"))
                  (rule "Class_axiom_0_in_de_polyas_core3_open_cred_CredTool" (inst "seq=seq") (inst "i=i") (inst "str=str") (inst "seq_0=seq_0") (inst "i_0=i_0") (inst "sv_heap=anon_heap_multiply<<anonHeapFunction>>"))
                  (rule "andLeft" (formula "1"))
                  (rule "castedGetAny" (formula "1") (term "0,0,0,0,0"))
                  (rule "castedGetAny" (formula "2") (term "0,1,1,0,0,0"))
                  (rule "castedGetAny" (formula "1") (term "0,0,1,0,0"))
                  (rule "nnf_imp2or" (formula "1") (term "0,0"))
                   (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "3")))
                  (rule "true_left" (formula "1"))
                  (rule "nnf_imp2or" (formula "1") (term "0,0,0"))
                  (rule "nnf_notAnd" (formula "1") (term "0,0,0,0"))
                   (builtin "One Step Simplification" (formula "1"))
                  (rule "nnf_imp2or" (formula "1") (term "1,0,0,0"))
                  (rule "nnf_notOr" (formula "1") (term "0,0,0,0,0"))
                  (rule "nnf_notAnd" (formula "1") (term "0,1,0,0,0"))
                   (builtin "One Step Simplification" (formula "1"))
                  (rule "commute_or" (formula "1") (term "0,0,0,0"))
                  (rule "commute_or_2" (formula "1") (term "0,0,0"))
                  (rule "shift_paren_or" (formula "1") (term "0,0,0,0"))
                  (rule "Class_axiom_0_in_de_polyas_core3_open_cred_CredTool" (inst "seq=seq") (inst "i=i") (inst "str=str") (inst "seq_0=seq_0") (inst "i_0=i_0") (inst "sv_heap=heapAtPre_A<<anonHeapFunction>>"))
                  (rule "andLeft" (formula "1"))
                  (rule "castedGetAny" (formula "1") (term "0,0,0,0,0"))
                  (rule "castedGetAny" (formula "2") (term "0,1,1,0,0,0"))
                  (rule "castedGetAny" (formula "1") (term "0,0,1,0,0"))
                  (rule "nnf_imp2or" (formula "1") (term "0,0"))
                   (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "4")))
                  (rule "true_left" (formula "1"))
                  (rule "nnf_imp2or" (formula "1") (term "0,0,0"))
                  (rule "nnf_notAnd" (formula "1") (term "0,0,0,0"))
                   (builtin "One Step Simplification" (formula "1"))
                  (rule "nnf_imp2or" (formula "1") (term "1,0,0,0"))
                  (rule "nnf_notOr" (formula "1") (term "0,0,0,0,0"))
                  (rule "nnf_notAnd" (formula "1") (term "0,1,0,0,0"))
                   (builtin "One Step Simplification" (formula "1"))
                  (rule "commute_or" (formula "1") (term "0,0,0,0"))
                  (rule "commute_or_2" (formula "1") (term "0,0,0"))
                  (rule "Class_axiom_0_in_de_polyas_core3_open_cred_CredTool" (inst "seq=seq") (inst "i=i") (inst "str=str") (inst "seq_0=seq_0") (inst "i_0=i_0") (inst "sv_heap=anon(heapAtPre_A<<anonHeapFunction>>,
     empty,
     anon_heap_mod<<anonHeapFunction>>)"))
                   (builtin "One Step Simplification" (formula "1"))
                  (rule "andLeft" (formula "1"))
                  (rule "castedGetAny" (formula "1") (term "0,0,0,0,0"))
                  (rule "castedGetAny" (formula "1") (term "0,0,1,0,0"))
                  (rule "castedGetAny" (formula "2") (term "0,1,1,0,0,0"))
                  (rule "nnf_imp2or" (formula "1") (term "0,0"))
                   (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "5")))
                  (rule "true_left" (formula "1"))
                  (rule "nnf_imp2or" (formula "1") (term "0,0,0"))
                  (rule "nnf_imp2or" (formula "1") (term "1,0,0,0"))
                  (rule "nnf_notAnd" (formula "1") (term "0,0,0,0"))
                   (builtin "One Step Simplification" (formula "1"))
                  (rule "nnf_notAnd" (formula "1") (term "0,1,0,0,0"))
                   (builtin "One Step Simplification" (formula "1"))
                  (rule "nnf_notOr" (formula "1") (term "0,0,0,0,0"))
                  (rule "nnf_notOr" (formula "1") (term "1,0,0,0,0,0"))
                  (rule "Class_axiom_0_in_de_polyas_core3_open_cred_CredTool" (inst "seq=seq") (inst "i=i") (inst "str=str") (inst "seq_0=seq_0") (inst "i_0=i_0") (inst "sv_heap=heapAfter_mod_A_0"))
                  (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "1,0,0,0,0,0,1") (ifseqformula "30"))
                  (rule "andLeft" (formula "1"))
                  (rule "castedGetAny" (formula "2") (term "0,1,1,0,0,0"))
                  (rule "castedGetAny" (formula "1") (term "0,0,0,0,0"))
                  (rule "castedGetAny" (formula "1") (term "0,0,1,0,0"))
                  (rule "nnf_imp2or" (formula "1") (term "0,0"))
                   (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "6")))
                  (rule "true_left" (formula "1"))
                  (rule "nnf_imp2or" (formula "1") (term "0,0,0"))
                  (rule "nnf_imp2or" (formula "1") (term "1,0,0,0"))
                  (rule "nnf_notAnd" (formula "1") (term "0,0,0,0"))
                   (builtin "One Step Simplification" (formula "1"))
                  (rule "nnf_notAnd" (formula "1") (term "0,1,0,0,0"))
                   (builtin "One Step Simplification" (formula "1"))
                  (rule "nnf_notOr" (formula "1") (term "0,0,0,0,0"))
                  (rule "nnf_notOr" (formula "1") (term "1,0,0,0,0,0"))
                  (rule "Class_axiom_0_in_de_polyas_core3_open_cred_CredTool" (inst "seq=seq") (inst "i=i") (inst "str=str") (inst "seq_0=seq_0") (inst "i_0=i_0") (inst "sv_heap=anon(heapAfter_mod_A_0,
     empty,
     anon_heap_multiply<<anonHeapFunction>>)"))
                   (builtin "One Step Simplification" (formula "1"))
                  (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,1,0,0,0,0,0,1") (ifseqformula "30"))
                  (rule "andLeft" (formula "1"))
                  (rule "castedGetAny" (formula "1") (term "0,0,0,0,0"))
                  (rule "castedGetAny" (formula "1") (term "0,0,1,0,0"))
                  (rule "castedGetAny" (formula "2") (term "0,1,1,0,0,0"))
                  (rule "nnf_imp2or" (formula "1") (term "0,0"))
                   (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "6")))
                  (rule "true_left" (formula "1"))
                  (rule "nnf_imp2or" (formula "1") (term "0,0,0"))
                  (rule "nnf_notAnd" (formula "1") (term "0,0,0,0"))
                   (builtin "One Step Simplification" (formula "1"))
                  (rule "nnf_imp2or" (formula "1") (term "1,0,0,0"))
                  (rule "nnf_notOr" (formula "1") (term "0,0,0,0,0"))
                  (rule "nnf_notAnd" (formula "1") (term "0,1,0,0,0"))
                   (builtin "One Step Simplification" (formula "1"))
                  (rule "nnf_notOr" (formula "1") (term "1,0,0,0,0,0"))
                  (rule "nnf_notOr" (formula "1") (term "0,1,0,0,0,0,0"))
                  (rule "Class_axiom_0_in_de_polyas_core3_open_cred_CredTool" (inst "seq=seq") (inst "i=i") (inst "str=str") (inst "seq_0=seq_0") (inst "i_0=i_0") (inst "sv_heap=heapAfter_multiply_A_1"))
                  (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "1,0,0,0,0,0,1") (ifseqformula "38"))
                  (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,1,0,0,0,0,0,1") (ifseqformula "31"))
                  (rule "andLeft" (formula "1"))
                  (rule "castedGetAny" (formula "1") (term "0,0,0,0,0"))
                  (rule "castedGetAny" (formula "1") (term "0,0,1,0,0"))
                  (rule "castedGetAny" (formula "2") (term "0,1,1,0,0,0"))
                  (rule "nnf_imp2or" (formula "1") (term "0,0"))
                   (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "7")))
                  (rule "true_left" (formula "1"))
                  (rule "nnf_imp2or" (formula "1") (term "0,0,0"))
                  (rule "nnf_imp2or" (formula "1") (term "1,0,0,0"))
                  (rule "nnf_notAnd" (formula "1") (term "0,0,0,0"))
                   (builtin "One Step Simplification" (formula "1"))
                  (rule "nnf_notOr" (formula "1") (term "0,0,0,0,0"))
                  (rule "nnf_notAnd" (formula "1") (term "0,1,0,0,0"))
                   (builtin "One Step Simplification" (formula "1"))
                  (rule "nnf_notOr" (formula "1") (term "1,0,0,0,0,0"))
                  (rule "nnf_notOr" (formula "1") (term "0,1,0,0,0,0,0"))
                  (rule "Class_axiom_0_in_de_polyas_core3_open_cred_CredTool" (inst "seq=seq") (inst "i=i") (inst "str=str") (inst "seq_0=seq_0") (inst "i_0=i_0") (inst "sv_heap=heapAtPost_A"))
                  (rule "andLeft" (formula "1"))
                  (rule "castedGetAny" (formula "2") (term "0,1,1,0,0,0"))
                  (rule "castedGetAny" (formula "1") (term "0,0,1,0,0"))
                  (rule "castedGetAny" (formula "1") (term "0,0,0,0,0"))
                  (rule "applyEqRigid" (formula "2") (term "0,0,1,0,0,0,0,0") (ifseqformula "47"))
                  (rule "selectCreatedOfAnonAsFormulaEQ" (formula "2") (term "1,0,0,0,0,0") (ifseqformula "39"))
                  (rule "selectCreatedOfAnonAsFormulaEQ" (formula "2") (term "0,1,0,0,0,0,0") (ifseqformula "32"))
                  (rule "nnf_imp2or" (formula "1") (term "0,0"))
                   (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "7")))
                  (rule "true_left" (formula "1"))
                  (rule "nnf_imp2or" (formula "1") (term "0,0,0"))
                  (rule "nnf_imp2or" (formula "1") (term "1,0,0,0"))
                  (rule "nnf_notAnd" (formula "1") (term "0,0,0,0"))
                   (builtin "One Step Simplification" (formula "1"))
                  (rule "nnf_notOr" (formula "1") (term "0,0,0,0,0"))
                  (rule "nnf_notAnd" (formula "1") (term "0,1,0,0,0"))
                   (builtin "One Step Simplification" (formula "1"))
                  (rule "nnf_notOr" (formula "1") (term "1,0,0,0,0,0"))
                  (rule "nnf_notOr" (formula "1") (term "0,1,0,0,0,0,0"))
                  (rule "Class_axiom_0_in_de_polyas_core3_open_cred_CredTool" (inst "seq=seq") (inst "i=i") (inst "str=str") (inst "seq_0=seq_0") (inst "i_0=i_0") (inst "sv_heap=anon(heapAtPre_B<<anonHeapFunction>>,
     empty,
     anon_heap_mod<<anonHeapFunction>>)"))
                   (builtin "One Step Simplification" (formula "1"))
                  (rule "andLeft" (formula "1"))
                  (rule "castedGetAny" (formula "1") (term "0,0,0,0,0"))
                  (rule "castedGetAny" (formula "1") (term "0,0,1,0,0"))
                  (rule "castedGetAny" (formula "2") (term "0,1,1,0,0,0"))
                  (rule "nnf_imp2or" (formula "1") (term "0,0"))
                   (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "7")))
                  (rule "true_left" (formula "1"))
                  (rule "nnf_imp2or" (formula "1") (term "0,0,0"))
                  (rule "nnf_notAnd" (formula "1") (term "0,0,0,0"))
                   (builtin "One Step Simplification" (formula "1"))
                  (rule "nnf_imp2or" (formula "1") (term "1,0,0,0"))
                  (rule "nnf_notOr" (formula "1") (term "0,0,0,0,0"))
                  (rule "nnf_notAnd" (formula "1") (term "0,1,0,0,0"))
                   (builtin "One Step Simplification" (formula "1"))
                  (rule "nnf_notOr" (formula "1") (term "1,0,0,0,0,0"))
                  (rule "Class_axiom_0_in_de_polyas_core3_open_cred_CredTool" (inst "seq=seq") (inst "i=i") (inst "str=str") (inst "seq_0=seq_0") (inst "i_0=i_0") (inst "sv_heap=heapAfter_mod_B_0"))
                  (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "1,0,0,0,0,0,1") (ifseqformula "67"))
                  (rule "andLeft" (formula "1"))
                  (rule "castedGetAny" (formula "1") (term "0,0,1,0,0"))
                  (rule "castedGetAny" (formula "2") (term "0,1,1,0,0,0"))
                  (rule "castedGetAny" (formula "1") (term "0,0,0,0,0"))
                  (rule "nnf_imp2or" (formula "1") (term "0,0"))
                   (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "8")))
                  (rule "true_left" (formula "1"))
                  (rule "nnf_imp2or" (formula "1") (term "0,0,0"))
                  (rule "nnf_imp2or" (formula "1") (term "1,0,0,0"))
                  (rule "nnf_notAnd" (formula "1") (term "0,0,0,0"))
                   (builtin "One Step Simplification" (formula "1"))
                  (rule "nnf_notAnd" (formula "1") (term "0,1,0,0,0"))
                   (builtin "One Step Simplification" (formula "1"))
                  (rule "nnf_notOr" (formula "1") (term "0,0,0,0,0"))
                  (rule "nnf_notOr" (formula "1") (term "1,0,0,0,0,0"))
                  (rule "Class_axiom_0_in_de_polyas_core3_open_cred_CredTool" (inst "seq=seq") (inst "i=i") (inst "str=str") (inst "seq_0=seq_0") (inst "i_0=i_0") (inst "sv_heap=anon(heapAfter_mod_B_0,
     empty,
     anon_heap_multiply<<anonHeapFunction>>)"))
                   (builtin "One Step Simplification" (formula "1"))
                  (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,1,0,0,0,0,0,1") (ifseqformula "67"))
                  (rule "andLeft" (formula "1"))
                  (rule "castedGetAny" (formula "1") (term "0,0,1,0,0"))
                  (rule "castedGetAny" (formula "2") (term "0,1,1,0,0,0"))
                  (rule "castedGetAny" (formula "1") (term "0,0,0,0,0"))
                  (rule "nnf_imp2or" (formula "1") (term "0,0"))
                   (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "8")))
                  (rule "true_left" (formula "1"))
                  (rule "nnf_imp2or" (formula "1") (term "0,0,0"))
                  (rule "nnf_imp2or" (formula "1") (term "1,0,0,0"))
                  (rule "nnf_notAnd" (formula "1") (term "0,0,0,0"))
                   (builtin "One Step Simplification" (formula "1"))
                  (rule "nnf_notAnd" (formula "1") (term "0,1,0,0,0"))
                   (builtin "One Step Simplification" (formula "1"))
                  (rule "nnf_notOr" (formula "1") (term "0,0,0,0,0"))
                  (rule "nnf_notOr" (formula "1") (term "1,0,0,0,0,0"))
                  (rule "nnf_notOr" (formula "1") (term "0,1,0,0,0,0,0"))
                  (rule "Class_axiom_0_in_de_polyas_core3_open_cred_CredTool" (inst "seq=seq") (inst "i=i") (inst "str=str") (inst "seq_0=seq_0") (inst "i_0=i_0") (inst "sv_heap=heapAfter_multiply_B_1"))
                  (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "1,0,0,0,0,0,1") (ifseqformula "75"))
                  (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,1,0,0,0,0,0,1") (ifseqformula "68"))
                  (rule "andLeft" (formula "1"))
                  (rule "castedGetAny" (formula "2") (term "0,1,1,0,0,0"))
                  (rule "castedGetAny" (formula "1") (term "0,0,0,0,0"))
                  (rule "castedGetAny" (formula "1") (term "0,0,1,0,0"))
                  (rule "nnf_imp2or" (formula "1") (term "0,0"))
                   (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "9")))
                  (rule "true_left" (formula "1"))
                  (rule "nnf_imp2or" (formula "1") (term "0,0,0"))
                  (rule "nnf_imp2or" (formula "1") (term "1,0,0,0"))
                  (rule "nnf_notAnd" (formula "1") (term "0,0,0,0"))
                   (builtin "One Step Simplification" (formula "1"))
                  (rule "nnf_notAnd" (formula "1") (term "0,1,0,0,0"))
                   (builtin "One Step Simplification" (formula "1"))
                  (rule "nnf_notOr" (formula "1") (term "0,0,0,0,0"))
                  (rule "nnf_notOr" (formula "1") (term "1,0,0,0,0,0"))
                  (rule "nnf_notOr" (formula "1") (term "0,1,0,0,0,0,0"))
                  (rule "Class_axiom_0_in_de_polyas_core3_open_cred_CredTool" (inst "seq=seq") (inst "i=i") (inst "str=str") (inst "seq_0=seq_0") (inst "i_0=i_0") (inst "sv_heap=heapAtPost_B"))
                  (rule "andLeft" (formula "1"))
                  (rule "castedGetAny" (formula "2") (term "0,1,1,0,0,0"))
                  (rule "castedGetAny" (formula "1") (term "0,0,1,0,0"))
                  (rule "castedGetAny" (formula "1") (term "0,0,0,0,0"))
                  (rule "applyEqRigid" (formula "2") (term "0,0,1,0,0,0,0,0") (ifseqformula "83"))
                  (rule "selectCreatedOfAnonAsFormulaEQ" (formula "2") (term "1,0,0,0,0,0") (ifseqformula "76"))
                  (rule "selectCreatedOfAnonAsFormulaEQ" (formula "2") (term "0,1,0,0,0,0,0") (ifseqformula "69"))
                  (rule "nnf_imp2or" (formula "1") (term "0,0"))
                   (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "9")))
                  (rule "true_left" (formula "1"))
                  (rule "nnf_imp2or" (formula "1") (term "0,0,0"))
                  (rule "nnf_imp2or" (formula "1") (term "1,0,0,0"))
                  (rule "nnf_notAnd" (formula "1") (term "0,0,0,0"))
                   (builtin "One Step Simplification" (formula "1"))
                  (rule "nnf_notOr" (formula "1") (term "0,0,0,0,0"))
                  (rule "nnf_notAnd" (formula "1") (term "0,1,0,0,0"))
                   (builtin "One Step Simplification" (formula "1"))
                  (rule "nnf_notOr" (formula "1") (term "1,0,0,0,0,0"))
                  (rule "nnf_notOr" (formula "1") (term "0,1,0,0,0,0,0"))
                  (rule "div_axiom" (formula "34") (term "0,1") (inst "quotient=quotient_0"))
                  (rule "polySimp_mulComm0" (formula "34") (term "0,1,0,1"))
                  (rule "polySimp_mulComm0" (formula "34") (term "0,2,1,1"))
                  (rule "polySimp_mulComm0" (formula "34") (term "1,1,1,1,1"))
                  (rule "polySimp_mulComm0" (formula "34") (term "0,1,1,1"))
                  (rule "commute_or" (formula "4") (term "0,0,0,0"))
                  (rule "shift_paren_or" (formula "5") (term "0,0,0,0"))
                  (rule "commute_and" (formula "6") (term "1,0,0,0"))
                  (rule "commute_or" (formula "6") (term "1,0,0,0,0,0"))
                  (rule "commute_or" (formula "4") (term "0,1,0,0,0"))
                  (rule "commute_and" (formula "5") (term "1,0,0,0"))
                  (rule "ifthenelse_split" (formula "9") (term "0"))
                  (branch " resultAtPost_226_A.<created>@anon_heap_mod«anonHeapFunction» = TRUE TRUE"
                     (rule "applyEqReverse" (formula "107") (term "1") (ifseqformula "10"))
                     (rule "hideAuxiliaryEq" (formula "10"))
                     (rule "replace_known_left" (formula "42") (term "0") (ifseqformula "9"))
                      (builtin "One Step Simplification" (formula "42"))
                     (rule "true_left" (formula "42"))
                     (rule "commute_or" (formula "3") (term "0,0,0,0"))
                     (rule "commute_or" (formula "3") (term "0,1,0,0,0"))
                     (rule "commute_or" (formula "2") (term "0,0,0,0"))
                     (rule "onlyCreatedObjectsAreReferenced" (formula "98") (term "0") (ifseqformula "56"))
                     (rule "replace_known_left" (formula "1") (term "1") (ifseqformula "62"))
                      (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "99")))
                     (rule "true_left" (formula "1"))
                     (rule "onlyCreatedObjectsAreReferenced" (formula "27") (term "1,0") (ifseqformula "22"))
                     (rule "replace_known_right" (formula "27") (term "0") (ifseqformula "98"))
                      (builtin "One Step Simplification" (formula "27") (ifInst ""  (formula "28")))
                     (rule "true_left" (formula "27"))
                     (rule "onlyCreatedObjectsAreReferenced" (formula "14") (term "1,0") (ifseqformula "22"))
                     (rule "replace_known_right" (formula "14") (term "0") (ifseqformula "92"))
                      (builtin "One Step Simplification" (formula "14") (ifInst ""  (formula "15")))
                     (rule "true_left" (formula "14"))
                     (rule "onlyCreatedObjectsAreReferenced" (formula "94") (term "0") (ifseqformula "56"))
                     (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "95"))
                      (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "50")))
                     (rule "true_left" (formula "1"))
                     (rule "onlyCreatedObjectsAreReferenced" (formula "31") (term "2") (ifseqformula "22"))
                     (rule "replace_known_right" (formula "31") (term "0") (ifseqformula "96"))
                      (builtin "One Step Simplification" (formula "31") (ifInst ""  (formula "16")))
                     (rule "true_left" (formula "31"))
                     (rule "onlyCreatedObjectsAreReferenced" (formula "14") (term "1,1,0") (ifseqformula "22"))
                     (rule "replace_known_right" (formula "14") (term "0") (ifseqformula "94"))
                      (builtin "One Step Simplification" (formula "14") (ifInst ""  (formula "16")))
                     (rule "true_left" (formula "14"))
                     (rule "onlyCreatedObjectsAreReferenced" (formula "48") (term "1,0") (ifseqformula "56"))
                     (rule "replace_known_right" (formula "48") (term "0") (ifseqformula "93"))
                      (builtin "One Step Simplification" (formula "48") (ifInst ""  (formula "49")))
                     (rule "true_left" (formula "48"))
                     (rule "onlyCreatedObjectsAreReferenced" (formula "65") (term "2") (ifseqformula "56"))
                     (rule "replace_known_right" (formula "65") (term "0") (ifseqformula "97"))
                      (builtin "One Step Simplification" (formula "65") (ifInst ""  (formula "50")))
                     (rule "true_left" (formula "65"))
                     (rule "commute_or" (formula "2") (term "0,1,0,0,0"))
                     (rule "commute_or" (formula "1") (term "0,0,0,0"))
                     (rule "commute_or" (formula "1") (term "0,1,0,0,0"))
                     (rule "commute_or_2" (formula "4") (term "0,0,0"))
                     (rule "commute_or_2" (formula "3") (term "0,0,0"))
                     (rule "commute_and" (formula "34") (term "0,1"))
                     (rule "commute_or_2" (formula "2") (term "0,0,0"))
                     (rule "commute_or_2" (formula "1") (term "0,0,0"))
                     (rule "commute_or" (formula "5") (term "1,0,0,0,0,0"))
                     (rule "shift_paren_or" (formula "6") (term "0,0,0,0,0"))
                      (builtin "One Step Simplification" (formula "6"))
                     (rule "commute_or_2" (formula "6") (term "0,0,0,0"))
                     (rule "shift_paren_or" (formula "4") (term "0,0,0,0"))
                     (rule "commute_or_2" (formula "3") (term "1,0,0,0,0"))
                     (rule "commute_or_2" (formula "2") (term "1,0,0,0,0"))
                     (rule "commute_or_2" (formula "1") (term "1,0,0,0,0"))
                     (rule "shift_paren_or" (formula "3") (term "0,0,0,0"))
                     (rule "shift_paren_or" (formula "2") (term "0,0,0,0"))
                     (rule "shift_paren_or" (formula "1") (term "0,0,0,0"))
                     (rule "cnf_rightDist" (formula "6") (term "0,0,0"))
                     (rule "distr_forallAnd" (formula "6") (term "0,0"))
                     (rule "distr_forallAnd" (formula "6") (term "0"))
                     (rule "distr_forallAnd" (formula "6"))
                     (rule "andLeft" (formula "6"))
                     (rule "commute_or_2" (formula "6") (term "0,0,0"))
                      (builtin "One Step Simplification" (formula "6"))
                     (rule "eqSymm" (formula "6") (term "1,0,0,0,0"))
                     (rule "castedGetAny" (formula "6") (term "0,0,0,0,0,0"))
                     (rule "castedGetAny" (formula "6") (term "1,0,0,1,0,0,0"))
                     (rule "castedGetAny" (formula "6") (term "0,1,0,0,0,0"))
                      (builtin "One Step Simplification" (formula "6"))
                     (rule "true_left" (formula "6"))
                     (rule "shift_paren_or" (formula "6") (term "0,0,0"))
                      (builtin "One Step Simplification" (formula "6"))
                     (rule "eqSymm" (formula "6") (term "1,1,0,0,0"))
                     (rule "castedGetAny" (formula "6") (term "0,0,1,0,0,0"))
                     (rule "castedGetAny" (formula "6") (term "0,0,0,0,0,0"))
                     (rule "castedGetAny" (formula "6") (term "0,1,1,0,0,0"))
                      (builtin "One Step Simplification" (formula "6"))
                     (rule "true_left" (formula "6"))
                     (rule "commute_and" (formula "4") (term "1,0,0,0"))
                     (rule "commute_and" (formula "3") (term "1,0,0,0"))
                     (rule "commute_and" (formula "2") (term "1,0,0,0"))
                     (rule "commute_and" (formula "1") (term "1,0,0,0"))
                     (rule "shift_paren_or" (formula "5") (term "0,0,0,0,0"))
                      (builtin "One Step Simplification" (formula "5"))
                     (rule "commute_or_2" (formula "5") (term "0,0,0,0"))
                     (rule "shift_paren_or" (formula "4") (term "0,0,0,0,0"))
                      (builtin "One Step Simplification" (formula "4"))
                     (rule "commute_or_2" (formula "4") (term "0,0,0,0"))
                     (rule "shift_paren_or" (formula "3") (term "0,0,0,0,0"))
                      (builtin "One Step Simplification" (formula "3"))
                     (rule "shift_paren_or" (formula "2") (term "0,0,0,0,0"))
                      (builtin "One Step Simplification" (formula "2"))
                     (rule "shift_paren_or" (formula "1") (term "0,0,0,0,0"))
                      (builtin "One Step Simplification" (formula "1"))
                     (rule "cnf_rightDist" (formula "5") (term "0,0,0"))
                     (rule "distr_forallAnd" (formula "5") (term "0,0"))
                     (rule "distr_forallAnd" (formula "5") (term "0"))
                     (rule "distr_forallAnd" (formula "5"))
                     (rule "andLeft" (formula "5"))
                     (rule "commute_or_2" (formula "5") (term "0,0,0"))
                      (builtin "One Step Simplification" (formula "5"))
                     (rule "eqSymm" (formula "5") (term "1,0,0,0,0"))
                     (rule "castedGetAny" (formula "5") (term "1,0,0,1,0,0,0"))
                     (rule "castedGetAny" (formula "5") (term "0,0,0,0,0,0"))
                     (rule "castedGetAny" (formula "5") (term "0,1,0,0,0,0"))
                      (builtin "One Step Simplification" (formula "5"))
                     (rule "true_left" (formula "5"))
                     (rule "shift_paren_or" (formula "5") (term "0,0,0"))
                      (builtin "One Step Simplification" (formula "5"))
                     (rule "eqSymm" (formula "5") (term "1,1,0,0,0"))
                     (rule "castedGetAny" (formula "5") (term "0,0,1,0,0,0"))
                     (rule "castedGetAny" (formula "5") (term "0,0,0,0,0,0"))
                     (rule "castedGetAny" (formula "5") (term "0,1,1,0,0,0"))
                      (builtin "One Step Simplification" (formula "5"))
                     (rule "true_left" (formula "5"))
                     (rule "cnf_rightDist" (formula "4") (term "0,0,0"))
                     (rule "distr_forallAnd" (formula "4") (term "0,0"))
                     (rule "distr_forallAnd" (formula "4") (term "0"))
                     (rule "distr_forallAnd" (formula "4"))
                     (rule "andLeft" (formula "4"))
                     (rule "cnf_rightDist" (formula "3") (term "0,0,0"))
                     (rule "distr_forallAnd" (formula "3") (term "0,0"))
                     (rule "distr_forallAnd" (formula "3") (term "0"))
                     (rule "distr_forallAnd" (formula "3"))
                     (rule "andLeft" (formula "3"))
                     (rule "shift_paren_or" (formula "5") (term "0,0,0"))
                      (builtin "One Step Simplification" (formula "5"))
                     (rule "eqSymm" (formula "5") (term "1,1,0,0,0"))
                     (rule "castedGetAny" (formula "5") (term "0,0,1,0,0,0"))
                     (rule "castedGetAny" (formula "5") (term "0,0,0,0,0,0"))
                     (rule "castedGetAny" (formula "5") (term "0,1,1,0,0,0"))
                      (builtin "One Step Simplification" (formula "5"))
                     (rule "true_left" (formula "5"))
                     (rule "cnf_rightDist" (formula "2") (term "0,0,0"))
                     (rule "distr_forallAnd" (formula "2") (term "0,0"))
                     (rule "distr_forallAnd" (formula "2") (term "0"))
                     (rule "distr_forallAnd" (formula "2"))
                     (rule "andLeft" (formula "2"))
                     (rule "cnf_rightDist" (formula "1") (term "0,0,0"))
                     (rule "distr_forallAnd" (formula "1") (term "0,0"))
                     (rule "distr_forallAnd" (formula "1") (term "0"))
                     (rule "distr_forallAnd" (formula "1"))
                     (rule "andLeft" (formula "1"))
                     (rule "shift_paren_or" (formula "3") (term "0,0,0"))
                      (builtin "One Step Simplification" (formula "3"))
                     (rule "eqSymm" (formula "3") (term "1,1,0,0,0"))
                     (rule "castedGetAny" (formula "3") (term "0,0,0,0,0,0"))
                     (rule "castedGetAny" (formula "3") (term "0,0,1,0,0,0"))
                     (rule "castedGetAny" (formula "3") (term "0,1,1,0,0,0"))
                      (builtin "One Step Simplification" (formula "3"))
                     (rule "true_left" (formula "3"))
                     (rule "cnf_rightDist" (formula "4") (term "0,0,0"))
                     (rule "distr_forallAnd" (formula "4") (term "0,0"))
                     (rule "distr_forallAnd" (formula "4") (term "0"))
                     (rule "distr_forallAnd" (formula "4"))
                     (rule "andLeft" (formula "4"))
                     (rule "commute_or_2" (formula "4") (term "0,0,0"))
                      (builtin "One Step Simplification" (formula "4"))
                     (rule "eqSymm" (formula "4") (term "1,0,0,0,0"))
                     (rule "castedGetAny" (formula "4") (term "0,0,0,0,0,0"))
                     (rule "castedGetAny" (formula "4") (term "1,0,0,1,0,0,0"))
                     (rule "castedGetAny" (formula "4") (term "0,1,0,0,0,0"))
                      (builtin "One Step Simplification" (formula "4"))
                     (rule "true_left" (formula "4"))
                     (rule "cnf_rightDist" (formula "3") (term "0,0,0"))
                     (rule "distr_forallAnd" (formula "3") (term "0,0"))
                     (rule "distr_forallAnd" (formula "3") (term "0"))
                     (rule "distr_forallAnd" (formula "3"))
                     (rule "andLeft" (formula "3"))
                     (rule "shift_paren_or" (formula "5") (term "0,0,0"))
                      (builtin "One Step Simplification" (formula "5"))
                     (rule "eqSymm" (formula "5") (term "1,1,0,0,0"))
                     (rule "castedGetAny" (formula "5") (term "0,0,1,0,0,0"))
                     (rule "castedGetAny" (formula "5") (term "1,0,0,0,0,0,0"))
                     (rule "castedGetAny" (formula "5") (term "0,1,1,0,0,0"))
                      (builtin "One Step Simplification" (formula "5"))
                     (rule "true_left" (formula "5"))
                     (rule "cnf_rightDist" (formula "2") (term "0,0,0"))
                     (rule "distr_forallAnd" (formula "2") (term "0,0"))
                     (rule "distr_forallAnd" (formula "2") (term "0"))
                     (rule "distr_forallAnd" (formula "2"))
                     (rule "andLeft" (formula "2"))
                     (rule "commute_or_2" (formula "2") (term "0,0,0"))
                      (builtin "One Step Simplification" (formula "2"))
                     (rule "eqSymm" (formula "2") (term "1,0,0,0,0"))
                     (rule "castedGetAny" (formula "2") (term "1,0,0,1,0,0,0"))
                     (rule "castedGetAny" (formula "2") (term "0,0,0,0,0,0"))
                     (rule "castedGetAny" (formula "2") (term "0,1,0,0,0,0"))
                      (builtin "One Step Simplification" (formula "2"))
                     (rule "true_left" (formula "2"))
                     (rule "shift_paren_or" (formula "4") (term "0,0,0"))
                      (builtin "One Step Simplification" (formula "4"))
                     (rule "eqSymm" (formula "4") (term "1,1,0,0,0"))
                     (rule "castedGetAny" (formula "4") (term "1,0,0,0,0,0,0"))
                     (rule "castedGetAny" (formula "4") (term "0,0,1,0,0,0"))
                     (rule "castedGetAny" (formula "4") (term "0,1,1,0,0,0"))
                      (builtin "One Step Simplification" (formula "4"))
                     (rule "true_left" (formula "4"))
                     (rule "cnf_rightDist" (formula "1") (term "0,0,0"))
                     (rule "distr_forallAnd" (formula "1") (term "0,0"))
                     (rule "distr_forallAnd" (formula "1") (term "0"))
                     (rule "distr_forallAnd" (formula "1"))
                     (rule "andLeft" (formula "1"))
                     (rule "shift_paren_or" (formula "3") (term "0,0,0"))
                      (builtin "One Step Simplification" (formula "3"))
                     (rule "eqSymm" (formula "3") (term "1,1,0,0,0"))
                     (rule "castedGetAny" (formula "3") (term "1,0,0,0,0,0,0"))
                     (rule "castedGetAny" (formula "3") (term "0,0,1,0,0,0"))
                     (rule "castedGetAny" (formula "3") (term "0,1,1,0,0,0"))
                      (builtin "One Step Simplification" (formula "3"))
                     (rule "true_left" (formula "3"))
                     (rule "ifthenelse_split_for" (formula "31") (term "1,1"))
                     (branch "result_228_A_1.value@heapAtPre_A«anonHeapFunction» ≥ 0 TRUE"
                        (rule "cnf_rightDist" (formula "32"))
                        (rule "andLeft" (formula "32"))
                        (rule "commute_or" (formula "33"))
                        (rule "cnf_rightDist" (formula "32"))
                        (rule "andLeft" (formula "32"))
                        (rule "commute_or" (formula "33"))
                        (rule "cnf_rightDist" (formula "3") (term "0,0,0"))
                        (rule "distr_forallAnd" (formula "3") (term "0,0"))
                        (rule "distr_forallAnd" (formula "3") (term "0"))
                        (rule "distr_forallAnd" (formula "3"))
                        (rule "andLeft" (formula "3"))
                        (rule "shift_paren_or" (formula "2") (term "0,0,0"))
                         (builtin "One Step Simplification" (formula "2"))
                        (rule "eqSymm" (formula "2") (term "1,1,0,0,0"))
                        (rule "castedGetAny" (formula "2") (term "1,0,0,0,0,0,0"))
                        (rule "castedGetAny" (formula "2") (term "0,0,1,0,0,0"))
                        (rule "castedGetAny" (formula "2") (term "0,1,1,0,0,0"))
                         (builtin "One Step Simplification" (formula "2"))
                        (rule "true_left" (formula "2"))
                        (rule "commute_or_2" (formula "2") (term "0,0,0"))
                         (builtin "One Step Simplification" (formula "2"))
                        (rule "eqSymm" (formula "2") (term "1,0,0,0,0"))
                        (rule "castedGetAny" (formula "2") (term "0,0,0,0,0,0"))
                        (rule "castedGetAny" (formula "2") (term "1,0,0,1,0,0,0"))
                        (rule "castedGetAny" (formula "2") (term "0,1,0,0,0,0"))
                         (builtin "One Step Simplification" (formula "2"))
                        (rule "true_left" (formula "2"))
                        (rule "shift_paren_or" (formula "2") (term "0,0,0"))
                         (builtin "One Step Simplification" (formula "2"))
                        (rule "eqSymm" (formula "2") (term "1,1,0,0,0"))
                        (rule "castedGetAny" (formula "2") (term "0,0,1,0,0,0"))
                        (rule "castedGetAny" (formula "2") (term "1,0,0,0,0,0,0"))
                        (rule "castedGetAny" (formula "2") (term "0,1,1,0,0,0"))
                         (builtin "One Step Simplification" (formula "2"))
                        (rule "true_left" (formula "2"))
                        (rule "cnf_rightDist" (formula "1") (term "0,0,0"))
                        (rule "distr_forallAnd" (formula "1") (term "0,0"))
                        (rule "distr_forallAnd" (formula "1") (term "0"))
                        (rule "distr_forallAnd" (formula "1"))
                        (rule "andLeft" (formula "1"))
                        (rule "commute_or_2" (formula "1") (term "0,0,0"))
                         (builtin "One Step Simplification" (formula "1"))
                        (rule "eqSymm" (formula "1") (term "1,0,0,0,0"))
                        (rule "castedGetAny" (formula "1") (term "0,0,0,0,0,0"))
                        (rule "castedGetAny" (formula "1") (term "1,0,0,1,0,0,0"))
                        (rule "castedGetAny" (formula "1") (term "0,1,0,0,0,0"))
                         (builtin "One Step Simplification" (formula "1"))
                        (rule "true_left" (formula "1"))
                        (rule "shift_paren_or" (formula "1") (term "0,0,0"))
                         (builtin "One Step Simplification" (formula "1"))
                        (rule "eqSymm" (formula "1") (term "1,1,0,0,0"))
                        (rule "castedGetAny" (formula "1") (term "1,0,0,0,0,0,0"))
                        (rule "castedGetAny" (formula "1") (term "0,0,1,0,0,0"))
                        (rule "castedGetAny" (formula "1") (term "0,1,1,0,0,0"))
                         (builtin "One Step Simplification" (formula "1"))
                        (rule "true_left" (formula "1"))
                        (rule "cut_direct" (formula "29") (term "0"))
                        (branch "CUT: result_228_A_1.value@heapAtPre_A«anonHeapFunction» = 0 TRUE"
                            (builtin "One Step Simplification" (formula "30"))
                           (rule "true_left" (formula "30"))
                           (rule "replace_known_left" (formula "31") (term "0") (ifseqformula "29"))
                            (builtin "One Step Simplification" (formula "31"))
                           (rule "true_left" (formula "31"))
                           (rule "replace_known_left" (formula "30") (term "0") (ifseqformula "29"))
                            (builtin "One Step Simplification" (formula "30"))
                           (rule "true_left" (formula "30"))
                           (rule "applyEq" (formula "28") (term "0") (ifseqformula "29"))
                           (rule "qeq_literals" (formula "28"))
                           (rule "true_left" (formula "28"))
                           (rule "applyEq" (formula "29") (term "1,0") (ifseqformula "28"))
                           (rule "eqSymm" (formula "29"))
                           (rule "polySimp_homoEq" (formula "29"))
                           (rule "polySimp_mulLiterals" (formula "29") (term "1,0"))
                           (rule "polySimp_elimOne" (formula "29") (term "1,0"))
                           (rule "applyEq" (formula "30") (term "1,0,0") (ifseqformula "28"))
                           (rule "polySimp_mulComm0" (formula "30") (term "0"))
                           (rule "applyEq" (formula "23") (term "1") (ifseqformula "28"))
                           (rule "applyEq" (formula "7") (term "1") (ifseqformula "28"))
                           (rule "applyEq" (formula "57") (term "1") (ifseqformula "28"))
                           (rule "applyEq" (formula "29") (term "1,1,0") (ifseqformula "28"))
                           (rule "polySimp_addComm0" (formula "29") (term "0"))
                           (rule "applyEq" (formula "30") (term "0,0") (ifseqformula "28"))
                           (rule "times_zero_2" (formula "30") (term "0"))
                           (rule "polySimp_homoEq" (formula "30"))
                           (rule "mul_literals" (formula "30") (term "1,0"))
                           (rule "add_zero_right" (formula "30") (term "0"))
                           (rule "polySimp_sepPosMonomial" (formula "29"))
                           (rule "polySimp_sepNegMonomial" (formula "30"))
                           (rule "polySimp_mulLiterals" (formula "30") (term "0"))
                           (rule "polySimp_elimOne" (formula "30") (term "0"))
                           (rule "applyEq" (formula "4") (term "0") (ifseqformula "30"))
                           (rule "applyEq" (formula "29") (term "0,0") (ifseqformula "30"))
                           (rule "eqSymm" (formula "29"))
                           (rule "polySimp_homoEq" (formula "29"))
                           (rule "polySimp_mulLiterals" (formula "29") (term "1,0"))
                           (rule "polySimp_elimOne" (formula "29") (term "1,0"))
                           (rule "applyEq" (formula "29") (term "0,0,1,0") (ifseqformula "30"))
                           (rule "polySimp_addComm0" (formula "29") (term "0"))
                           (rule "applyEq" (formula "6") (term "1") (ifseqformula "30"))
                           (rule "polySimp_sepPosMonomial" (formula "29"))
                           (rule "jdiv_axiom" (formula "29") (term "0"))
                           (rule "eqSymm" (formula "29"))
                           (rule "applyEq" (formula "29") (term "1") (ifseqformula "30"))
                            (builtin "One Step Simplification" (formula "29"))
                           (rule "eqSymm" (formula "29") (term "1"))
                           (rule "polySimp_homoEq" (formula "29") (term "1"))
                           (rule "polySimp_mulLiterals" (formula "29") (term "1,0,1"))
                           (rule "polySimp_elimOne" (formula "29") (term "1,0,1"))
                           (rule "polySimp_sepPosMonomial" (formula "29") (term "1"))
                           (rule "inEqSimp_contradInEq0" (formula "29") (term "0,0") (ifseqformula "4"))
                           (rule "qeq_literals" (formula "29") (term "0,0,0"))
                            (builtin "One Step Simplification" (formula "29"))
                           (rule "true_left" (formula "29"))
                           (rule "div_axiom" (formula "29") (term "0,1") (inst "quotient=quotient_1"))
                            (builtin "One Step Simplification" (formula "29"))
                           (rule "true_left" (formula "29"))
                           (rule "Use_information_flow_contract_for_compareTo_325434207" (formula "19") (ifseqformula "19"))
                            (builtin "One Step Simplification" (formula "19") (ifInst ""  (formula "92")) (ifInst ""  (formula "92")))
                           (rule "true_left" (formula "19"))
                           (rule "Use_information_flow_contract_for_getOrder_757678341" (formula "59") (ifseqformula "25"))
                           (rule "applyEq" (formula "59") (term "0,1,1") (ifseqformula "7"))
                           (rule "eqSymm" (formula "59") (term "1,1"))
                           (rule "replace_known_left" (formula "59") (term "1,1") (ifseqformula "28"))
                            (builtin "One Step Simplification" (formula "59"))
                           (rule "true_left" (formula "59"))
                           (rule "Use_information_flow_contract_for_getOrder_757678341" (formula "59") (ifseqformula "59"))
                            (builtin "One Step Simplification" (formula "59"))
                           (rule "true_left" (formula "59"))
                           (rule "Use_information_flow_contract_for_getOrder_757678341" (formula "25") (ifseqformula "25"))
                            (builtin "One Step Simplification" (formula "25"))
                           (rule "true_left" (formula "25"))
                           (rule "Use_information_flow_contract_for_compareTo_325434207" (formula "19") (ifseqformula "53"))
                           (rule "eqSymm" (formula "19") (term "1,1"))
                           (rule "eqSymm" (formula "19") (term "0,0,1"))
                           (rule "eqSymm" (formula "19") (term "1,0,1"))
                           (rule "replace_known_right" (formula "19") (term "0,1,1,0") (ifseqformula "93"))
                            (builtin "One Step Simplification" (formula "19") (ifInst ""  (formula "92")))
                           (rule "applyEqRigid" (formula "19") (term "0,1,0,1") (ifseqformula "55"))
                           (rule "eqSymm" (formula "19") (term "1,0,1"))
                           (rule "replace_known_left" (formula "19") (term "1,0,1") (ifseqformula "21"))
                            (builtin "One Step Simplification" (formula "19"))
                           (rule "applyEq" (formula "19") (term "0,0,1") (ifseqformula "6"))
                           (rule "eqSymm" (formula "19") (term "0,1"))
                           (rule "replace_known_left" (formula "19") (term "0,1") (ifseqformula "31"))
                            (builtin "One Step Simplification" (formula "19"))
                           (rule "Class_invariant_axiom_for_java_math_BigInteger" (formula "19") (term "1,0"))
                           (rule "replace_known_right" (formula "19") (term "0,0,1,0") (ifseqformula "93"))
                            (builtin "One Step Simplification" (formula "19") (ifInst ""  (formula "55")))
                           (rule "Class_invariant_axiom_for_java_math_BigInteger" (formula "19") (term "0"))
                           (rule "replace_known_right" (formula "19") (term "0,0,0") (ifseqformula "92"))
                            (builtin "One Step Simplification" (formula "19") (ifInst ""  (formula "21")))
                           (rule "applyEq" (formula "46") (term "0") (ifseqformula "19"))
                           (rule "applyEq" (formula "52") (term "0") (ifseqformula "19"))
                           (rule "applyEq" (formula "52") (term "4") (ifseqformula "19"))
                           (rule "Use_information_flow_contract_for_multiply_1272441881" (formula "69") (ifseqformula "37"))
                           (rule "replaceKnownSelect_taclet21_11" (formula "69") (term "1,1,1"))
                           (rule "replaceKnownSelect_taclet21_12" (formula "69") (term "0,1,1"))
                           (rule "replaceKnownAuxiliaryConstant_taclet0011121_19" (formula "69") (term "1,1,1"))
                           (rule "replaceKnownAuxiliaryConstant_taclet011121_18" (formula "69") (term "0,1,1"))
                           (rule "replaceKnownSelect_taclet21_9" (formula "69") (term "0,1,0,1"))
                           (rule "replaceKnownSelect_taclet21_8" (formula "69") (term "1,1,0,1"))
                           (rule "replaceKnownAuxiliaryConstant_taclet121_15" (formula "69") (term "0,1,0,1"))
                           (rule "replaceKnownAuxiliaryConstant_taclet21_10" (formula "69") (term "1,1,0,1"))
                           (rule "replaceKnownAuxiliaryConstant_taclet121_15" (formula "69") (term "1,1,0,1"))
                            (builtin "One Step Simplification" (formula "69") (ifInst ""  (formula "82")) (ifInst ""  (formula "81")) (ifInst ""  (formula "99")))
                           (rule "pullOutSelect" (formula "69") (term "1,0,1") (inst "selectSK=org_bouncycastle_math_ec_ECPoint_value_4"))
                           (rule "simplifySelectOfAnonEQ" (formula "69") (ifseqformula "27"))
                            (builtin "One Step Simplification" (formula "69") (ifInst ""  (formula "96")) (ifInst ""  (formula "14")))
                           (rule "applyEqReverse" (formula "70") (term "1,0,1") (ifseqformula "69"))
                           (rule "hideAuxiliaryEq" (formula "69"))
                           (rule "pullOutSelect" (formula "69") (term "0,0,1") (inst "selectSK=org_bouncycastle_math_ec_ECPoint_value_5"))
                           (rule "simplifySelectOfAnonEQ" (formula "69") (ifseqformula "60"))
                            (builtin "One Step Simplification" (formula "69") (ifInst ""  (formula "97")) (ifInst ""  (formula "48")))
                           (rule "applyEqReverse" (formula "70") (term "0,0,1") (ifseqformula "69"))
                           (rule "hideAuxiliaryEq" (formula "69"))
                           (rule "replace_known_left" (formula "69") (term "0,1") (ifseqformula "5"))
                            (builtin "One Step Simplification" (formula "69"))
                           (rule "notLeft" (formula "69"))
                           (rule "Class_invariant_axiom_for_org_bouncycastle_math_ec_ECPoint" (formula "75") (term "1"))
                            (builtin "One Step Simplification" (formula "75"))
                           (rule "Class_invariant_axiom_for_org_bouncycastle_math_ec_ECPoint" (formula "75"))
                           (rule "closeTrue" (formula "75"))
                        )
                        (branch "CUT: result_228_A_1.value@heapAtPre_A«anonHeapFunction» = 0 FALSE"
                            (builtin "One Step Simplification" (formula "29"))
                           (rule "replace_known_right" (formula "31") (term "0") (ifseqformula "79"))
                            (builtin "One Step Simplification" (formula "31"))
                           (rule "replace_known_right" (formula "30") (term "0") (ifseqformula "79"))
                            (builtin "One Step Simplification" (formula "30"))
                           (rule "applyEq" (formula "33") (term "0,0") (ifseqformula "30"))
                           (rule "polySimp_mulComm0" (formula "33") (term "0"))
                           (rule "applyEq" (formula "31") (term "0") (ifseqformula "33"))
                           (rule "inEqSimp_homoInEq1" (formula "31"))
                           (rule "polySimp_mulComm0" (formula "31") (term "1,0"))
                           (rule "polySimp_rightDist" (formula "31") (term "1,0"))
                           (rule "polySimp_mulLiterals" (formula "31") (term "1,1,0"))
                           (rule "polySimp_elimOne" (formula "31") (term "1,1,0"))
                           (rule "polySimp_mulComm0" (formula "31") (term "0,1,0"))
                           (rule "polySimp_addComm1" (formula "31") (term "0"))
                           (rule "polySimp_addAssoc" (formula "31") (term "0,0"))
                           (rule "polySimp_addComm1" (formula "31") (term "0,0,0"))
                           (rule "polySimp_pullOutFactor2b" (formula "31") (term "0,0"))
                           (rule "add_literals" (formula "31") (term "1,1,0,0"))
                           (rule "times_zero_1" (formula "31") (term "1,0,0"))
                           (rule "add_zero_right" (formula "31") (term "0,0"))
                           (rule "applyEq" (formula "29") (term "0") (ifseqformula "33"))
                           (rule "inEqSimp_homoInEq0" (formula "29"))
                           (rule "polySimp_mulComm0" (formula "29") (term "1,0"))
                           (rule "polySimp_rightDist" (formula "29") (term "1,0"))
                           (rule "polySimp_mulLiterals" (formula "29") (term "1,1,0"))
                           (rule "polySimp_elimOne" (formula "29") (term "1,1,0"))
                           (rule "polySimp_mulComm0" (formula "29") (term "0,1,0"))
                           (rule "polySimp_addAssoc" (formula "29") (term "0"))
                           (rule "polySimp_addComm0" (formula "29") (term "0,0"))
                           (rule "polySimp_pullOutFactor2b" (formula "29") (term "0"))
                           (rule "add_literals" (formula "29") (term "1,1,0"))
                           (rule "times_zero_1" (formula "29") (term "1,0"))
                           (rule "add_zero_right" (formula "29") (term "0"))
                           (rule "applyEq" (formula "32") (term "0,1") (ifseqformula "30"))
                           (rule "inEqSimp_sepNegMonomial0" (formula "31"))
                           (rule "polySimp_mulLiterals" (formula "31") (term "0"))
                           (rule "polySimp_elimOne" (formula "31") (term "0"))
                           (rule "inEqSimp_invertInEq1" (formula "29"))
                           (rule "polySimp_mulLiterals" (formula "29") (term "0"))
                           (rule "mul_literals" (formula "29") (term "1"))
                           (rule "polySimp_elimOne" (formula "29") (term "0"))
                           (rule "inEqSimp_strengthen1" (formula "28") (ifseqformula "79"))
                           (rule "add_literals" (formula "28") (term "1"))
                           (rule "inEqSimp_contradEq7" (formula "79") (ifseqformula "28"))
                           (rule "mul_literals" (formula "79") (term "1,0,0"))
                           (rule "add_zero_right" (formula "79") (term "0,0"))
                           (rule "leq_literals" (formula "79") (term "0"))
                            (builtin "One Step Simplification" (formula "79"))
                           (rule "false_right" (formula "79"))
                           (rule "Use_information_flow_contract_for_compareTo_325434207" (formula "19") (ifseqformula "19"))
                            (builtin "One Step Simplification" (formula "19") (ifInst ""  (formula "95")) (ifInst ""  (formula "95")))
                           (rule "true_left" (formula "19"))
                           (rule "Use_information_flow_contract_for_getOrder_757678341" (formula "62") (ifseqformula "25"))
                           (rule "replace_known_left" (formula "62") (term "1,1") (ifseqformula "7"))
                            (builtin "One Step Simplification" (formula "62"))
                           (rule "true_left" (formula "62"))
                           (rule "Use_information_flow_contract_for_getOrder_757678341" (formula "62") (ifseqformula "62"))
                            (builtin "One Step Simplification" (formula "62"))
                           (rule "true_left" (formula "62"))
                           (rule "Use_information_flow_contract_for_getOrder_757678341" (formula "25") (ifseqformula "25"))
                            (builtin "One Step Simplification" (formula "25"))
                           (rule "true_left" (formula "25"))
                           (rule "Use_information_flow_contract_for_compareTo_325434207" (formula "19") (ifseqformula "56"))
                           (rule "eqSymm" (formula "19") (term "1,0,1"))
                           (rule "eqSymm" (formula "19") (term "1,1"))
                           (rule "eqSymm" (formula "19") (term "0,0,1"))
                           (rule "replace_known_right" (formula "19") (term "0,1,1,0") (ifseqformula "96"))
                            (builtin "One Step Simplification" (formula "19") (ifInst ""  (formula "95")) (ifInst ""  (formula "6")))
                           (rule "applyEq" (formula "19") (term "0,0,1") (ifseqformula "58"))
                           (rule "eqSymm" (formula "19") (term "0,1"))
                           (rule "replace_known_left" (formula "19") (term "0,1") (ifseqformula "21"))
                            (builtin "One Step Simplification" (formula "19"))
                           (rule "Class_invariant_axiom_for_java_math_BigInteger" (formula "19") (term "1,0"))
                           (rule "replace_known_left" (formula "19") (term "1,1,0") (ifseqformula "58"))
                            (builtin "One Step Simplification" (formula "19") (ifInst ""  (formula "96")))
                           (rule "Class_invariant_axiom_for_java_math_BigInteger" (formula "19") (term "0"))
                           (rule "replace_known_right" (formula "19") (term "0,0,0") (ifseqformula "95"))
                            (builtin "One Step Simplification" (formula "19") (ifInst ""  (formula "21")))
                           (rule "applyEq" (formula "56") (term "0") (ifseqformula "19"))
                           (rule "applyEq" (formula "56") (term "4") (ifseqformula "19"))
                           (rule "applyEq" (formula "49") (term "0") (ifseqformula "19"))
                           (rule "Use_information_flow_contract_for_multiply_1272441881_0" (formula "72") (ifseqformula "40"))
                           (rule "replaceKnownSelect_taclet21_12" (formula "72") (term "0,1,1"))
                           (rule "replaceKnownSelect_taclet21_11" (formula "72") (term "1,1,1"))
                           (rule "replaceKnownAuxiliaryConstant_taclet011121_18" (formula "72") (term "0,1,1"))
                           (rule "replaceKnownAuxiliaryConstant_taclet0011121_19" (formula "72") (term "1,1,1"))
                           (rule "replaceKnownSelect_taclet21_9" (formula "72") (term "0,1,0,1"))
                           (rule "replaceKnownSelect_taclet21_8" (formula "72") (term "1,1,0,1"))
                           (rule "replaceKnownAuxiliaryConstant_taclet121_15" (formula "72") (term "0,1,0,1"))
                           (rule "replaceKnownAuxiliaryConstant_taclet21_10" (formula "72") (term "1,1,0,1"))
                           (rule "replaceKnownAuxiliaryConstant_taclet121_15" (formula "72") (term "1,1,0,1"))
                            (builtin "One Step Simplification" (formula "72") (ifInst ""  (formula "85")) (ifInst ""  (formula "84")) (ifInst ""  (formula "102")))
                           (rule "pullOutSelect" (formula "72") (term "0,0,1") (inst "selectSK=org_bouncycastle_math_ec_ECPoint_value_4"))
                           (rule "simplifySelectOfAnonEQ" (formula "72") (ifseqformula "63"))
                            (builtin "One Step Simplification" (formula "72") (ifInst ""  (formula "100")) (ifInst ""  (formula "51")))
                           (rule "applyEqReverse" (formula "73") (term "0,0,1") (ifseqformula "72"))
                           (rule "hideAuxiliaryEq" (formula "72"))
                           (rule "eqSymm" (formula "72") (term "0,1"))
                           (rule "applyEq" (formula "72") (term "1,0,1") (ifseqformula "5"))
                           (rule "pullOutSelect" (formula "72") (term "0,0,1") (inst "selectSK=org_bouncycastle_math_ec_ECPoint_value_5"))
                           (rule "simplifySelectOfAnonEQ" (formula "72") (ifseqformula "27"))
                            (builtin "One Step Simplification" (formula "72") (ifInst ""  (formula "99")) (ifInst ""  (formula "14")))
                           (rule "applyEqReverse" (formula "73") (term "0,0,1") (ifseqformula "72"))
                            (builtin "One Step Simplification" (formula "73"))
                           (rule "notLeft" (formula "73"))
                           (rule "hideAuxiliaryEq" (formula "72"))
                           (rule "Class_invariant_axiom_for_org_bouncycastle_math_ec_ECPoint" (formula "78") (term "0"))
                            (builtin "One Step Simplification" (formula "78"))
                           (rule "Class_invariant_axiom_for_org_bouncycastle_math_ec_ECPoint" (formula "78"))
                           (rule "closeTrue" (formula "78"))
                        )
                     )
                     (branch "result_228_A_1.value@heapAtPre_A«anonHeapFunction» ≥ 0 FALSE"
                        (rule "inEqSimp_geqRight" (formula "79"))
                        (rule "mul_literals" (formula "1") (term "1,0,0"))
                        (rule "add_zero_right" (formula "1") (term "0,0"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "1"))
                        (rule "mul_literals" (formula "1") (term "1"))
                        (rule "inEqSimp_contradEq3" (formula "32") (term "0") (ifseqformula "1"))
                        (rule "mul_literals" (formula "32") (term "1,0,0,0"))
                        (rule "add_zero_right" (formula "32") (term "0,0,0"))
                        (rule "qeq_literals" (formula "32") (term "0,0"))
                         (builtin "One Step Simplification" (formula "32"))
                        (rule "andLeft" (formula "32"))
                        (rule "andLeft" (formula "32"))
                        (rule "applyEq" (formula "36") (term "0,0") (ifseqformula "33"))
                        (rule "polySimp_mulComm0" (formula "36") (term "0"))
                        (rule "applyEq" (formula "34") (term "0") (ifseqformula "36"))
                        (rule "inEqSimp_homoInEq1" (formula "34"))
                        (rule "polySimp_mulComm0" (formula "34") (term "1,0"))
                        (rule "polySimp_rightDist" (formula "34") (term "1,0"))
                        (rule "polySimp_mulLiterals" (formula "34") (term "1,1,0"))
                        (rule "polySimp_elimOne" (formula "34") (term "1,1,0"))
                        (rule "polySimp_mulComm0" (formula "34") (term "0,1,0"))
                        (rule "polySimp_addComm1" (formula "34") (term "0"))
                        (rule "polySimp_addAssoc" (formula "34") (term "0,0"))
                        (rule "polySimp_addComm1" (formula "34") (term "0,0,0"))
                        (rule "polySimp_pullOutFactor2b" (formula "34") (term "0,0"))
                        (rule "add_literals" (formula "34") (term "1,1,0,0"))
                        (rule "times_zero_1" (formula "34") (term "1,0,0"))
                        (rule "add_zero_right" (formula "34") (term "0,0"))
                        (rule "applyEq" (formula "32") (term "0") (ifseqformula "36"))
                        (rule "inEqSimp_homoInEq0" (formula "32"))
                        (rule "polySimp_mulComm0" (formula "32") (term "1,0"))
                        (rule "polySimp_rightDist" (formula "32") (term "1,0"))
                        (rule "polySimp_mulLiterals" (formula "32") (term "1,1,0"))
                        (rule "polySimp_elimOne" (formula "32") (term "1,1,0"))
                        (rule "polySimp_mulComm0" (formula "32") (term "0,1,0"))
                        (rule "polySimp_addAssoc" (formula "32") (term "0"))
                        (rule "polySimp_addComm0" (formula "32") (term "0,0"))
                        (rule "polySimp_pullOutFactor2b" (formula "32") (term "0"))
                        (rule "add_literals" (formula "32") (term "1,1,0"))
                        (rule "times_zero_1" (formula "32") (term "1,0"))
                        (rule "add_zero_right" (formula "32") (term "0"))
                        (rule "applyEq" (formula "35") (term "0,1") (ifseqformula "33"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "34"))
                        (rule "polySimp_mulComm0" (formula "34") (term "1"))
                        (rule "polySimp_rightDist" (formula "34") (term "1"))
                        (rule "mul_literals" (formula "34") (term "0,1"))
                        (rule "polySimp_mulLiterals" (formula "34") (term "1,1"))
                        (rule "polySimp_elimOne" (formula "34") (term "1,1"))
                        (rule "inEqSimp_invertInEq1" (formula "32"))
                        (rule "mul_literals" (formula "32") (term "1"))
                        (rule "polySimp_mulLiterals" (formula "32") (term "0"))
                        (rule "polySimp_elimOne" (formula "32") (term "0"))
                        (rule "cnf_rightDist" (formula "4") (term "0,0,0"))
                        (rule "distr_forallAnd" (formula "4") (term "0,0"))
                        (rule "distr_forallAnd" (formula "4") (term "0"))
                        (rule "distr_forallAnd" (formula "4"))
                        (rule "andLeft" (formula "4"))
                        (rule "shift_paren_or" (formula "3") (term "0,0,0"))
                         (builtin "One Step Simplification" (formula "3"))
                        (rule "eqSymm" (formula "3") (term "1,1,0,0,0"))
                        (rule "castedGetAny" (formula "3") (term "1,0,0,0,0,0,0"))
                        (rule "castedGetAny" (formula "3") (term "0,0,1,0,0,0"))
                        (rule "castedGetAny" (formula "3") (term "0,1,1,0,0,0"))
                         (builtin "One Step Simplification" (formula "3"))
                        (rule "true_left" (formula "3"))
                        (rule "cnf_rightDist" (formula "2") (term "0,0,0"))
                        (rule "distr_forallAnd" (formula "2") (term "0,0"))
                        (rule "distr_forallAnd" (formula "2") (term "0"))
                        (rule "distr_forallAnd" (formula "2"))
                        (rule "andLeft" (formula "2"))
                        (rule "commute_or_2" (formula "3") (term "0,0,0"))
                         (builtin "One Step Simplification" (formula "3"))
                        (rule "eqSymm" (formula "3") (term "1,0,0,0,0"))
                        (rule "castedGetAny" (formula "3") (term "1,0,0,1,0,0,0"))
                        (rule "castedGetAny" (formula "3") (term "0,0,0,0,0,0"))
                        (rule "castedGetAny" (formula "3") (term "0,1,0,0,0,0"))
                         (builtin "One Step Simplification" (formula "3"))
                        (rule "true_left" (formula "3"))
                        (rule "commute_or_2" (formula "2") (term "0,0,0"))
                         (builtin "One Step Simplification" (formula "2"))
                        (rule "eqSymm" (formula "2") (term "1,0,0,0,0"))
                        (rule "castedGetAny" (formula "2") (term "1,0,0,1,0,0,0"))
                        (rule "castedGetAny" (formula "2") (term "0,0,0,0,0,0"))
                        (rule "castedGetAny" (formula "2") (term "0,1,0,0,0,0"))
                         (builtin "One Step Simplification" (formula "2"))
                        (rule "true_left" (formula "2"))
                        (rule "shift_paren_or" (formula "2") (term "0,0,0"))
                         (builtin "One Step Simplification" (formula "2"))
                        (rule "eqSymm" (formula "2") (term "1,1,0,0,0"))
                        (rule "castedGetAny" (formula "2") (term "1,0,0,0,0,0,0"))
                        (rule "castedGetAny" (formula "2") (term "0,0,1,0,0,0"))
                        (rule "castedGetAny" (formula "2") (term "0,1,1,0,0,0"))
                         (builtin "One Step Simplification" (formula "2"))
                        (rule "true_left" (formula "2"))
                        (rule "Use_information_flow_contract_for_compareTo_325434207" (formula "20") (ifseqformula "20"))
                         (builtin "One Step Simplification" (formula "20") (ifInst ""  (formula "95")) (ifInst ""  (formula "95")))
                        (rule "true_left" (formula "20"))
                        (rule "Use_information_flow_contract_for_getOrder_757678341" (formula "62") (ifseqformula "26"))
                        (rule "replace_known_left" (formula "62") (term "1,1") (ifseqformula "8"))
                         (builtin "One Step Simplification" (formula "62"))
                        (rule "true_left" (formula "62"))
                        (rule "Use_information_flow_contract_for_multiply_1272441881" (formula "73") (ifseqformula "39"))
                        (rule "replaceKnownSelect_taclet21_11" (formula "73") (term "1,1,1"))
                        (rule "replaceKnownSelect_taclet21_12" (formula "73") (term "0,1,1"))
                        (rule "replaceKnownAuxiliaryConstant_taclet0011121_19" (formula "73") (term "1,1,1"))
                        (rule "replaceKnownAuxiliaryConstant_taclet011121_18" (formula "73") (term "0,1,1"))
                        (rule "replaceKnownSelect_taclet21_8" (formula "73") (term "1,1,0,1"))
                        (rule "replaceKnownSelect_taclet21_9" (formula "73") (term "0,1,0,1"))
                        (rule "replaceKnownAuxiliaryConstant_taclet21_10" (formula "73") (term "1,1,0,1"))
                         (builtin "One Step Simplification" (formula "73") (ifInst ""  (formula "86")) (ifInst ""  (formula "85")) (ifInst ""  (formula "103")))
                        (rule "pullOutSelect" (formula "73") (term "0,0,1") (inst "selectSK=org_bouncycastle_math_ec_ECPoint_value_4"))
                        (rule "simplifySelectOfAnonEQ" (formula "73") (ifseqformula "64"))
                         (builtin "One Step Simplification" (formula "73") (ifInst ""  (formula "101")) (ifInst ""  (formula "51")))
                        (rule "applyEqReverse" (formula "74") (term "0,0,1") (ifseqformula "73"))
                        (rule "hideAuxiliaryEq" (formula "73"))
                        (rule "eqSymm" (formula "73") (term "0,1"))
                        (rule "applyEq" (formula "73") (term "1,0,1") (ifseqformula "6"))
                        (rule "pullOutSelect" (formula "73") (term "0,0,1") (inst "selectSK=org_bouncycastle_math_ec_ECPoint_value_5"))
                        (rule "simplifySelectOfAnonEQ" (formula "73") (ifseqformula "27"))
                         (builtin "One Step Simplification" (formula "73") (ifInst ""  (formula "100")) (ifInst ""  (formula "15")))
                        (rule "applyEqReverse" (formula "74") (term "0,0,1") (ifseqformula "73"))
                         (builtin "One Step Simplification" (formula "74"))
                        (rule "notLeft" (formula "74"))
                        (rule "hideAuxiliaryEq" (formula "73"))
                        (rule "Class_invariant_axiom_for_org_bouncycastle_math_ec_ECPoint" (formula "79") (term "1"))
                         (builtin "One Step Simplification" (formula "79"))
                        (rule "Class_invariant_axiom_for_org_bouncycastle_math_ec_ECPoint" (formula "79"))
                        (rule "closeTrue" (formula "79"))
                     )
                  )
                  (branch " resultAtPost_226_A.<created>@anon_heap_mod«anonHeapFunction» = TRUE FALSE"
                     (rule "applyEqReverse" (formula "107") (term "1") (ifseqformula "9"))
                     (rule "hideAuxiliaryEq" (formula "9"))
                     (rule "replace_known_right" (formula "41") (term "0") (ifseqformula "82"))
                      (builtin "One Step Simplification" (formula "41"))
                     (rule "commute_or" (formula "3") (term "0,0,0,0"))
                     (rule "commute_or" (formula "3") (term "0,1,0,0,0"))
                     (rule "commute_or" (formula "2") (term "0,0,0,0"))
                     (rule "onlyCreatedObjectsAreReferenced" (formula "30") (term "2") (ifseqformula "21"))
                     (rule "replace_known_left" (formula "30") (term "1") (ifseqformula "15"))
                      (builtin "One Step Simplification" (formula "30") (ifInst ""  (formula "97")))
                     (rule "true_left" (formula "30"))
                     (rule "onlyCreatedObjectsAreReferenced" (formula "13") (term "1,1,0") (ifseqformula "21"))
                     (rule "replace_known_right" (formula "13") (term "0") (ifseqformula "95"))
                      (builtin "One Step Simplification" (formula "13") (ifInst ""  (formula "15")))
                     (rule "true_left" (formula "13"))
                     (rule "onlyCreatedObjectsAreReferenced" (formula "99") (term "0") (ifseqformula "56"))
                     (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "100"))
                      (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "62")))
                     (rule "true_left" (formula "1"))
                     (rule "onlyCreatedObjectsAreReferenced" (formula "26") (term "1,0") (ifseqformula "21"))
                     (rule "replace_known_right" (formula "26") (term "0") (ifseqformula "99"))
                      (builtin "One Step Simplification" (formula "26") (ifInst ""  (formula "27")))
                     (rule "true_left" (formula "26"))
                     (rule "onlyCreatedObjectsAreReferenced" (formula "49") (term "1,0") (ifseqformula "56"))
                     (rule "replace_known_right" (formula "49") (term "0") (ifseqformula "96"))
                      (builtin "One Step Simplification" (formula "49") (ifInst ""  (formula "50")))
                     (rule "true_left" (formula "49"))
                     (rule "onlyCreatedObjectsAreReferenced" (formula "48") (term "1,0") (ifseqformula "56"))
                     (rule "replace_known_left" (formula "48") (term "1") (ifseqformula "49"))
                      (builtin "One Step Simplification" (formula "48") (ifInst ""  (formula "94")))
                     (rule "true_left" (formula "48"))
                     (rule "onlyCreatedObjectsAreReferenced" (formula "13") (term "1,0") (ifseqformula "21"))
                     (rule "replace_known_left" (formula "13") (term "1") (ifseqformula "14"))
                      (builtin "One Step Simplification" (formula "13") (ifInst ""  (formula "93")))
                     (rule "true_left" (formula "13"))
                     (rule "commute_or" (formula "2") (term "0,1,0,0,0"))
                     (rule "onlyCreatedObjectsAreReferenced" (formula "65") (term "2") (ifseqformula "56"))
                     (rule "replace_known_right" (formula "65") (term "0") (ifseqformula "98"))
                      (builtin "One Step Simplification" (formula "65") (ifInst ""  (formula "50")))
                     (rule "true_left" (formula "65"))
                     (rule "commute_or" (formula "1") (term "0,0,0,0"))
                     (rule "commute_or" (formula "1") (term "0,1,0,0,0"))
                     (rule "commute_or_2" (formula "4") (term "0,0,0"))
                     (rule "commute_or_2" (formula "3") (term "0,0,0"))
                     (rule "commute_and" (formula "33") (term "0,1"))
                     (rule "commute_or_2" (formula "2") (term "0,0,0"))
                     (rule "commute_or_2" (formula "1") (term "0,0,0"))
                     (rule "commute_or" (formula "5") (term "1,0,0,0,0,0"))
                     (rule "shift_paren_or" (formula "6") (term "0,0,0,0,0"))
                      (builtin "One Step Simplification" (formula "6"))
                     (rule "commute_or_2" (formula "6") (term "0,0,0,0"))
                     (rule "commute_or_2" (formula "4") (term "1,0,0,0,0"))
                     (rule "commute_or_2" (formula "3") (term "1,0,0,0,0"))
                     (rule "shift_paren_or" (formula "2") (term "0,0,0,0"))
                     (rule "shift_paren_or" (formula "1") (term "0,0,0,0"))
                     (rule "shift_paren_or" (formula "4") (term "0,0,0,0"))
                     (rule "shift_paren_or" (formula "3") (term "0,0,0,0"))
                     (rule "cnf_rightDist" (formula "6") (term "0,0,0"))
                     (rule "distr_forallAnd" (formula "6") (term "0,0"))
                     (rule "distr_forallAnd" (formula "6") (term "0"))
                     (rule "distr_forallAnd" (formula "6"))
                     (rule "andLeft" (formula "6"))
                     (rule "commute_or_2" (formula "6") (term "0,0,0"))
                      (builtin "One Step Simplification" (formula "6"))
                     (rule "eqSymm" (formula "6") (term "1,0,0,0,0"))
                     (rule "castedGetAny" (formula "6") (term "1,0,0,1,0,0,0"))
                     (rule "castedGetAny" (formula "6") (term "0,0,0,0,0,0"))
                     (rule "castedGetAny" (formula "6") (term "0,1,0,0,0,0"))
                      (builtin "One Step Simplification" (formula "6"))
                     (rule "true_left" (formula "6"))
                     (rule "shift_paren_or" (formula "6") (term "0,0,0"))
                      (builtin "One Step Simplification" (formula "6"))
                     (rule "eqSymm" (formula "6") (term "1,1,0,0,0"))
                     (rule "castedGetAny" (formula "6") (term "0,0,1,0,0,0"))
                     (rule "castedGetAny" (formula "6") (term "0,0,0,0,0,0"))
                     (rule "castedGetAny" (formula "6") (term "0,1,1,0,0,0"))
                      (builtin "One Step Simplification" (formula "6"))
                     (rule "true_left" (formula "6"))
                     (rule "commute_and" (formula "4") (term "1,0,0,0"))
                     (rule "commute_and" (formula "3") (term "1,0,0,0"))
                     (rule "commute_and" (formula "2") (term "1,0,0,0"))
                     (rule "commute_and" (formula "1") (term "1,0,0,0"))
                     (rule "shift_paren_or" (formula "5") (term "0,0,0,0,0"))
                      (builtin "One Step Simplification" (formula "5"))
                     (rule "commute_or_2" (formula "5") (term "0,0,0,0"))
                     (rule "shift_paren_or" (formula "2") (term "0,0,0,0,0"))
                      (builtin "One Step Simplification" (formula "2"))
                     (rule "commute_or_2" (formula "2") (term "0,0,0,0"))
                     (rule "shift_paren_or" (formula "1") (term "0,0,0,0,0"))
                      (builtin "One Step Simplification" (formula "1"))
                     (rule "commute_or_2" (formula "1") (term "0,0,0,0"))
                     (rule "shift_paren_or" (formula "4") (term "0,0,0,0,0"))
                      (builtin "One Step Simplification" (formula "4"))
                     (rule "shift_paren_or" (formula "3") (term "0,0,0,0,0"))
                      (builtin "One Step Simplification" (formula "3"))
                     (rule "cnf_rightDist" (formula "5") (term "0,0,0"))
                     (rule "distr_forallAnd" (formula "5") (term "0,0"))
                     (rule "distr_forallAnd" (formula "5") (term "0"))
                     (rule "distr_forallAnd" (formula "5"))
                     (rule "andLeft" (formula "5"))
                     (rule "commute_or_2" (formula "5") (term "0,0,0"))
                      (builtin "One Step Simplification" (formula "5"))
                     (rule "eqSymm" (formula "5") (term "1,0,0,0,0"))
                     (rule "castedGetAny" (formula "5") (term "0,0,0,0,0,0"))
                     (rule "castedGetAny" (formula "5") (term "1,0,0,1,0,0,0"))
                     (rule "castedGetAny" (formula "5") (term "0,1,0,0,0,0"))
                      (builtin "One Step Simplification" (formula "5"))
                     (rule "true_left" (formula "5"))
                     (rule "shift_paren_or" (formula "5") (term "0,0,0"))
                      (builtin "One Step Simplification" (formula "5"))
                     (rule "eqSymm" (formula "5") (term "1,1,0,0,0"))
                     (rule "castedGetAny" (formula "5") (term "0,0,0,0,0,0"))
                     (rule "castedGetAny" (formula "5") (term "0,0,1,0,0,0"))
                     (rule "castedGetAny" (formula "5") (term "0,1,1,0,0,0"))
                      (builtin "One Step Simplification" (formula "5"))
                     (rule "true_left" (formula "5"))
                     (rule "cnf_rightDist" (formula "2") (term "0,0,0"))
                     (rule "distr_forallAnd" (formula "2") (term "0,0"))
                     (rule "distr_forallAnd" (formula "2") (term "0"))
                     (rule "distr_forallAnd" (formula "2"))
                     (rule "andLeft" (formula "2"))
                     (rule "shift_paren_or" (formula "3") (term "0,0,0"))
                      (builtin "One Step Simplification" (formula "3"))
                     (rule "eqSymm" (formula "3") (term "1,1,0,0,0"))
                     (rule "castedGetAny" (formula "3") (term "0,0,1,0,0,0"))
                     (rule "castedGetAny" (formula "3") (term "0,0,0,0,0,0"))
                     (rule "castedGetAny" (formula "3") (term "0,1,1,0,0,0"))
                      (builtin "One Step Simplification" (formula "3"))
                     (rule "true_left" (formula "3"))
                     (rule "cnf_rightDist" (formula "1") (term "0,0,0"))
                     (rule "distr_forallAnd" (formula "1") (term "0,0"))
                     (rule "distr_forallAnd" (formula "1") (term "0"))
                     (rule "distr_forallAnd" (formula "1"))
                     (rule "andLeft" (formula "1"))
                     (rule "cnf_rightDist" (formula "5") (term "0,0,0"))
                     (rule "distr_forallAnd" (formula "5") (term "0,0"))
                     (rule "distr_forallAnd" (formula "5") (term "0"))
                     (rule "distr_forallAnd" (formula "5"))
                     (rule "andLeft" (formula "5"))
                     (rule "cnf_rightDist" (formula "4") (term "0,0,0"))
                     (rule "distr_forallAnd" (formula "4") (term "0,0"))
                     (rule "distr_forallAnd" (formula "4") (term "0"))
                     (rule "distr_forallAnd" (formula "4"))
                     (rule "andLeft" (formula "4"))
                     (rule "shift_paren_or" (formula "2") (term "0,0,0"))
                      (builtin "One Step Simplification" (formula "2"))
                     (rule "eqSymm" (formula "2") (term "1,1,0,0,0"))
                     (rule "castedGetAny" (formula "2") (term "0,0,0,0,0,0"))
                     (rule "castedGetAny" (formula "2") (term "0,0,1,0,0,0"))
                     (rule "castedGetAny" (formula "2") (term "0,1,1,0,0,0"))
                      (builtin "One Step Simplification" (formula "2"))
                     (rule "true_left" (formula "2"))
                     (rule "cnf_rightDist" (formula "2") (term "0,0,0"))
                     (rule "distr_forallAnd" (formula "2") (term "0,0"))
                     (rule "distr_forallAnd" (formula "2") (term "0"))
                     (rule "distr_forallAnd" (formula "2"))
                     (rule "andLeft" (formula "2"))
                     (rule "commute_or_2" (formula "2") (term "0,0,0"))
                      (builtin "One Step Simplification" (formula "2"))
                     (rule "eqSymm" (formula "2") (term "1,0,0,0,0"))
                     (rule "castedGetAny" (formula "2") (term "0,0,0,0,0,0"))
                     (rule "castedGetAny" (formula "2") (term "1,0,0,1,0,0,0"))
                     (rule "castedGetAny" (formula "2") (term "0,1,0,0,0,0"))
                      (builtin "One Step Simplification" (formula "2"))
                     (rule "true_left" (formula "2"))
                     (rule "shift_paren_or" (formula "2") (term "0,0,0"))
                      (builtin "One Step Simplification" (formula "2"))
                     (rule "eqSymm" (formula "2") (term "1,1,0,0,0"))
                     (rule "castedGetAny" (formula "2") (term "1,0,0,0,0,0,0"))
                     (rule "castedGetAny" (formula "2") (term "0,0,1,0,0,0"))
                     (rule "castedGetAny" (formula "2") (term "0,1,1,0,0,0"))
                      (builtin "One Step Simplification" (formula "2"))
                     (rule "true_left" (formula "2"))
                     (rule "cnf_rightDist" (formula "1") (term "0,0,0"))
                     (rule "distr_forallAnd" (formula "1") (term "0,0"))
                     (rule "distr_forallAnd" (formula "1") (term "0"))
                     (rule "distr_forallAnd" (formula "1"))
                     (rule "andLeft" (formula "1"))
                     (rule "cnf_rightDist" (formula "4") (term "0,0,0"))
                     (rule "distr_forallAnd" (formula "4") (term "0,0"))
                     (rule "distr_forallAnd" (formula "4") (term "0"))
                     (rule "distr_forallAnd" (formula "4"))
                     (rule "andLeft" (formula "4"))
                     (rule "commute_or_2" (formula "4") (term "0,0,0"))
                      (builtin "One Step Simplification" (formula "4"))
                     (rule "eqSymm" (formula "4") (term "1,0,0,0,0"))
                     (rule "castedGetAny" (formula "4") (term "1,0,0,1,0,0,0"))
                     (rule "castedGetAny" (formula "4") (term "0,0,0,0,0,0"))
                     (rule "castedGetAny" (formula "4") (term "0,1,0,0,0,0"))
                      (builtin "One Step Simplification" (formula "4"))
                     (rule "true_left" (formula "4"))
                     (rule "cnf_rightDist" (formula "3") (term "0,0,0"))
                     (rule "distr_forallAnd" (formula "3") (term "0,0"))
                     (rule "distr_forallAnd" (formula "3") (term "0"))
                     (rule "distr_forallAnd" (formula "3"))
                     (rule "andLeft" (formula "3"))
                     (rule "shift_paren_or" (formula "2") (term "0,0,0"))
                      (builtin "One Step Simplification" (formula "2"))
                     (rule "eqSymm" (formula "2") (term "1,1,0,0,0"))
                     (rule "castedGetAny" (formula "2") (term "1,0,0,0,0,0,0"))
                     (rule "castedGetAny" (formula "2") (term "0,0,1,0,0,0"))
                     (rule "castedGetAny" (formula "2") (term "0,1,1,0,0,0"))
                      (builtin "One Step Simplification" (formula "2"))
                     (rule "true_left" (formula "2"))
                     (rule "shift_paren_or" (formula "3") (term "0,0,0"))
                      (builtin "One Step Simplification" (formula "3"))
                     (rule "eqSymm" (formula "3") (term "1,1,0,0,0"))
                     (rule "castedGetAny" (formula "3") (term "1,0,0,0,0,0,0"))
                     (rule "castedGetAny" (formula "3") (term "0,0,1,0,0,0"))
                     (rule "castedGetAny" (formula "3") (term "0,1,1,0,0,0"))
                      (builtin "One Step Simplification" (formula "3"))
                     (rule "true_left" (formula "3"))
                     (rule "ifthenelse_split_for" (formula "29") (term "1,1"))
                     (branch "result_228_A_1.value@heapAtPre_A«anonHeapFunction» ≥ 0 TRUE"
                        (rule "cnf_rightDist" (formula "30"))
                        (rule "andLeft" (formula "30"))
                        (rule "commute_or" (formula "31"))
                        (rule "cnf_rightDist" (formula "30"))
                        (rule "andLeft" (formula "30"))
                        (rule "commute_or" (formula "31"))
                        (rule "cnf_rightDist" (formula "1") (term "0,0,0"))
                        (rule "distr_forallAnd" (formula "1") (term "0,0"))
                        (rule "distr_forallAnd" (formula "1") (term "0"))
                        (rule "distr_forallAnd" (formula "1"))
                        (rule "andLeft" (formula "1"))
                        (rule "commute_or_2" (formula "1") (term "0,0,0"))
                         (builtin "One Step Simplification" (formula "1"))
                        (rule "eqSymm" (formula "1") (term "1,0,0,0,0"))
                        (rule "castedGetAny" (formula "1") (term "1,0,0,1,0,0,0"))
                        (rule "castedGetAny" (formula "1") (term "0,0,0,0,0,0"))
                        (rule "castedGetAny" (formula "1") (term "0,1,0,0,0,0"))
                         (builtin "One Step Simplification" (formula "1"))
                        (rule "true_left" (formula "1"))
                        (rule "shift_paren_or" (formula "1") (term "0,0,0"))
                         (builtin "One Step Simplification" (formula "1"))
                        (rule "eqSymm" (formula "1") (term "1,1,0,0,0"))
                        (rule "castedGetAny" (formula "1") (term "1,0,0,0,0,0,0"))
                        (rule "castedGetAny" (formula "1") (term "0,0,1,0,0,0"))
                        (rule "castedGetAny" (formula "1") (term "0,1,1,0,0,0"))
                         (builtin "One Step Simplification" (formula "1"))
                        (rule "true_left" (formula "1"))
                        (rule "cnf_rightDist" (formula "1") (term "0,0,0"))
                        (rule "distr_forallAnd" (formula "1") (term "0,0"))
                        (rule "distr_forallAnd" (formula "1") (term "0"))
                        (rule "distr_forallAnd" (formula "1"))
                        (rule "andLeft" (formula "1"))
                        (rule "commute_or_2" (formula "1") (term "0,0,0"))
                         (builtin "One Step Simplification" (formula "1"))
                        (rule "eqSymm" (formula "1") (term "1,0,0,0,0"))
                        (rule "castedGetAny" (formula "1") (term "0,0,0,0,0,0"))
                        (rule "castedGetAny" (formula "1") (term "1,0,0,1,0,0,0"))
                        (rule "castedGetAny" (formula "1") (term "0,1,0,0,0,0"))
                         (builtin "One Step Simplification" (formula "1"))
                        (rule "true_left" (formula "1"))
                        (rule "shift_paren_or" (formula "1") (term "0,0,0"))
                         (builtin "One Step Simplification" (formula "1"))
                        (rule "eqSymm" (formula "1") (term "1,1,0,0,0"))
                        (rule "castedGetAny" (formula "1") (term "1,0,0,0,0,0,0"))
                        (rule "castedGetAny" (formula "1") (term "0,0,1,0,0,0"))
                        (rule "castedGetAny" (formula "1") (term "0,1,1,0,0,0"))
                         (builtin "One Step Simplification" (formula "1"))
                        (rule "true_left" (formula "1"))
                        (rule "cut_direct" (formula "28") (term "0"))
                        (branch "CUT: result_228_A_1.value@heapAtPre_A«anonHeapFunction» = 0 TRUE"
                            (builtin "One Step Simplification" (formula "29"))
                           (rule "true_left" (formula "29"))
                           (rule "replace_known_left" (formula "30") (term "0") (ifseqformula "28"))
                            (builtin "One Step Simplification" (formula "30"))
                           (rule "true_left" (formula "30"))
                           (rule "replace_known_left" (formula "29") (term "0") (ifseqformula "28"))
                            (builtin "One Step Simplification" (formula "29"))
                           (rule "true_left" (formula "29"))
                           (rule "applyEq" (formula "30") (term "1,0,0") (ifseqformula "28"))
                           (rule "polySimp_mulComm0" (formula "30") (term "0"))
                           (rule "applyEq" (formula "27") (term "0") (ifseqformula "28"))
                           (rule "qeq_literals" (formula "27"))
                           (rule "true_left" (formula "27"))
                           (rule "applyEq" (formula "28") (term "1,0") (ifseqformula "27"))
                           (rule "eqSymm" (formula "28"))
                           (rule "polySimp_homoEq" (formula "28"))
                           (rule "polySimp_mulLiterals" (formula "28") (term "1,0"))
                           (rule "polySimp_elimOne" (formula "28") (term "1,0"))
                           (rule "applyEq" (formula "57") (term "1") (ifseqformula "27"))
                           (rule "applyEq" (formula "22") (term "1") (ifseqformula "27"))
                           (rule "applyEq" (formula "6") (term "1") (ifseqformula "27"))
                           (rule "applyEq" (formula "29") (term "0,0") (ifseqformula "27"))
                           (rule "times_zero_2" (formula "29") (term "0"))
                           (rule "polySimp_homoEq" (formula "29"))
                           (rule "mul_literals" (formula "29") (term "1,0"))
                           (rule "add_zero_right" (formula "29") (term "0"))
                           (rule "applyEq" (formula "28") (term "1,1,0") (ifseqformula "27"))
                           (rule "polySimp_addComm0" (formula "28") (term "0"))
                           (rule "polySimp_sepNegMonomial" (formula "29"))
                           (rule "polySimp_mulLiterals" (formula "29") (term "0"))
                           (rule "polySimp_elimOne" (formula "29") (term "0"))
                           (rule "applyEq" (formula "3") (term "0") (ifseqformula "29"))
                           (rule "applyEq" (formula "28") (term "0,1,0") (ifseqformula "29"))
                           (rule "polySimp_addComm0" (formula "28") (term "0"))
                           (rule "applyEq" (formula "28") (term "0,0,1,0") (ifseqformula "29"))
                           (rule "polySimp_addComm0" (formula "28") (term "0"))
                           (rule "applyEq" (formula "5") (term "1") (ifseqformula "29"))
                           (rule "polySimp_sepPosMonomial" (formula "28"))
                           (rule "div_axiom" (formula "28") (term "0,1") (inst "quotient=quotient_1"))
                            (builtin "One Step Simplification" (formula "28"))
                           (rule "true_left" (formula "28"))
                           (rule "jdiv_axiom" (formula "28") (term "0"))
                           (rule "eqSymm" (formula "28"))
                           (rule "applyEq" (formula "28") (term "1") (ifseqformula "29"))
                            (builtin "One Step Simplification" (formula "28"))
                           (rule "eqSymm" (formula "28") (term "1"))
                           (rule "polySimp_homoEq" (formula "28") (term "1"))
                           (rule "polySimp_mulLiterals" (formula "28") (term "1,0,1"))
                           (rule "polySimp_elimOne" (formula "28") (term "1,0,1"))
                           (rule "polySimp_sepPosMonomial" (formula "28") (term "1"))
                           (rule "inEqSimp_contradInEq0" (formula "28") (term "0,0") (ifseqformula "3"))
                           (rule "qeq_literals" (formula "28") (term "0,0,0"))
                            (builtin "One Step Simplification" (formula "28"))
                           (rule "true_left" (formula "28"))
                           (rule "Use_information_flow_contract_for_compareTo_325434207" (formula "18") (ifseqformula "18"))
                            (builtin "One Step Simplification" (formula "18") (ifInst ""  (formula "93")) (ifInst ""  (formula "93")))
                           (rule "true_left" (formula "18"))
                           (rule "Use_information_flow_contract_for_getOrder_757678341" (formula "59") (ifseqformula "24"))
                           (rule "applyEq" (formula "59") (term "0,0,1") (ifseqformula "57"))
                           (rule "eqSymm" (formula "59") (term "0,1"))
                           (rule "replace_known_left" (formula "59") (term "0,1") (ifseqformula "22"))
                            (builtin "One Step Simplification" (formula "59"))
                           (rule "applyEq" (formula "59") (term "0,1") (ifseqformula "6"))
                           (rule "eqSymm" (formula "59") (term "1"))
                           (rule "replace_known_left" (formula "59") (term "1") (ifseqformula "27"))
                            (builtin "One Step Simplification" (formula "59"))
                           (rule "true_left" (formula "59"))
                           (rule "Use_information_flow_contract_for_getOrder_757678341" (formula "59") (ifseqformula "59"))
                            (builtin "One Step Simplification" (formula "59"))
                           (rule "true_left" (formula "59"))
                           (rule "Use_information_flow_contract_for_compareTo_325434207" (formula "53") (ifseqformula "18"))
                           (rule "replace_known_right" (formula "53") (term "0,1,0,0") (ifseqformula "94"))
                            (builtin "One Step Simplification" (formula "53") (ifInst ""  (formula "93")))
                           (rule "applyEqRigid" (formula "53") (term "0,1,0,1") (ifseqformula "55"))
                           (rule "eqSymm" (formula "53") (term "1,0,1"))
                           (rule "replace_known_left" (formula "53") (term "1,0,1") (ifseqformula "19"))
                            (builtin "One Step Simplification" (formula "53"))
                           (rule "applyEq" (formula "53") (term "0,0,1") (ifseqformula "5"))
                           (rule "eqSymm" (formula "53") (term "0,1"))
                           (rule "replace_known_left" (formula "53") (term "0,1") (ifseqformula "29"))
                            (builtin "One Step Simplification" (formula "53"))
                           (rule "Class_invariant_axiom_for_java_math_BigInteger" (formula "53") (term "1,0"))
                           (rule "replace_known_left" (formula "53") (term "1,1,0") (ifseqformula "19"))
                            (builtin "One Step Simplification" (formula "53") (ifInst ""  (formula "93")))
                           (rule "Class_invariant_axiom_for_java_math_BigInteger" (formula "53") (term "0"))
                           (rule "replace_known_left" (formula "53") (term "1,0") (ifseqformula "55"))
                            (builtin "One Step Simplification" (formula "53") (ifInst ""  (formula "94")))
                           (rule "applyEq" (formula "54") (term "4") (ifseqformula "53"))
                           (rule "applyEq" (formula "45") (term "0") (ifseqformula "53"))
                           (rule "applyEq" (formula "51") (term "0") (ifseqformula "52"))
                           (rule "Use_information_flow_contract_for_getOrder_757678341" (formula "24") (ifseqformula "24"))
                            (builtin "One Step Simplification" (formula "24"))
                           (rule "true_left" (formula "24"))
                           (rule "Use_information_flow_contract_for_getOrder_757678341" (formula "24") (ifseqformula "58"))
                           (rule "eqSymm" (formula "24") (term "0,1"))
                           (rule "eqSymm" (formula "24") (term "1,1"))
                           (rule "applyEq" (formula "24") (term "0,1,1") (ifseqformula "6"))
                           (rule "eqSymm" (formula "24") (term "1,1"))
                           (rule "replace_known_left" (formula "24") (term "1,1") (ifseqformula "28"))
                            (builtin "One Step Simplification" (formula "24"))
                           (rule "true_left" (formula "24"))
                           (rule "Use_information_flow_contract_for_multiply_1272441881" (formula "69") (ifseqformula "36"))
                           (rule "replaceKnownSelect_taclet21_12" (formula "69") (term "0,1,1"))
                           (rule "replaceKnownSelect_taclet21_11" (formula "69") (term "1,1,1"))
                           (rule "replaceKnownAuxiliaryConstant_taclet011121_18" (formula "69") (term "0,1,1"))
                           (rule "replaceKnownAuxiliaryConstant_taclet1011121_19" (formula "69") (term "1,1,1"))
                           (rule "replaceKnownSelect_taclet21_8" (formula "69") (term "1,1,0,1"))
                           (rule "replaceKnownSelect_taclet21_9" (formula "69") (term "0,1,0,1"))
                           (rule "replaceKnownAuxiliaryConstant_taclet21_10" (formula "69") (term "1,1,0,1"))
                            (builtin "One Step Simplification" (formula "69") (ifInst ""  (formula "83")) (ifInst ""  (formula "82")) (ifInst ""  (formula "100")))
                           (rule "pullOutSelect" (formula "69") (term "0,0,1") (inst "selectSK=org_bouncycastle_math_ec_ECPoint_value_4"))
                           (rule "simplifySelectOfAnonEQ" (formula "69") (ifseqformula "60"))
                            (builtin "One Step Simplification" (formula "69") (ifInst ""  (formula "98")) (ifInst ""  (formula "47")))
                           (rule "applyEqReverse" (formula "70") (term "0,0,1") (ifseqformula "69"))
                           (rule "hideAuxiliaryEq" (formula "69"))
                           (rule "eqSymm" (formula "69") (term "0,1"))
                           (rule "applyEq" (formula "69") (term "1,0,1") (ifseqformula "4"))
                           (rule "pullOutSelect" (formula "69") (term "0,0,1") (inst "selectSK=org_bouncycastle_math_ec_ECPoint_value_5"))
                           (rule "simplifySelectOfAnonEQ" (formula "69") (ifseqformula "25"))
                            (builtin "One Step Simplification" (formula "69") (ifInst ""  (formula "97")) (ifInst ""  (formula "13")))
                           (rule "applyEqReverse" (formula "70") (term "0,0,1") (ifseqformula "69"))
                            (builtin "One Step Simplification" (formula "70"))
                           (rule "notLeft" (formula "70"))
                           (rule "hideAuxiliaryEq" (formula "69"))
                           (rule "Class_invariant_axiom_for_org_bouncycastle_math_ec_ECPoint" (formula "75") (term "0"))
                            (builtin "One Step Simplification" (formula "75"))
                           (rule "Class_invariant_axiom_for_org_bouncycastle_math_ec_ECPoint" (formula "75"))
                           (rule "closeTrue" (formula "75"))
                        )
                        (branch "CUT: result_228_A_1.value@heapAtPre_A«anonHeapFunction» = 0 FALSE"
                            (builtin "One Step Simplification" (formula "28"))
                           (rule "replace_known_right" (formula "29") (term "0") (ifseqformula "79"))
                            (builtin "One Step Simplification" (formula "29"))
                           (rule "replace_known_right" (formula "30") (term "0") (ifseqformula "79"))
                            (builtin "One Step Simplification" (formula "30"))
                           (rule "applyEq" (formula "32") (term "0,0") (ifseqformula "29"))
                           (rule "polySimp_mulComm0" (formula "32") (term "0"))
                           (rule "applyEq" (formula "30") (term "0") (ifseqformula "32"))
                           (rule "inEqSimp_homoInEq1" (formula "30"))
                           (rule "polySimp_mulComm0" (formula "30") (term "1,0"))
                           (rule "polySimp_rightDist" (formula "30") (term "1,0"))
                           (rule "polySimp_mulLiterals" (formula "30") (term "1,1,0"))
                           (rule "polySimp_elimOne" (formula "30") (term "1,1,0"))
                           (rule "polySimp_mulComm0" (formula "30") (term "0,1,0"))
                           (rule "polySimp_addComm1" (formula "30") (term "0"))
                           (rule "polySimp_addAssoc" (formula "30") (term "0,0"))
                           (rule "polySimp_addComm1" (formula "30") (term "0,0,0"))
                           (rule "polySimp_pullOutFactor2b" (formula "30") (term "0,0"))
                           (rule "add_literals" (formula "30") (term "1,1,0,0"))
                           (rule "times_zero_1" (formula "30") (term "1,0,0"))
                           (rule "add_zero_right" (formula "30") (term "0,0"))
                           (rule "applyEq" (formula "28") (term "0") (ifseqformula "32"))
                           (rule "inEqSimp_homoInEq0" (formula "28"))
                           (rule "polySimp_mulComm0" (formula "28") (term "1,0"))
                           (rule "polySimp_rightDist" (formula "28") (term "1,0"))
                           (rule "polySimp_mulLiterals" (formula "28") (term "1,1,0"))
                           (rule "polySimp_elimOne" (formula "28") (term "1,1,0"))
                           (rule "polySimp_mulComm0" (formula "28") (term "0,1,0"))
                           (rule "polySimp_addAssoc" (formula "28") (term "0"))
                           (rule "polySimp_addComm0" (formula "28") (term "0,0"))
                           (rule "polySimp_pullOutFactor2b" (formula "28") (term "0"))
                           (rule "add_literals" (formula "28") (term "1,1,0"))
                           (rule "times_zero_1" (formula "28") (term "1,0"))
                           (rule "add_zero_right" (formula "28") (term "0"))
                           (rule "applyEq" (formula "31") (term "0,1") (ifseqformula "29"))
                           (rule "inEqSimp_sepNegMonomial0" (formula "30"))
                           (rule "polySimp_mulLiterals" (formula "30") (term "0"))
                           (rule "polySimp_elimOne" (formula "30") (term "0"))
                           (rule "inEqSimp_invertInEq1" (formula "28"))
                           (rule "polySimp_mulLiterals" (formula "28") (term "0"))
                           (rule "mul_literals" (formula "28") (term "1"))
                           (rule "polySimp_elimOne" (formula "28") (term "0"))
                           (rule "inEqSimp_strengthen1" (formula "27") (ifseqformula "79"))
                           (rule "add_zero_right" (formula "27") (term "1"))
                           (rule "inEqSimp_contradEq7" (formula "79") (ifseqformula "27"))
                           (rule "times_zero_1" (formula "79") (term "1,0,0"))
                           (rule "add_literals" (formula "79") (term "0,0"))
                           (rule "leq_literals" (formula "79") (term "0"))
                            (builtin "One Step Simplification" (formula "79"))
                           (rule "false_right" (formula "79"))
                           (rule "Use_information_flow_contract_for_compareTo_325434207" (formula "18") (ifseqformula "18"))
                            (builtin "One Step Simplification" (formula "18") (ifInst ""  (formula "96")) (ifInst ""  (formula "96")))
                           (rule "true_left" (formula "18"))
                           (rule "Use_information_flow_contract_for_getOrder_757678341" (formula "62") (ifseqformula "24"))
                           (rule "replace_known_left" (formula "62") (term "1,1") (ifseqformula "6"))
                            (builtin "One Step Simplification" (formula "62"))
                           (rule "true_left" (formula "62"))
                           (rule "Use_information_flow_contract_for_multiply_1272441881" (formula "73") (ifseqformula "39"))
                           (rule "replaceKnownSelect_taclet21_12" (formula "73") (term "0,1,1"))
                           (rule "replaceKnownSelect_taclet21_11" (formula "73") (term "1,1,1"))
                           (rule "replaceKnownAuxiliaryConstant_taclet011121_18" (formula "73") (term "0,1,1"))
                           (rule "replaceKnownAuxiliaryConstant_taclet1011121_19" (formula "73") (term "1,1,1"))
                           (rule "replaceKnownSelect_taclet21_8" (formula "73") (term "1,1,0,1"))
                           (rule "replaceKnownSelect_taclet21_9" (formula "73") (term "0,1,0,1"))
                           (rule "replaceKnownAuxiliaryConstant_taclet21_10" (formula "73") (term "1,1,0,1"))
                            (builtin "One Step Simplification" (formula "73") (ifInst ""  (formula "87")) (ifInst ""  (formula "86")) (ifInst ""  (formula "104")))
                           (rule "pullOutSelect" (formula "73") (term "1,0,1") (inst "selectSK=org_bouncycastle_math_ec_ECPoint_value_4"))
                           (rule "simplifySelectOfAnonEQ" (formula "73") (ifseqformula "25"))
                            (builtin "One Step Simplification" (formula "73") (ifInst ""  (formula "101")) (ifInst ""  (formula "13")))
                           (rule "applyEqReverse" (formula "74") (term "1,0,1") (ifseqformula "73"))
                           (rule "hideAuxiliaryEq" (formula "73"))
                           (rule "pullOutSelect" (formula "73") (term "0,0,1") (inst "selectSK=org_bouncycastle_math_ec_ECPoint_value_5"))
                           (rule "simplifySelectOfAnonEQ" (formula "73") (ifseqformula "64"))
                            (builtin "One Step Simplification" (formula "73") (ifInst ""  (formula "102")) (ifInst ""  (formula "51")))
                           (rule "applyEqReverse" (formula "74") (term "0,0,1") (ifseqformula "73"))
                           (rule "hideAuxiliaryEq" (formula "73"))
                           (rule "replace_known_left" (formula "73") (term "0,1") (ifseqformula "4"))
                            (builtin "One Step Simplification" (formula "73"))
                           (rule "notLeft" (formula "73"))
                           (rule "Class_invariant_axiom_for_org_bouncycastle_math_ec_ECPoint" (formula "79") (term "0"))
                            (builtin "One Step Simplification" (formula "79"))
                           (rule "Class_invariant_axiom_for_org_bouncycastle_math_ec_ECPoint" (formula "79"))
                           (rule "closeTrue" (formula "79"))
                        )
                     )
                     (branch "result_228_A_1.value@heapAtPre_A«anonHeapFunction» ≥ 0 FALSE"
                        (rule "inEqSimp_geqRight" (formula "78"))
                        (rule "mul_literals" (formula "1") (term "1,0,0"))
                        (rule "add_zero_right" (formula "1") (term "0,0"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "1"))
                        (rule "mul_literals" (formula "1") (term "1"))
                        (rule "inEqSimp_contradEq3" (formula "30") (term "0") (ifseqformula "1"))
                        (rule "mul_literals" (formula "30") (term "1,0,0,0"))
                        (rule "add_literals" (formula "30") (term "0,0,0"))
                        (rule "qeq_literals" (formula "30") (term "0,0"))
                         (builtin "One Step Simplification" (formula "30"))
                        (rule "andLeft" (formula "30"))
                        (rule "andLeft" (formula "30"))
                        (rule "applyEq" (formula "34") (term "0,0") (ifseqformula "31"))
                        (rule "polySimp_mulComm0" (formula "34") (term "0"))
                        (rule "applyEq" (formula "32") (term "0") (ifseqformula "34"))
                        (rule "inEqSimp_homoInEq1" (formula "32"))
                        (rule "polySimp_mulComm0" (formula "32") (term "1,0"))
                        (rule "polySimp_rightDist" (formula "32") (term "1,0"))
                        (rule "polySimp_mulLiterals" (formula "32") (term "1,1,0"))
                        (rule "polySimp_elimOne" (formula "32") (term "1,1,0"))
                        (rule "polySimp_mulComm0" (formula "32") (term "0,1,0"))
                        (rule "polySimp_addComm1" (formula "32") (term "0"))
                        (rule "polySimp_addAssoc" (formula "32") (term "0,0"))
                        (rule "polySimp_addComm1" (formula "32") (term "0,0,0"))
                        (rule "polySimp_pullOutFactor2b" (formula "32") (term "0,0"))
                        (rule "add_literals" (formula "32") (term "1,1,0,0"))
                        (rule "times_zero_1" (formula "32") (term "1,0,0"))
                        (rule "add_zero_right" (formula "32") (term "0,0"))
                        (rule "applyEq" (formula "30") (term "0") (ifseqformula "34"))
                        (rule "inEqSimp_homoInEq0" (formula "30"))
                        (rule "polySimp_mulComm0" (formula "30") (term "1,0"))
                        (rule "polySimp_rightDist" (formula "30") (term "1,0"))
                        (rule "polySimp_mulLiterals" (formula "30") (term "1,1,0"))
                        (rule "polySimp_elimOne" (formula "30") (term "1,1,0"))
                        (rule "polySimp_mulComm0" (formula "30") (term "0,1,0"))
                        (rule "polySimp_addAssoc" (formula "30") (term "0"))
                        (rule "polySimp_addComm0" (formula "30") (term "0,0"))
                        (rule "polySimp_pullOutFactor2b" (formula "30") (term "0"))
                        (rule "add_literals" (formula "30") (term "1,1,0"))
                        (rule "times_zero_1" (formula "30") (term "1,0"))
                        (rule "add_zero_right" (formula "30") (term "0"))
                        (rule "applyEq" (formula "33") (term "0,1") (ifseqformula "31"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "32"))
                        (rule "polySimp_mulComm0" (formula "32") (term "1"))
                        (rule "polySimp_rightDist" (formula "32") (term "1"))
                        (rule "polySimp_mulLiterals" (formula "32") (term "1,1"))
                        (rule "mul_literals" (formula "32") (term "0,1"))
                        (rule "polySimp_elimOne" (formula "32") (term "1,1"))
                        (rule "inEqSimp_invertInEq1" (formula "30"))
                        (rule "polySimp_mulLiterals" (formula "30") (term "0"))
                        (rule "times_zero_2" (formula "30") (term "1"))
                        (rule "polySimp_elimOne" (formula "30") (term "0"))
                        (rule "cnf_rightDist" (formula "2") (term "0,0,0"))
                        (rule "distr_forallAnd" (formula "2") (term "0,0"))
                        (rule "distr_forallAnd" (formula "2") (term "0"))
                        (rule "distr_forallAnd" (formula "2"))
                        (rule "andLeft" (formula "2"))
                        (rule "cnf_rightDist" (formula "4") (term "0,0,0"))
                        (rule "distr_forallAnd" (formula "4") (term "0,0"))
                        (rule "distr_forallAnd" (formula "4") (term "0"))
                        (rule "distr_forallAnd" (formula "4"))
                        (rule "andLeft" (formula "4"))
                        (rule "commute_or_2" (formula "2") (term "0,0,0"))
                         (builtin "One Step Simplification" (formula "2"))
                        (rule "eqSymm" (formula "2") (term "1,0,0,0,0"))
                        (rule "castedGetAny" (formula "2") (term "1,0,0,1,0,0,0"))
                        (rule "castedGetAny" (formula "2") (term "0,0,0,0,0,0"))
                        (rule "castedGetAny" (formula "2") (term "0,1,0,0,0,0"))
                         (builtin "One Step Simplification" (formula "2"))
                        (rule "true_left" (formula "2"))
                        (rule "commute_or_2" (formula "3") (term "0,0,0"))
                         (builtin "One Step Simplification" (formula "3"))
                        (rule "eqSymm" (formula "3") (term "1,0,0,0,0"))
                        (rule "castedGetAny" (formula "3") (term "0,0,0,0,0,0"))
                        (rule "castedGetAny" (formula "3") (term "1,0,0,1,0,0,0"))
                        (rule "castedGetAny" (formula "3") (term "0,1,0,0,0,0"))
                         (builtin "One Step Simplification" (formula "3"))
                        (rule "true_left" (formula "3"))
                        (rule "shift_paren_or" (formula "2") (term "0,0,0"))
                         (builtin "One Step Simplification" (formula "2"))
                        (rule "eqSymm" (formula "2") (term "1,1,0,0,0"))
                        (rule "castedGetAny" (formula "2") (term "0,0,1,0,0,0"))
                        (rule "castedGetAny" (formula "2") (term "1,0,0,0,0,0,0"))
                        (rule "castedGetAny" (formula "2") (term "0,1,1,0,0,0"))
                         (builtin "One Step Simplification" (formula "2"))
                        (rule "true_left" (formula "2"))
                        (rule "Use_information_flow_contract_for_compareTo_325434207" (formula "19") (ifseqformula "19"))
                         (builtin "One Step Simplification" (formula "19") (ifInst ""  (formula "96")) (ifInst ""  (formula "96")))
                        (rule "true_left" (formula "19"))
                        (rule "Use_information_flow_contract_for_getOrder_757678341" (formula "62") (ifseqformula "25"))
                        (rule "replace_known_left" (formula "62") (term "1,1") (ifseqformula "7"))
                         (builtin "One Step Simplification" (formula "62"))
                        (rule "true_left" (formula "62"))
                        (rule "Use_information_flow_contract_for_multiply_1272441881_0" (formula "73") (ifseqformula "39"))
                        (rule "replaceKnownSelect_taclet21_11" (formula "73") (term "1,1,1"))
                        (rule "replaceKnownSelect_taclet21_12" (formula "73") (term "0,1,1"))
                        (rule "replaceKnownAuxiliaryConstant_taclet1011121_19" (formula "73") (term "1,1,1"))
                        (rule "replaceKnownAuxiliaryConstant_taclet011121_18" (formula "73") (term "0,1,1"))
                        (rule "replaceKnownSelect_taclet21_8" (formula "73") (term "1,1,0,1"))
                        (rule "replaceKnownSelect_taclet21_9" (formula "73") (term "0,1,0,1"))
                        (rule "replaceKnownAuxiliaryConstant_taclet21_10" (formula "73") (term "1,1,0,1"))
                         (builtin "One Step Simplification" (formula "73") (ifInst ""  (formula "87")) (ifInst ""  (formula "86")) (ifInst ""  (formula "104")))
                        (rule "pullOutSelect" (formula "73") (term "1,0,1") (inst "selectSK=org_bouncycastle_math_ec_ECPoint_value_4"))
                        (rule "simplifySelectOfAnonEQ" (formula "73") (ifseqformula "26"))
                         (builtin "One Step Simplification" (formula "73") (ifInst ""  (formula "101")) (ifInst ""  (formula "14")))
                        (rule "applyEqReverse" (formula "74") (term "1,0,1") (ifseqformula "73"))
                        (rule "hideAuxiliaryEq" (formula "73"))
                        (rule "pullOutSelect" (formula "73") (term "0,0,1") (inst "selectSK=org_bouncycastle_math_ec_ECPoint_value_5"))
                        (rule "simplifySelectOfAnonEQ" (formula "73") (ifseqformula "64"))
                         (builtin "One Step Simplification" (formula "73") (ifInst ""  (formula "102")) (ifInst ""  (formula "51")))
                        (rule "applyEqReverse" (formula "74") (term "0,0,1") (ifseqformula "73"))
                        (rule "hideAuxiliaryEq" (formula "73"))
                        (rule "replace_known_left" (formula "73") (term "0,1") (ifseqformula "5"))
                         (builtin "One Step Simplification" (formula "73"))
                        (rule "notLeft" (formula "73"))
                        (rule "Class_invariant_axiom_for_org_bouncycastle_math_ec_ECPoint" (formula "79") (term "0"))
                         (builtin "One Step Simplification" (formula "79"))
                        (rule "Class_invariant_axiom_for_org_bouncycastle_math_ec_ECPoint" (formula "79"))
                        (rule "closeTrue" (formula "79"))
                     )
                  )
               )
               (branch " resultAtPost_226_B.<created>@heapAtPre_B«anonHeapFunction» = TRUE FALSE"
                  (rule "applyEqReverse" (formula "2") (term "1,0") (ifseqformula "1"))
                  (rule "hideAuxiliaryEq" (formula "1"))
                  (rule "replace_known_right" (formula "1") (term "1,0,0") (ifseqformula "76"))
                   (builtin "One Step Simplification" (formula "1"))
                  (rule "replace_known_right" (formula "69") (term "1") (ifseqformula "76"))
                   (builtin "One Step Simplification" (formula "69"))
                  (rule "Class_axiom_0_in_de_polyas_core3_open_cred_CredTool" (inst "seq=seq") (inst "i=i") (inst "str=str") (inst "seq_0=seq_0") (inst "i_0=i_0") (inst "sv_heap=heapAtPre_B<<anonHeapFunction>>"))
                  (rule "andLeft" (formula "1"))
                  (rule "castedGetAny" (formula "1") (term "0,0,0,0,0"))
                  (rule "castedGetAny" (formula "1") (term "0,0,1,0,0"))
                  (rule "castedGetAny" (formula "2") (term "0,1,1,0,0,0"))
                  (rule "nnf_imp2or" (formula "1") (term "0,0"))
                   (builtin "One Step Simplification" (formula "1"))
                  (rule "nnf_imp2or" (formula "2") (term "0,0,0"))
                  (rule "nnf_notAnd" (formula "2") (term "0,0,0,0"))
                   (builtin "One Step Simplification" (formula "2"))
                  (rule "nnf_imp2or" (formula "2") (term "1,0,0,0"))
                  (rule "nnf_notOr" (formula "2") (term "0,0,0,0,0"))
                  (rule "nnf_notAnd" (formula "2") (term "0,1,0,0,0"))
                   (builtin "One Step Simplification" (formula "2"))
                  (rule "commute_or" (formula "2") (term "0,0,0,0"))
                  (rule "commute_or_2" (formula "2") (term "0,0,0"))
                  (rule "shift_paren_or" (formula "2") (term "0,0,0,0"))
                  (rule "commute_and" (formula "2") (term "1,0,0,0"))
                  (rule "shift_paren_or" (formula "2") (term "0,0,0,0,0"))
                  (rule "commute_or_2" (formula "2") (term "0,0,0,0,0"))
                   (builtin "One Step Simplification" (formula "2"))
                  (rule "commute_or_2" (formula "2") (term "0,0,0,0"))
                  (rule "cnf_rightDist" (formula "2") (term "0,0,0"))
                  (rule "distr_forallAnd" (formula "2") (term "0,0"))
                  (rule "distr_forallAnd" (formula "2") (term "0"))
                  (rule "distr_forallAnd" (formula "2"))
                  (rule "andLeft" (formula "2"))
                  (rule "commute_or_2" (formula "2") (term "0,0,0"))
                   (builtin "One Step Simplification" (formula "2"))
                  (rule "eqSymm" (formula "2") (term "1,0,0,0,0"))
                  (rule "castedGetAny" (formula "2") (term "1,0,0,1,0,0,0"))
                  (rule "castedGetAny" (formula "2") (term "0,0,0,0,0,0"))
                  (rule "castedGetAny" (formula "2") (term "0,1,0,0,0,0"))
                   (builtin "One Step Simplification" (formula "2"))
                  (rule "true_left" (formula "2"))
                  (rule "shift_paren_or" (formula "2") (term "0,0,0"))
                   (builtin "One Step Simplification" (formula "2"))
                  (rule "eqSymm" (formula "2") (term "1,1,0,0,0"))
                  (rule "castedGetAny" (formula "2") (term "0,0,1,0,0,0"))
                  (rule "castedGetAny" (formula "2") (term "0,0,0,0,0,0"))
                  (rule "castedGetAny" (formula "2") (term "0,1,1,0,0,0"))
                   (builtin "One Step Simplification" (formula "2"))
                  (rule "true_left" (formula "2"))
                  (rule "Class_axiom_0_in_de_polyas_core3_open_cred_CredTool" (inst "seq=seq") (inst "i=i") (inst "str=str") (inst "seq_0=seq_0") (inst "i_0=i_0") (inst "sv_heap=anon_heap_mod<<anonHeapFunction>>"))
                  (rule "andLeft" (formula "1"))
                  (rule "castedGetAny" (formula "1") (term "0,0,0,0,0"))
                  (rule "castedGetAny" (formula "1") (term "0,0,1,0,0"))
                  (rule "castedGetAny" (formula "2") (term "0,1,1,0,0,0"))
                  (rule "nnf_imp2or" (formula "1") (term "0,0"))
                   (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "3")))
                  (rule "true_left" (formula "1"))
                  (rule "nnf_imp2or" (formula "1") (term "0,0,0"))
                  (rule "nnf_imp2or" (formula "1") (term "1,0,0,0"))
                  (rule "nnf_notAnd" (formula "1") (term "0,0,0,0"))
                   (builtin "One Step Simplification" (formula "1"))
                  (rule "nnf_notOr" (formula "1") (term "0,0,0,0,0"))
                  (rule "nnf_notAnd" (formula "1") (term "0,1,0,0,0"))
                   (builtin "One Step Simplification" (formula "1"))
                  (rule "commute_or" (formula "1") (term "0,0,0,0"))
                  (rule "commute_or_2" (formula "1") (term "0,0,0"))
                  (rule "shift_paren_or" (formula "1") (term "0,0,0,0"))
                  (rule "commute_and" (formula "1") (term "1,0,0,0"))
                  (rule "commute_or" (formula "1") (term "1,0,0,0,0,0"))
                  (rule "shift_paren_or" (formula "1") (term "0,0,0,0,0"))
                   (builtin "One Step Simplification" (formula "1"))
                  (rule "commute_or_2" (formula "1") (term "0,0,0,0"))
                  (rule "cnf_rightDist" (formula "1") (term "0,0,0"))
                  (rule "distr_forallAnd" (formula "1") (term "0,0"))
                  (rule "distr_forallAnd" (formula "1") (term "0"))
                  (rule "distr_forallAnd" (formula "1"))
                  (rule "andLeft" (formula "1"))
                  (rule "commute_or_2" (formula "1") (term "0,0,0"))
                   (builtin "One Step Simplification" (formula "1"))
                  (rule "eqSymm" (formula "1") (term "1,0,0,0,0"))
                  (rule "castedGetAny" (formula "1") (term "1,0,0,1,0,0,0"))
                  (rule "castedGetAny" (formula "1") (term "0,0,0,0,0,0"))
                  (rule "castedGetAny" (formula "1") (term "0,1,0,0,0,0"))
                   (builtin "One Step Simplification" (formula "1"))
                  (rule "true_left" (formula "1"))
                  (rule "shift_paren_or" (formula "1") (term "0,0,0"))
                   (builtin "One Step Simplification" (formula "1"))
                  (rule "eqSymm" (formula "1") (term "1,1,0,0,0"))
                  (rule "castedGetAny" (formula "1") (term "0,0,1,0,0,0"))
                  (rule "castedGetAny" (formula "1") (term "0,0,0,0,0,0"))
                  (rule "castedGetAny" (formula "1") (term "0,1,1,0,0,0"))
                   (builtin "One Step Simplification" (formula "1"))
                  (rule "true_left" (formula "1"))
                  (rule "Class_axiom_0_in_de_polyas_core3_open_cred_CredTool" (inst "seq=seq") (inst "i=i") (inst "str=str") (inst "seq_0=seq_0") (inst "i_0=i_0") (inst "sv_heap=anon_heap_multiply<<anonHeapFunction>>"))
                  (rule "andLeft" (formula "1"))
                  (rule "castedGetAny" (formula "1") (term "0,0,0,0,0"))
                  (rule "castedGetAny" (formula "1") (term "0,0,1,0,0"))
                  (rule "castedGetAny" (formula "2") (term "0,1,1,0,0,0"))
                  (rule "nnf_imp2or" (formula "1") (term "0,0"))
                   (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "3")))
                  (rule "true_left" (formula "1"))
                  (rule "nnf_imp2or" (formula "1") (term "0,0,0"))
                  (rule "nnf_imp2or" (formula "1") (term "1,0,0,0"))
                  (rule "nnf_notAnd" (formula "1") (term "0,0,0,0"))
                   (builtin "One Step Simplification" (formula "1"))
                  (rule "nnf_notOr" (formula "1") (term "0,0,0,0,0"))
                  (rule "nnf_notAnd" (formula "1") (term "0,1,0,0,0"))
                   (builtin "One Step Simplification" (formula "1"))
                  (rule "commute_or" (formula "1") (term "0,0,0,0"))
                  (rule "commute_or_2" (formula "1") (term "0,0,0"))
                  (rule "shift_paren_or" (formula "1") (term "0,0,0,0"))
                  (rule "Class_axiom_0_in_de_polyas_core3_open_cred_CredTool" (inst "seq=seq") (inst "i=i") (inst "str=str") (inst "seq_0=seq_0") (inst "i_0=i_0") (inst "sv_heap=heapAtPre_A<<anonHeapFunction>>"))
                  (rule "andLeft" (formula "1"))
                  (rule "castedGetAny" (formula "2") (term "0,1,1,0,0,0"))
                  (rule "castedGetAny" (formula "1") (term "0,0,1,0,0"))
                  (rule "castedGetAny" (formula "1") (term "0,0,0,0,0"))
                  (rule "nnf_imp2or" (formula "1") (term "0,0"))
                   (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "4")))
                  (rule "true_left" (formula "1"))
                  (rule "nnf_imp2or" (formula "1") (term "0,0,0"))
                  (rule "nnf_imp2or" (formula "1") (term "1,0,0,0"))
                  (rule "nnf_notAnd" (formula "1") (term "0,0,0,0"))
                   (builtin "One Step Simplification" (formula "1"))
                  (rule "nnf_notOr" (formula "1") (term "0,0,0,0,0"))
                  (rule "nnf_notAnd" (formula "1") (term "0,1,0,0,0"))
                   (builtin "One Step Simplification" (formula "1"))
                  (rule "commute_or" (formula "1") (term "0,0,0,0"))
                  (rule "commute_or_2" (formula "1") (term "0,0,0"))
                  (rule "Class_axiom_0_in_de_polyas_core3_open_cred_CredTool" (inst "seq=seq") (inst "i=i") (inst "str=str") (inst "seq_0=seq_0") (inst "i_0=i_0") (inst "sv_heap=anon(heapAtPre_A<<anonHeapFunction>>,
     empty,
     anon_heap_mod<<anonHeapFunction>>)"))
                   (builtin "One Step Simplification" (formula "1"))
                  (rule "andLeft" (formula "1"))
                  (rule "castedGetAny" (formula "2") (term "0,1,1,0,0,0"))
                  (rule "castedGetAny" (formula "1") (term "0,0,1,0,0"))
                  (rule "castedGetAny" (formula "1") (term "0,0,0,0,0"))
                  (rule "nnf_imp2or" (formula "1") (term "0,0"))
                   (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "5")))
                  (rule "true_left" (formula "1"))
                  (rule "nnf_imp2or" (formula "1") (term "0,0,0"))
                  (rule "nnf_imp2or" (formula "1") (term "1,0,0,0"))
                  (rule "nnf_notAnd" (formula "1") (term "0,0,0,0"))
                   (builtin "One Step Simplification" (formula "1"))
                  (rule "nnf_notAnd" (formula "1") (term "0,1,0,0,0"))
                   (builtin "One Step Simplification" (formula "1"))
                  (rule "nnf_notOr" (formula "1") (term "0,0,0,0,0"))
                  (rule "nnf_notOr" (formula "1") (term "1,0,0,0,0,0"))
                  (rule "Class_axiom_0_in_de_polyas_core3_open_cred_CredTool" (inst "seq=seq") (inst "i=i") (inst "str=str") (inst "seq_0=seq_0") (inst "i_0=i_0") (inst "sv_heap=heapAfter_mod_A_0"))
                  (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "1,0,0,0,0,0,1") (ifseqformula "30"))
                  (rule "andLeft" (formula "1"))
                  (rule "castedGetAny" (formula "1") (term "0,0,1,0,0"))
                  (rule "castedGetAny" (formula "1") (term "0,0,0,0,0"))
                  (rule "castedGetAny" (formula "2") (term "0,1,1,0,0,0"))
                  (rule "nnf_imp2or" (formula "1") (term "0,0"))
                   (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "6")))
                  (rule "true_left" (formula "1"))
                  (rule "nnf_imp2or" (formula "1") (term "0,0,0"))
                  (rule "nnf_notAnd" (formula "1") (term "0,0,0,0"))
                   (builtin "One Step Simplification" (formula "1"))
                  (rule "nnf_imp2or" (formula "1") (term "1,0,0,0"))
                  (rule "nnf_notOr" (formula "1") (term "0,0,0,0,0"))
                  (rule "nnf_notAnd" (formula "1") (term "0,1,0,0,0"))
                   (builtin "One Step Simplification" (formula "1"))
                  (rule "nnf_notOr" (formula "1") (term "1,0,0,0,0,0"))
                  (rule "Class_axiom_0_in_de_polyas_core3_open_cred_CredTool" (inst "seq=seq") (inst "i=i") (inst "str=str") (inst "seq_0=seq_0") (inst "i_0=i_0") (inst "sv_heap=anon(heapAfter_mod_A_0,
     empty,
     anon_heap_multiply<<anonHeapFunction>>)"))
                   (builtin "One Step Simplification" (formula "1"))
                  (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,1,0,0,0,0,0,1") (ifseqformula "30"))
                  (rule "andLeft" (formula "1"))
                  (rule "castedGetAny" (formula "2") (term "0,1,1,0,0,0"))
                  (rule "castedGetAny" (formula "1") (term "0,0,0,0,0"))
                  (rule "castedGetAny" (formula "1") (term "0,0,1,0,0"))
                  (rule "nnf_imp2or" (formula "1") (term "0,0"))
                   (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "6")))
                  (rule "true_left" (formula "1"))
                  (rule "nnf_imp2or" (formula "1") (term "0,0,0"))
                  (rule "nnf_imp2or" (formula "1") (term "1,0,0,0"))
                  (rule "nnf_notAnd" (formula "1") (term "0,0,0,0"))
                   (builtin "One Step Simplification" (formula "1"))
                  (rule "nnf_notOr" (formula "1") (term "0,0,0,0,0"))
                  (rule "nnf_notAnd" (formula "1") (term "0,1,0,0,0"))
                   (builtin "One Step Simplification" (formula "1"))
                  (rule "nnf_notOr" (formula "1") (term "1,0,0,0,0,0"))
                  (rule "nnf_notOr" (formula "1") (term "0,1,0,0,0,0,0"))
                  (rule "Class_axiom_0_in_de_polyas_core3_open_cred_CredTool" (inst "seq=seq") (inst "i=i") (inst "str=str") (inst "seq_0=seq_0") (inst "i_0=i_0") (inst "sv_heap=heapAfter_multiply_A_1"))
                  (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "1,0,0,0,0,0,1") (ifseqformula "38"))
                  (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,1,0,0,0,0,0,1") (ifseqformula "31"))
                  (rule "andLeft" (formula "1"))
                  (rule "castedGetAny" (formula "1") (term "0,0,1,0,0"))
                  (rule "castedGetAny" (formula "2") (term "0,1,1,0,0,0"))
                  (rule "castedGetAny" (formula "1") (term "0,0,0,0,0"))
                  (rule "nnf_imp2or" (formula "1") (term "0,0"))
                   (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "7")))
                  (rule "true_left" (formula "1"))
                  (rule "nnf_imp2or" (formula "1") (term "0,0,0"))
                  (rule "nnf_notAnd" (formula "1") (term "0,0,0,0"))
                   (builtin "One Step Simplification" (formula "1"))
                  (rule "nnf_imp2or" (formula "1") (term "1,0,0,0"))
                  (rule "nnf_notOr" (formula "1") (term "0,0,0,0,0"))
                  (rule "nnf_notAnd" (formula "1") (term "0,1,0,0,0"))
                   (builtin "One Step Simplification" (formula "1"))
                  (rule "nnf_notOr" (formula "1") (term "1,0,0,0,0,0"))
                  (rule "nnf_notOr" (formula "1") (term "0,1,0,0,0,0,0"))
                  (rule "Class_axiom_0_in_de_polyas_core3_open_cred_CredTool" (inst "seq=seq") (inst "i=i") (inst "str=str") (inst "seq_0=seq_0") (inst "i_0=i_0") (inst "sv_heap=heapAtPost_A"))
                  (rule "andLeft" (formula "1"))
                  (rule "castedGetAny" (formula "1") (term "0,0,1,0,0"))
                  (rule "castedGetAny" (formula "2") (term "0,1,1,0,0,0"))
                  (rule "castedGetAny" (formula "1") (term "0,0,0,0,0"))
                  (rule "applyEqRigid" (formula "2") (term "0,0,1,0,0,0,0,0") (ifseqformula "47"))
                  (rule "selectCreatedOfAnonAsFormulaEQ" (formula "2") (term "1,0,0,0,0,0") (ifseqformula "39"))
                  (rule "selectCreatedOfAnonAsFormulaEQ" (formula "2") (term "0,1,0,0,0,0,0") (ifseqformula "32"))
                  (rule "nnf_imp2or" (formula "1") (term "0,0"))
                   (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "7")))
                  (rule "true_left" (formula "1"))
                  (rule "nnf_imp2or" (formula "1") (term "0,0,0"))
                  (rule "nnf_imp2or" (formula "1") (term "1,0,0,0"))
                  (rule "nnf_notAnd" (formula "1") (term "0,0,0,0"))
                   (builtin "One Step Simplification" (formula "1"))
                  (rule "nnf_notAnd" (formula "1") (term "0,1,0,0,0"))
                   (builtin "One Step Simplification" (formula "1"))
                  (rule "nnf_notOr" (formula "1") (term "0,0,0,0,0"))
                  (rule "nnf_notOr" (formula "1") (term "1,0,0,0,0,0"))
                  (rule "nnf_notOr" (formula "1") (term "0,1,0,0,0,0,0"))
                  (rule "Class_axiom_0_in_de_polyas_core3_open_cred_CredTool" (inst "seq=seq") (inst "i=i") (inst "str=str") (inst "seq_0=seq_0") (inst "i_0=i_0") (inst "sv_heap=anon(heapAtPre_B<<anonHeapFunction>>,
     empty,
     anon_heap_mod<<anonHeapFunction>>)"))
                   (builtin "One Step Simplification" (formula "1"))
                  (rule "andLeft" (formula "1"))
                  (rule "castedGetAny" (formula "2") (term "0,1,1,0,0,0"))
                  (rule "castedGetAny" (formula "1") (term "0,0,1,0,0"))
                  (rule "castedGetAny" (formula "1") (term "0,0,0,0,0"))
                  (rule "nnf_imp2or" (formula "1") (term "0,0"))
                   (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "7")))
                  (rule "true_left" (formula "1"))
                  (rule "nnf_imp2or" (formula "1") (term "0,0,0"))
                  (rule "nnf_notAnd" (formula "1") (term "0,0,0,0"))
                   (builtin "One Step Simplification" (formula "1"))
                  (rule "nnf_imp2or" (formula "1") (term "1,0,0,0"))
                  (rule "nnf_notOr" (formula "1") (term "0,0,0,0,0"))
                  (rule "nnf_notAnd" (formula "1") (term "0,1,0,0,0"))
                   (builtin "One Step Simplification" (formula "1"))
                  (rule "nnf_notOr" (formula "1") (term "1,0,0,0,0,0"))
                  (rule "Class_axiom_0_in_de_polyas_core3_open_cred_CredTool" (inst "seq=seq") (inst "i=i") (inst "str=str") (inst "seq_0=seq_0") (inst "i_0=i_0") (inst "sv_heap=heapAfter_mod_B_0"))
                  (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "1,0,0,0,0,0,1") (ifseqformula "67"))
                  (rule "andLeft" (formula "1"))
                  (rule "castedGetAny" (formula "1") (term "0,0,0,0,0"))
                  (rule "castedGetAny" (formula "1") (term "0,0,1,0,0"))
                  (rule "castedGetAny" (formula "2") (term "0,1,1,0,0,0"))
                  (rule "nnf_imp2or" (formula "1") (term "0,0"))
                   (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "8")))
                  (rule "true_left" (formula "1"))
                  (rule "nnf_imp2or" (formula "1") (term "0,0,0"))
                  (rule "nnf_notAnd" (formula "1") (term "0,0,0,0"))
                   (builtin "One Step Simplification" (formula "1"))
                  (rule "nnf_imp2or" (formula "1") (term "1,0,0,0"))
                  (rule "nnf_notOr" (formula "1") (term "0,0,0,0,0"))
                  (rule "nnf_notAnd" (formula "1") (term "0,1,0,0,0"))
                   (builtin "One Step Simplification" (formula "1"))
                  (rule "nnf_notOr" (formula "1") (term "1,0,0,0,0,0"))
                  (rule "Class_axiom_0_in_de_polyas_core3_open_cred_CredTool" (inst "seq=seq") (inst "i=i") (inst "str=str") (inst "seq_0=seq_0") (inst "i_0=i_0") (inst "sv_heap=anon(heapAfter_mod_B_0,
     empty,
     anon_heap_multiply<<anonHeapFunction>>)"))
                   (builtin "One Step Simplification" (formula "1"))
                  (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,1,0,0,0,0,0,1") (ifseqformula "67"))
                  (rule "andLeft" (formula "1"))
                  (rule "castedGetAny" (formula "2") (term "0,1,1,0,0,0"))
                  (rule "castedGetAny" (formula "1") (term "0,0,0,0,0"))
                  (rule "castedGetAny" (formula "1") (term "0,0,1,0,0"))
                  (rule "nnf_imp2or" (formula "1") (term "0,0"))
                   (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "8")))
                  (rule "true_left" (formula "1"))
                  (rule "nnf_imp2or" (formula "1") (term "0,0,0"))
                  (rule "nnf_notAnd" (formula "1") (term "0,0,0,0"))
                   (builtin "One Step Simplification" (formula "1"))
                  (rule "nnf_imp2or" (formula "1") (term "1,0,0,0"))
                  (rule "nnf_notOr" (formula "1") (term "0,0,0,0,0"))
                  (rule "nnf_notAnd" (formula "1") (term "0,1,0,0,0"))
                   (builtin "One Step Simplification" (formula "1"))
                  (rule "nnf_notOr" (formula "1") (term "1,0,0,0,0,0"))
                  (rule "nnf_notOr" (formula "1") (term "0,1,0,0,0,0,0"))
                  (rule "Class_axiom_0_in_de_polyas_core3_open_cred_CredTool" (inst "seq=seq") (inst "i=i") (inst "str=str") (inst "seq_0=seq_0") (inst "i_0=i_0") (inst "sv_heap=heapAfter_multiply_B_1"))
                  (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "1,0,0,0,0,0,1") (ifseqformula "75"))
                  (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,1,0,0,0,0,0,1") (ifseqformula "68"))
                  (rule "andLeft" (formula "1"))
                  (rule "castedGetAny" (formula "1") (term "0,0,1,0,0"))
                  (rule "castedGetAny" (formula "1") (term "0,0,0,0,0"))
                  (rule "castedGetAny" (formula "2") (term "0,1,1,0,0,0"))
                  (rule "nnf_imp2or" (formula "1") (term "0,0"))
                   (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "9")))
                  (rule "true_left" (formula "1"))
                  (rule "nnf_imp2or" (formula "1") (term "0,0,0"))
                  (rule "nnf_notAnd" (formula "1") (term "0,0,0,0"))
                   (builtin "One Step Simplification" (formula "1"))
                  (rule "nnf_imp2or" (formula "1") (term "1,0,0,0"))
                  (rule "nnf_notOr" (formula "1") (term "0,0,0,0,0"))
                  (rule "nnf_notAnd" (formula "1") (term "0,1,0,0,0"))
                   (builtin "One Step Simplification" (formula "1"))
                  (rule "nnf_notOr" (formula "1") (term "1,0,0,0,0,0"))
                  (rule "nnf_notOr" (formula "1") (term "0,1,0,0,0,0,0"))
                  (rule "Class_axiom_0_in_de_polyas_core3_open_cred_CredTool" (inst "seq=seq") (inst "i=i") (inst "str=str") (inst "seq_0=seq_0") (inst "i_0=i_0") (inst "sv_heap=heapAtPost_B"))
                  (rule "andLeft" (formula "1"))
                  (rule "castedGetAny" (formula "1") (term "0,0,0,0,0"))
                  (rule "castedGetAny" (formula "2") (term "0,1,1,0,0,0"))
                  (rule "castedGetAny" (formula "1") (term "0,0,1,0,0"))
                  (rule "applyEqRigid" (formula "2") (term "0,0,1,0,0,0,0,0") (ifseqformula "84"))
                  (rule "selectCreatedOfAnonAsFormulaEQ" (formula "2") (term "1,0,0,0,0,0") (ifseqformula "76"))
                  (rule "selectCreatedOfAnonAsFormulaEQ" (formula "2") (term "0,1,0,0,0,0,0") (ifseqformula "69"))
                  (rule "nnf_imp2or" (formula "1") (term "0,0"))
                   (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "9")))
                  (rule "true_left" (formula "1"))
                  (rule "nnf_imp2or" (formula "1") (term "0,0,0"))
                  (rule "nnf_imp2or" (formula "1") (term "1,0,0,0"))
                  (rule "nnf_notAnd" (formula "1") (term "0,0,0,0"))
                   (builtin "One Step Simplification" (formula "1"))
                  (rule "nnf_notAnd" (formula "1") (term "0,1,0,0,0"))
                   (builtin "One Step Simplification" (formula "1"))
                  (rule "nnf_notOr" (formula "1") (term "0,0,0,0,0"))
                  (rule "nnf_notOr" (formula "1") (term "1,0,0,0,0,0"))
                  (rule "nnf_notOr" (formula "1") (term "0,1,0,0,0,0,0"))
                  (rule "div_axiom" (formula "34") (term "0,1") (inst "quotient=quotient_0"))
                  (rule "polySimp_mulComm0" (formula "34") (term "1,1,1,1,1"))
                  (rule "polySimp_mulComm0" (formula "34") (term "0,2,1,1"))
                  (rule "polySimp_mulComm0" (formula "34") (term "0,1,0,1"))
                  (rule "polySimp_mulComm0" (formula "34") (term "0,1,1,1"))
                  (rule "commute_or" (formula "4") (term "0,0,0,0"))
                  (rule "shift_paren_or" (formula "5") (term "0,0,0,0"))
                  (rule "commute_and" (formula "6") (term "1,0,0,0"))
                  (rule "shift_paren_or" (formula "6") (term "0,0,0,0,0"))
                  (rule "commute_or" (formula "4") (term "0,1,0,0,0"))
                  (rule "commute_and" (formula "5") (term "1,0,0,0"))
                  (rule "commute_or" (formula "3") (term "0,0,0,0"))
                  (rule "ifthenelse_split" (formula "9") (term "0"))
                  (branch " resultAtPost_226_A.<created>@anon_heap_mod«anonHeapFunction» = TRUE TRUE"
                     (rule "applyEqReverse" (formula "109") (term "1") (ifseqformula "10"))
                     (rule "hideAuxiliaryEq" (formula "10"))
                     (rule "eqSymm" (formula "108"))
                     (rule "replace_known_left" (formula "42") (term "0") (ifseqformula "9"))
                      (builtin "One Step Simplification" (formula "42"))
                     (rule "true_left" (formula "42"))
                     (rule "ifthenelse_split" (formula "8") (term "0"))
                     (branch " resultAtPost_226_B.<created>@anon_heap_mod«anonHeapFunction» = TRUE TRUE"
                        (rule "applyEqReverse" (formula "108") (term "1") (ifseqformula "9"))
                        (rule "hideAuxiliaryEq" (formula "9"))
                        (rule "eqSymm" (formula "107"))
                        (rule "replace_known_left" (formula "76") (term "0") (ifseqformula "8"))
                         (builtin "One Step Simplification" (formula "76"))
                        (rule "true_left" (formula "76"))
                        (rule "commute_or" (formula "3") (term "0,1,0,0,0"))
                        (rule "commute_or" (formula "2") (term "0,0,0,0"))
                        (rule "onlyCreatedObjectsAreReferenced" (formula "14") (term "1,0") (ifseqformula "22"))
                        (rule "replace_known_left" (formula "14") (term "1") (ifseqformula "15"))
                         (builtin "One Step Simplification" (formula "14") (ifInst ""  (formula "93")))
                        (rule "true_left" (formula "14"))
                        (rule "onlyCreatedObjectsAreReferenced" (formula "99") (term "0") (ifseqformula "56"))
                        (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "100"))
                         (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "62")))
                        (rule "true_left" (formula "1"))
                        (rule "onlyCreatedObjectsAreReferenced" (formula "31") (term "2") (ifseqformula "22"))
                        (rule "replace_known_right" (formula "31") (term "0") (ifseqformula "97"))
                         (builtin "One Step Simplification" (formula "31") (ifInst ""  (formula "16")))
                        (rule "true_left" (formula "31"))
                        (rule "onlyCreatedObjectsAreReferenced" (formula "14") (term "1,1,0") (ifseqformula "22"))
                        (rule "replace_known_right" (formula "14") (term "0") (ifseqformula "95"))
                         (builtin "One Step Simplification" (formula "14") (ifInst ""  (formula "16")))
                        (rule "true_left" (formula "14"))
                        (rule "onlyCreatedObjectsAreReferenced" (formula "49") (term "1,0") (ifseqformula "56"))
                        (rule "replace_known_right" (formula "49") (term "0") (ifseqformula "96"))
                         (builtin "One Step Simplification" (formula "49") (ifInst ""  (formula "50")))
                        (rule "true_left" (formula "49"))
                        (rule "onlyCreatedObjectsAreReferenced" (formula "48") (term "1,0") (ifseqformula "56"))
                        (rule "replace_known_left" (formula "48") (term "1") (ifseqformula "49"))
                         (builtin "One Step Simplification" (formula "48") (ifInst ""  (formula "94")))
                        (rule "true_left" (formula "48"))
                        (rule "onlyCreatedObjectsAreReferenced" (formula "27") (term "1,0") (ifseqformula "22"))
                        (rule "replace_known_right" (formula "27") (term "0") (ifseqformula "99"))
                         (builtin "One Step Simplification" (formula "27") (ifInst ""  (formula "28")))
                        (rule "true_left" (formula "27"))
                        (rule "commute_or" (formula "2") (term "0,1,0,0,0"))
                        (rule "onlyCreatedObjectsAreReferenced" (formula "50") (term "1,0") (ifseqformula "56"))
                        (rule "replace_known_left" (formula "50") (term "1") (ifseqformula "51"))
                         (builtin "One Step Simplification" (formula "50") (ifInst ""  (formula "98")))
                        (rule "true_left" (formula "50"))
                        (rule "commute_or" (formula "1") (term "0,0,0,0"))
                        (rule "commute_or" (formula "1") (term "0,1,0,0,0"))
                        (rule "commute_or_2" (formula "4") (term "0,0,0"))
                        (rule "commute_and" (formula "34") (term "0,1"))
                        (rule "commute_or_2" (formula "3") (term "0,0,0"))
                        (rule "commute_or_2" (formula "6") (term "0,0,0,0,0"))
                         (builtin "One Step Simplification" (formula "6"))
                        (rule "commute_or_2" (formula "2") (term "0,0,0"))
                        (rule "commute_or_2" (formula "1") (term "0,0,0"))
                        (rule "commute_or" (formula "5") (term "1,0,0,0,0,0"))
                        (rule "commute_or_2" (formula "6") (term "0,0,0,0"))
                        (rule "commute_or_2" (formula "4") (term "1,0,0,0,0"))
                        (rule "commute_or_2" (formula "3") (term "1,0,0,0,0"))
                        (rule "commute_or_2" (formula "2") (term "1,0,0,0,0"))
                        (rule "commute_or_2" (formula "1") (term "1,0,0,0,0"))
                        (rule "shift_paren_or" (formula "4") (term "0,0,0,0"))
                        (rule "shift_paren_or" (formula "3") (term "0,0,0,0"))
                        (rule "shift_paren_or" (formula "2") (term "0,0,0,0"))
                        (rule "shift_paren_or" (formula "1") (term "0,0,0,0"))
                        (rule "cnf_rightDist" (formula "6") (term "0,0,0"))
                        (rule "distr_forallAnd" (formula "6") (term "0,0"))
                        (rule "distr_forallAnd" (formula "6") (term "0"))
                        (rule "distr_forallAnd" (formula "6"))
                        (rule "andLeft" (formula "6"))
                        (rule "commute_or_2" (formula "6") (term "0,0,0"))
                         (builtin "One Step Simplification" (formula "6"))
                        (rule "eqSymm" (formula "6") (term "1,0,0,0,0"))
                        (rule "castedGetAny" (formula "6") (term "1,0,0,1,0,0,0"))
                        (rule "castedGetAny" (formula "6") (term "0,0,0,0,0,0"))
                        (rule "castedGetAny" (formula "6") (term "0,1,0,0,0,0"))
                         (builtin "One Step Simplification" (formula "6"))
                        (rule "true_left" (formula "6"))
                        (rule "shift_paren_or" (formula "6") (term "0,0,0"))
                         (builtin "One Step Simplification" (formula "6"))
                        (rule "eqSymm" (formula "6") (term "1,1,0,0,0"))
                        (rule "castedGetAny" (formula "6") (term "0,0,1,0,0,0"))
                        (rule "castedGetAny" (formula "6") (term "0,0,0,0,0,0"))
                        (rule "castedGetAny" (formula "6") (term "0,1,1,0,0,0"))
                         (builtin "One Step Simplification" (formula "6"))
                        (rule "true_left" (formula "6"))
                        (rule "commute_and" (formula "4") (term "1,0,0,0"))
                        (rule "commute_and" (formula "3") (term "1,0,0,0"))
                        (rule "commute_and" (formula "2") (term "1,0,0,0"))
                        (rule "commute_and" (formula "1") (term "1,0,0,0"))
                        (rule "shift_paren_or" (formula "5") (term "0,0,0,0,0"))
                         (builtin "One Step Simplification" (formula "5"))
                        (rule "commute_or_2" (formula "5") (term "0,0,0,0"))
                        (rule "shift_paren_or" (formula "4") (term "0,0,0,0,0"))
                         (builtin "One Step Simplification" (formula "4"))
                        (rule "shift_paren_or" (formula "3") (term "0,0,0,0,0"))
                         (builtin "One Step Simplification" (formula "3"))
                        (rule "shift_paren_or" (formula "2") (term "0,0,0,0,0"))
                         (builtin "One Step Simplification" (formula "2"))
                        (rule "shift_paren_or" (formula "1") (term "0,0,0,0,0"))
                         (builtin "One Step Simplification" (formula "1"))
                        (rule "cnf_rightDist" (formula "5") (term "0,0,0"))
                        (rule "distr_forallAnd" (formula "5") (term "0,0"))
                        (rule "distr_forallAnd" (formula "5") (term "0"))
                        (rule "distr_forallAnd" (formula "5"))
                        (rule "andLeft" (formula "5"))
                        (rule "commute_or_2" (formula "5") (term "0,0,0"))
                         (builtin "One Step Simplification" (formula "5"))
                        (rule "eqSymm" (formula "5") (term "1,0,0,0,0"))
                        (rule "castedGetAny" (formula "5") (term "0,0,0,0,0,0"))
                        (rule "castedGetAny" (formula "5") (term "1,0,0,1,0,0,0"))
                        (rule "castedGetAny" (formula "5") (term "0,1,0,0,0,0"))
                         (builtin "One Step Simplification" (formula "5"))
                        (rule "true_left" (formula "5"))
                        (rule "shift_paren_or" (formula "5") (term "0,0,0"))
                         (builtin "One Step Simplification" (formula "5"))
                        (rule "eqSymm" (formula "5") (term "1,1,0,0,0"))
                        (rule "castedGetAny" (formula "5") (term "0,0,0,0,0,0"))
                        (rule "castedGetAny" (formula "5") (term "0,0,1,0,0,0"))
                        (rule "castedGetAny" (formula "5") (term "0,1,1,0,0,0"))
                         (builtin "One Step Simplification" (formula "5"))
                        (rule "true_left" (formula "5"))
                        (rule "cnf_rightDist" (formula "4") (term "0,0,0"))
                        (rule "distr_forallAnd" (formula "4") (term "0,0"))
                        (rule "distr_forallAnd" (formula "4") (term "0"))
                        (rule "distr_forallAnd" (formula "4"))
                        (rule "andLeft" (formula "4"))
                        (rule "cnf_rightDist" (formula "3") (term "0,0,0"))
                        (rule "distr_forallAnd" (formula "3") (term "0,0"))
                        (rule "distr_forallAnd" (formula "3") (term "0"))
                        (rule "distr_forallAnd" (formula "3"))
                        (rule "andLeft" (formula "3"))
                        (rule "shift_paren_or" (formula "5") (term "0,0,0"))
                         (builtin "One Step Simplification" (formula "5"))
                        (rule "eqSymm" (formula "5") (term "1,1,0,0,0"))
                        (rule "castedGetAny" (formula "5") (term "0,0,1,0,0,0"))
                        (rule "castedGetAny" (formula "5") (term "0,0,0,0,0,0"))
                        (rule "castedGetAny" (formula "5") (term "0,1,1,0,0,0"))
                         (builtin "One Step Simplification" (formula "5"))
                        (rule "true_left" (formula "5"))
                        (rule "cnf_rightDist" (formula "2") (term "0,0,0"))
                        (rule "distr_forallAnd" (formula "2") (term "0,0"))
                        (rule "distr_forallAnd" (formula "2") (term "0"))
                        (rule "distr_forallAnd" (formula "2"))
                        (rule "andLeft" (formula "2"))
                        (rule "cnf_rightDist" (formula "1") (term "0,0,0"))
                        (rule "distr_forallAnd" (formula "1") (term "0,0"))
                        (rule "distr_forallAnd" (formula "1") (term "0"))
                        (rule "distr_forallAnd" (formula "1"))
                        (rule "andLeft" (formula "1"))
                        (rule "shift_paren_or" (formula "3") (term "0,0,0"))
                         (builtin "One Step Simplification" (formula "3"))
                        (rule "eqSymm" (formula "3") (term "1,1,0,0,0"))
                        (rule "castedGetAny" (formula "3") (term "0,0,0,0,0,0"))
                        (rule "castedGetAny" (formula "3") (term "0,0,1,0,0,0"))
                        (rule "castedGetAny" (formula "3") (term "0,1,1,0,0,0"))
                         (builtin "One Step Simplification" (formula "3"))
                        (rule "true_left" (formula "3"))
                        (rule "cnf_rightDist" (formula "4") (term "0,0,0"))
                        (rule "distr_forallAnd" (formula "4") (term "0,0"))
                        (rule "distr_forallAnd" (formula "4") (term "0"))
                        (rule "distr_forallAnd" (formula "4"))
                        (rule "andLeft" (formula "4"))
                        (rule "commute_or_2" (formula "4") (term "0,0,0"))
                         (builtin "One Step Simplification" (formula "4"))
                        (rule "eqSymm" (formula "4") (term "1,0,0,0,0"))
                        (rule "castedGetAny" (formula "4") (term "0,0,0,0,0,0"))
                        (rule "castedGetAny" (formula "4") (term "1,0,0,1,0,0,0"))
                        (rule "castedGetAny" (formula "4") (term "0,1,0,0,0,0"))
                         (builtin "One Step Simplification" (formula "4"))
                        (rule "true_left" (formula "4"))
                        (rule "cnf_rightDist" (formula "3") (term "0,0,0"))
                        (rule "distr_forallAnd" (formula "3") (term "0,0"))
                        (rule "distr_forallAnd" (formula "3") (term "0"))
                        (rule "distr_forallAnd" (formula "3"))
                        (rule "andLeft" (formula "3"))
                        (rule "shift_paren_or" (formula "5") (term "0,0,0"))
                         (builtin "One Step Simplification" (formula "5"))
                        (rule "eqSymm" (formula "5") (term "1,1,0,0,0"))
                        (rule "castedGetAny" (formula "5") (term "0,0,1,0,0,0"))
                        (rule "castedGetAny" (formula "5") (term "1,0,0,0,0,0,0"))
                        (rule "castedGetAny" (formula "5") (term "0,1,1,0,0,0"))
                         (builtin "One Step Simplification" (formula "5"))
                        (rule "true_left" (formula "5"))
                        (rule "cnf_rightDist" (formula "2") (term "0,0,0"))
                        (rule "distr_forallAnd" (formula "2") (term "0,0"))
                        (rule "distr_forallAnd" (formula "2") (term "0"))
                        (rule "distr_forallAnd" (formula "2"))
                        (rule "andLeft" (formula "2"))
                        (rule "commute_or_2" (formula "2") (term "0,0,0"))
                         (builtin "One Step Simplification" (formula "2"))
                        (rule "eqSymm" (formula "2") (term "1,0,0,0,0"))
                        (rule "castedGetAny" (formula "2") (term "1,0,0,1,0,0,0"))
                        (rule "castedGetAny" (formula "2") (term "0,0,0,0,0,0"))
                        (rule "castedGetAny" (formula "2") (term "0,1,0,0,0,0"))
                         (builtin "One Step Simplification" (formula "2"))
                        (rule "true_left" (formula "2"))
                        (rule "shift_paren_or" (formula "4") (term "0,0,0"))
                         (builtin "One Step Simplification" (formula "4"))
                        (rule "eqSymm" (formula "4") (term "1,1,0,0,0"))
                        (rule "castedGetAny" (formula "4") (term "0,0,1,0,0,0"))
                        (rule "castedGetAny" (formula "4") (term "1,0,0,0,0,0,0"))
                        (rule "castedGetAny" (formula "4") (term "0,1,1,0,0,0"))
                         (builtin "One Step Simplification" (formula "4"))
                        (rule "true_left" (formula "4"))
                        (rule "cnf_rightDist" (formula "1") (term "0,0,0"))
                        (rule "distr_forallAnd" (formula "1") (term "0,0"))
                        (rule "distr_forallAnd" (formula "1") (term "0"))
                        (rule "distr_forallAnd" (formula "1"))
                        (rule "andLeft" (formula "1"))
                        (rule "ifthenelse_split_for" (formula "32") (term "1,1"))
                        (branch "result_228_A_1.value@heapAtPre_A«anonHeapFunction» ≥ 0 TRUE"
                           (rule "cnf_rightDist" (formula "33"))
                           (rule "andLeft" (formula "33"))
                           (rule "commute_or" (formula "34"))
                           (rule "cnf_rightDist" (formula "33"))
                           (rule "andLeft" (formula "33"))
                           (rule "commute_or" (formula "34"))
                           (rule "shift_paren_or" (formula "3") (term "0,0,0"))
                            (builtin "One Step Simplification" (formula "3"))
                           (rule "eqSymm" (formula "3") (term "1,1,0,0,0"))
                           (rule "castedGetAny" (formula "3") (term "0,0,1,0,0,0"))
                           (rule "castedGetAny" (formula "3") (term "1,0,0,0,0,0,0"))
                           (rule "castedGetAny" (formula "3") (term "0,1,1,0,0,0"))
                            (builtin "One Step Simplification" (formula "3"))
                           (rule "true_left" (formula "3"))
                           (rule "cnf_rightDist" (formula "3") (term "0,0,0"))
                           (rule "distr_forallAnd" (formula "3") (term "0,0"))
                           (rule "distr_forallAnd" (formula "3") (term "0"))
                           (rule "distr_forallAnd" (formula "3"))
                           (rule "andLeft" (formula "3"))
                           (rule "commute_or_2" (formula "3") (term "0,0,0"))
                            (builtin "One Step Simplification" (formula "3"))
                           (rule "eqSymm" (formula "3") (term "1,0,0,0,0"))
                           (rule "castedGetAny" (formula "3") (term "0,0,0,0,0,0"))
                           (rule "castedGetAny" (formula "3") (term "1,0,0,1,0,0,0"))
                           (rule "castedGetAny" (formula "3") (term "0,1,0,0,0,0"))
                            (builtin "One Step Simplification" (formula "3"))
                           (rule "true_left" (formula "3"))
                           (rule "shift_paren_or" (formula "2") (term "0,0,0"))
                            (builtin "One Step Simplification" (formula "2"))
                           (rule "eqSymm" (formula "2") (term "1,1,0,0,0"))
                           (rule "castedGetAny" (formula "2") (term "0,0,1,0,0,0"))
                           (rule "castedGetAny" (formula "2") (term "1,0,0,0,0,0,0"))
                           (rule "castedGetAny" (formula "2") (term "0,1,1,0,0,0"))
                            (builtin "One Step Simplification" (formula "2"))
                           (rule "true_left" (formula "2"))
                           (rule "shift_paren_or" (formula "2") (term "0,0,0"))
                            (builtin "One Step Simplification" (formula "2"))
                           (rule "eqSymm" (formula "2") (term "1,1,0,0,0"))
                           (rule "castedGetAny" (formula "2") (term "1,0,0,0,0,0,0"))
                           (rule "castedGetAny" (formula "2") (term "0,0,1,0,0,0"))
                           (rule "castedGetAny" (formula "2") (term "0,1,1,0,0,0"))
                            (builtin "One Step Simplification" (formula "2"))
                           (rule "true_left" (formula "2"))
                           (rule "cnf_rightDist" (formula "1") (term "0,0,0"))
                           (rule "distr_forallAnd" (formula "1") (term "0,0"))
                           (rule "distr_forallAnd" (formula "1") (term "0"))
                           (rule "distr_forallAnd" (formula "1"))
                           (rule "andLeft" (formula "1"))
                           (rule "commute_or_2" (formula "1") (term "0,0,0"))
                            (builtin "One Step Simplification" (formula "1"))
                           (rule "eqSymm" (formula "1") (term "1,0,0,0,0"))
                           (rule "castedGetAny" (formula "1") (term "1,0,0,1,0,0,0"))
                           (rule "castedGetAny" (formula "1") (term "0,0,0,0,0,0"))
                           (rule "castedGetAny" (formula "1") (term "0,1,0,0,0,0"))
                            (builtin "One Step Simplification" (formula "1"))
                           (rule "true_left" (formula "1"))
                           (rule "shift_paren_or" (formula "1") (term "0,0,0"))
                            (builtin "One Step Simplification" (formula "1"))
                           (rule "eqSymm" (formula "1") (term "1,1,0,0,0"))
                           (rule "castedGetAny" (formula "1") (term "1,0,0,0,0,0,0"))
                           (rule "castedGetAny" (formula "1") (term "0,0,1,0,0,0"))
                           (rule "castedGetAny" (formula "1") (term "0,1,1,0,0,0"))
                            (builtin "One Step Simplification" (formula "1"))
                           (rule "true_left" (formula "1"))
                           (rule "cut_direct" (formula "29") (term "0"))
                           (branch "CUT: result_228_A_1.value@heapAtPre_A«anonHeapFunction» = 0 TRUE"
                               (builtin "One Step Simplification" (formula "30"))
                              (rule "true_left" (formula "30"))
                              (rule "replace_known_left" (formula "30") (term "0") (ifseqformula "29"))
                               (builtin "One Step Simplification" (formula "30"))
                              (rule "true_left" (formula "30"))
                              (rule "replace_known_left" (formula "30") (term "0") (ifseqformula "29"))
                               (builtin "One Step Simplification" (formula "30"))
                              (rule "true_left" (formula "30"))
                              (rule "applyEq" (formula "28") (term "0") (ifseqformula "29"))
                              (rule "qeq_literals" (formula "28"))
                              (rule "true_left" (formula "28"))
                              (rule "applyEq" (formula "30") (term "1,0,0") (ifseqformula "28"))
                              (rule "polySimp_mulComm0" (formula "30") (term "0"))
                              (rule "applyEq" (formula "29") (term "1,0") (ifseqformula "28"))
                              (rule "eqSymm" (formula "29"))
                              (rule "polySimp_homoEq" (formula "29"))
                              (rule "polySimp_mulLiterals" (formula "29") (term "1,0"))
                              (rule "polySimp_elimOne" (formula "29") (term "1,0"))
                              (rule "applyEq" (formula "7") (term "1") (ifseqformula "28"))
                              (rule "applyEq" (formula "23") (term "1") (ifseqformula "28"))
                              (rule "applyEq" (formula "57") (term "1") (ifseqformula "28"))
                              (rule "applyEq" (formula "30") (term "0,0") (ifseqformula "28"))
                              (rule "times_zero_2" (formula "30") (term "0"))
                              (rule "polySimp_homoEq" (formula "30"))
                              (rule "mul_literals" (formula "30") (term "1,0"))
                              (rule "add_zero_right" (formula "30") (term "0"))
                              (rule "applyEq" (formula "29") (term "1,1,0") (ifseqformula "28"))
                              (rule "polySimp_addComm0" (formula "29") (term "0"))
                              (rule "polySimp_sepNegMonomial" (formula "30"))
                              (rule "polySimp_mulLiterals" (formula "30") (term "0"))
                              (rule "polySimp_elimOne" (formula "30") (term "0"))
                              (rule "applyEq" (formula "29") (term "0,1,0") (ifseqformula "30"))
                              (rule "polySimp_addComm0" (formula "29") (term "0"))
                              (rule "applyEq" (formula "4") (term "0") (ifseqformula "30"))
                              (rule "applyEq" (formula "29") (term "0,0,1,0") (ifseqformula "30"))
                              (rule "polySimp_addComm0" (formula "29") (term "0"))
                              (rule "applyEq" (formula "6") (term "1") (ifseqformula "30"))
                              (rule "polySimp_sepPosMonomial" (formula "29"))
                              (rule "div_axiom" (formula "29") (term "0,1") (inst "quotient=quotient_1"))
                               (builtin "One Step Simplification" (formula "29"))
                              (rule "true_left" (formula "29"))
                              (rule "jdiv_axiom" (formula "29") (term "0"))
                              (rule "eqSymm" (formula "29"))
                              (rule "applyEq" (formula "29") (term "1") (ifseqformula "30"))
                               (builtin "One Step Simplification" (formula "29"))
                              (rule "eqSymm" (formula "29") (term "1"))
                              (rule "polySimp_homoEq" (formula "29") (term "1"))
                              (rule "polySimp_mulLiterals" (formula "29") (term "1,0,1"))
                              (rule "polySimp_elimOne" (formula "29") (term "1,0,1"))
                              (rule "polySimp_sepPosMonomial" (formula "29") (term "1"))
                              (rule "inEqSimp_contradInEq0" (formula "29") (term "0,0") (ifseqformula "4"))
                              (rule "qeq_literals" (formula "29") (term "0,0,0"))
                               (builtin "One Step Simplification" (formula "29"))
                              (rule "true_left" (formula "29"))
                              (rule "Use_information_flow_contract_for_compareTo_325434207" (formula "19") (ifseqformula "19"))
                               (builtin "One Step Simplification" (formula "19") (ifInst ""  (formula "93")) (ifInst ""  (formula "93")))
                              (rule "true_left" (formula "19"))
                              (rule "Use_information_flow_contract_for_getOrder_757678341" (formula "59") (ifseqformula "25"))
                              (rule "applyEq" (formula "59") (term "0,0,1") (ifseqformula "57"))
                              (rule "eqSymm" (formula "59") (term "0,1"))
                              (rule "replace_known_left" (formula "59") (term "0,1") (ifseqformula "23"))
                               (builtin "One Step Simplification" (formula "59"))
                              (rule "applyEq" (formula "59") (term "0,1") (ifseqformula "7"))
                              (rule "eqSymm" (formula "59") (term "1"))
                              (rule "replace_known_left" (formula "59") (term "1") (ifseqformula "28"))
                               (builtin "One Step Simplification" (formula "59"))
                              (rule "true_left" (formula "59"))
                              (rule "Use_information_flow_contract_for_getOrder_757678341" (formula "59") (ifseqformula "59"))
                               (builtin "One Step Simplification" (formula "59"))
                              (rule "true_left" (formula "59"))
                              (rule "Use_information_flow_contract_for_compareTo_325434207" (formula "53") (ifseqformula "19"))
                              (rule "replace_known_right" (formula "53") (term "0,1,0,0") (ifseqformula "94"))
                               (builtin "One Step Simplification" (formula "53") (ifInst ""  (formula "93")))
                              (rule "applyEqRigid" (formula "53") (term "0,1,0,1") (ifseqformula "55"))
                              (rule "eqSymm" (formula "53") (term "1,0,1"))
                              (rule "replace_known_left" (formula "53") (term "1,0,1") (ifseqformula "20"))
                               (builtin "One Step Simplification" (formula "53"))
                              (rule "applyEq" (formula "53") (term "0,0,1") (ifseqformula "6"))
                              (rule "eqSymm" (formula "53") (term "0,1"))
                              (rule "replace_known_left" (formula "53") (term "0,1") (ifseqformula "30"))
                               (builtin "One Step Simplification" (formula "53"))
                              (rule "Class_invariant_axiom_for_java_math_BigInteger" (formula "53") (term "1,0"))
                              (rule "replace_known_left" (formula "53") (term "1,1,0") (ifseqformula "20"))
                               (builtin "One Step Simplification" (formula "53") (ifInst ""  (formula "93")))
                              (rule "Class_invariant_axiom_for_java_math_BigInteger" (formula "53") (term "0"))
                              (rule "replace_known_left" (formula "53") (term "1,0") (ifseqformula "55"))
                               (builtin "One Step Simplification" (formula "53") (ifInst ""  (formula "94")))
                              (rule "applyEq" (formula "54") (term "4") (ifseqformula "53"))
                              (rule "applyEq" (formula "52") (term "0") (ifseqformula "53"))
                              (rule "applyEq" (formula "45") (term "0") (ifseqformula "52"))
                              (rule "Use_information_flow_contract_for_getOrder_757678341" (formula "25") (ifseqformula "25"))
                               (builtin "One Step Simplification" (formula "25"))
                              (rule "true_left" (formula "25"))
                              (rule "Use_information_flow_contract_for_multiply_1272441881_0" (formula "69") (ifseqformula "36"))
                              (rule "replaceKnownSelect_taclet21_12" (formula "69") (term "0,1,1"))
                              (rule "replaceKnownSelect_taclet21_11" (formula "69") (term "1,1,1"))
                              (rule "replaceKnownAuxiliaryConstant_taclet00111121_19" (formula "69") (term "0,1,1"))
                              (rule "replaceKnownAuxiliaryConstant_taclet0111121_18" (formula "69") (term "1,1,1"))
                              (rule "replaceKnownSelect_taclet21_9" (formula "69") (term "0,1,0,1"))
                              (rule "replaceKnownSelect_taclet21_8" (formula "69") (term "1,1,0,1"))
                              (rule "replaceKnownAuxiliaryConstant_taclet121_15" (formula "69") (term "0,1,0,1"))
                              (rule "replaceKnownAuxiliaryConstant_taclet21_10" (formula "69") (term "1,1,0,1"))
                              (rule "replaceKnownAuxiliaryConstant_taclet121_15" (formula "69") (term "1,1,0,1"))
                               (builtin "One Step Simplification" (formula "69") (ifInst ""  (formula "83")) (ifInst ""  (formula "82")) (ifInst ""  (formula "100")))
                              (rule "pullOutSelect" (formula "69") (term "1,0,1") (inst "selectSK=org_bouncycastle_math_ec_ECPoint_value_4"))
                              (rule "simplifySelectOfAnonEQ" (formula "69") (ifseqformula "26"))
                               (builtin "One Step Simplification" (formula "69") (ifInst ""  (formula "97")) (ifInst ""  (formula "14")))
                              (rule "applyEqReverse" (formula "70") (term "1,0,1") (ifseqformula "69"))
                              (rule "hideAuxiliaryEq" (formula "69"))
                              (rule "pullOutSelect" (formula "69") (term "0,0,1") (inst "selectSK=org_bouncycastle_math_ec_ECPoint_value_5"))
                              (rule "simplifySelectOfAnonEQ" (formula "69") (ifseqformula "60"))
                               (builtin "One Step Simplification" (formula "69") (ifInst ""  (formula "98")) (ifInst ""  (formula "47")))
                              (rule "applyEqReverse" (formula "70") (term "0,0,1") (ifseqformula "69"))
                              (rule "hideAuxiliaryEq" (formula "69"))
                              (rule "replace_known_left" (formula "69") (term "0,1") (ifseqformula "5"))
                               (builtin "One Step Simplification" (formula "69"))
                              (rule "notLeft" (formula "69"))
                              (rule "Class_invariant_axiom_for_org_bouncycastle_math_ec_ECPoint" (formula "75") (term "0"))
                               (builtin "One Step Simplification" (formula "75"))
                              (rule "Class_invariant_axiom_for_org_bouncycastle_math_ec_ECPoint" (formula "75"))
                              (rule "closeTrue" (formula "75"))
                           )
                           (branch "CUT: result_228_A_1.value@heapAtPre_A«anonHeapFunction» = 0 FALSE"
                               (builtin "One Step Simplification" (formula "29"))
                              (rule "replace_known_right" (formula "31") (term "0") (ifseqformula "79"))
                               (builtin "One Step Simplification" (formula "31"))
                              (rule "replace_known_right" (formula "30") (term "0") (ifseqformula "79"))
                               (builtin "One Step Simplification" (formula "30"))
                              (rule "applyEq" (formula "33") (term "0,0") (ifseqformula "30"))
                              (rule "polySimp_mulComm0" (formula "33") (term "0"))
                              (rule "applyEq" (formula "29") (term "0") (ifseqformula "33"))
                              (rule "inEqSimp_homoInEq0" (formula "29"))
                              (rule "polySimp_mulComm0" (formula "29") (term "1,0"))
                              (rule "polySimp_rightDist" (formula "29") (term "1,0"))
                              (rule "polySimp_mulLiterals" (formula "29") (term "1,1,0"))
                              (rule "polySimp_elimOne" (formula "29") (term "1,1,0"))
                              (rule "polySimp_mulComm0" (formula "29") (term "0,1,0"))
                              (rule "polySimp_addAssoc" (formula "29") (term "0"))
                              (rule "polySimp_addComm0" (formula "29") (term "0,0"))
                              (rule "polySimp_pullOutFactor2b" (formula "29") (term "0"))
                              (rule "add_literals" (formula "29") (term "1,1,0"))
                              (rule "times_zero_1" (formula "29") (term "1,0"))
                              (rule "add_zero_right" (formula "29") (term "0"))
                              (rule "applyEq" (formula "31") (term "0") (ifseqformula "33"))
                              (rule "inEqSimp_homoInEq1" (formula "31"))
                              (rule "polySimp_mulComm0" (formula "31") (term "1,0"))
                              (rule "polySimp_rightDist" (formula "31") (term "1,0"))
                              (rule "polySimp_mulLiterals" (formula "31") (term "1,1,0"))
                              (rule "polySimp_elimOne" (formula "31") (term "1,1,0"))
                              (rule "polySimp_mulComm0" (formula "31") (term "0,1,0"))
                              (rule "polySimp_addComm1" (formula "31") (term "0"))
                              (rule "polySimp_addAssoc" (formula "31") (term "0,0"))
                              (rule "polySimp_addComm1" (formula "31") (term "0,0,0"))
                              (rule "polySimp_pullOutFactor2b" (formula "31") (term "0,0"))
                              (rule "add_literals" (formula "31") (term "1,1,0,0"))
                              (rule "times_zero_1" (formula "31") (term "1,0,0"))
                              (rule "add_zero_right" (formula "31") (term "0,0"))
                              (rule "applyEq" (formula "32") (term "0,1") (ifseqformula "30"))
                              (rule "inEqSimp_invertInEq1" (formula "29"))
                              (rule "polySimp_mulLiterals" (formula "29") (term "0"))
                              (rule "mul_literals" (formula "29") (term "1"))
                              (rule "polySimp_elimOne" (formula "29") (term "0"))
                              (rule "inEqSimp_sepNegMonomial0" (formula "31"))
                              (rule "polySimp_mulLiterals" (formula "31") (term "0"))
                              (rule "polySimp_elimOne" (formula "31") (term "0"))
                              (rule "inEqSimp_strengthen1" (formula "28") (ifseqformula "79"))
                              (rule "add_zero_right" (formula "28") (term "1"))
                              (rule "inEqSimp_contradEq7" (formula "79") (ifseqformula "28"))
                              (rule "times_zero_1" (formula "79") (term "1,0,0"))
                              (rule "add_literals" (formula "79") (term "0,0"))
                              (rule "leq_literals" (formula "79") (term "0"))
                               (builtin "One Step Simplification" (formula "79"))
                              (rule "false_right" (formula "79"))
                              (rule "Use_information_flow_contract_for_compareTo_325434207" (formula "19") (ifseqformula "19"))
                               (builtin "One Step Simplification" (formula "19") (ifInst ""  (formula "96")) (ifInst ""  (formula "96")))
                              (rule "true_left" (formula "19"))
                              (rule "Use_information_flow_contract_for_getOrder_757678341" (formula "62") (ifseqformula "25"))
                              (rule "replace_known_left" (formula "62") (term "1,1") (ifseqformula "7"))
                               (builtin "One Step Simplification" (formula "62"))
                              (rule "true_left" (formula "62"))
                              (rule "Use_information_flow_contract_for_multiply_1272441881" (formula "73") (ifseqformula "39"))
                              (rule "replaceKnownSelect_taclet21_12" (formula "73") (term "0,1,1"))
                              (rule "replaceKnownSelect_taclet21_11" (formula "73") (term "1,1,1"))
                              (rule "replaceKnownAuxiliaryConstant_taclet00111121_19" (formula "73") (term "0,1,1"))
                              (rule "replaceKnownAuxiliaryConstant_taclet0111121_18" (formula "73") (term "1,1,1"))
                              (rule "replaceKnownSelect_taclet21_8" (formula "73") (term "1,1,0,1"))
                              (rule "replaceKnownSelect_taclet21_9" (formula "73") (term "0,1,0,1"))
                              (rule "replaceKnownAuxiliaryConstant_taclet21_10" (formula "73") (term "1,1,0,1"))
                               (builtin "One Step Simplification" (formula "73") (ifInst ""  (formula "87")) (ifInst ""  (formula "86")) (ifInst ""  (formula "104")))
                              (rule "pullOutSelect" (formula "73") (term "1,0,1") (inst "selectSK=org_bouncycastle_math_ec_ECPoint_value_4"))
                              (rule "simplifySelectOfAnonEQ" (formula "73") (ifseqformula "26"))
                               (builtin "One Step Simplification" (formula "73") (ifInst ""  (formula "101")) (ifInst ""  (formula "14")))
                              (rule "applyEqReverse" (formula "74") (term "1,0,1") (ifseqformula "73"))
                              (rule "hideAuxiliaryEq" (formula "73"))
                              (rule "pullOutSelect" (formula "73") (term "0,0,1") (inst "selectSK=org_bouncycastle_math_ec_ECPoint_value_5"))
                              (rule "simplifySelectOfAnonEQ" (formula "73") (ifseqformula "64"))
                               (builtin "One Step Simplification" (formula "73") (ifInst ""  (formula "102")) (ifInst ""  (formula "51")))
                              (rule "applyEqReverse" (formula "74") (term "0,0,1") (ifseqformula "73"))
                              (rule "hideAuxiliaryEq" (formula "73"))
                              (rule "replace_known_left" (formula "73") (term "0,1") (ifseqformula "5"))
                               (builtin "One Step Simplification" (formula "73"))
                              (rule "notLeft" (formula "73"))
                              (rule "Class_invariant_axiom_for_org_bouncycastle_math_ec_ECPoint" (formula "79") (term "0"))
                               (builtin "One Step Simplification" (formula "79"))
                              (rule "Class_invariant_axiom_for_org_bouncycastle_math_ec_ECPoint" (formula "79"))
                              (rule "closeTrue" (formula "79"))
                           )
                        )
                        (branch "result_228_A_1.value@heapAtPre_A«anonHeapFunction» ≥ 0 FALSE"
                           (rule "inEqSimp_geqRight" (formula "80"))
                           (rule "mul_literals" (formula "1") (term "1,0,0"))
                           (rule "add_literals" (formula "1") (term "0,0"))
                           (rule "inEqSimp_sepPosMonomial0" (formula "1"))
                           (rule "mul_literals" (formula "1") (term "1"))
                           (rule "inEqSimp_contradEq3" (formula "33") (term "0") (ifseqformula "1"))
                           (rule "mul_literals" (formula "33") (term "1,0,0,0"))
                           (rule "add_literals" (formula "33") (term "0,0,0"))
                           (rule "qeq_literals" (formula "33") (term "0,0"))
                            (builtin "One Step Simplification" (formula "33"))
                           (rule "andLeft" (formula "33"))
                           (rule "andLeft" (formula "33"))
                           (rule "applyEq" (formula "37") (term "0,0") (ifseqformula "34"))
                           (rule "polySimp_mulComm0" (formula "37") (term "0"))
                           (rule "applyEq" (formula "33") (term "0") (ifseqformula "37"))
                           (rule "inEqSimp_homoInEq0" (formula "33"))
                           (rule "polySimp_mulComm0" (formula "33") (term "1,0"))
                           (rule "polySimp_rightDist" (formula "33") (term "1,0"))
                           (rule "polySimp_mulLiterals" (formula "33") (term "1,1,0"))
                           (rule "polySimp_elimOne" (formula "33") (term "1,1,0"))
                           (rule "polySimp_mulComm0" (formula "33") (term "0,1,0"))
                           (rule "polySimp_addAssoc" (formula "33") (term "0"))
                           (rule "polySimp_addComm0" (formula "33") (term "0,0"))
                           (rule "polySimp_pullOutFactor2b" (formula "33") (term "0"))
                           (rule "add_literals" (formula "33") (term "1,1,0"))
                           (rule "times_zero_1" (formula "33") (term "1,0"))
                           (rule "add_zero_right" (formula "33") (term "0"))
                           (rule "applyEq" (formula "35") (term "0") (ifseqformula "37"))
                           (rule "inEqSimp_homoInEq1" (formula "35"))
                           (rule "polySimp_mulComm0" (formula "35") (term "1,0"))
                           (rule "polySimp_rightDist" (formula "35") (term "1,0"))
                           (rule "polySimp_mulLiterals" (formula "35") (term "1,1,0"))
                           (rule "polySimp_elimOne" (formula "35") (term "1,1,0"))
                           (rule "polySimp_mulComm0" (formula "35") (term "0,1,0"))
                           (rule "polySimp_addComm1" (formula "35") (term "0"))
                           (rule "polySimp_addAssoc" (formula "35") (term "0,0"))
                           (rule "polySimp_addComm1" (formula "35") (term "0,0,0"))
                           (rule "polySimp_pullOutFactor2b" (formula "35") (term "0,0"))
                           (rule "add_literals" (formula "35") (term "1,1,0,0"))
                           (rule "times_zero_1" (formula "35") (term "1,0,0"))
                           (rule "add_zero_right" (formula "35") (term "0,0"))
                           (rule "applyEq" (formula "36") (term "0,1") (ifseqformula "34"))
                           (rule "inEqSimp_invertInEq1" (formula "33"))
                           (rule "polySimp_mulLiterals" (formula "33") (term "0"))
                           (rule "mul_literals" (formula "33") (term "1"))
                           (rule "polySimp_elimOne" (formula "33") (term "0"))
                           (rule "inEqSimp_sepPosMonomial0" (formula "35"))
                           (rule "polySimp_mulComm0" (formula "35") (term "1"))
                           (rule "polySimp_rightDist" (formula "35") (term "1"))
                           (rule "mul_literals" (formula "35") (term "0,1"))
                           (rule "polySimp_mulLiterals" (formula "35") (term "1,1"))
                           (rule "polySimp_elimOne" (formula "35") (term "1,1"))
                           (rule "shift_paren_or" (formula "4") (term "0,0,0"))
                            (builtin "One Step Simplification" (formula "4"))
                           (rule "eqSymm" (formula "4") (term "1,1,0,0,0"))
                           (rule "castedGetAny" (formula "4") (term "1,0,0,0,0,0,0"))
                           (rule "castedGetAny" (formula "4") (term "0,0,1,0,0,0"))
                           (rule "castedGetAny" (formula "4") (term "0,1,1,0,0,0"))
                            (builtin "One Step Simplification" (formula "4"))
                           (rule "true_left" (formula "4"))
                           (rule "cnf_rightDist" (formula "4") (term "0,0,0"))
                           (rule "distr_forallAnd" (formula "4") (term "0,0"))
                           (rule "distr_forallAnd" (formula "4") (term "0"))
                           (rule "distr_forallAnd" (formula "4"))
                           (rule "andLeft" (formula "4"))
                           (rule "shift_paren_or" (formula "3") (term "0,0,0"))
                            (builtin "One Step Simplification" (formula "3"))
                           (rule "eqSymm" (formula "3") (term "1,1,0,0,0"))
                           (rule "castedGetAny" (formula "3") (term "1,0,0,0,0,0,0"))
                           (rule "castedGetAny" (formula "3") (term "0,0,1,0,0,0"))
                           (rule "castedGetAny" (formula "3") (term "0,1,1,0,0,0"))
                            (builtin "One Step Simplification" (formula "3"))
                           (rule "true_left" (formula "3"))
                           (rule "cnf_rightDist" (formula "2") (term "0,0,0"))
                           (rule "distr_forallAnd" (formula "2") (term "0,0"))
                           (rule "distr_forallAnd" (formula "2") (term "0"))
                           (rule "distr_forallAnd" (formula "2"))
                           (rule "andLeft" (formula "2"))
                           (rule "commute_or_2" (formula "3") (term "0,0,0"))
                            (builtin "One Step Simplification" (formula "3"))
                           (rule "eqSymm" (formula "3") (term "1,0,0,0,0"))
                           (rule "castedGetAny" (formula "3") (term "1,0,0,1,0,0,0"))
                           (rule "castedGetAny" (formula "3") (term "0,0,0,0,0,0"))
                           (rule "castedGetAny" (formula "3") (term "0,1,0,0,0,0"))
                            (builtin "One Step Simplification" (formula "3"))
                           (rule "true_left" (formula "3"))
                           (rule "commute_or_2" (formula "2") (term "0,0,0"))
                            (builtin "One Step Simplification" (formula "2"))
                           (rule "eqSymm" (formula "2") (term "1,0,0,0,0"))
                           (rule "castedGetAny" (formula "2") (term "0,0,0,0,0,0"))
                           (rule "castedGetAny" (formula "2") (term "1,0,0,1,0,0,0"))
                           (rule "castedGetAny" (formula "2") (term "0,1,0,0,0,0"))
                            (builtin "One Step Simplification" (formula "2"))
                           (rule "true_left" (formula "2"))
                           (rule "shift_paren_or" (formula "2") (term "0,0,0"))
                            (builtin "One Step Simplification" (formula "2"))
                           (rule "eqSymm" (formula "2") (term "1,1,0,0,0"))
                           (rule "castedGetAny" (formula "2") (term "0,0,1,0,0,0"))
                           (rule "castedGetAny" (formula "2") (term "1,0,0,0,0,0,0"))
                           (rule "castedGetAny" (formula "2") (term "0,1,1,0,0,0"))
                            (builtin "One Step Simplification" (formula "2"))
                           (rule "true_left" (formula "2"))
                           (rule "Use_information_flow_contract_for_compareTo_325434207" (formula "20") (ifseqformula "20"))
                            (builtin "One Step Simplification" (formula "20") (ifInst ""  (formula "96")) (ifInst ""  (formula "96")))
                           (rule "true_left" (formula "20"))
                           (rule "Use_information_flow_contract_for_getOrder_757678341" (formula "62") (ifseqformula "26"))
                           (rule "replace_known_left" (formula "62") (term "1,1") (ifseqformula "8"))
                            (builtin "One Step Simplification" (formula "62"))
                           (rule "true_left" (formula "62"))
                           (rule "Use_information_flow_contract_for_multiply_1272441881" (formula "73") (ifseqformula "39"))
                           (rule "replaceKnownSelect_taclet21_11" (formula "73") (term "1,1,1"))
                           (rule "replaceKnownSelect_taclet21_12" (formula "73") (term "0,1,1"))
                           (rule "replaceKnownAuxiliaryConstant_taclet0111121_18" (formula "73") (term "1,1,1"))
                           (rule "replaceKnownAuxiliaryConstant_taclet00111121_19" (formula "73") (term "0,1,1"))
                           (rule "replaceKnownSelect_taclet21_8" (formula "73") (term "1,1,0,1"))
                           (rule "replaceKnownSelect_taclet21_9" (formula "73") (term "0,1,0,1"))
                           (rule "replaceKnownAuxiliaryConstant_taclet21_10" (formula "73") (term "1,1,0,1"))
                            (builtin "One Step Simplification" (formula "73") (ifInst ""  (formula "87")) (ifInst ""  (formula "86")) (ifInst ""  (formula "104")))
                           (rule "pullOutSelect" (formula "73") (term "1,0,1") (inst "selectSK=org_bouncycastle_math_ec_ECPoint_value_4"))
                           (rule "simplifySelectOfAnonEQ" (formula "73") (ifseqformula "27"))
                            (builtin "One Step Simplification" (formula "73") (ifInst ""  (formula "101")) (ifInst ""  (formula "15")))
                           (rule "applyEqReverse" (formula "74") (term "1,0,1") (ifseqformula "73"))
                           (rule "hideAuxiliaryEq" (formula "73"))
                           (rule "pullOutSelect" (formula "73") (term "0,0,1") (inst "selectSK=org_bouncycastle_math_ec_ECPoint_value_5"))
                           (rule "simplifySelectOfAnonEQ" (formula "73") (ifseqformula "64"))
                            (builtin "One Step Simplification" (formula "73") (ifInst ""  (formula "102")) (ifInst ""  (formula "51")))
                           (rule "applyEqReverse" (formula "74") (term "0,0,1") (ifseqformula "73"))
                           (rule "hideAuxiliaryEq" (formula "73"))
                           (rule "replace_known_left" (formula "73") (term "0,1") (ifseqformula "6"))
                            (builtin "One Step Simplification" (formula "73"))
                           (rule "notLeft" (formula "73"))
                           (rule "Class_invariant_axiom_for_org_bouncycastle_math_ec_ECPoint" (formula "79") (term "0"))
                            (builtin "One Step Simplification" (formula "79"))
                           (rule "Class_invariant_axiom_for_org_bouncycastle_math_ec_ECPoint" (formula "79"))
                           (rule "closeTrue" (formula "79"))
                        )
                     )
                     (branch " resultAtPost_226_B.<created>@anon_heap_mod«anonHeapFunction» = TRUE FALSE"
                        (rule "applyEqReverse" (formula "108") (term "1") (ifseqformula "8"))
                        (rule "hideAuxiliaryEq" (formula "8"))
                        (rule "eqSymm" (formula "107"))
                        (rule "replace_known_right" (formula "75") (term "0") (ifseqformula "82"))
                         (builtin "One Step Simplification" (formula "75"))
                        (rule "commute_or" (formula "3") (term "0,1,0,0,0"))
                        (rule "commute_or" (formula "2") (term "0,0,0,0"))
                        (rule "onlyCreatedObjectsAreReferenced" (formula "100") (term "0") (ifseqformula "55"))
                        (rule "replace_known_left" (formula "1") (term "1") (ifseqformula "61"))
                         (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "101")))
                        (rule "true_left" (formula "1"))
                        (rule "onlyCreatedObjectsAreReferenced" (formula "99") (term "0") (ifseqformula "21"))
                        (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "100"))
                         (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "27")))
                        (rule "true_left" (formula "1"))
                        (rule "onlyCreatedObjectsAreReferenced" (formula "30") (term "2") (ifseqformula "21"))
                        (rule "replace_known_right" (formula "30") (term "0") (ifseqformula "98"))
                         (builtin "One Step Simplification" (formula "30") (ifInst ""  (formula "15")))
                        (rule "true_left" (formula "30"))
                        (rule "onlyCreatedObjectsAreReferenced" (formula "13") (term "1,1,0") (ifseqformula "21"))
                        (rule "replace_known_right" (formula "13") (term "0") (ifseqformula "96"))
                         (builtin "One Step Simplification" (formula "13") (ifInst ""  (formula "15")))
                        (rule "true_left" (formula "13"))
                        (rule "onlyCreatedObjectsAreReferenced" (formula "48") (term "1,0") (ifseqformula "55"))
                        (rule "replace_known_right" (formula "48") (term "0") (ifseqformula "97"))
                         (builtin "One Step Simplification" (formula "48") (ifInst ""  (formula "49")))
                        (rule "true_left" (formula "48"))
                        (rule "onlyCreatedObjectsAreReferenced" (formula "13") (term "1,0") (ifseqformula "21"))
                        (rule "replace_known_left" (formula "13") (term "1") (ifseqformula "14"))
                         (builtin "One Step Simplification" (formula "13") (ifInst ""  (formula "94")))
                        (rule "true_left" (formula "13"))
                        (rule "onlyCreatedObjectsAreReferenced" (formula "47") (term "1,0") (ifseqformula "55"))
                        (rule "replace_known_left" (formula "47") (term "1") (ifseqformula "48"))
                         (builtin "One Step Simplification" (formula "47") (ifInst ""  (formula "95")))
                        (rule "true_left" (formula "47"))
                        (rule "commute_or" (formula "2") (term "0,1,0,0,0"))
                        (rule "onlyCreatedObjectsAreReferenced" (formula "64") (term "2") (ifseqformula "55"))
                        (rule "replace_known_right" (formula "64") (term "0") (ifseqformula "99"))
                         (builtin "One Step Simplification" (formula "64") (ifInst ""  (formula "49")))
                        (rule "true_left" (formula "64"))
                        (rule "commute_or" (formula "1") (term "0,0,0,0"))
                        (rule "commute_or" (formula "1") (term "0,1,0,0,0"))
                        (rule "commute_or_2" (formula "4") (term "0,0,0"))
                        (rule "commute_and" (formula "33") (term "0,1"))
                        (rule "commute_or_2" (formula "3") (term "0,0,0"))
                        (rule "commute_or_2" (formula "6") (term "0,0,0,0,0"))
                         (builtin "One Step Simplification" (formula "6"))
                        (rule "commute_or_2" (formula "2") (term "0,0,0"))
                        (rule "commute_or_2" (formula "1") (term "0,0,0"))
                        (rule "shift_paren_or" (formula "5") (term "0,0,0,0,0"))
                        (rule "commute_or_2" (formula "6") (term "0,0,0,0"))
                        (rule "shift_paren_or" (formula "4") (term "0,0,0,0"))
                        (rule "commute_or_2" (formula "3") (term "1,0,0,0,0"))
                        (rule "shift_paren_or" (formula "2") (term "0,0,0,0"))
                        (rule "commute_or_2" (formula "1") (term "1,0,0,0,0"))
                        (rule "commute_or_2" (formula "5") (term "0,0,0,0,0"))
                         (builtin "One Step Simplification" (formula "5"))
                        (rule "commute_or_2" (formula "5") (term "0,0,0,0"))
                        (rule "shift_paren_or" (formula "3") (term "0,0,0,0"))
                        (rule "shift_paren_or" (formula "1") (term "0,0,0,0"))
                        (rule "cnf_rightDist" (formula "6") (term "0,0,0"))
                        (rule "distr_forallAnd" (formula "6") (term "0,0"))
                        (rule "distr_forallAnd" (formula "6") (term "0"))
                        (rule "distr_forallAnd" (formula "6"))
                        (rule "andLeft" (formula "6"))
                        (rule "commute_or_2" (formula "6") (term "0,0,0"))
                         (builtin "One Step Simplification" (formula "6"))
                        (rule "eqSymm" (formula "6") (term "1,0,0,0,0"))
                        (rule "castedGetAny" (formula "6") (term "1,0,0,1,0,0,0"))
                        (rule "castedGetAny" (formula "6") (term "0,0,0,0,0,0"))
                        (rule "castedGetAny" (formula "6") (term "0,1,0,0,0,0"))
                         (builtin "One Step Simplification" (formula "6"))
                        (rule "true_left" (formula "6"))
                        (rule "shift_paren_or" (formula "6") (term "0,0,0"))
                         (builtin "One Step Simplification" (formula "6"))
                        (rule "eqSymm" (formula "6") (term "1,1,0,0,0"))
                        (rule "castedGetAny" (formula "6") (term "0,0,1,0,0,0"))
                        (rule "castedGetAny" (formula "6") (term "0,0,0,0,0,0"))
                        (rule "castedGetAny" (formula "6") (term "0,1,1,0,0,0"))
                         (builtin "One Step Simplification" (formula "6"))
                        (rule "true_left" (formula "6"))
                        (rule "commute_and" (formula "4") (term "1,0,0,0"))
                        (rule "commute_and" (formula "3") (term "1,0,0,0"))
                        (rule "commute_and" (formula "2") (term "1,0,0,0"))
                        (rule "cnf_rightDist" (formula "5") (term "0,0,0"))
                        (rule "distr_forallAnd" (formula "5") (term "0,0"))
                        (rule "distr_forallAnd" (formula "5") (term "0"))
                        (rule "distr_forallAnd" (formula "5"))
                        (rule "andLeft" (formula "5"))
                        (rule "commute_or_2" (formula "5") (term "0,0,0"))
                         (builtin "One Step Simplification" (formula "5"))
                        (rule "eqSymm" (formula "5") (term "1,0,0,0,0"))
                        (rule "castedGetAny" (formula "5") (term "1,0,0,1,0,0,0"))
                        (rule "castedGetAny" (formula "5") (term "0,0,0,0,0,0"))
                        (rule "castedGetAny" (formula "5") (term "0,1,0,0,0,0"))
                         (builtin "One Step Simplification" (formula "5"))
                        (rule "true_left" (formula "5"))
                        (rule "commute_and" (formula "1") (term "1,0,0,0"))
                        (rule "shift_paren_or" (formula "5") (term "0,0,0"))
                         (builtin "One Step Simplification" (formula "5"))
                        (rule "eqSymm" (formula "5") (term "1,1,0,0,0"))
                        (rule "castedGetAny" (formula "5") (term "0,0,1,0,0,0"))
                        (rule "castedGetAny" (formula "5") (term "0,0,0,0,0,0"))
                        (rule "castedGetAny" (formula "5") (term "0,1,1,0,0,0"))
                         (builtin "One Step Simplification" (formula "5"))
                        (rule "true_left" (formula "5"))
                        (rule "shift_paren_or" (formula "4") (term "0,0,0,0,0"))
                         (builtin "One Step Simplification" (formula "4"))
                        (rule "shift_paren_or" (formula "2") (term "0,0,0,0,0"))
                         (builtin "One Step Simplification" (formula "2"))
                        (rule "shift_paren_or" (formula "3") (term "0,0,0,0,0"))
                         (builtin "One Step Simplification" (formula "3"))
                        (rule "shift_paren_or" (formula "1") (term "0,0,0,0,0"))
                         (builtin "One Step Simplification" (formula "1"))
                        (rule "commute_or_2" (formula "4") (term "0,0,0,0"))
                        (rule "commute_or_2" (formula "2") (term "0,0,0,0"))
                        (rule "cnf_rightDist" (formula "3") (term "0,0,0"))
                        (rule "distr_forallAnd" (formula "3") (term "0,0"))
                        (rule "distr_forallAnd" (formula "3") (term "0"))
                        (rule "distr_forallAnd" (formula "3"))
                        (rule "andLeft" (formula "3"))
                        (rule "shift_paren_or" (formula "4") (term "0,0,0"))
                         (builtin "One Step Simplification" (formula "4"))
                        (rule "eqSymm" (formula "4") (term "1,1,0,0,0"))
                        (rule "castedGetAny" (formula "4") (term "0,0,0,0,0,0"))
                        (rule "castedGetAny" (formula "4") (term "0,0,1,0,0,0"))
                        (rule "castedGetAny" (formula "4") (term "0,1,1,0,0,0"))
                         (builtin "One Step Simplification" (formula "4"))
                        (rule "true_left" (formula "4"))
                        (rule "cnf_rightDist" (formula "1") (term "0,0,0"))
                        (rule "distr_forallAnd" (formula "1") (term "0,0"))
                        (rule "distr_forallAnd" (formula "1") (term "0"))
                        (rule "distr_forallAnd" (formula "1"))
                        (rule "andLeft" (formula "1"))
                        (rule "shift_paren_or" (formula "2") (term "0,0,0"))
                         (builtin "One Step Simplification" (formula "2"))
                        (rule "eqSymm" (formula "2") (term "1,1,0,0,0"))
                        (rule "castedGetAny" (formula "2") (term "0,0,0,0,0,0"))
                        (rule "castedGetAny" (formula "2") (term "0,0,1,0,0,0"))
                        (rule "castedGetAny" (formula "2") (term "0,1,1,0,0,0"))
                         (builtin "One Step Simplification" (formula "2"))
                        (rule "true_left" (formula "2"))
                        (rule "cnf_rightDist" (formula "4") (term "0,0,0"))
                        (rule "distr_forallAnd" (formula "4") (term "0,0"))
                        (rule "distr_forallAnd" (formula "4") (term "0"))
                        (rule "distr_forallAnd" (formula "4"))
                        (rule "andLeft" (formula "4"))
                        (rule "cnf_rightDist" (formula "2") (term "0,0,0"))
                        (rule "distr_forallAnd" (formula "2") (term "0,0"))
                        (rule "distr_forallAnd" (formula "2") (term "0"))
                        (rule "distr_forallAnd" (formula "2"))
                        (rule "andLeft" (formula "2"))
                        (rule "shift_paren_or" (formula "5") (term "0,0,0"))
                         (builtin "One Step Simplification" (formula "5"))
                        (rule "eqSymm" (formula "5") (term "1,1,0,0,0"))
                        (rule "castedGetAny" (formula "5") (term "0,0,0,0,0,0"))
                        (rule "castedGetAny" (formula "5") (term "0,0,1,0,0,0"))
                        (rule "castedGetAny" (formula "5") (term "0,1,1,0,0,0"))
                         (builtin "One Step Simplification" (formula "5"))
                        (rule "true_left" (formula "5"))
                        (rule "cnf_rightDist" (formula "3") (term "0,0,0"))
                        (rule "distr_forallAnd" (formula "3") (term "0,0"))
                        (rule "distr_forallAnd" (formula "3") (term "0"))
                        (rule "distr_forallAnd" (formula "3"))
                        (rule "andLeft" (formula "3"))
                        (rule "cnf_rightDist" (formula "1") (term "0,0,0"))
                        (rule "distr_forallAnd" (formula "1") (term "0,0"))
                        (rule "distr_forallAnd" (formula "1") (term "0"))
                        (rule "distr_forallAnd" (formula "1"))
                        (rule "andLeft" (formula "1"))
                        (rule "shift_paren_or" (formula "2") (term "0,0,0"))
                         (builtin "One Step Simplification" (formula "2"))
                        (rule "eqSymm" (formula "2") (term "1,1,0,0,0"))
                        (rule "castedGetAny" (formula "2") (term "1,0,0,0,0,0,0"))
                        (rule "castedGetAny" (formula "2") (term "0,0,1,0,0,0"))
                        (rule "castedGetAny" (formula "2") (term "0,1,1,0,0,0"))
                         (builtin "One Step Simplification" (formula "2"))
                        (rule "true_left" (formula "2"))
                        (rule "cnf_rightDist" (formula "2") (term "0,0,0"))
                        (rule "distr_forallAnd" (formula "2") (term "0,0"))
                        (rule "distr_forallAnd" (formula "2") (term "0"))
                        (rule "distr_forallAnd" (formula "2"))
                        (rule "andLeft" (formula "2"))
                        (rule "commute_or_2" (formula "2") (term "0,0,0"))
                         (builtin "One Step Simplification" (formula "2"))
                        (rule "eqSymm" (formula "2") (term "1,0,0,0,0"))
                        (rule "castedGetAny" (formula "2") (term "0,0,0,0,0,0"))
                        (rule "castedGetAny" (formula "2") (term "1,0,0,1,0,0,0"))
                        (rule "castedGetAny" (formula "2") (term "0,1,0,0,0,0"))
                         (builtin "One Step Simplification" (formula "2"))
                        (rule "true_left" (formula "2"))
                        (rule "ifthenelse_split_for" (formula "29") (term "1,1"))
                        (branch "result_228_A_1.value@heapAtPre_A«anonHeapFunction» ≥ 0 TRUE"
                           (rule "cnf_rightDist" (formula "30"))
                           (rule "andLeft" (formula "30"))
                           (rule "commute_or" (formula "31"))
                           (rule "cnf_rightDist" (formula "30"))
                           (rule "andLeft" (formula "30"))
                           (rule "commute_or" (formula "31"))
                           (rule "cnf_rightDist" (formula "1") (term "0,0,0"))
                           (rule "distr_forallAnd" (formula "1") (term "0,0"))
                           (rule "distr_forallAnd" (formula "1") (term "0"))
                           (rule "distr_forallAnd" (formula "1"))
                           (rule "andLeft" (formula "1"))
                           (rule "shift_paren_or" (formula "2") (term "0,0,0"))
                            (builtin "One Step Simplification" (formula "2"))
                           (rule "eqSymm" (formula "2") (term "1,1,0,0,0"))
                           (rule "castedGetAny" (formula "2") (term "0,0,1,0,0,0"))
                           (rule "castedGetAny" (formula "2") (term "1,0,0,0,0,0,0"))
                           (rule "castedGetAny" (formula "2") (term "0,1,1,0,0,0"))
                            (builtin "One Step Simplification" (formula "2"))
                           (rule "true_left" (formula "2"))
                           (rule "commute_or_2" (formula "1") (term "0,0,0"))
                            (builtin "One Step Simplification" (formula "1"))
                           (rule "eqSymm" (formula "1") (term "1,0,0,0,0"))
                           (rule "castedGetAny" (formula "1") (term "1,0,0,1,0,0,0"))
                           (rule "castedGetAny" (formula "1") (term "0,0,0,0,0,0"))
                           (rule "castedGetAny" (formula "1") (term "0,1,0,0,0,0"))
                            (builtin "One Step Simplification" (formula "1"))
                           (rule "true_left" (formula "1"))
                           (rule "cut_direct" (formula "28") (term "0"))
                           (branch "CUT: result_228_A_1.value@heapAtPre_A«anonHeapFunction» = 0 TRUE"
                               (builtin "One Step Simplification" (formula "29"))
                              (rule "true_left" (formula "29"))
                              (rule "replace_known_left" (formula "29") (term "0") (ifseqformula "28"))
                               (builtin "One Step Simplification" (formula "29"))
                              (rule "true_left" (formula "29"))
                              (rule "replace_known_left" (formula "29") (term "0") (ifseqformula "28"))
                               (builtin "One Step Simplification" (formula "29"))
                              (rule "true_left" (formula "29"))
                              (rule "applyEq" (formula "30") (term "1,0") (ifseqformula "28"))
                              (rule "times_zero_1" (formula "30") (term "0"))
                              (rule "polySimp_homoEq" (formula "30"))
                              (rule "mul_literals" (formula "30") (term "1,0"))
                              (rule "add_zero_right" (formula "30") (term "0"))
                              (rule "applyEq" (formula "27") (term "0") (ifseqformula "28"))
                              (rule "qeq_literals" (formula "27"))
                              (rule "true_left" (formula "27"))
                              (rule "applyEq" (formula "28") (term "1,0") (ifseqformula "27"))
                              (rule "eqSymm" (formula "28"))
                              (rule "polySimp_homoEq" (formula "28"))
                              (rule "polySimp_mulLiterals" (formula "28") (term "1,0"))
                              (rule "polySimp_elimOne" (formula "28") (term "1,0"))
                              (rule "applyEq" (formula "6") (term "1") (ifseqformula "27"))
                              (rule "applyEq" (formula "22") (term "1") (ifseqformula "27"))
                              (rule "applyEq" (formula "56") (term "1") (ifseqformula "27"))
                              (rule "applyEq" (formula "28") (term "1,1,0") (ifseqformula "27"))
                              (rule "polySimp_addComm0" (formula "28") (term "0"))
                              (rule "polySimp_sepNegMonomial" (formula "29"))
                              (rule "polySimp_mulLiterals" (formula "29") (term "0"))
                              (rule "polySimp_elimOne" (formula "29") (term "0"))
                              (rule "applyEq" (formula "28") (term "0,1,0") (ifseqformula "29"))
                              (rule "polySimp_addComm0" (formula "28") (term "0"))
                              (rule "applyEq" (formula "3") (term "0") (ifseqformula "29"))
                              (rule "applyEq" (formula "28") (term "0,0,1,0") (ifseqformula "29"))
                              (rule "polySimp_addComm0" (formula "28") (term "0"))
                              (rule "applyEq" (formula "5") (term "1") (ifseqformula "29"))
                              (rule "polySimp_sepPosMonomial" (formula "28"))
                              (rule "jdiv_axiom" (formula "28") (term "0"))
                              (rule "eqSymm" (formula "28"))
                              (rule "applyEq" (formula "28") (term "1") (ifseqformula "29"))
                               (builtin "One Step Simplification" (formula "28"))
                              (rule "eqSymm" (formula "28") (term "1"))
                              (rule "polySimp_homoEq" (formula "28") (term "1"))
                              (rule "polySimp_mulLiterals" (formula "28") (term "1,0,1"))
                              (rule "polySimp_elimOne" (formula "28") (term "1,0,1"))
                              (rule "polySimp_sepPosMonomial" (formula "28") (term "1"))
                              (rule "inEqSimp_contradInEq0" (formula "28") (term "0,0") (ifseqformula "3"))
                              (rule "qeq_literals" (formula "28") (term "0,0,0"))
                               (builtin "One Step Simplification" (formula "28"))
                              (rule "true_left" (formula "28"))
                              (rule "div_axiom" (formula "28") (term "0,1") (inst "quotient=quotient_1"))
                               (builtin "One Step Simplification" (formula "28"))
                              (rule "true_left" (formula "28"))
                              (rule "Use_information_flow_contract_for_compareTo_325434207" (formula "18") (ifseqformula "18"))
                               (builtin "One Step Simplification" (formula "18") (ifInst ""  (formula "94")) (ifInst ""  (formula "94")))
                              (rule "true_left" (formula "18"))
                              (rule "Use_information_flow_contract_for_getOrder_757678341" (formula "58") (ifseqformula "24"))
                              (rule "applyEq" (formula "58") (term "0,1,1") (ifseqformula "6"))
                              (rule "eqSymm" (formula "58") (term "1,1"))
                              (rule "replace_known_left" (formula "58") (term "1,1") (ifseqformula "27"))
                               (builtin "One Step Simplification" (formula "58"))
                              (rule "true_left" (formula "58"))
                              (rule "Use_information_flow_contract_for_multiply_1272441881_0" (formula "70") (ifseqformula "35"))
                              (rule "replaceKnownSelect_taclet21_11" (formula "70") (term "1,1,1"))
                              (rule "replaceKnownSelect_taclet21_12" (formula "70") (term "0,1,1"))
                              (rule "replaceKnownAuxiliaryConstant_taclet0111121_18" (formula "70") (term "1,1,1"))
                              (rule "replaceKnownAuxiliaryConstant_taclet10111121_19" (formula "70") (term "0,1,1"))
                              (rule "replaceKnownSelect_taclet21_9" (formula "70") (term "0,1,0,1"))
                              (rule "replaceKnownSelect_taclet21_8" (formula "70") (term "1,1,0,1"))
                              (rule "replaceKnownAuxiliaryConstant_taclet121_15" (formula "70") (term "0,1,0,1"))
                              (rule "replaceKnownAuxiliaryConstant_taclet21_10" (formula "70") (term "1,1,0,1"))
                              (rule "replaceKnownAuxiliaryConstant_taclet121_15" (formula "70") (term "1,1,0,1"))
                               (builtin "One Step Simplification" (formula "70") (ifInst ""  (formula "85")) (ifInst ""  (formula "84")) (ifInst ""  (formula "102")))
                              (rule "pullOutSelect" (formula "70") (term "0,0,1") (inst "selectSK=org_bouncycastle_math_ec_ECPoint_value_4"))
                              (rule "simplifySelectOfAnonEQ" (formula "70") (ifseqformula "60"))
                               (builtin "One Step Simplification" (formula "70") (ifInst ""  (formula "100")) (ifInst ""  (formula "47")))
                              (rule "applyEqReverse" (formula "71") (term "0,0,1") (ifseqformula "70"))
                              (rule "hideAuxiliaryEq" (formula "70"))
                              (rule "eqSymm" (formula "70") (term "0,1"))
                              (rule "applyEq" (formula "70") (term "1,0,1") (ifseqformula "4"))
                              (rule "pullOutSelect" (formula "70") (term "0,0,1") (inst "selectSK=org_bouncycastle_math_ec_ECPoint_value_5"))
                              (rule "simplifySelectOfAnonEQ" (formula "70") (ifseqformula "25"))
                               (builtin "One Step Simplification" (formula "70") (ifInst ""  (formula "99")) (ifInst ""  (formula "13")))
                              (rule "applyEqReverse" (formula "71") (term "0,0,1") (ifseqformula "70"))
                               (builtin "One Step Simplification" (formula "71"))
                              (rule "notLeft" (formula "71"))
                              (rule "hideAuxiliaryEq" (formula "70"))
                              (rule "Class_invariant_axiom_for_org_bouncycastle_math_ec_ECPoint" (formula "76") (term "0"))
                               (builtin "One Step Simplification" (formula "76"))
                              (rule "Class_invariant_axiom_for_org_bouncycastle_math_ec_ECPoint" (formula "76"))
                              (rule "closeTrue" (formula "76"))
                           )
                           (branch "CUT: result_228_A_1.value@heapAtPre_A«anonHeapFunction» = 0 FALSE"
                               (builtin "One Step Simplification" (formula "28"))
                              (rule "replace_known_right" (formula "29") (term "0") (ifseqformula "79"))
                               (builtin "One Step Simplification" (formula "29"))
                              (rule "replace_known_right" (formula "30") (term "0") (ifseqformula "79"))
                               (builtin "One Step Simplification" (formula "30"))
                              (rule "applyEq" (formula "32") (term "0,0") (ifseqformula "29"))
                              (rule "polySimp_mulComm0" (formula "32") (term "0"))
                              (rule "applyEq" (formula "30") (term "0") (ifseqformula "32"))
                              (rule "inEqSimp_homoInEq1" (formula "30"))
                              (rule "polySimp_mulComm0" (formula "30") (term "1,0"))
                              (rule "polySimp_rightDist" (formula "30") (term "1,0"))
                              (rule "polySimp_mulLiterals" (formula "30") (term "1,1,0"))
                              (rule "polySimp_elimOne" (formula "30") (term "1,1,0"))
                              (rule "polySimp_mulComm0" (formula "30") (term "0,1,0"))
                              (rule "polySimp_addComm1" (formula "30") (term "0"))
                              (rule "polySimp_addAssoc" (formula "30") (term "0,0"))
                              (rule "polySimp_addComm1" (formula "30") (term "0,0,0"))
                              (rule "polySimp_pullOutFactor2b" (formula "30") (term "0,0"))
                              (rule "add_literals" (formula "30") (term "1,1,0,0"))
                              (rule "times_zero_1" (formula "30") (term "1,0,0"))
                              (rule "add_zero_right" (formula "30") (term "0,0"))
                              (rule "applyEq" (formula "28") (term "0") (ifseqformula "32"))
                              (rule "inEqSimp_homoInEq0" (formula "28"))
                              (rule "polySimp_mulComm0" (formula "28") (term "1,0"))
                              (rule "polySimp_rightDist" (formula "28") (term "1,0"))
                              (rule "polySimp_mulLiterals" (formula "28") (term "1,1,0"))
                              (rule "polySimp_elimOne" (formula "28") (term "1,1,0"))
                              (rule "polySimp_mulComm0" (formula "28") (term "0,1,0"))
                              (rule "polySimp_addAssoc" (formula "28") (term "0"))
                              (rule "polySimp_addComm0" (formula "28") (term "0,0"))
                              (rule "polySimp_pullOutFactor2b" (formula "28") (term "0"))
                              (rule "add_literals" (formula "28") (term "1,1,0"))
                              (rule "times_zero_1" (formula "28") (term "1,0"))
                              (rule "add_zero_right" (formula "28") (term "0"))
                              (rule "applyEq" (formula "31") (term "0,1") (ifseqformula "29"))
                              (rule "inEqSimp_sepNegMonomial0" (formula "30"))
                              (rule "polySimp_mulLiterals" (formula "30") (term "0"))
                              (rule "polySimp_elimOne" (formula "30") (term "0"))
                              (rule "inEqSimp_invertInEq1" (formula "28"))
                              (rule "mul_literals" (formula "28") (term "1"))
                              (rule "polySimp_mulLiterals" (formula "28") (term "0"))
                              (rule "polySimp_elimOne" (formula "28") (term "0"))
                              (rule "inEqSimp_strengthen1" (formula "27") (ifseqformula "79"))
                              (rule "add_zero_right" (formula "27") (term "1"))
                              (rule "inEqSimp_contradEq7" (formula "79") (ifseqformula "27"))
                              (rule "times_zero_1" (formula "79") (term "1,0,0"))
                              (rule "add_literals" (formula "79") (term "0,0"))
                              (rule "leq_literals" (formula "79") (term "0"))
                               (builtin "One Step Simplification" (formula "79"))
                              (rule "false_right" (formula "79"))
                              (rule "Use_information_flow_contract_for_compareTo_325434207" (formula "18") (ifseqformula "18"))
                               (builtin "One Step Simplification" (formula "18") (ifInst ""  (formula "97")) (ifInst ""  (formula "97")))
                              (rule "true_left" (formula "18"))
                              (rule "Use_information_flow_contract_for_getOrder_757678341" (formula "61") (ifseqformula "24"))
                              (rule "replace_known_left" (formula "61") (term "1,1") (ifseqformula "6"))
                               (builtin "One Step Simplification" (formula "61"))
                              (rule "true_left" (formula "61"))
                              (rule "Use_information_flow_contract_for_multiply_1272441881" (formula "73") (ifseqformula "38"))
                              (rule "replaceKnownSelect_taclet21_12" (formula "73") (term "0,1,1"))
                              (rule "replaceKnownSelect_taclet21_11" (formula "73") (term "1,1,1"))
                              (rule "replaceKnownAuxiliaryConstant_taclet10111121_19" (formula "73") (term "0,1,1"))
                              (rule "replaceKnownAuxiliaryConstant_taclet0111121_18" (formula "73") (term "1,1,1"))
                              (rule "replaceKnownSelect_taclet21_8" (formula "73") (term "1,1,0,1"))
                              (rule "replaceKnownSelect_taclet21_9" (formula "73") (term "0,1,0,1"))
                              (rule "replaceKnownAuxiliaryConstant_taclet21_10" (formula "73") (term "1,1,0,1"))
                               (builtin "One Step Simplification" (formula "73") (ifInst ""  (formula "88")) (ifInst ""  (formula "87")) (ifInst ""  (formula "105")))
                              (rule "pullOutSelect" (formula "73") (term "0,0,1") (inst "selectSK=org_bouncycastle_math_ec_ECPoint_value_4"))
                              (rule "simplifySelectOfAnonEQ" (formula "73") (ifseqformula "63"))
                               (builtin "One Step Simplification" (formula "73") (ifInst ""  (formula "103")) (ifInst ""  (formula "50")))
                              (rule "applyEqReverse" (formula "74") (term "0,0,1") (ifseqformula "73"))
                              (rule "hideAuxiliaryEq" (formula "73"))
                              (rule "eqSymm" (formula "73") (term "0,1"))
                              (rule "applyEq" (formula "73") (term "1,0,1") (ifseqformula "4"))
                              (rule "pullOutSelect" (formula "73") (term "0,0,1") (inst "selectSK=org_bouncycastle_math_ec_ECPoint_value_5"))
                              (rule "simplifySelectOfAnonEQ" (formula "73") (ifseqformula "25"))
                               (builtin "One Step Simplification" (formula "73") (ifInst ""  (formula "102")) (ifInst ""  (formula "13")))
                              (rule "applyEqReverse" (formula "74") (term "0,0,1") (ifseqformula "73"))
                               (builtin "One Step Simplification" (formula "74"))
                              (rule "notLeft" (formula "74"))
                              (rule "hideAuxiliaryEq" (formula "73"))
                              (rule "Class_invariant_axiom_for_org_bouncycastle_math_ec_ECPoint" (formula "79") (term "0"))
                               (builtin "One Step Simplification" (formula "79"))
                              (rule "Class_invariant_axiom_for_org_bouncycastle_math_ec_ECPoint" (formula "79"))
                              (rule "closeTrue" (formula "79"))
                           )
                        )
                        (branch "result_228_A_1.value@heapAtPre_A«anonHeapFunction» ≥ 0 FALSE"
                           (rule "inEqSimp_geqRight" (formula "78"))
                           (rule "mul_literals" (formula "1") (term "1,0,0"))
                           (rule "add_literals" (formula "1") (term "0,0"))
                           (rule "inEqSimp_sepPosMonomial0" (formula "1"))
                           (rule "mul_literals" (formula "1") (term "1"))
                           (rule "inEqSimp_contradEq3" (formula "30") (term "0") (ifseqformula "1"))
                           (rule "mul_literals" (formula "30") (term "1,0,0,0"))
                           (rule "add_literals" (formula "30") (term "0,0,0"))
                           (rule "qeq_literals" (formula "30") (term "0,0"))
                            (builtin "One Step Simplification" (formula "30"))
                           (rule "andLeft" (formula "30"))
                           (rule "andLeft" (formula "30"))
                           (rule "applyEq" (formula "34") (term "0,0") (ifseqformula "31"))
                           (rule "polySimp_mulComm0" (formula "34") (term "0"))
                           (rule "applyEq" (formula "30") (term "0") (ifseqformula "34"))
                           (rule "inEqSimp_homoInEq0" (formula "30"))
                           (rule "polySimp_mulComm0" (formula "30") (term "1,0"))
                           (rule "polySimp_rightDist" (formula "30") (term "1,0"))
                           (rule "polySimp_mulLiterals" (formula "30") (term "1,1,0"))
                           (rule "polySimp_elimOne" (formula "30") (term "1,1,0"))
                           (rule "polySimp_mulComm0" (formula "30") (term "0,1,0"))
                           (rule "polySimp_addAssoc" (formula "30") (term "0"))
                           (rule "polySimp_addComm0" (formula "30") (term "0,0"))
                           (rule "polySimp_pullOutFactor2b" (formula "30") (term "0"))
                           (rule "add_literals" (formula "30") (term "1,1,0"))
                           (rule "times_zero_1" (formula "30") (term "1,0"))
                           (rule "add_zero_right" (formula "30") (term "0"))
                           (rule "applyEq" (formula "32") (term "0") (ifseqformula "34"))
                           (rule "inEqSimp_homoInEq1" (formula "32"))
                           (rule "polySimp_mulComm0" (formula "32") (term "1,0"))
                           (rule "polySimp_rightDist" (formula "32") (term "1,0"))
                           (rule "polySimp_mulLiterals" (formula "32") (term "1,1,0"))
                           (rule "polySimp_elimOne" (formula "32") (term "1,1,0"))
                           (rule "polySimp_mulComm0" (formula "32") (term "0,1,0"))
                           (rule "polySimp_addComm1" (formula "32") (term "0"))
                           (rule "polySimp_addAssoc" (formula "32") (term "0,0"))
                           (rule "polySimp_addComm1" (formula "32") (term "0,0,0"))
                           (rule "polySimp_pullOutFactor2b" (formula "32") (term "0,0"))
                           (rule "add_literals" (formula "32") (term "1,1,0,0"))
                           (rule "times_zero_1" (formula "32") (term "1,0,0"))
                           (rule "add_zero_right" (formula "32") (term "0,0"))
                           (rule "applyEq" (formula "33") (term "0,1") (ifseqformula "31"))
                           (rule "inEqSimp_invertInEq1" (formula "30"))
                           (rule "mul_literals" (formula "30") (term "1"))
                           (rule "polySimp_mulLiterals" (formula "30") (term "0"))
                           (rule "polySimp_elimOne" (formula "30") (term "0"))
                           (rule "inEqSimp_sepPosMonomial0" (formula "32"))
                           (rule "polySimp_mulComm0" (formula "32") (term "1"))
                           (rule "polySimp_rightDist" (formula "32") (term "1"))
                           (rule "polySimp_mulLiterals" (formula "32") (term "1,1"))
                           (rule "mul_literals" (formula "32") (term "0,1"))
                           (rule "polySimp_elimOne" (formula "32") (term "1,1"))
                           (rule "cnf_rightDist" (formula "2") (term "0,0,0"))
                           (rule "distr_forallAnd" (formula "2") (term "0,0"))
                           (rule "distr_forallAnd" (formula "2") (term "0"))
                           (rule "distr_forallAnd" (formula "2"))
                           (rule "andLeft" (formula "2"))
                           (rule "shift_paren_or" (formula "3") (term "0,0,0"))
                            (builtin "One Step Simplification" (formula "3"))
                           (rule "eqSymm" (formula "3") (term "1,1,0,0,0"))
                           (rule "castedGetAny" (formula "3") (term "1,0,0,0,0,0,0"))
                           (rule "castedGetAny" (formula "3") (term "0,0,1,0,0,0"))
                           (rule "castedGetAny" (formula "3") (term "0,1,1,0,0,0"))
                            (builtin "One Step Simplification" (formula "3"))
                           (rule "true_left" (formula "3"))
                           (rule "commute_or_2" (formula "2") (term "0,0,0"))
                            (builtin "One Step Simplification" (formula "2"))
                           (rule "eqSymm" (formula "2") (term "1,0,0,0,0"))
                           (rule "castedGetAny" (formula "2") (term "1,0,0,1,0,0,0"))
                           (rule "castedGetAny" (formula "2") (term "0,0,0,0,0,0"))
                           (rule "castedGetAny" (formula "2") (term "0,1,0,0,0,0"))
                            (builtin "One Step Simplification" (formula "2"))
                           (rule "true_left" (formula "2"))
                           (rule "Use_information_flow_contract_for_compareTo_325434207" (formula "19") (ifseqformula "19"))
                            (builtin "One Step Simplification" (formula "19") (ifInst ""  (formula "97")) (ifInst ""  (formula "97")))
                           (rule "true_left" (formula "19"))
                           (rule "Use_information_flow_contract_for_getOrder_757678341" (formula "61") (ifseqformula "25"))
                           (rule "replace_known_left" (formula "61") (term "1,1") (ifseqformula "7"))
                            (builtin "One Step Simplification" (formula "61"))
                           (rule "true_left" (formula "61"))
                           (rule "Use_information_flow_contract_for_getOrder_757678341" (formula "61") (ifseqformula "61"))
                            (builtin "One Step Simplification" (formula "61"))
                           (rule "true_left" (formula "61"))
                           (rule "Use_information_flow_contract_for_compareTo_325434207" (formula "55") (ifseqformula "19"))
                           (rule "replace_known_right" (formula "55") (term "0,1,0,0") (ifseqformula "98"))
                            (builtin "One Step Simplification" (formula "55") (ifInst ""  (formula "97")) (ifInst ""  (formula "6")))
                           (rule "applyEq" (formula "55") (term "0,0,1") (ifseqformula "57"))
                           (rule "eqSymm" (formula "55") (term "0,1"))
                           (rule "replace_known_left" (formula "55") (term "0,1") (ifseqformula "20"))
                            (builtin "One Step Simplification" (formula "55"))
                           (rule "Class_invariant_axiom_for_java_math_BigInteger" (formula "55") (term "1,0"))
                           (rule "replace_known_left" (formula "55") (term "1,1,0") (ifseqformula "20"))
                            (builtin "One Step Simplification" (formula "55") (ifInst ""  (formula "97")))
                           (rule "Class_invariant_axiom_for_java_math_BigInteger" (formula "55") (term "0"))
                           (rule "replace_known_right" (formula "55") (term "0,0,0") (ifseqformula "98"))
                            (builtin "One Step Simplification" (formula "55") (ifInst ""  (formula "57")))
                           (rule "applyEq" (formula "54") (term "0") (ifseqformula "55"))
                           (rule "applyEq" (formula "55") (term "4") (ifseqformula "54"))
                           (rule "applyEq" (formula "47") (term "0") (ifseqformula "54"))
                           (rule "Use_information_flow_contract_for_getOrder_757678341" (formula "25") (ifseqformula "25"))
                            (builtin "One Step Simplification" (formula "25"))
                           (rule "true_left" (formula "25"))
                           (rule "Use_information_flow_contract_for_getOrder_757678341" (formula "25") (ifseqformula "60"))
                           (rule "eqSymm" (formula "25") (term "0,1"))
                           (rule "eqSymm" (formula "25") (term "1,1"))
                           (rule "replace_known_left" (formula "25") (term "1,1") (ifseqformula "7"))
                            (builtin "One Step Simplification" (formula "25"))
                           (rule "true_left" (formula "25"))
                           (rule "Use_information_flow_contract_for_multiply_1272441881_0" (formula "72") (ifseqformula "38"))
                           (rule "replaceKnownSelect_taclet21_12" (formula "72") (term "0,1,1"))
                           (rule "replaceKnownSelect_taclet21_11" (formula "72") (term "1,1,1"))
                           (rule "replaceKnownAuxiliaryConstant_taclet10111121_19" (formula "72") (term "0,1,1"))
                           (rule "replaceKnownAuxiliaryConstant_taclet0111121_18" (formula "72") (term "1,1,1"))
                           (rule "replaceKnownSelect_taclet21_8" (formula "72") (term "1,1,0,1"))
                           (rule "replaceKnownSelect_taclet21_9" (formula "72") (term "0,1,0,1"))
                           (rule "replaceKnownAuxiliaryConstant_taclet21_10" (formula "72") (term "1,1,0,1"))
                            (builtin "One Step Simplification" (formula "72") (ifInst ""  (formula "87")) (ifInst ""  (formula "86")) (ifInst ""  (formula "104")))
                           (rule "pullOutSelect" (formula "72") (term "1,0,1") (inst "selectSK=org_bouncycastle_math_ec_ECPoint_value_4"))
                           (rule "simplifySelectOfAnonEQ" (formula "72") (ifseqformula "26"))
                            (builtin "One Step Simplification" (formula "72") (ifInst ""  (formula "101")) (ifInst ""  (formula "14")))
                           (rule "applyEqReverse" (formula "73") (term "1,0,1") (ifseqformula "72"))
                           (rule "hideAuxiliaryEq" (formula "72"))
                           (rule "pullOutSelect" (formula "72") (term "0,0,1") (inst "selectSK=org_bouncycastle_math_ec_ECPoint_value_5"))
                           (rule "simplifySelectOfAnonEQ" (formula "72") (ifseqformula "62"))
                            (builtin "One Step Simplification" (formula "72") (ifInst ""  (formula "102")) (ifInst ""  (formula "49")))
                           (rule "applyEqReverse" (formula "73") (term "0,0,1") (ifseqformula "72"))
                           (rule "hideAuxiliaryEq" (formula "72"))
                           (rule "replace_known_left" (formula "72") (term "0,1") (ifseqformula "5"))
                            (builtin "One Step Simplification" (formula "72"))
                           (rule "notLeft" (formula "72"))
                           (rule "Class_invariant_axiom_for_org_bouncycastle_math_ec_ECPoint" (formula "78") (term "1"))
                            (builtin "One Step Simplification" (formula "78"))
                           (rule "Class_invariant_axiom_for_org_bouncycastle_math_ec_ECPoint" (formula "78"))
                           (rule "closeTrue" (formula "78"))
                        )
                     )
                  )
                  (branch " resultAtPost_226_A.<created>@anon_heap_mod«anonHeapFunction» = TRUE FALSE"
                     (rule "applyEqReverse" (formula "109") (term "1") (ifseqformula "9"))
                     (rule "hideAuxiliaryEq" (formula "9"))
                     (rule "eqSymm" (formula "108"))
                     (rule "replace_known_right" (formula "41") (term "0") (ifseqformula "83"))
                      (builtin "One Step Simplification" (formula "41"))
                     (rule "ifthenelse_split" (formula "8") (term "0"))
                     (branch " resultAtPost_226_B.<created>@anon_heap_mod«anonHeapFunction» = TRUE TRUE"
                        (rule "applyEqReverse" (formula "109") (term "1") (ifseqformula "9"))
                        (rule "hideAuxiliaryEq" (formula "9"))
                        (rule "replace_known_left" (formula "76") (term "0") (ifseqformula "8"))
                         (builtin "One Step Simplification" (formula "76"))
                        (rule "true_left" (formula "76"))
                        (rule "commute_or" (formula "3") (term "0,1,0,0,0"))
                        (rule "commute_or" (formula "2") (term "0,0,0,0"))
                        (rule "onlyCreatedObjectsAreReferenced" (formula "100") (term "0") (ifseqformula "56"))
                        (rule "replace_known_left" (formula "1") (term "1") (ifseqformula "62"))
                         (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "101")))
                        (rule "true_left" (formula "1"))
                        (rule "onlyCreatedObjectsAreReferenced" (formula "26") (term "1,0") (ifseqformula "21"))
                        (rule "replace_known_right" (formula "26") (term "0") (ifseqformula "100"))
                         (builtin "One Step Simplification" (formula "26") (ifInst ""  (formula "27")))
                        (rule "true_left" (formula "26"))
                        (rule "onlyCreatedObjectsAreReferenced" (formula "13") (term "1,0") (ifseqformula "21"))
                        (rule "replace_known_left" (formula "13") (term "1") (ifseqformula "14"))
                         (builtin "One Step Simplification" (formula "13") (ifInst ""  (formula "94")))
                        (rule "true_left" (formula "13"))
                        (rule "onlyCreatedObjectsAreReferenced" (formula "96") (term "0") (ifseqformula "56"))
                        (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "97"))
                         (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "50")))
                        (rule "true_left" (formula "1"))
                        (rule "onlyCreatedObjectsAreReferenced" (formula "30") (term "0") (ifseqformula "21"))
                        (rule "replace_known_right" (formula "30") (term "0") (ifseqformula "98"))
                         (builtin "One Step Simplification" (formula "30") (ifInst ""  (formula "15")))
                        (rule "true_left" (formula "30"))
                        (rule "onlyCreatedObjectsAreReferenced" (formula "13") (term "1,1,0") (ifseqformula "21"))
                        (rule "replace_known_right" (formula "13") (term "0") (ifseqformula "96"))
                         (builtin "One Step Simplification" (formula "13") (ifInst ""  (formula "15")))
                        (rule "true_left" (formula "13"))
                        (rule "onlyCreatedObjectsAreReferenced" (formula "48") (term "1,0") (ifseqformula "56"))
                        (rule "replace_known_left" (formula "48") (term "1") (ifseqformula "49"))
                         (builtin "One Step Simplification" (formula "48") (ifInst ""  (formula "95")))
                        (rule "true_left" (formula "48"))
                        (rule "commute_or" (formula "2") (term "0,1,0,0,0"))
                        (rule "onlyCreatedObjectsAreReferenced" (formula "65") (term "2") (ifseqformula "56"))
                        (rule "replace_known_right" (formula "65") (term "0") (ifseqformula "99"))
                         (builtin "One Step Simplification" (formula "65") (ifInst ""  (formula "50")))
                        (rule "true_left" (formula "65"))
                        (rule "commute_or" (formula "1") (term "0,0,0,0"))
                        (rule "commute_or" (formula "1") (term "0,1,0,0,0"))
                        (rule "commute_or_2" (formula "4") (term "0,0,0"))
                        (rule "commute_and" (formula "33") (term "0,1"))
                        (rule "commute_or_2" (formula "3") (term "0,0,0"))
                        (rule "commute_or_2" (formula "6") (term "0,0,0,0,0"))
                         (builtin "One Step Simplification" (formula "6"))
                        (rule "commute_or_2" (formula "2") (term "0,0,0"))
                        (rule "commute_or_2" (formula "1") (term "0,0,0"))
                        (rule "commute_or" (formula "5") (term "1,0,0,0,0,0"))
                        (rule "commute_or_2" (formula "6") (term "0,0,0,0"))
                        (rule "commute_or_2" (formula "4") (term "1,0,0,0,0"))
                        (rule "shift_paren_or" (formula "3") (term "0,0,0,0"))
                        (rule "commute_or_2" (formula "2") (term "1,0,0,0,0"))
                        (rule "shift_paren_or" (formula "1") (term "0,0,0,0"))
                        (rule "shift_paren_or" (formula "4") (term "0,0,0,0"))
                        (rule "shift_paren_or" (formula "2") (term "0,0,0,0"))
                        (rule "cnf_rightDist" (formula "6") (term "0,0,0"))
                        (rule "distr_forallAnd" (formula "6") (term "0,0"))
                        (rule "distr_forallAnd" (formula "6") (term "0"))
                        (rule "distr_forallAnd" (formula "6"))
                        (rule "andLeft" (formula "6"))
                        (rule "commute_or_2" (formula "6") (term "0,0,0"))
                         (builtin "One Step Simplification" (formula "6"))
                        (rule "eqSymm" (formula "6") (term "1,0,0,0,0"))
                        (rule "castedGetAny" (formula "6") (term "0,0,0,0,0,0"))
                        (rule "castedGetAny" (formula "6") (term "1,0,0,1,0,0,0"))
                        (rule "castedGetAny" (formula "6") (term "0,1,0,0,0,0"))
                         (builtin "One Step Simplification" (formula "6"))
                        (rule "true_left" (formula "6"))
                        (rule "shift_paren_or" (formula "6") (term "0,0,0"))
                         (builtin "One Step Simplification" (formula "6"))
                        (rule "eqSymm" (formula "6") (term "1,1,0,0,0"))
                        (rule "castedGetAny" (formula "6") (term "0,0,1,0,0,0"))
                        (rule "castedGetAny" (formula "6") (term "0,0,0,0,0,0"))
                        (rule "castedGetAny" (formula "6") (term "0,1,1,0,0,0"))
                         (builtin "One Step Simplification" (formula "6"))
                        (rule "true_left" (formula "6"))
                        (rule "commute_and" (formula "4") (term "1,0,0,0"))
                        (rule "commute_and" (formula "3") (term "1,0,0,0"))
                        (rule "commute_and" (formula "2") (term "1,0,0,0"))
                        (rule "commute_and" (formula "1") (term "1,0,0,0"))
                        (rule "shift_paren_or" (formula "5") (term "0,0,0,0,0"))
                         (builtin "One Step Simplification" (formula "5"))
                        (rule "commute_or_2" (formula "5") (term "0,0,0,0"))
                        (rule "shift_paren_or" (formula "3") (term "0,0,0,0,0"))
                         (builtin "One Step Simplification" (formula "3"))
                        (rule "commute_or_2" (formula "3") (term "0,0,0,0"))
                        (rule "shift_paren_or" (formula "1") (term "0,0,0,0,0"))
                         (builtin "One Step Simplification" (formula "1"))
                        (rule "commute_or_2" (formula "1") (term "0,0,0,0"))
                        (rule "shift_paren_or" (formula "4") (term "0,0,0,0,0"))
                         (builtin "One Step Simplification" (formula "4"))
                        (rule "shift_paren_or" (formula "2") (term "0,0,0,0,0"))
                         (builtin "One Step Simplification" (formula "2"))
                        (rule "cnf_rightDist" (formula "5") (term "0,0,0"))
                        (rule "distr_forallAnd" (formula "5") (term "0,0"))
                        (rule "distr_forallAnd" (formula "5") (term "0"))
                        (rule "distr_forallAnd" (formula "5"))
                        (rule "andLeft" (formula "5"))
                        (rule "commute_or_2" (formula "5") (term "0,0,0"))
                         (builtin "One Step Simplification" (formula "5"))
                        (rule "eqSymm" (formula "5") (term "1,0,0,0,0"))
                        (rule "castedGetAny" (formula "5") (term "1,0,0,1,0,0,0"))
                        (rule "castedGetAny" (formula "5") (term "0,0,0,0,0,0"))
                        (rule "castedGetAny" (formula "5") (term "0,1,0,0,0,0"))
                         (builtin "One Step Simplification" (formula "5"))
                        (rule "true_left" (formula "5"))
                        (rule "shift_paren_or" (formula "5") (term "0,0,0"))
                         (builtin "One Step Simplification" (formula "5"))
                        (rule "eqSymm" (formula "5") (term "1,1,0,0,0"))
                        (rule "castedGetAny" (formula "5") (term "0,0,0,0,0,0"))
                        (rule "castedGetAny" (formula "5") (term "0,0,1,0,0,0"))
                        (rule "castedGetAny" (formula "5") (term "0,1,1,0,0,0"))
                         (builtin "One Step Simplification" (formula "5"))
                        (rule "true_left" (formula "5"))
                        (rule "cnf_rightDist" (formula "3") (term "0,0,0"))
                        (rule "distr_forallAnd" (formula "3") (term "0,0"))
                        (rule "distr_forallAnd" (formula "3") (term "0"))
                        (rule "distr_forallAnd" (formula "3"))
                        (rule "andLeft" (formula "3"))
                        (rule "cnf_rightDist" (formula "1") (term "0,0,0"))
                        (rule "distr_forallAnd" (formula "1") (term "0,0"))
                        (rule "distr_forallAnd" (formula "1") (term "0"))
                        (rule "distr_forallAnd" (formula "1"))
                        (rule "andLeft" (formula "1"))
                        (rule "shift_paren_or" (formula "4") (term "0,0,0"))
                         (builtin "One Step Simplification" (formula "4"))
                        (rule "eqSymm" (formula "4") (term "1,1,0,0,0"))
                        (rule "castedGetAny" (formula "4") (term "0,0,0,0,0,0"))
                        (rule "castedGetAny" (formula "4") (term "0,0,1,0,0,0"))
                        (rule "castedGetAny" (formula "4") (term "0,1,1,0,0,0"))
                         (builtin "One Step Simplification" (formula "4"))
                        (rule "true_left" (formula "4"))
                        (rule "cnf_rightDist" (formula "4") (term "0,0,0"))
                        (rule "distr_forallAnd" (formula "4") (term "0,0"))
                        (rule "distr_forallAnd" (formula "4") (term "0"))
                        (rule "distr_forallAnd" (formula "4"))
                        (rule "andLeft" (formula "4"))
                        (rule "cnf_rightDist" (formula "2") (term "0,0,0"))
                        (rule "distr_forallAnd" (formula "2") (term "0,0"))
                        (rule "distr_forallAnd" (formula "2") (term "0"))
                        (rule "distr_forallAnd" (formula "2"))
                        (rule "andLeft" (formula "2"))
                        (rule "shift_paren_or" (formula "5") (term "0,0,0"))
                         (builtin "One Step Simplification" (formula "5"))
                        (rule "eqSymm" (formula "5") (term "1,1,0,0,0"))
                        (rule "castedGetAny" (formula "5") (term "0,0,0,0,0,0"))
                        (rule "castedGetAny" (formula "5") (term "0,0,1,0,0,0"))
                        (rule "castedGetAny" (formula "5") (term "0,1,1,0,0,0"))
                         (builtin "One Step Simplification" (formula "5"))
                        (rule "true_left" (formula "5"))
                        (rule "cnf_rightDist" (formula "3") (term "0,0,0"))
                        (rule "distr_forallAnd" (formula "3") (term "0,0"))
                        (rule "distr_forallAnd" (formula "3") (term "0"))
                        (rule "distr_forallAnd" (formula "3"))
                        (rule "andLeft" (formula "3"))
                        (rule "cnf_rightDist" (formula "1") (term "0,0,0"))
                        (rule "distr_forallAnd" (formula "1") (term "0,0"))
                        (rule "distr_forallAnd" (formula "1") (term "0"))
                        (rule "distr_forallAnd" (formula "1"))
                        (rule "andLeft" (formula "1"))
                        (rule "shift_paren_or" (formula "2") (term "0,0,0"))
                         (builtin "One Step Simplification" (formula "2"))
                        (rule "eqSymm" (formula "2") (term "1,1,0,0,0"))
                        (rule "castedGetAny" (formula "2") (term "1,0,0,0,0,0,0"))
                        (rule "castedGetAny" (formula "2") (term "0,0,1,0,0,0"))
                        (rule "castedGetAny" (formula "2") (term "0,1,1,0,0,0"))
                         (builtin "One Step Simplification" (formula "2"))
                        (rule "true_left" (formula "2"))
                        (rule "cnf_rightDist" (formula "2") (term "0,0,0"))
                        (rule "distr_forallAnd" (formula "2") (term "0,0"))
                        (rule "distr_forallAnd" (formula "2") (term "0"))
                        (rule "distr_forallAnd" (formula "2"))
                        (rule "andLeft" (formula "2"))
                        (rule "commute_or_2" (formula "2") (term "0,0,0"))
                         (builtin "One Step Simplification" (formula "2"))
                        (rule "eqSymm" (formula "2") (term "1,0,0,0,0"))
                        (rule "castedGetAny" (formula "2") (term "0,0,0,0,0,0"))
                        (rule "castedGetAny" (formula "2") (term "1,0,0,1,0,0,0"))
                        (rule "castedGetAny" (formula "2") (term "0,1,0,0,0,0"))
                         (builtin "One Step Simplification" (formula "2"))
                        (rule "true_left" (formula "2"))
                        (rule "cnf_rightDist" (formula "1") (term "0,0,0"))
                        (rule "distr_forallAnd" (formula "1") (term "0,0"))
                        (rule "distr_forallAnd" (formula "1") (term "0"))
                        (rule "distr_forallAnd" (formula "1"))
                        (rule "andLeft" (formula "1"))
                        (rule "commute_or_2" (formula "1") (term "0,0,0"))
                         (builtin "One Step Simplification" (formula "1"))
                        (rule "eqSymm" (formula "1") (term "1,0,0,0,0"))
                        (rule "castedGetAny" (formula "1") (term "0,0,0,0,0,0"))
                        (rule "castedGetAny" (formula "1") (term "1,0,0,1,0,0,0"))
                        (rule "castedGetAny" (formula "1") (term "0,1,0,0,0,0"))
                         (builtin "One Step Simplification" (formula "1"))
                        (rule "true_left" (formula "1"))
                        (rule "shift_paren_or" (formula "1") (term "0,0,0"))
                         (builtin "One Step Simplification" (formula "1"))
                        (rule "eqSymm" (formula "1") (term "1,1,0,0,0"))
                        (rule "castedGetAny" (formula "1") (term "1,0,0,0,0,0,0"))
                        (rule "castedGetAny" (formula "1") (term "0,0,1,0,0,0"))
                        (rule "castedGetAny" (formula "1") (term "0,1,1,0,0,0"))
                         (builtin "One Step Simplification" (formula "1"))
                        (rule "true_left" (formula "1"))
                        (rule "ifthenelse_split_for" (formula "27") (term "1,1"))
                        (branch "result_228_A_1.value@heapAtPre_A«anonHeapFunction» ≥ 0 TRUE"
                           (rule "cnf_rightDist" (formula "28"))
                           (rule "andLeft" (formula "28"))
                           (rule "commute_or" (formula "29"))
                           (rule "cnf_rightDist" (formula "28"))
                           (rule "andLeft" (formula "28"))
                           (rule "commute_or" (formula "29"))
                           (rule "cut_direct" (formula "28") (term "0"))
                           (branch "CUT: result_228_A_1.value@heapAtPre_A«anonHeapFunction» = 0 TRUE"
                               (builtin "One Step Simplification" (formula "29"))
                              (rule "true_left" (formula "29"))
                              (rule "replace_known_left" (formula "30") (term "0") (ifseqformula "28"))
                               (builtin "One Step Simplification" (formula "30"))
                              (rule "true_left" (formula "30"))
                              (rule "replace_known_left" (formula "29") (term "0") (ifseqformula "28"))
                               (builtin "One Step Simplification" (formula "29"))
                              (rule "true_left" (formula "29"))
                              (rule "applyEq" (formula "30") (term "1,0") (ifseqformula "28"))
                              (rule "times_zero_1" (formula "30") (term "0"))
                              (rule "polySimp_homoEq" (formula "30"))
                              (rule "mul_literals" (formula "30") (term "1,0"))
                              (rule "add_zero_right" (formula "30") (term "0"))
                              (rule "applyEq" (formula "27") (term "0") (ifseqformula "28"))
                              (rule "qeq_literals" (formula "27"))
                              (rule "true_left" (formula "27"))
                              (rule "applyEq" (formula "28") (term "1,0") (ifseqformula "27"))
                              (rule "eqSymm" (formula "28"))
                              (rule "polySimp_homoEq" (formula "28"))
                              (rule "polySimp_mulLiterals" (formula "28") (term "1,0"))
                              (rule "polySimp_elimOne" (formula "28") (term "1,0"))
                              (rule "applyEq" (formula "6") (term "1") (ifseqformula "27"))
                              (rule "applyEq" (formula "22") (term "1") (ifseqformula "27"))
                              (rule "applyEq" (formula "57") (term "1") (ifseqformula "27"))
                              (rule "applyEq" (formula "28") (term "1,1,0") (ifseqformula "27"))
                              (rule "polySimp_addComm0" (formula "28") (term "0"))
                              (rule "polySimp_sepNegMonomial" (formula "29"))
                              (rule "polySimp_mulLiterals" (formula "29") (term "0"))
                              (rule "polySimp_elimOne" (formula "29") (term "0"))
                              (rule "applyEq" (formula "28") (term "0,1,0") (ifseqformula "29"))
                              (rule "polySimp_addComm0" (formula "28") (term "0"))
                              (rule "applyEq" (formula "3") (term "0") (ifseqformula "29"))
                              (rule "applyEq" (formula "28") (term "0,0,1,0") (ifseqformula "29"))
                              (rule "polySimp_addComm0" (formula "28") (term "0"))
                              (rule "applyEq" (formula "5") (term "1") (ifseqformula "29"))
                              (rule "polySimp_sepPosMonomial" (formula "28"))
                              (rule "jdiv_axiom" (formula "28") (term "0"))
                              (rule "eqSymm" (formula "28"))
                              (rule "applyEq" (formula "28") (term "1") (ifseqformula "29"))
                               (builtin "One Step Simplification" (formula "28"))
                              (rule "eqSymm" (formula "28") (term "1"))
                              (rule "polySimp_homoEq" (formula "28") (term "1"))
                              (rule "polySimp_mulLiterals" (formula "28") (term "1,0,1"))
                              (rule "polySimp_elimOne" (formula "28") (term "1,0,1"))
                              (rule "polySimp_sepPosMonomial" (formula "28") (term "1"))
                              (rule "inEqSimp_contradInEq0" (formula "28") (term "0,0") (ifseqformula "3"))
                              (rule "qeq_literals" (formula "28") (term "0,0,0"))
                               (builtin "One Step Simplification" (formula "28"))
                              (rule "true_left" (formula "28"))
                              (rule "div_axiom" (formula "28") (term "0,1") (inst "quotient=quotient_1"))
                               (builtin "One Step Simplification" (formula "28"))
                              (rule "true_left" (formula "28"))
                              (rule "Use_information_flow_contract_for_compareTo_325434207" (formula "18") (ifseqformula "18"))
                               (builtin "One Step Simplification" (formula "18") (ifInst ""  (formula "94")) (ifInst ""  (formula "94")))
                              (rule "true_left" (formula "18"))
                              (rule "Use_information_flow_contract_for_getOrder_757678341" (formula "59") (ifseqformula "24"))
                              (rule "applyEq" (formula "59") (term "0,1,1") (ifseqformula "6"))
                              (rule "eqSymm" (formula "59") (term "1,1"))
                              (rule "replace_known_left" (formula "59") (term "1,1") (ifseqformula "27"))
                               (builtin "One Step Simplification" (formula "59"))
                              (rule "true_left" (formula "59"))
                              (rule "Use_information_flow_contract_for_multiply_1272441881" (formula "70") (ifseqformula "36"))
                              (rule "replaceKnownSelect_taclet21_11" (formula "70") (term "1,1,1"))
                              (rule "replaceKnownSelect_taclet21_12" (formula "70") (term "0,1,1"))
                              (rule "replaceKnownAuxiliaryConstant_taclet1111121_18" (formula "70") (term "1,1,1"))
                              (rule "replaceKnownAuxiliaryConstant_taclet01111121_19" (formula "70") (term "0,1,1"))
                              (rule "replaceKnownSelect_taclet21_9" (formula "70") (term "0,1,0,1"))
                              (rule "replaceKnownSelect_taclet21_8" (formula "70") (term "1,1,0,1"))
                              (rule "replaceKnownAuxiliaryConstant_taclet121_15" (formula "70") (term "0,1,0,1"))
                              (rule "replaceKnownAuxiliaryConstant_taclet21_10" (formula "70") (term "1,1,0,1"))
                              (rule "replaceKnownAuxiliaryConstant_taclet121_15" (formula "70") (term "1,1,0,1"))
                               (builtin "One Step Simplification" (formula "70") (ifInst ""  (formula "85")) (ifInst ""  (formula "84")))
                              (rule "eqSymm" (formula "70") (term "1,1"))
                              (rule "replace_known_right" (formula "70") (term "1,1") (ifseqformula "102"))
                               (builtin "One Step Simplification" (formula "70"))
                              (rule "pullOutSelect" (formula "70") (term "0,0,1") (inst "selectSK=org_bouncycastle_math_ec_ECPoint_value_4"))
                              (rule "simplifySelectOfAnonEQ" (formula "70") (ifseqformula "61"))
                               (builtin "One Step Simplification" (formula "70") (ifInst ""  (formula "100")) (ifInst ""  (formula "48")))
                              (rule "applyEqReverse" (formula "71") (term "0,0,1") (ifseqformula "70"))
                              (rule "hideAuxiliaryEq" (formula "70"))
                              (rule "eqSymm" (formula "70") (term "0,1"))
                              (rule "applyEq" (formula "70") (term "1,0,1") (ifseqformula "4"))
                              (rule "pullOutSelect" (formula "70") (term "0,0,1") (inst "selectSK=org_bouncycastle_math_ec_ECPoint_value_5"))
                              (rule "simplifySelectOfAnonEQ" (formula "70") (ifseqformula "25"))
                               (builtin "One Step Simplification" (formula "70") (ifInst ""  (formula "99")) (ifInst ""  (formula "13")))
                              (rule "applyEqReverse" (formula "71") (term "0,0,1") (ifseqformula "70"))
                               (builtin "One Step Simplification" (formula "71"))
                              (rule "notLeft" (formula "71"))
                              (rule "hideAuxiliaryEq" (formula "70"))
                              (rule "Class_invariant_axiom_for_org_bouncycastle_math_ec_ECPoint" (formula "76") (term "1"))
                               (builtin "One Step Simplification" (formula "76"))
                              (rule "Class_invariant_axiom_for_org_bouncycastle_math_ec_ECPoint" (formula "76"))
                              (rule "closeTrue" (formula "76"))
                           )
                           (branch "CUT: result_228_A_1.value@heapAtPre_A«anonHeapFunction» = 0 FALSE"
                               (builtin "One Step Simplification" (formula "28"))
                              (rule "replace_known_right" (formula "30") (term "0") (ifseqformula "79"))
                               (builtin "One Step Simplification" (formula "30"))
                              (rule "replace_known_right" (formula "29") (term "0") (ifseqformula "79"))
                               (builtin "One Step Simplification" (formula "29"))
                              (rule "applyEq" (formula "32") (term "0,0") (ifseqformula "29"))
                              (rule "polySimp_mulComm0" (formula "32") (term "0"))
                              (rule "applyEq" (formula "28") (term "0") (ifseqformula "32"))
                              (rule "inEqSimp_homoInEq0" (formula "28"))
                              (rule "polySimp_mulComm0" (formula "28") (term "1,0"))
                              (rule "polySimp_rightDist" (formula "28") (term "1,0"))
                              (rule "polySimp_mulLiterals" (formula "28") (term "1,1,0"))
                              (rule "polySimp_elimOne" (formula "28") (term "1,1,0"))
                              (rule "polySimp_mulComm0" (formula "28") (term "0,1,0"))
                              (rule "polySimp_addAssoc" (formula "28") (term "0"))
                              (rule "polySimp_addComm0" (formula "28") (term "0,0"))
                              (rule "polySimp_pullOutFactor2b" (formula "28") (term "0"))
                              (rule "add_literals" (formula "28") (term "1,1,0"))
                              (rule "times_zero_1" (formula "28") (term "1,0"))
                              (rule "add_zero_right" (formula "28") (term "0"))
                              (rule "applyEq" (formula "30") (term "0") (ifseqformula "32"))
                              (rule "inEqSimp_homoInEq1" (formula "30"))
                              (rule "polySimp_mulComm0" (formula "30") (term "1,0"))
                              (rule "polySimp_rightDist" (formula "30") (term "1,0"))
                              (rule "polySimp_mulLiterals" (formula "30") (term "1,1,0"))
                              (rule "polySimp_elimOne" (formula "30") (term "1,1,0"))
                              (rule "polySimp_mulComm0" (formula "30") (term "0,1,0"))
                              (rule "polySimp_addComm1" (formula "30") (term "0"))
                              (rule "polySimp_addAssoc" (formula "30") (term "0,0"))
                              (rule "polySimp_addComm1" (formula "30") (term "0,0,0"))
                              (rule "polySimp_pullOutFactor2b" (formula "30") (term "0,0"))
                              (rule "add_literals" (formula "30") (term "1,1,0,0"))
                              (rule "times_zero_1" (formula "30") (term "1,0,0"))
                              (rule "add_zero_right" (formula "30") (term "0,0"))
                              (rule "applyEq" (formula "31") (term "0,1") (ifseqformula "29"))
                              (rule "inEqSimp_invertInEq1" (formula "28"))
                              (rule "polySimp_mulLiterals" (formula "28") (term "0"))
                              (rule "mul_literals" (formula "28") (term "1"))
                              (rule "polySimp_elimOne" (formula "28") (term "0"))
                              (rule "inEqSimp_sepNegMonomial0" (formula "30"))
                              (rule "polySimp_mulLiterals" (formula "30") (term "0"))
                              (rule "polySimp_elimOne" (formula "30") (term "0"))
                              (rule "inEqSimp_strengthen1" (formula "27") (ifseqformula "79"))
                              (rule "add_zero_right" (formula "27") (term "1"))
                              (rule "inEqSimp_contradEq7" (formula "79") (ifseqformula "27"))
                              (rule "times_zero_1" (formula "79") (term "1,0,0"))
                              (rule "add_literals" (formula "79") (term "0,0"))
                              (rule "leq_literals" (formula "79") (term "0"))
                               (builtin "One Step Simplification" (formula "79"))
                              (rule "false_right" (formula "79"))
                              (rule "Use_information_flow_contract_for_compareTo_325434207" (formula "18") (ifseqformula "18"))
                               (builtin "One Step Simplification" (formula "18") (ifInst ""  (formula "97")) (ifInst ""  (formula "97")))
                              (rule "true_left" (formula "18"))
                              (rule "Use_information_flow_contract_for_getOrder_757678341" (formula "62") (ifseqformula "24"))
                              (rule "replace_known_left" (formula "62") (term "1,1") (ifseqformula "6"))
                               (builtin "One Step Simplification" (formula "62"))
                              (rule "true_left" (formula "62"))
                              (rule "Use_information_flow_contract_for_multiply_1272441881" (formula "73") (ifseqformula "39"))
                              (rule "replaceKnownSelect_taclet21_12" (formula "73") (term "0,1,1"))
                              (rule "replaceKnownSelect_taclet21_11" (formula "73") (term "1,1,1"))
                              (rule "replaceKnownAuxiliaryConstant_taclet01111121_19" (formula "73") (term "0,1,1"))
                              (rule "replaceKnownAuxiliaryConstant_taclet1111121_18" (formula "73") (term "1,1,1"))
                              (rule "replaceKnownSelect_taclet21_8" (formula "73") (term "1,1,0,1"))
                              (rule "replaceKnownSelect_taclet21_9" (formula "73") (term "0,1,0,1"))
                              (rule "replaceKnownAuxiliaryConstant_taclet21_10" (formula "73") (term "1,1,0,1"))
                               (builtin "One Step Simplification" (formula "73") (ifInst ""  (formula "88")) (ifInst ""  (formula "87")))
                              (rule "eqSymm" (formula "73") (term "1,1"))
                              (rule "replace_known_right" (formula "73") (term "1,1") (ifseqformula "105"))
                               (builtin "One Step Simplification" (formula "73"))
                              (rule "pullOutSelect" (formula "73") (term "0,0,1") (inst "selectSK=org_bouncycastle_math_ec_ECPoint_value_4"))
                              (rule "simplifySelectOfAnonEQ" (formula "73") (ifseqformula "64"))
                               (builtin "One Step Simplification" (formula "73") (ifInst ""  (formula "103")) (ifInst ""  (formula "51")))
                              (rule "applyEqReverse" (formula "74") (term "0,0,1") (ifseqformula "73"))
                              (rule "hideAuxiliaryEq" (formula "73"))
                              (rule "eqSymm" (formula "73") (term "0,1"))
                              (rule "applyEq" (formula "73") (term "1,0,1") (ifseqformula "4"))
                              (rule "pullOutSelect" (formula "73") (term "0,0,1") (inst "selectSK=org_bouncycastle_math_ec_ECPoint_value_5"))
                              (rule "simplifySelectOfAnonEQ" (formula "73") (ifseqformula "25"))
                               (builtin "One Step Simplification" (formula "73") (ifInst ""  (formula "102")) (ifInst ""  (formula "13")))
                              (rule "applyEqReverse" (formula "74") (term "0,0,1") (ifseqformula "73"))
                               (builtin "One Step Simplification" (formula "74"))
                              (rule "notLeft" (formula "74"))
                              (rule "hideAuxiliaryEq" (formula "73"))
                              (rule "Class_invariant_axiom_for_org_bouncycastle_math_ec_ECPoint" (formula "79") (term "0"))
                               (builtin "One Step Simplification" (formula "79"))
                              (rule "Class_invariant_axiom_for_org_bouncycastle_math_ec_ECPoint" (formula "79"))
                              (rule "closeTrue" (formula "79"))
                           )
                        )
                        (branch "result_228_A_1.value@heapAtPre_A«anonHeapFunction» ≥ 0 FALSE"
                           (rule "inEqSimp_geqRight" (formula "76"))
                           (rule "mul_literals" (formula "1") (term "1,0,0"))
                           (rule "add_zero_right" (formula "1") (term "0,0"))
                           (rule "inEqSimp_sepPosMonomial0" (formula "1"))
                           (rule "mul_literals" (formula "1") (term "1"))
                           (rule "inEqSimp_contradEq3" (formula "28") (term "0") (ifseqformula "1"))
                           (rule "times_zero_1" (formula "28") (term "1,0,0,0"))
                           (rule "add_literals" (formula "28") (term "0,0,0"))
                           (rule "qeq_literals" (formula "28") (term "0,0"))
                            (builtin "One Step Simplification" (formula "28"))
                           (rule "andLeft" (formula "28"))
                           (rule "andLeft" (formula "28"))
                           (rule "applyEq" (formula "32") (term "0,0") (ifseqformula "29"))
                           (rule "polySimp_mulComm0" (formula "32") (term "0"))
                           (rule "applyEq" (formula "30") (term "0") (ifseqformula "32"))
                           (rule "inEqSimp_homoInEq1" (formula "30"))
                           (rule "polySimp_mulComm0" (formula "30") (term "1,0"))
                           (rule "polySimp_rightDist" (formula "30") (term "1,0"))
                           (rule "polySimp_mulLiterals" (formula "30") (term "1,1,0"))
                           (rule "polySimp_elimOne" (formula "30") (term "1,1,0"))
                           (rule "polySimp_mulComm0" (formula "30") (term "0,1,0"))
                           (rule "polySimp_addComm1" (formula "30") (term "0"))
                           (rule "polySimp_addAssoc" (formula "30") (term "0,0"))
                           (rule "polySimp_addComm1" (formula "30") (term "0,0,0"))
                           (rule "polySimp_pullOutFactor2b" (formula "30") (term "0,0"))
                           (rule "add_literals" (formula "30") (term "1,1,0,0"))
                           (rule "times_zero_1" (formula "30") (term "1,0,0"))
                           (rule "add_zero_right" (formula "30") (term "0,0"))
                           (rule "applyEq" (formula "28") (term "0") (ifseqformula "32"))
                           (rule "inEqSimp_homoInEq0" (formula "28"))
                           (rule "polySimp_mulComm0" (formula "28") (term "1,0"))
                           (rule "polySimp_rightDist" (formula "28") (term "1,0"))
                           (rule "polySimp_mulLiterals" (formula "28") (term "1,1,0"))
                           (rule "polySimp_elimOne" (formula "28") (term "1,1,0"))
                           (rule "polySimp_mulComm0" (formula "28") (term "0,1,0"))
                           (rule "polySimp_addAssoc" (formula "28") (term "0"))
                           (rule "polySimp_addComm0" (formula "28") (term "0,0"))
                           (rule "polySimp_pullOutFactor2b" (formula "28") (term "0"))
                           (rule "add_literals" (formula "28") (term "1,1,0"))
                           (rule "times_zero_1" (formula "28") (term "1,0"))
                           (rule "add_zero_right" (formula "28") (term "0"))
                           (rule "applyEq" (formula "31") (term "0,1") (ifseqformula "29"))
                           (rule "inEqSimp_sepPosMonomial0" (formula "30"))
                           (rule "polySimp_mulComm0" (formula "30") (term "1"))
                           (rule "polySimp_rightDist" (formula "30") (term "1"))
                           (rule "mul_literals" (formula "30") (term "0,1"))
                           (rule "polySimp_mulLiterals" (formula "30") (term "1,1"))
                           (rule "polySimp_elimOne" (formula "30") (term "1,1"))
                           (rule "inEqSimp_invertInEq1" (formula "28"))
                           (rule "polySimp_mulLiterals" (formula "28") (term "0"))
                           (rule "mul_literals" (formula "28") (term "1"))
                           (rule "polySimp_elimOne" (formula "28") (term "0"))
                           (rule "Use_information_flow_contract_for_compareTo_325434207" (formula "19") (ifseqformula "19"))
                            (builtin "One Step Simplification" (formula "19") (ifInst ""  (formula "97")) (ifInst ""  (formula "97")))
                           (rule "true_left" (formula "19"))
                           (rule "Use_information_flow_contract_for_getOrder_757678341" (formula "62") (ifseqformula "25"))
                           (rule "replace_known_left" (formula "62") (term "1,1") (ifseqformula "7"))
                            (builtin "One Step Simplification" (formula "62"))
                           (rule "true_left" (formula "62"))
                           (rule "Use_information_flow_contract_for_getOrder_757678341" (formula "62") (ifseqformula "62"))
                            (builtin "One Step Simplification" (formula "62"))
                           (rule "true_left" (formula "62"))
                           (rule "Use_information_flow_contract_for_compareTo_325434207" (formula "56") (ifseqformula "19"))
                           (rule "replace_known_right" (formula "56") (term "0,1,0,0") (ifseqformula "98"))
                            (builtin "One Step Simplification" (formula "56") (ifInst ""  (formula "97")) (ifInst ""  (formula "6")))
                           (rule "applyEq" (formula "56") (term "0,0,1") (ifseqformula "58"))
                           (rule "eqSymm" (formula "56") (term "0,1"))
                           (rule "replace_known_left" (formula "56") (term "0,1") (ifseqformula "20"))
                            (builtin "One Step Simplification" (formula "56"))
                           (rule "Class_invariant_axiom_for_java_math_BigInteger" (formula "56") (term "1,0"))
                           (rule "replace_known_left" (formula "56") (term "1,1,0") (ifseqformula "20"))
                            (builtin "One Step Simplification" (formula "56") (ifInst ""  (formula "97")))
                           (rule "Class_invariant_axiom_for_java_math_BigInteger" (formula "56") (term "0"))
                           (rule "replace_known_right" (formula "56") (term "0,0,0") (ifseqformula "98"))
                            (builtin "One Step Simplification" (formula "56") (ifInst ""  (formula "58")))
                           (rule "applyEq" (formula "57") (term "4") (ifseqformula "56"))
                           (rule "applyEq" (formula "55") (term "0") (ifseqformula "56"))
                           (rule "applyEq" (formula "48") (term "0") (ifseqformula "55"))
                           (rule "Use_information_flow_contract_for_getOrder_757678341" (formula "25") (ifseqformula "25"))
                            (builtin "One Step Simplification" (formula "25"))
                           (rule "true_left" (formula "25"))
                           (rule "Use_information_flow_contract_for_getOrder_757678341" (formula "25") (ifseqformula "61"))
                           (rule "eqSymm" (formula "25") (term "0,1"))
                           (rule "eqSymm" (formula "25") (term "1,1"))
                           (rule "replace_known_left" (formula "25") (term "1,1") (ifseqformula "7"))
                            (builtin "One Step Simplification" (formula "25"))
                           (rule "true_left" (formula "25"))
                           (rule "Use_information_flow_contract_for_multiply_1272441881_0" (formula "72") (ifseqformula "39"))
                           (rule "replaceKnownSelect_taclet21_12" (formula "72") (term "0,1,1"))
                           (rule "replaceKnownSelect_taclet21_11" (formula "72") (term "1,1,1"))
                           (rule "replaceKnownAuxiliaryConstant_taclet01111121_19" (formula "72") (term "0,1,1"))
                           (rule "replaceKnownAuxiliaryConstant_taclet1111121_18" (formula "72") (term "1,1,1"))
                           (rule "replaceKnownSelect_taclet21_8" (formula "72") (term "1,1,0,1"))
                           (rule "replaceKnownSelect_taclet21_9" (formula "72") (term "0,1,0,1"))
                           (rule "replaceKnownAuxiliaryConstant_taclet21_10" (formula "72") (term "1,1,0,1"))
                            (builtin "One Step Simplification" (formula "72") (ifInst ""  (formula "87")) (ifInst ""  (formula "86")))
                           (rule "eqSymm" (formula "72") (term "1,1"))
                           (rule "replace_known_right" (formula "72") (term "1,1") (ifseqformula "104"))
                            (builtin "One Step Simplification" (formula "72"))
                           (rule "pullOutSelect" (formula "72") (term "1,0,1") (inst "selectSK=org_bouncycastle_math_ec_ECPoint_value_4"))
                           (rule "simplifySelectOfAnonEQ" (formula "72") (ifseqformula "26"))
                            (builtin "One Step Simplification" (formula "72") (ifInst ""  (formula "101")) (ifInst ""  (formula "14")))
                           (rule "applyEqReverse" (formula "73") (term "1,0,1") (ifseqformula "72"))
                           (rule "hideAuxiliaryEq" (formula "72"))
                           (rule "pullOutSelect" (formula "72") (term "0,0,1") (inst "selectSK=org_bouncycastle_math_ec_ECPoint_value_5"))
                           (rule "simplifySelectOfAnonEQ" (formula "72") (ifseqformula "63"))
                            (builtin "One Step Simplification" (formula "72") (ifInst ""  (formula "102")) (ifInst ""  (formula "50")))
                           (rule "applyEqReverse" (formula "73") (term "0,0,1") (ifseqformula "72"))
                           (rule "hideAuxiliaryEq" (formula "72"))
                           (rule "replace_known_left" (formula "72") (term "0,1") (ifseqformula "5"))
                            (builtin "One Step Simplification" (formula "72"))
                           (rule "notLeft" (formula "72"))
                           (rule "Class_invariant_axiom_for_org_bouncycastle_math_ec_ECPoint" (formula "78") (term "1"))
                            (builtin "One Step Simplification" (formula "78"))
                           (rule "Class_invariant_axiom_for_org_bouncycastle_math_ec_ECPoint" (formula "78"))
                           (rule "closeTrue" (formula "78"))
                        )
                     )
                     (branch " resultAtPost_226_B.<created>@anon_heap_mod«anonHeapFunction» = TRUE FALSE"
                        (rule "applyEqReverse" (formula "109") (term "1") (ifseqformula "8"))
                        (rule "hideAuxiliaryEq" (formula "8"))
                        (rule "eqSymm" (formula "108"))
                        (rule "replace_known_right" (formula "75") (term "0") (ifseqformula "82"))
                         (builtin "One Step Simplification" (formula "75"))
                        (rule "commute_or" (formula "3") (term "0,1,0,0,0"))
                        (rule "commute_or" (formula "2") (term "0,0,0,0"))
                        (rule "onlyCreatedObjectsAreReferenced" (formula "101") (term "0") (ifseqformula "55"))
                        (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "102"))
                         (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "61")))
                        (rule "true_left" (formula "1"))
                        (rule "onlyCreatedObjectsAreReferenced" (formula "25") (term "1,0") (ifseqformula "20"))
                        (rule "replace_known_right" (formula "25") (term "0") (ifseqformula "101"))
                         (builtin "One Step Simplification" (formula "25") (ifInst ""  (formula "26")))
                        (rule "true_left" (formula "25"))
                        (rule "onlyCreatedObjectsAreReferenced" (formula "29") (term "2") (ifseqformula "20"))
                        (rule "replace_known_right" (formula "29") (term "0") (ifseqformula "99"))
                         (builtin "One Step Simplification" (formula "29") (ifInst ""  (formula "14")))
                        (rule "true_left" (formula "29"))
                        (rule "onlyCreatedObjectsAreReferenced" (formula "12") (term "1,1,0") (ifseqformula "20"))
                        (rule "replace_known_right" (formula "12") (term "0") (ifseqformula "97"))
                         (builtin "One Step Simplification" (formula "12") (ifInst ""  (formula "14")))
                        (rule "true_left" (formula "12"))
                        (rule "onlyCreatedObjectsAreReferenced" (formula "48") (term "1,0") (ifseqformula "55"))
                        (rule "replace_known_right" (formula "48") (term "0") (ifseqformula "98"))
                         (builtin "One Step Simplification" (formula "48") (ifInst ""  (formula "49")))
                        (rule "true_left" (formula "48"))
                        (rule "onlyCreatedObjectsAreReferenced" (formula "47") (term "1,0") (ifseqformula "55"))
                        (rule "replace_known_right" (formula "47") (term "0") (ifseqformula "96"))
                         (builtin "One Step Simplification" (formula "47") (ifInst ""  (formula "48")))
                        (rule "true_left" (formula "47"))
                        (rule "onlyCreatedObjectsAreReferenced" (formula "12") (term "1,0") (ifseqformula "20"))
                        (rule "replace_known_right" (formula "12") (term "0") (ifseqformula "95"))
                         (builtin "One Step Simplification" (formula "12") (ifInst ""  (formula "13")))
                        (rule "true_left" (formula "12"))
                        (rule "commute_or" (formula "2") (term "0,1,0,0,0"))
                        (rule "onlyCreatedObjectsAreReferenced" (formula "62") (term "1,0") (ifseqformula "55"))
                        (rule "replace_known_left" (formula "62") (term "1") (ifseqformula "49"))
                         (builtin "One Step Simplification" (formula "62") (ifInst ""  (formula "100")))
                        (rule "true_left" (formula "62"))
                        (rule "commute_or" (formula "1") (term "0,0,0,0"))
                        (rule "commute_or" (formula "1") (term "0,1,0,0,0"))
                        (rule "commute_or_2" (formula "4") (term "0,0,0"))
                        (rule "commute_and" (formula "32") (term "0,1"))
                        (rule "commute_or_2" (formula "3") (term "0,0,0"))
                        (rule "commute_or_2" (formula "6") (term "0,0,0,0,0"))
                         (builtin "One Step Simplification" (formula "6"))
                        (rule "commute_or_2" (formula "2") (term "0,0,0"))
                        (rule "commute_or_2" (formula "1") (term "0,0,0"))
                        (rule "commute_or" (formula "5") (term "1,0,0,0,0,0"))
                        (rule "commute_or_2" (formula "6") (term "0,0,0,0"))
                        (rule "shift_paren_or" (formula "4") (term "0,0,0,0"))
                        (rule "commute_or_2" (formula "3") (term "1,0,0,0,0"))
                        (rule "commute_or_2" (formula "2") (term "1,0,0,0,0"))
                        (rule "shift_paren_or" (formula "1") (term "0,0,0,0"))
                        (rule "shift_paren_or" (formula "3") (term "0,0,0,0"))
                        (rule "shift_paren_or" (formula "2") (term "0,0,0,0"))
                        (rule "cnf_rightDist" (formula "6") (term "0,0,0"))
                        (rule "distr_forallAnd" (formula "6") (term "0,0"))
                        (rule "distr_forallAnd" (formula "6") (term "0"))
                        (rule "distr_forallAnd" (formula "6"))
                        (rule "andLeft" (formula "6"))
                        (rule "commute_or_2" (formula "6") (term "0,0,0"))
                         (builtin "One Step Simplification" (formula "6"))
                        (rule "eqSymm" (formula "6") (term "1,0,0,0,0"))
                        (rule "castedGetAny" (formula "6") (term "0,0,0,0,0,0"))
                        (rule "castedGetAny" (formula "6") (term "1,0,0,1,0,0,0"))
                        (rule "castedGetAny" (formula "6") (term "0,1,0,0,0,0"))
                         (builtin "One Step Simplification" (formula "6"))
                        (rule "true_left" (formula "6"))
                        (rule "shift_paren_or" (formula "6") (term "0,0,0"))
                         (builtin "One Step Simplification" (formula "6"))
                        (rule "eqSymm" (formula "6") (term "1,1,0,0,0"))
                        (rule "castedGetAny" (formula "6") (term "0,0,1,0,0,0"))
                        (rule "castedGetAny" (formula "6") (term "0,0,0,0,0,0"))
                        (rule "castedGetAny" (formula "6") (term "0,1,1,0,0,0"))
                         (builtin "One Step Simplification" (formula "6"))
                        (rule "true_left" (formula "6"))
                        (rule "commute_and" (formula "4") (term "1,0,0,0"))
                        (rule "commute_and" (formula "3") (term "1,0,0,0"))
                        (rule "commute_and" (formula "2") (term "1,0,0,0"))
                        (rule "commute_and" (formula "1") (term "1,0,0,0"))
                        (rule "shift_paren_or" (formula "5") (term "0,0,0,0,0"))
                         (builtin "One Step Simplification" (formula "5"))
                        (rule "commute_or_2" (formula "5") (term "0,0,0,0"))
                        (rule "shift_paren_or" (formula "4") (term "0,0,0,0,0"))
                         (builtin "One Step Simplification" (formula "4"))
                        (rule "commute_or_2" (formula "4") (term "0,0,0,0"))
                        (rule "shift_paren_or" (formula "1") (term "0,0,0,0,0"))
                         (builtin "One Step Simplification" (formula "1"))
                        (rule "commute_or_2" (formula "1") (term "0,0,0,0"))
                        (rule "shift_paren_or" (formula "3") (term "0,0,0,0,0"))
                         (builtin "One Step Simplification" (formula "3"))
                        (rule "shift_paren_or" (formula "2") (term "0,0,0,0,0"))
                         (builtin "One Step Simplification" (formula "2"))
                        (rule "cnf_rightDist" (formula "5") (term "0,0,0"))
                        (rule "distr_forallAnd" (formula "5") (term "0,0"))
                        (rule "distr_forallAnd" (formula "5") (term "0"))
                        (rule "distr_forallAnd" (formula "5"))
                        (rule "andLeft" (formula "5"))
                        (rule "commute_or_2" (formula "5") (term "0,0,0"))
                         (builtin "One Step Simplification" (formula "5"))
                        (rule "eqSymm" (formula "5") (term "1,0,0,0,0"))
                        (rule "castedGetAny" (formula "5") (term "1,0,0,1,0,0,0"))
                        (rule "castedGetAny" (formula "5") (term "0,0,0,0,0,0"))
                        (rule "castedGetAny" (formula "5") (term "0,1,0,0,0,0"))
                         (builtin "One Step Simplification" (formula "5"))
                        (rule "true_left" (formula "5"))
                        (rule "shift_paren_or" (formula "5") (term "0,0,0"))
                         (builtin "One Step Simplification" (formula "5"))
                        (rule "eqSymm" (formula "5") (term "1,1,0,0,0"))
                        (rule "castedGetAny" (formula "5") (term "0,0,0,0,0,0"))
                        (rule "castedGetAny" (formula "5") (term "0,0,1,0,0,0"))
                        (rule "castedGetAny" (formula "5") (term "0,1,1,0,0,0"))
                         (builtin "One Step Simplification" (formula "5"))
                        (rule "true_left" (formula "5"))
                        (rule "cnf_rightDist" (formula "4") (term "0,0,0"))
                        (rule "distr_forallAnd" (formula "4") (term "0,0"))
                        (rule "distr_forallAnd" (formula "4") (term "0"))
                        (rule "distr_forallAnd" (formula "4"))
                        (rule "andLeft" (formula "4"))
                        (rule "shift_paren_or" (formula "5") (term "0,0,0"))
                         (builtin "One Step Simplification" (formula "5"))
                        (rule "eqSymm" (formula "5") (term "1,1,0,0,0"))
                        (rule "castedGetAny" (formula "5") (term "0,0,0,0,0,0"))
                        (rule "castedGetAny" (formula "5") (term "0,0,1,0,0,0"))
                        (rule "castedGetAny" (formula "5") (term "0,1,1,0,0,0"))
                         (builtin "One Step Simplification" (formula "5"))
                        (rule "true_left" (formula "5"))
                        (rule "cnf_rightDist" (formula "1") (term "0,0,0"))
                        (rule "distr_forallAnd" (formula "1") (term "0,0"))
                        (rule "distr_forallAnd" (formula "1") (term "0"))
                        (rule "distr_forallAnd" (formula "1"))
                        (rule "andLeft" (formula "1"))
                        (rule "cnf_rightDist" (formula "4") (term "0,0,0"))
                        (rule "distr_forallAnd" (formula "4") (term "0,0"))
                        (rule "distr_forallAnd" (formula "4") (term "0"))
                        (rule "distr_forallAnd" (formula "4"))
                        (rule "andLeft" (formula "4"))
                        (rule "cnf_rightDist" (formula "3") (term "0,0,0"))
                        (rule "distr_forallAnd" (formula "3") (term "0,0"))
                        (rule "distr_forallAnd" (formula "3") (term "0"))
                        (rule "distr_forallAnd" (formula "3"))
                        (rule "andLeft" (formula "3"))
                        (rule "shift_paren_or" (formula "2") (term "0,0,0"))
                         (builtin "One Step Simplification" (formula "2"))
                        (rule "eqSymm" (formula "2") (term "1,1,0,0,0"))
                        (rule "castedGetAny" (formula "2") (term "0,0,1,0,0,0"))
                        (rule "castedGetAny" (formula "2") (term "0,0,0,0,0,0"))
                        (rule "castedGetAny" (formula "2") (term "0,1,1,0,0,0"))
                         (builtin "One Step Simplification" (formula "2"))
                        (rule "true_left" (formula "2"))
                        (rule "cnf_rightDist" (formula "4") (term "0,0,0"))
                        (rule "distr_forallAnd" (formula "4") (term "0,0"))
                        (rule "distr_forallAnd" (formula "4") (term "0"))
                        (rule "distr_forallAnd" (formula "4"))
                        (rule "andLeft" (formula "4"))
                        (rule "commute_or_2" (formula "4") (term "0,0,0"))
                         (builtin "One Step Simplification" (formula "4"))
                        (rule "eqSymm" (formula "4") (term "1,0,0,0,0"))
                        (rule "castedGetAny" (formula "4") (term "0,0,0,0,0,0"))
                        (rule "castedGetAny" (formula "4") (term "1,0,0,1,0,0,0"))
                        (rule "castedGetAny" (formula "4") (term "0,1,0,0,0,0"))
                         (builtin "One Step Simplification" (formula "4"))
                        (rule "true_left" (formula "4"))
                        (rule "shift_paren_or" (formula "4") (term "0,0,0"))
                         (builtin "One Step Simplification" (formula "4"))
                        (rule "eqSymm" (formula "4") (term "1,1,0,0,0"))
                        (rule "castedGetAny" (formula "4") (term "1,0,0,0,0,0,0"))
                        (rule "castedGetAny" (formula "4") (term "0,0,1,0,0,0"))
                        (rule "castedGetAny" (formula "4") (term "0,1,1,0,0,0"))
                         (builtin "One Step Simplification" (formula "4"))
                        (rule "true_left" (formula "4"))
                        (rule "cnf_rightDist" (formula "1") (term "0,0,0"))
                        (rule "distr_forallAnd" (formula "1") (term "0,0"))
                        (rule "distr_forallAnd" (formula "1") (term "0"))
                        (rule "distr_forallAnd" (formula "1"))
                        (rule "andLeft" (formula "1"))
                        (rule "cnf_rightDist" (formula "3") (term "0,0,0"))
                        (rule "distr_forallAnd" (formula "3") (term "0,0"))
                        (rule "distr_forallAnd" (formula "3") (term "0"))
                        (rule "distr_forallAnd" (formula "3"))
                        (rule "andLeft" (formula "3"))
                        (rule "cnf_rightDist" (formula "2") (term "0,0,0"))
                        (rule "distr_forallAnd" (formula "2") (term "0,0"))
                        (rule "distr_forallAnd" (formula "2") (term "0"))
                        (rule "distr_forallAnd" (formula "2"))
                        (rule "andLeft" (formula "2"))
                        (rule "commute_or_2" (formula "2") (term "0,0,0"))
                         (builtin "One Step Simplification" (formula "2"))
                        (rule "eqSymm" (formula "2") (term "1,0,0,0,0"))
                        (rule "castedGetAny" (formula "2") (term "1,0,0,1,0,0,0"))
                        (rule "castedGetAny" (formula "2") (term "0,0,0,0,0,0"))
                        (rule "castedGetAny" (formula "2") (term "0,1,0,0,0,0"))
                         (builtin "One Step Simplification" (formula "2"))
                        (rule "true_left" (formula "2"))
                        (rule "shift_paren_or" (formula "1") (term "0,0,0"))
                         (builtin "One Step Simplification" (formula "1"))
                        (rule "eqSymm" (formula "1") (term "1,1,0,0,0"))
                        (rule "castedGetAny" (formula "1") (term "1,0,0,0,0,0,0"))
                        (rule "castedGetAny" (formula "1") (term "0,0,1,0,0,0"))
                        (rule "castedGetAny" (formula "1") (term "0,1,1,0,0,0"))
                         (builtin "One Step Simplification" (formula "1"))
                        (rule "true_left" (formula "1"))
                        (rule "ifthenelse_split_for" (formula "28") (term "1,1"))
                        (branch "result_228_A_1.value@heapAtPre_A«anonHeapFunction» ≥ 0 TRUE"
                           (rule "cnf_rightDist" (formula "29"))
                           (rule "andLeft" (formula "29"))
                           (rule "commute_or" (formula "30"))
                           (rule "cnf_rightDist" (formula "29"))
                           (rule "andLeft" (formula "29"))
                           (rule "commute_or" (formula "30"))
                           (rule "shift_paren_or" (formula "1") (term "0,0,0"))
                            (builtin "One Step Simplification" (formula "1"))
                           (rule "eqSymm" (formula "1") (term "1,1,0,0,0"))
                           (rule "castedGetAny" (formula "1") (term "0,0,1,0,0,0"))
                           (rule "castedGetAny" (formula "1") (term "1,0,0,0,0,0,0"))
                           (rule "castedGetAny" (formula "1") (term "0,1,1,0,0,0"))
                            (builtin "One Step Simplification" (formula "1"))
                           (rule "true_left" (formula "1"))
                           (rule "cnf_rightDist" (formula "1") (term "0,0,0"))
                           (rule "distr_forallAnd" (formula "1") (term "0,0"))
                           (rule "distr_forallAnd" (formula "1") (term "0"))
                           (rule "distr_forallAnd" (formula "1"))
                           (rule "andLeft" (formula "1"))
                           (rule "commute_or_2" (formula "1") (term "0,0,0"))
                            (builtin "One Step Simplification" (formula "1"))
                           (rule "eqSymm" (formula "1") (term "1,0,0,0,0"))
                           (rule "castedGetAny" (formula "1") (term "0,0,0,0,0,0"))
                           (rule "castedGetAny" (formula "1") (term "1,0,0,1,0,0,0"))
                           (rule "castedGetAny" (formula "1") (term "0,1,0,0,0,0"))
                            (builtin "One Step Simplification" (formula "1"))
                           (rule "true_left" (formula "1"))
                           (rule "shift_paren_or" (formula "1") (term "0,0,0"))
                            (builtin "One Step Simplification" (formula "1"))
                           (rule "eqSymm" (formula "1") (term "1,1,0,0,0"))
                           (rule "castedGetAny" (formula "1") (term "0,0,1,0,0,0"))
                           (rule "castedGetAny" (formula "1") (term "1,0,0,0,0,0,0"))
                           (rule "castedGetAny" (formula "1") (term "0,1,1,0,0,0"))
                            (builtin "One Step Simplification" (formula "1"))
                           (rule "true_left" (formula "1"))
                           (rule "cut_direct" (formula "27") (term "0"))
                           (branch "CUT: result_228_A_1.value@heapAtPre_A«anonHeapFunction» = 0 TRUE"
                               (builtin "One Step Simplification" (formula "28"))
                              (rule "true_left" (formula "28"))
                              (rule "replace_known_left" (formula "29") (term "0") (ifseqformula "27"))
                               (builtin "One Step Simplification" (formula "29"))
                              (rule "true_left" (formula "29"))
                              (rule "replace_known_left" (formula "28") (term "0") (ifseqformula "27"))
                               (builtin "One Step Simplification" (formula "28"))
                              (rule "true_left" (formula "28"))
                              (rule "applyEq" (formula "28") (term "1,0") (ifseqformula "27"))
                              (rule "eqSymm" (formula "28"))
                              (rule "polySimp_homoEq" (formula "28"))
                              (rule "polySimp_mulLiterals" (formula "28") (term "1,0"))
                              (rule "polySimp_elimOne" (formula "28") (term "1,0"))
                              (rule "applyEq" (formula "29") (term "1,0,0") (ifseqformula "27"))
                              (rule "polySimp_mulComm0" (formula "29") (term "0"))
                              (rule "applyEq" (formula "26") (term "0") (ifseqformula "27"))
                              (rule "qeq_literals" (formula "26"))
                              (rule "true_left" (formula "26"))
                              (rule "applyEq" (formula "21") (term "1") (ifseqformula "26"))
                              (rule "applyEq" (formula "5") (term "1") (ifseqformula "26"))
                              (rule "applyEq" (formula "56") (term "1") (ifseqformula "26"))
                              (rule "applyEq" (formula "27") (term "1,1,0") (ifseqformula "26"))
                              (rule "polySimp_addComm0" (formula "27") (term "0"))
                              (rule "applyEq" (formula "28") (term "0,0") (ifseqformula "26"))
                              (rule "times_zero_2" (formula "28") (term "0"))
                              (rule "polySimp_homoEq" (formula "28"))
                              (rule "mul_literals" (formula "28") (term "1,0"))
                              (rule "add_zero_right" (formula "28") (term "0"))
                              (rule "polySimp_sepPosMonomial" (formula "27"))
                              (rule "polySimp_sepNegMonomial" (formula "28"))
                              (rule "polySimp_mulLiterals" (formula "28") (term "0"))
                              (rule "polySimp_elimOne" (formula "28") (term "0"))
                              (rule "applyEq" (formula "2") (term "0") (ifseqformula "28"))
                              (rule "applyEq" (formula "27") (term "0,0") (ifseqformula "28"))
                              (rule "eqSymm" (formula "27"))
                              (rule "polySimp_homoEq" (formula "27"))
                              (rule "polySimp_mulLiterals" (formula "27") (term "1,0"))
                              (rule "polySimp_elimOne" (formula "27") (term "1,0"))
                              (rule "applyEq" (formula "27") (term "0,0,1,0") (ifseqformula "28"))
                              (rule "polySimp_addComm0" (formula "27") (term "0"))
                              (rule "applyEq" (formula "4") (term "1") (ifseqformula "28"))
                              (rule "polySimp_sepPosMonomial" (formula "27"))
                              (rule "div_axiom" (formula "27") (term "0,1") (inst "quotient=quotient_1"))
                               (builtin "One Step Simplification" (formula "27"))
                              (rule "true_left" (formula "27"))
                              (rule "jdiv_axiom" (formula "27") (term "0"))
                              (rule "eqSymm" (formula "27"))
                              (rule "applyEq" (formula "27") (term "1") (ifseqformula "28"))
                               (builtin "One Step Simplification" (formula "27"))
                              (rule "eqSymm" (formula "27") (term "1"))
                              (rule "polySimp_homoEq" (formula "27") (term "1"))
                              (rule "polySimp_mulLiterals" (formula "27") (term "1,0,1"))
                              (rule "polySimp_elimOne" (formula "27") (term "1,0,1"))
                              (rule "polySimp_sepPosMonomial" (formula "27") (term "1"))
                              (rule "inEqSimp_contradInEq0" (formula "27") (term "0,0") (ifseqformula "2"))
                              (rule "qeq_literals" (formula "27") (term "0,0,0"))
                               (builtin "One Step Simplification" (formula "27"))
                              (rule "true_left" (formula "27"))
                              (rule "Use_information_flow_contract_for_compareTo_325434207" (formula "17") (ifseqformula "17"))
                               (builtin "One Step Simplification" (formula "17") (ifInst ""  (formula "95")) (ifInst ""  (formula "95")))
                              (rule "true_left" (formula "17"))
                              (rule "Use_information_flow_contract_for_getOrder_757678341" (formula "58") (ifseqformula "23"))
                              (rule "applyEq" (formula "58") (term "0,1,1") (ifseqformula "5"))
                              (rule "eqSymm" (formula "58") (term "1,1"))
                              (rule "replace_known_left" (formula "58") (term "1,1") (ifseqformula "26"))
                               (builtin "One Step Simplification" (formula "58"))
                              (rule "true_left" (formula "58"))
                              (rule "Use_information_flow_contract_for_getOrder_757678341" (formula "58") (ifseqformula "58"))
                               (builtin "One Step Simplification" (formula "58"))
                              (rule "true_left" (formula "58"))
                              (rule "Use_information_flow_contract_for_compareTo_325434207" (formula "52") (ifseqformula "17"))
                              (rule "replace_known_right" (formula "52") (term "0,1,1,0") (ifseqformula "95"))
                               (builtin "One Step Simplification" (formula "52") (ifInst ""  (formula "96")))
                              (rule "applyEq" (formula "52") (term "0,1,0,1") (ifseqformula "54"))
                              (rule "eqSymm" (formula "52") (term "1,0,1"))
                              (rule "replace_known_left" (formula "52") (term "1,0,1") (ifseqformula "18"))
                               (builtin "One Step Simplification" (formula "52"))
                              (rule "applyEq" (formula "52") (term "0,0,1") (ifseqformula "4"))
                              (rule "eqSymm" (formula "52") (term "0,1"))
                              (rule "replace_known_left" (formula "52") (term "0,1") (ifseqformula "28"))
                               (builtin "One Step Simplification" (formula "52"))
                              (rule "Class_invariant_axiom_for_java_math_BigInteger" (formula "52") (term "0,0"))
                              (rule "replace_known_left" (formula "52") (term "1,0,0") (ifseqformula "54"))
                               (builtin "One Step Simplification" (formula "52") (ifInst ""  (formula "96")))
                              (rule "Class_invariant_axiom_for_java_math_BigInteger" (formula "52") (term "0"))
                              (rule "replace_known_left" (formula "52") (term "1,0") (ifseqformula "18"))
                               (builtin "One Step Simplification" (formula "52") (ifInst ""  (formula "95")))
                              (rule "applyEq" (formula "53") (term "4") (ifseqformula "52"))
                              (rule "applyEq" (formula "44") (term "0") (ifseqformula "52"))
                              (rule "applyEq" (formula "50") (term "0") (ifseqformula "51"))
                              (rule "Use_information_flow_contract_for_getOrder_757678341" (formula "23") (ifseqformula "23"))
                               (builtin "One Step Simplification" (formula "23"))
                              (rule "true_left" (formula "23"))
                              (rule "Use_information_flow_contract_for_getOrder_757678341" (formula "23") (ifseqformula "57"))
                              (rule "eqSymm" (formula "23") (term "0,1"))
                              (rule "eqSymm" (formula "23") (term "1,1"))
                              (rule "applyEq" (formula "23") (term "0,0,1") (ifseqformula "56"))
                              (rule "eqSymm" (formula "23") (term "0,1"))
                              (rule "replace_known_left" (formula "23") (term "0,1") (ifseqformula "21"))
                               (builtin "One Step Simplification" (formula "23"))
                              (rule "applyEq" (formula "23") (term "0,1") (ifseqformula "5"))
                              (rule "eqSymm" (formula "23") (term "1"))
                              (rule "replace_known_left" (formula "23") (term "1") (ifseqformula "27"))
                               (builtin "One Step Simplification" (formula "23"))
                              (rule "true_left" (formula "23"))
                              (rule "Use_information_flow_contract_for_multiply_1272441881_0" (formula "69") (ifseqformula "35"))
                              (rule "replaceKnownSelect_taclet21_11" (formula "69") (term "1,1,1"))
                              (rule "replaceKnownSelect_taclet21_12" (formula "69") (term "0,1,1"))
                              (rule "replaceKnownAuxiliaryConstant_taclet1111121_18" (formula "69") (term "1,1,1"))
                              (rule "replaceKnownAuxiliaryConstant_taclet11111121_19" (formula "69") (term "0,1,1"))
                              (rule "replaceKnownSelect_taclet21_9" (formula "69") (term "0,1,0,1"))
                              (rule "replaceKnownSelect_taclet21_8" (formula "69") (term "1,1,0,1"))
                              (rule "replaceKnownAuxiliaryConstant_taclet121_15" (formula "69") (term "0,1,0,1"))
                              (rule "replaceKnownAuxiliaryConstant_taclet21_10" (formula "69") (term "1,1,0,1"))
                              (rule "replaceKnownAuxiliaryConstant_taclet121_15" (formula "69") (term "1,1,0,1"))
                               (builtin "One Step Simplification" (formula "69") (ifInst ""  (formula "85")) (ifInst ""  (formula "84")) (ifInst ""  (formula "102")))
                              (rule "pullOutSelect" (formula "69") (term "1,0,1") (inst "selectSK=org_bouncycastle_math_ec_ECPoint_value_4"))
                              (rule "simplifySelectOfAnonEQ" (formula "69") (ifseqformula "24"))
                               (builtin "One Step Simplification" (formula "69") (ifInst ""  (formula "99")) (ifInst ""  (formula "12")))
                              (rule "applyEqReverse" (formula "70") (term "1,0,1") (ifseqformula "69"))
                              (rule "hideAuxiliaryEq" (formula "69"))
                              (rule "pullOutSelect" (formula "69") (term "0,0,1") (inst "selectSK=org_bouncycastle_math_ec_ECPoint_value_5"))
                              (rule "simplifySelectOfAnonEQ" (formula "69") (ifseqformula "59"))
                               (builtin "One Step Simplification" (formula "69") (ifInst ""  (formula "100")) (ifInst ""  (formula "46")))
                              (rule "applyEqReverse" (formula "70") (term "0,0,1") (ifseqformula "69"))
                              (rule "hideAuxiliaryEq" (formula "69"))
                              (rule "replace_known_left" (formula "69") (term "0,1") (ifseqformula "3"))
                               (builtin "One Step Simplification" (formula "69"))
                              (rule "notLeft" (formula "69"))
                              (rule "Class_invariant_axiom_for_org_bouncycastle_math_ec_ECPoint" (formula "75") (term "0"))
                               (builtin "One Step Simplification" (formula "75"))
                              (rule "Class_invariant_axiom_for_org_bouncycastle_math_ec_ECPoint" (formula "75"))
                              (rule "closeTrue" (formula "75"))
                           )
                           (branch "CUT: result_228_A_1.value@heapAtPre_A«anonHeapFunction» = 0 FALSE"
                               (builtin "One Step Simplification" (formula "27"))
                              (rule "replace_known_right" (formula "29") (term "0") (ifseqformula "79"))
                               (builtin "One Step Simplification" (formula "29"))
                              (rule "replace_known_right" (formula "28") (term "0") (ifseqformula "79"))
                               (builtin "One Step Simplification" (formula "28"))
                              (rule "applyEq" (formula "31") (term "0,0") (ifseqformula "28"))
                              (rule "polySimp_mulComm0" (formula "31") (term "0"))
                              (rule "applyEq" (formula "27") (term "0") (ifseqformula "31"))
                              (rule "inEqSimp_homoInEq0" (formula "27"))
                              (rule "polySimp_mulComm0" (formula "27") (term "1,0"))
                              (rule "polySimp_rightDist" (formula "27") (term "1,0"))
                              (rule "polySimp_mulLiterals" (formula "27") (term "1,1,0"))
                              (rule "polySimp_elimOne" (formula "27") (term "1,1,0"))
                              (rule "polySimp_mulComm0" (formula "27") (term "0,1,0"))
                              (rule "polySimp_addAssoc" (formula "27") (term "0"))
                              (rule "polySimp_addComm0" (formula "27") (term "0,0"))
                              (rule "polySimp_pullOutFactor2b" (formula "27") (term "0"))
                              (rule "add_literals" (formula "27") (term "1,1,0"))
                              (rule "times_zero_1" (formula "27") (term "1,0"))
                              (rule "add_zero_right" (formula "27") (term "0"))
                              (rule "applyEq" (formula "29") (term "0") (ifseqformula "31"))
                              (rule "inEqSimp_homoInEq1" (formula "29"))
                              (rule "polySimp_mulComm0" (formula "29") (term "1,0"))
                              (rule "polySimp_rightDist" (formula "29") (term "1,0"))
                              (rule "polySimp_mulLiterals" (formula "29") (term "1,1,0"))
                              (rule "polySimp_elimOne" (formula "29") (term "1,1,0"))
                              (rule "polySimp_mulComm0" (formula "29") (term "0,1,0"))
                              (rule "polySimp_addComm1" (formula "29") (term "0"))
                              (rule "polySimp_addAssoc" (formula "29") (term "0,0"))
                              (rule "polySimp_addComm1" (formula "29") (term "0,0,0"))
                              (rule "polySimp_pullOutFactor2b" (formula "29") (term "0,0"))
                              (rule "add_literals" (formula "29") (term "1,1,0,0"))
                              (rule "times_zero_1" (formula "29") (term "1,0,0"))
                              (rule "add_zero_right" (formula "29") (term "0,0"))
                              (rule "applyEq" (formula "30") (term "0,1") (ifseqformula "28"))
                              (rule "inEqSimp_invertInEq1" (formula "27"))
                              (rule "mul_literals" (formula "27") (term "1"))
                              (rule "polySimp_mulLiterals" (formula "27") (term "0"))
                              (rule "polySimp_elimOne" (formula "27") (term "0"))
                              (rule "inEqSimp_sepNegMonomial0" (formula "29"))
                              (rule "polySimp_mulLiterals" (formula "29") (term "0"))
                              (rule "polySimp_elimOne" (formula "29") (term "0"))
                              (rule "inEqSimp_strengthen1" (formula "26") (ifseqformula "79"))
                              (rule "add_literals" (formula "26") (term "1"))
                              (rule "inEqSimp_contradEq7" (formula "79") (ifseqformula "26"))
                              (rule "mul_literals" (formula "79") (term "1,0,0"))
                              (rule "add_zero_right" (formula "79") (term "0,0"))
                              (rule "leq_literals" (formula "79") (term "0"))
                               (builtin "One Step Simplification" (formula "79"))
                              (rule "false_right" (formula "79"))
                              (rule "Use_information_flow_contract_for_compareTo_325434207" (formula "17") (ifseqformula "17"))
                               (builtin "One Step Simplification" (formula "17") (ifInst ""  (formula "98")) (ifInst ""  (formula "98")))
                              (rule "true_left" (formula "17"))
                              (rule "Use_information_flow_contract_for_getOrder_757678341" (formula "61") (ifseqformula "23"))
                              (rule "replace_known_left" (formula "61") (term "1,1") (ifseqformula "5"))
                               (builtin "One Step Simplification" (formula "61"))
                              (rule "true_left" (formula "61"))
                              (rule "Use_information_flow_contract_for_multiply_1272441881" (formula "73") (ifseqformula "38"))
                              (rule "replaceKnownSelect_taclet21_12" (formula "73") (term "0,1,1"))
                              (rule "replaceKnownSelect_taclet21_11" (formula "73") (term "1,1,1"))
                              (rule "replaceKnownAuxiliaryConstant_taclet11111121_19" (formula "73") (term "0,1,1"))
                              (rule "replaceKnownAuxiliaryConstant_taclet1111121_18" (formula "73") (term "1,1,1"))
                              (rule "replaceKnownSelect_taclet21_8" (formula "73") (term "1,1,0,1"))
                              (rule "replaceKnownSelect_taclet21_9" (formula "73") (term "0,1,0,1"))
                              (rule "replaceKnownAuxiliaryConstant_taclet21_10" (formula "73") (term "1,1,0,1"))
                               (builtin "One Step Simplification" (formula "73") (ifInst ""  (formula "89")) (ifInst ""  (formula "88")) (ifInst ""  (formula "106")))
                              (rule "pullOutSelect" (formula "73") (term "1,0,1") (inst "selectSK=org_bouncycastle_math_ec_ECPoint_value_4"))
                              (rule "simplifySelectOfAnonEQ" (formula "73") (ifseqformula "24"))
                               (builtin "One Step Simplification" (formula "73") (ifInst ""  (formula "103")) (ifInst ""  (formula "12")))
                              (rule "applyEqReverse" (formula "74") (term "1,0,1") (ifseqformula "73"))
                              (rule "hideAuxiliaryEq" (formula "73"))
                              (rule "pullOutSelect" (formula "73") (term "0,0,1") (inst "selectSK=org_bouncycastle_math_ec_ECPoint_value_5"))
                              (rule "simplifySelectOfAnonEQ" (formula "73") (ifseqformula "63"))
                               (builtin "One Step Simplification" (formula "73") (ifInst ""  (formula "104")) (ifInst ""  (formula "50")))
                              (rule "applyEqReverse" (formula "74") (term "0,0,1") (ifseqformula "73"))
                              (rule "hideAuxiliaryEq" (formula "73"))
                              (rule "replace_known_left" (formula "73") (term "0,1") (ifseqformula "3"))
                               (builtin "One Step Simplification" (formula "73"))
                              (rule "notLeft" (formula "73"))
                              (rule "Class_invariant_axiom_for_org_bouncycastle_math_ec_ECPoint" (formula "79") (term "0"))
                               (builtin "One Step Simplification" (formula "79"))
                              (rule "Class_invariant_axiom_for_org_bouncycastle_math_ec_ECPoint" (formula "79"))
                              (rule "closeTrue" (formula "79"))
                           )
                        )
                        (branch "result_228_A_1.value@heapAtPre_A«anonHeapFunction» ≥ 0 FALSE"
                           (rule "inEqSimp_geqRight" (formula "78"))
                           (rule "mul_literals" (formula "1") (term "1,0,0"))
                           (rule "add_zero_right" (formula "1") (term "0,0"))
                           (rule "inEqSimp_sepPosMonomial0" (formula "1"))
                           (rule "mul_literals" (formula "1") (term "1"))
                           (rule "inEqSimp_contradEq3" (formula "29") (term "0") (ifseqformula "1"))
                           (rule "mul_literals" (formula "29") (term "1,0,0,0"))
                           (rule "add_literals" (formula "29") (term "0,0,0"))
                           (rule "qeq_literals" (formula "29") (term "0,0"))
                            (builtin "One Step Simplification" (formula "29"))
                           (rule "andLeft" (formula "29"))
                           (rule "andLeft" (formula "29"))
                           (rule "applyEq" (formula "33") (term "0,0") (ifseqformula "30"))
                           (rule "polySimp_mulComm0" (formula "33") (term "0"))
                           (rule "applyEq" (formula "31") (term "0") (ifseqformula "33"))
                           (rule "inEqSimp_homoInEq1" (formula "31"))
                           (rule "polySimp_mulComm0" (formula "31") (term "1,0"))
                           (rule "polySimp_rightDist" (formula "31") (term "1,0"))
                           (rule "polySimp_mulLiterals" (formula "31") (term "1,1,0"))
                           (rule "polySimp_elimOne" (formula "31") (term "1,1,0"))
                           (rule "polySimp_mulComm0" (formula "31") (term "0,1,0"))
                           (rule "polySimp_addComm1" (formula "31") (term "0"))
                           (rule "polySimp_addAssoc" (formula "31") (term "0,0"))
                           (rule "polySimp_addComm1" (formula "31") (term "0,0,0"))
                           (rule "polySimp_pullOutFactor2b" (formula "31") (term "0,0"))
                           (rule "add_literals" (formula "31") (term "1,1,0,0"))
                           (rule "times_zero_1" (formula "31") (term "1,0,0"))
                           (rule "add_zero_right" (formula "31") (term "0,0"))
                           (rule "applyEq" (formula "29") (term "0") (ifseqformula "33"))
                           (rule "inEqSimp_homoInEq0" (formula "29"))
                           (rule "polySimp_mulComm0" (formula "29") (term "1,0"))
                           (rule "polySimp_rightDist" (formula "29") (term "1,0"))
                           (rule "polySimp_mulLiterals" (formula "29") (term "1,1,0"))
                           (rule "polySimp_elimOne" (formula "29") (term "1,1,0"))
                           (rule "polySimp_mulComm0" (formula "29") (term "0,1,0"))
                           (rule "polySimp_addAssoc" (formula "29") (term "0"))
                           (rule "polySimp_addComm0" (formula "29") (term "0,0"))
                           (rule "polySimp_pullOutFactor2b" (formula "29") (term "0"))
                           (rule "add_literals" (formula "29") (term "1,1,0"))
                           (rule "times_zero_1" (formula "29") (term "1,0"))
                           (rule "add_zero_right" (formula "29") (term "0"))
                           (rule "applyEq" (formula "32") (term "0,1") (ifseqformula "30"))
                           (rule "inEqSimp_sepPosMonomial0" (formula "31"))
                           (rule "polySimp_mulComm0" (formula "31") (term "1"))
                           (rule "polySimp_rightDist" (formula "31") (term "1"))
                           (rule "mul_literals" (formula "31") (term "0,1"))
                           (rule "polySimp_mulLiterals" (formula "31") (term "1,1"))
                           (rule "polySimp_elimOne" (formula "31") (term "1,1"))
                           (rule "inEqSimp_invertInEq1" (formula "29"))
                           (rule "polySimp_mulLiterals" (formula "29") (term "0"))
                           (rule "mul_literals" (formula "29") (term "1"))
                           (rule "polySimp_elimOne" (formula "29") (term "0"))
                           (rule "shift_paren_or" (formula "2") (term "0,0,0"))
                            (builtin "One Step Simplification" (formula "2"))
                           (rule "eqSymm" (formula "2") (term "1,1,0,0,0"))
                           (rule "castedGetAny" (formula "2") (term "1,0,0,0,0,0,0"))
                           (rule "castedGetAny" (formula "2") (term "0,0,1,0,0,0"))
                           (rule "castedGetAny" (formula "2") (term "0,1,1,0,0,0"))
                            (builtin "One Step Simplification" (formula "2"))
                           (rule "true_left" (formula "2"))
                           (rule "cnf_rightDist" (formula "2") (term "0,0,0"))
                           (rule "distr_forallAnd" (formula "2") (term "0,0"))
                           (rule "distr_forallAnd" (formula "2") (term "0"))
                           (rule "distr_forallAnd" (formula "2"))
                           (rule "andLeft" (formula "2"))
                           (rule "commute_or_2" (formula "2") (term "0,0,0"))
                            (builtin "One Step Simplification" (formula "2"))
                           (rule "eqSymm" (formula "2") (term "1,0,0,0,0"))
                           (rule "castedGetAny" (formula "2") (term "0,0,0,0,0,0"))
                           (rule "castedGetAny" (formula "2") (term "1,0,0,1,0,0,0"))
                           (rule "castedGetAny" (formula "2") (term "0,1,0,0,0,0"))
                            (builtin "One Step Simplification" (formula "2"))
                           (rule "true_left" (formula "2"))
                           (rule "shift_paren_or" (formula "2") (term "0,0,0"))
                            (builtin "One Step Simplification" (formula "2"))
                           (rule "eqSymm" (formula "2") (term "1,1,0,0,0"))
                           (rule "castedGetAny" (formula "2") (term "0,0,1,0,0,0"))
                           (rule "castedGetAny" (formula "2") (term "1,0,0,0,0,0,0"))
                           (rule "castedGetAny" (formula "2") (term "0,1,1,0,0,0"))
                            (builtin "One Step Simplification" (formula "2"))
                           (rule "true_left" (formula "2"))
                           (rule "Use_information_flow_contract_for_compareTo_325434207" (formula "18") (ifseqformula "18"))
                            (builtin "One Step Simplification" (formula "18") (ifInst ""  (formula "98")) (ifInst ""  (formula "98")))
                           (rule "true_left" (formula "18"))
                           (rule "Use_information_flow_contract_for_getOrder_757678341" (formula "61") (ifseqformula "24"))
                           (rule "replace_known_left" (formula "61") (term "1,1") (ifseqformula "6"))
                            (builtin "One Step Simplification" (formula "61"))
                           (rule "true_left" (formula "61"))
                           (rule "Use_information_flow_contract_for_multiply_1272441881" (formula "73") (ifseqformula "38"))
                           (rule "replaceKnownSelect_taclet21_11" (formula "73") (term "1,1,1"))
                           (rule "replaceKnownSelect_taclet21_12" (formula "73") (term "0,1,1"))
                           (rule "replaceKnownAuxiliaryConstant_taclet1111121_18" (formula "73") (term "1,1,1"))
                           (rule "replaceKnownAuxiliaryConstant_taclet11111121_19" (formula "73") (term "0,1,1"))
                           (rule "replaceKnownSelect_taclet21_8" (formula "73") (term "1,1,0,1"))
                           (rule "replaceKnownSelect_taclet21_9" (formula "73") (term "0,1,0,1"))
                           (rule "replaceKnownAuxiliaryConstant_taclet21_10" (formula "73") (term "1,1,0,1"))
                            (builtin "One Step Simplification" (formula "73") (ifInst ""  (formula "89")) (ifInst ""  (formula "88")) (ifInst ""  (formula "106")))
                           (rule "pullOutSelect" (formula "73") (term "1,0,1") (inst "selectSK=org_bouncycastle_math_ec_ECPoint_value_4"))
                           (rule "simplifySelectOfAnonEQ" (formula "73") (ifseqformula "25"))
                            (builtin "One Step Simplification" (formula "73") (ifInst ""  (formula "103")) (ifInst ""  (formula "13")))
                           (rule "applyEqReverse" (formula "74") (term "1,0,1") (ifseqformula "73"))
                           (rule "hideAuxiliaryEq" (formula "73"))
                           (rule "pullOutSelect" (formula "73") (term "0,0,1") (inst "selectSK=org_bouncycastle_math_ec_ECPoint_value_5"))
                           (rule "simplifySelectOfAnonEQ" (formula "73") (ifseqformula "63"))
                            (builtin "One Step Simplification" (formula "73") (ifInst ""  (formula "104")) (ifInst ""  (formula "50")))
                           (rule "applyEqReverse" (formula "74") (term "0,0,1") (ifseqformula "73"))
                           (rule "hideAuxiliaryEq" (formula "73"))
                           (rule "replace_known_left" (formula "73") (term "0,1") (ifseqformula "4"))
                            (builtin "One Step Simplification" (formula "73"))
                           (rule "notLeft" (formula "73"))
                           (rule "Class_invariant_axiom_for_org_bouncycastle_math_ec_ECPoint" (formula "79") (term "0"))
                            (builtin "One Step Simplification" (formula "79"))
                           (rule "Class_invariant_axiom_for_org_bouncycastle_math_ec_ECPoint" (formula "79"))
                           (rule "closeTrue" (formula "79"))
                        )
                     )
                  )
               )
            )
         )
      )
   )
)
)
}
