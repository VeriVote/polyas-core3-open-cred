\profile "Java Profile";

\settings {
"#Proof-Settings-Config-File
#Sat Oct 26 16:14:22 CEST 2019
[Labels]UseOriginLabels=true
[StrategyProperty]QUERYAXIOM_OPTIONS_KEY=QUERYAXIOM_ON
[SMTSettings]invariantForall=false
[Strategy]ActiveStrategy=JavaCardDLStrategy
[StrategyProperty]USER_TACLETS_OPTIONS_KEY1=USER_TACLETS_OFF
[StrategyProperty]QUANTIFIERS_OPTIONS_KEY=QUANTIFIERS_NON_SPLITTING_WITH_PROGS
[StrategyProperty]USER_TACLETS_OPTIONS_KEY2=USER_TACLETS_OFF
[Choice]DefaultChoices=methodExpansion-methodExpansion\\:modularOnly , mergeGenerateIsWeakeningGoal-mergeGenerateIsWeakeningGoal\\:off , wdChecks-wdChecks\\:off , wdOperator-wdOperator\\:L , permissions-permissions\\:off , integerSimplificationRules-integerSimplificationRules\\:full , reach-reach\\:on , moreSeqRules-moreSeqRules\\:on , sequences-sequences\\:on , bigint-bigint\\:on , modelFields-modelFields\\:treatAsAxiom , Strings-Strings\\:on , JavaCard-JavaCard\\:off , runtimeExceptions-runtimeExceptions\\:allow , programRules-programRules\\:Java , intRules-intRules\\:javaSemantics , initialisation-initialisation\\:disableStaticInitialisation , assertions-assertions\\:on
[StrategyProperty]LOOP_OPTIONS_KEY=LOOP_INVARIANT
[StrategyProperty]INF_FLOW_CHECK_PROPERTY=INF_FLOW_CHECK_FALSE
[SMTSettings]UseBuiltUniqueness=false
[SMTSettings]explicitTypeHierarchy=false
[SMTSettings]instantiateHierarchyAssumptions=true
[StrategyProperty]NON_LIN_ARITH_OPTIONS_KEY=NON_LIN_ARITH_DEF_OPS
[SMTSettings]SelectedTaclets=
[StrategyProperty]DEP_OPTIONS_KEY=DEP_ON
[StrategyProperty]AUTO_INDUCTION_OPTIONS_KEY=AUTO_INDUCTION_OFF
[Strategy]MaximumNumberOfAutomaticApplications=10000
[StrategyProperty]STOPMODE_OPTIONS_KEY=STOPMODE_DEFAULT
[StrategyProperty]CLASS_AXIOM_OPTIONS_KEY=CLASS_AXIOM_FREE
[SMTSettings]useConstantsForBigOrSmallIntegers=true
[StrategyProperty]MPS_OPTIONS_KEY=MPS_MERGE
[StrategyProperty]SYMBOLIC_EXECUTION_NON_EXECUTION_BRANCH_HIDING_OPTIONS_KEY=SYMBOLIC_EXECUTION_NON_EXECUTION_BRANCH_HIDING_OFF
[Strategy]Timeout=-1
[StrategyProperty]SYMBOLIC_EXECUTION_ALIAS_CHECK_OPTIONS_KEY=SYMBOLIC_EXECUTION_ALIAS_CHECK_NEVER
[StrategyProperty]QUERY_NEW_OPTIONS_KEY=QUERY_OFF
[SMTSettings]useUninterpretedMultiplication=true
[StrategyProperty]BLOCK_OPTIONS_KEY=BLOCK_CONTRACT_INTERNAL
[StrategyProperty]METHOD_OPTIONS_KEY=METHOD_CONTRACT
[StrategyProperty]USER_TACLETS_OPTIONS_KEY3=USER_TACLETS_OFF
[SMTSettings]maxGenericSorts=2
[StrategyProperty]OSS_OPTIONS_KEY=OSS_ON
[StrategyProperty]SPLITTING_OPTIONS_KEY=SPLITTING_DELAYED
[SMTSettings]integersMinimum=-2147483645
[StrategyProperty]VBT_PHASE=VBT_SYM_EX
[SMTSettings]integersMaximum=2147483645
"
}

\javaSource "src";

\problem {
!(  wellFormed(heapAtPre<<anonHeapFunction>>)
  & heap = heapAtPre<<anonHeapFunction>>
  & \[{
        exc_105=null;try {
          result_91=de.polyas.core3.open.crypto.basic.Utils.hexCharacters()@de.polyas.core3.open.crypto.basic.Utils;
        }   catch (java.lang.Throwable e) {
          exc_105=e;
        }
      }\] (  resultAtPost_91 = result_91
           & excAtPost_105 = exc_105
           & heapAtPost = heap))

}

\proof {
(keyLog "0" (keyUser "flo" ) (keyVersion "57d504cc0f"))

(autoModeTime "2364")

(branch "dummy ID"
(rule "notRight" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "eqSymm" (formula "3") (term "0,0,0"))
(rule "eqSymm" (formula "3") (term "1,0,0"))
(rule "eqSymm" (formula "2"))
(rule "assignment" (formula "3"))
(rule "boxToDiamond" (formula "3") (term "1"))
 (builtin "One Step Simplification" (formula "3"))
(rule "notLeft" (formula "3"))
(rule "methodBodyExpand" (formula "3") (term "1") (newnames "heapBefore_hexCharacters,savedHeapBefore_hexCharacters"))
 (builtin "One Step Simplification" (formula "3"))
(rule "returnUnfold" (formula "3") (term "1") (inst "#v0=x_arr"))
(rule "variableDeclarationAssign" (formula "3") (term "1"))
(rule "variableDeclaration" (formula "3") (term "1") (newnames "x_arr"))
(rule "methodCallWithAssignmentUnfoldTarget" (formula "3") (term "1") (inst "#v0=s"))
(rule "variableDeclaration" (formula "3") (term "1") (newnames "s"))
(rule "stringAssignment" (formula "3") (term "1"))
 (builtin "One Step Simplification" (formula "1"))
 (builtin "One Step Simplification" (formula "5"))
 (builtin "One Step Simplification" (formula "2"))
(rule "notLeft" (formula "1"))
 (builtin "Use Operation Contract" (formula "5") (newnames "heapBefore_toCharArray,result_92,exc_106,heapAfter_toCharArray,anon_heap_toCharArray") (contract "java.lang.String[java.lang.String::toCharArray()].JML normal_behavior operation contract.0"))
(branch "Post (toCharArray)"
    (builtin "One Step Simplification" (formula "9"))
    (builtin "One Step Simplification" (formula "7"))
    (builtin "One Step Simplification" (formula "6"))
    (builtin "One Step Simplification" (formula "5"))
   (rule "expand_inChar" (formula "5") (term "1,0,0,1,0,1,1"))
   (rule "replace_char_MAX" (formula "5") (term "1,0,1,0,0,1,0,1,1"))
   (rule "replace_char_MIN" (formula "5") (term "0,1,1,0,0,1,0,1,1"))
   (rule "andLeft" (formula "7"))
   (rule "andLeft" (formula "5"))
   (rule "selectCreatedOfAnonAsFormulaEQ" (formula "6") (term "1,1,0") (ifseqformula "5"))
   (rule "andLeft" (formula "6"))
   (rule "andLeft" (formula "7"))
   (rule "andLeft" (formula "6"))
   (rule "andLeft" (formula "7"))
   (rule "andLeft" (formula "8"))
   (rule "andLeft" (formula "9"))
   (rule "notLeft" (formula "10"))
   (rule "eqSymm" (formula "7"))
   (rule "replace_known_right" (formula "6") (term "0") (ifseqformula "14"))
    (builtin "One Step Simplification" (formula "6"))
   (rule "poolKeyIsContentOfValue" (formula "7") (term "0,0"))
   (rule "eqSymm" (formula "7"))
   (rule "lenOfSeqConcat" (formula "7") (term "1"))
    (builtin "One Step Simplification" (formula "7"))
   (rule "lenOfSeqConcat" (formula "7") (term "1,1"))
    (builtin "One Step Simplification" (formula "7"))
   (rule "polySimp_addAssoc" (formula "7") (term "1"))
   (rule "add_literals" (formula "7") (term "0,1"))
   (rule "lenOfSeqConcat" (formula "7") (term "1,1"))
    (builtin "One Step Simplification" (formula "7"))
   (rule "polySimp_addAssoc" (formula "7") (term "1"))
   (rule "add_literals" (formula "7") (term "0,1"))
   (rule "lenOfSeqConcat" (formula "7") (term "1,1"))
    (builtin "One Step Simplification" (formula "7"))
   (rule "polySimp_addAssoc" (formula "7") (term "1"))
   (rule "add_literals" (formula "7") (term "0,1"))
   (rule "lenOfSeqConcat" (formula "7") (term "1,1"))
    (builtin "One Step Simplification" (formula "7"))
   (rule "polySimp_addAssoc" (formula "7") (term "1"))
   (rule "add_literals" (formula "7") (term "0,1"))
   (rule "lenOfSeqConcat" (formula "7") (term "1,1"))
    (builtin "One Step Simplification" (formula "7"))
   (rule "polySimp_addAssoc" (formula "7") (term "1"))
   (rule "add_literals" (formula "7") (term "0,1"))
   (rule "lenOfSeqConcat" (formula "7") (term "1,1"))
    (builtin "One Step Simplification" (formula "7"))
   (rule "polySimp_addAssoc" (formula "7") (term "1"))
   (rule "add_literals" (formula "7") (term "0,1"))
   (rule "lenOfSeqConcat" (formula "7") (term "1,1"))
    (builtin "One Step Simplification" (formula "7"))
   (rule "polySimp_addAssoc" (formula "7") (term "1"))
   (rule "add_literals" (formula "7") (term "0,1"))
   (rule "lenOfSeqConcat" (formula "7") (term "1,1"))
    (builtin "One Step Simplification" (formula "7"))
   (rule "polySimp_addAssoc" (formula "7") (term "1"))
   (rule "add_literals" (formula "7") (term "0,1"))
   (rule "lenOfSeqConcat" (formula "7") (term "1,1"))
    (builtin "One Step Simplification" (formula "7"))
   (rule "polySimp_addAssoc" (formula "7") (term "1"))
   (rule "add_literals" (formula "7") (term "0,1"))
   (rule "lenOfSeqConcat" (formula "7") (term "1,1"))
    (builtin "One Step Simplification" (formula "7"))
   (rule "polySimp_addAssoc" (formula "7") (term "1"))
   (rule "add_literals" (formula "7") (term "0,1"))
   (rule "lenOfSeqConcat" (formula "7") (term "1,1"))
    (builtin "One Step Simplification" (formula "7"))
   (rule "polySimp_addAssoc" (formula "7") (term "1"))
   (rule "add_literals" (formula "7") (term "0,1"))
   (rule "lenOfSeqConcat" (formula "7") (term "1,1"))
    (builtin "One Step Simplification" (formula "7"))
   (rule "polySimp_addAssoc" (formula "7") (term "1"))
   (rule "add_literals" (formula "7") (term "0,1"))
   (rule "lenOfSeqConcat" (formula "7") (term "1,1"))
    (builtin "One Step Simplification" (formula "7"))
   (rule "polySimp_addAssoc" (formula "7") (term "1"))
   (rule "add_literals" (formula "7") (term "0,1"))
   (rule "inEqSimp_commuteLeq" (formula "8") (term "1,1,0"))
   (rule "inEqSimp_commuteLeq" (formula "8") (term "0,0,0"))
   (rule "lenOfSeqConcat" (formula "7") (term "1,1"))
    (builtin "One Step Simplification" (formula "7"))
   (rule "add_literals" (formula "7") (term "1,1"))
   (rule "add_literals" (formula "7") (term "1"))
   (rule "assignment" (formula "16") (term "1"))
    (builtin "One Step Simplification" (formula "16"))
   (rule "Class_invariant_axiom_for_java_lang_String" (formula "12"))
   (rule "true_left" (formula "12"))
   (rule "Class_invariant_axiom_for_java_lang_String" (formula "9"))
   (rule "true_left" (formula "9"))
   (rule "commute_and" (formula "8") (term "1,0"))
   (rule "commute_and" (formula "8") (term "0,0"))
   (rule "methodCallReturn" (formula "14") (term "1"))
   (rule "assignment" (formula "14") (term "1"))
    (builtin "One Step Simplification" (formula "14"))
   (rule "methodCallEmpty" (formula "14") (term "1"))
   (rule "tryEmpty" (formula "14") (term "1"))
   (rule "emptyModality" (formula "14") (term "1"))
    (opengoal "!(  wellFormed(heapAtPre<<anonHeapFunction>>)   & heap = heapAtPre<<anonHeapFunction>>   & \\[{         exc_105=null;try {           result_91=de.polyas.core3.open.crypto.basic.Utils.hexCharacters()@de.polyas.core3.open.crypto.basic.Utils;         }   catch (java.lang.Throwable e) {           exc_105=e;         }       }\\] (  resultAtPost_91 = result_91            & excAtPost_105 = exc_105            & heapAtPost = heap)) ")
)
(branch "Exceptional Post (toCharArray)"
    (builtin "One Step Simplification" (formula "7"))
    (builtin "One Step Simplification" (formula "5"))
   (rule "expand_inChar" (formula "5") (term "1,0,0,1,0,1,1"))
   (rule "replace_char_MAX" (formula "5") (term "1,0,1,0,0,1,0,1,1"))
   (rule "replace_char_MIN" (formula "5") (term "0,1,1,0,0,1,0,1,1"))
   (rule "andLeft" (formula "5"))
   (rule "selectCreatedOfAnonAsFormulaEQ" (formula "6") (term "1,0") (ifseqformula "5"))
   (rule "andLeft" (formula "6"))
   (rule "andLeft" (formula "6"))
   (rule "andLeft" (formula "8"))
   (rule "notLeft" (formula "6"))
   (rule "close" (formula "9") (ifseqformula "8"))
)
(branch "Pre (toCharArray)"
    (builtin "One Step Simplification" (formula "5"))
   (rule "applyEq" (formula "2") (term "0") (ifseqformula "3"))
   (rule "replace_known_left" (formula "5") (term "1") (ifseqformula "2"))
    (builtin "One Step Simplification" (formula "5"))
   (rule "Class_invariant_axiom_for_java_lang_String" (formula "5"))
   (rule "closeTrue" (formula "5"))
)
(branch "Null reference (s = null)"
    (builtin "One Step Simplification" (formula "5") (ifInst ""  (formula "4")))
   (rule "closeTrue" (formula "5"))
)
)
}
