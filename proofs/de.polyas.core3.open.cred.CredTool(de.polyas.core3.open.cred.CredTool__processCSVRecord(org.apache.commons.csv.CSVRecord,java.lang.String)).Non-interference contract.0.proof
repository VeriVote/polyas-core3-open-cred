\profile "Java Profile";

\settings {
"#Proof-Settings-Config-File
#Tue Sep 17 18:40:18 CEST 2019
[Labels]UseOriginLabels=true
[StrategyProperty]QUERYAXIOM_OPTIONS_KEY=QUERYAXIOM_ON
[SMTSettings]invariantForall=false
[Strategy]ActiveStrategy=JavaCardDLStrategy
[StrategyProperty]USER_TACLETS_OPTIONS_KEY1=USER_TACLETS_OFF
[StrategyProperty]QUANTIFIERS_OPTIONS_KEY=QUANTIFIERS_NON_SPLITTING_WITH_PROGS
[StrategyProperty]USER_TACLETS_OPTIONS_KEY2=USER_TACLETS_OFF
[Choice]DefaultChoices=methodExpansion-methodExpansion\\:modularOnly , mergeGenerateIsWeakeningGoal-mergeGenerateIsWeakeningGoal\\:off , wdChecks-wdChecks\\:off , wdOperator-wdOperator\\:L , permissions-permissions\\:off , integerSimplificationRules-integerSimplificationRules\\:full , reach-reach\\:on , moreSeqRules-moreSeqRules\\:off , sequences-sequences\\:on , bigint-bigint\\:on , modelFields-modelFields\\:treatAsAxiom , Strings-Strings\\:on , JavaCard-JavaCard\\:on , runtimeExceptions-runtimeExceptions\\:allow , programRules-programRules\\:Java , intRules-intRules\\:arithmeticSemanticsIgnoringOF , initialisation-initialisation\\:disableStaticInitialisation , assertions-assertions\\:on
[StrategyProperty]LOOP_OPTIONS_KEY=LOOP_INVARIANT
[StrategyProperty]INF_FLOW_CHECK_PROPERTY=INF_FLOW_CHECK_TRUE
[SMTSettings]UseBuiltUniqueness=false
[SMTSettings]explicitTypeHierarchy=false
[SMTSettings]instantiateHierarchyAssumptions=true
[StrategyProperty]NON_LIN_ARITH_OPTIONS_KEY=NON_LIN_ARITH_DEF_OPS
[SMTSettings]SelectedTaclets=
[StrategyProperty]DEP_OPTIONS_KEY=DEP_ON
[StrategyProperty]AUTO_INDUCTION_OPTIONS_KEY=AUTO_INDUCTION_OFF
[Strategy]MaximumNumberOfAutomaticApplications=80000
[StrategyProperty]STOPMODE_OPTIONS_KEY=STOPMODE_DEFAULT
[StrategyProperty]CLASS_AXIOM_OPTIONS_KEY=CLASS_AXIOM_FREE
[SMTSettings]useConstantsForBigOrSmallIntegers=true
[StrategyProperty]MPS_OPTIONS_KEY=MPS_MERGE
[StrategyProperty]SYMBOLIC_EXECUTION_NON_EXECUTION_BRANCH_HIDING_OPTIONS_KEY=SYMBOLIC_EXECUTION_NON_EXECUTION_BRANCH_HIDING_OFF
[Strategy]Timeout=-1
[StrategyProperty]SYMBOLIC_EXECUTION_ALIAS_CHECK_OPTIONS_KEY=SYMBOLIC_EXECUTION_ALIAS_CHECK_NEVER
[StrategyProperty]QUERY_NEW_OPTIONS_KEY=QUERY_OFF
[SMTSettings]useUninterpretedMultiplication=true
[StrategyProperty]BLOCK_OPTIONS_KEY=BLOCK_CONTRACT_INTERNAL
[StrategyProperty]METHOD_OPTIONS_KEY=METHOD_CONTRACT
[StrategyProperty]USER_TACLETS_OPTIONS_KEY3=USER_TACLETS_OFF
[SMTSettings]maxGenericSorts=2
[StrategyProperty]OSS_OPTIONS_KEY=OSS_ON
[StrategyProperty]SPLITTING_OPTIONS_KEY=SPLITTING_DELAYED
[SMTSettings]integersMinimum=-2147483645
[StrategyProperty]VBT_PHASE=VBT_SYM_EX
[SMTSettings]integersMaximum=2147483645
"
}

\javaSource "../src";



\sorts{
Formula;
any;
java.lang.Object;
java.util.Iterator\extends java.lang.Object;
java.util.Collection.CollectionIterator\extends java.util.Iterator;
java.util.ArrayList\extends java.util.List;
org.bouncycastle.math.ec.custom.sec.SecP256K1Curve\extends org.bouncycastle.math.ec.ECCurve.AbstractFp;
org.bouncycastle.math.ec.ECPoint\extends java.lang.Object;
org.bouncycastle.jce.spec.ECNamedCurveParameterSpec\extends org.bouncycastle.jce.spec.ECParameterSpec;
de.polyas.core3.open.crypto.groups.ECGroup\extends de.polyas.core3.open.crypto.groups.CyclicGroup;
de.polyas.core3.open.cred.CredentialGenerator.GeneratedDataForVoter\extends java.lang.Object;
java.lang.String\extends java.lang.Comparable, java.io.Serializable, java.lang.Object;
Seq;
org.apache.commons.csv.CSVRecord\extends java.lang.Iterable, java.io.Serializable, java.lang.Object;
int;
numbers;
java.lang.Throwable\extends java.io.Serializable, java.lang.Object;
boolean;
Field;
de.polyas.core3.open.cred.CredTool\extends java.lang.Object;
Heap;
Update;
}

\predicates{
RELATED_BY_BLOCK_at_line_231_in_processCSVRecord_1352071233(de.polyas.core3.open.cred.CredTool,Heap,de.polyas.core3.open.cred.CredTool,java.lang.Throwable,Heap);
RELATED_BY_get_1066055272(org.apache.commons.csv.CSVRecord,java.lang.String,Heap,org.apache.commons.csv.CSVRecord,java.lang.String,java.lang.Throwable,Heap);
RELATED_BY_voterIdCheck_1060056493(de.polyas.core3.open.cred.CredTool,java.lang.String,Heap,de.polyas.core3.open.cred.CredTool,boolean,java.lang.Throwable,Heap);
RELATED_BY_generateDataForVoter_2065185875(java.lang.String,java.lang.String,Heap,de.polyas.core3.open.cred.CredentialGenerator.GeneratedDataForVoter,java.lang.Throwable,Heap);
RELATED_BY_BLOCK_at_line_249_in_processCSVRecord_1352071233(de.polyas.core3.open.cred.CredTool,de.polyas.core3.open.cred.CredentialGenerator.GeneratedDataForVoter,org.apache.commons.csv.CSVRecord,Heap,de.polyas.core3.open.cred.CredTool,java.lang.Throwable,Heap);
RELATED_BY_BLOCK_at_line_274_in_processCSVRecord_1352071233(de.polyas.core3.open.cred.CredTool,de.polyas.core3.open.cred.CredentialGenerator.GeneratedDataForVoter,org.apache.commons.csv.CSVRecord,Heap,de.polyas.core3.open.cred.CredTool,java.lang.Throwable,Heap);
RELATED_BY_ArrayList_1695163498(java.util.ArrayList,Heap,java.util.ArrayList,java.lang.Throwable,Heap);
RELATED_BY_iterator_1422982459(java.util.Collection,Heap,java.util.ArrayList,java.util.Collection.CollectionIterator,java.lang.Throwable,Heap);
RELATED_BY_get_1066055272(org.apache.commons.csv.CSVRecord,java.lang.String,Heap,org.apache.commons.csv.CSVRecord,java.lang.String,java.lang.Throwable,Heap);
RELATED_BY_next_1806066688(java.util.Iterator,Heap,java.util.Iterator,java.lang.Object,java.lang.Throwable,Heap);
RELATED_BY_add_857115291(java.util.Collection,java.lang.Object,Heap,java.util.ArrayList,boolean,java.lang.Throwable,Heap);
RELATED_BY_NullPointerException_1821935366(java.lang.NullPointerException,Heap,java.lang.NullPointerException,java.lang.Throwable,Heap);
RELATED_BY_hasNext_608742876(java.util.Iterator,Heap,java.util.Iterator,boolean,java.lang.Throwable,Heap);
RELATED_BY_iterator_1422982459(java.util.Collection,Heap,java.util.ArrayList,java.util.Collection.CollectionIterator,java.lang.Throwable,Heap);
RELATED_BY_ArrayList_1695163498(java.util.ArrayList,Heap,java.util.ArrayList,java.lang.Throwable,Heap);
}

\functions{
Formula wellFormed(Heap);
Null null;
Field java.lang.Object::<created>;
boolean boolean::select(Heap,java.lang.Object,Field);
boolean TRUE;
boolean de.polyas.core3.open.cred.CredTool::exactInstance(any);
Formula measuredByEmpty;
Heap heap_After_BLOCK_A;
Heap heap_After_BLOCK_B;
numbers #;
numbers 0(numbers);
int Z(numbers);
Formula leq(int,int);
Field org.apache.commons.csv.CSVRecord::$key_seq;
Seq Seq::select(Heap,java.lang.Object,Field);
int seqLen(Seq);
Formula lt(int,int);
Formula inInt(int);
any any::seqGet(Seq,int);
java.lang.String java.lang.String::cast(any);
Formula java.lang.Object::<inv>(Heap,java.lang.Object);
Seq strContent(java.lang.String);
int int::cast(any);
numbers 3(numbers);
numbers 2(numbers);
int C(numbers);
Formula gt(int,int);
Formula de.polyas.core3.open.cred.Crypto::<$inv>(Heap);
Formula java.math.BigInteger::<$inv>(Heap);
Formula de.polyas.core3.open.cred.CredentialGenerator::<$inv>(Heap);
Field de.polyas.core3.open.cred.CredentialGenerator.GeneratedDataForVoter::$password;
java.lang.String java.lang.String::select(Heap,java.lang.Object,Field);
Field de.polyas.core3.open.cred.CredentialGenerator.GeneratedDataForVoter::$hashedPassword;
Field de.polyas.core3.open.cred.CredentialGenerator::$GROUP;
de.polyas.core3.open.crypto.groups.ECGroup de.polyas.core3.open.crypto.groups.ECGroup::select(Heap,java.lang.Object,Field);
Field de.polyas.core3.open.crypto.groups.ECGroup::$group;
org.bouncycastle.jce.spec.ECNamedCurveParameterSpec org.bouncycastle.jce.spec.ECNamedCurveParameterSpec::select(Heap,java.lang.Object,Field);
Field org.bouncycastle.jce.spec.ECParameterSpec::$generator;
org.bouncycastle.math.ec.ECPoint org.bouncycastle.math.ec.ECPoint::select(Heap,java.lang.Object,Field);
Field org.bouncycastle.math.ec.ECPoint::$value;
int int::select(Heap,java.lang.Object,Field);
Field de.polyas.core3.open.crypto.groups.ECGroup::$curve;
org.bouncycastle.math.ec.custom.sec.SecP256K1Curve org.bouncycastle.math.ec.custom.sec.SecP256K1Curve::select(Heap,java.lang.Object,Field);
Field org.bouncycastle.math.ec.ECCurve::$order;
Field de.polyas.core3.open.cred.CredentialGenerator.GeneratedDataForVoter::$publicSigningKey;
Heap heap_After_BLOCK_A;
Heap heap_After_BLOCK_B;
Heap heap_After_BLOCK_A;
Heap heap_After_BLOCK_B;
Field org.apache.commons.csv.CSVRecord::$value_seq;
Field de.polyas.core3.open.cred.CredTool::$inputColsForPolyas;
java.util.ArrayList java.util.ArrayList::select(Heap,java.lang.Object,Field);
Field java.util.Collection::$seq;
Field de.polyas.core3.open.cred.CredTool::$idCol;
Field de.polyas.core3.open.cred.CredTool::$polyasVals;
Field java.util.Iterator::$seq;
Field java.util.Iterator::$index;
Heap heapAtPre_A;
Heap heapAtPost_A;
Heap heapAtPre_B;
Heap heapAtPost_B;
}

\programVariables{
Heap heap_Before_BLOCK_A;
Heap heap;
de.polyas.core3.open.cred.CredTool self_77_A_0;
de.polyas.core3.open.cred.CredTool self_77_After_BLOCK_A;
java.lang.Throwable exc#15_After_BLOCK_A;
java.lang.Throwable exc#15_A;
Heap heap_Before_BLOCK_B;
de.polyas.core3.open.cred.CredTool self_77_B_0;
de.polyas.core3.open.cred.CredTool self_77_After_BLOCK_B;
java.lang.Throwable exc#15_After_BLOCK_B;
java.lang.Throwable exc#15_B;
Heap heap_Before_BLOCK_0_A;
de.polyas.core3.open.cred.CredTool self_77_A_1;
de.polyas.core3.open.cred.CredentialGenerator.GeneratedDataForVoter dataForVoter_A;
org.apache.commons.csv.CSVRecord _r_3_A_0;
de.polyas.core3.open.cred.CredTool self_77_After_BLOCK_0_A;
de.polyas.core3.open.cred.CredentialGenerator.GeneratedDataForVoter dataForVoter;
org.apache.commons.csv.CSVRecord _r_3;
java.lang.Throwable exc#11_After_BLOCK_A;
java.lang.Throwable exc#11_A;
Heap heap_Before_BLOCK_0_B;
de.polyas.core3.open.cred.CredTool self_77_B_1;
de.polyas.core3.open.cred.CredentialGenerator.GeneratedDataForVoter dataForVoter_B;
org.apache.commons.csv.CSVRecord _r_3_B_0;
de.polyas.core3.open.cred.CredTool self_77_After_BLOCK_0_B;
java.lang.Throwable exc#11_After_BLOCK_B;
java.lang.Throwable exc#11_B;
Heap heap_Before_BLOCK_1_A;
de.polyas.core3.open.cred.CredTool self_77_A_2;
de.polyas.core3.open.cred.CredentialGenerator.GeneratedDataForVoter dataForVoter_A_0;
org.apache.commons.csv.CSVRecord _r_3_A_1;
de.polyas.core3.open.cred.CredTool self_77_After_BLOCK_1_A;
java.lang.Throwable exc#7_After_BLOCK_A;
java.lang.Throwable exc#7_A;
Heap heap_Before_BLOCK_1_B;
de.polyas.core3.open.cred.CredTool self_77_B_2;
de.polyas.core3.open.cred.CredentialGenerator.GeneratedDataForVoter dataForVoter_B_0;
org.apache.commons.csv.CSVRecord _r_3_B_1;
de.polyas.core3.open.cred.CredTool self_77_After_BLOCK_1_B;
java.lang.Throwable exc#7_After_BLOCK_B;
java.lang.Throwable exc#7_B;
de.polyas.core3.open.cred.CredTool self_77_A;
org.apache.commons.csv.CSVRecord r_3_A;
java.lang.String password_11_A;
org.apache.commons.csv.CSVRecord _r_3_A;
java.lang.String _password_11_A;
de.polyas.core3.open.cred.CredTool selfAtPost_77_A;
java.lang.Throwable excAtPost_103_A;
java.lang.Throwable exc_103_A;
de.polyas.core3.open.cred.CredTool self_77_B;
org.apache.commons.csv.CSVRecord r_3_B;
java.lang.String password_11_B;
org.apache.commons.csv.CSVRecord _r_3_B;
java.lang.String _password_11_B;
de.polyas.core3.open.cred.CredTool selfAtPost_77_B;
java.lang.Throwable excAtPost_103_B;
java.lang.Throwable exc_103_B;
}

\rules{

unfold_computed_formula_1_of_processCSVRecord_1352071233 {
  \schemaVar \variables int i#44;
  \schemaVar \variables int j#46;
  \schemaVar \variables int i#45;
  \schemaVar \term Heap sv_heapAtPre_A#31;
  \schemaVar \term org.apache.commons.csv.CSVRecord sv_r_3_A#29;
  \schemaVar \term java.lang.String sv_password_11_A#30;
  \schemaVar \term de.polyas.core3.open.cred.CredTool sv_selfAtPost_77_A#33;
  \schemaVar \term de.polyas.core3.open.cred.CredTool sv_self_77_A#28;
  \schemaVar \term java.lang.Throwable sv_excAtPost_103_A#34;
  \schemaVar \term Heap sv_heapAtPost_A#35;
  \schemaVar \variables int i#47;
  \schemaVar \variables int j#49;
  \schemaVar \variables int i#48;
  \schemaVar \term Heap sv_heapAtPre_B#39;
  \schemaVar \term org.apache.commons.csv.CSVRecord sv_r_3_B#37;
  \schemaVar \term java.lang.String sv_password_11_B#38;
  \schemaVar \term de.polyas.core3.open.cred.CredTool sv_selfAtPost_77_B#41;
  \schemaVar \term de.polyas.core3.open.cred.CredTool sv_self_77_B#36;
  \schemaVar \term java.lang.Throwable sv_excAtPost_103_B#42;
  \schemaVar \term Heap sv_heapAtPost_B#43;
  
  \find (
      {heap:=sv_heapAtPre_A#31}
        (  wellFormed(sv_heapAtPre_A#31)
         & heap = sv_heapAtPre_A#31
         & !sv_self_77_A#28 = null
         &   boolean::select(heap, sv_self_77_A#28, java.lang.Object::<created>)
           = TRUE
         &   de.polyas.core3.open.cred.CredTool::exactInstance(sv_self_77_A#28)
           = TRUE
         & (  ((  sv_r_3_A#29 = null
                |   boolean::select(sv_heapAtPre_A#31,
                                    sv_r_3_A#29,
                                    java.lang.Object::<created>)
                  = TRUE)<<SC>>)
            & ((  sv_password_11_A#30 = null
                |   boolean::select(sv_heapAtPre_A#31,
                                    sv_password_11_A#30,
                                    java.lang.Object::<created>)
                  = TRUE)<<SC>>))
         & ((  java.math.BigInteger::<$inv>(sv_heapAtPre_A#31)
             & ((  de.polyas.core3.open.cred.CredentialGenerator::<$inv>(sv_heapAtPre_A#31)
                 & ((  de.polyas.core3.open.cred.Crypto::<$inv>(sv_heapAtPre_A#31)
                     & ((  java.lang.Object::<inv>(sv_heapAtPre_A#31,
                                                   sv_r_3_A#29)
                         & ((  \exists i#44;
                                 ((  (leq(Z(0(#)), i#44)
                                   & lt(i#44,
                                        seqLen(Seq::select(sv_heapAtPre_A#31,
                                                           sv_r_3_A#29,
                                                           org.apache.commons.csv.CSVRecord::$key_seq))))<<SC>>
                                   & inInt(i#44)
                                   &   (java.lang.String)(any::seqGet(Seq::select(sv_heapAtPre_A#31,
                                                                                  sv_r_3_A#29,
                                                                                  org.apache.commons.csv.CSVRecord::$key_seq),
                                                                      i#44))
                                     = java.lang.String::select(sv_heapAtPre_A#31,
                                                                sv_self_77_A#28,
                                                                de.polyas.core3.open.cred.CredTool::$idCol))<<SC>>)
                             & ((  \forall i#45;
                                     (     (leq(Z(0(#)), i#45)
                                         & lt(i#45,
                                              seqLen(Seq::select(sv_heapAtPre_A#31,
                                                                 sv_r_3_A#29,
                                                                 org.apache.commons.csv.CSVRecord::$key_seq))))<<SC>>
                                         & inInt(i#45)
                                      ->   (java.lang.String)(any::seqGet(Seq::select(sv_heapAtPre_A#31,
                                                                                      sv_r_3_A#29,
                                                                                      org.apache.commons.csv.CSVRecord::$key_seq),
                                                                          i#45))
                                         = java.lang.String::select(sv_heapAtPre_A#31,
                                                                    sv_self_77_A#28,
                                                                    de.polyas.core3.open.cred.CredTool::$idCol)
                                      -> \exists j#46;
                                           ((  (leq(Z(0(#)), j#46)
                                             & lt(j#46,
                                                  seqLen(strContent((java.lang.String)(any::seqGet(Seq::select(sv_heapAtPre_A#31,
                                                                                                               sv_r_3_A#29,
                                                                                                               org.apache.commons.csv.CSVRecord::$value_seq),
                                                                                                   i#45))))))<<SC>>
                                             & inInt(j#46)
                                             & gt((int)(any::seqGet(strContent((java.lang.String)(any::seqGet(Seq::select(sv_heapAtPre_A#31,
                                                                                                                          sv_r_3_A#29,
                                                                                                                          org.apache.commons.csv.CSVRecord::$value_seq),
                                                                                                              i#45))),
                                                                    j#46)),
                                                  C(2(3(#)))))<<SC>>))
                                 & ((  java.lang.Object::<inv>(sv_heapAtPre_A#31,
                                                               sv_self_77_A#28)<<impl>>
                                     & ((  (!sv_r_3_A#29 = null)<<impl>>
                                         & (!sv_password_11_A#30 = null)<<impl>>)<<SC>>))<<SC>>))<<SC>>))<<SC>>))<<SC>>))<<SC>>))<<SC>>))<<SC>>)
         & {_r_3_A:=sv_r_3_A#29 || _password_11_A:=sv_password_11_A#30}
             \[{
                 exc_103_A=null;try {
                   self_77_A.processCSVRecord(_r_3_A,_password_11_A)@de.polyas.core3.open.cred.CredTool;
                 }   catch (java.lang.Throwable e) {
                   exc_103_A=e;
                 }
               }\] (  sv_selfAtPost_77_A#33 = sv_self_77_A#28
                    & sv_excAtPost_103_A#34 = exc_103_A
                    & sv_heapAtPost_A#35 = heap))
    & {heap:=sv_heapAtPre_B#39}
        (  wellFormed(sv_heapAtPre_B#39)
         & heap = sv_heapAtPre_B#39
         & !sv_self_77_B#36 = null
         &   boolean::select(heap, sv_self_77_B#36, java.lang.Object::<created>)
           = TRUE
         &   de.polyas.core3.open.cred.CredTool::exactInstance(sv_self_77_B#36)
           = TRUE
         & (  ((  sv_r_3_B#37 = null
                |   boolean::select(sv_heapAtPre_B#39,
                                    sv_r_3_B#37,
                                    java.lang.Object::<created>)
                  = TRUE)<<SC>>)
            & ((  sv_password_11_B#38 = null
                |   boolean::select(sv_heapAtPre_B#39,
                                    sv_password_11_B#38,
                                    java.lang.Object::<created>)
                  = TRUE)<<SC>>))
         & ((  java.math.BigInteger::<$inv>(sv_heapAtPre_B#39)
             & ((  de.polyas.core3.open.cred.CredentialGenerator::<$inv>(sv_heapAtPre_B#39)
                 & ((  de.polyas.core3.open.cred.Crypto::<$inv>(sv_heapAtPre_B#39)
                     & ((  java.lang.Object::<inv>(sv_heapAtPre_B#39,
                                                   sv_r_3_B#37)
                         & ((  \exists i#47;
                                 ((  (leq(Z(0(#)), i#47)
                                   & lt(i#47,
                                        seqLen(Seq::select(sv_heapAtPre_B#39,
                                                           sv_r_3_B#37,
                                                           org.apache.commons.csv.CSVRecord::$key_seq))))<<SC>>
                                   & inInt(i#47)
                                   &   (java.lang.String)(any::seqGet(Seq::select(sv_heapAtPre_B#39,
                                                                                  sv_r_3_B#37,
                                                                                  org.apache.commons.csv.CSVRecord::$key_seq),
                                                                      i#47))
                                     = java.lang.String::select(sv_heapAtPre_B#39,
                                                                sv_self_77_B#36,
                                                                de.polyas.core3.open.cred.CredTool::$idCol))<<SC>>)
                             & ((  \forall i#48;
                                     (     (leq(Z(0(#)), i#48)
                                         & lt(i#48,
                                              seqLen(Seq::select(sv_heapAtPre_B#39,
                                                                 sv_r_3_B#37,
                                                                 org.apache.commons.csv.CSVRecord::$key_seq))))<<SC>>
                                         & inInt(i#48)
                                      ->   (java.lang.String)(any::seqGet(Seq::select(sv_heapAtPre_B#39,
                                                                                      sv_r_3_B#37,
                                                                                      org.apache.commons.csv.CSVRecord::$key_seq),
                                                                          i#48))
                                         = java.lang.String::select(sv_heapAtPre_B#39,
                                                                    sv_self_77_B#36,
                                                                    de.polyas.core3.open.cred.CredTool::$idCol)
                                      -> \exists j#49;
                                           ((  (leq(Z(0(#)), j#49)
                                             & lt(j#49,
                                                  seqLen(strContent((java.lang.String)(any::seqGet(Seq::select(sv_heapAtPre_B#39,
                                                                                                               sv_r_3_B#37,
                                                                                                               org.apache.commons.csv.CSVRecord::$value_seq),
                                                                                                   i#48))))))<<SC>>
                                             & inInt(j#49)
                                             & gt((int)(any::seqGet(strContent((java.lang.String)(any::seqGet(Seq::select(sv_heapAtPre_B#39,
                                                                                                                          sv_r_3_B#37,
                                                                                                                          org.apache.commons.csv.CSVRecord::$value_seq),
                                                                                                              i#48))),
                                                                    j#49)),
                                                  C(2(3(#)))))<<SC>>))
                                 & ((  java.lang.Object::<inv>(sv_heapAtPre_B#39,
                                                               sv_self_77_B#36)<<impl>>
                                     & ((  (!sv_r_3_B#37 = null)<<impl>>
                                         & (!sv_password_11_B#38 = null)<<impl>>)<<SC>>))<<SC>>))<<SC>>))<<SC>>))<<SC>>))<<SC>>))<<SC>>))<<SC>>)
         & {_r_3_B:=sv_r_3_B#37 || _password_11_B:=sv_password_11_B#38}
             \[{
                 exc_103_B=null;try {
                   self_77_B.processCSVRecord(_r_3_B,_password_11_B)@de.polyas.core3.open.cred.CredTool;
                 }   catch (java.lang.Throwable e) {
                   exc_103_B=e;
                 }
               }\] (  sv_selfAtPost_77_B#41 = sv_self_77_B#36
                    & sv_excAtPost_103_B#42 = exc_103_B
                    & sv_heapAtPost_B#43 = heap))
  )
  \antecedentPolarity
  \varcond (
     \notFreeIn( j#49, sv_heapAtPost_B#43),
     \notFreeIn( i#48, sv_heapAtPost_B#43),
     \notFreeIn( i#47, sv_heapAtPost_B#43),
     \notFreeIn( j#46, sv_heapAtPost_B#43),
     \notFreeIn( i#45, sv_heapAtPost_B#43),
     \notFreeIn( i#44, sv_heapAtPost_B#43),
     \notFreeIn( j#49, sv_excAtPost_103_B#42),
     \notFreeIn( i#48, sv_excAtPost_103_B#42),
     \notFreeIn( i#47, sv_excAtPost_103_B#42),
     \notFreeIn( j#46, sv_excAtPost_103_B#42),
     \notFreeIn( i#45, sv_excAtPost_103_B#42),
     \notFreeIn( i#44, sv_excAtPost_103_B#42),
     \notFreeIn( j#49, sv_selfAtPost_77_B#41),
     \notFreeIn( i#48, sv_selfAtPost_77_B#41),
     \notFreeIn( i#47, sv_selfAtPost_77_B#41),
     \notFreeIn( j#46, sv_selfAtPost_77_B#41),
     \notFreeIn( i#45, sv_selfAtPost_77_B#41),
     \notFreeIn( i#44, sv_selfAtPost_77_B#41),
     \notFreeIn( j#49, sv_password_11_B#38),
     \notFreeIn( i#48, sv_password_11_B#38),
     \notFreeIn( i#47, sv_password_11_B#38),
     \notFreeIn( j#46, sv_password_11_B#38),
     \notFreeIn( i#45, sv_password_11_B#38),
     \notFreeIn( i#44, sv_password_11_B#38),
     \notFreeIn( j#49, sv_r_3_B#37),
     \notFreeIn( i#48, sv_r_3_B#37),
     \notFreeIn( i#47, sv_r_3_B#37),
     \notFreeIn( j#46, sv_r_3_B#37),
     \notFreeIn( i#45, sv_r_3_B#37),
     \notFreeIn( i#44, sv_r_3_B#37),
     \notFreeIn( j#49, sv_self_77_B#36),
     \notFreeIn( i#48, sv_self_77_B#36),
     \notFreeIn( i#47, sv_self_77_B#36),
     \notFreeIn( j#46, sv_self_77_B#36),
     \notFreeIn( i#45, sv_self_77_B#36),
     \notFreeIn( i#44, sv_self_77_B#36),
     \notFreeIn( j#49, sv_heapAtPre_B#39),
     \notFreeIn( i#48, sv_heapAtPre_B#39),
     \notFreeIn( i#47, sv_heapAtPre_B#39),
     \notFreeIn( j#46, sv_heapAtPre_B#39),
     \notFreeIn( i#45, sv_heapAtPre_B#39),
     \notFreeIn( i#44, sv_heapAtPre_B#39),
     \notFreeIn( j#49, sv_heapAtPost_A#35),
     \notFreeIn( i#48, sv_heapAtPost_A#35),
     \notFreeIn( i#47, sv_heapAtPost_A#35),
     \notFreeIn( j#46, sv_heapAtPost_A#35),
     \notFreeIn( i#45, sv_heapAtPost_A#35),
     \notFreeIn( i#44, sv_heapAtPost_A#35),
     \notFreeIn( j#49, sv_excAtPost_103_A#34),
     \notFreeIn( i#48, sv_excAtPost_103_A#34),
     \notFreeIn( i#47, sv_excAtPost_103_A#34),
     \notFreeIn( j#46, sv_excAtPost_103_A#34),
     \notFreeIn( i#45, sv_excAtPost_103_A#34),
     \notFreeIn( i#44, sv_excAtPost_103_A#34),
     \notFreeIn( j#49, sv_selfAtPost_77_A#33),
     \notFreeIn( i#48, sv_selfAtPost_77_A#33),
     \notFreeIn( i#47, sv_selfAtPost_77_A#33),
     \notFreeIn( j#46, sv_selfAtPost_77_A#33),
     \notFreeIn( i#45, sv_selfAtPost_77_A#33),
     \notFreeIn( i#44, sv_selfAtPost_77_A#33),
     \notFreeIn( j#49, sv_password_11_A#30),
     \notFreeIn( i#48, sv_password_11_A#30),
     \notFreeIn( i#47, sv_password_11_A#30),
     \notFreeIn( j#46, sv_password_11_A#30),
     \notFreeIn( i#45, sv_password_11_A#30),
     \notFreeIn( i#44, sv_password_11_A#30),
     \notFreeIn( j#49, sv_r_3_A#29),
     \notFreeIn( i#48, sv_r_3_A#29),
     \notFreeIn( i#47, sv_r_3_A#29),
     \notFreeIn( j#46, sv_r_3_A#29),
     \notFreeIn( i#45, sv_r_3_A#29),
     \notFreeIn( i#44, sv_r_3_A#29),
     \notFreeIn( j#49, sv_self_77_A#28),
     \notFreeIn( i#48, sv_self_77_A#28),
     \notFreeIn( i#47, sv_self_77_A#28),
     \notFreeIn( j#46, sv_self_77_A#28),
     \notFreeIn( i#45, sv_self_77_A#28),
     \notFreeIn( i#44, sv_self_77_A#28),
     \notFreeIn( j#49, sv_heapAtPre_A#31),
     \notFreeIn( i#48, sv_heapAtPre_A#31),
     \notFreeIn( i#47, sv_heapAtPre_A#31),
     \notFreeIn( j#46, sv_heapAtPre_A#31),
     \notFreeIn( i#45, sv_heapAtPre_A#31),
     \notFreeIn( i#44, sv_heapAtPre_A#31)
  )
  \replacewith ( false )
  \heuristics ( concrete )
};

Use_information_flow_contract_for_ArrayList_1695163498_1 {
  \schemaVar \term Heap find_heap#30;
  \schemaVar \term java.util.ArrayList find_self_78#28;
  \schemaVar \term java.lang.Throwable find_exc_105#29;
  \schemaVar \term Heap find_heapAfter_ArrayList#31;
  \schemaVar \term Heap assumes_heap#34;
  \schemaVar \term java.util.ArrayList assumes_self_78#32;
  \schemaVar \term java.lang.Throwable assumes_exc_105#33;
  \schemaVar \term Heap assumes_heapAfter_ArrayList#35;
  
  \assumes ( RELATED_BY_ArrayList_1695163498(assumes_self_78#32,
                                             assumes_heap#34,
                                             assumes_self_78#32,
                                             assumes_exc_105#33,
                                             assumes_heapAfter_ArrayList#35)
            ⟹
             
  )
  \find (
    RELATED_BY_ArrayList_1695163498(find_self_78#28,
                                    find_heap#30,
                                    find_self_78#28,
                                    find_exc_105#29,
                                    find_heapAfter_ArrayList#31)
  )
  \antecedentPolarity
  \replacewith (
    RELATED_BY_ArrayList_1695163498(find_self_78#28,
                                    find_heap#30,
                                    find_self_78#28,
                                    find_exc_105#29,
                                    find_heapAfter_ArrayList#31)
  )
  \add ( (  find_self_78#28 = assumes_self_78#32
          &   Seq::select(find_heapAfter_ArrayList#31,
                          find_self_78#28,
                          java.util.Collection::$seq)
            = Seq::select(assumes_heapAfter_ArrayList#35,
                          assumes_self_78#32,
                          java.util.Collection::$seq))<<postCondition>>
        ⟹
         
  )
  \heuristics ( information_flow_contract_appl )
};

Use_information_flow_contract_for_iterator_1422982459_1 {
  \schemaVar \term Heap find_heap#39;
  \schemaVar \term java.util.ArrayList find_a_1#36;
  \schemaVar \term java.util.Collection.CollectionIterator find_result_89#37;
  \schemaVar \term java.lang.Throwable find_exc_106#38;
  \schemaVar \term Heap find_heapAfter_iterator#40;
  \schemaVar \term Heap assumes_heap#44;
  \schemaVar \term java.util.ArrayList assumes_a_1#41;
  \schemaVar \term java.util.Collection.CollectionIterator assumes_result_89#42;
  \schemaVar \term java.lang.Throwable assumes_exc_106#43;
  \schemaVar \term Heap assumes_heapAfter_iterator#45;
  
  \assumes ( RELATED_BY_iterator_1422982459(assumes_a_1#41,
                                            assumes_heap#44,
                                            assumes_a_1#41,
                                            assumes_result_89#42,
                                            assumes_exc_106#43,
                                            assumes_heapAfter_iterator#45)
            ⟹
             
  )
  \find (
    RELATED_BY_iterator_1422982459(find_a_1#36,
                                   find_heap#39,
                                   find_a_1#36,
                                   find_result_89#37,
                                   find_exc_106#38,
                                   find_heapAfter_iterator#40)
  )
  \antecedentPolarity
  \replacewith (
    RELATED_BY_iterator_1422982459(find_a_1#36,
                                   find_heap#39,
                                   find_a_1#36,
                                   find_result_89#37,
                                   find_exc_106#38,
                                   find_heapAfter_iterator#40)
  )
  \add (      java.lang.Object::<inv>(find_heap#39, find_a_1#36)<<impl>>
            & java.lang.Object::<inv>(assumes_heap#44, assumes_a_1#41)<<impl>>
         ->   (     Seq::select(find_heap#39,
                                find_a_1#36,
                                java.util.Collection::$seq)
                  = Seq::select(assumes_heap#44,
                                assumes_a_1#41,
                                java.util.Collection::$seq)
               -> (  Seq::select(find_heapAfter_iterator#40,
                                 find_result_89#37,
                                 java.util.Iterator::$seq)
                   = Seq::select(assumes_heapAfter_iterator#45,
                                 assumes_result_89#42,
                                 java.util.Iterator::$seq))<<postCondition>>)
            & (  int::select(find_heapAfter_iterator#40,
                             find_result_89#37,
                             java.util.Iterator::$index)
               = int::select(assumes_heapAfter_iterator#45,
                             assumes_result_89#42,
                             java.util.Iterator::$index))<<postCondition>>
        ⟹
         
  )
  \heuristics ( information_flow_contract_appl )
};

Use_information_flow_contract_for_hasNext_608742876 {
  \schemaVar \term java.util.Iterator find_it#52;
  \schemaVar \term boolean find_result_90#53;
  \schemaVar \term java.lang.Throwable find_exc_107#54;
  \schemaVar \term Heap find_heap#55;
  \schemaVar \term java.util.Iterator assumes_it#56;
  \schemaVar \term boolean assumes_result_90#57;
  \schemaVar \term java.lang.Throwable assumes_exc_107#58;
  \schemaVar \term Heap assumes_heap#59;
  
  \assumes ( RELATED_BY_hasNext_608742876(assumes_it#56,
                                          assumes_heap#59,
                                          assumes_it#56,
                                          assumes_result_90#57,
                                          assumes_exc_107#58,
                                          assumes_heap#59)
            ⟹
             
  )
  \find (
    RELATED_BY_hasNext_608742876(find_it#52,
                                 find_heap#55,
                                 find_it#52,
                                 find_result_90#53,
                                 find_exc_107#54,
                                 find_heap#55)
  )
  \antecedentPolarity
  \replacewith (
    RELATED_BY_hasNext_608742876(find_it#52,
                                 find_heap#55,
                                 find_it#52,
                                 find_result_90#53,
                                 find_exc_107#54,
                                 find_heap#55)
  )
  \add (      java.lang.Object::<inv>(find_heap#55, find_it#52)<<impl>>
            & java.lang.Object::<inv>(assumes_heap#59, assumes_it#56)<<impl>>
         ->     seqLen(Seq::select(find_heap#55,
                                   find_it#52,
                                   java.util.Iterator::$seq))
              = seqLen(Seq::select(assumes_heap#59,
                                   assumes_it#56,
                                   java.util.Iterator::$seq))
            &   int::select(find_heap#55,
                            find_it#52,
                            java.util.Iterator::$index)
              = int::select(assumes_heap#59,
                            assumes_it#56,
                            java.util.Iterator::$index)
         -> (find_result_90#53 = assumes_result_90#57)<<postCondition>>
        ⟹
         
  )
  \heuristics ( information_flow_contract_appl )
};

Use_information_flow_contract_for_NullPointerException_1821935366 {
  \schemaVar \term Heap find_heap#64;
  \schemaVar \term java.lang.NullPointerException find_self_79#62;
  \schemaVar \term java.lang.Throwable find_exc_108#63;
  \schemaVar \term Heap find_heapAfter_NullPointerException#65;
  \schemaVar \term Heap assumes_heap#68;
  \schemaVar \term java.lang.NullPointerException assumes_self_79#66;
  \schemaVar \term java.lang.Throwable assumes_exc_108#67;
  \schemaVar \term Heap assumes_heapAfter_NullPointerException#69;
  
  \assumes ( RELATED_BY_NullPointerException_1821935366(assumes_self_79#66,
                                                        assumes_heap#68,
                                                        assumes_self_79#66,
                                                        assumes_exc_108#67,
                                                        assumes_heapAfter_NullPointerException#69)
            ⟹
             
  )
  \find (
    RELATED_BY_NullPointerException_1821935366(find_self_79#62,
                                               find_heap#64,
                                               find_self_79#62,
                                               find_exc_108#63,
                                               find_heapAfter_NullPointerException#65)
  )
  \antecedentPolarity
  \replacewith (
    RELATED_BY_NullPointerException_1821935366(find_self_79#62,
                                               find_heap#64,
                                               find_self_79#62,
                                               find_exc_108#63,
                                               find_heapAfter_NullPointerException#65)
  )
  \add (true ⟹  )
  \heuristics ( information_flow_contract_appl )
};

Use_information_flow_contract_for_add_857115291 {
  \schemaVar \term java.lang.String find_var_1#71;
  \schemaVar \term Heap find_heap#74;
  \schemaVar \term java.util.ArrayList find_var#70;
  \schemaVar \term boolean find_result_91#72;
  \schemaVar \term java.lang.Throwable find_exc_108#73;
  \schemaVar \term Heap find_heapAfter_add#75;
  \schemaVar \term java.lang.String assumes_var_1#77;
  \schemaVar \term Heap assumes_heap#80;
  \schemaVar \term java.util.ArrayList assumes_var#76;
  \schemaVar \term boolean assumes_result_91#78;
  \schemaVar \term java.lang.Throwable assumes_exc_108#79;
  \schemaVar \term Heap assumes_heapAfter_add#81;
  
  \assumes ( RELATED_BY_add_857115291(assumes_var#76,
                                      assumes_var_1#77,
                                      assumes_heap#80,
                                      assumes_var#76,
                                      assumes_result_91#78,
                                      assumes_exc_108#79,
                                      assumes_heapAfter_add#81)
            ⟹
             
  )
  \find (
    RELATED_BY_add_857115291(find_var#70,
                             find_var_1#71,
                             find_heap#74,
                             find_var#70,
                             find_result_91#72,
                             find_exc_108#73,
                             find_heapAfter_add#75)
  )
  \antecedentPolarity
  \replacewith (
    RELATED_BY_add_857115291(find_var#70,
                             find_var_1#71,
                             find_heap#74,
                             find_var#70,
                             find_result_91#72,
                             find_exc_108#73,
                             find_heapAfter_add#75)
  )
  \add (      (java.lang.Object::<inv>(find_heap#74, find_var#70)<<impl>>
            & (!(find_var_1#71 = null)<<origin("requires @ file Collection.java @ line 28","[]")>>)<<impl,
                                                                                                     origin("requires @ file Collection.java @ line 28","[]")>>)<<SC>>
            & ((  java.lang.Object::<inv>(assumes_heap#80, assumes_var#76)<<impl>>
                & (!(assumes_var_1#77 = null)<<origin("requires @ file Collection.java @ line 28","[]")>>)<<impl,
                                                                                                            origin("requires @ file Collection.java @ line 28","[]")>>)<<SC>>)
         ->     Seq::select(find_heap#74,
                            find_var#70,
                            java.util.Collection::$seq)
              = Seq::select(assumes_heap#80,
                            assumes_var#76,
                            java.util.Collection::$seq)
            & find_var_1#71 = assumes_var_1#77
         -> (  Seq::select(find_heapAfter_add#75,
                           find_var#70,
                           java.util.Collection::$seq)
             = Seq::select(assumes_heapAfter_add#81,
                           assumes_var#76,
                           java.util.Collection::$seq))<<postCondition>>
        ⟹
         
  )
  \heuristics ( information_flow_contract_appl )
};

Use_information_flow_contract_for_add_857115291_0 {
  \schemaVar \term java.lang.String find_var_3#85;
  \schemaVar \term Heap find_heap#88;
  \schemaVar \term java.util.ArrayList find_var_2#84;
  \schemaVar \term boolean find_result_92#86;
  \schemaVar \term java.lang.Throwable find_exc_109#87;
  \schemaVar \term Heap find_heapAfter_add_0#89;
  \schemaVar \term java.lang.String assumes_var_3#91;
  \schemaVar \term Heap assumes_heap#94;
  \schemaVar \term java.util.ArrayList assumes_var_2#90;
  \schemaVar \term boolean assumes_result_92#92;
  \schemaVar \term java.lang.Throwable assumes_exc_109#93;
  \schemaVar \term Heap assumes_heapAfter_add_0#95;
  
  \assumes ( RELATED_BY_add_857115291(assumes_var_2#90,
                                      assumes_var_3#91,
                                      assumes_heap#94,
                                      assumes_var_2#90,
                                      assumes_result_92#92,
                                      assumes_exc_109#93,
                                      assumes_heapAfter_add_0#95)
            ⟹
             
  )
  \find (
    RELATED_BY_add_857115291(find_var_2#84,
                             find_var_3#85,
                             find_heap#88,
                             find_var_2#84,
                             find_result_92#86,
                             find_exc_109#87,
                             find_heapAfter_add_0#89)
  )
  \antecedentPolarity
  \replacewith (
    RELATED_BY_add_857115291(find_var_2#84,
                             find_var_3#85,
                             find_heap#88,
                             find_var_2#84,
                             find_result_92#86,
                             find_exc_109#87,
                             find_heapAfter_add_0#89)
  )
  \add (      (java.lang.Object::<inv>(find_heap#88, find_var_2#84)<<impl>>
            & (!(find_var_3#85 = null)<<origin("requires @ file Collection.java @ line 28","[]")>>)<<impl,
                                                                                                     origin("requires @ file Collection.java @ line 28","[]")>>)<<SC>>
            & ((  java.lang.Object::<inv>(assumes_heap#94, assumes_var_2#90)<<impl>>
                & (!(assumes_var_3#91 = null)<<origin("requires @ file Collection.java @ line 28","[]")>>)<<impl,
                                                                                                            origin("requires @ file Collection.java @ line 28","[]")>>)<<SC>>)
         ->     Seq::select(find_heap#88,
                            find_var_2#84,
                            java.util.Collection::$seq)
              = Seq::select(assumes_heap#94,
                            assumes_var_2#90,
                            java.util.Collection::$seq)
            & find_var_3#85 = assumes_var_3#91
         -> (  Seq::select(find_heapAfter_add_0#89,
                           find_var_2#84,
                           java.util.Collection::$seq)
             = Seq::select(assumes_heapAfter_add_0#95,
                           assumes_var_2#90,
                           java.util.Collection::$seq))<<postCondition>>
        ⟹
         
  )
  \heuristics ( information_flow_contract_appl )
};

Use_information_flow_contract_for_hasNext_608742876_0 {
  \schemaVar \term java.util.Iterator find_it#96;
  \schemaVar \term boolean find_result_90#97;
  \schemaVar \term java.lang.Throwable find_exc_108#98;
  \schemaVar \term Heap find_heap#99;
  \schemaVar \term java.util.Iterator assumes_it#100;
  \schemaVar \term boolean assumes_result_90#101;
  \schemaVar \term java.lang.Throwable assumes_exc_108#102;
  \schemaVar \term Heap assumes_heap#103;
  
  \assumes ( RELATED_BY_hasNext_608742876(assumes_it#100,
                                          assumes_heap#103,
                                          assumes_it#100,
                                          assumes_result_90#101,
                                          assumes_exc_108#102,
                                          assumes_heap#103)
            ⟹
             
  )
  \find (
    RELATED_BY_hasNext_608742876(find_it#96,
                                 find_heap#99,
                                 find_it#96,
                                 find_result_90#97,
                                 find_exc_108#98,
                                 find_heap#99)
  )
  \antecedentPolarity
  \replacewith (
    RELATED_BY_hasNext_608742876(find_it#96,
                                 find_heap#99,
                                 find_it#96,
                                 find_result_90#97,
                                 find_exc_108#98,
                                 find_heap#99)
  )
  \add (      java.lang.Object::<inv>(find_heap#99, find_it#96)<<impl>>
            & java.lang.Object::<inv>(assumes_heap#103, assumes_it#100)<<impl>>
         ->     seqLen(Seq::select(find_heap#99,
                                   find_it#96,
                                   java.util.Iterator::$seq))
              = seqLen(Seq::select(assumes_heap#103,
                                   assumes_it#100,
                                   java.util.Iterator::$seq))
            &   int::select(find_heap#99,
                            find_it#96,
                            java.util.Iterator::$index)
              = int::select(assumes_heap#103,
                            assumes_it#100,
                            java.util.Iterator::$index)
         -> (find_result_90#97 = assumes_result_90#101)<<postCondition>>
        ⟹
         
  )
  \heuristics ( information_flow_contract_appl )
};

Use_information_flow_contract_for_hasNext_608742876_1 {
  \schemaVar \term java.util.Iterator find_it#104;
  \schemaVar \term boolean find_result_91#105;
  \schemaVar \term java.lang.Throwable find_exc_109#106;
  \schemaVar \term Heap find_heap#107;
  \schemaVar \term java.util.Iterator assumes_it#108;
  \schemaVar \term boolean assumes_result_91#109;
  \schemaVar \term java.lang.Throwable assumes_exc_109#110;
  \schemaVar \term Heap assumes_heap#111;
  
  \assumes ( RELATED_BY_hasNext_608742876(assumes_it#108,
                                          assumes_heap#111,
                                          assumes_it#108,
                                          assumes_result_91#109,
                                          assumes_exc_109#110,
                                          assumes_heap#111)
            ⟹
             
  )
  \find (
    RELATED_BY_hasNext_608742876(find_it#104,
                                 find_heap#107,
                                 find_it#104,
                                 find_result_91#105,
                                 find_exc_109#106,
                                 find_heap#107)
  )
  \antecedentPolarity
  \replacewith (
    RELATED_BY_hasNext_608742876(find_it#104,
                                 find_heap#107,
                                 find_it#104,
                                 find_result_91#105,
                                 find_exc_109#106,
                                 find_heap#107)
  )
  \add (      java.lang.Object::<inv>(find_heap#107, find_it#104)<<impl>>
            & java.lang.Object::<inv>(assumes_heap#111, assumes_it#108)<<impl>>
         ->     seqLen(Seq::select(find_heap#107,
                                   find_it#104,
                                   java.util.Iterator::$seq))
              = seqLen(Seq::select(assumes_heap#111,
                                   assumes_it#108,
                                   java.util.Iterator::$seq))
            &   int::select(find_heap#107,
                            find_it#104,
                            java.util.Iterator::$index)
              = int::select(assumes_heap#111,
                            assumes_it#108,
                            java.util.Iterator::$index)
         -> (find_result_91#105 = assumes_result_91#109)<<postCondition>>
        ⟹
         
  )
  \heuristics ( information_flow_contract_appl )
};

Use_information_flow_contract_for_next_1806066688 {
  \schemaVar \term Heap find_heap#119;
  \schemaVar \term java.util.Iterator find_it#116;
  \schemaVar \term java.lang.Object find_result_92#117;
  \schemaVar \term java.lang.Throwable find_exc_110#118;
  \schemaVar \term Heap find_heapAfter_next#120;
  \schemaVar \term Heap assumes_heap#124;
  \schemaVar \term java.util.Iterator assumes_it#121;
  \schemaVar \term java.lang.Object assumes_result_92#122;
  \schemaVar \term java.lang.Throwable assumes_exc_110#123;
  \schemaVar \term Heap assumes_heapAfter_next#125;
  
  \assumes ( RELATED_BY_next_1806066688(assumes_it#121,
                                        assumes_heap#124,
                                        assumes_it#121,
                                        assumes_result_92#122,
                                        assumes_exc_110#123,
                                        assumes_heapAfter_next#125)
            ⟹
             
  )
  \find (
    RELATED_BY_next_1806066688(find_it#116,
                               find_heap#119,
                               find_it#116,
                               find_result_92#117,
                               find_exc_110#118,
                               find_heapAfter_next#120)
  )
  \antecedentPolarity
  \replacewith (
    RELATED_BY_next_1806066688(find_it#116,
                               find_heap#119,
                               find_it#116,
                               find_result_92#117,
                               find_exc_110#118,
                               find_heapAfter_next#120)
  )
  \add (      java.lang.Object::<inv>(find_heap#119, find_it#116)<<impl>>
            & java.lang.Object::<inv>(assumes_heap#124, assumes_it#121)<<impl>>
         ->     Seq::select(find_heap#119,
                            find_it#116,
                            java.util.Iterator::$seq)
              = Seq::select(assumes_heap#124,
                            assumes_it#121,
                            java.util.Iterator::$seq)
            &   int::select(find_heap#119,
                            find_it#116,
                            java.util.Iterator::$index)
              = int::select(assumes_heap#124,
                            assumes_it#121,
                            java.util.Iterator::$index)
         -> (find_result_92#117 = assumes_result_92#122)<<postCondition>>
        ⟹
         
  )
  \heuristics ( information_flow_contract_appl )
};

Use_information_flow_contract_for_get_1066055272_0 {
  \schemaVar \term java.lang.String find_var_3#127;
  \schemaVar \term org.apache.commons.csv.CSVRecord find_var_2#126;
  \schemaVar \term java.lang.String find_result_93#128;
  \schemaVar \term java.lang.Throwable find_exc_111#129;
  \schemaVar \term Heap find_heap#130;
  \schemaVar \term java.lang.String assumes_var_3#132;
  \schemaVar \term org.apache.commons.csv.CSVRecord assumes_var_2#131;
  \schemaVar \term java.lang.String assumes_result_93#133;
  \schemaVar \term java.lang.Throwable assumes_exc_111#134;
  \schemaVar \term Heap assumes_heap#135;
  \schemaVar \variables int i#137;
  
  \assumes ( RELATED_BY_get_1066055272(assumes_var_2#131,
                                       assumes_var_3#132,
                                       assumes_heap#135,
                                       assumes_var_2#131,
                                       assumes_result_93#133,
                                       assumes_exc_111#134,
                                       assumes_heap#135)
            ⟹
             
  )
  \find (
    RELATED_BY_get_1066055272(find_var_2#126,
                              find_var_3#127,
                              find_heap#130,
                              find_var_2#126,
                              find_result_93#128,
                              find_exc_111#129,
                              find_heap#130)
  )
  \antecedentPolarity
  \varcond (
     \notFreeIn( i#137, find_exc_111#129),
     \notFreeIn( i#137, find_result_93#128),
     \notFreeIn( i#137, find_heap#130),
     \notFreeIn( i#137, find_var_3#127),
     \notFreeIn( i#137, find_var_2#126),
     \notFreeIn( i#137, assumes_exc_111#134),
     \notFreeIn( i#137, assumes_result_93#133),
     \notFreeIn( i#137, assumes_heap#135),
     \notFreeIn( i#137, assumes_var_3#132),
     \notFreeIn( i#137, assumes_var_2#131)
  )
  \replacewith (
    RELATED_BY_get_1066055272(find_var_2#126,
                              find_var_3#127,
                              find_heap#130,
                              find_var_2#126,
                              find_result_93#128,
                              find_exc_111#129,
                              find_heap#130)
  )
  \add (      ((\exists i#137;
                  ((  ((leq(Z(0(#)), i#137)<<origin("requires @ file CSVRecord.java @ line 13","[]")>>
                    & lt(i#137,
                         seqLen(Seq::select(find_heap#130,
                                            find_var_2#126,
                                            org.apache.commons.csv.CSVRecord::$key_seq)))<<origin("requires @ file CSVRecord.java @ line 13","[]")>>)<<SC,
                                                                                                                                                       origin("requires @ file CSVRecord.java @ line 13","[]")>>
                    & inInt(i#137)<<origin("requires @ file CSVRecord.java @ line 13","[]")>>)<<origin("requires @ file CSVRecord.java @ line 13","[]")>>
                    & (  (java.lang.String)(any::seqGet(Seq::select(find_heap#130,
                                                                    find_var_2#126,
                                                                    org.apache.commons.csv.CSVRecord::$key_seq),
                                                        i#137))
                       = find_var_3#127)<<origin("requires @ file CSVRecord.java @ line 13","[]")>>)<<SC,
                                                                                                      origin("requires @ file CSVRecord.java @ line 13","[]")>>))<<origin("requires @ file CSVRecord.java @ line 13","[]")>>
            & ((  java.lang.Object::<inv>(find_heap#130, find_var_2#126)<<impl>>
                & (!(find_var_3#127 = null)<<origin("requires @ file CSVRecord.java @ line 18","[]")>>)<<impl,
                                                                                                         origin("requires @ file CSVRecord.java @ line 18","[]")>>)<<SC>>))<<SC>>
            & ((  (\exists i#137;
                     ((  ((leq(Z(0(#)), i#137)<<origin("requires @ file CSVRecord.java @ line 13","[]")>>
                       & lt(i#137,
                            seqLen(Seq::select(assumes_heap#135,
                                               assumes_var_2#131,
                                               org.apache.commons.csv.CSVRecord::$key_seq)))<<origin("requires @ file CSVRecord.java @ line 13","[]")>>)<<SC,
                                                                                                                                                          origin("requires @ file CSVRecord.java @ line 13","[]")>>
                       & inInt(i#137)<<origin("requires @ file CSVRecord.java @ line 13","[]")>>)<<origin("requires @ file CSVRecord.java @ line 13","[]")>>
                       & (  (java.lang.String)(any::seqGet(Seq::select(assumes_heap#135,
                                                                       assumes_var_2#131,
                                                                       org.apache.commons.csv.CSVRecord::$key_seq),
                                                           i#137))
                          = assumes_var_3#132)<<origin("requires @ file CSVRecord.java @ line 13","[]")>>)<<SC,
                                                                                                            origin("requires @ file CSVRecord.java @ line 13","[]")>>))<<origin("requires @ file CSVRecord.java @ line 13","[]")>>
                & ((  java.lang.Object::<inv>(assumes_heap#135,
                                              assumes_var_2#131)<<impl>>
                    & (!(assumes_var_3#132 = null)<<origin("requires @ file CSVRecord.java @ line 18","[]")>>)<<impl,
                                                                                                                origin("requires @ file CSVRecord.java @ line 18","[]")>>)<<SC>>))<<SC>>)
         -> find_var_3#127 = assumes_var_3#132
         -> (find_result_93#128 = assumes_result_93#133)<<postCondition>>
        ⟹
         
  )
  \heuristics ( information_flow_contract_appl )
};

Use_information_flow_contract_for_add_857115291_1 {
  \schemaVar \term java.lang.String find_var_1#139;
  \schemaVar \term Heap find_heap#142;
  \schemaVar \term java.util.ArrayList find_var#138;
  \schemaVar \term boolean find_result_94#140;
  \schemaVar \term java.lang.Throwable find_exc_112#141;
  \schemaVar \term Heap find_heapAfter_add#143;
  \schemaVar \term java.lang.String assumes_var_1#145;
  \schemaVar \term Heap assumes_heap#148;
  \schemaVar \term java.util.ArrayList assumes_var#144;
  \schemaVar \term boolean assumes_result_94#146;
  \schemaVar \term java.lang.Throwable assumes_exc_112#147;
  \schemaVar \term Heap assumes_heapAfter_add#149;
  
  \assumes ( RELATED_BY_add_857115291(assumes_var#144,
                                      assumes_var_1#145,
                                      assumes_heap#148,
                                      assumes_var#144,
                                      assumes_result_94#146,
                                      assumes_exc_112#147,
                                      assumes_heapAfter_add#149)
            ⟹
             
  )
  \find (
    RELATED_BY_add_857115291(find_var#138,
                             find_var_1#139,
                             find_heap#142,
                             find_var#138,
                             find_result_94#140,
                             find_exc_112#141,
                             find_heapAfter_add#143)
  )
  \antecedentPolarity
  \replacewith (
    RELATED_BY_add_857115291(find_var#138,
                             find_var_1#139,
                             find_heap#142,
                             find_var#138,
                             find_result_94#140,
                             find_exc_112#141,
                             find_heapAfter_add#143)
  )
  \add (      (java.lang.Object::<inv>(find_heap#142, find_var#138)<<impl>>
            & (!(find_var_1#139 = null)<<origin("requires @ file Collection.java @ line 28","[]")>>)<<impl,
                                                                                                      origin("requires @ file Collection.java @ line 28","[]")>>)<<SC>>
            & ((  java.lang.Object::<inv>(assumes_heap#148, assumes_var#144)<<impl>>
                & (!(assumes_var_1#145 = null)<<origin("requires @ file Collection.java @ line 28","[]")>>)<<impl,
                                                                                                             origin("requires @ file Collection.java @ line 28","[]")>>)<<SC>>)
         ->     Seq::select(find_heap#142,
                            find_var#138,
                            java.util.Collection::$seq)
              = Seq::select(assumes_heap#148,
                            assumes_var#144,
                            java.util.Collection::$seq)
            & find_var_1#139 = assumes_var_1#145
         -> (  Seq::select(find_heapAfter_add#143,
                           find_var#138,
                           java.util.Collection::$seq)
             = Seq::select(assumes_heapAfter_add#149,
                           assumes_var#144,
                           java.util.Collection::$seq))<<postCondition>>
        ⟹
         
  )
  \heuristics ( information_flow_contract_appl )
};

unfold_computed_formula_0_of_Block_Contract_274_processCSVRecord_1352071233 {
  \schemaVar \term Heap sv_heap_Before_BLOCK_1_A#154;
  \schemaVar \term de.polyas.core3.open.cred.CredTool sv_self_77_After_BLOCK_1_A#155;
  \schemaVar \term de.polyas.core3.open.cred.CredTool sv_self_77_A_2#151;
  \schemaVar \term de.polyas.core3.open.cred.CredentialGenerator.GeneratedDataForVoter sv_dataForVoter_A_0#152;
  \schemaVar \term org.apache.commons.csv.CSVRecord sv__r_3_A_1#153;
  \schemaVar \term java.lang.Throwable sv_exc#7_After_BLOCK_A#156;
  \schemaVar \term Heap sv_heap_After_BLOCK_A#157;
  \schemaVar \term Heap sv_heap_Before_BLOCK_1_B#161;
  \schemaVar \term de.polyas.core3.open.cred.CredTool sv_self_77_After_BLOCK_1_B#162;
  \schemaVar \term de.polyas.core3.open.cred.CredTool sv_self_77_B_2#158;
  \schemaVar \term de.polyas.core3.open.cred.CredentialGenerator.GeneratedDataForVoter sv_dataForVoter_B_0#159;
  \schemaVar \term org.apache.commons.csv.CSVRecord sv__r_3_B_1#160;
  \schemaVar \term java.lang.Throwable sv_exc#7_After_BLOCK_B#163;
  \schemaVar \term Heap sv_heap_After_BLOCK_B#164;
  
  \find (
      {heap:=sv_heap_Before_BLOCK_1_A#154}
        (  wellFormed(sv_heap_Before_BLOCK_1_A#154)
         & heap = sv_heap_Before_BLOCK_1_A#154
         & !sv_self_77_A_2#151 = null
         &   boolean::select(heap,
                             sv_self_77_A_2#151,
                             java.lang.Object::<created>)
           = TRUE
         &   de.polyas.core3.open.cred.CredTool::exactInstance(sv_self_77_A_2#151)
           = TRUE
         & (  ((  sv_dataForVoter_A_0#152 = null
                |   boolean::select(sv_heap_Before_BLOCK_1_A#154,
                                    sv_dataForVoter_A_0#152,
                                    java.lang.Object::<created>)
                  = TRUE)<<SC>>)
            & ((  sv__r_3_A_1#153 = null
                |   boolean::select(sv_heap_Before_BLOCK_1_A#154,
                                    sv__r_3_A_1#153,
                                    java.lang.Object::<created>)
                  = TRUE)<<SC>>))
         & {self_77:=sv_self_77_A_2#151
            || (dataForVoter:=sv_dataForVoter_A_0#152
            || _r_3:=sv__r_3_A_1#153)}
             \[{method-frame(source=processCSVRecord(org.apache.commons.csv.CSVRecord, java.lang.String)@de.polyas.core3.open.cred.CredTool,this=self_77): {java.lang.Throwable exc#7 = null;breakOut:try { {
                       polyasVals=new ArrayList ();
                       Iterator it = this.inputColsForPolyas.iterator();
                           while ( it.hasNext() ) {polyasVals.add(_r_3.get((String)it.next()));
                       }polyasVals.add(dataForVoter.hashedPassword);polyasVals.add(dataForVoter.publicSigningKey);
                     }
                   }     catch (java.lang.Exception e) {
                     exc#7=e;
                   }
                 }
               }\] (  sv_self_77_After_BLOCK_1_A#155 = sv_self_77_A_2#151
                    & sv_dataForVoter_A_0#152 = dataForVoter
                    & sv__r_3_A_1#153 = _r_3
                    & sv_exc#7_After_BLOCK_A#156 = exc#7_A
                    & sv_heap_After_BLOCK_A#157 = heap))
    & {heap:=sv_heap_Before_BLOCK_1_B#161}
        (  wellFormed(sv_heap_Before_BLOCK_1_B#161)
         & heap = sv_heap_Before_BLOCK_1_B#161
         & !sv_self_77_B_2#158 = null
         &   boolean::select(heap,
                             sv_self_77_B_2#158,
                             java.lang.Object::<created>)
           = TRUE
         &   de.polyas.core3.open.cred.CredTool::exactInstance(sv_self_77_B_2#158)
           = TRUE
         & (  ((  sv_dataForVoter_B_0#159 = null
                |   boolean::select(sv_heap_Before_BLOCK_1_B#161,
                                    sv_dataForVoter_B_0#159,
                                    java.lang.Object::<created>)
                  = TRUE)<<SC>>)
            & ((  sv__r_3_B_1#160 = null
                |   boolean::select(sv_heap_Before_BLOCK_1_B#161,
                                    sv__r_3_B_1#160,
                                    java.lang.Object::<created>)
                  = TRUE)<<SC>>))
         & {self_77:=sv_self_77_B_2#158
            || (dataForVoter:=sv_dataForVoter_B_0#159
            || _r_3:=sv__r_3_B_1#160)}
             \[{method-frame(source=processCSVRecord(org.apache.commons.csv.CSVRecord, java.lang.String)@de.polyas.core3.open.cred.CredTool,this=self_77): {java.lang.Throwable exc#7 = null;breakOut:try { {
                       polyasVals=new ArrayList ();
                       Iterator it = this.inputColsForPolyas.iterator();
                           while ( it.hasNext() ) {polyasVals.add(_r_3.get((String)it.next()));
                       }polyasVals.add(dataForVoter.hashedPassword);polyasVals.add(dataForVoter.publicSigningKey);
                     }
                   }     catch (java.lang.Exception e) {
                     exc#7=e;
                   }
                 }
               }\] (  sv_self_77_After_BLOCK_1_B#162 = sv_self_77_B_2#158
                    & sv_dataForVoter_B_0#159 = dataForVoter
                    & sv__r_3_B_1#160 = _r_3
                    & sv_exc#7_After_BLOCK_B#163 = exc#7_B
                    & sv_heap_After_BLOCK_B#164 = heap))
  )
  \antecedentPolarity
  \replacewith ( false )
  \heuristics ( concrete )
};

Use_information_flow_contract_for_iterator_1422982459_0 {
  \schemaVar \term Heap find_heap#144;
  \schemaVar \term java.util.ArrayList find_a_3#141;
  \schemaVar \term java.util.Collection.CollectionIterator find_result_93#142;
  \schemaVar \term java.lang.Throwable find_exc_112#143;
  \schemaVar \term Heap find_heapAfter_iterator_0#145;
  \schemaVar \term Heap assumes_heap#149;
  \schemaVar \term java.util.ArrayList assumes_a_3#146;
  \schemaVar \term java.util.Collection.CollectionIterator assumes_result_93#147;
  \schemaVar \term java.lang.Throwable assumes_exc_112#148;
  \schemaVar \term Heap assumes_heapAfter_iterator_0#150;
  
  \assumes ( RELATED_BY_iterator_1422982459(assumes_a_3#146,
                                            assumes_heap#149,
                                            assumes_a_3#146,
                                            assumes_result_93#147,
                                            assumes_exc_112#148,
                                            assumes_heapAfter_iterator_0#150)
            ⟹
             
  )
  \find (
    RELATED_BY_iterator_1422982459(find_a_3#141,
                                   find_heap#144,
                                   find_a_3#141,
                                   find_result_93#142,
                                   find_exc_112#143,
                                   find_heapAfter_iterator_0#145)
  )
  \antecedentPolarity
  \replacewith (
    RELATED_BY_iterator_1422982459(find_a_3#141,
                                   find_heap#144,
                                   find_a_3#141,
                                   find_result_93#142,
                                   find_exc_112#143,
                                   find_heapAfter_iterator_0#145)
  )
  \add (      java.lang.Object::<inv>(find_heap#144, find_a_3#141)<<impl>>
            & java.lang.Object::<inv>(assumes_heap#149, assumes_a_3#146)<<impl>>
         ->   (     Seq::select(find_heap#144,
                                find_a_3#141,
                                java.util.Collection::$seq)
                  = Seq::select(assumes_heap#149,
                                assumes_a_3#146,
                                java.util.Collection::$seq)
               -> (  Seq::select(find_heapAfter_iterator_0#145,
                                 find_result_93#142,
                                 java.util.Iterator::$seq)
                   = Seq::select(assumes_heapAfter_iterator_0#150,
                                 assumes_result_93#147,
                                 java.util.Iterator::$seq))<<postCondition>>)
            & (  int::select(find_heapAfter_iterator_0#145,
                             find_result_93#142,
                             java.util.Iterator::$index)
               = int::select(assumes_heapAfter_iterator_0#150,
                             assumes_result_93#147,
                             java.util.Iterator::$index))<<postCondition>>
        ⟹
         
  )
  \heuristics ( information_flow_contract_appl )
};

Use_information_flow_contract_for_iterator_1422982459 {
  \schemaVar \term Heap find_heap#134;
  \schemaVar \term java.util.ArrayList find_a_2#131;
  \schemaVar \term java.util.Collection.CollectionIterator find_result_92#132;
  \schemaVar \term java.lang.Throwable find_exc_111#133;
  \schemaVar \term Heap find_heapAfter_iterator#135;
  \schemaVar \term Heap assumes_heap#139;
  \schemaVar \term java.util.ArrayList assumes_a_2#136;
  \schemaVar \term java.util.Collection.CollectionIterator assumes_result_92#137;
  \schemaVar \term java.lang.Throwable assumes_exc_111#138;
  \schemaVar \term Heap assumes_heapAfter_iterator#140;
  
  \assumes ( RELATED_BY_iterator_1422982459(assumes_a_2#136,
                                            assumes_heap#139,
                                            assumes_a_2#136,
                                            assumes_result_92#137,
                                            assumes_exc_111#138,
                                            assumes_heapAfter_iterator#140)
            ⟹
             
  )
  \find (
    RELATED_BY_iterator_1422982459(find_a_2#131,
                                   find_heap#134,
                                   find_a_2#131,
                                   find_result_92#132,
                                   find_exc_111#133,
                                   find_heapAfter_iterator#135)
  )
  \antecedentPolarity
  \replacewith (
    RELATED_BY_iterator_1422982459(find_a_2#131,
                                   find_heap#134,
                                   find_a_2#131,
                                   find_result_92#132,
                                   find_exc_111#133,
                                   find_heapAfter_iterator#135)
  )
  \add (      java.lang.Object::<inv>(find_heap#134, find_a_2#131)<<impl>>
            & java.lang.Object::<inv>(assumes_heap#139, assumes_a_2#136)<<impl>>
         ->   (     Seq::select(find_heap#134,
                                find_a_2#131,
                                java.util.Collection::$seq)
                  = Seq::select(assumes_heap#139,
                                assumes_a_2#136,
                                java.util.Collection::$seq)
               -> (  Seq::select(find_heapAfter_iterator#135,
                                 find_result_92#132,
                                 java.util.Iterator::$seq)
                   = Seq::select(assumes_heapAfter_iterator#140,
                                 assumes_result_92#137,
                                 java.util.Iterator::$seq))<<postCondition>>)
            & (  int::select(find_heapAfter_iterator#135,
                             find_result_92#132,
                             java.util.Iterator::$index)
               = int::select(assumes_heapAfter_iterator#140,
                             assumes_result_92#137,
                             java.util.Iterator::$index))<<postCondition>>
        ⟹
         
  )
  \heuristics ( information_flow_contract_appl )
};

Use_information_flow_contract_for_ArrayList_1695163498_0 {
  \schemaVar \term Heap find_heap#125;
  \schemaVar \term java.util.ArrayList find_self_79#123;
  \schemaVar \term java.lang.Throwable find_exc_110#124;
  \schemaVar \term Heap find_heapAfter_ArrayList_0#126;
  \schemaVar \term Heap assumes_heap#129;
  \schemaVar \term java.util.ArrayList assumes_self_79#127;
  \schemaVar \term java.lang.Throwable assumes_exc_110#128;
  \schemaVar \term Heap assumes_heapAfter_ArrayList_0#130;
  
  \assumes ( RELATED_BY_ArrayList_1695163498(assumes_self_79#127,
                                             assumes_heap#129,
                                             assumes_self_79#127,
                                             assumes_exc_110#128,
                                             assumes_heapAfter_ArrayList_0#130)
            ⟹
             
  )
  \find (
    RELATED_BY_ArrayList_1695163498(find_self_79#123,
                                    find_heap#125,
                                    find_self_79#123,
                                    find_exc_110#124,
                                    find_heapAfter_ArrayList_0#126)
  )
  \antecedentPolarity
  \replacewith (
    RELATED_BY_ArrayList_1695163498(find_self_79#123,
                                    find_heap#125,
                                    find_self_79#123,
                                    find_exc_110#124,
                                    find_heapAfter_ArrayList_0#126)
  )
  \add ( (  find_self_79#123 = assumes_self_79#127
          &   Seq::select(find_heapAfter_ArrayList_0#126,
                          find_self_79#123,
                          java.util.Collection::$seq)
            = Seq::select(assumes_heapAfter_ArrayList_0#130,
                          assumes_self_79#127,
                          java.util.Collection::$seq))<<postCondition>>
        ⟹
         
  )
  \heuristics ( information_flow_contract_appl )
};

Use_information_flow_contract_for_ArrayList_1695163498 {
  \schemaVar \term Heap find_heap#117;
  \schemaVar \term java.util.ArrayList find_self_78#115;
  \schemaVar \term java.lang.Throwable find_exc_109#116;
  \schemaVar \term Heap find_heapAfter_ArrayList#118;
  \schemaVar \term Heap assumes_heap#121;
  \schemaVar \term java.util.ArrayList assumes_self_78#119;
  \schemaVar \term java.lang.Throwable assumes_exc_109#120;
  \schemaVar \term Heap assumes_heapAfter_ArrayList#122;
  
  \assumes ( RELATED_BY_ArrayList_1695163498(assumes_self_78#119,
                                             assumes_heap#121,
                                             assumes_self_78#119,
                                             assumes_exc_109#120,
                                             assumes_heapAfter_ArrayList#122)
            ⟹
             
  )
  \find (
    RELATED_BY_ArrayList_1695163498(find_self_78#115,
                                    find_heap#117,
                                    find_self_78#115,
                                    find_exc_109#116,
                                    find_heapAfter_ArrayList#118)
  )
  \antecedentPolarity
  \replacewith (
    RELATED_BY_ArrayList_1695163498(find_self_78#115,
                                    find_heap#117,
                                    find_self_78#115,
                                    find_exc_109#116,
                                    find_heapAfter_ArrayList#118)
  )
  \add ( (  find_self_78#115 = assumes_self_78#119
          &   Seq::select(find_heapAfter_ArrayList#118,
                          find_self_78#115,
                          java.util.Collection::$seq)
            = Seq::select(assumes_heapAfter_ArrayList#122,
                          assumes_self_78#119,
                          java.util.Collection::$seq))<<postCondition>>
        ⟹
         
  )
  \heuristics ( information_flow_contract_appl )
};

Use_information_flow_contract_for_Block_Contract_274_processCSVRecord_1352071233 {
  \schemaVar \term de.polyas.core3.open.cred.CredTool find_self_77#99;
  \schemaVar \term de.polyas.core3.open.cred.CredentialGenerator.GeneratedDataForVoter find_dataForVoter#100;
  \schemaVar \term org.apache.commons.csv.CSVRecord find__r_3#101;
  \schemaVar \term Heap find_heap_Before_BLOCK_1#103;
  \schemaVar \term de.polyas.core3.open.cred.CredTool find_self_77_After_BLOCK_1#104;
  \schemaVar \term java.lang.Throwable find_exc#7_After_BLOCK#105;
  \schemaVar \term Heap find_heap_After_BLOCK#106;
  \schemaVar \term de.polyas.core3.open.cred.CredTool assumes_self_77#107;
  \schemaVar \term de.polyas.core3.open.cred.CredentialGenerator.GeneratedDataForVoter assumes_dataForVoter#108;
  \schemaVar \term org.apache.commons.csv.CSVRecord assumes__r_3#109;
  \schemaVar \term Heap assumes_heap_Before_BLOCK_1#111;
  \schemaVar \term de.polyas.core3.open.cred.CredTool assumes_self_77_After_BLOCK_1#112;
  \schemaVar \term java.lang.Throwable assumes_exc#7_After_BLOCK#113;
  \schemaVar \term Heap assumes_heap_After_BLOCK#114;
  
  \assumes ( RELATED_BY_BLOCK_at_line_274_in_processCSVRecord_1352071233(assumes_self_77#107,
                                                                         assumes_dataForVoter#108,
                                                                         assumes__r_3#109,
                                                                         assumes_heap_Before_BLOCK_1#111,
                                                                         assumes_self_77_After_BLOCK_1#112,
                                                                         assumes_exc#7_After_BLOCK#113,
                                                                         assumes_heap_After_BLOCK#114)
            ⟹
             
  )
  \find (
    RELATED_BY_BLOCK_at_line_274_in_processCSVRecord_1352071233(find_self_77#99,
                                                                find_dataForVoter#100,
                                                                find__r_3#101,
                                                                find_heap_Before_BLOCK_1#103,
                                                                find_self_77_After_BLOCK_1#104,
                                                                find_exc#7_After_BLOCK#105,
                                                                find_heap_After_BLOCK#106)
  )
  \antecedentPolarity
  \replacewith (
    RELATED_BY_BLOCK_at_line_274_in_processCSVRecord_1352071233(find_self_77#99,
                                                                find_dataForVoter#100,
                                                                find__r_3#101,
                                                                find_heap_Before_BLOCK_1#103,
                                                                find_self_77_After_BLOCK_1#104,
                                                                find_exc#7_After_BLOCK#105,
                                                                find_heap_After_BLOCK#106)
  )
  \add (        Seq::select(find_heap_Before_BLOCK_1#103,
                            find__r_3#101,
                            org.apache.commons.csv.CSVRecord::$key_seq)
              = Seq::select(assumes_heap_Before_BLOCK_1#111,
                            assumes__r_3#109,
                            org.apache.commons.csv.CSVRecord::$key_seq)
            &   Seq::select(find_heap_Before_BLOCK_1#103,
                            find__r_3#101,
                            org.apache.commons.csv.CSVRecord::$value_seq)
              = Seq::select(assumes_heap_Before_BLOCK_1#111,
                            assumes__r_3#109,
                            org.apache.commons.csv.CSVRecord::$value_seq)
            &   Seq::select(find_heap_Before_BLOCK_1#103,
                            java.util.ArrayList::select(find_heap_Before_BLOCK_1#103,
                                                        find_self_77#99,
                                                        de.polyas.core3.open.cred.CredTool::$inputColsForPolyas),
                            java.util.Collection::$seq)
              = Seq::select(assumes_heap_Before_BLOCK_1#111,
                            java.util.ArrayList::select(assumes_heap_Before_BLOCK_1#111,
                                                        assumes_self_77#107,
                                                        de.polyas.core3.open.cred.CredTool::$inputColsForPolyas),
                            java.util.Collection::$seq)
            &   java.lang.String::select(find_heap_Before_BLOCK_1#103,
                                         find_self_77#99,
                                         de.polyas.core3.open.cred.CredTool::$idCol)
              = java.lang.String::select(assumes_heap_Before_BLOCK_1#111,
                                         assumes_self_77#107,
                                         de.polyas.core3.open.cred.CredTool::$idCol)
            &   int::select(find_heap_Before_BLOCK_1#103,
                            org.bouncycastle.math.ec.ECPoint::select(find_heap_Before_BLOCK_1#103,
                                                                     org.bouncycastle.jce.spec.ECNamedCurveParameterSpec::select(find_heap_Before_BLOCK_1#103,
                                                                                                                                 de.polyas.core3.open.crypto.groups.ECGroup::select(find_heap_Before_BLOCK_1#103,
                                                                                                                                                                                    null,
                                                                                                                                                                                    de.polyas.core3.open.cred.CredentialGenerator::$GROUP),
                                                                                                                                 de.polyas.core3.open.crypto.groups.ECGroup::$group),
                                                                     org.bouncycastle.jce.spec.ECParameterSpec::$generator),
                            org.bouncycastle.math.ec.ECPoint::$value)
              = int::select(assumes_heap_Before_BLOCK_1#111,
                            org.bouncycastle.math.ec.ECPoint::select(assumes_heap_Before_BLOCK_1#111,
                                                                     org.bouncycastle.jce.spec.ECNamedCurveParameterSpec::select(assumes_heap_Before_BLOCK_1#111,
                                                                                                                                 de.polyas.core3.open.crypto.groups.ECGroup::select(assumes_heap_Before_BLOCK_1#111,
                                                                                                                                                                                    null,
                                                                                                                                                                                    de.polyas.core3.open.cred.CredentialGenerator::$GROUP),
                                                                                                                                 de.polyas.core3.open.crypto.groups.ECGroup::$group),
                                                                     org.bouncycastle.jce.spec.ECParameterSpec::$generator),
                            org.bouncycastle.math.ec.ECPoint::$value)
            &   int::select(find_heap_Before_BLOCK_1#103,
                            org.bouncycastle.math.ec.custom.sec.SecP256K1Curve::select(find_heap_Before_BLOCK_1#103,
                                                                                       de.polyas.core3.open.crypto.groups.ECGroup::select(find_heap_Before_BLOCK_1#103,
                                                                                                                                          null,
                                                                                                                                          de.polyas.core3.open.cred.CredentialGenerator::$GROUP),
                                                                                       de.polyas.core3.open.crypto.groups.ECGroup::$curve),
                            org.bouncycastle.math.ec.ECCurve::$order)
              = int::select(assumes_heap_Before_BLOCK_1#111,
                            org.bouncycastle.math.ec.custom.sec.SecP256K1Curve::select(assumes_heap_Before_BLOCK_1#111,
                                                                                       de.polyas.core3.open.crypto.groups.ECGroup::select(assumes_heap_Before_BLOCK_1#111,
                                                                                                                                          null,
                                                                                                                                          de.polyas.core3.open.cred.CredentialGenerator::$GROUP),
                                                                                       de.polyas.core3.open.crypto.groups.ECGroup::$curve),
                            org.bouncycastle.math.ec.ECCurve::$order)
         -> (  Seq::select(find_heap_After_BLOCK#106,
                           java.util.ArrayList::select(find_heap_After_BLOCK#106,
                                                       null,
                                                       de.polyas.core3.open.cred.CredTool::$polyasVals),
                           java.util.Collection::$seq)
             = Seq::select(assumes_heap_After_BLOCK#114,
                           java.util.ArrayList::select(assumes_heap_After_BLOCK#114,
                                                       null,
                                                       de.polyas.core3.open.cred.CredTool::$polyasVals),
                           java.util.Collection::$seq))<<postCondition>>
        ⟹
         
  )
  \heuristics ( information_flow_contract_appl )
};

Use_information_flow_contract_for_Block_Contract_249_processCSVRecord_1352071233 {
  \schemaVar \term de.polyas.core3.open.cred.CredTool find_self_77#82;
  \schemaVar \term de.polyas.core3.open.cred.CredentialGenerator.GeneratedDataForVoter find_dataForVoter#83;
  \schemaVar \term org.apache.commons.csv.CSVRecord find__r_3#84;
  \schemaVar \term Heap find_heap_Before_BLOCK_0#86;
  \schemaVar \term de.polyas.core3.open.cred.CredTool find_self_77_After_BLOCK_0#87;
  \schemaVar \term java.lang.Throwable find_exc#11_After_BLOCK#88;
  \schemaVar \term Heap find_heap_After_BLOCK#89;
  \schemaVar \term de.polyas.core3.open.cred.CredTool assumes_self_77#90;
  \schemaVar \term de.polyas.core3.open.cred.CredentialGenerator.GeneratedDataForVoter assumes_dataForVoter#91;
  \schemaVar \term org.apache.commons.csv.CSVRecord assumes__r_3#92;
  \schemaVar \term Heap assumes_heap_Before_BLOCK_0#94;
  \schemaVar \term de.polyas.core3.open.cred.CredTool assumes_self_77_After_BLOCK_0#95;
  \schemaVar \term java.lang.Throwable assumes_exc#11_After_BLOCK#96;
  \schemaVar \term Heap assumes_heap_After_BLOCK#97;
  
  \assumes ( RELATED_BY_BLOCK_at_line_249_in_processCSVRecord_1352071233(assumes_self_77#90,
                                                                         assumes_dataForVoter#91,
                                                                         assumes__r_3#92,
                                                                         assumes_heap_Before_BLOCK_0#94,
                                                                         assumes_self_77_After_BLOCK_0#95,
                                                                         assumes_exc#11_After_BLOCK#96,
                                                                         assumes_heap_After_BLOCK#97)
            ⟹
             
  )
  \find (
    RELATED_BY_BLOCK_at_line_249_in_processCSVRecord_1352071233(find_self_77#82,
                                                                find_dataForVoter#83,
                                                                find__r_3#84,
                                                                find_heap_Before_BLOCK_0#86,
                                                                find_self_77_After_BLOCK_0#87,
                                                                find_exc#11_After_BLOCK#88,
                                                                find_heap_After_BLOCK#89)
  )
  \antecedentPolarity
  \replacewith (
    RELATED_BY_BLOCK_at_line_249_in_processCSVRecord_1352071233(find_self_77#82,
                                                                find_dataForVoter#83,
                                                                find__r_3#84,
                                                                find_heap_Before_BLOCK_0#86,
                                                                find_self_77_After_BLOCK_0#87,
                                                                find_exc#11_After_BLOCK#88,
                                                                find_heap_After_BLOCK#89)
  )
  \add (true ⟹  )
  \heuristics ( information_flow_contract_appl )
};

Use_information_flow_contract_for_generateDataForVoter_2065185875 {
  \schemaVar \term java.lang.String find_voterId_7#69;
  \schemaVar \term java.lang.String find__password_11#70;
  \schemaVar \term Heap find_heap#73;
  \schemaVar \term de.polyas.core3.open.cred.CredentialGenerator.GeneratedDataForVoter find_result_91#71;
  \schemaVar \term java.lang.Throwable find_exc_106#72;
  \schemaVar \term Heap find_heapAfter_generateDataForVoter#74;
  \schemaVar \term java.lang.String assumes_voterId_7#75;
  \schemaVar \term java.lang.String assumes__password_11#76;
  \schemaVar \term Heap assumes_heap#79;
  \schemaVar \term de.polyas.core3.open.cred.CredentialGenerator.GeneratedDataForVoter assumes_result_91#77;
  \schemaVar \term java.lang.Throwable assumes_exc_106#78;
  \schemaVar \term Heap assumes_heapAfter_generateDataForVoter#80;
  
  \assumes ( RELATED_BY_generateDataForVoter_2065185875(assumes_voterId_7#75,
                                                        assumes__password_11#76,
                                                        assumes_heap#79,
                                                        assumes_result_91#77,
                                                        assumes_exc_106#78,
                                                        assumes_heapAfter_generateDataForVoter#80)
            ⟹
             
  )
  \find (
    RELATED_BY_generateDataForVoter_2065185875(find_voterId_7#69,
                                               find__password_11#70,
                                               find_heap#73,
                                               find_result_91#71,
                                               find_exc_106#72,
                                               find_heapAfter_generateDataForVoter#74)
  )
  \antecedentPolarity
  \replacewith (
    RELATED_BY_generateDataForVoter_2065185875(find_voterId_7#69,
                                               find__password_11#70,
                                               find_heap#73,
                                               find_result_91#71,
                                               find_exc_106#72,
                                               find_heapAfter_generateDataForVoter#74)
  )
  \add (      (de.polyas.core3.open.cred.Crypto::<$inv>(find_heap#73)
            & ((  java.math.BigInteger::<$inv>(find_heap#73)
                & ((  de.polyas.core3.open.cred.CredentialGenerator::<$inv>(find_heap#73)<<impl>>
                    & ((  (!(find_voterId_7#69 = null)<<origin("requires @ file CredentialGenerator.java @ line 44","[]")>>)<<impl,
                                                                                                                              origin("requires @ file CredentialGenerator.java @ line 44","[]")>>
                        & (!(find__password_11#70 = null)<<origin("requires @ file CredentialGenerator.java @ line 44","[]")>>)<<impl,
                                                                                                                                 origin("requires @ file CredentialGenerator.java @ line 44","[]")>>)<<SC>>))<<SC>>))<<SC>>))<<SC>>
            & ((  de.polyas.core3.open.cred.Crypto::<$inv>(assumes_heap#79)
                & ((  java.math.BigInteger::<$inv>(assumes_heap#79)
                    & ((  de.polyas.core3.open.cred.CredentialGenerator::<$inv>(assumes_heap#79)<<impl>>
                        & ((  (!(assumes_voterId_7#75 = null)<<origin("requires @ file CredentialGenerator.java @ line 44","[]")>>)<<impl,
                                                                                                                                     origin("requires @ file CredentialGenerator.java @ line 44","[]")>>
                            & (!(assumes__password_11#76 = null)<<origin("requires @ file CredentialGenerator.java @ line 44","[]")>>)<<impl,
                                                                                                                                        origin("requires @ file CredentialGenerator.java @ line 44","[]")>>)<<SC>>))<<SC>>))<<SC>>))<<SC>>)
         ->   (   find__password_11#70 = assumes__password_11#76
               -> (  java.lang.String::select(find_heapAfter_generateDataForVoter#74,
                                              find_result_91#71,
                                              de.polyas.core3.open.cred.CredentialGenerator.GeneratedDataForVoter::$password)
                   = java.lang.String::select(assumes_heapAfter_generateDataForVoter#80,
                                              assumes_result_91#77,
                                              de.polyas.core3.open.cred.CredentialGenerator.GeneratedDataForVoter::$password))<<postCondition>>)
            & (  java.lang.String::select(find_heapAfter_generateDataForVoter#74,
                                          find_result_91#71,
                                          de.polyas.core3.open.cred.CredentialGenerator.GeneratedDataForVoter::$hashedPassword)
               = java.lang.String::select(assumes_heapAfter_generateDataForVoter#80,
                                          assumes_result_91#77,
                                          de.polyas.core3.open.cred.CredentialGenerator.GeneratedDataForVoter::$hashedPassword))<<postCondition>>
            & (       int::select(find_heap#73,
                                  org.bouncycastle.math.ec.ECPoint::select(find_heap#73,
                                                                           org.bouncycastle.jce.spec.ECNamedCurveParameterSpec::select(find_heap#73,
                                                                                                                                       de.polyas.core3.open.crypto.groups.ECGroup::select(find_heap#73,
                                                                                                                                                                                          null,
                                                                                                                                                                                          de.polyas.core3.open.cred.CredentialGenerator::$GROUP),
                                                                                                                                       de.polyas.core3.open.crypto.groups.ECGroup::$group),
                                                                           org.bouncycastle.jce.spec.ECParameterSpec::$generator),
                                  org.bouncycastle.math.ec.ECPoint::$value)
                    = int::select(assumes_heap#79,
                                  org.bouncycastle.math.ec.ECPoint::select(assumes_heap#79,
                                                                           org.bouncycastle.jce.spec.ECNamedCurveParameterSpec::select(assumes_heap#79,
                                                                                                                                       de.polyas.core3.open.crypto.groups.ECGroup::select(assumes_heap#79,
                                                                                                                                                                                          null,
                                                                                                                                                                                          de.polyas.core3.open.cred.CredentialGenerator::$GROUP),
                                                                                                                                       de.polyas.core3.open.crypto.groups.ECGroup::$group),
                                                                           org.bouncycastle.jce.spec.ECParameterSpec::$generator),
                                  org.bouncycastle.math.ec.ECPoint::$value)
                  &   int::select(find_heap#73,
                                  org.bouncycastle.math.ec.custom.sec.SecP256K1Curve::select(find_heap#73,
                                                                                             de.polyas.core3.open.crypto.groups.ECGroup::select(find_heap#73,
                                                                                                                                                null,
                                                                                                                                                de.polyas.core3.open.cred.CredentialGenerator::$GROUP),
                                                                                             de.polyas.core3.open.crypto.groups.ECGroup::$curve),
                                  org.bouncycastle.math.ec.ECCurve::$order)
                    = int::select(assumes_heap#79,
                                  org.bouncycastle.math.ec.custom.sec.SecP256K1Curve::select(assumes_heap#79,
                                                                                             de.polyas.core3.open.crypto.groups.ECGroup::select(assumes_heap#79,
                                                                                                                                                null,
                                                                                                                                                de.polyas.core3.open.cred.CredentialGenerator::$GROUP),
                                                                                             de.polyas.core3.open.crypto.groups.ECGroup::$curve),
                                  org.bouncycastle.math.ec.ECCurve::$order)
               -> (  java.lang.String::select(find_heapAfter_generateDataForVoter#74,
                                              find_result_91#71,
                                              de.polyas.core3.open.cred.CredentialGenerator.GeneratedDataForVoter::$publicSigningKey)
                   = java.lang.String::select(assumes_heapAfter_generateDataForVoter#80,
                                              assumes_result_91#77,
                                              de.polyas.core3.open.cred.CredentialGenerator.GeneratedDataForVoter::$publicSigningKey))<<postCondition>>)
        ⟹
         
  )
  \heuristics ( information_flow_contract_appl )
};

Use_information_flow_contract_for_voterIdCheck_1060056493 {
  \schemaVar \term java.lang.String find_voterId_7#56;
  \schemaVar \term Heap find_heap#59;
  \schemaVar \term de.polyas.core3.open.cred.CredTool find_self_77#55;
  \schemaVar \term boolean find_result_90#57;
  \schemaVar \term java.lang.Throwable find_exc_105#58;
  \schemaVar \term Heap find_heapAfter_voterIdCheck#60;
  \schemaVar \term java.lang.String assumes_voterId_7#62;
  \schemaVar \term Heap assumes_heap#65;
  \schemaVar \term de.polyas.core3.open.cred.CredTool assumes_self_77#61;
  \schemaVar \term boolean assumes_result_90#63;
  \schemaVar \term java.lang.Throwable assumes_exc_105#64;
  \schemaVar \term Heap assumes_heapAfter_voterIdCheck#66;
  \schemaVar \variables int i#68;
  
  \assumes ( RELATED_BY_voterIdCheck_1060056493(assumes_self_77#61,
                                                assumes_voterId_7#62,
                                                assumes_heap#65,
                                                assumes_self_77#61,
                                                assumes_result_90#63,
                                                assumes_exc_105#64,
                                                assumes_heapAfter_voterIdCheck#66)
            ⟹
             
  )
  \find (
    RELATED_BY_voterIdCheck_1060056493(find_self_77#55,
                                       find_voterId_7#56,
                                       find_heap#59,
                                       find_self_77#55,
                                       find_result_90#57,
                                       find_exc_105#58,
                                       find_heapAfter_voterIdCheck#60)
  )
  \antecedentPolarity
  \varcond (
     \notFreeIn( i#68, find_heapAfter_voterIdCheck#60),
     \notFreeIn( i#68, find_exc_105#58),
     \notFreeIn( i#68, find_result_90#57),
     \notFreeIn( i#68, find_heap#59),
     \notFreeIn( i#68, find_voterId_7#56),
     \notFreeIn( i#68, find_self_77#55),
     \notFreeIn( i#68, assumes_heapAfter_voterIdCheck#66),
     \notFreeIn( i#68, assumes_exc_105#64),
     \notFreeIn( i#68, assumes_result_90#63),
     \notFreeIn( i#68, assumes_heap#65),
     \notFreeIn( i#68, assumes_voterId_7#62),
     \notFreeIn( i#68, assumes_self_77#61)
  )
  \replacewith (
    RELATED_BY_voterIdCheck_1060056493(find_self_77#55,
                                       find_voterId_7#56,
                                       find_heap#59,
                                       find_self_77#55,
                                       find_result_90#57,
                                       find_exc_105#58,
                                       find_heapAfter_voterIdCheck#60)
  )
  \add (      ((\exists i#68;
                  ((  ((leq(Z(0(#)), i#68)<<origin("requires @ file CredTool.java @ line 299","[]")>>
                    & lt(i#68, seqLen(strContent(find_voterId_7#56)))<<origin("requires @ file CredTool.java @ line 299","[]")>>)<<SC,
                                                                                                                                   origin("requires @ file CredTool.java @ line 299","[]")>>
                    & inInt(i#68)<<origin("requires @ file CredTool.java @ line 299","[]")>>)<<origin("requires @ file CredTool.java @ line 299","[]")>>
                    & gt((int)(any::seqGet(strContent(find_voterId_7#56), i#68)),
                         C(2(3(#))))<<origin("requires @ file CredTool.java @ line 299","[]")>>)<<SC,
                                                                                                  origin("requires @ file CredTool.java @ line 299","[]")>>))<<origin("requires @ file CredTool.java @ line 299","[]")>>
            & (!(find_voterId_7#56 = null)<<origin("requires @ file CredTool.java @ line 304","[]")>>)<<impl,
                                                                                                        origin("requires @ file CredTool.java @ line 304","[]")>>)<<SC>>
            & ((  (\exists i#68;
                     ((  ((leq(Z(0(#)), i#68)<<origin("requires @ file CredTool.java @ line 299","[]")>>
                       & lt(i#68, seqLen(strContent(assumes_voterId_7#62)))<<origin("requires @ file CredTool.java @ line 299","[]")>>)<<SC,
                                                                                                                                         origin("requires @ file CredTool.java @ line 299","[]")>>
                       & inInt(i#68)<<origin("requires @ file CredTool.java @ line 299","[]")>>)<<origin("requires @ file CredTool.java @ line 299","[]")>>
                       & gt((int)(any::seqGet(strContent(assumes_voterId_7#62),
                                              i#68)),
                            C(2(3(#))))<<origin("requires @ file CredTool.java @ line 299","[]")>>)<<SC,
                                                                                                     origin("requires @ file CredTool.java @ line 299","[]")>>))<<origin("requires @ file CredTool.java @ line 299","[]")>>
                & (!(assumes_voterId_7#62 = null)<<origin("requires @ file CredTool.java @ line 304","[]")>>)<<impl,
                                                                                                               origin("requires @ file CredTool.java @ line 304","[]")>>)<<SC>>)
         -> (find_result_90#57 = assumes_result_90#63)<<postCondition>>
        ⟹
         
  )
  \heuristics ( information_flow_contract_appl )
};

Use_information_flow_contract_for_get_1066055272 {
  \schemaVar \term java.lang.String find_var_1#44;
  \schemaVar \term org.apache.commons.csv.CSVRecord find_var#43;
  \schemaVar \term java.lang.String find_result_89#45;
  \schemaVar \term java.lang.Throwable find_exc_104#46;
  \schemaVar \term Heap find_heap#47;
  \schemaVar \term java.lang.String assumes_var_1#49;
  \schemaVar \term org.apache.commons.csv.CSVRecord assumes_var#48;
  \schemaVar \term java.lang.String assumes_result_89#50;
  \schemaVar \term java.lang.Throwable assumes_exc_104#51;
  \schemaVar \term Heap assumes_heap#52;
  \schemaVar \variables int i#54;
  
  \assumes ( RELATED_BY_get_1066055272(assumes_var#48,
                                       assumes_var_1#49,
                                       assumes_heap#52,
                                       assumes_var#48,
                                       assumes_result_89#50,
                                       assumes_exc_104#51,
                                       assumes_heap#52)
            ⟹
             
  )
  \find (
    RELATED_BY_get_1066055272(find_var#43,
                              find_var_1#44,
                              find_heap#47,
                              find_var#43,
                              find_result_89#45,
                              find_exc_104#46,
                              find_heap#47)
  )
  \antecedentPolarity
  \varcond (
     \notFreeIn( i#54, find_exc_104#46),
     \notFreeIn( i#54, find_result_89#45),
     \notFreeIn( i#54, find_heap#47),
     \notFreeIn( i#54, find_var_1#44),
     \notFreeIn( i#54, find_var#43),
     \notFreeIn( i#54, assumes_exc_104#51),
     \notFreeIn( i#54, assumes_result_89#50),
     \notFreeIn( i#54, assumes_heap#52),
     \notFreeIn( i#54, assumes_var_1#49),
     \notFreeIn( i#54, assumes_var#48)
  )
  \replacewith (
    RELATED_BY_get_1066055272(find_var#43,
                              find_var_1#44,
                              find_heap#47,
                              find_var#43,
                              find_result_89#45,
                              find_exc_104#46,
                              find_heap#47)
  )
  \add (      ((\exists i#54;
                  ((  ((leq(Z(0(#)), i#54)<<origin("requires @ file CSVRecord.java @ line 13","[]")>>
                    & lt(i#54,
                         seqLen(Seq::select(find_heap#47,
                                            find_var#43,
                                            org.apache.commons.csv.CSVRecord::$key_seq)))<<origin("requires @ file CSVRecord.java @ line 13","[]")>>)<<SC,
                                                                                                                                                       origin("requires @ file CSVRecord.java @ line 13","[]")>>
                    & inInt(i#54)<<origin("requires @ file CSVRecord.java @ line 13","[]")>>)<<origin("requires @ file CSVRecord.java @ line 13","[]")>>
                    & (  (java.lang.String)(any::seqGet(Seq::select(find_heap#47,
                                                                    find_var#43,
                                                                    org.apache.commons.csv.CSVRecord::$key_seq),
                                                        i#54))
                       = find_var_1#44)<<origin("requires @ file CSVRecord.java @ line 13","[]")>>)<<SC,
                                                                                                     origin("requires @ file CSVRecord.java @ line 13","[]")>>))<<origin("requires @ file CSVRecord.java @ line 13","[]")>>
            & ((  java.lang.Object::<inv>(find_heap#47, find_var#43)<<impl>>
                & (!(find_var_1#44 = null)<<origin("requires @ file CSVRecord.java @ line 18","[]")>>)<<impl,
                                                                                                        origin("requires @ file CSVRecord.java @ line 18","[]")>>)<<SC>>))<<SC>>
            & ((  (\exists i#54;
                     ((  ((leq(Z(0(#)), i#54)<<origin("requires @ file CSVRecord.java @ line 13","[]")>>
                       & lt(i#54,
                            seqLen(Seq::select(assumes_heap#52,
                                               assumes_var#48,
                                               org.apache.commons.csv.CSVRecord::$key_seq)))<<origin("requires @ file CSVRecord.java @ line 13","[]")>>)<<SC,
                                                                                                                                                          origin("requires @ file CSVRecord.java @ line 13","[]")>>
                       & inInt(i#54)<<origin("requires @ file CSVRecord.java @ line 13","[]")>>)<<origin("requires @ file CSVRecord.java @ line 13","[]")>>
                       & (  (java.lang.String)(any::seqGet(Seq::select(assumes_heap#52,
                                                                       assumes_var#48,
                                                                       org.apache.commons.csv.CSVRecord::$key_seq),
                                                           i#54))
                          = assumes_var_1#49)<<origin("requires @ file CSVRecord.java @ line 13","[]")>>)<<SC,
                                                                                                           origin("requires @ file CSVRecord.java @ line 13","[]")>>))<<origin("requires @ file CSVRecord.java @ line 13","[]")>>
                & ((  java.lang.Object::<inv>(assumes_heap#52, assumes_var#48)<<impl>>
                    & (!(assumes_var_1#49 = null)<<origin("requires @ file CSVRecord.java @ line 18","[]")>>)<<impl,
                                                                                                               origin("requires @ file CSVRecord.java @ line 18","[]")>>)<<SC>>))<<SC>>)
         -> find_var_1#44 = assumes_var_1#49
         -> (find_result_89#45 = assumes_result_89#50)<<postCondition>>
        ⟹
         
  )
  \heuristics ( information_flow_contract_appl )
};

Use_information_flow_contract_for_Block_Contract_231_processCSVRecord_1352071233 {
  \schemaVar \term de.polyas.core3.open.cred.CredTool find_self_77#29;
  \schemaVar \term Heap find_heap_Before_BLOCK#31;
  \schemaVar \term de.polyas.core3.open.cred.CredTool find_self_77_After_BLOCK#32;
  \schemaVar \term java.lang.Throwable find_exc#15_After_BLOCK#33;
  \schemaVar \term Heap find_heap_After_BLOCK#34;
  \schemaVar \term de.polyas.core3.open.cred.CredTool assumes_self_77#35;
  \schemaVar \term Heap assumes_heap_Before_BLOCK#37;
  \schemaVar \term de.polyas.core3.open.cred.CredTool assumes_self_77_After_BLOCK#38;
  \schemaVar \term java.lang.Throwable assumes_exc#15_After_BLOCK#39;
  \schemaVar \term Heap assumes_heap_After_BLOCK#40;
  
  \assumes ( RELATED_BY_BLOCK_at_line_231_in_processCSVRecord_1352071233(assumes_self_77#35,
                                                                         assumes_heap_Before_BLOCK#37,
                                                                         assumes_self_77_After_BLOCK#38,
                                                                         assumes_exc#15_After_BLOCK#39,
                                                                         assumes_heap_After_BLOCK#40)
            ⟹
             
  )
  \find (
    RELATED_BY_BLOCK_at_line_231_in_processCSVRecord_1352071233(find_self_77#29,
                                                                find_heap_Before_BLOCK#31,
                                                                find_self_77_After_BLOCK#32,
                                                                find_exc#15_After_BLOCK#33,
                                                                find_heap_After_BLOCK#34)
  )
  \antecedentPolarity
  \replacewith (
    RELATED_BY_BLOCK_at_line_231_in_processCSVRecord_1352071233(find_self_77#29,
                                                                find_heap_Before_BLOCK#31,
                                                                find_self_77_After_BLOCK#32,
                                                                find_exc#15_After_BLOCK#33,
                                                                find_heap_After_BLOCK#34)
  )
  \add (true ⟹  )
  \heuristics ( information_flow_contract_appl )
};
}

\problem {
     {heap:=heapAtPre_A<<anonHeapFunction>>}
       (  wellFormed(heapAtPre_A<<anonHeapFunction>>)
        & heap = heapAtPre_A<<anonHeapFunction>>
        & !self_77_A = null
        &   boolean::select(heap,
                            self_77_A,
                            java.lang.Object::<created>)
          = TRUE
        &   de.polyas.core3.open.cred.CredTool::exactInstance(self_77_A)
          = TRUE
        & (  ((  r_3_A = null
               |   boolean::select(heapAtPre_A<<anonHeapFunction>>,
                                   r_3_A,
                                   java.lang.Object::<created>)
                 = TRUE)<<SC>>)
           & ((  password_11_A = null
               |   boolean::select(heapAtPre_A<<anonHeapFunction>>,
                                   password_11_A,
                                   java.lang.Object::<created>)
                 = TRUE)<<SC>>))
        & ((  java.math.BigInteger::<$inv>(heapAtPre_A<<anonHeapFunction>>)
            & ((  de.polyas.core3.open.cred.CredentialGenerator::<$inv>(heapAtPre_A<<anonHeapFunction>>)
                & ((  de.polyas.core3.open.cred.Crypto::<$inv>(heapAtPre_A<<anonHeapFunction>>)
                    & ((  java.lang.Object::<inv>(heapAtPre_A<<anonHeapFunction>>,
                                                  r_3_A)
                        & ((  (\exists int i;
                                 ((  ((leq(Z(0(#)), i)<<origin("requires @ file CredTool.java @ line 212","[]")>>
                                   & lt(i,
                                        seqLen(Seq::select(heapAtPre_A<<anonHeapFunction>>,
                                                           r_3_A,
                                                           org.apache.commons.csv.CSVRecord::$key_seq)))<<origin("requires @ file CredTool.java @ line 212","[]")>>)<<SC,
                                                                                                                                                                      origin("requires @ file CredTool.java @ line 212","[]")>>
                                   & inInt(i)<<origin("requires @ file CredTool.java @ line 212","[]")>>)<<origin("requires @ file CredTool.java @ line 212","[]")>>
                                   & (  (java.lang.String)(any::seqGet(Seq::select(heapAtPre_A<<anonHeapFunction>>,
                                                                                   r_3_A,
                                                                                   org.apache.commons.csv.CSVRecord::$key_seq),
                                                                       i))
                                      = java.lang.String::select(heapAtPre_A<<anonHeapFunction>>,
                                                                 self_77_A,
                                                                 de.polyas.core3.open.cred.CredTool::$idCol))<<origin("requires @ file CredTool.java @ line 212","[]")>>)<<SC,
                                                                                                                                                                           origin("requires @ file CredTool.java @ line 212","[]")>>))<<origin("requires @ file CredTool.java @ line 212","[]")>>
                            & ((  (\forall int i;
                                     ((   (  (leq(Z(0(#)),
                                                  i)<<origin("requires @ file CredTool.java @ line 215","[]")>>
                                           & lt(i,
                                                seqLen(Seq::select(heapAtPre_A<<anonHeapFunction>>,
                                                                   r_3_A,
                                                                   org.apache.commons.csv.CSVRecord::$key_seq)))<<origin("requires @ file CredTool.java @ line 215","[]")>>)<<SC,
                                                                                                                                                                              origin("requires @ file CredTool.java @ line 215","[]")>>
                                           & inInt(i)<<origin("requires @ file CredTool.java @ line 215","[]")>>)<<origin("requires @ file CredTool.java @ line 215","[]")>>
                                       -> ((  (java.lang.String)(any::seqGet(Seq::select(heapAtPre_A<<anonHeapFunction>>,
                                                                                         r_3_A,
                                                                                         org.apache.commons.csv.CSVRecord::$key_seq),
                                                                             i))
                                            = java.lang.String::select(heapAtPre_A<<anonHeapFunction>>,
                                                                       self_77_A,
                                                                       de.polyas.core3.open.cred.CredTool::$idCol))<<origin("requires @ file CredTool.java @ line 215","[]")>>
                                       -> (\exists int j;
                                             ((  ((leq(Z(0(#)),
                                                       j)<<origin("requires @ file CredTool.java @ line 215","[]")>>
                                               & lt(j,
                                                    seqLen(strContent((java.lang.String)(any::seqGet(Seq::select(heapAtPre_A<<anonHeapFunction>>,
                                                                                                                 r_3_A,
                                                                                                                 org.apache.commons.csv.CSVRecord::$value_seq),
                                                                                                     i)))))<<origin("requires @ file CredTool.java @ line 215","[]")>>)<<SC,
                                                                                                                                                                         origin("requires @ file CredTool.java @ line 215","[]")>>
                                               & inInt(j)<<origin("requires @ file CredTool.java @ line 215","[]")>>)<<origin("requires @ file CredTool.java @ line 215","[]")>>
                                               & gt((int)(any::seqGet(strContent((java.lang.String)(any::seqGet(Seq::select(heapAtPre_A<<anonHeapFunction>>,
                                                                                                                            r_3_A,
                                                                                                                            org.apache.commons.csv.CSVRecord::$value_seq),
                                                                                                                i))),
                                                                      j)),
                                                    C(2(3(#))))<<origin("requires @ file CredTool.java @ line 215","[]")>>)<<SC,
                                                                                                                             origin("requires @ file CredTool.java @ line 215","[]")>>))<<origin("requires @ file CredTool.java @ line 215","[]")>>)<<origin("requires @ file CredTool.java @ line 215","[]")>>)<<origin("requires @ file CredTool.java @ line 215","[]")>>))<<origin("requires @ file CredTool.java @ line 215","[]")>>
                                & ((  java.lang.Object::<inv>(heapAtPre_A<<anonHeapFunction>>,
                                                              self_77_A)<<impl>>
                                    & ((  (!(  r_3_A
                                             = null)<<origin("requires @ file CredTool.java @ line 227","[]")>>)<<impl,
                                                                                                                  origin("requires @ file CredTool.java @ line 227","[]")>>
                                        & (!(  password_11_A
                                             = null)<<origin("requires @ file CredTool.java @ line 227","[]")>>)<<impl,
                                                                                                                  origin("requires @ file CredTool.java @ line 227","[]")>>)<<SC>>))<<SC>>))<<SC>>))<<SC>>))<<SC>>))<<SC>>))<<SC>>))<<SC>>)
        & {_r_3_A:=r_3_A
           || _password_11_A:=password_11_A}
            \[{
                exc_103_A=null;try {
                  self_77_A.processCSVRecord(_r_3_A,_password_11_A)@de.polyas.core3.open.cred.CredTool;
                }   catch (java.lang.Throwable e) {
                  exc_103_A=e;
                }
              }\] (  selfAtPost_77_A = self_77_A
                   & excAtPost_103_A = exc_103_A
                   & heapAtPost_A = heap))
   & {heap:=heapAtPre_B<<anonHeapFunction>>}
       (  wellFormed(heapAtPre_B<<anonHeapFunction>>)
        & heap = heapAtPre_B<<anonHeapFunction>>
        & !self_77_B = null
        &   boolean::select(heap,
                            self_77_B,
                            java.lang.Object::<created>)
          = TRUE
        &   de.polyas.core3.open.cred.CredTool::exactInstance(self_77_B)
          = TRUE
        & (  ((  r_3_B = null
               |   boolean::select(heapAtPre_B<<anonHeapFunction>>,
                                   r_3_B,
                                   java.lang.Object::<created>)
                 = TRUE)<<SC>>)
           & ((  password_11_B = null
               |   boolean::select(heapAtPre_B<<anonHeapFunction>>,
                                   password_11_B,
                                   java.lang.Object::<created>)
                 = TRUE)<<SC>>))
        & ((  java.math.BigInteger::<$inv>(heapAtPre_B<<anonHeapFunction>>)
            & ((  de.polyas.core3.open.cred.CredentialGenerator::<$inv>(heapAtPre_B<<anonHeapFunction>>)
                & ((  de.polyas.core3.open.cred.Crypto::<$inv>(heapAtPre_B<<anonHeapFunction>>)
                    & ((  java.lang.Object::<inv>(heapAtPre_B<<anonHeapFunction>>,
                                                  r_3_B)
                        & ((  \exists int i;
                                ((  (leq(Z(0(#)), i)
                                  & lt(i,
                                       seqLen(Seq::select(heapAtPre_B<<anonHeapFunction>>,
                                                          r_3_B,
                                                          org.apache.commons.csv.CSVRecord::$key_seq))))<<SC>>
                                  & inInt(i)
                                  &   (java.lang.String)(any::seqGet(Seq::select(heapAtPre_B<<anonHeapFunction>>,
                                                                                 r_3_B,
                                                                                 org.apache.commons.csv.CSVRecord::$key_seq),
                                                                     i))
                                    = java.lang.String::select(heapAtPre_B<<anonHeapFunction>>,
                                                               self_77_B,
                                                               de.polyas.core3.open.cred.CredTool::$idCol))<<SC>>)
                            & ((  \forall int i;
                                    (     (leq(Z(0(#)),
                                               i)
                                        & lt(i,
                                             seqLen(Seq::select(heapAtPre_B<<anonHeapFunction>>,
                                                                r_3_B,
                                                                org.apache.commons.csv.CSVRecord::$key_seq))))<<SC>>
                                        & inInt(i)
                                     ->   (java.lang.String)(any::seqGet(Seq::select(heapAtPre_B<<anonHeapFunction>>,
                                                                                     r_3_B,
                                                                                     org.apache.commons.csv.CSVRecord::$key_seq),
                                                                         i))
                                        = java.lang.String::select(heapAtPre_B<<anonHeapFunction>>,
                                                                   self_77_B,
                                                                   de.polyas.core3.open.cred.CredTool::$idCol)
                                     -> \exists int j;
                                          ((  (leq(Z(0(#)),
                                                   j)
                                            & lt(j,
                                                 seqLen(strContent((java.lang.String)(any::seqGet(Seq::select(heapAtPre_B<<anonHeapFunction>>,
                                                                                                              r_3_B,
                                                                                                              org.apache.commons.csv.CSVRecord::$value_seq),
                                                                                                  i))))))<<SC>>
                                            & inInt(j)
                                            & gt((int)(any::seqGet(strContent((java.lang.String)(any::seqGet(Seq::select(heapAtPre_B<<anonHeapFunction>>,
                                                                                                                         r_3_B,
                                                                                                                         org.apache.commons.csv.CSVRecord::$value_seq),
                                                                                                             i))),
                                                                   j)),
                                                 C(2(3(#)))))<<SC>>))
                                & ((  java.lang.Object::<inv>(heapAtPre_B<<anonHeapFunction>>,
                                                              self_77_B)<<impl>>
                                    & ((  (!  r_3_B
                                            = null)<<impl>>
                                        & (!  password_11_B
                                            = null)<<impl>>)<<SC>>))<<SC>>))<<SC>>))<<SC>>))<<SC>>))<<SC>>))<<SC>>))<<SC>>)
        & {_r_3_B:=r_3_B
           || _password_11_B:=password_11_B}
            \[{
                exc_103_B=null;try {
                  self_77_B.processCSVRecord(_r_3_B,_password_11_B)@de.polyas.core3.open.cred.CredTool;
                }   catch (java.lang.Throwable e) {
                  exc_103_B=e;
                }
              }\] (  selfAtPost_77_B = self_77_B
                   & excAtPost_103_B = exc_103_B
                   & heapAtPost_B = heap))
->     Seq::select(heapAtPre_A<<anonHeapFunction>>,
                   r_3_A,
                   org.apache.commons.csv.CSVRecord::$key_seq)
     = Seq::select(heapAtPre_B<<anonHeapFunction>>,
                   r_3_B,
                   org.apache.commons.csv.CSVRecord::$key_seq)
   &   Seq::select(heapAtPre_A<<anonHeapFunction>>,
                   r_3_A,
                   org.apache.commons.csv.CSVRecord::$value_seq)
     = Seq::select(heapAtPre_B<<anonHeapFunction>>,
                   r_3_B,
                   org.apache.commons.csv.CSVRecord::$value_seq)
   &   Seq::select(heapAtPre_A<<anonHeapFunction>>,
                   java.util.ArrayList::select(heapAtPre_A<<anonHeapFunction>>,
                                               self_77_A,
                                               de.polyas.core3.open.cred.CredTool::$inputColsForPolyas),
                   java.util.Collection::$seq)
     = Seq::select(heapAtPre_B<<anonHeapFunction>>,
                   java.util.ArrayList::select(heapAtPre_B<<anonHeapFunction>>,
                                               self_77_B,
                                               de.polyas.core3.open.cred.CredTool::$inputColsForPolyas),
                   java.util.Collection::$seq)
   &   java.lang.String::select(heapAtPre_A<<anonHeapFunction>>,
                                self_77_A,
                                de.polyas.core3.open.cred.CredTool::$idCol)
     = java.lang.String::select(heapAtPre_B<<anonHeapFunction>>,
                                self_77_B,
                                de.polyas.core3.open.cred.CredTool::$idCol)
   &   int::select(heapAtPre_A<<anonHeapFunction>>,
                   org.bouncycastle.math.ec.ECPoint::select(heapAtPre_A<<anonHeapFunction>>,
                                                            org.bouncycastle.jce.spec.ECNamedCurveParameterSpec::select(heapAtPre_A<<anonHeapFunction>>,
                                                                                                                        de.polyas.core3.open.crypto.groups.ECGroup::select(heapAtPre_A<<anonHeapFunction>>,
                                                                                                                                                                           null,
                                                                                                                                                                           de.polyas.core3.open.cred.CredentialGenerator::$GROUP),
                                                                                                                        de.polyas.core3.open.crypto.groups.ECGroup::$group),
                                                            org.bouncycastle.jce.spec.ECParameterSpec::$generator),
                   org.bouncycastle.math.ec.ECPoint::$value)
     = int::select(heapAtPre_B<<anonHeapFunction>>,
                   org.bouncycastle.math.ec.ECPoint::select(heapAtPre_B<<anonHeapFunction>>,
                                                            org.bouncycastle.jce.spec.ECNamedCurveParameterSpec::select(heapAtPre_B<<anonHeapFunction>>,
                                                                                                                        de.polyas.core3.open.crypto.groups.ECGroup::select(heapAtPre_B<<anonHeapFunction>>,
                                                                                                                                                                           null,
                                                                                                                                                                           de.polyas.core3.open.cred.CredentialGenerator::$GROUP),
                                                                                                                        de.polyas.core3.open.crypto.groups.ECGroup::$group),
                                                            org.bouncycastle.jce.spec.ECParameterSpec::$generator),
                   org.bouncycastle.math.ec.ECPoint::$value)
   &   int::select(heapAtPre_A<<anonHeapFunction>>,
                   org.bouncycastle.math.ec.custom.sec.SecP256K1Curve::select(heapAtPre_A<<anonHeapFunction>>,
                                                                              de.polyas.core3.open.crypto.groups.ECGroup::select(heapAtPre_A<<anonHeapFunction>>,
                                                                                                                                 null,
                                                                                                                                 de.polyas.core3.open.cred.CredentialGenerator::$GROUP),
                                                                              de.polyas.core3.open.crypto.groups.ECGroup::$curve),
                   org.bouncycastle.math.ec.ECCurve::$order)
     = int::select(heapAtPre_B<<anonHeapFunction>>,
                   org.bouncycastle.math.ec.custom.sec.SecP256K1Curve::select(heapAtPre_B<<anonHeapFunction>>,
                                                                              de.polyas.core3.open.crypto.groups.ECGroup::select(heapAtPre_B<<anonHeapFunction>>,
                                                                                                                                 null,
                                                                                                                                 de.polyas.core3.open.cred.CredentialGenerator::$GROUP),
                                                                              de.polyas.core3.open.crypto.groups.ECGroup::$curve),
                   org.bouncycastle.math.ec.ECCurve::$order)
-> (  Seq::select(heapAtPost_A,
                  java.util.ArrayList::select(heapAtPost_A,
                                              null,
                                              de.polyas.core3.open.cred.CredTool::$polyasVals),
                  java.util.Collection::$seq)
    = Seq::select(heapAtPost_B,
                  java.util.ArrayList::select(heapAtPost_B,
                                              null,
                                              de.polyas.core3.open.cred.CredTool::$polyasVals),
                  java.util.Collection::$seq))<<postCondition>>

}

\proof {
(keyLog "0" (keyUser "flo" ) (keyVersion "57d504cc0f"))

(autoModeTime "34")

(branch "dummy ID"
(rule "unfold_computed_formula_1_of_processCSVRecord_1352071233" (formula "1") (term "0"))
(rule "impRight" (formula "1"))
(rule "impRight" (formula "2"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "closeFalse" (formula "7"))
)
}
