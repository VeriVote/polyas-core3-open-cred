\profile "Java Profile";

\settings {
"#Proof-Settings-Config-File
#Wed Sep 25 11:24:37 CEST 2019
[SMTSettings]maxGenericSorts=2
[SMTSettings]instantiateHierarchyAssumptions=true
[SMTSettings]UseBuiltUniqueness=false
[StrategyProperty]QUANTIFIERS_OPTIONS_KEY=QUANTIFIERS_NON_SPLITTING_WITH_PROGS
[StrategyProperty]SPLITTING_OPTIONS_KEY=SPLITTING_DELAYED
[StrategyProperty]QUERYAXIOM_OPTIONS_KEY=QUERYAXIOM_ON
[StrategyProperty]DEP_OPTIONS_KEY=DEP_ON
[Strategy]Timeout=-1
[StrategyProperty]USER_TACLETS_OPTIONS_KEY3=USER_TACLETS_OFF
[StrategyProperty]USER_TACLETS_OPTIONS_KEY2=USER_TACLETS_OFF
[StrategyProperty]USER_TACLETS_OPTIONS_KEY1=USER_TACLETS_OFF
[StrategyProperty]OSS_OPTIONS_KEY=OSS_ON
[Choice]DefaultChoices=assertions-assertions\\:on , initialisation-initialisation\\:disableStaticInitialisation , intRules-intRules\\:arithmeticSemanticsIgnoringOF , programRules-programRules\\:Java , runtimeExceptions-runtimeExceptions\\:allow , JavaCard-JavaCard\\:on , Strings-Strings\\:on , modelFields-modelFields\\:treatAsAxiom , bigint-bigint\\:on , sequences-sequences\\:on , moreSeqRules-moreSeqRules\\:off , reach-reach\\:on , integerSimplificationRules-integerSimplificationRules\\:full , permissions-permissions\\:off , wdOperator-wdOperator\\:L , wdChecks-wdChecks\\:off , mergeGenerateIsWeakeningGoal-mergeGenerateIsWeakeningGoal\\:off , methodExpansion-methodExpansion\\:modularOnly
[StrategyProperty]METHOD_OPTIONS_KEY=METHOD_CONTRACT
[StrategyProperty]INF_FLOW_CHECK_PROPERTY=INF_FLOW_CHECK_TRUE
[Strategy]ActiveStrategy=JavaCardDLStrategy
[StrategyProperty]CLASS_AXIOM_OPTIONS_KEY=CLASS_AXIOM_FREE
[SMTSettings]useConstantsForBigOrSmallIntegers=true
[StrategyProperty]VBT_PHASE=VBT_SYM_EX
[StrategyProperty]SYMBOLIC_EXECUTION_ALIAS_CHECK_OPTIONS_KEY=SYMBOLIC_EXECUTION_ALIAS_CHECK_NEVER
[SMTSettings]integersMinimum=-2147483645
[SMTSettings]invariantForall=false
[StrategyProperty]BLOCK_OPTIONS_KEY=BLOCK_CONTRACT_INTERNAL
[StrategyProperty]QUERY_NEW_OPTIONS_KEY=QUERY_OFF
[Labels]UseOriginLabels=true
[SMTSettings]integersMaximum=2147483645
[SMTSettings]useUninterpretedMultiplication=true
[StrategyProperty]MPS_OPTIONS_KEY=MPS_MERGE
[Strategy]MaximumNumberOfAutomaticApplications=10000
[StrategyProperty]AUTO_INDUCTION_OPTIONS_KEY=AUTO_INDUCTION_OFF
[StrategyProperty]STOPMODE_OPTIONS_KEY=STOPMODE_DEFAULT
[SMTSettings]SelectedTaclets=
[StrategyProperty]NON_LIN_ARITH_OPTIONS_KEY=NON_LIN_ARITH_DEF_OPS
[StrategyProperty]LOOP_OPTIONS_KEY=LOOP_INVARIANT
[SMTSettings]explicitTypeHierarchy=false
[StrategyProperty]SYMBOLIC_EXECUTION_NON_EXECUTION_BRANCH_HIDING_OPTIONS_KEY=SYMBOLIC_EXECUTION_NON_EXECUTION_BRANCH_HIDING_OFF
"
}

\javaSource "../src";



\sorts{
LocSet;
boolean;
org.bouncycastle.math.ec.custom.sec.SecP256K1Curve\extends org.bouncycastle.math.ec.ECCurve.AbstractFp;
int;
org.bouncycastle.math.ec.ECPoint\extends java.lang.Object;
org.bouncycastle.jce.spec.ECNamedCurveParameterSpec\extends org.bouncycastle.jce.spec.ECParameterSpec;
Field;
java.lang.String\extends java.lang.Comparable, java.io.Serializable, java.lang.Object;
de.polyas.core3.open.crypto.groups.ECGroup\extends de.polyas.core3.open.crypto.groups.CyclicGroup;
Heap;
Formula;
Update;
de.polyas.core3.open.cred.CredentialGenerator.GeneratedDataForVoter\extends java.lang.Object;
java.lang.Throwable\extends java.io.Serializable, java.lang.Object;
}

\predicates{
RELATED_BY_publicCredentialFromPIN_599682891(de.polyas.core3.open.crypto.groups.ECGroup,java.lang.String,java.lang.String,Heap,org.bouncycastle.math.ec.ECPoint,java.lang.Throwable,Heap);
RELATED_BY_getEncoded_253512071(org.bouncycastle.math.ec.ECPoint,boolean,Heap,org.bouncycastle.math.ec.ECPoint,byte[],java.lang.Throwable,Heap);
RELATED_BY_asHexString_1063021898(byte[],Heap,java.lang.String,java.lang.Throwable,Heap);
RELATED_BY_loginPasswordFromMasterPIN_575816123(de.polyas.core3.open.crypto.groups.ECGroup,java.lang.String,java.lang.String,Heap,java.lang.String,java.lang.Throwable,Heap);
RELATED_BY_newSalt_479840995(Heap,java.lang.String,java.lang.Throwable,Heap);
RELATED_BY_hashPasswordWithSHA256_801028411(java.lang.String,java.lang.String,Heap,java.lang.String,java.lang.Throwable,Heap);
}

\functions{
Formula java.math.BigInteger::<$inv>(Heap);
Formula java.lang.Object::<inv>(Heap,java.lang.Object);
Null null;
Field de.polyas.core3.open.crypto.groups.ECGroup::$group;
org.bouncycastle.jce.spec.ECNamedCurveParameterSpec org.bouncycastle.jce.spec.ECNamedCurveParameterSpec::select(Heap,java.lang.Object,Field);
Field org.bouncycastle.jce.spec.ECParameterSpec::$generator;
org.bouncycastle.math.ec.ECPoint org.bouncycastle.math.ec.ECPoint::select(Heap,java.lang.Object,Field);
Field org.bouncycastle.math.ec.ECPoint::$value;
int int::select(Heap,java.lang.Object,Field);
Field de.polyas.core3.open.crypto.groups.ECGroup::$curve;
org.bouncycastle.math.ec.custom.sec.SecP256K1Curve org.bouncycastle.math.ec.custom.sec.SecP256K1Curve::select(Heap,java.lang.Object,Field);
Field org.bouncycastle.math.ec.ECCurve::$order;
LocSet allFields(java.lang.Object);
Formula de.polyas.core3.open.cred.CredentialGenerator::<$inv>(Heap);
Formula de.polyas.core3.open.cred.Crypto::<$inv>(Heap);
Heap heapAtPre_A;
Formula wellFormed(Heap);
Field java.lang.Object::<created>;
boolean boolean::select(Heap,java.lang.Object,Field);
boolean TRUE;
Heap heapAtPost_A;
Heap heapAtPre_B;
Heap heapAtPost_B;
Field de.polyas.core3.open.cred.CredentialGenerator.GeneratedDataForVoter::$password;
java.lang.String java.lang.String::select(Heap,java.lang.Object,Field);
Field de.polyas.core3.open.cred.CredentialGenerator.GeneratedDataForVoter::$hashedPassword;
Field de.polyas.core3.open.cred.CredentialGenerator::$GROUP;
de.polyas.core3.open.crypto.groups.ECGroup de.polyas.core3.open.crypto.groups.ECGroup::select(Heap,java.lang.Object,Field);
Field de.polyas.core3.open.cred.CredentialGenerator.GeneratedDataForVoter::$publicSigningKey;
}

\programVariables{
Heap heap;
java.lang.String voterId_5_A;
java.lang.String password_6_A;
java.lang.String _voterId_5_A;
java.lang.String _password_6_A;
de.polyas.core3.open.cred.CredentialGenerator.GeneratedDataForVoter resultAtPost_46_A;
de.polyas.core3.open.cred.CredentialGenerator.GeneratedDataForVoter result_46_A;
java.lang.Throwable excAtPost_52_A;
java.lang.Throwable exc_52_A;
java.lang.String voterId_5_B;
java.lang.String password_6_B;
java.lang.String _voterId_5_B;
java.lang.String _password_6_B;
de.polyas.core3.open.cred.CredentialGenerator.GeneratedDataForVoter resultAtPost_46_B;
de.polyas.core3.open.cred.CredentialGenerator.GeneratedDataForVoter result_46_B;
java.lang.Throwable excAtPost_52_B;
java.lang.Throwable exc_52_B;
}

\rules{

unfold_computed_formula_1_of_generateDataForVoter_2065185875 {
  \schemaVar \term Heap sv_heapAtPre_A#30;
  \schemaVar \term java.lang.String sv_voterId_5_A#28;
  \schemaVar \term java.lang.String sv_password_6_A#29;
  \schemaVar \term de.polyas.core3.open.cred.CredentialGenerator.GeneratedDataForVoter sv_resultAtPost_46_A#32;
  \schemaVar \term java.lang.Throwable sv_excAtPost_52_A#33;
  \schemaVar \term Heap sv_heapAtPost_A#34;
  \schemaVar \term Heap sv_heapAtPre_B#37;
  \schemaVar \term java.lang.String sv_voterId_5_B#35;
  \schemaVar \term java.lang.String sv_password_6_B#36;
  \schemaVar \term de.polyas.core3.open.cred.CredentialGenerator.GeneratedDataForVoter sv_resultAtPost_46_B#39;
  \schemaVar \term java.lang.Throwable sv_excAtPost_52_B#40;
  \schemaVar \term Heap sv_heapAtPost_B#41;
  
  \find (
      {heap:=sv_heapAtPre_A#30}
        (  wellFormed(sv_heapAtPre_A#30)
         & heap = sv_heapAtPre_A#30
         & (  ((  sv_voterId_5_A#28 = null
                |   boolean::select(sv_heapAtPre_A#30,
                                    sv_voterId_5_A#28,
                                    java.lang.Object::<created>)
                  = TRUE)<<SC>>)
            & ((  sv_password_6_A#29 = null
                |   boolean::select(sv_heapAtPre_A#30,
                                    sv_password_6_A#29,
                                    java.lang.Object::<created>)
                  = TRUE)<<SC>>))
         & ((  de.polyas.core3.open.cred.Crypto::<$inv>(sv_heapAtPre_A#30)
             & ((  java.math.BigInteger::<$inv>(sv_heapAtPre_A#30)
                 & ((  de.polyas.core3.open.cred.CredentialGenerator::<$inv>(sv_heapAtPre_A#30)<<impl>>
                     & ((  (!sv_voterId_5_A#28 = null)<<impl>>
                         & (!sv_password_6_A#29 = null)<<impl>>)<<SC>>))<<SC>>))<<SC>>))<<SC>>)
         & {_voterId_5_A:=sv_voterId_5_A#28 || _password_6_A:=sv_password_6_A#29}
             \[{
                 exc_52_A=null;try {
                   result_46_A=de.polyas.core3.open.cred.CredentialGenerator.generateDataForVoter(_voterId_5_A,_password_6_A)@de.polyas.core3.open.cred.CredentialGenerator;
                 }   catch (java.lang.Throwable e) {
                   exc_52_A=e;
                 }
               }\] (  sv_resultAtPost_46_A#32 = result_46_A
                    & sv_excAtPost_52_A#33 = exc_52_A
                    & sv_heapAtPost_A#34 = heap))
    & {heap:=sv_heapAtPre_B#37}
        (  wellFormed(sv_heapAtPre_B#37)
         & heap = sv_heapAtPre_B#37
         & (  ((  sv_voterId_5_B#35 = null
                |   boolean::select(sv_heapAtPre_B#37,
                                    sv_voterId_5_B#35,
                                    java.lang.Object::<created>)
                  = TRUE)<<SC>>)
            & ((  sv_password_6_B#36 = null
                |   boolean::select(sv_heapAtPre_B#37,
                                    sv_password_6_B#36,
                                    java.lang.Object::<created>)
                  = TRUE)<<SC>>))
         & ((  de.polyas.core3.open.cred.Crypto::<$inv>(sv_heapAtPre_B#37)
             & ((  java.math.BigInteger::<$inv>(sv_heapAtPre_B#37)
                 & ((  de.polyas.core3.open.cred.CredentialGenerator::<$inv>(sv_heapAtPre_B#37)<<impl>>
                     & ((  (!sv_voterId_5_B#35 = null)<<impl>>
                         & (!sv_password_6_B#36 = null)<<impl>>)<<SC>>))<<SC>>))<<SC>>))<<SC>>)
         & {_voterId_5_B:=sv_voterId_5_B#35 || _password_6_B:=sv_password_6_B#36}
             \[{
                 exc_52_B=null;try {
                   result_46_B=de.polyas.core3.open.cred.CredentialGenerator.generateDataForVoter(_voterId_5_B,_password_6_B)@de.polyas.core3.open.cred.CredentialGenerator;
                 }   catch (java.lang.Throwable e) {
                   exc_52_B=e;
                 }
               }\] (  sv_resultAtPost_46_B#39 = result_46_B
                    & sv_excAtPost_52_B#40 = exc_52_B
                    & sv_heapAtPost_B#41 = heap))
  )
  \antecedentPolarity
  \replacewith ( false )
  \heuristics ( concrete )
};

Use_information_flow_contract_for_hashPasswordWithSHA256_801028411_0 {
  \schemaVar \term java.lang.String find_loginPasswordFromMasterPIN#95;
  \schemaVar \term java.lang.String find_salt_1#96;
  \schemaVar \term Heap find_heap#99;
  \schemaVar \term java.lang.String find_result_52#97;
  \schemaVar \term java.lang.Throwable find_exc_58#98;
  \schemaVar \term Heap find_heapAfter_hashPasswordWithSHA256#100;
  \schemaVar \term java.lang.String assumes_loginPasswordFromMasterPIN#101;
  \schemaVar \term java.lang.String assumes_salt_1#102;
  \schemaVar \term Heap assumes_heap#105;
  \schemaVar \term java.lang.String assumes_result_52#103;
  \schemaVar \term java.lang.Throwable assumes_exc_58#104;
  \schemaVar \term Heap assumes_heapAfter_hashPasswordWithSHA256#106;
  
  \assumes ( RELATED_BY_hashPasswordWithSHA256_801028411(assumes_loginPasswordFromMasterPIN#101,
                                                         assumes_salt_1#102,
                                                         assumes_heap#105,
                                                         assumes_result_52#103,
                                                         assumes_exc_58#104,
                                                         assumes_heapAfter_hashPasswordWithSHA256#106)
            ⟹
             
  )
  \find (
    RELATED_BY_hashPasswordWithSHA256_801028411(find_loginPasswordFromMasterPIN#95,
                                                find_salt_1#96,
                                                find_heap#99,
                                                find_result_52#97,
                                                find_exc_58#98,
                                                find_heapAfter_hashPasswordWithSHA256#100)
  )
  \antecedentPolarity
  \replacewith (
    RELATED_BY_hashPasswordWithSHA256_801028411(find_loginPasswordFromMasterPIN#95,
                                                find_salt_1#96,
                                                find_heap#99,
                                                find_result_52#97,
                                                find_exc_58#98,
                                                find_heapAfter_hashPasswordWithSHA256#100)
  )
  \add (      (de.polyas.core3.open.cred.Crypto::<$inv>(find_heap#99)<<impl>>
            & ((  (!(find_loginPasswordFromMasterPIN#95 = null)<<origin("requires @ file Crypto.java @ line 118","[]")>>)<<impl,
                                                                                                                           origin("requires @ file Crypto.java @ line 118","[]")>>
                & (!(find_salt_1#96 = null)<<origin("requires @ file Crypto.java @ line 118","[]")>>)<<impl,
                                                                                                       origin("requires @ file Crypto.java @ line 118","[]")>>)<<SC>>))<<SC>>
            & ((  de.polyas.core3.open.cred.Crypto::<$inv>(assumes_heap#105)<<impl>>
                & ((  (!(assumes_loginPasswordFromMasterPIN#101 = null)<<origin("requires @ file Crypto.java @ line 118","[]")>>)<<impl,
                                                                                                                                   origin("requires @ file Crypto.java @ line 118","[]")>>
                    & (!(assumes_salt_1#102 = null)<<origin("requires @ file Crypto.java @ line 118","[]")>>)<<impl,
                                                                                                               origin("requires @ file Crypto.java @ line 118","[]")>>)<<SC>>))<<SC>>)
         -> (find_result_52#97 = assumes_result_52#103)<<postCondition>>
        ⟹
         
  )
  \heuristics ( information_flow_contract_appl )
};

Use_information_flow_contract_for_newSalt_479840995_0 {
  \schemaVar \term Heap find_heap#89;
  \schemaVar \term java.lang.String find_result_51#87;
  \schemaVar \term java.lang.Throwable find_exc_57#88;
  \schemaVar \term Heap find_heapAfter_newSalt#90;
  \schemaVar \term Heap assumes_heap#93;
  \schemaVar \term java.lang.String assumes_result_51#91;
  \schemaVar \term java.lang.Throwable assumes_exc_57#92;
  \schemaVar \term Heap assumes_heapAfter_newSalt#94;
  
  \assumes ( RELATED_BY_newSalt_479840995(assumes_heap#93,
                                          assumes_result_51#91,
                                          assumes_exc_57#92,
                                          assumes_heapAfter_newSalt#94)
            ⟹
             
  )
  \find (
    RELATED_BY_newSalt_479840995(find_heap#89,
                                 find_result_51#87,
                                 find_exc_57#88,
                                 find_heapAfter_newSalt#90)
  )
  \antecedentPolarity
  \replacewith (
    RELATED_BY_newSalt_479840995(find_heap#89,
                                 find_result_51#87,
                                 find_exc_57#88,
                                 find_heapAfter_newSalt#90)
  )
  \add (      de.polyas.core3.open.cred.CredentialGenerator::<$inv>(find_heap#89)<<impl>>
            & de.polyas.core3.open.cred.CredentialGenerator::<$inv>(assumes_heap#93)<<impl>>
         -> (find_result_51#87 = assumes_result_51#91)<<postCondition>>
        ⟹
         
  )
  \heuristics ( information_flow_contract_appl )
};

Use_information_flow_contract_for_loginPasswordFromMasterPIN_575816123_0 {
  \schemaVar \term de.polyas.core3.open.crypto.groups.ECGroup find_var_4#73;
  \schemaVar \term java.lang.String find_var_5#74;
  \schemaVar \term java.lang.String find_var_6#75;
  \schemaVar \term Heap find_heap#78;
  \schemaVar \term java.lang.String find_result_50#76;
  \schemaVar \term java.lang.Throwable find_exc_56#77;
  \schemaVar \term Heap find_heapAfter_loginPasswordFromMasterPIN#79;
  \schemaVar \term de.polyas.core3.open.crypto.groups.ECGroup assumes_var_4#80;
  \schemaVar \term java.lang.String assumes_var_5#81;
  \schemaVar \term java.lang.String assumes_var_6#82;
  \schemaVar \term Heap assumes_heap#85;
  \schemaVar \term java.lang.String assumes_result_50#83;
  \schemaVar \term java.lang.Throwable assumes_exc_56#84;
  \schemaVar \term Heap assumes_heapAfter_loginPasswordFromMasterPIN#86;
  
  \assumes ( RELATED_BY_loginPasswordFromMasterPIN_575816123(assumes_var_4#80,
                                                             assumes_var_5#81,
                                                             assumes_var_6#82,
                                                             assumes_heap#85,
                                                             assumes_result_50#83,
                                                             assumes_exc_56#84,
                                                             assumes_heapAfter_loginPasswordFromMasterPIN#86)
            ⟹
             
  )
  \find (
    RELATED_BY_loginPasswordFromMasterPIN_575816123(find_var_4#73,
                                                    find_var_5#74,
                                                    find_var_6#75,
                                                    find_heap#78,
                                                    find_result_50#76,
                                                    find_exc_56#77,
                                                    find_heapAfter_loginPasswordFromMasterPIN#79)
  )
  \antecedentPolarity
  \replacewith (
    RELATED_BY_loginPasswordFromMasterPIN_575816123(find_var_4#73,
                                                    find_var_5#74,
                                                    find_var_6#75,
                                                    find_heap#78,
                                                    find_result_50#76,
                                                    find_exc_56#77,
                                                    find_heapAfter_loginPasswordFromMasterPIN#79)
  )
  \add (      (java.math.BigInteger::<$inv>(find_heap#78)
            & ((  java.lang.Object::<inv>(find_heap#78, find_var_4#73)
                & ((  (!(find_var_4#73 = null)<<origin("requires @ file Crypto.java @ line 104","[]")>>)<<impl,
                                                                                                          origin("requires @ file Crypto.java @ line 104","[]")>>
                    & ((  (!(find_var_5#74 = null)<<origin("requires @ file Crypto.java @ line 104","[]")>>)<<impl,
                                                                                                              origin("requires @ file Crypto.java @ line 104","[]")>>
                        & (!(find_var_6#75 = null)<<origin("requires @ file Crypto.java @ line 104","[]")>>)<<impl,
                                                                                                              origin("requires @ file Crypto.java @ line 104","[]")>>)<<SC>>))<<SC>>))<<SC>>))<<SC>>
            & ((  java.math.BigInteger::<$inv>(assumes_heap#85)
                & ((  java.lang.Object::<inv>(assumes_heap#85, assumes_var_4#80)
                    & ((  (!(assumes_var_4#80 = null)<<origin("requires @ file Crypto.java @ line 104","[]")>>)<<impl,
                                                                                                                 origin("requires @ file Crypto.java @ line 104","[]")>>
                        & ((  (!(assumes_var_5#81 = null)<<origin("requires @ file Crypto.java @ line 104","[]")>>)<<impl,
                                                                                                                     origin("requires @ file Crypto.java @ line 104","[]")>>
                            & (!(assumes_var_6#82 = null)<<origin("requires @ file Crypto.java @ line 104","[]")>>)<<impl,
                                                                                                                     origin("requires @ file Crypto.java @ line 104","[]")>>)<<SC>>))<<SC>>))<<SC>>))<<SC>>)
         ->     int::select(find_heap#78,
                            org.bouncycastle.math.ec.ECPoint::select(find_heap#78,
                                                                     org.bouncycastle.jce.spec.ECNamedCurveParameterSpec::select(find_heap#78,
                                                                                                                                 find_var_4#73,
                                                                                                                                 de.polyas.core3.open.crypto.groups.ECGroup::$group),
                                                                     org.bouncycastle.jce.spec.ECParameterSpec::$generator),
                            org.bouncycastle.math.ec.ECPoint::$value)
              = int::select(assumes_heap#85,
                            org.bouncycastle.math.ec.ECPoint::select(assumes_heap#85,
                                                                     org.bouncycastle.jce.spec.ECNamedCurveParameterSpec::select(assumes_heap#85,
                                                                                                                                 assumes_var_4#80,
                                                                                                                                 de.polyas.core3.open.crypto.groups.ECGroup::$group),
                                                                     org.bouncycastle.jce.spec.ECParameterSpec::$generator),
                            org.bouncycastle.math.ec.ECPoint::$value)
            &   int::select(find_heap#78,
                            org.bouncycastle.math.ec.custom.sec.SecP256K1Curve::select(find_heap#78,
                                                                                       find_var_4#73,
                                                                                       de.polyas.core3.open.crypto.groups.ECGroup::$curve),
                            org.bouncycastle.math.ec.ECCurve::$order)
              = int::select(assumes_heap#85,
                            org.bouncycastle.math.ec.custom.sec.SecP256K1Curve::select(assumes_heap#85,
                                                                                       assumes_var_4#80,
                                                                                       de.polyas.core3.open.crypto.groups.ECGroup::$curve),
                            org.bouncycastle.math.ec.ECCurve::$order)
         -> (find_result_50#76 = assumes_result_50#83)<<postCondition>>
        ⟹
         
  )
  \heuristics ( information_flow_contract_appl )
};

Use_information_flow_contract_for_asHexString_1063021898_0 {
  \schemaVar \term byte[] find_var_3#60;
  \schemaVar \term Heap find_heap#63;
  \schemaVar \term java.lang.String find_result_49#61;
  \schemaVar \term java.lang.Throwable find_exc_55#62;
  \schemaVar \term Heap find_heapAfter_asHexString#64;
  \schemaVar \term byte[] assumes_var_3#65;
  \schemaVar \term Heap assumes_heap#68;
  \schemaVar \term java.lang.String assumes_result_49#66;
  \schemaVar \term java.lang.Throwable assumes_exc_55#67;
  \schemaVar \term Heap assumes_heapAfter_asHexString#69;
  
  \assumes ( RELATED_BY_asHexString_1063021898(assumes_var_3#65,
                                               assumes_heap#68,
                                               assumes_result_49#66,
                                               assumes_exc_55#67,
                                               assumes_heapAfter_asHexString#69)
            ⟹
             
  )
  \find (
    RELATED_BY_asHexString_1063021898(find_var_3#60,
                                      find_heap#63,
                                      find_result_49#61,
                                      find_exc_55#62,
                                      find_heapAfter_asHexString#64)
  )
  \antecedentPolarity
  \replacewith (
    RELATED_BY_asHexString_1063021898(find_var_3#60,
                                      find_heap#63,
                                      find_result_49#61,
                                      find_exc_55#62,
                                      find_heapAfter_asHexString#64)
  )
  \add (      (!(find_var_3#60 = null)<<origin("requires @ file Utils.java @ line 78","[]")>>)<<impl,
                                                                                                origin("requires @ file Utils.java @ line 78","[]")>>
            & (!(assumes_var_3#65 = null)<<origin("requires @ file Utils.java @ line 78","[]")>>)<<impl,
                                                                                                   origin("requires @ file Utils.java @ line 78","[]")>>
         -> allFields(find_var_3#60) = allFields(assumes_var_3#65)
         -> (find_result_49#61 = assumes_result_49#66)<<postCondition>>
        ⟹
         
  )
  \heuristics ( information_flow_contract_appl )
};

Use_information_flow_contract_for_getEncoded_253512071_0 {
  \schemaVar \term boolean find_TRUE#49;
  \schemaVar \term Heap find_heap#52;
  \schemaVar \term org.bouncycastle.math.ec.ECPoint find_p_1#48;
  \schemaVar \term byte[] find_result_48#50;
  \schemaVar \term java.lang.Throwable find_exc_54#51;
  \schemaVar \term Heap find_heapAfter_getEncoded#53;
  \schemaVar \term boolean assumes_TRUE#55;
  \schemaVar \term Heap assumes_heap#58;
  \schemaVar \term org.bouncycastle.math.ec.ECPoint assumes_p_1#54;
  \schemaVar \term byte[] assumes_result_48#56;
  \schemaVar \term java.lang.Throwable assumes_exc_54#57;
  \schemaVar \term Heap assumes_heapAfter_getEncoded#59;
  
  \assumes ( RELATED_BY_getEncoded_253512071(assumes_p_1#54,
                                             assumes_TRUE#55,
                                             assumes_heap#58,
                                             assumes_p_1#54,
                                             assumes_result_48#56,
                                             assumes_exc_54#57,
                                             assumes_heapAfter_getEncoded#59)
            ⟹
             
  )
  \find (
    RELATED_BY_getEncoded_253512071(find_p_1#48,
                                    find_TRUE#49,
                                    find_heap#52,
                                    find_p_1#48,
                                    find_result_48#50,
                                    find_exc_54#51,
                                    find_heapAfter_getEncoded#53)
  )
  \antecedentPolarity
  \replacewith (
    RELATED_BY_getEncoded_253512071(find_p_1#48,
                                    find_TRUE#49,
                                    find_heap#52,
                                    find_p_1#48,
                                    find_result_48#50,
                                    find_exc_54#51,
                                    find_heapAfter_getEncoded#53)
  )
  \add (      java.lang.Object::<inv>(find_heap#52, find_p_1#48)<<impl>>
            & java.lang.Object::<inv>(assumes_heap#58, assumes_p_1#54)<<impl>>
         ->     int::select(find_heap#52,
                            find_p_1#48,
                            org.bouncycastle.math.ec.ECPoint::$value)
              = int::select(assumes_heap#58,
                            assumes_p_1#54,
                            org.bouncycastle.math.ec.ECPoint::$value)
            & find_TRUE#49 = assumes_TRUE#55
         -> (  find_result_48#50 = assumes_result_48#56
             & allFields(find_result_48#50) = allFields(assumes_result_48#56))<<postCondition>>
        ⟹
         
  )
  \heuristics ( information_flow_contract_appl )
};

Use_information_flow_contract_for_publicCredentialFromPIN_599682891_0 {
  \schemaVar \term de.polyas.core3.open.crypto.groups.ECGroup find_var#31;
  \schemaVar \term java.lang.String find_var_1#32;
  \schemaVar \term java.lang.String find_var_2#33;
  \schemaVar \term Heap find_heap#36;
  \schemaVar \term org.bouncycastle.math.ec.ECPoint find_result_47#34;
  \schemaVar \term java.lang.Throwable find_exc_53#35;
  \schemaVar \term Heap find_heapAfter_publicCredentialFromPIN#37;
  \schemaVar \term de.polyas.core3.open.crypto.groups.ECGroup assumes_var#38;
  \schemaVar \term java.lang.String assumes_var_1#39;
  \schemaVar \term java.lang.String assumes_var_2#40;
  \schemaVar \term Heap assumes_heap#43;
  \schemaVar \term org.bouncycastle.math.ec.ECPoint assumes_result_47#41;
  \schemaVar \term java.lang.Throwable assumes_exc_53#42;
  \schemaVar \term Heap assumes_heapAfter_publicCredentialFromPIN#44;
  
  \assumes ( RELATED_BY_publicCredentialFromPIN_599682891(assumes_var#38,
                                                          assumes_var_1#39,
                                                          assumes_var_2#40,
                                                          assumes_heap#43,
                                                          assumes_result_47#41,
                                                          assumes_exc_53#42,
                                                          assumes_heapAfter_publicCredentialFromPIN#44)
            ⟹
             
  )
  \find (
    RELATED_BY_publicCredentialFromPIN_599682891(find_var#31,
                                                 find_var_1#32,
                                                 find_var_2#33,
                                                 find_heap#36,
                                                 find_result_47#34,
                                                 find_exc_53#35,
                                                 find_heapAfter_publicCredentialFromPIN#37)
  )
  \antecedentPolarity
  \replacewith (
    RELATED_BY_publicCredentialFromPIN_599682891(find_var#31,
                                                 find_var_1#32,
                                                 find_var_2#33,
                                                 find_heap#36,
                                                 find_result_47#34,
                                                 find_exc_53#35,
                                                 find_heapAfter_publicCredentialFromPIN#37)
  )
  \add (      (java.math.BigInteger::<$inv>(find_heap#36)
            & ((  java.lang.Object::<inv>(find_heap#36, find_var#31)
                & ((  (!(find_var#31 = null)<<origin("requires @ file Crypto.java @ line 83","[]")>>)<<impl,
                                                                                                       origin("requires @ file Crypto.java @ line 83","[]")>>
                    & ((  (!(find_var_1#32 = null)<<origin("requires @ file Crypto.java @ line 83","[]")>>)<<impl,
                                                                                                             origin("requires @ file Crypto.java @ line 83","[]")>>
                        & (!(find_var_2#33 = null)<<origin("requires @ file Crypto.java @ line 83","[]")>>)<<impl,
                                                                                                             origin("requires @ file Crypto.java @ line 83","[]")>>)<<SC>>))<<SC>>))<<SC>>))<<SC>>
            & ((  java.math.BigInteger::<$inv>(assumes_heap#43)
                & ((  java.lang.Object::<inv>(assumes_heap#43, assumes_var#38)
                    & ((  (!(assumes_var#38 = null)<<origin("requires @ file Crypto.java @ line 83","[]")>>)<<impl,
                                                                                                              origin("requires @ file Crypto.java @ line 83","[]")>>
                        & ((  (!(assumes_var_1#39 = null)<<origin("requires @ file Crypto.java @ line 83","[]")>>)<<impl,
                                                                                                                    origin("requires @ file Crypto.java @ line 83","[]")>>
                            & (!(assumes_var_2#40 = null)<<origin("requires @ file Crypto.java @ line 83","[]")>>)<<impl,
                                                                                                                    origin("requires @ file Crypto.java @ line 83","[]")>>)<<SC>>))<<SC>>))<<SC>>))<<SC>>)
         ->     int::select(find_heap#36,
                            org.bouncycastle.math.ec.ECPoint::select(find_heap#36,
                                                                     org.bouncycastle.jce.spec.ECNamedCurveParameterSpec::select(find_heap#36,
                                                                                                                                 find_var#31,
                                                                                                                                 de.polyas.core3.open.crypto.groups.ECGroup::$group),
                                                                     org.bouncycastle.jce.spec.ECParameterSpec::$generator),
                            org.bouncycastle.math.ec.ECPoint::$value)
              = int::select(assumes_heap#43,
                            org.bouncycastle.math.ec.ECPoint::select(assumes_heap#43,
                                                                     org.bouncycastle.jce.spec.ECNamedCurveParameterSpec::select(assumes_heap#43,
                                                                                                                                 assumes_var#38,
                                                                                                                                 de.polyas.core3.open.crypto.groups.ECGroup::$group),
                                                                     org.bouncycastle.jce.spec.ECParameterSpec::$generator),
                            org.bouncycastle.math.ec.ECPoint::$value)
            &   int::select(find_heap#36,
                            org.bouncycastle.math.ec.custom.sec.SecP256K1Curve::select(find_heap#36,
                                                                                       find_var#31,
                                                                                       de.polyas.core3.open.crypto.groups.ECGroup::$curve),
                            org.bouncycastle.math.ec.ECCurve::$order)
              = int::select(assumes_heap#43,
                            org.bouncycastle.math.ec.custom.sec.SecP256K1Curve::select(assumes_heap#43,
                                                                                       assumes_var#38,
                                                                                       de.polyas.core3.open.crypto.groups.ECGroup::$curve),
                            org.bouncycastle.math.ec.ECCurve::$order)
         -> (  int::select(find_heapAfter_publicCredentialFromPIN#37,
                           find_result_47#34,
                           org.bouncycastle.math.ec.ECPoint::$value)
             = int::select(assumes_heapAfter_publicCredentialFromPIN#44,
                           assumes_result_47#41,
                           org.bouncycastle.math.ec.ECPoint::$value))<<postCondition>>
        ⟹
         
  )
  \heuristics ( information_flow_contract_appl )
};
}

\problem {
     {heap:=heapAtPre_A<<anonHeapFunction>>}
       (  wellFormed(heapAtPre_A<<anonHeapFunction>>)
        & heap = heapAtPre_A<<anonHeapFunction>>
        & (  ((  voterId_5_A = null
               |   boolean::select(heapAtPre_A<<anonHeapFunction>>,
                                   voterId_5_A,
                                   java.lang.Object::<created>)
                 = TRUE)<<SC>>)
           & ((  password_6_A = null
               |   boolean::select(heapAtPre_A<<anonHeapFunction>>,
                                   password_6_A,
                                   java.lang.Object::<created>)
                 = TRUE)<<SC>>))
        & ((  de.polyas.core3.open.cred.Crypto::<$inv>(heapAtPre_A<<anonHeapFunction>>)
            & ((  java.math.BigInteger::<$inv>(heapAtPre_A<<anonHeapFunction>>)
                & ((  de.polyas.core3.open.cred.CredentialGenerator::<$inv>(heapAtPre_A<<anonHeapFunction>>)<<impl>>
                    & ((  (!(voterId_5_A = null)<<origin("requires @ file CredentialGenerator.java @ line 44","[]")>>)<<impl,
                                                                                                                        origin("requires @ file CredentialGenerator.java @ line 44","[]")>>
                        & (!(password_6_A = null)<<origin("requires @ file CredentialGenerator.java @ line 44","[]")>>)<<impl,
                                                                                                                         origin("requires @ file CredentialGenerator.java @ line 44","[]")>>)<<SC>>))<<SC>>))<<SC>>))<<SC>>)
        & {_voterId_5_A:=voterId_5_A
           || _password_6_A:=password_6_A}
            \[{
                exc_52_A=null;try {
                  result_46_A=de.polyas.core3.open.cred.CredentialGenerator.generateDataForVoter(_voterId_5_A,_password_6_A)@de.polyas.core3.open.cred.CredentialGenerator;
                }   catch (java.lang.Throwable e) {
                  exc_52_A=e;
                }
              }\] (  resultAtPost_46_A = result_46_A
                   & excAtPost_52_A = exc_52_A
                   & heapAtPost_A = heap))
   & {heap:=heapAtPre_B<<anonHeapFunction>>}
       (  wellFormed(heapAtPre_B<<anonHeapFunction>>)
        & heap = heapAtPre_B<<anonHeapFunction>>
        & (  ((  voterId_5_B = null
               |   boolean::select(heapAtPre_B<<anonHeapFunction>>,
                                   voterId_5_B,
                                   java.lang.Object::<created>)
                 = TRUE)<<SC>>)
           & ((  password_6_B = null
               |   boolean::select(heapAtPre_B<<anonHeapFunction>>,
                                   password_6_B,
                                   java.lang.Object::<created>)
                 = TRUE)<<SC>>))
        & ((  de.polyas.core3.open.cred.Crypto::<$inv>(heapAtPre_B<<anonHeapFunction>>)
            & ((  java.math.BigInteger::<$inv>(heapAtPre_B<<anonHeapFunction>>)
                & ((  de.polyas.core3.open.cred.CredentialGenerator::<$inv>(heapAtPre_B<<anonHeapFunction>>)<<impl>>
                    & ((  (!voterId_5_B = null)<<impl>>
                        & (!password_6_B = null)<<impl>>)<<SC>>))<<SC>>))<<SC>>))<<SC>>)
        & {_voterId_5_B:=voterId_5_B
           || _password_6_B:=password_6_B}
            \[{
                exc_52_B=null;try {
                  result_46_B=de.polyas.core3.open.cred.CredentialGenerator.generateDataForVoter(_voterId_5_B,_password_6_B)@de.polyas.core3.open.cred.CredentialGenerator;
                }   catch (java.lang.Throwable e) {
                  exc_52_B=e;
                }
              }\] (  resultAtPost_46_B = result_46_B
                   & excAtPost_52_B = exc_52_B
                   & heapAtPost_B = heap))
->   (   password_6_A = password_6_B
      -> (  java.lang.String::select(heapAtPost_A,
                                     resultAtPost_46_A,
                                     de.polyas.core3.open.cred.CredentialGenerator.GeneratedDataForVoter::$password)
          = java.lang.String::select(heapAtPost_B,
                                     resultAtPost_46_B,
                                     de.polyas.core3.open.cred.CredentialGenerator.GeneratedDataForVoter::$password))<<postCondition>>)
   & (  java.lang.String::select(heapAtPost_A,
                                 resultAtPost_46_A,
                                 de.polyas.core3.open.cred.CredentialGenerator.GeneratedDataForVoter::$hashedPassword)
      = java.lang.String::select(heapAtPost_B,
                                 resultAtPost_46_B,
                                 de.polyas.core3.open.cred.CredentialGenerator.GeneratedDataForVoter::$hashedPassword))<<postCondition>>
   & (       int::select(heapAtPre_A<<anonHeapFunction>>,
                         org.bouncycastle.math.ec.ECPoint::select(heapAtPre_A<<anonHeapFunction>>,
                                                                  org.bouncycastle.jce.spec.ECNamedCurveParameterSpec::select(heapAtPre_A<<anonHeapFunction>>,
                                                                                                                              de.polyas.core3.open.crypto.groups.ECGroup::select(heapAtPre_A<<anonHeapFunction>>,
                                                                                                                                                                                 null,
                                                                                                                                                                                 de.polyas.core3.open.cred.CredentialGenerator::$GROUP),
                                                                                                                              de.polyas.core3.open.crypto.groups.ECGroup::$group),
                                                                  org.bouncycastle.jce.spec.ECParameterSpec::$generator),
                         org.bouncycastle.math.ec.ECPoint::$value)
           = int::select(heapAtPre_B<<anonHeapFunction>>,
                         org.bouncycastle.math.ec.ECPoint::select(heapAtPre_B<<anonHeapFunction>>,
                                                                  org.bouncycastle.jce.spec.ECNamedCurveParameterSpec::select(heapAtPre_B<<anonHeapFunction>>,
                                                                                                                              de.polyas.core3.open.crypto.groups.ECGroup::select(heapAtPre_B<<anonHeapFunction>>,
                                                                                                                                                                                 null,
                                                                                                                                                                                 de.polyas.core3.open.cred.CredentialGenerator::$GROUP),
                                                                                                                              de.polyas.core3.open.crypto.groups.ECGroup::$group),
                                                                  org.bouncycastle.jce.spec.ECParameterSpec::$generator),
                         org.bouncycastle.math.ec.ECPoint::$value)
         &   int::select(heapAtPre_A<<anonHeapFunction>>,
                         org.bouncycastle.math.ec.custom.sec.SecP256K1Curve::select(heapAtPre_A<<anonHeapFunction>>,
                                                                                    de.polyas.core3.open.crypto.groups.ECGroup::select(heapAtPre_A<<anonHeapFunction>>,
                                                                                                                                       null,
                                                                                                                                       de.polyas.core3.open.cred.CredentialGenerator::$GROUP),
                                                                                    de.polyas.core3.open.crypto.groups.ECGroup::$curve),
                         org.bouncycastle.math.ec.ECCurve::$order)
           = int::select(heapAtPre_B<<anonHeapFunction>>,
                         org.bouncycastle.math.ec.custom.sec.SecP256K1Curve::select(heapAtPre_B<<anonHeapFunction>>,
                                                                                    de.polyas.core3.open.crypto.groups.ECGroup::select(heapAtPre_B<<anonHeapFunction>>,
                                                                                                                                       null,
                                                                                                                                       de.polyas.core3.open.cred.CredentialGenerator::$GROUP),
                                                                                    de.polyas.core3.open.crypto.groups.ECGroup::$curve),
                         org.bouncycastle.math.ec.ECCurve::$order)
      -> (  java.lang.String::select(heapAtPost_A,
                                     resultAtPost_46_A,
                                     de.polyas.core3.open.cred.CredentialGenerator.GeneratedDataForVoter::$publicSigningKey)
          = java.lang.String::select(heapAtPost_B,
                                     resultAtPost_46_B,
                                     de.polyas.core3.open.cred.CredentialGenerator.GeneratedDataForVoter::$publicSigningKey))<<postCondition>>)

}

\proof {
(keyLog "0" (keyUser "flo" ) (keyVersion ""))

(autoModeTime "50")

(branch "dummy ID"
(rule "unfold_computed_formula_1_of_generateDataForVoter_2065185875" (formula "1") (term "0"))
(rule "impRight" (formula "1"))
(rule "closeFalse" (formula "1"))
)
}
