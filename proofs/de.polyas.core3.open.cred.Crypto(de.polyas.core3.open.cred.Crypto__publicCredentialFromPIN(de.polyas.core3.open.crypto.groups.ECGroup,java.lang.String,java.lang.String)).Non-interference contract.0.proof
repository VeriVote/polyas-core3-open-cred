\profile "Java Profile";

\settings {
"#Proof-Settings-Config-File
#Thu Sep 26 16:32:20 CEST 2019
[Labels]UseOriginLabels=true
[StrategyProperty]QUERYAXIOM_OPTIONS_KEY=QUERYAXIOM_ON
[SMTSettings]invariantForall=false
[Strategy]ActiveStrategy=JavaCardDLStrategy
[StrategyProperty]USER_TACLETS_OPTIONS_KEY1=USER_TACLETS_OFF
[StrategyProperty]QUANTIFIERS_OPTIONS_KEY=QUANTIFIERS_NON_SPLITTING_WITH_PROGS
[StrategyProperty]USER_TACLETS_OPTIONS_KEY2=USER_TACLETS_OFF
[Choice]DefaultChoices=methodExpansion-methodExpansion\\:modularOnly , mergeGenerateIsWeakeningGoal-mergeGenerateIsWeakeningGoal\\:off , wdChecks-wdChecks\\:off , wdOperator-wdOperator\\:L , permissions-permissions\\:off , integerSimplificationRules-integerSimplificationRules\\:full , reach-reach\\:on , moreSeqRules-moreSeqRules\\:on , sequences-sequences\\:on , bigint-bigint\\:on , modelFields-modelFields\\:treatAsAxiom , Strings-Strings\\:on , JavaCard-JavaCard\\:off , runtimeExceptions-runtimeExceptions\\:allow , programRules-programRules\\:Java , intRules-intRules\\:javaSemantics , initialisation-initialisation\\:disableStaticInitialisation , assertions-assertions\\:on
[StrategyProperty]LOOP_OPTIONS_KEY=LOOP_INVARIANT
[StrategyProperty]INF_FLOW_CHECK_PROPERTY=INF_FLOW_CHECK_TRUE
[SMTSettings]UseBuiltUniqueness=false
[SMTSettings]explicitTypeHierarchy=false
[SMTSettings]instantiateHierarchyAssumptions=true
[StrategyProperty]NON_LIN_ARITH_OPTIONS_KEY=NON_LIN_ARITH_DEF_OPS
[SMTSettings]SelectedTaclets=
[StrategyProperty]DEP_OPTIONS_KEY=DEP_ON
[StrategyProperty]AUTO_INDUCTION_OPTIONS_KEY=AUTO_INDUCTION_OFF
[Strategy]MaximumNumberOfAutomaticApplications=10000
[StrategyProperty]STOPMODE_OPTIONS_KEY=STOPMODE_DEFAULT
[StrategyProperty]CLASS_AXIOM_OPTIONS_KEY=CLASS_AXIOM_FREE
[SMTSettings]useConstantsForBigOrSmallIntegers=true
[StrategyProperty]MPS_OPTIONS_KEY=MPS_MERGE
[StrategyProperty]SYMBOLIC_EXECUTION_NON_EXECUTION_BRANCH_HIDING_OPTIONS_KEY=SYMBOLIC_EXECUTION_NON_EXECUTION_BRANCH_HIDING_OFF
[Strategy]Timeout=-1
[StrategyProperty]SYMBOLIC_EXECUTION_ALIAS_CHECK_OPTIONS_KEY=SYMBOLIC_EXECUTION_ALIAS_CHECK_NEVER
[StrategyProperty]QUERY_NEW_OPTIONS_KEY=QUERY_OFF
[SMTSettings]useUninterpretedMultiplication=true
[StrategyProperty]BLOCK_OPTIONS_KEY=BLOCK_CONTRACT_INTERNAL
[StrategyProperty]METHOD_OPTIONS_KEY=METHOD_CONTRACT
[StrategyProperty]USER_TACLETS_OPTIONS_KEY3=USER_TACLETS_OFF
[SMTSettings]maxGenericSorts=2
[StrategyProperty]OSS_OPTIONS_KEY=OSS_ON
[StrategyProperty]SPLITTING_OPTIONS_KEY=SPLITTING_DELAYED
[SMTSettings]integersMinimum=-2147483645
[StrategyProperty]VBT_PHASE=VBT_SYM_EX
[SMTSettings]integersMaximum=2147483645
"
}

\javaSource "../src";



\sorts{
Heap;
Update;
de.polyas.core3.open.crypto.groups.ECGroup\extends de.polyas.core3.open.crypto.groups.CyclicGroup;
Field;
org.bouncycastle.jce.spec.ECNamedCurveParameterSpec\extends org.bouncycastle.jce.spec.ECParameterSpec;
org.bouncycastle.math.ec.ECPoint\extends java.lang.Object;
boolean;
org.bouncycastle.math.ec.custom.sec.SecP256K1Curve\extends org.bouncycastle.math.ec.ECCurve.AbstractFp;
java.lang.String\extends java.lang.Comparable, java.io.Serializable, java.lang.Object;
java.math.BigInteger\extends java.lang.Comparable, java.lang.Number;
int;
numbers;
java.lang.Throwable\extends java.io.Serializable, java.lang.Object;
LocSet;
Formula;
}

\predicates{
RELATED_BY_pow_425138489(de.polyas.core3.open.crypto.groups.ECGroup,org.bouncycastle.math.ec.ECPoint,java.math.BigInteger,Heap,de.polyas.core3.open.crypto.groups.ECGroup,org.bouncycastle.math.ec.ECPoint,java.lang.Throwable,Heap);
RELATED_BY_getG_359011122(org.bouncycastle.jce.spec.ECParameterSpec,Heap,org.bouncycastle.jce.spec.ECNamedCurveParameterSpec,org.bouncycastle.math.ec.ECPoint,java.lang.Throwable,Heap);
RELATED_BY_uniformHash_2142081982(java.math.BigInteger,java.lang.String,java.lang.String,java.lang.String,Heap,java.math.BigInteger,java.lang.Throwable,Heap);
RELATED_BY_getOrder_757678341(org.bouncycastle.math.ec.ECCurve,Heap,org.bouncycastle.math.ec.custom.sec.SecP256K1Curve,java.math.BigInteger,java.lang.Throwable,Heap);
}

\functions{
Heap heapAtPre_A;
Field de.polyas.core3.open.crypto.groups.ECGroup::$group;
org.bouncycastle.jce.spec.ECNamedCurveParameterSpec org.bouncycastle.jce.spec.ECNamedCurveParameterSpec::select(Heap,java.lang.Object,Field);
Field org.bouncycastle.jce.spec.ECParameterSpec::$generator;
org.bouncycastle.math.ec.ECPoint org.bouncycastle.math.ec.ECPoint::select(Heap,java.lang.Object,Field);
Field java.lang.Object::<created>;
boolean boolean::select(Heap,java.lang.Object,Field);
boolean TRUE;
Field de.polyas.core3.open.crypto.groups.ECGroup::$curve;
org.bouncycastle.math.ec.custom.sec.SecP256K1Curve org.bouncycastle.math.ec.custom.sec.SecP256K1Curve::select(Heap,java.lang.Object,Field);
Formula wellFormed(Heap);
Null null;
Field java.math.BigInteger::$ZERO;
java.math.BigInteger java.math.BigInteger::select(Heap,java.lang.Object,Field);
Field java.math.BigInteger::$value;
int int::select(Heap,java.lang.Object,Field);
numbers #;
numbers 0(numbers);
int Z(numbers);
Field org.bouncycastle.math.ec.ECCurve::$order;
Heap anon_heap_pow;
LocSet empty;
Heap anon(Heap,LocSet,Heap);
Heap heapAfter_pow_A_0;
org.bouncycastle.math.ec.custom.sec.SecP256K1Curve de_polyas_core3_open_crypto_groups_ECGroup_curve_0_A_0;
org.bouncycastle.jce.spec.ECNamedCurveParameterSpec de_polyas_core3_open_crypto_groups_ECGroup_group_0_A_0;
org.bouncycastle.math.ec.ECPoint org_bouncycastle_jce_spec_ECParameterSpec_generator_0_A_0;
Heap heapAtPost_A;
Heap heapAtPre_B;
Heap heapAfter_pow_B_0;
org.bouncycastle.math.ec.custom.sec.SecP256K1Curve de_polyas_core3_open_crypto_groups_ECGroup_curve_0_B_0;
org.bouncycastle.jce.spec.ECNamedCurveParameterSpec de_polyas_core3_open_crypto_groups_ECGroup_group_0_B_0;
org.bouncycastle.math.ec.ECPoint org_bouncycastle_jce_spec_ECParameterSpec_generator_0_B_0;
Heap heapAtPost_B;
Field org.bouncycastle.math.ec.ECPoint::$value;
Formula java.math.BigInteger::<$inv>(Heap);
Formula java.lang.Object::<inv>(Heap,java.lang.Object);
}

\programVariables{
Heap heap;
de.polyas.core3.open.crypto.groups.ECGroup group_28_A;
java.lang.String password_69_A;
java.lang.String voterId_52_A;
java.math.BigInteger result_571_A_0;
java.lang.Throwable exc_643_A_0;
java.lang.Throwable exc_644_A_0;
java.math.BigInteger result_572_A_0;
org.bouncycastle.math.ec.ECPoint result_573_A_0;
java.lang.Throwable exc_645_A_0;
java.lang.Throwable exc_646_A_0;
org.bouncycastle.math.ec.ECPoint result_574_A_0;
java.lang.Throwable exc_642_A;
org.bouncycastle.math.ec.ECPoint result_570_A;
org.bouncycastle.math.ec.ECPoint resultAtPost_570_A;
java.lang.Throwable excAtPost_642_A;
de.polyas.core3.open.crypto.groups.ECGroup group_28_B;
java.lang.String password_69_B;
java.lang.String voterId_52_B;
java.math.BigInteger result_571_B_0;
java.lang.Throwable exc_643_B_0;
java.lang.Throwable exc_644_B_0;
java.math.BigInteger result_572_B_0;
org.bouncycastle.math.ec.ECPoint result_573_B_0;
java.lang.Throwable exc_645_B_0;
java.lang.Throwable exc_646_B_0;
org.bouncycastle.math.ec.ECPoint result_574_B_0;
java.lang.Throwable exc_642_B;
org.bouncycastle.math.ec.ECPoint result_570_B;
org.bouncycastle.math.ec.ECPoint resultAtPost_570_B;
java.lang.Throwable excAtPost_642_B;
de.polyas.core3.open.crypto.groups.ECGroup _group_28_A;
java.lang.String _password_69_A;
java.lang.String _voterId_52_A;
de.polyas.core3.open.crypto.groups.ECGroup _group_28_B;
java.lang.String _password_69_B;
java.lang.String _voterId_52_B;
}

\rules{

unfold_computed_formula_5_of_publicCredentialFromPIN_599682891 {
  \schemaVar \term Heap sv_heapAtPre_A#31;
  \schemaVar \term de.polyas.core3.open.crypto.groups.ECGroup sv_group_28_A#28;
  \schemaVar \term java.lang.String sv_password_69_A#29;
  \schemaVar \term java.lang.String sv_voterId_52_A#30;
  \schemaVar \term org.bouncycastle.math.ec.ECPoint sv_resultAtPost_570_A#33;
  \schemaVar \term java.lang.Throwable sv_excAtPost_642_A#34;
  \schemaVar \term Heap sv_heapAtPost_A#35;
  \schemaVar \term Heap sv_heapAtPre_B#39;
  \schemaVar \term de.polyas.core3.open.crypto.groups.ECGroup sv_group_28_B#36;
  \schemaVar \term java.lang.String sv_password_69_B#37;
  \schemaVar \term java.lang.String sv_voterId_52_B#38;
  \schemaVar \term org.bouncycastle.math.ec.ECPoint sv_resultAtPost_570_B#41;
  \schemaVar \term java.lang.Throwable sv_excAtPost_642_B#42;
  \schemaVar \term Heap sv_heapAtPost_B#43;
  
  \find (
      {heap:=sv_heapAtPre_A#31}
        (  wellFormed(sv_heapAtPre_A#31)
         & heap = sv_heapAtPre_A#31
         & (  ((  sv_group_28_A#28 = null
                |   boolean::select(sv_heapAtPre_A#31,
                                    sv_group_28_A#28,
                                    java.lang.Object::<created>)
                  = TRUE)<<SC>>)
            & ((  sv_password_69_A#29 = null
                |   boolean::select(sv_heapAtPre_A#31,
                                    sv_password_69_A#29,
                                    java.lang.Object::<created>)
                  = TRUE)<<SC>>)
            & ((  sv_voterId_52_A#30 = null
                |   boolean::select(sv_heapAtPre_A#31,
                                    sv_voterId_52_A#30,
                                    java.lang.Object::<created>)
                  = TRUE)<<SC>>))
         & ((  java.math.BigInteger::<$inv>(sv_heapAtPre_A#31)
             & ((  java.lang.Object::<inv>(sv_heapAtPre_A#31, sv_group_28_A#28)
                 & ((  (!sv_group_28_A#28 = null)<<impl>>
                     & ((  (!sv_password_69_A#29 = null)<<impl>>
                         & (!sv_voterId_52_A#30 = null)<<impl>>)<<SC>>))<<SC>>))<<SC>>))<<SC>>)
         & {_group_28_A:=sv_group_28_A#28
            || _password_69_A:=sv_password_69_A#29
            || _voterId_52_A:=sv_voterId_52_A#30}
             \[{
                 exc_642_A=null;try {
                   result_570_A=de.polyas.core3.open.cred.Crypto.publicCredentialFromPIN(_group_28_A,_password_69_A,_voterId_52_A)@de.polyas.core3.open.cred.Crypto;
                 }   catch (java.lang.Throwable e) {
                   exc_642_A=e;
                 }
               }\] (  sv_resultAtPost_570_A#33 = result_570_A
                    & sv_excAtPost_642_A#34 = exc_642_A
                    & sv_heapAtPost_A#35 = heap))
    & {heap:=sv_heapAtPre_B#39}
        (  wellFormed(sv_heapAtPre_B#39)
         & heap = sv_heapAtPre_B#39
         & (  ((  sv_group_28_B#36 = null
                |   boolean::select(sv_heapAtPre_B#39,
                                    sv_group_28_B#36,
                                    java.lang.Object::<created>)
                  = TRUE)<<SC>>)
            & ((  sv_password_69_B#37 = null
                |   boolean::select(sv_heapAtPre_B#39,
                                    sv_password_69_B#37,
                                    java.lang.Object::<created>)
                  = TRUE)<<SC>>)
            & ((  sv_voterId_52_B#38 = null
                |   boolean::select(sv_heapAtPre_B#39,
                                    sv_voterId_52_B#38,
                                    java.lang.Object::<created>)
                  = TRUE)<<SC>>))
         & ((  java.math.BigInteger::<$inv>(sv_heapAtPre_B#39)
             & ((  java.lang.Object::<inv>(sv_heapAtPre_B#39, sv_group_28_B#36)
                 & ((  (!sv_group_28_B#36 = null)<<impl>>
                     & ((  (!sv_password_69_B#37 = null)<<impl>>
                         & (!sv_voterId_52_B#38 = null)<<impl>>)<<SC>>))<<SC>>))<<SC>>))<<SC>>)
         & {_group_28_B:=sv_group_28_B#36
            || _password_69_B:=sv_password_69_B#37
            || _voterId_52_B:=sv_voterId_52_B#38}
             \[{
                 exc_642_B=null;try {
                   result_570_B=de.polyas.core3.open.cred.Crypto.publicCredentialFromPIN(_group_28_B,_password_69_B,_voterId_52_B)@de.polyas.core3.open.cred.Crypto;
                 }   catch (java.lang.Throwable e) {
                   exc_642_B=e;
                 }
               }\] (  sv_resultAtPost_570_B#41 = result_570_B
                    & sv_excAtPost_642_B#42 = exc_642_B
                    & sv_heapAtPost_B#43 = heap))
  )
  \antecedentPolarity
  \replacewith (
      {heap:=sv_heapAtPre_A#31}
        (    boolean::select(sv_heapAtPre_A#31,
                             org.bouncycastle.math.ec.ECPoint::select(sv_heapAtPre_A#31,
                                                                      org.bouncycastle.jce.spec.ECNamedCurveParameterSpec::select(sv_heapAtPre_A#31,
                                                                                                                                  sv_group_28_A#28,
                                                                                                                                  de.polyas.core3.open.crypto.groups.ECGroup::$group),
                                                                      org.bouncycastle.jce.spec.ECParameterSpec::$generator),
                             java.lang.Object::<created>)
           = TRUE
         &   boolean::select(sv_heapAtPre_A#31,
                             org.bouncycastle.math.ec.custom.sec.SecP256K1Curve::select(sv_heapAtPre_A#31,
                                                                                        sv_group_28_A#28,
                                                                                        de.polyas.core3.open.crypto.groups.ECGroup::$curve),
                             java.lang.Object::<created>)
           = TRUE
         &   boolean::select(sv_heapAtPre_A#31,
                             org.bouncycastle.jce.spec.ECNamedCurveParameterSpec::select(sv_heapAtPre_A#31,
                                                                                         sv_group_28_A#28,
                                                                                         de.polyas.core3.open.crypto.groups.ECGroup::$group),
                             java.lang.Object::<created>)
           = TRUE
         & wellFormed(sv_heapAtPre_A#31)
         & sv_heapAtPre_A#31 = heap
         &   boolean::select(sv_heapAtPre_A#31,
                             sv_group_28_A#28,
                             java.lang.Object::<created>)
           = TRUE
         &   boolean::select(sv_heapAtPre_A#31,
                             sv_password_69_A#29,
                             java.lang.Object::<created>)
           = TRUE
         &   boolean::select(sv_heapAtPre_A#31,
                             sv_voterId_52_A#30,
                             java.lang.Object::<created>)
           = TRUE
         &   boolean::select(sv_heapAtPre_A#31,
                             java.math.BigInteger::select(sv_heapAtPre_A#31,
                                                          null,
                                                          java.math.BigInteger::$ZERO),
                             java.lang.Object::<created>)
           = TRUE
         &   int::select(sv_heapAtPre_A#31,
                         java.math.BigInteger::select(sv_heapAtPre_A#31,
                                                      null,
                                                      java.math.BigInteger::$ZERO),
                         java.math.BigInteger::$value)
           = Z(0(#))
         & wellFormed(heap)
         &   boolean::select(heap, result_571_A_0, java.lang.Object::<created>)
           = TRUE
         &   int::select(heap,
                         org.bouncycastle.math.ec.custom.sec.SecP256K1Curve::select(heap,
                                                                                    sv_group_28_A#28,
                                                                                    de.polyas.core3.open.crypto.groups.ECGroup::$curve),
                         org.bouncycastle.math.ec.ECCurve::$order)
           = int::select(heap, result_571_A_0, java.math.BigInteger::$value)
         & (exc_643_A_0 = null)<<impl>>
         &   boolean::select(heap,
                             org.bouncycastle.math.ec.custom.sec.SecP256K1Curve::select(heap,
                                                                                        sv_group_28_A#28,
                                                                                        de.polyas.core3.open.crypto.groups.ECGroup::$curve),
                             java.lang.Object::<created>)
           = TRUE
         & RELATED_BY_getOrder_757678341(org.bouncycastle.math.ec.custom.sec.SecP256K1Curve::select(heap,
                                                                                                    sv_group_28_A#28,
                                                                                                    de.polyas.core3.open.crypto.groups.ECGroup::$curve),
                                         heap,
                                         org.bouncycastle.math.ec.custom.sec.SecP256K1Curve::select(heap,
                                                                                                    sv_group_28_A#28,
                                                                                                    de.polyas.core3.open.crypto.groups.ECGroup::$curve),
                                         result_571_A_0,
                                         exc_643_A_0,
                                         heap)
         & exc_644_A_0 = null
         &   boolean::select(heap, result_572_A_0, java.lang.Object::<created>)
           = TRUE
         & RELATED_BY_uniformHash_2142081982(result_571_A_0,
                                             sv_password_69_A#29,
                                             sv_voterId_52_A#30,
                                             null,
                                             heap,
                                             result_572_A_0,
                                             exc_644_A_0,
                                             heap)
         &   boolean::select(heap,
                             java.math.BigInteger::select(heap,
                                                          null,
                                                          java.math.BigInteger::$ZERO),
                             java.lang.Object::<created>)
           = TRUE
         &   int::select(heap,
                         java.math.BigInteger::select(heap,
                                                      null,
                                                      java.math.BigInteger::$ZERO),
                         java.math.BigInteger::$value)
           = Z(0(#))
         &   boolean::select(heap,
                             sv_password_69_A#29,
                             java.lang.Object::<created>)
           = TRUE
         &   boolean::select(heap,
                             sv_voterId_52_A#30,
                             java.lang.Object::<created>)
           = TRUE
         &   boolean::select(heap, result_573_A_0, java.lang.Object::<created>)
           = TRUE
         &   org.bouncycastle.math.ec.ECPoint::select(heap,
                                                      org.bouncycastle.jce.spec.ECNamedCurveParameterSpec::select(heap,
                                                                                                                  sv_group_28_A#28,
                                                                                                                  de.polyas.core3.open.crypto.groups.ECGroup::$group),
                                                      org.bouncycastle.jce.spec.ECParameterSpec::$generator)
           = result_573_A_0
         & (exc_645_A_0 = null)<<impl>>
         & RELATED_BY_getG_359011122(org.bouncycastle.jce.spec.ECNamedCurveParameterSpec::select(heap,
                                                                                                 sv_group_28_A#28,
                                                                                                 de.polyas.core3.open.crypto.groups.ECGroup::$group),
                                     heap,
                                     org.bouncycastle.jce.spec.ECNamedCurveParameterSpec::select(heap,
                                                                                                 sv_group_28_A#28,
                                                                                                 de.polyas.core3.open.crypto.groups.ECGroup::$group),
                                     result_573_A_0,
                                     exc_645_A_0,
                                     heap)
         & wellFormed(anon_heap_pow<<anonHeapFunction>>)
         &   anon(heap, empty, anon_heap_pow<<anonHeapFunction>>)
           = heapAfter_pow_A_0
         & exc_646_A_0 = null
         & (    boolean::select(heap,
                                result_574_A_0,
                                java.lang.Object::<created>)
              = TRUE
            |   boolean::select(anon_heap_pow<<anonHeapFunction>>,
                                result_574_A_0,
                                java.lang.Object::<created>)
              = TRUE)
         &   \if (  boolean::select(heap,
                                    sv_group_28_A#28,
                                    java.lang.Object::<created>)
                  = TRUE)
                 \then (org.bouncycastle.math.ec.custom.sec.SecP256K1Curve::select(heap,
                                                                                   sv_group_28_A#28,
                                                                                   de.polyas.core3.open.crypto.groups.ECGroup::$curve))
                 \else (org.bouncycastle.math.ec.custom.sec.SecP256K1Curve::select(anon_heap_pow<<anonHeapFunction>>,
                                                                                   sv_group_28_A#28,
                                                                                   de.polyas.core3.open.crypto.groups.ECGroup::$curve))
           = de_polyas_core3_open_crypto_groups_ECGroup_curve_0_A_0<<selectSK>>
         &   \if (  boolean::select(heap,
                                    sv_group_28_A#28,
                                    java.lang.Object::<created>)
                  = TRUE)
                 \then (org.bouncycastle.jce.spec.ECNamedCurveParameterSpec::select(heap,
                                                                                    sv_group_28_A#28,
                                                                                    de.polyas.core3.open.crypto.groups.ECGroup::$group))
                 \else (org.bouncycastle.jce.spec.ECNamedCurveParameterSpec::select(anon_heap_pow<<anonHeapFunction>>,
                                                                                    sv_group_28_A#28,
                                                                                    de.polyas.core3.open.crypto.groups.ECGroup::$group))
           = de_polyas_core3_open_crypto_groups_ECGroup_group_0_A_0<<selectSK>>
         &   \if (  boolean::select(heap,
                                    de_polyas_core3_open_crypto_groups_ECGroup_group_0_A_0<<selectSK>>,
                                    java.lang.Object::<created>)
                  = TRUE)
                 \then (org.bouncycastle.math.ec.ECPoint::select(heap,
                                                                 de_polyas_core3_open_crypto_groups_ECGroup_group_0_A_0<<selectSK>>,
                                                                 org.bouncycastle.jce.spec.ECParameterSpec::$generator))
                 \else (org.bouncycastle.math.ec.ECPoint::select(anon_heap_pow<<anonHeapFunction>>,
                                                                 de_polyas_core3_open_crypto_groups_ECGroup_group_0_A_0<<selectSK>>,
                                                                 org.bouncycastle.jce.spec.ECParameterSpec::$generator))
           = org_bouncycastle_jce_spec_ECParameterSpec_generator_0_A_0<<selectSK>>
         & RELATED_BY_pow_425138489(sv_group_28_A#28,
                                    result_573_A_0,
                                    result_572_A_0,
                                    heap,
                                    sv_group_28_A#28,
                                    result_574_A_0,
                                    exc_646_A_0,
                                    heapAfter_pow_A_0)
         & !  org_bouncycastle_jce_spec_ECParameterSpec_generator_0_A_0<<selectSK>>
            = null
         & !  de_polyas_core3_open_crypto_groups_ECGroup_group_0_A_0<<selectSK>>
            = null
         & !  de_polyas_core3_open_crypto_groups_ECGroup_curve_0_A_0<<selectSK>>
            = null
         & !  org.bouncycastle.jce.spec.ECNamedCurveParameterSpec::select(heap,
                                                                          sv_group_28_A#28,
                                                                          de.polyas.core3.open.crypto.groups.ECGroup::$group)
            = null
         & !  org.bouncycastle.math.ec.custom.sec.SecP256K1Curve::select(heap,
                                                                         sv_group_28_A#28,
                                                                         de.polyas.core3.open.crypto.groups.ECGroup::$curve)
            = null
         & !result_574_A_0 = null
         & !  org.bouncycastle.math.ec.ECPoint::select(heap,
                                                       org.bouncycastle.jce.spec.ECNamedCurveParameterSpec::select(heap,
                                                                                                                   sv_group_28_A#28,
                                                                                                                   de.polyas.core3.open.crypto.groups.ECGroup::$group),
                                                       org.bouncycastle.jce.spec.ECParameterSpec::$generator)
            = null
         & !result_573_A_0 = null
         & !  java.math.BigInteger::select(heap,
                                           null,
                                           java.math.BigInteger::$ZERO)
            = null
         & !result_572_A_0 = null
         & !result_571_A_0 = null
         & !  org.bouncycastle.math.ec.ECPoint::select(sv_heapAtPre_A#31,
                                                       org.bouncycastle.jce.spec.ECNamedCurveParameterSpec::select(sv_heapAtPre_A#31,
                                                                                                                   sv_group_28_A#28,
                                                                                                                   de.polyas.core3.open.crypto.groups.ECGroup::$group),
                                                       org.bouncycastle.jce.spec.ECParameterSpec::$generator)
            = null
         & !  org.bouncycastle.math.ec.custom.sec.SecP256K1Curve::select(sv_heapAtPre_A#31,
                                                                         sv_group_28_A#28,
                                                                         de.polyas.core3.open.crypto.groups.ECGroup::$curve)
            = null
         & !  org.bouncycastle.jce.spec.ECNamedCurveParameterSpec::select(sv_heapAtPre_A#31,
                                                                          sv_group_28_A#28,
                                                                          de.polyas.core3.open.crypto.groups.ECGroup::$group)
            = null
         & !  java.math.BigInteger::select(sv_heapAtPre_A#31,
                                           null,
                                           java.math.BigInteger::$ZERO)
            = null
         & !{exc_642_A:=null
             || heap:=heapAfter_pow_A_0
             || result_570_A:=result_574_A_0}
              !(  result_570_A = sv_resultAtPost_570_A#33
                & exc_642_A = sv_excAtPost_642_A#34
                & sv_heapAtPost_A#35 = heap)
         & !sv_voterId_52_A#30 = null
         & !sv_password_69_A#29 = null
         & !sv_group_28_A#28 = null)
    & {heap:=sv_heapAtPre_B#39}
        (    boolean::select(sv_heapAtPre_B#39,
                             org.bouncycastle.math.ec.ECPoint::select(sv_heapAtPre_B#39,
                                                                      org.bouncycastle.jce.spec.ECNamedCurveParameterSpec::select(sv_heapAtPre_B#39,
                                                                                                                                  sv_group_28_B#36,
                                                                                                                                  de.polyas.core3.open.crypto.groups.ECGroup::$group),
                                                                      org.bouncycastle.jce.spec.ECParameterSpec::$generator),
                             java.lang.Object::<created>)
           = TRUE
         &   boolean::select(sv_heapAtPre_B#39,
                             org.bouncycastle.math.ec.custom.sec.SecP256K1Curve::select(sv_heapAtPre_B#39,
                                                                                        sv_group_28_B#36,
                                                                                        de.polyas.core3.open.crypto.groups.ECGroup::$curve),
                             java.lang.Object::<created>)
           = TRUE
         &   boolean::select(sv_heapAtPre_B#39,
                             org.bouncycastle.jce.spec.ECNamedCurveParameterSpec::select(sv_heapAtPre_B#39,
                                                                                         sv_group_28_B#36,
                                                                                         de.polyas.core3.open.crypto.groups.ECGroup::$group),
                             java.lang.Object::<created>)
           = TRUE
         & wellFormed(sv_heapAtPre_B#39)
         & sv_heapAtPre_B#39 = heap
         &   boolean::select(sv_heapAtPre_B#39,
                             sv_group_28_B#36,
                             java.lang.Object::<created>)
           = TRUE
         &   boolean::select(sv_heapAtPre_B#39,
                             sv_password_69_B#37,
                             java.lang.Object::<created>)
           = TRUE
         &   boolean::select(sv_heapAtPre_B#39,
                             sv_voterId_52_B#38,
                             java.lang.Object::<created>)
           = TRUE
         &   boolean::select(sv_heapAtPre_B#39,
                             java.math.BigInteger::select(sv_heapAtPre_B#39,
                                                          null,
                                                          java.math.BigInteger::$ZERO),
                             java.lang.Object::<created>)
           = TRUE
         &   int::select(sv_heapAtPre_B#39,
                         java.math.BigInteger::select(sv_heapAtPre_B#39,
                                                      null,
                                                      java.math.BigInteger::$ZERO),
                         java.math.BigInteger::$value)
           = Z(0(#))
         & wellFormed(heap)
         &   boolean::select(heap, result_571_B_0, java.lang.Object::<created>)
           = TRUE
         &   int::select(heap,
                         org.bouncycastle.math.ec.custom.sec.SecP256K1Curve::select(heap,
                                                                                    sv_group_28_B#36,
                                                                                    de.polyas.core3.open.crypto.groups.ECGroup::$curve),
                         org.bouncycastle.math.ec.ECCurve::$order)
           = int::select(heap, result_571_B_0, java.math.BigInteger::$value)
         & (exc_643_B_0 = null)<<impl>>
         &   boolean::select(heap,
                             org.bouncycastle.math.ec.custom.sec.SecP256K1Curve::select(heap,
                                                                                        sv_group_28_B#36,
                                                                                        de.polyas.core3.open.crypto.groups.ECGroup::$curve),
                             java.lang.Object::<created>)
           = TRUE
         & RELATED_BY_getOrder_757678341(org.bouncycastle.math.ec.custom.sec.SecP256K1Curve::select(heap,
                                                                                                    sv_group_28_B#36,
                                                                                                    de.polyas.core3.open.crypto.groups.ECGroup::$curve),
                                         heap,
                                         org.bouncycastle.math.ec.custom.sec.SecP256K1Curve::select(heap,
                                                                                                    sv_group_28_B#36,
                                                                                                    de.polyas.core3.open.crypto.groups.ECGroup::$curve),
                                         result_571_B_0,
                                         exc_643_B_0,
                                         heap)
         & exc_644_B_0 = null
         &   boolean::select(heap, result_572_B_0, java.lang.Object::<created>)
           = TRUE
         & RELATED_BY_uniformHash_2142081982(result_571_B_0,
                                             sv_password_69_B#37,
                                             sv_voterId_52_B#38,
                                             null,
                                             heap,
                                             result_572_B_0,
                                             exc_644_B_0,
                                             heap)
         &   boolean::select(heap,
                             java.math.BigInteger::select(heap,
                                                          null,
                                                          java.math.BigInteger::$ZERO),
                             java.lang.Object::<created>)
           = TRUE
         &   int::select(heap,
                         java.math.BigInteger::select(heap,
                                                      null,
                                                      java.math.BigInteger::$ZERO),
                         java.math.BigInteger::$value)
           = Z(0(#))
         &   boolean::select(heap,
                             sv_password_69_B#37,
                             java.lang.Object::<created>)
           = TRUE
         &   boolean::select(heap,
                             sv_voterId_52_B#38,
                             java.lang.Object::<created>)
           = TRUE
         &   boolean::select(heap, result_573_B_0, java.lang.Object::<created>)
           = TRUE
         &   org.bouncycastle.math.ec.ECPoint::select(heap,
                                                      org.bouncycastle.jce.spec.ECNamedCurveParameterSpec::select(heap,
                                                                                                                  sv_group_28_B#36,
                                                                                                                  de.polyas.core3.open.crypto.groups.ECGroup::$group),
                                                      org.bouncycastle.jce.spec.ECParameterSpec::$generator)
           = result_573_B_0
         & (exc_645_B_0 = null)<<impl>>
         & RELATED_BY_getG_359011122(org.bouncycastle.jce.spec.ECNamedCurveParameterSpec::select(heap,
                                                                                                 sv_group_28_B#36,
                                                                                                 de.polyas.core3.open.crypto.groups.ECGroup::$group),
                                     heap,
                                     org.bouncycastle.jce.spec.ECNamedCurveParameterSpec::select(heap,
                                                                                                 sv_group_28_B#36,
                                                                                                 de.polyas.core3.open.crypto.groups.ECGroup::$group),
                                     result_573_B_0,
                                     exc_645_B_0,
                                     heap)
         & wellFormed(anon_heap_pow<<anonHeapFunction>>)
         &   anon(heap, empty, anon_heap_pow<<anonHeapFunction>>)
           = heapAfter_pow_B_0
         & exc_646_B_0 = null
         & (    boolean::select(heap,
                                result_574_B_0,
                                java.lang.Object::<created>)
              = TRUE
            |   boolean::select(anon_heap_pow<<anonHeapFunction>>,
                                result_574_B_0,
                                java.lang.Object::<created>)
              = TRUE)
         &   \if (  boolean::select(heap,
                                    sv_group_28_B#36,
                                    java.lang.Object::<created>)
                  = TRUE)
                 \then (org.bouncycastle.math.ec.custom.sec.SecP256K1Curve::select(heap,
                                                                                   sv_group_28_B#36,
                                                                                   de.polyas.core3.open.crypto.groups.ECGroup::$curve))
                 \else (org.bouncycastle.math.ec.custom.sec.SecP256K1Curve::select(anon_heap_pow<<anonHeapFunction>>,
                                                                                   sv_group_28_B#36,
                                                                                   de.polyas.core3.open.crypto.groups.ECGroup::$curve))
           = de_polyas_core3_open_crypto_groups_ECGroup_curve_0_B_0<<selectSK>>
         &   \if (  boolean::select(heap,
                                    sv_group_28_B#36,
                                    java.lang.Object::<created>)
                  = TRUE)
                 \then (org.bouncycastle.jce.spec.ECNamedCurveParameterSpec::select(heap,
                                                                                    sv_group_28_B#36,
                                                                                    de.polyas.core3.open.crypto.groups.ECGroup::$group))
                 \else (org.bouncycastle.jce.spec.ECNamedCurveParameterSpec::select(anon_heap_pow<<anonHeapFunction>>,
                                                                                    sv_group_28_B#36,
                                                                                    de.polyas.core3.open.crypto.groups.ECGroup::$group))
           = de_polyas_core3_open_crypto_groups_ECGroup_group_0_B_0<<selectSK>>
         &   \if (  boolean::select(heap,
                                    de_polyas_core3_open_crypto_groups_ECGroup_group_0_B_0<<selectSK>>,
                                    java.lang.Object::<created>)
                  = TRUE)
                 \then (org.bouncycastle.math.ec.ECPoint::select(heap,
                                                                 de_polyas_core3_open_crypto_groups_ECGroup_group_0_B_0<<selectSK>>,
                                                                 org.bouncycastle.jce.spec.ECParameterSpec::$generator))
                 \else (org.bouncycastle.math.ec.ECPoint::select(anon_heap_pow<<anonHeapFunction>>,
                                                                 de_polyas_core3_open_crypto_groups_ECGroup_group_0_B_0<<selectSK>>,
                                                                 org.bouncycastle.jce.spec.ECParameterSpec::$generator))
           = org_bouncycastle_jce_spec_ECParameterSpec_generator_0_B_0<<selectSK>>
         & RELATED_BY_pow_425138489(sv_group_28_B#36,
                                    result_573_B_0,
                                    result_572_B_0,
                                    heap,
                                    sv_group_28_B#36,
                                    result_574_B_0,
                                    exc_646_B_0,
                                    heapAfter_pow_B_0)
         & !  org_bouncycastle_jce_spec_ECParameterSpec_generator_0_B_0<<selectSK>>
            = null
         & !  de_polyas_core3_open_crypto_groups_ECGroup_group_0_B_0<<selectSK>>
            = null
         & !  de_polyas_core3_open_crypto_groups_ECGroup_curve_0_B_0<<selectSK>>
            = null
         & !  org.bouncycastle.jce.spec.ECNamedCurveParameterSpec::select(heap,
                                                                          sv_group_28_B#36,
                                                                          de.polyas.core3.open.crypto.groups.ECGroup::$group)
            = null
         & !  org.bouncycastle.math.ec.custom.sec.SecP256K1Curve::select(heap,
                                                                         sv_group_28_B#36,
                                                                         de.polyas.core3.open.crypto.groups.ECGroup::$curve)
            = null
         & !result_574_B_0 = null
         & !  org.bouncycastle.math.ec.ECPoint::select(heap,
                                                       org.bouncycastle.jce.spec.ECNamedCurveParameterSpec::select(heap,
                                                                                                                   sv_group_28_B#36,
                                                                                                                   de.polyas.core3.open.crypto.groups.ECGroup::$group),
                                                       org.bouncycastle.jce.spec.ECParameterSpec::$generator)
            = null
         & !result_573_B_0 = null
         & !  java.math.BigInteger::select(heap,
                                           null,
                                           java.math.BigInteger::$ZERO)
            = null
         & !result_572_B_0 = null
         & !result_571_B_0 = null
         & !  org.bouncycastle.math.ec.ECPoint::select(sv_heapAtPre_B#39,
                                                       org.bouncycastle.jce.spec.ECNamedCurveParameterSpec::select(sv_heapAtPre_B#39,
                                                                                                                   sv_group_28_B#36,
                                                                                                                   de.polyas.core3.open.crypto.groups.ECGroup::$group),
                                                       org.bouncycastle.jce.spec.ECParameterSpec::$generator)
            = null
         & !  org.bouncycastle.math.ec.custom.sec.SecP256K1Curve::select(sv_heapAtPre_B#39,
                                                                         sv_group_28_B#36,
                                                                         de.polyas.core3.open.crypto.groups.ECGroup::$curve)
            = null
         & !  org.bouncycastle.jce.spec.ECNamedCurveParameterSpec::select(sv_heapAtPre_B#39,
                                                                          sv_group_28_B#36,
                                                                          de.polyas.core3.open.crypto.groups.ECGroup::$group)
            = null
         & !  java.math.BigInteger::select(sv_heapAtPre_B#39,
                                           null,
                                           java.math.BigInteger::$ZERO)
            = null
         & !{exc_642_B:=null
             || heap:=heapAfter_pow_B_0
             || result_570_B:=result_574_B_0}
              !(  result_570_B = sv_resultAtPost_570_B#41
                & exc_642_B = sv_excAtPost_642_B#42
                & sv_heapAtPost_B#43 = heap)
         & !sv_voterId_52_B#38 = null
         & !sv_password_69_B#37 = null
         & !sv_group_28_B#36 = null)
  )
  \heuristics ( concrete )
};

Use_information_flow_contract_for_pow_425138489_0 {
  \schemaVar \term org.bouncycastle.math.ec.ECPoint find_var_5#66;
  \schemaVar \term java.math.BigInteger find_var_6#67;
  \schemaVar \term Heap find_heap#70;
  \schemaVar \term de.polyas.core3.open.crypto.groups.ECGroup find_var_4#65;
  \schemaVar \term org.bouncycastle.math.ec.ECPoint find_result_574#68;
  \schemaVar \term java.lang.Throwable find_exc_646#69;
  \schemaVar \term Heap find_heapAfter_pow#71;
  \schemaVar \term org.bouncycastle.math.ec.ECPoint assumes_var_5#73;
  \schemaVar \term java.math.BigInteger assumes_var_6#74;
  \schemaVar \term Heap assumes_heap#77;
  \schemaVar \term de.polyas.core3.open.crypto.groups.ECGroup assumes_var_4#72;
  \schemaVar \term org.bouncycastle.math.ec.ECPoint assumes_result_574#75;
  \schemaVar \term java.lang.Throwable assumes_exc_646#76;
  \schemaVar \term Heap assumes_heapAfter_pow#78;
  
  \assumes ( RELATED_BY_pow_425138489(assumes_var_4#72,
                                      assumes_var_5#73,
                                      assumes_var_6#74,
                                      assumes_heap#77,
                                      assumes_var_4#72,
                                      assumes_result_574#75,
                                      assumes_exc_646#76,
                                      assumes_heapAfter_pow#78)
            ⟹
             
  )
  \find (
    RELATED_BY_pow_425138489(find_var_4#65,
                             find_var_5#66,
                             find_var_6#67,
                             find_heap#70,
                             find_var_4#65,
                             find_result_574#68,
                             find_exc_646#69,
                             find_heapAfter_pow#71)
  )
  \antecedentPolarity
  \replacewith (
    RELATED_BY_pow_425138489(find_var_4#65,
                             find_var_5#66,
                             find_var_6#67,
                             find_heap#70,
                             find_var_4#65,
                             find_result_574#68,
                             find_exc_646#69,
                             find_heapAfter_pow#71)
  )
  \add (      (java.math.BigInteger::<$inv>(find_heap#70)
            & ((  java.lang.Object::<inv>(find_heap#70, find_var_5#66)
                & ((  java.lang.Object::<inv>(find_heap#70, find_var_6#67)
                    & ((  java.lang.Object::<inv>(find_heap#70, find_var_4#65)<<impl>>
                        & ((  (!(find_var_5#66 = null)<<origin("requires @ file ECGroup.java @ line 33","[]")>>)<<impl,
                                                                                                                  origin("requires @ file ECGroup.java @ line 33","[]")>>
                            & (!(find_var_6#67 = null)<<origin("requires @ file ECGroup.java @ line 33","[]")>>)<<impl,
                                                                                                                  origin("requires @ file ECGroup.java @ line 33","[]")>>)<<SC>>))<<SC>>))<<SC>>))<<SC>>))<<SC>>
            & ((  java.math.BigInteger::<$inv>(assumes_heap#77)
                & ((  java.lang.Object::<inv>(assumes_heap#77, assumes_var_5#73)
                    & ((  java.lang.Object::<inv>(assumes_heap#77,
                                                  assumes_var_6#74)
                        & ((  java.lang.Object::<inv>(assumes_heap#77,
                                                      assumes_var_4#72)<<impl>>
                            & ((  (!(assumes_var_5#73 = null)<<origin("requires @ file ECGroup.java @ line 33","[]")>>)<<impl,
                                                                                                                         origin("requires @ file ECGroup.java @ line 33","[]")>>
                                & (!(assumes_var_6#74 = null)<<origin("requires @ file ECGroup.java @ line 33","[]")>>)<<impl,
                                                                                                                         origin("requires @ file ECGroup.java @ line 33","[]")>>)<<SC>>))<<SC>>))<<SC>>))<<SC>>))<<SC>>)
         ->     int::select(find_heap#70,
                            find_var_5#66,
                            org.bouncycastle.math.ec.ECPoint::$value)
              = int::select(assumes_heap#77,
                            assumes_var_5#73,
                            org.bouncycastle.math.ec.ECPoint::$value)
            &   int::select(find_heap#70,
                            find_var_6#67,
                            java.math.BigInteger::$value)
              = int::select(assumes_heap#77,
                            assumes_var_6#74,
                            java.math.BigInteger::$value)
            &   int::select(find_heap#70,
                            org.bouncycastle.math.ec.custom.sec.SecP256K1Curve::select(find_heap#70,
                                                                                       find_var_4#65,
                                                                                       de.polyas.core3.open.crypto.groups.ECGroup::$curve),
                            org.bouncycastle.math.ec.ECCurve::$order)
              = int::select(assumes_heap#77,
                            org.bouncycastle.math.ec.custom.sec.SecP256K1Curve::select(assumes_heap#77,
                                                                                       assumes_var_4#72,
                                                                                       de.polyas.core3.open.crypto.groups.ECGroup::$curve),
                            org.bouncycastle.math.ec.ECCurve::$order)
         -> (  int::select(find_heapAfter_pow#71,
                           find_result_574#68,
                           org.bouncycastle.math.ec.ECPoint::$value)
             = int::select(assumes_heapAfter_pow#78,
                           assumes_result_574#75,
                           org.bouncycastle.math.ec.ECPoint::$value))<<postCondition>>
        ⟹
         
  )
  \heuristics ( information_flow_contract_appl )
};

Use_information_flow_contract_for_getG_359011122_0 {
  \schemaVar \term org.bouncycastle.jce.spec.ECNamedCurveParameterSpec find_e_3#57;
  \schemaVar \term org.bouncycastle.math.ec.ECPoint find_result_573#58;
  \schemaVar \term java.lang.Throwable find_exc_645#59;
  \schemaVar \term Heap find_heap#60;
  \schemaVar \term org.bouncycastle.jce.spec.ECNamedCurveParameterSpec assumes_e_3#61;
  \schemaVar \term org.bouncycastle.math.ec.ECPoint assumes_result_573#62;
  \schemaVar \term java.lang.Throwable assumes_exc_645#63;
  \schemaVar \term Heap assumes_heap#64;
  
  \assumes ( RELATED_BY_getG_359011122(assumes_e_3#61,
                                       assumes_heap#64,
                                       assumes_e_3#61,
                                       assumes_result_573#62,
                                       assumes_exc_645#63,
                                       assumes_heap#64)
            ⟹
             
  )
  \find (
    RELATED_BY_getG_359011122(find_e_3#57,
                              find_heap#60,
                              find_e_3#57,
                              find_result_573#58,
                              find_exc_645#59,
                              find_heap#60)
  )
  \antecedentPolarity
  \replacewith (
    RELATED_BY_getG_359011122(find_e_3#57,
                              find_heap#60,
                              find_e_3#57,
                              find_result_573#58,
                              find_exc_645#59,
                              find_heap#60)
  )
  \add (      java.lang.Object::<inv>(find_heap#60, find_e_3#57)<<impl>>
            & java.lang.Object::<inv>(assumes_heap#64, assumes_e_3#61)<<impl>>
         ->   int::select(find_heap#60,
                          org.bouncycastle.math.ec.ECPoint::select(find_heap#60,
                                                                   find_e_3#57,
                                                                   org.bouncycastle.jce.spec.ECParameterSpec::$generator),
                          org.bouncycastle.math.ec.ECPoint::$value)
            = int::select(assumes_heap#64,
                          org.bouncycastle.math.ec.ECPoint::select(assumes_heap#64,
                                                                   assumes_e_3#61,
                                                                   org.bouncycastle.jce.spec.ECParameterSpec::$generator),
                          org.bouncycastle.math.ec.ECPoint::$value)
         -> (  int::select(find_heap#60,
                           find_result_573#58,
                           org.bouncycastle.math.ec.ECPoint::$value)
             = int::select(assumes_heap#64,
                           assumes_result_573#62,
                           org.bouncycastle.math.ec.ECPoint::$value))<<postCondition>>
        ⟹
         
  )
  \heuristics ( information_flow_contract_appl )
};

Use_information_flow_contract_for_uniformHash_2142081982_0 {
  \schemaVar \term java.math.BigInteger find_var#40;
  \schemaVar \term java.lang.String find_var_1#41;
  \schemaVar \term java.lang.String find_var_2#42;
  \schemaVar \term Null find_var_3#43;
  \schemaVar \term java.math.BigInteger find_result_572#44;
  \schemaVar \term java.lang.Throwable find_exc_644#45;
  \schemaVar \term Heap find_heap#46;
  \schemaVar \term java.math.BigInteger assumes_var#47;
  \schemaVar \term java.lang.String assumes_var_1#48;
  \schemaVar \term java.lang.String assumes_var_2#49;
  \schemaVar \term Null assumes_var_3#50;
  \schemaVar \term java.math.BigInteger assumes_result_572#51;
  \schemaVar \term java.lang.Throwable assumes_exc_644#52;
  \schemaVar \term Heap assumes_heap#53;
  
  \assumes ( RELATED_BY_uniformHash_2142081982(assumes_var#47,
                                               assumes_var_1#48,
                                               assumes_var_2#49,
                                               assumes_var_3#50,
                                               assumes_heap#53,
                                               assumes_result_572#51,
                                               assumes_exc_644#52,
                                               assumes_heap#53)
            ⟹
             
  )
  \find (
    RELATED_BY_uniformHash_2142081982(find_var#40,
                                      find_var_1#41,
                                      find_var_2#42,
                                      find_var_3#43,
                                      find_heap#46,
                                      find_result_572#44,
                                      find_exc_644#45,
                                      find_heap#46)
  )
  \antecedentPolarity
  \replacewith (
    RELATED_BY_uniformHash_2142081982(find_var#40,
                                      find_var_1#41,
                                      find_var_2#42,
                                      find_var_3#43,
                                      find_heap#46,
                                      find_result_572#44,
                                      find_exc_644#45,
                                      find_heap#46)
  )
  \add (      (java.math.BigInteger::<$inv>(find_heap#46)
            & (!(find_var#40 = null)<<origin("requires @ file Hashes.java @ line 71","[]")>>)<<impl,
                                                                                               origin("requires @ file Hashes.java @ line 71","[]")>>)<<SC>>
            & ((  java.math.BigInteger::<$inv>(assumes_heap#53)
                & (!(assumes_var#47 = null)<<origin("requires @ file Hashes.java @ line 71","[]")>>)<<impl,
                                                                                                      origin("requires @ file Hashes.java @ line 71","[]")>>)<<SC>>)
         -> (  int::select(find_heap#46,
                           find_result_572#44,
                           java.math.BigInteger::$value)
             = int::select(assumes_heap#53,
                           assumes_result_572#51,
                           java.math.BigInteger::$value))<<postCondition>>
        ⟹
         
  )
  \heuristics ( information_flow_contract_appl )
};

Use_information_flow_contract_for_getOrder_757678341_0 {
  \schemaVar \term org.bouncycastle.math.ec.custom.sec.SecP256K1Curve find_s#32;
  \schemaVar \term java.math.BigInteger find_result_571#33;
  \schemaVar \term java.lang.Throwable find_exc_643#34;
  \schemaVar \term Heap find_heap#35;
  \schemaVar \term org.bouncycastle.math.ec.custom.sec.SecP256K1Curve assumes_s#36;
  \schemaVar \term java.math.BigInteger assumes_result_571#37;
  \schemaVar \term java.lang.Throwable assumes_exc_643#38;
  \schemaVar \term Heap assumes_heap#39;
  
  \assumes ( RELATED_BY_getOrder_757678341(assumes_s#36,
                                           assumes_heap#39,
                                           assumes_s#36,
                                           assumes_result_571#37,
                                           assumes_exc_643#38,
                                           assumes_heap#39)
            ⟹
             
  )
  \find (
    RELATED_BY_getOrder_757678341(find_s#32,
                                  find_heap#35,
                                  find_s#32,
                                  find_result_571#33,
                                  find_exc_643#34,
                                  find_heap#35)
  )
  \antecedentPolarity
  \replacewith (
    RELATED_BY_getOrder_757678341(find_s#32,
                                  find_heap#35,
                                  find_s#32,
                                  find_result_571#33,
                                  find_exc_643#34,
                                  find_heap#35)
  )
  \add (      java.lang.Object::<inv>(find_heap#35, find_s#32)<<impl>>
            & java.lang.Object::<inv>(assumes_heap#39, assumes_s#36)<<impl>>
         ->   int::select(find_heap#35,
                          find_s#32,
                          org.bouncycastle.math.ec.ECCurve::$order)
            = int::select(assumes_heap#39,
                          assumes_s#36,
                          org.bouncycastle.math.ec.ECCurve::$order)
         -> (  int::select(find_heap#35,
                           find_result_571#33,
                           java.math.BigInteger::$value)
             = int::select(assumes_heap#39,
                           assumes_result_571#37,
                           java.math.BigInteger::$value))<<postCondition>>
        ⟹
         
  )
  \heuristics ( information_flow_contract_appl )
};
}

\problem {
     {heap:=heapAtPre_A<<anonHeapFunction>>}
       (  wellFormed(heapAtPre_A<<anonHeapFunction>>)
        & heap = heapAtPre_A<<anonHeapFunction>>
        & (  ((  group_28_A = null
               |   boolean::select(heapAtPre_A<<anonHeapFunction>>,
                                   group_28_A,
                                   java.lang.Object::<created>)
                 = TRUE)<<SC>>)
           & ((  password_69_A = null
               |   boolean::select(heapAtPre_A<<anonHeapFunction>>,
                                   password_69_A,
                                   java.lang.Object::<created>)
                 = TRUE)<<SC>>)
           & ((  voterId_52_A = null
               |   boolean::select(heapAtPre_A<<anonHeapFunction>>,
                                   voterId_52_A,
                                   java.lang.Object::<created>)
                 = TRUE)<<SC>>))
        & ((  java.math.BigInteger::<$inv>(heapAtPre_A<<anonHeapFunction>>)
            & ((  java.lang.Object::<inv>(heapAtPre_A<<anonHeapFunction>>,
                                          group_28_A)
                & ((  (!(group_28_A = null)<<origin("requires @ file Crypto.java @ line 83","[]")>>)<<impl,
                                                                                                      origin("requires @ file Crypto.java @ line 83","[]")>>
                    & ((  (!(password_69_A = null)<<origin("requires @ file Crypto.java @ line 83","[]")>>)<<impl,
                                                                                                             origin("requires @ file Crypto.java @ line 83","[]")>>
                        & (!(voterId_52_A = null)<<origin("requires @ file Crypto.java @ line 83","[]")>>)<<impl,
                                                                                                            origin("requires @ file Crypto.java @ line 83","[]")>>)<<SC>>))<<SC>>))<<SC>>))<<SC>>)
        & {_group_28_A:=group_28_A
           || _password_69_A:=password_69_A
           || _voterId_52_A:=voterId_52_A}
            \[{
                exc_642_A=null;try {
                  result_570_A=de.polyas.core3.open.cred.Crypto.publicCredentialFromPIN(_group_28_A,_password_69_A,_voterId_52_A)@de.polyas.core3.open.cred.Crypto;
                }   catch (java.lang.Throwable e) {
                  exc_642_A=e;
                }
              }\] (  resultAtPost_570_A = result_570_A
                   & excAtPost_642_A = exc_642_A
                   & heapAtPost_A = heap))
   & {heap:=heapAtPre_B<<anonHeapFunction>>}
       (  wellFormed(heapAtPre_B<<anonHeapFunction>>)
        & heap = heapAtPre_B<<anonHeapFunction>>
        & (  ((  group_28_B = null
               |   boolean::select(heapAtPre_B<<anonHeapFunction>>,
                                   group_28_B,
                                   java.lang.Object::<created>)
                 = TRUE)<<SC>>)
           & ((  password_69_B = null
               |   boolean::select(heapAtPre_B<<anonHeapFunction>>,
                                   password_69_B,
                                   java.lang.Object::<created>)
                 = TRUE)<<SC>>)
           & ((  voterId_52_B = null
               |   boolean::select(heapAtPre_B<<anonHeapFunction>>,
                                   voterId_52_B,
                                   java.lang.Object::<created>)
                 = TRUE)<<SC>>))
        & ((  java.math.BigInteger::<$inv>(heapAtPre_B<<anonHeapFunction>>)
            & ((  java.lang.Object::<inv>(heapAtPre_B<<anonHeapFunction>>,
                                          group_28_B)
                & ((  (!group_28_B = null)<<impl>>
                    & ((  (!password_69_B = null)<<impl>>
                        & (!voterId_52_B = null)<<impl>>)<<SC>>))<<SC>>))<<SC>>))<<SC>>)
        & {_group_28_B:=group_28_B
           || _password_69_B:=password_69_B
           || _voterId_52_B:=voterId_52_B}
            \[{
                exc_642_B=null;try {
                  result_570_B=de.polyas.core3.open.cred.Crypto.publicCredentialFromPIN(_group_28_B,_password_69_B,_voterId_52_B)@de.polyas.core3.open.cred.Crypto;
                }   catch (java.lang.Throwable e) {
                  exc_642_B=e;
                }
              }\] (  resultAtPost_570_B = result_570_B
                   & excAtPost_642_B = exc_642_B
                   & heapAtPost_B = heap))
->     int::select(heapAtPre_A<<anonHeapFunction>>,
                   org.bouncycastle.math.ec.ECPoint::select(heapAtPre_A<<anonHeapFunction>>,
                                                            org.bouncycastle.jce.spec.ECNamedCurveParameterSpec::select(heapAtPre_A<<anonHeapFunction>>,
                                                                                                                        group_28_A,
                                                                                                                        de.polyas.core3.open.crypto.groups.ECGroup::$group),
                                                            org.bouncycastle.jce.spec.ECParameterSpec::$generator),
                   org.bouncycastle.math.ec.ECPoint::$value)
     = int::select(heapAtPre_B<<anonHeapFunction>>,
                   org.bouncycastle.math.ec.ECPoint::select(heapAtPre_B<<anonHeapFunction>>,
                                                            org.bouncycastle.jce.spec.ECNamedCurveParameterSpec::select(heapAtPre_B<<anonHeapFunction>>,
                                                                                                                        group_28_B,
                                                                                                                        de.polyas.core3.open.crypto.groups.ECGroup::$group),
                                                            org.bouncycastle.jce.spec.ECParameterSpec::$generator),
                   org.bouncycastle.math.ec.ECPoint::$value)
   &   int::select(heapAtPre_A<<anonHeapFunction>>,
                   org.bouncycastle.math.ec.custom.sec.SecP256K1Curve::select(heapAtPre_A<<anonHeapFunction>>,
                                                                              group_28_A,
                                                                              de.polyas.core3.open.crypto.groups.ECGroup::$curve),
                   org.bouncycastle.math.ec.ECCurve::$order)
     = int::select(heapAtPre_B<<anonHeapFunction>>,
                   org.bouncycastle.math.ec.custom.sec.SecP256K1Curve::select(heapAtPre_B<<anonHeapFunction>>,
                                                                              group_28_B,
                                                                              de.polyas.core3.open.crypto.groups.ECGroup::$curve),
                   org.bouncycastle.math.ec.ECCurve::$order)
-> (  int::select(heapAtPost_A,
                  resultAtPost_570_A,
                  org.bouncycastle.math.ec.ECPoint::$value)
    = int::select(heapAtPost_B,
                  resultAtPost_570_B,
                  org.bouncycastle.math.ec.ECPoint::$value))<<postCondition>>

}

\proof {
(keyLog "0" (keyUser "flo" ) (keyVersion "57d504cc0f"))

(autoModeTime "885")

(branch "dummy ID"
(rule "unfold_computed_formula_5_of_publicCredentialFromPIN_599682891" (formula "1") (term "0"))
(rule "impRight" (formula "1"))
(rule "impRight" (formula "2"))
(rule "andLeft" (formula "2"))
(rule "andLeft" (formula "1"))
 (builtin "One Step Simplification" (formula "4"))
 (builtin "One Step Simplification" (formula "3"))
(rule "andLeft" (formula "4"))
(rule "andLeft" (formula "3"))
(rule "notLeft" (formula "6"))
(rule "andLeft" (formula "5"))
(rule "andLeft" (formula "3"))
(rule "notLeft" (formula "5"))
(rule "andLeft" (formula "5"))
(rule "notLeft" (formula "7"))
(rule "andLeft" (formula "3"))
(rule "notLeft" (formula "5"))
(rule "notLeft" (formula "6"))
(rule "andLeft" (formula "5"))
(rule "andLeft" (formula "3"))
(rule "notLeft" (formula "5"))
(rule "andLeft" (formula "6"))
(rule "andLeft" (formula "5"))
(rule "andLeft" (formula "4"))
(rule "andLeft" (formula "3"))
(rule "andLeft" (formula "9"))
(rule "notLeft" (formula "8"))
(rule "andLeft" (formula "7"))
(rule "andLeft" (formula "5"))
(rule "andLeft" (formula "3"))
(rule "notLeft" (formula "5"))
(rule "andLeft" (formula "8"))
(rule "notLeft" (formula "10"))
(rule "notLeft" (formula "4"))
(rule "andLeft" (formula "3"))
(rule "andLeft" (formula "8"))
(rule "notLeft" (formula "10"))
(rule "andLeft" (formula "3"))
(rule "notLeft" (formula "5"))
(rule "notLeft" (formula "9"))
(rule "andLeft" (formula "8"))
(rule "andLeft" (formula "3"))
(rule "notLeft" (formula "5"))
(rule "andLeft" (formula "8"))
(rule "notLeft" (formula "10"))
(rule "andLeft" (formula "3"))
(rule "notLeft" (formula "5"))
(rule "notLeft" (formula "9"))
(rule "andLeft" (formula "8"))
(rule "andLeft" (formula "3"))
(rule "notLeft" (formula "5"))
(rule "andLeft" (formula "8"))
(rule "notLeft" (formula "10"))
(rule "andLeft" (formula "3"))
(rule "notLeft" (formula "5"))
(rule "notLeft" (formula "9"))
(rule "andLeft" (formula "8"))
(rule "notLeft" (formula "4"))
(rule "andLeft" (formula "3"))
(rule "andLeft" (formula "8"))
(rule "notLeft" (formula "10"))
(rule "andLeft" (formula "3"))
(rule "notLeft" (formula "5"))
(rule "andLeft" (formula "8"))
(rule "notLeft" (formula "10"))
(rule "andLeft" (formula "3"))
(rule "notLeft" (formula "5"))
(rule "notLeft" (formula "9"))
(rule "andLeft" (formula "8"))
(rule "notLeft" (formula "4"))
(rule "andLeft" (formula "3"))
(rule "notLeft" (formula "9"))
(rule "andLeft" (formula "8"))
(rule "notLeft" (formula "4"))
(rule "andLeft" (formula "3"))
(rule "notLeft" (formula "9"))
(rule "andLeft" (formula "8"))
(rule "notLeft" (formula "4"))
(rule "andLeft" (formula "3"))
(rule "notLeft" (formula "9"))
(rule "andLeft" (formula "8"))
(rule "notLeft" (formula "4"))
(rule "andLeft" (formula "3"))
(rule "notLeft" (formula "9"))
(rule "andLeft" (formula "8"))
(rule "notLeft" (formula "4"))
(rule "andLeft" (formula "3"))
(rule "andLeft" (formula "8"))
(rule "andLeft" (formula "3"))
(rule "andLeft" (formula "9"))
(rule "andLeft" (formula "3"))
(rule "andLeft" (formula "10"))
(rule "andLeft" (formula "3"))
(rule "andLeft" (formula "11"))
(rule "andLeft" (formula "3"))
(rule "andLeft" (formula "12"))
(rule "andLeft" (formula "3"))
(rule "andLeft" (formula "13"))
(rule "andLeft" (formula "3"))
(rule "andLeft" (formula "14"))
(rule "andLeft" (formula "3"))
(rule "andLeft" (formula "14"))
(rule "andLeft" (formula "3"))
(rule "andLeft" (formula "15"))
(rule "andLeft" (formula "3"))
(rule "andLeft" (formula "16"))
(rule "andLeft" (formula "3"))
(rule "andLeft" (formula "17"))
(rule "andLeft" (formula "3"))
(rule "andLeft" (formula "18"))
(rule "andLeft" (formula "3"))
(rule "andLeft" (formula "19"))
(rule "andLeft" (formula "3"))
(rule "andLeft" (formula "20"))
(rule "andLeft" (formula "3"))
(rule "andLeft" (formula "21"))
(rule "andLeft" (formula "3"))
(rule "andLeft" (formula "22"))
(rule "andLeft" (formula "3"))
(rule "andLeft" (formula "23"))
(rule "andLeft" (formula "3"))
(rule "andLeft" (formula "24"))
(rule "andLeft" (formula "3"))
(rule "andLeft" (formula "25"))
(rule "andLeft" (formula "3"))
(rule "andLeft" (formula "26"))
(rule "andLeft" (formula "3"))
(rule "andLeft" (formula "27"))
(rule "andLeft" (formula "3"))
(rule "andLeft" (formula "28"))
(rule "andLeft" (formula "3"))
(rule "andLeft" (formula "29"))
(rule "andLeft" (formula "3"))
(rule "andLeft" (formula "30"))
(rule "andLeft" (formula "3"))
(rule "andLeft" (formula "31"))
(rule "andLeft" (formula "3"))
(rule "andLeft" (formula "31"))
(rule "andLeft" (formula "3"))
(rule "andLeft" (formula "31"))
(rule "andLeft" (formula "3"))
(rule "andLeft" (formula "31"))
(rule "andLeft" (formula "3"))
(rule "andLeft" (formula "31"))
(rule "andLeft" (formula "3"))
(rule "andLeft" (formula "32"))
(rule "andLeft" (formula "3"))
(rule "andLeft" (formula "32"))
(rule "andLeft" (formula "3"))
(rule "andLeft" (formula "33"))
(rule "andLeft" (formula "3"))
(rule "Use_information_flow_contract_for_getOrder_757678341_0" (formula "41") (ifseqformula "11"))
(rule "doubleImpLeft" (formula "41"))
(branch "pre_A & pre_B getOrder_757678341_0 (information flow)"
   (rule "andRight" (formula "64"))
   (branch
      (rule "eqSymm" (formula "31"))
      (rule "eqSymm" (formula "1"))
      (rule "eqSymm" (formula "93"))
      (rule "eqSymm" (formula "2"))
      (rule "eqSymm" (formula "62"))
      (rule "replace_known_left" (formula "58") (term "0,0") (ifseqformula "35"))
       (builtin "One Step Simplification" (formula "58"))
      (rule "applyEqReverse" (formula "59") (term "1,0,0,0") (ifseqformula "58"))
      (rule "applyEqReverse" (formula "68") (term "0") (ifseqformula "58"))
      (rule "applyEqReverse" (formula "59") (term "1,1,0") (ifseqformula "58"))
      (rule "applyEqReverse" (formula "59") (term "1,2,0") (ifseqformula "58"))
      (rule "hideAuxiliaryEq" (formula "58"))
      (rule "replace_known_left" (formula "26") (term "0,0") (ifseqformula "5"))
       (builtin "One Step Simplification" (formula "26"))
      (rule "applyEqReverse" (formula "67") (term "0") (ifseqformula "26"))
      (rule "hideAuxiliaryEq" (formula "26"))
      (rule "replace_known_left" (formula "56") (term "0,0") (ifseqformula "34"))
       (builtin "One Step Simplification" (formula "56"))
      (rule "applyEqReverse" (formula "66") (term "0") (ifseqformula "56"))
      (rule "hideAuxiliaryEq" (formula "56"))
      (rule "replace_known_left" (formula "26") (term "0,0") (ifseqformula "5"))
       (builtin "One Step Simplification" (formula "26"))
      (rule "applyEqReverse" (formula "64") (term "0") (ifseqformula "26"))
      (rule "applyEqReverse" (formula "27") (term "1,1,0") (ifseqformula "26"))
      (rule "applyEqReverse" (formula "27") (term "1,2,0") (ifseqformula "26"))
      (rule "applyEqReverse" (formula "27") (term "1,0,0,0") (ifseqformula "26"))
      (rule "hideAuxiliaryEq" (formula "26"))
      (rule "replace_known_left" (formula "55") (term "0,0") (ifseqformula "32"))
       (builtin "One Step Simplification" (formula "55"))
      (rule "applyEqReverse" (formula "62") (term "0") (ifseqformula "55"))
      (rule "hideAuxiliaryEq" (formula "55"))
      (rule "replace_known_left" (formula "26") (term "0,0") (ifseqformula "4"))
       (builtin "One Step Simplification" (formula "26"))
      (rule "applyEqReverse" (formula "60") (term "0") (ifseqformula "26"))
      (rule "hideAuxiliaryEq" (formula "26"))
      (rule "applyEq" (formula "1") (term "1,1") (ifseqformula "20"))
      (rule "applyEq" (formula "67") (term "0") (ifseqformula "20"))
      (rule "applyEq" (formula "22") (term "4") (ifseqformula "21"))
      (rule "applyEq" (formula "54") (term "5") (ifseqformula "55"))
      (rule "applyEq" (formula "11") (term "4") (ifseqformula "9"))
      (rule "applyEq" (formula "54") (term "6") (ifseqformula "52"))
      (rule "applyEq" (formula "38") (term "4") (ifseqformula "36"))
      (rule "applyEq" (formula "14") (term "6") (ifseqformula "12"))
      (rule "applyEq" (formula "30") (term "1,0") (ifseqformula "47"))
      (rule "applyEq" (formula "59") (term "0") (ifseqformula "54"))
      (rule "applyEq" (formula "26") (term "6") (ifseqformula "24"))
      (rule "applyEq" (formula "26") (term "5") (ifseqformula "27"))
      (rule "applyEq" (formula "58") (term "0") (ifseqformula "27"))
      (rule "applyEq" (formula "1") (term "1,0") (ifseqformula "46"))
      (rule "applyEqRigid" (formula "79") (term "0,1") (ifseqformula "29"))
      (rule "applyEqRigid" (formula "79") (term "0,0") (ifseqformula "56"))
      (rule "applyEq" (formula "52") (term "1,0,0") (ifseqformula "54"))
      (rule "applyEq" (formula "66") (term "0") (ifseqformula "46"))
      (rule "applyEq" (formula "2") (term "0") (ifseqformula "34"))
      (rule "applyEq" (formula "48") (term "4") (ifseqformula "47"))
      (rule "applyEq" (formula "25") (term "1,0,0") (ifseqformula "27"))
      (rule "applyEq" (formula "52") (term "1,0,1") (ifseqformula "54"))
      (rule "applyEq" (formula "3") (term "1,0") (ifseqformula "20"))
      (rule "applyEq" (formula "24") (term "1,0,1") (ifseqformula "26"))
      (rule "applyEq" (formula "39") (term "6") (ifseqformula "37"))
      (rule "applyEq" (formula "2") (term "1") (ifseqformula "7"))
      (rule "applyEq" (formula "33") (term "1") (ifseqformula "2"))
      (rule "pullOutSelect" (formula "77") (term "1") (inst "selectSK=org_bouncycastle_math_ec_ECPoint_value_0"))
      (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "23"))
       (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "58")))
      (rule "ifthenelse_negated" (formula "1") (term "0"))
      (rule "pullOutSelect" (formula "78") (term "0") (inst "selectSK=org_bouncycastle_math_ec_ECPoint_value_1"))
      (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "51"))
       (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "60")))
      (rule "ifthenelse_negated" (formula "1") (term "0"))
      (rule "Class_invariant_axiom_for_org_bouncycastle_math_ec_custom_sec_SecP256K1Curve" (formula "58"))
      (rule "closeTrue" (formula "58"))
   )
   (branch
      (rule "eqSymm" (formula "31"))
      (rule "eqSymm" (formula "1"))
      (rule "eqSymm" (formula "93"))
      (rule "eqSymm" (formula "2"))
      (rule "eqSymm" (formula "62"))
      (rule "replace_known_left" (formula "27") (term "0,0") (ifseqformula "5"))
       (builtin "One Step Simplification" (formula "27"))
      (rule "applyEqReverse" (formula "28") (term "1,0,0,0") (ifseqformula "27"))
      (rule "applyEqReverse" (formula "28") (term "1,1,0") (ifseqformula "27"))
      (rule "applyEqReverse" (formula "28") (term "1,2,0") (ifseqformula "27"))
      (rule "applyEqReverse" (formula "67") (term "0") (ifseqformula "27"))
      (rule "hideAuxiliaryEq" (formula "27"))
      (rule "replace_known_left" (formula "57") (term "0,0") (ifseqformula "34"))
       (builtin "One Step Simplification" (formula "57"))
      (rule "applyEqReverse" (formula "66") (term "0") (ifseqformula "57"))
      (rule "applyEqReverse" (formula "58") (term "1,0,0,0") (ifseqformula "57"))
      (rule "applyEqReverse" (formula "58") (term "1,2,0") (ifseqformula "57"))
      (rule "applyEqReverse" (formula "58") (term "1,1,0") (ifseqformula "57"))
      (rule "hideAuxiliaryEq" (formula "57"))
      (rule "replace_known_left" (formula "56") (term "0,0") (ifseqformula "34"))
       (builtin "One Step Simplification" (formula "56"))
      (rule "applyEqReverse" (formula "66") (term "0") (ifseqformula "56"))
      (rule "hideAuxiliaryEq" (formula "56"))
      (rule "replace_known_left" (formula "26") (term "0,0") (ifseqformula "5"))
       (builtin "One Step Simplification" (formula "26"))
      (rule "applyEqReverse" (formula "64") (term "0") (ifseqformula "26"))
      (rule "hideAuxiliaryEq" (formula "26"))
      (rule "replace_known_left" (formula "55") (term "0,0") (ifseqformula "32"))
       (builtin "One Step Simplification" (formula "55"))
      (rule "applyEqReverse" (formula "62") (term "0") (ifseqformula "55"))
      (rule "hideAuxiliaryEq" (formula "55"))
      (rule "replace_known_left" (formula "26") (term "0,0") (ifseqformula "4"))
       (builtin "One Step Simplification" (formula "26"))
      (rule "applyEqReverse" (formula "60") (term "0") (ifseqformula "26"))
      (rule "hideAuxiliaryEq" (formula "26"))
      (rule "applyEq" (formula "2") (term "0") (ifseqformula "35"))
      (rule "applyEq" (formula "81") (term "0,1") (ifseqformula "29"))
      (rule "applyEq" (formula "1") (term "1,1") (ifseqformula "20"))
      (rule "applyEq" (formula "49") (term "4") (ifseqformula "48"))
      (rule "applyEq" (formula "26") (term "5") (ifseqformula "27"))
      (rule "applyEq" (formula "26") (term "6") (ifseqformula "24"))
      (rule "applyEq" (formula "60") (term "0") (ifseqformula "55"))
      (rule "applyEq" (formula "59") (term "0") (ifseqformula "27"))
      (rule "applyEq" (formula "25") (term "1,0,0") (ifseqformula "27"))
      (rule "applyEq" (formula "68") (term "0") (ifseqformula "47"))
      (rule "applyEq" (formula "30") (term "1,0") (ifseqformula "47"))
      (rule "applyEq" (formula "53") (term "6") (ifseqformula "51"))
      (rule "applyEq" (formula "14") (term "6") (ifseqformula "12"))
      (rule "applyEq" (formula "40") (term "6") (ifseqformula "38"))
      (rule "applyEq" (formula "52") (term "1,0,1") (ifseqformula "54"))
      (rule "applyEq" (formula "66") (term "0") (ifseqformula "20"))
      (rule "applyEq" (formula "52") (term "1,0,0") (ifseqformula "54"))
      (rule "applyEqRigid" (formula "78") (term "0,0") (ifseqformula "56"))
      (rule "applyEq" (formula "22") (term "4") (ifseqformula "21"))
      (rule "applyEq" (formula "1") (term "1,0") (ifseqformula "46"))
      (rule "applyEq" (formula "37") (term "4") (ifseqformula "35"))
      (rule "applyEq" (formula "3") (term "1,0") (ifseqformula "20"))
      (rule "applyEq" (formula "24") (term "1,0,1") (ifseqformula "26"))
      (rule "applyEq" (formula "10") (term "4") (ifseqformula "8"))
      (rule "applyEq" (formula "52") (term "5") (ifseqformula "53"))
      (rule "applyEq" (formula "2") (term "1") (ifseqformula "7"))
      (rule "applyEq" (formula "33") (term "1") (ifseqformula "2"))
      (rule "pullOutSelect" (formula "77") (term "1") (inst "selectSK=org_bouncycastle_math_ec_ECPoint_value_0"))
      (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "23"))
       (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "58")))
      (rule "ifthenelse_negated" (formula "1") (term "0"))
      (rule "pullOutSelect" (formula "78") (term "0") (inst "selectSK=org_bouncycastle_math_ec_ECPoint_value_1"))
      (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "51"))
       (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "60")))
      (rule "ifthenelse_negated" (formula "1") (term "0"))
      (rule "Class_invariant_axiom_for_org_bouncycastle_math_ec_custom_sec_SecP256K1Curve" (formula "58"))
      (rule "closeTrue" (formula "58"))
   )
)
(branch "pre getOrder_757678341_0 (information flow)"
   (rule "eqSymm" (formula "93"))
   (rule "eqSymm" (formula "31"))
   (rule "eqSymm" (formula "2"))
   (rule "close" (formula "64") (ifseqformula "2"))
)
(branch "post getOrder_757678341_0 (information flow)"
   (rule "Use_information_flow_contract_for_uniformHash_2142081982_0" (formula "45") (ifseqformula "14"))
   (rule "Use_information_flow_contract_for_getG_359011122_0" (formula "54") (ifseqformula "22"))
   (rule "Use_information_flow_contract_for_pow_425138489_0" (formula "63") (ifseqformula "29"))
   (rule "eqSymm" (formula "2"))
   (rule "eqSymm" (formula "31"))
   (rule "eqSymm" (formula "66"))
   (rule "eqSymm" (formula "96"))
   (rule "eqSymm" (formula "1"))
   (rule "replace_known_left" (formula "26") (term "0,0") (ifseqformula "5"))
    (builtin "One Step Simplification" (formula "26"))
   (rule "applyEqReverse" (formula "72") (term "0") (ifseqformula "26"))
   (rule "hideAuxiliaryEq" (formula "26"))
   (rule "replace_known_left" (formula "26") (term "0,0") (ifseqformula "5"))
    (builtin "One Step Simplification" (formula "26"))
   (rule "applyEqReverse" (formula "27") (term "1,0,0,0") (ifseqformula "26"))
   (rule "applyEqReverse" (formula "27") (term "1,2,0") (ifseqformula "26"))
   (rule "applyEqReverse" (formula "27") (term "1,1,0") (ifseqformula "26"))
   (rule "applyEqReverse" (formula "69") (term "0") (ifseqformula "26"))
   (rule "hideAuxiliaryEq" (formula "26"))
   (rule "replace_known_left" (formula "58") (term "0,0") (ifseqformula "33"))
    (builtin "One Step Simplification" (formula "58"))
   (rule "applyEqReverse" (formula "69") (term "0") (ifseqformula "58"))
   (rule "hideAuxiliaryEq" (formula "58"))
   (rule "replace_known_left" (formula "58") (term "0,0") (ifseqformula "33"))
    (builtin "One Step Simplification" (formula "58"))
   (rule "applyEqReverse" (formula "59") (term "1,1,0") (ifseqformula "58"))
   (rule "applyEqReverse" (formula "67") (term "0") (ifseqformula "58"))
   (rule "applyEqReverse" (formula "59") (term "1,2,0") (ifseqformula "58"))
   (rule "applyEqReverse" (formula "59") (term "1,0,0,0") (ifseqformula "58"))
   (rule "hideAuxiliaryEq" (formula "58"))
   (rule "replace_known_left" (formula "26") (term "0,0") (ifseqformula "4"))
    (builtin "One Step Simplification" (formula "26"))
   (rule "applyEqReverse" (formula "64") (term "0") (ifseqformula "26"))
   (rule "hideAuxiliaryEq" (formula "26"))
   (rule "replace_known_left" (formula "57") (term "0,0") (ifseqformula "31"))
    (builtin "One Step Simplification" (formula "57"))
   (rule "applyEqReverse" (formula "63") (term "0") (ifseqformula "57"))
   (rule "hideAuxiliaryEq" (formula "57"))
   (rule "replace_known_left" (formula "51") (term "0,1") (ifseqformula "1"))
    (builtin "One Step Simplification" (formula "51"))
   (rule "replace_known_right" (formula "42") (term "0,1,0,0") (ifseqformula "69"))
    (builtin "One Step Simplification" (formula "42") (ifInst ""  (formula "68")))
   (rule "replace_known_right" (formula "57") (term "0,0,1,1,1,1,0,0") (ifseqformula "65"))
    (builtin "One Step Simplification" (formula "57") (ifInst ""  (formula "67")) (ifInst ""  (formula "64")) (ifInst ""  (formula "66")) (ifInst ""  (formula "2")))
   (rule "applyEq" (formula "1") (term "1,0") (ifseqformula "49"))
   (rule "applyEq" (formula "57") (term "1,1,1,1") (ifseqformula "27"))
   (rule "applyEq" (formula "57") (term "1,0,1,1") (ifseqformula "59"))
   (rule "applyEq" (formula "52") (term "4") (ifseqformula "50"))
   (rule "applyEq" (formula "26") (term "6") (ifseqformula "24"))
   (rule "applyEq" (formula "2") (term "0") (ifseqformula "35"))
   (rule "applyEq" (formula "58") (term "5") (ifseqformula "59"))
   (rule "applyEq" (formula "71") (term "0") (ifseqformula "49"))
   (rule "applyEq" (formula "56") (term "1,0,1") (ifseqformula "59"))
   (rule "applyEq" (formula "83") (term "0,1") (ifseqformula "29"))
   (rule "applyEq" (formula "25") (term "1,0,1") (ifseqformula "27"))
   (rule "applyEq" (formula "22") (term "4") (ifseqformula "21"))
   (rule "applyEq" (formula "43") (term "6") (ifseqformula "40"))
   (rule "applyEq" (formula "70") (term "0") (ifseqformula "20"))
   (rule "applyEq" (formula "58") (term "6") (ifseqformula "55"))
   (rule "applyEq" (formula "3") (term "1,0") (ifseqformula "20"))
   (rule "applyEq" (formula "1") (term "1,1") (ifseqformula "19"))
   (rule "replace_known_left" (formula "50") (term "1") (ifseqformula "1"))
    (builtin "One Step Simplification" (formula "50"))
   (rule "true_left" (formula "50"))
   (rule "replace_known_left" (formula "55") (term "0,0,1") (ifseqformula "1"))
    (builtin "One Step Simplification" (formula "55"))
   (rule "applyEqRigid" (formula "80") (term "0,0") (ifseqformula "59"))
   (rule "replace_known_right" (formula "55") (term "1,1") (ifseqformula "80"))
    (builtin "One Step Simplification" (formula "55"))
   (rule "applyEq" (formula "61") (term "0") (ifseqformula "57"))
   (rule "applyEq" (formula "13") (term "6") (ifseqformula "11"))
   (rule "applyEq" (formula "54") (term "1,0,0") (ifseqformula "57"))
   (rule "applyEq" (formula "60") (term "0") (ifseqformula "26"))
   (rule "applyEq" (formula "38") (term "4") (ifseqformula "35"))
   (rule "applyEq" (formula "24") (term "1,0,0") (ifseqformula "26"))
   (rule "applyEq" (formula "25") (term "5") (ifseqformula "26"))
   (rule "applyEq" (formula "29") (term "1,0") (ifseqformula "48"))
   (rule "applyEq" (formula "10") (term "4") (ifseqformula "8"))
   (rule "applyEq" (formula "2") (term "1") (ifseqformula "7"))
   (rule "applyEq" (formula "32") (term "1") (ifseqformula "35"))
   (rule "pullOutSelect" (formula "78") (term "1") (inst "selectSK=org_bouncycastle_math_ec_ECPoint_value_0"))
   (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "22"))
    (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "59")))
   (rule "ifthenelse_negated" (formula "1") (term "0"))
   (rule "pullOutSelect" (formula "79") (term "0") (inst "selectSK=org_bouncycastle_math_ec_ECPoint_value_1"))
   (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "52"))
    (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "61")))
   (rule "ifthenelse_negated" (formula "1") (term "0"))
   (rule "Static_class_invariant_axiom_for_java_math_BigInteger" (formula "41") (term "0,0"))
   (rule "replace_known_left" (formula "41") (term "1,0,0") (ifseqformula "44"))
    (builtin "One Step Simplification" (formula "41") (ifInst ""  (formula "73")))
   (rule "Static_class_invariant_axiom_for_java_math_BigInteger" (formula "55") (term "0,1,0"))
   (rule "replace_known_right" (formula "55") (term "0,0,0,1,0") (ifseqformula "72"))
    (builtin "One Step Simplification" (formula "55") (ifInst ""  (formula "16")))
   (rule "commute_or" (formula "54"))
   (rule "commute_or" (formula "25"))
   (rule "Static_class_invariant_axiom_for_java_math_BigInteger" (formula "41") (term "0"))
   (rule "replace_known_left" (formula "41") (term "1,0") (ifseqformula "16"))
    (builtin "One Step Simplification" (formula "41") (ifInst ""  (formula "72")))
   (rule "replace_known_left" (formula "55") (term "0,1") (ifseqformula "41"))
    (builtin "One Step Simplification" (formula "55"))
   (rule "notLeft" (formula "55"))
   (rule "Class_invariant_axiom_for_de_polyas_core3_open_crypto_groups_ECGroup" (formula "59") (term "1,1,1"))
   (rule "replace_known_right" (formula "59") (term "0,0,0,1,1,1") (ifseqformula "68"))
    (builtin "One Step Simplification" (formula "59") (ifInst ""  (formula "70")))
   (rule "Class_invariant_axiom_for_org_bouncycastle_jce_spec_ECNamedCurveParameterSpec" (formula "59") (term "1,1,1,1"))
   (rule "applyEq" (formula "59") (term "1,1,1,1,1,1") (ifseqformula "20"))
   (rule "applyEq" (formula "59") (term "0,0,0,1,1,1,1") (ifseqformula "20"))
   (rule "replace_known_right" (formula "59") (term "0,0,1,1,1,1") (ifseqformula "62"))
    (builtin "One Step Simplification" (formula "59"))
   (rule "Class_invariant_axiom_for_java_math_BigInteger" (formula "59") (term "0,1,1"))
   (rule "replace_known_left" (formula "59") (term "1,0,1,1") (ifseqformula "16"))
    (builtin "One Step Simplification" (formula "59") (ifInst ""  (formula "72")))
   (rule "Class_invariant_axiom_for_java_math_BigInteger" (formula "59") (term "0,1,1,0"))
   (rule "replace_known_left" (formula "59") (term "1,0,1,1,0") (ifseqformula "44"))
    (builtin "One Step Simplification" (formula "59") (ifInst ""  (formula "73")))
   (rule "Class_invariant_axiom_for_org_bouncycastle_math_ec_custom_sec_SecP256K1Curve" (formula "59") (term "0,1,1"))
    (builtin "One Step Simplification" (formula "59"))
   (rule "Static_class_invariant_axiom_for_java_math_BigInteger" (formula "59") (term "0,0"))
   (rule "replace_known_right" (formula "59") (term "0,0,0,0") (ifseqformula "73"))
    (builtin "One Step Simplification" (formula "59") (ifInst ""  (formula "44")))
   (rule "Class_invariant_axiom_for_org_bouncycastle_math_ec_ECPoint" (formula "59") (term "0,0"))
    (builtin "One Step Simplification" (formula "59"))
   (rule "Class_invariant_axiom_for_org_bouncycastle_math_ec_ECPoint" (formula "59") (term "1"))
    (builtin "One Step Simplification" (formula "59"))
   (rule "Class_invariant_axiom_for_de_polyas_core3_open_crypto_groups_ECGroup" (formula "59"))
   (rule "replace_known_right" (formula "59") (term "0,0,0") (ifseqformula "69"))
    (builtin "One Step Simplification" (formula "59") (ifInst ""  (formula "71")))
   (rule "Class_invariant_axiom_for_org_bouncycastle_math_ec_custom_sec_SecP256K1Curve" (formula "59") (term "0"))
    (builtin "One Step Simplification" (formula "59"))
   (rule "Class_invariant_axiom_for_org_bouncycastle_jce_spec_ECNamedCurveParameterSpec" (formula "59"))
   (rule "applyEq" (formula "59") (term "1,1") (ifseqformula "48"))
   (rule "applyEq" (formula "59") (term "0,0,0") (ifseqformula "48"))
   (rule "replace_known_right" (formula "59") (term "0,0") (ifseqformula "63"))
    (builtin "One Step Simplification" (formula "59"))
   (rule "Class_invariant_axiom_for_org_bouncycastle_math_ec_ECPoint" (formula "59"))
   (rule "closeTrue" (formula "59"))
)
)
}
