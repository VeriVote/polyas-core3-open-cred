\profile "Java Profile";

\settings {
"#Proof-Settings-Config-File
#Sun Nov 10 21:34:21 CET 2019
[Labels]UseOriginLabels=false
[StrategyProperty]QUERYAXIOM_OPTIONS_KEY=QUERYAXIOM_ON
[SMTSettings]invariantForall=false
[Strategy]ActiveStrategy=JavaCardDLStrategy
[StrategyProperty]USER_TACLETS_OPTIONS_KEY1=USER_TACLETS_OFF
[StrategyProperty]QUANTIFIERS_OPTIONS_KEY=QUANTIFIERS_NON_SPLITTING_WITH_PROGS
[StrategyProperty]USER_TACLETS_OPTIONS_KEY2=USER_TACLETS_OFF
[Choice]DefaultChoices=methodExpansion-methodExpansion\\:modularOnly , mergeGenerateIsWeakeningGoal-mergeGenerateIsWeakeningGoal\\:off , wdChecks-wdChecks\\:off , wdOperator-wdOperator\\:L , permissions-permissions\\:off , integerSimplificationRules-integerSimplificationRules\\:full , reach-reach\\:on , moreSeqRules-moreSeqRules\\:on , sequences-sequences\\:on , bigint-bigint\\:on , modelFields-modelFields\\:treatAsAxiom , Strings-Strings\\:on , JavaCard-JavaCard\\:off , runtimeExceptions-runtimeExceptions\\:allow , programRules-programRules\\:Java , intRules-intRules\\:javaSemantics , initialisation-initialisation\\:disableStaticInitialisation , assertions-assertions\\:on
[StrategyProperty]LOOP_OPTIONS_KEY=LOOP_INVARIANT
[StrategyProperty]INF_FLOW_CHECK_PROPERTY=INF_FLOW_CHECK_FALSE
[SMTSettings]UseBuiltUniqueness=false
[SMTSettings]explicitTypeHierarchy=false
[SMTSettings]instantiateHierarchyAssumptions=true
[StrategyProperty]NON_LIN_ARITH_OPTIONS_KEY=NON_LIN_ARITH_DEF_OPS
[SMTSettings]SelectedTaclets=
[StrategyProperty]DEP_OPTIONS_KEY=DEP_ON
[StrategyProperty]AUTO_INDUCTION_OPTIONS_KEY=AUTO_INDUCTION_OFF
[Strategy]MaximumNumberOfAutomaticApplications=10000
[StrategyProperty]STOPMODE_OPTIONS_KEY=STOPMODE_DEFAULT
[StrategyProperty]CLASS_AXIOM_OPTIONS_KEY=CLASS_AXIOM_FREE
[SMTSettings]useConstantsForBigOrSmallIntegers=true
[StrategyProperty]MPS_OPTIONS_KEY=MPS_MERGE
[StrategyProperty]SYMBOLIC_EXECUTION_NON_EXECUTION_BRANCH_HIDING_OPTIONS_KEY=SYMBOLIC_EXECUTION_NON_EXECUTION_BRANCH_HIDING_OFF
[Strategy]Timeout=-1
[StrategyProperty]SYMBOLIC_EXECUTION_ALIAS_CHECK_OPTIONS_KEY=SYMBOLIC_EXECUTION_ALIAS_CHECK_NEVER
[StrategyProperty]QUERY_NEW_OPTIONS_KEY=QUERY_OFF
[SMTSettings]useUninterpretedMultiplication=true
[StrategyProperty]BLOCK_OPTIONS_KEY=BLOCK_CONTRACT_INTERNAL
[StrategyProperty]METHOD_OPTIONS_KEY=METHOD_CONTRACT
[StrategyProperty]USER_TACLETS_OPTIONS_KEY3=USER_TACLETS_OFF
[SMTSettings]maxGenericSorts=2
[StrategyProperty]OSS_OPTIONS_KEY=OSS_ON
[StrategyProperty]SPLITTING_OPTIONS_KEY=SPLITTING_DELAYED
[SMTSettings]integersMinimum=-2147483645
[StrategyProperty]VBT_PHASE=VBT_SYM_EX
[SMTSettings]integersMaximum=2147483645
"
}

\javaSource "../src";

\proofObligation "#Proof Obligation Settings
#Sun Nov 10 21:34:21 CET 2019
contract=de.polyas.core3.open.cred.CredTool[de.polyas.core3.open.cred.CredTool\\:\\:initPolyasVals(org.apache.commons.csv.CSVRecord,de.polyas.core3.open.cred.CredentialGenerator.GeneratedDataForVoter)].JML normal_behavior operation contract.0
name=de.polyas.core3.open.cred.CredTool[de.polyas.core3.open.cred.CredTool\\:\\:initPolyasVals(org.apache.commons.csv.CSVRecord,de.polyas.core3.open.cred.CredentialGenerator.GeneratedDataForVoter)].JML normal_behavior operation contract.0
class=de.uka.ilkd.key.proof.init.FunctionalOperationContractPO
";

\proof {
(keyLog "0" (keyUser "flo" ) (keyVersion "57d504cc0f"))

(autoModeTime "16087")

(branch "dummy ID"
(rule "impRight" (formula "1") (newnames "record_11,dataForVoter_5,self_137,exc_179,heapAtPre_0,o,f"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "2"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "4"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "6"))
(rule "andLeft" (formula "2"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "9"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "11"))
(rule "andLeft" (formula "1"))
(rule "notLeft" (formula "13"))
(rule "notLeft" (formula "12"))
(rule "notLeft" (formula "2"))
(rule "eqSymm" (formula "14") (term "1,0,0,1,0,1"))
(rule "eqSymm" (formula "10") (term "1,0,1,0"))
(rule "replace_known_right" (formula "4") (term "0") (ifseqformula "12"))
 (builtin "One Step Simplification" (formula "4"))
(rule "replace_known_right" (formula "5") (term "0") (ifseqformula "13"))
 (builtin "One Step Simplification" (formula "5"))
(rule "elementOfSingleton" (formula "14") (term "0,0,0,0,1,0,1"))
(rule "castedGetAny" (formula "10") (term "0,1,0,1,0"))
(rule "castedGetAny" (formula "10") (term "1,1,0,1,0"))
(rule "inEqSimp_commuteLeq" (formula "10") (term "0,0,0"))
(rule "inEqSimp_commuteLeq" (formula "10") (term "0,0,0,1,0"))
(rule "assignment" (formula "14") (term "1"))
 (builtin "One Step Simplification" (formula "14"))
(rule "Class_invariant_axiom_for_org_apache_commons_csv_CSVRecord" (formula "7") (inst "i=i") (inst "i_0=i_0"))
(rule "expand_inInt" (formula "7") (term "1,0,0,1,0"))
(rule "expand_inInt" (formula "7") (term "1,0,0,1"))
(rule "replace_int_MIN" (formula "7") (term "0,1,1,0,0,1,0"))
(rule "replace_int_MAX" (formula "7") (term "1,0,1,0,0,1,0"))
(rule "replace_int_MAX" (formula "7") (term "1,0,1,0,0,1"))
(rule "replace_int_MIN" (formula "7") (term "0,1,1,0,0,1"))
(rule "andLeft" (formula "7"))
(rule "andLeft" (formula "7"))
(rule "eqSymm" (formula "7"))
(rule "castedGetAny" (formula "9") (term "0,0,1,0"))
(rule "castedGetAny" (formula "8") (term "0,0,1,0"))
(rule "inEqSimp_commuteLeq" (formula "9") (term "1,1,0,0"))
(rule "inEqSimp_commuteLeq" (formula "9") (term "0,0,0,0"))
(rule "inEqSimp_commuteLeq" (formula "8") (term "0,0,0,0"))
(rule "inEqSimp_commuteLeq" (formula "8") (term "1,1,0,0"))
(rule "applyEq" (formula "9") (term "1,1,0,0,0") (ifseqformula "7"))
(rule "Class_invariant_axiom_for_de_polyas_core3_open_cred_CredentialGenerator_GeneratedDataForVoter" (formula "10"))
(rule "andLeft" (formula "10"))
(rule "andLeft" (formula "10"))
(rule "notLeft" (formula "12"))
(rule "notLeft" (formula "10"))
(rule "notLeft" (formula "10"))
(rule "Class_invariant_axiom_for_de_polyas_core3_open_cred_CredTool" (formula "10") (inst "i=i") (inst "i_0=i_0") (inst "i_1=i_1") (inst "i_2=i_2") (inst "i_3=i_3"))
 (builtin "One Step Simplification" (formula "10"))
(rule "insert_constant_string_value" (formula "10") (term "0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0") (ifseqformula "1"))
 (builtin "One Step Simplification" (formula "10"))
(rule "insert_constant_string_value" (formula "10") (term "0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0") (ifseqformula "1"))
 (builtin "One Step Simplification" (formula "10"))
(rule "insert_constant_string_value" (formula "10") (term "0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0") (ifseqformula "1"))
 (builtin "One Step Simplification" (formula "10"))
(rule "castDel" (formula "10") (term "0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0"))
(rule "castDel" (formula "10") (term "0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0"))
(rule "castDel" (formula "10") (term "0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0"))
(rule "andLeft" (formula "10"))
(rule "andLeft" (formula "10"))
(rule "andLeft" (formula "10"))
(rule "andLeft" (formula "10"))
(rule "andLeft" (formula "10"))
(rule "andLeft" (formula "10"))
(rule "andLeft" (formula "10"))
(rule "andLeft" (formula "10"))
(rule "notLeft" (formula "12"))
(rule "andLeft" (formula "10"))
(rule "notLeft" (formula "12"))
(rule "notLeft" (formula "11"))
(rule "andLeft" (formula "10"))
(rule "andLeft" (formula "10"))
(rule "notLeft" (formula "12"))
(rule "andLeft" (formula "10"))
(rule "notLeft" (formula "12"))
(rule "notLeft" (formula "11"))
(rule "andLeft" (formula "10"))
(rule "notLeft" (formula "11"))
(rule "andLeft" (formula "10"))
(rule "notLeft" (formula "11"))
(rule "andLeft" (formula "10"))
(rule "notLeft" (formula "11"))
(rule "andLeft" (formula "10"))
(rule "andLeft" (formula "10"))
(rule "notLeft" (formula "12"))
(rule "andLeft" (formula "10"))
(rule "notLeft" (formula "12"))
(rule "andLeft" (formula "10"))
(rule "notLeft" (formula "12"))
(rule "notLeft" (formula "11"))
(rule "andLeft" (formula "10"))
(rule "notLeft" (formula "11"))
(rule "andLeft" (formula "10"))
(rule "notLeft" (formula "11"))
(rule "andLeft" (formula "10"))
(rule "notLeft" (formula "11"))
(rule "andLeft" (formula "10"))
(rule "notLeft" (formula "11"))
(rule "notLeft" (formula "10"))
(rule "exLeft" (formula "15") (inst "sk=i_0"))
(rule "andLeft" (formula "15"))
(rule "andLeft" (formula "15"))
(rule "exLeft" (formula "12") (inst "sk=i_2_0"))
(rule "andLeft" (formula "12"))
(rule "andLeft" (formula "12"))
(rule "castedGetAny" (formula "16") (term "0,0,1,0"))
(rule "castedGetAny" (formula "15") (term "0,0,1,0"))
(rule "castedGetAny" (formula "11") (term "0,0,1,0"))
(rule "castedGetAny" (formula "19") (term "0"))
(rule "castedGetAny" (formula "14") (term "0"))
(rule "inEqSimp_commuteLeq" (formula "16") (term "0,0,0"))
(rule "inEqSimp_commuteLeq" (formula "15") (term "0,0,0"))
(rule "inEqSimp_commuteLeq" (formula "11") (term "0,0,0"))
(rule "inEqSimp_commuteLeq" (formula "17"))
(rule "inEqSimp_commuteLeq" (formula "12"))
(rule "applyEq" (formula "27") (term "0") (ifseqformula "10"))
(rule "commute_and" (formula "20") (term "0,0"))
(rule "commute_and" (formula "9") (term "1,0,0"))
(rule "commute_and" (formula "8") (term "0,0,0"))
(rule "commute_and" (formula "8") (term "1,0,0"))
(rule "commute_and" (formula "9") (term "0,0,0"))
(rule "commute_and" (formula "20") (term "0,0,1,0"))
(rule "methodBodyExpand" (formula "45") (term "1") (newnames "heapBefore_initPolyasVals,savedHeapBefore_initPolyasVals"))
 (builtin "One Step Simplification" (formula "45"))
(rule "activeUseStaticFieldWriteAccess" (formula "45") (term "1") (inst "#v0=a"))
(rule "variableDeclarationAssign" (formula "45") (term "1"))
(rule "variableDeclaration" (formula "45") (term "1") (newnames "a"))
(rule "commute_and" (formula "16") (term "0,0"))
(rule "commute_and" (formula "15") (term "0,0"))
(rule "commute_and" (formula "11") (term "0,0"))
(rule "commute_and_2" (formula "20") (term "0,1,0"))
(rule "shift_paren_and" (formula "8") (term "0,0"))
(rule "commute_and_2" (formula "8") (term "0,0,0"))
(rule "shift_paren_and" (formula "9") (term "0,0"))
(rule "commute_and_2" (formula "9") (term "0,0,0"))
 (builtin "Use Operation Contract" (formula "45") (newnames "heapBefore_ArrayList,self_138,exc_180,heapAfter_ArrayList,anon_heap_ArrayList") (contract "java.util.ArrayList[java.util.ArrayList::ArrayList()].JML normal_behavior operation contract.0"))
(branch "Post (ArrayList)"
    (builtin "One Step Simplification" (formula "47"))
    (builtin "One Step Simplification" (formula "22"))
   (rule "andLeft" (formula "22"))
   (rule "selectCreatedOfAnonAsFormulaEQ" (formula "23") (term "1,1,0,1,0") (ifseqformula "22"))
   (rule "andLeft" (formula "23"))
   (rule "andLeft" (formula "23"))
   (rule "andLeft" (formula "25"))
   (rule "andLeft" (formula "24"))
   (rule "andLeft" (formula "26"))
   (rule "andLeft" (formula "24"))
   (rule "andLeft" (formula "28"))
   (rule "notLeft" (formula "24"))
   (rule "andLeft" (formula "24"))
   (rule "andLeft" (formula "28"))
   (rule "notLeft" (formula "24"))
   (rule "andLeft" (formula "27"))
   (rule "notLeft" (formula "27"))
   (rule "notLeft" (formula "27"))
   (rule "replace_known_right" (formula "24") (term "0") (ifseqformula "29"))
    (builtin "One Step Simplification" (formula "24"))
   (rule "assignment" (formula "55") (term "1"))
    (builtin "One Step Simplification" (formula "55"))
   (rule "assignment_write_static_attribute" (formula "55") (term "1"))
    (builtin "One Step Simplification" (formula "55"))
   (rule "pullOutSelect" (formula "26") (term "0,0") (inst "selectSK=java_util_Collection_seq_0"))
   (rule "simplifySelectOfAnonEQ" (formula "26") (ifseqformula "22"))
    (builtin "One Step Simplification" (formula "26") (ifInst ""  (formula "31")) (ifInst ""  (formula "30")))
   (rule "applyEqReverse" (formula "27") (term "0,0") (ifseqformula "26"))
   (rule "hideAuxiliaryEq" (formula "26"))
   (rule "Class_invariant_axiom_for_java_util_ArrayList" (formula "28"))
   (rule "true_left" (formula "28"))
   (rule "lenNonNegative" (formula "7") (term "0"))
   (rule "inEqSimp_commuteLeq" (formula "7"))
   (rule "applyEq" (formula "7") (term "0") (ifseqformula "8"))
   (rule "lenNonNegative" (formula "8") (term "1"))
   (rule "inEqSimp_commuteLeq" (formula "8"))
   (rule "methodCallUnfoldArguments" (formula "55") (term "1"))
   (rule "variableDeclarationAssign" (formula "55") (term "1"))
   (rule "variableDeclaration" (formula "55") (term "1") (newnames "var"))
   (rule "activeUseStaticFieldReadAccess" (formula "55") (term "1"))
   (rule "assignment_read_static_attribute" (formula "55") (term "1"))
    (builtin "One Step Simplification" (formula "55"))
   (rule "pullOutSelect" (formula "55") (term "0,1,0") (inst "selectSK=de_polyas_core3_open_cred_CredTool_polyasVals_0"))
   (rule "simplifySelectOfStore" (formula "1"))
    (builtin "One Step Simplification" (formula "1"))
   (rule "castDel" (formula "1") (term "0"))
   (rule "applyEqReverse" (formula "56") (term "0,1,0") (ifseqformula "1"))
   (rule "hideAuxiliaryEq" (formula "1"))
   (rule "variableDeclarationAssign" (formula "55") (term "1"))
   (rule "variableDeclaration" (formula "55") (term "1") (newnames "var_1"))
   (rule "assignment_read_attribute_this" (formula "55") (term "1"))
    (builtin "One Step Simplification" (formula "55"))
   (rule "dismissNonSelectedField" (formula "55") (term "0,1,0"))
   (rule "pullOutSelect" (formula "55") (term "0,1,0") (inst "selectSK=de_polyas_core3_open_cred_CredTool_inputColsForPolyas_0"))
   (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "24"))
    (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "53")) (ifInst ""  (formula "3")))
   (rule "applyEqReverse" (formula "56") (term "0,1,0") (ifseqformula "1"))
   (rule "hideAuxiliaryEq" (formula "1"))
   (rule "variableDeclarationAssign" (formula "55") (term "1"))
   (rule "variableDeclaration" (formula "55") (term "1") (newnames "var_2"))
   (rule "assignment" (formula "55") (term "1"))
    (builtin "One Step Simplification" (formula "55"))
    (builtin "Use Operation Contract" (formula "55") (newnames "heapBefore_addInputCols,exc_181,heapAfter_addInputCols,anon_heap_addInputCols") (contract "de.polyas.core3.open.cred.CredTool[de.polyas.core3.open.cred.CredTool::addInputCols(java.util.ArrayList,java.util.ArrayList,org.apache.commons.csv.CSVRecord)].JML normal_behavior operation contract.0"))
   (branch "Post (addInputCols)"
       (builtin "One Step Simplification" (formula "57"))
       (builtin "One Step Simplification" (formula "30"))
      (rule "andLeft" (formula "30"))
      (rule "andLeft" (formula "31"))
      (rule "andLeft" (formula "32"))
      (rule "andLeft" (formula "32"))
      (rule "andLeft" (formula "33"))
      (rule "blockEmpty" (formula "61") (term "1"))
      (rule "Class_invariant_axiom_for_org_apache_commons_csv_CSVRecord" (formula "32") (inst "i=i") (inst "i_0=i_0"))
      (rule "expand_inInt" (formula "32") (term "1,0,0,1"))
      (rule "expand_inInt" (formula "32") (term "1,0,0,1,0"))
      (rule "replace_int_MIN" (formula "32") (term "0,1,1,0,0,1"))
      (rule "replace_int_MAX" (formula "32") (term "1,0,1,0,0,1"))
      (rule "replace_int_MAX" (formula "32") (term "1,0,1,0,0,1,0"))
      (rule "replace_int_MIN" (formula "32") (term "0,1,1,0,0,1,0"))
      (rule "andLeft" (formula "32"))
      (rule "andLeft" (formula "32"))
      (rule "eqSymm" (formula "32"))
      (rule "castedGetAny" (formula "34") (term "0,0,1,0"))
      (rule "castedGetAny" (formula "33") (term "0,0,1,0"))
      (rule "inEqSimp_commuteLeq" (formula "34") (term "1,1,0,0"))
      (rule "inEqSimp_commuteLeq" (formula "34") (term "0,0,0,0"))
      (rule "inEqSimp_commuteLeq" (formula "33") (term "1,1,0,0"))
      (rule "inEqSimp_commuteLeq" (formula "33") (term "0,0,0,0"))
      (rule "pullOutSelect" (formula "34") (term "0,1,1,0,0,0") (inst "selectSK=org_apache_commons_csv_CSVRecord_value_seq_0"))
      (rule "applyEq" (formula "35") (term "0,0,0,1,0") (ifseqformula "34"))
      (rule "applyEq" (formula "32") (term "0,0") (ifseqformula "34"))
      (rule "simplifySelectOfAnonEQ" (formula "34") (ifseqformula "30"))
       (builtin "One Step Simplification" (formula "34") (ifInst ""  (formula "62")))
      (rule "eqSymm" (formula "32"))
      (rule "dismissNonSelectedField" (formula "34") (term "2,0"))
      (rule "elementOfSingleton" (formula "34") (term "0,0,0"))
       (builtin "One Step Simplification" (formula "34"))
      (rule "ifthenelse_negated" (formula "34") (term "0"))
      (rule "dismissNonSelectedField" (formula "34") (term "0,0,0"))
      (rule "selectCreatedOfAnonAsFormulaEQ" (formula "34") (term "0,0") (ifseqformula "23"))
      (rule "replace_known_left" (formula "34") (term "0,0,0") (ifseqformula "4"))
       (builtin "One Step Simplification" (formula "34"))
      (rule "simplifySelectOfAnonEQ" (formula "34") (ifseqformula "23"))
       (builtin "One Step Simplification" (formula "34") (ifInst ""  (formula "62")) (ifInst ""  (formula "4")))
      (rule "applyEqReverse" (formula "32") (term "0,1") (ifseqformula "34"))
      (rule "applyEqReverse" (formula "35") (term "0,0,0,1,0") (ifseqformula "34"))
      (rule "applyEqReverse" (formula "35") (term "0,1,1,0,0,0") (ifseqformula "34"))
      (rule "hideAuxiliaryEq" (formula "34"))
      (rule "applyEq" (formula "34") (term "1,1,0,0,0") (ifseqformula "8"))
      (rule "applyEq" (formula "32") (term "1") (ifseqformula "8"))
      (rule "pullOutSelect" (formula "33") (term "0,1,1,0,0,0") (inst "selectSK=org_apache_commons_csv_CSVRecord_key_seq_0"))
      (rule "applyEq" (formula "32") (term "0,0") (ifseqformula "33"))
      (rule "applyEq" (formula "34") (term "0,0,0,1,0") (ifseqformula "33"))
      (rule "simplifySelectOfAnonEQ" (formula "33") (ifseqformula "30"))
       (builtin "One Step Simplification" (formula "33") (ifInst ""  (formula "62")))
      (rule "eqSymm" (formula "32"))
      (rule "dismissNonSelectedField" (formula "33") (term "0,0,1,0,0"))
      (rule "selectCreatedOfAnonAsFormulaEQ" (formula "33") (term "0,1,0,0") (ifseqformula "23"))
      (rule "replace_known_left" (formula "33") (term "0,0,1,0,0") (ifseqformula "4"))
       (builtin "One Step Simplification" (formula "33"))
      (rule "dismissNonSelectedField" (formula "33") (term "2,0"))
      (rule "elementOfSingleton" (formula "33") (term "0,0"))
       (builtin "One Step Simplification" (formula "33"))
      (rule "simplifySelectOfAnonEQ" (formula "33") (ifseqformula "23"))
       (builtin "One Step Simplification" (formula "33") (ifInst ""  (formula "62")) (ifInst ""  (formula "4")))
      (rule "applyEqReverse" (formula "34") (term "0,1,1,0,0,0") (ifseqformula "33"))
      (rule "applyEqReverse" (formula "34") (term "0,0,0,1,0") (ifseqformula "33"))
      (rule "applyEqReverse" (formula "32") (term "0,1") (ifseqformula "33"))
       (builtin "One Step Simplification" (formula "32"))
      (rule "true_left" (formula "32"))
      (rule "hideAuxiliaryEq" (formula "32"))
      (rule "Class_invariant_axiom_for_java_util_ArrayList" (formula "35"))
      (rule "true_left" (formula "35"))
      (rule "Class_invariant_axiom_for_java_util_ArrayList" (formula "34"))
      (rule "true_left" (formula "34"))
      (rule "commute_and" (formula "33") (term "1,0,0"))
      (rule "commute_and" (formula "32") (term "1,0,0"))
      (rule "commute_and" (formula "33") (term "0,0,0"))
      (rule "commute_and" (formula "32") (term "0,0,0"))
      (rule "shift_paren_and" (formula "33") (term "0,0"))
      (rule "commute_and_2" (formula "33") (term "0,0,0"))
      (rule "shift_paren_and" (formula "32") (term "0,0"))
      (rule "commute_and_2" (formula "32") (term "0,0,0"))
      (rule "lenNonNegative" (formula "19") (term "1"))
      (rule "inEqSimp_commuteLeq" (formula "19"))
      (rule "lenNonNegative" (formula "14") (term "1"))
      (rule "inEqSimp_commuteLeq" (formula "14"))
      (rule "methodCallUnfoldTarget" (formula "60") (term "1") (inst "#v0=a"))
      (rule "variableDeclaration" (formula "60") (term "1") (newnames "a_1"))
      (rule "activeUseStaticFieldReadAccess" (formula "60") (term "1"))
      (rule "assignment_read_static_attribute" (formula "60") (term "1"))
       (builtin "One Step Simplification" (formula "60"))
      (rule "pullOutSelect" (formula "60") (term "0,1,0") (inst "selectSK=de_polyas_core3_open_cred_CredTool_polyasVals_1"))
      (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "33"))
       (builtin "One Step Simplification" (formula "1"))
      (rule "replaceKnownSelect_taclet0_2" (formula "1") (term "2,0"))
      (rule "replaceKnownAuxiliaryConstant_taclet0_3" (formula "1") (term "2,0"))
      (rule "elementOfSingleton" (formula "1") (term "0,0"))
       (builtin "One Step Simplification" (formula "1"))
      (rule "applyEqReverse" (formula "61") (term "0,1,0") (ifseqformula "1"))
      (rule "hideAuxiliaryEq" (formula "1"))
      (rule "seqGetAlphaCast" (formula "22") (term "0"))
      (rule "castedGetAny" (formula "22") (term "0"))
       (builtin "One Step Simplification" (formula "22"))
      (rule "true_left" (formula "22"))
      (rule "seqGetAlphaCast" (formula "16") (term "0"))
      (rule "castedGetAny" (formula "16") (term "0"))
       (builtin "One Step Simplification" (formula "16"))
      (rule "true_left" (formula "16"))
      (rule "lenNonNegative" (formula "18") (term "1,0,0,0"))
      (rule "inEqSimp_commuteLeq" (formula "18"))
      (rule "lenNonNegative" (formula "30") (term "0"))
      (rule "inEqSimp_commuteLeq" (formula "30"))
      (rule "applyEq" (formula "30") (term "0") (ifseqformula "31"))
      (rule "qeq_literals" (formula "30"))
      (rule "true_left" (formula "30"))
      (rule "onlyCreatedObjectsAreReferenced" (formula "55") (term "0") (ifseqformula "1"))
      (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "56"))
       (builtin "One Step Simplification" (formula "1"))
      (rule "onlyCreatedObjectsAreReferenced" (formula "57") (term "0") (ifseqformula "2"))
      (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "58"))
       (builtin "One Step Simplification" (formula "1"))
      (rule "onlyCreatedObjectsAreReferenced" (formula "59") (term "0") (ifseqformula "3"))
      (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "60"))
       (builtin "One Step Simplification" (formula "1"))
      (rule "methodCallUnfoldArguments" (formula "64") (term "1"))
      (rule "variableDeclarationAssign" (formula "64") (term "1"))
      (rule "variableDeclaration" (formula "64") (term "1") (newnames "var_3"))
      (rule "assignment" (formula "64") (term "1"))
       (builtin "One Step Simplification" (formula "64"))
      (rule "variableDeclarationAssign" (formula "64") (term "1"))
      (rule "variableDeclaration" (formula "64") (term "1") (newnames "var_4"))
      (rule "assignment_read_attribute" (formula "64") (term "1"))
      (branch "Normal Execution (_dataForVoter_5 != null)"
          (builtin "One Step Simplification" (formula "64") (ifInst ""  (formula "63")))
          (builtin "One Step Simplification" (formula "65"))
         (rule "false_right" (formula "64"))
         (rule "pullOutSelect" (formula "64") (term "0,1,0") (inst "selectSK=de_polyas_core3_open_cred_CredentialGenerator_GeneratedDataForVoter_hashedPassword_0"))
         (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "37"))
          (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "64")))
         (rule "dismissNonSelectedField" (formula "1") (term "2,0"))
         (rule "elementOfSingleton" (formula "1") (term "0,0,0"))
          (builtin "One Step Simplification" (formula "1"))
         (rule "dismissNonSelectedField" (formula "1") (term "0,0,0,0"))
         (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,0,0") (ifseqformula "30"))
         (rule "replace_known_left" (formula "1") (term "0,0,0,0") (ifseqformula "9"))
          (builtin "One Step Simplification" (formula "1"))
         (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "30"))
          (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "64")) (ifInst ""  (formula "9")))
         (rule "applyEqReverse" (formula "65") (term "0,1,0") (ifseqformula "1"))
         (rule "hideAuxiliaryEq" (formula "1"))
         (rule "onlyCreatedObjectsAreReferenced" (formula "14") (term "0") (ifseqformula "4"))
         (rule "applyEq" (formula "14") (term "0,0") (ifseqformula "15"))
         (rule "replace_known_right" (formula "14") (term "0") (ifseqformula "47"))
          (builtin "One Step Simplification" (formula "14"))
         (rule "applyEq" (formula "14") (term "1,0") (ifseqformula "15"))
         (rule "onlyCreatedObjectsAreReferenced" (formula "15") (term "1") (ifseqformula "4"))
         (rule "replace_known_right" (formula "15") (term "0") (ifseqformula "48"))
          (builtin "One Step Simplification" (formula "15") (ifInst ""  (formula "14")))
         (rule "true_left" (formula "15"))
         (rule "onlyCreatedObjectsAreReferenced" (formula "52") (term "0") (ifseqformula "4"))
         (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "53"))
          (builtin "One Step Simplification" (formula "1"))
         (rule "onlyCreatedObjectsAreReferenced" (formula "55") (term "0") (ifseqformula "5"))
         (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "56"))
          (builtin "One Step Simplification" (formula "1"))
         (rule "onlyCreatedObjectsAreReferenced" (formula "58") (term "0") (ifseqformula "6"))
         (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "59"))
          (builtin "One Step Simplification" (formula "1"))
         (rule "onlyCreatedObjectsAreReferenced" (formula "56") (term "0") (ifseqformula "7"))
         (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "57"))
          (builtin "One Step Simplification" (formula "1"))
         (rule "onlyCreatedObjectsAreReferenced" (formula "61") (term "0") (ifseqformula "8"))
         (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "62"))
          (builtin "One Step Simplification" (formula "1"))
         (rule "onlyCreatedObjectsAreReferenced" (formula "60") (term "0") (ifseqformula "9"))
         (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "61"))
          (builtin "One Step Simplification" (formula "1"))
         (rule "onlyCreatedObjectsAreReferenced" (formula "64") (term "0") (ifseqformula "10"))
         (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "65"))
          (builtin "One Step Simplification" (formula "1"))
          (builtin "Use Operation Contract" (formula "72") (newnames "heapBefore_add,result_149,exc_182,heapAfter_add,anon_heap_add") (contract "java.util.ArrayList[java.util.Collection::add(java.lang.Object)].JML normal_behavior operation contract.0"))
         (branch "Post (add)"
             (builtin "One Step Simplification" (formula "47"))
             (builtin "One Step Simplification" (formula "74"))
            (rule "andLeft" (formula "47"))
            (rule "andLeft" (formula "48"))
            (rule "andLeft" (formula "49"))
            (rule "andLeft" (formula "49"))
            (rule "eqSymm" (formula "49"))
            (rule "blockEmpty" (formula "77") (term "1"))
            (rule "pullOutSelect" (formula "49") (term "0,0") (inst "selectSK=java_util_Collection_seq_1"))
            (rule "simplifySelectOfAnonEQ" (formula "49") (ifseqformula "44"))
             (builtin "One Step Simplification" (formula "49") (ifInst ""  (formula "53")))
            (rule "eqSymm" (formula "50"))
            (rule "dismissNonSelectedField" (formula "49") (term "2,0"))
            (rule "replaceKnownSelect_taclet0_0" (formula "49") (term "2,0"))
            (rule "replaceKnownAuxiliaryConstant_taclet0_1" (formula "49") (term "2,0"))
            (rule "dismissNonSelectedField" (formula "49") (term "0,0,1,0,0"))
            (rule "selectCreatedOfAnonAsFormulaEQ" (formula "49") (term "0,1,0,0") (ifseqformula "37"))
            (rule "replace_known_left" (formula "49") (term "1,0,1,0,0") (ifseqformula "39"))
             (builtin "One Step Simplification" (formula "49") (ifInst ""  (formula "52")))
            (rule "elementOfSingleton" (formula "49") (term "0,0"))
             (builtin "One Step Simplification" (formula "49"))
            (rule "applyEqReverse" (formula "50") (term "0,1") (ifseqformula "49"))
            (rule "hideAuxiliaryEq" (formula "49"))
            (rule "pullOutSelect" (formula "49") (term "0") (inst "selectSK=java_util_Collection_seq_2"))
            (rule "simplifySelectOfAnonEQ" (formula "49") (ifseqformula "47"))
             (builtin "One Step Simplification" (formula "49") (ifInst ""  (formula "53")))
            (rule "replaceKnownSelect_taclet0000_17" (formula "49") (term "2,0"))
            (rule "replaceKnownAuxiliaryConstant_taclet0000_18" (formula "49") (term "2,0"))
            (rule "selectCreatedOfAnonAsFormulaEQ" (formula "49") (term "0,1,0,0") (ifseqformula "44"))
            (rule "eqSymm" (formula "50"))
            (rule "applyEqReverse" (formula "49") (term "1") (ifseqformula "50"))
            (rule "hideAuxiliaryEq" (formula "50"))
            (rule "elementOfSingleton" (formula "49") (term "0,0,0"))
             (builtin "One Step Simplification" (formula "49"))
            (rule "eqSymm" (formula "49"))
            (rule "Class_invariant_axiom_for_java_util_ArrayList" (formula "50"))
            (rule "true_left" (formula "50"))
            (rule "onlyCreatedObjectsAreReferenced" (formula "60") (term "0") (ifseqformula "11"))
            (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "61"))
             (builtin "One Step Simplification" (formula "1"))
            (rule "onlyCreatedObjectsAreReferenced" (formula "62") (term "0") (ifseqformula "12"))
            (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "63"))
             (builtin "One Step Simplification" (formula "1"))
            (rule "onlyCreatedObjectsAreReferenced" (formula "54") (term "0") (ifseqformula "13"))
            (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "55"))
             (builtin "One Step Simplification" (formula "1"))
            (rule "onlyCreatedObjectsAreReferenced" (formula "65") (term "0") (ifseqformula "14"))
            (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "66"))
             (builtin "One Step Simplification" (formula "1"))
            (rule "onlyCreatedObjectsAreReferenced" (formula "58") (term "0") (ifseqformula "15"))
            (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "59"))
             (builtin "One Step Simplification" (formula "1"))
            (rule "onlyCreatedObjectsAreReferenced" (formula "58") (term "0") (ifseqformula "16"))
            (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "59"))
             (builtin "One Step Simplification" (formula "1"))
            (rule "onlyCreatedObjectsAreReferenced" (formula "65") (term "0") (ifseqformula "17"))
            (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "66"))
             (builtin "One Step Simplification" (formula "1"))
            (rule "methodCallUnfoldTarget" (formula "83") (term "1") (inst "#v0=a"))
            (rule "variableDeclaration" (formula "83") (term "1") (newnames "a_2"))
            (rule "activeUseStaticFieldReadAccess" (formula "83") (term "1"))
            (rule "assignment_read_static_attribute" (formula "83") (term "1"))
             (builtin "One Step Simplification" (formula "83"))
            (rule "pullOutSelect" (formula "83") (term "0,1,0") (inst "selectSK=de_polyas_core3_open_cred_CredTool_polyasVals_2"))
            (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "55"))
             (builtin "One Step Simplification" (formula "1"))
            (rule "replaceKnownSelect_taclet00_12" (formula "1") (term "2,0"))
            (rule "replaceKnownAuxiliaryConstant_taclet00_13" (formula "1") (term "2,0"))
            (rule "elementOfSingleton" (formula "1") (term "0,0"))
             (builtin "One Step Simplification" (formula "1"))
            (rule "applyEqReverse" (formula "84") (term "0,1,0") (ifseqformula "1"))
            (rule "hideAuxiliaryEq" (formula "1"))
            (rule "methodCallUnfoldArguments" (formula "83") (term "1"))
            (rule "variableDeclarationAssign" (formula "83") (term "1"))
            (rule "variableDeclaration" (formula "83") (term "1") (newnames "var_5"))
            (rule "assignment" (formula "83") (term "1"))
             (builtin "One Step Simplification" (formula "83"))
            (rule "variableDeclarationAssign" (formula "83") (term "1"))
            (rule "variableDeclaration" (formula "83") (term "1") (newnames "var_6"))
            (rule "assignment_read_attribute" (formula "83") (term "1"))
            (branch "Normal Execution (_dataForVoter_5 != null)"
                (builtin "One Step Simplification" (formula "84"))
                (builtin "One Step Simplification" (formula "83") (ifInst ""  (formula "82")))
               (rule "false_right" (formula "83"))
               (rule "pullOutSelect" (formula "83") (term "0,1,0") (inst "selectSK=de_polyas_core3_open_cred_CredentialGenerator_GeneratedDataForVoter_publicSigningKey_0"))
               (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "55"))
                (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "83")))
               (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,1,0,0") (ifseqformula "52"))
               (rule "elementOfSingleton" (formula "1") (term "0,0,0"))
                (builtin "One Step Simplification" (formula "1"))
               (rule "dismissNonSelectedField" (formula "1") (term "0,0,0,0,0"))
               (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,0,0,0") (ifseqformula "45"))
               (rule "replace_known_left" (formula "1") (term "0,0,0,0,0") (ifseqformula "23"))
                (builtin "One Step Simplification" (formula "1"))
               (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "52"))
                (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "83")))
               (rule "elementOfSingleton" (formula "1") (term "0,0,0"))
                (builtin "One Step Simplification" (formula "1"))
               (rule "ifthenelse_negated" (formula "1") (term "0"))
               (rule "dismissNonSelectedField" (formula "1") (term "0,0,0"))
               (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,0") (ifseqformula "45"))
               (rule "replace_known_left" (formula "1") (term "0,0,0") (ifseqformula "23"))
                (builtin "One Step Simplification" (formula "1"))
               (rule "simplifySelectOfStore" (formula "1"))
                (builtin "One Step Simplification" (formula "1"))
               (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "45"))
                (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "83")) (ifInst ""  (formula "23")))
               (rule "applyEqReverse" (formula "84") (term "0,1,0") (ifseqformula "1"))
               (rule "hideAuxiliaryEq" (formula "1"))
                (builtin "Use Operation Contract" (formula "83") (newnames "heapBefore_add_0,result_150,exc_183,heapAfter_add_0,anon_heap_add_0") (contract "java.util.ArrayList[java.util.Collection::add(java.lang.Object)].JML normal_behavior operation contract.0"))
               (branch "Post (add)"
                   (builtin "One Step Simplification" (formula "58"))
                   (builtin "One Step Simplification" (formula "85"))
                  (rule "replaceKnownSelect_taclet0000_19" (formula "58") (term "0,1,0,0,1,1"))
                  (rule "replaceKnownAuxiliaryConstant_taclet0000_20" (formula "58") (term "0,1,0,0,1,1"))
                  (rule "andLeft" (formula "58"))
                  (rule "andLeft" (formula "59"))
                  (rule "andLeft" (formula "60"))
                  (rule "andLeft" (formula "60"))
                  (rule "applyEq" (formula "60") (term "0,1") (ifseqformula "56"))
                  (rule "pullOutSelect" (formula "60") (term "0") (inst "selectSK=java_util_Collection_seq_3"))
                  (rule "simplifySelectOfAnonEQ" (formula "60") (ifseqformula "58"))
                   (builtin "One Step Simplification" (formula "60") (ifInst ""  (formula "64")))
                  (rule "replaceKnownSelect_taclet0000_19" (formula "60") (term "2,0"))
                  (rule "replaceKnownAuxiliaryConstant_taclet0000_20" (formula "60") (term "2,0"))
                  (rule "selectCreatedOfAnonAsFormulaEQ" (formula "60") (term "0,1,0,0") (ifseqformula "54"))
                  (rule "selectCreatedOfAnonAsFormulaEQ" (formula "60") (term "0,0,1,0,0") (ifseqformula "51"))
                  (rule "eqSymm" (formula "61"))
                  (rule "applyEqReverse" (formula "60") (term "1") (ifseqformula "61"))
                  (rule "hideAuxiliaryEq" (formula "61"))
                  (rule "elementOfSingleton" (formula "60") (term "0,0,0"))
                   (builtin "One Step Simplification" (formula "60"))
                  (rule "eqSeqConcat" (formula "60"))
                   (builtin "One Step Simplification" (formula "60"))
                  (rule "andLeft" (formula "60"))
                  (rule "andLeft" (formula "60"))
                  (rule "polySimp_addComm0" (formula "60") (term "1"))
                  (rule "eqSeqSingleton" (formula "62"))
                  (rule "andLeft" (formula "62"))
                  (rule "lenOfSeqSub" (formula "62") (term "0"))
                  (rule "polySimp_elimSub" (formula "62") (term "1,0"))
                  (rule "polySimp_addComm0" (formula "62") (term "1,0"))
                  (rule "lenOfSeqConcatEQ" (formula "63") (term "1,0,0") (ifseqformula "56"))
                   (builtin "One Step Simplification" (formula "63"))
                  (rule "polySimp_addComm0" (formula "63") (term "1,0,0"))
                  (rule "lenOfSeqConcatEQ" (formula "60") (term "1,1") (ifseqformula "56"))
                   (builtin "One Step Simplification" (formula "60"))
                  (rule "polySimp_addComm0" (formula "60") (term "1,1"))
                  (rule "polySimp_addAssoc" (formula "60") (term "1"))
                  (rule "add_literals" (formula "60") (term "0,1"))
                  (rule "lenOfSeqConcatEQ" (formula "61") (term "2,0") (ifseqformula "56"))
                   (builtin "One Step Simplification" (formula "61"))
                  (rule "polySimp_addComm0" (formula "61") (term "2,0"))
                  (rule "ifEqualsInteger" (formula "62"))
                  (rule "equal_literals" (formula "62") (term "1,1"))
                   (builtin "One Step Simplification" (formula "62"))
                  (rule "andLeft" (formula "62"))
                  (rule "lenOfSeqSubEQ" (formula "63") (term "0,0,0") (ifseqformula "61"))
                  (rule "polySimp_elimSub" (formula "63") (term "1,0,0,0"))
                  (rule "mul_literals" (formula "63") (term "1,1,0,0,0"))
                  (rule "add_zero_right" (formula "63") (term "1,0,0,0"))
                  (rule "polySimp_addComm0" (formula "63") (term "0"))
                  (rule "lenOfSeqSubEQ" (formula "62") (term "0") (ifseqformula "61"))
                  (rule "polySimp_elimSub" (formula "62") (term "1,0"))
                  (rule "times_zero_2" (formula "62") (term "1,1,0"))
                  (rule "add_zero_right" (formula "62") (term "1,0"))
                  (rule "applyEq" (formula "64") (term "2,0,0") (ifseqformula "60"))
                  (rule "applyEq" (formula "62") (term "1") (ifseqformula "60"))
                  (rule "applyEq" (formula "63") (term "0,0") (ifseqformula "60"))
                  (rule "getOfSeqSub" (formula "64") (term "0"))
                  (rule "castDel" (formula "64") (term "2,0"))
                  (rule "add_zero_left" (formula "64") (term "1,1,0"))
                  (rule "leq_literals" (formula "64") (term "0,0,0"))
                   (builtin "One Step Simplification" (formula "64"))
                  (rule "polySimp_elimSub" (formula "64") (term "1,0,0"))
                  (rule "polySimp_mulComm0" (formula "64") (term "1,1,0,0"))
                  (rule "polySimp_rightDist" (formula "64") (term "1,1,0,0"))
                  (rule "mul_literals" (formula "64") (term "0,1,1,0,0"))
                  (rule "polySimp_addAssoc" (formula "64") (term "1,0,0"))
                  (rule "polySimp_addComm1" (formula "64") (term "0,1,0,0"))
                  (rule "add_literals" (formula "64") (term "0,0,1,0,0"))
                  (rule "polySimp_pullOutFactor1b" (formula "64") (term "1,0,0"))
                  (rule "add_literals" (formula "64") (term "1,1,1,0,0"))
                  (rule "times_zero_1" (formula "64") (term "1,1,0,0"))
                  (rule "add_literals" (formula "64") (term "1,0,0"))
                  (rule "less_literals" (formula "64") (term "0,0"))
                   (builtin "One Step Simplification" (formula "64"))
                  (rule "eqSeqConcatEQ" (formula "61") (ifseqformula "56"))
                   (builtin "One Step Simplification" (formula "61"))
                  (rule "andLeft" (formula "61"))
                  (rule "andLeft" (formula "61"))
                  (rule "polySimp_addComm0" (formula "61") (term "1"))
                  (rule "eqSeqSingleton" (formula "63"))
                  (rule "andLeft" (formula "63"))
                  (rule "lenOfSeqSub" (formula "61") (term "0"))
                  (rule "polySimp_elimSub" (formula "61") (term "1,0"))
                  (rule "times_zero_2" (formula "61") (term "1,1,0"))
                  (rule "add_zero_right" (formula "61") (term "1,0"))
                   (builtin "One Step Simplification" (formula "61"))
                  (rule "lenOfSeqSub" (formula "64") (term "2,0,0"))
                  (rule "polySimp_elimSub" (formula "64") (term "1,2,0,0"))
                  (rule "mul_literals" (formula "64") (term "1,1,2,0,0"))
                  (rule "add_zero_right" (formula "64") (term "1,2,0,0"))
                  (rule "lenOfSeqSub" (formula "63") (term "2,0,0"))
                  (rule "polySimp_elimSub" (formula "63") (term "1,2,0,0"))
                  (rule "times_zero_2" (formula "63") (term "1,1,2,0,0"))
                  (rule "add_zero_right" (formula "63") (term "1,2,0,0"))
                  (rule "lenOfSeqSub" (formula "63") (term "0"))
                  (rule "polySimp_elimSub" (formula "63") (term "1,0"))
                  (rule "polySimp_addComm0" (formula "63") (term "1,0"))
                  (rule "ifEqualsInteger" (formula "63"))
                  (rule "equal_literals" (formula "63") (term "1,1"))
                   (builtin "One Step Simplification" (formula "63"))
                  (rule "andLeft" (formula "63"))
                  (rule "getOfSeqSub" (formula "65") (term "0"))
                  (rule "castDel" (formula "65") (term "2,0"))
                  (rule "leq_literals" (formula "65") (term "0,0,0"))
                   (builtin "One Step Simplification" (formula "65"))
                  (rule "add_zero_left" (formula "65") (term "1,1,0"))
                  (rule "polySimp_elimSub" (formula "65") (term "1,0,0"))
                  (rule "polySimp_addComm0" (formula "65") (term "1,0,0"))
                  (rule "getOfSeqSub" (formula "65") (term "1,0"))
                  (rule "castDel" (formula "65") (term "2,1,0"))
                  (rule "add_zero_right" (formula "65") (term "1,1,1,0"))
                  (rule "polySimp_elimSub" (formula "65") (term "1,1,0,1,0"))
                  (rule "mul_literals" (formula "65") (term "1,1,1,0,1,0"))
                  (rule "add_zero_right" (formula "65") (term "1,1,0,1,0"))
                  (rule "inEqSimp_commuteLeq" (formula "65") (term "0,0,1,0"))
                  (rule "Class_invariant_axiom_for_java_util_ArrayList" (formula "69"))
                  (rule "true_left" (formula "69"))
                  (rule "methodCallEmpty" (formula "95") (term "1"))
                  (rule "commute_and" (formula "65") (term "0,1,0"))
                  (rule "tryEmpty" (formula "95") (term "1"))
                  (rule "emptyModality" (formula "95") (term "1"))
                  (rule "andRight" (formula "95"))
                  (branch
                      (builtin "One Step Simplification" (formula "95"))
                     (rule "closeTrue" (formula "95"))
                  )
                  (branch "Case 2"
                      (builtin "One Step Simplification" (formula "95"))
                     (rule "allRight" (formula "95") (inst "sk=f_0"))
                     (rule "allRight" (formula "95") (inst "sk=o_0"))
                     (rule "orRight" (formula "95"))
                     (rule "orRight" (formula "95"))
                     (rule "selectOfAnonEQ" (formula "97") (term "1") (ifseqformula "58"))
                      (builtin "One Step Simplification" (formula "97"))
                     (rule "elementOfSingleton" (formula "97") (term "0,0,0,1"))
                     (rule "ifthenelse_split" (formula "97") (term "1"))
                     (branch " o_0 = self_138 ∧ f_0 = java.util.Collection::$seq ∧ ¬f_0 = java.lang.Object::<created> ∨ ¬o_0 = null ∧ ¬o_0.<created>@heapAfter_add = TRUE TRUE"
                        (rule "selectOfAnonEQ" (formula "1") (term "0,0,1,1") (ifseqformula "55"))
                         (builtin "One Step Simplification" (formula "1"))
                        (rule "ifthenelse_split" (formula "1") (term "0,0,1,1"))
                        (branch " ¬o_0 = null ∧ ¬o_0.<created>@heapAfter_addInputCols = TRUE TRUE"
                           (rule "andLeft" (formula "1"))
                           (rule "selectOfAnonEQ" (formula "2") (term "0,0") (ifseqformula "54"))
                            (builtin "One Step Simplification" (formula "2") (ifInst ""  (formula "1")))
                           (rule "dismissNonSelectedField" (formula "2") (term "0,0,0,0,0"))
                           (rule "dismissNonSelectedField" (formula "2") (term "2,0,0"))
                           (rule "ifthenelse_negated" (formula "2") (term "0,0"))
                           (rule "ifthenelse_split" (formula "2") (term "0,0"))
                           (branch "o_0.<created>@heapAfter_ArrayList = TRUE TRUE"
                              (rule "selectCreatedOfAnonEQ" (formula "3") (term "0,0") (ifseqformula "48"))
                               (builtin "One Step Simplification" (formula "3"))
                              (rule "selectOfAnonEQ" (formula "2") (term "0") (ifseqformula "48"))
                               (builtin "One Step Simplification" (formula "2") (ifInst ""  (formula "100")))
                              (rule "notLeft" (formula "1"))
                              (rule "notLeft" (formula "2"))
                              (rule "orRight" (formula "71"))
                              (rule "close" (formula "71") (ifseqformula "1"))
                           )
                           (branch "o_0.<created>@heapAfter_ArrayList = TRUE FALSE"
                              (rule "selectCreatedOfAnonEQ" (formula "72") (term "0") (ifseqformula "47"))
                               (builtin "One Step Simplification" (formula "72"))
                              (rule "orRight" (formula "72"))
                              (rule "notLeft" (formula "1"))
                              (rule "notLeft" (formula "1"))
                              (rule "eqSymm" (formula "102"))
                              (rule "replace_known_right" (formula "101") (term "0,1") (ifseqformula "72"))
                               (builtin "One Step Simplification" (formula "101") (ifInst ""  (formula "71")))
                              (rule "closeTrue" (formula "101"))
                           )
                        )
                        (branch " ¬o_0 = null ∧ ¬o_0.<created>@heapAfter_addInputCols = TRUE FALSE"
                           (rule "selectOfAnonEQ" (formula "1") (term "0,0,1,1") (ifseqformula "52"))
                            (builtin "One Step Simplification" (formula "1"))
                           (rule "dismissNonSelectedField" (formula "1") (term "2,0,0,1,1"))
                           (rule "dismissNonSelectedField" (formula "1") (term "0,0,1,0,0,0,1,1"))
                           (rule "ifthenelse_split" (formula "1") (term "0,0,1,1"))
                           (branch "¬o_0 = null ∧ ¬o_0.<created>@heapAfter_ArrayList = TRUE TRUE"
                              (rule "andLeft" (formula "1"))
                              (rule "selectCreatedOfAnonEQ" (formula "72") (term "0,0,1") (ifseqformula "54"))
                               (builtin "One Step Simplification" (formula "72") (ifInst ""  (formula "1")))
                              (rule "dismissNonSelectedField" (formula "72") (term "0,0,0"))
                              (rule "selectCreatedOfAnonEQ" (formula "2") (term "0,0") (ifseqformula "47"))
                               (builtin "One Step Simplification" (formula "2"))
                              (rule "selectOfAnonEQ" (formula "72") (term "0,0,0") (ifseqformula "47"))
                               (builtin "One Step Simplification" (formula "72") (ifInst ""  (formula "100")))
                              (rule "notRight" (formula "72"))
                              (rule "notLeft" (formula "3"))
                              (rule "notLeft" (formula "2"))
                              (rule "orRight" (formula "72"))
                              (rule "eqSymm" (formula "102"))
                              (rule "replace_known_right" (formula "2") (term "0,0,1") (ifseqformula "71"))
                               (builtin "One Step Simplification" (formula "2"))
                              (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "72"))
                               (builtin "One Step Simplification" (formula "1"))
                              (rule "replace_known_right" (formula "100") (term "0") (ifseqformula "71"))
                               (builtin "One Step Simplification" (formula "100"))
                              (rule "false_right" (formula "100"))
                              (rule "replace_known_right" (formula "100") (term "0,1") (ifseqformula "72"))
                               (builtin "One Step Simplification" (formula "100") (ifInst ""  (formula "71")))
                              (rule "closeTrue" (formula "100"))
                           )
                           (branch "¬o_0 = null ∧ ¬o_0.<created>@heapAfter_ArrayList = TRUE FALSE"
                              (rule "selectCreatedOfAnonEQ" (formula "71") (term "0,0,1") (ifseqformula "52"))
                               (builtin "One Step Simplification" (formula "71"))
                              (rule "dismissNonSelectedField" (formula "71") (term "0,0,0,1"))
                              (rule "selectCreatedOfAnonEQ" (formula "1") (term "0,0,1,1") (ifseqformula "45"))
                               (builtin "One Step Simplification" (formula "1"))
                              (rule "selectCreatedOfAnonEQ" (formula "70") (term "0,0,1") (ifseqformula "45"))
                               (builtin "One Step Simplification" (formula "70"))
                              (rule "selectOfAnonEQ" (formula "71") (term "0,0,0,1") (ifseqformula "45"))
                               (builtin "One Step Simplification" (formula "71") (ifInst ""  (formula "99")))
                              (rule "eqSymm" (formula "100"))
                              (rule "replace_known_right" (formula "1") (term "1") (ifseqformula "70"))
                               (builtin "One Step Simplification" (formula "1"))
                              (rule "andLeft" (formula "1"))
                              (rule "andLeft" (formula "1"))
                              (rule "notLeft" (formula "3"))
                              (rule "polySimp_homoEq" (formula "69"))
                              (rule "polySimp_homoEq" (formula "66"))
                              (rule "polySimp_homoEq" (formula "63") (term "1"))
                              (rule "mul_literals" (formula "63") (term "1,0,1"))
                              (rule "add_zero_right" (formula "63") (term "0,1"))
                              (rule "polySimp_mulComm0" (formula "69") (term "1,0"))
                              (rule "polySimp_mulComm0" (formula "66") (term "1,0"))
                              (rule "polySimp_rightDist" (formula "69") (term "1,0"))
                              (rule "polySimp_mulLiterals" (formula "69") (term "1,1,0"))
                              (rule "polySimp_elimOne" (formula "69") (term "1,1,0"))
                              (rule "polySimp_rightDist" (formula "66") (term "1,0"))
                              (rule "polySimp_mulAssoc" (formula "66") (term "0,1,0"))
                              (rule "polySimp_mulComm0" (formula "66") (term "0,0,1,0"))
                              (rule "polySimp_mulLiterals" (formula "66") (term "0,1,0"))
                              (rule "polySimp_elimOne" (formula "66") (term "0,1,0"))
                              (rule "polySimp_rightDist" (formula "69") (term "0,1,0"))
                              (rule "mul_literals" (formula "69") (term "0,0,1,0"))
                              (rule "polySimp_addAssoc" (formula "66") (term "0"))
                              (rule "polySimp_addAssoc" (formula "69") (term "0"))
                              (rule "polySimp_addAssoc" (formula "69") (term "0,0"))
                              (rule "add_literals" (formula "69") (term "0,0,0"))
                              (rule "inEqSimp_ltToLeq" (formula "63") (term "0"))
                              (rule "add_zero_right" (formula "63") (term "0,0"))
                              (rule "polySimp_rightDist" (formula "63") (term "1,0,0"))
                              (rule "mul_literals" (formula "63") (term "0,1,0,0"))
                              (rule "inEqSimp_ltToLeq" (formula "39") (term "0,0,0"))
                              (rule "polySimp_mulComm0" (formula "39") (term "1,0,0,0,0,0"))
                              (rule "inEqSimp_ltToLeq" (formula "65") (term "0,1"))
                              (rule "add_zero_right" (formula "65") (term "0,0,1"))
                              (rule "polySimp_rightDist" (formula "65") (term "1,0,0,1"))
                              (rule "mul_literals" (formula "65") (term "0,1,0,0,1"))
                              (rule "inEqSimp_ltToLeq" (formula "68"))
                              (rule "polySimp_rightDist" (formula "68") (term "1,0,0"))
                              (rule "mul_literals" (formula "68") (term "0,1,0,0"))
                              (rule "inEqSimp_ltToLeq" (formula "67") (term "0,1,1,0,0"))
                              (rule "add_zero_right" (formula "67") (term "0,0,1,1,0,0"))
                              (rule "polySimp_rightDist" (formula "67") (term "1,0,0,1,1,0,0"))
                              (rule "mul_literals" (formula "67") (term "0,1,0,0,1,1,0,0"))
                              (rule "inEqSimp_ltToLeq" (formula "44") (term "0,0,0,1,0"))
                              (rule "polySimp_mulComm0" (formula "44") (term "1,0,0,0,0,0,1,0"))
                              (rule "inEqSimp_ltToLeq" (formula "67") (term "0,0,1,0"))
                              (rule "polySimp_rightDist" (formula "67") (term "1,0,0,0,0,1,0"))
                              (rule "mul_literals" (formula "67") (term "0,1,0,0,0,0,1,0"))
                              (rule "inEqSimp_ltToLeq" (formula "44") (term "0,0,0"))
                              (rule "polySimp_mulComm0" (formula "44") (term "1,0,0,0,0,0"))
                              (rule "inEqSimp_ltToLeq" (formula "37") (term "0,0,0"))
                              (rule "polySimp_mulComm0" (formula "37") (term "1,0,0,0,0,0"))
                              (rule "inEqSimp_ltToLeq" (formula "42"))
                              (rule "polySimp_mulComm0" (formula "42") (term "1,0,0"))
                              (rule "polySimp_addComm1" (formula "42") (term "0"))
                              (rule "inEqSimp_ltToLeq" (formula "28") (term "0,0,0,0,0"))
                              (rule "polySimp_mulComm0" (formula "28") (term "1,0,0,0,0,0,0,0"))
                              (rule "inEqSimp_ltToLeq" (formula "35"))
                              (rule "polySimp_mulComm0" (formula "35") (term "1,0,0"))
                              (rule "polySimp_addComm1" (formula "35") (term "0"))
                              (rule "inEqSimp_ltToLeq" (formula "29") (term "0,0,0,0,0"))
                              (rule "polySimp_mulComm0" (formula "29") (term "1,0,0,0,0,0,0,0"))
                              (rule "inEqSimp_ltToLeq" (formula "32") (term "0,0,0"))
                              (rule "polySimp_mulComm0" (formula "32") (term "1,0,0,0,0,0"))
                              (rule "polySimp_addAssoc" (formula "63") (term "0,0"))
                              (rule "add_literals" (formula "63") (term "0,0,0"))
                              (rule "add_zero_left" (formula "63") (term "0,0"))
                              (rule "polySimp_addAssoc" (formula "65") (term "0,0,1"))
                              (rule "add_literals" (formula "65") (term "0,0,0,1"))
                              (rule "add_zero_left" (formula "65") (term "0,0,1"))
                              (rule "polySimp_addAssoc" (formula "68") (term "0,0"))
                              (rule "add_literals" (formula "68") (term "0,0,0"))
                              (rule "polySimp_addAssoc" (formula "67") (term "0,0,1,1,0,0"))
                              (rule "add_literals" (formula "67") (term "0,0,0,1,1,0,0"))
                              (rule "add_zero_left" (formula "67") (term "0,0,1,1,0,0"))
                              (rule "polySimp_addAssoc" (formula "67") (term "0,0,0,0,1,0"))
                              (rule "add_literals" (formula "67") (term "0,0,0,0,0,1,0"))
                              (rule "add_zero_left" (formula "67") (term "0,0,0,0,1,0"))
                              (rule "polySimp_pullOutFactor2" (formula "67") (term "0,0,0,1,0"))
                              (rule "add_literals" (formula "67") (term "1,0,0,0,1,0"))
                              (rule "times_zero_1" (formula "67") (term "0,0,0,1,0"))
                              (rule "leq_literals" (formula "67") (term "0,0,1,0"))
                               (builtin "One Step Simplification" (formula "67"))
                              (rule "inEqSimp_ltToLeq" (formula "66") (term "0,0,1,0"))
                              (rule "add_zero_right" (formula "66") (term "0,0,0,1,0"))
                              (rule "polySimp_rightDist" (formula "66") (term "1,0,0,0,1,0"))
                              (rule "mul_literals" (formula "66") (term "0,1,0,0,0,1,0"))
                              (rule "inEqSimp_ltToLeq" (formula "69") (term "0,1,0"))
                              (rule "add_zero_right" (formula "69") (term "0,0,1,0"))
                              (rule "polySimp_rightDist" (formula "69") (term "1,0,0,1,0"))
                              (rule "mul_literals" (formula "69") (term "0,1,0,0,1,0"))
                              (rule "inEqSimp_ltToLeq" (formula "68") (term "0,1,0"))
                              (rule "add_zero_right" (formula "68") (term "0,0,1,0"))
                              (rule "polySimp_rightDist" (formula "68") (term "1,0,0,1,0"))
                              (rule "mul_literals" (formula "68") (term "0,1,0,0,1,0"))
                              (rule "polySimp_addAssoc" (formula "66") (term "0,0,0,1,0"))
                              (rule "add_literals" (formula "66") (term "0,0,0,0,1,0"))
                              (rule "add_zero_left" (formula "66") (term "0,0,0,1,0"))
                              (rule "polySimp_addAssoc" (formula "69") (term "0,0,1,0"))
                              (rule "add_literals" (formula "69") (term "0,0,0,1,0"))
                              (rule "add_zero_left" (formula "69") (term "0,0,1,0"))
                              (rule "polySimp_addAssoc" (formula "68") (term "0,0,1,0"))
                              (rule "add_literals" (formula "68") (term "0,0,0,1,0"))
                              (rule "add_zero_left" (formula "68") (term "0,0,1,0"))
                              (rule "inEqSimp_ltToLeq" (formula "65"))
                              (rule "polySimp_mulComm0" (formula "65") (term "1,0,0"))
                              (rule "polySimp_addComm1" (formula "65") (term "0"))
                              (rule "inEqSimp_ltToLeq" (formula "67") (term "0,0"))
                              (rule "add_zero_right" (formula "67") (term "0,0,0"))
                              (rule "polySimp_rightDist" (formula "67") (term "1,0,0,0"))
                              (rule "polySimp_mulAssoc" (formula "67") (term "0,1,0,0,0"))
                              (rule "polySimp_mulComm0" (formula "67") (term "0,0,1,0,0,0"))
                              (rule "polySimp_mulLiterals" (formula "67") (term "0,1,0,0,0"))
                              (rule "polySimp_elimOne" (formula "67") (term "0,1,0,0,0"))
                              (rule "polySimp_addAssoc" (formula "67") (term "0,0,0"))
                              (rule "replace_known_left" (formula "67") (term "0,0") (ifseqformula "65"))
                               (builtin "One Step Simplification" (formula "67"))
                              (rule "applyEq" (formula "101") (term "0,0,0") (ifseqformula "1"))
                              (rule "replace_known_right" (formula "101") (term "0,0") (ifseqformula "75"))
                               (builtin "One Step Simplification" (formula "101"))
                              (rule "notRight" (formula "101"))
                              (rule "replace_known_left" (formula "74") (term "0,0,1") (ifseqformula "1"))
                               (builtin "One Step Simplification" (formula "74"))
                              (rule "false_right" (formula "74"))
                              (rule "replace_known_left" (formula "73") (term "0,0,1") (ifseqformula "1"))
                               (builtin "One Step Simplification" (formula "73"))
                              (rule "false_right" (formula "73"))
                              (rule "applyEq" (formula "99") (term "0,0") (ifseqformula "2"))
                              (rule "replace_known_right" (formula "99") (term "0") (ifseqformula "74"))
                               (builtin "One Step Simplification" (formula "99"))
                              (rule "false_right" (formula "99"))
                              (rule "applyEqRigid" (formula "72") (term "0") (ifseqformula "3"))
                               (builtin "One Step Simplification" (formula "72"))
                              (rule "false_right" (formula "72"))
                              (rule "applyEq" (formula "98") (term "2,0") (ifseqformula "3"))
                              (rule "narrowSelectType" (formula "98") (term "0") (ifseqformula "60"))
                              (rule "eqSymm" (formula "98"))
                              (rule "applyEq" (formula "98") (term "1,1") (ifseqformula "2"))
                              (rule "applyEq" (formula "98") (term "2,0") (ifseqformula "3"))
                              (rule "narrowSelectType" (formula "98") (term "0") (ifseqformula "21"))
                              (rule "eqSymm" (formula "98"))
                              (rule "applyEq" (formula "1") (term "1,0") (ifseqformula "2"))
                              (rule "close" (formula "72") (ifseqformula "1"))
                           )
                        )
                     )
                     (branch " o_0 = self_138 ∧ f_0 = java.util.Collection::$seq ∧ ¬f_0 = java.lang.Object::<created> ∨ ¬o_0 = null ∧ ¬o_0.<created>@heapAfter_add = TRUE FALSE"
                        (rule "orRight" (formula "97"))
                        (rule "selectOfAnonEQ" (formula "99") (term "1") (ifseqformula "54"))
                         (builtin "One Step Simplification" (formula "99"))
                        (rule "elementOfSingleton" (formula "99") (term "0,0,0,1"))
                        (rule "ifthenelse_split" (formula "99") (term "1"))
                        (branch " o_0 = self_138 ∧ f_0 = java.util.Collection::$seq ∧ ¬f_0 = java.lang.Object::<created> ∨ ¬o_0 = null ∧ ¬o_0.<created>@heapAfter_addInputCols = TRUE TRUE"
                           (rule "selectCreatedOfAnonEQ" (formula "99") (term "0,0,1") (ifseqformula "55"))
                            (builtin "One Step Simplification" (formula "99"))
                           (rule "selectOfAnonEQ" (formula "1") (term "0,0,1,1") (ifseqformula "52"))
                            (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "98")))
                           (rule "andLeft" (formula "1"))
                           (rule "dismissNonSelectedField" (formula "2") (term "0,0,1,0,0,0"))
                           (rule "dismissNonSelectedField" (formula "2") (term "2,0,0"))
                           (rule "ifthenelse_split" (formula "2") (term "0,0"))
                           (branch "¬o_0 = null ∧ ¬o_0.<created>@heapAfter_ArrayList = TRUE TRUE"
                              (rule "andLeft" (formula "2"))
                              (rule "selectCreatedOfAnonEQ" (formula "101") (term "0,0,0,1") (ifseqformula "54"))
                               (builtin "One Step Simplification" (formula "101") (ifInst ""  (formula "1")))
                              (rule "dismissNonSelectedField" (formula "101") (term "0,0,0,0"))
                              (rule "selectCreatedOfAnonEQ" (formula "2") (term "0,0") (ifseqformula "47"))
                               (builtin "One Step Simplification" (formula "2"))
                              (rule "selectCreatedOfAnonEQ" (formula "101") (term "0,0,0,0") (ifseqformula "47"))
                               (builtin "One Step Simplification" (formula "101"))
                              (rule "notLeft" (formula "1"))
                              (rule "notLeft" (formula "2"))
                              (rule "notRight" (formula "101"))
                              (rule "notLeft" (formula "2"))
                              (rule "orRight" (formula "70"))
                              (rule "eqSymm" (formula "103"))
                              (rule "replace_known_right" (formula "100") (term "0") (ifseqformula "73"))
                               (builtin "One Step Simplification" (formula "100"))
                              (rule "false_right" (formula "100"))
                              (rule "replace_known_right" (formula "100") (term "0,1") (ifseqformula "70"))
                               (builtin "One Step Simplification" (formula "100") (ifInst ""  (formula "73")))
                              (rule "closeTrue" (formula "100"))
                           )
                           (branch "¬o_0 = null ∧ ¬o_0.<created>@heapAfter_ArrayList = TRUE FALSE"
                              (rule "selectCreatedOfAnonEQ" (formula "101") (term "0,0,0,1") (ifseqformula "53"))
                               (builtin "One Step Simplification" (formula "101") (ifInst ""  (formula "1")))
                              (rule "dismissNonSelectedField" (formula "101") (term "0,0,0,0"))
                              (rule "selectOfAnonEQ" (formula "71") (term "0,0,1") (ifseqformula "46"))
                               (builtin "One Step Simplification" (formula "71") (ifInst ""  (formula "1")) (ifInst ""  (formula "99")))
                              (rule "selectCreatedOfAnonEQ" (formula "2") (term "0,0") (ifseqformula "46"))
                               (builtin "One Step Simplification" (formula "2"))
                              (rule "selectOfAnonEQ" (formula "101") (term "0,0,0,0") (ifseqformula "46"))
                               (builtin "One Step Simplification" (formula "101") (ifInst ""  (formula "99")))
                              (rule "notRight" (formula "101"))
                              (rule "notRight" (formula "72"))
                              (rule "notLeft" (formula "4"))
                              (rule "notLeft" (formula "3"))
                              (rule "orRight" (formula "72"))
                              (rule "close" (formula "72") (ifseqformula "1"))
                           )
                        )
                        (branch " o_0 = self_138 ∧ f_0 = java.util.Collection::$seq ∧ ¬f_0 = java.lang.Object::<created> ∨ ¬o_0 = null ∧ ¬o_0.<created>@heapAfter_addInputCols = TRUE FALSE"
                           (rule "orRight" (formula "99"))
                           (rule "selectCreatedOfAnonEQ" (formula "98") (term "0,0,1") (ifseqformula "54"))
                            (builtin "One Step Simplification" (formula "98"))
                           (rule "selectCreatedOfAnonEQ" (formula "99") (term "0,0,1") (ifseqformula "51"))
                            (builtin "One Step Simplification" (formula "99"))
                           (rule "dismissNonSelectedField" (formula "99") (term "0,0,0,1"))
                           (rule "selectOfAnonEQ" (formula "100") (term "1") (ifseqformula "51"))
                            (builtin "One Step Simplification" (formula "100"))
                           (rule "elementOfSingleton" (formula "100") (term "0,0,0,1"))
                           (rule "dismissNonSelectedField" (formula "100") (term "0,0,1,1,0,1"))
                           (rule "ifthenelse_split" (formula "100") (term "1"))
                           (branch " o_0 = self_138 ∧ f_0 = java.util.Collection::$seq ∧ ¬f_0 = java.lang.Object::<created> ∨ ¬o_0 = null ∧ ¬o_0.<created>@heapAfter_ArrayList = TRUE TRUE"
                              (rule "selectOfAnonEQ" (formula "100") (term "0,0,0,1") (ifseqformula "45"))
                               (builtin "One Step Simplification" (formula "100") (ifInst ""  (formula "97")))
                              (rule "selectCreatedOfAnonEQ" (formula "1") (term "0,0,1,1") (ifseqformula "45"))
                               (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "98")))
                              (rule "andLeft" (formula "1"))
                              (rule "selectCreatedOfAnonEQ" (formula "100") (term "0,0,0,1") (ifseqformula "53"))
                               (builtin "One Step Simplification" (formula "100") (ifInst ""  (formula "1")))
                              (rule "dismissNonSelectedField" (formula "100") (term "0,0,0,0"))
                              (rule "selectCreatedOfAnonEQ" (formula "100") (term "0,0,0,0") (ifseqformula "46"))
                               (builtin "One Step Simplification" (formula "100"))
                              (rule "notLeft" (formula "2"))
                              (rule "notRight" (formula "100"))
                              (rule "notLeft" (formula "2"))
                              (rule "orRight" (formula "71"))
                              (rule "eqSymm" (formula "103"))
                              (rule "replace_known_right" (formula "99") (term "0") (ifseqformula "70"))
                               (builtin "One Step Simplification" (formula "99"))
                              (rule "false_right" (formula "99"))
                              (rule "replace_known_right" (formula "99") (term "0,0") (ifseqformula "70"))
                               (builtin "One Step Simplification" (formula "99") (ifInst ""  (formula "71")))
                              (rule "closeTrue" (formula "99"))
                           )
                           (branch " o_0 = self_138 ∧ f_0 = java.util.Collection::$seq ∧ ¬f_0 = java.lang.Object::<created> ∨ ¬o_0 = null ∧ ¬o_0.<created>@heapAfter_ArrayList = TRUE FALSE"
                              (rule "orRight" (formula "100"))
                              (rule "selectOfAnonEQ" (formula "99") (term "0,0,0,1") (ifseqformula "44"))
                               (builtin "One Step Simplification" (formula "99") (ifInst ""  (formula "96")))
                              (rule "selectOfStore" (formula "101") (term "1"))
                               (builtin "One Step Simplification" (formula "101"))
                              (rule "castDel" (formula "101") (term "1,1"))
                              (rule "ifthenelse_split" (formula "101") (term "1"))
                              (branch " null = o_0 ∧ de.polyas.core3.open.cred.CredTool::$polyasVals = f_0 TRUE"
                                 (rule "andLeft" (formula "1"))
                                 (rule "selectCreatedOfAnonEQ" (formula "102") (term "0,0,1") (ifseqformula "46"))
                                  (builtin "One Step Simplification" (formula "102"))
                                 (rule "selectCreatedOfAnonEQ" (formula "100") (term "0,0,0,1") (ifseqformula "53"))
                                  (builtin "One Step Simplification" (formula "100"))
                                 (rule "dismissNonSelectedField" (formula "100") (term "0,0,0,0,1"))
                                 (rule "selectOfAnonEQ" (formula "100") (term "0,0,0,0,1") (ifseqformula "46"))
                                  (builtin "One Step Simplification" (formula "100") (ifInst ""  (formula "98")))
                                 (rule "eqSymm" (formula "2"))
                                 (rule "eqSymm" (formula "1"))
                                 (rule "replace_known_left" (formula "98") (term "0,0") (ifseqformula "1"))
                                  (builtin "One Step Simplification" (formula "98"))
                                 (rule "false_right" (formula "98"))
                                 (rule "replace_known_left" (formula "97") (term "1") (ifseqformula "2"))
                                  (builtin "One Step Simplification" (formula "97") (ifInst ""  (formula "1")))
                                 (rule "closeTrue" (formula "97"))
                              )
                              (branch " null = o_0 ∧ de.polyas.core3.open.cred.CredTool::$polyasVals = f_0 FALSE"
                                 (rule "selectCreatedOfAnonEQ" (formula "100") (term "0,0,1") (ifseqformula "44"))
                                  (builtin "One Step Simplification" (formula "100"))
                                 (rule "selectCreatedOfAnonEQ" (formula "98") (term "0,0,0,1") (ifseqformula "51"))
                                  (builtin "One Step Simplification" (formula "98"))
                                 (rule "dismissNonSelectedField" (formula "98") (term "0,0,0,0,1"))
                                 (rule "selectOfAnonEQ" (formula "102") (term "1") (ifseqformula "44"))
                                  (builtin "One Step Simplification" (formula "102") (ifInst ""  (formula "96")))
                                 (rule "closeTrue" (formula "102"))
                              )
                           )
                        )
                     )
                  )
               )
               (branch "Exceptional Post (add)"
                   (builtin "One Step Simplification" (formula "58"))
                   (builtin "One Step Simplification" (formula "85"))
                  (rule "replaceKnownSelect_taclet0000_19" (formula "58") (term "0,1,0,0,1,1"))
                  (rule "replaceKnownAuxiliaryConstant_taclet0000_20" (formula "58") (term "0,1,0,0,1,1"))
                  (rule "andLeft" (formula "58"))
                  (rule "selectCreatedOfAnonAsFormulaEQ" (formula "59") (term "1,0") (ifseqformula "58"))
                  (rule "selectCreatedOfAnonAsFormulaEQ" (formula "59") (term "0,1,0") (ifseqformula "54"))
                  (rule "selectCreatedOfAnonAsFormulaEQ" (formula "59") (term "0,0,1,0") (ifseqformula "51"))
                  (rule "andLeft" (formula "59"))
                  (rule "andLeft" (formula "60"))
                  (rule "andLeft" (formula "59"))
                  (rule "andLeft" (formula "61"))
                  (rule "notLeft" (formula "59"))
                  (rule "close" (formula "63") (ifseqformula "62"))
               )
               (branch "Pre (add)"
                   (builtin "One Step Simplification" (formula "83") (ifInst ""  (formula "79")) (ifInst ""  (formula "79")))
                  (rule "wellFormedAnonEQ" (formula "83") (term "0,1") (ifseqformula "54"))
                  (rule "selectCreatedOfAnonAsFormulaEQ" (formula "83") (term "1,1") (ifseqformula "54"))
                  (rule "selectCreatedOfAnonAsFormulaEQ" (formula "83") (term "0,1,1") (ifseqformula "51"))
                  (rule "wellFormedAnonEQ" (formula "83") (term "0,0,1") (ifseqformula "51"))
                  (rule "replace_known_left" (formula "83") (term "1,0,1") (ifseqformula "53"))
                   (builtin "One Step Simplification" (formula "83") (ifInst ""  (formula "50")))
                  (rule "dismissNonSelectedField" (formula "83") (term "0,0,0,1,1"))
                  (rule "selectCreatedOfAnonAsFormulaEQ" (formula "83") (term "0,0,1,1") (ifseqformula "44"))
                  (rule "replace_known_left" (formula "83") (term "0,0,0,1,1") (ifseqformula "15"))
                   (builtin "One Step Simplification" (formula "83"))
                  (rule "inEqSimp_ltToLeq" (formula "26") (term "0,0,0,0,0"))
                  (rule "polySimp_mulComm0" (formula "26") (term "1,0,0,0,0,0,0,0"))
                  (rule "inEqSimp_ltToLeq" (formula "27") (term "0,0,0,0,0"))
                  (rule "polySimp_mulComm0" (formula "27") (term "1,0,0,0,0,0,0,0"))
                  (rule "inEqSimp_ltToLeq" (formula "40"))
                  (rule "polySimp_mulComm0" (formula "40") (term "1,0,0"))
                  (rule "polySimp_addComm1" (formula "40") (term "0"))
                  (rule "inEqSimp_ltToLeq" (formula "42") (term "0,0,0"))
                  (rule "polySimp_mulComm0" (formula "42") (term "1,0,0,0,0,0"))
                  (rule "inEqSimp_ltToLeq" (formula "37") (term "0,0,0"))
                  (rule "polySimp_mulComm0" (formula "37") (term "1,0,0,0,0,0"))
                  (rule "inEqSimp_ltToLeq" (formula "35") (term "0,0,0"))
                  (rule "polySimp_mulComm0" (formula "35") (term "1,0,0,0,0,0"))
                  (rule "inEqSimp_ltToLeq" (formula "33"))
                  (rule "polySimp_mulComm0" (formula "33") (term "1,0,0"))
                  (rule "polySimp_addComm1" (formula "33") (term "0"))
                  (rule "inEqSimp_ltToLeq" (formula "42") (term "0,0,0,1,0"))
                  (rule "polySimp_mulComm0" (formula "42") (term "1,0,0,0,0,0,1,0"))
                  (rule "inEqSimp_ltToLeq" (formula "30") (term "0,0,0"))
                  (rule "polySimp_mulComm0" (formula "30") (term "1,0,0,0,0,0"))
                  (rule "inEqSimp_sepPosMonomial0" (formula "26") (term "0,0,0,0,0"))
                  (rule "polySimp_mulComm0" (formula "26") (term "1,0,0,0,0,0"))
                  (rule "polySimp_rightDist" (formula "26") (term "1,0,0,0,0,0"))
                  (rule "mul_literals" (formula "26") (term "0,1,0,0,0,0,0"))
                  (rule "polySimp_mulLiterals" (formula "26") (term "1,1,0,0,0,0,0"))
                  (rule "polySimp_elimOne" (formula "26") (term "1,1,0,0,0,0,0"))
                  (rule "inEqSimp_sepPosMonomial0" (formula "27") (term "0,0,0,0,0"))
                  (rule "polySimp_mulComm0" (formula "27") (term "1,0,0,0,0,0"))
                  (rule "polySimp_rightDist" (formula "27") (term "1,0,0,0,0,0"))
                  (rule "polySimp_mulLiterals" (formula "27") (term "1,1,0,0,0,0,0"))
                  (rule "mul_literals" (formula "27") (term "0,1,0,0,0,0,0"))
                  (rule "polySimp_elimOne" (formula "27") (term "1,1,0,0,0,0,0"))
                  (rule "inEqSimp_sepNegMonomial0" (formula "40"))
                  (rule "polySimp_mulLiterals" (formula "40") (term "0"))
                  (rule "polySimp_elimOne" (formula "40") (term "0"))
                  (rule "inEqSimp_sepPosMonomial0" (formula "42") (term "0,0,0"))
                  (rule "polySimp_mulComm0" (formula "42") (term "1,0,0,0"))
                  (rule "polySimp_rightDist" (formula "42") (term "1,0,0,0"))
                  (rule "polySimp_mulLiterals" (formula "42") (term "1,1,0,0,0"))
                  (rule "mul_literals" (formula "42") (term "0,1,0,0,0"))
                  (rule "polySimp_elimOne" (formula "42") (term "1,1,0,0,0"))
                  (rule "inEqSimp_sepPosMonomial0" (formula "37") (term "0,0,0"))
                  (rule "polySimp_mulComm0" (formula "37") (term "1,0,0,0"))
                  (rule "polySimp_rightDist" (formula "37") (term "1,0,0,0"))
                  (rule "polySimp_mulLiterals" (formula "37") (term "1,1,0,0,0"))
                  (rule "mul_literals" (formula "37") (term "0,1,0,0,0"))
                  (rule "polySimp_elimOne" (formula "37") (term "1,1,0,0,0"))
                  (rule "inEqSimp_sepPosMonomial0" (formula "35") (term "0,0,0"))
                  (rule "polySimp_mulComm0" (formula "35") (term "1,0,0,0"))
                  (rule "polySimp_rightDist" (formula "35") (term "1,0,0,0"))
                  (rule "polySimp_mulLiterals" (formula "35") (term "1,1,0,0,0"))
                  (rule "mul_literals" (formula "35") (term "0,1,0,0,0"))
                  (rule "polySimp_elimOne" (formula "35") (term "1,1,0,0,0"))
                  (rule "inEqSimp_sepNegMonomial0" (formula "33"))
                  (rule "polySimp_mulLiterals" (formula "33") (term "0"))
                  (rule "polySimp_elimOne" (formula "33") (term "0"))
                  (rule "inEqSimp_sepPosMonomial0" (formula "42") (term "0,0,0,1,0"))
                  (rule "polySimp_mulComm0" (formula "42") (term "1,0,0,0,1,0"))
                  (rule "polySimp_rightDist" (formula "42") (term "1,0,0,0,1,0"))
                  (rule "mul_literals" (formula "42") (term "0,1,0,0,0,1,0"))
                  (rule "polySimp_mulLiterals" (formula "42") (term "1,1,0,0,0,1,0"))
                  (rule "polySimp_elimOne" (formula "42") (term "1,1,0,0,0,1,0"))
                  (rule "inEqSimp_sepPosMonomial0" (formula "30") (term "0,0,0"))
                  (rule "polySimp_mulComm0" (formula "30") (term "1,0,0,0"))
                  (rule "polySimp_rightDist" (formula "30") (term "1,0,0,0"))
                  (rule "polySimp_mulLiterals" (formula "30") (term "1,1,0,0,0"))
                  (rule "mul_literals" (formula "30") (term "0,1,0,0,0"))
                  (rule "polySimp_elimOne" (formula "30") (term "1,1,0,0,0"))
                  (rule "wellFormedStoreObject" (formula "83") (term "1"))
                   (builtin "One Step Simplification" (formula "83") (ifInst ""  (formula "58")))
                  (rule "wellFormedAnonEQ" (formula "83") (term "0,1") (ifseqformula "44"))
                  (rule "selectCreatedOfAnonAsFormulaEQ" (formula "83") (term "1,1") (ifseqformula "44"))
                  (rule "replace_known_left" (formula "83") (term "1,0,1") (ifseqformula "43"))
                   (builtin "One Step Simplification" (formula "83") (ifInst ""  (formula "18")) (ifInst ""  (formula "57")) (ifInst ""  (formula "46")))
                  (rule "inEqSimp_and_subsumption3" (formula "26") (term "0,0,0"))
                  (rule "leq_literals" (formula "26") (term "0,1,0,0,0,0"))
                   (builtin "One Step Simplification" (formula "26"))
                  (rule "inEqSimp_and_subsumption3" (formula "27") (term "0,0,0"))
                  (rule "leq_literals" (formula "27") (term "0,1,0,0,0,0"))
                   (builtin "One Step Simplification" (formula "27"))
                  (rule "nnf_imp2or" (formula "37") (term "0"))
                  (rule "nnf_imp2or" (formula "35") (term "0"))
                  (rule "nnf_imp2or" (formula "42") (term "0"))
                  (rule "nnf_imp2or" (formula "30") (term "0"))
                  (rule "nnf_imp2or" (formula "26") (term "0"))
                  (rule "nnf_imp2or" (formula "27") (term "0"))
                  (rule "nnf_notAnd" (formula "37") (term "0,0"))
                  (rule "inEqSimp_notLeq" (formula "37") (term "0,0,0"))
                  (rule "polySimp_rightDist" (formula "37") (term "1,0,0,0,0,0"))
                  (rule "mul_literals" (formula "37") (term "0,1,0,0,0,0,0"))
                  (rule "polySimp_addAssoc" (formula "37") (term "0,0,0,0,0"))
                  (rule "add_literals" (formula "37") (term "0,0,0,0,0,0"))
                  (rule "add_zero_left" (formula "37") (term "0,0,0,0,0"))
                  (rule "inEqSimp_sepPosMonomial1" (formula "37") (term "0,0,0"))
                  (rule "polySimp_mulLiterals" (formula "37") (term "1,0,0,0"))
                  (rule "polySimp_elimOne" (formula "37") (term "1,0,0,0"))
                  (rule "inEqSimp_notGeq" (formula "37") (term "1,0,0"))
                  (rule "mul_literals" (formula "37") (term "1,0,0,1,0,0"))
                  (rule "add_zero_right" (formula "37") (term "0,0,1,0,0"))
                  (rule "inEqSimp_sepPosMonomial0" (formula "37") (term "1,0,0"))
                  (rule "mul_literals" (formula "37") (term "1,1,0,0"))
                  (rule "nnf_notAnd" (formula "35") (term "0,0"))
                  (rule "inEqSimp_notLeq" (formula "35") (term "0,0,0"))
                  (rule "polySimp_rightDist" (formula "35") (term "1,0,0,0,0,0"))
                  (rule "mul_literals" (formula "35") (term "0,1,0,0,0,0,0"))
                  (rule "polySimp_addAssoc" (formula "35") (term "0,0,0,0,0"))
                  (rule "add_literals" (formula "35") (term "0,0,0,0,0,0"))
                  (rule "add_zero_left" (formula "35") (term "0,0,0,0,0"))
                  (rule "inEqSimp_sepPosMonomial1" (formula "35") (term "0,0,0"))
                  (rule "polySimp_mulLiterals" (formula "35") (term "1,0,0,0"))
                  (rule "polySimp_elimOne" (formula "35") (term "1,0,0,0"))
                  (rule "inEqSimp_notGeq" (formula "35") (term "1,0,0"))
                  (rule "mul_literals" (formula "35") (term "1,0,0,1,0,0"))
                  (rule "add_zero_right" (formula "35") (term "0,0,1,0,0"))
                  (rule "inEqSimp_sepPosMonomial0" (formula "35") (term "1,0,0"))
                  (rule "mul_literals" (formula "35") (term "1,1,0,0"))
                  (rule "nnf_notAnd" (formula "42") (term "0,0"))
                  (rule "inEqSimp_notGeq" (formula "42") (term "1,0,0"))
                  (rule "mul_literals" (formula "42") (term "1,0,0,1,0,0"))
                  (rule "add_zero_right" (formula "42") (term "0,0,1,0,0"))
                  (rule "inEqSimp_sepPosMonomial0" (formula "42") (term "1,0,0"))
                  (rule "mul_literals" (formula "42") (term "1,1,0,0"))
                  (rule "inEqSimp_notLeq" (formula "42") (term "0,0,0"))
                  (rule "polySimp_rightDist" (formula "42") (term "1,0,0,0,0,0"))
                  (rule "mul_literals" (formula "42") (term "0,1,0,0,0,0,0"))
                  (rule "polySimp_addAssoc" (formula "42") (term "0,0,0,0,0"))
                  (rule "add_literals" (formula "42") (term "0,0,0,0,0,0"))
                  (rule "add_zero_left" (formula "42") (term "0,0,0,0,0"))
                  (rule "inEqSimp_sepPosMonomial1" (formula "42") (term "0,0,0"))
                  (rule "polySimp_mulLiterals" (formula "42") (term "1,0,0,0"))
                  (rule "polySimp_elimOne" (formula "42") (term "1,0,0,0"))
                  (rule "nnf_notAnd" (formula "30") (term "0,0"))
                  (rule "inEqSimp_notLeq" (formula "30") (term "0,0,0"))
                  (rule "polySimp_rightDist" (formula "30") (term "1,0,0,0,0,0"))
                  (rule "mul_literals" (formula "30") (term "0,1,0,0,0,0,0"))
                  (rule "polySimp_addAssoc" (formula "30") (term "0,0,0,0,0"))
                  (rule "add_literals" (formula "30") (term "0,0,0,0,0,0"))
                  (rule "add_zero_left" (formula "30") (term "0,0,0,0,0"))
                  (rule "inEqSimp_sepPosMonomial1" (formula "30") (term "0,0,0"))
                  (rule "polySimp_mulLiterals" (formula "30") (term "1,0,0,0"))
                  (rule "polySimp_elimOne" (formula "30") (term "1,0,0,0"))
                  (rule "inEqSimp_notGeq" (formula "30") (term "1,0,0"))
                  (rule "mul_literals" (formula "30") (term "1,0,0,1,0,0"))
                  (rule "add_zero_right" (formula "30") (term "0,0,1,0,0"))
                  (rule "inEqSimp_sepPosMonomial0" (formula "30") (term "1,0,0"))
                  (rule "mul_literals" (formula "30") (term "1,1,0,0"))
                  (rule "nnf_notAnd" (formula "26") (term "0,0"))
                  (rule "inEqSimp_notLeq" (formula "26") (term "1,0,0"))
                  (rule "mul_literals" (formula "26") (term "1,0,0,1,0,0"))
                  (rule "add_literals" (formula "26") (term "0,0,1,0,0"))
                  (rule "inEqSimp_sepPosMonomial1" (formula "26") (term "1,0,0"))
                  (rule "mul_literals" (formula "26") (term "1,1,0,0"))
                  (rule "nnf_notAnd" (formula "27") (term "0,0"))
                  (rule "inEqSimp_notLeq" (formula "27") (term "1,0,0"))
                  (rule "mul_literals" (formula "27") (term "1,0,0,1,0,0"))
                  (rule "add_literals" (formula "27") (term "0,0,1,0,0"))
                  (rule "inEqSimp_sepPosMonomial1" (formula "27") (term "1,0,0"))
                  (rule "mul_literals" (formula "27") (term "1,1,0,0"))
                  (rule "nnf_notAnd" (formula "26") (term "0,0,0"))
                  (rule "inEqSimp_notGeq" (formula "26") (term "1,0,0,0"))
                  (rule "mul_literals" (formula "26") (term "1,0,0,1,0,0,0"))
                  (rule "add_zero_right" (formula "26") (term "0,0,1,0,0,0"))
                  (rule "inEqSimp_sepPosMonomial0" (formula "26") (term "1,0,0,0"))
                  (rule "mul_literals" (formula "26") (term "1,1,0,0,0"))
                  (rule "inEqSimp_notLeq" (formula "26") (term "0,0,0,0"))
                  (rule "polySimp_rightDist" (formula "26") (term "1,0,0,0,0,0,0"))
                  (rule "mul_literals" (formula "26") (term "0,1,0,0,0,0,0,0"))
                  (rule "polySimp_addAssoc" (formula "26") (term "0,0,0,0,0,0"))
                  (rule "add_literals" (formula "26") (term "0,0,0,0,0,0,0"))
                  (rule "add_zero_left" (formula "26") (term "0,0,0,0,0,0"))
                  (rule "inEqSimp_sepPosMonomial1" (formula "26") (term "0,0,0,0"))
                  (rule "polySimp_mulLiterals" (formula "26") (term "1,0,0,0,0"))
                  (rule "polySimp_elimOne" (formula "26") (term "1,0,0,0,0"))
                  (rule "nnf_notAnd" (formula "27") (term "0,0,0"))
                  (rule "inEqSimp_notGeq" (formula "27") (term "1,0,0,0"))
                  (rule "times_zero_1" (formula "27") (term "1,0,0,1,0,0,0"))
                  (rule "add_zero_right" (formula "27") (term "0,0,1,0,0,0"))
                  (rule "inEqSimp_sepPosMonomial0" (formula "27") (term "1,0,0,0"))
                  (rule "mul_literals" (formula "27") (term "1,1,0,0,0"))
                  (rule "inEqSimp_notLeq" (formula "27") (term "0,0,0,0"))
                  (rule "polySimp_rightDist" (formula "27") (term "1,0,0,0,0,0,0"))
                  (rule "mul_literals" (formula "27") (term "0,1,0,0,0,0,0,0"))
                  (rule "polySimp_addAssoc" (formula "27") (term "0,0,0,0,0,0"))
                  (rule "add_literals" (formula "27") (term "0,0,0,0,0,0,0"))
                  (rule "add_zero_left" (formula "27") (term "0,0,0,0,0,0"))
                  (rule "inEqSimp_sepPosMonomial1" (formula "27") (term "0,0,0,0"))
                  (rule "polySimp_mulLiterals" (formula "27") (term "1,0,0,0,0"))
                  (rule "polySimp_elimOne" (formula "27") (term "1,0,0,0,0"))
                  (rule "Class_invariant_axiom_for_java_util_ArrayList" (formula "83"))
                  (rule "closeTrue" (formula "83"))
               )
               (branch "Null reference (var_5 = null)"
                   (builtin "One Step Simplification" (formula "83") (ifInst ""  (formula "58")))
                  (rule "closeTrue" (formula "83"))
               )
            )
            (branch "Null Reference (_dataForVoter_5 = null)"
                (builtin "One Step Simplification" (formula "84"))
                (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "83")))
               (rule "closeFalse" (formula "1"))
            )
         )
         (branch "Exceptional Post (add)"
             (builtin "One Step Simplification" (formula "47"))
             (builtin "One Step Simplification" (formula "74"))
            (rule "andLeft" (formula "47"))
            (rule "selectCreatedOfAnonAsFormulaEQ" (formula "48") (term "1,0") (ifseqformula "47"))
            (rule "selectCreatedOfAnonAsFormulaEQ" (formula "48") (term "0,1,0") (ifseqformula "44"))
            (rule "andLeft" (formula "48"))
            (rule "andLeft" (formula "48"))
            (rule "andLeft" (formula "50"))
            (rule "notLeft" (formula "48"))
            (rule "close" (formula "51") (ifseqformula "50"))
         )
         (branch "Pre (add)"
             (builtin "One Step Simplification" (formula "72") (ifInst ""  (formula "66")) (ifInst ""  (formula "66")))
            (rule "wellFormedAnonEQ" (formula "72") (term "0,1") (ifseqformula "44"))
            (rule "selectCreatedOfAnonAsFormulaEQ" (formula "72") (term "1,1") (ifseqformula "44"))
            (rule "replace_known_left" (formula "72") (term "1,0,1") (ifseqformula "43"))
             (builtin "One Step Simplification" (formula "72"))
            (rule "dismissNonSelectedField" (formula "72") (term "0,0,1,1"))
            (rule "selectCreatedOfAnonAsFormulaEQ" (formula "72") (term "0,1,1") (ifseqformula "37"))
            (rule "replace_known_left" (formula "72") (term "0,0,1,1") (ifseqformula "10"))
             (builtin "One Step Simplification" (formula "72"))
            (rule "inEqSimp_ltToLeq" (formula "30") (term "0,0,0"))
            (rule "polySimp_mulComm0" (formula "30") (term "1,0,0,0,0,0"))
            (rule "inEqSimp_ltToLeq" (formula "20") (term "0,0,0,0,0"))
            (rule "polySimp_mulComm0" (formula "20") (term "1,0,0,0,0,0,0,0"))
            (rule "inEqSimp_ltToLeq" (formula "35") (term "0,0,0"))
            (rule "polySimp_mulComm0" (formula "35") (term "1,0,0,0,0,0"))
            (rule "inEqSimp_ltToLeq" (formula "28") (term "0,0,0"))
            (rule "polySimp_mulComm0" (formula "28") (term "1,0,0,0,0,0"))
            (rule "inEqSimp_ltToLeq" (formula "26"))
            (rule "polySimp_mulComm0" (formula "26") (term "1,0,0"))
            (rule "polySimp_addComm1" (formula "26") (term "0"))
            (rule "inEqSimp_ltToLeq" (formula "19") (term "0,0,0,0,0"))
            (rule "polySimp_mulComm0" (formula "19") (term "1,0,0,0,0,0,0,0"))
            (rule "inEqSimp_ltToLeq" (formula "33"))
            (rule "polySimp_mulComm0" (formula "33") (term "1,0,0"))
            (rule "polySimp_addComm1" (formula "33") (term "0"))
            (rule "inEqSimp_ltToLeq" (formula "23") (term "0,0,0"))
            (rule "polySimp_mulComm0" (formula "23") (term "1,0,0,0,0,0"))
            (rule "inEqSimp_ltToLeq" (formula "35") (term "0,0,0,1,0"))
            (rule "polySimp_mulComm0" (formula "35") (term "1,0,0,0,0,0,1,0"))
            (rule "inEqSimp_sepPosMonomial0" (formula "30") (term "0,0,0"))
            (rule "polySimp_mulComm0" (formula "30") (term "1,0,0,0"))
            (rule "polySimp_rightDist" (formula "30") (term "1,0,0,0"))
            (rule "mul_literals" (formula "30") (term "0,1,0,0,0"))
            (rule "polySimp_mulLiterals" (formula "30") (term "1,1,0,0,0"))
            (rule "polySimp_elimOne" (formula "30") (term "1,1,0,0,0"))
            (rule "inEqSimp_sepPosMonomial0" (formula "20") (term "0,0,0,0,0"))
            (rule "polySimp_mulComm0" (formula "20") (term "1,0,0,0,0,0"))
            (rule "polySimp_rightDist" (formula "20") (term "1,0,0,0,0,0"))
            (rule "polySimp_mulLiterals" (formula "20") (term "1,1,0,0,0,0,0"))
            (rule "mul_literals" (formula "20") (term "0,1,0,0,0,0,0"))
            (rule "polySimp_elimOne" (formula "20") (term "1,1,0,0,0,0,0"))
            (rule "inEqSimp_sepPosMonomial0" (formula "35") (term "0,0,0"))
            (rule "polySimp_mulComm0" (formula "35") (term "1,0,0,0"))
            (rule "polySimp_rightDist" (formula "35") (term "1,0,0,0"))
            (rule "polySimp_mulLiterals" (formula "35") (term "1,1,0,0,0"))
            (rule "mul_literals" (formula "35") (term "0,1,0,0,0"))
            (rule "polySimp_elimOne" (formula "35") (term "1,1,0,0,0"))
            (rule "inEqSimp_sepPosMonomial0" (formula "28") (term "0,0,0"))
            (rule "polySimp_mulComm0" (formula "28") (term "1,0,0,0"))
            (rule "polySimp_rightDist" (formula "28") (term "1,0,0,0"))
            (rule "polySimp_mulLiterals" (formula "28") (term "1,1,0,0,0"))
            (rule "mul_literals" (formula "28") (term "0,1,0,0,0"))
            (rule "polySimp_elimOne" (formula "28") (term "1,1,0,0,0"))
            (rule "inEqSimp_sepNegMonomial0" (formula "26"))
            (rule "polySimp_mulLiterals" (formula "26") (term "0"))
            (rule "polySimp_elimOne" (formula "26") (term "0"))
            (rule "inEqSimp_sepPosMonomial0" (formula "19") (term "0,0,0,0,0"))
            (rule "polySimp_mulComm0" (formula "19") (term "1,0,0,0,0,0"))
            (rule "polySimp_rightDist" (formula "19") (term "1,0,0,0,0,0"))
            (rule "polySimp_mulLiterals" (formula "19") (term "1,1,0,0,0,0,0"))
            (rule "mul_literals" (formula "19") (term "0,1,0,0,0,0,0"))
            (rule "polySimp_elimOne" (formula "19") (term "1,1,0,0,0,0,0"))
            (rule "inEqSimp_sepNegMonomial0" (formula "33"))
            (rule "polySimp_mulLiterals" (formula "33") (term "0"))
            (rule "polySimp_elimOne" (formula "33") (term "0"))
            (rule "inEqSimp_sepPosMonomial0" (formula "23") (term "0,0,0"))
            (rule "polySimp_mulComm0" (formula "23") (term "1,0,0,0"))
            (rule "polySimp_rightDist" (formula "23") (term "1,0,0,0"))
            (rule "mul_literals" (formula "23") (term "0,1,0,0,0"))
            (rule "polySimp_mulLiterals" (formula "23") (term "1,1,0,0,0"))
            (rule "polySimp_elimOne" (formula "23") (term "1,1,0,0,0"))
            (rule "inEqSimp_sepPosMonomial0" (formula "35") (term "0,0,0,1,0"))
            (rule "polySimp_mulComm0" (formula "35") (term "1,0,0,0,1,0"))
            (rule "polySimp_rightDist" (formula "35") (term "1,0,0,0,1,0"))
            (rule "polySimp_mulLiterals" (formula "35") (term "1,1,0,0,0,1,0"))
            (rule "mul_literals" (formula "35") (term "0,1,0,0,0,1,0"))
            (rule "polySimp_elimOne" (formula "35") (term "1,1,0,0,0,1,0"))
            (rule "wellFormedStoreObject" (formula "72") (term "1"))
             (builtin "One Step Simplification" (formula "72") (ifInst ""  (formula "47")))
            (rule "wellFormedAnonEQ" (formula "72") (term "0,1") (ifseqformula "37"))
            (rule "selectCreatedOfAnonAsFormulaEQ" (formula "72") (term "1,1") (ifseqformula "37"))
            (rule "replace_known_left" (formula "72") (term "0,0,1") (ifseqformula "11"))
             (builtin "One Step Simplification" (formula "72") (ifInst ""  (formula "36")) (ifInst ""  (formula "46")) (ifInst ""  (formula "39")))
            (rule "inEqSimp_and_subsumption3" (formula "20") (term "0,0,0"))
            (rule "leq_literals" (formula "20") (term "0,1,0,0,0,0"))
             (builtin "One Step Simplification" (formula "20"))
            (rule "inEqSimp_and_subsumption3" (formula "19") (term "0,0,0"))
            (rule "leq_literals" (formula "19") (term "0,1,0,0,0,0"))
             (builtin "One Step Simplification" (formula "19"))
            (rule "nnf_imp2or" (formula "30") (term "0"))
            (rule "nnf_imp2or" (formula "28") (term "0"))
            (rule "nnf_imp2or" (formula "23") (term "0"))
            (rule "nnf_imp2or" (formula "35") (term "0"))
            (rule "nnf_imp2or" (formula "20") (term "0"))
            (rule "nnf_imp2or" (formula "19") (term "0"))
            (rule "nnf_notAnd" (formula "30") (term "0,0"))
            (rule "inEqSimp_notLeq" (formula "30") (term "0,0,0"))
            (rule "polySimp_rightDist" (formula "30") (term "1,0,0,0,0,0"))
            (rule "mul_literals" (formula "30") (term "0,1,0,0,0,0,0"))
            (rule "polySimp_addAssoc" (formula "30") (term "0,0,0,0,0"))
            (rule "add_literals" (formula "30") (term "0,0,0,0,0,0"))
            (rule "add_zero_left" (formula "30") (term "0,0,0,0,0"))
            (rule "inEqSimp_sepPosMonomial1" (formula "30") (term "0,0,0"))
            (rule "polySimp_mulLiterals" (formula "30") (term "1,0,0,0"))
            (rule "polySimp_elimOne" (formula "30") (term "1,0,0,0"))
            (rule "inEqSimp_notGeq" (formula "30") (term "1,0,0"))
            (rule "mul_literals" (formula "30") (term "1,0,0,1,0,0"))
            (rule "add_literals" (formula "30") (term "0,0,1,0,0"))
            (rule "inEqSimp_sepPosMonomial0" (formula "30") (term "1,0,0"))
            (rule "mul_literals" (formula "30") (term "1,1,0,0"))
            (rule "nnf_notAnd" (formula "28") (term "0,0"))
            (rule "inEqSimp_notLeq" (formula "28") (term "0,0,0"))
            (rule "polySimp_rightDist" (formula "28") (term "1,0,0,0,0,0"))
            (rule "mul_literals" (formula "28") (term "0,1,0,0,0,0,0"))
            (rule "polySimp_addAssoc" (formula "28") (term "0,0,0,0,0"))
            (rule "add_literals" (formula "28") (term "0,0,0,0,0,0"))
            (rule "add_zero_left" (formula "28") (term "0,0,0,0,0"))
            (rule "inEqSimp_sepPosMonomial1" (formula "28") (term "0,0,0"))
            (rule "polySimp_mulLiterals" (formula "28") (term "1,0,0,0"))
            (rule "polySimp_elimOne" (formula "28") (term "1,0,0,0"))
            (rule "inEqSimp_notGeq" (formula "28") (term "1,0,0"))
            (rule "mul_literals" (formula "28") (term "1,0,0,1,0,0"))
            (rule "add_literals" (formula "28") (term "0,0,1,0,0"))
            (rule "inEqSimp_sepPosMonomial0" (formula "28") (term "1,0,0"))
            (rule "mul_literals" (formula "28") (term "1,1,0,0"))
            (rule "nnf_notAnd" (formula "23") (term "0,0"))
            (rule "inEqSimp_notLeq" (formula "23") (term "0,0,0"))
            (rule "polySimp_rightDist" (formula "23") (term "1,0,0,0,0,0"))
            (rule "mul_literals" (formula "23") (term "0,1,0,0,0,0,0"))
            (rule "polySimp_addAssoc" (formula "23") (term "0,0,0,0,0"))
            (rule "add_literals" (formula "23") (term "0,0,0,0,0,0"))
            (rule "add_zero_left" (formula "23") (term "0,0,0,0,0"))
            (rule "inEqSimp_sepPosMonomial1" (formula "23") (term "0,0,0"))
            (rule "polySimp_mulLiterals" (formula "23") (term "1,0,0,0"))
            (rule "polySimp_elimOne" (formula "23") (term "1,0,0,0"))
            (rule "inEqSimp_notGeq" (formula "23") (term "1,0,0"))
            (rule "mul_literals" (formula "23") (term "1,0,0,1,0,0"))
            (rule "add_literals" (formula "23") (term "0,0,1,0,0"))
            (rule "inEqSimp_sepPosMonomial0" (formula "23") (term "1,0,0"))
            (rule "mul_literals" (formula "23") (term "1,1,0,0"))
            (rule "nnf_notAnd" (formula "35") (term "0,0"))
            (rule "inEqSimp_notLeq" (formula "35") (term "0,0,0"))
            (rule "polySimp_rightDist" (formula "35") (term "1,0,0,0,0,0"))
            (rule "mul_literals" (formula "35") (term "0,1,0,0,0,0,0"))
            (rule "polySimp_addAssoc" (formula "35") (term "0,0,0,0,0"))
            (rule "add_literals" (formula "35") (term "0,0,0,0,0,0"))
            (rule "add_zero_left" (formula "35") (term "0,0,0,0,0"))
            (rule "inEqSimp_sepPosMonomial1" (formula "35") (term "0,0,0"))
            (rule "polySimp_mulLiterals" (formula "35") (term "1,0,0,0"))
            (rule "polySimp_elimOne" (formula "35") (term "1,0,0,0"))
            (rule "inEqSimp_notGeq" (formula "35") (term "1,0,0"))
            (rule "mul_literals" (formula "35") (term "1,0,0,1,0,0"))
            (rule "add_literals" (formula "35") (term "0,0,1,0,0"))
            (rule "inEqSimp_sepPosMonomial0" (formula "35") (term "1,0,0"))
            (rule "mul_literals" (formula "35") (term "1,1,0,0"))
            (rule "nnf_notAnd" (formula "20") (term "0,0"))
            (rule "inEqSimp_notLeq" (formula "20") (term "1,0,0"))
            (rule "mul_literals" (formula "20") (term "1,0,0,1,0,0"))
            (rule "add_literals" (formula "20") (term "0,0,1,0,0"))
            (rule "inEqSimp_sepPosMonomial1" (formula "20") (term "1,0,0"))
            (rule "mul_literals" (formula "20") (term "1,1,0,0"))
            (rule "nnf_notAnd" (formula "19") (term "0,0"))
            (rule "inEqSimp_notLeq" (formula "19") (term "1,0,0"))
            (rule "mul_literals" (formula "19") (term "1,0,0,1,0,0"))
            (rule "add_literals" (formula "19") (term "0,0,1,0,0"))
            (rule "inEqSimp_sepPosMonomial1" (formula "19") (term "1,0,0"))
            (rule "mul_literals" (formula "19") (term "1,1,0,0"))
            (rule "nnf_notAnd" (formula "20") (term "0,0,0"))
            (rule "inEqSimp_notGeq" (formula "20") (term "1,0,0,0"))
            (rule "mul_literals" (formula "20") (term "1,0,0,1,0,0,0"))
            (rule "add_literals" (formula "20") (term "0,0,1,0,0,0"))
            (rule "inEqSimp_sepPosMonomial0" (formula "20") (term "1,0,0,0"))
            (rule "mul_literals" (formula "20") (term "1,1,0,0,0"))
            (rule "inEqSimp_notLeq" (formula "20") (term "0,0,0,0"))
            (rule "polySimp_rightDist" (formula "20") (term "1,0,0,0,0,0,0"))
            (rule "mul_literals" (formula "20") (term "0,1,0,0,0,0,0,0"))
            (rule "polySimp_addAssoc" (formula "20") (term "0,0,0,0,0,0"))
            (rule "add_literals" (formula "20") (term "0,0,0,0,0,0,0"))
            (rule "add_zero_left" (formula "20") (term "0,0,0,0,0,0"))
            (rule "inEqSimp_sepPosMonomial1" (formula "20") (term "0,0,0,0"))
            (rule "polySimp_mulLiterals" (formula "20") (term "1,0,0,0,0"))
            (rule "polySimp_elimOne" (formula "20") (term "1,0,0,0,0"))
            (rule "nnf_notAnd" (formula "19") (term "0,0,0"))
            (rule "inEqSimp_notLeq" (formula "19") (term "0,0,0,0"))
            (rule "polySimp_rightDist" (formula "19") (term "1,0,0,0,0,0,0"))
            (rule "mul_literals" (formula "19") (term "0,1,0,0,0,0,0,0"))
            (rule "polySimp_addAssoc" (formula "19") (term "0,0,0,0,0,0"))
            (rule "add_literals" (formula "19") (term "0,0,0,0,0,0,0"))
            (rule "add_zero_left" (formula "19") (term "0,0,0,0,0,0"))
            (rule "inEqSimp_sepPosMonomial1" (formula "19") (term "0,0,0,0"))
            (rule "polySimp_mulLiterals" (formula "19") (term "1,0,0,0,0"))
            (rule "polySimp_elimOne" (formula "19") (term "1,0,0,0,0"))
            (rule "inEqSimp_notGeq" (formula "19") (term "1,0,0,0"))
            (rule "times_zero_1" (formula "19") (term "1,0,0,1,0,0,0"))
            (rule "add_literals" (formula "19") (term "0,0,1,0,0,0"))
            (rule "inEqSimp_sepPosMonomial0" (formula "19") (term "1,0,0,0"))
            (rule "mul_literals" (formula "19") (term "1,1,0,0,0"))
            (rule "Class_invariant_axiom_for_java_util_ArrayList" (formula "72"))
            (rule "closeTrue" (formula "72"))
         )
         (branch "Null reference (var_3 = null)"
             (builtin "One Step Simplification" (formula "72") (ifInst ""  (formula "47")))
            (rule "closeTrue" (formula "72"))
         )
      )
      (branch "Null Reference (_dataForVoter_5 = null)"
          (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "64")))
         (rule "closeFalse" (formula "1"))
      )
   )
   (branch "Exceptional Post (addInputCols)"
       (builtin "One Step Simplification" (formula "30"))
       (builtin "One Step Simplification" (formula "57"))
      (rule "andLeft" (formula "30"))
      (rule "selectCreatedOfAnonAsFormulaEQ" (formula "31") (term "1,0") (ifseqformula "30"))
      (rule "andLeft" (formula "31"))
      (rule "andLeft" (formula "31"))
      (rule "andLeft" (formula "33"))
      (rule "notLeft" (formula "31"))
      (rule "close" (formula "34") (ifseqformula "33"))
   )
   (branch "Pre (addInputCols)"
       (builtin "One Step Simplification" (formula "55") (ifInst ""  (formula "30")) (ifInst ""  (formula "45")) (ifInst ""  (formula "53")) (ifInst ""  (formula "30")) (ifInst ""  (formula "45")) (ifInst ""  (formula "53")))
      (rule "eqSymm" (formula "55") (term "0,0,1,1,0"))
      (rule "eqSymm" (formula "55") (term "1,0,1,0,0,0"))
      (rule "dismissNonSelectedField" (formula "55") (term "0,1,0,0,1"))
      (rule "selectCreatedOfAnonAsFormulaEQ" (formula "55") (term "1,0,0,1") (ifseqformula "23"))
      (rule "replace_known_left" (formula "55") (term "1,1,0,0,1") (ifseqformula "25"))
       (builtin "One Step Simplification" (formula "55") (ifInst ""  (formula "29")))
      (rule "dismissNonSelectedField" (formula "55") (term "0,1,1"))
      (rule "selectCreatedOfAnonAsFormulaEQ" (formula "55") (term "1,1") (ifseqformula "23"))
      (rule "replace_known_left" (formula "55") (term "0,1,1") (ifseqformula "4"))
       (builtin "One Step Simplification" (formula "55"))
      (rule "dismissNonSelectedField" (formula "55") (term "0,0,1,1,0,1,0,0,0"))
      (rule "castedGetAny" (formula "55") (term "0,0,1,0,0,1,0"))
      (rule "dismissNonSelectedField" (formula "55") (term "0,0,0,1,0,1,0,0,0"))
      (rule "dismissNonSelectedField" (formula "55") (term "0,1,1,0,0,0,0"))
      (rule "dismissNonSelectedField" (formula "55") (term "0,1,1,0,0,1,0,0,0"))
      (rule "dismissNonSelectedField" (formula "55") (term "0,1,1,0,0,0,1,0"))
      (rule "dismissNonSelectedField" (formula "55") (term "0,1,1"))
      (rule "selectCreatedOfAnonAsFormulaEQ" (formula "55") (term "1,1") (ifseqformula "23"))
      (rule "castedGetAny" (formula "55") (term "1,1,0,1,0,0,0"))
      (rule "dismissNonSelectedField" (formula "55") (term "0,0,0,1,0,0,1,0"))
      (rule "castedGetAny" (formula "55") (term "0,1,0,1,0,0,0"))
      (rule "inEqSimp_ltToLeq" (formula "9") (term "0,0,0,0,0"))
      (rule "polySimp_mulComm0" (formula "9") (term "1,0,0,0,0,0,0,0"))
      (rule "inEqSimp_ltToLeq" (formula "17") (term "0,0,0"))
      (rule "polySimp_mulComm0" (formula "17") (term "1,0,0,0,0,0"))
      (rule "inEqSimp_ltToLeq" (formula "10") (term "0,0,0,0,0"))
      (rule "polySimp_mulComm0" (formula "10") (term "1,0,0,0,0,0,0,0"))
      (rule "inEqSimp_ltToLeq" (formula "21") (term "0,0,0"))
      (rule "polySimp_mulComm0" (formula "21") (term "1,0,0,0,0,0"))
      (rule "inEqSimp_ltToLeq" (formula "12") (term "0,0,0"))
      (rule "polySimp_mulComm0" (formula "12") (term "1,0,0,0,0,0"))
      (rule "inEqSimp_ltToLeq" (formula "21") (term "0,0,0,1,0"))
      (rule "polySimp_mulComm0" (formula "21") (term "1,0,0,0,0,0,1,0"))
      (rule "inEqSimp_ltToLeq" (formula "19"))
      (rule "polySimp_mulComm0" (formula "19") (term "1,0,0"))
      (rule "polySimp_addComm1" (formula "19") (term "0"))
      (rule "inEqSimp_ltToLeq" (formula "16") (term "0,0,0"))
      (rule "polySimp_mulComm0" (formula "16") (term "1,0,0,0,0,0"))
      (rule "inEqSimp_ltToLeq" (formula "14"))
      (rule "polySimp_mulComm0" (formula "14") (term "1,0,0"))
      (rule "polySimp_addComm1" (formula "14") (term "0"))
      (rule "inEqSimp_ltToLeq" (formula "55") (term "1,0,0,0,0"))
      (rule "polySimp_mulComm0" (formula "55") (term "1,0,0,1,0,0,0,0"))
      (rule "inEqSimp_ltToLeq" (formula "55") (term "1,0,0,1,0,0,0"))
      (rule "polySimp_mulComm0" (formula "55") (term "1,0,0,1,0,0,1,0,0,0"))
      (rule "inEqSimp_ltToLeq" (formula "55") (term "1,0,0,0,1,0"))
      (rule "polySimp_mulComm0" (formula "55") (term "1,0,0,1,0,0,0,1,0"))
      (rule "inEqSimp_commuteLeq" (formula "55") (term "0,0,0,1,0,0,0"))
      (rule "inEqSimp_commuteLeq" (formula "55") (term "0,0,0,0,1,0"))
      (rule "inEqSimp_commuteLeq" (formula "55") (term "0,0,0,0,0"))
      (rule "inEqSimp_sepPosMonomial0" (formula "9") (term "0,0,0,0,0"))
      (rule "polySimp_mulComm0" (formula "9") (term "1,0,0,0,0,0"))
      (rule "polySimp_rightDist" (formula "9") (term "1,0,0,0,0,0"))
      (rule "polySimp_mulLiterals" (formula "9") (term "1,1,0,0,0,0,0"))
      (rule "mul_literals" (formula "9") (term "0,1,0,0,0,0,0"))
      (rule "polySimp_elimOne" (formula "9") (term "1,1,0,0,0,0,0"))
      (rule "inEqSimp_sepPosMonomial0" (formula "17") (term "0,0,0"))
      (rule "polySimp_mulComm0" (formula "17") (term "1,0,0,0"))
      (rule "polySimp_rightDist" (formula "17") (term "1,0,0,0"))
      (rule "polySimp_mulLiterals" (formula "17") (term "1,1,0,0,0"))
      (rule "mul_literals" (formula "17") (term "0,1,0,0,0"))
      (rule "polySimp_elimOne" (formula "17") (term "1,1,0,0,0"))
      (rule "inEqSimp_sepPosMonomial0" (formula "10") (term "0,0,0,0,0"))
      (rule "polySimp_mulComm0" (formula "10") (term "1,0,0,0,0,0"))
      (rule "polySimp_rightDist" (formula "10") (term "1,0,0,0,0,0"))
      (rule "polySimp_mulLiterals" (formula "10") (term "1,1,0,0,0,0,0"))
      (rule "mul_literals" (formula "10") (term "0,1,0,0,0,0,0"))
      (rule "polySimp_elimOne" (formula "10") (term "1,1,0,0,0,0,0"))
      (rule "inEqSimp_sepPosMonomial0" (formula "21") (term "0,0,0"))
      (rule "polySimp_mulComm0" (formula "21") (term "1,0,0,0"))
      (rule "polySimp_rightDist" (formula "21") (term "1,0,0,0"))
      (rule "mul_literals" (formula "21") (term "0,1,0,0,0"))
      (rule "polySimp_mulLiterals" (formula "21") (term "1,1,0,0,0"))
      (rule "polySimp_elimOne" (formula "21") (term "1,1,0,0,0"))
      (rule "inEqSimp_sepPosMonomial0" (formula "12") (term "0,0,0"))
      (rule "polySimp_mulComm0" (formula "12") (term "1,0,0,0"))
      (rule "polySimp_rightDist" (formula "12") (term "1,0,0,0"))
      (rule "mul_literals" (formula "12") (term "0,1,0,0,0"))
      (rule "polySimp_mulLiterals" (formula "12") (term "1,1,0,0,0"))
      (rule "polySimp_elimOne" (formula "12") (term "1,1,0,0,0"))
      (rule "inEqSimp_sepPosMonomial0" (formula "21") (term "0,0,0,1,0"))
      (rule "polySimp_mulComm0" (formula "21") (term "1,0,0,0,1,0"))
      (rule "polySimp_rightDist" (formula "21") (term "1,0,0,0,1,0"))
      (rule "mul_literals" (formula "21") (term "0,1,0,0,0,1,0"))
      (rule "polySimp_mulLiterals" (formula "21") (term "1,1,0,0,0,1,0"))
      (rule "polySimp_elimOne" (formula "21") (term "1,1,0,0,0,1,0"))
      (rule "inEqSimp_sepNegMonomial0" (formula "19"))
      (rule "polySimp_mulLiterals" (formula "19") (term "0"))
      (rule "polySimp_elimOne" (formula "19") (term "0"))
      (rule "inEqSimp_sepPosMonomial0" (formula "16") (term "0,0,0"))
      (rule "polySimp_mulComm0" (formula "16") (term "1,0,0,0"))
      (rule "polySimp_rightDist" (formula "16") (term "1,0,0,0"))
      (rule "mul_literals" (formula "16") (term "0,1,0,0,0"))
      (rule "polySimp_mulLiterals" (formula "16") (term "1,1,0,0,0"))
      (rule "polySimp_elimOne" (formula "16") (term "1,1,0,0,0"))
      (rule "inEqSimp_sepNegMonomial0" (formula "14"))
      (rule "polySimp_mulLiterals" (formula "14") (term "0"))
      (rule "polySimp_elimOne" (formula "14") (term "0"))
      (rule "inEqSimp_sepPosMonomial0" (formula "55") (term "1,0,0,0,0"))
      (rule "polySimp_mulComm0" (formula "55") (term "1,1,0,0,0,0"))
      (rule "polySimp_rightDist" (formula "55") (term "1,1,0,0,0,0"))
      (rule "polySimp_mulLiterals" (formula "55") (term "1,1,1,0,0,0,0"))
      (rule "mul_literals" (formula "55") (term "0,1,1,0,0,0,0"))
      (rule "polySimp_elimOne" (formula "55") (term "1,1,1,0,0,0,0"))
      (rule "inEqSimp_sepPosMonomial0" (formula "55") (term "1,0,0,1,0,0,0"))
      (rule "polySimp_mulComm0" (formula "55") (term "1,1,0,0,1,0,0,0"))
      (rule "polySimp_rightDist" (formula "55") (term "1,1,0,0,1,0,0,0"))
      (rule "mul_literals" (formula "55") (term "0,1,1,0,0,1,0,0,0"))
      (rule "polySimp_mulLiterals" (formula "55") (term "1,1,1,0,0,1,0,0,0"))
      (rule "polySimp_elimOne" (formula "55") (term "1,1,1,0,0,1,0,0,0"))
      (rule "inEqSimp_sepPosMonomial0" (formula "55") (term "1,0,0,0,1,0"))
      (rule "polySimp_mulComm0" (formula "55") (term "1,1,0,0,0,1,0"))
      (rule "polySimp_rightDist" (formula "55") (term "1,1,0,0,0,1,0"))
      (rule "mul_literals" (formula "55") (term "0,1,1,0,0,0,1,0"))
      (rule "polySimp_mulLiterals" (formula "55") (term "1,1,1,0,0,0,1,0"))
      (rule "polySimp_elimOne" (formula "55") (term "1,1,1,0,0,0,1,0"))
      (rule "wellFormedStoreObject" (formula "55") (term "0,1"))
       (builtin "One Step Simplification" (formula "55") (ifInst ""  (formula "30")))
      (rule "selectCreatedOfAnonAsFormulaEQ" (formula "55") (term "1,0,1") (ifseqformula "23"))
      (rule "wellFormedAnonEQ" (formula "55") (term "0,0,1") (ifseqformula "23"))
      (rule "replace_known_left" (formula "55") (term "0,0,0,1") (ifseqformula "1"))
       (builtin "One Step Simplification" (formula "55") (ifInst ""  (formula "22")) (ifInst ""  (formula "29")) (ifInst ""  (formula "25")))
      (rule "pullOutSelect" (formula "55") (term "0,1,1,0,1,0,0,0") (inst "selectSK=org_apache_commons_csv_CSVRecord_key_seq_0"))
      (rule "applyEq" (formula "56") (term "0,1,1,1,0,0,1,0,0,0") (ifseqformula "1"))
      (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "24"))
       (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "54")) (ifInst ""  (formula "5")))
      (rule "applyEqReverse" (formula "56") (term "0,1,1,0,1,0,0,0") (ifseqformula "1"))
      (rule "applyEqReverse" (formula "56") (term "0,1,1,1,0,0,1,0,0,0") (ifseqformula "1"))
      (rule "hideAuxiliaryEq" (formula "1"))
      (rule "pullOutSelect" (formula "55") (term "0,1,1,1,0,0,0,1,0") (inst "selectSK=java_util_Collection_seq_1"))
      (rule "applyEq" (formula "56") (term "0,0,0,1,0,0,1,0") (ifseqformula "1"))
      (rule "applyEq" (formula "56") (term "0,1,1,1,0,0,0,0") (ifseqformula "1"))
      (rule "applyEq" (formula "56") (term "0,0,1,0,1,0,0,0") (ifseqformula "1"))
      (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "24"))
       (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "46")))
      (rule "ifthenelse_negated" (formula "1") (term "0"))
      (rule "inEqSimp_and_subsumption3" (formula "10") (term "0,0,0"))
      (rule "leq_literals" (formula "10") (term "0,1,0,0,0,0"))
       (builtin "One Step Simplification" (formula "10"))
      (rule "inEqSimp_and_subsumption3" (formula "11") (term "0,0,0"))
      (rule "leq_literals" (formula "11") (term "0,1,0,0,0,0"))
       (builtin "One Step Simplification" (formula "11"))
      (rule "nnf_imp2or" (formula "18") (term "0"))
      (rule "nnf_imp2or" (formula "13") (term "0"))
      (rule "nnf_imp2or" (formula "22") (term "0"))
      (rule "nnf_imp2or" (formula "17") (term "0"))
      (rule "nnf_imp2or" (formula "10") (term "0"))
      (rule "nnf_imp2or" (formula "11") (term "0"))
      (rule "nnf_imp2or" (formula "56") (term "0,0,0"))
      (rule "nnf_notAnd" (formula "18") (term "0,0"))
      (rule "inEqSimp_notGeq" (formula "18") (term "1,0,0"))
      (rule "mul_literals" (formula "18") (term "1,0,0,1,0,0"))
      (rule "add_zero_right" (formula "18") (term "0,0,1,0,0"))
      (rule "inEqSimp_sepPosMonomial0" (formula "18") (term "1,0,0"))
      (rule "mul_literals" (formula "18") (term "1,1,0,0"))
      (rule "inEqSimp_notLeq" (formula "18") (term "0,0,0"))
      (rule "polySimp_rightDist" (formula "18") (term "1,0,0,0,0,0"))
      (rule "mul_literals" (formula "18") (term "0,1,0,0,0,0,0"))
      (rule "polySimp_addAssoc" (formula "18") (term "0,0,0,0,0"))
      (rule "add_literals" (formula "18") (term "0,0,0,0,0,0"))
      (rule "add_zero_left" (formula "18") (term "0,0,0,0,0"))
      (rule "inEqSimp_sepPosMonomial1" (formula "18") (term "0,0,0"))
      (rule "polySimp_mulLiterals" (formula "18") (term "1,0,0,0"))
      (rule "polySimp_elimOne" (formula "18") (term "1,0,0,0"))
      (rule "nnf_notAnd" (formula "13") (term "0,0"))
      (rule "inEqSimp_notLeq" (formula "13") (term "0,0,0"))
      (rule "polySimp_rightDist" (formula "13") (term "1,0,0,0,0,0"))
      (rule "mul_literals" (formula "13") (term "0,1,0,0,0,0,0"))
      (rule "polySimp_addAssoc" (formula "13") (term "0,0,0,0,0"))
      (rule "add_literals" (formula "13") (term "0,0,0,0,0,0"))
      (rule "add_zero_left" (formula "13") (term "0,0,0,0,0"))
      (rule "inEqSimp_sepPosMonomial1" (formula "13") (term "0,0,0"))
      (rule "polySimp_mulLiterals" (formula "13") (term "1,0,0,0"))
      (rule "polySimp_elimOne" (formula "13") (term "1,0,0,0"))
      (rule "inEqSimp_notGeq" (formula "13") (term "1,0,0"))
      (rule "mul_literals" (formula "13") (term "1,0,0,1,0,0"))
      (rule "add_zero_right" (formula "13") (term "0,0,1,0,0"))
      (rule "inEqSimp_sepPosMonomial0" (formula "13") (term "1,0,0"))
      (rule "mul_literals" (formula "13") (term "1,1,0,0"))
      (rule "nnf_notAnd" (formula "22") (term "0,0"))
      (rule "inEqSimp_notGeq" (formula "22") (term "1,0,0"))
      (rule "mul_literals" (formula "22") (term "1,0,0,1,0,0"))
      (rule "add_zero_right" (formula "22") (term "0,0,1,0,0"))
      (rule "inEqSimp_sepPosMonomial0" (formula "22") (term "1,0,0"))
      (rule "mul_literals" (formula "22") (term "1,1,0,0"))
      (rule "inEqSimp_notLeq" (formula "22") (term "0,0,0"))
      (rule "polySimp_rightDist" (formula "22") (term "1,0,0,0,0,0"))
      (rule "mul_literals" (formula "22") (term "0,1,0,0,0,0,0"))
      (rule "polySimp_addAssoc" (formula "22") (term "0,0,0,0,0"))
      (rule "add_literals" (formula "22") (term "0,0,0,0,0,0"))
      (rule "add_zero_left" (formula "22") (term "0,0,0,0,0"))
      (rule "inEqSimp_sepPosMonomial1" (formula "22") (term "0,0,0"))
      (rule "polySimp_mulLiterals" (formula "22") (term "1,0,0,0"))
      (rule "polySimp_elimOne" (formula "22") (term "1,0,0,0"))
      (rule "nnf_notAnd" (formula "17") (term "0,0"))
      (rule "inEqSimp_notLeq" (formula "17") (term "0,0,0"))
      (rule "polySimp_rightDist" (formula "17") (term "1,0,0,0,0,0"))
      (rule "mul_literals" (formula "17") (term "0,1,0,0,0,0,0"))
      (rule "polySimp_addAssoc" (formula "17") (term "0,0,0,0,0"))
      (rule "add_literals" (formula "17") (term "0,0,0,0,0,0"))
      (rule "add_zero_left" (formula "17") (term "0,0,0,0,0"))
      (rule "inEqSimp_sepPosMonomial1" (formula "17") (term "0,0,0"))
      (rule "polySimp_mulLiterals" (formula "17") (term "1,0,0,0"))
      (rule "polySimp_elimOne" (formula "17") (term "1,0,0,0"))
      (rule "inEqSimp_notGeq" (formula "17") (term "1,0,0"))
      (rule "mul_literals" (formula "17") (term "1,0,0,1,0,0"))
      (rule "add_zero_right" (formula "17") (term "0,0,1,0,0"))
      (rule "inEqSimp_sepPosMonomial0" (formula "17") (term "1,0,0"))
      (rule "mul_literals" (formula "17") (term "1,1,0,0"))
      (rule "nnf_notAnd" (formula "10") (term "0,0"))
      (rule "inEqSimp_notLeq" (formula "10") (term "1,0,0"))
      (rule "mul_literals" (formula "10") (term "1,0,0,1,0,0"))
      (rule "add_literals" (formula "10") (term "0,0,1,0,0"))
      (rule "inEqSimp_sepPosMonomial1" (formula "10") (term "1,0,0"))
      (rule "mul_literals" (formula "10") (term "1,1,0,0"))
      (rule "nnf_notAnd" (formula "11") (term "0,0"))
      (rule "inEqSimp_notLeq" (formula "11") (term "1,0,0"))
      (rule "mul_literals" (formula "11") (term "1,0,0,1,0,0"))
      (rule "add_literals" (formula "11") (term "0,0,1,0,0"))
      (rule "inEqSimp_sepPosMonomial1" (formula "11") (term "1,0,0"))
      (rule "mul_literals" (formula "11") (term "1,1,0,0"))
      (rule "nnf_imp2or" (formula "56") (term "0,0,1,0"))
      (rule "nnf_notAnd" (formula "56") (term "0,0,0,0"))
      (rule "inEqSimp_notGeq" (formula "56") (term "0,0,0,0,0"))
      (rule "mul_literals" (formula "56") (term "1,0,0,0,0,0,0,0"))
      (rule "add_zero_right" (formula "56") (term "0,0,0,0,0,0,0"))
      (rule "inEqSimp_sepPosMonomial0" (formula "56") (term "0,0,0,0,0"))
      (rule "mul_literals" (formula "56") (term "1,0,0,0,0,0"))
      (rule "inEqSimp_notLeq" (formula "56") (term "1,0,0,0,0"))
      (rule "polySimp_rightDist" (formula "56") (term "1,0,0,1,0,0,0,0"))
      (rule "mul_literals" (formula "56") (term "0,1,0,0,1,0,0,0,0"))
      (rule "polySimp_addAssoc" (formula "56") (term "0,0,1,0,0,0,0"))
      (rule "add_literals" (formula "56") (term "0,0,0,1,0,0,0,0"))
      (rule "add_zero_left" (formula "56") (term "0,0,1,0,0,0,0"))
      (rule "inEqSimp_sepPosMonomial1" (formula "56") (term "1,0,0,0,0"))
      (rule "polySimp_mulLiterals" (formula "56") (term "1,1,0,0,0,0"))
      (rule "polySimp_elimOne" (formula "56") (term "1,1,0,0,0,0"))
      (rule "nnf_notAnd" (formula "10") (term "0,0,0"))
      (rule "inEqSimp_notGeq" (formula "10") (term "1,0,0,0"))
      (rule "times_zero_1" (formula "10") (term "1,0,0,1,0,0,0"))
      (rule "add_zero_right" (formula "10") (term "0,0,1,0,0,0"))
      (rule "inEqSimp_sepPosMonomial0" (formula "10") (term "1,0,0,0"))
      (rule "mul_literals" (formula "10") (term "1,1,0,0,0"))
      (rule "inEqSimp_notLeq" (formula "10") (term "0,0,0,0"))
      (rule "polySimp_rightDist" (formula "10") (term "1,0,0,0,0,0,0"))
      (rule "mul_literals" (formula "10") (term "0,1,0,0,0,0,0,0"))
      (rule "polySimp_addAssoc" (formula "10") (term "0,0,0,0,0,0"))
      (rule "add_literals" (formula "10") (term "0,0,0,0,0,0,0"))
      (rule "add_zero_left" (formula "10") (term "0,0,0,0,0,0"))
      (rule "inEqSimp_sepPosMonomial1" (formula "10") (term "0,0,0,0"))
      (rule "polySimp_mulLiterals" (formula "10") (term "1,0,0,0,0"))
      (rule "polySimp_elimOne" (formula "10") (term "1,0,0,0,0"))
      (rule "nnf_notAnd" (formula "11") (term "0,0,0"))
      (rule "inEqSimp_notGeq" (formula "11") (term "1,0,0,0"))
      (rule "mul_literals" (formula "11") (term "1,0,0,1,0,0,0"))
      (rule "add_zero_right" (formula "11") (term "0,0,1,0,0,0"))
      (rule "inEqSimp_sepPosMonomial0" (formula "11") (term "1,0,0,0"))
      (rule "mul_literals" (formula "11") (term "1,1,0,0,0"))
      (rule "inEqSimp_notLeq" (formula "11") (term "0,0,0,0"))
      (rule "polySimp_rightDist" (formula "11") (term "1,0,0,0,0,0,0"))
      (rule "mul_literals" (formula "11") (term "0,1,0,0,0,0,0,0"))
      (rule "polySimp_addAssoc" (formula "11") (term "0,0,0,0,0,0"))
      (rule "add_literals" (formula "11") (term "0,0,0,0,0,0,0"))
      (rule "add_zero_left" (formula "11") (term "0,0,0,0,0,0"))
      (rule "inEqSimp_sepPosMonomial1" (formula "11") (term "0,0,0,0"))
      (rule "polySimp_mulLiterals" (formula "11") (term "1,0,0,0,0"))
      (rule "polySimp_elimOne" (formula "11") (term "1,0,0,0,0"))
      (rule "nnf_notAnd" (formula "56") (term "0,0,0,1,0"))
      (rule "inEqSimp_notGeq" (formula "56") (term "0,0,0,0,1,0"))
      (rule "mul_literals" (formula "56") (term "1,0,0,0,0,0,0,1,0"))
      (rule "add_zero_right" (formula "56") (term "0,0,0,0,0,0,1,0"))
      (rule "inEqSimp_sepPosMonomial0" (formula "56") (term "0,0,0,0,1,0"))
      (rule "mul_literals" (formula "56") (term "1,0,0,0,0,1,0"))
      (rule "inEqSimp_notLeq" (formula "56") (term "1,0,0,0,1,0"))
      (rule "polySimp_rightDist" (formula "56") (term "1,0,0,1,0,0,0,1,0"))
      (rule "mul_literals" (formula "56") (term "0,1,0,0,1,0,0,0,1,0"))
      (rule "polySimp_addAssoc" (formula "56") (term "0,0,1,0,0,0,1,0"))
      (rule "add_literals" (formula "56") (term "0,0,0,1,0,0,0,1,0"))
      (rule "add_zero_left" (formula "56") (term "0,0,1,0,0,0,1,0"))
      (rule "inEqSimp_sepPosMonomial1" (formula "56") (term "1,0,0,0,1,0"))
      (rule "polySimp_mulLiterals" (formula "56") (term "1,1,0,0,0,1,0"))
      (rule "polySimp_elimOne" (formula "56") (term "1,1,0,0,0,1,0"))
      (rule "Class_invariant_axiom_for_java_util_ArrayList" (formula "56") (term "1,1,1,1,1,0"))
       (builtin "One Step Simplification" (formula "56"))
      (rule "commute_or_2" (formula "18") (term "0"))
      (rule "commute_or_2" (formula "13") (term "0"))
      (rule "commute_or_2" (formula "17") (term "0"))
      (rule "commute_or" (formula "22") (term "0,0"))
      (rule "commute_and" (formula "22") (term "0,0,1,0"))
      (rule "commute_or_2" (formula "10") (term "0"))
      (rule "Class_invariant_axiom_for_org_apache_commons_csv_CSVRecord" (formula "56") (term "0,1,1,1,0") (inst "i=i") (inst "i_0=i_0"))
      (rule "expand_inInt" (formula "56") (term "1,0,0,1,0,0,1,1,1,0"))
      (rule "expand_inInt" (formula "56") (term "1,0,0,1,0,1,1,1,0"))
      (rule "replace_int_MIN" (formula "56") (term "0,1,1,0,0,1,0,0,1,1,1,0"))
      (rule "replace_int_MAX" (formula "56") (term "1,0,1,0,0,1,0,0,1,1,1,0"))
      (rule "replace_int_MAX" (formula "56") (term "1,0,1,0,0,1,0,1,1,1,0"))
      (rule "replace_int_MIN" (formula "56") (term "0,1,1,0,0,1,0,1,1,1,0"))
      (rule "eqSymm" (formula "56") (term "0,0,0,1,1,1,0"))
      (rule "castedGetAny" (formula "56") (term "0,0,1,0,1,0,1,1,1,0"))
      (rule "dismissNonSelectedField" (formula "56") (term "0,1,1,0,0,0,1,0,0,1,1,1,0"))
      (rule "replaceKnownSelect_taclet20_6" (formula "56") (term "0,1,1,0,0,0,1,0,0,1,1,1,0"))
      (rule "replaceKnownAuxiliaryConstant_taclet20_7" (formula "56") (term "0,1,1,0,0,0,1,0,0,1,1,1,0"))
      (rule "castedGetAny" (formula "56") (term "0,0,1,0,1,0,0,1,1,1,0"))
      (rule "dismissNonSelectedField" (formula "56") (term "0,1,1,0,0,0,1,0,1,1,1,0"))
      (rule "dismissNonSelectedField" (formula "56") (term "0,1,0,0,0,1,1,1,0"))
      (rule "replaceKnownSelect_taclet20_6" (formula "56") (term "0,1,0,0,0,1,1,1,0"))
      (rule "replaceKnownAuxiliaryConstant_taclet20_7" (formula "56") (term "0,1,0,0,0,1,1,1,0"))
      (rule "dismissNonSelectedField" (formula "56") (term "0,0,0,0,0,1,1,1,0"))
      (rule "dismissNonSelectedField" (formula "56") (term "0,0,0,1,0,1,0,1,1,1,0"))
      (rule "dismissNonSelectedField" (formula "56") (term "0,0,0,1,0,1,0,0,1,1,1,0"))
      (rule "replaceKnownSelect_taclet20_6" (formula "56") (term "0,0,0,1,0,1,0,0,1,1,1,0"))
      (rule "replaceKnownAuxiliaryConstant_taclet20_7" (formula "56") (term "0,0,0,1,0,1,0,0,1,1,1,0"))
      (rule "inEqSimp_ltToLeq" (formula "56") (term "1,0,0,0,1,0,0,1,1,1,0"))
      (rule "polySimp_mulComm0" (formula "56") (term "1,0,0,1,0,0,0,1,0,0,1,1,1,0"))
      (rule "inEqSimp_ltToLeq" (formula "56") (term "1,0,0,0,1,0,1,1,1,0"))
      (rule "polySimp_mulComm0" (formula "56") (term "1,0,0,1,0,0,0,1,0,1,1,1,0"))
      (rule "inEqSimp_commuteLeq" (formula "56") (term "0,0,0,0,1,0,1,1,1,0"))
      (rule "inEqSimp_commuteLeq" (formula "56") (term "0,0,0,0,1,0,0,1,1,1,0"))
      (rule "inEqSimp_commuteLeq" (formula "56") (term "1,1,0,0,1,0,0,1,1,1,0"))
      (rule "inEqSimp_commuteLeq" (formula "56") (term "1,1,0,0,1,0,1,1,1,0"))
      (rule "inEqSimp_sepPosMonomial0" (formula "56") (term "1,0,0,0,1,0,0,1,1,1,0"))
      (rule "polySimp_mulComm0" (formula "56") (term "1,1,0,0,0,1,0,0,1,1,1,0"))
      (rule "polySimp_rightDist" (formula "56") (term "1,1,0,0,0,1,0,0,1,1,1,0"))
      (rule "polySimp_mulLiterals" (formula "56") (term "1,1,1,0,0,0,1,0,0,1,1,1,0"))
      (rule "mul_literals" (formula "56") (term "0,1,1,0,0,0,1,0,0,1,1,1,0"))
      (rule "polySimp_elimOne" (formula "56") (term "1,1,1,0,0,0,1,0,0,1,1,1,0"))
      (rule "inEqSimp_sepPosMonomial0" (formula "56") (term "1,0,0,0,1,0,1,1,1,0"))
      (rule "polySimp_mulComm0" (formula "56") (term "1,1,0,0,0,1,0,1,1,1,0"))
      (rule "polySimp_rightDist" (formula "56") (term "1,1,0,0,0,1,0,1,1,1,0"))
      (rule "polySimp_mulLiterals" (formula "56") (term "1,1,1,0,0,0,1,0,1,1,1,0"))
      (rule "mul_literals" (formula "56") (term "0,1,1,0,0,0,1,0,1,1,1,0"))
      (rule "polySimp_elimOne" (formula "56") (term "1,1,1,0,0,0,1,0,1,1,1,0"))
      (rule "pullOutSelect" (formula "56") (term "0,0,0,0,0,1,1,1,0") (inst "selectSK=org_apache_commons_csv_CSVRecord_value_seq_0"))
      (rule "applyEq" (formula "57") (term "0,0,0,1,0,1,0,1,1,1,0") (ifseqformula "1"))
      (rule "applyEq" (formula "57") (term "0,1,1,1,0,0,0,1,0,1,1,1,0") (ifseqformula "1"))
      (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "25"))
       (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "55")) (ifInst ""  (formula "6")))
      (rule "applyEqReverse" (formula "57") (term "0,0,0,1,0,1,0,1,1,1,0") (ifseqformula "1"))
      (rule "applyEqReverse" (formula "57") (term "0,1,1,1,0,0,0,1,0,1,1,1,0") (ifseqformula "1"))
      (rule "applyEqReverse" (formula "57") (term "0,0,0,0,0,1,1,1,0") (ifseqformula "1"))
      (rule "hideAuxiliaryEq" (formula "1"))
      (rule "replace_known_left" (formula "56") (term "0,0,0,1,1,1,0") (ifseqformula "9"))
       (builtin "One Step Simplification" (formula "56"))
      (rule "applyEq" (formula "56") (term "1,1,1,0,0,0,1,0,1,1,1,0") (ifseqformula "9"))
      (rule "nnf_imp2or" (formula "56") (term "0,0,0,1,1,1,0"))
      (rule "nnf_imp2or" (formula "56") (term "0,1,0,1,1,1,0"))
      (rule "nnf_notAnd" (formula "56") (term "0,0,0,0,1,1,1,0"))
      (rule "nnf_notAnd" (formula "56") (term "0,0,1,0,1,1,1,0"))
      (rule "nnf_notAnd" (formula "56") (term "1,0,0,0,0,1,1,1,0"))
      (rule "inEqSimp_notLeq" (formula "56") (term "0,1,0,0,0,0,1,1,1,0"))
      (rule "mul_literals" (formula "56") (term "1,0,0,0,1,0,0,0,0,1,1,1,0"))
      (rule "add_literals" (formula "56") (term "0,0,0,1,0,0,0,0,1,1,1,0"))
      (rule "inEqSimp_sepPosMonomial1" (formula "56") (term "0,1,0,0,0,0,1,1,1,0"))
      (rule "mul_literals" (formula "56") (term "1,0,1,0,0,0,0,1,1,1,0"))
      (rule "inEqSimp_notGeq" (formula "56") (term "1,1,0,0,0,0,1,1,1,0"))
      (rule "mul_literals" (formula "56") (term "1,0,0,1,1,0,0,0,0,1,1,1,0"))
      (rule "add_literals" (formula "56") (term "0,0,1,1,0,0,0,0,1,1,1,0"))
      (rule "inEqSimp_sepPosMonomial0" (formula "56") (term "1,1,0,0,0,0,1,1,1,0"))
      (rule "mul_literals" (formula "56") (term "1,1,1,0,0,0,0,1,1,1,0"))
      (rule "nnf_notAnd" (formula "56") (term "0,0,0,0,0,1,1,1,0"))
      (rule "inEqSimp_notGeq" (formula "56") (term "0,0,0,0,0,0,1,1,1,0"))
      (rule "mul_literals" (formula "56") (term "1,0,0,0,0,0,0,0,0,1,1,1,0"))
      (rule "add_literals" (formula "56") (term "0,0,0,0,0,0,0,0,1,1,1,0"))
      (rule "inEqSimp_sepPosMonomial0" (formula "56") (term "0,0,0,0,0,0,1,1,1,0"))
      (rule "mul_literals" (formula "56") (term "1,0,0,0,0,0,0,1,1,1,0"))
      (rule "inEqSimp_notLeq" (formula "56") (term "1,0,0,0,0,0,1,1,1,0"))
      (rule "polySimp_rightDist" (formula "56") (term "1,0,0,1,0,0,0,0,0,1,1,1,0"))
      (rule "mul_literals" (formula "56") (term "0,1,0,0,1,0,0,0,0,0,1,1,1,0"))
      (rule "polySimp_addAssoc" (formula "56") (term "0,0,1,0,0,0,0,0,1,1,1,0"))
      (rule "add_literals" (formula "56") (term "0,0,0,1,0,0,0,0,0,1,1,1,0"))
      (rule "add_zero_left" (formula "56") (term "0,0,1,0,0,0,0,0,1,1,1,0"))
      (rule "inEqSimp_sepPosMonomial1" (formula "56") (term "1,0,0,0,0,0,1,1,1,0"))
      (rule "polySimp_mulLiterals" (formula "56") (term "1,1,0,0,0,0,0,1,1,1,0"))
      (rule "polySimp_elimOne" (formula "56") (term "1,1,0,0,0,0,0,1,1,1,0"))
      (rule "nnf_notAnd" (formula "56") (term "1,0,0,1,0,1,1,1,0"))
      (rule "inEqSimp_notGeq" (formula "56") (term "1,1,0,0,1,0,1,1,1,0"))
      (rule "mul_literals" (formula "56") (term "1,0,0,1,1,0,0,1,0,1,1,1,0"))
      (rule "add_literals" (formula "56") (term "0,0,1,1,0,0,1,0,1,1,1,0"))
      (rule "inEqSimp_sepPosMonomial0" (formula "56") (term "1,1,0,0,1,0,1,1,1,0"))
      (rule "mul_literals" (formula "56") (term "1,1,1,0,0,1,0,1,1,1,0"))
      (rule "inEqSimp_notLeq" (formula "56") (term "0,1,0,0,1,0,1,1,1,0"))
      (rule "mul_literals" (formula "56") (term "1,0,0,0,1,0,0,1,0,1,1,1,0"))
      (rule "add_literals" (formula "56") (term "0,0,0,1,0,0,1,0,1,1,1,0"))
      (rule "inEqSimp_sepPosMonomial1" (formula "56") (term "0,1,0,0,1,0,1,1,1,0"))
      (rule "mul_literals" (formula "56") (term "1,0,1,0,0,1,0,1,1,1,0"))
      (rule "nnf_notAnd" (formula "56") (term "0,0,0,1,0,1,1,1,0"))
      (rule "inEqSimp_notGeq" (formula "56") (term "0,0,0,0,1,0,1,1,1,0"))
      (rule "mul_literals" (formula "56") (term "1,0,0,0,0,0,0,1,0,1,1,1,0"))
      (rule "add_literals" (formula "56") (term "0,0,0,0,0,0,1,0,1,1,1,0"))
      (rule "inEqSimp_sepPosMonomial0" (formula "56") (term "0,0,0,0,1,0,1,1,1,0"))
      (rule "mul_literals" (formula "56") (term "1,0,0,0,0,1,0,1,1,1,0"))
      (rule "inEqSimp_notLeq" (formula "56") (term "1,0,0,0,1,0,1,1,1,0"))
      (rule "polySimp_rightDist" (formula "56") (term "1,0,0,1,0,0,0,1,0,1,1,1,0"))
      (rule "mul_literals" (formula "56") (term "0,1,0,0,1,0,0,0,1,0,1,1,1,0"))
      (rule "polySimp_addAssoc" (formula "56") (term "0,0,1,0,0,0,1,0,1,1,1,0"))
      (rule "add_literals" (formula "56") (term "0,0,0,1,0,0,0,1,0,1,1,1,0"))
      (rule "add_zero_left" (formula "56") (term "0,0,1,0,0,0,1,0,1,1,1,0"))
      (rule "inEqSimp_sepPosMonomial1" (formula "56") (term "1,0,0,0,1,0,1,1,1,0"))
      (rule "polySimp_mulLiterals" (formula "56") (term "1,1,0,0,0,1,0,1,1,1,0"))
      (rule "polySimp_elimOne" (formula "56") (term "1,1,0,0,0,1,0,1,1,1,0"))
      (rule "commute_or_2" (formula "11") (term "0"))
      (rule "commute_or" (formula "18") (term "0,0"))
      (rule "commute_or" (formula "13") (term "0,0"))
      (rule "commute_or" (formula "17") (term "0,0"))
      (rule "commute_or_2" (formula "10") (term "0,0"))
      (rule "Class_invariant_axiom_for_java_util_ArrayList" (formula "56") (term "1,1,1,1,0"))
       (builtin "One Step Simplification" (formula "56"))
      (rule "seqGetAlphaCast" (formula "21") (term "0"))
      (rule "castedGetAny" (formula "21") (term "0"))
       (builtin "One Step Simplification" (formula "21"))
      (rule "true_left" (formula "21"))
      (rule "lenNonNegative" (formula "28") (term "0"))
      (rule "inEqSimp_commuteLeq" (formula "28"))
      (rule "applyEq" (formula "28") (term "0") (ifseqformula "29"))
      (rule "qeq_literals" (formula "28"))
      (rule "true_left" (formula "28"))
      (rule "seqGetAlphaCast" (formula "16") (term "0"))
      (rule "castedGetAny" (formula "16") (term "0"))
       (builtin "One Step Simplification" (formula "16"))
      (rule "true_left" (formula "16"))
      (rule "commute_and_2" (formula "22") (term "0,1,0"))
      (rule "ifthenelse_split" (formula "1") (term "0"))
      (branch "self_137.inputColsForPolyas.<created> = TRUE TRUE"
         (rule "applyEqReverse" (formula "57") (term "0,1,1,0,0,0,1,0") (ifseqformula "2"))
         (rule "applyEqReverse" (formula "57") (term "0,0,1,0,1,0,0,0") (ifseqformula "2"))
         (rule "applyEqReverse" (formula "57") (term "0,1,1,0,0,0,0") (ifseqformula "2"))
         (rule "applyEqReverse" (formula "57") (term "0,0,0,1,0,0,1,0") (ifseqformula "2"))
         (rule "hideAuxiliaryEq" (formula "2"))
         (rule "replace_known_left" (formula "56") (term "0,1") (ifseqformula "1"))
          (builtin "One Step Simplification" (formula "56"))
         (rule "commute_or_2" (formula "18") (term "0"))
         (rule "commute_or_2" (formula "13") (term "0"))
         (rule "commute_or_2" (formula "17") (term "0"))
         (rule "lenNonNegative" (formula "20") (term "0"))
         (rule "inEqSimp_commuteLeq" (formula "20"))
         (rule "commute_or_2" (formula "11") (term "0,0"))
         (rule "lenNonNegative" (formula "15") (term "0"))
         (rule "inEqSimp_commuteLeq" (formula "15"))
         (rule "commute_or" (formula "10") (term "0,0,0"))
         (rule "commute_or_2" (formula "10") (term "0,0"))
         (rule "commute_or_2" (formula "10") (term "0"))
         (rule "commute_or" (formula "11") (term "0,0,0"))
         (rule "commute_or_2" (formula "11") (term "0,0"))
         (rule "commute_or_2" (formula "11") (term "0"))
         (rule "ex_pull_out3" (formula "24") (term "0"))
         (rule "cnf_rightDist" (formula "24") (term "0,0"))
         (rule "shift_paren_or" (formula "24") (term "1,0,0"))
         (rule "cnf_rightDist" (formula "24") (term "0,0,0"))
         (rule "commute_or_2" (formula "24") (term "0,0,0,0"))
         (rule "shift_paren_or" (formula "24") (term "1,0,0,0"))
         (rule "commute_or" (formula "24") (term "0,0,0,0,0"))
         (rule "ex_pull_out3" (formula "58") (term "0,0"))
         (rule "commute_and" (formula "24") (term "0,0,0"))
         (rule "commute_and_2" (formula "24") (term "0,0"))
         (rule "allLeft" (formula "13") (inst "t=i_2_0"))
         (rule "inEqSimp_commuteGeq" (formula "13") (term "1"))
         (rule "applyEq" (formula "13") (term "0,0,0,0") (ifseqformula "18"))
         (rule "replace_known_right" (formula "13") (term "0,0,0") (ifseqformula "45"))
          (builtin "One Step Simplification" (formula "13"))
         (rule "true_left" (formula "13"))
         (rule "allLeft" (formula "18") (inst "t=i_0"))
         (rule "inEqSimp_commuteGeq" (formula "18") (term "1"))
         (rule "applyEq" (formula "18") (term "0,0,0,0") (ifseqformula "24"))
         (rule "replace_known_right" (formula "18") (term "0,0,0") (ifseqformula "45"))
          (builtin "One Step Simplification" (formula "18"))
         (rule "true_left" (formula "18"))
         (rule "allLeft" (formula "24") (inst "t=i_0"))
         (rule "exLeft" (formula "24") (inst "sk=i_1"))
         (rule "andLeft" (formula "24"))
         (rule "andLeft" (formula "24"))
         (rule "inEqSimp_commuteGeq" (formula "26") (term "1"))
         (rule "inEqSimp_commuteGeq" (formula "24") (term "1"))
         (rule "inEqSimp_commuteGeq" (formula "25") (term "1"))
         (rule "inEqSimp_homoInEq0" (formula "25") (term "0,0"))
         (rule "polySimp_addComm1" (formula "25") (term "0,0,0"))
         (rule "applyEq" (formula "26") (term "0,0,0") (ifseqformula "23"))
         (rule "eqSymm" (formula "26") (term "0,0"))
         (rule "inEqSimp_sepPosMonomial1" (formula "25") (term "0,0"))
         (rule "polySimp_mulComm0" (formula "25") (term "1,0,0"))
         (rule "polySimp_rightDist" (formula "25") (term "1,0,0"))
         (rule "polySimp_mulLiterals" (formula "25") (term "1,1,0,0"))
         (rule "mul_literals" (formula "25") (term "0,1,0,0"))
         (rule "polySimp_elimOne" (formula "25") (term "1,1,0,0"))
         (rule "inEqSimp_contradInEq1" (formula "24") (term "1") (ifseqformula "22"))
         (rule "inEqSimp_homoInEq1" (formula "24") (term "0,1"))
         (rule "polySimp_pullOutFactor1b" (formula "24") (term "0,0,1"))
         (rule "add_literals" (formula "24") (term "1,1,0,0,1"))
         (rule "times_zero_1" (formula "24") (term "1,0,0,1"))
         (rule "add_literals" (formula "24") (term "0,0,1"))
         (rule "leq_literals" (formula "24") (term "0,1"))
          (builtin "One Step Simplification" (formula "24"))
         (rule "inEqSimp_contradInEq1" (formula "25") (term "1") (ifseqformula "22"))
         (rule "inEqSimp_homoInEq1" (formula "25") (term "0,1"))
         (rule "polySimp_pullOutFactor1b" (formula "25") (term "0,0,1"))
         (rule "add_literals" (formula "25") (term "1,1,0,0,1"))
         (rule "times_zero_1" (formula "25") (term "1,0,0,1"))
         (rule "add_zero_right" (formula "25") (term "0,0,1"))
         (rule "leq_literals" (formula "25") (term "0,1"))
          (builtin "One Step Simplification" (formula "25"))
         (rule "inEqSimp_contradInEq1" (formula "26") (term "1") (ifseqformula "22"))
         (rule "inEqSimp_homoInEq1" (formula "26") (term "0,1"))
         (rule "polySimp_pullOutFactor1b" (formula "26") (term "0,0,1"))
         (rule "add_literals" (formula "26") (term "1,1,0,0,1"))
         (rule "times_zero_1" (formula "26") (term "1,0,0,1"))
         (rule "add_zero_right" (formula "26") (term "0,0,1"))
         (rule "leq_literals" (formula "26") (term "0,1"))
          (builtin "One Step Simplification" (formula "26"))
         (rule "inEqSimp_contradInEq1" (formula "25") (term "1") (ifseqformula "20"))
         (rule "qeq_literals" (formula "25") (term "0,1"))
          (builtin "One Step Simplification" (formula "25"))
         (rule "inEqSimp_contradInEq1" (formula "24") (term "1") (ifseqformula "20"))
         (rule "qeq_literals" (formula "24") (term "0,1"))
          (builtin "One Step Simplification" (formula "24"))
         (rule "inEqSimp_contradInEq1" (formula "26") (term "1") (ifseqformula "20"))
         (rule "qeq_literals" (formula "26") (term "0,1"))
          (builtin "One Step Simplification" (formula "26"))
         (rule "onlyCreatedObjectsAreReferenced" (formula "12") (term "0") (ifseqformula "2"))
         (rule "applyEq" (formula "12") (term "0,0") (ifseqformula "13"))
         (rule "replace_known_right" (formula "12") (term "0") (ifseqformula "44"))
          (builtin "One Step Simplification" (formula "12"))
         (rule "applyEq" (formula "12") (term "1,0") (ifseqformula "13"))
         (rule "onlyCreatedObjectsAreReferenced" (formula "38") (term "0") (ifseqformula "2"))
         (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "39"))
          (builtin "One Step Simplification" (formula "1"))
         (rule "onlyCreatedObjectsAreReferenced" (formula "19") (term "1,0,0") (ifseqformula "3"))
         (rule "replace_known_right" (formula "19") (term "0") (ifseqformula "52"))
          (builtin "One Step Simplification" (formula "19"))
         (rule "onlyCreatedObjectsAreReferenced" (formula "59") (term "0") (ifseqformula "3"))
         (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "60"))
          (builtin "One Step Simplification" (formula "1"))
         (rule "onlyCreatedObjectsAreReferenced" (formula "27") (term "1") (ifseqformula "4"))
         (rule "replace_known_right" (formula "27") (term "0") (ifseqformula "52"))
          (builtin "One Step Simplification" (formula "27"))
         (rule "onlyCreatedObjectsAreReferenced" (formula "55") (term "0") (ifseqformula "4"))
         (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "56"))
          (builtin "One Step Simplification" (formula "1"))
         (rule "onlyCreatedObjectsAreReferenced" (formula "29") (term "1,0,0") (ifseqformula "5"))
         (rule "replace_known_left" (formula "29") (term "1") (ifseqformula "4"))
          (builtin "One Step Simplification" (formula "29") (ifInst ""  (formula "58")))
         (rule "true_left" (formula "29"))
         (rule "onlyCreatedObjectsAreReferenced" (formula "50") (term "0") (ifseqformula "5"))
         (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "51"))
          (builtin "One Step Simplification" (formula "1"))
         (rule "onlyCreatedObjectsAreReferenced" (formula "46") (term "0") (ifseqformula "6"))
         (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "47"))
          (builtin "One Step Simplification" (formula "1"))
         (rule "onlyCreatedObjectsAreReferenced" (formula "63") (term "0") (ifseqformula "7"))
         (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "64"))
          (builtin "One Step Simplification" (formula "1"))
         (rule "onlyCreatedObjectsAreReferenced" (formula "62") (term "0") (ifseqformula "8"))
         (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "63"))
          (builtin "One Step Simplification" (formula "1"))
         (rule "onlyCreatedObjectsAreReferenced" (formula "53") (term "0") (ifseqformula "9"))
         (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "54"))
          (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "20")))
         (rule "true_left" (formula "1"))
         (rule "onlyCreatedObjectsAreReferenced" (formula "56") (term "0") (ifseqformula "9"))
         (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "57"))
          (builtin "One Step Simplification" (formula "1"))
         (rule "onlyCreatedObjectsAreReferenced" (formula "59") (term "0") (ifseqformula "10"))
         (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "60"))
          (builtin "One Step Simplification" (formula "1"))
         (rule "onlyCreatedObjectsAreReferenced" (formula "57") (term "0") (ifseqformula "11"))
         (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "58"))
          (builtin "One Step Simplification" (formula "1"))
         (rule "onlyCreatedObjectsAreReferenced" (formula "65") (term "0") (ifseqformula "12"))
         (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "66"))
          (builtin "One Step Simplification" (formula "1"))
         (rule "onlyCreatedObjectsAreReferenced" (formula "52") (term "0") (ifseqformula "13"))
         (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "53"))
          (builtin "One Step Simplification" (formula "1"))
         (rule "onlyCreatedObjectsAreReferenced" (formula "72") (term "0") (ifseqformula "14"))
         (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "73"))
          (builtin "One Step Simplification" (formula "1"))
         (rule "onlyCreatedObjectsAreReferenced" (formula "70") (term "0") (ifseqformula "15"))
         (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "71"))
          (builtin "One Step Simplification" (formula "1"))
         (rule "cut_direct" (formula "78") (term "0,0,1,1"))
         (branch "CUT: self_137.inputColsForPolyas = self_138 TRUE"
             (builtin "One Step Simplification" (formula "79"))
            (rule "referencedObjectIsCreatedRightEQ" (formula "53") (ifseqformula "1") (ifseqformula "54"))
            (rule "close" (formula "53") (ifseqformula "17"))
         )
         (branch "CUT: self_137.inputColsForPolyas = self_138 FALSE"
             (builtin "One Step Simplification" (formula "79"))
            (rule "andRight" (formula "79"))
            (branch
               (rule "allRight" (formula "79") (inst "sk=j_0"))
               (rule "eqSymm" (formula "79") (term "1,1,0"))
               (rule "inEqSimp_commuteGeq" (formula "79") (term "1,0,0"))
               (rule "nnf_ex2all" (formula "79"))
               (rule "nnf_notOr" (formula "1") (term "0"))
               (rule "nnf_notAnd" (formula "1") (term "1,0"))
               (rule "nnf_notOr" (formula "1") (term "0,0"))
               (rule "inEqSimp_notLeq" (formula "1") (term "0,0,0"))
               (rule "mul_literals" (formula "1") (term "1,0,0,0,0,0"))
               (rule "add_literals" (formula "1") (term "0,0,0,0,0"))
               (rule "add_zero_left" (formula "1") (term "0,0,0,0"))
               (rule "inEqSimp_notLeq" (formula "1") (term "1,0,0"))
               (rule "polySimp_mulComm0" (formula "1") (term "1,0,0,1,0,0"))
               (rule "inEqSimp_sepPosMonomial1" (formula "1") (term "1,0,0"))
               (rule "polySimp_mulComm0" (formula "1") (term "1,1,0,0"))
               (rule "polySimp_rightDist" (formula "1") (term "1,1,0,0"))
               (rule "polySimp_mulLiterals" (formula "1") (term "1,1,1,0,0"))
               (rule "mul_literals" (formula "1") (term "0,1,1,0,0"))
               (rule "polySimp_elimOne" (formula "1") (term "1,1,1,0,0"))
               (rule "nnf_notAnd" (formula "1") (term "0,1,0"))
               (rule "inEqSimp_notLeq" (formula "1") (term "1,0,1,0"))
               (rule "polySimp_rightDist" (formula "1") (term "1,0,0,1,0,1,0"))
               (rule "mul_literals" (formula "1") (term "0,1,0,0,1,0,1,0"))
               (rule "polySimp_addAssoc" (formula "1") (term "0,0,1,0,1,0"))
               (rule "add_literals" (formula "1") (term "0,0,0,1,0,1,0"))
               (rule "add_zero_left" (formula "1") (term "0,0,1,0,1,0"))
               (rule "inEqSimp_sepPosMonomial1" (formula "1") (term "1,0,1,0"))
               (rule "polySimp_mulLiterals" (formula "1") (term "1,1,0,1,0"))
               (rule "polySimp_elimOne" (formula "1") (term "1,1,0,1,0"))
               (rule "inEqSimp_notGeq" (formula "1") (term "0,0,1,0"))
               (rule "times_zero_1" (formula "1") (term "1,0,0,0,0,1,0"))
               (rule "add_literals" (formula "1") (term "0,0,0,0,1,0"))
               (rule "inEqSimp_sepPosMonomial0" (formula "1") (term "0,0,1,0"))
               (rule "mul_literals" (formula "1") (term "1,0,0,1,0"))
               (rule "distr_forallAnd" (formula "1"))
                (builtin "One Step Simplification" (formula "1"))
               (rule "andLeft" (formula "1"))
               (rule "andLeft" (formula "1"))
               (rule "commute_or_2" (formula "3") (term "0"))
               (rule "commute_or" (formula "3") (term "0,0"))
               (rule "lenNonNegative" (formula "38") (term "1,1,0"))
               (rule "inEqSimp_commuteLeq" (formula "38"))
               (rule "seqGetAlphaCast" (formula "47") (term "0"))
               (rule "castedGetAny" (formula "47") (term "0"))
                (builtin "One Step Simplification" (formula "47"))
               (rule "true_left" (formula "47"))
               (rule "allLeft" (formula "48") (inst "t=j_0"))
               (rule "exLeft" (formula "48") (inst "sk=i_2"))
               (rule "andLeft" (formula "48"))
               (rule "andLeft" (formula "48"))
               (rule "inEqSimp_commuteGeq" (formula "50") (term "1"))
               (rule "inEqSimp_commuteGeq" (formula "49") (term "1"))
               (rule "inEqSimp_commuteGeq" (formula "48") (term "1"))
               (rule "inEqSimp_homoInEq0" (formula "49") (term "0,0"))
               (rule "polySimp_addComm1" (formula "49") (term "0,0,0"))
               (rule "inEqSimp_sepPosMonomial1" (formula "49") (term "0,0"))
               (rule "polySimp_mulComm0" (formula "49") (term "1,0,0"))
               (rule "polySimp_rightDist" (formula "49") (term "1,0,0"))
               (rule "polySimp_mulLiterals" (formula "49") (term "1,1,0,0"))
               (rule "mul_literals" (formula "49") (term "0,1,0,0"))
               (rule "polySimp_elimOne" (formula "49") (term "1,1,0,0"))
               (rule "inEqSimp_contradInEq1" (formula "49") (term "1,0") (ifseqformula "1"))
               (rule "qeq_literals" (formula "49") (term "0,1,0"))
                (builtin "One Step Simplification" (formula "49"))
               (rule "inEqSimp_contradInEq1" (formula "48") (term "1") (ifseqformula "2"))
               (rule "inEqSimp_homoInEq1" (formula "48") (term "0,1"))
               (rule "polySimp_pullOutFactor1b" (formula "48") (term "0,0,1"))
               (rule "add_literals" (formula "48") (term "1,1,0,0,1"))
               (rule "times_zero_1" (formula "48") (term "1,0,0,1"))
               (rule "add_literals" (formula "48") (term "0,0,1"))
               (rule "leq_literals" (formula "48") (term "0,1"))
                (builtin "One Step Simplification" (formula "48"))
               (rule "inEqSimp_contradInEq1" (formula "50") (term "1") (ifseqformula "2"))
               (rule "inEqSimp_homoInEq1" (formula "50") (term "0,1"))
               (rule "polySimp_pullOutFactor1b" (formula "50") (term "0,0,1"))
               (rule "add_literals" (formula "50") (term "1,1,0,0,1"))
               (rule "times_zero_1" (formula "50") (term "1,0,0,1"))
               (rule "add_literals" (formula "50") (term "0,0,1"))
               (rule "leq_literals" (formula "50") (term "0,1"))
                (builtin "One Step Simplification" (formula "50"))
               (rule "inEqSimp_contradInEq1" (formula "49") (term "1") (ifseqformula "2"))
               (rule "inEqSimp_homoInEq1" (formula "49") (term "0,1"))
               (rule "polySimp_pullOutFactor1b" (formula "49") (term "0,0,1"))
               (rule "add_literals" (formula "49") (term "1,1,0,0,1"))
               (rule "times_zero_1" (formula "49") (term "1,0,0,1"))
               (rule "add_zero_right" (formula "49") (term "0,0,1"))
               (rule "leq_literals" (formula "49") (term "0,1"))
                (builtin "One Step Simplification" (formula "49"))
               (rule "inEqSimp_contradInEq1" (formula "50") (term "1") (ifseqformula "1"))
               (rule "qeq_literals" (formula "50") (term "0,1"))
                (builtin "One Step Simplification" (formula "50"))
               (rule "applyEq" (formula "3") (term "1,0,0,0,0") (ifseqformula "50"))
               (rule "inEqSimp_contradInEq1" (formula "48") (term "1") (ifseqformula "1"))
               (rule "qeq_literals" (formula "48") (term "0,1"))
                (builtin "One Step Simplification" (formula "48"))
               (rule "allLeft" (formula "37") (inst "t=j_0"))
               (rule "inEqSimp_commuteGeq" (formula "37") (term "1"))
               (rule "applyEq" (formula "37") (term "0,0,0,0") (ifseqformula "51"))
               (rule "inEqSimp_contradInEq1" (formula "37") (term "1,0") (ifseqformula "1"))
               (rule "qeq_literals" (formula "37") (term "0,1,0"))
                (builtin "One Step Simplification" (formula "37"))
               (rule "inEqSimp_contradInEq1" (formula "37") (term "1") (ifseqformula "2"))
               (rule "inEqSimp_homoInEq1" (formula "37") (term "0,1"))
               (rule "polySimp_pullOutFactor1b" (formula "37") (term "0,0,1"))
               (rule "add_literals" (formula "37") (term "1,1,0,0,1"))
               (rule "times_zero_1" (formula "37") (term "1,0,0,1"))
               (rule "add_zero_right" (formula "37") (term "0,0,1"))
               (rule "leq_literals" (formula "37") (term "0,1"))
                (builtin "One Step Simplification" (formula "37"))
               (rule "notLeft" (formula "37"))
               (rule "allLeft" (formula "3") (inst "t=i_2"))
                (builtin "One Step Simplification" (formula "3"))
               (rule "inEqSimp_commuteGeq" (formula "3") (term "1"))
               (rule "inEqSimp_contradInEq1" (formula "3") (term "1") (ifseqformula "50"))
               (rule "inEqSimp_homoInEq1" (formula "3") (term "0,1"))
               (rule "polySimp_pullOutFactor1b" (formula "3") (term "0,0,1"))
               (rule "add_literals" (formula "3") (term "1,1,0,0,1"))
               (rule "times_zero_1" (formula "3") (term "1,0,0,1"))
               (rule "add_zero_right" (formula "3") (term "0,0,1"))
               (rule "leq_literals" (formula "3") (term "0,1"))
                (builtin "One Step Simplification" (formula "3"))
               (rule "inEqSimp_contradInEq1" (formula "3") (ifseqformula "49"))
               (rule "qeq_literals" (formula "3") (term "0"))
                (builtin "One Step Simplification" (formula "3"))
               (rule "closeFalse" (formula "3"))
            )
            (branch
               (rule "andRight" (formula "79"))
               (branch
                  (rule "allRight" (formula "79") (inst "sk=i_2"))
                  (rule "orRight" (formula "79"))
                  (rule "notRight" (formula "80"))
                  (rule "orRight" (formula "80"))
                  (rule "inEqSimp_leqRight" (formula "80"))
                  (rule "mul_literals" (formula "1") (term "1,0,0"))
                  (rule "add_literals" (formula "1") (term "0,0"))
                  (rule "add_zero_left" (formula "1") (term "0"))
                  (rule "inEqSimp_geqRight" (formula "81"))
                  (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
                  (rule "polySimp_addComm1" (formula "1") (term "0"))
                  (rule "inEqSimp_sepNegMonomial0" (formula "1"))
                  (rule "polySimp_mulLiterals" (formula "1") (term "0"))
                  (rule "polySimp_elimOne" (formula "1") (term "0"))
                  (rule "lenNonNegative" (formula "38") (term "1,1,0"))
                  (rule "inEqSimp_commuteLeq" (formula "38"))
                  (rule "allLeft" (formula "37") (inst "t=i_2"))
                  (rule "replace_known_left" (formula "37") (term "0,0,0") (ifseqformula "3"))
                   (builtin "One Step Simplification" (formula "37"))
                  (rule "inEqSimp_commuteGeq" (formula "37") (term "1"))
                  (rule "inEqSimp_contradInEq1" (formula "37") (term "0") (ifseqformula "2"))
                  (rule "qeq_literals" (formula "37") (term "0,0"))
                   (builtin "One Step Simplification" (formula "37"))
                  (rule "inEqSimp_contradInEq1" (formula "37") (ifseqformula "1"))
                  (rule "andLeft" (formula "37"))
                  (rule "inEqSimp_homoInEq1" (formula "37"))
                  (rule "polySimp_pullOutFactor1b" (formula "37") (term "0"))
                  (rule "add_literals" (formula "37") (term "1,1,0"))
                  (rule "times_zero_1" (formula "37") (term "1,0"))
                  (rule "add_zero_right" (formula "37") (term "0"))
                  (rule "leq_literals" (formula "37"))
                  (rule "closeFalse" (formula "37"))
               )
               (branch
                  (rule "andRight" (formula "79"))
                  (branch
                     (rule "allRight" (formula "79") (inst "sk=i_0_0"))
                     (rule "orRight" (formula "79"))
                     (rule "orRight" (formula "79"))
                     (rule "notRight" (formula "81"))
                     (rule "orRight" (formula "81"))
                     (rule "orRight" (formula "80"))
                     (rule "inEqSimp_geqRight" (formula "82"))
                     (rule "mul_literals" (formula "1") (term "1,0,0"))
                     (rule "add_literals" (formula "1") (term "0,0"))
                     (rule "inEqSimp_leqRight" (formula "83"))
                     (rule "mul_literals" (formula "1") (term "1,0,0"))
                     (rule "add_literals" (formula "1") (term "0,0"))
                     (rule "inEqSimp_leqRight" (formula "82"))
                     (rule "mul_literals" (formula "1") (term "1,0,0"))
                     (rule "add_literals" (formula "1") (term "0,0"))
                     (rule "add_zero_left" (formula "1") (term "0"))
                     (rule "inEqSimp_geqRight" (formula "83"))
                     (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
                     (rule "polySimp_addComm1" (formula "1") (term "0"))
                     (rule "inEqSimp_sepPosMonomial0" (formula "4"))
                     (rule "mul_literals" (formula "4") (term "1"))
                     (rule "inEqSimp_sepPosMonomial1" (formula "3"))
                     (rule "mul_literals" (formula "3") (term "1"))
                     (rule "inEqSimp_sepNegMonomial0" (formula "1"))
                     (rule "polySimp_mulLiterals" (formula "1") (term "0"))
                     (rule "polySimp_elimOne" (formula "1") (term "0"))
                     (rule "inEqSimp_subsumption1" (formula "3") (ifseqformula "2"))
                     (rule "leq_literals" (formula "3") (term "0"))
                      (builtin "One Step Simplification" (formula "3"))
                     (rule "true_left" (formula "3"))
                     (rule "lenNonNegative" (formula "39") (term "1,1,0"))
                     (rule "inEqSimp_commuteLeq" (formula "39"))
                     (rule "allLeft" (formula "28") (inst "t=i_0_0"))
                     (rule "replace_known_left" (formula "28") (term "0,0,0,0") (ifseqformula "4"))
                      (builtin "One Step Simplification" (formula "28"))
                     (rule "inEqSimp_commuteGeq" (formula "28") (term "1"))
                     (rule "inEqSimp_contradInEq1" (formula "28") (term "1") (ifseqformula "1"))
                     (rule "inEqSimp_homoInEq1" (formula "28") (term "0,1"))
                     (rule "polySimp_pullOutFactor1b" (formula "28") (term "0,0,1"))
                     (rule "add_literals" (formula "28") (term "1,1,0,0,1"))
                     (rule "times_zero_1" (formula "28") (term "1,0,0,1"))
                     (rule "add_zero_right" (formula "28") (term "0,0,1"))
                     (rule "leq_literals" (formula "28") (term "0,1"))
                      (builtin "One Step Simplification" (formula "28"))
                     (rule "inEqSimp_contradInEq1" (formula "28") (term "0") (ifseqformula "2"))
                     (rule "qeq_literals" (formula "28") (term "0,0"))
                      (builtin "One Step Simplification" (formula "28"))
                     (rule "inEqSimp_contradInEq1" (formula "3") (ifseqformula "28"))
                     (rule "qeq_literals" (formula "3") (term "0"))
                      (builtin "One Step Simplification" (formula "3"))
                     (rule "closeFalse" (formula "3"))
                  )
                  (branch
                     (rule "allRight" (formula "79") (inst "sk=i_2"))
                     (rule "orRight" (formula "79"))
                     (rule "orRight" (formula "79"))
                     (rule "notRight" (formula "81"))
                     (rule "orRight" (formula "81"))
                     (rule "orRight" (formula "80"))
                     (rule "inEqSimp_geqRight" (formula "82"))
                     (rule "mul_literals" (formula "1") (term "1,0,0"))
                     (rule "add_literals" (formula "1") (term "0,0"))
                     (rule "inEqSimp_leqRight" (formula "83"))
                     (rule "mul_literals" (formula "1") (term "1,0,0"))
                     (rule "add_literals" (formula "1") (term "0,0"))
                     (rule "inEqSimp_leqRight" (formula "82"))
                     (rule "mul_literals" (formula "1") (term "1,0,0"))
                     (rule "add_literals" (formula "1") (term "0,0"))
                     (rule "add_zero_left" (formula "1") (term "0"))
                     (rule "inEqSimp_geqRight" (formula "83"))
                     (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
                     (rule "polySimp_addComm1" (formula "1") (term "0"))
                     (rule "inEqSimp_sepPosMonomial0" (formula "4"))
                     (rule "mul_literals" (formula "4") (term "1"))
                     (rule "inEqSimp_sepPosMonomial1" (formula "3"))
                     (rule "mul_literals" (formula "3") (term "1"))
                     (rule "inEqSimp_sepNegMonomial0" (formula "1"))
                     (rule "polySimp_mulLiterals" (formula "1") (term "0"))
                     (rule "polySimp_elimOne" (formula "1") (term "0"))
                     (rule "inEqSimp_subsumption1" (formula "3") (ifseqformula "2"))
                     (rule "leq_literals" (formula "3") (term "0"))
                      (builtin "One Step Simplification" (formula "3"))
                     (rule "true_left" (formula "3"))
                     (rule "lenNonNegative" (formula "39") (term "1,1,0"))
                     (rule "inEqSimp_commuteLeq" (formula "39"))
                     (rule "allLeft" (formula "29") (inst "t=i_2"))
                     (rule "replace_known_left" (formula "29") (term "0,0,0,0") (ifseqformula "4"))
                      (builtin "One Step Simplification" (formula "29"))
                     (rule "inEqSimp_commuteGeq" (formula "29") (term "1"))
                     (rule "inEqSimp_contradInEq0" (formula "29") (term "1,0") (ifseqformula "3"))
                     (rule "qeq_literals" (formula "29") (term "0,1,0"))
                      (builtin "One Step Simplification" (formula "29"))
                     (rule "inEqSimp_contradInEq1" (formula "29") (term "1") (ifseqformula "1"))
                     (rule "inEqSimp_homoInEq1" (formula "29") (term "0,1"))
                     (rule "polySimp_pullOutFactor1b" (formula "29") (term "0,0,1"))
                     (rule "add_literals" (formula "29") (term "1,1,0,0,1"))
                     (rule "times_zero_1" (formula "29") (term "1,0,0,1"))
                     (rule "add_zero_right" (formula "29") (term "0,0,1"))
                     (rule "leq_literals" (formula "29") (term "0,1"))
                      (builtin "One Step Simplification" (formula "29"))
                     (rule "inEqSimp_contradInEq0" (formula "2") (ifseqformula "29"))
                     (rule "qeq_literals" (formula "2") (term "0"))
                      (builtin "One Step Simplification" (formula "2"))
                     (rule "closeFalse" (formula "2"))
                  )
               )
            )
         )
      )
      (branch "self_137.inputColsForPolyas.<created> = TRUE FALSE"
         (rule "referencedObjectIsCreatedRight" (formula "30") (ifseqformula "47"))
         (rule "close" (formula "30") (ifseqformula "2"))
      )
   )
)
(branch "Exceptional Post (ArrayList)"
    (builtin "One Step Simplification" (formula "47"))
    (builtin "One Step Simplification" (formula "22"))
   (rule "andLeft" (formula "22"))
   (rule "selectCreatedOfAnonAsFormulaEQ" (formula "23") (term "1,0,0") (ifseqformula "22"))
   (rule "selectCreatedOfAnonAsFormulaEQ" (formula "23") (term "1,1,0,1,0") (ifseqformula "22"))
   (rule "andLeft" (formula "23"))
   (rule "andLeft" (formula "23"))
   (rule "andLeft" (formula "25"))
   (rule "andLeft" (formula "23"))
   (rule "andLeft" (formula "25"))
   (rule "andLeft" (formula "27"))
   (rule "notLeft" (formula "23"))
   (rule "close" (formula "29") (ifseqformula "28"))
)
(branch "Pre (ArrayList)"
    (builtin "One Step Simplification" (formula "45") (ifInst ""  (formula "1")))
   (rule "closeTrue" (formula "45"))
)
)
}
