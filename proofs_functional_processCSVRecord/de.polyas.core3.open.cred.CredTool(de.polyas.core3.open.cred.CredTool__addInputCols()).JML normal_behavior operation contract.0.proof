\profile "Java Profile";

\settings {
"#Proof-Settings-Config-File
#Mon Feb 10 01:04:14 CET 2020
[Labels]UseOriginLabels=false
[StrategyProperty]QUERYAXIOM_OPTIONS_KEY=QUERYAXIOM_ON
[SMTSettings]invariantForall=false
[Strategy]ActiveStrategy=JavaCardDLStrategy
[StrategyProperty]USER_TACLETS_OPTIONS_KEY1=USER_TACLETS_OFF
[StrategyProperty]QUANTIFIERS_OPTIONS_KEY=QUANTIFIERS_NON_SPLITTING_WITH_PROGS
[StrategyProperty]USER_TACLETS_OPTIONS_KEY2=USER_TACLETS_OFF
[Choice]DefaultChoices=methodExpansion-methodExpansion\\:modularOnly , mergeGenerateIsWeakeningGoal-mergeGenerateIsWeakeningGoal\\:off , wdChecks-wdChecks\\:off , wdOperator-wdOperator\\:L , permissions-permissions\\:off , integerSimplificationRules-integerSimplificationRules\\:full , reach-reach\\:on , moreSeqRules-moreSeqRules\\:on , sequences-sequences\\:on , bigint-bigint\\:on , modelFields-modelFields\\:treatAsAxiom , Strings-Strings\\:on , JavaCard-JavaCard\\:off , runtimeExceptions-runtimeExceptions\\:allow , programRules-programRules\\:Java , intRules-intRules\\:javaSemantics , initialisation-initialisation\\:disableStaticInitialisation , assertions-assertions\\:on
[StrategyProperty]LOOP_OPTIONS_KEY=LOOP_INVARIANT
[StrategyProperty]INF_FLOW_CHECK_PROPERTY=INF_FLOW_CHECK_FALSE
[SMTSettings]UseBuiltUniqueness=false
[SMTSettings]explicitTypeHierarchy=false
[SMTSettings]instantiateHierarchyAssumptions=true
[StrategyProperty]NON_LIN_ARITH_OPTIONS_KEY=NON_LIN_ARITH_DEF_OPS
[SMTSettings]SelectedTaclets=
[StrategyProperty]DEP_OPTIONS_KEY=DEP_ON
[StrategyProperty]AUTO_INDUCTION_OPTIONS_KEY=AUTO_INDUCTION_OFF
[Strategy]MaximumNumberOfAutomaticApplications=10000
[StrategyProperty]STOPMODE_OPTIONS_KEY=STOPMODE_DEFAULT
[StrategyProperty]CLASS_AXIOM_OPTIONS_KEY=CLASS_AXIOM_FREE
[SMTSettings]useConstantsForBigOrSmallIntegers=true
[StrategyProperty]MPS_OPTIONS_KEY=MPS_MERGE
[StrategyProperty]SYMBOLIC_EXECUTION_NON_EXECUTION_BRANCH_HIDING_OPTIONS_KEY=SYMBOLIC_EXECUTION_NON_EXECUTION_BRANCH_HIDING_OFF
[Strategy]Timeout=-1
[StrategyProperty]SYMBOLIC_EXECUTION_ALIAS_CHECK_OPTIONS_KEY=SYMBOLIC_EXECUTION_ALIAS_CHECK_NEVER
[StrategyProperty]QUERY_NEW_OPTIONS_KEY=QUERY_OFF
[SMTSettings]useUninterpretedMultiplication=true
[StrategyProperty]BLOCK_OPTIONS_KEY=BLOCK_CONTRACT_INTERNAL
[StrategyProperty]METHOD_OPTIONS_KEY=METHOD_CONTRACT
[StrategyProperty]USER_TACLETS_OPTIONS_KEY3=USER_TACLETS_OFF
[SMTSettings]maxGenericSorts=2
[StrategyProperty]OSS_OPTIONS_KEY=OSS_ON
[StrategyProperty]SPLITTING_OPTIONS_KEY=SPLITTING_DELAYED
[SMTSettings]integersMinimum=-2147483645
[StrategyProperty]VBT_PHASE=VBT_SYM_EX
[SMTSettings]integersMaximum=2147483645
"
}

\bootclasspath "../../../../../../home/flo/git/polyas-core3-open-cred/boot";

\javaSource "../../../../../../home/flo/git/polyas-core3-open-cred/src/main";

\proofObligation "#Proof Obligation Settings
#Mon Feb 10 01:04:14 CET 2020
contract=de.polyas.core3.open.cred.CredTool[de.polyas.core3.open.cred.CredTool\\:\\:addInputCols()].JML normal_behavior operation contract.0
name=de.polyas.core3.open.cred.CredTool[de.polyas.core3.open.cred.CredTool\\:\\:addInputCols()].JML normal_behavior operation contract.0
class=de.uka.ilkd.key.proof.init.FunctionalOperationContractPO
";

\proof {
(keyLog "0" (keyUser "flo" ) (keyVersion ""))

(autoModeTime "32589")

(branch "dummy ID"
(rule "impRight" (formula "1") (newnames "self,exc,heapAtPre,o,f") (proofscript))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "3"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "5"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "7"))
(rule "andLeft" (formula "1"))
(rule "notLeft" (formula "8"))
(rule "andLeft" (formula "8"))
(rule "notLeft" (formula "2"))
(rule "andLeft" (formula "7"))
(rule "andLeft" (formula "9"))
(rule "notLeft" (formula "8"))
(rule "andLeft" (formula "7"))
(rule "andLeft" (formula "9"))
(rule "andLeft" (formula "10"))
(rule "notLeft" (formula "8"))
(rule "notLeft" (formula "7"))
(rule "eqSymm" (formula "15") (term "1,0,0,1,0,1"))
(rule "eqSymm" (formula "5") (term "1,0,1,0"))
(rule "elementOfSingleton" (formula "15") (term "0,0,0,0,1,0,1"))
(rule "castedGetAny" (formula "6") (term "0,0,1,0"))
(rule "castedGetAny" (formula "5") (term "0,1,0,1,0"))
(rule "castedGetAny" (formula "5") (term "1,1,0,1,0"))
(rule "inEqSimp_commuteLeq" (formula "5") (term "0,0,0"))
(rule "inEqSimp_commuteLeq" (formula "5") (term "0,0,0,1,0"))
(rule "inEqSimp_commuteLeq" (formula "6") (term "0,0,0"))
(rule "assignment" (formula "15") (term "1"))
 (builtin "One Step Simplification" (formula "15"))
(rule "Class_invariant_axiom_for_org_apache_commons_csv_CSVRecord" (formula "7") (inst "i=i") (inst "i_0=i_0"))
(rule "expand_inInt" (formula "7") (term "1,0,0,1"))
(rule "expand_inInt" (formula "7") (term "1,0,0,1,0"))
(rule "replace_int_MIN" (formula "7") (term "0,1,1,0,0,1"))
(rule "replace_int_MAX" (formula "7") (term "1,0,1,0,0,1"))
(rule "replace_int_MIN" (formula "7") (term "0,1,1,0,0,1,0"))
(rule "replace_int_MAX" (formula "7") (term "1,0,1,0,0,1,0"))
(rule "andLeft" (formula "7"))
(rule "andLeft" (formula "7"))
(rule "eqSymm" (formula "7"))
(rule "castedGetAny" (formula "9") (term "0,0,1,0"))
(rule "castedGetAny" (formula "8") (term "0,0,1,0"))
(rule "inEqSimp_commuteLeq" (formula "9") (term "1,1,0,0"))
(rule "inEqSimp_commuteLeq" (formula "9") (term "0,0,0,0"))
(rule "inEqSimp_commuteLeq" (formula "8") (term "1,1,0,0"))
(rule "inEqSimp_commuteLeq" (formula "8") (term "0,0,0,0"))
(rule "applyEq" (formula "9") (term "1,1,0,0,0") (ifseqformula "7"))
(rule "Class_invariant_axiom_for_java_util_ArrayList" (formula "11"))
(rule "true_left" (formula "11"))
(rule "Class_invariant_axiom_for_java_util_ArrayList" (formula "10"))
(rule "true_left" (formula "10"))
(rule "commute_and" (formula "5") (term "0,0"))
(rule "commute_and" (formula "6") (term "0,0"))
(rule "commute_and" (formula "9") (term "1,0,0"))
(rule "commute_and" (formula "8") (term "1,0,0"))
(rule "commute_and" (formula "8") (term "0,0,0"))
(rule "commute_and" (formula "9") (term "0,0,0"))
(rule "commute_and" (formula "5") (term "0,0,1,0"))
(rule "commute_and_2" (formula "5") (term "0,1,0"))
(rule "methodBodyExpand" (formula "15") (term "1") (newnames "heapBefore_addInputCols,savedHeapBefore_addInputCols"))
 (builtin "One Step Simplification" (formula "15"))
(rule "variableDeclarationAssign" (formula "15") (term "1"))
(rule "variableDeclaration" (formula "15") (term "1") (newnames "it"))
(rule "shift_paren_and" (formula "8") (term "0,0"))
(rule "commute_and_2" (formula "8") (term "0,0,0"))
(rule "shift_paren_and" (formula "9") (term "0,0"))
(rule "commute_and_2" (formula "9") (term "0,0,0"))
(rule "methodCallWithAssignmentUnfoldTarget" (formula "15") (term "1") (inst "#v0=a"))
(rule "variableDeclaration" (formula "15") (term "1") (newnames "a"))
(rule "assignment_read_attribute_this" (formula "15") (term "1"))
 (builtin "One Step Simplification" (formula "15"))
 (builtin "Use Operation Contract" (formula "15") (newnames "heapBefore_iterator,result,exc_0,heapAfter_iterator,anon_heap_iterator") (contract "java.util.ArrayList[java.util.Collection::iterator()].JML normal_behavior operation contract.0"))
(branch "Post (iterator)"
    (builtin "One Step Simplification" (formula "11"))
    (builtin "One Step Simplification" (formula "17"))
   (rule "andLeft" (formula "11"))
   (rule "selectCreatedOfAnonAsFormulaEQ" (formula "12") (term "1,1,0") (ifseqformula "11"))
   (rule "andLeft" (formula "12"))
   (rule "andLeft" (formula "13"))
   (rule "andLeft" (formula "12"))
   (rule "andLeft" (formula "13"))
   (rule "andLeft" (formula "14"))
   (rule "andLeft" (formula "15"))
   (rule "andLeft" (formula "15"))
   (rule "andLeft" (formula "17"))
   (rule "andLeft" (formula "15"))
   (rule "notLeft" (formula "18"))
   (rule "notLeft" (formula "15"))
   (rule "eqSymm" (formula "14"))
   (rule "replace_known_right" (formula "12") (term "0") (ifseqformula "19"))
    (builtin "One Step Simplification" (formula "12") (ifInst ""  (formula "18")))
   (rule "assignment" (formula "25") (term "1"))
    (builtin "One Step Simplification" (formula "25"))
   (rule "pullOutSelect" (formula "13") (term "0") (inst "selectSK=java_util_Iterator_index_0"))
   (rule "simplifySelectOfAnonEQ" (formula "13") (ifseqformula "11"))
    (builtin "One Step Simplification" (formula "13") (ifInst ""  (formula "20")) (ifInst ""  (formula "19")))
   (rule "applyEqReverse" (formula "14") (term "0") (ifseqformula "13"))
   (rule "hideAuxiliaryEq" (formula "13"))
   (rule "pullOutSelect" (formula "14") (term "0") (inst "selectSK=java_util_Collection_seq_0"))
   (rule "simplifySelectOfAnonEQ" (formula "14") (ifseqformula "11"))
    (builtin "One Step Simplification" (formula "14") (ifInst ""  (formula "23")))
   (rule "eqSymm" (formula "15"))
   (rule "simplifySelectOfAnonEQ" (formula "15") (ifseqformula "11"))
    (builtin "One Step Simplification" (formula "15") (ifInst ""  (formula "20")) (ifInst ""  (formula "19")))
   (rule "applyEqReverse" (formula "14") (term "1") (ifseqformula "15"))
   (rule "hideAuxiliaryEq" (formula "15"))
   (rule "ifthenelse_negated" (formula "14") (term "0"))
   (rule "Class_invariant_axiom_for_java_util_ArrayList" (formula "16"))
   (rule "true_left" (formula "16"))
    (builtin "Loop Invariant" (formula "24") (newnames "variant,b,heapBefore_LOOP,heap_After_LOOP,anon_heap_LOOP,o,f"))
   (branch "Invariant Initially Valid"
      (rule "andRight" (formula "24"))
      (branch
         (rule "andRight" (formula "24"))
         (branch
            (rule "andRight" (formula "24"))
            (branch
               (rule "andRight" (formula "24"))
               (branch
                  (rule "andRight" (formula "24"))
                  (branch
                     (rule "andRight" (formula "24"))
                     (branch
                        (rule "andRight" (formula "24"))
                        (branch
                           (rule "andRight" (formula "24"))
                           (branch
                              (rule "andRight" (formula "24"))
                              (branch
                                 (rule "andRight" (formula "24"))
                                 (branch
                                     (builtin "One Step Simplification" (formula "24"))
                                    (rule "allRight" (formula "24") (inst "sk=j_0"))
                                    (rule "impRight" (formula "24"))
                                    (rule "andLeft" (formula "1"))
                                    (rule "castedGetAny" (formula "26") (term "0,1,0"))
                                    (rule "castedGetAny" (formula "26") (term "1,1,0"))
                                    (rule "inEqSimp_ltToLeq" (formula "8") (term "0,0,0"))
                                    (rule "polySimp_mulComm0" (formula "8") (term "1,0,0,0,0,0"))
                                    (rule "inEqSimp_ltToLeq" (formula "11") (term "0,0,0,0,0"))
                                    (rule "polySimp_mulComm0" (formula "11") (term "1,0,0,0,0,0,0,0"))
                                    (rule "inEqSimp_ltToLeq" (formula "10") (term "0,0,0,0,0"))
                                    (rule "polySimp_mulComm0" (formula "10") (term "1,0,0,0,0,0,0,0"))
                                    (rule "inEqSimp_ltToLeq" (formula "7") (term "0,0,0,1,0"))
                                    (rule "polySimp_mulComm0" (formula "7") (term "1,0,0,0,0,0,1,0"))
                                    (rule "inEqSimp_ltToLeq" (formula "7") (term "0,0,0"))
                                    (rule "polySimp_mulComm0" (formula "7") (term "1,0,0,0,0,0"))
                                    (rule "inEqSimp_ltToLeq" (formula "26") (term "1,0,0"))
                                    (rule "polySimp_mulComm0" (formula "26") (term "1,0,0,1,0,0"))
                                    (rule "inEqSimp_ltToLeq" (formula "2"))
                                    (rule "polySimp_mulComm0" (formula "2") (term "1,0,0"))
                                    (rule "polySimp_addComm1" (formula "2") (term "0"))
                                    (rule "inEqSimp_commuteLeq" (formula "26") (term "0,0,0"))
                                    (rule "inEqSimp_commuteLeq" (formula "1"))
                                    (rule "inEqSimp_sepPosMonomial0" (formula "8") (term "0,0,0"))
                                    (rule "polySimp_mulComm0" (formula "8") (term "1,0,0,0"))
                                    (rule "polySimp_rightDist" (formula "8") (term "1,0,0,0"))
                                    (rule "polySimp_mulLiterals" (formula "8") (term "1,1,0,0,0"))
                                    (rule "mul_literals" (formula "8") (term "0,1,0,0,0"))
                                    (rule "polySimp_elimOne" (formula "8") (term "1,1,0,0,0"))
                                    (rule "inEqSimp_sepPosMonomial0" (formula "11") (term "0,0,0,0,0"))
                                    (rule "polySimp_mulComm0" (formula "11") (term "1,0,0,0,0,0"))
                                    (rule "polySimp_rightDist" (formula "11") (term "1,0,0,0,0,0"))
                                    (rule "polySimp_mulLiterals" (formula "11") (term "1,1,0,0,0,0,0"))
                                    (rule "mul_literals" (formula "11") (term "0,1,0,0,0,0,0"))
                                    (rule "polySimp_elimOne" (formula "11") (term "1,1,0,0,0,0,0"))
                                    (rule "inEqSimp_sepPosMonomial0" (formula "10") (term "0,0,0,0,0"))
                                    (rule "polySimp_mulComm0" (formula "10") (term "1,0,0,0,0,0"))
                                    (rule "polySimp_rightDist" (formula "10") (term "1,0,0,0,0,0"))
                                    (rule "mul_literals" (formula "10") (term "0,1,0,0,0,0,0"))
                                    (rule "polySimp_mulLiterals" (formula "10") (term "1,1,0,0,0,0,0"))
                                    (rule "polySimp_elimOne" (formula "10") (term "1,1,0,0,0,0,0"))
                                    (rule "inEqSimp_sepPosMonomial0" (formula "7") (term "0,0,0,1,0"))
                                    (rule "polySimp_mulComm0" (formula "7") (term "1,0,0,0,1,0"))
                                    (rule "polySimp_rightDist" (formula "7") (term "1,0,0,0,1,0"))
                                    (rule "polySimp_mulLiterals" (formula "7") (term "1,1,0,0,0,1,0"))
                                    (rule "mul_literals" (formula "7") (term "0,1,0,0,0,1,0"))
                                    (rule "polySimp_elimOne" (formula "7") (term "1,1,0,0,0,1,0"))
                                    (rule "inEqSimp_sepPosMonomial0" (formula "7") (term "0,0,0"))
                                    (rule "polySimp_mulComm0" (formula "7") (term "1,0,0,0"))
                                    (rule "polySimp_rightDist" (formula "7") (term "1,0,0,0"))
                                    (rule "polySimp_mulLiterals" (formula "7") (term "1,1,0,0,0"))
                                    (rule "mul_literals" (formula "7") (term "0,1,0,0,0"))
                                    (rule "polySimp_elimOne" (formula "7") (term "1,1,0,0,0"))
                                    (rule "inEqSimp_sepPosMonomial0" (formula "26") (term "1,0,0"))
                                    (rule "polySimp_mulComm0" (formula "26") (term "1,1,0,0"))
                                    (rule "polySimp_rightDist" (formula "26") (term "1,1,0,0"))
                                    (rule "polySimp_mulLiterals" (formula "26") (term "1,1,1,0,0"))
                                    (rule "mul_literals" (formula "26") (term "0,1,1,0,0"))
                                    (rule "polySimp_elimOne" (formula "26") (term "1,1,1,0,0"))
                                    (rule "inEqSimp_sepNegMonomial0" (formula "2"))
                                    (rule "polySimp_mulLiterals" (formula "2") (term "0"))
                                    (rule "polySimp_elimOne" (formula "2") (term "0"))
                                    (rule "pullOutSelect" (formula "26") (term "1,0,0,1,0") (inst "selectSK=de_polyas_core3_open_cred_CredTool_record_0"))
                                    (rule "applyEq" (formula "27") (term "1,0,1,1,1,0,0") (ifseqformula "1"))
                                    (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "14"))
                                     (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "25")) (ifInst ""  (formula "5")))
                                    (rule "applyEqReverse" (formula "27") (term "1,0,0,1,0") (ifseqformula "1"))
                                    (rule "applyEqReverse" (formula "27") (term "1,0,1,1,1,0,0") (ifseqformula "1"))
                                    (rule "hideAuxiliaryEq" (formula "1"))
                                    (rule "pullOutSelect" (formula "26") (term "0,1,1,0") (inst "selectSK=java_util_Collection_seq_1"))
                                    (rule "applyEq" (formula "3") (term "0,0") (ifseqformula "1"))
                                    (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "14"))
                                     (builtin "One Step Simplification" (formula "1"))
                                    (rule "pullOutSelect" (formula "27") (term "0,0,1,0") (inst "selectSK=org_apache_commons_csv_CSVRecord_key_seq_0"))
                                    (rule "applyEq" (formula "28") (term "0,1,1,1,0,0") (ifseqformula "1"))
                                    (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "15"))
                                     (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "23")))
                                    (rule "ifthenelse_negated" (formula "1") (term "0"))
                                    (rule "pullOutSelect" (formula "2") (term "1,2,0") (inst "selectSK=de_polyas_core3_open_cred_CredTool_cols_0"))
                                    (rule "applyEq" (formula "3") (term "1,0,0,1,0,0") (ifseqformula "2"))
                                    (rule "applyEq" (formula "3") (term "1,1,0") (ifseqformula "2"))
                                    (rule "applyEq" (formula "3") (term "0,0,0,0,0") (ifseqformula "2"))
                                    (rule "simplifySelectOfAnonEQ" (formula "2") (ifseqformula "16"))
                                     (builtin "One Step Simplification" (formula "2") (ifInst ""  (formula "27")) (ifInst ""  (formula "7")))
                                    (rule "applyEqReverse" (formula "3") (term "1,0,0,1,0,0") (ifseqformula "2"))
                                    (rule "applyEqReverse" (formula "3") (term "1,1,0") (ifseqformula "2"))
                                    (rule "applyEqReverse" (formula "3") (term "0,0,0,0,0") (ifseqformula "2"))
                                    (rule "applyEqReverse" (formula "3") (term "1,2,0") (ifseqformula "2"))
                                    (rule "hideAuxiliaryEq" (formula "2"))
                                    (rule "replace_known_right" (formula "2") (term "0,0,0,0") (ifseqformula "25"))
                                     (builtin "One Step Simplification" (formula "2"))
                                    (rule "ifthenelse_negated" (formula "2") (term "0"))
                                    (rule "applyEq" (formula "18") (term "0") (ifseqformula "2"))
                                    (rule "eqSymm" (formula "18"))
                                    (rule "applyEqReverse" (formula "4") (term "0,0") (ifseqformula "18"))
                                    (rule "applyEqReverse" (formula "2") (term "1") (ifseqformula "18"))
                                    (rule "applyEqReverse" (formula "28") (term "0,1,1,0") (ifseqformula "18"))
                                    (rule "hideAuxiliaryEq" (formula "18"))
                                    (rule "inEqSimp_and_subsumption3" (formula "13") (term "0,0,0"))
                                    (rule "leq_literals" (formula "13") (term "0,1,0,0,0,0"))
                                     (builtin "One Step Simplification" (formula "13"))
                                    (rule "inEqSimp_and_subsumption3" (formula "12") (term "0,0,0"))
                                    (rule "leq_literals" (formula "12") (term "0,1,0,0,0,0"))
                                     (builtin "One Step Simplification" (formula "12"))
                                    (rule "nnf_imp2or" (formula "10") (term "0"))
                                    (rule "nnf_ex2all" (formula "27"))
                                    (rule "nnf_imp2or" (formula "10") (term "0"))
                                    (rule "nnf_imp2or" (formula "14") (term "0"))
                                    (rule "nnf_imp2or" (formula "13") (term "0"))
                                    (rule "nnf_notAnd" (formula "1") (term "0"))
                                    (rule "nnf_notAnd" (formula "11") (term "0,0"))
                                    (rule "inEqSimp_notLeq" (formula "11") (term "0,0,0"))
                                    (rule "polySimp_rightDist" (formula "11") (term "1,0,0,0,0,0"))
                                    (rule "mul_literals" (formula "11") (term "0,1,0,0,0,0,0"))
                                    (rule "polySimp_addAssoc" (formula "11") (term "0,0,0,0,0"))
                                    (rule "add_literals" (formula "11") (term "0,0,0,0,0,0"))
                                    (rule "add_zero_left" (formula "11") (term "0,0,0,0,0"))
                                    (rule "inEqSimp_sepPosMonomial1" (formula "11") (term "0,0,0"))
                                    (rule "polySimp_mulLiterals" (formula "11") (term "1,0,0,0"))
                                    (rule "polySimp_elimOne" (formula "11") (term "1,0,0,0"))
                                    (rule "inEqSimp_notGeq" (formula "11") (term "1,0,0"))
                                    (rule "times_zero_1" (formula "11") (term "1,0,0,1,0,0"))
                                    (rule "add_zero_right" (formula "11") (term "0,0,1,0,0"))
                                    (rule "inEqSimp_sepPosMonomial0" (formula "11") (term "1,0,0"))
                                    (rule "mul_literals" (formula "11") (term "1,1,0,0"))
                                    (rule "nnf_notAnd" (formula "10") (term "0,0"))
                                    (rule "inEqSimp_notGeq" (formula "10") (term "1,0,0"))
                                    (rule "mul_literals" (formula "10") (term "1,0,0,1,0,0"))
                                    (rule "add_zero_right" (formula "10") (term "0,0,1,0,0"))
                                    (rule "inEqSimp_sepPosMonomial0" (formula "10") (term "1,0,0"))
                                    (rule "mul_literals" (formula "10") (term "1,1,0,0"))
                                    (rule "inEqSimp_notLeq" (formula "10") (term "0,0,0"))
                                    (rule "polySimp_rightDist" (formula "10") (term "1,0,0,0,0,0"))
                                    (rule "mul_literals" (formula "10") (term "0,1,0,0,0,0,0"))
                                    (rule "polySimp_addAssoc" (formula "10") (term "0,0,0,0,0"))
                                    (rule "add_literals" (formula "10") (term "0,0,0,0,0,0"))
                                    (rule "add_zero_left" (formula "10") (term "0,0,0,0,0"))
                                    (rule "inEqSimp_sepPosMonomial1" (formula "10") (term "0,0,0"))
                                    (rule "polySimp_mulLiterals" (formula "10") (term "1,0,0,0"))
                                    (rule "polySimp_elimOne" (formula "10") (term "1,0,0,0"))
                                    (rule "nnf_notAnd" (formula "14") (term "0,0"))
                                    (rule "inEqSimp_notLeq" (formula "14") (term "1,0,0"))
                                    (rule "mul_literals" (formula "14") (term "1,0,0,1,0,0"))
                                    (rule "add_literals" (formula "14") (term "0,0,1,0,0"))
                                    (rule "inEqSimp_sepPosMonomial1" (formula "14") (term "1,0,0"))
                                    (rule "mul_literals" (formula "14") (term "1,1,0,0"))
                                    (rule "nnf_notAnd" (formula "13") (term "0,0"))
                                    (rule "inEqSimp_notLeq" (formula "13") (term "1,0,0"))
                                    (rule "mul_literals" (formula "13") (term "1,0,0,1,0,0"))
                                    (rule "add_literals" (formula "13") (term "0,0,1,0,0"))
                                    (rule "inEqSimp_sepPosMonomial1" (formula "13") (term "1,0,0"))
                                    (rule "mul_literals" (formula "13") (term "1,1,0,0"))
                                    (rule "nnf_notAnd" (formula "1") (term "0,0"))
                                    (rule "inEqSimp_notGeq" (formula "1") (term "0,0,0"))
                                    (rule "mul_literals" (formula "1") (term "1,0,0,0,0,0"))
                                    (rule "add_zero_right" (formula "1") (term "0,0,0,0,0"))
                                    (rule "inEqSimp_sepPosMonomial0" (formula "1") (term "0,0,0"))
                                    (rule "mul_literals" (formula "1") (term "1,0,0,0"))
                                    (rule "inEqSimp_notLeq" (formula "1") (term "1,0,0"))
                                    (rule "polySimp_rightDist" (formula "1") (term "1,0,0,1,0,0"))
                                    (rule "mul_literals" (formula "1") (term "0,1,0,0,1,0,0"))
                                    (rule "polySimp_addAssoc" (formula "1") (term "0,0,1,0,0"))
                                    (rule "add_literals" (formula "1") (term "0,0,0,1,0,0"))
                                    (rule "add_zero_left" (formula "1") (term "0,0,1,0,0"))
                                    (rule "inEqSimp_sepPosMonomial1" (formula "1") (term "1,0,0"))
                                    (rule "polySimp_mulLiterals" (formula "1") (term "1,1,0,0"))
                                    (rule "polySimp_elimOne" (formula "1") (term "1,1,0,0"))
                                    (rule "nnf_notAnd" (formula "14") (term "0,0,0"))
                                    (rule "inEqSimp_notLeq" (formula "14") (term "0,0,0,0"))
                                    (rule "polySimp_rightDist" (formula "14") (term "1,0,0,0,0,0,0"))
                                    (rule "mul_literals" (formula "14") (term "0,1,0,0,0,0,0,0"))
                                    (rule "polySimp_addAssoc" (formula "14") (term "0,0,0,0,0,0"))
                                    (rule "add_literals" (formula "14") (term "0,0,0,0,0,0,0"))
                                    (rule "add_zero_left" (formula "14") (term "0,0,0,0,0,0"))
                                    (rule "inEqSimp_sepPosMonomial1" (formula "14") (term "0,0,0,0"))
                                    (rule "polySimp_mulLiterals" (formula "14") (term "1,0,0,0,0"))
                                    (rule "polySimp_elimOne" (formula "14") (term "1,0,0,0,0"))
                                    (rule "inEqSimp_notGeq" (formula "14") (term "1,0,0,0"))
                                    (rule "mul_literals" (formula "14") (term "1,0,0,1,0,0,0"))
                                    (rule "add_zero_right" (formula "14") (term "0,0,1,0,0,0"))
                                    (rule "inEqSimp_sepPosMonomial0" (formula "14") (term "1,0,0,0"))
                                    (rule "mul_literals" (formula "14") (term "1,1,0,0,0"))
                                    (rule "nnf_notAnd" (formula "13") (term "0,0,0"))
                                    (rule "inEqSimp_notGeq" (formula "13") (term "1,0,0,0"))
                                    (rule "times_zero_1" (formula "13") (term "1,0,0,1,0,0,0"))
                                    (rule "add_zero_right" (formula "13") (term "0,0,1,0,0,0"))
                                    (rule "inEqSimp_sepPosMonomial0" (formula "13") (term "1,0,0,0"))
                                    (rule "mul_literals" (formula "13") (term "1,1,0,0,0"))
                                    (rule "inEqSimp_notLeq" (formula "13") (term "0,0,0,0"))
                                    (rule "polySimp_rightDist" (formula "13") (term "1,0,0,0,0,0,0"))
                                    (rule "mul_literals" (formula "13") (term "0,1,0,0,0,0,0,0"))
                                    (rule "polySimp_addAssoc" (formula "13") (term "0,0,0,0,0,0"))
                                    (rule "add_literals" (formula "13") (term "0,0,0,0,0,0,0"))
                                    (rule "add_zero_left" (formula "13") (term "0,0,0,0,0,0"))
                                    (rule "inEqSimp_sepPosMonomial1" (formula "13") (term "0,0,0,0"))
                                    (rule "polySimp_mulLiterals" (formula "13") (term "1,0,0,0,0"))
                                    (rule "polySimp_elimOne" (formula "13") (term "1,0,0,0,0"))
                                    (rule "commute_or_2" (formula "11") (term "0"))
                                    (rule "commute_or" (formula "10") (term "0,0"))
                                    (rule "commute_or_2" (formula "1") (term "0"))
                                    (rule "commute_or_2" (formula "14") (term "0"))
                                    (rule "commute_or_2" (formula "13") (term "0"))
                                    (rule "commute_and" (formula "10") (term "0,0,1,0"))
                                    (rule "commute_or" (formula "11") (term "0,0"))
                                    (rule "commute_or_2" (formula "11") (term "0"))
                                    (rule "commute_or" (formula "1") (term "0,0"))
                                    (rule "commute_or_2" (formula "14") (term "0,0"))
                                    (rule "commute_or_2" (formula "13") (term "0,0"))
                                    (rule "commute_or" (formula "14") (term "0,0,0"))
                                    (rule "commute_or_2" (formula "14") (term "0,0"))
                                    (rule "commute_or_2" (formula "14") (term "0"))
                                    (rule "commute_or" (formula "13") (term "0,0,0"))
                                    (rule "commute_or_2" (formula "13") (term "0,0"))
                                    (rule "commute_or_2" (formula "13") (term "0"))
                                    (rule "commute_and_2" (formula "10") (term "0,1,0"))
                                    (rule "lenNonNegative" (formula "12") (term "0"))
                                    (rule "inEqSimp_commuteLeq" (formula "12"))
                                    (rule "applyEq" (formula "12") (term "0") (ifseqformula "13"))
                                    (rule "lenNonNegative" (formula "13") (term "1"))
                                    (rule "inEqSimp_commuteLeq" (formula "13"))
                                    (rule "ifthenelse_split" (formula "2") (term "0"))
                                    (branch "self.record.<created> = TRUE TRUE"
                                       (rule "applyEqReverse" (formula "1") (term "0,1,1,0") (ifseqformula "3"))
                                       (rule "applyEqReverse" (formula "1") (term "0,0,0,0,0,0") (ifseqformula "3"))
                                       (rule "hideAuxiliaryEq" (formula "3"))
                                       (rule "ifthenelse_split" (formula "3") (term "0"))
                                       (branch "self.cols.<created> = TRUE TRUE"
                                          (rule "eqSymm" (formula "4"))
                                          (rule "applyEq" (formula "6") (term "0,0") (ifseqformula "4"))
                                          (rule "applyEq" (formula "1") (term "0,1,0,0,0,0") (ifseqformula "4"))
                                          (rule "ex_pull_out3" (formula "11") (term "0"))
                                          (rule "cnf_rightDist" (formula "11") (term "0,0"))
                                          (rule "shift_paren_or" (formula "11") (term "1,0,0"))
                                          (rule "cnf_rightDist" (formula "11") (term "0,0,0"))
                                          (rule "commute_or_2" (formula "11") (term "0,0,0,0"))
                                          (rule "shift_paren_or" (formula "11") (term "1,0,0,0"))
                                          (rule "commute_or" (formula "11") (term "0,0,0,0,0"))
                                          (rule "commute_and" (formula "11") (term "0,0,0"))
                                          (rule "commute_and_2" (formula "11") (term "0,0"))
                                          (rule "allLeft" (formula "12") (inst "t=j_0"))
                                          (rule "inEqSimp_commuteGeq" (formula "12") (term "1"))
                                          (rule "inEqSimp_contradInEq1" (formula "12") (term "1") (ifseqformula "6"))
                                          (rule "inEqSimp_homoInEq1" (formula "12") (term "0,1"))
                                          (rule "polySimp_pullOutFactor1b" (formula "12") (term "0,0,1"))
                                          (rule "add_literals" (formula "12") (term "1,1,0,0,1"))
                                          (rule "times_zero_1" (formula "12") (term "1,0,0,1"))
                                          (rule "add_literals" (formula "12") (term "0,0,1"))
                                          (rule "leq_literals" (formula "12") (term "0,1"))
                                           (builtin "One Step Simplification" (formula "12"))
                                          (rule "inEqSimp_contradInEq1" (formula "12") (term "1") (ifseqformula "5"))
                                          (rule "qeq_literals" (formula "12") (term "0,1"))
                                           (builtin "One Step Simplification" (formula "12"))
                                          (rule "notLeft" (formula "12"))
                                          (rule "allLeft" (formula "11") (inst "t=j_0"))
                                          (rule "exLeft" (formula "11") (inst "sk=i_0"))
                                          (rule "andLeft" (formula "11"))
                                          (rule "andLeft" (formula "11"))
                                          (rule "eqSymm" (formula "13") (term "0,0"))
                                          (rule "inEqSimp_commuteGeq" (formula "13") (term "1"))
                                          (rule "inEqSimp_commuteGeq" (formula "12") (term "1"))
                                          (rule "inEqSimp_commuteGeq" (formula "11") (term "1"))
                                          (rule "inEqSimp_homoInEq0" (formula "12") (term "0,0"))
                                          (rule "polySimp_addComm1" (formula "12") (term "0,0,0"))
                                          (rule "inEqSimp_sepPosMonomial1" (formula "12") (term "0,0"))
                                          (rule "polySimp_mulComm0" (formula "12") (term "1,0,0"))
                                          (rule "polySimp_rightDist" (formula "12") (term "1,0,0"))
                                          (rule "mul_literals" (formula "12") (term "0,1,0,0"))
                                          (rule "polySimp_mulLiterals" (formula "12") (term "1,1,0,0"))
                                          (rule "polySimp_elimOne" (formula "12") (term "1,1,0,0"))
                                          (rule "inEqSimp_contradInEq1" (formula "11") (term "1,0") (ifseqformula "5"))
                                          (rule "qeq_literals" (formula "11") (term "0,1,0"))
                                           (builtin "One Step Simplification" (formula "11"))
                                          (rule "inEqSimp_contradInEq1" (formula "13") (term "1") (ifseqformula "6"))
                                          (rule "inEqSimp_homoInEq1" (formula "13") (term "0,1"))
                                          (rule "polySimp_pullOutFactor1b" (formula "13") (term "0,0,1"))
                                          (rule "add_literals" (formula "13") (term "1,1,0,0,1"))
                                          (rule "times_zero_1" (formula "13") (term "1,0,0,1"))
                                          (rule "add_literals" (formula "13") (term "0,0,1"))
                                          (rule "leq_literals" (formula "13") (term "0,1"))
                                           (builtin "One Step Simplification" (formula "13"))
                                          (rule "inEqSimp_contradInEq1" (formula "12") (term "1") (ifseqformula "6"))
                                          (rule "inEqSimp_homoInEq1" (formula "12") (term "0,1"))
                                          (rule "polySimp_pullOutFactor1b" (formula "12") (term "0,0,1"))
                                          (rule "add_literals" (formula "12") (term "1,1,0,0,1"))
                                          (rule "times_zero_1" (formula "12") (term "1,0,0,1"))
                                          (rule "add_zero_right" (formula "12") (term "0,0,1"))
                                          (rule "leq_literals" (formula "12") (term "0,1"))
                                           (builtin "One Step Simplification" (formula "12"))
                                          (rule "inEqSimp_contradInEq1" (formula "11") (term "1") (ifseqformula "6"))
                                          (rule "inEqSimp_homoInEq1" (formula "11") (term "0,1"))
                                          (rule "polySimp_pullOutFactor1b" (formula "11") (term "0,0,1"))
                                          (rule "add_literals" (formula "11") (term "1,1,0,0,1"))
                                          (rule "times_zero_1" (formula "11") (term "1,0,0,1"))
                                          (rule "add_zero_right" (formula "11") (term "0,0,1"))
                                          (rule "leq_literals" (formula "11") (term "0,1"))
                                           (builtin "One Step Simplification" (formula "11"))
                                          (rule "inEqSimp_contradInEq1" (formula "13") (term "1") (ifseqformula "5"))
                                          (rule "qeq_literals" (formula "13") (term "0,1"))
                                           (builtin "One Step Simplification" (formula "13"))
                                          (rule "inEqSimp_contradInEq1" (formula "12") (term "1") (ifseqformula "5"))
                                          (rule "qeq_literals" (formula "12") (term "0,1"))
                                           (builtin "One Step Simplification" (formula "12"))
                                          (rule "allLeft" (formula "1") (inst "t=i_0"))
                                          (rule "replace_known_left" (formula "1") (term "0,0,0") (ifseqformula "14"))
                                           (builtin "One Step Simplification" (formula "1"))
                                          (rule "inEqSimp_commuteGeq" (formula "1") (term "1"))
                                          (rule "inEqSimp_contradInEq1" (formula "1") (term "0") (ifseqformula "12"))
                                          (rule "qeq_literals" (formula "1") (term "0,0"))
                                           (builtin "One Step Simplification" (formula "1"))
                                          (rule "inEqSimp_contradInEq1" (formula "1") (ifseqformula "13"))
                                          (rule "andLeft" (formula "1"))
                                          (rule "inEqSimp_homoInEq1" (formula "1"))
                                          (rule "polySimp_pullOutFactor1b" (formula "1") (term "0"))
                                          (rule "add_literals" (formula "1") (term "1,1,0"))
                                          (rule "times_zero_1" (formula "1") (term "1,0"))
                                          (rule "add_literals" (formula "1") (term "0"))
                                          (rule "leq_literals" (formula "1"))
                                          (rule "closeFalse" (formula "1"))
                                       )
                                       (branch "self.cols.<created> = TRUE FALSE"
                                          (rule "referencedObjectIsCreatedRight" (formula "22") (ifseqformula "27"))
                                          (rule "close" (formula "22") (ifseqformula "6"))
                                       )
                                    )
                                    (branch "self.record.<created> = TRUE FALSE"
                                       (rule "referencedObjectIsCreatedRight" (formula "22") (ifseqformula "25"))
                                       (rule "close" (formula "22") (ifseqformula "6"))
                                    )
                                 )
                                 (branch
                                     (builtin "One Step Simplification" (formula "24"))
                                    (rule "allRight" (formula "24") (inst "sk=i_0"))
                                    (rule "impRight" (formula "24"))
                                    (rule "andLeft" (formula "1"))
                                    (rule "notRight" (formula "26"))
                                    (rule "castedGetAny" (formula "1") (term "0"))
                                    (rule "inEqSimp_ltToLeq" (formula "11") (term "0,0,0,0,0"))
                                    (rule "polySimp_mulComm0" (formula "11") (term "1,0,0,0,0,0,0,0"))
                                    (rule "inEqSimp_ltToLeq" (formula "8") (term "0,0,0,1,0"))
                                    (rule "polySimp_mulComm0" (formula "8") (term "1,0,0,0,0,0,1,0"))
                                    (rule "inEqSimp_ltToLeq" (formula "8") (term "0,0,0"))
                                    (rule "polySimp_mulComm0" (formula "8") (term "1,0,0,0,0,0"))
                                    (rule "inEqSimp_ltToLeq" (formula "12") (term "0,0,0,0,0"))
                                    (rule "polySimp_mulComm0" (formula "12") (term "1,0,0,0,0,0,0,0"))
                                    (rule "inEqSimp_ltToLeq" (formula "9") (term "0,0,0"))
                                    (rule "polySimp_mulComm0" (formula "9") (term "1,0,0,0,0,0"))
                                    (rule "inEqSimp_ltToLeq" (formula "3"))
                                    (rule "polySimp_mulComm0" (formula "3") (term "1,0,0"))
                                    (rule "polySimp_addComm1" (formula "3") (term "0"))
                                    (rule "inEqSimp_commuteLeq" (formula "2"))
                                    (rule "inEqSimp_sepPosMonomial0" (formula "11") (term "0,0,0,0,0"))
                                    (rule "polySimp_mulComm0" (formula "11") (term "1,0,0,0,0,0"))
                                    (rule "polySimp_rightDist" (formula "11") (term "1,0,0,0,0,0"))
                                    (rule "mul_literals" (formula "11") (term "0,1,0,0,0,0,0"))
                                    (rule "polySimp_mulLiterals" (formula "11") (term "1,1,0,0,0,0,0"))
                                    (rule "polySimp_elimOne" (formula "11") (term "1,1,0,0,0,0,0"))
                                    (rule "inEqSimp_sepPosMonomial0" (formula "8") (term "0,0,0,1,0"))
                                    (rule "polySimp_mulComm0" (formula "8") (term "1,0,0,0,1,0"))
                                    (rule "polySimp_rightDist" (formula "8") (term "1,0,0,0,1,0"))
                                    (rule "polySimp_mulLiterals" (formula "8") (term "1,1,0,0,0,1,0"))
                                    (rule "mul_literals" (formula "8") (term "0,1,0,0,0,1,0"))
                                    (rule "polySimp_elimOne" (formula "8") (term "1,1,0,0,0,1,0"))
                                    (rule "inEqSimp_sepPosMonomial0" (formula "8") (term "0,0,0"))
                                    (rule "polySimp_mulComm0" (formula "8") (term "1,0,0,0"))
                                    (rule "polySimp_rightDist" (formula "8") (term "1,0,0,0"))
                                    (rule "polySimp_mulLiterals" (formula "8") (term "1,1,0,0,0"))
                                    (rule "mul_literals" (formula "8") (term "0,1,0,0,0"))
                                    (rule "polySimp_elimOne" (formula "8") (term "1,1,0,0,0"))
                                    (rule "inEqSimp_sepPosMonomial0" (formula "12") (term "0,0,0,0,0"))
                                    (rule "polySimp_mulComm0" (formula "12") (term "1,0,0,0,0,0"))
                                    (rule "polySimp_rightDist" (formula "12") (term "1,0,0,0,0,0"))
                                    (rule "polySimp_mulLiterals" (formula "12") (term "1,1,0,0,0,0,0"))
                                    (rule "mul_literals" (formula "12") (term "0,1,0,0,0,0,0"))
                                    (rule "polySimp_elimOne" (formula "12") (term "1,1,0,0,0,0,0"))
                                    (rule "inEqSimp_sepPosMonomial0" (formula "9") (term "0,0,0"))
                                    (rule "polySimp_mulComm0" (formula "9") (term "1,0,0,0"))
                                    (rule "polySimp_rightDist" (formula "9") (term "1,0,0,0"))
                                    (rule "polySimp_mulLiterals" (formula "9") (term "1,1,0,0,0"))
                                    (rule "mul_literals" (formula "9") (term "0,1,0,0,0"))
                                    (rule "polySimp_elimOne" (formula "9") (term "1,1,0,0,0"))
                                    (rule "inEqSimp_sepNegMonomial0" (formula "3"))
                                    (rule "polySimp_mulLiterals" (formula "3") (term "0"))
                                    (rule "polySimp_elimOne" (formula "3") (term "0"))
                                    (rule "pullOutSelect" (formula "1") (term "1,0,0") (inst "selectSK=de_polyas_core3_open_cred_CredTool_cols_0"))
                                    (rule "applyEq" (formula "4") (term "1,0,0") (ifseqformula "1"))
                                    (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "15"))
                                     (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "26")) (ifInst ""  (formula "6")))
                                    (rule "applyEqReverse" (formula "2") (term "1,0,0") (ifseqformula "1"))
                                    (rule "replaceKnownSelect_taclet0_2" (formula "2") (term "0,0"))
                                    (rule "replaceKnownAuxiliaryConstant_taclet0_4" (formula "2") (term "0,0"))
                                    (rule "applyEqReverse" (formula "4") (term "1,0,0") (ifseqformula "1"))
                                    (rule "replaceKnownSelect_taclet0_2" (formula "4") (term "0,0"))
                                    (rule "replaceKnownAuxiliaryConstant_taclet0_4" (formula "4") (term "0,0"))
                                    (rule "hideAuxiliaryEq" (formula "1"))
                                    (rule "inEqSimp_and_subsumption3" (formula "11") (term "0,0,0"))
                                    (rule "leq_literals" (formula "11") (term "0,1,0,0,0,0"))
                                     (builtin "One Step Simplification" (formula "11"))
                                    (rule "inEqSimp_and_subsumption3" (formula "12") (term "0,0,0"))
                                    (rule "leq_literals" (formula "12") (term "0,1,0,0,0,0"))
                                     (builtin "One Step Simplification" (formula "12"))
                                    (rule "nnf_imp2or" (formula "8") (term "0"))
                                    (rule "nnf_imp2or" (formula "9") (term "0"))
                                    (rule "nnf_imp2or" (formula "11") (term "0"))
                                    (rule "nnf_imp2or" (formula "12") (term "0"))
                                    (rule "nnf_notAnd" (formula "8") (term "0,0"))
                                    (rule "inEqSimp_notGeq" (formula "8") (term "1,0,0"))
                                    (rule "mul_literals" (formula "8") (term "1,0,0,1,0,0"))
                                    (rule "add_zero_right" (formula "8") (term "0,0,1,0,0"))
                                    (rule "inEqSimp_sepPosMonomial0" (formula "8") (term "1,0,0"))
                                    (rule "mul_literals" (formula "8") (term "1,1,0,0"))
                                    (rule "inEqSimp_notLeq" (formula "8") (term "0,0,0"))
                                    (rule "polySimp_rightDist" (formula "8") (term "1,0,0,0,0,0"))
                                    (rule "mul_literals" (formula "8") (term "0,1,0,0,0,0,0"))
                                    (rule "polySimp_addAssoc" (formula "8") (term "0,0,0,0,0"))
                                    (rule "add_literals" (formula "8") (term "0,0,0,0,0,0"))
                                    (rule "add_zero_left" (formula "8") (term "0,0,0,0,0"))
                                    (rule "inEqSimp_sepPosMonomial1" (formula "8") (term "0,0,0"))
                                    (rule "polySimp_mulLiterals" (formula "8") (term "1,0,0,0"))
                                    (rule "polySimp_elimOne" (formula "8") (term "1,0,0,0"))
                                    (rule "nnf_notAnd" (formula "9") (term "0,0"))
                                    (rule "inEqSimp_notLeq" (formula "9") (term "0,0,0"))
                                    (rule "polySimp_rightDist" (formula "9") (term "1,0,0,0,0,0"))
                                    (rule "mul_literals" (formula "9") (term "0,1,0,0,0,0,0"))
                                    (rule "polySimp_addAssoc" (formula "9") (term "0,0,0,0,0"))
                                    (rule "add_literals" (formula "9") (term "0,0,0,0,0,0"))
                                    (rule "add_zero_left" (formula "9") (term "0,0,0,0,0"))
                                    (rule "inEqSimp_sepPosMonomial1" (formula "9") (term "0,0,0"))
                                    (rule "polySimp_mulLiterals" (formula "9") (term "1,0,0,0"))
                                    (rule "polySimp_elimOne" (formula "9") (term "1,0,0,0"))
                                    (rule "inEqSimp_notGeq" (formula "9") (term "1,0,0"))
                                    (rule "times_zero_1" (formula "9") (term "1,0,0,1,0,0"))
                                    (rule "add_zero_right" (formula "9") (term "0,0,1,0,0"))
                                    (rule "inEqSimp_sepPosMonomial0" (formula "9") (term "1,0,0"))
                                    (rule "mul_literals" (formula "9") (term "1,1,0,0"))
                                    (rule "nnf_notAnd" (formula "11") (term "0,0"))
                                    (rule "inEqSimp_notLeq" (formula "11") (term "1,0,0"))
                                    (rule "mul_literals" (formula "11") (term "1,0,0,1,0,0"))
                                    (rule "add_literals" (formula "11") (term "0,0,1,0,0"))
                                    (rule "inEqSimp_sepPosMonomial1" (formula "11") (term "1,0,0"))
                                    (rule "mul_literals" (formula "11") (term "1,1,0,0"))
                                    (rule "nnf_notAnd" (formula "12") (term "0,0"))
                                    (rule "inEqSimp_notLeq" (formula "12") (term "1,0,0"))
                                    (rule "mul_literals" (formula "12") (term "1,0,0,1,0,0"))
                                    (rule "add_literals" (formula "12") (term "0,0,1,0,0"))
                                    (rule "inEqSimp_sepPosMonomial1" (formula "12") (term "1,0,0"))
                                    (rule "mul_literals" (formula "12") (term "1,1,0,0"))
                                    (rule "nnf_notAnd" (formula "11") (term "0,0,0"))
                                    (rule "inEqSimp_notLeq" (formula "11") (term "0,0,0,0"))
                                    (rule "polySimp_rightDist" (formula "11") (term "1,0,0,0,0,0,0"))
                                    (rule "mul_literals" (formula "11") (term "0,1,0,0,0,0,0,0"))
                                    (rule "polySimp_addAssoc" (formula "11") (term "0,0,0,0,0,0"))
                                    (rule "add_literals" (formula "11") (term "0,0,0,0,0,0,0"))
                                    (rule "add_zero_left" (formula "11") (term "0,0,0,0,0,0"))
                                    (rule "inEqSimp_sepPosMonomial1" (formula "11") (term "0,0,0,0"))
                                    (rule "polySimp_mulLiterals" (formula "11") (term "1,0,0,0,0"))
                                    (rule "polySimp_elimOne" (formula "11") (term "1,0,0,0,0"))
                                    (rule "inEqSimp_notGeq" (formula "11") (term "1,0,0,0"))
                                    (rule "mul_literals" (formula "11") (term "1,0,0,1,0,0,0"))
                                    (rule "add_zero_right" (formula "11") (term "0,0,1,0,0,0"))
                                    (rule "inEqSimp_sepPosMonomial0" (formula "11") (term "1,0,0,0"))
                                    (rule "mul_literals" (formula "11") (term "1,1,0,0,0"))
                                    (rule "nnf_notAnd" (formula "12") (term "0,0,0"))
                                    (rule "inEqSimp_notLeq" (formula "12") (term "0,0,0,0"))
                                    (rule "polySimp_rightDist" (formula "12") (term "1,0,0,0,0,0,0"))
                                    (rule "mul_literals" (formula "12") (term "0,1,0,0,0,0,0,0"))
                                    (rule "polySimp_addAssoc" (formula "12") (term "0,0,0,0,0,0"))
                                    (rule "add_literals" (formula "12") (term "0,0,0,0,0,0,0"))
                                    (rule "add_zero_left" (formula "12") (term "0,0,0,0,0,0"))
                                    (rule "inEqSimp_sepPosMonomial1" (formula "12") (term "0,0,0,0"))
                                    (rule "polySimp_mulLiterals" (formula "12") (term "1,0,0,0,0"))
                                    (rule "polySimp_elimOne" (formula "12") (term "1,0,0,0,0"))
                                    (rule "inEqSimp_notGeq" (formula "12") (term "1,0,0,0"))
                                    (rule "mul_literals" (formula "12") (term "1,0,0,1,0,0,0"))
                                    (rule "add_zero_right" (formula "12") (term "0,0,1,0,0,0"))
                                    (rule "inEqSimp_sepPosMonomial0" (formula "12") (term "1,0,0,0"))
                                    (rule "mul_literals" (formula "12") (term "1,1,0,0,0"))
                                    (rule "commute_or_2" (formula "9") (term "0"))
                                    (rule "commute_or" (formula "8") (term "0,0"))
                                    (rule "commute_or_2" (formula "11") (term "0"))
                                    (rule "commute_or_2" (formula "12") (term "0"))
                                    (rule "commute_or" (formula "9") (term "0,0"))
                                    (rule "commute_or_2" (formula "9") (term "0"))
                                    (rule "commute_or_2" (formula "11") (term "0,0"))
                                    (rule "commute_or_2" (formula "12") (term "0,0"))
                                    (rule "commute_and" (formula "8") (term "0,0,1,0"))
                                    (rule "commute_or" (formula "11") (term "0,0,0"))
                                    (rule "commute_or_2" (formula "11") (term "0,0"))
                                    (rule "commute_or_2" (formula "11") (term "0"))
                                    (rule "commute_or" (formula "12") (term "0,0,0"))
                                    (rule "commute_or_2" (formula "12") (term "0,0"))
                                    (rule "commute_or_2" (formula "12") (term "0"))
                                    (rule "commute_and_2" (formula "8") (term "0,1,0"))
                                    (rule "ifthenelse_split" (formula "17") (term "0"))
                                    (branch "self.cols.<created> = TRUE TRUE"
                                       (rule "eqSymm" (formula "18"))
                                       (rule "applyEq" (formula "3") (term "0,0") (ifseqformula "18"))
                                       (rule "applyEq" (formula "1") (term "0,0") (ifseqformula "18"))
                                       (rule "lenNonNegative" (formula "10") (term "0"))
                                       (rule "inEqSimp_commuteLeq" (formula "10"))
                                       (rule "applyEq" (formula "10") (term "0") (ifseqformula "11"))
                                       (rule "lenNonNegative" (formula "11") (term "1"))
                                       (rule "inEqSimp_commuteLeq" (formula "11"))
                                       (rule "ex_pull_out3" (formula "8") (term "0"))
                                       (rule "cnf_rightDist" (formula "8") (term "0,0"))
                                       (rule "shift_paren_or" (formula "8") (term "1,0,0"))
                                       (rule "cnf_rightDist" (formula "8") (term "0,0,0"))
                                       (rule "commute_or_2" (formula "8") (term "0,0,0,0"))
                                       (rule "shift_paren_or" (formula "8") (term "1,0,0,0"))
                                       (rule "commute_or" (formula "8") (term "0,0,0,0,0"))
                                       (rule "allLeft" (formula "9") (inst "t=i_0"))
                                       (rule "replace_known_left" (formula "9") (term "0,0,0") (ifseqformula "1"))
                                        (builtin "One Step Simplification" (formula "9"))
                                       (rule "inEqSimp_commuteGeq" (formula "9") (term "1"))
                                       (rule "inEqSimp_contradInEq1" (formula "9") (term "0") (ifseqformula "2"))
                                       (rule "qeq_literals" (formula "9") (term "0,0"))
                                        (builtin "One Step Simplification" (formula "9"))
                                       (rule "inEqSimp_contradInEq1" (formula "9") (ifseqformula "3"))
                                       (rule "andLeft" (formula "9"))
                                       (rule "inEqSimp_homoInEq1" (formula "9"))
                                       (rule "polySimp_pullOutFactor1b" (formula "9") (term "0"))
                                       (rule "add_literals" (formula "9") (term "1,1,0"))
                                       (rule "times_zero_1" (formula "9") (term "1,0"))
                                       (rule "add_literals" (formula "9") (term "0"))
                                       (rule "leq_literals" (formula "9"))
                                       (rule "closeFalse" (formula "9"))
                                    )
                                    (branch "self.cols.<created> = TRUE FALSE"
                                       (rule "referencedObjectIsCreatedRight" (formula "20") (ifseqformula "25"))
                                       (rule "close" (formula "20") (ifseqformula "4"))
                                    )
                                 )
                              )
                              (branch
                                  (builtin "One Step Simplification" (formula "24"))
                                 (rule "notRight" (formula "24"))
                                 (rule "inEqSimp_ltToLeq" (formula "7") (term "0,0,0"))
                                 (rule "polySimp_mulComm0" (formula "7") (term "1,0,0,0,0,0"))
                                 (rule "inEqSimp_ltToLeq" (formula "6") (term "0,0,0,1,0"))
                                 (rule "polySimp_mulComm0" (formula "6") (term "1,0,0,0,0,0,1,0"))
                                 (rule "inEqSimp_ltToLeq" (formula "10") (term "0,0,0,0,0"))
                                 (rule "polySimp_mulComm0" (formula "10") (term "1,0,0,0,0,0,0,0"))
                                 (rule "inEqSimp_ltToLeq" (formula "9") (term "0,0,0,0,0"))
                                 (rule "polySimp_mulComm0" (formula "9") (term "1,0,0,0,0,0,0,0"))
                                 (rule "inEqSimp_ltToLeq" (formula "6") (term "0,0,0"))
                                 (rule "polySimp_mulComm0" (formula "6") (term "1,0,0,0,0,0"))
                                 (rule "inEqSimp_sepPosMonomial0" (formula "7") (term "0,0,0"))
                                 (rule "polySimp_mulComm0" (formula "7") (term "1,0,0,0"))
                                 (rule "polySimp_rightDist" (formula "7") (term "1,0,0,0"))
                                 (rule "polySimp_mulLiterals" (formula "7") (term "1,1,0,0,0"))
                                 (rule "mul_literals" (formula "7") (term "0,1,0,0,0"))
                                 (rule "polySimp_elimOne" (formula "7") (term "1,1,0,0,0"))
                                 (rule "inEqSimp_sepPosMonomial0" (formula "6") (term "0,0,0,1,0"))
                                 (rule "polySimp_mulComm0" (formula "6") (term "1,0,0,0,1,0"))
                                 (rule "polySimp_rightDist" (formula "6") (term "1,0,0,0,1,0"))
                                 (rule "mul_literals" (formula "6") (term "0,1,0,0,0,1,0"))
                                 (rule "polySimp_mulLiterals" (formula "6") (term "1,1,0,0,0,1,0"))
                                 (rule "polySimp_elimOne" (formula "6") (term "1,1,0,0,0,1,0"))
                                 (rule "inEqSimp_sepPosMonomial0" (formula "10") (term "0,0,0,0,0"))
                                 (rule "polySimp_mulComm0" (formula "10") (term "1,0,0,0,0,0"))
                                 (rule "polySimp_rightDist" (formula "10") (term "1,0,0,0,0,0"))
                                 (rule "polySimp_mulLiterals" (formula "10") (term "1,1,0,0,0,0,0"))
                                 (rule "mul_literals" (formula "10") (term "0,1,0,0,0,0,0"))
                                 (rule "polySimp_elimOne" (formula "10") (term "1,1,0,0,0,0,0"))
                                 (rule "inEqSimp_sepPosMonomial0" (formula "9") (term "0,0,0,0,0"))
                                 (rule "polySimp_mulComm0" (formula "9") (term "1,0,0,0,0,0"))
                                 (rule "polySimp_rightDist" (formula "9") (term "1,0,0,0,0,0"))
                                 (rule "mul_literals" (formula "9") (term "0,1,0,0,0,0,0"))
                                 (rule "polySimp_mulLiterals" (formula "9") (term "1,1,0,0,0,0,0"))
                                 (rule "polySimp_elimOne" (formula "9") (term "1,1,0,0,0,0,0"))
                                 (rule "inEqSimp_sepPosMonomial0" (formula "6") (term "0,0,0"))
                                 (rule "polySimp_mulComm0" (formula "6") (term "1,0,0,0"))
                                 (rule "polySimp_rightDist" (formula "6") (term "1,0,0,0"))
                                 (rule "mul_literals" (formula "6") (term "0,1,0,0,0"))
                                 (rule "polySimp_mulLiterals" (formula "6") (term "1,1,0,0,0"))
                                 (rule "polySimp_elimOne" (formula "6") (term "1,1,0,0,0"))
                                 (rule "pullOutSelect" (formula "1") (term "1") (inst "selectSK=de_polyas_core3_open_cred_CredTool_cols_0"))
                                 (rule "simplifySelectOfAnonEQ" (formula "2") (ifseqformula "13"))
                                  (builtin "One Step Simplification" (formula "2") (ifInst ""  (formula "24")) (ifInst ""  (formula "4")))
                                 (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "13"))
                                  (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "24")) (ifInst ""  (formula "4")))
                                 (rule "applyEqReverse" (formula "1") (term "1") (ifseqformula "2"))
                                 (rule "hideAuxiliaryEq" (formula "2"))
                                 (rule "eqSymm" (formula "1"))
                                 (rule "close" (formula "24") (ifseqformula "1"))
                              )
                           )
                           (branch
                               (builtin "One Step Simplification" (formula "24"))
                              (rule "inEqSimp_ltToLeq" (formula "5") (term "0,0,0,1,0"))
                              (rule "polySimp_mulComm0" (formula "5") (term "1,0,0,0,0,0,1,0"))
                              (rule "inEqSimp_ltToLeq" (formula "8") (term "0,0,0,0,0"))
                              (rule "polySimp_mulComm0" (formula "8") (term "1,0,0,0,0,0,0,0"))
                              (rule "inEqSimp_ltToLeq" (formula "9") (term "0,0,0,0,0"))
                              (rule "polySimp_mulComm0" (formula "9") (term "1,0,0,0,0,0,0,0"))
                              (rule "inEqSimp_ltToLeq" (formula "5") (term "0,0,0"))
                              (rule "polySimp_mulComm0" (formula "5") (term "1,0,0,0,0,0"))
                              (rule "inEqSimp_ltToLeq" (formula "6") (term "0,0,0"))
                              (rule "polySimp_mulComm0" (formula "6") (term "1,0,0,0,0,0"))
                              (rule "inEqSimp_sepPosMonomial0" (formula "5") (term "0,0,0,1,0"))
                              (rule "polySimp_mulComm0" (formula "5") (term "1,0,0,0,1,0"))
                              (rule "polySimp_rightDist" (formula "5") (term "1,0,0,0,1,0"))
                              (rule "polySimp_mulLiterals" (formula "5") (term "1,1,0,0,0,1,0"))
                              (rule "mul_literals" (formula "5") (term "0,1,0,0,0,1,0"))
                              (rule "polySimp_elimOne" (formula "5") (term "1,1,0,0,0,1,0"))
                              (rule "inEqSimp_sepPosMonomial0" (formula "8") (term "0,0,0,0,0"))
                              (rule "polySimp_mulComm0" (formula "8") (term "1,0,0,0,0,0"))
                              (rule "polySimp_rightDist" (formula "8") (term "1,0,0,0,0,0"))
                              (rule "mul_literals" (formula "8") (term "0,1,0,0,0,0,0"))
                              (rule "polySimp_mulLiterals" (formula "8") (term "1,1,0,0,0,0,0"))
                              (rule "polySimp_elimOne" (formula "8") (term "1,1,0,0,0,0,0"))
                              (rule "inEqSimp_sepPosMonomial0" (formula "9") (term "0,0,0,0,0"))
                              (rule "polySimp_mulComm0" (formula "9") (term "1,0,0,0,0,0"))
                              (rule "polySimp_rightDist" (formula "9") (term "1,0,0,0,0,0"))
                              (rule "mul_literals" (formula "9") (term "0,1,0,0,0,0,0"))
                              (rule "polySimp_mulLiterals" (formula "9") (term "1,1,0,0,0,0,0"))
                              (rule "polySimp_elimOne" (formula "9") (term "1,1,0,0,0,0,0"))
                              (rule "inEqSimp_sepPosMonomial0" (formula "5") (term "0,0,0"))
                              (rule "polySimp_mulComm0" (formula "5") (term "1,0,0,0"))
                              (rule "polySimp_rightDist" (formula "5") (term "1,0,0,0"))
                              (rule "mul_literals" (formula "5") (term "0,1,0,0,0"))
                              (rule "polySimp_mulLiterals" (formula "5") (term "1,1,0,0,0"))
                              (rule "polySimp_elimOne" (formula "5") (term "1,1,0,0,0"))
                              (rule "inEqSimp_sepPosMonomial0" (formula "6") (term "0,0,0"))
                              (rule "polySimp_mulComm0" (formula "6") (term "1,0,0,0"))
                              (rule "polySimp_rightDist" (formula "6") (term "1,0,0,0"))
                              (rule "polySimp_mulLiterals" (formula "6") (term "1,1,0,0,0"))
                              (rule "mul_literals" (formula "6") (term "0,1,0,0,0"))
                              (rule "polySimp_elimOne" (formula "6") (term "1,1,0,0,0"))
                              (rule "pullOutSelect" (formula "24") (term "1") (inst "selectSK=de_polyas_core3_open_cred_CredTool_record_0"))
                              (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "12"))
                               (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "23")) (ifInst ""  (formula "3")))
                              (rule "applyEqReverse" (formula "25") (term "1") (ifseqformula "1"))
                              (rule "hideAuxiliaryEq" (formula "1"))
                              (rule "inEqSimp_and_subsumption3" (formula "8") (term "0,0,0"))
                              (rule "leq_literals" (formula "8") (term "0,1,0,0,0,0"))
                               (builtin "One Step Simplification" (formula "8"))
                              (rule "inEqSimp_and_subsumption3" (formula "9") (term "0,0,0"))
                              (rule "leq_literals" (formula "9") (term "0,1,0,0,0,0"))
                               (builtin "One Step Simplification" (formula "9"))
                              (rule "nnf_imp2or" (formula "5") (term "0"))
                              (rule "nnf_imp2or" (formula "6") (term "0"))
                              (rule "nnf_imp2or" (formula "8") (term "0"))
                              (rule "nnf_imp2or" (formula "9") (term "0"))
                              (rule "nnf_notAnd" (formula "5") (term "0,0"))
                              (rule "inEqSimp_notGeq" (formula "5") (term "1,0,0"))
                              (rule "mul_literals" (formula "5") (term "1,0,0,1,0,0"))
                              (rule "add_zero_right" (formula "5") (term "0,0,1,0,0"))
                              (rule "inEqSimp_sepPosMonomial0" (formula "5") (term "1,0,0"))
                              (rule "mul_literals" (formula "5") (term "1,1,0,0"))
                              (rule "inEqSimp_notLeq" (formula "5") (term "0,0,0"))
                              (rule "polySimp_rightDist" (formula "5") (term "1,0,0,0,0,0"))
                              (rule "mul_literals" (formula "5") (term "0,1,0,0,0,0,0"))
                              (rule "polySimp_addAssoc" (formula "5") (term "0,0,0,0,0"))
                              (rule "add_literals" (formula "5") (term "0,0,0,0,0,0"))
                              (rule "add_zero_left" (formula "5") (term "0,0,0,0,0"))
                              (rule "inEqSimp_sepPosMonomial1" (formula "5") (term "0,0,0"))
                              (rule "polySimp_mulLiterals" (formula "5") (term "1,0,0,0"))
                              (rule "polySimp_elimOne" (formula "5") (term "1,0,0,0"))
                              (rule "nnf_notAnd" (formula "6") (term "0,0"))
                              (rule "inEqSimp_notGeq" (formula "6") (term "1,0,0"))
                              (rule "mul_literals" (formula "6") (term "1,0,0,1,0,0"))
                              (rule "add_literals" (formula "6") (term "0,0,1,0,0"))
                              (rule "inEqSimp_sepPosMonomial0" (formula "6") (term "1,0,0"))
                              (rule "mul_literals" (formula "6") (term "1,1,0,0"))
                              (rule "inEqSimp_notLeq" (formula "6") (term "0,0,0"))
                              (rule "polySimp_rightDist" (formula "6") (term "1,0,0,0,0,0"))
                              (rule "mul_literals" (formula "6") (term "0,1,0,0,0,0,0"))
                              (rule "polySimp_addAssoc" (formula "6") (term "0,0,0,0,0"))
                              (rule "add_literals" (formula "6") (term "0,0,0,0,0,0"))
                              (rule "add_zero_left" (formula "6") (term "0,0,0,0,0"))
                              (rule "inEqSimp_sepPosMonomial1" (formula "6") (term "0,0,0"))
                              (rule "polySimp_mulLiterals" (formula "6") (term "1,0,0,0"))
                              (rule "polySimp_elimOne" (formula "6") (term "1,0,0,0"))
                              (rule "nnf_notAnd" (formula "8") (term "0,0"))
                              (rule "inEqSimp_notLeq" (formula "8") (term "1,0,0"))
                              (rule "mul_literals" (formula "8") (term "1,0,0,1,0,0"))
                              (rule "add_literals" (formula "8") (term "0,0,1,0,0"))
                              (rule "inEqSimp_sepPosMonomial1" (formula "8") (term "1,0,0"))
                              (rule "mul_literals" (formula "8") (term "1,1,0,0"))
                              (rule "nnf_notAnd" (formula "9") (term "0,0"))
                              (rule "inEqSimp_notLeq" (formula "9") (term "1,0,0"))
                              (rule "mul_literals" (formula "9") (term "1,0,0,1,0,0"))
                              (rule "add_literals" (formula "9") (term "0,0,1,0,0"))
                              (rule "inEqSimp_sepPosMonomial1" (formula "9") (term "1,0,0"))
                              (rule "mul_literals" (formula "9") (term "1,1,0,0"))
                              (rule "nnf_notAnd" (formula "8") (term "0,0,0"))
                              (rule "inEqSimp_notLeq" (formula "8") (term "0,0,0,0"))
                              (rule "polySimp_rightDist" (formula "8") (term "1,0,0,0,0,0,0"))
                              (rule "mul_literals" (formula "8") (term "0,1,0,0,0,0,0,0"))
                              (rule "polySimp_addAssoc" (formula "8") (term "0,0,0,0,0,0"))
                              (rule "add_literals" (formula "8") (term "0,0,0,0,0,0,0"))
                              (rule "add_zero_left" (formula "8") (term "0,0,0,0,0,0"))
                              (rule "inEqSimp_sepPosMonomial1" (formula "8") (term "0,0,0,0"))
                              (rule "polySimp_mulLiterals" (formula "8") (term "1,0,0,0,0"))
                              (rule "polySimp_elimOne" (formula "8") (term "1,0,0,0,0"))
                              (rule "inEqSimp_notGeq" (formula "8") (term "1,0,0,0"))
                              (rule "times_zero_1" (formula "8") (term "1,0,0,1,0,0,0"))
                              (rule "add_literals" (formula "8") (term "0,0,1,0,0,0"))
                              (rule "inEqSimp_sepPosMonomial0" (formula "8") (term "1,0,0,0"))
                              (rule "mul_literals" (formula "8") (term "1,1,0,0,0"))
                              (rule "nnf_notAnd" (formula "9") (term "0,0,0"))
                              (rule "inEqSimp_notGeq" (formula "9") (term "1,0,0,0"))
                              (rule "mul_literals" (formula "9") (term "1,0,0,1,0,0,0"))
                              (rule "add_literals" (formula "9") (term "0,0,1,0,0,0"))
                              (rule "inEqSimp_sepPosMonomial0" (formula "9") (term "1,0,0,0"))
                              (rule "mul_literals" (formula "9") (term "1,1,0,0,0"))
                              (rule "inEqSimp_notLeq" (formula "9") (term "0,0,0,0"))
                              (rule "polySimp_rightDist" (formula "9") (term "1,0,0,0,0,0,0"))
                              (rule "mul_literals" (formula "9") (term "0,1,0,0,0,0,0,0"))
                              (rule "polySimp_addAssoc" (formula "9") (term "0,0,0,0,0,0"))
                              (rule "add_literals" (formula "9") (term "0,0,0,0,0,0,0"))
                              (rule "add_zero_left" (formula "9") (term "0,0,0,0,0,0"))
                              (rule "inEqSimp_sepPosMonomial1" (formula "9") (term "0,0,0,0"))
                              (rule "polySimp_mulLiterals" (formula "9") (term "1,0,0,0,0"))
                              (rule "polySimp_elimOne" (formula "9") (term "1,0,0,0,0"))
                              (rule "Class_invariant_axiom_for_org_apache_commons_csv_CSVRecord" (formula "24") (inst "i=i") (inst "i_0=i_0"))
                              (rule "expand_inInt" (formula "24") (term "1,0,0,1,0"))
                              (rule "expand_inInt" (formula "24") (term "1,0,0,1"))
                              (rule "replace_int_MIN" (formula "24") (term "0,1,1,0,0,1,0"))
                              (rule "replace_int_MAX" (formula "24") (term "1,0,1,0,0,1,0"))
                              (rule "replace_int_MIN" (formula "24") (term "0,1,1,0,0,1"))
                              (rule "replace_int_MAX" (formula "24") (term "1,0,1,0,0,1"))
                              (rule "eqSymm" (formula "24") (term "0,0"))
                              (rule "castedGetAny" (formula "24") (term "0,0,1,0,1"))
                              (rule "castedGetAny" (formula "24") (term "0,0,1,0,1,0"))
                              (rule "inEqSimp_ltToLeq" (formula "24") (term "1,0,0,0,1,0"))
                              (rule "polySimp_mulComm0" (formula "24") (term "1,0,0,1,0,0,0,1,0"))
                              (rule "inEqSimp_ltToLeq" (formula "24") (term "1,0,0,0,1"))
                              (rule "polySimp_mulComm0" (formula "24") (term "1,0,0,1,0,0,0,1"))
                              (rule "inEqSimp_commuteLeq" (formula "24") (term "0,0,0,0,1"))
                              (rule "inEqSimp_commuteLeq" (formula "24") (term "0,0,0,0,1,0"))
                              (rule "inEqSimp_commuteLeq" (formula "24") (term "1,1,0,0,1,0"))
                              (rule "inEqSimp_commuteLeq" (formula "24") (term "1,1,0,0,1"))
                              (rule "inEqSimp_sepPosMonomial0" (formula "24") (term "1,0,0,0,1,0"))
                              (rule "polySimp_mulComm0" (formula "24") (term "1,1,0,0,0,1,0"))
                              (rule "polySimp_rightDist" (formula "24") (term "1,1,0,0,0,1,0"))
                              (rule "polySimp_mulLiterals" (formula "24") (term "1,1,1,0,0,0,1,0"))
                              (rule "mul_literals" (formula "24") (term "0,1,1,0,0,0,1,0"))
                              (rule "polySimp_elimOne" (formula "24") (term "1,1,1,0,0,0,1,0"))
                              (rule "inEqSimp_sepPosMonomial0" (formula "24") (term "1,0,0,0,1"))
                              (rule "polySimp_mulComm0" (formula "24") (term "1,1,0,0,0,1"))
                              (rule "polySimp_rightDist" (formula "24") (term "1,1,0,0,0,1"))
                              (rule "polySimp_mulLiterals" (formula "24") (term "1,1,1,0,0,0,1"))
                              (rule "mul_literals" (formula "24") (term "0,1,1,0,0,0,1"))
                              (rule "polySimp_elimOne" (formula "24") (term "1,1,1,0,0,0,1"))
                              (rule "pullOutSelect" (formula "24") (term "0,1,0,0") (inst "selectSK=org_apache_commons_csv_CSVRecord_key_seq_0"))
                              (rule "applyEq" (formula "25") (term "0,0,0,1,0,1,0") (ifseqformula "1"))
                              (rule "applyEq" (formula "25") (term "0,1,1,1,0,0,0,1,0") (ifseqformula "1"))
                              (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "12"))
                               (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "20")))
                              (rule "ifthenelse_negated" (formula "1") (term "0"))
                              (rule "pullOutSelect" (formula "25") (term "0,0,0,0") (inst "selectSK=org_apache_commons_csv_CSVRecord_value_seq_0"))
                              (rule "applyEq" (formula "26") (term "0,1,1,1,0,0,0,1") (ifseqformula "1"))
                              (rule "applyEq" (formula "26") (term "0,0,0,1,0,1") (ifseqformula "1"))
                              (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "13"))
                               (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "21")))
                              (rule "ifthenelse_negated" (formula "1") (term "0"))
                              (rule "nnf_imp2or" (formula "26") (term "0,1"))
                              (rule "nnf_imp2or" (formula "26") (term "0,1,0"))
                              (rule "nnf_notAnd" (formula "26") (term "0,0,1"))
                              (rule "nnf_notAnd" (formula "26") (term "0,0,1,0"))
                              (rule "nnf_notAnd" (formula "26") (term "0,0,0,1"))
                              (rule "inEqSimp_notLeq" (formula "26") (term "1,0,0,0,1"))
                              (rule "polySimp_rightDist" (formula "26") (term "1,0,0,1,0,0,0,1"))
                              (rule "mul_literals" (formula "26") (term "0,1,0,0,1,0,0,0,1"))
                              (rule "polySimp_addAssoc" (formula "26") (term "0,0,1,0,0,0,1"))
                              (rule "add_literals" (formula "26") (term "0,0,0,1,0,0,0,1"))
                              (rule "add_zero_left" (formula "26") (term "0,0,1,0,0,0,1"))
                              (rule "inEqSimp_sepPosMonomial1" (formula "26") (term "1,0,0,0,1"))
                              (rule "polySimp_mulLiterals" (formula "26") (term "1,1,0,0,0,1"))
                              (rule "polySimp_elimOne" (formula "26") (term "1,1,0,0,0,1"))
                              (rule "inEqSimp_notGeq" (formula "26") (term "0,0,0,0,1"))
                              (rule "mul_literals" (formula "26") (term "1,0,0,0,0,0,0,1"))
                              (rule "add_zero_right" (formula "26") (term "0,0,0,0,0,0,1"))
                              (rule "inEqSimp_sepPosMonomial0" (formula "26") (term "0,0,0,0,1"))
                              (rule "mul_literals" (formula "26") (term "1,0,0,0,0,1"))
                              (rule "nnf_notAnd" (formula "26") (term "1,0,0,1"))
                              (rule "inEqSimp_notGeq" (formula "26") (term "1,1,0,0,1"))
                              (rule "mul_literals" (formula "26") (term "1,0,0,1,1,0,0,1"))
                              (rule "add_literals" (formula "26") (term "0,0,1,1,0,0,1"))
                              (rule "inEqSimp_sepPosMonomial0" (formula "26") (term "1,1,0,0,1"))
                              (rule "mul_literals" (formula "26") (term "1,1,1,0,0,1"))
                              (rule "inEqSimp_notLeq" (formula "26") (term "0,1,0,0,1"))
                              (rule "mul_literals" (formula "26") (term "1,0,0,0,1,0,0,1"))
                              (rule "add_literals" (formula "26") (term "0,0,0,1,0,0,1"))
                              (rule "inEqSimp_sepPosMonomial1" (formula "26") (term "0,1,0,0,1"))
                              (rule "mul_literals" (formula "26") (term "1,0,1,0,0,1"))
                              (rule "nnf_notAnd" (formula "26") (term "0,0,0,1,0"))
                              (rule "inEqSimp_notLeq" (formula "26") (term "1,0,0,0,1,0"))
                              (rule "polySimp_rightDist" (formula "26") (term "1,0,0,1,0,0,0,1,0"))
                              (rule "mul_literals" (formula "26") (term "0,1,0,0,1,0,0,0,1,0"))
                              (rule "polySimp_addAssoc" (formula "26") (term "0,0,1,0,0,0,1,0"))
                              (rule "add_literals" (formula "26") (term "0,0,0,1,0,0,0,1,0"))
                              (rule "add_zero_left" (formula "26") (term "0,0,1,0,0,0,1,0"))
                              (rule "inEqSimp_sepPosMonomial1" (formula "26") (term "1,0,0,0,1,0"))
                              (rule "polySimp_mulLiterals" (formula "26") (term "1,1,0,0,0,1,0"))
                              (rule "polySimp_elimOne" (formula "26") (term "1,1,0,0,0,1,0"))
                              (rule "inEqSimp_notGeq" (formula "26") (term "0,0,0,0,1,0"))
                              (rule "mul_literals" (formula "26") (term "1,0,0,0,0,0,0,1,0"))
                              (rule "add_zero_right" (formula "26") (term "0,0,0,0,0,0,1,0"))
                              (rule "inEqSimp_sepPosMonomial0" (formula "26") (term "0,0,0,0,1,0"))
                              (rule "mul_literals" (formula "26") (term "1,0,0,0,0,1,0"))
                              (rule "nnf_notAnd" (formula "26") (term "1,0,0,1,0"))
                              (rule "inEqSimp_notLeq" (formula "26") (term "0,1,0,0,1,0"))
                              (rule "mul_literals" (formula "26") (term "1,0,0,0,1,0,0,1,0"))
                              (rule "add_literals" (formula "26") (term "0,0,0,1,0,0,1,0"))
                              (rule "inEqSimp_sepPosMonomial1" (formula "26") (term "0,1,0,0,1,0"))
                              (rule "mul_literals" (formula "26") (term "1,0,1,0,0,1,0"))
                              (rule "inEqSimp_notGeq" (formula "26") (term "1,1,0,0,1,0"))
                              (rule "mul_literals" (formula "26") (term "1,0,0,1,1,0,0,1,0"))
                              (rule "add_literals" (formula "26") (term "0,0,1,1,0,0,1,0"))
                              (rule "inEqSimp_sepPosMonomial0" (formula "26") (term "1,1,0,0,1,0"))
                              (rule "mul_literals" (formula "26") (term "1,1,1,0,0,1,0"))
                              (rule "commute_or_2" (formula "8") (term "0"))
                              (rule "commute_or" (formula "7") (term "0,0"))
                              (rule "commute_or_2" (formula "10") (term "0"))
                              (rule "commute_or_2" (formula "11") (term "0"))
                              (rule "commute_and" (formula "7") (term "0,0,1,0"))
                              (rule "commute_or" (formula "8") (term "0,0"))
                              (rule "commute_or_2" (formula "8") (term "0"))
                              (rule "commute_or_2" (formula "10") (term "0,0"))
                              (rule "commute_or_2" (formula "11") (term "0,0"))
                              (rule "ifthenelse_split" (formula "16") (term "0"))
                              (branch "self.cols.<created> = TRUE TRUE"
                                 (rule "eqSymm" (formula "17"))
                                 (rule "commute_or" (formula "10") (term "0,0,0"))
                                 (rule "commute_or_2" (formula "10") (term "0,0"))
                                 (rule "commute_or_2" (formula "10") (term "0"))
                                 (rule "commute_or" (formula "11") (term "0,0,0"))
                                 (rule "commute_or_2" (formula "11") (term "0,0"))
                                 (rule "commute_or_2" (formula "11") (term "0"))
                                 (rule "commute_and_2" (formula "7") (term "0,1,0"))
                                 (rule "lenNonNegative" (formula "9") (term "0"))
                                 (rule "inEqSimp_commuteLeq" (formula "9"))
                                 (rule "applyEq" (formula "9") (term "0") (ifseqformula "10"))
                                 (rule "lenNonNegative" (formula "10") (term "1"))
                                 (rule "inEqSimp_commuteLeq" (formula "10"))
                                 (rule "ifthenelse_split" (formula "1") (term "0"))
                                 (branch "self.record.<created> = TRUE TRUE"
                                    (rule "applyEqReverse" (formula "29") (term "0,1,1,0,0,0,1") (ifseqformula "2"))
                                    (rule "applyEqReverse" (formula "29") (term "0,0,0,0") (ifseqformula "2"))
                                    (rule "applyEqReverse" (formula "29") (term "0,0,0,1,0,1") (ifseqformula "2"))
                                    (rule "hideAuxiliaryEq" (formula "2"))
                                    (rule "replace_known_left" (formula "2") (term "0,0") (ifseqformula "1"))
                                     (builtin "One Step Simplification" (formula "2"))
                                    (rule "applyEqReverse" (formula "28") (term "0,0,0,1,0,1,0") (ifseqformula "2"))
                                    (rule "applyEqReverse" (formula "28") (term "0,1,0,0") (ifseqformula "2"))
                                    (rule "applyEqReverse" (formula "28") (term "0,1,1,0,0,0,1,0") (ifseqformula "2"))
                                    (rule "hideAuxiliaryEq" (formula "2"))
                                    (rule "replace_known_left" (formula "27") (term "0,0") (ifseqformula "9"))
                                     (builtin "One Step Simplification" (formula "27"))
                                    (rule "applyEq" (formula "27") (term "1,1,0,0,0,1") (ifseqformula "9"))
                                    (rule "andRight" (formula "27"))
                                    (branch
                                       (rule "allRight" (formula "27") (inst "sk=i_0_0"))
                                       (rule "orRight" (formula "27"))
                                       (rule "orRight" (formula "27"))
                                       (rule "notRight" (formula "29"))
                                       (rule "orRight" (formula "28"))
                                       (rule "orRight" (formula "30"))
                                       (rule "inEqSimp_geqRight" (formula "29"))
                                       (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
                                       (rule "polySimp_addComm1" (formula "1") (term "0"))
                                       (rule "inEqSimp_leqRight" (formula "29"))
                                       (rule "mul_literals" (formula "1") (term "1,0,0"))
                                       (rule "add_literals" (formula "1") (term "0,0"))
                                       (rule "add_zero_left" (formula "1") (term "0"))
                                       (rule "inEqSimp_geqRight" (formula "30"))
                                       (rule "mul_literals" (formula "1") (term "1,0,0"))
                                       (rule "add_literals" (formula "1") (term "0,0"))
                                       (rule "inEqSimp_leqRight" (formula "31"))
                                       (rule "mul_literals" (formula "1") (term "1,0,0"))
                                       (rule "add_literals" (formula "1") (term "0,0"))
                                       (rule "inEqSimp_sepNegMonomial0" (formula "4"))
                                       (rule "polySimp_mulLiterals" (formula "4") (term "0"))
                                       (rule "polySimp_elimOne" (formula "4") (term "0"))
                                       (rule "inEqSimp_sepPosMonomial0" (formula "2"))
                                       (rule "mul_literals" (formula "2") (term "1"))
                                       (rule "inEqSimp_sepPosMonomial1" (formula "1"))
                                       (rule "mul_literals" (formula "1") (term "1"))
                                       (rule "inEqSimp_subsumption1" (formula "1") (ifseqformula "3"))
                                       (rule "leq_literals" (formula "1") (term "0"))
                                        (builtin "One Step Simplification" (formula "1"))
                                       (rule "true_left" (formula "1"))
                                       (rule "ex_pull_out3" (formula "10") (term "0"))
                                       (rule "cnf_rightDist" (formula "10") (term "0,0"))
                                       (rule "shift_paren_or" (formula "10") (term "1,0,0"))
                                       (rule "cnf_rightDist" (formula "10") (term "0,0,0"))
                                       (rule "commute_or_2" (formula "10") (term "0,0,0,0"))
                                       (rule "shift_paren_or" (formula "10") (term "1,0,0,0"))
                                       (rule "commute_or" (formula "10") (term "0,0,0,0,0"))
                                       (rule "allLeft" (formula "14") (inst "t=i_0_0"))
                                       (rule "replace_known_left" (formula "14") (term "0,0,0,0") (ifseqformula "4"))
                                        (builtin "One Step Simplification" (formula "14"))
                                       (rule "inEqSimp_commuteGeq" (formula "14") (term "1"))
                                       (rule "inEqSimp_contradInEq1" (formula "14") (term "0,0") (ifseqformula "2"))
                                       (rule "qeq_literals" (formula "14") (term "0,0,0"))
                                        (builtin "One Step Simplification" (formula "14"))
                                       (rule "inEqSimp_contradInEq0" (formula "14") (term "0") (ifseqformula "1"))
                                       (rule "qeq_literals" (formula "14") (term "0,0"))
                                        (builtin "One Step Simplification" (formula "14"))
                                       (rule "inEqSimp_contradInEq0" (formula "3") (ifseqformula "14"))
                                       (rule "andLeft" (formula "3"))
                                       (rule "inEqSimp_homoInEq1" (formula "3"))
                                       (rule "polySimp_pullOutFactor1b" (formula "3") (term "0"))
                                       (rule "add_literals" (formula "3") (term "1,1,0"))
                                       (rule "times_zero_1" (formula "3") (term "1,0"))
                                       (rule "add_zero_right" (formula "3") (term "0"))
                                       (rule "leq_literals" (formula "3"))
                                       (rule "closeFalse" (formula "3"))
                                    )
                                    (branch
                                       (rule "allRight" (formula "27") (inst "sk=i_0"))
                                       (rule "orRight" (formula "27"))
                                       (rule "orRight" (formula "27"))
                                       (rule "notRight" (formula "29"))
                                       (rule "orRight" (formula "28"))
                                       (rule "orRight" (formula "30"))
                                       (rule "inEqSimp_geqRight" (formula "29"))
                                       (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
                                       (rule "polySimp_addComm1" (formula "1") (term "0"))
                                       (rule "inEqSimp_leqRight" (formula "29"))
                                       (rule "mul_literals" (formula "1") (term "1,0,0"))
                                       (rule "add_literals" (formula "1") (term "0,0"))
                                       (rule "add_zero_left" (formula "1") (term "0"))
                                       (rule "inEqSimp_geqRight" (formula "30"))
                                       (rule "mul_literals" (formula "1") (term "1,0,0"))
                                       (rule "add_literals" (formula "1") (term "0,0"))
                                       (rule "inEqSimp_leqRight" (formula "31"))
                                       (rule "mul_literals" (formula "1") (term "1,0,0"))
                                       (rule "add_literals" (formula "1") (term "0,0"))
                                       (rule "inEqSimp_sepNegMonomial0" (formula "4"))
                                       (rule "polySimp_mulLiterals" (formula "4") (term "0"))
                                       (rule "polySimp_elimOne" (formula "4") (term "0"))
                                       (rule "inEqSimp_sepPosMonomial0" (formula "2"))
                                       (rule "mul_literals" (formula "2") (term "1"))
                                       (rule "inEqSimp_sepPosMonomial1" (formula "1"))
                                       (rule "mul_literals" (formula "1") (term "1"))
                                       (rule "inEqSimp_subsumption1" (formula "1") (ifseqformula "3"))
                                       (rule "leq_literals" (formula "1") (term "0"))
                                        (builtin "One Step Simplification" (formula "1"))
                                       (rule "true_left" (formula "1"))
                                       (rule "ex_pull_out3" (formula "10") (term "0"))
                                       (rule "cnf_rightDist" (formula "10") (term "0,0"))
                                       (rule "shift_paren_or" (formula "10") (term "1,0,0"))
                                       (rule "cnf_rightDist" (formula "10") (term "0,0,0"))
                                       (rule "commute_or_2" (formula "10") (term "0,0,0,0"))
                                       (rule "shift_paren_or" (formula "10") (term "1,0,0,0"))
                                       (rule "commute_or" (formula "10") (term "0,0,0,0,0"))
                                       (rule "allLeft" (formula "15") (inst "t=i_0"))
                                       (rule "replace_known_left" (formula "15") (term "0,0,0,0") (ifseqformula "4"))
                                        (builtin "One Step Simplification" (formula "15"))
                                       (rule "inEqSimp_commuteGeq" (formula "15") (term "1"))
                                       (rule "inEqSimp_contradInEq0" (formula "15") (term "1,0") (ifseqformula "1"))
                                       (rule "qeq_literals" (formula "15") (term "0,1,0"))
                                        (builtin "One Step Simplification" (formula "15"))
                                       (rule "inEqSimp_contradInEq1" (formula "15") (term "1") (ifseqformula "3"))
                                       (rule "inEqSimp_homoInEq1" (formula "15") (term "0,1"))
                                       (rule "polySimp_pullOutFactor1b" (formula "15") (term "0,0,1"))
                                       (rule "add_literals" (formula "15") (term "1,1,0,0,1"))
                                       (rule "times_zero_1" (formula "15") (term "1,0,0,1"))
                                       (rule "add_zero_right" (formula "15") (term "0,0,1"))
                                       (rule "leq_literals" (formula "15") (term "0,1"))
                                        (builtin "One Step Simplification" (formula "15"))
                                       (rule "inEqSimp_subsumption0" (formula "1") (ifseqformula "15"))
                                       (rule "leq_literals" (formula "1") (term "0"))
                                        (builtin "One Step Simplification" (formula "1"))
                                       (rule "true_left" (formula "1"))
                                       (rule "inEqSimp_contradInEq0" (formula "1") (ifseqformula "14"))
                                       (rule "qeq_literals" (formula "1") (term "0"))
                                        (builtin "One Step Simplification" (formula "1"))
                                       (rule "closeFalse" (formula "1"))
                                    )
                                 )
                                 (branch "self.record.<created> = TRUE FALSE"
                                    (rule "referencedObjectIsCreatedRight" (formula "21") (ifseqformula "24"))
                                    (rule "close" (formula "21") (ifseqformula "3"))
                                 )
                              )
                              (branch "self.cols.<created> = TRUE FALSE"
                                 (rule "referencedObjectIsCreatedRight" (formula "19") (ifseqformula "24"))
                                 (rule "close" (formula "19") (ifseqformula "3"))
                              )
                           )
                        )
                        (branch
                            (builtin "One Step Simplification" (formula "24"))
                           (rule "inEqSimp_ltToLeq" (formula "5") (term "0,0,0,1,0"))
                           (rule "polySimp_mulComm0" (formula "5") (term "1,0,0,0,0,0,1,0"))
                           (rule "inEqSimp_ltToLeq" (formula "8") (term "0,0,0,0,0"))
                           (rule "polySimp_mulComm0" (formula "8") (term "1,0,0,0,0,0,0,0"))
                           (rule "inEqSimp_ltToLeq" (formula "9") (term "0,0,0,0,0"))
                           (rule "polySimp_mulComm0" (formula "9") (term "1,0,0,0,0,0,0,0"))
                           (rule "inEqSimp_ltToLeq" (formula "5") (term "0,0,0"))
                           (rule "polySimp_mulComm0" (formula "5") (term "1,0,0,0,0,0"))
                           (rule "inEqSimp_ltToLeq" (formula "6") (term "0,0,0"))
                           (rule "polySimp_mulComm0" (formula "6") (term "1,0,0,0,0,0"))
                           (rule "inEqSimp_sepPosMonomial0" (formula "5") (term "0,0,0,1,0"))
                           (rule "polySimp_mulComm0" (formula "5") (term "1,0,0,0,1,0"))
                           (rule "polySimp_rightDist" (formula "5") (term "1,0,0,0,1,0"))
                           (rule "polySimp_mulLiterals" (formula "5") (term "1,1,0,0,0,1,0"))
                           (rule "mul_literals" (formula "5") (term "0,1,0,0,0,1,0"))
                           (rule "polySimp_elimOne" (formula "5") (term "1,1,0,0,0,1,0"))
                           (rule "inEqSimp_sepPosMonomial0" (formula "8") (term "0,0,0,0,0"))
                           (rule "polySimp_mulComm0" (formula "8") (term "1,0,0,0,0,0"))
                           (rule "polySimp_rightDist" (formula "8") (term "1,0,0,0,0,0"))
                           (rule "mul_literals" (formula "8") (term "0,1,0,0,0,0,0"))
                           (rule "polySimp_mulLiterals" (formula "8") (term "1,1,0,0,0,0,0"))
                           (rule "polySimp_elimOne" (formula "8") (term "1,1,0,0,0,0,0"))
                           (rule "inEqSimp_sepPosMonomial0" (formula "9") (term "0,0,0,0,0"))
                           (rule "polySimp_mulComm0" (formula "9") (term "1,0,0,0,0,0"))
                           (rule "polySimp_rightDist" (formula "9") (term "1,0,0,0,0,0"))
                           (rule "mul_literals" (formula "9") (term "0,1,0,0,0,0,0"))
                           (rule "polySimp_mulLiterals" (formula "9") (term "1,1,0,0,0,0,0"))
                           (rule "polySimp_elimOne" (formula "9") (term "1,1,0,0,0,0,0"))
                           (rule "inEqSimp_sepPosMonomial0" (formula "5") (term "0,0,0"))
                           (rule "polySimp_mulComm0" (formula "5") (term "1,0,0,0"))
                           (rule "polySimp_rightDist" (formula "5") (term "1,0,0,0"))
                           (rule "mul_literals" (formula "5") (term "0,1,0,0,0"))
                           (rule "polySimp_mulLiterals" (formula "5") (term "1,1,0,0,0"))
                           (rule "polySimp_elimOne" (formula "5") (term "1,1,0,0,0"))
                           (rule "inEqSimp_sepPosMonomial0" (formula "6") (term "0,0,0"))
                           (rule "polySimp_mulComm0" (formula "6") (term "1,0,0,0"))
                           (rule "polySimp_rightDist" (formula "6") (term "1,0,0,0"))
                           (rule "polySimp_mulLiterals" (formula "6") (term "1,1,0,0,0"))
                           (rule "mul_literals" (formula "6") (term "0,1,0,0,0"))
                           (rule "polySimp_elimOne" (formula "6") (term "1,1,0,0,0"))
                           (rule "pullOutSelect" (formula "24") (term "1") (inst "selectSK=de_polyas_core3_open_cred_CredTool_vals_0"))
                           (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "12"))
                            (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "23")) (ifInst ""  (formula "3")))
                           (rule "applyEqReverse" (formula "25") (term "1") (ifseqformula "1"))
                           (rule "hideAuxiliaryEq" (formula "1"))
                           (rule "inEqSimp_and_subsumption3" (formula "8") (term "0,0,0"))
                           (rule "leq_literals" (formula "8") (term "0,1,0,0,0,0"))
                            (builtin "One Step Simplification" (formula "8"))
                           (rule "inEqSimp_and_subsumption3" (formula "9") (term "0,0,0"))
                           (rule "leq_literals" (formula "9") (term "0,1,0,0,0,0"))
                            (builtin "One Step Simplification" (formula "9"))
                           (rule "nnf_imp2or" (formula "5") (term "0"))
                           (rule "nnf_imp2or" (formula "6") (term "0"))
                           (rule "nnf_imp2or" (formula "8") (term "0"))
                           (rule "nnf_imp2or" (formula "9") (term "0"))
                           (rule "nnf_notAnd" (formula "5") (term "0,0"))
                           (rule "inEqSimp_notGeq" (formula "5") (term "1,0,0"))
                           (rule "mul_literals" (formula "5") (term "1,0,0,1,0,0"))
                           (rule "add_zero_right" (formula "5") (term "0,0,1,0,0"))
                           (rule "inEqSimp_sepPosMonomial0" (formula "5") (term "1,0,0"))
                           (rule "mul_literals" (formula "5") (term "1,1,0,0"))
                           (rule "inEqSimp_notLeq" (formula "5") (term "0,0,0"))
                           (rule "polySimp_rightDist" (formula "5") (term "1,0,0,0,0,0"))
                           (rule "mul_literals" (formula "5") (term "0,1,0,0,0,0,0"))
                           (rule "polySimp_addAssoc" (formula "5") (term "0,0,0,0,0"))
                           (rule "add_literals" (formula "5") (term "0,0,0,0,0,0"))
                           (rule "add_zero_left" (formula "5") (term "0,0,0,0,0"))
                           (rule "inEqSimp_sepPosMonomial1" (formula "5") (term "0,0,0"))
                           (rule "polySimp_mulLiterals" (formula "5") (term "1,0,0,0"))
                           (rule "polySimp_elimOne" (formula "5") (term "1,0,0,0"))
                           (rule "nnf_notAnd" (formula "6") (term "0,0"))
                           (rule "inEqSimp_notGeq" (formula "6") (term "1,0,0"))
                           (rule "mul_literals" (formula "6") (term "1,0,0,1,0,0"))
                           (rule "add_literals" (formula "6") (term "0,0,1,0,0"))
                           (rule "inEqSimp_sepPosMonomial0" (formula "6") (term "1,0,0"))
                           (rule "mul_literals" (formula "6") (term "1,1,0,0"))
                           (rule "inEqSimp_notLeq" (formula "6") (term "0,0,0"))
                           (rule "polySimp_rightDist" (formula "6") (term "1,0,0,0,0,0"))
                           (rule "mul_literals" (formula "6") (term "0,1,0,0,0,0,0"))
                           (rule "polySimp_addAssoc" (formula "6") (term "0,0,0,0,0"))
                           (rule "add_literals" (formula "6") (term "0,0,0,0,0,0"))
                           (rule "add_zero_left" (formula "6") (term "0,0,0,0,0"))
                           (rule "inEqSimp_sepPosMonomial1" (formula "6") (term "0,0,0"))
                           (rule "polySimp_mulLiterals" (formula "6") (term "1,0,0,0"))
                           (rule "polySimp_elimOne" (formula "6") (term "1,0,0,0"))
                           (rule "nnf_notAnd" (formula "8") (term "0,0"))
                           (rule "inEqSimp_notLeq" (formula "8") (term "1,0,0"))
                           (rule "mul_literals" (formula "8") (term "1,0,0,1,0,0"))
                           (rule "add_literals" (formula "8") (term "0,0,1,0,0"))
                           (rule "inEqSimp_sepPosMonomial1" (formula "8") (term "1,0,0"))
                           (rule "mul_literals" (formula "8") (term "1,1,0,0"))
                           (rule "nnf_notAnd" (formula "9") (term "0,0"))
                           (rule "inEqSimp_notLeq" (formula "9") (term "1,0,0"))
                           (rule "mul_literals" (formula "9") (term "1,0,0,1,0,0"))
                           (rule "add_literals" (formula "9") (term "0,0,1,0,0"))
                           (rule "inEqSimp_sepPosMonomial1" (formula "9") (term "1,0,0"))
                           (rule "mul_literals" (formula "9") (term "1,1,0,0"))
                           (rule "nnf_notAnd" (formula "8") (term "0,0,0"))
                           (rule "inEqSimp_notLeq" (formula "8") (term "0,0,0,0"))
                           (rule "polySimp_rightDist" (formula "8") (term "1,0,0,0,0,0,0"))
                           (rule "mul_literals" (formula "8") (term "0,1,0,0,0,0,0,0"))
                           (rule "polySimp_addAssoc" (formula "8") (term "0,0,0,0,0,0"))
                           (rule "add_literals" (formula "8") (term "0,0,0,0,0,0,0"))
                           (rule "add_zero_left" (formula "8") (term "0,0,0,0,0,0"))
                           (rule "inEqSimp_sepPosMonomial1" (formula "8") (term "0,0,0,0"))
                           (rule "polySimp_mulLiterals" (formula "8") (term "1,0,0,0,0"))
                           (rule "polySimp_elimOne" (formula "8") (term "1,0,0,0,0"))
                           (rule "inEqSimp_notGeq" (formula "8") (term "1,0,0,0"))
                           (rule "times_zero_1" (formula "8") (term "1,0,0,1,0,0,0"))
                           (rule "add_literals" (formula "8") (term "0,0,1,0,0,0"))
                           (rule "inEqSimp_sepPosMonomial0" (formula "8") (term "1,0,0,0"))
                           (rule "mul_literals" (formula "8") (term "1,1,0,0,0"))
                           (rule "nnf_notAnd" (formula "9") (term "0,0,0"))
                           (rule "inEqSimp_notGeq" (formula "9") (term "1,0,0,0"))
                           (rule "mul_literals" (formula "9") (term "1,0,0,1,0,0,0"))
                           (rule "add_literals" (formula "9") (term "0,0,1,0,0,0"))
                           (rule "inEqSimp_sepPosMonomial0" (formula "9") (term "1,0,0,0"))
                           (rule "mul_literals" (formula "9") (term "1,1,0,0,0"))
                           (rule "inEqSimp_notLeq" (formula "9") (term "0,0,0,0"))
                           (rule "polySimp_rightDist" (formula "9") (term "1,0,0,0,0,0,0"))
                           (rule "mul_literals" (formula "9") (term "0,1,0,0,0,0,0,0"))
                           (rule "polySimp_addAssoc" (formula "9") (term "0,0,0,0,0,0"))
                           (rule "add_literals" (formula "9") (term "0,0,0,0,0,0,0"))
                           (rule "add_zero_left" (formula "9") (term "0,0,0,0,0,0"))
                           (rule "inEqSimp_sepPosMonomial1" (formula "9") (term "0,0,0,0"))
                           (rule "polySimp_mulLiterals" (formula "9") (term "1,0,0,0,0"))
                           (rule "polySimp_elimOne" (formula "9") (term "1,0,0,0,0"))
                           (rule "Class_invariant_axiom_for_java_util_ArrayList" (formula "24"))
                           (rule "closeTrue" (formula "24"))
                        )
                     )
                     (branch
                         (builtin "One Step Simplification" (formula "24"))
                        (rule "inEqSimp_ltToLeq" (formula "5") (term "0,0,0,1,0"))
                        (rule "polySimp_mulComm0" (formula "5") (term "1,0,0,0,0,0,1,0"))
                        (rule "inEqSimp_ltToLeq" (formula "8") (term "0,0,0,0,0"))
                        (rule "polySimp_mulComm0" (formula "8") (term "1,0,0,0,0,0,0,0"))
                        (rule "inEqSimp_ltToLeq" (formula "9") (term "0,0,0,0,0"))
                        (rule "polySimp_mulComm0" (formula "9") (term "1,0,0,0,0,0,0,0"))
                        (rule "inEqSimp_ltToLeq" (formula "5") (term "0,0,0"))
                        (rule "polySimp_mulComm0" (formula "5") (term "1,0,0,0,0,0"))
                        (rule "inEqSimp_ltToLeq" (formula "6") (term "0,0,0"))
                        (rule "polySimp_mulComm0" (formula "6") (term "1,0,0,0,0,0"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "5") (term "0,0,0,1,0"))
                        (rule "polySimp_mulComm0" (formula "5") (term "1,0,0,0,1,0"))
                        (rule "polySimp_rightDist" (formula "5") (term "1,0,0,0,1,0"))
                        (rule "polySimp_mulLiterals" (formula "5") (term "1,1,0,0,0,1,0"))
                        (rule "mul_literals" (formula "5") (term "0,1,0,0,0,1,0"))
                        (rule "polySimp_elimOne" (formula "5") (term "1,1,0,0,0,1,0"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "8") (term "0,0,0,0,0"))
                        (rule "polySimp_mulComm0" (formula "8") (term "1,0,0,0,0,0"))
                        (rule "polySimp_rightDist" (formula "8") (term "1,0,0,0,0,0"))
                        (rule "mul_literals" (formula "8") (term "0,1,0,0,0,0,0"))
                        (rule "polySimp_mulLiterals" (formula "8") (term "1,1,0,0,0,0,0"))
                        (rule "polySimp_elimOne" (formula "8") (term "1,1,0,0,0,0,0"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "9") (term "0,0,0,0,0"))
                        (rule "polySimp_mulComm0" (formula "9") (term "1,0,0,0,0,0"))
                        (rule "polySimp_rightDist" (formula "9") (term "1,0,0,0,0,0"))
                        (rule "mul_literals" (formula "9") (term "0,1,0,0,0,0,0"))
                        (rule "polySimp_mulLiterals" (formula "9") (term "1,1,0,0,0,0,0"))
                        (rule "polySimp_elimOne" (formula "9") (term "1,1,0,0,0,0,0"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "5") (term "0,0,0"))
                        (rule "polySimp_mulComm0" (formula "5") (term "1,0,0,0"))
                        (rule "polySimp_rightDist" (formula "5") (term "1,0,0,0"))
                        (rule "mul_literals" (formula "5") (term "0,1,0,0,0"))
                        (rule "polySimp_mulLiterals" (formula "5") (term "1,1,0,0,0"))
                        (rule "polySimp_elimOne" (formula "5") (term "1,1,0,0,0"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "6") (term "0,0,0"))
                        (rule "polySimp_mulComm0" (formula "6") (term "1,0,0,0"))
                        (rule "polySimp_rightDist" (formula "6") (term "1,0,0,0"))
                        (rule "polySimp_mulLiterals" (formula "6") (term "1,1,0,0,0"))
                        (rule "mul_literals" (formula "6") (term "0,1,0,0,0"))
                        (rule "polySimp_elimOne" (formula "6") (term "1,1,0,0,0"))
                        (rule "pullOutSelect" (formula "24") (term "1") (inst "selectSK=de_polyas_core3_open_cred_CredTool_cols_0"))
                        (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "12"))
                         (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "23")) (ifInst ""  (formula "3")))
                        (rule "applyEqReverse" (formula "25") (term "1") (ifseqformula "1"))
                        (rule "hideAuxiliaryEq" (formula "1"))
                        (rule "inEqSimp_and_subsumption3" (formula "8") (term "0,0,0"))
                        (rule "leq_literals" (formula "8") (term "0,1,0,0,0,0"))
                         (builtin "One Step Simplification" (formula "8"))
                        (rule "inEqSimp_and_subsumption3" (formula "9") (term "0,0,0"))
                        (rule "leq_literals" (formula "9") (term "0,1,0,0,0,0"))
                         (builtin "One Step Simplification" (formula "9"))
                        (rule "nnf_imp2or" (formula "5") (term "0"))
                        (rule "nnf_imp2or" (formula "6") (term "0"))
                        (rule "nnf_imp2or" (formula "8") (term "0"))
                        (rule "nnf_imp2or" (formula "9") (term "0"))
                        (rule "nnf_notAnd" (formula "5") (term "0,0"))
                        (rule "inEqSimp_notGeq" (formula "5") (term "1,0,0"))
                        (rule "mul_literals" (formula "5") (term "1,0,0,1,0,0"))
                        (rule "add_zero_right" (formula "5") (term "0,0,1,0,0"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "5") (term "1,0,0"))
                        (rule "mul_literals" (formula "5") (term "1,1,0,0"))
                        (rule "inEqSimp_notLeq" (formula "5") (term "0,0,0"))
                        (rule "polySimp_rightDist" (formula "5") (term "1,0,0,0,0,0"))
                        (rule "mul_literals" (formula "5") (term "0,1,0,0,0,0,0"))
                        (rule "polySimp_addAssoc" (formula "5") (term "0,0,0,0,0"))
                        (rule "add_literals" (formula "5") (term "0,0,0,0,0,0"))
                        (rule "add_zero_left" (formula "5") (term "0,0,0,0,0"))
                        (rule "inEqSimp_sepPosMonomial1" (formula "5") (term "0,0,0"))
                        (rule "polySimp_mulLiterals" (formula "5") (term "1,0,0,0"))
                        (rule "polySimp_elimOne" (formula "5") (term "1,0,0,0"))
                        (rule "nnf_notAnd" (formula "6") (term "0,0"))
                        (rule "inEqSimp_notGeq" (formula "6") (term "1,0,0"))
                        (rule "mul_literals" (formula "6") (term "1,0,0,1,0,0"))
                        (rule "add_literals" (formula "6") (term "0,0,1,0,0"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "6") (term "1,0,0"))
                        (rule "mul_literals" (formula "6") (term "1,1,0,0"))
                        (rule "inEqSimp_notLeq" (formula "6") (term "0,0,0"))
                        (rule "polySimp_rightDist" (formula "6") (term "1,0,0,0,0,0"))
                        (rule "mul_literals" (formula "6") (term "0,1,0,0,0,0,0"))
                        (rule "polySimp_addAssoc" (formula "6") (term "0,0,0,0,0"))
                        (rule "add_literals" (formula "6") (term "0,0,0,0,0,0"))
                        (rule "add_zero_left" (formula "6") (term "0,0,0,0,0"))
                        (rule "inEqSimp_sepPosMonomial1" (formula "6") (term "0,0,0"))
                        (rule "polySimp_mulLiterals" (formula "6") (term "1,0,0,0"))
                        (rule "polySimp_elimOne" (formula "6") (term "1,0,0,0"))
                        (rule "nnf_notAnd" (formula "8") (term "0,0"))
                        (rule "inEqSimp_notLeq" (formula "8") (term "1,0,0"))
                        (rule "mul_literals" (formula "8") (term "1,0,0,1,0,0"))
                        (rule "add_literals" (formula "8") (term "0,0,1,0,0"))
                        (rule "inEqSimp_sepPosMonomial1" (formula "8") (term "1,0,0"))
                        (rule "mul_literals" (formula "8") (term "1,1,0,0"))
                        (rule "nnf_notAnd" (formula "9") (term "0,0"))
                        (rule "inEqSimp_notLeq" (formula "9") (term "1,0,0"))
                        (rule "mul_literals" (formula "9") (term "1,0,0,1,0,0"))
                        (rule "add_literals" (formula "9") (term "0,0,1,0,0"))
                        (rule "inEqSimp_sepPosMonomial1" (formula "9") (term "1,0,0"))
                        (rule "mul_literals" (formula "9") (term "1,1,0,0"))
                        (rule "nnf_notAnd" (formula "8") (term "0,0,0"))
                        (rule "inEqSimp_notLeq" (formula "8") (term "0,0,0,0"))
                        (rule "polySimp_rightDist" (formula "8") (term "1,0,0,0,0,0,0"))
                        (rule "mul_literals" (formula "8") (term "0,1,0,0,0,0,0,0"))
                        (rule "polySimp_addAssoc" (formula "8") (term "0,0,0,0,0,0"))
                        (rule "add_literals" (formula "8") (term "0,0,0,0,0,0,0"))
                        (rule "add_zero_left" (formula "8") (term "0,0,0,0,0,0"))
                        (rule "inEqSimp_sepPosMonomial1" (formula "8") (term "0,0,0,0"))
                        (rule "polySimp_mulLiterals" (formula "8") (term "1,0,0,0,0"))
                        (rule "polySimp_elimOne" (formula "8") (term "1,0,0,0,0"))
                        (rule "inEqSimp_notGeq" (formula "8") (term "1,0,0,0"))
                        (rule "times_zero_1" (formula "8") (term "1,0,0,1,0,0,0"))
                        (rule "add_literals" (formula "8") (term "0,0,1,0,0,0"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "8") (term "1,0,0,0"))
                        (rule "mul_literals" (formula "8") (term "1,1,0,0,0"))
                        (rule "nnf_notAnd" (formula "9") (term "0,0,0"))
                        (rule "inEqSimp_notGeq" (formula "9") (term "1,0,0,0"))
                        (rule "mul_literals" (formula "9") (term "1,0,0,1,0,0,0"))
                        (rule "add_literals" (formula "9") (term "0,0,1,0,0,0"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "9") (term "1,0,0,0"))
                        (rule "mul_literals" (formula "9") (term "1,1,0,0,0"))
                        (rule "inEqSimp_notLeq" (formula "9") (term "0,0,0,0"))
                        (rule "polySimp_rightDist" (formula "9") (term "1,0,0,0,0,0,0"))
                        (rule "mul_literals" (formula "9") (term "0,1,0,0,0,0,0,0"))
                        (rule "polySimp_addAssoc" (formula "9") (term "0,0,0,0,0,0"))
                        (rule "add_literals" (formula "9") (term "0,0,0,0,0,0,0"))
                        (rule "add_zero_left" (formula "9") (term "0,0,0,0,0,0"))
                        (rule "inEqSimp_sepPosMonomial1" (formula "9") (term "0,0,0,0"))
                        (rule "polySimp_mulLiterals" (formula "9") (term "1,0,0,0,0"))
                        (rule "polySimp_elimOne" (formula "9") (term "1,0,0,0,0"))
                        (rule "Class_invariant_axiom_for_java_util_ArrayList" (formula "24"))
                        (rule "closeTrue" (formula "24"))
                     )
                  )
                  (branch
                      (builtin "One Step Simplification" (formula "24"))
                     (rule "inEqSimp_ltToLeq" (formula "5") (term "0,0,0,1,0"))
                     (rule "polySimp_mulComm0" (formula "5") (term "1,0,0,0,0,0,1,0"))
                     (rule "inEqSimp_ltToLeq" (formula "6") (term "0,0,0"))
                     (rule "polySimp_mulComm0" (formula "6") (term "1,0,0,0,0,0"))
                     (rule "inEqSimp_ltToLeq" (formula "8") (term "0,0,0,0,0"))
                     (rule "polySimp_mulComm0" (formula "8") (term "1,0,0,0,0,0,0,0"))
                     (rule "inEqSimp_ltToLeq" (formula "5") (term "0,0,0"))
                     (rule "polySimp_mulComm0" (formula "5") (term "1,0,0,0,0,0"))
                     (rule "inEqSimp_ltToLeq" (formula "9") (term "0,0,0,0,0"))
                     (rule "polySimp_mulComm0" (formula "9") (term "1,0,0,0,0,0,0,0"))
                     (rule "inEqSimp_sepPosMonomial0" (formula "5") (term "0,0,0,1,0"))
                     (rule "polySimp_mulComm0" (formula "5") (term "1,0,0,0,1,0"))
                     (rule "polySimp_rightDist" (formula "5") (term "1,0,0,0,1,0"))
                     (rule "mul_literals" (formula "5") (term "0,1,0,0,0,1,0"))
                     (rule "polySimp_mulLiterals" (formula "5") (term "1,1,0,0,0,1,0"))
                     (rule "polySimp_elimOne" (formula "5") (term "1,1,0,0,0,1,0"))
                     (rule "inEqSimp_sepPosMonomial0" (formula "6") (term "0,0,0"))
                     (rule "polySimp_mulComm0" (formula "6") (term "1,0,0,0"))
                     (rule "polySimp_rightDist" (formula "6") (term "1,0,0,0"))
                     (rule "mul_literals" (formula "6") (term "0,1,0,0,0"))
                     (rule "polySimp_mulLiterals" (formula "6") (term "1,1,0,0,0"))
                     (rule "polySimp_elimOne" (formula "6") (term "1,1,0,0,0"))
                     (rule "inEqSimp_sepPosMonomial0" (formula "8") (term "0,0,0,0,0"))
                     (rule "polySimp_mulComm0" (formula "8") (term "1,0,0,0,0,0"))
                     (rule "polySimp_rightDist" (formula "8") (term "1,0,0,0,0,0"))
                     (rule "polySimp_mulLiterals" (formula "8") (term "1,1,0,0,0,0,0"))
                     (rule "mul_literals" (formula "8") (term "0,1,0,0,0,0,0"))
                     (rule "polySimp_elimOne" (formula "8") (term "1,1,0,0,0,0,0"))
                     (rule "inEqSimp_sepPosMonomial0" (formula "5") (term "0,0,0"))
                     (rule "polySimp_mulComm0" (formula "5") (term "1,0,0,0"))
                     (rule "polySimp_rightDist" (formula "5") (term "1,0,0,0"))
                     (rule "polySimp_mulLiterals" (formula "5") (term "1,1,0,0,0"))
                     (rule "mul_literals" (formula "5") (term "0,1,0,0,0"))
                     (rule "polySimp_elimOne" (formula "5") (term "1,1,0,0,0"))
                     (rule "inEqSimp_sepPosMonomial0" (formula "9") (term "0,0,0,0,0"))
                     (rule "polySimp_mulComm0" (formula "9") (term "1,0,0,0,0,0"))
                     (rule "polySimp_rightDist" (formula "9") (term "1,0,0,0,0,0"))
                     (rule "mul_literals" (formula "9") (term "0,1,0,0,0,0,0"))
                     (rule "polySimp_mulLiterals" (formula "9") (term "1,1,0,0,0,0,0"))
                     (rule "polySimp_elimOne" (formula "9") (term "1,1,0,0,0,0,0"))
                     (rule "inEqSimp_and_subsumption3" (formula "8") (term "0,0,0"))
                     (rule "leq_literals" (formula "8") (term "0,1,0,0,0,0"))
                      (builtin "One Step Simplification" (formula "8"))
                     (rule "inEqSimp_and_subsumption3" (formula "9") (term "0,0,0"))
                     (rule "leq_literals" (formula "9") (term "0,1,0,0,0,0"))
                      (builtin "One Step Simplification" (formula "9"))
                     (rule "nnf_imp2or" (formula "6") (term "0"))
                     (rule "nnf_imp2or" (formula "5") (term "0"))
                     (rule "nnf_imp2or" (formula "8") (term "0"))
                     (rule "nnf_imp2or" (formula "9") (term "0"))
                     (rule "nnf_notAnd" (formula "6") (term "0,0"))
                     (rule "inEqSimp_notGeq" (formula "6") (term "1,0,0"))
                     (rule "times_zero_1" (formula "6") (term "1,0,0,1,0,0"))
                     (rule "add_zero_right" (formula "6") (term "0,0,1,0,0"))
                     (rule "inEqSimp_sepPosMonomial0" (formula "6") (term "1,0,0"))
                     (rule "mul_literals" (formula "6") (term "1,1,0,0"))
                     (rule "inEqSimp_notLeq" (formula "6") (term "0,0,0"))
                     (rule "polySimp_rightDist" (formula "6") (term "1,0,0,0,0,0"))
                     (rule "mul_literals" (formula "6") (term "0,1,0,0,0,0,0"))
                     (rule "polySimp_addAssoc" (formula "6") (term "0,0,0,0,0"))
                     (rule "add_literals" (formula "6") (term "0,0,0,0,0,0"))
                     (rule "add_zero_left" (formula "6") (term "0,0,0,0,0"))
                     (rule "inEqSimp_sepPosMonomial1" (formula "6") (term "0,0,0"))
                     (rule "polySimp_mulLiterals" (formula "6") (term "1,0,0,0"))
                     (rule "polySimp_elimOne" (formula "6") (term "1,0,0,0"))
                     (rule "nnf_notAnd" (formula "5") (term "0,0"))
                     (rule "inEqSimp_notLeq" (formula "5") (term "0,0,0"))
                     (rule "polySimp_rightDist" (formula "5") (term "1,0,0,0,0,0"))
                     (rule "mul_literals" (formula "5") (term "0,1,0,0,0,0,0"))
                     (rule "polySimp_addAssoc" (formula "5") (term "0,0,0,0,0"))
                     (rule "add_literals" (formula "5") (term "0,0,0,0,0,0"))
                     (rule "add_zero_left" (formula "5") (term "0,0,0,0,0"))
                     (rule "inEqSimp_sepPosMonomial1" (formula "5") (term "0,0,0"))
                     (rule "polySimp_mulLiterals" (formula "5") (term "1,0,0,0"))
                     (rule "polySimp_elimOne" (formula "5") (term "1,0,0,0"))
                     (rule "inEqSimp_notGeq" (formula "5") (term "1,0,0"))
                     (rule "times_zero_1" (formula "5") (term "1,0,0,1,0,0"))
                     (rule "add_literals" (formula "5") (term "0,0,1,0,0"))
                     (rule "inEqSimp_sepPosMonomial0" (formula "5") (term "1,0,0"))
                     (rule "mul_literals" (formula "5") (term "1,1,0,0"))
                     (rule "nnf_notAnd" (formula "8") (term "0,0"))
                     (rule "inEqSimp_notLeq" (formula "8") (term "1,0,0"))
                     (rule "mul_literals" (formula "8") (term "1,0,0,1,0,0"))
                     (rule "add_literals" (formula "8") (term "0,0,1,0,0"))
                     (rule "inEqSimp_sepPosMonomial1" (formula "8") (term "1,0,0"))
                     (rule "mul_literals" (formula "8") (term "1,1,0,0"))
                     (rule "nnf_notAnd" (formula "9") (term "0,0"))
                     (rule "inEqSimp_notLeq" (formula "9") (term "1,0,0"))
                     (rule "mul_literals" (formula "9") (term "1,0,0,1,0,0"))
                     (rule "add_literals" (formula "9") (term "0,0,1,0,0"))
                     (rule "inEqSimp_sepPosMonomial1" (formula "9") (term "1,0,0"))
                     (rule "mul_literals" (formula "9") (term "1,1,0,0"))
                     (rule "nnf_notAnd" (formula "8") (term "0,0,0"))
                     (rule "inEqSimp_notGeq" (formula "8") (term "1,0,0,0"))
                     (rule "mul_literals" (formula "8") (term "1,0,0,1,0,0,0"))
                     (rule "add_literals" (formula "8") (term "0,0,1,0,0,0"))
                     (rule "inEqSimp_sepPosMonomial0" (formula "8") (term "1,0,0,0"))
                     (rule "mul_literals" (formula "8") (term "1,1,0,0,0"))
                     (rule "inEqSimp_notLeq" (formula "8") (term "0,0,0,0"))
                     (rule "polySimp_rightDist" (formula "8") (term "1,0,0,0,0,0,0"))
                     (rule "mul_literals" (formula "8") (term "0,1,0,0,0,0,0,0"))
                     (rule "polySimp_addAssoc" (formula "8") (term "0,0,0,0,0,0"))
                     (rule "add_literals" (formula "8") (term "0,0,0,0,0,0,0"))
                     (rule "add_zero_left" (formula "8") (term "0,0,0,0,0,0"))
                     (rule "inEqSimp_sepPosMonomial1" (formula "8") (term "0,0,0,0"))
                     (rule "polySimp_mulLiterals" (formula "8") (term "1,0,0,0,0"))
                     (rule "polySimp_elimOne" (formula "8") (term "1,0,0,0,0"))
                     (rule "nnf_notAnd" (formula "9") (term "0,0,0"))
                     (rule "inEqSimp_notGeq" (formula "9") (term "1,0,0,0"))
                     (rule "times_zero_1" (formula "9") (term "1,0,0,1,0,0,0"))
                     (rule "add_zero_right" (formula "9") (term "0,0,1,0,0,0"))
                     (rule "inEqSimp_sepPosMonomial0" (formula "9") (term "1,0,0,0"))
                     (rule "mul_literals" (formula "9") (term "1,1,0,0,0"))
                     (rule "inEqSimp_notLeq" (formula "9") (term "0,0,0,0"))
                     (rule "polySimp_rightDist" (formula "9") (term "1,0,0,0,0,0,0"))
                     (rule "mul_literals" (formula "9") (term "0,1,0,0,0,0,0,0"))
                     (rule "polySimp_addAssoc" (formula "9") (term "0,0,0,0,0,0"))
                     (rule "add_literals" (formula "9") (term "0,0,0,0,0,0,0"))
                     (rule "add_zero_left" (formula "9") (term "0,0,0,0,0,0"))
                     (rule "inEqSimp_sepPosMonomial1" (formula "9") (term "0,0,0,0"))
                     (rule "polySimp_mulLiterals" (formula "9") (term "1,0,0,0,0"))
                     (rule "polySimp_elimOne" (formula "9") (term "1,0,0,0,0"))
                     (rule "Class_invariant_axiom_for_java_util_CollectionIterator" (formula "24"))
                     (rule "replaceKnownSelect_taclet0_0" (formula "24") (term "0,1"))
                     (rule "replaceKnownSelect_taclet0_0" (formula "24") (term "1,0"))
                     (rule "replaceKnownAuxiliaryConstant_taclet0_1" (formula "24") (term "0,1"))
                     (rule "replaceKnownAuxiliaryConstant_taclet0_1" (formula "24") (term "1,0"))
                     (rule "replaceKnownSelect_taclet0_3" (formula "24") (term "0,1,1"))
                     (rule "replaceKnownAuxiliaryConstant_taclet0_4" (formula "24") (term "0,1,1"))
                     (rule "inEqSimp_commuteLeq" (formula "24") (term "0"))
                     (rule "inEqSimp_commuteLeq" (formula "24") (term "1"))
                     (rule "applyEq" (formula "24") (term "1,1") (ifseqformula "13"))
                     (rule "applyEq" (formula "24") (term "0,0") (ifseqformula "13"))
                     (rule "qeq_literals" (formula "24") (term "0"))
                      (builtin "One Step Simplification" (formula "24"))
                     (rule "inEqSimp_geqRight" (formula "24"))
                     (rule "times_zero_1" (formula "1") (term "1,0,0"))
                     (rule "add_zero_right" (formula "1") (term "0,0"))
                     (rule "inEqSimp_sepPosMonomial0" (formula "1"))
                     (rule "mul_literals" (formula "1") (term "1"))
                     (rule "commute_or_2" (formula "7") (term "0"))
                     (rule "commute_or" (formula "6") (term "0,0"))
                     (rule "commute_or_2" (formula "9") (term "0"))
                     (rule "commute_or_2" (formula "10") (term "0"))
                     (rule "commute_and" (formula "6") (term "0,0,1,0"))
                     (rule "commute_or" (formula "7") (term "0,0"))
                     (rule "commute_or_2" (formula "7") (term "0"))
                     (rule "commute_or_2" (formula "9") (term "0,0"))
                     (rule "commute_or_2" (formula "10") (term "0,0"))
                     (rule "commute_or" (formula "9") (term "0,0,0"))
                     (rule "commute_or_2" (formula "9") (term "0,0"))
                     (rule "commute_or_2" (formula "9") (term "0"))
                     (rule "commute_or" (formula "10") (term "0,0,0"))
                     (rule "commute_or_2" (formula "10") (term "0,0"))
                     (rule "commute_or_2" (formula "10") (term "0"))
                     (rule "commute_and_2" (formula "6") (term "0,1,0"))
                     (rule "ifthenelse_split" (formula "15") (term "0"))
                     (branch "self.cols.<created> = TRUE TRUE"
                        (rule "eqSymm" (formula "16"))
                        (rule "applyEq" (formula "1") (term "0,0") (ifseqformula "16"))
                        (rule "lenNonNegative" (formula "8") (term "0"))
                        (rule "inEqSimp_commuteLeq" (formula "8"))
                        (rule "applyEq" (formula "8") (term "0") (ifseqformula "9"))
                        (rule "lenNonNegative" (formula "9") (term "1"))
                        (rule "inEqSimp_commuteLeq" (formula "9"))
                        (rule "ex_pull_out3" (formula "6") (term "0"))
                        (rule "cnf_rightDist" (formula "6") (term "0,0"))
                        (rule "shift_paren_or" (formula "6") (term "1,0,0"))
                        (rule "cnf_rightDist" (formula "6") (term "0,0,0"))
                        (rule "commute_or_2" (formula "6") (term "0,0,0,0"))
                        (rule "shift_paren_or" (formula "6") (term "1,0,0,0"))
                        (rule "commute_or" (formula "6") (term "0,0,0,0,0"))
                        (rule "commute_and" (formula "6") (term "0,0,0"))
                        (rule "commute_and_2" (formula "6") (term "0,0"))
                        (rule "lenNonNegative" (formula "7") (term "1,1,0"))
                        (rule "inEqSimp_commuteLeq" (formula "7"))
                        (rule "inEqSimp_contradInEq0" (formula "7") (ifseqformula "1"))
                        (rule "qeq_literals" (formula "7") (term "0"))
                         (builtin "One Step Simplification" (formula "7"))
                        (rule "closeFalse" (formula "7"))
                     )
                     (branch "self.cols.<created> = TRUE FALSE"
                        (rule "referencedObjectIsCreatedRight" (formula "18") (ifseqformula "23"))
                        (rule "close" (formula "18") (ifseqformula "2"))
                     )
                  )
               )
               (branch
                  (rule "andRight" (formula "24"))
                  (branch
                     (rule "andRight" (formula "24"))
                     (branch
                        (rule "andRight" (formula "24"))
                        (branch
                            (builtin "One Step Simplification" (formula "24") (ifInst ""  (formula "18")))
                           (rule "closeTrue" (formula "24"))
                        )
                        (branch
                            (builtin "One Step Simplification" (formula "24"))
                           (rule "notRight" (formula "24"))
                           (rule "inEqSimp_ltToLeq" (formula "7") (term "0,0,0"))
                           (rule "polySimp_mulComm0" (formula "7") (term "1,0,0,0,0,0"))
                           (rule "inEqSimp_ltToLeq" (formula "10") (term "0,0,0,0,0"))
                           (rule "polySimp_mulComm0" (formula "10") (term "1,0,0,0,0,0,0,0"))
                           (rule "inEqSimp_ltToLeq" (formula "6") (term "0,0,0,1,0"))
                           (rule "polySimp_mulComm0" (formula "6") (term "1,0,0,0,0,0,1,0"))
                           (rule "inEqSimp_ltToLeq" (formula "9") (term "0,0,0,0,0"))
                           (rule "polySimp_mulComm0" (formula "9") (term "1,0,0,0,0,0,0,0"))
                           (rule "inEqSimp_ltToLeq" (formula "6") (term "0,0,0"))
                           (rule "polySimp_mulComm0" (formula "6") (term "1,0,0,0,0,0"))
                           (rule "inEqSimp_sepPosMonomial0" (formula "7") (term "0,0,0"))
                           (rule "polySimp_mulComm0" (formula "7") (term "1,0,0,0"))
                           (rule "polySimp_rightDist" (formula "7") (term "1,0,0,0"))
                           (rule "mul_literals" (formula "7") (term "0,1,0,0,0"))
                           (rule "polySimp_mulLiterals" (formula "7") (term "1,1,0,0,0"))
                           (rule "polySimp_elimOne" (formula "7") (term "1,1,0,0,0"))
                           (rule "inEqSimp_sepPosMonomial0" (formula "10") (term "0,0,0,0,0"))
                           (rule "polySimp_mulComm0" (formula "10") (term "1,0,0,0,0,0"))
                           (rule "polySimp_rightDist" (formula "10") (term "1,0,0,0,0,0"))
                           (rule "polySimp_mulLiterals" (formula "10") (term "1,1,0,0,0,0,0"))
                           (rule "mul_literals" (formula "10") (term "0,1,0,0,0,0,0"))
                           (rule "polySimp_elimOne" (formula "10") (term "1,1,0,0,0,0,0"))
                           (rule "inEqSimp_sepPosMonomial0" (formula "6") (term "0,0,0,1,0"))
                           (rule "polySimp_mulComm0" (formula "6") (term "1,0,0,0,1,0"))
                           (rule "polySimp_rightDist" (formula "6") (term "1,0,0,0,1,0"))
                           (rule "polySimp_mulLiterals" (formula "6") (term "1,1,0,0,0,1,0"))
                           (rule "mul_literals" (formula "6") (term "0,1,0,0,0,1,0"))
                           (rule "polySimp_elimOne" (formula "6") (term "1,1,0,0,0,1,0"))
                           (rule "inEqSimp_sepPosMonomial0" (formula "9") (term "0,0,0,0,0"))
                           (rule "polySimp_mulComm0" (formula "9") (term "1,0,0,0,0,0"))
                           (rule "polySimp_rightDist" (formula "9") (term "1,0,0,0,0,0"))
                           (rule "mul_literals" (formula "9") (term "0,1,0,0,0,0,0"))
                           (rule "polySimp_mulLiterals" (formula "9") (term "1,1,0,0,0,0,0"))
                           (rule "polySimp_elimOne" (formula "9") (term "1,1,0,0,0,0,0"))
                           (rule "inEqSimp_sepPosMonomial0" (formula "6") (term "0,0,0"))
                           (rule "polySimp_mulComm0" (formula "6") (term "1,0,0,0"))
                           (rule "polySimp_rightDist" (formula "6") (term "1,0,0,0"))
                           (rule "polySimp_mulLiterals" (formula "6") (term "1,1,0,0,0"))
                           (rule "mul_literals" (formula "6") (term "0,1,0,0,0"))
                           (rule "polySimp_elimOne" (formula "6") (term "1,1,0,0,0"))
                           (rule "pullOutSelect" (formula "1") (term "0") (inst "selectSK=de_polyas_core3_open_cred_CredTool_record_0"))
                           (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "13"))
                            (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "24")) (ifInst ""  (formula "4")))
                           (rule "applyEqReverse" (formula "2") (term "0") (ifseqformula "1"))
                           (rule "close" (formula "21") (ifseqformula "2"))
                        )
                     )
                     (branch
                         (builtin "One Step Simplification" (formula "24"))
                        (rule "notRight" (formula "24"))
                        (rule "inEqSimp_ltToLeq" (formula "7") (term "0,0,0"))
                        (rule "polySimp_mulComm0" (formula "7") (term "1,0,0,0,0,0"))
                        (rule "inEqSimp_ltToLeq" (formula "10") (term "0,0,0,0,0"))
                        (rule "polySimp_mulComm0" (formula "10") (term "1,0,0,0,0,0,0,0"))
                        (rule "inEqSimp_ltToLeq" (formula "6") (term "0,0,0,1,0"))
                        (rule "polySimp_mulComm0" (formula "6") (term "1,0,0,0,0,0,1,0"))
                        (rule "inEqSimp_ltToLeq" (formula "9") (term "0,0,0,0,0"))
                        (rule "polySimp_mulComm0" (formula "9") (term "1,0,0,0,0,0,0,0"))
                        (rule "inEqSimp_ltToLeq" (formula "6") (term "0,0,0"))
                        (rule "polySimp_mulComm0" (formula "6") (term "1,0,0,0,0,0"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "7") (term "0,0,0"))
                        (rule "polySimp_mulComm0" (formula "7") (term "1,0,0,0"))
                        (rule "polySimp_rightDist" (formula "7") (term "1,0,0,0"))
                        (rule "mul_literals" (formula "7") (term "0,1,0,0,0"))
                        (rule "polySimp_mulLiterals" (formula "7") (term "1,1,0,0,0"))
                        (rule "polySimp_elimOne" (formula "7") (term "1,1,0,0,0"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "10") (term "0,0,0,0,0"))
                        (rule "polySimp_mulComm0" (formula "10") (term "1,0,0,0,0,0"))
                        (rule "polySimp_rightDist" (formula "10") (term "1,0,0,0,0,0"))
                        (rule "polySimp_mulLiterals" (formula "10") (term "1,1,0,0,0,0,0"))
                        (rule "mul_literals" (formula "10") (term "0,1,0,0,0,0,0"))
                        (rule "polySimp_elimOne" (formula "10") (term "1,1,0,0,0,0,0"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "6") (term "0,0,0,1,0"))
                        (rule "polySimp_mulComm0" (formula "6") (term "1,0,0,0,1,0"))
                        (rule "polySimp_rightDist" (formula "6") (term "1,0,0,0,1,0"))
                        (rule "polySimp_mulLiterals" (formula "6") (term "1,1,0,0,0,1,0"))
                        (rule "mul_literals" (formula "6") (term "0,1,0,0,0,1,0"))
                        (rule "polySimp_elimOne" (formula "6") (term "1,1,0,0,0,1,0"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "9") (term "0,0,0,0,0"))
                        (rule "polySimp_mulComm0" (formula "9") (term "1,0,0,0,0,0"))
                        (rule "polySimp_rightDist" (formula "9") (term "1,0,0,0,0,0"))
                        (rule "mul_literals" (formula "9") (term "0,1,0,0,0,0,0"))
                        (rule "polySimp_mulLiterals" (formula "9") (term "1,1,0,0,0,0,0"))
                        (rule "polySimp_elimOne" (formula "9") (term "1,1,0,0,0,0,0"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "6") (term "0,0,0"))
                        (rule "polySimp_mulComm0" (formula "6") (term "1,0,0,0"))
                        (rule "polySimp_rightDist" (formula "6") (term "1,0,0,0"))
                        (rule "polySimp_mulLiterals" (formula "6") (term "1,1,0,0,0"))
                        (rule "mul_literals" (formula "6") (term "0,1,0,0,0"))
                        (rule "polySimp_elimOne" (formula "6") (term "1,1,0,0,0"))
                        (rule "pullOutSelect" (formula "1") (term "0") (inst "selectSK=de_polyas_core3_open_cred_CredTool_vals_0"))
                        (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "13"))
                         (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "24")) (ifInst ""  (formula "4")))
                        (rule "applyEqReverse" (formula "2") (term "0") (ifseqformula "1"))
                        (rule "close" (formula "22") (ifseqformula "2"))
                     )
                  )
                  (branch
                      (builtin "One Step Simplification" (formula "24"))
                     (rule "notRight" (formula "24"))
                     (rule "inEqSimp_ltToLeq" (formula "7") (term "0,0,0"))
                     (rule "polySimp_mulComm0" (formula "7") (term "1,0,0,0,0,0"))
                     (rule "inEqSimp_ltToLeq" (formula "10") (term "0,0,0,0,0"))
                     (rule "polySimp_mulComm0" (formula "10") (term "1,0,0,0,0,0,0,0"))
                     (rule "inEqSimp_ltToLeq" (formula "6") (term "0,0,0,1,0"))
                     (rule "polySimp_mulComm0" (formula "6") (term "1,0,0,0,0,0,1,0"))
                     (rule "inEqSimp_ltToLeq" (formula "9") (term "0,0,0,0,0"))
                     (rule "polySimp_mulComm0" (formula "9") (term "1,0,0,0,0,0,0,0"))
                     (rule "inEqSimp_ltToLeq" (formula "6") (term "0,0,0"))
                     (rule "polySimp_mulComm0" (formula "6") (term "1,0,0,0,0,0"))
                     (rule "inEqSimp_sepPosMonomial0" (formula "7") (term "0,0,0"))
                     (rule "polySimp_mulComm0" (formula "7") (term "1,0,0,0"))
                     (rule "polySimp_rightDist" (formula "7") (term "1,0,0,0"))
                     (rule "mul_literals" (formula "7") (term "0,1,0,0,0"))
                     (rule "polySimp_mulLiterals" (formula "7") (term "1,1,0,0,0"))
                     (rule "polySimp_elimOne" (formula "7") (term "1,1,0,0,0"))
                     (rule "inEqSimp_sepPosMonomial0" (formula "10") (term "0,0,0,0,0"))
                     (rule "polySimp_mulComm0" (formula "10") (term "1,0,0,0,0,0"))
                     (rule "polySimp_rightDist" (formula "10") (term "1,0,0,0,0,0"))
                     (rule "polySimp_mulLiterals" (formula "10") (term "1,1,0,0,0,0,0"))
                     (rule "mul_literals" (formula "10") (term "0,1,0,0,0,0,0"))
                     (rule "polySimp_elimOne" (formula "10") (term "1,1,0,0,0,0,0"))
                     (rule "inEqSimp_sepPosMonomial0" (formula "6") (term "0,0,0,1,0"))
                     (rule "polySimp_mulComm0" (formula "6") (term "1,0,0,0,1,0"))
                     (rule "polySimp_rightDist" (formula "6") (term "1,0,0,0,1,0"))
                     (rule "polySimp_mulLiterals" (formula "6") (term "1,1,0,0,0,1,0"))
                     (rule "mul_literals" (formula "6") (term "0,1,0,0,0,1,0"))
                     (rule "polySimp_elimOne" (formula "6") (term "1,1,0,0,0,1,0"))
                     (rule "inEqSimp_sepPosMonomial0" (formula "9") (term "0,0,0,0,0"))
                     (rule "polySimp_mulComm0" (formula "9") (term "1,0,0,0,0,0"))
                     (rule "polySimp_rightDist" (formula "9") (term "1,0,0,0,0,0"))
                     (rule "mul_literals" (formula "9") (term "0,1,0,0,0,0,0"))
                     (rule "polySimp_mulLiterals" (formula "9") (term "1,1,0,0,0,0,0"))
                     (rule "polySimp_elimOne" (formula "9") (term "1,1,0,0,0,0,0"))
                     (rule "inEqSimp_sepPosMonomial0" (formula "6") (term "0,0,0"))
                     (rule "polySimp_mulComm0" (formula "6") (term "1,0,0,0"))
                     (rule "polySimp_rightDist" (formula "6") (term "1,0,0,0"))
                     (rule "polySimp_mulLiterals" (formula "6") (term "1,1,0,0,0"))
                     (rule "mul_literals" (formula "6") (term "0,1,0,0,0"))
                     (rule "polySimp_elimOne" (formula "6") (term "1,1,0,0,0"))
                     (rule "pullOutSelect" (formula "1") (term "0") (inst "selectSK=de_polyas_core3_open_cred_CredTool_cols_0"))
                     (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "13"))
                      (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "24")) (ifInst ""  (formula "4")))
                     (rule "applyEqReverse" (formula "2") (term "0") (ifseqformula "1"))
                     (rule "close" (formula "23") (ifseqformula "2"))
                  )
               )
            )
            (branch
               (rule "andRight" (formula "24"))
               (branch
                   (builtin "One Step Simplification" (formula "24") (ifInst ""  (formula "18")))
                  (rule "closeTrue" (formula "24"))
               )
               (branch
                   (builtin "One Step Simplification" (formula "24"))
                  (rule "closeTrue" (formula "24"))
               )
            )
         )
         (branch
             (builtin "One Step Simplification" (formula "24"))
            (rule "replaceKnownSelect_taclet0_3" (formula "24") (term "0"))
            (rule "replaceKnownAuxiliaryConstant_taclet0_4" (formula "24") (term "0"))
            (rule "eqSymm" (formula "24"))
            (rule "inEqSimp_ltToLeq" (formula "6") (term "0,0,0"))
            (rule "polySimp_mulComm0" (formula "6") (term "1,0,0,0,0,0"))
            (rule "inEqSimp_ltToLeq" (formula "5") (term "0,0,0,1,0"))
            (rule "polySimp_mulComm0" (formula "5") (term "1,0,0,0,0,0,1,0"))
            (rule "inEqSimp_ltToLeq" (formula "8") (term "0,0,0,0,0"))
            (rule "polySimp_mulComm0" (formula "8") (term "1,0,0,0,0,0,0,0"))
            (rule "inEqSimp_ltToLeq" (formula "9") (term "0,0,0,0,0"))
            (rule "polySimp_mulComm0" (formula "9") (term "1,0,0,0,0,0,0,0"))
            (rule "inEqSimp_ltToLeq" (formula "5") (term "0,0,0"))
            (rule "polySimp_mulComm0" (formula "5") (term "1,0,0,0,0,0"))
            (rule "inEqSimp_sepPosMonomial0" (formula "6") (term "0,0,0"))
            (rule "polySimp_mulComm0" (formula "6") (term "1,0,0,0"))
            (rule "polySimp_rightDist" (formula "6") (term "1,0,0,0"))
            (rule "mul_literals" (formula "6") (term "0,1,0,0,0"))
            (rule "polySimp_mulLiterals" (formula "6") (term "1,1,0,0,0"))
            (rule "polySimp_elimOne" (formula "6") (term "1,1,0,0,0"))
            (rule "inEqSimp_sepPosMonomial0" (formula "5") (term "0,0,0,1,0"))
            (rule "polySimp_mulComm0" (formula "5") (term "1,0,0,0,1,0"))
            (rule "polySimp_rightDist" (formula "5") (term "1,0,0,0,1,0"))
            (rule "mul_literals" (formula "5") (term "0,1,0,0,0,1,0"))
            (rule "polySimp_mulLiterals" (formula "5") (term "1,1,0,0,0,1,0"))
            (rule "polySimp_elimOne" (formula "5") (term "1,1,0,0,0,1,0"))
            (rule "inEqSimp_sepPosMonomial0" (formula "8") (term "0,0,0,0,0"))
            (rule "polySimp_mulComm0" (formula "8") (term "1,0,0,0,0,0"))
            (rule "polySimp_rightDist" (formula "8") (term "1,0,0,0,0,0"))
            (rule "mul_literals" (formula "8") (term "0,1,0,0,0,0,0"))
            (rule "polySimp_mulLiterals" (formula "8") (term "1,1,0,0,0,0,0"))
            (rule "polySimp_elimOne" (formula "8") (term "1,1,0,0,0,0,0"))
            (rule "inEqSimp_sepPosMonomial0" (formula "9") (term "0,0,0,0,0"))
            (rule "polySimp_mulComm0" (formula "9") (term "1,0,0,0,0,0"))
            (rule "polySimp_rightDist" (formula "9") (term "1,0,0,0,0,0"))
            (rule "polySimp_mulLiterals" (formula "9") (term "1,1,0,0,0,0,0"))
            (rule "mul_literals" (formula "9") (term "0,1,0,0,0,0,0"))
            (rule "polySimp_elimOne" (formula "9") (term "1,1,0,0,0,0,0"))
            (rule "inEqSimp_sepPosMonomial0" (formula "5") (term "0,0,0"))
            (rule "polySimp_mulComm0" (formula "5") (term "1,0,0,0"))
            (rule "polySimp_rightDist" (formula "5") (term "1,0,0,0"))
            (rule "mul_literals" (formula "5") (term "0,1,0,0,0"))
            (rule "polySimp_mulLiterals" (formula "5") (term "1,1,0,0,0"))
            (rule "polySimp_elimOne" (formula "5") (term "1,1,0,0,0"))
            (rule "equalityToSeqGetAndSeqLenRight" (formula "24") (inst "iv=iv"))
            (rule "inEqSimp_ltToLeq" (formula "24") (term "1,0,0,1"))
            (rule "polySimp_mulComm0" (formula "24") (term "1,0,0,1,0,0,1"))
            (rule "inEqSimp_commuteLeq" (formula "24") (term "0,0,0,1"))
            (rule "inEqSimp_sepPosMonomial0" (formula "24") (term "1,0,0,1"))
            (rule "polySimp_mulComm0" (formula "24") (term "1,1,0,0,1"))
            (rule "polySimp_rightDist" (formula "24") (term "1,1,0,0,1"))
            (rule "mul_literals" (formula "24") (term "0,1,1,0,0,1"))
            (rule "polySimp_mulLiterals" (formula "24") (term "1,1,1,0,0,1"))
            (rule "polySimp_elimOne" (formula "24") (term "1,1,1,0,0,1"))
            (rule "pullOutSelect" (formula "24") (term "0,0,0") (inst "selectSK=java_util_Collection_seq_1"))
            (rule "applyEq" (formula "25") (term "0,1,1,1,0,0,1") (ifseqformula "1"))
            (rule "applyEq" (formula "25") (term "0,0,1,0,1") (ifseqformula "1"))
            (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "12"))
             (builtin "One Step Simplification" (formula "1"))
            (rule "eqSymm" (formula "25") (term "0"))
            (rule "eqSymm" (formula "25") (term "1,0,1"))
            (rule "pullOutSelect" (formula "1") (term "1,1,0") (inst "selectSK=de_polyas_core3_open_cred_CredTool_cols_0"))
            (rule "applyEq" (formula "2") (term "1,2,0") (ifseqformula "1"))
            (rule "applyEq" (formula "2") (term "1,0,0,1,0,0") (ifseqformula "1"))
            (rule "applyEq" (formula "2") (term "0,0,0,0,0") (ifseqformula "1"))
            (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "13"))
             (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "24")) (ifInst ""  (formula "4")))
            (rule "applyEqReverse" (formula "2") (term "1,1,0") (ifseqformula "1"))
            (rule "applyEqReverse" (formula "2") (term "1,2,0") (ifseqformula "1"))
            (rule "applyEqReverse" (formula "2") (term "1,0,0,1,0,0") (ifseqformula "1"))
            (rule "applyEqReverse" (formula "2") (term "0,0,0,0,0") (ifseqformula "1"))
            (rule "hideAuxiliaryEq" (formula "1"))
            (rule "replace_known_right" (formula "1") (term "0,0,0,0") (ifseqformula "22"))
             (builtin "One Step Simplification" (formula "1"))
            (rule "ifthenelse_negated" (formula "1") (term "0"))
            (rule "applyEq" (formula "15") (term "0") (ifseqformula "1"))
            (rule "eqSymm" (formula "15"))
            (rule "applyEqReverse" (formula "1") (term "1") (ifseqformula "15"))
            (rule "applyEqReverse" (formula "25") (term "0,1,0") (ifseqformula "15"))
             (builtin "One Step Simplification" (formula "25"))
            (rule "allRight" (formula "25") (inst "sk=iv_0"))
            (rule "impRight" (formula "25"))
            (rule "andLeft" (formula "1"))
            (rule "applyEqReverse" (formula "27") (term "0,1") (ifseqformula "17"))
             (builtin "One Step Simplification" (formula "27"))
            (rule "closeTrue" (formula "27"))
         )
      )
      (branch
          (builtin "One Step Simplification" (formula "24"))
         (rule "wellFormedAnonEQ" (formula "24") (ifseqformula "11"))
         (rule "replace_known_left" (formula "24") (term "1") (ifseqformula "10"))
          (builtin "One Step Simplification" (formula "24") (ifInst ""  (formula "1")))
         (rule "closeTrue" (formula "24"))
      )
   )
   (branch "Body Preserves Invariant"
       (builtin "One Step Simplification" (formula "18") (ifInst ""  (formula "20")) (ifInst ""  (formula "20")))
       (builtin "One Step Simplification" (formula "26"))
      (rule "andLeft" (formula "18"))
      (rule "impRight" (formula "27"))
      (rule "andLeft" (formula "19"))
      (rule "andLeft" (formula "20"))
      (rule "andLeft" (formula "19"))
      (rule "andLeft" (formula "21"))
      (rule "notLeft" (formula "23"))
      (rule "andLeft" (formula "19"))
      (rule "notLeft" (formula "22"))
      (rule "notLeft" (formula "22"))
      (rule "andLeft" (formula "19"))
      (rule "andLeft" (formula "19"))
      (rule "andLeft" (formula "19"))
      (rule "andLeft" (formula "19"))
      (rule "notLeft" (formula "21"))
      (rule "eqSymm" (formula "25"))
      (rule "eqSymm" (formula "37") (term "1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,1"))
      (rule "eqSymm" (formula "37") (term "1,0,0,1,0,1,1,0,1"))
      (rule "eqSymm" (formula "37") (term "1,0,0,1,1,0,1"))
      (rule "eqSymm" (formula "19") (term "1,0,1,0"))
      (rule "polySimp_elimSub" (formula "37") (term "0,1,1,1,0"))
      (rule "polySimp_elimSub" (formula "37") (term "0,1,1,1,0,1"))
      (rule "polySimp_addComm0" (formula "37") (term "0,1,1,1,0"))
      (rule "polySimp_addComm0" (formula "37") (term "0,1,1,1,0,1"))
      (rule "castedGetAny" (formula "37") (term "0,0,1,0,1,0,0,0,0,0,0,0,0,0,0,1,1,0,1"))
      (rule "castedGetAny" (formula "20") (term "0,0,1,0"))
      (rule "castedGetAny" (formula "37") (term "1,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,1"))
      (rule "castedGetAny" (formula "37") (term "0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,1"))
      (rule "castedGetAny" (formula "19") (term "1,1,0,1,0"))
      (rule "castedGetAny" (formula "19") (term "0,1,0,1,0"))
      (rule "inEqSimp_commuteLeq" (formula "37") (term "0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,1,0,1"))
      (rule "inEqSimp_commuteLeq" (formula "37") (term "0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,1"))
      (rule "inEqSimp_commuteLeq" (formula "37") (term "0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,1"))
      (rule "inEqSimp_commuteLeq" (formula "19") (term "0,0,0"))
      (rule "inEqSimp_commuteLeq" (formula "19") (term "0,0,0,1,0"))
      (rule "inEqSimp_commuteLeq" (formula "20") (term "0,0,0"))
      (rule "pullOutSelect" (formula "37") (term "0,0,1,0,0,1,1,0") (inst "selectSK=de_polyas_core3_open_cred_CredTool_vals_0"))
      (rule "applyEq" (formula "28") (term "0,0,1,0,0") (ifseqformula "1"))
      (rule "applyEq" (formula "20") (term "0,0,1,0,1,0,0,1,0,1,0") (ifseqformula "1"))
      (rule "applyEq" (formula "23") (term "0,0,1,0,1") (ifseqformula "1"))
      (rule "applyEq" (formula "21") (term "0,0,1,0,1,0,1,1,0,0") (ifseqformula "1"))
      (rule "applyEq" (formula "26") (term "0,0,1,0,1,0") (ifseqformula "1"))
      (rule "applyEq" (formula "20") (term "0,0,1,0,0,1,1,0,0") (ifseqformula "1"))
      (rule "applyEq" (formula "21") (term "0,0,1,0,1,0,0,0,1,0") (ifseqformula "1"))
      (rule "applyEq" (formula "20") (term "0,0,1,0,1,0,1,1,0,0") (ifseqformula "1"))
      (rule "applyEq" (formula "27") (term "0,0,1,0,0") (ifseqformula "1"))
      (rule "applyEq" (formula "24") (term "0,0,1,0,1") (ifseqformula "1"))
      (rule "applyEq" (formula "22") (term "0,0,1,0") (ifseqformula "1"))
      (rule "applyEq" (formula "30") (term "0,0,1,0,0") (ifseqformula "1"))
      (rule "applyEq" (formula "20") (term "0,0,1,0,0,0,1,0,1,0") (ifseqformula "1"))
      (rule "applyEq" (formula "26") (term "0,0,1,0,0") (ifseqformula "1"))
      (rule "applyEq" (formula "38") (term "0,0,1,0,0,0,0,1,1,1,0") (ifseqformula "1"))
      (rule "applyEq" (formula "20") (term "0,0,1,0,0,1,1,0,1,0") (ifseqformula "1"))
      (rule "applyEq" (formula "21") (term "0,0,1,0,0,0,0,1,0") (ifseqformula "1"))
      (rule "applyEq" (formula "38") (term "0,0,1,0,0,1,0,1,1,1,0") (ifseqformula "1"))
      (rule "applyEq" (formula "25") (term "0,0,1,0") (ifseqformula "1"))
      (rule "applyEq" (formula "23") (term "0,0,1,0") (ifseqformula "1"))
      (rule "applyEq" (formula "2") (term "0,0,1,0,1,0") (ifseqformula "1"))
      (rule "applyEq" (formula "26") (term "0,0,1,0,1") (ifseqformula "1"))
      (rule "applyEq" (formula "20") (term "0,0,1,0,1,0,1,1,0,0,1,0") (ifseqformula "1"))
      (rule "applyEq" (formula "27") (term "0,0,1,0,1") (ifseqformula "1"))
      (rule "applyEq" (formula "21") (term "0,0,1,0,0,1,1,0,0") (ifseqformula "1"))
      (rule "applyEq" (formula "20") (term "0,0,1,0,1,0,1,1,0,1,0") (ifseqformula "1"))
      (rule "applyEq" (formula "29") (term "0,0,1,0,0") (ifseqformula "1"))
      (rule "applyEq" (formula "24") (term "0,0,1,0") (ifseqformula "1"))
      (rule "applyEq" (formula "22") (term "0,0,1,0,1") (ifseqformula "1"))
      (rule "applyEq" (formula "20") (term "0,0,1,0,0,1,1,0,0,1,0") (ifseqformula "1"))
      (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "13"))
       (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "36")) (ifInst ""  (formula "4")))
      (rule "applyEqReverse" (formula "38") (term "0,0,1,0,0,1,1,0") (ifseqformula "1"))
      (rule "applyEqReverse" (formula "28") (term "0,0,1,0,0") (ifseqformula "1"))
      (rule "applyEqReverse" (formula "20") (term "0,0,1,0,1,0,0,1,0,1,0") (ifseqformula "1"))
      (rule "applyEqReverse" (formula "23") (term "0,0,1,0,1") (ifseqformula "1"))
      (rule "applyEqReverse" (formula "21") (term "0,0,1,0,1,0,1,1,0,0") (ifseqformula "1"))
      (rule "applyEqReverse" (formula "26") (term "0,0,1,0,1,0") (ifseqformula "1"))
      (rule "applyEqReverse" (formula "20") (term "0,0,1,0,0,1,1,0,0") (ifseqformula "1"))
      (rule "applyEqReverse" (formula "21") (term "0,0,1,0,1,0,0,0,1,0") (ifseqformula "1"))
      (rule "applyEqReverse" (formula "20") (term "0,0,1,0,1,0,1,1,0,0") (ifseqformula "1"))
      (rule "applyEqReverse" (formula "27") (term "0,0,1,0,0") (ifseqformula "1"))
      (rule "applyEqReverse" (formula "24") (term "0,0,1,0,1") (ifseqformula "1"))
      (rule "applyEqReverse" (formula "22") (term "0,0,1,0") (ifseqformula "1"))
      (rule "applyEqReverse" (formula "30") (term "0,0,1,0,0") (ifseqformula "1"))
      (rule "applyEqReverse" (formula "20") (term "0,0,1,0,0,0,1,0,1,0") (ifseqformula "1"))
      (rule "applyEqReverse" (formula "26") (term "0,0,1,0,0") (ifseqformula "1"))
      (rule "applyEqReverse" (formula "38") (term "0,0,1,0,0,0,0,1,1,1,0") (ifseqformula "1"))
      (rule "applyEqReverse" (formula "20") (term "0,0,1,0,0,1,1,0,1,0") (ifseqformula "1"))
      (rule "applyEqReverse" (formula "21") (term "0,0,1,0,0,0,0,1,0") (ifseqformula "1"))
      (rule "applyEqReverse" (formula "38") (term "0,0,1,0,0,1,0,1,1,1,0") (ifseqformula "1"))
      (rule "applyEqReverse" (formula "25") (term "0,0,1,0") (ifseqformula "1"))
      (rule "applyEqReverse" (formula "23") (term "0,0,1,0") (ifseqformula "1"))
      (rule "applyEqReverse" (formula "2") (term "0,0,1,0,1,0") (ifseqformula "1"))
      (rule "applyEqReverse" (formula "26") (term "0,0,1,0,1") (ifseqformula "1"))
      (rule "applyEqReverse" (formula "20") (term "0,0,1,0,1,0,1,1,0,0,1,0") (ifseqformula "1"))
      (rule "applyEqReverse" (formula "27") (term "0,0,1,0,1") (ifseqformula "1"))
      (rule "applyEqReverse" (formula "21") (term "0,0,1,0,0,1,1,0,0") (ifseqformula "1"))
      (rule "applyEqReverse" (formula "20") (term "0,0,1,0,1,0,1,1,0,1,0") (ifseqformula "1"))
      (rule "applyEqReverse" (formula "29") (term "0,0,1,0,0") (ifseqformula "1"))
      (rule "applyEqReverse" (formula "24") (term "0,0,1,0") (ifseqformula "1"))
      (rule "applyEqReverse" (formula "22") (term "0,0,1,0,1") (ifseqformula "1"))
      (rule "applyEqReverse" (formula "20") (term "0,0,1,0,0,1,1,0,0,1,0") (ifseqformula "1"))
      (rule "hideAuxiliaryEq" (formula "1"))
      (rule "pullOutSelect" (formula "37") (term "0,0,0,1,1,1,0") (inst "selectSK=java_util_Iterator_index_1"))
      (rule "simplifySelectOfAnon" (formula "1"))
       (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "32")))
      (rule "replaceKnownSelect_taclet0_0" (formula "1") (term "2,0"))
      (rule "replaceKnownAuxiliaryConstant_taclet0_1" (formula "1") (term "2,0"))
      (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,1,0,0") (ifseqformula "13"))
      (rule "replace_known_right" (formula "1") (term "0,0,1,0,0") (ifseqformula "31"))
       (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "14")))
      (rule "pullOutSelect" (formula "38") (term "0,1,0,1,1,1,0") (inst "selectSK=java_util_Iterator_seq_0"))
      (rule "applyEq" (formula "27") (term "1") (ifseqformula "1"))
      (rule "applyEq" (formula "22") (term "0,1,1,0,0") (ifseqformula "27"))
      (rule "applyEq" (formula "22") (term "0,0,0,1,0") (ifseqformula "27"))
      (rule "applyEq" (formula "21") (term "0,0,1,0,1,0") (ifseqformula "27"))
      (rule "applyEq" (formula "21") (term "0,1,1,0,0") (ifseqformula "27"))
      (rule "simplifySelectOfAnon" (formula "1"))
       (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "33")))
      (rule "replaceKnownSelect_taclet0_3" (formula "1") (term "2,0"))
      (rule "replaceKnownAuxiliaryConstant_taclet0_4" (formula "1") (term "2,0"))
      (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,1,0,0") (ifseqformula "14"))
      (rule "simplifySelectOfAnon" (formula "27"))
       (builtin "One Step Simplification" (formula "27") (ifInst ""  (formula "31")))
      (rule "selectCreatedOfAnonAsFormulaEQ" (formula "27") (term "0,1,0,0") (ifseqformula "14"))
      (rule "replace_known_right" (formula "1") (term "0,0,1,0,0") (ifseqformula "32"))
       (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "15")))
      (rule "variableDeclarationAssign" (formula "3") (term "1"))
      (rule "variableDeclarationAssign" (formula "39") (term "1"))
      (rule "variableDeclaration" (formula "3") (term "1") (newnames "b_1"))
      (rule "variableDeclaration" (formula "39") (term "1") (newnames "exc_1"))
      (rule "assignment" (formula "39") (term "1"))
       (builtin "One Step Simplification" (formula "39"))
      (rule "variableDeclaration" (formula "39") (term "1") (newnames "thrownExc"))
      (rule "applyEq" (formula "2") (term "2,0") (ifseqformula "16"))
      (rule "blockThrow" (formula "39") (term "1,0,0,1"))
      (rule "elementOfUnion" (formula "2") (term "0,0"))
      (rule "elementOfSingleton" (formula "2") (term "0,0,0"))
       (builtin "One Step Simplification" (formula "2"))
      (rule "elementOfSingleton" (formula "2") (term "0,0"))
       (builtin "One Step Simplification" (formula "2"))
      (rule "applyEqReverse" (formula "39") (term "0,0,0,1,1,1,0,0") (ifseqformula "2"))
      (rule "hideAuxiliaryEq" (formula "2"))
      (rule "elementOfUnion" (formula "26") (term "0,0,0"))
      (rule "elementOfSingleton" (formula "26") (term "1,0,0,0"))
       (builtin "One Step Simplification" (formula "26"))
      (rule "elementOfSingleton" (formula "26") (term "0,0,0"))
       (builtin "One Step Simplification" (formula "26"))
      (rule "elementOfUnion" (formula "1") (term "0,0"))
      (rule "elementOfSingleton" (formula "1") (term "0,0,0"))
       (builtin "One Step Simplification" (formula "1"))
      (rule "elementOfSingleton" (formula "1") (term "0,0"))
       (builtin "One Step Simplification" (formula "1"))
      (rule "applyEqReverse" (formula "20") (term "0,1,1,0,0") (ifseqformula "1"))
      (rule "applyEqReverse" (formula "26") (term "1") (ifseqformula "1"))
      (rule "applyEqReverse" (formula "20") (term "0,0,1,0,1,0") (ifseqformula "1"))
      (rule "applyEqReverse" (formula "38") (term "0,1,0,1,1,1,0,0") (ifseqformula "1"))
      (rule "applyEqReverse" (formula "21") (term "0,0,0,1,0") (ifseqformula "1"))
      (rule "applyEqReverse" (formula "21") (term "0,1,1,0,0") (ifseqformula "1"))
      (rule "hideAuxiliaryEq" (formula "1"))
      (rule "elementOfUnion" (formula "37") (term "0,0,0,0,1,0,1,1,0,1"))
      (rule "elementOfSingleton" (formula "37") (term "0,0,0,0,0,1,0,1,1,0,1"))
      (rule "elementOfSingleton" (formula "37") (term "1,0,0,0,0,1,0,1,1,0,1"))
      (rule "pullOutSelect" (formula "27") (term "0") (inst "selectSK=de_polyas_core3_open_cred_CredTool_vals_1"))
      (rule "applyEq" (formula "23") (term "1") (ifseqformula "1"))
      (rule "applyEq" (formula "27") (term "0") (ifseqformula "1"))
      (rule "simplifySelectOfAnon" (formula "1"))
       (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "36")))
      (rule "replaceKnownSelect_taclet10_5" (formula "1") (term "2,0"))
      (rule "replaceKnownAuxiliaryConstant_taclet10_6" (formula "1") (term "2,0"))
      (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,1,0,0") (ifseqformula "13"))
      (rule "eqSymm" (formula "27"))
      (rule "replace_known_left" (formula "1") (term "0,0,1,0,0") (ifseqformula "4"))
       (builtin "One Step Simplification" (formula "1"))
      (rule "elementOfUnion" (formula "1") (term "0,0"))
      (rule "elementOfSingleton" (formula "1") (term "0,0,0"))
       (builtin "One Step Simplification" (formula "1"))
      (rule "elementOfSingleton" (formula "1") (term "0,0"))
       (builtin "One Step Simplification" (formula "1"))
      (rule "applyEqReverse" (formula "23") (term "1") (ifseqformula "1"))
      (rule "applyEqReverse" (formula "27") (term "1") (ifseqformula "1"))
      (rule "applyEqReverse" (formula "28") (term "0") (ifseqformula "1"))
      (rule "hideAuxiliaryEq" (formula "1"))
      (rule "replace_known_right" (formula "25") (term "0,0,0") (ifseqformula "26"))
       (builtin "One Step Simplification" (formula "25"))
      (rule "ifthenelse_negated" (formula "25") (term "0"))
      (rule "pullOutSelect" (formula "23") (term "1") (inst "selectSK=de_polyas_core3_open_cred_CredTool_cols_0"))
      (rule "applyEq" (formula "27") (term "0") (ifseqformula "23"))
      (rule "applyEq" (formula "26") (term "1,0,1,0,0") (ifseqformula "23"))
      (rule "applyEq" (formula "26") (term "1,1,0") (ifseqformula "23"))
      (rule "applyEq" (formula "26") (term "1,2,0") (ifseqformula "23"))
      (rule "applyEq" (formula "26") (term "1,0,0,0,0") (ifseqformula "23"))
      (rule "applyEq" (formula "29") (term "0") (ifseqformula "23"))
      (rule "simplifySelectOfAnon" (formula "23"))
       (builtin "One Step Simplification" (formula "23") (ifInst ""  (formula "35")))
      (rule "selectCreatedOfAnonAsFormulaEQ" (formula "23") (term "0,1,0,0") (ifseqformula "12"))
      (rule "eqSymm" (formula "27"))
      (rule "replace_known_left" (formula "23") (term "0,0,1,0,0") (ifseqformula "3"))
       (builtin "One Step Simplification" (formula "23"))
      (rule "pullOutSelect" (formula "19") (term "1,0,1,1,0,0,1,0") (inst "selectSK=de_polyas_core3_open_cred_CredTool_record_0"))
      (rule "applyEq" (formula "20") (term "1,0,1,1,0,1,0") (ifseqformula "19"))
      (rule "applyEq" (formula "29") (term "0") (ifseqformula "19"))
      (rule "applyEq" (formula "22") (term "1") (ifseqformula "19"))
      (rule "simplifySelectOfAnon" (formula "19"))
       (builtin "One Step Simplification" (formula "19") (ifInst ""  (formula "36")))
      (rule "selectCreatedOfAnonAsFormulaEQ" (formula "19") (term "0,1,0,0") (ifseqformula "12"))
      (rule "replace_known_left" (formula "19") (term "0,0,1,0,0") (ifseqformula "3"))
       (builtin "One Step Simplification" (formula "19"))
      (rule "elementOfUnion" (formula "24") (term "0,0"))
      (rule "elementOfSingleton" (formula "24") (term "1,0,0"))
       (builtin "One Step Simplification" (formula "24"))
      (rule "elementOfSingleton" (formula "24") (term "0,0"))
       (builtin "One Step Simplification" (formula "24"))
      (rule "simplifySelectOfAnonEQ" (formula "24") (ifseqformula "12"))
       (builtin "One Step Simplification" (formula "24") (ifInst ""  (formula "36")) (ifInst ""  (formula "3")))
      (rule "applyEqReverse" (formula "27") (term "1,0,0,0,0") (ifseqformula "24"))
      (rule "applyEqReverse" (formula "30") (term "0") (ifseqformula "24"))
      (rule "applyEqReverse" (formula "27") (term "1,0,1,0,0") (ifseqformula "24"))
      (rule "applyEqReverse" (formula "28") (term "1") (ifseqformula "24"))
      (rule "applyEqReverse" (formula "27") (term "1,1,0") (ifseqformula "24"))
      (rule "replaceKnownSelect_taclet0_2" (formula "27") (term "1,0"))
      (rule "replaceKnownAuxiliaryConstant_taclet0_4" (formula "27") (term "1,0"))
       (builtin "One Step Simplification" (formula "27"))
      (rule "applyEqReverse" (formula "25") (term "1") (ifseqformula "24"))
      (rule "applyEqReverse" (formula "27") (term "1,0,1") (ifseqformula "24"))
      (rule "hideAuxiliaryEq" (formula "24"))
      (rule "eqSymm" (formula "26") (term "1"))
      (rule "elementOfUnion" (formula "19") (term "0,0"))
      (rule "elementOfSingleton" (formula "19") (term "1,0,0"))
       (builtin "One Step Simplification" (formula "19"))
      (rule "elementOfSingleton" (formula "19") (term "0,0"))
       (builtin "One Step Simplification" (formula "19"))
      (rule "simplifySelectOfAnonEQ" (formula "19") (ifseqformula "12"))
       (builtin "One Step Simplification" (formula "19") (ifInst ""  (formula "33")) (ifInst ""  (formula "3")))
      (rule "applyEqReverse" (formula "20") (term "1,0,1,1,0,1,0") (ifseqformula "19"))
      (rule "applyEqReverse" (formula "20") (term "1,0,1,1,0,0,1,0") (ifseqformula "19"))
      (rule "applyEqReverse" (formula "22") (term "1") (ifseqformula "19"))
      (rule "applyEqReverse" (formula "27") (term "0") (ifseqformula "19"))
      (rule "hideAuxiliaryEq" (formula "19"))
      (rule "pullOutSelect" (formula "19") (term "0,1,1,0,1,0") (inst "selectSK=org_apache_commons_csv_CSVRecord_key_seq_0"))
      (rule "applyEq" (formula "20") (term "0,1,1,0,0,1,0") (ifseqformula "19"))
      (rule "simplifySelectOfAnon" (formula "19"))
       (builtin "One Step Simplification" (formula "19") (ifInst ""  (formula "29")))
      (rule "selectCreatedOfAnonAsFormulaEQ" (formula "19") (term "0,1,0,0") (ifseqformula "12"))
      (rule "elementOfUnion" (formula "19") (term "0,0,0"))
      (rule "elementOfSingleton" (formula "19") (term "1,0,0,0"))
       (builtin "One Step Simplification" (formula "19"))
      (rule "elementOfSingleton" (formula "19") (term "0,0,0"))
       (builtin "One Step Simplification" (formula "19"))
      (rule "ifthenelse_negated" (formula "19") (term "0"))
      (rule "pullOutSelect" (formula "19") (term "1,0") (inst "selectSK=org_apache_commons_csv_CSVRecord_key_seq_1"))
      (rule "simplifySelectOfAnonEQ" (formula "19") (ifseqformula "12"))
       (builtin "One Step Simplification" (formula "19") (ifInst ""  (formula "30")))
      (rule "ifthenelse_negated" (formula "19") (term "0"))
      (rule "boxToDiamond" (formula "1") (term "1"))
       (builtin "One Step Simplification" (formula "1"))
      (rule "notLeft" (formula "1"))
      (rule "Class_invariant_axiom_for_java_util_CollectionIterator" (formula "25"))
      (rule "replaceKnownSelect_taclet10_7" (formula "25") (term "0,1"))
      (rule "replaceKnownSelect_taclet10_7" (formula "25") (term "1,0"))
      (rule "replaceKnownAuxiliaryConstant_taclet10_10" (formula "25") (term "0,1"))
      (rule "replaceKnownAuxiliaryConstant_taclet10_10" (formula "25") (term "1,0"))
      (rule "replaceKnownSelect_taclet10_8" (formula "25") (term "0,1,1"))
      (rule "replaceKnownAuxiliaryConstant_taclet10_11" (formula "25") (term "0,1,1"))
      (rule "andLeft" (formula "25"))
      (rule "inEqSimp_commuteLeq" (formula "25"))
      (rule "inEqSimp_commuteLeq" (formula "26"))
      (rule "Class_invariant_axiom_for_java_util_ArrayList" (formula "23"))
      (rule "true_left" (formula "23"))
      (rule "Class_invariant_axiom_for_java_util_ArrayList" (formula "23"))
      (rule "true_left" (formula "23"))
      (rule "commute_and" (formula "20") (term "0,0"))
      (rule "Class_invariant_axiom_for_org_apache_commons_csv_CSVRecord" (formula "22") (inst "i=i") (inst "i_0=i_0"))
      (rule "replaceKnownSelect_taclet10_20" (formula "22") (term "0,0,0,0"))
      (rule "replaceKnownSelect_taclet10_20" (formula "22") (term "0,0,0,0,1,0,1,0"))
      (rule "replaceKnownSelect_taclet10_20" (formula "22") (term "0,1,1,0,0,0,1,0"))
      (rule "expand_inInt" (formula "22") (term "1,0,0,1,0"))
      (rule "expand_inInt" (formula "22") (term "1,0,0,1"))
      (rule "replace_int_MAX" (formula "22") (term "1,0,1,0,0,1,0"))
      (rule "replace_int_MIN" (formula "22") (term "0,1,1,0,0,1,0"))
      (rule "replace_int_MAX" (formula "22") (term "1,0,1,0,0,1"))
      (rule "replace_int_MIN" (formula "22") (term "0,1,1,0,0,1"))
      (rule "andLeft" (formula "22"))
      (rule "andLeft" (formula "22"))
      (rule "eqSymm" (formula "22"))
      (rule "castedGetAny" (formula "24") (term "0,0,1,0"))
      (rule "castedGetAny" (formula "23") (term "0,0,1,0"))
      (rule "inEqSimp_commuteLeq" (formula "24") (term "1,1,0,0"))
      (rule "inEqSimp_commuteLeq" (formula "24") (term "0,0,0,0"))
      (rule "inEqSimp_commuteLeq" (formula "23") (term "1,1,0,0"))
      (rule "inEqSimp_commuteLeq" (formula "23") (term "0,0,0,0"))
      (rule "pullOutSelect" (formula "24") (term "0,1,1,0,0,0") (inst "selectSK=org_apache_commons_csv_CSVRecord_value_seq_0"))
      (rule "applyEq" (formula "22") (term "0,0") (ifseqformula "24"))
      (rule "applyEq" (formula "25") (term "0,0,0,1,0") (ifseqformula "24"))
      (rule "simplifySelectOfAnon" (formula "24"))
       (builtin "One Step Simplification" (formula "24") (ifInst ""  (formula "32")))
      (rule "selectCreatedOfAnonAsFormulaEQ" (formula "24") (term "0,1,0,0") (ifseqformula "11"))
      (rule "applyEq" (formula "25") (term "1,1,0,0,0") (ifseqformula "22"))
      (rule "elementOfUnion" (formula "24") (term "0,0,0"))
      (rule "elementOfSingleton" (formula "24") (term "0,0,0,0"))
       (builtin "One Step Simplification" (formula "24"))
      (rule "elementOfSingleton" (formula "24") (term "0,0,0"))
       (builtin "One Step Simplification" (formula "24"))
      (rule "ifthenelse_negated" (formula "24") (term "0"))
      (rule "pullOutSelect" (formula "24") (term "1,0") (inst "selectSK=org_apache_commons_csv_CSVRecord_value_seq_1"))
      (rule "simplifySelectOfAnonEQ" (formula "24") (ifseqformula "11"))
       (builtin "One Step Simplification" (formula "24") (ifInst ""  (formula "33")))
      (rule "ifthenelse_negated" (formula "24") (term "0"))
      (rule "commute_and" (formula "21") (term "0,0"))
      (rule "lenNonNegative" (formula "7") (term "1"))
      (rule "inEqSimp_commuteLeq" (formula "7"))
      (rule "lenNonNegative" (formula "8") (term "0"))
      (rule "inEqSimp_commuteLeq" (formula "8"))
      (rule "applyEq" (formula "8") (term "0") (ifseqformula "9"))
      (rule "lenNonNegative" (formula "5") (term "1,0,0,0"))
      (rule "inEqSimp_commuteLeq" (formula "5"))
      (rule "equalityToSeqGetAndSeqLenLeft" (formula "16") (inst "iv=iv"))
      (rule "andLeft" (formula "16"))
      (rule "inEqSimp_commuteLeq" (formula "17") (term "0,0,0"))
      (rule "applyEq" (formula "17") (term "0,0,1,0") (ifseqformula "18"))
       (builtin "One Step Simplification" (formula "17"))
      (rule "true_left" (formula "17"))
      (rule "applyEq" (formula "16") (term "0,0") (ifseqformula "17"))
       (builtin "One Step Simplification" (formula "16"))
      (rule "true_left" (formula "16"))
      (rule "commute_and" (formula "22") (term "0,0,1,0"))
      (rule "commute_and" (formula "28") (term "1,0,0"))
      (rule "commute_and" (formula "25") (term "1,0,0"))
      (rule "commute_and" (formula "25") (term "0,0,0"))
      (rule "commute_and" (formula "28") (term "0,0,0"))
      (rule "ifUnfold" (formula "40") (term "1") (inst "#boolv=x"))
      (rule "variableDeclaration" (formula "40") (term "1") (newnames "x"))
      (rule "commute_and_2" (formula "22") (term "0,1,0"))
      (rule "shift_paren_and" (formula "25") (term "0,0"))
      (rule "commute_and_2" (formula "25") (term "0,0,0"))
      (rule "shift_paren_and" (formula "28") (term "0,0"))
      (rule "commute_and_2" (formula "28") (term "0,0,0"))
       (builtin "Use Operation Contract" (formula "32") (newnames "heapBefore_hasNext,result_0,exc_2") (contract "java.util.Iterator[java.util.Iterator::hasNext()].JML normal_behavior operation contract.0"))
      (branch "Post (hasNext)"
          (builtin "One Step Simplification" (formula "33"))
          (builtin "One Step Simplification" (formula "32"))
         (rule "replaceKnownSelect_taclet10_7" (formula "32") (term "0,1,0,0,1"))
         (rule "replaceKnownAuxiliaryConstant_taclet10_10" (formula "32") (term "0,1,0,0,1"))
         (rule "replaceKnownSelect_taclet10_8" (formula "32") (term "0,1,1,0,0,1"))
         (rule "replaceKnownAuxiliaryConstant_taclet10_11" (formula "32") (term "0,1,1,0,0,1"))
         (rule "andLeft" (formula "32"))
         (rule "andLeft" (formula "33"))
         (rule "andLeft" (formula "33"))
         (rule "assignment" (formula "35") (term "1"))
          (builtin "One Step Simplification" (formula "35"))
         (rule "Class_invariant_axiom_for_java_util_CollectionIterator" (formula "34"))
         (rule "replaceKnownSelect_taclet10_7" (formula "34") (term "0,1"))
         (rule "replaceKnownSelect_taclet10_7" (formula "34") (term "1,0"))
         (rule "replaceKnownAuxiliaryConstant_taclet10_10" (formula "34") (term "0,1"))
         (rule "replaceKnownAuxiliaryConstant_taclet10_10" (formula "34") (term "1,0"))
         (rule "replaceKnownSelect_taclet10_8" (formula "34") (term "0,1,1"))
         (rule "replaceKnownAuxiliaryConstant_taclet10_11" (formula "34") (term "0,1,1"))
         (rule "andLeft" (formula "34"))
         (rule "inEqSimp_commuteLeq" (formula "34"))
         (rule "inEqSimp_commuteLeq" (formula "34"))
         (rule "methodCallEmpty" (formula "34") (term "1"))
          (builtin "One Step Simplification" (formula "34"))
         (rule "lenNonNegative" (formula "42") (term "1,0,1,1,1,0,0"))
         (rule "inEqSimp_commuteLeq" (formula "1"))
         (rule "emptyModality" (formula "35") (term "1"))
          (builtin "One Step Simplification" (formula "35"))
         (rule "notRight" (formula "35"))
         (rule "replace_known_left" (formula "35") (term "0") (ifseqformula "1"))
          (builtin "One Step Simplification" (formula "35"))
          (builtin "Use Operation Contract" (formula "43") (newnames "heapBefore_hasNext_0,result_1,exc_3") (contract "java.util.Iterator[java.util.Iterator::hasNext()].JML normal_behavior operation contract.0"))
         (branch "Post (hasNext)"
             (builtin "One Step Simplification" (formula "36"))
            (rule "replaceKnownSelect_taclet10_7" (formula "36") (term "0,1,0,0,1"))
            (rule "replaceKnownAuxiliaryConstant_taclet10_10" (formula "36") (term "0,1,0,0,1"))
            (rule "replaceKnownSelect_taclet10_8" (formula "36") (term "0,1,1,0,0,1"))
            (rule "replaceKnownAuxiliaryConstant_taclet10_11" (formula "36") (term "0,1,1,0,0,1"))
            (rule "andLeft" (formula "36"))
            (rule "andLeft" (formula "37"))
            (rule "andLeft" (formula "37"))
            (rule "replace_known_left" (formula "37") (term "1") (ifseqformula "35"))
             (builtin "One Step Simplification" (formula "37"))
            (rule "assignment" (formula "46") (term "1"))
             (builtin "One Step Simplification" (formula "46"))
            (rule "applyEq" (formula "46") (term "0,1,0") (ifseqformula "37"))
            (rule "Class_invariant_axiom_for_java_util_CollectionIterator" (formula "38"))
            (rule "replaceKnownSelect_taclet10_7" (formula "38") (term "1,0"))
            (rule "replaceKnownSelect_taclet10_7" (formula "38") (term "0,1"))
            (rule "replaceKnownAuxiliaryConstant_taclet10_10" (formula "38") (term "1,0"))
            (rule "replaceKnownAuxiliaryConstant_taclet10_10" (formula "38") (term "0,1"))
            (rule "replaceKnownSelect_taclet10_8" (formula "38") (term "0,1,1"))
            (rule "replaceKnownAuxiliaryConstant_taclet10_11" (formula "38") (term "0,1,1"))
            (rule "andLeft" (formula "38"))
            (rule "inEqSimp_commuteLeq" (formula "38"))
            (rule "inEqSimp_commuteLeq" (formula "38"))
            (rule "equalityToSeqGetAndSeqLenLeft" (formula "23") (inst "iv=iv"))
            (rule "andLeft" (formula "23"))
            (rule "inEqSimp_commuteLeq" (formula "24") (term "0,0,0"))
            (rule "applyEq" (formula "24") (term "0,0,1,0") (ifseqformula "25"))
             (builtin "One Step Simplification" (formula "24"))
            (rule "true_left" (formula "24"))
            (rule "applyEq" (formula "23") (term "0,0") (ifseqformula "24"))
             (builtin "One Step Simplification" (formula "23"))
            (rule "true_left" (formula "23"))
            (rule "equalityToSeqGetAndSeqLenLeft" (formula "22") (inst "iv=iv"))
            (rule "andLeft" (formula "22"))
            (rule "inEqSimp_commuteLeq" (formula "23") (term "0,0,0"))
            (rule "applyEq" (formula "23") (term "0,1,1,0,0") (ifseqformula "24"))
            (rule "applyEq" (formula "23") (term "0,0,1,0") (ifseqformula "24"))
             (builtin "One Step Simplification" (formula "23"))
            (rule "true_left" (formula "23"))
            (rule "applyEq" (formula "22") (term "0,0") (ifseqformula "23"))
             (builtin "One Step Simplification" (formula "22"))
            (rule "true_left" (formula "22"))
            (rule "lenNonNegative" (formula "26") (term "1"))
            (rule "inEqSimp_commuteLeq" (formula "26"))
            (rule "lenNonNegative" (formula "27") (term "0"))
            (rule "inEqSimp_commuteLeq" (formula "27"))
            (rule "applyEq" (formula "27") (term "0") (ifseqformula "28"))
            (rule "equalityToSeqGetAndSeqLenLeft" (formula "30") (inst "iv=iv"))
            (rule "andLeft" (formula "30"))
            (rule "inEqSimp_commuteLeq" (formula "31") (term "0,0,0"))
            (rule "applyEq" (formula "31") (term "0,0,1,0") (ifseqformula "32"))
             (builtin "One Step Simplification" (formula "31"))
            (rule "true_left" (formula "31"))
            (rule "applyEq" (formula "30") (term "0,0") (ifseqformula "31"))
             (builtin "One Step Simplification" (formula "30"))
            (rule "true_left" (formula "30"))
            (rule "equalityToSeqGetAndSeqLenLeft" (formula "29") (inst "iv=iv"))
            (rule "andLeft" (formula "29"))
            (rule "inEqSimp_commuteLeq" (formula "30") (term "0,0,0"))
            (rule "applyEq" (formula "29") (term "0,0") (ifseqformula "31"))
             (builtin "One Step Simplification" (formula "29"))
            (rule "true_left" (formula "29"))
            (rule "applyEq" (formula "29") (term "0,0,1,0") (ifseqformula "30"))
             (builtin "One Step Simplification" (formula "29"))
            (rule "true_left" (formula "29"))
            (rule "onlyCreatedObjectsAreReferenced" (formula "45") (term "0") (ifseqformula "3"))
            (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "43"))
             (builtin "One Step Simplification" (formula "1"))
            (rule "onlyCreatedObjectsAreReferenced" (formula "46") (term "1") (ifseqformula "4"))
            (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "45"))
             (builtin "One Step Simplification" (formula "1"))
            (rule "replace_known_left" (formula "20") (term "0,0") (ifseqformula "1"))
             (builtin "One Step Simplification" (formula "20"))
            (rule "eqSymm" (formula "20"))
            (rule "replace_known_left" (formula "36") (term "0,0") (ifseqformula "1"))
             (builtin "One Step Simplification" (formula "36"))
            (rule "true_left" (formula "36"))
            (rule "applyEq" (formula "27") (term "0,0,0,1,0") (ifseqformula "20"))
            (rule "applyEq" (formula "37") (term "0,1") (ifseqformula "20"))
            (rule "applyEq" (formula "26") (term "0,1,0,0,0") (ifseqformula "20"))
            (rule "applyEq" (formula "35") (term "0,0") (ifseqformula "20"))
            (rule "applyEq" (formula "27") (term "0,1,0,0,0") (ifseqformula "20"))
            (rule "applyEq" (formula "26") (term "0,0,1,0,0,1,0") (ifseqformula "20"))
            (rule "applyEq" (formula "4") (term "0,0") (ifseqformula "20"))
            (rule "applyEq" (formula "45") (term "0,1,0,1,1,1,0,0,0") (ifseqformula "19"))
            (rule "onlyCreatedObjectsAreReferenced" (formula "40") (term "0") (ifseqformula "4"))
            (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "41"))
             (builtin "One Step Simplification" (formula "1"))
            (rule "replace_known_left" (formula "25") (term "0,0,0") (ifseqformula "1"))
             (builtin "One Step Simplification" (formula "25"))
            (rule "applyEqReverse" (formula "29") (term "0,0,0,1,0") (ifseqformula "25"))
            (rule "applyEqReverse" (formula "26") (term "0,1,0,0,0,1,0") (ifseqformula "25"))
            (rule "applyEqReverse" (formula "26") (term "0,1,1,0,0,1,0") (ifseqformula "25"))
            (rule "applyEqReverse" (formula "32") (term "0,1,0,0,0,0,0") (ifseqformula "25"))
            (rule "applyEqReverse" (formula "29") (term "0,1,0,0,0,0,0") (ifseqformula "25"))
            (rule "applyEqReverse" (formula "27") (term "0,0") (ifseqformula "25"))
            (rule "applyEqReverse" (formula "28") (term "0,1") (ifseqformula "25"))
            (rule "hideAuxiliaryEq" (formula "25"))
            (rule "replace_known_left" (formula "24") (term "0,0") (ifseqformula "1"))
             (builtin "One Step Simplification" (formula "24"))
            (rule "applyEqReverse" (formula "31") (term "0,1,0,0,0,0,0") (ifseqformula "24"))
            (rule "applyEqReverse" (formula "26") (term "0,0") (ifseqformula "24"))
            (rule "applyEqReverse" (formula "25") (term "0,1,1,0,0,1,0") (ifseqformula "24"))
            (rule "applyEqReverse" (formula "25") (term "0,1,0,0,0,1,0") (ifseqformula "24"))
            (rule "applyEqReverse" (formula "25") (term "0,1") (ifseqformula "24"))
            (rule "applyEqReverse" (formula "26") (term "0,0,0,1,0") (ifseqformula "24"))
            (rule "applyEqReverse" (formula "26") (term "0,1,0,0,0,0,0") (ifseqformula "24"))
            (rule "hideAuxiliaryEq" (formula "24"))
            (rule "replace_known_left" (formula "26") (term "0,0,0") (ifseqformula "1"))
             (builtin "One Step Simplification" (formula "26"))
            (rule "applyEqReverse" (formula "27") (term "0,0,0,1,0") (ifseqformula "26"))
            (rule "applyEqReverse" (formula "24") (term "0,0") (ifseqformula "26"))
            (rule "hideAuxiliaryEq" (formula "26"))
            (rule "replace_known_left" (formula "25") (term "0,0") (ifseqformula "1"))
             (builtin "One Step Simplification" (formula "25"))
            (rule "applyEqReverse" (formula "24") (term "0,0") (ifseqformula "25"))
            (rule "applyEqReverse" (formula "25") (term "0,0,0,1,0") (ifseqformula "24"))
            (rule "hideAuxiliaryEq" (formula "24"))
            (rule "ifSplit" (formula "37"))
            (branch "if x true"
                (builtin "One Step Simplification" (formula "38"))
                (builtin "One Step Simplification" (formula "1"))
               (rule "true_left" (formula "1"))
               (rule "methodCallUnfoldArguments" (formula "37") (term "1"))
               (rule "variableDeclarationAssign" (formula "37") (term "1"))
               (rule "variableDeclaration" (formula "37") (term "1") (newnames "var"))
               (rule "assignment_read_attribute_this" (formula "37") (term "1"))
                (builtin "One Step Simplification" (formula "37"))
               (rule "replaceKnownSelect_taclet10_12" (formula "37") (term "0,1,0"))
               (rule "replaceKnownAuxiliaryConstant_taclet10_13" (formula "37") (term "0,1,0"))
               (rule "variableDeclarationAssign" (formula "37") (term "1"))
               (rule "variableDeclaration" (formula "37") (term "1") (newnames "var_1"))
               (rule "compound_reference_cast_expression" (formula "37") (term "1") (inst "#v=o"))
               (rule "variableDeclarationAssign" (formula "37") (term "1"))
               (rule "variableDeclaration" (formula "37") (term "1") (newnames "o"))
                (builtin "Use Operation Contract" (formula "37") (newnames "heapBefore_next,result_2,exc_4,heapAfter_next,anon_heap_next") (contract "java.util.Iterator[java.util.Iterator::next()].JML normal_behavior operation contract.0"))
               (branch "Post (next)"
                   (builtin "One Step Simplification" (formula "31"))
                   (builtin "One Step Simplification" (formula "39"))
                  (rule "replaceKnownSelect_taclet10_7" (formula "31") (term "0,0,0,0,1,1"))
                  (rule "replaceKnownAuxiliaryConstant_taclet10_10" (formula "31") (term "0,0,0,0,1,1"))
                  (rule "replaceKnownSelect_taclet10_7" (formula "31") (term "0,0,0,1,0,1,1"))
                  (rule "replaceKnownAuxiliaryConstant_taclet10_10" (formula "31") (term "0,0,0,1,0,1,1"))
                  (rule "replaceKnownSelect_taclet10_7" (formula "31") (term "0,0,0,1,1,0,1,1"))
                  (rule "replaceKnownSelect_taclet10_7" (formula "31") (term "1,0,1,1,0,0,1,1"))
                  (rule "replaceKnownAuxiliaryConstant_taclet10_10" (formula "31") (term "0,0,0,1,1,0,1,1"))
                  (rule "replaceKnownAuxiliaryConstant_taclet10_10" (formula "31") (term "1,0,1,1,0,0,1,1"))
                  (rule "replaceKnownSelect_taclet10_7" (formula "31") (term "0,0,0,1,1,1,0,1,1"))
                  (rule "replaceKnownSelect_taclet10_7" (formula "31") (term "0,1,1,0,1,1,0,1,1"))
                  (rule "replaceKnownSelect_taclet10_7" (formula "31") (term "1,1,0,1,1,1,1,0,1,1"))
                  (rule "replaceKnownAuxiliaryConstant_taclet10_10" (formula "31") (term "0,0,0,1,1,1,0,1,1"))
                  (rule "replaceKnownSelect_taclet10_7" (formula "31") (term "0,0,0,1,1,1,1,0,1,1"))
                  (rule "replaceKnownAuxiliaryConstant_taclet10_10" (formula "31") (term "0,1,1,0,1,1,0,1,1"))
                  (rule "replaceKnownAuxiliaryConstant_taclet10_10" (formula "31") (term "1,1,0,1,1,1,1,0,1,1"))
                  (rule "replaceKnownAuxiliaryConstant_taclet10_10" (formula "31") (term "0,0,0,1,1,1,1,0,1,1"))
                  (rule "andLeft" (formula "31"))
                  (rule "selectCreatedOfAnonAsFormulaEQ" (formula "32") (term "1,1,0") (ifseqformula "31"))
                   (builtin "One Step Simplification" (formula "32"))
                  (rule "selectCreatedOfAnonAsFormulaEQ" (formula "32") (term "0,0,1,1,0") (ifseqformula "17"))
                  (rule "andLeft" (formula "32"))
                  (rule "andLeft" (formula "32"))
                  (rule "andLeft" (formula "34"))
                  (rule "andLeft" (formula "34"))
                  (rule "andLeft" (formula "35"))
                  (rule "andLeft" (formula "36"))
                  (rule "andLeft" (formula "37"))
                  (rule "andLeft" (formula "38"))
                  (rule "eqSymm" (formula "34") (term "1"))
                  (rule "eqSymm" (formula "37") (term "0"))
                  (rule "eqSymm" (formula "38") (term "0"))
                  (rule "polySimp_addComm0" (formula "36") (term "1,1"))
                  (rule "castedGetAny" (formula "34") (term "0,1"))
                  (rule "assignment" (formula "47") (term "1"))
                   (builtin "One Step Simplification" (formula "47"))
                  (rule "pullOutSelect" (formula "34") (term "0,1,0") (inst "selectSK=java_util_Iterator_seq_1"))
                  (rule "applyEq" (formula "37") (term "0,1,0") (ifseqformula "34"))
                  (rule "applyEq" (formula "36") (term "0,1,0") (ifseqformula "34"))
                  (rule "applyEq" (formula "39") (term "0,0,0") (ifseqformula "34"))
                  (rule "applyEq" (formula "38") (term "0,0,0") (ifseqformula "34"))
                  (rule "applyEq" (formula "35") (term "0,0,1") (ifseqformula "34"))
                  (rule "simplifySelectOfAnonEQ" (formula "34") (ifseqformula "31"))
                   (builtin "One Step Simplification" (formula "34") (ifInst ""  (formula "42")))
                  (rule "replaceKnownSelect_taclet10_8" (formula "34") (term "2,0"))
                  (rule "replaceKnownAuxiliaryConstant_taclet10_11" (formula "34") (term "2,0"))
                  (rule "selectCreatedOfAnonAsFormulaEQ" (formula "34") (term "0,0,1,0,0") (ifseqformula "17"))
                  (rule "replace_known_left" (formula "34") (term "1,0,0,1,0,0") (ifseqformula "18"))
                   (builtin "One Step Simplification" (formula "34") (ifInst ""  (formula "41")))
                  (rule "elementOfSingleton" (formula "34") (term "0,0"))
                   (builtin "One Step Simplification" (formula "34"))
                  (rule "applyEqReverse" (formula "36") (term "0,1,0") (ifseqformula "34"))
                  (rule "applyEqReverse" (formula "37") (term "0,1,0") (ifseqformula "34"))
                  (rule "applyEqReverse" (formula "39") (term "0,0,0") (ifseqformula "34"))
                  (rule "applyEqReverse" (formula "35") (term "0,1,0") (ifseqformula "34"))
                  (rule "applyEqReverse" (formula "38") (term "0,0,0") (ifseqformula "34"))
                  (rule "applyEqReverse" (formula "35") (term "0,0,1") (ifseqformula "34"))
                  (rule "hideAuxiliaryEq" (formula "34"))
                  (rule "applyEq" (formula "35") (term "0,1,0") (ifseqformula "20"))
                  (rule "replace_known_left" (formula "35") (term "0") (ifseqformula "27"))
                   (builtin "One Step Simplification" (formula "35"))
                  (rule "notLeft" (formula "35"))
                  (rule "replace_known_right" (formula "33") (term "0") (ifseqformula "39"))
                   (builtin "One Step Simplification" (formula "33"))
                  (rule "replace_known_right" (formula "36") (term "1") (ifseqformula "39"))
                   (builtin "One Step Simplification" (formula "36"))
                  (rule "notLeft" (formula "36"))
                  (rule "replace_known_right" (formula "36") (term "0") (ifseqformula "38"))
                   (builtin "One Step Simplification" (formula "36"))
                  (rule "true_left" (formula "36"))
                  (rule "applyEq" (formula "35") (term "0,1,0") (ifseqformula "20"))
                  (rule "replace_known_left" (formula "35") (term "0") (ifseqformula "27"))
                   (builtin "One Step Simplification" (formula "35"))
                  (rule "applyEq" (formula "34") (term "0,1,0") (ifseqformula "20"))
                  (rule "replace_known_left" (formula "34") (term "0") (ifseqformula "27"))
                   (builtin "One Step Simplification" (formula "34"))
                  (rule "applyEq" (formula "34") (term "0,0") (ifseqformula "20"))
                  (rule "applyEq" (formula "37") (term "0,0") (ifseqformula "20"))
                  (rule "pullOutSelect" (formula "35") (term "0") (inst "selectSK=java_util_Iterator_index_2"))
                  (rule "simplifySelectOfAnonEQ" (formula "35") (ifseqformula "31"))
                   (builtin "One Step Simplification" (formula "35") (ifInst ""  (formula "41")))
                  (rule "replaceKnownSelect_taclet10_7" (formula "35") (term "2,0"))
                  (rule "replaceKnownAuxiliaryConstant_taclet10_10" (formula "35") (term "2,0"))
                  (rule "selectCreatedOfAnonAsFormulaEQ" (formula "35") (term "0,0,1,0,0") (ifseqformula "17"))
                  (rule "replace_known_right" (formula "35") (term "0,0,0,1,0,0") (ifseqformula "40"))
                   (builtin "One Step Simplification" (formula "35") (ifInst ""  (formula "18")))
                  (rule "elementOfSingleton" (formula "35") (term "0,0"))
                   (builtin "One Step Simplification" (formula "35"))
                  (rule "applyEqReverse" (formula "36") (term "0") (ifseqformula "35"))
                  (rule "hideAuxiliaryEq" (formula "35"))
                  (rule "Class_invariant_axiom_for_java_util_CollectionIterator" (formula "36"))
                  (rule "replaceKnownSelect_taclet000010_30" (formula "36") (term "1,0"))
                  (rule "replaceKnownSelect_taclet000010_30" (formula "36") (term "0,1"))
                  (rule "replaceKnownAuxiliaryConstant_taclet000010_31" (formula "36") (term "1,0"))
                  (rule "replaceKnownAuxiliaryConstant_taclet000010_31" (formula "36") (term "0,1"))
                  (rule "replaceKnownSelect_taclet000010_28" (formula "36") (term "0,1,1"))
                  (rule "replaceKnownAuxiliaryConstant_taclet000010_29" (formula "36") (term "0,1,1"))
                  (rule "andLeft" (formula "36"))
                  (rule "inEqSimp_commuteLeq" (formula "37"))
                  (rule "inEqSimp_commuteLeq" (formula "36"))
                  (rule "applyEq" (formula "37") (term "0,0") (ifseqformula "20"))
                  (rule "applyEq" (formula "37") (term "1") (ifseqformula "35"))
                  (rule "applyEq" (formula "36") (term "0") (ifseqformula "35"))
                  (rule "commute_or_2" (formula "33") (term "0"))
                  (rule "reference_type_cast" (formula "47") (term "1"))
                  (branch "Normal Execution (o instanceof String)"
                      (builtin "One Step Simplification" (formula "48"))
                      (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "40")))
                     (rule "variableDeclarationAssign" (formula "48") (term "1"))
                     (rule "variableDeclaration" (formula "48") (term "1") (newnames "var_2"))
                     (rule "assignment_read_attribute_this" (formula "48") (term "1"))
                      (builtin "One Step Simplification" (formula "48"))
                     (rule "pullOutSelect" (formula "48") (term "0,1,0") (inst "selectSK=de_polyas_core3_open_cred_CredTool_record_1"))
                     (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "33"))
                      (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "47")))
                     (rule "replaceKnownSelect_taclet10_15" (formula "1") (term "2,0"))
                     (rule "replaceKnownAuxiliaryConstant_taclet10_19" (formula "1") (term "2,0"))
                     (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,0,1,0,0") (ifseqformula "19"))
                     (rule "replace_known_left" (formula "1") (term "0,0,0,1,0,0") (ifseqformula "8"))
                      (builtin "One Step Simplification" (formula "1"))
                     (rule "elementOfSingleton" (formula "1") (term "0,0"))
                      (builtin "One Step Simplification" (formula "1"))
                     (rule "applyEqReverse" (formula "49") (term "0,1,0") (ifseqformula "1"))
                     (rule "hideAuxiliaryEq" (formula "1"))
                     (rule "equalityToSeqGetAndSeqLenLeft" (formula "21") (inst "iv=iv"))
                     (rule "andLeft" (formula "21"))
                     (rule "inEqSimp_commuteLeq" (formula "22") (term "0,0,0"))
                     (rule "applyEq" (formula "22") (term "0,0,1,0") (ifseqformula "23"))
                      (builtin "One Step Simplification" (formula "22"))
                     (rule "true_left" (formula "22"))
                     (rule "applyEq" (formula "21") (term "0,0") (ifseqformula "22"))
                      (builtin "One Step Simplification" (formula "21"))
                     (rule "true_left" (formula "21"))
                      (builtin "Use Operation Contract" (formula "48") (newnames "heapBefore_addInputCol,exc_5,heapAfter_addInputCol,anon_heap_addInputCol") (contract "de.polyas.core3.open.cred.CredTool[de.polyas.core3.open.cred.CredTool::addInputCol(java.util.ArrayList,java.lang.String,org.apache.commons.csv.CSVRecord)].JML normal_behavior operation contract.0"))
                     (branch "Post (addInputCol)"
                         (builtin "One Step Simplification" (formula "50"))
                         (builtin "One Step Simplification" (formula "40"))
                        (rule "andLeft" (formula "40"))
                        (rule "andLeft" (formula "41"))
                        (rule "andLeft" (formula "42"))
                        (rule "andLeft" (formula "42"))
                        (rule "Class_invariant_axiom_for_org_apache_commons_csv_CSVRecord" (formula "42") (inst "i=i") (inst "i_0=i_0"))
                        (rule "expand_inInt" (formula "42") (term "1,0,0,1,0"))
                        (rule "expand_inInt" (formula "42") (term "1,0,0,1"))
                        (rule "replace_int_MAX" (formula "42") (term "1,0,1,0,0,1,0"))
                        (rule "replace_int_MIN" (formula "42") (term "0,1,1,0,0,1,0"))
                        (rule "replace_int_MAX" (formula "42") (term "1,0,1,0,0,1"))
                        (rule "replace_int_MIN" (formula "42") (term "0,1,1,0,0,1"))
                        (rule "andLeft" (formula "42"))
                        (rule "andLeft" (formula "42"))
                        (rule "eqSymm" (formula "42"))
                        (rule "castedGetAny" (formula "44") (term "0,0,1,0"))
                        (rule "castedGetAny" (formula "43") (term "0,0,1,0"))
                        (rule "inEqSimp_commuteLeq" (formula "44") (term "0,0,0,0"))
                        (rule "inEqSimp_commuteLeq" (formula "44") (term "1,1,0,0"))
                        (rule "inEqSimp_commuteLeq" (formula "43") (term "1,1,0,0"))
                        (rule "inEqSimp_commuteLeq" (formula "43") (term "0,0,0,0"))
                        (rule "pullOutSelect" (formula "44") (term "0,1,1,0,0,0") (inst "selectSK=org_apache_commons_csv_CSVRecord_value_seq_2"))
                        (rule "applyEq" (formula "42") (term "0,0") (ifseqformula "44"))
                        (rule "applyEq" (formula "45") (term "0,0,0,1,0") (ifseqformula "44"))
                        (rule "simplifySelectOfAnonEQ" (formula "44") (ifseqformula "40"))
                         (builtin "One Step Simplification" (formula "44") (ifInst ""  (formula "51")))
                        (rule "selectCreatedOfAnonAsFormulaEQ" (formula "44") (term "0,1,0,0") (ifseqformula "32"))
                         (builtin "One Step Simplification" (formula "44"))
                        (rule "selectCreatedOfAnonAsFormulaEQ" (formula "44") (term "0,0,0,1,0,0") (ifseqformula "18"))
                        (rule "eqSymm" (formula "42"))
                        (rule "replace_known_left" (formula "44") (term "0,0,0,0,1,0,0") (ifseqformula "2"))
                         (builtin "One Step Simplification" (formula "44"))
                        (rule "elementOfSingleton" (formula "44") (term "0,0"))
                         (builtin "One Step Simplification" (formula "44"))
                        (rule "simplifySelectOfAnonEQ" (formula "44") (ifseqformula "32"))
                         (builtin "One Step Simplification" (formula "44") (ifInst ""  (formula "51")))
                        (rule "replaceKnownSelect_taclet10_22" (formula "44") (term "2,0"))
                        (rule "replaceKnownAuxiliaryConstant_taclet0010_26" (formula "44") (term "2,0"))
                        (rule "replaceKnownAuxiliaryConstant_taclet0010_27" (formula "44") (term "2,0"))
                        (rule "selectCreatedOfAnonAsFormulaEQ" (formula "44") (term "0,0,1,0,0") (ifseqformula "18"))
                        (rule "replace_known_left" (formula "44") (term "0,0,0,1,0,0") (ifseqformula "2"))
                         (builtin "One Step Simplification" (formula "44"))
                        (rule "elementOfSingleton" (formula "44") (term "0,0"))
                         (builtin "One Step Simplification" (formula "44"))
                        (rule "applyEqReverse" (formula "42") (term "0,1") (ifseqformula "44"))
                        (rule "applyEqReverse" (formula "45") (term "0,0,0,1,0") (ifseqformula "44"))
                        (rule "applyEqReverse" (formula "45") (term "0,1,1,0,0,0") (ifseqformula "44"))
                        (rule "hideAuxiliaryEq" (formula "44"))
                        (rule "applyEq" (formula "44") (term "1,1,0,0,0") (ifseqformula "14"))
                        (rule "applyEq" (formula "42") (term "1") (ifseqformula "14"))
                        (rule "pullOutSelect" (formula "43") (term "0,1,1,0,0,0") (inst "selectSK=org_apache_commons_csv_CSVRecord_key_seq_2"))
                        (rule "applyEq" (formula "44") (term "0,0,0,1,0") (ifseqformula "43"))
                        (rule "applyEq" (formula "42") (term "0,0") (ifseqformula "43"))
                        (rule "simplifySelectOfAnonEQ" (formula "43") (ifseqformula "40"))
                         (builtin "One Step Simplification" (formula "43") (ifInst ""  (formula "51")))
                        (rule "selectCreatedOfAnonAsFormulaEQ" (formula "43") (term "0,1,0,0") (ifseqformula "32"))
                         (builtin "One Step Simplification" (formula "43"))
                        (rule "selectCreatedOfAnonAsFormulaEQ" (formula "43") (term "0,0,0,1,0,0") (ifseqformula "18"))
                        (rule "eqSymm" (formula "42"))
                        (rule "replace_known_left" (formula "43") (term "0,0,0,0,1,0,0") (ifseqformula "2"))
                         (builtin "One Step Simplification" (formula "43"))
                        (rule "elementOfSingleton" (formula "43") (term "0,0"))
                         (builtin "One Step Simplification" (formula "43"))
                        (rule "simplifySelectOfAnonEQ" (formula "43") (ifseqformula "32"))
                         (builtin "One Step Simplification" (formula "43") (ifInst ""  (formula "51")))
                        (rule "replaceKnownSelect_taclet10_20" (formula "43") (term "2,0"))
                        (rule "replaceKnownAuxiliaryConstant_taclet0010_24" (formula "43") (term "2,0"))
                        (rule "replaceKnownAuxiliaryConstant_taclet0010_25" (formula "43") (term "2,0"))
                        (rule "selectCreatedOfAnonAsFormulaEQ" (formula "43") (term "0,0,1,0,0") (ifseqformula "18"))
                        (rule "replace_known_left" (formula "43") (term "0,0,0,1,0,0") (ifseqformula "2"))
                         (builtin "One Step Simplification" (formula "43"))
                        (rule "elementOfSingleton" (formula "43") (term "0,0"))
                         (builtin "One Step Simplification" (formula "43"))
                        (rule "applyEqReverse" (formula "44") (term "0,1,1,0,0,0") (ifseqformula "43"))
                        (rule "applyEqReverse" (formula "44") (term "0,0,0,1,0") (ifseqformula "43"))
                        (rule "applyEqReverse" (formula "42") (term "0,1") (ifseqformula "43"))
                         (builtin "One Step Simplification" (formula "42"))
                        (rule "true_left" (formula "42"))
                        (rule "hideAuxiliaryEq" (formula "42"))
                        (rule "Class_invariant_axiom_for_java_util_ArrayList" (formula "44"))
                        (rule "true_left" (formula "44"))
                        (rule "commute_and" (formula "43") (term "1,0,0"))
                        (rule "commute_and" (formula "42") (term "1,0,0"))
                        (rule "commute_and" (formula "43") (term "0,0,0"))
                        (rule "tryEmpty" (formula "53") (term "1"))
                        (rule "commute_and" (formula "42") (term "0,0,0"))
                        (rule "shift_paren_and" (formula "43") (term "0,0"))
                        (rule "commute_and_2" (formula "43") (term "0,0,0"))
                        (rule "shift_paren_and" (formula "42") (term "0,0"))
                        (rule "commute_and_2" (formula "42") (term "0,0,0"))
                        (rule "methodCallEmpty" (formula "51") (term "1"))
                        (rule "emptyModality" (formula "51") (term "1"))
                         (builtin "One Step Simplification" (formula "51") (ifInst ""  (formula "45")) (ifInst ""  (formula "45")))
                        (rule "andRight" (formula "51"))
                        (branch
                           (rule "andRight" (formula "51"))
                           (branch
                              (rule "andRight" (formula "51"))
                              (branch
                                 (rule "andRight" (formula "51"))
                                 (branch
                                    (rule "andRight" (formula "51"))
                                    (branch
                                       (rule "andRight" (formula "51"))
                                       (branch
                                          (rule "andRight" (formula "51"))
                                          (branch
                                             (rule "andRight" (formula "51"))
                                             (branch
                                                (rule "andRight" (formula "51"))
                                                (branch
                                                   (rule "andRight" (formula "51"))
                                                   (branch
                                                      (rule "allRight" (formula "51") (inst "sk=j_0"))
                                                      (rule "impRight" (formula "51"))
                                                      (rule "andLeft" (formula "1"))
                                                      (rule "eqSymm" (formula "53") (term "1,0"))
                                                      (rule "inEqSimp_ltToLeq" (formula "13") (term "0,0,0"))
                                                      (rule "polySimp_mulComm0" (formula "13") (term "1,0,0,0,0,0"))
                                                      (rule "inEqSimp_ltToLeq" (formula "30"))
                                                      (rule "polySimp_mulComm0" (formula "30") (term "1,0,0"))
                                                      (rule "polySimp_addComm1" (formula "30") (term "0"))
                                                      (rule "inEqSimp_ltToLeq" (formula "18") (term "0,0,0,0,0"))
                                                      (rule "polySimp_mulComm0" (formula "18") (term "1,0,0,0,0,0,0,0"))
                                                      (rule "inEqSimp_ltToLeq" (formula "17") (term "0,0,0,0,0"))
                                                      (rule "polySimp_mulComm0" (formula "17") (term "1,0,0,0,0,0,0,0"))
                                                      (rule "inEqSimp_ltToLeq" (formula "14") (term "0,0,0"))
                                                      (rule "polySimp_mulComm0" (formula "14") (term "1,0,0,0,0,0"))
                                                      (rule "inEqSimp_ltToLeq" (formula "13") (term "0,0,0,1,0"))
                                                      (rule "polySimp_mulComm0" (formula "13") (term "1,0,0,0,0,0,1,0"))
                                                      (rule "inEqSimp_ltToLeq" (formula "53") (term "1,0,0"))
                                                      (rule "polySimp_mulComm0" (formula "53") (term "1,0,0,1,0,0"))
                                                      (rule "inEqSimp_ltToLeq" (formula "2"))
                                                      (rule "polySimp_mulComm0" (formula "2") (term "1,0,0"))
                                                      (rule "polySimp_addComm1" (formula "2") (term "0"))
                                                      (rule "inEqSimp_sepPosMonomial1" (formula "39"))
                                                      (rule "mul_literals" (formula "39") (term "1"))
                                                      (rule "inEqSimp_sepPosMonomial0" (formula "13") (term "0,0,0"))
                                                      (rule "polySimp_mulComm0" (formula "13") (term "1,0,0,0"))
                                                      (rule "polySimp_rightDist" (formula "13") (term "1,0,0,0"))
                                                      (rule "polySimp_mulLiterals" (formula "13") (term "1,1,0,0,0"))
                                                      (rule "mul_literals" (formula "13") (term "0,1,0,0,0"))
                                                      (rule "polySimp_elimOne" (formula "13") (term "1,1,0,0,0"))
                                                      (rule "inEqSimp_sepNegMonomial0" (formula "30"))
                                                      (rule "polySimp_mulLiterals" (formula "30") (term "0"))
                                                      (rule "polySimp_elimOne" (formula "30") (term "0"))
                                                      (rule "inEqSimp_sepPosMonomial0" (formula "18") (term "0,0,0,0,0"))
                                                      (rule "polySimp_mulComm0" (formula "18") (term "1,0,0,0,0,0"))
                                                      (rule "polySimp_rightDist" (formula "18") (term "1,0,0,0,0,0"))
                                                      (rule "mul_literals" (formula "18") (term "0,1,0,0,0,0,0"))
                                                      (rule "polySimp_mulLiterals" (formula "18") (term "1,1,0,0,0,0,0"))
                                                      (rule "polySimp_elimOne" (formula "18") (term "1,1,0,0,0,0,0"))
                                                      (rule "inEqSimp_sepPosMonomial0" (formula "17") (term "0,0,0,0,0"))
                                                      (rule "polySimp_mulComm0" (formula "17") (term "1,0,0,0,0,0"))
                                                      (rule "polySimp_rightDist" (formula "17") (term "1,0,0,0,0,0"))
                                                      (rule "mul_literals" (formula "17") (term "0,1,0,0,0,0,0"))
                                                      (rule "polySimp_mulLiterals" (formula "17") (term "1,1,0,0,0,0,0"))
                                                      (rule "polySimp_elimOne" (formula "17") (term "1,1,0,0,0,0,0"))
                                                      (rule "inEqSimp_sepPosMonomial0" (formula "14") (term "0,0,0"))
                                                      (rule "polySimp_mulComm0" (formula "14") (term "1,0,0,0"))
                                                      (rule "polySimp_rightDist" (formula "14") (term "1,0,0,0"))
                                                      (rule "polySimp_mulLiterals" (formula "14") (term "1,1,0,0,0"))
                                                      (rule "mul_literals" (formula "14") (term "0,1,0,0,0"))
                                                      (rule "polySimp_elimOne" (formula "14") (term "1,1,0,0,0"))
                                                      (rule "inEqSimp_sepPosMonomial0" (formula "13") (term "0,0,0,1,0"))
                                                      (rule "polySimp_mulComm0" (formula "13") (term "1,0,0,0,1,0"))
                                                      (rule "polySimp_rightDist" (formula "13") (term "1,0,0,0,1,0"))
                                                      (rule "mul_literals" (formula "13") (term "0,1,0,0,0,1,0"))
                                                      (rule "polySimp_mulLiterals" (formula "13") (term "1,1,0,0,0,1,0"))
                                                      (rule "polySimp_elimOne" (formula "13") (term "1,1,0,0,0,1,0"))
                                                      (rule "inEqSimp_sepPosMonomial0" (formula "52") (term "1,0,0"))
                                                      (rule "polySimp_mulComm0" (formula "52") (term "1,1,0,0"))
                                                      (rule "polySimp_rightDist" (formula "52") (term "1,1,0,0"))
                                                      (rule "polySimp_mulLiterals" (formula "52") (term "1,1,1,0,0"))
                                                      (rule "mul_literals" (formula "52") (term "0,1,1,0,0"))
                                                      (rule "polySimp_elimOne" (formula "52") (term "1,1,1,0,0"))
                                                      (rule "inEqSimp_sepNegMonomial0" (formula "2"))
                                                      (rule "polySimp_mulLiterals" (formula "2") (term "0"))
                                                      (rule "polySimp_elimOne" (formula "2") (term "0"))
                                                      (rule "inEqSimp_contradEq7" (formula "43") (ifseqformula "39"))
                                                      (rule "polySimp_mulComm0" (formula "43") (term "1,0,0"))
                                                      (rule "polySimp_pullOutFactor1b" (formula "43") (term "0,0"))
                                                      (rule "add_literals" (formula "43") (term "1,1,0,0"))
                                                      (rule "times_zero_1" (formula "43") (term "1,0,0"))
                                                      (rule "add_literals" (formula "43") (term "0,0"))
                                                      (rule "leq_literals" (formula "43") (term "0"))
                                                       (builtin "One Step Simplification" (formula "43"))
                                                      (rule "false_right" (formula "43"))
                                                      (rule "inEqSimp_subsumption1" (formula "28") (ifseqformula "39"))
                                                      (rule "inEqSimp_homoInEq0" (formula "28") (term "0"))
                                                      (rule "polySimp_pullOutFactor1b" (formula "28") (term "0,0"))
                                                      (rule "add_literals" (formula "28") (term "1,1,0,0"))
                                                      (rule "times_zero_1" (formula "28") (term "1,0,0"))
                                                      (rule "add_zero_right" (formula "28") (term "0,0"))
                                                      (rule "qeq_literals" (formula "28") (term "0"))
                                                       (builtin "One Step Simplification" (formula "28"))
                                                      (rule "true_left" (formula "28"))
                                                      (rule "inEqSimp_subsumption1" (formula "37") (ifseqformula "27"))
                                                      (rule "leq_literals" (formula "37") (term "0"))
                                                       (builtin "One Step Simplification" (formula "37"))
                                                      (rule "true_left" (formula "37"))
                                                      (rule "pullOutSelect" (formula "49") (term "1,0,0,1,0") (inst "selectSK=de_polyas_core3_open_cred_CredTool_record_2"))
                                                      (rule "applyEq" (formula "50") (term "1,0,1,1,1,0,0") (ifseqformula "1"))
                                                      (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "40"))
                                                       (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "48")))
                                                      (rule "replaceKnownSelect_taclet0000010_32" (formula "1") (term "2,0"))
                                                      (rule "replaceKnownAuxiliaryConstant_taclet0000010_33" (formula "1") (term "2,0"))
                                                      (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,1,0,0") (ifseqformula "33"))
                                                       (builtin "One Step Simplification" (formula "1"))
                                                      (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,0,0,1,0,0") (ifseqformula "21"))
                                                      (rule "replace_known_left" (formula "1") (term "0,0,0,0,1,0,0") (ifseqformula "10"))
                                                       (builtin "One Step Simplification" (formula "1"))
                                                      (rule "elementOfSingleton" (formula "1") (term "0,0"))
                                                       (builtin "One Step Simplification" (formula "1"))
                                                      (rule "applyEqReverse" (formula "50") (term "1,0,0,1,0") (ifseqformula "1"))
                                                      (rule "replaceKnownSelect_taclet00000010_37" (formula "50") (term "0,0,1,0"))
                                                      (rule "replaceKnownAuxiliaryConstant_taclet00000010_39" (formula "50") (term "0,0,1,0"))
                                                      (rule "applyEqReverse" (formula "50") (term "1,0,1,1,1,0,0") (ifseqformula "1"))
                                                      (rule "replaceKnownSelect_taclet00000010_37" (formula "50") (term "0,1,1,1,0,0"))
                                                      (rule "replaceKnownAuxiliaryConstant_taclet00000010_39" (formula "50") (term "0,1,1,1,0,0"))
                                                      (rule "hideAuxiliaryEq" (formula "1"))
                                                      (rule "pullOutSelect" (formula "49") (term "0,1,1,0") (inst "selectSK=java_util_Collection_seq_1"))
                                                      (rule "applyEq" (formula "3") (term "0,0") (ifseqformula "1"))
                                                      (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "40"))
                                                       (builtin "One Step Simplification" (formula "1"))
                                                      (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,1,1,0,0") (ifseqformula "33"))
                                                       (builtin "One Step Simplification" (formula "1"))
                                                      (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,0,0,1,1,0,0") (ifseqformula "21"))
                                                      (rule "elementOfSingleton" (formula "1") (term "0,0,0"))
                                                       (builtin "One Step Simplification" (formula "1"))
                                                      (rule "pullOutSelect" (formula "1") (term "2,0") (inst "selectSK=java_util_Collection_seq_2"))
                                                      (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "34"))
                                                       (builtin "One Step Simplification" (formula "1"))
                                                      (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,0,1,1,0,0") (ifseqformula "22"))
                                                      (rule "elementOfSingleton" (formula "1") (term "0,0,0"))
                                                       (builtin "One Step Simplification" (formula "1"))
                                                      (rule "pullOutSelect" (formula "2") (term "1,0,1,0,1,1,0,0") (inst "selectSK=de_polyas_core3_open_cred_CredTool_cols_1"))
                                                      (rule "applyEq" (formula "1") (term "1,0,1,0,0,1,0,0") (ifseqformula "2"))
                                                      (rule "applyEq" (formula "1") (term "1,0,0,0,0,1,0,0") (ifseqformula "2"))
                                                      (rule "applyEq" (formula "1") (term "1,1,0") (ifseqformula "2"))
                                                      (rule "applyEq" (formula "3") (term "1,1,0") (ifseqformula "2"))
                                                      (rule "applyEq" (formula "3") (term "1,0,1,0,0,1,1,0,0") (ifseqformula "2"))
                                                      (rule "applyEq" (formula "3") (term "1,0,1,0,0,0,1,1,0,0") (ifseqformula "2"))
                                                      (rule "applyEq" (formula "3") (term "0,0,0,0") (ifseqformula "2"))
                                                      (rule "applyEq" (formula "1") (term "1,0,1,0,1,0,0") (ifseqformula "2"))
                                                      (rule "applyEq" (formula "3") (term "1,0,0,0,0,0,1,1,0,0") (ifseqformula "2"))
                                                      (rule "applyEq" (formula "1") (term "1,2,0") (ifseqformula "2"))
                                                      (rule "applyEq" (formula "3") (term "0,0,0,1,0,0") (ifseqformula "2"))
                                                      (rule "applyEq" (formula "1") (term "0,0,0,0,0") (ifseqformula "2"))
                                                      (rule "simplifySelectOfAnonEQ" (formula "2") (ifseqformula "42"))
                                                       (builtin "One Step Simplification" (formula "2") (ifInst ""  (formula "50")))
                                                      (rule "selectCreatedOfAnonAsFormulaEQ" (formula "2") (term "0,1,0,0") (ifseqformula "35"))
                                                       (builtin "One Step Simplification" (formula "2"))
                                                      (rule "selectCreatedOfAnonAsFormulaEQ" (formula "2") (term "0,0,0,1,0,0") (ifseqformula "23"))
                                                      (rule "eqSymm" (formula "3") (term "0,0,0"))
                                                      (rule "replace_known_left" (formula "2") (term "0,0,0,0,1,0,0") (ifseqformula "12"))
                                                       (builtin "One Step Simplification" (formula "2"))
                                                      (rule "elementOfSingleton" (formula "2") (term "0,0"))
                                                       (builtin "One Step Simplification" (formula "2"))
                                                      (rule "simplifySelectOfAnonEQ" (formula "2") (ifseqformula "35"))
                                                       (builtin "One Step Simplification" (formula "2") (ifInst ""  (formula "50")))
                                                      (rule "replaceKnownSelect_taclet10_14" (formula "2") (term "2,0"))
                                                      (rule "replaceKnownAuxiliaryConstant_taclet10_17" (formula "2") (term "2,0"))
                                                      (rule "selectCreatedOfAnonAsFormulaEQ" (formula "2") (term "0,0,1,0,0") (ifseqformula "23"))
                                                      (rule "replace_known_left" (formula "2") (term "0,0,0,1,0,0") (ifseqformula "12"))
                                                       (builtin "One Step Simplification" (formula "2"))
                                                      (rule "elementOfSingleton" (formula "2") (term "0,0"))
                                                       (builtin "One Step Simplification" (formula "2"))
                                                      (rule "applyEqReverse" (formula "1") (term "1,0,0,0,0,1,0,0") (ifseqformula "2"))
                                                      (rule "applyEqReverse" (formula "3") (term "1,0,1,0,0,1,1,0,0") (ifseqformula "2"))
                                                      (rule "applyEqReverse" (formula "1") (term "1,0,1,0,0,1,0,0") (ifseqformula "2"))
                                                      (rule "applyEqReverse" (formula "1") (term "1,2,0") (ifseqformula "2"))
                                                      (rule "applyEqReverse" (formula "1") (term "0,0,0,0,0") (ifseqformula "2"))
                                                      (rule "applyEqReverse" (formula "3") (term "1,0,0,0") (ifseqformula "2"))
                                                      (rule "applyEqReverse" (formula "3") (term "0,0,0,1,0,0") (ifseqformula "2"))
                                                      (rule "applyEqReverse" (formula "3") (term "1,0,1,0,1,1,0,0") (ifseqformula "2"))
                                                      (rule "applyEqReverse" (formula "3") (term "1,1,0") (ifseqformula "2"))
                                                      (rule "applyEqReverse" (formula "1") (term "1,0,1,0,1,0,0") (ifseqformula "2"))
                                                      (rule "applyEqReverse" (formula "3") (term "1,0,0,0,0,0,1,1,0,0") (ifseqformula "2"))
                                                      (rule "applyEqReverse" (formula "1") (term "1,1,0") (ifseqformula "2"))
                                                      (rule "applyEqReverse" (formula "3") (term "1,0,1,0,0,0,1,1,0,0") (ifseqformula "2"))
                                                      (rule "hideAuxiliaryEq" (formula "2"))
                                                      (rule "replace_known_left" (formula "1") (term "0,0,0,1,0,0") (ifseqformula "7"))
                                                       (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "48")))
                                                      (rule "simplifySelectOfAnon" (formula "1"))
                                                       (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "48")))
                                                      (rule "replaceKnownSelect_taclet0_2" (formula "1") (term "2,0"))
                                                      (rule "replaceKnownAuxiliaryConstant_taclet0_4" (formula "1") (term "2,0"))
                                                      (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,1,0,0") (ifseqformula "22"))
                                                      (rule "replace_known_left" (formula "2") (term "0,0,0,0,1,1,0,0") (ifseqformula "7"))
                                                       (builtin "One Step Simplification" (formula "2") (ifInst ""  (formula "50")) (ifInst ""  (formula "48")))
                                                      (rule "applyEqReverse" (formula "4") (term "0,0") (ifseqformula "2"))
                                                      (rule "applyEqReverse" (formula "51") (term "0,1,1,0") (ifseqformula "2"))
                                                      (rule "hideAuxiliaryEq" (formula "2"))
                                                      (rule "replace_known_left" (formula "1") (term "0,0,1,0,0") (ifseqformula "6"))
                                                       (builtin "One Step Simplification" (formula "1"))
                                                      (rule "applyEq" (formula "1") (term "2,0") (ifseqformula "24"))
                                                      (rule "elementOfUnion" (formula "1") (term "0,0"))
                                                      (rule "elementOfSingleton" (formula "1") (term "0,0,0"))
                                                       (builtin "One Step Simplification" (formula "1"))
                                                      (rule "eqSymm" (formula "1") (term "0,0,0"))
                                                      (rule "replace_known_right" (formula "1") (term "0,0,0") (ifseqformula "49"))
                                                       (builtin "One Step Simplification" (formula "1"))
                                                      (rule "elementOfSingleton" (formula "1") (term "0,0"))
                                                       (builtin "One Step Simplification" (formula "1"))
                                                      (rule "applyEqReverse" (formula "3") (term "0,0") (ifseqformula "1"))
                                                      (rule "applyEqReverse" (formula "50") (term "0,1,1,0") (ifseqformula "1"))
                                                      (rule "hideAuxiliaryEq" (formula "1"))
                                                      (rule "inEqSimp_and_subsumption3" (formula "18") (term "0,0,0"))
                                                      (rule "leq_literals" (formula "18") (term "0,1,0,0,0,0"))
                                                       (builtin "One Step Simplification" (formula "18"))
                                                      (rule "inEqSimp_and_subsumption3" (formula "17") (term "0,0,0"))
                                                      (rule "leq_literals" (formula "17") (term "0,1,0,0,0,0"))
                                                       (builtin "One Step Simplification" (formula "17"))
                                                      (rule "nnf_imp2or" (formula "14") (term "0"))
                                                      (rule "nnf_imp2or" (formula "13") (term "0"))
                                                      (rule "nnf_ex2all" (formula "49"))
                                                      (rule "nnf_imp2or" (formula "19") (term "0"))
                                                      (rule "nnf_imp2or" (formula "18") (term "0"))
                                                      (rule "nnf_notAnd" (formula "1") (term "0"))
                                                      (rule "nnf_notAnd" (formula "15") (term "0,0"))
                                                      (rule "inEqSimp_notGeq" (formula "15") (term "1,0,0"))
                                                      (rule "mul_literals" (formula "15") (term "1,0,0,1,0,0"))
                                                      (rule "add_literals" (formula "15") (term "0,0,1,0,0"))
                                                      (rule "inEqSimp_sepPosMonomial0" (formula "15") (term "1,0,0"))
                                                      (rule "mul_literals" (formula "15") (term "1,1,0,0"))
                                                      (rule "inEqSimp_notLeq" (formula "15") (term "0,0,0"))
                                                      (rule "polySimp_rightDist" (formula "15") (term "1,0,0,0,0,0"))
                                                      (rule "mul_literals" (formula "15") (term "0,1,0,0,0,0,0"))
                                                      (rule "polySimp_addAssoc" (formula "15") (term "0,0,0,0,0"))
                                                      (rule "add_literals" (formula "15") (term "0,0,0,0,0,0"))
                                                      (rule "add_zero_left" (formula "15") (term "0,0,0,0,0"))
                                                      (rule "inEqSimp_sepPosMonomial1" (formula "15") (term "0,0,0"))
                                                      (rule "polySimp_mulLiterals" (formula "15") (term "1,0,0,0"))
                                                      (rule "polySimp_elimOne" (formula "15") (term "1,0,0,0"))
                                                      (rule "nnf_notAnd" (formula "14") (term "0,0"))
                                                      (rule "inEqSimp_notGeq" (formula "14") (term "1,0,0"))
                                                      (rule "mul_literals" (formula "14") (term "1,0,0,1,0,0"))
                                                      (rule "add_literals" (formula "14") (term "0,0,1,0,0"))
                                                      (rule "inEqSimp_sepPosMonomial0" (formula "14") (term "1,0,0"))
                                                      (rule "mul_literals" (formula "14") (term "1,1,0,0"))
                                                      (rule "inEqSimp_notLeq" (formula "14") (term "0,0,0"))
                                                      (rule "polySimp_rightDist" (formula "14") (term "1,0,0,0,0,0"))
                                                      (rule "mul_literals" (formula "14") (term "0,1,0,0,0,0,0"))
                                                      (rule "polySimp_addAssoc" (formula "14") (term "0,0,0,0,0"))
                                                      (rule "add_literals" (formula "14") (term "0,0,0,0,0,0"))
                                                      (rule "add_zero_left" (formula "14") (term "0,0,0,0,0"))
                                                      (rule "inEqSimp_sepPosMonomial1" (formula "14") (term "0,0,0"))
                                                      (rule "polySimp_mulLiterals" (formula "14") (term "1,0,0,0"))
                                                      (rule "polySimp_elimOne" (formula "14") (term "1,0,0,0"))
                                                      (rule "nnf_notAnd" (formula "19") (term "0,0"))
                                                      (rule "inEqSimp_notLeq" (formula "19") (term "1,0,0"))
                                                      (rule "mul_literals" (formula "19") (term "1,0,0,1,0,0"))
                                                      (rule "add_literals" (formula "19") (term "0,0,1,0,0"))
                                                      (rule "inEqSimp_sepPosMonomial1" (formula "19") (term "1,0,0"))
                                                      (rule "mul_literals" (formula "19") (term "1,1,0,0"))
                                                      (rule "nnf_notAnd" (formula "18") (term "0,0"))
                                                      (rule "inEqSimp_notLeq" (formula "18") (term "1,0,0"))
                                                      (rule "mul_literals" (formula "18") (term "1,0,0,1,0,0"))
                                                      (rule "add_literals" (formula "18") (term "0,0,1,0,0"))
                                                      (rule "inEqSimp_sepPosMonomial1" (formula "18") (term "1,0,0"))
                                                      (rule "mul_literals" (formula "18") (term "1,1,0,0"))
                                                      (rule "nnf_notAnd" (formula "1") (term "0,0"))
                                                      (rule "inEqSimp_notGeq" (formula "1") (term "0,0,0"))
                                                      (rule "times_zero_1" (formula "1") (term "1,0,0,0,0,0"))
                                                      (rule "add_literals" (formula "1") (term "0,0,0,0,0"))
                                                      (rule "inEqSimp_sepPosMonomial0" (formula "1") (term "0,0,0"))
                                                      (rule "mul_literals" (formula "1") (term "1,0,0,0"))
                                                      (rule "inEqSimp_notLeq" (formula "1") (term "1,0,0"))
                                                      (rule "polySimp_rightDist" (formula "1") (term "1,0,0,1,0,0"))
                                                      (rule "mul_literals" (formula "1") (term "0,1,0,0,1,0,0"))
                                                      (rule "polySimp_addAssoc" (formula "1") (term "0,0,1,0,0"))
                                                      (rule "add_literals" (formula "1") (term "0,0,0,1,0,0"))
                                                      (rule "add_zero_left" (formula "1") (term "0,0,1,0,0"))
                                                      (rule "inEqSimp_sepPosMonomial1" (formula "1") (term "1,0,0"))
                                                      (rule "polySimp_mulLiterals" (formula "1") (term "1,1,0,0"))
                                                      (rule "polySimp_elimOne" (formula "1") (term "1,1,0,0"))
                                                      (rule "nnf_notAnd" (formula "19") (term "0,0,0"))
                                                      (rule "inEqSimp_notLeq" (formula "19") (term "0,0,0,0"))
                                                      (rule "polySimp_rightDist" (formula "19") (term "1,0,0,0,0,0,0"))
                                                      (rule "mul_literals" (formula "19") (term "0,1,0,0,0,0,0,0"))
                                                      (rule "polySimp_addAssoc" (formula "19") (term "0,0,0,0,0,0"))
                                                      (rule "add_literals" (formula "19") (term "0,0,0,0,0,0,0"))
                                                      (rule "add_zero_left" (formula "19") (term "0,0,0,0,0,0"))
                                                      (rule "inEqSimp_sepPosMonomial1" (formula "19") (term "0,0,0,0"))
                                                      (rule "polySimp_mulLiterals" (formula "19") (term "1,0,0,0,0"))
                                                      (rule "polySimp_elimOne" (formula "19") (term "1,0,0,0,0"))
                                                      (rule "inEqSimp_notGeq" (formula "19") (term "1,0,0,0"))
                                                      (rule "mul_literals" (formula "19") (term "1,0,0,1,0,0,0"))
                                                      (rule "add_literals" (formula "19") (term "0,0,1,0,0,0"))
                                                      (rule "inEqSimp_sepPosMonomial0" (formula "19") (term "1,0,0,0"))
                                                      (rule "mul_literals" (formula "19") (term "1,1,0,0,0"))
                                                      (rule "nnf_notAnd" (formula "18") (term "0,0,0"))
                                                      (rule "inEqSimp_notGeq" (formula "18") (term "1,0,0,0"))
                                                      (rule "times_zero_1" (formula "18") (term "1,0,0,1,0,0,0"))
                                                      (rule "add_literals" (formula "18") (term "0,0,1,0,0,0"))
                                                      (rule "inEqSimp_sepPosMonomial0" (formula "18") (term "1,0,0,0"))
                                                      (rule "mul_literals" (formula "18") (term "1,1,0,0,0"))
                                                      (rule "inEqSimp_notLeq" (formula "18") (term "0,0,0,0"))
                                                      (rule "polySimp_rightDist" (formula "18") (term "1,0,0,0,0,0,0"))
                                                      (rule "mul_literals" (formula "18") (term "0,1,0,0,0,0,0,0"))
                                                      (rule "polySimp_addAssoc" (formula "18") (term "0,0,0,0,0,0"))
                                                      (rule "add_literals" (formula "18") (term "0,0,0,0,0,0,0"))
                                                      (rule "add_zero_left" (formula "18") (term "0,0,0,0,0,0"))
                                                      (rule "inEqSimp_sepPosMonomial1" (formula "18") (term "0,0,0,0"))
                                                      (rule "polySimp_mulLiterals" (formula "18") (term "1,0,0,0,0"))
                                                      (rule "polySimp_elimOne" (formula "18") (term "1,0,0,0,0"))
                                                      (rule "commute_or_2" (formula "15") (term "0"))
                                                      (rule "commute_or" (formula "14") (term "0,0"))
                                                      (rule "commute_or_2" (formula "1") (term "0"))
                                                      (rule "commute_or_2" (formula "19") (term "0"))
                                                      (rule "commute_or_2" (formula "18") (term "0"))
                                                      (rule "commute_and" (formula "14") (term "0,0,1,0"))
                                                      (rule "commute_or" (formula "15") (term "0,0"))
                                                      (rule "commute_or_2" (formula "15") (term "0"))
                                                      (rule "commute_or" (formula "1") (term "0,0"))
                                                      (rule "commute_or_2" (formula "19") (term "0,0"))
                                                      (rule "commute_or_2" (formula "18") (term "0,0"))
                                                      (rule "cut_direct" (formula "35") (term "0,0,0"))
                                                      (branch "CUT: result_2.<created> = TRUE TRUE"
                                                          (builtin "One Step Simplification" (formula "36"))
                                                         (rule "true_left" (formula "36"))
                                                         (rule "seqGetAlphaCast" (formula "36") (term "0"))
                                                         (rule "castedGetAny" (formula "36") (term "0"))
                                                          (builtin "One Step Simplification" (formula "36"))
                                                         (rule "true_left" (formula "36"))
                                                         (rule "commute_or" (formula "19") (term "0,0,0"))
                                                         (rule "commute_or_2" (formula "19") (term "0,0"))
                                                         (rule "commute_or_2" (formula "19") (term "0"))
                                                         (rule "commute_or" (formula "18") (term "0,0,0"))
                                                         (rule "commute_or_2" (formula "18") (term "0,0"))
                                                         (rule "commute_or_2" (formula "18") (term "0"))
                                                         (rule "commute_and_2" (formula "14") (term "0,1,0"))
                                                         (rule "ex_pull_out3" (formula "14") (term "0"))
                                                         (rule "cnf_rightDist" (formula "14") (term "0,0"))
                                                         (rule "shift_paren_or" (formula "14") (term "1,0,0"))
                                                         (rule "cnf_rightDist" (formula "14") (term "0,0,0"))
                                                         (rule "commute_or_2" (formula "14") (term "0,0,0,0"))
                                                         (rule "shift_paren_or" (formula "14") (term "1,0,0,0"))
                                                         (rule "commute_or" (formula "14") (term "0,0,0,0,0"))
                                                         (rule "commute_and" (formula "14") (term "0,0,0"))
                                                         (rule "commute_and_2" (formula "14") (term "0,0"))
                                                         (rule "allLeft" (formula "15") (inst "t=j_0"))
                                                         (rule "inEqSimp_commuteGeq" (formula "15") (term "1"))
                                                         (rule "inEqSimp_contradInEq1" (formula "15") (term "1") (ifseqformula "3"))
                                                         (rule "inEqSimp_homoInEq1" (formula "15") (term "0,1"))
                                                         (rule "polySimp_pullOutFactor1b" (formula "15") (term "0,0,1"))
                                                         (rule "add_literals" (formula "15") (term "1,1,0,0,1"))
                                                         (rule "times_zero_1" (formula "15") (term "1,0,0,1"))
                                                         (rule "add_zero_right" (formula "15") (term "0,0,1"))
                                                         (rule "leq_literals" (formula "15") (term "0,1"))
                                                          (builtin "One Step Simplification" (formula "15"))
                                                         (rule "inEqSimp_contradInEq1" (formula "15") (term "1") (ifseqformula "2"))
                                                         (rule "qeq_literals" (formula "15") (term "0,1"))
                                                          (builtin "One Step Simplification" (formula "15"))
                                                         (rule "notLeft" (formula "15"))
                                                         (rule "allLeft" (formula "14") (inst "t=j_0"))
                                                         (rule "exLeft" (formula "14") (inst "sk=i_0"))
                                                         (rule "andLeft" (formula "14"))
                                                         (rule "andLeft" (formula "14"))
                                                         (rule "eqSymm" (formula "16") (term "0,0"))
                                                         (rule "inEqSimp_commuteGeq" (formula "16") (term "1"))
                                                         (rule "inEqSimp_commuteGeq" (formula "15") (term "1"))
                                                         (rule "inEqSimp_commuteGeq" (formula "14") (term "1"))
                                                         (rule "inEqSimp_homoInEq0" (formula "15") (term "0,0"))
                                                         (rule "polySimp_addComm1" (formula "15") (term "0,0,0"))
                                                         (rule "inEqSimp_sepPosMonomial1" (formula "15") (term "0,0"))
                                                         (rule "polySimp_mulComm0" (formula "15") (term "1,0,0"))
                                                         (rule "polySimp_rightDist" (formula "15") (term "1,0,0"))
                                                         (rule "mul_literals" (formula "15") (term "0,1,0,0"))
                                                         (rule "polySimp_mulLiterals" (formula "15") (term "1,1,0,0"))
                                                         (rule "polySimp_elimOne" (formula "15") (term "1,1,0,0"))
                                                         (rule "inEqSimp_contradInEq1" (formula "16") (term "1") (ifseqformula "3"))
                                                         (rule "inEqSimp_homoInEq1" (formula "16") (term "0,1"))
                                                         (rule "polySimp_pullOutFactor1b" (formula "16") (term "0,0,1"))
                                                         (rule "add_literals" (formula "16") (term "1,1,0,0,1"))
                                                         (rule "times_zero_1" (formula "16") (term "1,0,0,1"))
                                                         (rule "add_literals" (formula "16") (term "0,0,1"))
                                                         (rule "leq_literals" (formula "16") (term "0,1"))
                                                          (builtin "One Step Simplification" (formula "16"))
                                                         (rule "inEqSimp_contradInEq1" (formula "14") (term "1") (ifseqformula "3"))
                                                         (rule "inEqSimp_homoInEq1" (formula "14") (term "0,1"))
                                                         (rule "polySimp_pullOutFactor1b" (formula "14") (term "0,0,1"))
                                                         (rule "add_literals" (formula "14") (term "1,1,0,0,1"))
                                                         (rule "times_zero_1" (formula "14") (term "1,0,0,1"))
                                                         (rule "add_literals" (formula "14") (term "0,0,1"))
                                                         (rule "leq_literals" (formula "14") (term "0,1"))
                                                          (builtin "One Step Simplification" (formula "14"))
                                                         (rule "inEqSimp_contradInEq1" (formula "15") (term "1") (ifseqformula "3"))
                                                         (rule "inEqSimp_homoInEq1" (formula "15") (term "0,1"))
                                                         (rule "polySimp_pullOutFactor1b" (formula "15") (term "0,0,1"))
                                                         (rule "add_literals" (formula "15") (term "1,1,0,0,1"))
                                                         (rule "times_zero_1" (formula "15") (term "1,0,0,1"))
                                                         (rule "add_zero_right" (formula "15") (term "0,0,1"))
                                                         (rule "leq_literals" (formula "15") (term "0,1"))
                                                          (builtin "One Step Simplification" (formula "15"))
                                                         (rule "inEqSimp_contradInEq1" (formula "15") (term "1") (ifseqformula "2"))
                                                         (rule "qeq_literals" (formula "15") (term "0,1"))
                                                          (builtin "One Step Simplification" (formula "15"))
                                                         (rule "inEqSimp_contradInEq1" (formula "16") (term "1") (ifseqformula "2"))
                                                         (rule "qeq_literals" (formula "16") (term "0,1"))
                                                          (builtin "One Step Simplification" (formula "16"))
                                                         (rule "inEqSimp_contradInEq1" (formula "14") (term "1") (ifseqformula "2"))
                                                         (rule "qeq_literals" (formula "14") (term "0,1"))
                                                          (builtin "One Step Simplification" (formula "14"))
                                                         (rule "allLeft" (formula "1") (inst "t=i_0"))
                                                         (rule "replace_known_left" (formula "1") (term "0,0,0") (ifseqformula "17"))
                                                          (builtin "One Step Simplification" (formula "1"))
                                                         (rule "inEqSimp_commuteGeq" (formula "1") (term "1"))
                                                         (rule "inEqSimp_contradInEq1" (formula "1") (term "1") (ifseqformula "16"))
                                                         (rule "inEqSimp_homoInEq1" (formula "1") (term "0,1"))
                                                         (rule "polySimp_pullOutFactor1b" (formula "1") (term "0,0,1"))
                                                         (rule "add_literals" (formula "1") (term "1,1,0,0,1"))
                                                         (rule "times_zero_1" (formula "1") (term "1,0,0,1"))
                                                         (rule "add_literals" (formula "1") (term "0,0,1"))
                                                         (rule "leq_literals" (formula "1") (term "0,1"))
                                                          (builtin "One Step Simplification" (formula "1"))
                                                         (rule "inEqSimp_contradInEq0" (formula "15") (ifseqformula "1"))
                                                         (rule "qeq_literals" (formula "15") (term "0"))
                                                          (builtin "One Step Simplification" (formula "15"))
                                                         (rule "closeFalse" (formula "15"))
                                                      )
                                                      (branch "CUT: result_2.<created> = TRUE FALSE"
                                                          (builtin "One Step Simplification" (formula "35"))
                                                         (rule "seqGetAlphaCast" (formula "36") (term "0"))
                                                         (rule "castedGetAny" (formula "36") (term "0"))
                                                          (builtin "One Step Simplification" (formula "36"))
                                                         (rule "true_left" (formula "36"))
                                                         (rule "commute_or" (formula "19") (term "0,0,0"))
                                                         (rule "commute_or_2" (formula "19") (term "0,0"))
                                                         (rule "commute_or_2" (formula "19") (term "0"))
                                                         (rule "commute_or" (formula "18") (term "0,0,0"))
                                                         (rule "commute_or_2" (formula "18") (term "0,0"))
                                                         (rule "commute_or_2" (formula "18") (term "0"))
                                                         (rule "commute_and_2" (formula "14") (term "0,1,0"))
                                                         (rule "ex_pull_out3" (formula "14") (term "0"))
                                                         (rule "cnf_rightDist" (formula "14") (term "0,0"))
                                                         (rule "shift_paren_or" (formula "14") (term "1,0,0"))
                                                         (rule "cnf_rightDist" (formula "14") (term "0,0,0"))
                                                         (rule "commute_or_2" (formula "14") (term "0,0,0,0"))
                                                         (rule "shift_paren_or" (formula "14") (term "1,0,0,0"))
                                                         (rule "commute_or" (formula "14") (term "0,0,0,0,0"))
                                                         (rule "commute_and" (formula "14") (term "0,0,0"))
                                                         (rule "commute_and_2" (formula "14") (term "0,0"))
                                                         (rule "allLeft" (formula "15") (inst "t=j_0"))
                                                         (rule "inEqSimp_commuteGeq" (formula "15") (term "1"))
                                                         (rule "inEqSimp_contradInEq1" (formula "15") (term "1,0") (ifseqformula "2"))
                                                         (rule "qeq_literals" (formula "15") (term "0,1,0"))
                                                          (builtin "One Step Simplification" (formula "15"))
                                                         (rule "inEqSimp_contradInEq1" (formula "15") (term "1") (ifseqformula "3"))
                                                         (rule "inEqSimp_homoInEq1" (formula "15") (term "0,1"))
                                                         (rule "polySimp_pullOutFactor1b" (formula "15") (term "0,0,1"))
                                                         (rule "add_literals" (formula "15") (term "1,1,0,0,1"))
                                                         (rule "times_zero_1" (formula "15") (term "1,0,0,1"))
                                                         (rule "add_literals" (formula "15") (term "0,0,1"))
                                                         (rule "leq_literals" (formula "15") (term "0,1"))
                                                          (builtin "One Step Simplification" (formula "15"))
                                                         (rule "notLeft" (formula "15"))
                                                         (rule "allLeft" (formula "14") (inst "t=j_0"))
                                                         (rule "exLeft" (formula "14") (inst "sk=i_0"))
                                                         (rule "andLeft" (formula "14"))
                                                         (rule "andLeft" (formula "14"))
                                                         (rule "eqSymm" (formula "16") (term "0,0"))
                                                         (rule "inEqSimp_commuteGeq" (formula "16") (term "1"))
                                                         (rule "inEqSimp_commuteGeq" (formula "15") (term "1"))
                                                         (rule "inEqSimp_commuteGeq" (formula "14") (term "1"))
                                                         (rule "inEqSimp_homoInEq0" (formula "15") (term "0,0"))
                                                         (rule "polySimp_addComm1" (formula "15") (term "0,0,0"))
                                                         (rule "inEqSimp_sepPosMonomial1" (formula "15") (term "0,0"))
                                                         (rule "polySimp_mulComm0" (formula "15") (term "1,0,0"))
                                                         (rule "polySimp_rightDist" (formula "15") (term "1,0,0"))
                                                         (rule "polySimp_mulLiterals" (formula "15") (term "1,1,0,0"))
                                                         (rule "mul_literals" (formula "15") (term "0,1,0,0"))
                                                         (rule "polySimp_elimOne" (formula "15") (term "1,1,0,0"))
                                                         (rule "inEqSimp_contradInEq1" (formula "14") (term "1,0") (ifseqformula "2"))
                                                         (rule "qeq_literals" (formula "14") (term "0,1,0"))
                                                          (builtin "One Step Simplification" (formula "14"))
                                                         (rule "inEqSimp_contradInEq1" (formula "16") (term "1,0") (ifseqformula "2"))
                                                         (rule "qeq_literals" (formula "16") (term "0,1,0"))
                                                          (builtin "One Step Simplification" (formula "16"))
                                                         (rule "inEqSimp_contradInEq1" (formula "15") (term "1,0") (ifseqformula "2"))
                                                         (rule "qeq_literals" (formula "15") (term "0,1,0"))
                                                          (builtin "One Step Simplification" (formula "15"))
                                                         (rule "inEqSimp_contradInEq1" (formula "15") (term "1") (ifseqformula "3"))
                                                         (rule "inEqSimp_homoInEq1" (formula "15") (term "0,1"))
                                                         (rule "polySimp_pullOutFactor1b" (formula "15") (term "0,0,1"))
                                                         (rule "add_literals" (formula "15") (term "1,1,0,0,1"))
                                                         (rule "times_zero_1" (formula "15") (term "1,0,0,1"))
                                                         (rule "add_literals" (formula "15") (term "0,0,1"))
                                                         (rule "leq_literals" (formula "15") (term "0,1"))
                                                          (builtin "One Step Simplification" (formula "15"))
                                                         (rule "inEqSimp_contradInEq1" (formula "14") (term "1") (ifseqformula "3"))
                                                         (rule "inEqSimp_homoInEq1" (formula "14") (term "0,1"))
                                                         (rule "polySimp_pullOutFactor1b" (formula "14") (term "0,0,1"))
                                                         (rule "add_literals" (formula "14") (term "1,1,0,0,1"))
                                                         (rule "times_zero_1" (formula "14") (term "1,0,0,1"))
                                                         (rule "add_literals" (formula "14") (term "0,0,1"))
                                                         (rule "leq_literals" (formula "14") (term "0,1"))
                                                          (builtin "One Step Simplification" (formula "14"))
                                                         (rule "inEqSimp_contradInEq1" (formula "16") (term "1") (ifseqformula "3"))
                                                         (rule "inEqSimp_homoInEq1" (formula "16") (term "0,1"))
                                                         (rule "polySimp_pullOutFactor1b" (formula "16") (term "0,0,1"))
                                                         (rule "add_literals" (formula "16") (term "1,1,0,0,1"))
                                                         (rule "times_zero_1" (formula "16") (term "1,0,0,1"))
                                                         (rule "add_zero_right" (formula "16") (term "0,0,1"))
                                                         (rule "leq_literals" (formula "16") (term "0,1"))
                                                          (builtin "One Step Simplification" (formula "16"))
                                                         (rule "allLeft" (formula "1") (inst "t=i_0"))
                                                         (rule "replace_known_left" (formula "1") (term "0,0,0") (ifseqformula "17"))
                                                          (builtin "One Step Simplification" (formula "1"))
                                                         (rule "inEqSimp_commuteGeq" (formula "1") (term "1"))
                                                         (rule "inEqSimp_contradInEq1" (formula "1") (term "0") (ifseqformula "15"))
                                                         (rule "qeq_literals" (formula "1") (term "0,0"))
                                                          (builtin "One Step Simplification" (formula "1"))
                                                         (rule "inEqSimp_contradInEq1" (formula "1") (ifseqformula "16"))
                                                         (rule "andLeft" (formula "1"))
                                                         (rule "inEqSimp_homoInEq1" (formula "1"))
                                                         (rule "polySimp_pullOutFactor1b" (formula "1") (term "0"))
                                                         (rule "add_literals" (formula "1") (term "1,1,0"))
                                                         (rule "times_zero_1" (formula "1") (term "1,0"))
                                                         (rule "add_literals" (formula "1") (term "0"))
                                                         (rule "leq_literals" (formula "1"))
                                                         (rule "closeFalse" (formula "1"))
                                                      )
                                                   )
                                                   (branch
                                                      (rule "allRight" (formula "51") (inst "sk=i_0"))
                                                      (rule "impRight" (formula "51"))
                                                      (rule "notRight" (formula "52"))
                                                      (rule "andLeft" (formula "2"))
                                                      (rule "inEqSimp_ltToLeq" (formula "18") (term "0,0,0,0,0"))
                                                      (rule "polySimp_mulComm0" (formula "18") (term "1,0,0,0,0,0,0,0"))
                                                      (rule "inEqSimp_ltToLeq" (formula "14") (term "0,0,0,1,0"))
                                                      (rule "polySimp_mulComm0" (formula "14") (term "1,0,0,0,0,0,1,0"))
                                                      (rule "inEqSimp_ltToLeq" (formula "19") (term "0,0,0,0,0"))
                                                      (rule "polySimp_mulComm0" (formula "19") (term "1,0,0,0,0,0,0,0"))
                                                      (rule "inEqSimp_ltToLeq" (formula "31"))
                                                      (rule "polySimp_mulComm0" (formula "31") (term "1,0,0"))
                                                      (rule "polySimp_addComm1" (formula "31") (term "0"))
                                                      (rule "inEqSimp_ltToLeq" (formula "15") (term "0,0,0"))
                                                      (rule "polySimp_mulComm0" (formula "15") (term "1,0,0,0,0,0"))
                                                      (rule "inEqSimp_ltToLeq" (formula "14") (term "0,0,0"))
                                                      (rule "polySimp_mulComm0" (formula "14") (term "1,0,0,0,0,0"))
                                                      (rule "inEqSimp_ltToLeq" (formula "3"))
                                                      (rule "polySimp_mulComm0" (formula "3") (term "1,0,0"))
                                                      (rule "polySimp_addComm1" (formula "3") (term "0"))
                                                      (rule "inEqSimp_sepPosMonomial1" (formula "40"))
                                                      (rule "mul_literals" (formula "40") (term "1"))
                                                      (rule "inEqSimp_sepPosMonomial0" (formula "18") (term "0,0,0,0,0"))
                                                      (rule "polySimp_mulComm0" (formula "18") (term "1,0,0,0,0,0"))
                                                      (rule "polySimp_rightDist" (formula "18") (term "1,0,0,0,0,0"))
                                                      (rule "polySimp_mulLiterals" (formula "18") (term "1,1,0,0,0,0,0"))
                                                      (rule "mul_literals" (formula "18") (term "0,1,0,0,0,0,0"))
                                                      (rule "polySimp_elimOne" (formula "18") (term "1,1,0,0,0,0,0"))
                                                      (rule "inEqSimp_sepPosMonomial0" (formula "14") (term "0,0,0,1,0"))
                                                      (rule "polySimp_mulComm0" (formula "14") (term "1,0,0,0,1,0"))
                                                      (rule "polySimp_rightDist" (formula "14") (term "1,0,0,0,1,0"))
                                                      (rule "polySimp_mulLiterals" (formula "14") (term "1,1,0,0,0,1,0"))
                                                      (rule "mul_literals" (formula "14") (term "0,1,0,0,0,1,0"))
                                                      (rule "polySimp_elimOne" (formula "14") (term "1,1,0,0,0,1,0"))
                                                      (rule "inEqSimp_sepPosMonomial0" (formula "19") (term "0,0,0,0,0"))
                                                      (rule "polySimp_mulComm0" (formula "19") (term "1,0,0,0,0,0"))
                                                      (rule "polySimp_rightDist" (formula "19") (term "1,0,0,0,0,0"))
                                                      (rule "polySimp_mulLiterals" (formula "19") (term "1,1,0,0,0,0,0"))
                                                      (rule "mul_literals" (formula "19") (term "0,1,0,0,0,0,0"))
                                                      (rule "polySimp_elimOne" (formula "19") (term "1,1,0,0,0,0,0"))
                                                      (rule "inEqSimp_sepNegMonomial0" (formula "31"))
                                                      (rule "polySimp_mulLiterals" (formula "31") (term "0"))
                                                      (rule "polySimp_elimOne" (formula "31") (term "0"))
                                                      (rule "inEqSimp_sepPosMonomial0" (formula "15") (term "0,0,0"))
                                                      (rule "polySimp_mulComm0" (formula "15") (term "1,0,0,0"))
                                                      (rule "polySimp_rightDist" (formula "15") (term "1,0,0,0"))
                                                      (rule "polySimp_mulLiterals" (formula "15") (term "1,1,0,0,0"))
                                                      (rule "mul_literals" (formula "15") (term "0,1,0,0,0"))
                                                      (rule "polySimp_elimOne" (formula "15") (term "1,1,0,0,0"))
                                                      (rule "inEqSimp_sepPosMonomial0" (formula "14") (term "0,0,0"))
                                                      (rule "polySimp_mulComm0" (formula "14") (term "1,0,0,0"))
                                                      (rule "polySimp_rightDist" (formula "14") (term "1,0,0,0"))
                                                      (rule "polySimp_mulLiterals" (formula "14") (term "1,1,0,0,0"))
                                                      (rule "mul_literals" (formula "14") (term "0,1,0,0,0"))
                                                      (rule "polySimp_elimOne" (formula "14") (term "1,1,0,0,0"))
                                                      (rule "inEqSimp_sepNegMonomial0" (formula "3"))
                                                      (rule "polySimp_mulLiterals" (formula "3") (term "0"))
                                                      (rule "polySimp_elimOne" (formula "3") (term "0"))
                                                      (rule "inEqSimp_contradEq7" (formula "44") (ifseqformula "40"))
                                                      (rule "polySimp_mulComm0" (formula "44") (term "1,0,0"))
                                                      (rule "polySimp_pullOutFactor1b" (formula "44") (term "0,0"))
                                                      (rule "add_literals" (formula "44") (term "1,1,0,0"))
                                                      (rule "times_zero_1" (formula "44") (term "1,0,0"))
                                                      (rule "add_zero_right" (formula "44") (term "0,0"))
                                                      (rule "leq_literals" (formula "44") (term "0"))
                                                       (builtin "One Step Simplification" (formula "44"))
                                                      (rule "false_right" (formula "44"))
                                                      (rule "inEqSimp_subsumption1" (formula "29") (ifseqformula "40"))
                                                      (rule "inEqSimp_homoInEq0" (formula "29") (term "0"))
                                                      (rule "polySimp_pullOutFactor1b" (formula "29") (term "0,0"))
                                                      (rule "add_literals" (formula "29") (term "1,1,0,0"))
                                                      (rule "times_zero_1" (formula "29") (term "1,0,0"))
                                                      (rule "add_literals" (formula "29") (term "0,0"))
                                                      (rule "qeq_literals" (formula "29") (term "0"))
                                                       (builtin "One Step Simplification" (formula "29"))
                                                      (rule "true_left" (formula "29"))
                                                      (rule "inEqSimp_subsumption1" (formula "38") (ifseqformula "28"))
                                                      (rule "leq_literals" (formula "38") (term "0"))
                                                       (builtin "One Step Simplification" (formula "38"))
                                                      (rule "true_left" (formula "38"))
                                                      (rule "pullOutSelect" (formula "1") (term "0,0") (inst "selectSK=java_util_Collection_seq_1"))
                                                      (rule "applyEq" (formula "4") (term "0,0") (ifseqformula "1"))
                                                      (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "41"))
                                                       (builtin "One Step Simplification" (formula "1"))
                                                      (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,1,1,0,0") (ifseqformula "34"))
                                                       (builtin "One Step Simplification" (formula "1"))
                                                      (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,0,0,1,1,0,0") (ifseqformula "22"))
                                                      (rule "elementOfSingleton" (formula "1") (term "0,0,0"))
                                                       (builtin "One Step Simplification" (formula "1"))
                                                      (rule "pullOutSelect" (formula "1") (term "0,0,0,1,0,0") (inst "selectSK=de_polyas_core3_open_cred_CredTool_cols_1"))
                                                      (rule "applyEq" (formula "2") (term "0,0,0,0") (ifseqformula "1"))
                                                      (rule "applyEq" (formula "2") (term "1,0,1,0,1,1,0,0") (ifseqformula "1"))
                                                      (rule "applyEq" (formula "2") (term "1,1,0") (ifseqformula "1"))
                                                      (rule "applyEq" (formula "2") (term "1,0,0,0,0,0,1,1,0,0") (ifseqformula "1"))
                                                      (rule "applyEq" (formula "2") (term "1,2,0") (ifseqformula "1"))
                                                      (rule "applyEq" (formula "2") (term "1,0,1,0,0,0,1,1,0,0") (ifseqformula "1"))
                                                      (rule "applyEq" (formula "2") (term "1,0,1,0,0,1,1,0,0") (ifseqformula "1"))
                                                      (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "42"))
                                                       (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "50")))
                                                      (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,1,0,0") (ifseqformula "35"))
                                                       (builtin "One Step Simplification" (formula "1"))
                                                      (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,0,0,1,0,0") (ifseqformula "23"))
                                                      (rule "eqSymm" (formula "2") (term "0,0,0"))
                                                      (rule "replace_known_left" (formula "1") (term "0,0,0,0,1,0,0") (ifseqformula "12"))
                                                       (builtin "One Step Simplification" (formula "1"))
                                                      (rule "elementOfSingleton" (formula "1") (term "0,0"))
                                                       (builtin "One Step Simplification" (formula "1"))
                                                      (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "35"))
                                                       (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "50")))
                                                      (rule "replaceKnownSelect_taclet10_14" (formula "1") (term "2,0"))
                                                      (rule "replaceKnownAuxiliaryConstant_taclet10_17" (formula "1") (term "2,0"))
                                                      (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,0,1,0,0") (ifseqformula "23"))
                                                      (rule "replace_known_left" (formula "1") (term "0,0,0,1,0,0") (ifseqformula "12"))
                                                       (builtin "One Step Simplification" (formula "1"))
                                                      (rule "elementOfSingleton" (formula "1") (term "0,0"))
                                                       (builtin "One Step Simplification" (formula "1"))
                                                      (rule "applyEqReverse" (formula "2") (term "1,0,0,0,0,0,1,1,0,0") (ifseqformula "1"))
                                                      (rule "applyEqReverse" (formula "2") (term "1,0,1,0,1,1,0,0") (ifseqformula "1"))
                                                      (rule "applyEqReverse" (formula "2") (term "0,0,0,1,0,0") (ifseqformula "1"))
                                                      (rule "applyEqReverse" (formula "2") (term "1,0,0,0") (ifseqformula "1"))
                                                      (rule "applyEqReverse" (formula "2") (term "1,0,1,0,0,1,1,0,0") (ifseqformula "1"))
                                                      (rule "applyEqReverse" (formula "2") (term "1,1,0") (ifseqformula "1"))
                                                      (rule "applyEqReverse" (formula "2") (term "1,2,0") (ifseqformula "1"))
                                                      (rule "applyEqReverse" (formula "2") (term "1,0,1,0,0,0,1,1,0,0") (ifseqformula "1"))
                                                      (rule "hideAuxiliaryEq" (formula "1"))
                                                      (rule "replace_known_left" (formula "1") (term "0,0,0,0,1,1,0,0") (ifseqformula "7"))
                                                       (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "50")) (ifInst ""  (formula "48")))
                                                      (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "34"))
                                                       (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "48")))
                                                      (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,0,1,0,0") (ifseqformula "22"))
                                                      (rule "replace_known_left" (formula "1") (term "0,0,0,1,0,0") (ifseqformula "7"))
                                                       (builtin "One Step Simplification" (formula "1"))
                                                      (rule "elementOfSingleton" (formula "1") (term "0,0"))
                                                       (builtin "One Step Simplification" (formula "1"))
                                                      (rule "simplifySelectOfAnon" (formula "1"))
                                                       (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "48")))
                                                      (rule "replaceKnownSelect_taclet0_2" (formula "1") (term "2,0"))
                                                      (rule "replaceKnownAuxiliaryConstant_taclet0_4" (formula "1") (term "2,0"))
                                                      (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,1,0,0") (ifseqformula "22"))
                                                      (rule "replace_known_left" (formula "1") (term "0,0,1,0,0") (ifseqformula "7"))
                                                       (builtin "One Step Simplification" (formula "1"))
                                                      (rule "applyEq" (formula "1") (term "2,0") (ifseqformula "25"))
                                                      (rule "elementOfUnion" (formula "1") (term "0,0"))
                                                      (rule "elementOfSingleton" (formula "1") (term "0,0,0"))
                                                       (builtin "One Step Simplification" (formula "1"))
                                                      (rule "eqSymm" (formula "1") (term "0,0,0"))
                                                      (rule "replace_known_right" (formula "1") (term "0,0,0") (ifseqformula "50"))
                                                       (builtin "One Step Simplification" (formula "1"))
                                                      (rule "elementOfSingleton" (formula "1") (term "0,0"))
                                                       (builtin "One Step Simplification" (formula "1"))
                                                      (rule "applyEqReverse" (formula "2") (term "0,0") (ifseqformula "1"))
                                                      (rule "applyEqReverse" (formula "4") (term "0,0") (ifseqformula "1"))
                                                      (rule "hideAuxiliaryEq" (formula "1"))
                                                      (rule "inEqSimp_and_subsumption3" (formula "18") (term "0,0,0"))
                                                      (rule "leq_literals" (formula "18") (term "0,1,0,0,0,0"))
                                                       (builtin "One Step Simplification" (formula "18"))
                                                      (rule "inEqSimp_and_subsumption3" (formula "19") (term "0,0,0"))
                                                      (rule "leq_literals" (formula "19") (term "0,1,0,0,0,0"))
                                                       (builtin "One Step Simplification" (formula "19"))
                                                      (rule "nnf_imp2or" (formula "15") (term "0"))
                                                      (rule "nnf_imp2or" (formula "14") (term "0"))
                                                      (rule "nnf_imp2or" (formula "18") (term "0"))
                                                      (rule "nnf_imp2or" (formula "19") (term "0"))
                                                      (rule "nnf_notAnd" (formula "15") (term "0,0"))
                                                      (rule "inEqSimp_notLeq" (formula "15") (term "0,0,0"))
                                                      (rule "polySimp_rightDist" (formula "15") (term "1,0,0,0,0,0"))
                                                      (rule "mul_literals" (formula "15") (term "0,1,0,0,0,0,0"))
                                                      (rule "polySimp_addAssoc" (formula "15") (term "0,0,0,0,0"))
                                                      (rule "add_literals" (formula "15") (term "0,0,0,0,0,0"))
                                                      (rule "add_zero_left" (formula "15") (term "0,0,0,0,0"))
                                                      (rule "inEqSimp_sepPosMonomial1" (formula "15") (term "0,0,0"))
                                                      (rule "polySimp_mulLiterals" (formula "15") (term "1,0,0,0"))
                                                      (rule "polySimp_elimOne" (formula "15") (term "1,0,0,0"))
                                                      (rule "inEqSimp_notGeq" (formula "15") (term "1,0,0"))
                                                      (rule "mul_literals" (formula "15") (term "1,0,0,1,0,0"))
                                                      (rule "add_zero_right" (formula "15") (term "0,0,1,0,0"))
                                                      (rule "inEqSimp_sepPosMonomial0" (formula "15") (term "1,0,0"))
                                                      (rule "mul_literals" (formula "15") (term "1,1,0,0"))
                                                      (rule "nnf_notAnd" (formula "14") (term "0,0"))
                                                      (rule "inEqSimp_notLeq" (formula "14") (term "0,0,0"))
                                                      (rule "polySimp_rightDist" (formula "14") (term "1,0,0,0,0,0"))
                                                      (rule "mul_literals" (formula "14") (term "0,1,0,0,0,0,0"))
                                                      (rule "polySimp_addAssoc" (formula "14") (term "0,0,0,0,0"))
                                                      (rule "add_literals" (formula "14") (term "0,0,0,0,0,0"))
                                                      (rule "add_zero_left" (formula "14") (term "0,0,0,0,0"))
                                                      (rule "inEqSimp_sepPosMonomial1" (formula "14") (term "0,0,0"))
                                                      (rule "polySimp_mulLiterals" (formula "14") (term "1,0,0,0"))
                                                      (rule "polySimp_elimOne" (formula "14") (term "1,0,0,0"))
                                                      (rule "inEqSimp_notGeq" (formula "14") (term "1,0,0"))
                                                      (rule "times_zero_1" (formula "14") (term "1,0,0,1,0,0"))
                                                      (rule "add_zero_right" (formula "14") (term "0,0,1,0,0"))
                                                      (rule "inEqSimp_sepPosMonomial0" (formula "14") (term "1,0,0"))
                                                      (rule "mul_literals" (formula "14") (term "1,1,0,0"))
                                                      (rule "nnf_notAnd" (formula "18") (term "0,0"))
                                                      (rule "inEqSimp_notLeq" (formula "18") (term "1,0,0"))
                                                      (rule "mul_literals" (formula "18") (term "1,0,0,1,0,0"))
                                                      (rule "add_literals" (formula "18") (term "0,0,1,0,0"))
                                                      (rule "inEqSimp_sepPosMonomial1" (formula "18") (term "1,0,0"))
                                                      (rule "mul_literals" (formula "18") (term "1,1,0,0"))
                                                      (rule "nnf_notAnd" (formula "19") (term "0,0"))
                                                      (rule "inEqSimp_notLeq" (formula "19") (term "1,0,0"))
                                                      (rule "mul_literals" (formula "19") (term "1,0,0,1,0,0"))
                                                      (rule "add_literals" (formula "19") (term "0,0,1,0,0"))
                                                      (rule "inEqSimp_sepPosMonomial1" (formula "19") (term "1,0,0"))
                                                      (rule "mul_literals" (formula "19") (term "1,1,0,0"))
                                                      (rule "nnf_notAnd" (formula "18") (term "0,0,0"))
                                                      (rule "inEqSimp_notGeq" (formula "18") (term "1,0,0,0"))
                                                      (rule "mul_literals" (formula "18") (term "1,0,0,1,0,0,0"))
                                                      (rule "add_zero_right" (formula "18") (term "0,0,1,0,0,0"))
                                                      (rule "inEqSimp_sepPosMonomial0" (formula "18") (term "1,0,0,0"))
                                                      (rule "mul_literals" (formula "18") (term "1,1,0,0,0"))
                                                      (rule "inEqSimp_notLeq" (formula "18") (term "0,0,0,0"))
                                                      (rule "polySimp_rightDist" (formula "18") (term "1,0,0,0,0,0,0"))
                                                      (rule "mul_literals" (formula "18") (term "0,1,0,0,0,0,0,0"))
                                                      (rule "polySimp_addAssoc" (formula "18") (term "0,0,0,0,0,0"))
                                                      (rule "add_literals" (formula "18") (term "0,0,0,0,0,0,0"))
                                                      (rule "add_zero_left" (formula "18") (term "0,0,0,0,0,0"))
                                                      (rule "inEqSimp_sepPosMonomial1" (formula "18") (term "0,0,0,0"))
                                                      (rule "polySimp_mulLiterals" (formula "18") (term "1,0,0,0,0"))
                                                      (rule "polySimp_elimOne" (formula "18") (term "1,0,0,0,0"))
                                                      (rule "nnf_notAnd" (formula "19") (term "0,0,0"))
                                                      (rule "inEqSimp_notGeq" (formula "19") (term "1,0,0,0"))
                                                      (rule "times_zero_1" (formula "19") (term "1,0,0,1,0,0,0"))
                                                      (rule "add_literals" (formula "19") (term "0,0,1,0,0,0"))
                                                      (rule "inEqSimp_sepPosMonomial0" (formula "19") (term "1,0,0,0"))
                                                      (rule "mul_literals" (formula "19") (term "1,1,0,0,0"))
                                                      (rule "inEqSimp_notLeq" (formula "19") (term "0,0,0,0"))
                                                      (rule "polySimp_rightDist" (formula "19") (term "1,0,0,0,0,0,0"))
                                                      (rule "mul_literals" (formula "19") (term "0,1,0,0,0,0,0,0"))
                                                      (rule "polySimp_addAssoc" (formula "19") (term "0,0,0,0,0,0"))
                                                      (rule "add_literals" (formula "19") (term "0,0,0,0,0,0,0"))
                                                      (rule "add_zero_left" (formula "19") (term "0,0,0,0,0,0"))
                                                      (rule "inEqSimp_sepPosMonomial1" (formula "19") (term "0,0,0,0"))
                                                      (rule "polySimp_mulLiterals" (formula "19") (term "1,0,0,0,0"))
                                                      (rule "polySimp_elimOne" (formula "19") (term "1,0,0,0,0"))
                                                      (rule "commute_or_2" (formula "15") (term "0"))
                                                      (rule "commute_or" (formula "14") (term "0,0"))
                                                      (rule "commute_or_2" (formula "18") (term "0"))
                                                      (rule "commute_or_2" (formula "19") (term "0"))
                                                      (rule "commute_or" (formula "15") (term "0,0"))
                                                      (rule "commute_or_2" (formula "15") (term "0"))
                                                      (rule "commute_or_2" (formula "18") (term "0,0"))
                                                      (rule "commute_or_2" (formula "19") (term "0,0"))
                                                      (rule "commute_and" (formula "14") (term "0,0,1,0"))
                                                      (rule "commute_or" (formula "18") (term "0,0,0"))
                                                      (rule "commute_or_2" (formula "18") (term "0,0"))
                                                      (rule "commute_or_2" (formula "18") (term "0"))
                                                      (rule "commute_or" (formula "19") (term "0,0,0"))
                                                      (rule "commute_or_2" (formula "19") (term "0,0"))
                                                      (rule "commute_or_2" (formula "19") (term "0"))
                                                      (rule "commute_and_2" (formula "14") (term "0,1,0"))
                                                      (rule "cut_direct" (formula "35") (term "0,0,0"))
                                                      (branch "CUT: result_2.<created> = TRUE TRUE"
                                                          (builtin "One Step Simplification" (formula "36"))
                                                         (rule "true_left" (formula "36"))
                                                         (rule "seqGetAlphaCast" (formula "36") (term "0"))
                                                         (rule "castedGetAny" (formula "36") (term "0"))
                                                          (builtin "One Step Simplification" (formula "36"))
                                                         (rule "true_left" (formula "36"))
                                                         (rule "ex_pull_out3" (formula "14") (term "0"))
                                                         (rule "cnf_rightDist" (formula "14") (term "0,0"))
                                                         (rule "shift_paren_or" (formula "14") (term "1,0,0"))
                                                         (rule "cnf_rightDist" (formula "14") (term "0,0,0"))
                                                         (rule "commute_or_2" (formula "14") (term "0,0,0,0"))
                                                         (rule "shift_paren_or" (formula "14") (term "1,0,0,0"))
                                                         (rule "commute_or" (formula "14") (term "0,0,0,0,0"))
                                                         (rule "allLeft" (formula "15") (inst "t=i_0"))
                                                         (rule "replace_known_left" (formula "15") (term "0,0,0") (ifseqformula "1"))
                                                          (builtin "One Step Simplification" (formula "15"))
                                                         (rule "inEqSimp_commuteGeq" (formula "15") (term "1"))
                                                         (rule "inEqSimp_contradInEq1" (formula "15") (term "0") (ifseqformula "2"))
                                                         (rule "qeq_literals" (formula "15") (term "0,0"))
                                                          (builtin "One Step Simplification" (formula "15"))
                                                         (rule "inEqSimp_contradInEq1" (formula "15") (ifseqformula "3"))
                                                         (rule "andLeft" (formula "15"))
                                                         (rule "inEqSimp_homoInEq1" (formula "15"))
                                                         (rule "polySimp_pullOutFactor1b" (formula "15") (term "0"))
                                                         (rule "add_literals" (formula "15") (term "1,1,0"))
                                                         (rule "times_zero_1" (formula "15") (term "1,0"))
                                                         (rule "add_zero_right" (formula "15") (term "0"))
                                                         (rule "leq_literals" (formula "15"))
                                                         (rule "closeFalse" (formula "15"))
                                                      )
                                                      (branch "CUT: result_2.<created> = TRUE FALSE"
                                                          (builtin "One Step Simplification" (formula "35"))
                                                         (rule "seqGetAlphaCast" (formula "36") (term "0"))
                                                         (rule "castedGetAny" (formula "36") (term "0"))
                                                          (builtin "One Step Simplification" (formula "36"))
                                                         (rule "true_left" (formula "36"))
                                                         (rule "ex_pull_out3" (formula "14") (term "0"))
                                                         (rule "cnf_rightDist" (formula "14") (term "0,0"))
                                                         (rule "shift_paren_or" (formula "14") (term "1,0,0"))
                                                         (rule "cnf_rightDist" (formula "14") (term "0,0,0"))
                                                         (rule "commute_or_2" (formula "14") (term "0,0,0,0"))
                                                         (rule "shift_paren_or" (formula "14") (term "1,0,0,0"))
                                                         (rule "commute_or" (formula "14") (term "0,0,0,0,0"))
                                                         (rule "allLeft" (formula "15") (inst "t=i_0"))
                                                         (rule "replace_known_left" (formula "15") (term "0,0,0") (ifseqformula "1"))
                                                          (builtin "One Step Simplification" (formula "15"))
                                                         (rule "inEqSimp_commuteGeq" (formula "15") (term "1"))
                                                         (rule "inEqSimp_contradInEq1" (formula "15") (term "0") (ifseqformula "2"))
                                                         (rule "qeq_literals" (formula "15") (term "0,0"))
                                                          (builtin "One Step Simplification" (formula "15"))
                                                         (rule "inEqSimp_contradInEq0" (formula "3") (ifseqformula "15"))
                                                         (rule "andLeft" (formula "3"))
                                                         (rule "inEqSimp_homoInEq1" (formula "3"))
                                                         (rule "polySimp_pullOutFactor1b" (formula "3") (term "0"))
                                                         (rule "add_literals" (formula "3") (term "1,1,0"))
                                                         (rule "times_zero_1" (formula "3") (term "1,0"))
                                                         (rule "add_zero_right" (formula "3") (term "0"))
                                                         (rule "leq_literals" (formula "3"))
                                                         (rule "closeFalse" (formula "3"))
                                                      )
                                                   )
                                                )
                                                (branch
                                                   (rule "notRight" (formula "51"))
                                                   (rule "inEqSimp_ltToLeq" (formula "12") (term "0,0,0,1,0"))
                                                   (rule "polySimp_mulComm0" (formula "12") (term "1,0,0,0,0,0,1,0"))
                                                   (rule "inEqSimp_ltToLeq" (formula "12") (term "0,0,0"))
                                                   (rule "polySimp_mulComm0" (formula "12") (term "1,0,0,0,0,0"))
                                                   (rule "inEqSimp_ltToLeq" (formula "17") (term "0,0,0,0,0"))
                                                   (rule "polySimp_mulComm0" (formula "17") (term "1,0,0,0,0,0,0,0"))
                                                   (rule "inEqSimp_ltToLeq" (formula "13") (term "0,0,0"))
                                                   (rule "polySimp_mulComm0" (formula "13") (term "1,0,0,0,0,0"))
                                                   (rule "inEqSimp_ltToLeq" (formula "29"))
                                                   (rule "polySimp_mulComm0" (formula "29") (term "1,0,0"))
                                                   (rule "polySimp_addComm1" (formula "29") (term "0"))
                                                   (rule "inEqSimp_ltToLeq" (formula "16") (term "0,0,0,0,0"))
                                                   (rule "polySimp_mulComm0" (formula "16") (term "1,0,0,0,0,0,0,0"))
                                                   (rule "inEqSimp_sepPosMonomial1" (formula "38"))
                                                   (rule "mul_literals" (formula "38") (term "1"))
                                                   (rule "inEqSimp_sepPosMonomial0" (formula "12") (term "0,0,0,1,0"))
                                                   (rule "polySimp_mulComm0" (formula "12") (term "1,0,0,0,1,0"))
                                                   (rule "polySimp_rightDist" (formula "12") (term "1,0,0,0,1,0"))
                                                   (rule "polySimp_mulLiterals" (formula "12") (term "1,1,0,0,0,1,0"))
                                                   (rule "mul_literals" (formula "12") (term "0,1,0,0,0,1,0"))
                                                   (rule "polySimp_elimOne" (formula "12") (term "1,1,0,0,0,1,0"))
                                                   (rule "inEqSimp_sepPosMonomial0" (formula "12") (term "0,0,0"))
                                                   (rule "polySimp_mulComm0" (formula "12") (term "1,0,0,0"))
                                                   (rule "polySimp_rightDist" (formula "12") (term "1,0,0,0"))
                                                   (rule "polySimp_mulLiterals" (formula "12") (term "1,1,0,0,0"))
                                                   (rule "mul_literals" (formula "12") (term "0,1,0,0,0"))
                                                   (rule "polySimp_elimOne" (formula "12") (term "1,1,0,0,0"))
                                                   (rule "inEqSimp_sepPosMonomial0" (formula "17") (term "0,0,0,0,0"))
                                                   (rule "polySimp_mulComm0" (formula "17") (term "1,0,0,0,0,0"))
                                                   (rule "polySimp_rightDist" (formula "17") (term "1,0,0,0,0,0"))
                                                   (rule "polySimp_mulLiterals" (formula "17") (term "1,1,0,0,0,0,0"))
                                                   (rule "mul_literals" (formula "17") (term "0,1,0,0,0,0,0"))
                                                   (rule "polySimp_elimOne" (formula "17") (term "1,1,0,0,0,0,0"))
                                                   (rule "inEqSimp_sepPosMonomial0" (formula "13") (term "0,0,0"))
                                                   (rule "polySimp_mulComm0" (formula "13") (term "1,0,0,0"))
                                                   (rule "polySimp_rightDist" (formula "13") (term "1,0,0,0"))
                                                   (rule "polySimp_mulLiterals" (formula "13") (term "1,1,0,0,0"))
                                                   (rule "mul_literals" (formula "13") (term "0,1,0,0,0"))
                                                   (rule "polySimp_elimOne" (formula "13") (term "1,1,0,0,0"))
                                                   (rule "inEqSimp_sepNegMonomial0" (formula "29"))
                                                   (rule "polySimp_mulLiterals" (formula "29") (term "0"))
                                                   (rule "polySimp_elimOne" (formula "29") (term "0"))
                                                   (rule "inEqSimp_sepPosMonomial0" (formula "16") (term "0,0,0,0,0"))
                                                   (rule "polySimp_mulComm0" (formula "16") (term "1,0,0,0,0,0"))
                                                   (rule "polySimp_rightDist" (formula "16") (term "1,0,0,0,0,0"))
                                                   (rule "mul_literals" (formula "16") (term "0,1,0,0,0,0,0"))
                                                   (rule "polySimp_mulLiterals" (formula "16") (term "1,1,0,0,0,0,0"))
                                                   (rule "polySimp_elimOne" (formula "16") (term "1,1,0,0,0,0,0"))
                                                   (rule "inEqSimp_contradEq7" (formula "42") (ifseqformula "38"))
                                                   (rule "polySimp_mulComm0" (formula "42") (term "1,0,0"))
                                                   (rule "polySimp_pullOutFactor1b" (formula "42") (term "0,0"))
                                                   (rule "add_literals" (formula "42") (term "1,1,0,0"))
                                                   (rule "times_zero_1" (formula "42") (term "1,0,0"))
                                                   (rule "add_zero_right" (formula "42") (term "0,0"))
                                                   (rule "leq_literals" (formula "42") (term "0"))
                                                    (builtin "One Step Simplification" (formula "42"))
                                                   (rule "false_right" (formula "42"))
                                                   (rule "inEqSimp_subsumption1" (formula "27") (ifseqformula "38"))
                                                   (rule "inEqSimp_homoInEq0" (formula "27") (term "0"))
                                                   (rule "polySimp_pullOutFactor1b" (formula "27") (term "0,0"))
                                                   (rule "add_literals" (formula "27") (term "1,1,0,0"))
                                                   (rule "times_zero_1" (formula "27") (term "1,0,0"))
                                                   (rule "add_zero_right" (formula "27") (term "0,0"))
                                                   (rule "qeq_literals" (formula "27") (term "0"))
                                                    (builtin "One Step Simplification" (formula "27"))
                                                   (rule "true_left" (formula "27"))
                                                   (rule "inEqSimp_subsumption1" (formula "36") (ifseqformula "26"))
                                                   (rule "leq_literals" (formula "36") (term "0"))
                                                    (builtin "One Step Simplification" (formula "36"))
                                                   (rule "true_left" (formula "36"))
                                                   (rule "pullOutSelect" (formula "1") (term "1") (inst "selectSK=de_polyas_core3_open_cred_CredTool_cols_1"))
                                                   (rule "simplifySelectOfAnonEQ" (formula "2") (ifseqformula "39"))
                                                    (builtin "One Step Simplification" (formula "2") (ifInst ""  (formula "47")))
                                                   (rule "selectCreatedOfAnonAsFormulaEQ" (formula "2") (term "0,1,0,0") (ifseqformula "32"))
                                                    (builtin "One Step Simplification" (formula "2"))
                                                   (rule "selectCreatedOfAnonAsFormulaEQ" (formula "2") (term "0,0,0,1,0,0") (ifseqformula "20"))
                                                   (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "39"))
                                                    (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "47")))
                                                   (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,1,0,0") (ifseqformula "32"))
                                                    (builtin "One Step Simplification" (formula "1"))
                                                   (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,0,0,1,0,0") (ifseqformula "20"))
                                                   (rule "replace_known_left" (formula "1") (term "0,0,0,0,1,0,0") (ifseqformula "9"))
                                                    (builtin "One Step Simplification" (formula "1"))
                                                   (rule "replace_known_left" (formula "2") (term "0,0,0,0,1,0,0") (ifseqformula "9"))
                                                    (builtin "One Step Simplification" (formula "2"))
                                                   (rule "elementOfSingleton" (formula "1") (term "0,0"))
                                                    (builtin "One Step Simplification" (formula "1"))
                                                   (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "32"))
                                                    (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "47")))
                                                   (rule "replaceKnownSelect_taclet10_14" (formula "1") (term "2,0"))
                                                   (rule "replaceKnownAuxiliaryConstant_taclet10_17" (formula "1") (term "2,0"))
                                                   (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,0,1,0,0") (ifseqformula "20"))
                                                   (rule "replace_known_left" (formula "1") (term "0,0,0,1,0,0") (ifseqformula "9"))
                                                    (builtin "One Step Simplification" (formula "1"))
                                                   (rule "elementOfSingleton" (formula "2") (term "0,0"))
                                                    (builtin "One Step Simplification" (formula "2"))
                                                   (rule "simplifySelectOfAnonEQ" (formula "2") (ifseqformula "32"))
                                                    (builtin "One Step Simplification" (formula "2") (ifInst ""  (formula "47")))
                                                   (rule "replaceKnownSelect_taclet10_12" (formula "2") (term "2,0"))
                                                   (rule "replaceKnownAuxiliaryConstant_taclet10_13" (formula "2") (term "2,0"))
                                                   (rule "selectCreatedOfAnonAsFormulaEQ" (formula "2") (term "0,0,1,0,0") (ifseqformula "20"))
                                                   (rule "replace_known_left" (formula "2") (term "0,0,0,1,0,0") (ifseqformula "9"))
                                                    (builtin "One Step Simplification" (formula "2"))
                                                   (rule "elementOfSingleton" (formula "1") (term "0,0"))
                                                    (builtin "One Step Simplification" (formula "1"))
                                                   (rule "applyEqReverse" (formula "2") (term "1") (ifseqformula "1"))
                                                   (rule "hideAuxiliaryEq" (formula "1"))
                                                   (rule "elementOfSingleton" (formula "1") (term "0,0"))
                                                    (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "47")))
                                                   (rule "closeFalse" (formula "1"))
                                                )
                                             )
                                             (branch
                                                (rule "inEqSimp_ltToLeq" (formula "28"))
                                                (rule "polySimp_mulComm0" (formula "28") (term "1,0,0"))
                                                (rule "polySimp_addComm1" (formula "28") (term "0"))
                                                (rule "inEqSimp_ltToLeq" (formula "12") (term "0,0,0"))
                                                (rule "polySimp_mulComm0" (formula "12") (term "1,0,0,0,0,0"))
                                                (rule "inEqSimp_ltToLeq" (formula "11") (term "0,0,0"))
                                                (rule "polySimp_mulComm0" (formula "11") (term "1,0,0,0,0,0"))
                                                (rule "inEqSimp_ltToLeq" (formula "16") (term "0,0,0,0,0"))
                                                (rule "polySimp_mulComm0" (formula "16") (term "1,0,0,0,0,0,0,0"))
                                                (rule "inEqSimp_ltToLeq" (formula "15") (term "0,0,0,0,0"))
                                                (rule "polySimp_mulComm0" (formula "15") (term "1,0,0,0,0,0,0,0"))
                                                (rule "inEqSimp_ltToLeq" (formula "11") (term "0,0,0,1,0"))
                                                (rule "polySimp_mulComm0" (formula "11") (term "1,0,0,0,0,0,1,0"))
                                                (rule "inEqSimp_sepPosMonomial1" (formula "37"))
                                                (rule "mul_literals" (formula "37") (term "1"))
                                                (rule "inEqSimp_sepNegMonomial0" (formula "28"))
                                                (rule "polySimp_mulLiterals" (formula "28") (term "0"))
                                                (rule "polySimp_elimOne" (formula "28") (term "0"))
                                                (rule "inEqSimp_sepPosMonomial0" (formula "12") (term "0,0,0"))
                                                (rule "polySimp_mulComm0" (formula "12") (term "1,0,0,0"))
                                                (rule "polySimp_rightDist" (formula "12") (term "1,0,0,0"))
                                                (rule "polySimp_mulLiterals" (formula "12") (term "1,1,0,0,0"))
                                                (rule "mul_literals" (formula "12") (term "0,1,0,0,0"))
                                                (rule "polySimp_elimOne" (formula "12") (term "1,1,0,0,0"))
                                                (rule "inEqSimp_sepPosMonomial0" (formula "11") (term "0,0,0"))
                                                (rule "polySimp_mulComm0" (formula "11") (term "1,0,0,0"))
                                                (rule "polySimp_rightDist" (formula "11") (term "1,0,0,0"))
                                                (rule "mul_literals" (formula "11") (term "0,1,0,0,0"))
                                                (rule "polySimp_mulLiterals" (formula "11") (term "1,1,0,0,0"))
                                                (rule "polySimp_elimOne" (formula "11") (term "1,1,0,0,0"))
                                                (rule "inEqSimp_sepPosMonomial0" (formula "16") (term "0,0,0,0,0"))
                                                (rule "polySimp_mulComm0" (formula "16") (term "1,0,0,0,0,0"))
                                                (rule "polySimp_rightDist" (formula "16") (term "1,0,0,0,0,0"))
                                                (rule "polySimp_mulLiterals" (formula "16") (term "1,1,0,0,0,0,0"))
                                                (rule "mul_literals" (formula "16") (term "0,1,0,0,0,0,0"))
                                                (rule "polySimp_elimOne" (formula "16") (term "1,1,0,0,0,0,0"))
                                                (rule "inEqSimp_sepPosMonomial0" (formula "15") (term "0,0,0,0,0"))
                                                (rule "polySimp_mulComm0" (formula "15") (term "1,0,0,0,0,0"))
                                                (rule "polySimp_rightDist" (formula "15") (term "1,0,0,0,0,0"))
                                                (rule "polySimp_mulLiterals" (formula "15") (term "1,1,0,0,0,0,0"))
                                                (rule "mul_literals" (formula "15") (term "0,1,0,0,0,0,0"))
                                                (rule "polySimp_elimOne" (formula "15") (term "1,1,0,0,0,0,0"))
                                                (rule "inEqSimp_sepPosMonomial0" (formula "11") (term "0,0,0,1,0"))
                                                (rule "polySimp_mulComm0" (formula "11") (term "1,0,0,0,1,0"))
                                                (rule "polySimp_rightDist" (formula "11") (term "1,0,0,0,1,0"))
                                                (rule "polySimp_mulLiterals" (formula "11") (term "1,1,0,0,0,1,0"))
                                                (rule "mul_literals" (formula "11") (term "0,1,0,0,0,1,0"))
                                                (rule "polySimp_elimOne" (formula "11") (term "1,1,0,0,0,1,0"))
                                                (rule "inEqSimp_contradEq7" (formula "41") (ifseqformula "37"))
                                                (rule "polySimp_mulComm0" (formula "41") (term "1,0,0"))
                                                (rule "polySimp_pullOutFactor1b" (formula "41") (term "0,0"))
                                                (rule "add_literals" (formula "41") (term "1,1,0,0"))
                                                (rule "times_zero_1" (formula "41") (term "1,0,0"))
                                                (rule "add_zero_right" (formula "41") (term "0,0"))
                                                (rule "leq_literals" (formula "41") (term "0"))
                                                 (builtin "One Step Simplification" (formula "41"))
                                                (rule "false_right" (formula "41"))
                                                (rule "inEqSimp_subsumption1" (formula "36") (ifseqformula "25"))
                                                (rule "leq_literals" (formula "36") (term "0"))
                                                 (builtin "One Step Simplification" (formula "36"))
                                                (rule "true_left" (formula "36"))
                                                (rule "inEqSimp_subsumption1" (formula "26") (ifseqformula "36"))
                                                (rule "inEqSimp_homoInEq0" (formula "26") (term "0"))
                                                (rule "polySimp_pullOutFactor1b" (formula "26") (term "0,0"))
                                                (rule "add_literals" (formula "26") (term "1,1,0,0"))
                                                (rule "times_zero_1" (formula "26") (term "1,0,0"))
                                                (rule "add_zero_right" (formula "26") (term "0,0"))
                                                (rule "qeq_literals" (formula "26") (term "0"))
                                                 (builtin "One Step Simplification" (formula "26"))
                                                (rule "true_left" (formula "26"))
                                                (rule "pullOutSelect" (formula "47") (term "1") (inst "selectSK=de_polyas_core3_open_cred_CredTool_record_2"))
                                                (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "38"))
                                                 (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "46")))
                                                (rule "replaceKnownSelect_taclet0000010_32" (formula "1") (term "2,0"))
                                                (rule "replaceKnownAuxiliaryConstant_taclet0000010_33" (formula "1") (term "2,0"))
                                                (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,1,0,0") (ifseqformula "31"))
                                                 (builtin "One Step Simplification" (formula "1"))
                                                (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,0,0,1,0,0") (ifseqformula "19"))
                                                (rule "replace_known_left" (formula "1") (term "0,0,0,0,1,0,0") (ifseqformula "8"))
                                                 (builtin "One Step Simplification" (formula "1"))
                                                (rule "elementOfSingleton" (formula "1") (term "0,0"))
                                                 (builtin "One Step Simplification" (formula "1"))
                                                (rule "applyEqReverse" (formula "48") (term "1") (ifseqformula "1"))
                                                (rule "hideAuxiliaryEq" (formula "1"))
                                                (rule "inEqSimp_and_subsumption3" (formula "16") (term "0,0,0"))
                                                (rule "leq_literals" (formula "16") (term "0,1,0,0,0,0"))
                                                 (builtin "One Step Simplification" (formula "16"))
                                                (rule "inEqSimp_and_subsumption3" (formula "15") (term "0,0,0"))
                                                (rule "leq_literals" (formula "15") (term "0,1,0,0,0,0"))
                                                 (builtin "One Step Simplification" (formula "15"))
                                                (rule "nnf_imp2or" (formula "12") (term "0"))
                                                (rule "nnf_imp2or" (formula "11") (term "0"))
                                                (rule "nnf_imp2or" (formula "16") (term "0"))
                                                (rule "nnf_imp2or" (formula "15") (term "0"))
                                                (rule "nnf_notAnd" (formula "12") (term "0,0"))
                                                (rule "inEqSimp_notLeq" (formula "12") (term "0,0,0"))
                                                (rule "polySimp_rightDist" (formula "12") (term "1,0,0,0,0,0"))
                                                (rule "mul_literals" (formula "12") (term "0,1,0,0,0,0,0"))
                                                (rule "polySimp_addAssoc" (formula "12") (term "0,0,0,0,0"))
                                                (rule "add_literals" (formula "12") (term "0,0,0,0,0,0"))
                                                (rule "add_zero_left" (formula "12") (term "0,0,0,0,0"))
                                                (rule "inEqSimp_sepPosMonomial1" (formula "12") (term "0,0,0"))
                                                (rule "polySimp_mulLiterals" (formula "12") (term "1,0,0,0"))
                                                (rule "polySimp_elimOne" (formula "12") (term "1,0,0,0"))
                                                (rule "inEqSimp_notGeq" (formula "12") (term "1,0,0"))
                                                (rule "mul_literals" (formula "12") (term "1,0,0,1,0,0"))
                                                (rule "add_literals" (formula "12") (term "0,0,1,0,0"))
                                                (rule "inEqSimp_sepPosMonomial0" (formula "12") (term "1,0,0"))
                                                (rule "mul_literals" (formula "12") (term "1,1,0,0"))
                                                (rule "nnf_notAnd" (formula "11") (term "0,0"))
                                                (rule "inEqSimp_notLeq" (formula "11") (term "0,0,0"))
                                                (rule "polySimp_rightDist" (formula "11") (term "1,0,0,0,0,0"))
                                                (rule "mul_literals" (formula "11") (term "0,1,0,0,0,0,0"))
                                                (rule "polySimp_addAssoc" (formula "11") (term "0,0,0,0,0"))
                                                (rule "add_literals" (formula "11") (term "0,0,0,0,0,0"))
                                                (rule "add_zero_left" (formula "11") (term "0,0,0,0,0"))
                                                (rule "inEqSimp_sepPosMonomial1" (formula "11") (term "0,0,0"))
                                                (rule "polySimp_mulLiterals" (formula "11") (term "1,0,0,0"))
                                                (rule "polySimp_elimOne" (formula "11") (term "1,0,0,0"))
                                                (rule "inEqSimp_notGeq" (formula "11") (term "1,0,0"))
                                                (rule "times_zero_1" (formula "11") (term "1,0,0,1,0,0"))
                                                (rule "add_literals" (formula "11") (term "0,0,1,0,0"))
                                                (rule "inEqSimp_sepPosMonomial0" (formula "11") (term "1,0,0"))
                                                (rule "mul_literals" (formula "11") (term "1,1,0,0"))
                                                (rule "nnf_notAnd" (formula "16") (term "0,0"))
                                                (rule "inEqSimp_notLeq" (formula "16") (term "1,0,0"))
                                                (rule "mul_literals" (formula "16") (term "1,0,0,1,0,0"))
                                                (rule "add_literals" (formula "16") (term "0,0,1,0,0"))
                                                (rule "inEqSimp_sepPosMonomial1" (formula "16") (term "1,0,0"))
                                                (rule "mul_literals" (formula "16") (term "1,1,0,0"))
                                                (rule "nnf_notAnd" (formula "15") (term "0,0"))
                                                (rule "inEqSimp_notLeq" (formula "15") (term "1,0,0"))
                                                (rule "mul_literals" (formula "15") (term "1,0,0,1,0,0"))
                                                (rule "add_literals" (formula "15") (term "0,0,1,0,0"))
                                                (rule "inEqSimp_sepPosMonomial1" (formula "15") (term "1,0,0"))
                                                (rule "mul_literals" (formula "15") (term "1,1,0,0"))
                                                (rule "nnf_notAnd" (formula "16") (term "0,0,0"))
                                                (rule "inEqSimp_notLeq" (formula "16") (term "0,0,0,0"))
                                                (rule "polySimp_rightDist" (formula "16") (term "1,0,0,0,0,0,0"))
                                                (rule "mul_literals" (formula "16") (term "0,1,0,0,0,0,0,0"))
                                                (rule "polySimp_addAssoc" (formula "16") (term "0,0,0,0,0,0"))
                                                (rule "add_literals" (formula "16") (term "0,0,0,0,0,0,0"))
                                                (rule "add_zero_left" (formula "16") (term "0,0,0,0,0,0"))
                                                (rule "inEqSimp_sepPosMonomial1" (formula "16") (term "0,0,0,0"))
                                                (rule "polySimp_mulLiterals" (formula "16") (term "1,0,0,0,0"))
                                                (rule "polySimp_elimOne" (formula "16") (term "1,0,0,0,0"))
                                                (rule "inEqSimp_notGeq" (formula "16") (term "1,0,0,0"))
                                                (rule "mul_literals" (formula "16") (term "1,0,0,1,0,0,0"))
                                                (rule "add_literals" (formula "16") (term "0,0,1,0,0,0"))
                                                (rule "inEqSimp_sepPosMonomial0" (formula "16") (term "1,0,0,0"))
                                                (rule "mul_literals" (formula "16") (term "1,1,0,0,0"))
                                                (rule "nnf_notAnd" (formula "15") (term "0,0,0"))
                                                (rule "inEqSimp_notLeq" (formula "15") (term "0,0,0,0"))
                                                (rule "polySimp_rightDist" (formula "15") (term "1,0,0,0,0,0,0"))
                                                (rule "mul_literals" (formula "15") (term "0,1,0,0,0,0,0,0"))
                                                (rule "polySimp_addAssoc" (formula "15") (term "0,0,0,0,0,0"))
                                                (rule "add_literals" (formula "15") (term "0,0,0,0,0,0,0"))
                                                (rule "add_zero_left" (formula "15") (term "0,0,0,0,0,0"))
                                                (rule "inEqSimp_sepPosMonomial1" (formula "15") (term "0,0,0,0"))
                                                (rule "polySimp_mulLiterals" (formula "15") (term "1,0,0,0,0"))
                                                (rule "polySimp_elimOne" (formula "15") (term "1,0,0,0,0"))
                                                (rule "inEqSimp_notGeq" (formula "15") (term "1,0,0,0"))
                                                (rule "times_zero_1" (formula "15") (term "1,0,0,1,0,0,0"))
                                                (rule "add_zero_right" (formula "15") (term "0,0,1,0,0,0"))
                                                (rule "inEqSimp_sepPosMonomial0" (formula "15") (term "1,0,0,0"))
                                                (rule "mul_literals" (formula "15") (term "1,1,0,0,0"))
                                                (rule "Class_invariant_axiom_for_org_apache_commons_csv_CSVRecord" (formula "47") (inst "i=i") (inst "i_0=i_0"))
                                                (rule "replaceKnownSelect_taclet00000010_37" (formula "47") (term "0,0,0,0"))
                                                (rule "replaceKnownSelect_taclet00000010_34" (formula "47") (term "0,1,0,0"))
                                                (rule "replaceKnownAuxiliaryConstant_taclet00000010_39" (formula "47") (term "0,0,0,0"))
                                                (rule "replaceKnownAuxiliaryConstant_taclet00000010_36" (formula "47") (term "0,1,0,0"))
                                                (rule "replaceKnownSelect_taclet00000010_34" (formula "47") (term "0,0,0,0,1,0,1"))
                                                (rule "replaceKnownSelect_taclet00000010_34" (formula "47") (term "0,1,1,0,0,0,1"))
                                                (rule "replaceKnownAuxiliaryConstant_taclet00000010_36" (formula "47") (term "0,0,0,0,1,0,1"))
                                                (rule "replaceKnownAuxiliaryConstant_taclet00000010_36" (formula "47") (term "0,1,1,0,0,0,1"))
                                                (rule "replaceKnownSelect_taclet00000010_37" (formula "47") (term "0,0,0,0,1,0,1,0"))
                                                (rule "replaceKnownSelect_taclet00000010_37" (formula "47") (term "0,1,1,0,0,0,1,0"))
                                                (rule "replaceKnownAuxiliaryConstant_taclet00000010_39" (formula "47") (term "0,0,0,0,1,0,1,0"))
                                                (rule "replaceKnownAuxiliaryConstant_taclet00000010_39" (formula "47") (term "0,1,1,0,0,0,1,0"))
                                                (rule "expand_inInt" (formula "47") (term "1,0,0,1"))
                                                (rule "expand_inInt" (formula "47") (term "1,0,0,1,0"))
                                                (rule "replace_int_MAX" (formula "47") (term "1,0,1,0,0,1"))
                                                (rule "replace_int_MIN" (formula "47") (term "0,1,1,0,0,1"))
                                                (rule "replace_int_MIN" (formula "47") (term "0,1,1,0,0,1,0"))
                                                (rule "replace_int_MAX" (formula "47") (term "1,0,1,0,0,1,0"))
                                                (rule "eqSymm" (formula "47") (term "0,0"))
                                                (rule "replace_known_left" (formula "47") (term "0,0") (ifseqformula "14"))
                                                 (builtin "One Step Simplification" (formula "47"))
                                                (rule "castedGetAny" (formula "47") (term "0,0,1,0,0"))
                                                (rule "castedGetAny" (formula "47") (term "0,0,1,0,1"))
                                                (rule "inEqSimp_ltToLeq" (formula "47") (term "1,0,0,0,1"))
                                                (rule "polySimp_mulComm0" (formula "47") (term "1,0,0,1,0,0,0,1"))
                                                (rule "inEqSimp_ltToLeq" (formula "47") (term "1,0,0,0,0"))
                                                (rule "polySimp_mulComm0" (formula "47") (term "1,0,0,1,0,0,0,0"))
                                                (rule "inEqSimp_commuteLeq" (formula "47") (term "1,1,0,0,0"))
                                                (rule "inEqSimp_commuteLeq" (formula "47") (term "0,0,0,0,0"))
                                                (rule "inEqSimp_commuteLeq" (formula "47") (term "0,0,0,0,1"))
                                                (rule "inEqSimp_commuteLeq" (formula "47") (term "1,1,0,0,1"))
                                                (rule "applyEq" (formula "47") (term "0,1,0,0,1,0,0,0,1") (ifseqformula "14"))
                                                (rule "inEqSimp_sepPosMonomial0" (formula "47") (term "1,0,0,0,0"))
                                                (rule "polySimp_mulComm0" (formula "47") (term "1,1,0,0,0,0"))
                                                (rule "polySimp_rightDist" (formula "47") (term "1,1,0,0,0,0"))
                                                (rule "mul_literals" (formula "47") (term "0,1,1,0,0,0,0"))
                                                (rule "polySimp_mulLiterals" (formula "47") (term "1,1,1,0,0,0,0"))
                                                (rule "polySimp_elimOne" (formula "47") (term "1,1,1,0,0,0,0"))
                                                (rule "inEqSimp_sepPosMonomial0" (formula "47") (term "1,0,0,0,1"))
                                                (rule "polySimp_mulComm0" (formula "47") (term "1,1,0,0,0,1"))
                                                (rule "polySimp_rightDist" (formula "47") (term "1,1,0,0,0,1"))
                                                (rule "polySimp_mulLiterals" (formula "47") (term "1,1,1,0,0,0,1"))
                                                (rule "mul_literals" (formula "47") (term "0,1,1,0,0,0,1"))
                                                (rule "polySimp_elimOne" (formula "47") (term "1,1,1,0,0,0,1"))
                                                (rule "nnf_imp2or" (formula "47") (term "0,0"))
                                                (rule "nnf_imp2or" (formula "47") (term "0,1"))
                                                (rule "nnf_notAnd" (formula "47") (term "0,0,0"))
                                                (rule "nnf_notAnd" (formula "47") (term "0,0,1"))
                                                (rule "nnf_notAnd" (formula "47") (term "1,0,0,0"))
                                                (rule "inEqSimp_notLeq" (formula "47") (term "0,1,0,0,0"))
                                                (rule "mul_literals" (formula "47") (term "1,0,0,0,1,0,0,0"))
                                                (rule "add_literals" (formula "47") (term "0,0,0,1,0,0,0"))
                                                (rule "inEqSimp_sepPosMonomial1" (formula "47") (term "0,1,0,0,0"))
                                                (rule "mul_literals" (formula "47") (term "1,0,1,0,0,0"))
                                                (rule "inEqSimp_notGeq" (formula "47") (term "1,1,0,0,0"))
                                                (rule "mul_literals" (formula "47") (term "1,0,0,1,1,0,0,0"))
                                                (rule "add_literals" (formula "47") (term "0,0,1,1,0,0,0"))
                                                (rule "inEqSimp_sepPosMonomial0" (formula "47") (term "1,1,0,0,0"))
                                                (rule "mul_literals" (formula "47") (term "1,1,1,0,0,0"))
                                                (rule "nnf_notAnd" (formula "47") (term "0,0,0,0"))
                                                (rule "inEqSimp_notLeq" (formula "47") (term "1,0,0,0,0"))
                                                (rule "polySimp_rightDist" (formula "47") (term "1,0,0,1,0,0,0,0"))
                                                (rule "mul_literals" (formula "47") (term "0,1,0,0,1,0,0,0,0"))
                                                (rule "polySimp_addAssoc" (formula "47") (term "0,0,1,0,0,0,0"))
                                                (rule "add_literals" (formula "47") (term "0,0,0,1,0,0,0,0"))
                                                (rule "add_zero_left" (formula "47") (term "0,0,1,0,0,0,0"))
                                                (rule "inEqSimp_sepPosMonomial1" (formula "47") (term "1,0,0,0,0"))
                                                (rule "polySimp_mulLiterals" (formula "47") (term "1,1,0,0,0,0"))
                                                (rule "polySimp_elimOne" (formula "47") (term "1,1,0,0,0,0"))
                                                (rule "inEqSimp_notGeq" (formula "47") (term "0,0,0,0,0"))
                                                (rule "mul_literals" (formula "47") (term "1,0,0,0,0,0,0,0"))
                                                (rule "add_literals" (formula "47") (term "0,0,0,0,0,0,0"))
                                                (rule "inEqSimp_sepPosMonomial0" (formula "47") (term "0,0,0,0,0"))
                                                (rule "mul_literals" (formula "47") (term "1,0,0,0,0,0"))
                                                (rule "nnf_notAnd" (formula "47") (term "0,0,0,1"))
                                                (rule "inEqSimp_notLeq" (formula "47") (term "1,0,0,0,1"))
                                                (rule "polySimp_rightDist" (formula "47") (term "1,0,0,1,0,0,0,1"))
                                                (rule "mul_literals" (formula "47") (term "0,1,0,0,1,0,0,0,1"))
                                                (rule "polySimp_addAssoc" (formula "47") (term "0,0,1,0,0,0,1"))
                                                (rule "add_literals" (formula "47") (term "0,0,0,1,0,0,0,1"))
                                                (rule "add_zero_left" (formula "47") (term "0,0,1,0,0,0,1"))
                                                (rule "inEqSimp_sepPosMonomial1" (formula "47") (term "1,0,0,0,1"))
                                                (rule "polySimp_mulLiterals" (formula "47") (term "1,1,0,0,0,1"))
                                                (rule "polySimp_elimOne" (formula "47") (term "1,1,0,0,0,1"))
                                                (rule "inEqSimp_notGeq" (formula "47") (term "0,0,0,0,1"))
                                                (rule "mul_literals" (formula "47") (term "1,0,0,0,0,0,0,1"))
                                                (rule "add_literals" (formula "47") (term "0,0,0,0,0,0,1"))
                                                (rule "inEqSimp_sepPosMonomial0" (formula "47") (term "0,0,0,0,1"))
                                                (rule "mul_literals" (formula "47") (term "1,0,0,0,0,1"))
                                                (rule "nnf_notAnd" (formula "47") (term "1,0,0,1"))
                                                (rule "inEqSimp_notLeq" (formula "47") (term "0,1,0,0,1"))
                                                (rule "mul_literals" (formula "47") (term "1,0,0,0,1,0,0,1"))
                                                (rule "add_literals" (formula "47") (term "0,0,0,1,0,0,1"))
                                                (rule "inEqSimp_sepPosMonomial1" (formula "47") (term "0,1,0,0,1"))
                                                (rule "mul_literals" (formula "47") (term "1,0,1,0,0,1"))
                                                (rule "inEqSimp_notGeq" (formula "47") (term "1,1,0,0,1"))
                                                (rule "mul_literals" (formula "47") (term "1,0,0,1,1,0,0,1"))
                                                (rule "add_literals" (formula "47") (term "0,0,1,1,0,0,1"))
                                                (rule "inEqSimp_sepPosMonomial0" (formula "47") (term "1,1,0,0,1"))
                                                (rule "mul_literals" (formula "47") (term "1,1,1,0,0,1"))
                                                (rule "commute_or_2" (formula "12") (term "0"))
                                                (rule "commute_or" (formula "11") (term "0,0"))
                                                (rule "commute_or_2" (formula "16") (term "0"))
                                                (rule "commute_or_2" (formula "15") (term "0"))
                                                (rule "commute_and" (formula "11") (term "0,0,1,0"))
                                                (rule "commute_or" (formula "12") (term "0,0"))
                                                (rule "commute_or_2" (formula "12") (term "0"))
                                                (rule "commute_or_2" (formula "16") (term "0,0"))
                                                (rule "commute_or_2" (formula "15") (term "0,0"))
                                                (rule "commute_or" (formula "16") (term "0,0,0"))
                                                (rule "commute_or_2" (formula "16") (term "0,0"))
                                                (rule "commute_or_2" (formula "16") (term "0"))
                                                (rule "commute_or" (formula "15") (term "0,0,0"))
                                                (rule "commute_or_2" (formula "15") (term "0,0"))
                                                (rule "commute_or_2" (formula "15") (term "0"))
                                                (rule "cut_direct" (formula "32") (term "0,0,0"))
                                                (branch "CUT: result_2.<created> = TRUE TRUE"
                                                    (builtin "One Step Simplification" (formula "33"))
                                                   (rule "true_left" (formula "33"))
                                                   (rule "seqGetAlphaCast" (formula "33") (term "0"))
                                                   (rule "castedGetAny" (formula "33") (term "0"))
                                                    (builtin "One Step Simplification" (formula "33"))
                                                   (rule "true_left" (formula "33"))
                                                   (rule "andRight" (formula "47"))
                                                   (branch
                                                      (rule "allRight" (formula "47") (inst "sk=i_0_0"))
                                                      (rule "orRight" (formula "47"))
                                                      (rule "notRight" (formula "48"))
                                                      (rule "orRight" (formula "48"))
                                                      (rule "orRight" (formula "49"))
                                                      (rule "orRight" (formula "48"))
                                                      (rule "inEqSimp_geqRight" (formula "50"))
                                                      (rule "mul_literals" (formula "1") (term "1,0,0"))
                                                      (rule "add_literals" (formula "1") (term "0,0"))
                                                      (rule "inEqSimp_leqRight" (formula "51"))
                                                      (rule "mul_literals" (formula "1") (term "1,0,0"))
                                                      (rule "add_literals" (formula "1") (term "0,0"))
                                                      (rule "inEqSimp_geqRight" (formula "51"))
                                                      (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
                                                      (rule "polySimp_addComm1" (formula "1") (term "0"))
                                                      (rule "inEqSimp_leqRight" (formula "51"))
                                                      (rule "mul_literals" (formula "1") (term "1,0,0"))
                                                      (rule "add_literals" (formula "1") (term "0,0"))
                                                      (rule "add_zero_left" (formula "1") (term "0"))
                                                      (rule "inEqSimp_sepPosMonomial0" (formula "4"))
                                                      (rule "mul_literals" (formula "4") (term "1"))
                                                      (rule "inEqSimp_sepPosMonomial1" (formula "3"))
                                                      (rule "mul_literals" (formula "3") (term "1"))
                                                      (rule "inEqSimp_sepNegMonomial0" (formula "2"))
                                                      (rule "polySimp_mulLiterals" (formula "2") (term "0"))
                                                      (rule "polySimp_elimOne" (formula "2") (term "0"))
                                                      (rule "inEqSimp_subsumption1" (formula "3") (ifseqformula "1"))
                                                      (rule "leq_literals" (formula "3") (term "0"))
                                                       (builtin "One Step Simplification" (formula "3"))
                                                      (rule "true_left" (formula "3"))
                                                      (rule "commute_and_2" (formula "15") (term "0,1,0"))
                                                      (rule "ex_pull_out3" (formula "15") (term "0"))
                                                      (rule "cnf_rightDist" (formula "15") (term "0,0"))
                                                      (rule "shift_paren_or" (formula "15") (term "1,0,0"))
                                                      (rule "cnf_rightDist" (formula "15") (term "0,0,0"))
                                                      (rule "commute_or_2" (formula "15") (term "0,0,0,0"))
                                                      (rule "shift_paren_or" (formula "15") (term "1,0,0,0"))
                                                      (rule "commute_or" (formula "15") (term "0,0,0,0,0"))
                                                      (rule "allLeft" (formula "19") (inst "t=i_0_0"))
                                                      (rule "replace_known_left" (formula "19") (term "0,0,0,0") (ifseqformula "4"))
                                                       (builtin "One Step Simplification" (formula "19"))
                                                      (rule "inEqSimp_commuteGeq" (formula "19") (term "1"))
                                                      (rule "inEqSimp_contradInEq1" (formula "19") (term "1") (ifseqformula "2"))
                                                      (rule "inEqSimp_homoInEq1" (formula "19") (term "0,1"))
                                                      (rule "polySimp_pullOutFactor1b" (formula "19") (term "0,0,1"))
                                                      (rule "add_literals" (formula "19") (term "1,1,0,0,1"))
                                                      (rule "times_zero_1" (formula "19") (term "1,0,0,1"))
                                                      (rule "add_literals" (formula "19") (term "0,0,1"))
                                                      (rule "leq_literals" (formula "19") (term "0,1"))
                                                       (builtin "One Step Simplification" (formula "19"))
                                                      (rule "inEqSimp_contradInEq1" (formula "19") (term "0") (ifseqformula "1"))
                                                      (rule "qeq_literals" (formula "19") (term "0,0"))
                                                       (builtin "One Step Simplification" (formula "19"))
                                                      (rule "inEqSimp_subsumption1" (formula "1") (ifseqformula "19"))
                                                      (rule "leq_literals" (formula "1") (term "0"))
                                                       (builtin "One Step Simplification" (formula "1"))
                                                      (rule "true_left" (formula "1"))
                                                      (rule "inEqSimp_contradInEq1" (formula "2") (ifseqformula "18"))
                                                      (rule "qeq_literals" (formula "2") (term "0"))
                                                       (builtin "One Step Simplification" (formula "2"))
                                                      (rule "closeFalse" (formula "2"))
                                                   )
                                                   (branch
                                                      (rule "allRight" (formula "47") (inst "sk=i_0"))
                                                      (rule "orRight" (formula "47"))
                                                      (rule "notRight" (formula "48"))
                                                      (rule "orRight" (formula "48"))
                                                      (rule "orRight" (formula "49"))
                                                      (rule "orRight" (formula "48"))
                                                      (rule "inEqSimp_geqRight" (formula "50"))
                                                      (rule "mul_literals" (formula "1") (term "1,0,0"))
                                                      (rule "add_literals" (formula "1") (term "0,0"))
                                                      (rule "inEqSimp_leqRight" (formula "51"))
                                                      (rule "mul_literals" (formula "1") (term "1,0,0"))
                                                      (rule "add_literals" (formula "1") (term "0,0"))
                                                      (rule "inEqSimp_geqRight" (formula "51"))
                                                      (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
                                                      (rule "polySimp_addComm1" (formula "1") (term "0"))
                                                      (rule "inEqSimp_leqRight" (formula "51"))
                                                      (rule "mul_literals" (formula "1") (term "1,0,0"))
                                                      (rule "add_literals" (formula "1") (term "0,0"))
                                                      (rule "add_zero_left" (formula "1") (term "0"))
                                                      (rule "inEqSimp_sepPosMonomial0" (formula "4"))
                                                      (rule "mul_literals" (formula "4") (term "1"))
                                                      (rule "inEqSimp_sepPosMonomial1" (formula "3"))
                                                      (rule "mul_literals" (formula "3") (term "1"))
                                                      (rule "inEqSimp_sepNegMonomial0" (formula "2"))
                                                      (rule "polySimp_mulLiterals" (formula "2") (term "0"))
                                                      (rule "polySimp_elimOne" (formula "2") (term "0"))
                                                      (rule "inEqSimp_subsumption1" (formula "3") (ifseqformula "1"))
                                                      (rule "leq_literals" (formula "3") (term "0"))
                                                       (builtin "One Step Simplification" (formula "3"))
                                                      (rule "true_left" (formula "3"))
                                                      (rule "commute_and_2" (formula "15") (term "0,1,0"))
                                                      (rule "allLeft" (formula "20") (inst "t=i_0"))
                                                      (rule "replace_known_left" (formula "20") (term "0,0,0,0") (ifseqformula "4"))
                                                       (builtin "One Step Simplification" (formula "20"))
                                                      (rule "inEqSimp_commuteGeq" (formula "20") (term "1"))
                                                      (rule "inEqSimp_contradInEq0" (formula "20") (term "1,0") (ifseqformula "3"))
                                                      (rule "qeq_literals" (formula "20") (term "0,1,0"))
                                                       (builtin "One Step Simplification" (formula "20"))
                                                      (rule "inEqSimp_contradInEq1" (formula "20") (term "1") (ifseqformula "2"))
                                                      (rule "inEqSimp_homoInEq1" (formula "20") (term "0,1"))
                                                      (rule "polySimp_pullOutFactor1b" (formula "20") (term "0,0,1"))
                                                      (rule "add_literals" (formula "20") (term "1,1,0,0,1"))
                                                      (rule "times_zero_1" (formula "20") (term "1,0,0,1"))
                                                      (rule "add_literals" (formula "20") (term "0,0,1"))
                                                      (rule "leq_literals" (formula "20") (term "0,1"))
                                                       (builtin "One Step Simplification" (formula "20"))
                                                      (rule "inEqSimp_contradInEq0" (formula "1") (ifseqformula "20"))
                                                      (rule "qeq_literals" (formula "1") (term "0"))
                                                       (builtin "One Step Simplification" (formula "1"))
                                                      (rule "closeFalse" (formula "1"))
                                                   )
                                                )
                                                (branch "CUT: result_2.<created> = TRUE FALSE"
                                                    (builtin "One Step Simplification" (formula "32"))
                                                   (rule "seqGetAlphaCast" (formula "33") (term "0"))
                                                   (rule "castedGetAny" (formula "33") (term "0"))
                                                    (builtin "One Step Simplification" (formula "33"))
                                                   (rule "true_left" (formula "33"))
                                                   (rule "andRight" (formula "48"))
                                                   (branch
                                                      (rule "allRight" (formula "48") (inst "sk=i_0_0"))
                                                      (rule "orRight" (formula "48"))
                                                      (rule "orRight" (formula "48"))
                                                      (rule "notRight" (formula "50"))
                                                      (rule "orRight" (formula "49"))
                                                      (rule "orRight" (formula "51"))
                                                      (rule "inEqSimp_geqRight" (formula "50"))
                                                      (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
                                                      (rule "polySimp_addComm1" (formula "1") (term "0"))
                                                      (rule "inEqSimp_leqRight" (formula "50"))
                                                      (rule "mul_literals" (formula "1") (term "1,0,0"))
                                                      (rule "add_literals" (formula "1") (term "0,0"))
                                                      (rule "add_zero_left" (formula "1") (term "0"))
                                                      (rule "inEqSimp_leqRight" (formula "52"))
                                                      (rule "mul_literals" (formula "1") (term "1,0,0"))
                                                      (rule "add_literals" (formula "1") (term "0,0"))
                                                      (rule "inEqSimp_geqRight" (formula "52"))
                                                      (rule "mul_literals" (formula "1") (term "1,0,0"))
                                                      (rule "add_literals" (formula "1") (term "0,0"))
                                                      (rule "inEqSimp_sepNegMonomial0" (formula "4"))
                                                      (rule "polySimp_mulLiterals" (formula "4") (term "0"))
                                                      (rule "polySimp_elimOne" (formula "4") (term "0"))
                                                      (rule "inEqSimp_sepPosMonomial1" (formula "2"))
                                                      (rule "mul_literals" (formula "2") (term "1"))
                                                      (rule "inEqSimp_sepPosMonomial0" (formula "1"))
                                                      (rule "mul_literals" (formula "1") (term "1"))
                                                      (rule "inEqSimp_subsumption1" (formula "2") (ifseqformula "3"))
                                                      (rule "leq_literals" (formula "2") (term "0"))
                                                       (builtin "One Step Simplification" (formula "2"))
                                                      (rule "true_left" (formula "2"))
                                                      (rule "commute_and_2" (formula "15") (term "0,1,0"))
                                                      (rule "ex_pull_out3" (formula "15") (term "0"))
                                                      (rule "cnf_rightDist" (formula "15") (term "0,0"))
                                                      (rule "shift_paren_or" (formula "15") (term "1,0,0"))
                                                      (rule "cnf_rightDist" (formula "15") (term "0,0,0"))
                                                      (rule "commute_or_2" (formula "15") (term "0,0,0,0"))
                                                      (rule "shift_paren_or" (formula "15") (term "1,0,0,0"))
                                                      (rule "commute_or" (formula "15") (term "0,0,0,0,0"))
                                                      (rule "allLeft" (formula "19") (inst "t=i_0_0"))
                                                      (rule "replace_known_left" (formula "19") (term "0,0,0,0") (ifseqformula "4"))
                                                       (builtin "One Step Simplification" (formula "19"))
                                                      (rule "inEqSimp_commuteGeq" (formula "19") (term "1"))
                                                      (rule "inEqSimp_contradInEq0" (formula "19") (term "1,0") (ifseqformula "1"))
                                                      (rule "qeq_literals" (formula "19") (term "0,1,0"))
                                                       (builtin "One Step Simplification" (formula "19"))
                                                      (rule "inEqSimp_contradInEq1" (formula "19") (term "0") (ifseqformula "2"))
                                                      (rule "qeq_literals" (formula "19") (term "0,0"))
                                                       (builtin "One Step Simplification" (formula "19"))
                                                      (rule "inEqSimp_contradInEq0" (formula "3") (ifseqformula "19"))
                                                      (rule "andLeft" (formula "3"))
                                                      (rule "inEqSimp_homoInEq1" (formula "3"))
                                                      (rule "polySimp_pullOutFactor1b" (formula "3") (term "0"))
                                                      (rule "add_literals" (formula "3") (term "1,1,0"))
                                                      (rule "times_zero_1" (formula "3") (term "1,0"))
                                                      (rule "add_zero_right" (formula "3") (term "0"))
                                                      (rule "leq_literals" (formula "3"))
                                                      (rule "closeFalse" (formula "3"))
                                                   )
                                                   (branch
                                                      (rule "allRight" (formula "48") (inst "sk=i_0"))
                                                      (rule "orRight" (formula "48"))
                                                      (rule "orRight" (formula "48"))
                                                      (rule "notRight" (formula "50"))
                                                      (rule "orRight" (formula "49"))
                                                      (rule "orRight" (formula "51"))
                                                      (rule "inEqSimp_geqRight" (formula "50"))
                                                      (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
                                                      (rule "polySimp_addComm1" (formula "1") (term "0"))
                                                      (rule "inEqSimp_leqRight" (formula "50"))
                                                      (rule "mul_literals" (formula "1") (term "1,0,0"))
                                                      (rule "add_literals" (formula "1") (term "0,0"))
                                                      (rule "add_zero_left" (formula "1") (term "0"))
                                                      (rule "inEqSimp_leqRight" (formula "52"))
                                                      (rule "mul_literals" (formula "1") (term "1,0,0"))
                                                      (rule "add_literals" (formula "1") (term "0,0"))
                                                      (rule "inEqSimp_geqRight" (formula "52"))
                                                      (rule "mul_literals" (formula "1") (term "1,0,0"))
                                                      (rule "add_literals" (formula "1") (term "0,0"))
                                                      (rule "inEqSimp_sepNegMonomial0" (formula "4"))
                                                      (rule "polySimp_mulLiterals" (formula "4") (term "0"))
                                                      (rule "polySimp_elimOne" (formula "4") (term "0"))
                                                      (rule "inEqSimp_sepPosMonomial1" (formula "2"))
                                                      (rule "mul_literals" (formula "2") (term "1"))
                                                      (rule "inEqSimp_sepPosMonomial0" (formula "1"))
                                                      (rule "mul_literals" (formula "1") (term "1"))
                                                      (rule "inEqSimp_subsumption1" (formula "2") (ifseqformula "3"))
                                                      (rule "leq_literals" (formula "2") (term "0"))
                                                       (builtin "One Step Simplification" (formula "2"))
                                                      (rule "true_left" (formula "2"))
                                                      (rule "commute_and_2" (formula "15") (term "0,1,0"))
                                                      (rule "allLeft" (formula "20") (inst "t=i_0"))
                                                      (rule "replace_known_left" (formula "20") (term "0,0,0,0") (ifseqformula "4"))
                                                       (builtin "One Step Simplification" (formula "20"))
                                                      (rule "inEqSimp_commuteGeq" (formula "20") (term "1"))
                                                      (rule "inEqSimp_contradInEq1" (formula "20") (term "1") (ifseqformula "3"))
                                                      (rule "inEqSimp_homoInEq1" (formula "20") (term "0,1"))
                                                      (rule "polySimp_pullOutFactor1b" (formula "20") (term "0,0,1"))
                                                      (rule "add_literals" (formula "20") (term "1,1,0,0,1"))
                                                      (rule "times_zero_1" (formula "20") (term "1,0,0,1"))
                                                      (rule "add_zero_right" (formula "20") (term "0,0,1"))
                                                      (rule "leq_literals" (formula "20") (term "0,1"))
                                                       (builtin "One Step Simplification" (formula "20"))
                                                      (rule "inEqSimp_contradInEq1" (formula "20") (term "0") (ifseqformula "2"))
                                                      (rule "qeq_literals" (formula "20") (term "0,0"))
                                                       (builtin "One Step Simplification" (formula "20"))
                                                      (rule "inEqSimp_subsumption1" (formula "2") (ifseqformula "20"))
                                                      (rule "leq_literals" (formula "2") (term "0"))
                                                       (builtin "One Step Simplification" (formula "2"))
                                                      (rule "true_left" (formula "2"))
                                                      (rule "inEqSimp_contradInEq1" (formula "1") (ifseqformula "19"))
                                                      (rule "qeq_literals" (formula "1") (term "0"))
                                                       (builtin "One Step Simplification" (formula "1"))
                                                      (rule "closeFalse" (formula "1"))
                                                   )
                                                )
                                             )
                                          )
                                          (branch
                                             (rule "inEqSimp_ltToLeq" (formula "28"))
                                             (rule "polySimp_mulComm0" (formula "28") (term "1,0,0"))
                                             (rule "polySimp_addComm1" (formula "28") (term "0"))
                                             (rule "inEqSimp_ltToLeq" (formula "12") (term "0,0,0"))
                                             (rule "polySimp_mulComm0" (formula "12") (term "1,0,0,0,0,0"))
                                             (rule "inEqSimp_ltToLeq" (formula "11") (term "0,0,0"))
                                             (rule "polySimp_mulComm0" (formula "11") (term "1,0,0,0,0,0"))
                                             (rule "inEqSimp_ltToLeq" (formula "16") (term "0,0,0,0,0"))
                                             (rule "polySimp_mulComm0" (formula "16") (term "1,0,0,0,0,0,0,0"))
                                             (rule "inEqSimp_ltToLeq" (formula "15") (term "0,0,0,0,0"))
                                             (rule "polySimp_mulComm0" (formula "15") (term "1,0,0,0,0,0,0,0"))
                                             (rule "inEqSimp_ltToLeq" (formula "11") (term "0,0,0,1,0"))
                                             (rule "polySimp_mulComm0" (formula "11") (term "1,0,0,0,0,0,1,0"))
                                             (rule "inEqSimp_sepPosMonomial1" (formula "37"))
                                             (rule "mul_literals" (formula "37") (term "1"))
                                             (rule "inEqSimp_sepNegMonomial0" (formula "28"))
                                             (rule "polySimp_mulLiterals" (formula "28") (term "0"))
                                             (rule "polySimp_elimOne" (formula "28") (term "0"))
                                             (rule "inEqSimp_sepPosMonomial0" (formula "12") (term "0,0,0"))
                                             (rule "polySimp_mulComm0" (formula "12") (term "1,0,0,0"))
                                             (rule "polySimp_rightDist" (formula "12") (term "1,0,0,0"))
                                             (rule "polySimp_mulLiterals" (formula "12") (term "1,1,0,0,0"))
                                             (rule "mul_literals" (formula "12") (term "0,1,0,0,0"))
                                             (rule "polySimp_elimOne" (formula "12") (term "1,1,0,0,0"))
                                             (rule "inEqSimp_sepPosMonomial0" (formula "11") (term "0,0,0"))
                                             (rule "polySimp_mulComm0" (formula "11") (term "1,0,0,0"))
                                             (rule "polySimp_rightDist" (formula "11") (term "1,0,0,0"))
                                             (rule "mul_literals" (formula "11") (term "0,1,0,0,0"))
                                             (rule "polySimp_mulLiterals" (formula "11") (term "1,1,0,0,0"))
                                             (rule "polySimp_elimOne" (formula "11") (term "1,1,0,0,0"))
                                             (rule "inEqSimp_sepPosMonomial0" (formula "16") (term "0,0,0,0,0"))
                                             (rule "polySimp_mulComm0" (formula "16") (term "1,0,0,0,0,0"))
                                             (rule "polySimp_rightDist" (formula "16") (term "1,0,0,0,0,0"))
                                             (rule "polySimp_mulLiterals" (formula "16") (term "1,1,0,0,0,0,0"))
                                             (rule "mul_literals" (formula "16") (term "0,1,0,0,0,0,0"))
                                             (rule "polySimp_elimOne" (formula "16") (term "1,1,0,0,0,0,0"))
                                             (rule "inEqSimp_sepPosMonomial0" (formula "15") (term "0,0,0,0,0"))
                                             (rule "polySimp_mulComm0" (formula "15") (term "1,0,0,0,0,0"))
                                             (rule "polySimp_rightDist" (formula "15") (term "1,0,0,0,0,0"))
                                             (rule "polySimp_mulLiterals" (formula "15") (term "1,1,0,0,0,0,0"))
                                             (rule "mul_literals" (formula "15") (term "0,1,0,0,0,0,0"))
                                             (rule "polySimp_elimOne" (formula "15") (term "1,1,0,0,0,0,0"))
                                             (rule "inEqSimp_sepPosMonomial0" (formula "11") (term "0,0,0,1,0"))
                                             (rule "polySimp_mulComm0" (formula "11") (term "1,0,0,0,1,0"))
                                             (rule "polySimp_rightDist" (formula "11") (term "1,0,0,0,1,0"))
                                             (rule "polySimp_mulLiterals" (formula "11") (term "1,1,0,0,0,1,0"))
                                             (rule "mul_literals" (formula "11") (term "0,1,0,0,0,1,0"))
                                             (rule "polySimp_elimOne" (formula "11") (term "1,1,0,0,0,1,0"))
                                             (rule "inEqSimp_contradEq7" (formula "41") (ifseqformula "37"))
                                             (rule "polySimp_mulComm0" (formula "41") (term "1,0,0"))
                                             (rule "polySimp_pullOutFactor1b" (formula "41") (term "0,0"))
                                             (rule "add_literals" (formula "41") (term "1,1,0,0"))
                                             (rule "times_zero_1" (formula "41") (term "1,0,0"))
                                             (rule "add_zero_right" (formula "41") (term "0,0"))
                                             (rule "leq_literals" (formula "41") (term "0"))
                                              (builtin "One Step Simplification" (formula "41"))
                                             (rule "false_right" (formula "41"))
                                             (rule "inEqSimp_subsumption1" (formula "36") (ifseqformula "25"))
                                             (rule "leq_literals" (formula "36") (term "0"))
                                              (builtin "One Step Simplification" (formula "36"))
                                             (rule "true_left" (formula "36"))
                                             (rule "inEqSimp_subsumption1" (formula "26") (ifseqformula "36"))
                                             (rule "inEqSimp_homoInEq0" (formula "26") (term "0"))
                                             (rule "polySimp_pullOutFactor1b" (formula "26") (term "0,0"))
                                             (rule "add_literals" (formula "26") (term "1,1,0,0"))
                                             (rule "times_zero_1" (formula "26") (term "1,0,0"))
                                             (rule "add_zero_right" (formula "26") (term "0,0"))
                                             (rule "qeq_literals" (formula "26") (term "0"))
                                              (builtin "One Step Simplification" (formula "26"))
                                             (rule "true_left" (formula "26"))
                                             (rule "pullOutSelect" (formula "47") (term "1") (inst "selectSK=de_polyas_core3_open_cred_CredTool_vals_2"))
                                             (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "38"))
                                              (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "46")))
                                             (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,1,0,0") (ifseqformula "31"))
                                              (builtin "One Step Simplification" (formula "1"))
                                             (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,0,0,1,0,0") (ifseqformula "19"))
                                             (rule "replace_known_left" (formula "1") (term "0,0,0,0,1,0,0") (ifseqformula "8"))
                                              (builtin "One Step Simplification" (formula "1"))
                                             (rule "elementOfSingleton" (formula "1") (term "0,0"))
                                              (builtin "One Step Simplification" (formula "1"))
                                             (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "31"))
                                              (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "46")))
                                             (rule "replaceKnownSelect_taclet10_12" (formula "1") (term "2,0"))
                                             (rule "replaceKnownAuxiliaryConstant_taclet10_13" (formula "1") (term "2,0"))
                                             (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,0,1,0,0") (ifseqformula "19"))
                                             (rule "replace_known_left" (formula "1") (term "0,0,0,1,0,0") (ifseqformula "8"))
                                              (builtin "One Step Simplification" (formula "1"))
                                             (rule "elementOfSingleton" (formula "1") (term "0,0"))
                                              (builtin "One Step Simplification" (formula "1"))
                                             (rule "applyEqReverse" (formula "48") (term "1") (ifseqformula "1"))
                                             (rule "hideAuxiliaryEq" (formula "1"))
                                             (rule "inEqSimp_and_subsumption3" (formula "16") (term "0,0,0"))
                                             (rule "leq_literals" (formula "16") (term "0,1,0,0,0,0"))
                                              (builtin "One Step Simplification" (formula "16"))
                                             (rule "inEqSimp_and_subsumption3" (formula "15") (term "0,0,0"))
                                             (rule "leq_literals" (formula "15") (term "0,1,0,0,0,0"))
                                              (builtin "One Step Simplification" (formula "15"))
                                             (rule "nnf_imp2or" (formula "12") (term "0"))
                                             (rule "nnf_imp2or" (formula "11") (term "0"))
                                             (rule "nnf_imp2or" (formula "16") (term "0"))
                                             (rule "nnf_imp2or" (formula "15") (term "0"))
                                             (rule "nnf_notAnd" (formula "12") (term "0,0"))
                                             (rule "inEqSimp_notLeq" (formula "12") (term "0,0,0"))
                                             (rule "polySimp_rightDist" (formula "12") (term "1,0,0,0,0,0"))
                                             (rule "mul_literals" (formula "12") (term "0,1,0,0,0,0,0"))
                                             (rule "polySimp_addAssoc" (formula "12") (term "0,0,0,0,0"))
                                             (rule "add_literals" (formula "12") (term "0,0,0,0,0,0"))
                                             (rule "add_zero_left" (formula "12") (term "0,0,0,0,0"))
                                             (rule "inEqSimp_sepPosMonomial1" (formula "12") (term "0,0,0"))
                                             (rule "polySimp_mulLiterals" (formula "12") (term "1,0,0,0"))
                                             (rule "polySimp_elimOne" (formula "12") (term "1,0,0,0"))
                                             (rule "inEqSimp_notGeq" (formula "12") (term "1,0,0"))
                                             (rule "mul_literals" (formula "12") (term "1,0,0,1,0,0"))
                                             (rule "add_literals" (formula "12") (term "0,0,1,0,0"))
                                             (rule "inEqSimp_sepPosMonomial0" (formula "12") (term "1,0,0"))
                                             (rule "mul_literals" (formula "12") (term "1,1,0,0"))
                                             (rule "nnf_notAnd" (formula "11") (term "0,0"))
                                             (rule "inEqSimp_notLeq" (formula "11") (term "0,0,0"))
                                             (rule "polySimp_rightDist" (formula "11") (term "1,0,0,0,0,0"))
                                             (rule "mul_literals" (formula "11") (term "0,1,0,0,0,0,0"))
                                             (rule "polySimp_addAssoc" (formula "11") (term "0,0,0,0,0"))
                                             (rule "add_literals" (formula "11") (term "0,0,0,0,0,0"))
                                             (rule "add_zero_left" (formula "11") (term "0,0,0,0,0"))
                                             (rule "inEqSimp_sepPosMonomial1" (formula "11") (term "0,0,0"))
                                             (rule "polySimp_mulLiterals" (formula "11") (term "1,0,0,0"))
                                             (rule "polySimp_elimOne" (formula "11") (term "1,0,0,0"))
                                             (rule "inEqSimp_notGeq" (formula "11") (term "1,0,0"))
                                             (rule "times_zero_1" (formula "11") (term "1,0,0,1,0,0"))
                                             (rule "add_literals" (formula "11") (term "0,0,1,0,0"))
                                             (rule "inEqSimp_sepPosMonomial0" (formula "11") (term "1,0,0"))
                                             (rule "mul_literals" (formula "11") (term "1,1,0,0"))
                                             (rule "nnf_notAnd" (formula "16") (term "0,0"))
                                             (rule "inEqSimp_notLeq" (formula "16") (term "1,0,0"))
                                             (rule "mul_literals" (formula "16") (term "1,0,0,1,0,0"))
                                             (rule "add_literals" (formula "16") (term "0,0,1,0,0"))
                                             (rule "inEqSimp_sepPosMonomial1" (formula "16") (term "1,0,0"))
                                             (rule "mul_literals" (formula "16") (term "1,1,0,0"))
                                             (rule "nnf_notAnd" (formula "15") (term "0,0"))
                                             (rule "inEqSimp_notLeq" (formula "15") (term "1,0,0"))
                                             (rule "mul_literals" (formula "15") (term "1,0,0,1,0,0"))
                                             (rule "add_literals" (formula "15") (term "0,0,1,0,0"))
                                             (rule "inEqSimp_sepPosMonomial1" (formula "15") (term "1,0,0"))
                                             (rule "mul_literals" (formula "15") (term "1,1,0,0"))
                                             (rule "nnf_notAnd" (formula "16") (term "0,0,0"))
                                             (rule "inEqSimp_notLeq" (formula "16") (term "0,0,0,0"))
                                             (rule "polySimp_rightDist" (formula "16") (term "1,0,0,0,0,0,0"))
                                             (rule "mul_literals" (formula "16") (term "0,1,0,0,0,0,0,0"))
                                             (rule "polySimp_addAssoc" (formula "16") (term "0,0,0,0,0,0"))
                                             (rule "add_literals" (formula "16") (term "0,0,0,0,0,0,0"))
                                             (rule "add_zero_left" (formula "16") (term "0,0,0,0,0,0"))
                                             (rule "inEqSimp_sepPosMonomial1" (formula "16") (term "0,0,0,0"))
                                             (rule "polySimp_mulLiterals" (formula "16") (term "1,0,0,0,0"))
                                             (rule "polySimp_elimOne" (formula "16") (term "1,0,0,0,0"))
                                             (rule "inEqSimp_notGeq" (formula "16") (term "1,0,0,0"))
                                             (rule "mul_literals" (formula "16") (term "1,0,0,1,0,0,0"))
                                             (rule "add_literals" (formula "16") (term "0,0,1,0,0,0"))
                                             (rule "inEqSimp_sepPosMonomial0" (formula "16") (term "1,0,0,0"))
                                             (rule "mul_literals" (formula "16") (term "1,1,0,0,0"))
                                             (rule "nnf_notAnd" (formula "15") (term "0,0,0"))
                                             (rule "inEqSimp_notLeq" (formula "15") (term "0,0,0,0"))
                                             (rule "polySimp_rightDist" (formula "15") (term "1,0,0,0,0,0,0"))
                                             (rule "mul_literals" (formula "15") (term "0,1,0,0,0,0,0,0"))
                                             (rule "polySimp_addAssoc" (formula "15") (term "0,0,0,0,0,0"))
                                             (rule "add_literals" (formula "15") (term "0,0,0,0,0,0,0"))
                                             (rule "add_zero_left" (formula "15") (term "0,0,0,0,0,0"))
                                             (rule "inEqSimp_sepPosMonomial1" (formula "15") (term "0,0,0,0"))
                                             (rule "polySimp_mulLiterals" (formula "15") (term "1,0,0,0,0"))
                                             (rule "polySimp_elimOne" (formula "15") (term "1,0,0,0,0"))
                                             (rule "inEqSimp_notGeq" (formula "15") (term "1,0,0,0"))
                                             (rule "times_zero_1" (formula "15") (term "1,0,0,1,0,0,0"))
                                             (rule "add_zero_right" (formula "15") (term "0,0,1,0,0,0"))
                                             (rule "inEqSimp_sepPosMonomial0" (formula "15") (term "1,0,0,0"))
                                             (rule "mul_literals" (formula "15") (term "1,1,0,0,0"))
                                             (rule "Class_invariant_axiom_for_java_util_ArrayList" (formula "47"))
                                             (rule "closeTrue" (formula "47"))
                                          )
                                       )
                                       (branch
                                          (rule "inEqSimp_ltToLeq" (formula "28"))
                                          (rule "polySimp_mulComm0" (formula "28") (term "1,0,0"))
                                          (rule "polySimp_addComm1" (formula "28") (term "0"))
                                          (rule "inEqSimp_ltToLeq" (formula "12") (term "0,0,0"))
                                          (rule "polySimp_mulComm0" (formula "12") (term "1,0,0,0,0,0"))
                                          (rule "inEqSimp_ltToLeq" (formula "11") (term "0,0,0"))
                                          (rule "polySimp_mulComm0" (formula "11") (term "1,0,0,0,0,0"))
                                          (rule "inEqSimp_ltToLeq" (formula "16") (term "0,0,0,0,0"))
                                          (rule "polySimp_mulComm0" (formula "16") (term "1,0,0,0,0,0,0,0"))
                                          (rule "inEqSimp_ltToLeq" (formula "15") (term "0,0,0,0,0"))
                                          (rule "polySimp_mulComm0" (formula "15") (term "1,0,0,0,0,0,0,0"))
                                          (rule "inEqSimp_ltToLeq" (formula "11") (term "0,0,0,1,0"))
                                          (rule "polySimp_mulComm0" (formula "11") (term "1,0,0,0,0,0,1,0"))
                                          (rule "inEqSimp_sepPosMonomial1" (formula "37"))
                                          (rule "mul_literals" (formula "37") (term "1"))
                                          (rule "inEqSimp_sepNegMonomial0" (formula "28"))
                                          (rule "polySimp_mulLiterals" (formula "28") (term "0"))
                                          (rule "polySimp_elimOne" (formula "28") (term "0"))
                                          (rule "inEqSimp_sepPosMonomial0" (formula "12") (term "0,0,0"))
                                          (rule "polySimp_mulComm0" (formula "12") (term "1,0,0,0"))
                                          (rule "polySimp_rightDist" (formula "12") (term "1,0,0,0"))
                                          (rule "polySimp_mulLiterals" (formula "12") (term "1,1,0,0,0"))
                                          (rule "mul_literals" (formula "12") (term "0,1,0,0,0"))
                                          (rule "polySimp_elimOne" (formula "12") (term "1,1,0,0,0"))
                                          (rule "inEqSimp_sepPosMonomial0" (formula "11") (term "0,0,0"))
                                          (rule "polySimp_mulComm0" (formula "11") (term "1,0,0,0"))
                                          (rule "polySimp_rightDist" (formula "11") (term "1,0,0,0"))
                                          (rule "mul_literals" (formula "11") (term "0,1,0,0,0"))
                                          (rule "polySimp_mulLiterals" (formula "11") (term "1,1,0,0,0"))
                                          (rule "polySimp_elimOne" (formula "11") (term "1,1,0,0,0"))
                                          (rule "inEqSimp_sepPosMonomial0" (formula "16") (term "0,0,0,0,0"))
                                          (rule "polySimp_mulComm0" (formula "16") (term "1,0,0,0,0,0"))
                                          (rule "polySimp_rightDist" (formula "16") (term "1,0,0,0,0,0"))
                                          (rule "polySimp_mulLiterals" (formula "16") (term "1,1,0,0,0,0,0"))
                                          (rule "mul_literals" (formula "16") (term "0,1,0,0,0,0,0"))
                                          (rule "polySimp_elimOne" (formula "16") (term "1,1,0,0,0,0,0"))
                                          (rule "inEqSimp_sepPosMonomial0" (formula "15") (term "0,0,0,0,0"))
                                          (rule "polySimp_mulComm0" (formula "15") (term "1,0,0,0,0,0"))
                                          (rule "polySimp_rightDist" (formula "15") (term "1,0,0,0,0,0"))
                                          (rule "polySimp_mulLiterals" (formula "15") (term "1,1,0,0,0,0,0"))
                                          (rule "mul_literals" (formula "15") (term "0,1,0,0,0,0,0"))
                                          (rule "polySimp_elimOne" (formula "15") (term "1,1,0,0,0,0,0"))
                                          (rule "inEqSimp_sepPosMonomial0" (formula "11") (term "0,0,0,1,0"))
                                          (rule "polySimp_mulComm0" (formula "11") (term "1,0,0,0,1,0"))
                                          (rule "polySimp_rightDist" (formula "11") (term "1,0,0,0,1,0"))
                                          (rule "polySimp_mulLiterals" (formula "11") (term "1,1,0,0,0,1,0"))
                                          (rule "mul_literals" (formula "11") (term "0,1,0,0,0,1,0"))
                                          (rule "polySimp_elimOne" (formula "11") (term "1,1,0,0,0,1,0"))
                                          (rule "inEqSimp_contradEq7" (formula "41") (ifseqformula "37"))
                                          (rule "polySimp_mulComm0" (formula "41") (term "1,0,0"))
                                          (rule "polySimp_pullOutFactor1b" (formula "41") (term "0,0"))
                                          (rule "add_literals" (formula "41") (term "1,1,0,0"))
                                          (rule "times_zero_1" (formula "41") (term "1,0,0"))
                                          (rule "add_zero_right" (formula "41") (term "0,0"))
                                          (rule "leq_literals" (formula "41") (term "0"))
                                           (builtin "One Step Simplification" (formula "41"))
                                          (rule "false_right" (formula "41"))
                                          (rule "inEqSimp_subsumption1" (formula "36") (ifseqformula "25"))
                                          (rule "leq_literals" (formula "36") (term "0"))
                                           (builtin "One Step Simplification" (formula "36"))
                                          (rule "true_left" (formula "36"))
                                          (rule "inEqSimp_subsumption1" (formula "26") (ifseqformula "36"))
                                          (rule "inEqSimp_homoInEq0" (formula "26") (term "0"))
                                          (rule "polySimp_pullOutFactor1b" (formula "26") (term "0,0"))
                                          (rule "add_literals" (formula "26") (term "1,1,0,0"))
                                          (rule "times_zero_1" (formula "26") (term "1,0,0"))
                                          (rule "add_zero_right" (formula "26") (term "0,0"))
                                          (rule "qeq_literals" (formula "26") (term "0"))
                                           (builtin "One Step Simplification" (formula "26"))
                                          (rule "true_left" (formula "26"))
                                          (rule "pullOutSelect" (formula "47") (term "1") (inst "selectSK=de_polyas_core3_open_cred_CredTool_cols_1"))
                                          (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "38"))
                                           (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "46")))
                                          (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,1,0,0") (ifseqformula "31"))
                                           (builtin "One Step Simplification" (formula "1"))
                                          (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,0,0,1,0,0") (ifseqformula "19"))
                                          (rule "replace_known_left" (formula "1") (term "0,0,0,0,1,0,0") (ifseqformula "8"))
                                           (builtin "One Step Simplification" (formula "1"))
                                          (rule "elementOfSingleton" (formula "1") (term "0,0"))
                                           (builtin "One Step Simplification" (formula "1"))
                                          (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "31"))
                                           (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "46")))
                                          (rule "replaceKnownSelect_taclet10_14" (formula "1") (term "2,0"))
                                          (rule "replaceKnownAuxiliaryConstant_taclet10_17" (formula "1") (term "2,0"))
                                          (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,0,1,0,0") (ifseqformula "19"))
                                          (rule "replace_known_left" (formula "1") (term "0,0,0,1,0,0") (ifseqformula "8"))
                                           (builtin "One Step Simplification" (formula "1"))
                                          (rule "elementOfSingleton" (formula "1") (term "0,0"))
                                           (builtin "One Step Simplification" (formula "1"))
                                          (rule "applyEqReverse" (formula "48") (term "1") (ifseqformula "1"))
                                          (rule "hideAuxiliaryEq" (formula "1"))
                                          (rule "inEqSimp_and_subsumption3" (formula "16") (term "0,0,0"))
                                          (rule "leq_literals" (formula "16") (term "0,1,0,0,0,0"))
                                           (builtin "One Step Simplification" (formula "16"))
                                          (rule "inEqSimp_and_subsumption3" (formula "15") (term "0,0,0"))
                                          (rule "leq_literals" (formula "15") (term "0,1,0,0,0,0"))
                                           (builtin "One Step Simplification" (formula "15"))
                                          (rule "nnf_imp2or" (formula "12") (term "0"))
                                          (rule "nnf_imp2or" (formula "11") (term "0"))
                                          (rule "nnf_imp2or" (formula "16") (term "0"))
                                          (rule "nnf_imp2or" (formula "15") (term "0"))
                                          (rule "nnf_notAnd" (formula "12") (term "0,0"))
                                          (rule "inEqSimp_notLeq" (formula "12") (term "0,0,0"))
                                          (rule "polySimp_rightDist" (formula "12") (term "1,0,0,0,0,0"))
                                          (rule "mul_literals" (formula "12") (term "0,1,0,0,0,0,0"))
                                          (rule "polySimp_addAssoc" (formula "12") (term "0,0,0,0,0"))
                                          (rule "add_literals" (formula "12") (term "0,0,0,0,0,0"))
                                          (rule "add_zero_left" (formula "12") (term "0,0,0,0,0"))
                                          (rule "inEqSimp_sepPosMonomial1" (formula "12") (term "0,0,0"))
                                          (rule "polySimp_mulLiterals" (formula "12") (term "1,0,0,0"))
                                          (rule "polySimp_elimOne" (formula "12") (term "1,0,0,0"))
                                          (rule "inEqSimp_notGeq" (formula "12") (term "1,0,0"))
                                          (rule "mul_literals" (formula "12") (term "1,0,0,1,0,0"))
                                          (rule "add_literals" (formula "12") (term "0,0,1,0,0"))
                                          (rule "inEqSimp_sepPosMonomial0" (formula "12") (term "1,0,0"))
                                          (rule "mul_literals" (formula "12") (term "1,1,0,0"))
                                          (rule "nnf_notAnd" (formula "11") (term "0,0"))
                                          (rule "inEqSimp_notLeq" (formula "11") (term "0,0,0"))
                                          (rule "polySimp_rightDist" (formula "11") (term "1,0,0,0,0,0"))
                                          (rule "mul_literals" (formula "11") (term "0,1,0,0,0,0,0"))
                                          (rule "polySimp_addAssoc" (formula "11") (term "0,0,0,0,0"))
                                          (rule "add_literals" (formula "11") (term "0,0,0,0,0,0"))
                                          (rule "add_zero_left" (formula "11") (term "0,0,0,0,0"))
                                          (rule "inEqSimp_sepPosMonomial1" (formula "11") (term "0,0,0"))
                                          (rule "polySimp_mulLiterals" (formula "11") (term "1,0,0,0"))
                                          (rule "polySimp_elimOne" (formula "11") (term "1,0,0,0"))
                                          (rule "inEqSimp_notGeq" (formula "11") (term "1,0,0"))
                                          (rule "times_zero_1" (formula "11") (term "1,0,0,1,0,0"))
                                          (rule "add_literals" (formula "11") (term "0,0,1,0,0"))
                                          (rule "inEqSimp_sepPosMonomial0" (formula "11") (term "1,0,0"))
                                          (rule "mul_literals" (formula "11") (term "1,1,0,0"))
                                          (rule "nnf_notAnd" (formula "16") (term "0,0"))
                                          (rule "inEqSimp_notLeq" (formula "16") (term "1,0,0"))
                                          (rule "mul_literals" (formula "16") (term "1,0,0,1,0,0"))
                                          (rule "add_literals" (formula "16") (term "0,0,1,0,0"))
                                          (rule "inEqSimp_sepPosMonomial1" (formula "16") (term "1,0,0"))
                                          (rule "mul_literals" (formula "16") (term "1,1,0,0"))
                                          (rule "nnf_notAnd" (formula "15") (term "0,0"))
                                          (rule "inEqSimp_notLeq" (formula "15") (term "1,0,0"))
                                          (rule "mul_literals" (formula "15") (term "1,0,0,1,0,0"))
                                          (rule "add_literals" (formula "15") (term "0,0,1,0,0"))
                                          (rule "inEqSimp_sepPosMonomial1" (formula "15") (term "1,0,0"))
                                          (rule "mul_literals" (formula "15") (term "1,1,0,0"))
                                          (rule "nnf_notAnd" (formula "16") (term "0,0,0"))
                                          (rule "inEqSimp_notLeq" (formula "16") (term "0,0,0,0"))
                                          (rule "polySimp_rightDist" (formula "16") (term "1,0,0,0,0,0,0"))
                                          (rule "mul_literals" (formula "16") (term "0,1,0,0,0,0,0,0"))
                                          (rule "polySimp_addAssoc" (formula "16") (term "0,0,0,0,0,0"))
                                          (rule "add_literals" (formula "16") (term "0,0,0,0,0,0,0"))
                                          (rule "add_zero_left" (formula "16") (term "0,0,0,0,0,0"))
                                          (rule "inEqSimp_sepPosMonomial1" (formula "16") (term "0,0,0,0"))
                                          (rule "polySimp_mulLiterals" (formula "16") (term "1,0,0,0,0"))
                                          (rule "polySimp_elimOne" (formula "16") (term "1,0,0,0,0"))
                                          (rule "inEqSimp_notGeq" (formula "16") (term "1,0,0,0"))
                                          (rule "mul_literals" (formula "16") (term "1,0,0,1,0,0,0"))
                                          (rule "add_literals" (formula "16") (term "0,0,1,0,0,0"))
                                          (rule "inEqSimp_sepPosMonomial0" (formula "16") (term "1,0,0,0"))
                                          (rule "mul_literals" (formula "16") (term "1,1,0,0,0"))
                                          (rule "nnf_notAnd" (formula "15") (term "0,0,0"))
                                          (rule "inEqSimp_notLeq" (formula "15") (term "0,0,0,0"))
                                          (rule "polySimp_rightDist" (formula "15") (term "1,0,0,0,0,0,0"))
                                          (rule "mul_literals" (formula "15") (term "0,1,0,0,0,0,0,0"))
                                          (rule "polySimp_addAssoc" (formula "15") (term "0,0,0,0,0,0"))
                                          (rule "add_literals" (formula "15") (term "0,0,0,0,0,0,0"))
                                          (rule "add_zero_left" (formula "15") (term "0,0,0,0,0,0"))
                                          (rule "inEqSimp_sepPosMonomial1" (formula "15") (term "0,0,0,0"))
                                          (rule "polySimp_mulLiterals" (formula "15") (term "1,0,0,0,0"))
                                          (rule "polySimp_elimOne" (formula "15") (term "1,0,0,0,0"))
                                          (rule "inEqSimp_notGeq" (formula "15") (term "1,0,0,0"))
                                          (rule "times_zero_1" (formula "15") (term "1,0,0,1,0,0,0"))
                                          (rule "add_zero_right" (formula "15") (term "0,0,1,0,0,0"))
                                          (rule "inEqSimp_sepPosMonomial0" (formula "15") (term "1,0,0,0"))
                                          (rule "mul_literals" (formula "15") (term "1,1,0,0,0"))
                                          (rule "Class_invariant_axiom_for_java_util_ArrayList" (formula "47"))
                                          (rule "closeTrue" (formula "47"))
                                       )
                                    )
                                    (branch
                                       (rule "inEqSimp_ltToLeq" (formula "16") (term "0,0,0,0,0"))
                                       (rule "polySimp_mulComm0" (formula "16") (term "1,0,0,0,0,0,0,0"))
                                       (rule "inEqSimp_ltToLeq" (formula "28"))
                                       (rule "polySimp_mulComm0" (formula "28") (term "1,0,0"))
                                       (rule "polySimp_addComm1" (formula "28") (term "0"))
                                       (rule "inEqSimp_ltToLeq" (formula "11") (term "0,0,0,1,0"))
                                       (rule "polySimp_mulComm0" (formula "11") (term "1,0,0,0,0,0,1,0"))
                                       (rule "inEqSimp_ltToLeq" (formula "15") (term "0,0,0,0,0"))
                                       (rule "polySimp_mulComm0" (formula "15") (term "1,0,0,0,0,0,0,0"))
                                       (rule "inEqSimp_ltToLeq" (formula "11") (term "0,0,0"))
                                       (rule "polySimp_mulComm0" (formula "11") (term "1,0,0,0,0,0"))
                                       (rule "inEqSimp_ltToLeq" (formula "12") (term "0,0,0"))
                                       (rule "polySimp_mulComm0" (formula "12") (term "1,0,0,0,0,0"))
                                       (rule "inEqSimp_sepPosMonomial1" (formula "37"))
                                       (rule "mul_literals" (formula "37") (term "1"))
                                       (rule "inEqSimp_sepPosMonomial0" (formula "16") (term "0,0,0,0,0"))
                                       (rule "polySimp_mulComm0" (formula "16") (term "1,0,0,0,0,0"))
                                       (rule "polySimp_rightDist" (formula "16") (term "1,0,0,0,0,0"))
                                       (rule "polySimp_mulLiterals" (formula "16") (term "1,1,0,0,0,0,0"))
                                       (rule "mul_literals" (formula "16") (term "0,1,0,0,0,0,0"))
                                       (rule "polySimp_elimOne" (formula "16") (term "1,1,0,0,0,0,0"))
                                       (rule "inEqSimp_sepNegMonomial0" (formula "28"))
                                       (rule "polySimp_mulLiterals" (formula "28") (term "0"))
                                       (rule "polySimp_elimOne" (formula "28") (term "0"))
                                       (rule "inEqSimp_sepPosMonomial0" (formula "11") (term "0,0,0,1,0"))
                                       (rule "polySimp_mulComm0" (formula "11") (term "1,0,0,0,1,0"))
                                       (rule "polySimp_rightDist" (formula "11") (term "1,0,0,0,1,0"))
                                       (rule "polySimp_mulLiterals" (formula "11") (term "1,1,0,0,0,1,0"))
                                       (rule "mul_literals" (formula "11") (term "0,1,0,0,0,1,0"))
                                       (rule "polySimp_elimOne" (formula "11") (term "1,1,0,0,0,1,0"))
                                       (rule "inEqSimp_sepPosMonomial0" (formula "15") (term "0,0,0,0,0"))
                                       (rule "polySimp_mulComm0" (formula "15") (term "1,0,0,0,0,0"))
                                       (rule "polySimp_rightDist" (formula "15") (term "1,0,0,0,0,0"))
                                       (rule "mul_literals" (formula "15") (term "0,1,0,0,0,0,0"))
                                       (rule "polySimp_mulLiterals" (formula "15") (term "1,1,0,0,0,0,0"))
                                       (rule "polySimp_elimOne" (formula "15") (term "1,1,0,0,0,0,0"))
                                       (rule "inEqSimp_sepPosMonomial0" (formula "11") (term "0,0,0"))
                                       (rule "polySimp_mulComm0" (formula "11") (term "1,0,0,0"))
                                       (rule "polySimp_rightDist" (formula "11") (term "1,0,0,0"))
                                       (rule "polySimp_mulLiterals" (formula "11") (term "1,1,0,0,0"))
                                       (rule "mul_literals" (formula "11") (term "0,1,0,0,0"))
                                       (rule "polySimp_elimOne" (formula "11") (term "1,1,0,0,0"))
                                       (rule "inEqSimp_sepPosMonomial0" (formula "12") (term "0,0,0"))
                                       (rule "polySimp_mulComm0" (formula "12") (term "1,0,0,0"))
                                       (rule "polySimp_rightDist" (formula "12") (term "1,0,0,0"))
                                       (rule "polySimp_mulLiterals" (formula "12") (term "1,1,0,0,0"))
                                       (rule "mul_literals" (formula "12") (term "0,1,0,0,0"))
                                       (rule "polySimp_elimOne" (formula "12") (term "1,1,0,0,0"))
                                       (rule "inEqSimp_contradEq7" (formula "41") (ifseqformula "37"))
                                       (rule "polySimp_mulComm0" (formula "41") (term "1,0,0"))
                                       (rule "polySimp_pullOutFactor1b" (formula "41") (term "0,0"))
                                       (rule "add_literals" (formula "41") (term "1,1,0,0"))
                                       (rule "times_zero_1" (formula "41") (term "1,0,0"))
                                       (rule "add_zero_right" (formula "41") (term "0,0"))
                                       (rule "leq_literals" (formula "41") (term "0"))
                                        (builtin "One Step Simplification" (formula "41"))
                                       (rule "false_right" (formula "41"))
                                       (rule "inEqSimp_subsumption1" (formula "26") (ifseqformula "37"))
                                       (rule "inEqSimp_homoInEq0" (formula "26") (term "0"))
                                       (rule "polySimp_pullOutFactor1b" (formula "26") (term "0,0"))
                                       (rule "add_literals" (formula "26") (term "1,1,0,0"))
                                       (rule "times_zero_1" (formula "26") (term "1,0,0"))
                                       (rule "add_zero_right" (formula "26") (term "0,0"))
                                       (rule "qeq_literals" (formula "26") (term "0"))
                                        (builtin "One Step Simplification" (formula "26"))
                                       (rule "true_left" (formula "26"))
                                       (rule "inEqSimp_subsumption1" (formula "35") (ifseqformula "25"))
                                       (rule "leq_literals" (formula "35") (term "0"))
                                        (builtin "One Step Simplification" (formula "35"))
                                       (rule "true_left" (formula "35"))
                                       (rule "inEqSimp_and_subsumption3" (formula "16") (term "0,0,0"))
                                       (rule "leq_literals" (formula "16") (term "0,1,0,0,0,0"))
                                        (builtin "One Step Simplification" (formula "16"))
                                       (rule "inEqSimp_and_subsumption3" (formula "15") (term "0,0,0"))
                                       (rule "leq_literals" (formula "15") (term "0,1,0,0,0,0"))
                                        (builtin "One Step Simplification" (formula "15"))
                                       (rule "nnf_imp2or" (formula "11") (term "0"))
                                       (rule "nnf_imp2or" (formula "12") (term "0"))
                                       (rule "nnf_imp2or" (formula "16") (term "0"))
                                       (rule "nnf_imp2or" (formula "15") (term "0"))
                                       (rule "nnf_notAnd" (formula "11") (term "0,0"))
                                       (rule "inEqSimp_notGeq" (formula "11") (term "1,0,0"))
                                       (rule "mul_literals" (formula "11") (term "1,0,0,1,0,0"))
                                       (rule "add_literals" (formula "11") (term "0,0,1,0,0"))
                                       (rule "inEqSimp_sepPosMonomial0" (formula "11") (term "1,0,0"))
                                       (rule "mul_literals" (formula "11") (term "1,1,0,0"))
                                       (rule "inEqSimp_notLeq" (formula "11") (term "0,0,0"))
                                       (rule "polySimp_rightDist" (formula "11") (term "1,0,0,0,0,0"))
                                       (rule "mul_literals" (formula "11") (term "0,1,0,0,0,0,0"))
                                       (rule "polySimp_addAssoc" (formula "11") (term "0,0,0,0,0"))
                                       (rule "add_literals" (formula "11") (term "0,0,0,0,0,0"))
                                       (rule "add_zero_left" (formula "11") (term "0,0,0,0,0"))
                                       (rule "inEqSimp_sepPosMonomial1" (formula "11") (term "0,0,0"))
                                       (rule "polySimp_mulLiterals" (formula "11") (term "1,0,0,0"))
                                       (rule "polySimp_elimOne" (formula "11") (term "1,0,0,0"))
                                       (rule "nnf_notAnd" (formula "12") (term "0,0"))
                                       (rule "inEqSimp_notLeq" (formula "12") (term "0,0,0"))
                                       (rule "polySimp_rightDist" (formula "12") (term "1,0,0,0,0,0"))
                                       (rule "mul_literals" (formula "12") (term "0,1,0,0,0,0,0"))
                                       (rule "polySimp_addAssoc" (formula "12") (term "0,0,0,0,0"))
                                       (rule "add_literals" (formula "12") (term "0,0,0,0,0,0"))
                                       (rule "add_zero_left" (formula "12") (term "0,0,0,0,0"))
                                       (rule "inEqSimp_sepPosMonomial1" (formula "12") (term "0,0,0"))
                                       (rule "polySimp_mulLiterals" (formula "12") (term "1,0,0,0"))
                                       (rule "polySimp_elimOne" (formula "12") (term "1,0,0,0"))
                                       (rule "inEqSimp_notGeq" (formula "12") (term "1,0,0"))
                                       (rule "mul_literals" (formula "12") (term "1,0,0,1,0,0"))
                                       (rule "add_zero_right" (formula "12") (term "0,0,1,0,0"))
                                       (rule "inEqSimp_sepPosMonomial0" (formula "12") (term "1,0,0"))
                                       (rule "mul_literals" (formula "12") (term "1,1,0,0"))
                                       (rule "nnf_notAnd" (formula "16") (term "0,0"))
                                       (rule "inEqSimp_notLeq" (formula "16") (term "1,0,0"))
                                       (rule "mul_literals" (formula "16") (term "1,0,0,1,0,0"))
                                       (rule "add_literals" (formula "16") (term "0,0,1,0,0"))
                                       (rule "inEqSimp_sepPosMonomial1" (formula "16") (term "1,0,0"))
                                       (rule "mul_literals" (formula "16") (term "1,1,0,0"))
                                       (rule "nnf_notAnd" (formula "15") (term "0,0"))
                                       (rule "inEqSimp_notLeq" (formula "15") (term "1,0,0"))
                                       (rule "mul_literals" (formula "15") (term "1,0,0,1,0,0"))
                                       (rule "add_literals" (formula "15") (term "0,0,1,0,0"))
                                       (rule "inEqSimp_sepPosMonomial1" (formula "15") (term "1,0,0"))
                                       (rule "mul_literals" (formula "15") (term "1,1,0,0"))
                                       (rule "nnf_notAnd" (formula "16") (term "0,0,0"))
                                       (rule "inEqSimp_notGeq" (formula "16") (term "1,0,0,0"))
                                       (rule "mul_literals" (formula "16") (term "1,0,0,1,0,0,0"))
                                       (rule "add_literals" (formula "16") (term "0,0,1,0,0,0"))
                                       (rule "inEqSimp_sepPosMonomial0" (formula "16") (term "1,0,0,0"))
                                       (rule "mul_literals" (formula "16") (term "1,1,0,0,0"))
                                       (rule "inEqSimp_notLeq" (formula "16") (term "0,0,0,0"))
                                       (rule "polySimp_rightDist" (formula "16") (term "1,0,0,0,0,0,0"))
                                       (rule "mul_literals" (formula "16") (term "0,1,0,0,0,0,0,0"))
                                       (rule "polySimp_addAssoc" (formula "16") (term "0,0,0,0,0,0"))
                                       (rule "add_literals" (formula "16") (term "0,0,0,0,0,0,0"))
                                       (rule "add_zero_left" (formula "16") (term "0,0,0,0,0,0"))
                                       (rule "inEqSimp_sepPosMonomial1" (formula "16") (term "0,0,0,0"))
                                       (rule "polySimp_mulLiterals" (formula "16") (term "1,0,0,0,0"))
                                       (rule "polySimp_elimOne" (formula "16") (term "1,0,0,0,0"))
                                       (rule "nnf_notAnd" (formula "15") (term "0,0,0"))
                                       (rule "inEqSimp_notLeq" (formula "15") (term "0,0,0,0"))
                                       (rule "polySimp_rightDist" (formula "15") (term "1,0,0,0,0,0,0"))
                                       (rule "mul_literals" (formula "15") (term "0,1,0,0,0,0,0,0"))
                                       (rule "polySimp_addAssoc" (formula "15") (term "0,0,0,0,0,0"))
                                       (rule "add_literals" (formula "15") (term "0,0,0,0,0,0,0"))
                                       (rule "add_zero_left" (formula "15") (term "0,0,0,0,0,0"))
                                       (rule "inEqSimp_sepPosMonomial1" (formula "15") (term "0,0,0,0"))
                                       (rule "polySimp_mulLiterals" (formula "15") (term "1,0,0,0,0"))
                                       (rule "polySimp_elimOne" (formula "15") (term "1,0,0,0,0"))
                                       (rule "inEqSimp_notGeq" (formula "15") (term "1,0,0,0"))
                                       (rule "mul_literals" (formula "15") (term "1,0,0,1,0,0,0"))
                                       (rule "add_literals" (formula "15") (term "0,0,1,0,0,0"))
                                       (rule "inEqSimp_sepPosMonomial0" (formula "15") (term "1,0,0,0"))
                                       (rule "mul_literals" (formula "15") (term "1,1,0,0,0"))
                                       (rule "Class_invariant_axiom_for_java_util_CollectionIterator" (formula "47"))
                                       (rule "inEqSimp_commuteLeq" (formula "47") (term "0"))
                                       (rule "inEqSimp_commuteLeq" (formula "47") (term "1"))
                                       (rule "pullOutSelect" (formula "47") (term "0,0") (inst "selectSK=java_util_Iterator_index_3"))
                                       (rule "applyEq" (formula "48") (term "1,1") (ifseqformula "1"))
                                       (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "38"))
                                        (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "42")))
                                       (rule "replaceKnownSelect_taclet000010_30" (formula "1") (term "2,0"))
                                       (rule "replaceKnownAuxiliaryConstant_taclet000010_31" (formula "1") (term "2,0"))
                                       (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,1,0,0") (ifseqformula "31"))
                                        (builtin "One Step Simplification" (formula "1"))
                                       (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,0,0,1,0,0") (ifseqformula "19"))
                                       (rule "replace_known_left" (formula "1") (term "1,0,0,0,1,0,0") (ifseqformula "20"))
                                        (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "41")))
                                       (rule "elementOfSingleton" (formula "1") (term "0,0"))
                                        (builtin "One Step Simplification" (formula "1"))
                                       (rule "applyEqReverse" (formula "48") (term "0,0") (ifseqformula "1"))
                                       (rule "applyEqReverse" (formula "48") (term "1,1") (ifseqformula "1"))
                                       (rule "hideAuxiliaryEq" (formula "1"))
                                       (rule "applyEq" (formula "47") (term "0,0") (ifseqformula "34"))
                                       (rule "applyEq" (formula "47") (term "1,1") (ifseqformula "34"))
                                       (rule "inEqSimp_sepPosMonomial1" (formula "47") (term "0"))
                                       (rule "mul_literals" (formula "47") (term "1,0"))
                                       (rule "inEqSimp_subsumption1" (formula "47") (term "0") (ifseqformula "25"))
                                       (rule "leq_literals" (formula "47") (term "0,0"))
                                        (builtin "One Step Simplification" (formula "47"))
                                       (rule "inEqSimp_geqRight" (formula "47"))
                                       (rule "polySimp_rightDist" (formula "1") (term "1,0,0"))
                                       (rule "mul_literals" (formula "1") (term "0,1,0,0"))
                                       (rule "polySimp_addAssoc" (formula "1") (term "0,0"))
                                       (rule "add_literals" (formula "1") (term "0,0,0"))
                                       (rule "add_zero_left" (formula "1") (term "0,0"))
                                       (rule "inEqSimp_sepPosMonomial0" (formula "1"))
                                       (rule "polySimp_mulLiterals" (formula "1") (term "1"))
                                       (rule "polySimp_elimOne" (formula "1") (term "1"))
                                       (rule "pullOutSelect" (formula "1") (term "0,0") (inst "selectSK=java_util_Iterator_seq_2"))
                                       (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "39"))
                                        (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "43")))
                                       (rule "replaceKnownSelect_taclet000010_28" (formula "1") (term "2,0"))
                                       (rule "replaceKnownAuxiliaryConstant_taclet000010_29" (formula "1") (term "2,0"))
                                       (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,1,0,0") (ifseqformula "32"))
                                        (builtin "One Step Simplification" (formula "1"))
                                       (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,0,0,1,0,0") (ifseqformula "20"))
                                       (rule "replace_known_right" (formula "1") (term "0,0,0,0,1,0,0") (ifseqformula "42"))
                                        (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "21")))
                                       (rule "elementOfSingleton" (formula "1") (term "0,0"))
                                        (builtin "One Step Simplification" (formula "1"))
                                       (rule "applyEqReverse" (formula "2") (term "0,0") (ifseqformula "1"))
                                       (rule "hideAuxiliaryEq" (formula "1"))
                                       (rule "applyEq" (formula "1") (term "0,0") (ifseqformula "22"))
                                       (rule "inEqSimp_contradInEq1" (formula "1") (ifseqformula "36"))
                                       (rule "andLeft" (formula "1"))
                                       (rule "inEqSimp_homoInEq1" (formula "1"))
                                       (rule "polySimp_pullOutFactor1b" (formula "1") (term "0"))
                                       (rule "add_literals" (formula "1") (term "1,1,0"))
                                       (rule "times_zero_1" (formula "1") (term "1,0"))
                                       (rule "add_literals" (formula "1") (term "0"))
                                       (rule "leq_literals" (formula "1"))
                                       (rule "closeFalse" (formula "1"))
                                    )
                                 )
                                 (branch
                                    (rule "andRight" (formula "51"))
                                    (branch
                                       (rule "andRight" (formula "51"))
                                       (branch
                                          (rule "notRight" (formula "51"))
                                          (rule "inEqSimp_ltToLeq" (formula "17") (term "0,0,0,0,0"))
                                          (rule "polySimp_mulComm0" (formula "17") (term "1,0,0,0,0,0,0,0"))
                                          (rule "inEqSimp_ltToLeq" (formula "29"))
                                          (rule "polySimp_mulComm0" (formula "29") (term "1,0,0"))
                                          (rule "polySimp_addComm1" (formula "29") (term "0"))
                                          (rule "inEqSimp_ltToLeq" (formula "13") (term "0,0,0"))
                                          (rule "polySimp_mulComm0" (formula "13") (term "1,0,0,0,0,0"))
                                          (rule "inEqSimp_ltToLeq" (formula "12") (term "0,0,0"))
                                          (rule "polySimp_mulComm0" (formula "12") (term "1,0,0,0,0,0"))
                                          (rule "inEqSimp_ltToLeq" (formula "16") (term "0,0,0,0,0"))
                                          (rule "polySimp_mulComm0" (formula "16") (term "1,0,0,0,0,0,0,0"))
                                          (rule "inEqSimp_ltToLeq" (formula "12") (term "0,0,0,1,0"))
                                          (rule "polySimp_mulComm0" (formula "12") (term "1,0,0,0,0,0,1,0"))
                                          (rule "inEqSimp_sepPosMonomial1" (formula "38"))
                                          (rule "mul_literals" (formula "38") (term "1"))
                                          (rule "inEqSimp_sepPosMonomial0" (formula "17") (term "0,0,0,0,0"))
                                          (rule "polySimp_mulComm0" (formula "17") (term "1,0,0,0,0,0"))
                                          (rule "polySimp_rightDist" (formula "17") (term "1,0,0,0,0,0"))
                                          (rule "polySimp_mulLiterals" (formula "17") (term "1,1,0,0,0,0,0"))
                                          (rule "mul_literals" (formula "17") (term "0,1,0,0,0,0,0"))
                                          (rule "polySimp_elimOne" (formula "17") (term "1,1,0,0,0,0,0"))
                                          (rule "inEqSimp_sepNegMonomial0" (formula "29"))
                                          (rule "polySimp_mulLiterals" (formula "29") (term "0"))
                                          (rule "polySimp_elimOne" (formula "29") (term "0"))
                                          (rule "inEqSimp_sepPosMonomial0" (formula "13") (term "0,0,0"))
                                          (rule "polySimp_mulComm0" (formula "13") (term "1,0,0,0"))
                                          (rule "polySimp_rightDist" (formula "13") (term "1,0,0,0"))
                                          (rule "mul_literals" (formula "13") (term "0,1,0,0,0"))
                                          (rule "polySimp_mulLiterals" (formula "13") (term "1,1,0,0,0"))
                                          (rule "polySimp_elimOne" (formula "13") (term "1,1,0,0,0"))
                                          (rule "inEqSimp_sepPosMonomial0" (formula "12") (term "0,0,0"))
                                          (rule "polySimp_mulComm0" (formula "12") (term "1,0,0,0"))
                                          (rule "polySimp_rightDist" (formula "12") (term "1,0,0,0"))
                                          (rule "mul_literals" (formula "12") (term "0,1,0,0,0"))
                                          (rule "polySimp_mulLiterals" (formula "12") (term "1,1,0,0,0"))
                                          (rule "polySimp_elimOne" (formula "12") (term "1,1,0,0,0"))
                                          (rule "inEqSimp_sepPosMonomial0" (formula "16") (term "0,0,0,0,0"))
                                          (rule "polySimp_mulComm0" (formula "16") (term "1,0,0,0,0,0"))
                                          (rule "polySimp_rightDist" (formula "16") (term "1,0,0,0,0,0"))
                                          (rule "polySimp_mulLiterals" (formula "16") (term "1,1,0,0,0,0,0"))
                                          (rule "mul_literals" (formula "16") (term "0,1,0,0,0,0,0"))
                                          (rule "polySimp_elimOne" (formula "16") (term "1,1,0,0,0,0,0"))
                                          (rule "inEqSimp_sepPosMonomial0" (formula "12") (term "0,0,0,1,0"))
                                          (rule "polySimp_mulComm0" (formula "12") (term "1,0,0,0,1,0"))
                                          (rule "polySimp_rightDist" (formula "12") (term "1,0,0,0,1,0"))
                                          (rule "polySimp_mulLiterals" (formula "12") (term "1,1,0,0,0,1,0"))
                                          (rule "mul_literals" (formula "12") (term "0,1,0,0,0,1,0"))
                                          (rule "polySimp_elimOne" (formula "12") (term "1,1,0,0,0,1,0"))
                                          (rule "inEqSimp_contradEq7" (formula "42") (ifseqformula "38"))
                                          (rule "polySimp_mulComm0" (formula "42") (term "1,0,0"))
                                          (rule "polySimp_pullOutFactor1b" (formula "42") (term "0,0"))
                                          (rule "add_literals" (formula "42") (term "1,1,0,0"))
                                          (rule "times_zero_1" (formula "42") (term "1,0,0"))
                                          (rule "add_zero_right" (formula "42") (term "0,0"))
                                          (rule "leq_literals" (formula "42") (term "0"))
                                           (builtin "One Step Simplification" (formula "42"))
                                          (rule "false_right" (formula "42"))
                                          (rule "inEqSimp_subsumption1" (formula "37") (ifseqformula "26"))
                                          (rule "leq_literals" (formula "37") (term "0"))
                                           (builtin "One Step Simplification" (formula "37"))
                                          (rule "true_left" (formula "37"))
                                          (rule "inEqSimp_subsumption1" (formula "27") (ifseqformula "37"))
                                          (rule "inEqSimp_homoInEq0" (formula "27") (term "0"))
                                          (rule "polySimp_pullOutFactor1b" (formula "27") (term "0,0"))
                                          (rule "add_literals" (formula "27") (term "1,1,0,0"))
                                          (rule "times_zero_1" (formula "27") (term "1,0,0"))
                                          (rule "add_literals" (formula "27") (term "0,0"))
                                          (rule "qeq_literals" (formula "27") (term "0"))
                                           (builtin "One Step Simplification" (formula "27"))
                                          (rule "true_left" (formula "27"))
                                          (rule "pullOutSelect" (formula "1") (term "0") (inst "selectSK=de_polyas_core3_open_cred_CredTool_record_2"))
                                          (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "39"))
                                           (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "47")))
                                          (rule "replaceKnownSelect_taclet0000010_32" (formula "1") (term "2,0"))
                                          (rule "replaceKnownAuxiliaryConstant_taclet0000010_33" (formula "1") (term "2,0"))
                                          (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,1,0,0") (ifseqformula "32"))
                                           (builtin "One Step Simplification" (formula "1"))
                                          (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,0,0,1,0,0") (ifseqformula "20"))
                                          (rule "replace_known_left" (formula "1") (term "0,0,0,0,1,0,0") (ifseqformula "9"))
                                           (builtin "One Step Simplification" (formula "1"))
                                          (rule "elementOfSingleton" (formula "1") (term "0,0"))
                                           (builtin "One Step Simplification" (formula "1"))
                                          (rule "applyEqReverse" (formula "2") (term "0") (ifseqformula "1"))
                                          (rule "close" (formula "44") (ifseqformula "2"))
                                       )
                                       (branch
                                          (rule "notRight" (formula "51"))
                                          (rule "inEqSimp_ltToLeq" (formula "17") (term "0,0,0,0,0"))
                                          (rule "polySimp_mulComm0" (formula "17") (term "1,0,0,0,0,0,0,0"))
                                          (rule "inEqSimp_ltToLeq" (formula "29"))
                                          (rule "polySimp_mulComm0" (formula "29") (term "1,0,0"))
                                          (rule "polySimp_addComm1" (formula "29") (term "0"))
                                          (rule "inEqSimp_ltToLeq" (formula "13") (term "0,0,0"))
                                          (rule "polySimp_mulComm0" (formula "13") (term "1,0,0,0,0,0"))
                                          (rule "inEqSimp_ltToLeq" (formula "12") (term "0,0,0"))
                                          (rule "polySimp_mulComm0" (formula "12") (term "1,0,0,0,0,0"))
                                          (rule "inEqSimp_ltToLeq" (formula "16") (term "0,0,0,0,0"))
                                          (rule "polySimp_mulComm0" (formula "16") (term "1,0,0,0,0,0,0,0"))
                                          (rule "inEqSimp_ltToLeq" (formula "12") (term "0,0,0,1,0"))
                                          (rule "polySimp_mulComm0" (formula "12") (term "1,0,0,0,0,0,1,0"))
                                          (rule "inEqSimp_sepPosMonomial1" (formula "38"))
                                          (rule "mul_literals" (formula "38") (term "1"))
                                          (rule "inEqSimp_sepPosMonomial0" (formula "17") (term "0,0,0,0,0"))
                                          (rule "polySimp_mulComm0" (formula "17") (term "1,0,0,0,0,0"))
                                          (rule "polySimp_rightDist" (formula "17") (term "1,0,0,0,0,0"))
                                          (rule "polySimp_mulLiterals" (formula "17") (term "1,1,0,0,0,0,0"))
                                          (rule "mul_literals" (formula "17") (term "0,1,0,0,0,0,0"))
                                          (rule "polySimp_elimOne" (formula "17") (term "1,1,0,0,0,0,0"))
                                          (rule "inEqSimp_sepNegMonomial0" (formula "29"))
                                          (rule "polySimp_mulLiterals" (formula "29") (term "0"))
                                          (rule "polySimp_elimOne" (formula "29") (term "0"))
                                          (rule "inEqSimp_sepPosMonomial0" (formula "13") (term "0,0,0"))
                                          (rule "polySimp_mulComm0" (formula "13") (term "1,0,0,0"))
                                          (rule "polySimp_rightDist" (formula "13") (term "1,0,0,0"))
                                          (rule "mul_literals" (formula "13") (term "0,1,0,0,0"))
                                          (rule "polySimp_mulLiterals" (formula "13") (term "1,1,0,0,0"))
                                          (rule "polySimp_elimOne" (formula "13") (term "1,1,0,0,0"))
                                          (rule "inEqSimp_sepPosMonomial0" (formula "12") (term "0,0,0"))
                                          (rule "polySimp_mulComm0" (formula "12") (term "1,0,0,0"))
                                          (rule "polySimp_rightDist" (formula "12") (term "1,0,0,0"))
                                          (rule "mul_literals" (formula "12") (term "0,1,0,0,0"))
                                          (rule "polySimp_mulLiterals" (formula "12") (term "1,1,0,0,0"))
                                          (rule "polySimp_elimOne" (formula "12") (term "1,1,0,0,0"))
                                          (rule "inEqSimp_sepPosMonomial0" (formula "16") (term "0,0,0,0,0"))
                                          (rule "polySimp_mulComm0" (formula "16") (term "1,0,0,0,0,0"))
                                          (rule "polySimp_rightDist" (formula "16") (term "1,0,0,0,0,0"))
                                          (rule "polySimp_mulLiterals" (formula "16") (term "1,1,0,0,0,0,0"))
                                          (rule "mul_literals" (formula "16") (term "0,1,0,0,0,0,0"))
                                          (rule "polySimp_elimOne" (formula "16") (term "1,1,0,0,0,0,0"))
                                          (rule "inEqSimp_sepPosMonomial0" (formula "12") (term "0,0,0,1,0"))
                                          (rule "polySimp_mulComm0" (formula "12") (term "1,0,0,0,1,0"))
                                          (rule "polySimp_rightDist" (formula "12") (term "1,0,0,0,1,0"))
                                          (rule "polySimp_mulLiterals" (formula "12") (term "1,1,0,0,0,1,0"))
                                          (rule "mul_literals" (formula "12") (term "0,1,0,0,0,1,0"))
                                          (rule "polySimp_elimOne" (formula "12") (term "1,1,0,0,0,1,0"))
                                          (rule "inEqSimp_contradEq7" (formula "42") (ifseqformula "38"))
                                          (rule "polySimp_mulComm0" (formula "42") (term "1,0,0"))
                                          (rule "polySimp_pullOutFactor1b" (formula "42") (term "0,0"))
                                          (rule "add_literals" (formula "42") (term "1,1,0,0"))
                                          (rule "times_zero_1" (formula "42") (term "1,0,0"))
                                          (rule "add_zero_right" (formula "42") (term "0,0"))
                                          (rule "leq_literals" (formula "42") (term "0"))
                                           (builtin "One Step Simplification" (formula "42"))
                                          (rule "false_right" (formula "42"))
                                          (rule "inEqSimp_subsumption1" (formula "37") (ifseqformula "26"))
                                          (rule "leq_literals" (formula "37") (term "0"))
                                           (builtin "One Step Simplification" (formula "37"))
                                          (rule "true_left" (formula "37"))
                                          (rule "inEqSimp_subsumption1" (formula "27") (ifseqformula "37"))
                                          (rule "inEqSimp_homoInEq0" (formula "27") (term "0"))
                                          (rule "polySimp_pullOutFactor1b" (formula "27") (term "0,0"))
                                          (rule "add_literals" (formula "27") (term "1,1,0,0"))
                                          (rule "times_zero_1" (formula "27") (term "1,0,0"))
                                          (rule "add_literals" (formula "27") (term "0,0"))
                                          (rule "qeq_literals" (formula "27") (term "0"))
                                           (builtin "One Step Simplification" (formula "27"))
                                          (rule "true_left" (formula "27"))
                                          (rule "pullOutSelect" (formula "1") (term "0") (inst "selectSK=de_polyas_core3_open_cred_CredTool_vals_2"))
                                          (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "39"))
                                           (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "47")))
                                          (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,1,0,0") (ifseqformula "32"))
                                           (builtin "One Step Simplification" (formula "1"))
                                          (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,0,0,1,0,0") (ifseqformula "20"))
                                          (rule "replace_known_left" (formula "1") (term "0,0,0,0,1,0,0") (ifseqformula "9"))
                                           (builtin "One Step Simplification" (formula "1"))
                                          (rule "elementOfSingleton" (formula "1") (term "0,0"))
                                           (builtin "One Step Simplification" (formula "1"))
                                          (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "32"))
                                           (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "47")))
                                          (rule "replaceKnownSelect_taclet10_12" (formula "1") (term "2,0"))
                                          (rule "replaceKnownAuxiliaryConstant_taclet10_13" (formula "1") (term "2,0"))
                                          (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,0,1,0,0") (ifseqformula "20"))
                                          (rule "replace_known_left" (formula "1") (term "0,0,0,1,0,0") (ifseqformula "9"))
                                           (builtin "One Step Simplification" (formula "1"))
                                          (rule "elementOfSingleton" (formula "1") (term "0,0"))
                                           (builtin "One Step Simplification" (formula "1"))
                                          (rule "applyEqReverse" (formula "2") (term "0") (ifseqformula "1"))
                                          (rule "close" (formula "45") (ifseqformula "2"))
                                       )
                                    )
                                    (branch
                                       (rule "notRight" (formula "51"))
                                       (rule "inEqSimp_ltToLeq" (formula "17") (term "0,0,0,0,0"))
                                       (rule "polySimp_mulComm0" (formula "17") (term "1,0,0,0,0,0,0,0"))
                                       (rule "inEqSimp_ltToLeq" (formula "29"))
                                       (rule "polySimp_mulComm0" (formula "29") (term "1,0,0"))
                                       (rule "polySimp_addComm1" (formula "29") (term "0"))
                                       (rule "inEqSimp_ltToLeq" (formula "13") (term "0,0,0"))
                                       (rule "polySimp_mulComm0" (formula "13") (term "1,0,0,0,0,0"))
                                       (rule "inEqSimp_ltToLeq" (formula "12") (term "0,0,0"))
                                       (rule "polySimp_mulComm0" (formula "12") (term "1,0,0,0,0,0"))
                                       (rule "inEqSimp_ltToLeq" (formula "16") (term "0,0,0,0,0"))
                                       (rule "polySimp_mulComm0" (formula "16") (term "1,0,0,0,0,0,0,0"))
                                       (rule "inEqSimp_ltToLeq" (formula "12") (term "0,0,0,1,0"))
                                       (rule "polySimp_mulComm0" (formula "12") (term "1,0,0,0,0,0,1,0"))
                                       (rule "inEqSimp_sepPosMonomial1" (formula "38"))
                                       (rule "mul_literals" (formula "38") (term "1"))
                                       (rule "inEqSimp_sepPosMonomial0" (formula "17") (term "0,0,0,0,0"))
                                       (rule "polySimp_mulComm0" (formula "17") (term "1,0,0,0,0,0"))
                                       (rule "polySimp_rightDist" (formula "17") (term "1,0,0,0,0,0"))
                                       (rule "polySimp_mulLiterals" (formula "17") (term "1,1,0,0,0,0,0"))
                                       (rule "mul_literals" (formula "17") (term "0,1,0,0,0,0,0"))
                                       (rule "polySimp_elimOne" (formula "17") (term "1,1,0,0,0,0,0"))
                                       (rule "inEqSimp_sepNegMonomial0" (formula "29"))
                                       (rule "polySimp_mulLiterals" (formula "29") (term "0"))
                                       (rule "polySimp_elimOne" (formula "29") (term "0"))
                                       (rule "inEqSimp_sepPosMonomial0" (formula "13") (term "0,0,0"))
                                       (rule "polySimp_mulComm0" (formula "13") (term "1,0,0,0"))
                                       (rule "polySimp_rightDist" (formula "13") (term "1,0,0,0"))
                                       (rule "mul_literals" (formula "13") (term "0,1,0,0,0"))
                                       (rule "polySimp_mulLiterals" (formula "13") (term "1,1,0,0,0"))
                                       (rule "polySimp_elimOne" (formula "13") (term "1,1,0,0,0"))
                                       (rule "inEqSimp_sepPosMonomial0" (formula "12") (term "0,0,0"))
                                       (rule "polySimp_mulComm0" (formula "12") (term "1,0,0,0"))
                                       (rule "polySimp_rightDist" (formula "12") (term "1,0,0,0"))
                                       (rule "mul_literals" (formula "12") (term "0,1,0,0,0"))
                                       (rule "polySimp_mulLiterals" (formula "12") (term "1,1,0,0,0"))
                                       (rule "polySimp_elimOne" (formula "12") (term "1,1,0,0,0"))
                                       (rule "inEqSimp_sepPosMonomial0" (formula "16") (term "0,0,0,0,0"))
                                       (rule "polySimp_mulComm0" (formula "16") (term "1,0,0,0,0,0"))
                                       (rule "polySimp_rightDist" (formula "16") (term "1,0,0,0,0,0"))
                                       (rule "polySimp_mulLiterals" (formula "16") (term "1,1,0,0,0,0,0"))
                                       (rule "mul_literals" (formula "16") (term "0,1,0,0,0,0,0"))
                                       (rule "polySimp_elimOne" (formula "16") (term "1,1,0,0,0,0,0"))
                                       (rule "inEqSimp_sepPosMonomial0" (formula "12") (term "0,0,0,1,0"))
                                       (rule "polySimp_mulComm0" (formula "12") (term "1,0,0,0,1,0"))
                                       (rule "polySimp_rightDist" (formula "12") (term "1,0,0,0,1,0"))
                                       (rule "polySimp_mulLiterals" (formula "12") (term "1,1,0,0,0,1,0"))
                                       (rule "mul_literals" (formula "12") (term "0,1,0,0,0,1,0"))
                                       (rule "polySimp_elimOne" (formula "12") (term "1,1,0,0,0,1,0"))
                                       (rule "inEqSimp_contradEq7" (formula "42") (ifseqformula "38"))
                                       (rule "polySimp_mulComm0" (formula "42") (term "1,0,0"))
                                       (rule "polySimp_pullOutFactor1b" (formula "42") (term "0,0"))
                                       (rule "add_literals" (formula "42") (term "1,1,0,0"))
                                       (rule "times_zero_1" (formula "42") (term "1,0,0"))
                                       (rule "add_zero_right" (formula "42") (term "0,0"))
                                       (rule "leq_literals" (formula "42") (term "0"))
                                        (builtin "One Step Simplification" (formula "42"))
                                       (rule "false_right" (formula "42"))
                                       (rule "inEqSimp_subsumption1" (formula "37") (ifseqformula "26"))
                                       (rule "leq_literals" (formula "37") (term "0"))
                                        (builtin "One Step Simplification" (formula "37"))
                                       (rule "true_left" (formula "37"))
                                       (rule "inEqSimp_subsumption1" (formula "27") (ifseqformula "37"))
                                       (rule "inEqSimp_homoInEq0" (formula "27") (term "0"))
                                       (rule "polySimp_pullOutFactor1b" (formula "27") (term "0,0"))
                                       (rule "add_literals" (formula "27") (term "1,1,0,0"))
                                       (rule "times_zero_1" (formula "27") (term "1,0,0"))
                                       (rule "add_literals" (formula "27") (term "0,0"))
                                       (rule "qeq_literals" (formula "27") (term "0"))
                                        (builtin "One Step Simplification" (formula "27"))
                                       (rule "true_left" (formula "27"))
                                       (rule "pullOutSelect" (formula "1") (term "0") (inst "selectSK=de_polyas_core3_open_cred_CredTool_cols_1"))
                                       (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "39"))
                                        (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "47")))
                                       (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,1,0,0") (ifseqformula "32"))
                                        (builtin "One Step Simplification" (formula "1"))
                                       (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,0,0,1,0,0") (ifseqformula "20"))
                                       (rule "replace_known_left" (formula "1") (term "0,0,0,0,1,0,0") (ifseqformula "9"))
                                        (builtin "One Step Simplification" (formula "1"))
                                       (rule "elementOfSingleton" (formula "1") (term "0,0"))
                                        (builtin "One Step Simplification" (formula "1"))
                                       (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "32"))
                                        (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "47")))
                                       (rule "replaceKnownSelect_taclet10_14" (formula "1") (term "2,0"))
                                       (rule "replaceKnownAuxiliaryConstant_taclet10_17" (formula "1") (term "2,0"))
                                       (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,0,1,0,0") (ifseqformula "20"))
                                       (rule "replace_known_left" (formula "1") (term "0,0,0,1,0,0") (ifseqformula "9"))
                                        (builtin "One Step Simplification" (formula "1"))
                                       (rule "elementOfSingleton" (formula "1") (term "0,0"))
                                        (builtin "One Step Simplification" (formula "1"))
                                       (rule "applyEqReverse" (formula "2") (term "0") (ifseqformula "1"))
                                       (rule "close" (formula "46") (ifseqformula "2"))
                                    )
                                 )
                              )
                              (branch
                                 (rule "inEqSimp_ltToLeq" (formula "11") (term "0,0,0,1,0"))
                                 (rule "polySimp_mulComm0" (formula "11") (term "1,0,0,0,0,0,1,0"))
                                 (rule "inEqSimp_ltToLeq" (formula "28"))
                                 (rule "polySimp_mulComm0" (formula "28") (term "1,0,0"))
                                 (rule "polySimp_addComm1" (formula "28") (term "0"))
                                 (rule "inEqSimp_ltToLeq" (formula "16") (term "0,0,0,0,0"))
                                 (rule "polySimp_mulComm0" (formula "16") (term "1,0,0,0,0,0,0,0"))
                                 (rule "inEqSimp_ltToLeq" (formula "15") (term "0,0,0,0,0"))
                                 (rule "polySimp_mulComm0" (formula "15") (term "1,0,0,0,0,0,0,0"))
                                 (rule "inEqSimp_ltToLeq" (formula "11") (term "0,0,0"))
                                 (rule "polySimp_mulComm0" (formula "11") (term "1,0,0,0,0,0"))
                                 (rule "inEqSimp_ltToLeq" (formula "12") (term "0,0,0"))
                                 (rule "polySimp_mulComm0" (formula "12") (term "1,0,0,0,0,0"))
                                 (rule "inEqSimp_sepPosMonomial1" (formula "37"))
                                 (rule "mul_literals" (formula "37") (term "1"))
                                 (rule "inEqSimp_sepPosMonomial0" (formula "11") (term "0,0,0,1,0"))
                                 (rule "polySimp_mulComm0" (formula "11") (term "1,0,0,0,1,0"))
                                 (rule "polySimp_rightDist" (formula "11") (term "1,0,0,0,1,0"))
                                 (rule "mul_literals" (formula "11") (term "0,1,0,0,0,1,0"))
                                 (rule "polySimp_mulLiterals" (formula "11") (term "1,1,0,0,0,1,0"))
                                 (rule "polySimp_elimOne" (formula "11") (term "1,1,0,0,0,1,0"))
                                 (rule "inEqSimp_sepNegMonomial0" (formula "28"))
                                 (rule "polySimp_mulLiterals" (formula "28") (term "0"))
                                 (rule "polySimp_elimOne" (formula "28") (term "0"))
                                 (rule "inEqSimp_sepPosMonomial0" (formula "16") (term "0,0,0,0,0"))
                                 (rule "polySimp_mulComm0" (formula "16") (term "1,0,0,0,0,0"))
                                 (rule "polySimp_rightDist" (formula "16") (term "1,0,0,0,0,0"))
                                 (rule "mul_literals" (formula "16") (term "0,1,0,0,0,0,0"))
                                 (rule "polySimp_mulLiterals" (formula "16") (term "1,1,0,0,0,0,0"))
                                 (rule "polySimp_elimOne" (formula "16") (term "1,1,0,0,0,0,0"))
                                 (rule "inEqSimp_sepPosMonomial0" (formula "15") (term "0,0,0,0,0"))
                                 (rule "polySimp_mulComm0" (formula "15") (term "1,0,0,0,0,0"))
                                 (rule "polySimp_rightDist" (formula "15") (term "1,0,0,0,0,0"))
                                 (rule "mul_literals" (formula "15") (term "0,1,0,0,0,0,0"))
                                 (rule "polySimp_mulLiterals" (formula "15") (term "1,1,0,0,0,0,0"))
                                 (rule "polySimp_elimOne" (formula "15") (term "1,1,0,0,0,0,0"))
                                 (rule "inEqSimp_sepPosMonomial0" (formula "11") (term "0,0,0"))
                                 (rule "polySimp_mulComm0" (formula "11") (term "1,0,0,0"))
                                 (rule "polySimp_rightDist" (formula "11") (term "1,0,0,0"))
                                 (rule "polySimp_mulLiterals" (formula "11") (term "1,1,0,0,0"))
                                 (rule "mul_literals" (formula "11") (term "0,1,0,0,0"))
                                 (rule "polySimp_elimOne" (formula "11") (term "1,1,0,0,0"))
                                 (rule "inEqSimp_sepPosMonomial0" (formula "12") (term "0,0,0"))
                                 (rule "polySimp_mulComm0" (formula "12") (term "1,0,0,0"))
                                 (rule "polySimp_rightDist" (formula "12") (term "1,0,0,0"))
                                 (rule "polySimp_mulLiterals" (formula "12") (term "1,1,0,0,0"))
                                 (rule "mul_literals" (formula "12") (term "0,1,0,0,0"))
                                 (rule "polySimp_elimOne" (formula "12") (term "1,1,0,0,0"))
                                 (rule "inEqSimp_contradEq7" (formula "41") (ifseqformula "37"))
                                 (rule "polySimp_mulComm0" (formula "41") (term "1,0,0"))
                                 (rule "polySimp_pullOutFactor1b" (formula "41") (term "0,0"))
                                 (rule "add_literals" (formula "41") (term "1,1,0,0"))
                                 (rule "times_zero_1" (formula "41") (term "1,0,0"))
                                 (rule "add_zero_right" (formula "41") (term "0,0"))
                                 (rule "leq_literals" (formula "41") (term "0"))
                                  (builtin "One Step Simplification" (formula "41"))
                                 (rule "false_right" (formula "41"))
                                 (rule "inEqSimp_subsumption1" (formula "36") (ifseqformula "25"))
                                 (rule "leq_literals" (formula "36") (term "0"))
                                  (builtin "One Step Simplification" (formula "36"))
                                 (rule "true_left" (formula "36"))
                                 (rule "inEqSimp_subsumption1" (formula "26") (ifseqformula "36"))
                                 (rule "inEqSimp_homoInEq0" (formula "26") (term "0"))
                                 (rule "polySimp_pullOutFactor1b" (formula "26") (term "0,0"))
                                 (rule "add_literals" (formula "26") (term "1,1,0,0"))
                                 (rule "times_zero_1" (formula "26") (term "1,0,0"))
                                 (rule "add_zero_right" (formula "26") (term "0,0"))
                                 (rule "qeq_literals" (formula "26") (term "0"))
                                  (builtin "One Step Simplification" (formula "26"))
                                 (rule "true_left" (formula "26"))
                                 (rule "equalityToSeqGetAndSeqLenRight" (formula "47") (inst "iv=iv"))
                                 (rule "inEqSimp_ltToLeq" (formula "47") (term "1,0,0,1"))
                                 (rule "polySimp_mulComm0" (formula "47") (term "1,0,0,1,0,0,1"))
                                 (rule "inEqSimp_commuteLeq" (formula "47") (term "0,0,0,1"))
                                 (rule "inEqSimp_sepPosMonomial0" (formula "47") (term "1,0,0,1"))
                                 (rule "polySimp_mulComm0" (formula "47") (term "1,1,0,0,1"))
                                 (rule "polySimp_rightDist" (formula "47") (term "1,1,0,0,1"))
                                 (rule "mul_literals" (formula "47") (term "0,1,1,0,0,1"))
                                 (rule "polySimp_mulLiterals" (formula "47") (term "1,1,1,0,0,1"))
                                 (rule "polySimp_elimOne" (formula "47") (term "1,1,1,0,0,1"))
                                 (rule "pullOutSelect" (formula "47") (term "0,1,1,0,1") (inst "selectSK=java_util_Iterator_seq_2"))
                                 (rule "applyEq" (formula "48") (term "0,1,0") (ifseqformula "1"))
                                 (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "38"))
                                  (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "42")))
                                 (rule "replaceKnownSelect_taclet000010_28" (formula "1") (term "2,0"))
                                 (rule "replaceKnownAuxiliaryConstant_taclet000010_29" (formula "1") (term "2,0"))
                                 (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,1,0,0") (ifseqformula "31"))
                                  (builtin "One Step Simplification" (formula "1"))
                                 (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,0,0,1,0,0") (ifseqformula "19"))
                                 (rule "replace_known_right" (formula "1") (term "0,0,0,0,1,0,0") (ifseqformula "41"))
                                  (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "20")))
                                 (rule "elementOfSingleton" (formula "1") (term "0,0"))
                                  (builtin "One Step Simplification" (formula "1"))
                                 (rule "applyEqReverse" (formula "48") (term "0,1,1,0,1") (ifseqformula "1"))
                                 (rule "applyEqReverse" (formula "48") (term "0,1,0") (ifseqformula "1"))
                                 (rule "hideAuxiliaryEq" (formula "1"))
                                 (rule "applyEq" (formula "47") (term "0,1,1,0,1") (ifseqformula "21"))
                                 (rule "applyEq" (formula "47") (term "0,1,0") (ifseqformula "21"))
                                 (rule "pullOutSelect" (formula "47") (term "0,0,0") (inst "selectSK=java_util_Collection_seq_1"))
                                 (rule "applyEq" (formula "48") (term "0,1,1,1,0,0,1") (ifseqformula "1"))
                                 (rule "applyEq" (formula "48") (term "0,0,1,0,1") (ifseqformula "1"))
                                 (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "38"))
                                  (builtin "One Step Simplification" (formula "1"))
                                 (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,1,1,0,0") (ifseqformula "31"))
                                  (builtin "One Step Simplification" (formula "1"))
                                 (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,0,0,1,1,0,0") (ifseqformula "19"))
                                 (rule "eqSymm" (formula "48") (term "0"))
                                 (rule "eqSymm" (formula "48") (term "1,0,1"))
                                 (rule "elementOfSingleton" (formula "1") (term "0,0,0"))
                                  (builtin "One Step Simplification" (formula "1"))
                                 (rule "pullOutSelect" (formula "1") (term "1,2,0") (inst "selectSK=de_polyas_core3_open_cred_CredTool_cols_1"))
                                 (rule "applyEq" (formula "2") (term "0,0,0,0") (ifseqformula "1"))
                                 (rule "applyEq" (formula "2") (term "1,0,1,0,1,1,0,0") (ifseqformula "1"))
                                 (rule "applyEq" (formula "2") (term "1,1,0") (ifseqformula "1"))
                                 (rule "applyEq" (formula "2") (term "1,0,0,0,0,0,1,1,0,0") (ifseqformula "1"))
                                 (rule "applyEq" (formula "2") (term "1,0,1,0,0,0,1,1,0,0") (ifseqformula "1"))
                                 (rule "applyEq" (formula "2") (term "1,0,1,0,0,1,1,0,0") (ifseqformula "1"))
                                 (rule "applyEq" (formula "2") (term "0,0,0,1,0,0") (ifseqformula "1"))
                                 (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "39"))
                                  (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "47")))
                                 (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,1,0,0") (ifseqformula "32"))
                                  (builtin "One Step Simplification" (formula "1"))
                                 (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,0,0,1,0,0") (ifseqformula "20"))
                                 (rule "eqSymm" (formula "2") (term "0,0,0"))
                                 (rule "replace_known_left" (formula "1") (term "0,0,0,0,1,0,0") (ifseqformula "9"))
                                  (builtin "One Step Simplification" (formula "1"))
                                 (rule "elementOfSingleton" (formula "1") (term "0,0"))
                                  (builtin "One Step Simplification" (formula "1"))
                                 (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "32"))
                                  (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "47")))
                                 (rule "replaceKnownSelect_taclet10_14" (formula "1") (term "2,0"))
                                 (rule "replaceKnownAuxiliaryConstant_taclet10_17" (formula "1") (term "2,0"))
                                 (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,0,1,0,0") (ifseqformula "20"))
                                 (rule "replace_known_left" (formula "1") (term "0,0,0,1,0,0") (ifseqformula "9"))
                                  (builtin "One Step Simplification" (formula "1"))
                                 (rule "elementOfSingleton" (formula "1") (term "0,0"))
                                  (builtin "One Step Simplification" (formula "1"))
                                 (rule "applyEqReverse" (formula "2") (term "1,0,1,0,1,1,0,0") (ifseqformula "1"))
                                 (rule "applyEqReverse" (formula "2") (term "0,0,0,1,0,0") (ifseqformula "1"))
                                 (rule "applyEqReverse" (formula "2") (term "1,0,0,0,0,0,1,1,0,0") (ifseqformula "1"))
                                 (rule "applyEqReverse" (formula "2") (term "1,2,0") (ifseqformula "1"))
                                 (rule "applyEqReverse" (formula "2") (term "1,0,0,0") (ifseqformula "1"))
                                 (rule "applyEqReverse" (formula "2") (term "1,0,1,0,0,1,1,0,0") (ifseqformula "1"))
                                 (rule "applyEqReverse" (formula "2") (term "1,1,0") (ifseqformula "1"))
                                 (rule "applyEqReverse" (formula "2") (term "1,0,1,0,0,0,1,1,0,0") (ifseqformula "1"))
                                 (rule "hideAuxiliaryEq" (formula "1"))
                                 (rule "replace_known_left" (formula "1") (term "0,0,0,0,1,1,0,0") (ifseqformula "4"))
                                  (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "47")) (ifInst ""  (formula "45")))
                                 (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "31"))
                                  (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "45")))
                                 (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,0,1,0,0") (ifseqformula "19"))
                                 (rule "replace_known_left" (formula "1") (term "0,0,0,1,0,0") (ifseqformula "4"))
                                  (builtin "One Step Simplification" (formula "1"))
                                 (rule "elementOfSingleton" (formula "1") (term "0,0"))
                                  (builtin "One Step Simplification" (formula "1"))
                                 (rule "simplifySelectOfAnon" (formula "1"))
                                  (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "45")))
                                 (rule "replaceKnownSelect_taclet0_2" (formula "1") (term "2,0"))
                                 (rule "replaceKnownAuxiliaryConstant_taclet0_4" (formula "1") (term "2,0"))
                                 (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,1,0,0") (ifseqformula "19"))
                                 (rule "replace_known_left" (formula "1") (term "0,0,1,0,0") (ifseqformula "4"))
                                  (builtin "One Step Simplification" (formula "1"))
                                 (rule "applyEq" (formula "1") (term "2,0") (ifseqformula "22"))
                                 (rule "elementOfUnion" (formula "1") (term "0,0"))
                                 (rule "elementOfSingleton" (formula "1") (term "0,0,0"))
                                  (builtin "One Step Simplification" (formula "1"))
                                 (rule "eqSymm" (formula "1") (term "0,0,0"))
                                 (rule "replace_known_right" (formula "1") (term "0,0,0") (ifseqformula "47"))
                                  (builtin "One Step Simplification" (formula "1"))
                                 (rule "elementOfSingleton" (formula "1") (term "0,0"))
                                  (builtin "One Step Simplification" (formula "1"))
                                 (rule "applyEqReverse" (formula "48") (term "0,1,1,1,0,0,1") (ifseqformula "1"))
                                 (rule "applyEqReverse" (formula "48") (term "0,1,1,0,1") (ifseqformula "1"))
                                  (builtin "One Step Simplification" (formula "48"))
                                 (rule "applyEqReverse" (formula "48") (term "0,1") (ifseqformula "1"))
                                  (builtin "One Step Simplification" (formula "48"))
                                 (rule "closeTrue" (formula "48"))
                              )
                           )
                           (branch
                              (rule "selectCreatedOfAnonAsFormulaEQ" (formula "51") (term "0,1,1,0,0,0") (ifseqformula "18"))
                              (rule "replaceKnownSelect_taclet10_5" (formula "51") (term "1,0,0,0,0,0,0"))
                              (rule "replaceKnownAuxiliaryConstant_taclet10_6" (formula "51") (term "1,0,0,0,0,0,0"))
                              (rule "allRight" (formula "51") (inst "sk=f_0"))
                              (rule "allRight" (formula "51") (inst "sk=o_0"))
                              (rule "orRight" (formula "51"))
                              (rule "orRight" (formula "51"))
                              (rule "orRight" (formula "51"))
                              (rule "inEqSimp_ltToLeq" (formula "11") (term "0,0,0"))
                              (rule "polySimp_mulComm0" (formula "11") (term "1,0,0,0,0,0"))
                              (rule "inEqSimp_ltToLeq" (formula "28"))
                              (rule "polySimp_mulComm0" (formula "28") (term "1,0,0"))
                              (rule "polySimp_addComm1" (formula "28") (term "0"))
                              (rule "inEqSimp_ltToLeq" (formula "12") (term "0,0,0"))
                              (rule "polySimp_mulComm0" (formula "12") (term "1,0,0,0,0,0"))
                              (rule "inEqSimp_ltToLeq" (formula "15") (term "0,0,0,0,0"))
                              (rule "polySimp_mulComm0" (formula "15") (term "1,0,0,0,0,0,0,0"))
                              (rule "inEqSimp_ltToLeq" (formula "16") (term "0,0,0,0,0"))
                              (rule "polySimp_mulComm0" (formula "16") (term "1,0,0,0,0,0,0,0"))
                              (rule "inEqSimp_ltToLeq" (formula "11") (term "0,0,0,1,0"))
                              (rule "polySimp_mulComm0" (formula "11") (term "1,0,0,0,0,0,1,0"))
                              (rule "inEqSimp_sepPosMonomial1" (formula "37"))
                              (rule "mul_literals" (formula "37") (term "1"))
                              (rule "inEqSimp_sepPosMonomial0" (formula "11") (term "0,0,0"))
                              (rule "polySimp_mulComm0" (formula "11") (term "1,0,0,0"))
                              (rule "polySimp_rightDist" (formula "11") (term "1,0,0,0"))
                              (rule "mul_literals" (formula "11") (term "0,1,0,0,0"))
                              (rule "polySimp_mulLiterals" (formula "11") (term "1,1,0,0,0"))
                              (rule "polySimp_elimOne" (formula "11") (term "1,1,0,0,0"))
                              (rule "inEqSimp_sepNegMonomial0" (formula "28"))
                              (rule "polySimp_mulLiterals" (formula "28") (term "0"))
                              (rule "polySimp_elimOne" (formula "28") (term "0"))
                              (rule "inEqSimp_sepPosMonomial0" (formula "12") (term "0,0,0"))
                              (rule "polySimp_mulComm0" (formula "12") (term "1,0,0,0"))
                              (rule "polySimp_rightDist" (formula "12") (term "1,0,0,0"))
                              (rule "mul_literals" (formula "12") (term "0,1,0,0,0"))
                              (rule "polySimp_mulLiterals" (formula "12") (term "1,1,0,0,0"))
                              (rule "polySimp_elimOne" (formula "12") (term "1,1,0,0,0"))
                              (rule "inEqSimp_sepPosMonomial0" (formula "15") (term "0,0,0,0,0"))
                              (rule "polySimp_mulComm0" (formula "15") (term "1,0,0,0,0,0"))
                              (rule "polySimp_rightDist" (formula "15") (term "1,0,0,0,0,0"))
                              (rule "polySimp_mulLiterals" (formula "15") (term "1,1,0,0,0,0,0"))
                              (rule "mul_literals" (formula "15") (term "0,1,0,0,0,0,0"))
                              (rule "polySimp_elimOne" (formula "15") (term "1,1,0,0,0,0,0"))
                              (rule "inEqSimp_sepPosMonomial0" (formula "16") (term "0,0,0,0,0"))
                              (rule "polySimp_mulComm0" (formula "16") (term "1,0,0,0,0,0"))
                              (rule "polySimp_rightDist" (formula "16") (term "1,0,0,0,0,0"))
                              (rule "mul_literals" (formula "16") (term "0,1,0,0,0,0,0"))
                              (rule "polySimp_mulLiterals" (formula "16") (term "1,1,0,0,0,0,0"))
                              (rule "polySimp_elimOne" (formula "16") (term "1,1,0,0,0,0,0"))
                              (rule "inEqSimp_sepPosMonomial0" (formula "11") (term "0,0,0,1,0"))
                              (rule "polySimp_mulComm0" (formula "11") (term "1,0,0,0,1,0"))
                              (rule "polySimp_rightDist" (formula "11") (term "1,0,0,0,1,0"))
                              (rule "mul_literals" (formula "11") (term "0,1,0,0,0,1,0"))
                              (rule "polySimp_mulLiterals" (formula "11") (term "1,1,0,0,0,1,0"))
                              (rule "polySimp_elimOne" (formula "11") (term "1,1,0,0,0,1,0"))
                              (rule "inEqSimp_contradEq7" (formula "41") (ifseqformula "37"))
                              (rule "polySimp_mulComm0" (formula "41") (term "1,0,0"))
                              (rule "polySimp_pullOutFactor1b" (formula "41") (term "0,0"))
                              (rule "add_literals" (formula "41") (term "1,1,0,0"))
                              (rule "times_zero_1" (formula "41") (term "1,0,0"))
                              (rule "add_literals" (formula "41") (term "0,0"))
                              (rule "leq_literals" (formula "41") (term "0"))
                               (builtin "One Step Simplification" (formula "41"))
                              (rule "false_right" (formula "41"))
                              (rule "inEqSimp_subsumption1" (formula "36") (ifseqformula "25"))
                              (rule "leq_literals" (formula "36") (term "0"))
                               (builtin "One Step Simplification" (formula "36"))
                              (rule "true_left" (formula "36"))
                              (rule "inEqSimp_subsumption1" (formula "26") (ifseqformula "36"))
                              (rule "inEqSimp_homoInEq0" (formula "26") (term "0"))
                              (rule "polySimp_pullOutFactor1b" (formula "26") (term "0,0"))
                              (rule "add_literals" (formula "26") (term "1,1,0,0"))
                              (rule "times_zero_1" (formula "26") (term "1,0,0"))
                              (rule "add_literals" (formula "26") (term "0,0"))
                              (rule "qeq_literals" (formula "26") (term "0"))
                               (builtin "One Step Simplification" (formula "26"))
                              (rule "true_left" (formula "26"))
                              (rule "pullOutSelect" (formula "50") (term "1") (inst "selectSK=f_0_0"))
                              (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "38"))
                               (builtin "One Step Simplification" (formula "1"))
                              (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,1,1,0,0") (ifseqformula "31"))
                               (builtin "One Step Simplification" (formula "1"))
                              (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,0,0,1,1,0,0") (ifseqformula "19"))
                              (rule "elementOfSingleton" (formula "1") (term "0,0,0,0"))
                              (rule "replace_known_right" (formula "1") (term "0,0,0,0") (ifseqformula "48"))
                               (builtin "One Step Simplification" (formula "1"))
                              (rule "pullOutSelect" (formula "51") (term "0") (inst "selectSK=f_0_1"))
                              (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "20"))
                               (builtin "One Step Simplification" (formula "1"))
                              (rule "pullOutSelect" (formula "2") (term "2,0") (inst "selectSK=f_0_2"))
                              (rule "simplifySelectOfAnonEQ" (formula "2") (ifseqformula "33"))
                               (builtin "One Step Simplification" (formula "2"))
                              (rule "selectCreatedOfAnonAsFormulaEQ" (formula "2") (term "0,0,1,1,0,0") (ifseqformula "21"))
                              (rule "elementOfSingleton" (formula "2") (term "0,0,0,0"))
                              (rule "replace_known_right" (formula "2") (term "0,0,0,0") (ifseqformula "51"))
                               (builtin "One Step Simplification" (formula "2"))
                              (rule "pullOutSelect" (formula "2") (term "2,0") (inst "selectSK=f_0_3"))
                              (rule "simplifySelectOfAnon" (formula "2"))
                               (builtin "One Step Simplification" (formula "2"))
                              (rule "replaceKnownSelect_taclet1000000010_41" (formula "2") (term "2,0"))
                              (rule "selectCreatedOfAnonAsFormulaEQ" (formula "2") (term "0,1,1,0,0") (ifseqformula "22"))
                              (rule "replace_known_right" (formula "2") (term "1,0,0") (ifseqformula "53"))
                               (builtin "One Step Simplification" (formula "2"))
                              (rule "elementOfUnion" (formula "2") (term "0,0,0"))
                              (rule "elementOfSingleton" (formula "2") (term "1,0,0,0"))
                              (rule "replace_known_right" (formula "2") (term "1,0,0,0") (ifseqformula "52"))
                               (builtin "One Step Simplification" (formula "2"))
                              (rule "elementOfSingleton" (formula "2") (term "0,0,0"))
                              (rule "replace_known_right" (formula "2") (term "0,0,0") (ifseqformula "51"))
                               (builtin "One Step Simplification" (formula "2"))
                              (rule "applyEqReverse" (formula "3") (term "2,0") (ifseqformula "2"))
                              (rule "hideAuxiliaryEq" (formula "2"))
                              (rule "inEqSimp_and_subsumption3" (formula "18") (term "0,0,0"))
                              (rule "leq_literals" (formula "18") (term "0,1,0,0,0,0"))
                               (builtin "One Step Simplification" (formula "18"))
                              (rule "inEqSimp_and_subsumption3" (formula "19") (term "0,0,0"))
                              (rule "leq_literals" (formula "19") (term "0,1,0,0,0,0"))
                               (builtin "One Step Simplification" (formula "19"))
                              (rule "nnf_imp2or" (formula "15") (term "0"))
                              (rule "nnf_imp2or" (formula "14") (term "0"))
                              (rule "nnf_imp2or" (formula "18") (term "0"))
                              (rule "nnf_imp2or" (formula "19") (term "0"))
                              (rule "nnf_notAnd" (formula "15") (term "0,0"))
                              (rule "inEqSimp_notGeq" (formula "15") (term "1,0,0"))
                              (rule "mul_literals" (formula "15") (term "1,0,0,1,0,0"))
                              (rule "add_zero_right" (formula "15") (term "0,0,1,0,0"))
                              (rule "inEqSimp_sepPosMonomial0" (formula "15") (term "1,0,0"))
                              (rule "mul_literals" (formula "15") (term "1,1,0,0"))
                              (rule "inEqSimp_notLeq" (formula "15") (term "0,0,0"))
                              (rule "polySimp_rightDist" (formula "15") (term "1,0,0,0,0,0"))
                              (rule "mul_literals" (formula "15") (term "0,1,0,0,0,0,0"))
                              (rule "polySimp_addAssoc" (formula "15") (term "0,0,0,0,0"))
                              (rule "add_literals" (formula "15") (term "0,0,0,0,0,0"))
                              (rule "add_zero_left" (formula "15") (term "0,0,0,0,0"))
                              (rule "inEqSimp_sepPosMonomial1" (formula "15") (term "0,0,0"))
                              (rule "polySimp_mulLiterals" (formula "15") (term "1,0,0,0"))
                              (rule "polySimp_elimOne" (formula "15") (term "1,0,0,0"))
                              (rule "nnf_notAnd" (formula "14") (term "0,0"))
                              (rule "inEqSimp_notGeq" (formula "14") (term "1,0,0"))
                              (rule "times_zero_1" (formula "14") (term "1,0,0,1,0,0"))
                              (rule "add_zero_right" (formula "14") (term "0,0,1,0,0"))
                              (rule "inEqSimp_sepPosMonomial0" (formula "14") (term "1,0,0"))
                              (rule "mul_literals" (formula "14") (term "1,1,0,0"))
                              (rule "inEqSimp_notLeq" (formula "14") (term "0,0,0"))
                              (rule "polySimp_rightDist" (formula "14") (term "1,0,0,0,0,0"))
                              (rule "mul_literals" (formula "14") (term "0,1,0,0,0,0,0"))
                              (rule "polySimp_addAssoc" (formula "14") (term "0,0,0,0,0"))
                              (rule "add_literals" (formula "14") (term "0,0,0,0,0,0"))
                              (rule "add_zero_left" (formula "14") (term "0,0,0,0,0"))
                              (rule "inEqSimp_sepPosMonomial1" (formula "14") (term "0,0,0"))
                              (rule "polySimp_mulLiterals" (formula "14") (term "1,0,0,0"))
                              (rule "polySimp_elimOne" (formula "14") (term "1,0,0,0"))
                              (rule "nnf_notAnd" (formula "18") (term "0,0"))
                              (rule "inEqSimp_notLeq" (formula "18") (term "1,0,0"))
                              (rule "mul_literals" (formula "18") (term "1,0,0,1,0,0"))
                              (rule "add_literals" (formula "18") (term "0,0,1,0,0"))
                              (rule "inEqSimp_sepPosMonomial1" (formula "18") (term "1,0,0"))
                              (rule "mul_literals" (formula "18") (term "1,1,0,0"))
                              (rule "nnf_notAnd" (formula "19") (term "0,0"))
                              (rule "inEqSimp_notLeq" (formula "19") (term "1,0,0"))
                              (rule "mul_literals" (formula "19") (term "1,0,0,1,0,0"))
                              (rule "add_literals" (formula "19") (term "0,0,1,0,0"))
                              (rule "inEqSimp_sepPosMonomial1" (formula "19") (term "1,0,0"))
                              (rule "mul_literals" (formula "19") (term "1,1,0,0"))
                              (rule "nnf_notAnd" (formula "18") (term "0,0,0"))
                              (rule "inEqSimp_notLeq" (formula "18") (term "0,0,0,0"))
                              (rule "polySimp_rightDist" (formula "18") (term "1,0,0,0,0,0,0"))
                              (rule "mul_literals" (formula "18") (term "0,1,0,0,0,0,0,0"))
                              (rule "polySimp_addAssoc" (formula "18") (term "0,0,0,0,0,0"))
                              (rule "add_literals" (formula "18") (term "0,0,0,0,0,0,0"))
                              (rule "add_zero_left" (formula "18") (term "0,0,0,0,0,0"))
                              (rule "inEqSimp_sepPosMonomial1" (formula "18") (term "0,0,0,0"))
                              (rule "polySimp_mulLiterals" (formula "18") (term "1,0,0,0,0"))
                              (rule "polySimp_elimOne" (formula "18") (term "1,0,0,0,0"))
                              (rule "inEqSimp_notGeq" (formula "18") (term "1,0,0,0"))
                              (rule "mul_literals" (formula "18") (term "1,0,0,1,0,0,0"))
                              (rule "add_zero_right" (formula "18") (term "0,0,1,0,0,0"))
                              (rule "inEqSimp_sepPosMonomial0" (formula "18") (term "1,0,0,0"))
                              (rule "mul_literals" (formula "18") (term "1,1,0,0,0"))
                              (rule "nnf_notAnd" (formula "19") (term "0,0,0"))
                              (rule "inEqSimp_notGeq" (formula "19") (term "1,0,0,0"))
                              (rule "times_zero_1" (formula "19") (term "1,0,0,1,0,0,0"))
                              (rule "add_zero_right" (formula "19") (term "0,0,1,0,0,0"))
                              (rule "inEqSimp_sepPosMonomial0" (formula "19") (term "1,0,0,0"))
                              (rule "mul_literals" (formula "19") (term "1,1,0,0,0"))
                              (rule "inEqSimp_notLeq" (formula "19") (term "0,0,0,0"))
                              (rule "polySimp_rightDist" (formula "19") (term "1,0,0,0,0,0,0"))
                              (rule "mul_literals" (formula "19") (term "0,1,0,0,0,0,0,0"))
                              (rule "polySimp_addAssoc" (formula "19") (term "0,0,0,0,0,0"))
                              (rule "add_literals" (formula "19") (term "0,0,0,0,0,0,0"))
                              (rule "add_zero_left" (formula "19") (term "0,0,0,0,0,0"))
                              (rule "inEqSimp_sepPosMonomial1" (formula "19") (term "0,0,0,0"))
                              (rule "polySimp_mulLiterals" (formula "19") (term "1,0,0,0,0"))
                              (rule "polySimp_elimOne" (formula "19") (term "1,0,0,0,0"))
                              (rule "commute_and" (formula "50"))
                              (rule "commute_and" (formula "51"))
                              (rule "commute_or_2" (formula "15") (term "0"))
                              (rule "commute_or_2" (formula "2") (term "0,1,0,0"))
                              (rule "commute_or_2" (formula "3") (term "0,0,1,0,0"))
                              (rule "commute_or" (formula "14") (term "0,0"))
                              (rule "commute_or_2" (formula "18") (term "0"))
                              (rule "commute_or_2" (formula "19") (term "0"))
                              (rule "commute_or" (formula "15") (term "0,0"))
                              (rule "commute_or_2" (formula "15") (term "0"))
                              (rule "commute_and" (formula "14") (term "0,0,1,0"))
                              (rule "commute_or_2" (formula "18") (term "0,0"))
                              (rule "commute_or_2" (formula "19") (term "0,0"))
                              (rule "commute_or" (formula "18") (term "0,0,0"))
                              (rule "commute_or_2" (formula "18") (term "0,0"))
                              (rule "commute_or_2" (formula "18") (term "0"))
                              (rule "commute_or" (formula "19") (term "0,0,0"))
                              (rule "commute_or_2" (formula "19") (term "0,0"))
                              (rule "commute_or_2" (formula "19") (term "0"))
                              (rule "commute_and_2" (formula "14") (term "0,1,0"))
                              (rule "seqGetAlphaCast" (formula "36") (term "0"))
                              (rule "castedGetAny" (formula "36") (term "0"))
                               (builtin "One Step Simplification" (formula "36"))
                              (rule "true_left" (formula "36"))
                              (rule "cut_direct" (formula "35") (term "0,0,0"))
                              (branch "CUT: result_2.<created> = TRUE TRUE"
                                  (builtin "One Step Simplification" (formula "36"))
                                 (rule "true_left" (formula "36"))
                                 (rule "cut_direct" (formula "52") (term "0,0"))
                                 (branch "CUT: o_0 = null TRUE"
                                     (builtin "One Step Simplification" (formula "53"))
                                    (rule "false_right" (formula "53"))
                                    (rule "replace_known_left" (formula "4") (term "0,0,0,0") (ifseqformula "1"))
                                     (builtin "One Step Simplification" (formula "4"))
                                    (rule "applyEqReverse" (formula "53") (term "1") (ifseqformula "4"))
                                    (rule "hideAuxiliaryEq" (formula "4"))
                                    (rule "eqSymm" (formula "52"))
                                    (rule "replace_known_left" (formula "3") (term "0,0,0,0") (ifseqformula "1"))
                                     (builtin "One Step Simplification" (formula "3"))
                                    (rule "applyEqReverse" (formula "52") (term "0") (ifseqformula "3"))
                                     (builtin "One Step Simplification" (formula "52"))
                                    (rule "closeTrue" (formula "52"))
                                 )
                                 (branch "CUT: o_0 = null FALSE"
                                     (builtin "One Step Simplification" (formula "53"))
                                    (rule "notRight" (formula "53"))
                                    (rule "replace_known_right" (formula "3") (term "0,0,0,0") (ifseqformula "53"))
                                     (builtin "One Step Simplification" (formula "3"))
                                    (rule "replace_known_right" (formula "2") (term "0,0,0,0") (ifseqformula "53"))
                                     (builtin "One Step Simplification" (formula "2"))
                                    (rule "replace_known_right" (formula "4") (term "0,0,0,0") (ifseqformula "53"))
                                     (builtin "One Step Simplification" (formula "4"))
                                    (rule "ifthenelse_negated" (formula "3") (term "0"))
                                    (rule "ifthenelse_negated" (formula "2") (term "0"))
                                    (rule "ifthenelse_negated" (formula "4") (term "0"))
                                    (rule "ex_pull_out3" (formula "15") (term "0"))
                                    (rule "cnf_rightDist" (formula "15") (term "0,0"))
                                    (rule "shift_paren_or" (formula "15") (term "1,0,0"))
                                    (rule "cnf_rightDist" (formula "15") (term "0,0,0"))
                                    (rule "commute_or_2" (formula "15") (term "0,0,0,0"))
                                    (rule "shift_paren_or" (formula "15") (term "1,0,0,0"))
                                    (rule "commute_or" (formula "15") (term "0,0,0,0,0"))
                                    (rule "ifthenelse_split" (formula "2") (term "0"))
                                    (branch "o_0.<created> = TRUE TRUE"
                                       (rule "applyEqReverse" (formula "55") (term "0") (ifseqformula "3"))
                                       (rule "applyEqReverse" (formula "4") (term "1,0") (ifseqformula "3"))
                                       (rule "hideAuxiliaryEq" (formula "3"))
                                       (rule "replace_known_left" (formula "4") (term "0,0,0,0,0") (ifseqformula "2"))
                                        (builtin "One Step Simplification" (formula "4"))
                                       (rule "applyEqReverse" (formula "54") (term "1") (ifseqformula "4"))
                                       (rule "hideAuxiliaryEq" (formula "4"))
                                       (rule "replace_known_left" (formula "3") (term "0,0,0,0") (ifseqformula "2"))
                                        (builtin "One Step Simplification" (formula "3") (ifInst ""  (formula "53")))
                                       (rule "closeFalse" (formula "3"))
                                    )
                                    (branch "o_0.<created> = TRUE FALSE"
                                       (rule "applyEqReverse" (formula "55") (term "0") (ifseqformula "2"))
                                       (rule "applyEqReverse" (formula "3") (term "1,0") (ifseqformula "2"))
                                       (rule "hideAuxiliaryEq" (formula "2"))
                                       (rule "replace_known_right" (formula "2") (term "0,0,0,0") (ifseqformula "42"))
                                        (builtin "One Step Simplification" (formula "2"))
                                       (rule "replace_known_right" (formula "3") (term "0,0,0,0,0") (ifseqformula "42"))
                                        (builtin "One Step Simplification" (formula "3"))
                                       (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "42"))
                                        (builtin "One Step Simplification" (formula "1"))
                                       (rule "replace_known_left" (formula "2") (term "1,0,0") (ifseqformula "1"))
                                        (builtin "One Step Simplification" (formula "2"))
                                       (rule "applyEqReverse" (formula "3") (term "1,0") (ifseqformula "2"))
                                       (rule "hideAuxiliaryEq" (formula "2"))
                                       (rule "replace_known_left" (formula "2") (term "1,0,0,0") (ifseqformula "1"))
                                        (builtin "One Step Simplification" (formula "2") (ifInst ""  (formula "53")))
                                       (rule "closeFalse" (formula "2"))
                                    )
                                 )
                              )
                              (branch "CUT: result_2.<created> = TRUE FALSE"
                                  (builtin "One Step Simplification" (formula "35"))
                                 (rule "cut_direct" (formula "53") (term "0,0"))
                                 (branch "CUT: o_0 = null TRUE"
                                     (builtin "One Step Simplification" (formula "54"))
                                    (rule "false_right" (formula "54"))
                                    (rule "replace_known_left" (formula "3") (term "0,0,0,0") (ifseqformula "1"))
                                     (builtin "One Step Simplification" (formula "3"))
                                    (rule "applyEqReverse" (formula "4") (term "2,0") (ifseqformula "3"))
                                    (rule "hideAuxiliaryEq" (formula "3"))
                                    (rule "replace_known_left" (formula "2") (term "0,0,0,0") (ifseqformula "1"))
                                     (builtin "One Step Simplification" (formula "2"))
                                    (rule "applyEqReverse" (formula "3") (term "2,0") (ifseqformula "2"))
                                    (rule "applyEqReverse" (formula "53") (term "0") (ifseqformula "2"))
                                    (rule "hideAuxiliaryEq" (formula "2"))
                                    (rule "replace_known_left" (formula "2") (term "0,0,0,0") (ifseqformula "1"))
                                     (builtin "One Step Simplification" (formula "2") (ifInst ""  (formula "52")))
                                    (rule "closeFalse" (formula "2"))
                                 )
                                 (branch "CUT: o_0 = null FALSE"
                                     (builtin "One Step Simplification" (formula "54"))
                                    (rule "notRight" (formula "54"))
                                    (rule "replace_known_right" (formula "2") (term "0,0,0,0") (ifseqformula "54"))
                                     (builtin "One Step Simplification" (formula "2"))
                                    (rule "replace_known_right" (formula "3") (term "0,0,0,0") (ifseqformula "54"))
                                     (builtin "One Step Simplification" (formula "3"))
                                    (rule "replace_known_right" (formula "4") (term "0,0,0,0") (ifseqformula "54"))
                                     (builtin "One Step Simplification" (formula "4"))
                                    (rule "ifthenelse_negated" (formula "2") (term "0"))
                                    (rule "ifthenelse_negated" (formula "3") (term "0"))
                                    (rule "ifthenelse_negated" (formula "4") (term "0"))
                                    (rule "ex_pull_out3" (formula "15") (term "0"))
                                    (rule "cnf_rightDist" (formula "15") (term "0,0"))
                                    (rule "shift_paren_or" (formula "15") (term "1,0,0"))
                                    (rule "cnf_rightDist" (formula "15") (term "0,0,0"))
                                    (rule "commute_or_2" (formula "15") (term "0,0,0,0"))
                                    (rule "shift_paren_or" (formula "15") (term "1,0,0,0"))
                                    (rule "commute_or" (formula "15") (term "0,0,0,0,0"))
                                    (rule "ifthenelse_split" (formula "2") (term "0"))
                                    (branch "o_0.<created> = TRUE TRUE"
                                       (rule "applyEqReverse" (formula "4") (term "1,0") (ifseqformula "3"))
                                       (rule "applyEqReverse" (formula "56") (term "0") (ifseqformula "3"))
                                       (rule "hideAuxiliaryEq" (formula "3"))
                                       (rule "replace_known_left" (formula "3") (term "0,0,0,0") (ifseqformula "2"))
                                        (builtin "One Step Simplification" (formula "3"))
                                       (rule "applyEqReverse" (formula "4") (term "1,0") (ifseqformula "3"))
                                       (rule "hideAuxiliaryEq" (formula "3"))
                                       (rule "replace_known_left" (formula "3") (term "0,0,0,0,0") (ifseqformula "2"))
                                        (builtin "One Step Simplification" (formula "3") (ifInst ""  (formula "54")))
                                       (rule "closeFalse" (formula "3"))
                                    )
                                    (branch "o_0.<created> = TRUE FALSE"
                                       (rule "applyEqReverse" (formula "56") (term "0") (ifseqformula "2"))
                                       (rule "applyEqReverse" (formula "3") (term "1,0") (ifseqformula "2"))
                                       (rule "hideAuxiliaryEq" (formula "2"))
                                       (rule "replace_known_right" (formula "3") (term "0,0,0,0,0") (ifseqformula "42"))
                                        (builtin "One Step Simplification" (formula "3"))
                                       (rule "replace_known_right" (formula "2") (term "0,0,0,0") (ifseqformula "42"))
                                        (builtin "One Step Simplification" (formula "2"))
                                       (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "42"))
                                        (builtin "One Step Simplification" (formula "1"))
                                       (rule "replace_known_left" (formula "2") (term "1,0,0") (ifseqformula "1"))
                                        (builtin "One Step Simplification" (formula "2"))
                                       (rule "applyEqReverse" (formula "3") (term "1,0") (ifseqformula "2"))
                                       (rule "hideAuxiliaryEq" (formula "2"))
                                       (rule "replace_known_left" (formula "2") (term "1,0,0,0") (ifseqformula "1"))
                                        (builtin "One Step Simplification" (formula "2") (ifInst ""  (formula "54")))
                                       (rule "closeFalse" (formula "2"))
                                    )
                                 )
                              )
                           )
                        )
                        (branch
                           (rule "precOfInt" (formula "51"))
                           (rule "inEqSimp_ltToLeq" (formula "16") (term "0,0,0,0,0"))
                           (rule "polySimp_mulComm0" (formula "16") (term "1,0,0,0,0,0,0,0"))
                           (rule "inEqSimp_ltToLeq" (formula "15") (term "0,0,0,0,0"))
                           (rule "polySimp_mulComm0" (formula "15") (term "1,0,0,0,0,0,0,0"))
                           (rule "inEqSimp_ltToLeq" (formula "11") (term "0,0,0"))
                           (rule "polySimp_mulComm0" (formula "11") (term "1,0,0,0,0,0"))
                           (rule "inEqSimp_ltToLeq" (formula "28"))
                           (rule "polySimp_mulComm0" (formula "28") (term "1,0,0"))
                           (rule "polySimp_addComm1" (formula "28") (term "0"))
                           (rule "inEqSimp_ltToLeq" (formula "11") (term "0,0,0,1,0"))
                           (rule "polySimp_mulComm0" (formula "11") (term "1,0,0,0,0,0,1,0"))
                           (rule "inEqSimp_ltToLeq" (formula "12") (term "0,0,0"))
                           (rule "polySimp_mulComm0" (formula "12") (term "1,0,0,0,0,0"))
                           (rule "inEqSimp_ltToLeq" (formula "51") (term "1"))
                           (rule "polySimp_rightDist" (formula "51") (term "1,0,0,1"))
                           (rule "polySimp_mulAssoc" (formula "51") (term "0,1,0,0,1"))
                           (rule "polySimp_mulComm0" (formula "51") (term "0,0,1,0,0,1"))
                           (rule "polySimp_mulLiterals" (formula "51") (term "0,1,0,0,1"))
                           (rule "polySimp_elimOne" (formula "51") (term "0,1,0,0,1"))
                           (rule "polySimp_addAssoc" (formula "51") (term "0,0,1"))
                           (rule "polySimp_addAssoc" (formula "51") (term "0,1"))
                           (rule "polySimp_addComm1" (formula "51") (term "0,0,1"))
                           (rule "inEqSimp_homoInEq0" (formula "51") (term "0"))
                           (rule "mul_literals" (formula "51") (term "1,0,0"))
                           (rule "add_zero_right" (formula "51") (term "0,0"))
                           (rule "inEqSimp_sepPosMonomial1" (formula "37"))
                           (rule "mul_literals" (formula "37") (term "1"))
                           (rule "inEqSimp_sepPosMonomial0" (formula "16") (term "0,0,0,0,0"))
                           (rule "polySimp_mulComm0" (formula "16") (term "1,0,0,0,0,0"))
                           (rule "polySimp_rightDist" (formula "16") (term "1,0,0,0,0,0"))
                           (rule "polySimp_mulLiterals" (formula "16") (term "1,1,0,0,0,0,0"))
                           (rule "mul_literals" (formula "16") (term "0,1,0,0,0,0,0"))
                           (rule "polySimp_elimOne" (formula "16") (term "1,1,0,0,0,0,0"))
                           (rule "inEqSimp_sepPosMonomial0" (formula "15") (term "0,0,0,0,0"))
                           (rule "polySimp_mulComm0" (formula "15") (term "1,0,0,0,0,0"))
                           (rule "polySimp_rightDist" (formula "15") (term "1,0,0,0,0,0"))
                           (rule "polySimp_mulLiterals" (formula "15") (term "1,1,0,0,0,0,0"))
                           (rule "mul_literals" (formula "15") (term "0,1,0,0,0,0,0"))
                           (rule "polySimp_elimOne" (formula "15") (term "1,1,0,0,0,0,0"))
                           (rule "inEqSimp_sepPosMonomial0" (formula "11") (term "0,0,0"))
                           (rule "polySimp_mulComm0" (formula "11") (term "1,0,0,0"))
                           (rule "polySimp_rightDist" (formula "11") (term "1,0,0,0"))
                           (rule "polySimp_mulLiterals" (formula "11") (term "1,1,0,0,0"))
                           (rule "mul_literals" (formula "11") (term "0,1,0,0,0"))
                           (rule "polySimp_elimOne" (formula "11") (term "1,1,0,0,0"))
                           (rule "inEqSimp_sepNegMonomial0" (formula "28"))
                           (rule "polySimp_mulLiterals" (formula "28") (term "0"))
                           (rule "polySimp_elimOne" (formula "28") (term "0"))
                           (rule "inEqSimp_sepPosMonomial0" (formula "11") (term "0,0,0,1,0"))
                           (rule "polySimp_mulComm0" (formula "11") (term "1,0,0,0,1,0"))
                           (rule "polySimp_rightDist" (formula "11") (term "1,0,0,0,1,0"))
                           (rule "mul_literals" (formula "11") (term "0,1,0,0,0,1,0"))
                           (rule "polySimp_mulLiterals" (formula "11") (term "1,1,0,0,0,1,0"))
                           (rule "polySimp_elimOne" (formula "11") (term "1,1,0,0,0,1,0"))
                           (rule "inEqSimp_sepPosMonomial0" (formula "12") (term "0,0,0"))
                           (rule "polySimp_mulComm0" (formula "12") (term "1,0,0,0"))
                           (rule "polySimp_rightDist" (formula "12") (term "1,0,0,0"))
                           (rule "mul_literals" (formula "12") (term "0,1,0,0,0"))
                           (rule "polySimp_mulLiterals" (formula "12") (term "1,1,0,0,0"))
                           (rule "polySimp_elimOne" (formula "12") (term "1,1,0,0,0"))
                           (rule "inEqSimp_sepPosMonomial0" (formula "50") (term "1"))
                           (rule "polySimp_mulComm0" (formula "50") (term "1,1"))
                           (rule "polySimp_rightDist" (formula "50") (term "1,1"))
                           (rule "polySimp_mulLiterals" (formula "50") (term "1,1,1"))
                           (rule "polySimp_elimOne" (formula "50") (term "1,1,1"))
                           (rule "polySimp_rightDist" (formula "50") (term "0,1,1"))
                           (rule "polySimp_mulLiterals" (formula "50") (term "1,0,1,1"))
                           (rule "polySimp_elimOne" (formula "50") (term "1,0,1,1"))
                           (rule "polySimp_rightDist" (formula "50") (term "0,0,1,1"))
                           (rule "mul_literals" (formula "50") (term "0,0,0,1,1"))
                           (rule "inEqSimp_sepPosMonomial1" (formula "50") (term "0"))
                           (rule "polySimp_mulLiterals" (formula "50") (term "1,0"))
                           (rule "polySimp_elimOne" (formula "50") (term "1,0"))
                           (rule "inEqSimp_contradEq7" (formula "41") (ifseqformula "37"))
                           (rule "polySimp_mulComm0" (formula "41") (term "1,0,0"))
                           (rule "polySimp_pullOutFactor1b" (formula "41") (term "0,0"))
                           (rule "add_literals" (formula "41") (term "1,1,0,0"))
                           (rule "times_zero_1" (formula "41") (term "1,0,0"))
                           (rule "add_literals" (formula "41") (term "0,0"))
                           (rule "leq_literals" (formula "41") (term "0"))
                            (builtin "One Step Simplification" (formula "41"))
                           (rule "false_right" (formula "41"))
                           (rule "inEqSimp_subsumption1" (formula "26") (ifseqformula "37"))
                           (rule "inEqSimp_homoInEq0" (formula "26") (term "0"))
                           (rule "polySimp_pullOutFactor1b" (formula "26") (term "0,0"))
                           (rule "add_literals" (formula "26") (term "1,1,0,0"))
                           (rule "times_zero_1" (formula "26") (term "1,0,0"))
                           (rule "add_literals" (formula "26") (term "0,0"))
                           (rule "qeq_literals" (formula "26") (term "0"))
                            (builtin "One Step Simplification" (formula "26"))
                           (rule "true_left" (formula "26"))
                           (rule "inEqSimp_subsumption1" (formula "35") (ifseqformula "25"))
                           (rule "leq_literals" (formula "35") (term "0"))
                            (builtin "One Step Simplification" (formula "35"))
                           (rule "true_left" (formula "35"))
                           (rule "pullOutSelect" (formula "47") (term "0,0,1") (inst "selectSK=java_util_Iterator_seq_2"))
                           (rule "applyEq" (formula "48") (term "0,0,0") (ifseqformula "1"))
                           (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "38"))
                            (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "42")))
                           (rule "replaceKnownSelect_taclet000010_28" (formula "1") (term "2,0"))
                           (rule "replaceKnownAuxiliaryConstant_taclet000010_29" (formula "1") (term "2,0"))
                           (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,1,0,0") (ifseqformula "31"))
                            (builtin "One Step Simplification" (formula "1"))
                           (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,0,0,1,0,0") (ifseqformula "19"))
                           (rule "replace_known_right" (formula "1") (term "0,0,0,0,1,0,0") (ifseqformula "41"))
                            (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "20")))
                           (rule "elementOfSingleton" (formula "1") (term "0,0"))
                            (builtin "One Step Simplification" (formula "1"))
                           (rule "applyEqReverse" (formula "48") (term "0,0,1") (ifseqformula "1"))
                           (rule "applyEqReverse" (formula "48") (term "0,0,0") (ifseqformula "1"))
                           (rule "hideAuxiliaryEq" (formula "1"))
                           (rule "applyEq" (formula "47") (term "0,0,0") (ifseqformula "21"))
                           (rule "applyEq" (formula "47") (term "0,0,1") (ifseqformula "21"))
                           (rule "inEqSimp_homoInEq0" (formula "47") (term "1"))
                           (rule "polySimp_pullOutFactor1b" (formula "47") (term "0,1"))
                           (rule "add_literals" (formula "47") (term "1,1,0,1"))
                           (rule "times_zero_1" (formula "47") (term "1,0,1"))
                           (rule "add_zero_right" (formula "47") (term "0,1"))
                           (rule "inEqSimp_sepPosMonomial1" (formula "47") (term "1"))
                           (rule "polySimp_mulComm0" (formula "47") (term "1,1"))
                           (rule "polySimp_rightDist" (formula "47") (term "1,1"))
                           (rule "polySimp_mulLiterals" (formula "47") (term "1,1,1"))
                           (rule "mul_literals" (formula "47") (term "0,1,1"))
                           (rule "polySimp_elimOne" (formula "47") (term "1,1,1"))
                           (rule "pullOutSelect" (formula "47") (term "1,0") (inst "selectSK=java_util_Iterator_index_3"))
                           (rule "applyEq" (formula "48") (term "0,1") (ifseqformula "1"))
                           (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "38"))
                            (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "42")))
                           (rule "replaceKnownSelect_taclet000010_30" (formula "1") (term "2,0"))
                           (rule "replaceKnownAuxiliaryConstant_taclet000010_31" (formula "1") (term "2,0"))
                           (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,1,0,0") (ifseqformula "31"))
                            (builtin "One Step Simplification" (formula "1"))
                           (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,0,0,1,0,0") (ifseqformula "19"))
                           (rule "replace_known_left" (formula "1") (term "1,0,0,0,1,0,0") (ifseqformula "20"))
                            (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "41")))
                           (rule "elementOfSingleton" (formula "1") (term "0,0"))
                            (builtin "One Step Simplification" (formula "1"))
                           (rule "applyEqReverse" (formula "48") (term "1,0") (ifseqformula "1"))
                           (rule "applyEqReverse" (formula "48") (term "0,1") (ifseqformula "1"))
                           (rule "hideAuxiliaryEq" (formula "1"))
                           (rule "applyEq" (formula "47") (term "1,0") (ifseqformula "34"))
                           (rule "replace_known_left" (formula "47") (term "0") (ifseqformula "35"))
                            (builtin "One Step Simplification" (formula "47"))
                           (rule "inEqSimp_geqRight" (formula "47"))
                           (rule "polySimp_rightDist" (formula "1") (term "1,0,0"))
                           (rule "mul_literals" (formula "1") (term "0,1,0,0"))
                           (rule "polySimp_addAssoc" (formula "1") (term "0,0"))
                           (rule "add_literals" (formula "1") (term "0,0,0"))
                           (rule "add_zero_left" (formula "1") (term "0,0"))
                           (rule "applyEq" (formula "1") (term "1,0") (ifseqformula "35"))
                           (rule "polySimp_addAssoc" (formula "1") (term "0"))
                           (rule "polySimp_addComm0" (formula "1") (term "0,0"))
                           (rule "polySimp_pullOutFactor2b" (formula "1") (term "0"))
                           (rule "add_literals" (formula "1") (term "1,1,0"))
                           (rule "times_zero_1" (formula "1") (term "1,0"))
                           (rule "add_literals" (formula "1") (term "0"))
                           (rule "leq_literals" (formula "1"))
                           (rule "closeFalse" (formula "1"))
                        )
                     )
                     (branch "Exceptional Post (addInputCol)"
                         (builtin "One Step Simplification" (formula "50"))
                         (builtin "One Step Simplification" (formula "40"))
                        (rule "andLeft" (formula "40"))
                        (rule "selectCreatedOfAnonAsFormulaEQ" (formula "41") (term "1,0") (ifseqformula "40"))
                        (rule "selectCreatedOfAnonAsFormulaEQ" (formula "41") (term "0,1,0") (ifseqformula "32"))
                         (builtin "One Step Simplification" (formula "41"))
                        (rule "selectCreatedOfAnonAsFormulaEQ" (formula "41") (term "0,0,0,1,0") (ifseqformula "18"))
                        (rule "andLeft" (formula "41"))
                        (rule "andLeft" (formula "42"))
                        (rule "andLeft" (formula "41"))
                        (rule "andLeft" (formula "43"))
                        (rule "notLeft" (formula "41"))
                        (rule "close" (formula "45") (ifseqformula "44"))
                     )
                     (branch "Pre (addInputCol)"
                         (builtin "One Step Simplification" (formula "48") (ifInst ""  (formula "44")) (ifInst ""  (formula "43")) (ifInst ""  (formula "44")) (ifInst ""  (formula "43")) (proofscript))
                        (rule "andRight" (formula "48") (proofscript))
                        (branch
                           (rule "andRight" (formula "48"))
                           (branch
                              (rule "applyEqReverse" (formula "48") (term "0,1,1,0") (ifseqformula "35") (proofscript))
                              (rule "seqCastRemoveBeta" (formula "48") (term "1,1,0") (proofscript))
                              (rule "allLeftHide" (formula "11") (inst "t=int::select(anon_heap_LOOP<<anonHeapFunction>>,
            result,
            java.util.Iterator::$index)") (proofscript))
                              (rule "impLeft" (formula "11") (proofscript))
                              (branch
                                 (rule "replace_known_left" (formula "38") (term "0") (ifseqformula "27") (proofscript))
                                  (builtin "One Step Simplification" (formula "38") (ifInst ""  (formula "24")))
                                 (rule "closeTrue" (formula "38"))
                              )
                              (branch
                                 (rule "exLeft" (formula "11") (inst "sk=i_0"))
                                 (rule "andLeft" (formula "11"))
                                 (rule "andLeft" (formula "11"))
                                 (rule "eqSymm" (formula "12"))
                                 (rule "castedGetAny" (formula "50") (term "0,1,0"))
                                 (rule "inEqSimp_ltToLeq" (formula "30"))
                                 (rule "polySimp_mulComm0" (formula "30") (term "1,0,0"))
                                 (rule "polySimp_addComm1" (formula "30") (term "0"))
                                 (rule "inEqSimp_ltToLeq" (formula "50") (term "1,0,0"))
                                 (rule "polySimp_mulComm0" (formula "50") (term "1,0,0,1,0,0"))
                                 (rule "inEqSimp_ltToLeq" (formula "17") (term "0,0,0,0,0"))
                                 (rule "polySimp_mulComm0" (formula "17") (term "1,0,0,0,0,0,0,0"))
                                 (rule "inEqSimp_ltToLeq" (formula "18") (term "0,0,0,0,0"))
                                 (rule "polySimp_mulComm0" (formula "18") (term "1,0,0,0,0,0,0,0"))
                                 (rule "inEqSimp_ltToLeq" (formula "14") (term "0,0,0"))
                                 (rule "polySimp_mulComm0" (formula "14") (term "1,0,0,0,0,0"))
                                 (rule "inEqSimp_ltToLeq" (formula "11"))
                                 (rule "polySimp_mulComm0" (formula "11") (term "1,0,0"))
                                 (rule "polySimp_addComm1" (formula "11") (term "0"))
                                 (rule "inEqSimp_commuteLeq" (formula "50") (term "0,0,0"))
                                 (rule "inEqSimp_sepPosMonomial1" (formula "39"))
                                 (rule "mul_literals" (formula "39") (term "1"))
                                 (rule "inEqSimp_sepNegMonomial0" (formula "30"))
                                 (rule "polySimp_mulLiterals" (formula "30") (term "0"))
                                 (rule "polySimp_elimOne" (formula "30") (term "0"))
                                 (rule "inEqSimp_sepPosMonomial0" (formula "49") (term "1,0,0"))
                                 (rule "polySimp_mulComm0" (formula "49") (term "1,1,0,0"))
                                 (rule "polySimp_rightDist" (formula "49") (term "1,1,0,0"))
                                 (rule "polySimp_mulLiterals" (formula "49") (term "1,1,1,0,0"))
                                 (rule "mul_literals" (formula "49") (term "0,1,1,0,0"))
                                 (rule "polySimp_elimOne" (formula "49") (term "1,1,1,0,0"))
                                 (rule "inEqSimp_sepPosMonomial0" (formula "17") (term "0,0,0,0,0"))
                                 (rule "polySimp_mulComm0" (formula "17") (term "1,0,0,0,0,0"))
                                 (rule "polySimp_rightDist" (formula "17") (term "1,0,0,0,0,0"))
                                 (rule "polySimp_mulLiterals" (formula "17") (term "1,1,0,0,0,0,0"))
                                 (rule "mul_literals" (formula "17") (term "0,1,0,0,0,0,0"))
                                 (rule "polySimp_elimOne" (formula "17") (term "1,1,0,0,0,0,0"))
                                 (rule "inEqSimp_sepPosMonomial0" (formula "18") (term "0,0,0,0,0"))
                                 (rule "polySimp_mulComm0" (formula "18") (term "1,0,0,0,0,0"))
                                 (rule "polySimp_rightDist" (formula "18") (term "1,0,0,0,0,0"))
                                 (rule "polySimp_mulLiterals" (formula "18") (term "1,1,0,0,0,0,0"))
                                 (rule "mul_literals" (formula "18") (term "0,1,0,0,0,0,0"))
                                 (rule "polySimp_elimOne" (formula "18") (term "1,1,0,0,0,0,0"))
                                 (rule "inEqSimp_sepPosMonomial0" (formula "14") (term "0,0,0"))
                                 (rule "polySimp_mulComm0" (formula "14") (term "1,0,0,0"))
                                 (rule "polySimp_rightDist" (formula "14") (term "1,0,0,0"))
                                 (rule "polySimp_mulLiterals" (formula "14") (term "1,1,0,0,0"))
                                 (rule "mul_literals" (formula "14") (term "0,1,0,0,0"))
                                 (rule "polySimp_elimOne" (formula "14") (term "1,1,0,0,0"))
                                 (rule "inEqSimp_sepNegMonomial0" (formula "11"))
                                 (rule "polySimp_mulLiterals" (formula "11") (term "0"))
                                 (rule "polySimp_elimOne" (formula "11") (term "0"))
                                 (rule "inEqSimp_contradEq7" (formula "40") (ifseqformula "39"))
                                 (rule "polySimp_mulComm0" (formula "40") (term "1,0,0"))
                                 (rule "polySimp_pullOutFactor1b" (formula "40") (term "0,0"))
                                 (rule "add_literals" (formula "40") (term "1,1,0,0"))
                                 (rule "times_zero_1" (formula "40") (term "1,0,0"))
                                 (rule "add_zero_right" (formula "40") (term "0,0"))
                                 (rule "leq_literals" (formula "40") (term "0"))
                                  (builtin "One Step Simplification" (formula "40"))
                                 (rule "false_right" (formula "40"))
                                 (rule "inEqSimp_subsumption1" (formula "28") (ifseqformula "39"))
                                 (rule "inEqSimp_homoInEq0" (formula "28") (term "0"))
                                 (rule "polySimp_pullOutFactor1b" (formula "28") (term "0,0"))
                                 (rule "add_literals" (formula "28") (term "1,1,0,0"))
                                 (rule "times_zero_1" (formula "28") (term "1,0,0"))
                                 (rule "add_zero_right" (formula "28") (term "0,0"))
                                 (rule "qeq_literals" (formula "28") (term "0"))
                                  (builtin "One Step Simplification" (formula "28"))
                                 (rule "true_left" (formula "28"))
                                 (rule "inEqSimp_subsumption1" (formula "37") (ifseqformula "27"))
                                 (rule "leq_literals" (formula "37") (term "0"))
                                  (builtin "One Step Simplification" (formula "37"))
                                 (rule "true_left" (formula "37"))
                                 (rule "pullOutSelect" (formula "46") (term "0,0,1,0") (inst "selectSK=org_apache_commons_csv_CSVRecord_key_seq_2"))
                                 (rule "applyEq" (formula "47") (term "0,1,1,1,0,0") (ifseqformula "1"))
                                 (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "33"))
                                  (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "42")))
                                 (rule "replaceKnownSelect_taclet10_20" (formula "1") (term "2,0"))
                                 (rule "replaceKnownAuxiliaryConstant_taclet0010_24" (formula "1") (term "2,0"))
                                 (rule "replaceKnownAuxiliaryConstant_taclet0010_25" (formula "1") (term "2,0"))
                                 (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,0,1,0,0") (ifseqformula "21"))
                                 (rule "replace_known_left" (formula "1") (term "0,0,0,1,0,0") (ifseqformula "3"))
                                  (builtin "One Step Simplification" (formula "1"))
                                 (rule "elementOfSingleton" (formula "1") (term "0,0"))
                                  (builtin "One Step Simplification" (formula "1"))
                                 (rule "applyEqReverse" (formula "47") (term "0,0,1,0") (ifseqformula "1"))
                                 (rule "applyEqReverse" (formula "47") (term "0,1,1,1,0,0") (ifseqformula "1"))
                                 (rule "hideAuxiliaryEq" (formula "1"))
                                 (rule "inEqSimp_and_subsumption3" (formula "17") (term "0,0,0"))
                                 (rule "leq_literals" (formula "17") (term "0,1,0,0,0,0"))
                                  (builtin "One Step Simplification" (formula "17"))
                                 (rule "inEqSimp_and_subsumption3" (formula "18") (term "0,0,0"))
                                 (rule "leq_literals" (formula "18") (term "0,1,0,0,0,0"))
                                  (builtin "One Step Simplification" (formula "18"))
                                 (rule "nnf_ex2all" (formula "46"))
                                 (rule "nnf_imp2or" (formula "15") (term "0"))
                                 (rule "nnf_imp2or" (formula "18") (term "0"))
                                 (rule "nnf_imp2or" (formula "19") (term "0"))
                                 (rule "nnf_notAnd" (formula "1") (term "0"))
                                 (rule "nnf_notAnd" (formula "15") (term "0,0"))
                                 (rule "inEqSimp_notLeq" (formula "15") (term "0,0,0"))
                                 (rule "polySimp_rightDist" (formula "15") (term "1,0,0,0,0,0"))
                                 (rule "mul_literals" (formula "15") (term "0,1,0,0,0,0,0"))
                                 (rule "polySimp_addAssoc" (formula "15") (term "0,0,0,0,0"))
                                 (rule "add_literals" (formula "15") (term "0,0,0,0,0,0"))
                                 (rule "add_zero_left" (formula "15") (term "0,0,0,0,0"))
                                 (rule "inEqSimp_sepPosMonomial1" (formula "15") (term "0,0,0"))
                                 (rule "polySimp_mulLiterals" (formula "15") (term "1,0,0,0"))
                                 (rule "polySimp_elimOne" (formula "15") (term "1,0,0,0"))
                                 (rule "inEqSimp_notGeq" (formula "15") (term "1,0,0"))
                                 (rule "times_zero_1" (formula "15") (term "1,0,0,1,0,0"))
                                 (rule "add_literals" (formula "15") (term "0,0,1,0,0"))
                                 (rule "inEqSimp_sepPosMonomial0" (formula "15") (term "1,0,0"))
                                 (rule "mul_literals" (formula "15") (term "1,1,0,0"))
                                 (rule "nnf_notAnd" (formula "18") (term "0,0"))
                                 (rule "inEqSimp_notLeq" (formula "18") (term "1,0,0"))
                                 (rule "mul_literals" (formula "18") (term "1,0,0,1,0,0"))
                                 (rule "add_literals" (formula "18") (term "0,0,1,0,0"))
                                 (rule "inEqSimp_sepPosMonomial1" (formula "18") (term "1,0,0"))
                                 (rule "mul_literals" (formula "18") (term "1,1,0,0"))
                                 (rule "nnf_notAnd" (formula "19") (term "0,0"))
                                 (rule "inEqSimp_notLeq" (formula "19") (term "1,0,0"))
                                 (rule "mul_literals" (formula "19") (term "1,0,0,1,0,0"))
                                 (rule "add_literals" (formula "19") (term "0,0,1,0,0"))
                                 (rule "inEqSimp_sepPosMonomial1" (formula "19") (term "1,0,0"))
                                 (rule "mul_literals" (formula "19") (term "1,1,0,0"))
                                 (rule "nnf_notAnd" (formula "1") (term "0,0"))
                                 (rule "inEqSimp_notLeq" (formula "1") (term "1,0,0"))
                                 (rule "polySimp_rightDist" (formula "1") (term "1,0,0,1,0,0"))
                                 (rule "mul_literals" (formula "1") (term "0,1,0,0,1,0,0"))
                                 (rule "polySimp_addAssoc" (formula "1") (term "0,0,1,0,0"))
                                 (rule "add_literals" (formula "1") (term "0,0,0,1,0,0"))
                                 (rule "add_zero_left" (formula "1") (term "0,0,1,0,0"))
                                 (rule "inEqSimp_sepPosMonomial1" (formula "1") (term "1,0,0"))
                                 (rule "polySimp_mulLiterals" (formula "1") (term "1,1,0,0"))
                                 (rule "polySimp_elimOne" (formula "1") (term "1,1,0,0"))
                                 (rule "inEqSimp_notGeq" (formula "1") (term "0,0,0"))
                                 (rule "mul_literals" (formula "1") (term "1,0,0,0,0,0"))
                                 (rule "add_literals" (formula "1") (term "0,0,0,0,0"))
                                 (rule "inEqSimp_sepPosMonomial0" (formula "1") (term "0,0,0"))
                                 (rule "mul_literals" (formula "1") (term "1,0,0,0"))
                                 (rule "nnf_notAnd" (formula "18") (term "0,0,0"))
                                 (rule "inEqSimp_notGeq" (formula "18") (term "1,0,0,0"))
                                 (rule "mul_literals" (formula "18") (term "1,0,0,1,0,0,0"))
                                 (rule "add_literals" (formula "18") (term "0,0,1,0,0,0"))
                                 (rule "inEqSimp_sepPosMonomial0" (formula "18") (term "1,0,0,0"))
                                 (rule "mul_literals" (formula "18") (term "1,1,0,0,0"))
                                 (rule "inEqSimp_notLeq" (formula "18") (term "0,0,0,0"))
                                 (rule "polySimp_rightDist" (formula "18") (term "1,0,0,0,0,0,0"))
                                 (rule "mul_literals" (formula "18") (term "0,1,0,0,0,0,0,0"))
                                 (rule "polySimp_addAssoc" (formula "18") (term "0,0,0,0,0,0"))
                                 (rule "add_literals" (formula "18") (term "0,0,0,0,0,0,0"))
                                 (rule "add_zero_left" (formula "18") (term "0,0,0,0,0,0"))
                                 (rule "inEqSimp_sepPosMonomial1" (formula "18") (term "0,0,0,0"))
                                 (rule "polySimp_mulLiterals" (formula "18") (term "1,0,0,0,0"))
                                 (rule "polySimp_elimOne" (formula "18") (term "1,0,0,0,0"))
                                 (rule "nnf_notAnd" (formula "19") (term "0,0,0"))
                                 (rule "inEqSimp_notGeq" (formula "19") (term "1,0,0,0"))
                                 (rule "mul_literals" (formula "19") (term "1,0,0,1,0,0,0"))
                                 (rule "add_literals" (formula "19") (term "0,0,1,0,0,0"))
                                 (rule "inEqSimp_sepPosMonomial0" (formula "19") (term "1,0,0,0"))
                                 (rule "mul_literals" (formula "19") (term "1,1,0,0,0"))
                                 (rule "inEqSimp_notLeq" (formula "19") (term "0,0,0,0"))
                                 (rule "polySimp_rightDist" (formula "19") (term "1,0,0,0,0,0,0"))
                                 (rule "mul_literals" (formula "19") (term "0,1,0,0,0,0,0,0"))
                                 (rule "polySimp_addAssoc" (formula "19") (term "0,0,0,0,0,0"))
                                 (rule "add_literals" (formula "19") (term "0,0,0,0,0,0,0"))
                                 (rule "add_zero_left" (formula "19") (term "0,0,0,0,0,0"))
                                 (rule "inEqSimp_sepPosMonomial1" (formula "19") (term "0,0,0,0"))
                                 (rule "polySimp_mulLiterals" (formula "19") (term "1,0,0,0,0"))
                                 (rule "polySimp_elimOne" (formula "19") (term "1,0,0,0,0"))
                                 (rule "commute_or_2" (formula "15") (term "0"))
                                 (rule "commute_or_2" (formula "1") (term "0"))
                                 (rule "commute_or_2" (formula "18") (term "0"))
                                 (rule "commute_or_2" (formula "19") (term "0"))
                                 (rule "commute_or" (formula "15") (term "0,0"))
                                 (rule "commute_or_2" (formula "15") (term "0"))
                                 (rule "commute_or" (formula "1") (term "0,0"))
                                 (rule "commute_or_2" (formula "18") (term "0,0"))
                                 (rule "commute_or_2" (formula "19") (term "0,0"))
                                 (rule "commute_or" (formula "18") (term "0,0,0"))
                                 (rule "commute_or_2" (formula "18") (term "0,0"))
                                 (rule "commute_or_2" (formula "18") (term "0"))
                                 (rule "commute_or" (formula "19") (term "0,0,0"))
                                 (rule "commute_or_2" (formula "19") (term "0,0"))
                                 (rule "commute_or_2" (formula "19") (term "0"))
                                 (rule "cut_direct" (formula "35") (term "0,0,0"))
                                 (branch "CUT: result_2.<created> = TRUE TRUE"
                                     (builtin "One Step Simplification" (formula "36"))
                                    (rule "true_left" (formula "36"))
                                    (rule "seqGetAlphaCast" (formula "36") (term "0"))
                                    (rule "castedGetAny" (formula "36") (term "0"))
                                     (builtin "One Step Simplification" (formula "36"))
                                    (rule "true_left" (formula "36"))
                                    (rule "seqGetAlphaCast" (formula "13") (term "0"))
                                    (rule "castedGetAny" (formula "13") (term "0"))
                                     (builtin "One Step Simplification" (formula "13"))
                                    (rule "true_left" (formula "13"))
                                    (rule "seqGetAlphaCast" (formula "13") (term "1"))
                                    (rule "castedGetAny" (formula "13") (term "0"))
                                     (builtin "One Step Simplification" (formula "13"))
                                    (rule "true_left" (formula "13"))
                                    (rule "allLeft" (formula "1") (inst "t=i_0"))
                                    (rule "replace_known_left" (formula "1") (term "0,0,0") (ifseqformula "14"))
                                     (builtin "One Step Simplification" (formula "1"))
                                    (rule "inEqSimp_commuteGeq" (formula "1") (term "1"))
                                    (rule "inEqSimp_contradInEq1" (formula "1") (term "0") (ifseqformula "15"))
                                    (rule "qeq_literals" (formula "1") (term "0,0"))
                                     (builtin "One Step Simplification" (formula "1"))
                                    (rule "inEqSimp_contradInEq1" (formula "1") (ifseqformula "13"))
                                    (rule "andLeft" (formula "1"))
                                    (rule "inEqSimp_homoInEq1" (formula "1"))
                                    (rule "polySimp_pullOutFactor1b" (formula "1") (term "0"))
                                    (rule "add_literals" (formula "1") (term "1,1,0"))
                                    (rule "times_zero_1" (formula "1") (term "1,0"))
                                    (rule "add_literals" (formula "1") (term "0"))
                                    (rule "leq_literals" (formula "1"))
                                    (rule "closeFalse" (formula "1"))
                                 )
                                 (branch "CUT: result_2.<created> = TRUE FALSE"
                                     (builtin "One Step Simplification" (formula "35"))
                                    (rule "seqGetAlphaCast" (formula "36") (term "0"))
                                    (rule "castedGetAny" (formula "36") (term "0"))
                                     (builtin "One Step Simplification" (formula "36"))
                                    (rule "true_left" (formula "36"))
                                    (rule "seqGetAlphaCast" (formula "13") (term "0"))
                                    (rule "castedGetAny" (formula "13") (term "0"))
                                     (builtin "One Step Simplification" (formula "13"))
                                    (rule "true_left" (formula "13"))
                                    (rule "seqGetAlphaCast" (formula "13") (term "1"))
                                    (rule "castedGetAny" (formula "13") (term "0"))
                                     (builtin "One Step Simplification" (formula "13"))
                                    (rule "true_left" (formula "13"))
                                    (rule "allLeft" (formula "1") (inst "t=i_0"))
                                    (rule "replace_known_left" (formula "1") (term "0,0,0") (ifseqformula "14"))
                                     (builtin "One Step Simplification" (formula "1"))
                                    (rule "inEqSimp_commuteGeq" (formula "1") (term "1"))
                                    (rule "inEqSimp_contradInEq1" (formula "1") (term "0") (ifseqformula "15"))
                                    (rule "qeq_literals" (formula "1") (term "0,0"))
                                     (builtin "One Step Simplification" (formula "1"))
                                    (rule "inEqSimp_contradInEq0" (formula "13") (ifseqformula "1"))
                                    (rule "andLeft" (formula "13"))
                                    (rule "inEqSimp_homoInEq1" (formula "13"))
                                    (rule "polySimp_pullOutFactor1b" (formula "13") (term "0"))
                                    (rule "add_literals" (formula "13") (term "1,1,0"))
                                    (rule "times_zero_1" (formula "13") (term "1,0"))
                                    (rule "add_literals" (formula "13") (term "0"))
                                    (rule "leq_literals" (formula "13"))
                                    (rule "closeFalse" (formula "13"))
                                 )
                              )
                           )
                           (branch
                              (rule "andRight" (formula "48"))
                              (branch
                                 (rule "inEqSimp_ltToLeq" (formula "16") (term "0,0,0,0,0"))
                                 (rule "polySimp_mulComm0" (formula "16") (term "1,0,0,0,0,0,0,0"))
                                 (rule "inEqSimp_ltToLeq" (formula "11") (term "0,0,0"))
                                 (rule "polySimp_mulComm0" (formula "11") (term "1,0,0,0,0,0"))
                                 (rule "inEqSimp_ltToLeq" (formula "12") (term "0,0,0"))
                                 (rule "polySimp_mulComm0" (formula "12") (term "1,0,0,0,0,0"))
                                 (rule "inEqSimp_ltToLeq" (formula "28"))
                                 (rule "polySimp_mulComm0" (formula "28") (term "1,0,0"))
                                 (rule "polySimp_addComm1" (formula "28") (term "0"))
                                 (rule "inEqSimp_ltToLeq" (formula "11") (term "0,0,0,1,0"))
                                 (rule "polySimp_mulComm0" (formula "11") (term "1,0,0,0,0,0,1,0"))
                                 (rule "inEqSimp_ltToLeq" (formula "15") (term "0,0,0,0,0"))
                                 (rule "polySimp_mulComm0" (formula "15") (term "1,0,0,0,0,0,0,0"))
                                 (rule "inEqSimp_sepPosMonomial1" (formula "37"))
                                 (rule "mul_literals" (formula "37") (term "1"))
                                 (rule "inEqSimp_sepPosMonomial0" (formula "16") (term "0,0,0,0,0"))
                                 (rule "polySimp_mulComm0" (formula "16") (term "1,0,0,0,0,0"))
                                 (rule "polySimp_rightDist" (formula "16") (term "1,0,0,0,0,0"))
                                 (rule "mul_literals" (formula "16") (term "0,1,0,0,0,0,0"))
                                 (rule "polySimp_mulLiterals" (formula "16") (term "1,1,0,0,0,0,0"))
                                 (rule "polySimp_elimOne" (formula "16") (term "1,1,0,0,0,0,0"))
                                 (rule "inEqSimp_sepPosMonomial0" (formula "11") (term "0,0,0"))
                                 (rule "polySimp_mulComm0" (formula "11") (term "1,0,0,0"))
                                 (rule "polySimp_rightDist" (formula "11") (term "1,0,0,0"))
                                 (rule "mul_literals" (formula "11") (term "0,1,0,0,0"))
                                 (rule "polySimp_mulLiterals" (formula "11") (term "1,1,0,0,0"))
                                 (rule "polySimp_elimOne" (formula "11") (term "1,1,0,0,0"))
                                 (rule "inEqSimp_sepPosMonomial0" (formula "12") (term "0,0,0"))
                                 (rule "polySimp_mulComm0" (formula "12") (term "1,0,0,0"))
                                 (rule "polySimp_rightDist" (formula "12") (term "1,0,0,0"))
                                 (rule "polySimp_mulLiterals" (formula "12") (term "1,1,0,0,0"))
                                 (rule "mul_literals" (formula "12") (term "0,1,0,0,0"))
                                 (rule "polySimp_elimOne" (formula "12") (term "1,1,0,0,0"))
                                 (rule "inEqSimp_sepNegMonomial0" (formula "28"))
                                 (rule "polySimp_mulLiterals" (formula "28") (term "0"))
                                 (rule "polySimp_elimOne" (formula "28") (term "0"))
                                 (rule "inEqSimp_sepPosMonomial0" (formula "11") (term "0,0,0,1,0"))
                                 (rule "polySimp_mulComm0" (formula "11") (term "1,0,0,0,1,0"))
                                 (rule "polySimp_rightDist" (formula "11") (term "1,0,0,0,1,0"))
                                 (rule "polySimp_mulLiterals" (formula "11") (term "1,1,0,0,0,1,0"))
                                 (rule "mul_literals" (formula "11") (term "0,1,0,0,0,1,0"))
                                 (rule "polySimp_elimOne" (formula "11") (term "1,1,0,0,0,1,0"))
                                 (rule "inEqSimp_sepPosMonomial0" (formula "15") (term "0,0,0,0,0"))
                                 (rule "polySimp_mulComm0" (formula "15") (term "1,0,0,0,0,0"))
                                 (rule "polySimp_rightDist" (formula "15") (term "1,0,0,0,0,0"))
                                 (rule "polySimp_mulLiterals" (formula "15") (term "1,1,0,0,0,0,0"))
                                 (rule "mul_literals" (formula "15") (term "0,1,0,0,0,0,0"))
                                 (rule "polySimp_elimOne" (formula "15") (term "1,1,0,0,0,0,0"))
                                 (rule "inEqSimp_contradEq7" (formula "38") (ifseqformula "37"))
                                 (rule "polySimp_mulComm0" (formula "38") (term "1,0,0"))
                                 (rule "polySimp_pullOutFactor1b" (formula "38") (term "0,0"))
                                 (rule "add_literals" (formula "38") (term "1,1,0,0"))
                                 (rule "times_zero_1" (formula "38") (term "1,0,0"))
                                 (rule "add_zero_right" (formula "38") (term "0,0"))
                                 (rule "leq_literals" (formula "38") (term "0"))
                                  (builtin "One Step Simplification" (formula "38"))
                                 (rule "false_right" (formula "38"))
                                 (rule "inEqSimp_subsumption1" (formula "26") (ifseqformula "37"))
                                 (rule "inEqSimp_homoInEq0" (formula "26") (term "0"))
                                 (rule "polySimp_pullOutFactor1b" (formula "26") (term "0,0"))
                                 (rule "add_literals" (formula "26") (term "1,1,0,0"))
                                 (rule "times_zero_1" (formula "26") (term "1,0,0"))
                                 (rule "add_zero_right" (formula "26") (term "0,0"))
                                 (rule "qeq_literals" (formula "26") (term "0"))
                                  (builtin "One Step Simplification" (formula "26"))
                                 (rule "true_left" (formula "26"))
                                 (rule "inEqSimp_subsumption1" (formula "35") (ifseqformula "25"))
                                 (rule "leq_literals" (formula "35") (term "0"))
                                  (builtin "One Step Simplification" (formula "35"))
                                 (rule "true_left" (formula "35"))
                                 (rule "inEqSimp_and_subsumption3" (formula "16") (term "0,0,0"))
                                 (rule "leq_literals" (formula "16") (term "0,1,0,0,0,0"))
                                  (builtin "One Step Simplification" (formula "16"))
                                 (rule "inEqSimp_and_subsumption3" (formula "15") (term "0,0,0"))
                                 (rule "leq_literals" (formula "15") (term "0,1,0,0,0,0"))
                                  (builtin "One Step Simplification" (formula "15"))
                                 (rule "nnf_imp2or" (formula "12") (term "0"))
                                 (rule "nnf_imp2or" (formula "11") (term "0"))
                                 (rule "nnf_imp2or" (formula "16") (term "0"))
                                 (rule "nnf_imp2or" (formula "15") (term "0"))
                                 (rule "nnf_notAnd" (formula "12") (term "0,0"))
                                 (rule "inEqSimp_notGeq" (formula "12") (term "1,0,0"))
                                 (rule "mul_literals" (formula "12") (term "1,0,0,1,0,0"))
                                 (rule "add_literals" (formula "12") (term "0,0,1,0,0"))
                                 (rule "inEqSimp_sepPosMonomial0" (formula "12") (term "1,0,0"))
                                 (rule "mul_literals" (formula "12") (term "1,1,0,0"))
                                 (rule "inEqSimp_notLeq" (formula "12") (term "0,0,0"))
                                 (rule "polySimp_rightDist" (formula "12") (term "1,0,0,0,0,0"))
                                 (rule "mul_literals" (formula "12") (term "0,1,0,0,0,0,0"))
                                 (rule "polySimp_addAssoc" (formula "12") (term "0,0,0,0,0"))
                                 (rule "add_literals" (formula "12") (term "0,0,0,0,0,0"))
                                 (rule "add_zero_left" (formula "12") (term "0,0,0,0,0"))
                                 (rule "inEqSimp_sepPosMonomial1" (formula "12") (term "0,0,0"))
                                 (rule "polySimp_mulLiterals" (formula "12") (term "1,0,0,0"))
                                 (rule "polySimp_elimOne" (formula "12") (term "1,0,0,0"))
                                 (rule "nnf_notAnd" (formula "11") (term "0,0"))
                                 (rule "inEqSimp_notGeq" (formula "11") (term "1,0,0"))
                                 (rule "times_zero_1" (formula "11") (term "1,0,0,1,0,0"))
                                 (rule "add_literals" (formula "11") (term "0,0,1,0,0"))
                                 (rule "inEqSimp_sepPosMonomial0" (formula "11") (term "1,0,0"))
                                 (rule "mul_literals" (formula "11") (term "1,1,0,0"))
                                 (rule "inEqSimp_notLeq" (formula "11") (term "0,0,0"))
                                 (rule "polySimp_rightDist" (formula "11") (term "1,0,0,0,0,0"))
                                 (rule "mul_literals" (formula "11") (term "0,1,0,0,0,0,0"))
                                 (rule "polySimp_addAssoc" (formula "11") (term "0,0,0,0,0"))
                                 (rule "add_literals" (formula "11") (term "0,0,0,0,0,0"))
                                 (rule "add_zero_left" (formula "11") (term "0,0,0,0,0"))
                                 (rule "inEqSimp_sepPosMonomial1" (formula "11") (term "0,0,0"))
                                 (rule "polySimp_mulLiterals" (formula "11") (term "1,0,0,0"))
                                 (rule "polySimp_elimOne" (formula "11") (term "1,0,0,0"))
                                 (rule "nnf_notAnd" (formula "16") (term "0,0"))
                                 (rule "inEqSimp_notLeq" (formula "16") (term "1,0,0"))
                                 (rule "mul_literals" (formula "16") (term "1,0,0,1,0,0"))
                                 (rule "add_literals" (formula "16") (term "0,0,1,0,0"))
                                 (rule "inEqSimp_sepPosMonomial1" (formula "16") (term "1,0,0"))
                                 (rule "mul_literals" (formula "16") (term "1,1,0,0"))
                                 (rule "nnf_notAnd" (formula "15") (term "0,0"))
                                 (rule "inEqSimp_notLeq" (formula "15") (term "1,0,0"))
                                 (rule "mul_literals" (formula "15") (term "1,0,0,1,0,0"))
                                 (rule "add_literals" (formula "15") (term "0,0,1,0,0"))
                                 (rule "inEqSimp_sepPosMonomial1" (formula "15") (term "1,0,0"))
                                 (rule "mul_literals" (formula "15") (term "1,1,0,0"))
                                 (rule "nnf_notAnd" (formula "16") (term "0,0,0"))
                                 (rule "inEqSimp_notGeq" (formula "16") (term "1,0,0,0"))
                                 (rule "mul_literals" (formula "16") (term "1,0,0,1,0,0,0"))
                                 (rule "add_literals" (formula "16") (term "0,0,1,0,0,0"))
                                 (rule "inEqSimp_sepPosMonomial0" (formula "16") (term "1,0,0,0"))
                                 (rule "mul_literals" (formula "16") (term "1,1,0,0,0"))
                                 (rule "inEqSimp_notLeq" (formula "16") (term "0,0,0,0"))
                                 (rule "polySimp_rightDist" (formula "16") (term "1,0,0,0,0,0,0"))
                                 (rule "mul_literals" (formula "16") (term "0,1,0,0,0,0,0,0"))
                                 (rule "polySimp_addAssoc" (formula "16") (term "0,0,0,0,0,0"))
                                 (rule "add_literals" (formula "16") (term "0,0,0,0,0,0,0"))
                                 (rule "add_zero_left" (formula "16") (term "0,0,0,0,0,0"))
                                 (rule "inEqSimp_sepPosMonomial1" (formula "16") (term "0,0,0,0"))
                                 (rule "polySimp_mulLiterals" (formula "16") (term "1,0,0,0,0"))
                                 (rule "polySimp_elimOne" (formula "16") (term "1,0,0,0,0"))
                                 (rule "nnf_notAnd" (formula "15") (term "0,0,0"))
                                 (rule "inEqSimp_notGeq" (formula "15") (term "1,0,0,0"))
                                 (rule "mul_literals" (formula "15") (term "1,0,0,1,0,0,0"))
                                 (rule "add_literals" (formula "15") (term "0,0,1,0,0,0"))
                                 (rule "inEqSimp_sepPosMonomial0" (formula "15") (term "1,0,0,0"))
                                 (rule "mul_literals" (formula "15") (term "1,1,0,0,0"))
                                 (rule "inEqSimp_notLeq" (formula "15") (term "0,0,0,0"))
                                 (rule "polySimp_rightDist" (formula "15") (term "1,0,0,0,0,0,0"))
                                 (rule "mul_literals" (formula "15") (term "0,1,0,0,0,0,0,0"))
                                 (rule "polySimp_addAssoc" (formula "15") (term "0,0,0,0,0,0"))
                                 (rule "add_literals" (formula "15") (term "0,0,0,0,0,0,0"))
                                 (rule "add_zero_left" (formula "15") (term "0,0,0,0,0,0"))
                                 (rule "inEqSimp_sepPosMonomial1" (formula "15") (term "0,0,0,0"))
                                 (rule "polySimp_mulLiterals" (formula "15") (term "1,0,0,0,0"))
                                 (rule "polySimp_elimOne" (formula "15") (term "1,0,0,0,0"))
                                 (rule "Class_invariant_axiom_for_org_apache_commons_csv_CSVRecord" (formula "44") (inst "i=i") (inst "i_0=i_0"))
                                 (rule "expand_inInt" (formula "44") (term "1,0,0,1"))
                                 (rule "expand_inInt" (formula "44") (term "1,0,0,1,0"))
                                 (rule "replace_int_MAX" (formula "44") (term "1,0,1,0,0,1"))
                                 (rule "replace_int_MIN" (formula "44") (term "0,1,1,0,0,1"))
                                 (rule "replace_int_MIN" (formula "44") (term "0,1,1,0,0,1,0"))
                                 (rule "replace_int_MAX" (formula "44") (term "1,0,1,0,0,1,0"))
                                 (rule "eqSymm" (formula "44") (term "0,0"))
                                 (rule "castedGetAny" (formula "44") (term "0,0,1,0,1"))
                                 (rule "castedGetAny" (formula "44") (term "0,0,1,0,1,0"))
                                 (rule "inEqSimp_ltToLeq" (formula "44") (term "1,0,0,0,1,0"))
                                 (rule "polySimp_mulComm0" (formula "44") (term "1,0,0,1,0,0,0,1,0"))
                                 (rule "inEqSimp_ltToLeq" (formula "44") (term "1,0,0,0,1"))
                                 (rule "polySimp_mulComm0" (formula "44") (term "1,0,0,1,0,0,0,1"))
                                 (rule "inEqSimp_commuteLeq" (formula "44") (term "0,0,0,0,1"))
                                 (rule "inEqSimp_commuteLeq" (formula "44") (term "0,0,0,0,1,0"))
                                 (rule "inEqSimp_commuteLeq" (formula "44") (term "1,1,0,0,1"))
                                 (rule "inEqSimp_commuteLeq" (formula "44") (term "1,1,0,0,1,0"))
                                 (rule "inEqSimp_sepPosMonomial0" (formula "44") (term "1,0,0,0,1,0"))
                                 (rule "polySimp_mulComm0" (formula "44") (term "1,1,0,0,0,1,0"))
                                 (rule "polySimp_rightDist" (formula "44") (term "1,1,0,0,0,1,0"))
                                 (rule "mul_literals" (formula "44") (term "0,1,1,0,0,0,1,0"))
                                 (rule "polySimp_mulLiterals" (formula "44") (term "1,1,1,0,0,0,1,0"))
                                 (rule "polySimp_elimOne" (formula "44") (term "1,1,1,0,0,0,1,0"))
                                 (rule "inEqSimp_sepPosMonomial0" (formula "44") (term "1,0,0,0,1"))
                                 (rule "polySimp_mulComm0" (formula "44") (term "1,1,0,0,0,1"))
                                 (rule "polySimp_rightDist" (formula "44") (term "1,1,0,0,0,1"))
                                 (rule "polySimp_mulLiterals" (formula "44") (term "1,1,1,0,0,0,1"))
                                 (rule "mul_literals" (formula "44") (term "0,1,1,0,0,0,1"))
                                 (rule "polySimp_elimOne" (formula "44") (term "1,1,1,0,0,0,1"))
                                 (rule "pullOutSelect" (formula "44") (term "0,0,0,0") (inst "selectSK=org_apache_commons_csv_CSVRecord_value_seq_2"))
                                 (rule "applyEq" (formula "45") (term "0,0,0,1,0,1") (ifseqformula "1"))
                                 (rule "applyEq" (formula "45") (term "0,1,1,1,0,0,0,1") (ifseqformula "1"))
                                 (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "31"))
                                  (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "40")))
                                 (rule "replaceKnownSelect_taclet10_22" (formula "1") (term "2,0"))
                                 (rule "replaceKnownAuxiliaryConstant_taclet0010_26" (formula "1") (term "2,0"))
                                 (rule "replaceKnownAuxiliaryConstant_taclet0010_27" (formula "1") (term "2,0"))
                                 (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,0,1,0,0") (ifseqformula "19"))
                                 (rule "eqSymm" (formula "45") (term "0,0"))
                                 (rule "replace_known_left" (formula "1") (term "0,0,0,1,0,0") (ifseqformula "3"))
                                  (builtin "One Step Simplification" (formula "1"))
                                 (rule "elementOfSingleton" (formula "1") (term "0,0"))
                                  (builtin "One Step Simplification" (formula "1"))
                                 (rule "applyEqReverse" (formula "45") (term "0,1,0,0") (ifseqformula "1"))
                                 (rule "applyEqReverse" (formula "45") (term "0,0,0,1,0,1") (ifseqformula "1"))
                                 (rule "applyEqReverse" (formula "45") (term "0,1,1,1,0,0,0,1") (ifseqformula "1"))
                                 (rule "hideAuxiliaryEq" (formula "1"))
                                 (rule "applyEq" (formula "44") (term "1,1,1,0,0,0,1") (ifseqformula "14"))
                                 (rule "applyEq" (formula "44") (term "1,0,0") (ifseqformula "14"))
                                 (rule "pullOutSelect" (formula "44") (term "0,0,0,1,0,1,0") (inst "selectSK=org_apache_commons_csv_CSVRecord_key_seq_2"))
                                 (rule "applyEq" (formula "45") (term "0,1,1,1,0,0,0,1,0") (ifseqformula "1"))
                                 (rule "applyEq" (formula "45") (term "0,0,0,0") (ifseqformula "1"))
                                 (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "31"))
                                  (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "40")))
                                 (rule "replaceKnownSelect_taclet10_20" (formula "1") (term "2,0"))
                                 (rule "replaceKnownAuxiliaryConstant_taclet0010_24" (formula "1") (term "2,0"))
                                 (rule "replaceKnownAuxiliaryConstant_taclet0010_25" (formula "1") (term "2,0"))
                                 (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,0,1,0,0") (ifseqformula "19"))
                                 (rule "eqSymm" (formula "45") (term "0,0"))
                                 (rule "replace_known_left" (formula "1") (term "0,0,0,1,0,0") (ifseqformula "3"))
                                  (builtin "One Step Simplification" (formula "1"))
                                 (rule "elementOfSingleton" (formula "1") (term "0,0"))
                                  (builtin "One Step Simplification" (formula "1"))
                                 (rule "applyEqReverse" (formula "45") (term "0,1,1,1,0,0,0,1,0") (ifseqformula "1"))
                                 (rule "applyEqReverse" (formula "45") (term "0,0,0,1,0,1,0") (ifseqformula "1"))
                                 (rule "applyEqReverse" (formula "45") (term "0,1,0,0") (ifseqformula "1"))
                                  (builtin "One Step Simplification" (formula "45"))
                                 (rule "hideAuxiliaryEq" (formula "1"))
                                 (rule "nnf_imp2or" (formula "44") (term "0,0"))
                                 (rule "nnf_imp2or" (formula "44") (term "0,1"))
                                 (rule "nnf_notAnd" (formula "44") (term "0,0,0"))
                                 (rule "nnf_notAnd" (formula "44") (term "0,0,1"))
                                 (rule "nnf_notAnd" (formula "44") (term "0,0,0,0"))
                                 (rule "inEqSimp_notLeq" (formula "44") (term "1,0,0,0,0"))
                                 (rule "polySimp_rightDist" (formula "44") (term "1,0,0,1,0,0,0,0"))
                                 (rule "mul_literals" (formula "44") (term "0,1,0,0,1,0,0,0,0"))
                                 (rule "polySimp_addAssoc" (formula "44") (term "0,0,1,0,0,0,0"))
                                 (rule "add_literals" (formula "44") (term "0,0,0,1,0,0,0,0"))
                                 (rule "add_zero_left" (formula "44") (term "0,0,1,0,0,0,0"))
                                 (rule "inEqSimp_sepPosMonomial1" (formula "44") (term "1,0,0,0,0"))
                                 (rule "polySimp_mulLiterals" (formula "44") (term "1,1,0,0,0,0"))
                                 (rule "polySimp_elimOne" (formula "44") (term "1,1,0,0,0,0"))
                                 (rule "inEqSimp_notGeq" (formula "44") (term "0,0,0,0,0"))
                                 (rule "times_zero_1" (formula "44") (term "1,0,0,0,0,0,0,0"))
                                 (rule "add_literals" (formula "44") (term "0,0,0,0,0,0,0"))
                                 (rule "inEqSimp_sepPosMonomial0" (formula "44") (term "0,0,0,0,0"))
                                 (rule "mul_literals" (formula "44") (term "1,0,0,0,0,0"))
                                 (rule "nnf_notAnd" (formula "44") (term "1,0,0,0"))
                                 (rule "inEqSimp_notLeq" (formula "44") (term "0,1,0,0,0"))
                                 (rule "mul_literals" (formula "44") (term "1,0,0,0,1,0,0,0"))
                                 (rule "add_literals" (formula "44") (term "0,0,0,1,0,0,0"))
                                 (rule "inEqSimp_sepPosMonomial1" (formula "44") (term "0,1,0,0,0"))
                                 (rule "mul_literals" (formula "44") (term "1,0,1,0,0,0"))
                                 (rule "inEqSimp_notGeq" (formula "44") (term "1,1,0,0,0"))
                                 (rule "mul_literals" (formula "44") (term "1,0,0,1,1,0,0,0"))
                                 (rule "add_literals" (formula "44") (term "0,0,1,1,0,0,0"))
                                 (rule "inEqSimp_sepPosMonomial0" (formula "44") (term "1,1,0,0,0"))
                                 (rule "mul_literals" (formula "44") (term "1,1,1,0,0,0"))
                                 (rule "nnf_notAnd" (formula "44") (term "1,0,0,1"))
                                 (rule "inEqSimp_notLeq" (formula "44") (term "0,1,0,0,1"))
                                 (rule "mul_literals" (formula "44") (term "1,0,0,0,1,0,0,1"))
                                 (rule "add_literals" (formula "44") (term "0,0,0,1,0,0,1"))
                                 (rule "inEqSimp_sepPosMonomial1" (formula "44") (term "0,1,0,0,1"))
                                 (rule "mul_literals" (formula "44") (term "1,0,1,0,0,1"))
                                 (rule "inEqSimp_notGeq" (formula "44") (term "1,1,0,0,1"))
                                 (rule "mul_literals" (formula "44") (term "1,0,0,1,1,0,0,1"))
                                 (rule "add_literals" (formula "44") (term "0,0,1,1,0,0,1"))
                                 (rule "inEqSimp_sepPosMonomial0" (formula "44") (term "1,1,0,0,1"))
                                 (rule "mul_literals" (formula "44") (term "1,1,1,0,0,1"))
                                 (rule "nnf_notAnd" (formula "44") (term "0,0,0,1"))
                                 (rule "inEqSimp_notLeq" (formula "44") (term "1,0,0,0,1"))
                                 (rule "polySimp_rightDist" (formula "44") (term "1,0,0,1,0,0,0,1"))
                                 (rule "mul_literals" (formula "44") (term "0,1,0,0,1,0,0,0,1"))
                                 (rule "polySimp_addAssoc" (formula "44") (term "0,0,1,0,0,0,1"))
                                 (rule "add_literals" (formula "44") (term "0,0,0,1,0,0,0,1"))
                                 (rule "add_zero_left" (formula "44") (term "0,0,1,0,0,0,1"))
                                 (rule "inEqSimp_sepPosMonomial1" (formula "44") (term "1,0,0,0,1"))
                                 (rule "polySimp_mulLiterals" (formula "44") (term "1,1,0,0,0,1"))
                                 (rule "polySimp_elimOne" (formula "44") (term "1,1,0,0,0,1"))
                                 (rule "inEqSimp_notGeq" (formula "44") (term "0,0,0,0,1"))
                                 (rule "times_zero_1" (formula "44") (term "1,0,0,0,0,0,0,1"))
                                 (rule "add_literals" (formula "44") (term "0,0,0,0,0,0,1"))
                                 (rule "inEqSimp_sepPosMonomial0" (formula "44") (term "0,0,0,0,1"))
                                 (rule "mul_literals" (formula "44") (term "1,0,0,0,0,1"))
                                 (rule "commute_or_2" (formula "12") (term "0"))
                                 (rule "commute_or" (formula "11") (term "0,0"))
                                 (rule "commute_or_2" (formula "16") (term "0"))
                                 (rule "commute_or_2" (formula "15") (term "0"))
                                 (rule "commute_and" (formula "11") (term "0,0,1,0"))
                                 (rule "commute_or" (formula "12") (term "0,0"))
                                 (rule "commute_or_2" (formula "12") (term "0"))
                                 (rule "commute_or_2" (formula "16") (term "0,0"))
                                 (rule "commute_or_2" (formula "15") (term "0,0"))
                                 (rule "commute_or" (formula "16") (term "0,0,0"))
                                 (rule "commute_or_2" (formula "16") (term "0,0"))
                                 (rule "commute_or_2" (formula "16") (term "0"))
                                 (rule "commute_or" (formula "15") (term "0,0,0"))
                                 (rule "commute_or_2" (formula "15") (term "0,0"))
                                 (rule "commute_or_2" (formula "15") (term "0"))
                                 (rule "seqGetAlphaCast" (formula "33") (term "0"))
                                 (rule "castedGetAny" (formula "33") (term "0"))
                                  (builtin "One Step Simplification" (formula "33"))
                                 (rule "true_left" (formula "33"))
                                 (rule "cut_direct" (formula "32") (term "0,0,0"))
                                 (branch "CUT: result_2.<created> = TRUE TRUE"
                                     (builtin "One Step Simplification" (formula "33"))
                                    (rule "true_left" (formula "33"))
                                    (rule "andRight" (formula "44"))
                                    (branch
                                       (rule "allRight" (formula "44") (inst "sk=i_0_0"))
                                       (rule "orRight" (formula "44"))
                                       (rule "notRight" (formula "45"))
                                       (rule "orRight" (formula "45"))
                                       (rule "orRight" (formula "46"))
                                       (rule "orRight" (formula "45"))
                                       (rule "inEqSimp_geqRight" (formula "47"))
                                       (rule "mul_literals" (formula "1") (term "1,0,0"))
                                       (rule "add_literals" (formula "1") (term "0,0"))
                                       (rule "inEqSimp_leqRight" (formula "48"))
                                       (rule "mul_literals" (formula "1") (term "1,0,0"))
                                       (rule "add_literals" (formula "1") (term "0,0"))
                                       (rule "inEqSimp_geqRight" (formula "48"))
                                       (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
                                       (rule "polySimp_addComm1" (formula "1") (term "0"))
                                       (rule "inEqSimp_leqRight" (formula "48"))
                                       (rule "mul_literals" (formula "1") (term "1,0,0"))
                                       (rule "add_literals" (formula "1") (term "0,0"))
                                       (rule "add_zero_left" (formula "1") (term "0"))
                                       (rule "inEqSimp_sepPosMonomial0" (formula "4"))
                                       (rule "mul_literals" (formula "4") (term "1"))
                                       (rule "inEqSimp_sepPosMonomial1" (formula "3"))
                                       (rule "mul_literals" (formula "3") (term "1"))
                                       (rule "inEqSimp_sepNegMonomial0" (formula "2"))
                                       (rule "polySimp_mulLiterals" (formula "2") (term "0"))
                                       (rule "polySimp_elimOne" (formula "2") (term "0"))
                                       (rule "inEqSimp_subsumption1" (formula "3") (ifseqformula "1"))
                                       (rule "leq_literals" (formula "3") (term "0"))
                                        (builtin "One Step Simplification" (formula "3"))
                                       (rule "true_left" (formula "3"))
                                       (rule "commute_and_2" (formula "15") (term "0,1,0"))
                                       (rule "ex_pull_out3" (formula "15") (term "0"))
                                       (rule "cnf_rightDist" (formula "15") (term "0,0"))
                                       (rule "shift_paren_or" (formula "15") (term "1,0,0"))
                                       (rule "cnf_rightDist" (formula "15") (term "0,0,0"))
                                       (rule "commute_or_2" (formula "15") (term "0,0,0,0"))
                                       (rule "shift_paren_or" (formula "15") (term "1,0,0,0"))
                                       (rule "commute_or" (formula "15") (term "0,0,0,0,0"))
                                       (rule "allLeft" (formula "19") (inst "t=i_0_0"))
                                       (rule "replace_known_left" (formula "19") (term "0,0,0,0") (ifseqformula "4"))
                                        (builtin "One Step Simplification" (formula "19"))
                                       (rule "inEqSimp_commuteGeq" (formula "19") (term "1"))
                                       (rule "inEqSimp_contradInEq1" (formula "19") (term "0,0") (ifseqformula "1"))
                                       (rule "qeq_literals" (formula "19") (term "0,0,0"))
                                        (builtin "One Step Simplification" (formula "19"))
                                       (rule "inEqSimp_contradInEq1" (formula "19") (term "1") (ifseqformula "2"))
                                       (rule "inEqSimp_homoInEq1" (formula "19") (term "0,1"))
                                       (rule "polySimp_pullOutFactor1b" (formula "19") (term "0,0,1"))
                                       (rule "add_literals" (formula "19") (term "1,1,0,0,1"))
                                       (rule "times_zero_1" (formula "19") (term "1,0,0,1"))
                                       (rule "add_literals" (formula "19") (term "0,0,1"))
                                       (rule "leq_literals" (formula "19") (term "0,1"))
                                        (builtin "One Step Simplification" (formula "19"))
                                       (rule "inEqSimp_contradInEq1" (formula "3") (ifseqformula "19"))
                                       (rule "qeq_literals" (formula "3") (term "0"))
                                        (builtin "One Step Simplification" (formula "3"))
                                       (rule "closeFalse" (formula "3"))
                                    )
                                    (branch
                                       (rule "allRight" (formula "44") (inst "sk=i_0"))
                                       (rule "orRight" (formula "44"))
                                       (rule "notRight" (formula "45"))
                                       (rule "orRight" (formula "45"))
                                       (rule "orRight" (formula "46"))
                                       (rule "orRight" (formula "45"))
                                       (rule "inEqSimp_geqRight" (formula "47"))
                                       (rule "mul_literals" (formula "1") (term "1,0,0"))
                                       (rule "add_literals" (formula "1") (term "0,0"))
                                       (rule "inEqSimp_leqRight" (formula "48"))
                                       (rule "mul_literals" (formula "1") (term "1,0,0"))
                                       (rule "add_literals" (formula "1") (term "0,0"))
                                       (rule "inEqSimp_geqRight" (formula "48"))
                                       (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
                                       (rule "polySimp_addComm1" (formula "1") (term "0"))
                                       (rule "inEqSimp_leqRight" (formula "48"))
                                       (rule "mul_literals" (formula "1") (term "1,0,0"))
                                       (rule "add_literals" (formula "1") (term "0,0"))
                                       (rule "add_zero_left" (formula "1") (term "0"))
                                       (rule "inEqSimp_sepPosMonomial0" (formula "4"))
                                       (rule "mul_literals" (formula "4") (term "1"))
                                       (rule "inEqSimp_sepPosMonomial1" (formula "3"))
                                       (rule "mul_literals" (formula "3") (term "1"))
                                       (rule "inEqSimp_sepNegMonomial0" (formula "2"))
                                       (rule "polySimp_mulLiterals" (formula "2") (term "0"))
                                       (rule "polySimp_elimOne" (formula "2") (term "0"))
                                       (rule "inEqSimp_subsumption1" (formula "3") (ifseqformula "1"))
                                       (rule "leq_literals" (formula "3") (term "0"))
                                        (builtin "One Step Simplification" (formula "3"))
                                       (rule "true_left" (formula "3"))
                                       (rule "commute_and_2" (formula "15") (term "0,1,0"))
                                       (rule "allLeft" (formula "20") (inst "t=i_0"))
                                       (rule "replace_known_left" (formula "20") (term "0,0,0,0") (ifseqformula "4"))
                                        (builtin "One Step Simplification" (formula "20"))
                                       (rule "inEqSimp_commuteGeq" (formula "20") (term "1"))
                                       (rule "inEqSimp_contradInEq0" (formula "20") (term "1,0") (ifseqformula "3"))
                                       (rule "qeq_literals" (formula "20") (term "0,1,0"))
                                        (builtin "One Step Simplification" (formula "20"))
                                       (rule "inEqSimp_contradInEq1" (formula "20") (term "0") (ifseqformula "1"))
                                       (rule "qeq_literals" (formula "20") (term "0,0"))
                                        (builtin "One Step Simplification" (formula "20"))
                                       (rule "inEqSimp_contradInEq0" (formula "2") (ifseqformula "20"))
                                       (rule "andLeft" (formula "2"))
                                       (rule "inEqSimp_homoInEq1" (formula "2"))
                                       (rule "polySimp_pullOutFactor1b" (formula "2") (term "0"))
                                       (rule "add_literals" (formula "2") (term "1,1,0"))
                                       (rule "times_zero_1" (formula "2") (term "1,0"))
                                       (rule "add_literals" (formula "2") (term "0"))
                                       (rule "leq_literals" (formula "2"))
                                       (rule "closeFalse" (formula "2"))
                                    )
                                 )
                                 (branch "CUT: result_2.<created> = TRUE FALSE"
                                     (builtin "One Step Simplification" (formula "32"))
                                    (rule "andRight" (formula "45"))
                                    (branch
                                       (rule "allRight" (formula "45") (inst "sk=i_0_0"))
                                       (rule "orRight" (formula "45"))
                                       (rule "orRight" (formula "45"))
                                       (rule "notRight" (formula "47"))
                                       (rule "orRight" (formula "46"))
                                       (rule "orRight" (formula "48"))
                                       (rule "inEqSimp_leqRight" (formula "46"))
                                       (rule "mul_literals" (formula "1") (term "1,0,0"))
                                       (rule "add_literals" (formula "1") (term "0,0"))
                                       (rule "add_zero_left" (formula "1") (term "0"))
                                       (rule "inEqSimp_geqRight" (formula "47"))
                                       (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
                                       (rule "polySimp_addComm1" (formula "1") (term "0"))
                                       (rule "inEqSimp_geqRight" (formula "48"))
                                       (rule "mul_literals" (formula "1") (term "1,0,0"))
                                       (rule "add_literals" (formula "1") (term "0,0"))
                                       (rule "inEqSimp_leqRight" (formula "49"))
                                       (rule "mul_literals" (formula "1") (term "1,0,0"))
                                       (rule "add_literals" (formula "1") (term "0,0"))
                                       (rule "inEqSimp_sepNegMonomial0" (formula "3"))
                                       (rule "polySimp_mulLiterals" (formula "3") (term "0"))
                                       (rule "polySimp_elimOne" (formula "3") (term "0"))
                                       (rule "inEqSimp_sepPosMonomial0" (formula "2"))
                                       (rule "mul_literals" (formula "2") (term "1"))
                                       (rule "inEqSimp_sepPosMonomial1" (formula "1"))
                                       (rule "mul_literals" (formula "1") (term "1"))
                                       (rule "inEqSimp_subsumption1" (formula "1") (ifseqformula "4"))
                                       (rule "leq_literals" (formula "1") (term "0"))
                                        (builtin "One Step Simplification" (formula "1"))
                                       (rule "true_left" (formula "1"))
                                       (rule "commute_and_2" (formula "15") (term "0,1,0"))
                                       (rule "ex_pull_out3" (formula "15") (term "0"))
                                       (rule "cnf_rightDist" (formula "15") (term "0,0"))
                                       (rule "shift_paren_or" (formula "15") (term "1,0,0"))
                                       (rule "cnf_rightDist" (formula "15") (term "0,0,0"))
                                       (rule "commute_or_2" (formula "15") (term "0,0,0,0"))
                                       (rule "shift_paren_or" (formula "15") (term "1,0,0,0"))
                                       (rule "commute_or" (formula "15") (term "0,0,0,0,0"))
                                       (rule "allLeft" (formula "19") (inst "t=i_0_0"))
                                       (rule "replace_known_left" (formula "19") (term "0,0,0,0") (ifseqformula "4"))
                                        (builtin "One Step Simplification" (formula "19"))
                                       (rule "inEqSimp_commuteGeq" (formula "19") (term "1"))
                                       (rule "inEqSimp_contradInEq0" (formula "19") (term "1,0") (ifseqformula "1"))
                                       (rule "qeq_literals" (formula "19") (term "0,1,0"))
                                        (builtin "One Step Simplification" (formula "19"))
                                       (rule "inEqSimp_contradInEq1" (formula "19") (term "0") (ifseqformula "3"))
                                       (rule "qeq_literals" (formula "19") (term "0,0"))
                                        (builtin "One Step Simplification" (formula "19"))
                                       (rule "inEqSimp_contradInEq1" (formula "19") (ifseqformula "2"))
                                       (rule "andLeft" (formula "19"))
                                       (rule "inEqSimp_homoInEq1" (formula "19"))
                                       (rule "polySimp_pullOutFactor1b" (formula "19") (term "0"))
                                       (rule "add_literals" (formula "19") (term "1,1,0"))
                                       (rule "times_zero_1" (formula "19") (term "1,0"))
                                       (rule "add_zero_right" (formula "19") (term "0"))
                                       (rule "leq_literals" (formula "19"))
                                       (rule "closeFalse" (formula "19"))
                                    )
                                    (branch
                                       (rule "allRight" (formula "45") (inst "sk=i_0"))
                                       (rule "orRight" (formula "45"))
                                       (rule "orRight" (formula "45"))
                                       (rule "notRight" (formula "47"))
                                       (rule "orRight" (formula "46"))
                                       (rule "orRight" (formula "48"))
                                       (rule "inEqSimp_geqRight" (formula "47"))
                                       (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
                                       (rule "polySimp_addComm1" (formula "1") (term "0"))
                                       (rule "inEqSimp_leqRight" (formula "47"))
                                       (rule "mul_literals" (formula "1") (term "1,0,0"))
                                       (rule "add_literals" (formula "1") (term "0,0"))
                                       (rule "add_zero_left" (formula "1") (term "0"))
                                       (rule "inEqSimp_leqRight" (formula "49"))
                                       (rule "mul_literals" (formula "1") (term "1,0,0"))
                                       (rule "add_literals" (formula "1") (term "0,0"))
                                       (rule "inEqSimp_geqRight" (formula "49"))
                                       (rule "mul_literals" (formula "1") (term "1,0,0"))
                                       (rule "add_literals" (formula "1") (term "0,0"))
                                       (rule "inEqSimp_sepNegMonomial0" (formula "4"))
                                       (rule "polySimp_mulLiterals" (formula "4") (term "0"))
                                       (rule "polySimp_elimOne" (formula "4") (term "0"))
                                       (rule "inEqSimp_sepPosMonomial1" (formula "2"))
                                       (rule "mul_literals" (formula "2") (term "1"))
                                       (rule "inEqSimp_sepPosMonomial0" (formula "1"))
                                       (rule "mul_literals" (formula "1") (term "1"))
                                       (rule "inEqSimp_subsumption1" (formula "2") (ifseqformula "3"))
                                       (rule "leq_literals" (formula "2") (term "0"))
                                        (builtin "One Step Simplification" (formula "2"))
                                       (rule "true_left" (formula "2"))
                                       (rule "commute_and_2" (formula "15") (term "0,1,0"))
                                       (rule "allLeft" (formula "20") (inst "t=i_0"))
                                       (rule "replace_known_left" (formula "20") (term "0,0,0,0") (ifseqformula "4"))
                                        (builtin "One Step Simplification" (formula "20"))
                                       (rule "inEqSimp_commuteGeq" (formula "20") (term "1"))
                                       (rule "inEqSimp_contradInEq1" (formula "20") (term "0,0") (ifseqformula "2"))
                                       (rule "qeq_literals" (formula "20") (term "0,0,0"))
                                        (builtin "One Step Simplification" (formula "20"))
                                       (rule "inEqSimp_contradInEq0" (formula "20") (term "0") (ifseqformula "1"))
                                       (rule "qeq_literals" (formula "20") (term "0,0"))
                                        (builtin "One Step Simplification" (formula "20"))
                                       (rule "inEqSimp_contradInEq1" (formula "20") (ifseqformula "3"))
                                       (rule "andLeft" (formula "20"))
                                       (rule "inEqSimp_homoInEq1" (formula "20"))
                                       (rule "polySimp_pullOutFactor1b" (formula "20") (term "0"))
                                       (rule "add_literals" (formula "20") (term "1,1,0"))
                                       (rule "times_zero_1" (formula "20") (term "1,0"))
                                       (rule "add_zero_right" (formula "20") (term "0"))
                                       (rule "leq_literals" (formula "20"))
                                       (rule "closeFalse" (formula "20"))
                                    )
                                 )
                              )
                              (branch
                                 (rule "andRight" (formula "48"))
                                 (branch
                                    (rule "inEqSimp_ltToLeq" (formula "16") (term "0,0,0,0,0"))
                                    (rule "polySimp_mulComm0" (formula "16") (term "1,0,0,0,0,0,0,0"))
                                    (rule "inEqSimp_ltToLeq" (formula "11") (term "0,0,0"))
                                    (rule "polySimp_mulComm0" (formula "11") (term "1,0,0,0,0,0"))
                                    (rule "inEqSimp_ltToLeq" (formula "12") (term "0,0,0"))
                                    (rule "polySimp_mulComm0" (formula "12") (term "1,0,0,0,0,0"))
                                    (rule "inEqSimp_ltToLeq" (formula "28"))
                                    (rule "polySimp_mulComm0" (formula "28") (term "1,0,0"))
                                    (rule "polySimp_addComm1" (formula "28") (term "0"))
                                    (rule "inEqSimp_ltToLeq" (formula "11") (term "0,0,0,1,0"))
                                    (rule "polySimp_mulComm0" (formula "11") (term "1,0,0,0,0,0,1,0"))
                                    (rule "inEqSimp_ltToLeq" (formula "15") (term "0,0,0,0,0"))
                                    (rule "polySimp_mulComm0" (formula "15") (term "1,0,0,0,0,0,0,0"))
                                    (rule "inEqSimp_sepPosMonomial1" (formula "37"))
                                    (rule "mul_literals" (formula "37") (term "1"))
                                    (rule "inEqSimp_sepPosMonomial0" (formula "16") (term "0,0,0,0,0"))
                                    (rule "polySimp_mulComm0" (formula "16") (term "1,0,0,0,0,0"))
                                    (rule "polySimp_rightDist" (formula "16") (term "1,0,0,0,0,0"))
                                    (rule "mul_literals" (formula "16") (term "0,1,0,0,0,0,0"))
                                    (rule "polySimp_mulLiterals" (formula "16") (term "1,1,0,0,0,0,0"))
                                    (rule "polySimp_elimOne" (formula "16") (term "1,1,0,0,0,0,0"))
                                    (rule "inEqSimp_sepPosMonomial0" (formula "11") (term "0,0,0"))
                                    (rule "polySimp_mulComm0" (formula "11") (term "1,0,0,0"))
                                    (rule "polySimp_rightDist" (formula "11") (term "1,0,0,0"))
                                    (rule "mul_literals" (formula "11") (term "0,1,0,0,0"))
                                    (rule "polySimp_mulLiterals" (formula "11") (term "1,1,0,0,0"))
                                    (rule "polySimp_elimOne" (formula "11") (term "1,1,0,0,0"))
                                    (rule "inEqSimp_sepPosMonomial0" (formula "12") (term "0,0,0"))
                                    (rule "polySimp_mulComm0" (formula "12") (term "1,0,0,0"))
                                    (rule "polySimp_rightDist" (formula "12") (term "1,0,0,0"))
                                    (rule "polySimp_mulLiterals" (formula "12") (term "1,1,0,0,0"))
                                    (rule "mul_literals" (formula "12") (term "0,1,0,0,0"))
                                    (rule "polySimp_elimOne" (formula "12") (term "1,1,0,0,0"))
                                    (rule "inEqSimp_sepNegMonomial0" (formula "28"))
                                    (rule "polySimp_mulLiterals" (formula "28") (term "0"))
                                    (rule "polySimp_elimOne" (formula "28") (term "0"))
                                    (rule "inEqSimp_sepPosMonomial0" (formula "11") (term "0,0,0,1,0"))
                                    (rule "polySimp_mulComm0" (formula "11") (term "1,0,0,0,1,0"))
                                    (rule "polySimp_rightDist" (formula "11") (term "1,0,0,0,1,0"))
                                    (rule "polySimp_mulLiterals" (formula "11") (term "1,1,0,0,0,1,0"))
                                    (rule "mul_literals" (formula "11") (term "0,1,0,0,0,1,0"))
                                    (rule "polySimp_elimOne" (formula "11") (term "1,1,0,0,0,1,0"))
                                    (rule "inEqSimp_sepPosMonomial0" (formula "15") (term "0,0,0,0,0"))
                                    (rule "polySimp_mulComm0" (formula "15") (term "1,0,0,0,0,0"))
                                    (rule "polySimp_rightDist" (formula "15") (term "1,0,0,0,0,0"))
                                    (rule "polySimp_mulLiterals" (formula "15") (term "1,1,0,0,0,0,0"))
                                    (rule "mul_literals" (formula "15") (term "0,1,0,0,0,0,0"))
                                    (rule "polySimp_elimOne" (formula "15") (term "1,1,0,0,0,0,0"))
                                    (rule "inEqSimp_contradEq7" (formula "38") (ifseqformula "37"))
                                    (rule "polySimp_mulComm0" (formula "38") (term "1,0,0"))
                                    (rule "polySimp_pullOutFactor1b" (formula "38") (term "0,0"))
                                    (rule "add_literals" (formula "38") (term "1,1,0,0"))
                                    (rule "times_zero_1" (formula "38") (term "1,0,0"))
                                    (rule "add_zero_right" (formula "38") (term "0,0"))
                                    (rule "leq_literals" (formula "38") (term "0"))
                                     (builtin "One Step Simplification" (formula "38"))
                                    (rule "false_right" (formula "38"))
                                    (rule "inEqSimp_subsumption1" (formula "26") (ifseqformula "37"))
                                    (rule "inEqSimp_homoInEq0" (formula "26") (term "0"))
                                    (rule "polySimp_pullOutFactor1b" (formula "26") (term "0,0"))
                                    (rule "add_literals" (formula "26") (term "1,1,0,0"))
                                    (rule "times_zero_1" (formula "26") (term "1,0,0"))
                                    (rule "add_zero_right" (formula "26") (term "0,0"))
                                    (rule "qeq_literals" (formula "26") (term "0"))
                                     (builtin "One Step Simplification" (formula "26"))
                                    (rule "true_left" (formula "26"))
                                    (rule "inEqSimp_subsumption1" (formula "35") (ifseqformula "25"))
                                    (rule "leq_literals" (formula "35") (term "0"))
                                     (builtin "One Step Simplification" (formula "35"))
                                    (rule "true_left" (formula "35"))
                                    (rule "inEqSimp_and_subsumption3" (formula "16") (term "0,0,0"))
                                    (rule "leq_literals" (formula "16") (term "0,1,0,0,0,0"))
                                     (builtin "One Step Simplification" (formula "16"))
                                    (rule "inEqSimp_and_subsumption3" (formula "15") (term "0,0,0"))
                                    (rule "leq_literals" (formula "15") (term "0,1,0,0,0,0"))
                                     (builtin "One Step Simplification" (formula "15"))
                                    (rule "nnf_imp2or" (formula "12") (term "0"))
                                    (rule "nnf_imp2or" (formula "11") (term "0"))
                                    (rule "nnf_imp2or" (formula "16") (term "0"))
                                    (rule "nnf_imp2or" (formula "15") (term "0"))
                                    (rule "nnf_notAnd" (formula "12") (term "0,0"))
                                    (rule "inEqSimp_notGeq" (formula "12") (term "1,0,0"))
                                    (rule "mul_literals" (formula "12") (term "1,0,0,1,0,0"))
                                    (rule "add_literals" (formula "12") (term "0,0,1,0,0"))
                                    (rule "inEqSimp_sepPosMonomial0" (formula "12") (term "1,0,0"))
                                    (rule "mul_literals" (formula "12") (term "1,1,0,0"))
                                    (rule "inEqSimp_notLeq" (formula "12") (term "0,0,0"))
                                    (rule "polySimp_rightDist" (formula "12") (term "1,0,0,0,0,0"))
                                    (rule "mul_literals" (formula "12") (term "0,1,0,0,0,0,0"))
                                    (rule "polySimp_addAssoc" (formula "12") (term "0,0,0,0,0"))
                                    (rule "add_literals" (formula "12") (term "0,0,0,0,0,0"))
                                    (rule "add_zero_left" (formula "12") (term "0,0,0,0,0"))
                                    (rule "inEqSimp_sepPosMonomial1" (formula "12") (term "0,0,0"))
                                    (rule "polySimp_mulLiterals" (formula "12") (term "1,0,0,0"))
                                    (rule "polySimp_elimOne" (formula "12") (term "1,0,0,0"))
                                    (rule "nnf_notAnd" (formula "11") (term "0,0"))
                                    (rule "inEqSimp_notGeq" (formula "11") (term "1,0,0"))
                                    (rule "times_zero_1" (formula "11") (term "1,0,0,1,0,0"))
                                    (rule "add_literals" (formula "11") (term "0,0,1,0,0"))
                                    (rule "inEqSimp_sepPosMonomial0" (formula "11") (term "1,0,0"))
                                    (rule "mul_literals" (formula "11") (term "1,1,0,0"))
                                    (rule "inEqSimp_notLeq" (formula "11") (term "0,0,0"))
                                    (rule "polySimp_rightDist" (formula "11") (term "1,0,0,0,0,0"))
                                    (rule "mul_literals" (formula "11") (term "0,1,0,0,0,0,0"))
                                    (rule "polySimp_addAssoc" (formula "11") (term "0,0,0,0,0"))
                                    (rule "add_literals" (formula "11") (term "0,0,0,0,0,0"))
                                    (rule "add_zero_left" (formula "11") (term "0,0,0,0,0"))
                                    (rule "inEqSimp_sepPosMonomial1" (formula "11") (term "0,0,0"))
                                    (rule "polySimp_mulLiterals" (formula "11") (term "1,0,0,0"))
                                    (rule "polySimp_elimOne" (formula "11") (term "1,0,0,0"))
                                    (rule "nnf_notAnd" (formula "16") (term "0,0"))
                                    (rule "inEqSimp_notLeq" (formula "16") (term "1,0,0"))
                                    (rule "mul_literals" (formula "16") (term "1,0,0,1,0,0"))
                                    (rule "add_literals" (formula "16") (term "0,0,1,0,0"))
                                    (rule "inEqSimp_sepPosMonomial1" (formula "16") (term "1,0,0"))
                                    (rule "mul_literals" (formula "16") (term "1,1,0,0"))
                                    (rule "nnf_notAnd" (formula "15") (term "0,0"))
                                    (rule "inEqSimp_notLeq" (formula "15") (term "1,0,0"))
                                    (rule "mul_literals" (formula "15") (term "1,0,0,1,0,0"))
                                    (rule "add_literals" (formula "15") (term "0,0,1,0,0"))
                                    (rule "inEqSimp_sepPosMonomial1" (formula "15") (term "1,0,0"))
                                    (rule "mul_literals" (formula "15") (term "1,1,0,0"))
                                    (rule "nnf_notAnd" (formula "16") (term "0,0,0"))
                                    (rule "inEqSimp_notGeq" (formula "16") (term "1,0,0,0"))
                                    (rule "mul_literals" (formula "16") (term "1,0,0,1,0,0,0"))
                                    (rule "add_literals" (formula "16") (term "0,0,1,0,0,0"))
                                    (rule "inEqSimp_sepPosMonomial0" (formula "16") (term "1,0,0,0"))
                                    (rule "mul_literals" (formula "16") (term "1,1,0,0,0"))
                                    (rule "inEqSimp_notLeq" (formula "16") (term "0,0,0,0"))
                                    (rule "polySimp_rightDist" (formula "16") (term "1,0,0,0,0,0,0"))
                                    (rule "mul_literals" (formula "16") (term "0,1,0,0,0,0,0,0"))
                                    (rule "polySimp_addAssoc" (formula "16") (term "0,0,0,0,0,0"))
                                    (rule "add_literals" (formula "16") (term "0,0,0,0,0,0,0"))
                                    (rule "add_zero_left" (formula "16") (term "0,0,0,0,0,0"))
                                    (rule "inEqSimp_sepPosMonomial1" (formula "16") (term "0,0,0,0"))
                                    (rule "polySimp_mulLiterals" (formula "16") (term "1,0,0,0,0"))
                                    (rule "polySimp_elimOne" (formula "16") (term "1,0,0,0,0"))
                                    (rule "nnf_notAnd" (formula "15") (term "0,0,0"))
                                    (rule "inEqSimp_notGeq" (formula "15") (term "1,0,0,0"))
                                    (rule "mul_literals" (formula "15") (term "1,0,0,1,0,0,0"))
                                    (rule "add_literals" (formula "15") (term "0,0,1,0,0,0"))
                                    (rule "inEqSimp_sepPosMonomial0" (formula "15") (term "1,0,0,0"))
                                    (rule "mul_literals" (formula "15") (term "1,1,0,0,0"))
                                    (rule "inEqSimp_notLeq" (formula "15") (term "0,0,0,0"))
                                    (rule "polySimp_rightDist" (formula "15") (term "1,0,0,0,0,0,0"))
                                    (rule "mul_literals" (formula "15") (term "0,1,0,0,0,0,0,0"))
                                    (rule "polySimp_addAssoc" (formula "15") (term "0,0,0,0,0,0"))
                                    (rule "add_literals" (formula "15") (term "0,0,0,0,0,0,0"))
                                    (rule "add_zero_left" (formula "15") (term "0,0,0,0,0,0"))
                                    (rule "inEqSimp_sepPosMonomial1" (formula "15") (term "0,0,0,0"))
                                    (rule "polySimp_mulLiterals" (formula "15") (term "1,0,0,0,0"))
                                    (rule "polySimp_elimOne" (formula "15") (term "1,0,0,0,0"))
                                    (rule "Class_invariant_axiom_for_java_util_ArrayList" (formula "44"))
                                    (rule "closeTrue" (formula "44"))
                                 )
                                 (branch
                                    (rule "notRight" (formula "48"))
                                    (rule "inEqSimp_ltToLeq" (formula "16") (term "0,0,0,0,0"))
                                    (rule "polySimp_mulComm0" (formula "16") (term "1,0,0,0,0,0,0,0"))
                                    (rule "inEqSimp_ltToLeq" (formula "17") (term "0,0,0,0,0"))
                                    (rule "polySimp_mulComm0" (formula "17") (term "1,0,0,0,0,0,0,0"))
                                    (rule "inEqSimp_ltToLeq" (formula "12") (term "0,0,0"))
                                    (rule "polySimp_mulComm0" (formula "12") (term "1,0,0,0,0,0"))
                                    (rule "inEqSimp_ltToLeq" (formula "13") (term "0,0,0"))
                                    (rule "polySimp_mulComm0" (formula "13") (term "1,0,0,0,0,0"))
                                    (rule "inEqSimp_ltToLeq" (formula "29"))
                                    (rule "polySimp_mulComm0" (formula "29") (term "1,0,0"))
                                    (rule "polySimp_addComm1" (formula "29") (term "0"))
                                    (rule "inEqSimp_ltToLeq" (formula "12") (term "0,0,0,1,0"))
                                    (rule "polySimp_mulComm0" (formula "12") (term "1,0,0,0,0,0,1,0"))
                                    (rule "inEqSimp_sepPosMonomial1" (formula "38"))
                                    (rule "mul_literals" (formula "38") (term "1"))
                                    (rule "inEqSimp_sepPosMonomial0" (formula "16") (term "0,0,0,0,0"))
                                    (rule "polySimp_mulComm0" (formula "16") (term "1,0,0,0,0,0"))
                                    (rule "polySimp_rightDist" (formula "16") (term "1,0,0,0,0,0"))
                                    (rule "mul_literals" (formula "16") (term "0,1,0,0,0,0,0"))
                                    (rule "polySimp_mulLiterals" (formula "16") (term "1,1,0,0,0,0,0"))
                                    (rule "polySimp_elimOne" (formula "16") (term "1,1,0,0,0,0,0"))
                                    (rule "inEqSimp_sepPosMonomial0" (formula "17") (term "0,0,0,0,0"))
                                    (rule "polySimp_mulComm0" (formula "17") (term "1,0,0,0,0,0"))
                                    (rule "polySimp_rightDist" (formula "17") (term "1,0,0,0,0,0"))
                                    (rule "mul_literals" (formula "17") (term "0,1,0,0,0,0,0"))
                                    (rule "polySimp_mulLiterals" (formula "17") (term "1,1,0,0,0,0,0"))
                                    (rule "polySimp_elimOne" (formula "17") (term "1,1,0,0,0,0,0"))
                                    (rule "inEqSimp_sepPosMonomial0" (formula "12") (term "0,0,0"))
                                    (rule "polySimp_mulComm0" (formula "12") (term "1,0,0,0"))
                                    (rule "polySimp_rightDist" (formula "12") (term "1,0,0,0"))
                                    (rule "mul_literals" (formula "12") (term "0,1,0,0,0"))
                                    (rule "polySimp_mulLiterals" (formula "12") (term "1,1,0,0,0"))
                                    (rule "polySimp_elimOne" (formula "12") (term "1,1,0,0,0"))
                                    (rule "inEqSimp_sepPosMonomial0" (formula "13") (term "0,0,0"))
                                    (rule "polySimp_mulComm0" (formula "13") (term "1,0,0,0"))
                                    (rule "polySimp_rightDist" (formula "13") (term "1,0,0,0"))
                                    (rule "mul_literals" (formula "13") (term "0,1,0,0,0"))
                                    (rule "polySimp_mulLiterals" (formula "13") (term "1,1,0,0,0"))
                                    (rule "polySimp_elimOne" (formula "13") (term "1,1,0,0,0"))
                                    (rule "inEqSimp_sepNegMonomial0" (formula "29"))
                                    (rule "polySimp_mulLiterals" (formula "29") (term "0"))
                                    (rule "polySimp_elimOne" (formula "29") (term "0"))
                                    (rule "inEqSimp_sepPosMonomial0" (formula "12") (term "0,0,0,1,0"))
                                    (rule "polySimp_mulComm0" (formula "12") (term "1,0,0,0,1,0"))
                                    (rule "polySimp_rightDist" (formula "12") (term "1,0,0,0,1,0"))
                                    (rule "mul_literals" (formula "12") (term "0,1,0,0,0,1,0"))
                                    (rule "polySimp_mulLiterals" (formula "12") (term "1,1,0,0,0,1,0"))
                                    (rule "polySimp_elimOne" (formula "12") (term "1,1,0,0,0,1,0"))
                                    (rule "inEqSimp_contradEq7" (formula "39") (ifseqformula "38"))
                                    (rule "polySimp_mulComm0" (formula "39") (term "1,0,0"))
                                    (rule "polySimp_pullOutFactor1b" (formula "39") (term "0,0"))
                                    (rule "add_literals" (formula "39") (term "1,1,0,0"))
                                    (rule "times_zero_1" (formula "39") (term "1,0,0"))
                                    (rule "add_zero_right" (formula "39") (term "0,0"))
                                    (rule "leq_literals" (formula "39") (term "0"))
                                     (builtin "One Step Simplification" (formula "39"))
                                    (rule "false_right" (formula "39"))
                                    (rule "inEqSimp_subsumption1" (formula "37") (ifseqformula "26"))
                                    (rule "leq_literals" (formula "37") (term "0"))
                                     (builtin "One Step Simplification" (formula "37"))
                                    (rule "true_left" (formula "37"))
                                    (rule "inEqSimp_subsumption1" (formula "27") (ifseqformula "37"))
                                    (rule "inEqSimp_homoInEq0" (formula "27") (term "0"))
                                    (rule "polySimp_pullOutFactor1b" (formula "27") (term "0,0"))
                                    (rule "add_literals" (formula "27") (term "1,1,0,0"))
                                    (rule "times_zero_1" (formula "27") (term "1,0,0"))
                                    (rule "add_literals" (formula "27") (term "0,0"))
                                    (rule "qeq_literals" (formula "27") (term "0"))
                                     (builtin "One Step Simplification" (formula "27"))
                                    (rule "true_left" (formula "27"))
                                    (rule "inEqSimp_and_subsumption3" (formula "16") (term "0,0,0"))
                                    (rule "leq_literals" (formula "16") (term "0,1,0,0,0,0"))
                                     (builtin "One Step Simplification" (formula "16"))
                                    (rule "inEqSimp_and_subsumption3" (formula "17") (term "0,0,0"))
                                    (rule "leq_literals" (formula "17") (term "0,1,0,0,0,0"))
                                     (builtin "One Step Simplification" (formula "17"))
                                    (rule "nnf_imp2or" (formula "13") (term "0"))
                                    (rule "nnf_imp2or" (formula "12") (term "0"))
                                    (rule "nnf_imp2or" (formula "16") (term "0"))
                                    (rule "nnf_imp2or" (formula "17") (term "0"))
                                    (rule "nnf_notAnd" (formula "13") (term "0,0"))
                                    (rule "inEqSimp_notGeq" (formula "13") (term "1,0,0"))
                                    (rule "times_zero_1" (formula "13") (term "1,0,0,1,0,0"))
                                    (rule "add_literals" (formula "13") (term "0,0,1,0,0"))
                                    (rule "inEqSimp_sepPosMonomial0" (formula "13") (term "1,0,0"))
                                    (rule "mul_literals" (formula "13") (term "1,1,0,0"))
                                    (rule "inEqSimp_notLeq" (formula "13") (term "0,0,0"))
                                    (rule "polySimp_rightDist" (formula "13") (term "1,0,0,0,0,0"))
                                    (rule "mul_literals" (formula "13") (term "0,1,0,0,0,0,0"))
                                    (rule "polySimp_addAssoc" (formula "13") (term "0,0,0,0,0"))
                                    (rule "add_literals" (formula "13") (term "0,0,0,0,0,0"))
                                    (rule "add_zero_left" (formula "13") (term "0,0,0,0,0"))
                                    (rule "inEqSimp_sepPosMonomial1" (formula "13") (term "0,0,0"))
                                    (rule "polySimp_mulLiterals" (formula "13") (term "1,0,0,0"))
                                    (rule "polySimp_elimOne" (formula "13") (term "1,0,0,0"))
                                    (rule "nnf_notAnd" (formula "12") (term "0,0"))
                                    (rule "inEqSimp_notGeq" (formula "12") (term "1,0,0"))
                                    (rule "times_zero_1" (formula "12") (term "1,0,0,1,0,0"))
                                    (rule "add_literals" (formula "12") (term "0,0,1,0,0"))
                                    (rule "inEqSimp_sepPosMonomial0" (formula "12") (term "1,0,0"))
                                    (rule "mul_literals" (formula "12") (term "1,1,0,0"))
                                    (rule "inEqSimp_notLeq" (formula "12") (term "0,0,0"))
                                    (rule "polySimp_rightDist" (formula "12") (term "1,0,0,0,0,0"))
                                    (rule "mul_literals" (formula "12") (term "0,1,0,0,0,0,0"))
                                    (rule "polySimp_addAssoc" (formula "12") (term "0,0,0,0,0"))
                                    (rule "add_literals" (formula "12") (term "0,0,0,0,0,0"))
                                    (rule "add_zero_left" (formula "12") (term "0,0,0,0,0"))
                                    (rule "inEqSimp_sepPosMonomial1" (formula "12") (term "0,0,0"))
                                    (rule "polySimp_mulLiterals" (formula "12") (term "1,0,0,0"))
                                    (rule "polySimp_elimOne" (formula "12") (term "1,0,0,0"))
                                    (rule "nnf_notAnd" (formula "16") (term "0,0"))
                                    (rule "inEqSimp_notLeq" (formula "16") (term "1,0,0"))
                                    (rule "mul_literals" (formula "16") (term "1,0,0,1,0,0"))
                                    (rule "add_literals" (formula "16") (term "0,0,1,0,0"))
                                    (rule "inEqSimp_sepPosMonomial1" (formula "16") (term "1,0,0"))
                                    (rule "mul_literals" (formula "16") (term "1,1,0,0"))
                                    (rule "nnf_notAnd" (formula "17") (term "0,0"))
                                    (rule "inEqSimp_notLeq" (formula "17") (term "1,0,0"))
                                    (rule "mul_literals" (formula "17") (term "1,0,0,1,0,0"))
                                    (rule "add_literals" (formula "17") (term "0,0,1,0,0"))
                                    (rule "inEqSimp_sepPosMonomial1" (formula "17") (term "1,0,0"))
                                    (rule "mul_literals" (formula "17") (term "1,1,0,0"))
                                    (rule "nnf_notAnd" (formula "16") (term "0,0,0"))
                                    (rule "inEqSimp_notLeq" (formula "16") (term "0,0,0,0"))
                                    (rule "polySimp_rightDist" (formula "16") (term "1,0,0,0,0,0,0"))
                                    (rule "mul_literals" (formula "16") (term "0,1,0,0,0,0,0,0"))
                                    (rule "polySimp_addAssoc" (formula "16") (term "0,0,0,0,0,0"))
                                    (rule "add_literals" (formula "16") (term "0,0,0,0,0,0,0"))
                                    (rule "add_zero_left" (formula "16") (term "0,0,0,0,0,0"))
                                    (rule "inEqSimp_sepPosMonomial1" (formula "16") (term "0,0,0,0"))
                                    (rule "polySimp_mulLiterals" (formula "16") (term "1,0,0,0,0"))
                                    (rule "polySimp_elimOne" (formula "16") (term "1,0,0,0,0"))
                                    (rule "inEqSimp_notGeq" (formula "16") (term "1,0,0,0"))
                                    (rule "mul_literals" (formula "16") (term "1,0,0,1,0,0,0"))
                                    (rule "add_literals" (formula "16") (term "0,0,1,0,0,0"))
                                    (rule "inEqSimp_sepPosMonomial0" (formula "16") (term "1,0,0,0"))
                                    (rule "mul_literals" (formula "16") (term "1,1,0,0,0"))
                                    (rule "nnf_notAnd" (formula "17") (term "0,0,0"))
                                    (rule "inEqSimp_notGeq" (formula "17") (term "1,0,0,0"))
                                    (rule "mul_literals" (formula "17") (term "1,0,0,1,0,0,0"))
                                    (rule "add_literals" (formula "17") (term "0,0,1,0,0,0"))
                                    (rule "inEqSimp_sepPosMonomial0" (formula "17") (term "1,0,0,0"))
                                    (rule "mul_literals" (formula "17") (term "1,1,0,0,0"))
                                    (rule "inEqSimp_notLeq" (formula "17") (term "0,0,0,0"))
                                    (rule "polySimp_rightDist" (formula "17") (term "1,0,0,0,0,0,0"))
                                    (rule "mul_literals" (formula "17") (term "0,1,0,0,0,0,0,0"))
                                    (rule "polySimp_addAssoc" (formula "17") (term "0,0,0,0,0,0"))
                                    (rule "add_literals" (formula "17") (term "0,0,0,0,0,0,0"))
                                    (rule "add_zero_left" (formula "17") (term "0,0,0,0,0,0"))
                                    (rule "inEqSimp_sepPosMonomial1" (formula "17") (term "0,0,0,0"))
                                    (rule "polySimp_mulLiterals" (formula "17") (term "1,0,0,0,0"))
                                    (rule "polySimp_elimOne" (formula "17") (term "1,0,0,0,0"))
                                    (rule "commute_or_2" (formula "13") (term "0"))
                                    (rule "commute_or" (formula "12") (term "0,0"))
                                    (rule "commute_or_2" (formula "16") (term "0"))
                                    (rule "commute_or_2" (formula "17") (term "0"))
                                    (rule "commute_or" (formula "13") (term "0,0"))
                                    (rule "commute_or_2" (formula "13") (term "0"))
                                    (rule "commute_or_2" (formula "16") (term "0,0"))
                                    (rule "commute_or_2" (formula "17") (term "0,0"))
                                    (rule "commute_and" (formula "12") (term "0,0,1,0"))
                                    (rule "commute_or" (formula "16") (term "0,0,0"))
                                    (rule "commute_or_2" (formula "16") (term "0,0"))
                                    (rule "commute_or_2" (formula "16") (term "0"))
                                    (rule "commute_or" (formula "17") (term "0,0,0"))
                                    (rule "commute_or_2" (formula "17") (term "0,0"))
                                    (rule "commute_or_2" (formula "17") (term "0"))
                                    (rule "commute_and_2" (formula "12") (term "0,1,0"))
                                    (rule "cut_direct" (formula "33") (term "0,0,0"))
                                    (branch "CUT: result_2.<created> = TRUE TRUE"
                                        (builtin "One Step Simplification" (formula "34"))
                                       (rule "true_left" (formula "34"))
                                       (rule "seqGetAlphaCast" (formula "34") (term "0"))
                                       (rule "castedGetAny" (formula "34") (term "0"))
                                        (builtin "One Step Simplification" (formula "34"))
                                       (rule "true_left" (formula "34"))
                                       (rule "ex_pull_out3" (formula "12") (term "0"))
                                       (rule "cnf_rightDist" (formula "12") (term "0,0"))
                                       (rule "shift_paren_or" (formula "12") (term "1,0,0"))
                                       (rule "cnf_rightDist" (formula "12") (term "0,0,0"))
                                       (rule "commute_or_2" (formula "12") (term "0,0,0,0"))
                                       (rule "shift_paren_or" (formula "12") (term "1,0,0,0"))
                                       (rule "commute_or" (formula "12") (term "0,0,0,0,0"))
                                       (rule "commute_and" (formula "12") (term "0,0,0"))
                                       (rule "commute_and_2" (formula "12") (term "0,0"))
                                       (rule "ineffectiveCast" (formula "1") (term "0") (ifseqformula "2"))
                                       (rule "typeEqDerived2" (formula "3") (term "0") (ifseqformula "1"))
                                        (builtin "One Step Simplification" (formula "3"))
                                       (rule "true_left" (formula "3"))
                                       (rule "applyEq" (formula "1") (term "0") (ifseqformula "2"))
                                       (rule "eqSymm" (formula "1"))
                                       (rule "close" (formula "37") (ifseqformula "1"))
                                    )
                                    (branch "CUT: result_2.<created> = TRUE FALSE"
                                        (builtin "One Step Simplification" (formula "33"))
                                       (rule "seqGetAlphaCast" (formula "34") (term "0"))
                                       (rule "castedGetAny" (formula "34") (term "0"))
                                        (builtin "One Step Simplification" (formula "34"))
                                       (rule "true_left" (formula "34"))
                                       (rule "ex_pull_out3" (formula "12") (term "0"))
                                       (rule "cnf_rightDist" (formula "12") (term "0,0"))
                                       (rule "shift_paren_or" (formula "12") (term "1,0,0"))
                                       (rule "cnf_rightDist" (formula "12") (term "0,0,0"))
                                       (rule "commute_or_2" (formula "12") (term "0,0,0,0"))
                                       (rule "shift_paren_or" (formula "12") (term "1,0,0,0"))
                                       (rule "commute_or" (formula "12") (term "0,0,0,0,0"))
                                       (rule "commute_and" (formula "12") (term "0,0,0"))
                                       (rule "commute_and_2" (formula "12") (term "0,0"))
                                       (rule "ineffectiveCast" (formula "1") (term "0") (ifseqformula "2"))
                                       (rule "typeEqDerived2" (formula "3") (term "0") (ifseqformula "1"))
                                        (builtin "One Step Simplification" (formula "3"))
                                       (rule "true_left" (formula "3"))
                                       (rule "applyEq" (formula "1") (term "0") (ifseqformula "2"))
                                       (rule "eqSymm" (formula "1"))
                                       (rule "close" (formula "38") (ifseqformula "1"))
                                    )
                                 )
                              )
                           )
                        )
                        (branch
                           (rule "andRight" (formula "48"))
                           (branch
                              (rule "andRight" (formula "48"))
                              (branch
                                 (rule "andRight" (formula "48"))
                                 (branch
                                    (rule "wellFormedAnonEQ" (formula "48") (ifseqformula "32"))
                                    (rule "wellFormedAnon" (formula "48") (term "0"))
                                    (rule "wellFormedAnonEQ" (formula "48") (term "0,0") (ifseqformula "18"))
                                    (rule "replace_known_left" (formula "48") (term "1") (ifseqformula "31"))
                                     (builtin "One Step Simplification" (formula "48") (ifInst ""  (formula "6")) (ifInst ""  (formula "17")) (ifInst ""  (formula "24")))
                                    (rule "closeTrue" (formula "48"))
                                 )
                                 (branch
                                    (rule "selectCreatedOfAnonAsFormulaEQ" (formula "48") (ifseqformula "32"))
                                     (builtin "One Step Simplification" (formula "48"))
                                    (rule "selectCreatedOfAnonAsFormulaEQ" (formula "48") (term "0,0") (ifseqformula "18"))
                                    (rule "orRight" (formula "48"))
                                    (rule "orRight" (formula "48"))
                                    (rule "orRight" (formula "48"))
                                    (rule "close" (formula "48") (ifseqformula "4"))
                                 )
                              )
                              (branch
                                 (rule "orRight" (formula "48"))
                                 (rule "selectCreatedOfAnonAsFormulaEQ" (formula "49") (ifseqformula "32"))
                                  (builtin "One Step Simplification" (formula "49"))
                                 (rule "selectCreatedOfAnonAsFormulaEQ" (formula "49") (term "0,0") (ifseqformula "18"))
                                 (rule "orRight" (formula "49"))
                                 (rule "orRight" (formula "49"))
                                 (rule "orRight" (formula "49"))
                                 (rule "inEqSimp_ltToLeq" (formula "15") (term "0,0,0,0,0"))
                                 (rule "polySimp_mulComm0" (formula "15") (term "1,0,0,0,0,0,0,0"))
                                 (rule "inEqSimp_ltToLeq" (formula "12") (term "0,0,0"))
                                 (rule "polySimp_mulComm0" (formula "12") (term "1,0,0,0,0,0"))
                                 (rule "inEqSimp_ltToLeq" (formula "16") (term "0,0,0,0,0"))
                                 (rule "polySimp_mulComm0" (formula "16") (term "1,0,0,0,0,0,0,0"))
                                 (rule "inEqSimp_ltToLeq" (formula "11") (term "0,0,0"))
                                 (rule "polySimp_mulComm0" (formula "11") (term "1,0,0,0,0,0"))
                                 (rule "inEqSimp_ltToLeq" (formula "28"))
                                 (rule "polySimp_mulComm0" (formula "28") (term "1,0,0"))
                                 (rule "polySimp_addComm1" (formula "28") (term "0"))
                                 (rule "inEqSimp_ltToLeq" (formula "11") (term "0,0,0,1,0"))
                                 (rule "polySimp_mulComm0" (formula "11") (term "1,0,0,0,0,0,1,0"))
                                 (rule "inEqSimp_sepPosMonomial1" (formula "37"))
                                 (rule "mul_literals" (formula "37") (term "1"))
                                 (rule "inEqSimp_sepPosMonomial0" (formula "15") (term "0,0,0,0,0"))
                                 (rule "polySimp_mulComm0" (formula "15") (term "1,0,0,0,0,0"))
                                 (rule "polySimp_rightDist" (formula "15") (term "1,0,0,0,0,0"))
                                 (rule "polySimp_mulLiterals" (formula "15") (term "1,1,0,0,0,0,0"))
                                 (rule "mul_literals" (formula "15") (term "0,1,0,0,0,0,0"))
                                 (rule "polySimp_elimOne" (formula "15") (term "1,1,0,0,0,0,0"))
                                 (rule "inEqSimp_sepPosMonomial0" (formula "12") (term "0,0,0"))
                                 (rule "polySimp_mulComm0" (formula "12") (term "1,0,0,0"))
                                 (rule "polySimp_rightDist" (formula "12") (term "1,0,0,0"))
                                 (rule "mul_literals" (formula "12") (term "0,1,0,0,0"))
                                 (rule "polySimp_mulLiterals" (formula "12") (term "1,1,0,0,0"))
                                 (rule "polySimp_elimOne" (formula "12") (term "1,1,0,0,0"))
                                 (rule "inEqSimp_sepPosMonomial0" (formula "16") (term "0,0,0,0,0"))
                                 (rule "polySimp_mulComm0" (formula "16") (term "1,0,0,0,0,0"))
                                 (rule "polySimp_rightDist" (formula "16") (term "1,0,0,0,0,0"))
                                 (rule "polySimp_mulLiterals" (formula "16") (term "1,1,0,0,0,0,0"))
                                 (rule "mul_literals" (formula "16") (term "0,1,0,0,0,0,0"))
                                 (rule "polySimp_elimOne" (formula "16") (term "1,1,0,0,0,0,0"))
                                 (rule "inEqSimp_sepPosMonomial0" (formula "11") (term "0,0,0"))
                                 (rule "polySimp_mulComm0" (formula "11") (term "1,0,0,0"))
                                 (rule "polySimp_rightDist" (formula "11") (term "1,0,0,0"))
                                 (rule "polySimp_mulLiterals" (formula "11") (term "1,1,0,0,0"))
                                 (rule "mul_literals" (formula "11") (term "0,1,0,0,0"))
                                 (rule "polySimp_elimOne" (formula "11") (term "1,1,0,0,0"))
                                 (rule "inEqSimp_sepNegMonomial0" (formula "28"))
                                 (rule "polySimp_mulLiterals" (formula "28") (term "0"))
                                 (rule "polySimp_elimOne" (formula "28") (term "0"))
                                 (rule "inEqSimp_sepPosMonomial0" (formula "11") (term "0,0,0,1,0"))
                                 (rule "polySimp_mulComm0" (formula "11") (term "1,0,0,0,1,0"))
                                 (rule "polySimp_rightDist" (formula "11") (term "1,0,0,0,1,0"))
                                 (rule "mul_literals" (formula "11") (term "0,1,0,0,0,1,0"))
                                 (rule "polySimp_mulLiterals" (formula "11") (term "1,1,0,0,0,1,0"))
                                 (rule "polySimp_elimOne" (formula "11") (term "1,1,0,0,0,1,0"))
                                 (rule "inEqSimp_contradEq7" (formula "38") (ifseqformula "37"))
                                 (rule "polySimp_mulComm0" (formula "38") (term "1,0,0"))
                                 (rule "polySimp_pullOutFactor1b" (formula "38") (term "0,0"))
                                 (rule "add_literals" (formula "38") (term "1,1,0,0"))
                                 (rule "times_zero_1" (formula "38") (term "1,0,0"))
                                 (rule "add_literals" (formula "38") (term "0,0"))
                                 (rule "leq_literals" (formula "38") (term "0"))
                                  (builtin "One Step Simplification" (formula "38"))
                                 (rule "false_right" (formula "38"))
                                 (rule "inEqSimp_subsumption1" (formula "36") (ifseqformula "25"))
                                 (rule "leq_literals" (formula "36") (term "0"))
                                  (builtin "One Step Simplification" (formula "36"))
                                 (rule "true_left" (formula "36"))
                                 (rule "inEqSimp_subsumption1" (formula "26") (ifseqformula "36"))
                                 (rule "inEqSimp_homoInEq0" (formula "26") (term "0"))
                                 (rule "polySimp_pullOutFactor1b" (formula "26") (term "0,0"))
                                 (rule "add_literals" (formula "26") (term "1,1,0,0"))
                                 (rule "times_zero_1" (formula "26") (term "1,0,0"))
                                 (rule "add_literals" (formula "26") (term "0,0"))
                                 (rule "qeq_literals" (formula "26") (term "0"))
                                  (builtin "One Step Simplification" (formula "26"))
                                 (rule "true_left" (formula "26"))
                                 (rule "inEqSimp_and_subsumption3" (formula "15") (term "0,0,0"))
                                 (rule "leq_literals" (formula "15") (term "0,1,0,0,0,0"))
                                  (builtin "One Step Simplification" (formula "15"))
                                 (rule "inEqSimp_and_subsumption3" (formula "16") (term "0,0,0"))
                                 (rule "leq_literals" (formula "16") (term "0,1,0,0,0,0"))
                                  (builtin "One Step Simplification" (formula "16"))
                                 (rule "nnf_imp2or" (formula "12") (term "0"))
                                 (rule "nnf_imp2or" (formula "11") (term "0"))
                                 (rule "nnf_imp2or" (formula "15") (term "0"))
                                 (rule "nnf_imp2or" (formula "16") (term "0"))
                                 (rule "nnf_notAnd" (formula "12") (term "0,0"))
                                 (rule "inEqSimp_notGeq" (formula "12") (term "1,0,0"))
                                 (rule "mul_literals" (formula "12") (term "1,0,0,1,0,0"))
                                 (rule "add_zero_right" (formula "12") (term "0,0,1,0,0"))
                                 (rule "inEqSimp_sepPosMonomial0" (formula "12") (term "1,0,0"))
                                 (rule "mul_literals" (formula "12") (term "1,1,0,0"))
                                 (rule "inEqSimp_notLeq" (formula "12") (term "0,0,0"))
                                 (rule "polySimp_rightDist" (formula "12") (term "1,0,0,0,0,0"))
                                 (rule "mul_literals" (formula "12") (term "0,1,0,0,0,0,0"))
                                 (rule "polySimp_addAssoc" (formula "12") (term "0,0,0,0,0"))
                                 (rule "add_literals" (formula "12") (term "0,0,0,0,0,0"))
                                 (rule "add_zero_left" (formula "12") (term "0,0,0,0,0"))
                                 (rule "inEqSimp_sepPosMonomial1" (formula "12") (term "0,0,0"))
                                 (rule "polySimp_mulLiterals" (formula "12") (term "1,0,0,0"))
                                 (rule "polySimp_elimOne" (formula "12") (term "1,0,0,0"))
                                 (rule "nnf_notAnd" (formula "11") (term "0,0"))
                                 (rule "inEqSimp_notLeq" (formula "11") (term "0,0,0"))
                                 (rule "polySimp_rightDist" (formula "11") (term "1,0,0,0,0,0"))
                                 (rule "mul_literals" (formula "11") (term "0,1,0,0,0,0,0"))
                                 (rule "polySimp_addAssoc" (formula "11") (term "0,0,0,0,0"))
                                 (rule "add_literals" (formula "11") (term "0,0,0,0,0,0"))
                                 (rule "add_zero_left" (formula "11") (term "0,0,0,0,0"))
                                 (rule "inEqSimp_sepPosMonomial1" (formula "11") (term "0,0,0"))
                                 (rule "polySimp_mulLiterals" (formula "11") (term "1,0,0,0"))
                                 (rule "polySimp_elimOne" (formula "11") (term "1,0,0,0"))
                                 (rule "inEqSimp_notGeq" (formula "11") (term "1,0,0"))
                                 (rule "mul_literals" (formula "11") (term "1,0,0,1,0,0"))
                                 (rule "add_zero_right" (formula "11") (term "0,0,1,0,0"))
                                 (rule "inEqSimp_sepPosMonomial0" (formula "11") (term "1,0,0"))
                                 (rule "mul_literals" (formula "11") (term "1,1,0,0"))
                                 (rule "nnf_notAnd" (formula "15") (term "0,0"))
                                 (rule "inEqSimp_notLeq" (formula "15") (term "1,0,0"))
                                 (rule "mul_literals" (formula "15") (term "1,0,0,1,0,0"))
                                 (rule "add_literals" (formula "15") (term "0,0,1,0,0"))
                                 (rule "inEqSimp_sepPosMonomial1" (formula "15") (term "1,0,0"))
                                 (rule "mul_literals" (formula "15") (term "1,1,0,0"))
                                 (rule "nnf_notAnd" (formula "16") (term "0,0"))
                                 (rule "inEqSimp_notLeq" (formula "16") (term "1,0,0"))
                                 (rule "mul_literals" (formula "16") (term "1,0,0,1,0,0"))
                                 (rule "add_literals" (formula "16") (term "0,0,1,0,0"))
                                 (rule "inEqSimp_sepPosMonomial1" (formula "16") (term "1,0,0"))
                                 (rule "mul_literals" (formula "16") (term "1,1,0,0"))
                                 (rule "nnf_notAnd" (formula "15") (term "0,0,0"))
                                 (rule "inEqSimp_notGeq" (formula "15") (term "1,0,0,0"))
                                 (rule "times_zero_1" (formula "15") (term "1,0,0,1,0,0,0"))
                                 (rule "add_literals" (formula "15") (term "0,0,1,0,0,0"))
                                 (rule "inEqSimp_sepPosMonomial0" (formula "15") (term "1,0,0,0"))
                                 (rule "mul_literals" (formula "15") (term "1,1,0,0,0"))
                                 (rule "inEqSimp_notLeq" (formula "15") (term "0,0,0,0"))
                                 (rule "polySimp_rightDist" (formula "15") (term "1,0,0,0,0,0,0"))
                                 (rule "mul_literals" (formula "15") (term "0,1,0,0,0,0,0,0"))
                                 (rule "polySimp_addAssoc" (formula "15") (term "0,0,0,0,0,0"))
                                 (rule "add_literals" (formula "15") (term "0,0,0,0,0,0,0"))
                                 (rule "add_zero_left" (formula "15") (term "0,0,0,0,0,0"))
                                 (rule "inEqSimp_sepPosMonomial1" (formula "15") (term "0,0,0,0"))
                                 (rule "polySimp_mulLiterals" (formula "15") (term "1,0,0,0,0"))
                                 (rule "polySimp_elimOne" (formula "15") (term "1,0,0,0,0"))
                                 (rule "nnf_notAnd" (formula "16") (term "0,0,0"))
                                 (rule "inEqSimp_notLeq" (formula "16") (term "0,0,0,0"))
                                 (rule "polySimp_rightDist" (formula "16") (term "1,0,0,0,0,0,0"))
                                 (rule "mul_literals" (formula "16") (term "0,1,0,0,0,0,0,0"))
                                 (rule "polySimp_addAssoc" (formula "16") (term "0,0,0,0,0,0"))
                                 (rule "add_literals" (formula "16") (term "0,0,0,0,0,0,0"))
                                 (rule "add_zero_left" (formula "16") (term "0,0,0,0,0,0"))
                                 (rule "inEqSimp_sepPosMonomial1" (formula "16") (term "0,0,0,0"))
                                 (rule "polySimp_mulLiterals" (formula "16") (term "1,0,0,0,0"))
                                 (rule "polySimp_elimOne" (formula "16") (term "1,0,0,0,0"))
                                 (rule "inEqSimp_notGeq" (formula "16") (term "1,0,0,0"))
                                 (rule "times_zero_1" (formula "16") (term "1,0,0,1,0,0,0"))
                                 (rule "add_literals" (formula "16") (term "0,0,1,0,0,0"))
                                 (rule "inEqSimp_sepPosMonomial0" (formula "16") (term "1,0,0,0"))
                                 (rule "mul_literals" (formula "16") (term "1,1,0,0,0"))
                                 (rule "commute_or_2" (formula "12") (term "0"))
                                 (rule "commute_or" (formula "11") (term "0,0"))
                                 (rule "commute_or_2" (formula "15") (term "0"))
                                 (rule "commute_or_2" (formula "16") (term "0"))
                                 (rule "commute_or" (formula "12") (term "0,0"))
                                 (rule "commute_or_2" (formula "12") (term "0"))
                                 (rule "commute_or_2" (formula "15") (term "0,0"))
                                 (rule "commute_or_2" (formula "16") (term "0,0"))
                                 (rule "commute_and" (formula "11") (term "0,0,1,0"))
                                 (rule "commute_or" (formula "15") (term "0,0,0"))
                                 (rule "commute_or_2" (formula "15") (term "0,0"))
                                 (rule "commute_or_2" (formula "15") (term "0"))
                                 (rule "commute_or" (formula "16") (term "0,0,0"))
                                 (rule "commute_or_2" (formula "16") (term "0,0"))
                                 (rule "commute_or_2" (formula "16") (term "0"))
                                 (rule "commute_and_2" (formula "11") (term "0,1,0"))
                                 (rule "cut_direct" (formula "32") (term "0,0,0"))
                                 (branch "CUT: result_2.<created> = TRUE TRUE"
                                     (builtin "One Step Simplification" (formula "33"))
                                    (rule "true_left" (formula "33"))
                                    (rule "seqGetAlphaCast" (formula "33") (term "0"))
                                    (rule "castedGetAny" (formula "33") (term "0"))
                                     (builtin "One Step Simplification" (formula "33"))
                                    (rule "true_left" (formula "33"))
                                    (rule "ex_pull_out3" (formula "11") (term "0"))
                                    (rule "cnf_rightDist" (formula "11") (term "0,0"))
                                    (rule "shift_paren_or" (formula "11") (term "1,0,0"))
                                    (rule "cnf_rightDist" (formula "11") (term "0,0,0"))
                                    (rule "commute_or_2" (formula "11") (term "0,0,0,0"))
                                    (rule "shift_paren_or" (formula "11") (term "1,0,0,0"))
                                    (rule "commute_or" (formula "11") (term "0,0,0,0,0"))
                                    (rule "commute_and" (formula "11") (term "0,0,0"))
                                    (rule "commute_and_2" (formula "11") (term "0,0"))
                                    (rule "ineffectiveCast" (formula "44") (term "0") (ifseqformula "1"))
                                    (rule "typeEqDerived2" (formula "2") (term "0") (ifseqformula "1"))
                                     (builtin "One Step Simplification" (formula "2"))
                                    (rule "true_left" (formula "2"))
                                    (rule "applyEq" (formula "48") (term "1,0") (ifseqformula "1"))
                                    (rule "applyEq" (formula "47") (term "1,0") (ifseqformula "1"))
                                    (rule "applyEq" (formula "45") (term "1,0") (ifseqformula "1"))
                                    (rule "close" (formula "45") (ifseqformula "32"))
                                 )
                                 (branch "CUT: result_2.<created> = TRUE FALSE"
                                     (builtin "One Step Simplification" (formula "32"))
                                    (rule "seqGetAlphaCast" (formula "33") (term "0"))
                                    (rule "castedGetAny" (formula "33") (term "0"))
                                     (builtin "One Step Simplification" (formula "33"))
                                    (rule "true_left" (formula "33"))
                                    (rule "ex_pull_out3" (formula "11") (term "0"))
                                    (rule "cnf_rightDist" (formula "11") (term "0,0"))
                                    (rule "shift_paren_or" (formula "11") (term "1,0,0"))
                                    (rule "cnf_rightDist" (formula "11") (term "0,0,0"))
                                    (rule "commute_or_2" (formula "11") (term "0,0,0,0"))
                                    (rule "shift_paren_or" (formula "11") (term "1,0,0,0"))
                                    (rule "commute_or" (formula "11") (term "0,0,0,0,0"))
                                    (rule "commute_and" (formula "11") (term "0,0,0"))
                                    (rule "commute_and_2" (formula "11") (term "0,0"))
                                    (rule "ineffectiveCast" (formula "45") (term "0") (ifseqformula "1"))
                                    (rule "typeEqDerived2" (formula "2") (term "0") (ifseqformula "1"))
                                     (builtin "One Step Simplification" (formula "2"))
                                    (rule "true_left" (formula "2"))
                                    (rule "applyEq" (formula "47") (term "1,0") (ifseqformula "1"))
                                    (rule "replace_known_right" (formula "32") (term "1,0") (ifseqformula "47"))
                                     (builtin "One Step Simplification" (formula "32"))
                                    (rule "applyEq" (formula "49") (term "1,0") (ifseqformula "1"))
                                    (rule "replace_known_right" (formula "32") (term "1") (ifseqformula "49"))
                                     (builtin "One Step Simplification" (formula "32"))
                                    (rule "applyEq" (formula "45") (term "0") (ifseqformula "1"))
                                    (rule "applyEq" (formula "47") (term "1,0") (ifseqformula "1"))
                                    (rule "close" (formula "47") (ifseqformula "32"))
                                 )
                              )
                           )
                           (branch
                              (rule "selectCreatedOfAnonAsFormulaEQ" (formula "48") (ifseqformula "32"))
                               (builtin "One Step Simplification" (formula "48"))
                              (rule "selectCreatedOfAnonAsFormulaEQ" (formula "48") (term "0,0") (ifseqformula "18"))
                              (rule "orRight" (formula "48"))
                              (rule "orRight" (formula "48"))
                              (rule "orRight" (formula "48"))
                              (rule "close" (formula "48") (ifseqformula "2"))
                           )
                        )
                     )
                  )
                  (branch "ClassCastException (!(o instanceof String))"
                      (builtin "One Step Simplification" (formula "48"))
                      (builtin "One Step Simplification" (formula "47") (ifInst ""  (formula "39")))
                     (rule "equalityToSeqGetAndSeqLenLeft" (formula "20") (inst "iv=iv"))
                     (rule "andLeft" (formula "20"))
                     (rule "inEqSimp_commuteLeq" (formula "21") (term "0,0,0"))
                     (rule "applyEq" (formula "21") (term "1,1,0,0") (ifseqformula "20"))
                     (rule "applyEq" (formula "21") (term "0,0,1,0") (ifseqformula "22"))
                      (builtin "One Step Simplification" (formula "21"))
                     (rule "true_left" (formula "21"))
                     (rule "applyEq" (formula "20") (term "0,0") (ifseqformula "21"))
                      (builtin "One Step Simplification" (formula "20"))
                     (rule "true_left" (formula "20"))
                     (rule "seqGetAlphaCast" (formula "34") (term "0"))
                     (rule "castedGetAny" (formula "34") (term "0"))
                      (builtin "One Step Simplification" (formula "34"))
                     (rule "true_left" (formula "34"))
                     (rule "methodCallThrow" (formula "48") (term "1,0,0,1"))
                     (rule "tryCatchThrow" (formula "48") (term "1,0,0,1"))
                     (rule "ifElseUnfold" (formula "48") (term "1,0,0,1") (inst "#boolv=x"))
                     (rule "variableDeclaration" (formula "48") (term "1,0,0,1") (newnames "x_1"))
                     (rule "equality_comparison_simple" (formula "48") (term "1,0,0,1"))
                     (rule "throwUnfold" (formula "48") (term "1") (inst "#v0=c"))
                     (rule "variableDeclarationAssign" (formula "48") (term "1"))
                     (rule "variableDeclaration" (formula "48") (term "1") (newnames "c"))
                     (rule "instanceCreationAssignment" (formula "48") (term "1") (inst "#v0=c_1"))
                     (rule "variableDeclarationAssign" (formula "48") (term "1"))
                     (rule "variableDeclaration" (formula "48") (term "1") (newnames "c_1"))
                     (rule "staticMethodCallStaticWithAssignmentViaTypereference" (formula "48") (term "1") (inst "#v0=c_2"))
                     (rule "variableDeclaration" (formula "48") (term "1") (newnames "c_2"))
                     (rule "methodBodyExpand" (formula "48") (term "1") (newnames "heapBefore_<createObject>,savedHeapBefore_<createObject>"))
                      (builtin "One Step Simplification" (formula "48"))
                     (rule "variableDeclaration" (formula "48") (term "1") (newnames "__NEW__"))
                     (rule "staticMethodCallStaticWithAssignmentViaTypereference" (formula "48") (term "1") (inst "#v0=c_3"))
                     (rule "variableDeclaration" (formula "48") (term "1") (newnames "c_3"))
                     (rule "allocateInstance" (formula "48"))
                      (builtin "One Step Simplification" (formula "49"))
                      (builtin "One Step Simplification" (formula "1"))
                     (rule "wellFormedAnonEQ" (formula "1") (term "0,1,0") (ifseqformula "32"))
                     (rule "wellFormedAnon" (formula "1") (term "0,0,1,0"))
                     (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,1,1,0") (ifseqformula "32"))
                      (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "24")) (ifInst ""  (formula "31")))
                     (rule "wellFormedAnonEQ" (formula "1") (term "0,1,0") (ifseqformula "18"))
                     (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,0,0,1,1,0") (ifseqformula "18"))
                     (rule "andLeft" (formula "1"))
                     (rule "andLeft" (formula "1"))
                     (rule "notLeft" (formula "1"))
                     (rule "replace_known_left" (formula "1") (term "0,0") (ifseqformula "7"))
                      (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "18")))
                     (rule "notLeft" (formula "1"))
                     (rule "orRight" (formula "39"))
                     (rule "orRight" (formula "39"))
                     (rule "orRight" (formula "39"))
                     (rule "blockEmpty" (formula "54") (term "1"))
                     (rule "assignment" (formula "54") (term "1"))
                      (builtin "One Step Simplification" (formula "54"))
                     (rule "methodBodyExpand" (formula "54") (term "1") (newnames "heapBefore_<create>,savedHeapBefore_<create>"))
                      (builtin "One Step Simplification" (formula "54"))
                     (rule "assignment_write_attribute_this" (formula "54") (term "1"))
                      (builtin "One Step Simplification" (formula "54"))
                     (rule "methodCallWithinClass" (formula "54") (term "1"))
                     (rule "methodBodyExpand" (formula "54") (term "1") (newnames "heapBefore_<prepareEnter>,savedHeapBefore_<prepareEnter>"))
                      (builtin "One Step Simplification" (formula "54"))
                     (rule "methodCallSuper" (formula "54") (term "1"))
                     (rule "methodBodyExpand" (formula "54") (term "1") (newnames "heapBefore_<prepare>,savedHeapBefore_<prepare>"))
                      (builtin "One Step Simplification" (formula "54"))
                     (rule "methodCallSuper" (formula "54") (term "1"))
                     (rule "methodBodyExpand" (formula "54") (term "1") (newnames "heapBefore_<prepare>_0,savedHeapBefore_<prepare>_0"))
                      (builtin "One Step Simplification" (formula "54"))
                     (rule "methodCallSuper" (formula "54") (term "1"))
                     (rule "methodBodyExpand" (formula "54") (term "1") (newnames "heapBefore_<prepare>_1,savedHeapBefore_<prepare>_1"))
                      (builtin "One Step Simplification" (formula "54"))
                     (rule "methodCallSuper" (formula "54") (term "1"))
                     (rule "methodBodyExpand" (formula "54") (term "1") (newnames "heapBefore_<prepare>_2,savedHeapBefore_<prepare>_2"))
                      (builtin "One Step Simplification" (formula "54"))
                     (rule "methodCallEmpty" (formula "54") (term "1"))
                     (rule "blockEmpty" (formula "54") (term "1"))
                     (rule "assignment_write_attribute_this" (formula "54") (term "1"))
                      (builtin "One Step Simplification" (formula "54"))
                     (rule "assignment_write_attribute_this" (formula "54") (term "1"))
                      (builtin "One Step Simplification" (formula "54"))
                     (rule "methodCallEmpty" (formula "54") (term "1"))
                     (rule "methodCallEmpty" (formula "54") (term "1"))
                     (rule "methodCallEmpty" (formula "54") (term "1"))
                     (rule "methodCallEmpty" (formula "54") (term "1"))
                     (rule "blockEmpty" (formula "54") (term "1"))
                     (rule "methodCallReturnIgnoreResult" (formula "54") (term "1"))
                     (rule "methodCallReturn" (formula "54") (term "1"))
                     (rule "assignment" (formula "54") (term "1"))
                      (builtin "One Step Simplification" (formula "54"))
                     (rule "methodCallEmpty" (formula "54") (term "1"))
                     (rule "blockEmpty" (formula "54") (term "1"))
                     (rule "assignment" (formula "54") (term "1"))
                      (builtin "One Step Simplification" (formula "54"))
                     (rule "methodBodyExpand" (formula "54") (term "1") (newnames "heapBefore_<init>,savedHeapBefore_<init>"))
                      (builtin "One Step Simplification" (formula "54"))
                     (rule "methodCallSuper" (formula "54") (term "1"))
                     (rule "methodBodyExpand" (formula "54") (term "1") (newnames "heapBefore_<init>_0,savedHeapBefore_<init>_0"))
                      (builtin "One Step Simplification" (formula "54"))
                     (rule "methodCallSuper" (formula "54") (term "1"))
                     (rule "methodBodyExpand" (formula "54") (term "1") (newnames "heapBefore_<init>_1,savedHeapBefore_<init>_1"))
                      (builtin "One Step Simplification" (formula "54"))
                     (rule "methodCallSuper" (formula "54") (term "1"))
                     (rule "methodBodyExpand" (formula "54") (term "1") (newnames "heapBefore_<init>_2,savedHeapBefore_<init>_2"))
                      (builtin "One Step Simplification" (formula "54"))
                     (rule "methodCallSuper" (formula "54") (term "1"))
                     (rule "methodBodyExpand" (formula "54") (term "1") (newnames "heapBefore_<init>_3,savedHeapBefore_<init>_3"))
                      (builtin "One Step Simplification" (formula "54"))
                     (rule "methodCallEmpty" (formula "54") (term "1"))
                     (rule "blockEmpty" (formula "54") (term "1"))
                     (rule "assignment_write_attribute_this" (formula "54") (term "1"))
                      (builtin "One Step Simplification" (formula "54"))
                     (rule "assignment_write_attribute_this" (formula "54") (term "1"))
                      (builtin "One Step Simplification" (formula "54"))
                     (rule "methodCallEmpty" (formula "54") (term "1"))
                     (rule "methodCallEmpty" (formula "54") (term "1"))
                     (rule "methodCallEmpty" (formula "54") (term "1"))
                     (rule "methodCallEmpty" (formula "54") (term "1"))
                     (rule "blockEmpty" (formula "54") (term "1"))
                     (rule "assignment_write_attribute" (formula "54") (term "1"))
                     (branch "Normal Execution (c_1 != null)"
                         (builtin "One Step Simplification" (formula "55"))
                         (builtin "One Step Simplification" (formula "54") (ifInst ""  (formula "43")))
                        (rule "false_right" (formula "54"))
                        (rule "assignment" (formula "54") (term "1"))
                         (builtin "One Step Simplification" (formula "54"))
                        (rule "tryCatchThrow" (formula "54") (term "1"))
                         (builtin "One Step Simplification" (formula "54"))
                        (rule "ifElseUnfold" (formula "54") (term "1") (inst "#boolv=x"))
                        (rule "variableDeclaration" (formula "54") (term "1") (newnames "x_2"))
                        (rule "equality_comparison_simple" (formula "54") (term "1"))
                         (builtin "One Step Simplification" (formula "54"))
                        (rule "replace_known_right" (formula "54") (term "0,0,1,0") (ifseqformula "43"))
                         (builtin "One Step Simplification" (formula "54"))
                        (rule "ifElseSplit" (formula "54"))
                        (branch "if x_2 true"
                            (builtin "One Step Simplification" (formula "1"))
                           (rule "closeFalse" (formula "1"))
                        )
                        (branch "if x_2 false"
                            (builtin "One Step Simplification" (formula "55"))
                            (builtin "One Step Simplification" (formula "1"))
                           (rule "true_left" (formula "1"))
                           (rule "ifElseSplit" (formula "54"))
                           (branch "if c instanceof java.lang.Throwable true"
                               (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "44")))
                              (rule "true_left" (formula "1"))
                              (rule "variableDeclaration" (formula "54") (term "1") (newnames "e"))
                              (rule "delete_unnecessary_cast" (formula "54") (term "1"))
                               (builtin "One Step Simplification" (formula "55"))
                               (builtin "One Step Simplification" (formula "1"))
                              (rule "true_left" (formula "1"))
                              (rule "assignment" (formula "54") (term "1"))
                               (builtin "One Step Simplification" (formula "54"))
                              (rule "assignment" (formula "54") (term "1"))
                               (builtin "One Step Simplification" (formula "54"))
                              (rule "methodCallEmpty" (formula "54") (term "1"))
                              (rule "emptyModality" (formula "54") (term "1"))
                               (builtin "One Step Simplification" (formula "54"))
                              (rule "replace_known_right" (formula "54") (term "0,0,1,0") (ifseqformula "43"))
                               (builtin "One Step Simplification" (formula "54"))
                              (rule "ifElseSplit" (formula "54"))
                              (branch "if x_1 true"
                                  (builtin "One Step Simplification" (formula "55"))
                                  (builtin "One Step Simplification" (formula "1"))
                                 (rule "closeFalse" (formula "1"))
                              )
                              (branch "if x_1 false"
                                  (builtin "One Step Simplification" (formula "55"))
                                  (builtin "One Step Simplification" (formula "1"))
                                 (rule "true_left" (formula "1"))
                                 (rule "ifElseSplit" (formula "54"))
                                 (branch "if thrownExc instanceof java.lang.Throwable true"
                                     (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "44")))
                                    (rule "true_left" (formula "1"))
                                    (rule "variableDeclaration" (formula "54") (term "1") (newnames "e_1"))
                                    (rule "delete_unnecessary_cast" (formula "54") (term "1"))
                                     (builtin "One Step Simplification" (formula "55"))
                                     (builtin "One Step Simplification" (formula "1"))
                                    (rule "true_left" (formula "1"))
                                    (rule "assignment" (formula "54") (term "1"))
                                     (builtin "One Step Simplification" (formula "54"))
                                    (rule "emptyModality" (formula "54") (term "1"))
                                    (rule "andRight" (formula "54"))
                                    (branch "Case 1"
                                       (rule "andRight" (formula "54"))
                                       (branch
                                          (rule "andRight" (formula "54"))
                                          (branch
                                              (builtin "One Step Simplification" (formula "54"))
                                             (rule "dismissNonSelectedField" (formula "54") (term "1"))
                                             (rule "dismissNonSelectedField" (formula "54") (term "1"))
                                             (rule "dismissNonSelectedField" (formula "54") (term "1"))
                                             (rule "inEqSimp_ltToLeq" (formula "11") (term "0,0,0,1,0"))
                                             (rule "polySimp_mulComm0" (formula "11") (term "1,0,0,0,0,0,1,0"))
                                             (rule "inEqSimp_ltToLeq" (formula "11") (term "0,0,0"))
                                             (rule "polySimp_mulComm0" (formula "11") (term "1,0,0,0,0,0"))
                                             (rule "inEqSimp_ltToLeq" (formula "15") (term "0,0,0,0,0"))
                                             (rule "polySimp_mulComm0" (formula "15") (term "1,0,0,0,0,0,0,0"))
                                             (rule "inEqSimp_ltToLeq" (formula "12") (term "0,0,0"))
                                             (rule "polySimp_mulComm0" (formula "12") (term "1,0,0,0,0,0"))
                                             (rule "inEqSimp_ltToLeq" (formula "16") (term "0,0,0,0,0"))
                                             (rule "polySimp_mulComm0" (formula "16") (term "1,0,0,0,0,0,0,0"))
                                             (rule "inEqSimp_ltToLeq" (formula "28"))
                                             (rule "polySimp_mulComm0" (formula "28") (term "1,0,0"))
                                             (rule "polySimp_addComm1" (formula "28") (term "0"))
                                             (rule "inEqSimp_sepPosMonomial1" (formula "37"))
                                             (rule "mul_literals" (formula "37") (term "1"))
                                             (rule "inEqSimp_sepPosMonomial0" (formula "11") (term "0,0,0,1,0"))
                                             (rule "polySimp_mulComm0" (formula "11") (term "1,0,0,0,1,0"))
                                             (rule "polySimp_rightDist" (formula "11") (term "1,0,0,0,1,0"))
                                             (rule "polySimp_mulLiterals" (formula "11") (term "1,1,0,0,0,1,0"))
                                             (rule "mul_literals" (formula "11") (term "0,1,0,0,0,1,0"))
                                             (rule "polySimp_elimOne" (formula "11") (term "1,1,0,0,0,1,0"))
                                             (rule "inEqSimp_sepPosMonomial0" (formula "11") (term "0,0,0"))
                                             (rule "polySimp_mulComm0" (formula "11") (term "1,0,0,0"))
                                             (rule "polySimp_rightDist" (formula "11") (term "1,0,0,0"))
                                             (rule "polySimp_mulLiterals" (formula "11") (term "1,1,0,0,0"))
                                             (rule "mul_literals" (formula "11") (term "0,1,0,0,0"))
                                             (rule "polySimp_elimOne" (formula "11") (term "1,1,0,0,0"))
                                             (rule "inEqSimp_sepPosMonomial0" (formula "15") (term "0,0,0,0,0"))
                                             (rule "polySimp_mulComm0" (formula "15") (term "1,0,0,0,0,0"))
                                             (rule "polySimp_rightDist" (formula "15") (term "1,0,0,0,0,0"))
                                             (rule "mul_literals" (formula "15") (term "0,1,0,0,0,0,0"))
                                             (rule "polySimp_mulLiterals" (formula "15") (term "1,1,0,0,0,0,0"))
                                             (rule "polySimp_elimOne" (formula "15") (term "1,1,0,0,0,0,0"))
                                             (rule "inEqSimp_sepPosMonomial0" (formula "12") (term "0,0,0"))
                                             (rule "polySimp_mulComm0" (formula "12") (term "1,0,0,0"))
                                             (rule "polySimp_rightDist" (formula "12") (term "1,0,0,0"))
                                             (rule "mul_literals" (formula "12") (term "0,1,0,0,0"))
                                             (rule "polySimp_mulLiterals" (formula "12") (term "1,1,0,0,0"))
                                             (rule "polySimp_elimOne" (formula "12") (term "1,1,0,0,0"))
                                             (rule "inEqSimp_sepPosMonomial0" (formula "16") (term "0,0,0,0,0"))
                                             (rule "polySimp_mulComm0" (formula "16") (term "1,0,0,0,0,0"))
                                             (rule "polySimp_rightDist" (formula "16") (term "1,0,0,0,0,0"))
                                             (rule "mul_literals" (formula "16") (term "0,1,0,0,0,0,0"))
                                             (rule "polySimp_mulLiterals" (formula "16") (term "1,1,0,0,0,0,0"))
                                             (rule "polySimp_elimOne" (formula "16") (term "1,1,0,0,0,0,0"))
                                             (rule "inEqSimp_sepNegMonomial0" (formula "28"))
                                             (rule "polySimp_mulLiterals" (formula "28") (term "0"))
                                             (rule "polySimp_elimOne" (formula "28") (term "0"))
                                             (rule "inEqSimp_contradEq7" (formula "43") (ifseqformula "37"))
                                             (rule "polySimp_mulComm0" (formula "43") (term "1,0,0"))
                                             (rule "polySimp_pullOutFactor1b" (formula "43") (term "0,0"))
                                             (rule "add_literals" (formula "43") (term "1,1,0,0"))
                                             (rule "times_zero_1" (formula "43") (term "1,0,0"))
                                             (rule "add_literals" (formula "43") (term "0,0"))
                                             (rule "leq_literals" (formula "43") (term "0"))
                                              (builtin "One Step Simplification" (formula "43"))
                                             (rule "false_right" (formula "43"))
                                             (rule "inEqSimp_subsumption1" (formula "26") (ifseqformula "37"))
                                             (rule "inEqSimp_homoInEq0" (formula "26") (term "0"))
                                             (rule "polySimp_pullOutFactor1b" (formula "26") (term "0,0"))
                                             (rule "add_literals" (formula "26") (term "1,1,0,0"))
                                             (rule "times_zero_1" (formula "26") (term "1,0,0"))
                                             (rule "add_zero_right" (formula "26") (term "0,0"))
                                             (rule "qeq_literals" (formula "26") (term "0"))
                                              (builtin "One Step Simplification" (formula "26"))
                                             (rule "true_left" (formula "26"))
                                             (rule "inEqSimp_subsumption1" (formula "35") (ifseqformula "25"))
                                             (rule "leq_literals" (formula "35") (term "0"))
                                              (builtin "One Step Simplification" (formula "35"))
                                             (rule "true_left" (formula "35"))
                                             (rule "pullOutSelect" (formula "50") (term "1") (inst "selectSK=de_polyas_core3_open_cred_CredTool_record_1"))
                                             (rule "simplifySelectOfCreate" (formula "1"))
                                              (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "41")))
                                             (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "31"))
                                              (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "48")))
                                             (rule "replaceKnownSelect_taclet10_15" (formula "1") (term "2,0"))
                                             (rule "replaceKnownAuxiliaryConstant_taclet10_19" (formula "1") (term "2,0"))
                                             (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,0,1,0,0") (ifseqformula "19"))
                                             (rule "replace_known_left" (formula "1") (term "0,0,0,1,0,0") (ifseqformula "8"))
                                              (builtin "One Step Simplification" (formula "1"))
                                             (rule "elementOfSingleton" (formula "1") (term "0,0"))
                                              (builtin "One Step Simplification" (formula "1"))
                                             (rule "applyEqReverse" (formula "51") (term "1") (ifseqformula "1"))
                                             (rule "hideAuxiliaryEq" (formula "1"))
                                             (rule "inEqSimp_and_subsumption3" (formula "15") (term "0,0,0"))
                                             (rule "leq_literals" (formula "15") (term "0,1,0,0,0,0"))
                                              (builtin "One Step Simplification" (formula "15"))
                                             (rule "inEqSimp_and_subsumption3" (formula "16") (term "0,0,0"))
                                             (rule "leq_literals" (formula "16") (term "0,1,0,0,0,0"))
                                              (builtin "One Step Simplification" (formula "16"))
                                             (rule "nnf_imp2or" (formula "11") (term "0"))
                                             (rule "nnf_imp2or" (formula "12") (term "0"))
                                             (rule "nnf_imp2or" (formula "15") (term "0"))
                                             (rule "nnf_imp2or" (formula "16") (term "0"))
                                             (rule "nnf_notAnd" (formula "11") (term "0,0"))
                                             (rule "inEqSimp_notLeq" (formula "11") (term "0,0,0"))
                                             (rule "polySimp_rightDist" (formula "11") (term "1,0,0,0,0,0"))
                                             (rule "mul_literals" (formula "11") (term "0,1,0,0,0,0,0"))
                                             (rule "polySimp_addAssoc" (formula "11") (term "0,0,0,0,0"))
                                             (rule "add_literals" (formula "11") (term "0,0,0,0,0,0"))
                                             (rule "add_zero_left" (formula "11") (term "0,0,0,0,0"))
                                             (rule "inEqSimp_sepPosMonomial1" (formula "11") (term "0,0,0"))
                                             (rule "polySimp_mulLiterals" (formula "11") (term "1,0,0,0"))
                                             (rule "polySimp_elimOne" (formula "11") (term "1,0,0,0"))
                                             (rule "inEqSimp_notGeq" (formula "11") (term "1,0,0"))
                                             (rule "mul_literals" (formula "11") (term "1,0,0,1,0,0"))
                                             (rule "add_literals" (formula "11") (term "0,0,1,0,0"))
                                             (rule "inEqSimp_sepPosMonomial0" (formula "11") (term "1,0,0"))
                                             (rule "mul_literals" (formula "11") (term "1,1,0,0"))
                                             (rule "nnf_notAnd" (formula "12") (term "0,0"))
                                             (rule "inEqSimp_notGeq" (formula "12") (term "1,0,0"))
                                             (rule "mul_literals" (formula "12") (term "1,0,0,1,0,0"))
                                             (rule "add_literals" (formula "12") (term "0,0,1,0,0"))
                                             (rule "inEqSimp_sepPosMonomial0" (formula "12") (term "1,0,0"))
                                             (rule "mul_literals" (formula "12") (term "1,1,0,0"))
                                             (rule "inEqSimp_notLeq" (formula "12") (term "0,0,0"))
                                             (rule "polySimp_rightDist" (formula "12") (term "1,0,0,0,0,0"))
                                             (rule "mul_literals" (formula "12") (term "0,1,0,0,0,0,0"))
                                             (rule "polySimp_addAssoc" (formula "12") (term "0,0,0,0,0"))
                                             (rule "add_literals" (formula "12") (term "0,0,0,0,0,0"))
                                             (rule "add_zero_left" (formula "12") (term "0,0,0,0,0"))
                                             (rule "inEqSimp_sepPosMonomial1" (formula "12") (term "0,0,0"))
                                             (rule "polySimp_mulLiterals" (formula "12") (term "1,0,0,0"))
                                             (rule "polySimp_elimOne" (formula "12") (term "1,0,0,0"))
                                             (rule "nnf_notAnd" (formula "15") (term "0,0"))
                                             (rule "inEqSimp_notLeq" (formula "15") (term "1,0,0"))
                                             (rule "mul_literals" (formula "15") (term "1,0,0,1,0,0"))
                                             (rule "add_literals" (formula "15") (term "0,0,1,0,0"))
                                             (rule "inEqSimp_sepPosMonomial1" (formula "15") (term "1,0,0"))
                                             (rule "mul_literals" (formula "15") (term "1,1,0,0"))
                                             (rule "nnf_notAnd" (formula "16") (term "0,0"))
                                             (rule "inEqSimp_notLeq" (formula "16") (term "1,0,0"))
                                             (rule "mul_literals" (formula "16") (term "1,0,0,1,0,0"))
                                             (rule "add_literals" (formula "16") (term "0,0,1,0,0"))
                                             (rule "inEqSimp_sepPosMonomial1" (formula "16") (term "1,0,0"))
                                             (rule "mul_literals" (formula "16") (term "1,1,0,0"))
                                             (rule "nnf_notAnd" (formula "15") (term "0,0,0"))
                                             (rule "inEqSimp_notLeq" (formula "15") (term "0,0,0,0"))
                                             (rule "polySimp_rightDist" (formula "15") (term "1,0,0,0,0,0,0"))
                                             (rule "mul_literals" (formula "15") (term "0,1,0,0,0,0,0,0"))
                                             (rule "polySimp_addAssoc" (formula "15") (term "0,0,0,0,0,0"))
                                             (rule "add_literals" (formula "15") (term "0,0,0,0,0,0,0"))
                                             (rule "add_zero_left" (formula "15") (term "0,0,0,0,0,0"))
                                             (rule "inEqSimp_sepPosMonomial1" (formula "15") (term "0,0,0,0"))
                                             (rule "polySimp_mulLiterals" (formula "15") (term "1,0,0,0,0"))
                                             (rule "polySimp_elimOne" (formula "15") (term "1,0,0,0,0"))
                                             (rule "inEqSimp_notGeq" (formula "15") (term "1,0,0,0"))
                                             (rule "mul_literals" (formula "15") (term "1,0,0,1,0,0,0"))
                                             (rule "add_literals" (formula "15") (term "0,0,1,0,0,0"))
                                             (rule "inEqSimp_sepPosMonomial0" (formula "15") (term "1,0,0,0"))
                                             (rule "mul_literals" (formula "15") (term "1,1,0,0,0"))
                                             (rule "nnf_notAnd" (formula "16") (term "0,0,0"))
                                             (rule "inEqSimp_notGeq" (formula "16") (term "1,0,0,0"))
                                             (rule "mul_literals" (formula "16") (term "1,0,0,1,0,0,0"))
                                             (rule "add_literals" (formula "16") (term "0,0,1,0,0,0"))
                                             (rule "inEqSimp_sepPosMonomial0" (formula "16") (term "1,0,0,0"))
                                             (rule "mul_literals" (formula "16") (term "1,1,0,0,0"))
                                             (rule "inEqSimp_notLeq" (formula "16") (term "0,0,0,0"))
                                             (rule "polySimp_rightDist" (formula "16") (term "1,0,0,0,0,0,0"))
                                             (rule "mul_literals" (formula "16") (term "0,1,0,0,0,0,0,0"))
                                             (rule "polySimp_addAssoc" (formula "16") (term "0,0,0,0,0,0"))
                                             (rule "add_literals" (formula "16") (term "0,0,0,0,0,0,0"))
                                             (rule "add_zero_left" (formula "16") (term "0,0,0,0,0,0"))
                                             (rule "inEqSimp_sepPosMonomial1" (formula "16") (term "0,0,0,0"))
                                             (rule "polySimp_mulLiterals" (formula "16") (term "1,0,0,0,0"))
                                             (rule "polySimp_elimOne" (formula "16") (term "1,0,0,0,0"))
                                             (rule "Class_invariant_axiom_for_org_apache_commons_csv_CSVRecord" (formula "50") (inst "i=i") (inst "i_0=i_0"))
                                             (rule "expand_inInt" (formula "50") (term "1,0,0,1"))
                                             (rule "expand_inInt" (formula "50") (term "1,0,0,1,0"))
                                             (rule "replace_int_MIN" (formula "50") (term "0,1,1,0,0,1"))
                                             (rule "replace_int_MAX" (formula "50") (term "1,0,1,0,0,1"))
                                             (rule "replace_int_MIN" (formula "50") (term "0,1,1,0,0,1,0"))
                                             (rule "replace_int_MAX" (formula "50") (term "1,0,1,0,0,1,0"))
                                             (rule "eqSymm" (formula "50") (term "0,0"))
                                             (rule "dismissNonSelectedField" (formula "50") (term "0,0,0,0,1,0,1"))
                                             (rule "dismissNonSelectedField" (formula "50") (term "0,0,0,0,1,0,1,0"))
                                             (rule "dismissNonSelectedField" (formula "50") (term "0,1,1,0,0,0,1,0"))
                                             (rule "dismissNonSelectedField" (formula "50") (term "0,1,1,0,0,0,1"))
                                             (rule "dismissNonSelectedField" (formula "50") (term "0,0,0,0"))
                                             (rule "eqSymm" (formula "50") (term "0,0"))
                                             (rule "castedGetAny" (formula "50") (term "0,0,1,0,1"))
                                             (rule "castedGetAny" (formula "50") (term "0,0,1,0,1,0"))
                                             (rule "dismissNonSelectedField" (formula "50") (term "0,1,1,0,0,0,1,0"))
                                             (rule "dismissNonSelectedField" (formula "50") (term "0,1,1,0,0,0,1"))
                                             (rule "dismissNonSelectedField" (formula "50") (term "0,1,0,0"))
                                             (rule "dismissNonSelectedField" (formula "50") (term "0,0,0,0"))
                                             (rule "dismissNonSelectedField" (formula "50") (term "0,0,0,1,0,1"))
                                             (rule "dismissNonSelectedField" (formula "50") (term "0,0,0,1,0,1,0"))
                                             (rule "dismissNonSelectedField" (formula "50") (term "0,1,1,0,0,0,1,0"))
                                             (rule "dismissNonSelectedField" (formula "50") (term "0,1,1,0,0,0,1"))
                                             (rule "dismissNonSelectedField" (formula "50") (term "0,1,0,0"))
                                             (rule "dismissNonSelectedField" (formula "50") (term "0,0,0,0"))
                                             (rule "dismissNonSelectedField" (formula "50") (term "0,0,0,1,0,1"))
                                             (rule "dismissNonSelectedField" (formula "50") (term "0,0,0,1,0,1,0"))
                                             (rule "dismissNonSelectedField" (formula "50") (term "0,0,0,0"))
                                             (rule "eqSymm" (formula "50") (term "0,0"))
                                             (rule "inEqSimp_ltToLeq" (formula "50") (term "1,0,0,0,1,0"))
                                             (rule "polySimp_mulComm0" (formula "50") (term "1,0,0,1,0,0,0,1,0"))
                                             (rule "inEqSimp_ltToLeq" (formula "50") (term "1,0,0,0,1"))
                                             (rule "polySimp_mulComm0" (formula "50") (term "1,0,0,1,0,0,0,1"))
                                             (rule "inEqSimp_commuteLeq" (formula "50") (term "0,0,0,0,1"))
                                             (rule "inEqSimp_commuteLeq" (formula "50") (term "0,0,0,0,1,0"))
                                             (rule "inEqSimp_commuteLeq" (formula "50") (term "1,1,0,0,1"))
                                             (rule "inEqSimp_commuteLeq" (formula "50") (term "1,1,0,0,1,0"))
                                             (rule "inEqSimp_sepPosMonomial0" (formula "50") (term "1,0,0,0,1,0"))
                                             (rule "polySimp_mulComm0" (formula "50") (term "1,1,0,0,0,1,0"))
                                             (rule "polySimp_rightDist" (formula "50") (term "1,1,0,0,0,1,0"))
                                             (rule "mul_literals" (formula "50") (term "0,1,1,0,0,0,1,0"))
                                             (rule "polySimp_mulLiterals" (formula "50") (term "1,1,1,0,0,0,1,0"))
                                             (rule "polySimp_elimOne" (formula "50") (term "1,1,1,0,0,0,1,0"))
                                             (rule "inEqSimp_sepPosMonomial0" (formula "50") (term "1,0,0,0,1"))
                                             (rule "polySimp_mulComm0" (formula "50") (term "1,1,0,0,0,1"))
                                             (rule "polySimp_rightDist" (formula "50") (term "1,1,0,0,0,1"))
                                             (rule "polySimp_mulLiterals" (formula "50") (term "1,1,1,0,0,0,1"))
                                             (rule "mul_literals" (formula "50") (term "0,1,1,0,0,0,1"))
                                             (rule "polySimp_elimOne" (formula "50") (term "1,1,1,0,0,0,1"))
                                             (rule "pullOutSelect" (formula "50") (term "0,0,0,1,0,1") (inst "selectSK=org_apache_commons_csv_CSVRecord_value_seq_2"))
                                             (rule "applyEq" (formula "51") (term "0,1,1,1,0,0,0,1") (ifseqformula "1"))
                                             (rule "applyEq" (formula "51") (term "0,0,0,0") (ifseqformula "1"))
                                             (rule "simplifySelectOfCreate" (formula "1"))
                                              (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "41")))
                                             (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "31"))
                                              (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "45")))
                                             (rule "replaceKnownSelect_taclet10_22" (formula "1") (term "2,0"))
                                             (rule "replaceKnownAuxiliaryConstant_taclet0010_26" (formula "1") (term "2,0"))
                                             (rule "replaceKnownAuxiliaryConstant_taclet0010_27" (formula "1") (term "2,0"))
                                             (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,0,1,0,0") (ifseqformula "19"))
                                             (rule "eqSymm" (formula "51") (term "0,0"))
                                             (rule "replace_known_left" (formula "1") (term "0,0,0,1,0,0") (ifseqformula "3"))
                                              (builtin "One Step Simplification" (formula "1"))
                                             (rule "elementOfSingleton" (formula "1") (term "0,0"))
                                              (builtin "One Step Simplification" (formula "1"))
                                             (rule "applyEqReverse" (formula "51") (term "0,1,1,1,0,0,0,1") (ifseqformula "1"))
                                             (rule "applyEqReverse" (formula "51") (term "0,0,0,1,0,1") (ifseqformula "1"))
                                             (rule "applyEqReverse" (formula "51") (term "0,1,0,0") (ifseqformula "1"))
                                             (rule "hideAuxiliaryEq" (formula "1"))
                                             (rule "applyEq" (formula "50") (term "1,1,1,0,0,0,1") (ifseqformula "14"))
                                             (rule "applyEq" (formula "50") (term "1,0,0") (ifseqformula "14"))
                                             (rule "pullOutSelect" (formula "50") (term "0,0,0,1,0,1,0") (inst "selectSK=org_apache_commons_csv_CSVRecord_key_seq_2"))
                                             (rule "applyEq" (formula "51") (term "0,1,1,1,0,0,0,1,0") (ifseqformula "1"))
                                             (rule "applyEq" (formula "51") (term "0,0,0,0") (ifseqformula "1"))
                                             (rule "simplifySelectOfCreate" (formula "1"))
                                              (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "41")))
                                             (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "31"))
                                              (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "45")))
                                             (rule "replaceKnownSelect_taclet10_20" (formula "1") (term "2,0"))
                                             (rule "replaceKnownAuxiliaryConstant_taclet0010_24" (formula "1") (term "2,0"))
                                             (rule "replaceKnownAuxiliaryConstant_taclet0010_25" (formula "1") (term "2,0"))
                                             (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,0,1,0,0") (ifseqformula "19"))
                                             (rule "eqSymm" (formula "51") (term "0,0"))
                                             (rule "replace_known_left" (formula "1") (term "0,0,0,1,0,0") (ifseqformula "3"))
                                              (builtin "One Step Simplification" (formula "1"))
                                             (rule "elementOfSingleton" (formula "1") (term "0,0"))
                                              (builtin "One Step Simplification" (formula "1"))
                                             (rule "applyEqReverse" (formula "51") (term "0,1,1,1,0,0,0,1,0") (ifseqformula "1"))
                                             (rule "applyEqReverse" (formula "51") (term "0,0,0,1,0,1,0") (ifseqformula "1"))
                                             (rule "applyEqReverse" (formula "51") (term "0,1,0,0") (ifseqformula "1"))
                                              (builtin "One Step Simplification" (formula "51"))
                                             (rule "hideAuxiliaryEq" (formula "1"))
                                             (rule "nnf_imp2or" (formula "50") (term "0,0"))
                                             (rule "nnf_imp2or" (formula "50") (term "0,1"))
                                             (rule "nnf_notAnd" (formula "50") (term "0,0,0"))
                                             (rule "nnf_notAnd" (formula "50") (term "0,0,1"))
                                             (rule "nnf_notAnd" (formula "50") (term "1,0,0,0"))
                                             (rule "inEqSimp_notLeq" (formula "50") (term "0,1,0,0,0"))
                                             (rule "mul_literals" (formula "50") (term "1,0,0,0,1,0,0,0"))
                                             (rule "add_literals" (formula "50") (term "0,0,0,1,0,0,0"))
                                             (rule "inEqSimp_sepPosMonomial1" (formula "50") (term "0,1,0,0,0"))
                                             (rule "mul_literals" (formula "50") (term "1,0,1,0,0,0"))
                                             (rule "inEqSimp_notGeq" (formula "50") (term "1,1,0,0,0"))
                                             (rule "mul_literals" (formula "50") (term "1,0,0,1,1,0,0,0"))
                                             (rule "add_literals" (formula "50") (term "0,0,1,1,0,0,0"))
                                             (rule "inEqSimp_sepPosMonomial0" (formula "50") (term "1,1,0,0,0"))
                                             (rule "mul_literals" (formula "50") (term "1,1,1,0,0,0"))
                                             (rule "nnf_notAnd" (formula "50") (term "0,0,0,0"))
                                             (rule "inEqSimp_notGeq" (formula "50") (term "0,0,0,0,0"))
                                             (rule "times_zero_1" (formula "50") (term "1,0,0,0,0,0,0,0"))
                                             (rule "add_literals" (formula "50") (term "0,0,0,0,0,0,0"))
                                             (rule "inEqSimp_sepPosMonomial0" (formula "50") (term "0,0,0,0,0"))
                                             (rule "mul_literals" (formula "50") (term "1,0,0,0,0,0"))
                                             (rule "inEqSimp_notLeq" (formula "50") (term "1,0,0,0,0"))
                                             (rule "polySimp_rightDist" (formula "50") (term "1,0,0,1,0,0,0,0"))
                                             (rule "mul_literals" (formula "50") (term "0,1,0,0,1,0,0,0,0"))
                                             (rule "polySimp_addAssoc" (formula "50") (term "0,0,1,0,0,0,0"))
                                             (rule "add_literals" (formula "50") (term "0,0,0,1,0,0,0,0"))
                                             (rule "add_zero_left" (formula "50") (term "0,0,1,0,0,0,0"))
                                             (rule "inEqSimp_sepPosMonomial1" (formula "50") (term "1,0,0,0,0"))
                                             (rule "polySimp_mulLiterals" (formula "50") (term "1,1,0,0,0,0"))
                                             (rule "polySimp_elimOne" (formula "50") (term "1,1,0,0,0,0"))
                                             (rule "nnf_notAnd" (formula "50") (term "1,0,0,1"))
                                             (rule "inEqSimp_notLeq" (formula "50") (term "0,1,0,0,1"))
                                             (rule "mul_literals" (formula "50") (term "1,0,0,0,1,0,0,1"))
                                             (rule "add_literals" (formula "50") (term "0,0,0,1,0,0,1"))
                                             (rule "inEqSimp_sepPosMonomial1" (formula "50") (term "0,1,0,0,1"))
                                             (rule "mul_literals" (formula "50") (term "1,0,1,0,0,1"))
                                             (rule "inEqSimp_notGeq" (formula "50") (term "1,1,0,0,1"))
                                             (rule "mul_literals" (formula "50") (term "1,0,0,1,1,0,0,1"))
                                             (rule "add_literals" (formula "50") (term "0,0,1,1,0,0,1"))
                                             (rule "inEqSimp_sepPosMonomial0" (formula "50") (term "1,1,0,0,1"))
                                             (rule "mul_literals" (formula "50") (term "1,1,1,0,0,1"))
                                             (rule "nnf_notAnd" (formula "50") (term "0,0,0,1"))
                                             (rule "inEqSimp_notLeq" (formula "50") (term "1,0,0,0,1"))
                                             (rule "polySimp_rightDist" (formula "50") (term "1,0,0,1,0,0,0,1"))
                                             (rule "mul_literals" (formula "50") (term "0,1,0,0,1,0,0,0,1"))
                                             (rule "polySimp_addAssoc" (formula "50") (term "0,0,1,0,0,0,1"))
                                             (rule "add_literals" (formula "50") (term "0,0,0,1,0,0,0,1"))
                                             (rule "add_zero_left" (formula "50") (term "0,0,1,0,0,0,1"))
                                             (rule "inEqSimp_sepPosMonomial1" (formula "50") (term "1,0,0,0,1"))
                                             (rule "polySimp_mulLiterals" (formula "50") (term "1,1,0,0,0,1"))
                                             (rule "polySimp_elimOne" (formula "50") (term "1,1,0,0,0,1"))
                                             (rule "inEqSimp_notGeq" (formula "50") (term "0,0,0,0,1"))
                                             (rule "mul_literals" (formula "50") (term "1,0,0,0,0,0,0,1"))
                                             (rule "add_literals" (formula "50") (term "0,0,0,0,0,0,1"))
                                             (rule "inEqSimp_sepPosMonomial0" (formula "50") (term "0,0,0,0,1"))
                                             (rule "mul_literals" (formula "50") (term "1,0,0,0,0,1"))
                                             (rule "commute_or_2" (formula "12") (term "0"))
                                             (rule "commute_or" (formula "11") (term "0,0"))
                                             (rule "commute_or_2" (formula "15") (term "0"))
                                             (rule "commute_or_2" (formula "16") (term "0"))
                                             (rule "commute_and" (formula "11") (term "0,0,1,0"))
                                             (rule "cut_direct" (formula "32") (term "0,0,0"))
                                             (branch "CUT: result_2.<created> = TRUE TRUE"
                                                 (builtin "One Step Simplification" (formula "33"))
                                                (rule "true_left" (formula "33"))
                                                (rule "commute_or" (formula "12") (term "0,0"))
                                                (rule "commute_or_2" (formula "12") (term "0"))
                                                (rule "commute_or_2" (formula "15") (term "0,0"))
                                                (rule "commute_or_2" (formula "16") (term "0,0"))
                                                (rule "commute_or" (formula "15") (term "0,0,0"))
                                                (rule "commute_or_2" (formula "15") (term "0,0"))
                                                (rule "commute_or_2" (formula "15") (term "0"))
                                                (rule "commute_or" (formula "16") (term "0,0,0"))
                                                (rule "commute_or_2" (formula "16") (term "0,0"))
                                                (rule "commute_or_2" (formula "16") (term "0"))
                                                (rule "andRight" (formula "50"))
                                                (branch
                                                   (rule "allRight" (formula "50") (inst "sk=i_0_0"))
                                                   (rule "orRight" (formula "50"))
                                                   (rule "orRight" (formula "50"))
                                                   (rule "notRight" (formula "52"))
                                                   (rule "orRight" (formula "52"))
                                                   (rule "orRight" (formula "51"))
                                                   (rule "inEqSimp_geqRight" (formula "53"))
                                                   (rule "mul_literals" (formula "1") (term "1,0,0"))
                                                   (rule "add_literals" (formula "1") (term "0,0"))
                                                   (rule "inEqSimp_leqRight" (formula "54"))
                                                   (rule "mul_literals" (formula "1") (term "1,0,0"))
                                                   (rule "add_literals" (formula "1") (term "0,0"))
                                                   (rule "inEqSimp_geqRight" (formula "54"))
                                                   (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
                                                   (rule "polySimp_addComm1" (formula "1") (term "0"))
                                                   (rule "inEqSimp_leqRight" (formula "54"))
                                                   (rule "mul_literals" (formula "1") (term "1,0,0"))
                                                   (rule "add_literals" (formula "1") (term "0,0"))
                                                   (rule "add_zero_left" (formula "1") (term "0"))
                                                   (rule "inEqSimp_sepPosMonomial0" (formula "4"))
                                                   (rule "mul_literals" (formula "4") (term "1"))
                                                   (rule "inEqSimp_sepPosMonomial1" (formula "3"))
                                                   (rule "mul_literals" (formula "3") (term "1"))
                                                   (rule "inEqSimp_sepNegMonomial0" (formula "2"))
                                                   (rule "polySimp_mulLiterals" (formula "2") (term "0"))
                                                   (rule "polySimp_elimOne" (formula "2") (term "0"))
                                                   (rule "inEqSimp_subsumption1" (formula "3") (ifseqformula "1"))
                                                   (rule "leq_literals" (formula "3") (term "0"))
                                                    (builtin "One Step Simplification" (formula "3"))
                                                   (rule "true_left" (formula "3"))
                                                   (rule "commute_and_2" (formula "15") (term "0,1,0"))
                                                   (rule "ex_pull_out3" (formula "15") (term "0"))
                                                   (rule "cnf_rightDist" (formula "15") (term "0,0"))
                                                   (rule "shift_paren_or" (formula "15") (term "1,0,0"))
                                                   (rule "cnf_rightDist" (formula "15") (term "0,0,0"))
                                                   (rule "commute_or_2" (formula "15") (term "0,0,0,0"))
                                                   (rule "shift_paren_or" (formula "15") (term "1,0,0,0"))
                                                   (rule "commute_or" (formula "15") (term "0,0,0,0,0"))
                                                   (rule "allLeft" (formula "19") (inst "t=i_0_0"))
                                                   (rule "replace_known_left" (formula "19") (term "0,0,0,0") (ifseqformula "4"))
                                                    (builtin "One Step Simplification" (formula "19"))
                                                   (rule "inEqSimp_commuteGeq" (formula "19") (term "1"))
                                                   (rule "inEqSimp_contradInEq0" (formula "19") (term "1,0") (ifseqformula "3"))
                                                   (rule "qeq_literals" (formula "19") (term "0,1,0"))
                                                    (builtin "One Step Simplification" (formula "19"))
                                                   (rule "inEqSimp_contradInEq1" (formula "19") (term "1") (ifseqformula "2"))
                                                   (rule "inEqSimp_homoInEq1" (formula "19") (term "0,1"))
                                                   (rule "polySimp_pullOutFactor1b" (formula "19") (term "0,0,1"))
                                                   (rule "add_literals" (formula "19") (term "1,1,0,0,1"))
                                                   (rule "times_zero_1" (formula "19") (term "1,0,0,1"))
                                                   (rule "add_literals" (formula "19") (term "0,0,1"))
                                                   (rule "leq_literals" (formula "19") (term "0,1"))
                                                    (builtin "One Step Simplification" (formula "19"))
                                                   (rule "inEqSimp_subsumption0" (formula "3") (ifseqformula "19"))
                                                   (rule "leq_literals" (formula "3") (term "0"))
                                                    (builtin "One Step Simplification" (formula "3"))
                                                   (rule "true_left" (formula "3"))
                                                   (rule "inEqSimp_contradInEq1" (formula "18") (ifseqformula "1"))
                                                   (rule "qeq_literals" (formula "18") (term "0"))
                                                    (builtin "One Step Simplification" (formula "18"))
                                                   (rule "closeFalse" (formula "18"))
                                                )
                                                (branch
                                                   (rule "allRight" (formula "50") (inst "sk=i_0"))
                                                   (rule "orRight" (formula "50"))
                                                   (rule "orRight" (formula "50"))
                                                   (rule "notRight" (formula "52"))
                                                   (rule "orRight" (formula "52"))
                                                   (rule "orRight" (formula "51"))
                                                   (rule "inEqSimp_geqRight" (formula "53"))
                                                   (rule "mul_literals" (formula "1") (term "1,0,0"))
                                                   (rule "add_literals" (formula "1") (term "0,0"))
                                                   (rule "inEqSimp_leqRight" (formula "54"))
                                                   (rule "mul_literals" (formula "1") (term "1,0,0"))
                                                   (rule "add_literals" (formula "1") (term "0,0"))
                                                   (rule "inEqSimp_geqRight" (formula "54"))
                                                   (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
                                                   (rule "polySimp_addComm1" (formula "1") (term "0"))
                                                   (rule "inEqSimp_leqRight" (formula "54"))
                                                   (rule "mul_literals" (formula "1") (term "1,0,0"))
                                                   (rule "add_literals" (formula "1") (term "0,0"))
                                                   (rule "add_zero_left" (formula "1") (term "0"))
                                                   (rule "inEqSimp_sepPosMonomial0" (formula "4"))
                                                   (rule "mul_literals" (formula "4") (term "1"))
                                                   (rule "inEqSimp_sepPosMonomial1" (formula "3"))
                                                   (rule "mul_literals" (formula "3") (term "1"))
                                                   (rule "inEqSimp_sepNegMonomial0" (formula "2"))
                                                   (rule "polySimp_mulLiterals" (formula "2") (term "0"))
                                                   (rule "polySimp_elimOne" (formula "2") (term "0"))
                                                   (rule "inEqSimp_subsumption1" (formula "3") (ifseqformula "1"))
                                                   (rule "leq_literals" (formula "3") (term "0"))
                                                    (builtin "One Step Simplification" (formula "3"))
                                                   (rule "true_left" (formula "3"))
                                                   (rule "commute_and_2" (formula "15") (term "0,1,0"))
                                                   (rule "ex_pull_out3" (formula "15") (term "0"))
                                                   (rule "cnf_rightDist" (formula "15") (term "0,0"))
                                                   (rule "shift_paren_or" (formula "15") (term "1,0,0"))
                                                   (rule "cnf_rightDist" (formula "15") (term "0,0,0"))
                                                   (rule "commute_or_2" (formula "15") (term "0,0,0,0"))
                                                   (rule "shift_paren_or" (formula "15") (term "1,0,0,0"))
                                                   (rule "commute_or" (formula "15") (term "0,0,0,0,0"))
                                                   (rule "allLeft" (formula "20") (inst "t=i_0"))
                                                   (rule "replace_known_left" (formula "20") (term "0,0,0,0") (ifseqformula "4"))
                                                    (builtin "One Step Simplification" (formula "20"))
                                                   (rule "inEqSimp_commuteGeq" (formula "20") (term "1"))
                                                   (rule "inEqSimp_contradInEq0" (formula "20") (term "1,0") (ifseqformula "3"))
                                                   (rule "qeq_literals" (formula "20") (term "0,1,0"))
                                                    (builtin "One Step Simplification" (formula "20"))
                                                   (rule "inEqSimp_contradInEq1" (formula "20") (term "1") (ifseqformula "2"))
                                                   (rule "inEqSimp_homoInEq1" (formula "20") (term "0,1"))
                                                   (rule "polySimp_pullOutFactor1b" (formula "20") (term "0,0,1"))
                                                   (rule "add_literals" (formula "20") (term "1,1,0,0,1"))
                                                   (rule "times_zero_1" (formula "20") (term "1,0,0,1"))
                                                   (rule "add_literals" (formula "20") (term "0,0,1"))
                                                   (rule "leq_literals" (formula "20") (term "0,1"))
                                                    (builtin "One Step Simplification" (formula "20"))
                                                   (rule "inEqSimp_subsumption0" (formula "3") (ifseqformula "20"))
                                                   (rule "leq_literals" (formula "3") (term "0"))
                                                    (builtin "One Step Simplification" (formula "3"))
                                                   (rule "true_left" (formula "3"))
                                                   (rule "inEqSimp_contradInEq1" (formula "19") (ifseqformula "1"))
                                                   (rule "qeq_literals" (formula "19") (term "0"))
                                                    (builtin "One Step Simplification" (formula "19"))
                                                   (rule "closeFalse" (formula "19"))
                                                )
                                             )
                                             (branch "CUT: result_2.<created> = TRUE FALSE"
                                                 (builtin "One Step Simplification" (formula "32"))
                                                (rule "commute_or" (formula "12") (term "0,0"))
                                                (rule "commute_or_2" (formula "12") (term "0"))
                                                (rule "commute_or_2" (formula "15") (term "0,0"))
                                                (rule "commute_or_2" (formula "16") (term "0,0"))
                                                (rule "commute_or" (formula "15") (term "0,0,0"))
                                                (rule "commute_or_2" (formula "15") (term "0,0"))
                                                (rule "commute_or_2" (formula "15") (term "0"))
                                                (rule "commute_or" (formula "16") (term "0,0,0"))
                                                (rule "commute_or_2" (formula "16") (term "0,0"))
                                                (rule "commute_or_2" (formula "16") (term "0"))
                                                (rule "andRight" (formula "51"))
                                                (branch
                                                   (rule "allRight" (formula "51") (inst "sk=i_0_0"))
                                                   (rule "orRight" (formula "51"))
                                                   (rule "orRight" (formula "51"))
                                                   (rule "notRight" (formula "53"))
                                                   (rule "orRight" (formula "52"))
                                                   (rule "orRight" (formula "54"))
                                                   (rule "inEqSimp_leqRight" (formula "52"))
                                                   (rule "mul_literals" (formula "1") (term "1,0,0"))
                                                   (rule "add_literals" (formula "1") (term "0,0"))
                                                   (rule "add_zero_left" (formula "1") (term "0"))
                                                   (rule "inEqSimp_geqRight" (formula "53"))
                                                   (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
                                                   (rule "polySimp_addComm1" (formula "1") (term "0"))
                                                   (rule "inEqSimp_leqRight" (formula "55"))
                                                   (rule "mul_literals" (formula "1") (term "1,0,0"))
                                                   (rule "add_literals" (formula "1") (term "0,0"))
                                                   (rule "inEqSimp_geqRight" (formula "55"))
                                                   (rule "mul_literals" (formula "1") (term "1,0,0"))
                                                   (rule "add_literals" (formula "1") (term "0,0"))
                                                   (rule "inEqSimp_sepNegMonomial0" (formula "3"))
                                                   (rule "polySimp_mulLiterals" (formula "3") (term "0"))
                                                   (rule "polySimp_elimOne" (formula "3") (term "0"))
                                                   (rule "inEqSimp_sepPosMonomial1" (formula "2"))
                                                   (rule "mul_literals" (formula "2") (term "1"))
                                                   (rule "inEqSimp_sepPosMonomial0" (formula "1"))
                                                   (rule "mul_literals" (formula "1") (term "1"))
                                                   (rule "inEqSimp_subsumption1" (formula "2") (ifseqformula "4"))
                                                   (rule "leq_literals" (formula "2") (term "0"))
                                                    (builtin "One Step Simplification" (formula "2"))
                                                   (rule "true_left" (formula "2"))
                                                   (rule "commute_and_2" (formula "15") (term "0,1,0"))
                                                   (rule "ex_pull_out3" (formula "15") (term "0"))
                                                   (rule "cnf_rightDist" (formula "15") (term "0,0"))
                                                   (rule "shift_paren_or" (formula "15") (term "1,0,0"))
                                                   (rule "cnf_rightDist" (formula "15") (term "0,0,0"))
                                                   (rule "commute_or_2" (formula "15") (term "0,0,0,0"))
                                                   (rule "shift_paren_or" (formula "15") (term "1,0,0,0"))
                                                   (rule "commute_or" (formula "15") (term "0,0,0,0,0"))
                                                   (rule "allLeft" (formula "19") (inst "t=i_0_0"))
                                                   (rule "replace_known_left" (formula "19") (term "0,0,0,0") (ifseqformula "4"))
                                                    (builtin "One Step Simplification" (formula "19"))
                                                   (rule "inEqSimp_commuteGeq" (formula "19") (term "1"))
                                                   (rule "inEqSimp_contradInEq1" (formula "19") (term "1") (ifseqformula "2"))
                                                   (rule "inEqSimp_homoInEq1" (formula "19") (term "0,1"))
                                                   (rule "polySimp_pullOutFactor1b" (formula "19") (term "0,0,1"))
                                                   (rule "add_literals" (formula "19") (term "1,1,0,0,1"))
                                                   (rule "times_zero_1" (formula "19") (term "1,0,0,1"))
                                                   (rule "add_zero_right" (formula "19") (term "0,0,1"))
                                                   (rule "leq_literals" (formula "19") (term "0,1"))
                                                    (builtin "One Step Simplification" (formula "19"))
                                                   (rule "inEqSimp_contradInEq0" (formula "19") (term "1") (ifseqformula "1"))
                                                   (rule "qeq_literals" (formula "19") (term "0,1"))
                                                    (builtin "One Step Simplification" (formula "19"))
                                                   (rule "inEqSimp_subsumption0" (formula "1") (ifseqformula "19"))
                                                   (rule "leq_literals" (formula "1") (term "0"))
                                                    (builtin "One Step Simplification" (formula "1"))
                                                   (rule "true_left" (formula "1"))
                                                   (rule "inEqSimp_contradInEq0" (formula "2") (ifseqformula "18"))
                                                   (rule "qeq_literals" (formula "2") (term "0"))
                                                    (builtin "One Step Simplification" (formula "2"))
                                                   (rule "closeFalse" (formula "2"))
                                                )
                                                (branch
                                                   (rule "allRight" (formula "51") (inst "sk=i_0"))
                                                   (rule "orRight" (formula "51"))
                                                   (rule "orRight" (formula "51"))
                                                   (rule "notRight" (formula "53"))
                                                   (rule "orRight" (formula "52"))
                                                   (rule "orRight" (formula "54"))
                                                   (rule "inEqSimp_leqRight" (formula "52"))
                                                   (rule "mul_literals" (formula "1") (term "1,0,0"))
                                                   (rule "add_literals" (formula "1") (term "0,0"))
                                                   (rule "add_zero_left" (formula "1") (term "0"))
                                                   (rule "inEqSimp_geqRight" (formula "53"))
                                                   (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
                                                   (rule "polySimp_addComm1" (formula "1") (term "0"))
                                                   (rule "inEqSimp_geqRight" (formula "54"))
                                                   (rule "mul_literals" (formula "1") (term "1,0,0"))
                                                   (rule "add_literals" (formula "1") (term "0,0"))
                                                   (rule "inEqSimp_leqRight" (formula "55"))
                                                   (rule "mul_literals" (formula "1") (term "1,0,0"))
                                                   (rule "add_literals" (formula "1") (term "0,0"))
                                                   (rule "inEqSimp_sepNegMonomial0" (formula "3"))
                                                   (rule "polySimp_mulLiterals" (formula "3") (term "0"))
                                                   (rule "polySimp_elimOne" (formula "3") (term "0"))
                                                   (rule "inEqSimp_sepPosMonomial0" (formula "2"))
                                                   (rule "mul_literals" (formula "2") (term "1"))
                                                   (rule "inEqSimp_sepPosMonomial1" (formula "1"))
                                                   (rule "mul_literals" (formula "1") (term "1"))
                                                   (rule "inEqSimp_subsumption1" (formula "1") (ifseqformula "4"))
                                                   (rule "leq_literals" (formula "1") (term "0"))
                                                    (builtin "One Step Simplification" (formula "1"))
                                                   (rule "true_left" (formula "1"))
                                                   (rule "commute_and_2" (formula "15") (term "0,1,0"))
                                                   (rule "ex_pull_out3" (formula "15") (term "0"))
                                                   (rule "cnf_rightDist" (formula "15") (term "0,0"))
                                                   (rule "shift_paren_or" (formula "15") (term "1,0,0"))
                                                   (rule "cnf_rightDist" (formula "15") (term "0,0,0"))
                                                   (rule "commute_or_2" (formula "15") (term "0,0,0,0"))
                                                   (rule "shift_paren_or" (formula "15") (term "1,0,0,0"))
                                                   (rule "commute_or" (formula "15") (term "0,0,0,0,0"))
                                                   (rule "allLeft" (formula "20") (inst "t=i_0"))
                                                   (rule "replace_known_left" (formula "20") (term "0,0,0,0") (ifseqformula "4"))
                                                    (builtin "One Step Simplification" (formula "20"))
                                                   (rule "inEqSimp_commuteGeq" (formula "20") (term "1"))
                                                   (rule "inEqSimp_contradInEq1" (formula "20") (term "1") (ifseqformula "2"))
                                                   (rule "inEqSimp_homoInEq1" (formula "20") (term "0,1"))
                                                   (rule "polySimp_pullOutFactor1b" (formula "20") (term "0,0,1"))
                                                   (rule "add_literals" (formula "20") (term "1,1,0,0,1"))
                                                   (rule "times_zero_1" (formula "20") (term "1,0,0,1"))
                                                   (rule "add_zero_right" (formula "20") (term "0,0,1"))
                                                   (rule "leq_literals" (formula "20") (term "0,1"))
                                                    (builtin "One Step Simplification" (formula "20"))
                                                   (rule "inEqSimp_contradInEq0" (formula "20") (term "1") (ifseqformula "1"))
                                                   (rule "qeq_literals" (formula "20") (term "0,1"))
                                                    (builtin "One Step Simplification" (formula "20"))
                                                   (rule "inEqSimp_contradInEq0" (formula "3") (ifseqformula "20"))
                                                   (rule "qeq_literals" (formula "3") (term "0"))
                                                    (builtin "One Step Simplification" (formula "3"))
                                                   (rule "closeFalse" (formula "3"))
                                                )
                                             )
                                          )
                                          (branch
                                             (rule "andRight" (formula "54"))
                                             (branch
                                                 (builtin "One Step Simplification" (formula "54"))
                                                (rule "dismissNonSelectedField" (formula "54") (term "1"))
                                                (rule "dismissNonSelectedField" (formula "54") (term "1"))
                                                (rule "dismissNonSelectedField" (formula "54") (term "1"))
                                                (rule "inEqSimp_ltToLeq" (formula "11") (term "0,0,0,1,0"))
                                                (rule "polySimp_mulComm0" (formula "11") (term "1,0,0,0,0,0,1,0"))
                                                (rule "inEqSimp_ltToLeq" (formula "11") (term "0,0,0"))
                                                (rule "polySimp_mulComm0" (formula "11") (term "1,0,0,0,0,0"))
                                                (rule "inEqSimp_ltToLeq" (formula "15") (term "0,0,0,0,0"))
                                                (rule "polySimp_mulComm0" (formula "15") (term "1,0,0,0,0,0,0,0"))
                                                (rule "inEqSimp_ltToLeq" (formula "12") (term "0,0,0"))
                                                (rule "polySimp_mulComm0" (formula "12") (term "1,0,0,0,0,0"))
                                                (rule "inEqSimp_ltToLeq" (formula "16") (term "0,0,0,0,0"))
                                                (rule "polySimp_mulComm0" (formula "16") (term "1,0,0,0,0,0,0,0"))
                                                (rule "inEqSimp_ltToLeq" (formula "28"))
                                                (rule "polySimp_mulComm0" (formula "28") (term "1,0,0"))
                                                (rule "polySimp_addComm1" (formula "28") (term "0"))
                                                (rule "inEqSimp_sepPosMonomial1" (formula "37"))
                                                (rule "mul_literals" (formula "37") (term "1"))
                                                (rule "inEqSimp_sepPosMonomial0" (formula "11") (term "0,0,0,1,0"))
                                                (rule "polySimp_mulComm0" (formula "11") (term "1,0,0,0,1,0"))
                                                (rule "polySimp_rightDist" (formula "11") (term "1,0,0,0,1,0"))
                                                (rule "mul_literals" (formula "11") (term "0,1,0,0,0,1,0"))
                                                (rule "polySimp_mulLiterals" (formula "11") (term "1,1,0,0,0,1,0"))
                                                (rule "polySimp_elimOne" (formula "11") (term "1,1,0,0,0,1,0"))
                                                (rule "inEqSimp_sepPosMonomial0" (formula "11") (term "0,0,0"))
                                                (rule "polySimp_mulComm0" (formula "11") (term "1,0,0,0"))
                                                (rule "polySimp_rightDist" (formula "11") (term "1,0,0,0"))
                                                (rule "mul_literals" (formula "11") (term "0,1,0,0,0"))
                                                (rule "polySimp_mulLiterals" (formula "11") (term "1,1,0,0,0"))
                                                (rule "polySimp_elimOne" (formula "11") (term "1,1,0,0,0"))
                                                (rule "inEqSimp_sepPosMonomial0" (formula "15") (term "0,0,0,0,0"))
                                                (rule "polySimp_mulComm0" (formula "15") (term "1,0,0,0,0,0"))
                                                (rule "polySimp_rightDist" (formula "15") (term "1,0,0,0,0,0"))
                                                (rule "mul_literals" (formula "15") (term "0,1,0,0,0,0,0"))
                                                (rule "polySimp_mulLiterals" (formula "15") (term "1,1,0,0,0,0,0"))
                                                (rule "polySimp_elimOne" (formula "15") (term "1,1,0,0,0,0,0"))
                                                (rule "inEqSimp_sepPosMonomial0" (formula "12") (term "0,0,0"))
                                                (rule "polySimp_mulComm0" (formula "12") (term "1,0,0,0"))
                                                (rule "polySimp_rightDist" (formula "12") (term "1,0,0,0"))
                                                (rule "mul_literals" (formula "12") (term "0,1,0,0,0"))
                                                (rule "polySimp_mulLiterals" (formula "12") (term "1,1,0,0,0"))
                                                (rule "polySimp_elimOne" (formula "12") (term "1,1,0,0,0"))
                                                (rule "inEqSimp_sepPosMonomial0" (formula "16") (term "0,0,0,0,0"))
                                                (rule "polySimp_mulComm0" (formula "16") (term "1,0,0,0,0,0"))
                                                (rule "polySimp_rightDist" (formula "16") (term "1,0,0,0,0,0"))
                                                (rule "mul_literals" (formula "16") (term "0,1,0,0,0,0,0"))
                                                (rule "polySimp_mulLiterals" (formula "16") (term "1,1,0,0,0,0,0"))
                                                (rule "polySimp_elimOne" (formula "16") (term "1,1,0,0,0,0,0"))
                                                (rule "inEqSimp_sepNegMonomial0" (formula "28"))
                                                (rule "polySimp_mulLiterals" (formula "28") (term "0"))
                                                (rule "polySimp_elimOne" (formula "28") (term "0"))
                                                (rule "inEqSimp_contradEq7" (formula "43") (ifseqformula "37"))
                                                (rule "polySimp_mulComm0" (formula "43") (term "1,0,0"))
                                                (rule "polySimp_pullOutFactor1b" (formula "43") (term "0,0"))
                                                (rule "add_literals" (formula "43") (term "1,1,0,0"))
                                                (rule "times_zero_1" (formula "43") (term "1,0,0"))
                                                (rule "add_literals" (formula "43") (term "0,0"))
                                                (rule "leq_literals" (formula "43") (term "0"))
                                                 (builtin "One Step Simplification" (formula "43"))
                                                (rule "false_right" (formula "43"))
                                                (rule "inEqSimp_subsumption1" (formula "26") (ifseqformula "37"))
                                                (rule "inEqSimp_homoInEq0" (formula "26") (term "0"))
                                                (rule "polySimp_pullOutFactor1b" (formula "26") (term "0,0"))
                                                (rule "add_literals" (formula "26") (term "1,1,0,0"))
                                                (rule "times_zero_1" (formula "26") (term "1,0,0"))
                                                (rule "add_zero_right" (formula "26") (term "0,0"))
                                                (rule "qeq_literals" (formula "26") (term "0"))
                                                 (builtin "One Step Simplification" (formula "26"))
                                                (rule "true_left" (formula "26"))
                                                (rule "inEqSimp_subsumption1" (formula "35") (ifseqformula "25"))
                                                (rule "leq_literals" (formula "35") (term "0"))
                                                 (builtin "One Step Simplification" (formula "35"))
                                                (rule "true_left" (formula "35"))
                                                (rule "pullOutSelect" (formula "50") (term "1") (inst "selectSK=de_polyas_core3_open_cred_CredTool_vals_2"))
                                                (rule "simplifySelectOfCreate" (formula "1"))
                                                 (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "41")))
                                                (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "31"))
                                                 (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "48")))
                                                (rule "replaceKnownSelect_taclet10_12" (formula "1") (term "2,0"))
                                                (rule "replaceKnownAuxiliaryConstant_taclet10_13" (formula "1") (term "2,0"))
                                                (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,0,1,0,0") (ifseqformula "19"))
                                                (rule "replace_known_left" (formula "1") (term "0,0,0,1,0,0") (ifseqformula "8"))
                                                 (builtin "One Step Simplification" (formula "1"))
                                                (rule "elementOfSingleton" (formula "1") (term "0,0"))
                                                 (builtin "One Step Simplification" (formula "1"))
                                                (rule "applyEqReverse" (formula "51") (term "1") (ifseqformula "1"))
                                                (rule "hideAuxiliaryEq" (formula "1"))
                                                (rule "inEqSimp_and_subsumption3" (formula "15") (term "0,0,0"))
                                                (rule "leq_literals" (formula "15") (term "0,1,0,0,0,0"))
                                                 (builtin "One Step Simplification" (formula "15"))
                                                (rule "inEqSimp_and_subsumption3" (formula "16") (term "0,0,0"))
                                                (rule "leq_literals" (formula "16") (term "0,1,0,0,0,0"))
                                                 (builtin "One Step Simplification" (formula "16"))
                                                (rule "nnf_imp2or" (formula "11") (term "0"))
                                                (rule "nnf_imp2or" (formula "12") (term "0"))
                                                (rule "nnf_imp2or" (formula "15") (term "0"))
                                                (rule "nnf_imp2or" (formula "16") (term "0"))
                                                (rule "nnf_notAnd" (formula "11") (term "0,0"))
                                                (rule "inEqSimp_notLeq" (formula "11") (term "0,0,0"))
                                                (rule "polySimp_rightDist" (formula "11") (term "1,0,0,0,0,0"))
                                                (rule "mul_literals" (formula "11") (term "0,1,0,0,0,0,0"))
                                                (rule "polySimp_addAssoc" (formula "11") (term "0,0,0,0,0"))
                                                (rule "add_literals" (formula "11") (term "0,0,0,0,0,0"))
                                                (rule "add_zero_left" (formula "11") (term "0,0,0,0,0"))
                                                (rule "inEqSimp_sepPosMonomial1" (formula "11") (term "0,0,0"))
                                                (rule "polySimp_mulLiterals" (formula "11") (term "1,0,0,0"))
                                                (rule "polySimp_elimOne" (formula "11") (term "1,0,0,0"))
                                                (rule "inEqSimp_notGeq" (formula "11") (term "1,0,0"))
                                                (rule "mul_literals" (formula "11") (term "1,0,0,1,0,0"))
                                                (rule "add_literals" (formula "11") (term "0,0,1,0,0"))
                                                (rule "inEqSimp_sepPosMonomial0" (formula "11") (term "1,0,0"))
                                                (rule "mul_literals" (formula "11") (term "1,1,0,0"))
                                                (rule "nnf_notAnd" (formula "12") (term "0,0"))
                                                (rule "inEqSimp_notGeq" (formula "12") (term "1,0,0"))
                                                (rule "mul_literals" (formula "12") (term "1,0,0,1,0,0"))
                                                (rule "add_literals" (formula "12") (term "0,0,1,0,0"))
                                                (rule "inEqSimp_sepPosMonomial0" (formula "12") (term "1,0,0"))
                                                (rule "mul_literals" (formula "12") (term "1,1,0,0"))
                                                (rule "inEqSimp_notLeq" (formula "12") (term "0,0,0"))
                                                (rule "polySimp_rightDist" (formula "12") (term "1,0,0,0,0,0"))
                                                (rule "mul_literals" (formula "12") (term "0,1,0,0,0,0,0"))
                                                (rule "polySimp_addAssoc" (formula "12") (term "0,0,0,0,0"))
                                                (rule "add_literals" (formula "12") (term "0,0,0,0,0,0"))
                                                (rule "add_zero_left" (formula "12") (term "0,0,0,0,0"))
                                                (rule "inEqSimp_sepPosMonomial1" (formula "12") (term "0,0,0"))
                                                (rule "polySimp_mulLiterals" (formula "12") (term "1,0,0,0"))
                                                (rule "polySimp_elimOne" (formula "12") (term "1,0,0,0"))
                                                (rule "nnf_notAnd" (formula "15") (term "0,0"))
                                                (rule "inEqSimp_notLeq" (formula "15") (term "1,0,0"))
                                                (rule "mul_literals" (formula "15") (term "1,0,0,1,0,0"))
                                                (rule "add_literals" (formula "15") (term "0,0,1,0,0"))
                                                (rule "inEqSimp_sepPosMonomial1" (formula "15") (term "1,0,0"))
                                                (rule "mul_literals" (formula "15") (term "1,1,0,0"))
                                                (rule "nnf_notAnd" (formula "16") (term "0,0"))
                                                (rule "inEqSimp_notLeq" (formula "16") (term "1,0,0"))
                                                (rule "mul_literals" (formula "16") (term "1,0,0,1,0,0"))
                                                (rule "add_literals" (formula "16") (term "0,0,1,0,0"))
                                                (rule "inEqSimp_sepPosMonomial1" (formula "16") (term "1,0,0"))
                                                (rule "mul_literals" (formula "16") (term "1,1,0,0"))
                                                (rule "nnf_notAnd" (formula "15") (term "0,0,0"))
                                                (rule "inEqSimp_notLeq" (formula "15") (term "0,0,0,0"))
                                                (rule "polySimp_rightDist" (formula "15") (term "1,0,0,0,0,0,0"))
                                                (rule "mul_literals" (formula "15") (term "0,1,0,0,0,0,0,0"))
                                                (rule "polySimp_addAssoc" (formula "15") (term "0,0,0,0,0,0"))
                                                (rule "add_literals" (formula "15") (term "0,0,0,0,0,0,0"))
                                                (rule "add_zero_left" (formula "15") (term "0,0,0,0,0,0"))
                                                (rule "inEqSimp_sepPosMonomial1" (formula "15") (term "0,0,0,0"))
                                                (rule "polySimp_mulLiterals" (formula "15") (term "1,0,0,0,0"))
                                                (rule "polySimp_elimOne" (formula "15") (term "1,0,0,0,0"))
                                                (rule "inEqSimp_notGeq" (formula "15") (term "1,0,0,0"))
                                                (rule "mul_literals" (formula "15") (term "1,0,0,1,0,0,0"))
                                                (rule "add_literals" (formula "15") (term "0,0,1,0,0,0"))
                                                (rule "inEqSimp_sepPosMonomial0" (formula "15") (term "1,0,0,0"))
                                                (rule "mul_literals" (formula "15") (term "1,1,0,0,0"))
                                                (rule "nnf_notAnd" (formula "16") (term "0,0,0"))
                                                (rule "inEqSimp_notGeq" (formula "16") (term "1,0,0,0"))
                                                (rule "mul_literals" (formula "16") (term "1,0,0,1,0,0,0"))
                                                (rule "add_literals" (formula "16") (term "0,0,1,0,0,0"))
                                                (rule "inEqSimp_sepPosMonomial0" (formula "16") (term "1,0,0,0"))
                                                (rule "mul_literals" (formula "16") (term "1,1,0,0,0"))
                                                (rule "inEqSimp_notLeq" (formula "16") (term "0,0,0,0"))
                                                (rule "polySimp_rightDist" (formula "16") (term "1,0,0,0,0,0,0"))
                                                (rule "mul_literals" (formula "16") (term "0,1,0,0,0,0,0,0"))
                                                (rule "polySimp_addAssoc" (formula "16") (term "0,0,0,0,0,0"))
                                                (rule "add_literals" (formula "16") (term "0,0,0,0,0,0,0"))
                                                (rule "add_zero_left" (formula "16") (term "0,0,0,0,0,0"))
                                                (rule "inEqSimp_sepPosMonomial1" (formula "16") (term "0,0,0,0"))
                                                (rule "polySimp_mulLiterals" (formula "16") (term "1,0,0,0,0"))
                                                (rule "polySimp_elimOne" (formula "16") (term "1,0,0,0,0"))
                                                (rule "Class_invariant_axiom_for_java_util_ArrayList" (formula "50"))
                                                (rule "closeTrue" (formula "50"))
                                             )
                                             (branch
                                                 (builtin "One Step Simplification" (formula "54"))
                                                (rule "dismissNonSelectedField" (formula "54") (term "1"))
                                                (rule "dismissNonSelectedField" (formula "54") (term "1"))
                                                (rule "dismissNonSelectedField" (formula "54") (term "1"))
                                                (rule "inEqSimp_ltToLeq" (formula "11") (term "0,0,0,1,0"))
                                                (rule "polySimp_mulComm0" (formula "11") (term "1,0,0,0,0,0,1,0"))
                                                (rule "inEqSimp_ltToLeq" (formula "11") (term "0,0,0"))
                                                (rule "polySimp_mulComm0" (formula "11") (term "1,0,0,0,0,0"))
                                                (rule "inEqSimp_ltToLeq" (formula "15") (term "0,0,0,0,0"))
                                                (rule "polySimp_mulComm0" (formula "15") (term "1,0,0,0,0,0,0,0"))
                                                (rule "inEqSimp_ltToLeq" (formula "12") (term "0,0,0"))
                                                (rule "polySimp_mulComm0" (formula "12") (term "1,0,0,0,0,0"))
                                                (rule "inEqSimp_ltToLeq" (formula "16") (term "0,0,0,0,0"))
                                                (rule "polySimp_mulComm0" (formula "16") (term "1,0,0,0,0,0,0,0"))
                                                (rule "inEqSimp_ltToLeq" (formula "28"))
                                                (rule "polySimp_mulComm0" (formula "28") (term "1,0,0"))
                                                (rule "polySimp_addComm1" (formula "28") (term "0"))
                                                (rule "inEqSimp_sepPosMonomial1" (formula "37"))
                                                (rule "mul_literals" (formula "37") (term "1"))
                                                (rule "inEqSimp_sepPosMonomial0" (formula "11") (term "0,0,0,1,0"))
                                                (rule "polySimp_mulComm0" (formula "11") (term "1,0,0,0,1,0"))
                                                (rule "polySimp_rightDist" (formula "11") (term "1,0,0,0,1,0"))
                                                (rule "mul_literals" (formula "11") (term "0,1,0,0,0,1,0"))
                                                (rule "polySimp_mulLiterals" (formula "11") (term "1,1,0,0,0,1,0"))
                                                (rule "polySimp_elimOne" (formula "11") (term "1,1,0,0,0,1,0"))
                                                (rule "inEqSimp_sepPosMonomial0" (formula "11") (term "0,0,0"))
                                                (rule "polySimp_mulComm0" (formula "11") (term "1,0,0,0"))
                                                (rule "polySimp_rightDist" (formula "11") (term "1,0,0,0"))
                                                (rule "mul_literals" (formula "11") (term "0,1,0,0,0"))
                                                (rule "polySimp_mulLiterals" (formula "11") (term "1,1,0,0,0"))
                                                (rule "polySimp_elimOne" (formula "11") (term "1,1,0,0,0"))
                                                (rule "inEqSimp_sepPosMonomial0" (formula "15") (term "0,0,0,0,0"))
                                                (rule "polySimp_mulComm0" (formula "15") (term "1,0,0,0,0,0"))
                                                (rule "polySimp_rightDist" (formula "15") (term "1,0,0,0,0,0"))
                                                (rule "mul_literals" (formula "15") (term "0,1,0,0,0,0,0"))
                                                (rule "polySimp_mulLiterals" (formula "15") (term "1,1,0,0,0,0,0"))
                                                (rule "polySimp_elimOne" (formula "15") (term "1,1,0,0,0,0,0"))
                                                (rule "inEqSimp_sepPosMonomial0" (formula "12") (term "0,0,0"))
                                                (rule "polySimp_mulComm0" (formula "12") (term "1,0,0,0"))
                                                (rule "polySimp_rightDist" (formula "12") (term "1,0,0,0"))
                                                (rule "mul_literals" (formula "12") (term "0,1,0,0,0"))
                                                (rule "polySimp_mulLiterals" (formula "12") (term "1,1,0,0,0"))
                                                (rule "polySimp_elimOne" (formula "12") (term "1,1,0,0,0"))
                                                (rule "inEqSimp_sepPosMonomial0" (formula "16") (term "0,0,0,0,0"))
                                                (rule "polySimp_mulComm0" (formula "16") (term "1,0,0,0,0,0"))
                                                (rule "polySimp_rightDist" (formula "16") (term "1,0,0,0,0,0"))
                                                (rule "mul_literals" (formula "16") (term "0,1,0,0,0,0,0"))
                                                (rule "polySimp_mulLiterals" (formula "16") (term "1,1,0,0,0,0,0"))
                                                (rule "polySimp_elimOne" (formula "16") (term "1,1,0,0,0,0,0"))
                                                (rule "inEqSimp_sepNegMonomial0" (formula "28"))
                                                (rule "polySimp_mulLiterals" (formula "28") (term "0"))
                                                (rule "polySimp_elimOne" (formula "28") (term "0"))
                                                (rule "inEqSimp_contradEq7" (formula "43") (ifseqformula "37"))
                                                (rule "polySimp_mulComm0" (formula "43") (term "1,0,0"))
                                                (rule "polySimp_pullOutFactor1b" (formula "43") (term "0,0"))
                                                (rule "add_literals" (formula "43") (term "1,1,0,0"))
                                                (rule "times_zero_1" (formula "43") (term "1,0,0"))
                                                (rule "add_literals" (formula "43") (term "0,0"))
                                                (rule "leq_literals" (formula "43") (term "0"))
                                                 (builtin "One Step Simplification" (formula "43"))
                                                (rule "false_right" (formula "43"))
                                                (rule "inEqSimp_subsumption1" (formula "26") (ifseqformula "37"))
                                                (rule "inEqSimp_homoInEq0" (formula "26") (term "0"))
                                                (rule "polySimp_pullOutFactor1b" (formula "26") (term "0,0"))
                                                (rule "add_literals" (formula "26") (term "1,1,0,0"))
                                                (rule "times_zero_1" (formula "26") (term "1,0,0"))
                                                (rule "add_zero_right" (formula "26") (term "0,0"))
                                                (rule "qeq_literals" (formula "26") (term "0"))
                                                 (builtin "One Step Simplification" (formula "26"))
                                                (rule "true_left" (formula "26"))
                                                (rule "inEqSimp_subsumption1" (formula "35") (ifseqformula "25"))
                                                (rule "leq_literals" (formula "35") (term "0"))
                                                 (builtin "One Step Simplification" (formula "35"))
                                                (rule "true_left" (formula "35"))
                                                (rule "pullOutSelect" (formula "50") (term "1") (inst "selectSK=de_polyas_core3_open_cred_CredTool_cols_1"))
                                                (rule "simplifySelectOfCreate" (formula "1"))
                                                 (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "41")))
                                                (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "31"))
                                                 (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "48")))
                                                (rule "replaceKnownSelect_taclet10_14" (formula "1") (term "2,0"))
                                                (rule "replaceKnownAuxiliaryConstant_taclet10_17" (formula "1") (term "2,0"))
                                                (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,0,1,0,0") (ifseqformula "19"))
                                                (rule "replace_known_left" (formula "1") (term "0,0,0,1,0,0") (ifseqformula "8"))
                                                 (builtin "One Step Simplification" (formula "1"))
                                                (rule "elementOfSingleton" (formula "1") (term "0,0"))
                                                 (builtin "One Step Simplification" (formula "1"))
                                                (rule "applyEqReverse" (formula "51") (term "1") (ifseqformula "1"))
                                                (rule "hideAuxiliaryEq" (formula "1"))
                                                (rule "inEqSimp_and_subsumption3" (formula "15") (term "0,0,0"))
                                                (rule "leq_literals" (formula "15") (term "0,1,0,0,0,0"))
                                                 (builtin "One Step Simplification" (formula "15"))
                                                (rule "inEqSimp_and_subsumption3" (formula "16") (term "0,0,0"))
                                                (rule "leq_literals" (formula "16") (term "0,1,0,0,0,0"))
                                                 (builtin "One Step Simplification" (formula "16"))
                                                (rule "nnf_imp2or" (formula "11") (term "0"))
                                                (rule "nnf_imp2or" (formula "12") (term "0"))
                                                (rule "nnf_imp2or" (formula "15") (term "0"))
                                                (rule "nnf_imp2or" (formula "16") (term "0"))
                                                (rule "nnf_notAnd" (formula "11") (term "0,0"))
                                                (rule "inEqSimp_notLeq" (formula "11") (term "0,0,0"))
                                                (rule "polySimp_rightDist" (formula "11") (term "1,0,0,0,0,0"))
                                                (rule "mul_literals" (formula "11") (term "0,1,0,0,0,0,0"))
                                                (rule "polySimp_addAssoc" (formula "11") (term "0,0,0,0,0"))
                                                (rule "add_literals" (formula "11") (term "0,0,0,0,0,0"))
                                                (rule "add_zero_left" (formula "11") (term "0,0,0,0,0"))
                                                (rule "inEqSimp_sepPosMonomial1" (formula "11") (term "0,0,0"))
                                                (rule "polySimp_mulLiterals" (formula "11") (term "1,0,0,0"))
                                                (rule "polySimp_elimOne" (formula "11") (term "1,0,0,0"))
                                                (rule "inEqSimp_notGeq" (formula "11") (term "1,0,0"))
                                                (rule "mul_literals" (formula "11") (term "1,0,0,1,0,0"))
                                                (rule "add_literals" (formula "11") (term "0,0,1,0,0"))
                                                (rule "inEqSimp_sepPosMonomial0" (formula "11") (term "1,0,0"))
                                                (rule "mul_literals" (formula "11") (term "1,1,0,0"))
                                                (rule "nnf_notAnd" (formula "12") (term "0,0"))
                                                (rule "inEqSimp_notGeq" (formula "12") (term "1,0,0"))
                                                (rule "mul_literals" (formula "12") (term "1,0,0,1,0,0"))
                                                (rule "add_literals" (formula "12") (term "0,0,1,0,0"))
                                                (rule "inEqSimp_sepPosMonomial0" (formula "12") (term "1,0,0"))
                                                (rule "mul_literals" (formula "12") (term "1,1,0,0"))
                                                (rule "inEqSimp_notLeq" (formula "12") (term "0,0,0"))
                                                (rule "polySimp_rightDist" (formula "12") (term "1,0,0,0,0,0"))
                                                (rule "mul_literals" (formula "12") (term "0,1,0,0,0,0,0"))
                                                (rule "polySimp_addAssoc" (formula "12") (term "0,0,0,0,0"))
                                                (rule "add_literals" (formula "12") (term "0,0,0,0,0,0"))
                                                (rule "add_zero_left" (formula "12") (term "0,0,0,0,0"))
                                                (rule "inEqSimp_sepPosMonomial1" (formula "12") (term "0,0,0"))
                                                (rule "polySimp_mulLiterals" (formula "12") (term "1,0,0,0"))
                                                (rule "polySimp_elimOne" (formula "12") (term "1,0,0,0"))
                                                (rule "nnf_notAnd" (formula "15") (term "0,0"))
                                                (rule "inEqSimp_notLeq" (formula "15") (term "1,0,0"))
                                                (rule "mul_literals" (formula "15") (term "1,0,0,1,0,0"))
                                                (rule "add_literals" (formula "15") (term "0,0,1,0,0"))
                                                (rule "inEqSimp_sepPosMonomial1" (formula "15") (term "1,0,0"))
                                                (rule "mul_literals" (formula "15") (term "1,1,0,0"))
                                                (rule "nnf_notAnd" (formula "16") (term "0,0"))
                                                (rule "inEqSimp_notLeq" (formula "16") (term "1,0,0"))
                                                (rule "mul_literals" (formula "16") (term "1,0,0,1,0,0"))
                                                (rule "add_literals" (formula "16") (term "0,0,1,0,0"))
                                                (rule "inEqSimp_sepPosMonomial1" (formula "16") (term "1,0,0"))
                                                (rule "mul_literals" (formula "16") (term "1,1,0,0"))
                                                (rule "nnf_notAnd" (formula "15") (term "0,0,0"))
                                                (rule "inEqSimp_notLeq" (formula "15") (term "0,0,0,0"))
                                                (rule "polySimp_rightDist" (formula "15") (term "1,0,0,0,0,0,0"))
                                                (rule "mul_literals" (formula "15") (term "0,1,0,0,0,0,0,0"))
                                                (rule "polySimp_addAssoc" (formula "15") (term "0,0,0,0,0,0"))
                                                (rule "add_literals" (formula "15") (term "0,0,0,0,0,0,0"))
                                                (rule "add_zero_left" (formula "15") (term "0,0,0,0,0,0"))
                                                (rule "inEqSimp_sepPosMonomial1" (formula "15") (term "0,0,0,0"))
                                                (rule "polySimp_mulLiterals" (formula "15") (term "1,0,0,0,0"))
                                                (rule "polySimp_elimOne" (formula "15") (term "1,0,0,0,0"))
                                                (rule "inEqSimp_notGeq" (formula "15") (term "1,0,0,0"))
                                                (rule "mul_literals" (formula "15") (term "1,0,0,1,0,0,0"))
                                                (rule "add_literals" (formula "15") (term "0,0,1,0,0,0"))
                                                (rule "inEqSimp_sepPosMonomial0" (formula "15") (term "1,0,0,0"))
                                                (rule "mul_literals" (formula "15") (term "1,1,0,0,0"))
                                                (rule "nnf_notAnd" (formula "16") (term "0,0,0"))
                                                (rule "inEqSimp_notGeq" (formula "16") (term "1,0,0,0"))
                                                (rule "mul_literals" (formula "16") (term "1,0,0,1,0,0,0"))
                                                (rule "add_literals" (formula "16") (term "0,0,1,0,0,0"))
                                                (rule "inEqSimp_sepPosMonomial0" (formula "16") (term "1,0,0,0"))
                                                (rule "mul_literals" (formula "16") (term "1,1,0,0,0"))
                                                (rule "inEqSimp_notLeq" (formula "16") (term "0,0,0,0"))
                                                (rule "polySimp_rightDist" (formula "16") (term "1,0,0,0,0,0,0"))
                                                (rule "mul_literals" (formula "16") (term "0,1,0,0,0,0,0,0"))
                                                (rule "polySimp_addAssoc" (formula "16") (term "0,0,0,0,0,0"))
                                                (rule "add_literals" (formula "16") (term "0,0,0,0,0,0,0"))
                                                (rule "add_zero_left" (formula "16") (term "0,0,0,0,0,0"))
                                                (rule "inEqSimp_sepPosMonomial1" (formula "16") (term "0,0,0,0"))
                                                (rule "polySimp_mulLiterals" (formula "16") (term "1,0,0,0,0"))
                                                (rule "polySimp_elimOne" (formula "16") (term "1,0,0,0,0"))
                                                (rule "Class_invariant_axiom_for_java_util_ArrayList" (formula "50"))
                                                (rule "closeTrue" (formula "50"))
                                             )
                                          )
                                       )
                                       (branch "Case 2"
                                          (rule "applyEqReverse" (formula "53") (term "0,0") (ifseqformula "35") (proofscript))
                                          (rule "seqCastInstance" (formula "53") (proofscript))
                                           (builtin "One Step Simplification" (formula "54") (ifInst ""  (formula "43")) (proofscript))
                                          (rule "false_right" (formula "54"))
                                          (rule "orRight" (formula "53"))
                                          (rule "notRight" (formula "53"))
                                          (rule "inEqSimp_ltToLeq" (formula "17") (term "0,0,0,0,0"))
                                          (rule "polySimp_mulComm0" (formula "17") (term "1,0,0,0,0,0,0,0"))
                                          (rule "inEqSimp_ltToLeq" (formula "29"))
                                          (rule "polySimp_mulComm0" (formula "29") (term "1,0,0"))
                                          (rule "polySimp_addComm1" (formula "29") (term "0"))
                                          (rule "inEqSimp_ltToLeq" (formula "12") (term "0,0,0"))
                                          (rule "polySimp_mulComm0" (formula "12") (term "1,0,0,0,0,0"))
                                          (rule "inEqSimp_ltToLeq" (formula "16") (term "0,0,0,0,0"))
                                          (rule "polySimp_mulComm0" (formula "16") (term "1,0,0,0,0,0,0,0"))
                                          (rule "inEqSimp_ltToLeq" (formula "12") (term "0,0,0,1,0"))
                                          (rule "polySimp_mulComm0" (formula "12") (term "1,0,0,0,0,0,1,0"))
                                          (rule "inEqSimp_ltToLeq" (formula "13") (term "0,0,0"))
                                          (rule "polySimp_mulComm0" (formula "13") (term "1,0,0,0,0,0"))
                                          (rule "applyEq" (formula "54") (term "0") (ifseqformula "36"))
                                          (rule "inEqSimp_sepPosMonomial1" (formula "38"))
                                          (rule "mul_literals" (formula "38") (term "1"))
                                          (rule "inEqSimp_sepPosMonomial0" (formula "17") (term "0,0,0,0,0"))
                                          (rule "polySimp_mulComm0" (formula "17") (term "1,0,0,0,0,0"))
                                          (rule "polySimp_rightDist" (formula "17") (term "1,0,0,0,0,0"))
                                          (rule "mul_literals" (formula "17") (term "0,1,0,0,0,0,0"))
                                          (rule "polySimp_mulLiterals" (formula "17") (term "1,1,0,0,0,0,0"))
                                          (rule "polySimp_elimOne" (formula "17") (term "1,1,0,0,0,0,0"))
                                          (rule "inEqSimp_sepNegMonomial0" (formula "29"))
                                          (rule "polySimp_mulLiterals" (formula "29") (term "0"))
                                          (rule "polySimp_elimOne" (formula "29") (term "0"))
                                          (rule "inEqSimp_sepPosMonomial0" (formula "12") (term "0,0,0"))
                                          (rule "polySimp_mulComm0" (formula "12") (term "1,0,0,0"))
                                          (rule "polySimp_rightDist" (formula "12") (term "1,0,0,0"))
                                          (rule "mul_literals" (formula "12") (term "0,1,0,0,0"))
                                          (rule "polySimp_mulLiterals" (formula "12") (term "1,1,0,0,0"))
                                          (rule "polySimp_elimOne" (formula "12") (term "1,1,0,0,0"))
                                          (rule "inEqSimp_sepPosMonomial0" (formula "16") (term "0,0,0,0,0"))
                                          (rule "polySimp_mulComm0" (formula "16") (term "1,0,0,0,0,0"))
                                          (rule "polySimp_rightDist" (formula "16") (term "1,0,0,0,0,0"))
                                          (rule "mul_literals" (formula "16") (term "0,1,0,0,0,0,0"))
                                          (rule "polySimp_mulLiterals" (formula "16") (term "1,1,0,0,0,0,0"))
                                          (rule "polySimp_elimOne" (formula "16") (term "1,1,0,0,0,0,0"))
                                          (rule "inEqSimp_sepPosMonomial0" (formula "12") (term "0,0,0,1,0"))
                                          (rule "polySimp_mulComm0" (formula "12") (term "1,0,0,0,1,0"))
                                          (rule "polySimp_rightDist" (formula "12") (term "1,0,0,0,1,0"))
                                          (rule "mul_literals" (formula "12") (term "0,1,0,0,0,1,0"))
                                          (rule "polySimp_mulLiterals" (formula "12") (term "1,1,0,0,0,1,0"))
                                          (rule "polySimp_elimOne" (formula "12") (term "1,1,0,0,0,1,0"))
                                          (rule "inEqSimp_sepPosMonomial0" (formula "13") (term "0,0,0"))
                                          (rule "polySimp_mulComm0" (formula "13") (term "1,0,0,0"))
                                          (rule "polySimp_rightDist" (formula "13") (term "1,0,0,0"))
                                          (rule "mul_literals" (formula "13") (term "0,1,0,0,0"))
                                          (rule "polySimp_mulLiterals" (formula "13") (term "1,1,0,0,0"))
                                          (rule "polySimp_elimOne" (formula "13") (term "1,1,0,0,0"))
                                          (rule "inEqSimp_contradEq7" (formula "44") (ifseqformula "38"))
                                          (rule "polySimp_mulComm0" (formula "44") (term "1,0,0"))
                                          (rule "polySimp_pullOutFactor1b" (formula "44") (term "0,0"))
                                          (rule "add_literals" (formula "44") (term "1,1,0,0"))
                                          (rule "times_zero_1" (formula "44") (term "1,0,0"))
                                          (rule "add_literals" (formula "44") (term "0,0"))
                                          (rule "leq_literals" (formula "44") (term "0"))
                                           (builtin "One Step Simplification" (formula "44"))
                                          (rule "false_right" (formula "44"))
                                          (rule "inEqSimp_subsumption1" (formula "27") (ifseqformula "38"))
                                          (rule "inEqSimp_homoInEq0" (formula "27") (term "0"))
                                          (rule "polySimp_pullOutFactor1b" (formula "27") (term "0,0"))
                                          (rule "add_literals" (formula "27") (term "1,1,0,0"))
                                          (rule "times_zero_1" (formula "27") (term "1,0,0"))
                                          (rule "add_zero_right" (formula "27") (term "0,0"))
                                          (rule "qeq_literals" (formula "27") (term "0"))
                                           (builtin "One Step Simplification" (formula "27"))
                                          (rule "true_left" (formula "27"))
                                          (rule "inEqSimp_subsumption1" (formula "36") (ifseqformula "26"))
                                          (rule "leq_literals" (formula "36") (term "0"))
                                           (builtin "One Step Simplification" (formula "36"))
                                          (rule "true_left" (formula "36"))
                                          (rule "inEqSimp_and_subsumption3" (formula "17") (term "0,0,0"))
                                          (rule "leq_literals" (formula "17") (term "0,1,0,0,0,0"))
                                           (builtin "One Step Simplification" (formula "17"))
                                          (rule "inEqSimp_and_subsumption3" (formula "16") (term "0,0,0"))
                                          (rule "leq_literals" (formula "16") (term "0,1,0,0,0,0"))
                                           (builtin "One Step Simplification" (formula "16"))
                                          (rule "nnf_imp2or" (formula "12") (term "0"))
                                          (rule "nnf_imp2or" (formula "13") (term "0"))
                                          (rule "nnf_imp2or" (formula "17") (term "0"))
                                          (rule "nnf_imp2or" (formula "16") (term "0"))
                                          (rule "nnf_notAnd" (formula "12") (term "0,0"))
                                          (rule "inEqSimp_notGeq" (formula "12") (term "1,0,0"))
                                          (rule "mul_literals" (formula "12") (term "1,0,0,1,0,0"))
                                          (rule "add_zero_right" (formula "12") (term "0,0,1,0,0"))
                                          (rule "inEqSimp_sepPosMonomial0" (formula "12") (term "1,0,0"))
                                          (rule "mul_literals" (formula "12") (term "1,1,0,0"))
                                          (rule "inEqSimp_notLeq" (formula "12") (term "0,0,0"))
                                          (rule "polySimp_rightDist" (formula "12") (term "1,0,0,0,0,0"))
                                          (rule "mul_literals" (formula "12") (term "0,1,0,0,0,0,0"))
                                          (rule "polySimp_addAssoc" (formula "12") (term "0,0,0,0,0"))
                                          (rule "add_literals" (formula "12") (term "0,0,0,0,0,0"))
                                          (rule "add_zero_left" (formula "12") (term "0,0,0,0,0"))
                                          (rule "inEqSimp_sepPosMonomial1" (formula "12") (term "0,0,0"))
                                          (rule "polySimp_mulLiterals" (formula "12") (term "1,0,0,0"))
                                          (rule "polySimp_elimOne" (formula "12") (term "1,0,0,0"))
                                          (rule "nnf_notAnd" (formula "13") (term "0,0"))
                                          (rule "inEqSimp_notLeq" (formula "13") (term "0,0,0"))
                                          (rule "polySimp_rightDist" (formula "13") (term "1,0,0,0,0,0"))
                                          (rule "mul_literals" (formula "13") (term "0,1,0,0,0,0,0"))
                                          (rule "polySimp_addAssoc" (formula "13") (term "0,0,0,0,0"))
                                          (rule "add_literals" (formula "13") (term "0,0,0,0,0,0"))
                                          (rule "add_zero_left" (formula "13") (term "0,0,0,0,0"))
                                          (rule "inEqSimp_sepPosMonomial1" (formula "13") (term "0,0,0"))
                                          (rule "polySimp_mulLiterals" (formula "13") (term "1,0,0,0"))
                                          (rule "polySimp_elimOne" (formula "13") (term "1,0,0,0"))
                                          (rule "inEqSimp_notGeq" (formula "13") (term "1,0,0"))
                                          (rule "mul_literals" (formula "13") (term "1,0,0,1,0,0"))
                                          (rule "add_zero_right" (formula "13") (term "0,0,1,0,0"))
                                          (rule "inEqSimp_sepPosMonomial0" (formula "13") (term "1,0,0"))
                                          (rule "mul_literals" (formula "13") (term "1,1,0,0"))
                                          (rule "nnf_notAnd" (formula "17") (term "0,0"))
                                          (rule "inEqSimp_notLeq" (formula "17") (term "1,0,0"))
                                          (rule "mul_literals" (formula "17") (term "1,0,0,1,0,0"))
                                          (rule "add_literals" (formula "17") (term "0,0,1,0,0"))
                                          (rule "inEqSimp_sepPosMonomial1" (formula "17") (term "1,0,0"))
                                          (rule "mul_literals" (formula "17") (term "1,1,0,0"))
                                          (rule "nnf_notAnd" (formula "16") (term "0,0"))
                                          (rule "inEqSimp_notLeq" (formula "16") (term "1,0,0"))
                                          (rule "mul_literals" (formula "16") (term "1,0,0,1,0,0"))
                                          (rule "add_literals" (formula "16") (term "0,0,1,0,0"))
                                          (rule "inEqSimp_sepPosMonomial1" (formula "16") (term "1,0,0"))
                                          (rule "mul_literals" (formula "16") (term "1,1,0,0"))
                                          (rule "nnf_notAnd" (formula "17") (term "0,0,0"))
                                          (rule "inEqSimp_notGeq" (formula "17") (term "1,0,0,0"))
                                          (rule "mul_literals" (formula "17") (term "1,0,0,1,0,0,0"))
                                          (rule "add_zero_right" (formula "17") (term "0,0,1,0,0,0"))
                                          (rule "inEqSimp_sepPosMonomial0" (formula "17") (term "1,0,0,0"))
                                          (rule "mul_literals" (formula "17") (term "1,1,0,0,0"))
                                          (rule "inEqSimp_notLeq" (formula "17") (term "0,0,0,0"))
                                          (rule "polySimp_rightDist" (formula "17") (term "1,0,0,0,0,0,0"))
                                          (rule "mul_literals" (formula "17") (term "0,1,0,0,0,0,0,0"))
                                          (rule "polySimp_addAssoc" (formula "17") (term "0,0,0,0,0,0"))
                                          (rule "add_literals" (formula "17") (term "0,0,0,0,0,0,0"))
                                          (rule "add_zero_left" (formula "17") (term "0,0,0,0,0,0"))
                                          (rule "inEqSimp_sepPosMonomial1" (formula "17") (term "0,0,0,0"))
                                          (rule "polySimp_mulLiterals" (formula "17") (term "1,0,0,0,0"))
                                          (rule "polySimp_elimOne" (formula "17") (term "1,0,0,0,0"))
                                          (rule "nnf_notAnd" (formula "16") (term "0,0,0"))
                                          (rule "inEqSimp_notGeq" (formula "16") (term "1,0,0,0"))
                                          (rule "mul_literals" (formula "16") (term "1,0,0,1,0,0,0"))
                                          (rule "add_zero_right" (formula "16") (term "0,0,1,0,0,0"))
                                          (rule "inEqSimp_sepPosMonomial0" (formula "16") (term "1,0,0,0"))
                                          (rule "mul_literals" (formula "16") (term "1,1,0,0,0"))
                                          (rule "inEqSimp_notLeq" (formula "16") (term "0,0,0,0"))
                                          (rule "polySimp_rightDist" (formula "16") (term "1,0,0,0,0,0,0"))
                                          (rule "mul_literals" (formula "16") (term "0,1,0,0,0,0,0,0"))
                                          (rule "polySimp_addAssoc" (formula "16") (term "0,0,0,0,0,0"))
                                          (rule "add_literals" (formula "16") (term "0,0,0,0,0,0,0"))
                                          (rule "add_zero_left" (formula "16") (term "0,0,0,0,0,0"))
                                          (rule "inEqSimp_sepPosMonomial1" (formula "16") (term "0,0,0,0"))
                                          (rule "polySimp_mulLiterals" (formula "16") (term "1,0,0,0,0"))
                                          (rule "polySimp_elimOne" (formula "16") (term "1,0,0,0,0"))
                                          (rule "commute_or_2" (formula "13") (term "0"))
                                          (rule "commute_or" (formula "12") (term "0,0"))
                                          (rule "commute_or_2" (formula "17") (term "0"))
                                          (rule "commute_or_2" (formula "16") (term "0"))
                                          (rule "commute_or" (formula "13") (term "0,0"))
                                          (rule "commute_or_2" (formula "13") (term "0"))
                                          (rule "commute_or_2" (formula "17") (term "0,0"))
                                          (rule "commute_or_2" (formula "16") (term "0,0"))
                                          (rule "commute_and" (formula "12") (term "0,0,1,0"))
                                          (rule "commute_or" (formula "17") (term "0,0,0"))
                                          (rule "commute_or_2" (formula "17") (term "0,0"))
                                          (rule "commute_or_2" (formula "17") (term "0"))
                                          (rule "commute_or" (formula "16") (term "0,0,0"))
                                          (rule "commute_or_2" (formula "16") (term "0,0"))
                                          (rule "commute_or_2" (formula "16") (term "0"))
                                          (rule "commute_and_2" (formula "12") (term "0,1,0"))
                                          (rule "cut_direct" (formula "33") (term "0,0,0"))
                                          (branch "CUT: result_2.<created> = TRUE TRUE"
                                              (builtin "One Step Simplification" (formula "34"))
                                             (rule "true_left" (formula "34"))
                                             (rule "seqGetAlphaCast" (formula "1") (term "0"))
                                             (rule "castedGetAny" (formula "1") (term "0"))
                                              (builtin "One Step Simplification" (formula "1"))
                                             (rule "true_left" (formula "1"))
                                             (rule "ex_pull_out3" (formula "12") (term "0"))
                                             (rule "cnf_rightDist" (formula "12") (term "0,0"))
                                             (rule "shift_paren_or" (formula "12") (term "1,0,0"))
                                             (rule "cnf_rightDist" (formula "12") (term "0,0,0"))
                                             (rule "commute_or_2" (formula "12") (term "0,0,0,0"))
                                             (rule "shift_paren_or" (formula "12") (term "1,0,0,0"))
                                             (rule "commute_or" (formula "12") (term "0,0,0,0,0"))
                                             (rule "allLeft" (formula "13") (inst "t=int::select(anon_heap_LOOP<<anonHeapFunction>>,
            result,
            java.util.Iterator::$index)"))
                                             (rule "replace_known_left" (formula "13") (term "0,0,0") (ifseqformula "1"))
                                              (builtin "One Step Simplification" (formula "13"))
                                             (rule "inEqSimp_commuteGeq" (formula "13") (term "1"))
                                             (rule "inEqSimp_contradInEq1" (formula "13") (term "1") (ifseqformula "37"))
                                             (rule "inEqSimp_homoInEq1" (formula "13") (term "0,1"))
                                             (rule "polySimp_pullOutFactor1b" (formula "13") (term "0,0,1"))
                                             (rule "add_literals" (formula "13") (term "1,1,0,0,1"))
                                             (rule "times_zero_1" (formula "13") (term "1,0,0,1"))
                                             (rule "add_literals" (formula "13") (term "0,0,1"))
                                             (rule "leq_literals" (formula "13") (term "0,1"))
                                              (builtin "One Step Simplification" (formula "13"))
                                             (rule "inEqSimp_contradInEq0" (formula "27") (ifseqformula "13"))
                                             (rule "qeq_literals" (formula "27") (term "0"))
                                              (builtin "One Step Simplification" (formula "27"))
                                             (rule "closeFalse" (formula "27"))
                                          )
                                          (branch "CUT: result_2.<created> = TRUE FALSE"
                                              (builtin "One Step Simplification" (formula "33"))
                                             (rule "seqGetAlphaCast" (formula "1") (term "0"))
                                             (rule "castedGetAny" (formula "1") (term "0"))
                                              (builtin "One Step Simplification" (formula "1"))
                                             (rule "true_left" (formula "1"))
                                             (rule "ex_pull_out3" (formula "12") (term "0"))
                                             (rule "cnf_rightDist" (formula "12") (term "0,0"))
                                             (rule "shift_paren_or" (formula "12") (term "1,0,0"))
                                             (rule "cnf_rightDist" (formula "12") (term "0,0,0"))
                                             (rule "commute_or_2" (formula "12") (term "0,0,0,0"))
                                             (rule "shift_paren_or" (formula "12") (term "1,0,0,0"))
                                             (rule "commute_or" (formula "12") (term "0,0,0,0,0"))
                                             (rule "allLeft" (formula "13") (inst "t=int::select(anon_heap_LOOP<<anonHeapFunction>>,
            result,
            java.util.Iterator::$index)"))
                                             (rule "replace_known_left" (formula "13") (term "0,0,0") (ifseqformula "1"))
                                              (builtin "One Step Simplification" (formula "13"))
                                             (rule "inEqSimp_commuteGeq" (formula "13") (term "1"))
                                             (rule "inEqSimp_contradInEq1" (formula "13") (term "0") (ifseqformula "27"))
                                             (rule "qeq_literals" (formula "13") (term "0,0"))
                                              (builtin "One Step Simplification" (formula "13"))
                                             (rule "inEqSimp_contradInEq1" (formula "13") (ifseqformula "37"))
                                             (rule "andLeft" (formula "13"))
                                             (rule "inEqSimp_homoInEq1" (formula "13"))
                                             (rule "polySimp_pullOutFactor1b" (formula "13") (term "0"))
                                             (rule "add_literals" (formula "13") (term "1,1,0"))
                                             (rule "times_zero_1" (formula "13") (term "1,0"))
                                             (rule "add_literals" (formula "13") (term "0"))
                                             (rule "leq_literals" (formula "13"))
                                             (rule "closeFalse" (formula "13"))
                                          )
                                       )
                                    )
                                    (branch
                                        (builtin "One Step Simplification" (formula "54"))
                                       (rule "allRight" (formula "54") (inst "sk=f_0"))
                                       (rule "allRight" (formula "54") (inst "sk=o_0"))
                                       (rule "orRight" (formula "54"))
                                       (rule "orRight" (formula "54"))
                                       (rule "eqSymm" (formula "56"))
                                       (rule "inEqSimp_ltToLeq" (formula "16") (term "0,0,0,0,0"))
                                       (rule "polySimp_mulComm0" (formula "16") (term "1,0,0,0,0,0,0,0"))
                                       (rule "inEqSimp_ltToLeq" (formula "11") (term "0,0,0,1,0"))
                                       (rule "polySimp_mulComm0" (formula "11") (term "1,0,0,0,0,0,1,0"))
                                       (rule "inEqSimp_ltToLeq" (formula "15") (term "0,0,0,0,0"))
                                       (rule "polySimp_mulComm0" (formula "15") (term "1,0,0,0,0,0,0,0"))
                                       (rule "inEqSimp_ltToLeq" (formula "12") (term "0,0,0"))
                                       (rule "polySimp_mulComm0" (formula "12") (term "1,0,0,0,0,0"))
                                       (rule "inEqSimp_ltToLeq" (formula "11") (term "0,0,0"))
                                       (rule "polySimp_mulComm0" (formula "11") (term "1,0,0,0,0,0"))
                                       (rule "inEqSimp_ltToLeq" (formula "28"))
                                       (rule "polySimp_mulComm0" (formula "28") (term "1,0,0"))
                                       (rule "polySimp_addComm1" (formula "28") (term "0"))
                                       (rule "inEqSimp_sepPosMonomial1" (formula "37"))
                                       (rule "mul_literals" (formula "37") (term "1"))
                                       (rule "inEqSimp_sepPosMonomial0" (formula "16") (term "0,0,0,0,0"))
                                       (rule "polySimp_mulComm0" (formula "16") (term "1,0,0,0,0,0"))
                                       (rule "polySimp_rightDist" (formula "16") (term "1,0,0,0,0,0"))
                                       (rule "polySimp_mulLiterals" (formula "16") (term "1,1,0,0,0,0,0"))
                                       (rule "mul_literals" (formula "16") (term "0,1,0,0,0,0,0"))
                                       (rule "polySimp_elimOne" (formula "16") (term "1,1,0,0,0,0,0"))
                                       (rule "inEqSimp_sepPosMonomial0" (formula "11") (term "0,0,0,1,0"))
                                       (rule "polySimp_mulComm0" (formula "11") (term "1,0,0,0,1,0"))
                                       (rule "polySimp_rightDist" (formula "11") (term "1,0,0,0,1,0"))
                                       (rule "polySimp_mulLiterals" (formula "11") (term "1,1,0,0,0,1,0"))
                                       (rule "mul_literals" (formula "11") (term "0,1,0,0,0,1,0"))
                                       (rule "polySimp_elimOne" (formula "11") (term "1,1,0,0,0,1,0"))
                                       (rule "inEqSimp_sepPosMonomial0" (formula "15") (term "0,0,0,0,0"))
                                       (rule "polySimp_mulComm0" (formula "15") (term "1,0,0,0,0,0"))
                                       (rule "polySimp_rightDist" (formula "15") (term "1,0,0,0,0,0"))
                                       (rule "polySimp_mulLiterals" (formula "15") (term "1,1,0,0,0,0,0"))
                                       (rule "mul_literals" (formula "15") (term "0,1,0,0,0,0,0"))
                                       (rule "polySimp_elimOne" (formula "15") (term "1,1,0,0,0,0,0"))
                                       (rule "inEqSimp_sepPosMonomial0" (formula "12") (term "0,0,0"))
                                       (rule "polySimp_mulComm0" (formula "12") (term "1,0,0,0"))
                                       (rule "polySimp_rightDist" (formula "12") (term "1,0,0,0"))
                                       (rule "polySimp_mulLiterals" (formula "12") (term "1,1,0,0,0"))
                                       (rule "mul_literals" (formula "12") (term "0,1,0,0,0"))
                                       (rule "polySimp_elimOne" (formula "12") (term "1,1,0,0,0"))
                                       (rule "inEqSimp_sepPosMonomial0" (formula "11") (term "0,0,0"))
                                       (rule "polySimp_mulComm0" (formula "11") (term "1,0,0,0"))
                                       (rule "polySimp_rightDist" (formula "11") (term "1,0,0,0"))
                                       (rule "polySimp_mulLiterals" (formula "11") (term "1,1,0,0,0"))
                                       (rule "mul_literals" (formula "11") (term "0,1,0,0,0"))
                                       (rule "polySimp_elimOne" (formula "11") (term "1,1,0,0,0"))
                                       (rule "inEqSimp_sepNegMonomial0" (formula "28"))
                                       (rule "polySimp_mulLiterals" (formula "28") (term "0"))
                                       (rule "polySimp_elimOne" (formula "28") (term "0"))
                                       (rule "inEqSimp_contradEq7" (formula "43") (ifseqformula "37"))
                                       (rule "polySimp_mulComm0" (formula "43") (term "1,0,0"))
                                       (rule "polySimp_pullOutFactor1b" (formula "43") (term "0,0"))
                                       (rule "add_literals" (formula "43") (term "1,1,0,0"))
                                       (rule "times_zero_1" (formula "43") (term "1,0,0"))
                                       (rule "add_zero_right" (formula "43") (term "0,0"))
                                       (rule "leq_literals" (formula "43") (term "0"))
                                        (builtin "One Step Simplification" (formula "43"))
                                       (rule "false_right" (formula "43"))
                                       (rule "inEqSimp_subsumption1" (formula "26") (ifseqformula "37"))
                                       (rule "inEqSimp_homoInEq0" (formula "26") (term "0"))
                                       (rule "polySimp_pullOutFactor1b" (formula "26") (term "0,0"))
                                       (rule "add_literals" (formula "26") (term "1,1,0,0"))
                                       (rule "times_zero_1" (formula "26") (term "1,0,0"))
                                       (rule "add_literals" (formula "26") (term "0,0"))
                                       (rule "qeq_literals" (formula "26") (term "0"))
                                        (builtin "One Step Simplification" (formula "26"))
                                       (rule "true_left" (formula "26"))
                                       (rule "inEqSimp_subsumption1" (formula "35") (ifseqformula "25"))
                                       (rule "leq_literals" (formula "35") (term "0"))
                                        (builtin "One Step Simplification" (formula "35"))
                                       (rule "true_left" (formula "35"))
                                       (rule "pullOutSelect" (formula "52") (term "0") (inst "selectSK=f_0_0"))
                                       (rule "simplifySelectOfStore" (formula "1"))
                                        (builtin "One Step Simplification" (formula "1"))
                                       (rule "castDel" (formula "1") (term "1,0"))
                                       (rule "eqSymm" (formula "53"))
                                       (rule "eqSymm" (formula "1") (term "0,0,0"))
                                       (rule "eqSymm" (formula "1") (term "1,0,0"))
                                       (rule "pullOutSelect" (formula "1") (term "2,0") (inst "selectSK=f_0_1"))
                                       (rule "simplifySelectOfStore" (formula "1"))
                                        (builtin "One Step Simplification" (formula "1"))
                                       (rule "castDel" (formula "1") (term "1,0"))
                                       (rule "eqSymm" (formula "1") (term "1,0,0"))
                                       (rule "eqSymm" (formula "1") (term "0,0,0"))
                                       (rule "pullOutSelect" (formula "1") (term "2,0") (inst "selectSK=f_0_2"))
                                       (rule "simplifySelectOfStore" (formula "1"))
                                        (builtin "One Step Simplification" (formula "1"))
                                       (rule "castDel" (formula "1") (term "1,0"))
                                       (rule "eqSymm" (formula "1") (term "1,0,0"))
                                       (rule "eqSymm" (formula "1") (term "0,0,0"))
                                       (rule "pullOutSelect" (formula "1") (term "2,0") (inst "selectSK=f_0_3"))
                                       (rule "simplifySelectOfCreate" (formula "1"))
                                       (rule "castDel" (formula "1") (term "1,0"))
                                       (rule "eqSymm" (formula "1") (term "0,0,0,0"))
                                       (rule "replace_known_right" (formula "1") (term "0,1,0,0,0") (ifseqformula "44"))
                                        (builtin "One Step Simplification" (formula "1"))
                                       (rule "pullOutSelect" (formula "1") (term "2,0") (inst "selectSK=f_0_4"))
                                       (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "35"))
                                        (builtin "One Step Simplification" (formula "1"))
                                       (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,0,1,1,0,0") (ifseqformula "23"))
                                       (rule "elementOfSingleton" (formula "1") (term "0,0,0,0"))
                                       (rule "pullOutSelect" (formula "1") (term "2,0") (inst "selectSK=f_0_5"))
                                       (rule "simplifySelectOfAnon" (formula "1"))
                                        (builtin "One Step Simplification" (formula "1"))
                                       (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,1,1,0,0") (ifseqformula "24"))
                                       (rule "elementOfUnion" (formula "1") (term "0,0,0,0"))
                                       (rule "elementOfSingleton" (formula "1") (term "0,0,0,0,0"))
                                       (rule "replace_known_right" (formula "1") (term "0,0,0,0,0") (ifseqformula "56"))
                                        (builtin "One Step Simplification" (formula "1"))
                                       (rule "elementOfSingleton" (formula "1") (term "0,0,0,0"))
                                       (rule "pullOutSelect" (formula "1") (term "2,0") (inst "selectSK=f_0_6"))
                                       (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "25"))
                                        (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "58")))
                                       (rule "applyEqReverse" (formula "2") (term "2,0") (ifseqformula "1"))
                                       (rule "hideAuxiliaryEq" (formula "1"))
                                       (rule "inEqSimp_and_subsumption3" (formula "22") (term "0,0,0"))
                                       (rule "leq_literals" (formula "22") (term "0,1,0,0,0,0"))
                                        (builtin "One Step Simplification" (formula "22"))
                                       (rule "inEqSimp_and_subsumption3" (formula "21") (term "0,0,0"))
                                       (rule "leq_literals" (formula "21") (term "0,1,0,0,0,0"))
                                        (builtin "One Step Simplification" (formula "21"))
                                       (rule "nnf_imp2or" (formula "18") (term "0"))
                                       (rule "nnf_imp2or" (formula "17") (term "0"))
                                       (rule "nnf_imp2or" (formula "22") (term "0"))
                                       (rule "nnf_imp2or" (formula "21") (term "0"))
                                       (rule "nnf_notAnd" (formula "18") (term "0,0"))
                                       (rule "inEqSimp_notGeq" (formula "18") (term "1,0,0"))
                                       (rule "times_zero_1" (formula "18") (term "1,0,0,1,0,0"))
                                       (rule "add_zero_right" (formula "18") (term "0,0,1,0,0"))
                                       (rule "inEqSimp_sepPosMonomial0" (formula "18") (term "1,0,0"))
                                       (rule "mul_literals" (formula "18") (term "1,1,0,0"))
                                       (rule "inEqSimp_notLeq" (formula "18") (term "0,0,0"))
                                       (rule "polySimp_rightDist" (formula "18") (term "1,0,0,0,0,0"))
                                       (rule "mul_literals" (formula "18") (term "0,1,0,0,0,0,0"))
                                       (rule "polySimp_addAssoc" (formula "18") (term "0,0,0,0,0"))
                                       (rule "add_literals" (formula "18") (term "0,0,0,0,0,0"))
                                       (rule "add_zero_left" (formula "18") (term "0,0,0,0,0"))
                                       (rule "inEqSimp_sepPosMonomial1" (formula "18") (term "0,0,0"))
                                       (rule "polySimp_mulLiterals" (formula "18") (term "1,0,0,0"))
                                       (rule "polySimp_elimOne" (formula "18") (term "1,0,0,0"))
                                       (rule "nnf_notAnd" (formula "17") (term "0,0"))
                                       (rule "inEqSimp_notGeq" (formula "17") (term "1,0,0"))
                                       (rule "mul_literals" (formula "17") (term "1,0,0,1,0,0"))
                                       (rule "add_zero_right" (formula "17") (term "0,0,1,0,0"))
                                       (rule "inEqSimp_sepPosMonomial0" (formula "17") (term "1,0,0"))
                                       (rule "mul_literals" (formula "17") (term "1,1,0,0"))
                                       (rule "inEqSimp_notLeq" (formula "17") (term "0,0,0"))
                                       (rule "polySimp_rightDist" (formula "17") (term "1,0,0,0,0,0"))
                                       (rule "mul_literals" (formula "17") (term "0,1,0,0,0,0,0"))
                                       (rule "polySimp_addAssoc" (formula "17") (term "0,0,0,0,0"))
                                       (rule "add_literals" (formula "17") (term "0,0,0,0,0,0"))
                                       (rule "add_zero_left" (formula "17") (term "0,0,0,0,0"))
                                       (rule "inEqSimp_sepPosMonomial1" (formula "17") (term "0,0,0"))
                                       (rule "polySimp_mulLiterals" (formula "17") (term "1,0,0,0"))
                                       (rule "polySimp_elimOne" (formula "17") (term "1,0,0,0"))
                                       (rule "nnf_notAnd" (formula "22") (term "0,0"))
                                       (rule "inEqSimp_notLeq" (formula "22") (term "1,0,0"))
                                       (rule "mul_literals" (formula "22") (term "1,0,0,1,0,0"))
                                       (rule "add_literals" (formula "22") (term "0,0,1,0,0"))
                                       (rule "inEqSimp_sepPosMonomial1" (formula "22") (term "1,0,0"))
                                       (rule "mul_literals" (formula "22") (term "1,1,0,0"))
                                       (rule "nnf_notAnd" (formula "21") (term "0,0"))
                                       (rule "inEqSimp_notLeq" (formula "21") (term "1,0,0"))
                                       (rule "mul_literals" (formula "21") (term "1,0,0,1,0,0"))
                                       (rule "add_literals" (formula "21") (term "0,0,1,0,0"))
                                       (rule "inEqSimp_sepPosMonomial1" (formula "21") (term "1,0,0"))
                                       (rule "mul_literals" (formula "21") (term "1,1,0,0"))
                                       (rule "nnf_notAnd" (formula "22") (term "0,0,0"))
                                       (rule "inEqSimp_notLeq" (formula "22") (term "0,0,0,0"))
                                       (rule "polySimp_rightDist" (formula "22") (term "1,0,0,0,0,0,0"))
                                       (rule "mul_literals" (formula "22") (term "0,1,0,0,0,0,0,0"))
                                       (rule "polySimp_addAssoc" (formula "22") (term "0,0,0,0,0,0"))
                                       (rule "add_literals" (formula "22") (term "0,0,0,0,0,0,0"))
                                       (rule "add_zero_left" (formula "22") (term "0,0,0,0,0,0"))
                                       (rule "inEqSimp_sepPosMonomial1" (formula "22") (term "0,0,0,0"))
                                       (rule "polySimp_mulLiterals" (formula "22") (term "1,0,0,0,0"))
                                       (rule "polySimp_elimOne" (formula "22") (term "1,0,0,0,0"))
                                       (rule "inEqSimp_notGeq" (formula "22") (term "1,0,0,0"))
                                       (rule "mul_literals" (formula "22") (term "1,0,0,1,0,0,0"))
                                       (rule "add_literals" (formula "22") (term "0,0,1,0,0,0"))
                                       (rule "inEqSimp_sepPosMonomial0" (formula "22") (term "1,0,0,0"))
                                       (rule "mul_literals" (formula "22") (term "1,1,0,0,0"))
                                       (rule "nnf_notAnd" (formula "21") (term "0,0,0"))
                                       (rule "inEqSimp_notGeq" (formula "21") (term "1,0,0,0"))
                                       (rule "mul_literals" (formula "21") (term "1,0,0,1,0,0,0"))
                                       (rule "add_literals" (formula "21") (term "0,0,1,0,0,0"))
                                       (rule "inEqSimp_sepPosMonomial0" (formula "21") (term "1,0,0,0"))
                                       (rule "mul_literals" (formula "21") (term "1,1,0,0,0"))
                                       (rule "inEqSimp_notLeq" (formula "21") (term "0,0,0,0"))
                                       (rule "polySimp_rightDist" (formula "21") (term "1,0,0,0,0,0,0"))
                                       (rule "mul_literals" (formula "21") (term "0,1,0,0,0,0,0,0"))
                                       (rule "polySimp_addAssoc" (formula "21") (term "0,0,0,0,0,0"))
                                       (rule "add_literals" (formula "21") (term "0,0,0,0,0,0,0"))
                                       (rule "add_zero_left" (formula "21") (term "0,0,0,0,0,0"))
                                       (rule "inEqSimp_sepPosMonomial1" (formula "21") (term "0,0,0,0"))
                                       (rule "polySimp_mulLiterals" (formula "21") (term "1,0,0,0,0"))
                                       (rule "polySimp_elimOne" (formula "21") (term "1,0,0,0,0"))
                                       (rule "commute_and" (formula "56"))
                                       (rule "commute_and" (formula "6") (term "0,0"))
                                       (rule "commute_or_2" (formula "18") (term "0"))
                                       (rule "commute_and" (formula "5") (term "0,0"))
                                       (rule "commute_and" (formula "4") (term "0,0"))
                                       (rule "commute_and" (formula "3") (term "0,0"))
                                       (rule "commute_or" (formula "17") (term "0,0"))
                                       (rule "commute_or_2" (formula "2") (term "0,1,1,0,0"))
                                       (rule "commute_and_2" (formula "2") (term "0,0,0"))
                                       (rule "commute_or_2" (formula "22") (term "0"))
                                       (rule "commute_and_2" (formula "1") (term "0,0,0"))
                                       (rule "commute_or_2" (formula "21") (term "0"))
                                       (rule "commute_or" (formula "18") (term "0,0"))
                                       (rule "commute_or_2" (formula "18") (term "0"))
                                       (rule "commute_and" (formula "17") (term "0,0,1,0"))
                                       (rule "commute_or_2" (formula "22") (term "0,0"))
                                       (rule "commute_or_2" (formula "21") (term "0,0"))
                                       (rule "commute_or" (formula "22") (term "0,0,0"))
                                       (rule "commute_or_2" (formula "22") (term "0,0"))
                                       (rule "commute_or_2" (formula "22") (term "0"))
                                       (rule "commute_or" (formula "21") (term "0,0,0"))
                                       (rule "commute_or_2" (formula "21") (term "0,0"))
                                       (rule "commute_or_2" (formula "21") (term "0"))
                                       (rule "applyEq_and_gen3" (formula "2") (term "0,0,0"))
                                        (builtin "One Step Simplification" (formula "2"))
                                       (rule "applyEq_and_gen3" (formula "1") (term "0,0,0"))
                                        (builtin "One Step Simplification" (formula "1"))
                                       (rule "commute_and_2" (formula "17") (term "0,1,0"))
                                       (rule "commute_and" (formula "2") (term "0,0,0"))
                                       (rule "commute_and" (formula "1") (term "0,0,0"))
                                       (rule "cut_direct" (formula "38") (term "0,0,0"))
                                       (branch "CUT: result_2.<created> = TRUE TRUE"
                                           (builtin "One Step Simplification" (formula "39"))
                                          (rule "true_left" (formula "39"))
                                          (rule "cut_direct" (formula "57") (term "0,0"))
                                          (branch "CUT: o_0 = null TRUE"
                                              (builtin "One Step Simplification" (formula "58"))
                                             (rule "false_right" (formula "58"))
                                             (rule "replace_known_left" (formula "3") (term "0,0,1,0,0") (ifseqformula "1"))
                                              (builtin "One Step Simplification" (formula "3"))
                                             (rule "replace_known_left" (formula "2") (term "0,0,1,0,0") (ifseqformula "1"))
                                              (builtin "One Step Simplification" (formula "2"))
                                             (rule "applyEqRigid" (formula "2") (term "0,1,0,0") (ifseqformula "1"))
                                             (rule "eqSymm" (formula "2") (term "1,0,0"))
                                             (rule "replace_known_right" (formula "2") (term "1,0,0") (ifseqformula "50"))
                                              (builtin "One Step Simplification" (formula "2"))
                                             (rule "applyEqReverse" (formula "3") (term "2,0") (ifseqformula "2"))
                                             (rule "hideAuxiliaryEq" (formula "2"))
                                             (rule "applyEqRigid" (formula "2") (term "1,1,0") (ifseqformula "1"))
                                             (rule "applyEq" (formula "57") (term "1,0") (ifseqformula "1"))
                                             (rule "applyEqRigid" (formula "56") (term "0,1") (ifseqformula "1"))
                                             (rule "eqSymm" (formula "56") (term "1"))
                                             (rule "replace_known_right" (formula "56") (term "1") (ifseqformula "51"))
                                              (builtin "One Step Simplification" (formula "56"))
                                             (rule "false_right" (formula "56"))
                                             (rule "applyEq" (formula "2") (term "0,1,0,0") (ifseqformula "1"))
                                             (rule "eqSymm" (formula "2") (term "1,0,0"))
                                             (rule "replace_known_right" (formula "2") (term "1,0,0") (ifseqformula "49"))
                                              (builtin "One Step Simplification" (formula "2"))
                                             (rule "applyEqReverse" (formula "3") (term "2,0") (ifseqformula "2"))
                                             (rule "hideAuxiliaryEq" (formula "2"))
                                             (rule "applyEqRigid" (formula "4") (term "0,1,0,0") (ifseqformula "1"))
                                             (rule "eqSymm" (formula "4") (term "1,0,0"))
                                             (rule "replace_known_right" (formula "4") (term "1,0,0") (ifseqformula "45"))
                                              (builtin "One Step Simplification" (formula "4"))
                                             (rule "applyEqReverse" (formula "5") (term "2,0") (ifseqformula "4"))
                                             (rule "hideAuxiliaryEq" (formula "4"))
                                             (rule "applyEqRigid" (formula "2") (term "0,1,0,0") (ifseqformula "1"))
                                             (rule "eqSymm" (formula "2") (term "1,0,0"))
                                             (rule "replace_known_right" (formula "2") (term "1,0,0") (ifseqformula "44"))
                                              (builtin "One Step Simplification" (formula "2"))
                                             (rule "applyEqReverse" (formula "3") (term "2,0") (ifseqformula "2"))
                                             (rule "hideAuxiliaryEq" (formula "2"))
                                             (rule "applyEq" (formula "2") (term "0,1,0,0") (ifseqformula "1"))
                                             (rule "eqSymm" (formula "2") (term "1,0,0"))
                                             (rule "replace_known_right" (formula "2") (term "1,0,0") (ifseqformula "43"))
                                              (builtin "One Step Simplification" (formula "2"))
                                             (rule "applyEqReverse" (formula "3") (term "2,0") (ifseqformula "2"))
                                             (rule "hideAuxiliaryEq" (formula "2"))
                                             (rule "applyEq" (formula "2") (term "0,1,0,0") (ifseqformula "1"))
                                             (rule "eqSymm" (formula "2") (term "1,0,0"))
                                             (rule "replace_known_right" (formula "2") (term "1,0,0") (ifseqformula "42"))
                                              (builtin "One Step Simplification" (formula "2"))
                                             (rule "applyEqReverse" (formula "52") (term "1") (ifseqformula "2"))
                                             (rule "hideAuxiliaryEq" (formula "2"))
                                             (rule "eqSymm" (formula "51"))
                                             (rule "applyEqRigid" (formula "51") (term "1,0") (ifseqformula "1"))
                                              (builtin "One Step Simplification" (formula "51"))
                                             (rule "closeTrue" (formula "51"))
                                          )
                                          (branch "CUT: o_0 = null FALSE"
                                              (builtin "One Step Simplification" (formula "58"))
                                             (rule "notRight" (formula "58"))
                                             (rule "replace_known_left" (formula "3") (term "0,0,0,1,1,0,0") (ifseqformula "1"))
                                              (builtin "One Step Simplification" (formula "3") (ifInst ""  (formula "58")))
                                             (rule "replace_known_right" (formula "2") (term "0,0,1,0,0") (ifseqformula "58"))
                                              (builtin "One Step Simplification" (formula "2") (ifInst ""  (formula "1")))
                                             (rule "ex_pull_out3" (formula "18") (term "0"))
                                             (rule "cnf_rightDist" (formula "18") (term "0,0"))
                                             (rule "shift_paren_or" (formula "18") (term "1,0,0"))
                                             (rule "cnf_rightDist" (formula "18") (term "0,0,0"))
                                             (rule "commute_or_2" (formula "18") (term "0,0,0,0"))
                                             (rule "shift_paren_or" (formula "18") (term "1,0,0,0"))
                                             (rule "commute_or" (formula "18") (term "0,0,0,0,0"))
                                             (rule "ifthenelse_split" (formula "2") (term "0"))
                                             (branch "f_0 = java.util.Iterator::$index ∧ o_0 = result TRUE"
                                                (rule "andLeft" (formula "2"))
                                                (rule "applyEqReverse" (formula "5") (term "2,0") (ifseqformula "4"))
                                                (rule "hideAuxiliaryEq" (formula "4"))
                                                (rule "replace_known_left" (formula "4") (term "0,0,0") (ifseqformula "2"))
                                                 (builtin "One Step Simplification" (formula "4") (ifInst ""  (formula "3")))
                                                (rule "applyEqReverse" (formula "5") (term "2,0") (ifseqformula "4"))
                                                (rule "hideAuxiliaryEq" (formula "4"))
                                                (rule "applyEq" (formula "4") (term "1,2,0") (ifseqformula "3"))
                                                (rule "applyEq" (formula "4") (term "2,2,0") (ifseqformula "2"))
                                                (rule "narrowSelectType" (formula "4") (term "2,0") (ifseqformula "36"))
                                                (rule "applyEqRigid" (formula "59") (term "2,0") (ifseqformula "2"))
                                                (rule "narrowSelectType" (formula "59") (term "0") (ifseqformula "13"))
                                                (rule "eqSymm" (formula "59"))
                                                (rule "applyEq" (formula "6") (term "0,0,0,0") (ifseqformula "2"))
                                                 (builtin "One Step Simplification" (formula "6"))
                                                (rule "applyEqReverse" (formula "7") (term "2,0") (ifseqformula "6"))
                                                (rule "hideAuxiliaryEq" (formula "6"))
                                                (rule "applyEq" (formula "5") (term "0,1,0,0") (ifseqformula "3"))
                                                (rule "sortsDisjointModuloNull" (formula "5") (term "1,0,0"))
                                                (rule "replace_known_right" (formula "5") (term "0,1,0,0") (ifseqformula "49"))
                                                 (builtin "One Step Simplification" (formula "5") (ifInst ""  (formula "46")))
                                                (rule "applyEqReverse" (formula "6") (term "2,0") (ifseqformula "5"))
                                                (rule "hideAuxiliaryEq" (formula "5"))
                                                (rule "applyEq" (formula "55") (term "0,0") (ifseqformula "2"))
                                                 (builtin "One Step Simplification" (formula "55"))
                                                (rule "false_right" (formula "55"))
                                                (rule "applyEq" (formula "5") (term "0,0,0,0") (ifseqformula "2"))
                                                 (builtin "One Step Simplification" (formula "5"))
                                                (rule "applyEqReverse" (formula "56") (term "0") (ifseqformula "5"))
                                                (rule "hideAuxiliaryEq" (formula "5"))
                                                (rule "applyEq" (formula "1") (term "1,0") (ifseqformula "3"))
                                                (rule "close" (formula "46") (ifseqformula "1"))
                                             )
                                             (branch "f_0 = java.util.Iterator::$index ∧ o_0 = result FALSE"
                                                (rule "applyEqReverse" (formula "3") (term "2,0") (ifseqformula "2"))
                                                (rule "hideAuxiliaryEq" (formula "2"))
                                                (rule "replace_known_right" (formula "2") (term "0,0") (ifseqformula "42"))
                                                 (builtin "One Step Simplification" (formula "2"))
                                                (rule "applyEqReverse" (formula "3") (term "2,0") (ifseqformula "2"))
                                                (rule "hideAuxiliaryEq" (formula "2"))
                                                (rule "commute_and" (formula "16") (term "0,0,0"))
                                                (rule "commute_and_2" (formula "16") (term "0,0"))
                                                (rule "ifthenelse_split" (formula "2") (term "0"))
                                                (branch "f_0 = java.lang.Object::<created> ∧ o_0 = c_3 TRUE"
                                                   (rule "andLeft" (formula "2"))
                                                   (rule "applyEqReverse" (formula "5") (term "2,0") (ifseqformula "4"))
                                                   (rule "hideAuxiliaryEq" (formula "4"))
                                                   (rule "replace_known_left" (formula "6") (term "1,0,0") (ifseqformula "3"))
                                                    (builtin "One Step Simplification" (formula "6"))
                                                   (rule "replace_known_left" (formula "5") (term "1,0,0") (ifseqformula "3"))
                                                    (builtin "One Step Simplification" (formula "5"))
                                                   (rule "replace_known_left" (formula "4") (term "1,0,0") (ifseqformula "3"))
                                                    (builtin "One Step Simplification" (formula "4"))
                                                   (rule "applyEq" (formula "6") (term "0,0,0") (ifseqformula "2"))
                                                    (builtin "One Step Simplification" (formula "6"))
                                                   (rule "applyEqReverse" (formula "59") (term "1") (ifseqformula "6"))
                                                   (rule "hideAuxiliaryEq" (formula "6"))
                                                   (rule "applyEq" (formula "58") (term "2,0") (ifseqformula "2"))
                                                   (rule "narrowSelectType" (formula "58") (term "0") (ifseqformula "11"))
                                                   (rule "eqSymm" (formula "58"))
                                                   (rule "applyEq" (formula "41") (term "0,1") (ifseqformula "3"))
                                                   (rule "eqSymm" (formula "41") (term "1"))
                                                   (rule "sortsDisjointModuloNull" (formula "41") (term "1"))
                                                   (rule "replace_known_right" (formula "41") (term "0,1") (ifseqformula "49"))
                                                    (builtin "One Step Simplification" (formula "41") (ifInst ""  (formula "46")))
                                                   (rule "false_right" (formula "41"))
                                                   (rule "applyEq" (formula "55") (term "0,0") (ifseqformula "2"))
                                                    (builtin "One Step Simplification" (formula "55"))
                                                   (rule "false_right" (formula "55"))
                                                   (rule "applyEq" (formula "55") (term "0") (ifseqformula "3"))
                                                   (rule "applyEq" (formula "5") (term "0,0,0") (ifseqformula "2"))
                                                    (builtin "One Step Simplification" (formula "5"))
                                                   (rule "applyEqReverse" (formula "55") (term "0") (ifseqformula "5"))
                                                   (rule "hideAuxiliaryEq" (formula "5"))
                                                   (rule "applyEq" (formula "4") (term "0,0,0") (ifseqformula "2"))
                                                    (builtin "One Step Simplification" (formula "4"))
                                                   (rule "applyEqReverse" (formula "54") (term "0") (ifseqformula "4"))
                                                   (rule "hideAuxiliaryEq" (formula "4"))
                                                   (rule "eqSymm" (formula "53"))
                                                   (rule "close" (formula "53") (ifseqformula "1"))
                                                )
                                                (branch "f_0 = java.lang.Object::<created> ∧ o_0 = c_3 FALSE"
                                                   (rule "applyEqReverse" (formula "3") (term "2,0") (ifseqformula "2"))
                                                   (rule "hideAuxiliaryEq" (formula "2"))
                                                   (rule "ifthenelse_split" (formula "2") (term "0"))
                                                   (branch "f_0 = java.lang.Throwable::$cause ∧ o_0 = c_3 TRUE"
                                                      (rule "andLeft" (formula "2"))
                                                      (rule "applyEqReverse" (formula "5") (term "2,0") (ifseqformula "4"))
                                                       (builtin "One Step Simplification" (formula "5") (ifInst ""  (formula "3")))
                                                      (rule "applyEqReverse" (formula "6") (term "2,0") (ifseqformula "5"))
                                                      (rule "hideAuxiliaryEq" (formula "4"))
                                                      (rule "hideAuxiliaryEq" (formula "4"))
                                                      (rule "replace_known_left" (formula "4") (term "1,0,0") (ifseqformula "3"))
                                                       (builtin "One Step Simplification" (formula "4"))
                                                      (rule "replace_known_left" (formula "40") (term "1") (ifseqformula "3"))
                                                       (builtin "One Step Simplification" (formula "40"))
                                                      (rule "applyEq" (formula "4") (term "0,0,0") (ifseqformula "2"))
                                                       (builtin "One Step Simplification" (formula "4"))
                                                      (rule "applyEqReverse" (formula "58") (term "1") (ifseqformula "4"))
                                                      (rule "hideAuxiliaryEq" (formula "4"))
                                                      (rule "applyEqRigid" (formula "39") (term "0") (ifseqformula "2"))
                                                       (builtin "One Step Simplification" (formula "39"))
                                                      (rule "false_right" (formula "39"))
                                                      (rule "applyEqRigid" (formula "39") (term "0,0") (ifseqformula "2"))
                                                       (builtin "One Step Simplification" (formula "39"))
                                                      (rule "false_right" (formula "39"))
                                                      (rule "applyEqRigid" (formula "55") (term "2,0") (ifseqformula "2"))
                                                      (rule "narrowSelectType" (formula "55") (term "0") (ifseqformula "9"))
                                                      (rule "applyEq" (formula "53") (term "0,0") (ifseqformula "2"))
                                                       (builtin "One Step Simplification" (formula "53"))
                                                      (rule "false_right" (formula "53"))
                                                      (rule "applyEq" (formula "1") (term "1,0") (ifseqformula "3"))
                                                      (rule "close" (formula "39") (ifseqformula "1"))
                                                   )
                                                   (branch "f_0 = java.lang.Throwable::$cause ∧ o_0 = c_3 FALSE"
                                                      (rule "applyEqReverse" (formula "3") (term "2,0") (ifseqformula "2"))
                                                      (rule "hideAuxiliaryEq" (formula "2"))
                                                      (rule "ifthenelse_split" (formula "2") (term "0"))
                                                      (branch "f_0 = java.lang.Throwable::$message ∧ o_0 = c_3 TRUE"
                                                         (rule "andLeft" (formula "2"))
                                                         (rule "applyEqReverse" (formula "5") (term "2,0") (ifseqformula "4"))
                                                         (rule "hideAuxiliaryEq" (formula "4"))
                                                         (rule "replace_known_left" (formula "4") (term "1,0,0") (ifseqformula "3"))
                                                          (builtin "One Step Simplification" (formula "4"))
                                                         (rule "replace_known_left" (formula "40") (term "1") (ifseqformula "3"))
                                                          (builtin "One Step Simplification" (formula "40"))
                                                         (rule "replace_known_left" (formula "41") (term "1") (ifseqformula "3"))
                                                          (builtin "One Step Simplification" (formula "41"))
                                                         (rule "applyEqRigid" (formula "4") (term "0,0,0") (ifseqformula "2"))
                                                          (builtin "One Step Simplification" (formula "4"))
                                                         (rule "applyEqReverse" (formula "59") (term "1") (ifseqformula "4"))
                                                         (rule "hideAuxiliaryEq" (formula "4"))
                                                         (rule "applyEqRigid" (formula "56") (term "0,0") (ifseqformula "2"))
                                                          (builtin "One Step Simplification" (formula "56"))
                                                         (rule "false_right" (formula "56"))
                                                         (rule "applyEq" (formula "41") (term "0,0") (ifseqformula "2"))
                                                          (builtin "One Step Simplification" (formula "41"))
                                                         (rule "false_right" (formula "41"))
                                                         (rule "applyEq" (formula "56") (term "2,0") (ifseqformula "2"))
                                                         (rule "narrowSelectType" (formula "56") (term "0") (ifseqformula "9"))
                                                         (rule "applyEq" (formula "1") (term "1,0") (ifseqformula "3"))
                                                         (rule "close" (formula "41") (ifseqformula "1"))
                                                      )
                                                      (branch "f_0 = java.lang.Throwable::$message ∧ o_0 = c_3 FALSE"
                                                         (rule "applyEqReverse" (formula "3") (term "2,0") (ifseqformula "2"))
                                                         (rule "hideAuxiliaryEq" (formula "2"))
                                                         (rule "ifthenelse_split" (formula "2") (term "0"))
                                                         (branch "f_0 = java.lang.Object::<initialized> ∧ o_0 = c_3 TRUE"
                                                            (rule "andLeft" (formula "2"))
                                                            (rule "applyEqReverse" (formula "60") (term "1") (ifseqformula "4"))
                                                            (rule "hideAuxiliaryEq" (formula "4"))
                                                            (rule "replace_known_left" (formula "39") (term "1") (ifseqformula "3"))
                                                             (builtin "One Step Simplification" (formula "39"))
                                                            (rule "replace_known_left" (formula "41") (term "1") (ifseqformula "3"))
                                                             (builtin "One Step Simplification" (formula "41"))
                                                            (rule "replace_known_left" (formula "40") (term "1") (ifseqformula "3"))
                                                             (builtin "One Step Simplification" (formula "40"))
                                                            (rule "applyEqRigid" (formula "40") (term "0") (ifseqformula "2"))
                                                             (builtin "One Step Simplification" (formula "40"))
                                                            (rule "false_right" (formula "40"))
                                                            (rule "applyEqRigid" (formula "40") (term "0") (ifseqformula "2"))
                                                             (builtin "One Step Simplification" (formula "40"))
                                                            (rule "false_right" (formula "40"))
                                                            (rule "applyEqRigid" (formula "57") (term "2,0") (ifseqformula "2"))
                                                            (rule "narrowSelectType" (formula "57") (term "0") (ifseqformula "9"))
                                                            (rule "applyEq" (formula "40") (term "0,0") (ifseqformula "2"))
                                                             (builtin "One Step Simplification" (formula "40"))
                                                            (rule "false_right" (formula "40"))
                                                            (rule "applyEqRigid" (formula "39") (term "0") (ifseqformula "2"))
                                                             (builtin "One Step Simplification" (formula "39"))
                                                            (rule "false_right" (formula "39"))
                                                            (rule "applyEq" (formula "53") (term "0,1") (ifseqformula "3"))
                                                            (rule "eqSymm" (formula "53") (term "1"))
                                                            (rule "sortsDisjointModuloNull" (formula "53") (term "1"))
                                                            (rule "replace_known_right" (formula "53") (term "1,1") (ifseqformula "43"))
                                                             (builtin "One Step Simplification" (formula "53") (ifInst ""  (formula "48")))
                                                            (rule "false_right" (formula "53"))
                                                            (rule "applyEq" (formula "1") (term "1,0") (ifseqformula "3"))
                                                            (rule "close" (formula "39") (ifseqformula "1"))
                                                         )
                                                         (branch "f_0 = java.lang.Object::<initialized> ∧ o_0 = c_3 FALSE"
                                                            (rule "close" (formula "59") (ifseqformula "2"))
                                                         )
                                                      )
                                                   )
                                                )
                                             )
                                          )
                                       )
                                       (branch "CUT: result_2.<created> = TRUE FALSE"
                                           (builtin "One Step Simplification" (formula "38"))
                                          (rule "cut_direct" (formula "58") (term "0,0"))
                                          (branch "CUT: o_0 = null TRUE"
                                              (builtin "One Step Simplification" (formula "59"))
                                             (rule "false_right" (formula "59"))
                                             (rule "replace_known_left" (formula "2") (term "0,0,1,0,0") (ifseqformula "1"))
                                              (builtin "One Step Simplification" (formula "2"))
                                             (rule "replace_known_left" (formula "3") (term "0,0,1,0,0") (ifseqformula "1"))
                                              (builtin "One Step Simplification" (formula "3"))
                                             (rule "applyEqRigid" (formula "3") (term "0,1,0,0") (ifseqformula "1"))
                                             (rule "eqSymm" (formula "3") (term "1,0,0"))
                                             (rule "replace_known_right" (formula "3") (term "1,0,0") (ifseqformula "51"))
                                              (builtin "One Step Simplification" (formula "3"))
                                             (rule "applyEqReverse" (formula "4") (term "2,0") (ifseqformula "3"))
                                             (rule "hideAuxiliaryEq" (formula "3"))
                                             (rule "applyEq" (formula "2") (term "1,2,0") (ifseqformula "1"))
                                             (rule "applyEqRigid" (formula "2") (term "0,1,0,0") (ifseqformula "1"))
                                             (rule "eqSymm" (formula "2") (term "1,0,0"))
                                             (rule "replace_known_right" (formula "2") (term "1,0,0") (ifseqformula "50"))
                                              (builtin "One Step Simplification" (formula "2"))
                                             (rule "applyEqReverse" (formula "3") (term "2,0") (ifseqformula "2"))
                                             (rule "hideAuxiliaryEq" (formula "2"))
                                             (rule "applyEqRigid" (formula "2") (term "0,1,0,0") (ifseqformula "1"))
                                             (rule "eqSymm" (formula "2") (term "1,0,0"))
                                             (rule "replace_known_right" (formula "2") (term "1,0,0") (ifseqformula "46"))
                                              (builtin "One Step Simplification" (formula "2"))
                                             (rule "applyEqReverse" (formula "3") (term "2,0") (ifseqformula "2"))
                                             (rule "hideAuxiliaryEq" (formula "2"))
                                             (rule "applyEq" (formula "4") (term "0,1,0,0") (ifseqformula "1"))
                                             (rule "eqSymm" (formula "4") (term "1,0,0"))
                                             (rule "replace_known_right" (formula "4") (term "1,0,0") (ifseqformula "45"))
                                              (builtin "One Step Simplification" (formula "4"))
                                             (rule "applyEqReverse" (formula "56") (term "1") (ifseqformula "4"))
                                             (rule "hideAuxiliaryEq" (formula "4"))
                                             (rule "applyEq" (formula "3") (term "0,1,0,0") (ifseqformula "1"))
                                             (rule "eqSymm" (formula "3") (term "1,0,0"))
                                             (rule "replace_known_right" (formula "3") (term "1,0,0") (ifseqformula "44"))
                                              (builtin "One Step Simplification" (formula "3"))
                                             (rule "applyEqReverse" (formula "55") (term "1") (ifseqformula "3"))
                                             (rule "hideAuxiliaryEq" (formula "3"))
                                             (rule "applyEq" (formula "54") (term "1,0") (ifseqformula "1"))
                                             (rule "applyEqRigid" (formula "2") (term "0,1,0,0") (ifseqformula "1"))
                                             (rule "eqSymm" (formula "2") (term "1,0,0"))
                                             (rule "replace_known_right" (formula "2") (term "1,0,0") (ifseqformula "43"))
                                              (builtin "One Step Simplification" (formula "2") (ifInst ""  (formula "54")))
                                             (rule "closeFalse" (formula "2"))
                                          )
                                          (branch "CUT: o_0 = null FALSE"
                                              (builtin "One Step Simplification" (formula "59"))
                                             (rule "notRight" (formula "59"))
                                             (rule "replace_known_left" (formula "2") (term "0,0,1,1,0,0") (ifseqformula "1"))
                                              (builtin "One Step Simplification" (formula "2") (ifInst ""  (formula "59")))
                                             (rule "replace_known_left" (formula "3") (term "0,0,0,1,1,0,0") (ifseqformula "1"))
                                              (builtin "One Step Simplification" (formula "3") (ifInst ""  (formula "59")))
                                             (rule "ex_pull_out3" (formula "18") (term "0"))
                                             (rule "cnf_rightDist" (formula "18") (term "0,0"))
                                             (rule "shift_paren_or" (formula "18") (term "1,0,0"))
                                             (rule "cnf_rightDist" (formula "18") (term "0,0,0"))
                                             (rule "commute_or_2" (formula "18") (term "0,0,0,0"))
                                             (rule "shift_paren_or" (formula "18") (term "1,0,0,0"))
                                             (rule "commute_or" (formula "18") (term "0,0,0,0,0"))
                                             (rule "ifthenelse_split" (formula "2") (term "0"))
                                             (branch "f_0 = java.util.Iterator::$index ∧ o_0 = result TRUE"
                                                (rule "andLeft" (formula "2"))
                                                (rule "applyEqReverse" (formula "5") (term "2,0") (ifseqformula "4"))
                                                (rule "hideAuxiliaryEq" (formula "4"))
                                                (rule "replace_known_left" (formula "4") (term "1,0,0") (ifseqformula "3"))
                                                 (builtin "One Step Simplification" (formula "4") (ifInst ""  (formula "2")))
                                                (rule "applyEqReverse" (formula "5") (term "2,0") (ifseqformula "4"))
                                                (rule "hideAuxiliaryEq" (formula "4"))
                                                (rule "applyEq" (formula "4") (term "1,2,0") (ifseqformula "3"))
                                                (rule "applyEqRigid" (formula "4") (term "2,2,0") (ifseqformula "2"))
                                                (rule "narrowSelectType" (formula "4") (term "2,0") (ifseqformula "36"))
                                                (rule "applyEq" (formula "5") (term "0,1,0,0") (ifseqformula "3"))
                                                (rule "sortsDisjointModuloNull" (formula "5") (term "1,0,0"))
                                                (rule "replace_known_right" (formula "5") (term "1,1,0,0") (ifseqformula "48"))
                                                 (builtin "One Step Simplification" (formula "5") (ifInst ""  (formula "51")))
                                                (rule "applyEqReverse" (formula "6") (term "2,0") (ifseqformula "5"))
                                                (rule "hideAuxiliaryEq" (formula "5"))
                                                (rule "applyEq" (formula "5") (term "0,1,0,0") (ifseqformula "3"))
                                                (rule "sortsDisjointModuloNull" (formula "5") (term "1,0,0"))
                                                (rule "replace_known_right" (formula "5") (term "0,1,0,0") (ifseqformula "50"))
                                                 (builtin "One Step Simplification" (formula "5") (ifInst ""  (formula "47")))
                                                (rule "applyEqReverse" (formula "6") (term "2,0") (ifseqformula "5"))
                                                (rule "hideAuxiliaryEq" (formula "5"))
                                                (rule "applyEq" (formula "4") (term "0,1,0,0") (ifseqformula "3"))
                                                (rule "sortsDisjointModuloNull" (formula "4") (term "1,0,0"))
                                                (rule "replace_known_right" (formula "4") (term "1,1,0,0") (ifseqformula "46"))
                                                 (builtin "One Step Simplification" (formula "4") (ifInst ""  (formula "49")))
                                                (rule "applyEqReverse" (formula "5") (term "2,0") (ifseqformula "4"))
                                                (rule "hideAuxiliaryEq" (formula "4"))
                                                (rule "applyEq" (formula "4") (term "0,1,0,0") (ifseqformula "3"))
                                                (rule "sortsDisjointModuloNull" (formula "4") (term "1,0,0"))
                                                (rule "replace_known_right" (formula "4") (term "1,1,0,0") (ifseqformula "45"))
                                                 (builtin "One Step Simplification" (formula "4") (ifInst ""  (formula "48")))
                                                (rule "applyEqReverse" (formula "57") (term "1") (ifseqformula "4"))
                                                (rule "hideAuxiliaryEq" (formula "4"))
                                                (rule "applyEqRigid" (formula "56") (term "2,0") (ifseqformula "2"))
                                                (rule "narrowSelectType" (formula "56") (term "0") (ifseqformula "9"))
                                                (rule "applyEq" (formula "55") (term "0") (ifseqformula "3"))
                                                (rule "applyEqRigid" (formula "54") (term "0,0") (ifseqformula "2"))
                                                 (builtin "One Step Simplification" (formula "54"))
                                                (rule "false_right" (formula "54"))
                                                (rule "applyEq" (formula "1") (term "1,0") (ifseqformula "3"))
                                                (rule "close" (formula "46") (ifseqformula "1"))
                                             )
                                             (branch "f_0 = java.util.Iterator::$index ∧ o_0 = result FALSE"
                                                (rule "applyEqReverse" (formula "3") (term "2,0") (ifseqformula "2"))
                                                (rule "hideAuxiliaryEq" (formula "2"))
                                                (rule "replace_known_right" (formula "2") (term "0,0") (ifseqformula "42"))
                                                 (builtin "One Step Simplification" (formula "2"))
                                                (rule "applyEqReverse" (formula "3") (term "2,0") (ifseqformula "2"))
                                                (rule "hideAuxiliaryEq" (formula "2"))
                                                (rule "commute_and" (formula "16") (term "0,0,0"))
                                                (rule "commute_and_2" (formula "16") (term "0,0"))
                                                (rule "ifthenelse_split" (formula "2") (term "0"))
                                                (branch "f_0 = java.lang.Object::<created> ∧ o_0 = c_3 TRUE"
                                                   (rule "andLeft" (formula "2"))
                                                   (rule "applyEqReverse" (formula "5") (term "2,0") (ifseqformula "4"))
                                                   (rule "hideAuxiliaryEq" (formula "4"))
                                                   (rule "replace_known_left" (formula "6") (term "1,0,0") (ifseqformula "3"))
                                                    (builtin "One Step Simplification" (formula "6"))
                                                   (rule "replace_known_left" (formula "5") (term "1,0,0") (ifseqformula "3"))
                                                    (builtin "One Step Simplification" (formula "5"))
                                                   (rule "replace_known_left" (formula "4") (term "1,0,0") (ifseqformula "3"))
                                                    (builtin "One Step Simplification" (formula "4"))
                                                   (rule "applyEqRigid" (formula "6") (term "0,0,0") (ifseqformula "2"))
                                                    (builtin "One Step Simplification" (formula "6"))
                                                   (rule "applyEqReverse" (formula "60") (term "1") (ifseqformula "6"))
                                                   (rule "hideAuxiliaryEq" (formula "6"))
                                                   (rule "applyEq" (formula "5") (term "0,0,0") (ifseqformula "2"))
                                                    (builtin "One Step Simplification" (formula "5"))
                                                   (rule "applyEqReverse" (formula "59") (term "1") (ifseqformula "5"))
                                                   (rule "hideAuxiliaryEq" (formula "5"))
                                                   (rule "applyEqRigid" (formula "40") (term "0,0") (ifseqformula "2"))
                                                    (builtin "One Step Simplification" (formula "40"))
                                                   (rule "false_right" (formula "40"))
                                                   (rule "applyEq" (formula "4") (term "0,0,0") (ifseqformula "2"))
                                                    (builtin "One Step Simplification" (formula "4"))
                                                   (rule "applyEqReverse" (formula "57") (term "1") (ifseqformula "4"))
                                                   (rule "hideAuxiliaryEq" (formula "4"))
                                                   (rule "applyEq" (formula "55") (term "0") (ifseqformula "3"))
                                                   (rule "applyEq" (formula "55") (term "2,0") (ifseqformula "2"))
                                                   (rule "castTrueImpliesOriginalTrue" (formula "55") (ifseqformula "1"))
                                                   (rule "closeTrue" (formula "55"))
                                                )
                                                (branch "f_0 = java.lang.Object::<created> ∧ o_0 = c_3 FALSE"
                                                   (rule "applyEqReverse" (formula "3") (term "2,0") (ifseqformula "2"))
                                                   (rule "hideAuxiliaryEq" (formula "2"))
                                                   (rule "ifthenelse_split" (formula "2") (term "0"))
                                                   (branch "f_0 = java.lang.Throwable::$cause ∧ o_0 = c_3 TRUE"
                                                      (rule "andLeft" (formula "2"))
                                                      (rule "applyEqReverse" (formula "5") (term "2,0") (ifseqformula "4"))
                                                       (builtin "One Step Simplification" (formula "5") (ifInst ""  (formula "3")))
                                                      (rule "applyEqReverse" (formula "6") (term "2,0") (ifseqformula "5"))
                                                      (rule "hideAuxiliaryEq" (formula "4"))
                                                      (rule "hideAuxiliaryEq" (formula "4"))
                                                      (rule "replace_known_left" (formula "4") (term "1,0,0") (ifseqformula "3"))
                                                       (builtin "One Step Simplification" (formula "4"))
                                                      (rule "replace_known_left" (formula "40") (term "1") (ifseqformula "3"))
                                                       (builtin "One Step Simplification" (formula "40"))
                                                      (rule "applyEqRigid" (formula "4") (term "0,0,0") (ifseqformula "2"))
                                                       (builtin "One Step Simplification" (formula "4"))
                                                      (rule "applyEqReverse" (formula "59") (term "1") (ifseqformula "4"))
                                                      (rule "hideAuxiliaryEq" (formula "4"))
                                                      (rule "applyEq" (formula "56") (term "0,1") (ifseqformula "3"))
                                                      (rule "eqSymm" (formula "56") (term "1"))
                                                      (rule "sortsDisjointModuloNull" (formula "56") (term "1"))
                                                      (rule "replace_known_right" (formula "56") (term "1,1") (ifseqformula "46"))
                                                       (builtin "One Step Simplification" (formula "56") (ifInst ""  (formula "51")))
                                                      (rule "false_right" (formula "56"))
                                                      (rule "applyEqRigid" (formula "40") (term "0,0") (ifseqformula "2"))
                                                       (builtin "One Step Simplification" (formula "40"))
                                                      (rule "false_right" (formula "40"))
                                                      (rule "applyEq" (formula "1") (term "1,0") (ifseqformula "3"))
                                                      (rule "close" (formula "41") (ifseqformula "1"))
                                                   )
                                                   (branch "f_0 = java.lang.Throwable::$cause ∧ o_0 = c_3 FALSE"
                                                      (rule "applyEqReverse" (formula "3") (term "2,0") (ifseqformula "2"))
                                                      (rule "hideAuxiliaryEq" (formula "2"))
                                                      (rule "ifthenelse_split" (formula "2") (term "0"))
                                                      (branch "f_0 = java.lang.Throwable::$message ∧ o_0 = c_3 TRUE"
                                                         (rule "andLeft" (formula "2"))
                                                         (rule "applyEqReverse" (formula "5") (term "2,0") (ifseqformula "4"))
                                                         (rule "hideAuxiliaryEq" (formula "4"))
                                                         (rule "replace_known_left" (formula "4") (term "1,0,0") (ifseqformula "3"))
                                                          (builtin "One Step Simplification" (formula "4"))
                                                         (rule "replace_known_left" (formula "40") (term "1") (ifseqformula "3"))
                                                          (builtin "One Step Simplification" (formula "40"))
                                                         (rule "replace_known_left" (formula "41") (term "1") (ifseqformula "3"))
                                                          (builtin "One Step Simplification" (formula "41"))
                                                         (rule "applyEqRigid" (formula "42") (term "0,0") (ifseqformula "2"))
                                                          (builtin "One Step Simplification" (formula "42"))
                                                         (rule "false_right" (formula "42"))
                                                         (rule "applyEqRigid" (formula "57") (term "0,0") (ifseqformula "2"))
                                                          (builtin "One Step Simplification" (formula "57"))
                                                         (rule "false_right" (formula "57"))
                                                         (rule "applyEq" (formula "58") (term "1,0") (ifseqformula "3"))
                                                         (rule "applyEqRigid" (formula "58") (term "2,0") (ifseqformula "2"))
                                                         (rule "narrowSelectType" (formula "58") (term "0") (ifseqformula "10"))
                                                         (rule "eqSymm" (formula "58"))
                                                         (rule "applyEq" (formula "41") (term "0") (ifseqformula "2"))
                                                          (builtin "One Step Simplification" (formula "41"))
                                                         (rule "false_right" (formula "41"))
                                                         (rule "applyEqRigid" (formula "40") (term "0") (ifseqformula "2"))
                                                          (builtin "One Step Simplification" (formula "40"))
                                                         (rule "false_right" (formula "40"))
                                                         (rule "applyEq" (formula "4") (term "0,0,0") (ifseqformula "2"))
                                                          (builtin "One Step Simplification" (formula "4"))
                                                         (rule "applyEqReverse" (formula "56") (term "0") (ifseqformula "4"))
                                                         (rule "hideAuxiliaryEq" (formula "4"))
                                                         (rule "eqSymm" (formula "55"))
                                                         (rule "applyEq" (formula "1") (term "1,0") (ifseqformula "3"))
                                                         (rule "close" (formula "40") (ifseqformula "1"))
                                                      )
                                                      (branch "f_0 = java.lang.Throwable::$message ∧ o_0 = c_3 FALSE"
                                                         (rule "applyEqReverse" (formula "3") (term "2,0") (ifseqformula "2"))
                                                         (rule "hideAuxiliaryEq" (formula "2"))
                                                         (rule "ifthenelse_split" (formula "2") (term "0"))
                                                         (branch "f_0 = java.lang.Object::<initialized> ∧ o_0 = c_3 TRUE"
                                                            (rule "andLeft" (formula "2"))
                                                            (rule "applyEqReverse" (formula "61") (term "1") (ifseqformula "4"))
                                                            (rule "hideAuxiliaryEq" (formula "4"))
                                                            (rule "replace_known_left" (formula "41") (term "1") (ifseqformula "3"))
                                                             (builtin "One Step Simplification" (formula "41"))
                                                            (rule "replace_known_left" (formula "39") (term "1") (ifseqformula "3"))
                                                             (builtin "One Step Simplification" (formula "39"))
                                                            (rule "replace_known_left" (formula "40") (term "1") (ifseqformula "3"))
                                                             (builtin "One Step Simplification" (formula "40"))
                                                            (rule "applyEqRigid" (formula "39") (term "0") (ifseqformula "2"))
                                                             (builtin "One Step Simplification" (formula "39"))
                                                            (rule "false_right" (formula "39"))
                                                            (rule "applyEq" (formula "39") (term "0") (ifseqformula "2"))
                                                             (builtin "One Step Simplification" (formula "39"))
                                                            (rule "false_right" (formula "39"))
                                                            (rule "applyEqRigid" (formula "40") (term "0,0") (ifseqformula "2"))
                                                             (builtin "One Step Simplification" (formula "40"))
                                                            (rule "false_right" (formula "40"))
                                                            (rule "applyEq" (formula "57") (term "2,0") (ifseqformula "2"))
                                                            (rule "narrowSelectType" (formula "57") (term "0") (ifseqformula "9"))
                                                            (rule "applyEq" (formula "55") (term "0,0") (ifseqformula "2"))
                                                             (builtin "One Step Simplification" (formula "55"))
                                                            (rule "false_right" (formula "55"))
                                                            (rule "applyEq" (formula "39") (term "0") (ifseqformula "2"))
                                                             (builtin "One Step Simplification" (formula "39"))
                                                            (rule "false_right" (formula "39"))
                                                            (rule "applyEq" (formula "54") (term "0") (ifseqformula "3"))
                                                            (rule "applyEq" (formula "1") (term "1,0") (ifseqformula "3"))
                                                            (rule "close" (formula "40") (ifseqformula "1"))
                                                         )
                                                         (branch "f_0 = java.lang.Object::<initialized> ∧ o_0 = c_3 FALSE"
                                                            (rule "close" (formula "60") (ifseqformula "2"))
                                                         )
                                                      )
                                                   )
                                                )
                                             )
                                          )
                                       )
                                    )
                                 )
                                 (branch "if thrownExc instanceof java.lang.Throwable false"
                                     (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "44")))
                                    (rule "closeFalse" (formula "1"))
                                 )
                              )
                           )
                           (branch "if c instanceof java.lang.Throwable false"
                               (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "44")))
                              (rule "closeFalse" (formula "1"))
                           )
                        )
                     )
                     (branch "Null Reference (c_1 = null)"
                         (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "44")))
                        (rule "closeFalse" (formula "1"))
                     )
                  )
               )
               (branch "Exceptional Post (next)"
                   (builtin "One Step Simplification" (formula "31"))
                   (builtin "One Step Simplification" (formula "39"))
                  (rule "replaceKnownSelect_taclet10_7" (formula "31") (term "0,0,0,0,1,1"))
                  (rule "replaceKnownAuxiliaryConstant_taclet10_10" (formula "31") (term "0,0,0,0,1,1"))
                  (rule "replaceKnownSelect_taclet10_7" (formula "31") (term "0,0,0,1,0,1,1"))
                  (rule "replaceKnownAuxiliaryConstant_taclet10_10" (formula "31") (term "0,0,0,1,0,1,1"))
                  (rule "replaceKnownSelect_taclet10_7" (formula "31") (term "1,0,1,1,0,0,1,1"))
                  (rule "replaceKnownSelect_taclet10_7" (formula "31") (term "0,0,0,1,1,0,1,1"))
                  (rule "replaceKnownAuxiliaryConstant_taclet10_10" (formula "31") (term "1,0,1,1,0,0,1,1"))
                  (rule "replaceKnownAuxiliaryConstant_taclet10_10" (formula "31") (term "0,0,0,1,1,0,1,1"))
                  (rule "replaceKnownSelect_taclet10_7" (formula "31") (term "0,0,0,1,1,1,0,1,1"))
                  (rule "replaceKnownSelect_taclet10_7" (formula "31") (term "0,1,1,0,1,1,0,1,1"))
                  (rule "replaceKnownSelect_taclet10_7" (formula "31") (term "1,1,0,1,1,1,1,0,1,1"))
                  (rule "replaceKnownSelect_taclet10_7" (formula "31") (term "0,0,0,1,1,1,1,0,1,1"))
                  (rule "replaceKnownAuxiliaryConstant_taclet10_10" (formula "31") (term "0,0,0,1,1,1,0,1,1"))
                  (rule "replaceKnownAuxiliaryConstant_taclet10_10" (formula "31") (term "0,1,1,0,1,1,0,1,1"))
                  (rule "replaceKnownAuxiliaryConstant_taclet10_10" (formula "31") (term "1,1,0,1,1,1,1,0,1,1"))
                  (rule "replaceKnownAuxiliaryConstant_taclet10_10" (formula "31") (term "0,0,0,1,1,1,1,0,1,1"))
                  (rule "andLeft" (formula "31"))
                  (rule "selectCreatedOfAnonAsFormulaEQ" (formula "32") (term "1,0") (ifseqformula "31"))
                   (builtin "One Step Simplification" (formula "32"))
                  (rule "selectCreatedOfAnonAsFormulaEQ" (formula "32") (term "0,0,1,0") (ifseqformula "17"))
                  (rule "andLeft" (formula "32"))
                  (rule "andLeft" (formula "32"))
                  (rule "andLeft" (formula "34"))
                  (rule "notLeft" (formula "32"))
                  (rule "close" (formula "35") (ifseqformula "34"))
               )
               (branch "Pre (next)"
                   (builtin "One Step Simplification" (formula "37"))
                  (rule "wellFormedAnon" (formula "37") (term "1"))
                  (rule "wellFormedAnonEQ" (formula "37") (term "0,1") (ifseqformula "17"))
                  (rule "replace_known_left" (formula "37") (term "1,1") (ifseqformula "23"))
                   (builtin "One Step Simplification" (formula "37") (ifInst ""  (formula "5")) (ifInst ""  (formula "16")))
                  (rule "inEqSimp_ltToLeq" (formula "14") (term "0,0,0,0,0"))
                  (rule "polySimp_mulComm0" (formula "14") (term "1,0,0,0,0,0,0,0"))
                  (rule "inEqSimp_ltToLeq" (formula "15") (term "0,0,0,0,0"))
                  (rule "polySimp_mulComm0" (formula "15") (term "1,0,0,0,0,0,0,0"))
                  (rule "inEqSimp_ltToLeq" (formula "11") (term "0,0,0"))
                  (rule "polySimp_mulComm0" (formula "11") (term "1,0,0,0,0,0"))
                  (rule "inEqSimp_ltToLeq" (formula "27"))
                  (rule "polySimp_mulComm0" (formula "27") (term "1,0,0"))
                  (rule "polySimp_addComm1" (formula "27") (term "0"))
                  (rule "inEqSimp_ltToLeq" (formula "10") (term "0,0,0"))
                  (rule "polySimp_mulComm0" (formula "10") (term "1,0,0,0,0,0"))
                  (rule "inEqSimp_ltToLeq" (formula "10") (term "0,0,0,1,0"))
                  (rule "polySimp_mulComm0" (formula "10") (term "1,0,0,0,0,0,1,0"))
                  (rule "inEqSimp_sepPosMonomial0" (formula "14") (term "0,0,0,0,0"))
                  (rule "polySimp_mulComm0" (formula "14") (term "1,0,0,0,0,0"))
                  (rule "polySimp_rightDist" (formula "14") (term "1,0,0,0,0,0"))
                  (rule "mul_literals" (formula "14") (term "0,1,0,0,0,0,0"))
                  (rule "polySimp_mulLiterals" (formula "14") (term "1,1,0,0,0,0,0"))
                  (rule "polySimp_elimOne" (formula "14") (term "1,1,0,0,0,0,0"))
                  (rule "inEqSimp_sepPosMonomial0" (formula "15") (term "0,0,0,0,0"))
                  (rule "polySimp_mulComm0" (formula "15") (term "1,0,0,0,0,0"))
                  (rule "polySimp_rightDist" (formula "15") (term "1,0,0,0,0,0"))
                  (rule "mul_literals" (formula "15") (term "0,1,0,0,0,0,0"))
                  (rule "polySimp_mulLiterals" (formula "15") (term "1,1,0,0,0,0,0"))
                  (rule "polySimp_elimOne" (formula "15") (term "1,1,0,0,0,0,0"))
                  (rule "inEqSimp_sepPosMonomial0" (formula "11") (term "0,0,0"))
                  (rule "polySimp_mulComm0" (formula "11") (term "1,0,0,0"))
                  (rule "polySimp_rightDist" (formula "11") (term "1,0,0,0"))
                  (rule "mul_literals" (formula "11") (term "0,1,0,0,0"))
                  (rule "polySimp_mulLiterals" (formula "11") (term "1,1,0,0,0"))
                  (rule "polySimp_elimOne" (formula "11") (term "1,1,0,0,0"))
                  (rule "inEqSimp_sepNegMonomial0" (formula "27"))
                  (rule "polySimp_mulLiterals" (formula "27") (term "0"))
                  (rule "polySimp_elimOne" (formula "27") (term "0"))
                  (rule "inEqSimp_sepPosMonomial0" (formula "10") (term "0,0,0"))
                  (rule "polySimp_mulComm0" (formula "10") (term "1,0,0,0"))
                  (rule "polySimp_rightDist" (formula "10") (term "1,0,0,0"))
                  (rule "mul_literals" (formula "10") (term "0,1,0,0,0"))
                  (rule "polySimp_mulLiterals" (formula "10") (term "1,1,0,0,0"))
                  (rule "polySimp_elimOne" (formula "10") (term "1,1,0,0,0"))
                  (rule "inEqSimp_sepPosMonomial0" (formula "10") (term "0,0,0,1,0"))
                  (rule "polySimp_mulComm0" (formula "10") (term "1,0,0,0,1,0"))
                  (rule "polySimp_rightDist" (formula "10") (term "1,0,0,0,1,0"))
                  (rule "mul_literals" (formula "10") (term "0,1,0,0,0,1,0"))
                  (rule "polySimp_mulLiterals" (formula "10") (term "1,1,0,0,0,1,0"))
                  (rule "polySimp_elimOne" (formula "10") (term "1,1,0,0,0,1,0"))
                  (rule "inEqSimp_subsumption1" (formula "25") (ifseqformula "27"))
                  (rule "inEqSimp_homoInEq0" (formula "25") (term "0"))
                  (rule "polySimp_pullOutFactor1b" (formula "25") (term "0,0"))
                  (rule "add_literals" (formula "25") (term "1,1,0,0"))
                  (rule "times_zero_1" (formula "25") (term "1,0,0"))
                  (rule "add_literals" (formula "25") (term "0,0"))
                  (rule "qeq_literals" (formula "25") (term "0"))
                   (builtin "One Step Simplification" (formula "25"))
                  (rule "true_left" (formula "25"))
                  (rule "inEqSimp_and_subsumption3" (formula "14") (term "0,0,0"))
                  (rule "leq_literals" (formula "14") (term "0,1,0,0,0,0"))
                   (builtin "One Step Simplification" (formula "14"))
                  (rule "inEqSimp_and_subsumption3" (formula "15") (term "0,0,0"))
                  (rule "leq_literals" (formula "15") (term "0,1,0,0,0,0"))
                   (builtin "One Step Simplification" (formula "15"))
                  (rule "nnf_imp2or" (formula "11") (term "0"))
                  (rule "nnf_imp2or" (formula "10") (term "0"))
                  (rule "nnf_imp2or" (formula "14") (term "0"))
                  (rule "nnf_imp2or" (formula "15") (term "0"))
                  (rule "nnf_notAnd" (formula "11") (term "0,0"))
                  (rule "inEqSimp_notLeq" (formula "11") (term "0,0,0"))
                  (rule "polySimp_rightDist" (formula "11") (term "1,0,0,0,0,0"))
                  (rule "mul_literals" (formula "11") (term "0,1,0,0,0,0,0"))
                  (rule "polySimp_addAssoc" (formula "11") (term "0,0,0,0,0"))
                  (rule "add_literals" (formula "11") (term "0,0,0,0,0,0"))
                  (rule "add_zero_left" (formula "11") (term "0,0,0,0,0"))
                  (rule "inEqSimp_sepPosMonomial1" (formula "11") (term "0,0,0"))
                  (rule "polySimp_mulLiterals" (formula "11") (term "1,0,0,0"))
                  (rule "polySimp_elimOne" (formula "11") (term "1,0,0,0"))
                  (rule "inEqSimp_notGeq" (formula "11") (term "1,0,0"))
                  (rule "times_zero_1" (formula "11") (term "1,0,0,1,0,0"))
                  (rule "add_literals" (formula "11") (term "0,0,1,0,0"))
                  (rule "inEqSimp_sepPosMonomial0" (formula "11") (term "1,0,0"))
                  (rule "mul_literals" (formula "11") (term "1,1,0,0"))
                  (rule "nnf_notAnd" (formula "10") (term "0,0"))
                  (rule "inEqSimp_notGeq" (formula "10") (term "1,0,0"))
                  (rule "mul_literals" (formula "10") (term "1,0,0,1,0,0"))
                  (rule "add_literals" (formula "10") (term "0,0,1,0,0"))
                  (rule "inEqSimp_sepPosMonomial0" (formula "10") (term "1,0,0"))
                  (rule "mul_literals" (formula "10") (term "1,1,0,0"))
                  (rule "inEqSimp_notLeq" (formula "10") (term "0,0,0"))
                  (rule "polySimp_rightDist" (formula "10") (term "1,0,0,0,0,0"))
                  (rule "mul_literals" (formula "10") (term "0,1,0,0,0,0,0"))
                  (rule "polySimp_addAssoc" (formula "10") (term "0,0,0,0,0"))
                  (rule "add_literals" (formula "10") (term "0,0,0,0,0,0"))
                  (rule "add_zero_left" (formula "10") (term "0,0,0,0,0"))
                  (rule "inEqSimp_sepPosMonomial1" (formula "10") (term "0,0,0"))
                  (rule "polySimp_mulLiterals" (formula "10") (term "1,0,0,0"))
                  (rule "polySimp_elimOne" (formula "10") (term "1,0,0,0"))
                  (rule "nnf_notAnd" (formula "14") (term "0,0"))
                  (rule "inEqSimp_notLeq" (formula "14") (term "1,0,0"))
                  (rule "mul_literals" (formula "14") (term "1,0,0,1,0,0"))
                  (rule "add_literals" (formula "14") (term "0,0,1,0,0"))
                  (rule "inEqSimp_sepPosMonomial1" (formula "14") (term "1,0,0"))
                  (rule "mul_literals" (formula "14") (term "1,1,0,0"))
                  (rule "nnf_notAnd" (formula "15") (term "0,0"))
                  (rule "inEqSimp_notLeq" (formula "15") (term "1,0,0"))
                  (rule "mul_literals" (formula "15") (term "1,0,0,1,0,0"))
                  (rule "add_literals" (formula "15") (term "0,0,1,0,0"))
                  (rule "inEqSimp_sepPosMonomial1" (formula "15") (term "1,0,0"))
                  (rule "mul_literals" (formula "15") (term "1,1,0,0"))
                  (rule "nnf_notAnd" (formula "14") (term "0,0,0"))
                  (rule "inEqSimp_notLeq" (formula "14") (term "0,0,0,0"))
                  (rule "polySimp_rightDist" (formula "14") (term "1,0,0,0,0,0,0"))
                  (rule "mul_literals" (formula "14") (term "0,1,0,0,0,0,0,0"))
                  (rule "polySimp_addAssoc" (formula "14") (term "0,0,0,0,0,0"))
                  (rule "add_literals" (formula "14") (term "0,0,0,0,0,0,0"))
                  (rule "add_zero_left" (formula "14") (term "0,0,0,0,0,0"))
                  (rule "inEqSimp_sepPosMonomial1" (formula "14") (term "0,0,0,0"))
                  (rule "polySimp_mulLiterals" (formula "14") (term "1,0,0,0,0"))
                  (rule "polySimp_elimOne" (formula "14") (term "1,0,0,0,0"))
                  (rule "inEqSimp_notGeq" (formula "14") (term "1,0,0,0"))
                  (rule "mul_literals" (formula "14") (term "1,0,0,1,0,0,0"))
                  (rule "add_zero_right" (formula "14") (term "0,0,1,0,0,0"))
                  (rule "inEqSimp_sepPosMonomial0" (formula "14") (term "1,0,0,0"))
                  (rule "mul_literals" (formula "14") (term "1,1,0,0,0"))
                  (rule "nnf_notAnd" (formula "15") (term "0,0,0"))
                  (rule "inEqSimp_notLeq" (formula "15") (term "0,0,0,0"))
                  (rule "polySimp_rightDist" (formula "15") (term "1,0,0,0,0,0,0"))
                  (rule "mul_literals" (formula "15") (term "0,1,0,0,0,0,0,0"))
                  (rule "polySimp_addAssoc" (formula "15") (term "0,0,0,0,0,0"))
                  (rule "add_literals" (formula "15") (term "0,0,0,0,0,0,0"))
                  (rule "add_zero_left" (formula "15") (term "0,0,0,0,0,0"))
                  (rule "inEqSimp_sepPosMonomial1" (formula "15") (term "0,0,0,0"))
                  (rule "polySimp_mulLiterals" (formula "15") (term "1,0,0,0,0"))
                  (rule "polySimp_elimOne" (formula "15") (term "1,0,0,0,0"))
                  (rule "inEqSimp_notGeq" (formula "15") (term "1,0,0,0"))
                  (rule "times_zero_1" (formula "15") (term "1,0,0,1,0,0,0"))
                  (rule "add_zero_right" (formula "15") (term "0,0,1,0,0,0"))
                  (rule "inEqSimp_sepPosMonomial0" (formula "15") (term "1,0,0,0"))
                  (rule "mul_literals" (formula "15") (term "1,1,0,0,0"))
                  (rule "Class_invariant_axiom_for_java_util_CollectionIterator" (formula "36"))
                  (rule "replaceKnownSelect_taclet10_7" (formula "36") (term "0,1"))
                  (rule "replaceKnownSelect_taclet10_7" (formula "36") (term "1,0"))
                  (rule "replaceKnownAuxiliaryConstant_taclet10_10" (formula "36") (term "0,1"))
                  (rule "replaceKnownAuxiliaryConstant_taclet10_10" (formula "36") (term "1,0"))
                  (rule "replaceKnownSelect_taclet10_8" (formula "36") (term "0,1,1"))
                  (rule "replaceKnownAuxiliaryConstant_taclet10_11" (formula "36") (term "0,1,1"))
                  (rule "inEqSimp_commuteLeq" (formula "36") (term "0"))
                  (rule "replace_known_left" (formula "36") (term "0") (ifseqformula "24"))
                   (builtin "One Step Simplification" (formula "36"))
                  (rule "inEqSimp_leqRight" (formula "36"))
                  (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
                  (rule "polySimp_addComm1" (formula "1") (term "0"))
                  (rule "applyEq" (formula "1") (term "0,0,1,0") (ifseqformula "21"))
                  (rule "inEqSimp_sepNegMonomial1" (formula "1"))
                  (rule "polySimp_mulLiterals" (formula "1") (term "0"))
                  (rule "polySimp_elimOne" (formula "1") (term "0"))
                  (rule "inEqSimp_contradInEq0" (formula "27") (ifseqformula "1"))
                  (rule "andLeft" (formula "27"))
                  (rule "inEqSimp_homoInEq1" (formula "27"))
                  (rule "polySimp_mulComm0" (formula "27") (term "1,0"))
                  (rule "polySimp_rightDist" (formula "27") (term "1,0"))
                  (rule "mul_literals" (formula "27") (term "0,1,0"))
                  (rule "polySimp_addAssoc" (formula "27") (term "0"))
                  (rule "polySimp_addComm1" (formula "27") (term "0,0"))
                  (rule "add_literals" (formula "27") (term "0,0,0"))
                  (rule "polySimp_pullOutFactor1b" (formula "27") (term "0"))
                  (rule "add_literals" (formula "27") (term "1,1,0"))
                  (rule "times_zero_1" (formula "27") (term "1,0"))
                  (rule "add_literals" (formula "27") (term "0"))
                  (rule "leq_literals" (formula "27"))
                  (rule "closeFalse" (formula "27"))
               )
               (branch "Null reference (it = null)"
                   (builtin "One Step Simplification" (formula "37") (ifInst ""  (formula "31")))
                  (rule "closeTrue" (formula "37"))
               )
            )
            (branch "if x false"
                (builtin "One Step Simplification" (formula "38"))
                (builtin "One Step Simplification" (formula "1"))
               (rule "closeFalse" (formula "1"))
            )
         )
         (branch "Exceptional Post (hasNext)"
             (builtin "One Step Simplification" (formula "36"))
            (rule "selectCreatedOfAnonAsFormulaEQ" (formula "36") (term "0,1,0") (ifseqformula "15"))
            (rule "replaceKnownSelect_taclet10_7" (formula "36") (term "0,1,0,0,1"))
            (rule "replaceKnownAuxiliaryConstant_taclet10_10" (formula "36") (term "0,1,0,0,1"))
            (rule "replaceKnownSelect_taclet10_8" (formula "36") (term "0,1,1,0,0,1"))
            (rule "replaceKnownAuxiliaryConstant_taclet10_11" (formula "36") (term "0,1,1,0,0,1"))
            (rule "andLeft" (formula "36"))
            (rule "andLeft" (formula "36"))
            (rule "andLeft" (formula "38"))
            (rule "notLeft" (formula "36"))
            (rule "close" (formula "39") (ifseqformula "38"))
         )
         (branch "Pre (hasNext)"
             (builtin "One Step Simplification" (formula "43"))
            (rule "wellFormedAnon" (formula "43") (term "1"))
            (rule "wellFormedAnonEQ" (formula "43") (term "0,1") (ifseqformula "15"))
            (rule "replace_known_left" (formula "43") (term "0,0,1") (ifseqformula "3"))
             (builtin "One Step Simplification" (formula "43") (ifInst ""  (formula "14")) (ifInst ""  (formula "21")))
            (rule "inEqSimp_ltToLeq" (formula "13") (term "0,0,0,0,0"))
            (rule "polySimp_mulComm0" (formula "13") (term "1,0,0,0,0,0,0,0"))
            (rule "inEqSimp_ltToLeq" (formula "24") (term "0,0,0"))
            (rule "polySimp_mulComm0" (formula "24") (term "1,0,0,0,0,0"))
            (rule "inEqSimp_ltToLeq" (formula "8") (term "0,0,0"))
            (rule "polySimp_mulComm0" (formula "8") (term "1,0,0,0,0,0"))
            (rule "inEqSimp_ltToLeq" (formula "12") (term "0,0,0,0,0"))
            (rule "polySimp_mulComm0" (formula "12") (term "1,0,0,0,0,0,0,0"))
            (rule "inEqSimp_ltToLeq" (formula "27") (term "0,0,0,0,0"))
            (rule "polySimp_mulComm0" (formula "27") (term "1,0,0,0,0,0,0,0"))
            (rule "inEqSimp_ltToLeq" (formula "8") (term "0,0,0,1,0"))
            (rule "polySimp_mulComm0" (formula "8") (term "1,0,0,0,0,0,1,0"))
            (rule "inEqSimp_ltToLeq" (formula "35"))
            (rule "polySimp_mulComm0" (formula "35") (term "1,0,0"))
            (rule "polySimp_addComm1" (formula "35") (term "0"))
            (rule "inEqSimp_ltToLeq" (formula "24") (term "0,0,0,1,0"))
            (rule "polySimp_mulComm0" (formula "24") (term "1,0,0,0,0,0,1,0"))
            (rule "inEqSimp_ltToLeq" (formula "30") (term "0,0,0,0,0"))
            (rule "polySimp_mulComm0" (formula "30") (term "1,0,0,0,0,0,0,0"))
            (rule "inEqSimp_ltToLeq" (formula "9") (term "0,0,0"))
            (rule "polySimp_mulComm0" (formula "9") (term "1,0,0,0,0,0"))
            (rule "inEqSimp_ltToLeq" (formula "25") (term "0,0,0"))
            (rule "polySimp_mulComm0" (formula "25") (term "1,0,0,0,0,0"))
            (rule "inEqSimp_sepPosMonomial0" (formula "13") (term "0,0,0,0,0"))
            (rule "polySimp_mulComm0" (formula "13") (term "1,0,0,0,0,0"))
            (rule "polySimp_rightDist" (formula "13") (term "1,0,0,0,0,0"))
            (rule "polySimp_mulLiterals" (formula "13") (term "1,1,0,0,0,0,0"))
            (rule "mul_literals" (formula "13") (term "0,1,0,0,0,0,0"))
            (rule "polySimp_elimOne" (formula "13") (term "1,1,0,0,0,0,0"))
            (rule "inEqSimp_sepPosMonomial0" (formula "24") (term "0,0,0"))
            (rule "polySimp_mulComm0" (formula "24") (term "1,0,0,0"))
            (rule "polySimp_rightDist" (formula "24") (term "1,0,0,0"))
            (rule "polySimp_mulLiterals" (formula "24") (term "1,1,0,0,0"))
            (rule "mul_literals" (formula "24") (term "0,1,0,0,0"))
            (rule "polySimp_elimOne" (formula "24") (term "1,1,0,0,0"))
            (rule "inEqSimp_sepPosMonomial0" (formula "8") (term "0,0,0"))
            (rule "polySimp_mulComm0" (formula "8") (term "1,0,0,0"))
            (rule "polySimp_rightDist" (formula "8") (term "1,0,0,0"))
            (rule "polySimp_mulLiterals" (formula "8") (term "1,1,0,0,0"))
            (rule "mul_literals" (formula "8") (term "0,1,0,0,0"))
            (rule "polySimp_elimOne" (formula "8") (term "1,1,0,0,0"))
            (rule "inEqSimp_sepPosMonomial0" (formula "12") (term "0,0,0,0,0"))
            (rule "polySimp_mulComm0" (formula "12") (term "1,0,0,0,0,0"))
            (rule "polySimp_rightDist" (formula "12") (term "1,0,0,0,0,0"))
            (rule "polySimp_mulLiterals" (formula "12") (term "1,1,0,0,0,0,0"))
            (rule "mul_literals" (formula "12") (term "0,1,0,0,0,0,0"))
            (rule "polySimp_elimOne" (formula "12") (term "1,1,0,0,0,0,0"))
            (rule "inEqSimp_sepPosMonomial0" (formula "27") (term "0,0,0,0,0"))
            (rule "polySimp_mulComm0" (formula "27") (term "1,0,0,0,0,0"))
            (rule "polySimp_rightDist" (formula "27") (term "1,0,0,0,0,0"))
            (rule "polySimp_mulLiterals" (formula "27") (term "1,1,0,0,0,0,0"))
            (rule "mul_literals" (formula "27") (term "0,1,0,0,0,0,0"))
            (rule "polySimp_elimOne" (formula "27") (term "1,1,0,0,0,0,0"))
            (rule "inEqSimp_sepPosMonomial0" (formula "8") (term "0,0,0,1,0"))
            (rule "polySimp_mulComm0" (formula "8") (term "1,0,0,0,1,0"))
            (rule "polySimp_rightDist" (formula "8") (term "1,0,0,0,1,0"))
            (rule "polySimp_mulLiterals" (formula "8") (term "1,1,0,0,0,1,0"))
            (rule "mul_literals" (formula "8") (term "0,1,0,0,0,1,0"))
            (rule "polySimp_elimOne" (formula "8") (term "1,1,0,0,0,1,0"))
            (rule "inEqSimp_sepNegMonomial0" (formula "35"))
            (rule "polySimp_mulLiterals" (formula "35") (term "0"))
            (rule "polySimp_elimOne" (formula "35") (term "0"))
            (rule "inEqSimp_sepPosMonomial0" (formula "24") (term "0,0,0,1,0"))
            (rule "polySimp_mulComm0" (formula "24") (term "1,0,0,0,1,0"))
            (rule "polySimp_rightDist" (formula "24") (term "1,0,0,0,1,0"))
            (rule "polySimp_mulLiterals" (formula "24") (term "1,1,0,0,0,1,0"))
            (rule "mul_literals" (formula "24") (term "0,1,0,0,0,1,0"))
            (rule "polySimp_elimOne" (formula "24") (term "1,1,0,0,0,1,0"))
            (rule "inEqSimp_sepPosMonomial0" (formula "30") (term "0,0,0,0,0"))
            (rule "polySimp_mulComm0" (formula "30") (term "1,0,0,0,0,0"))
            (rule "polySimp_rightDist" (formula "30") (term "1,0,0,0,0,0"))
            (rule "polySimp_mulLiterals" (formula "30") (term "1,1,0,0,0,0,0"))
            (rule "mul_literals" (formula "30") (term "0,1,0,0,0,0,0"))
            (rule "polySimp_elimOne" (formula "30") (term "1,1,0,0,0,0,0"))
            (rule "inEqSimp_sepPosMonomial0" (formula "9") (term "0,0,0"))
            (rule "polySimp_mulComm0" (formula "9") (term "1,0,0,0"))
            (rule "polySimp_rightDist" (formula "9") (term "1,0,0,0"))
            (rule "polySimp_mulLiterals" (formula "9") (term "1,1,0,0,0"))
            (rule "mul_literals" (formula "9") (term "0,1,0,0,0"))
            (rule "polySimp_elimOne" (formula "9") (term "1,1,0,0,0"))
            (rule "inEqSimp_sepPosMonomial0" (formula "25") (term "0,0,0"))
            (rule "polySimp_mulComm0" (formula "25") (term "1,0,0,0"))
            (rule "polySimp_rightDist" (formula "25") (term "1,0,0,0"))
            (rule "polySimp_mulLiterals" (formula "25") (term "1,1,0,0,0"))
            (rule "mul_literals" (formula "25") (term "0,1,0,0,0"))
            (rule "polySimp_elimOne" (formula "25") (term "1,1,0,0,0"))
            (rule "inEqSimp_subsumption1" (formula "32") (ifseqformula "35"))
            (rule "inEqSimp_homoInEq0" (formula "32") (term "0"))
            (rule "polySimp_pullOutFactor1b" (formula "32") (term "0,0"))
            (rule "add_literals" (formula "32") (term "1,1,0,0"))
            (rule "times_zero_1" (formula "32") (term "1,0,0"))
            (rule "add_zero_right" (formula "32") (term "0,0"))
            (rule "qeq_literals" (formula "32") (term "0"))
             (builtin "One Step Simplification" (formula "32"))
            (rule "true_left" (formula "32"))
            (rule "inEqSimp_and_subsumption3" (formula "13") (term "0,0,0"))
            (rule "leq_literals" (formula "13") (term "0,1,0,0,0,0"))
             (builtin "One Step Simplification" (formula "13"))
            (rule "inEqSimp_and_subsumption3" (formula "12") (term "0,0,0"))
            (rule "leq_literals" (formula "12") (term "0,1,0,0,0,0"))
             (builtin "One Step Simplification" (formula "12"))
            (rule "inEqSimp_and_subsumption3" (formula "27") (term "0,0,0"))
            (rule "leq_literals" (formula "27") (term "0,1,0,0,0,0"))
             (builtin "One Step Simplification" (formula "27"))
            (rule "inEqSimp_and_subsumption3" (formula "30") (term "0,0,0"))
            (rule "leq_literals" (formula "30") (term "0,1,0,0,0,0"))
             (builtin "One Step Simplification" (formula "30"))
            (rule "nnf_imp2or" (formula "8") (term "0"))
            (rule "nnf_imp2or" (formula "24") (term "0"))
            (rule "nnf_imp2or" (formula "9") (term "0"))
            (rule "nnf_imp2or" (formula "25") (term "0"))
            (rule "nnf_imp2or" (formula "13") (term "0"))
            (rule "nnf_imp2or" (formula "12") (term "0"))
            (rule "nnf_imp2or" (formula "27") (term "0"))
            (rule "nnf_imp2or" (formula "30") (term "0"))
            (rule "nnf_notAnd" (formula "8") (term "0,0"))
            (rule "inEqSimp_notLeq" (formula "8") (term "0,0,0"))
            (rule "polySimp_rightDist" (formula "8") (term "1,0,0,0,0,0"))
            (rule "mul_literals" (formula "8") (term "0,1,0,0,0,0,0"))
            (rule "polySimp_addAssoc" (formula "8") (term "0,0,0,0,0"))
            (rule "add_literals" (formula "8") (term "0,0,0,0,0,0"))
            (rule "add_zero_left" (formula "8") (term "0,0,0,0,0"))
            (rule "inEqSimp_sepPosMonomial1" (formula "8") (term "0,0,0"))
            (rule "polySimp_mulLiterals" (formula "8") (term "1,0,0,0"))
            (rule "polySimp_elimOne" (formula "8") (term "1,0,0,0"))
            (rule "inEqSimp_notGeq" (formula "8") (term "1,0,0"))
            (rule "mul_literals" (formula "8") (term "1,0,0,1,0,0"))
            (rule "add_zero_right" (formula "8") (term "0,0,1,0,0"))
            (rule "inEqSimp_sepPosMonomial0" (formula "8") (term "1,0,0"))
            (rule "mul_literals" (formula "8") (term "1,1,0,0"))
            (rule "nnf_notAnd" (formula "24") (term "0,0"))
            (rule "inEqSimp_notLeq" (formula "24") (term "0,0,0"))
            (rule "polySimp_rightDist" (formula "24") (term "1,0,0,0,0,0"))
            (rule "mul_literals" (formula "24") (term "0,1,0,0,0,0,0"))
            (rule "polySimp_addAssoc" (formula "24") (term "0,0,0,0,0"))
            (rule "add_literals" (formula "24") (term "0,0,0,0,0,0"))
            (rule "add_zero_left" (formula "24") (term "0,0,0,0,0"))
            (rule "inEqSimp_sepPosMonomial1" (formula "24") (term "0,0,0"))
            (rule "polySimp_mulLiterals" (formula "24") (term "1,0,0,0"))
            (rule "polySimp_elimOne" (formula "24") (term "1,0,0,0"))
            (rule "inEqSimp_notGeq" (formula "24") (term "1,0,0"))
            (rule "mul_literals" (formula "24") (term "1,0,0,1,0,0"))
            (rule "add_literals" (formula "24") (term "0,0,1,0,0"))
            (rule "inEqSimp_sepPosMonomial0" (formula "24") (term "1,0,0"))
            (rule "mul_literals" (formula "24") (term "1,1,0,0"))
            (rule "nnf_notAnd" (formula "9") (term "0,0"))
            (rule "inEqSimp_notGeq" (formula "9") (term "1,0,0"))
            (rule "mul_literals" (formula "9") (term "1,0,0,1,0,0"))
            (rule "add_literals" (formula "9") (term "0,0,1,0,0"))
            (rule "inEqSimp_sepPosMonomial0" (formula "9") (term "1,0,0"))
            (rule "mul_literals" (formula "9") (term "1,1,0,0"))
            (rule "inEqSimp_notLeq" (formula "9") (term "0,0,0"))
            (rule "polySimp_rightDist" (formula "9") (term "1,0,0,0,0,0"))
            (rule "mul_literals" (formula "9") (term "0,1,0,0,0,0,0"))
            (rule "polySimp_addAssoc" (formula "9") (term "0,0,0,0,0"))
            (rule "add_literals" (formula "9") (term "0,0,0,0,0,0"))
            (rule "add_zero_left" (formula "9") (term "0,0,0,0,0"))
            (rule "inEqSimp_sepPosMonomial1" (formula "9") (term "0,0,0"))
            (rule "polySimp_mulLiterals" (formula "9") (term "1,0,0,0"))
            (rule "polySimp_elimOne" (formula "9") (term "1,0,0,0"))
            (rule "nnf_notAnd" (formula "25") (term "0,0"))
            (rule "inEqSimp_notGeq" (formula "25") (term "1,0,0"))
            (rule "mul_literals" (formula "25") (term "1,0,0,1,0,0"))
            (rule "add_literals" (formula "25") (term "0,0,1,0,0"))
            (rule "inEqSimp_sepPosMonomial0" (formula "25") (term "1,0,0"))
            (rule "mul_literals" (formula "25") (term "1,1,0,0"))
            (rule "inEqSimp_notLeq" (formula "25") (term "0,0,0"))
            (rule "polySimp_rightDist" (formula "25") (term "1,0,0,0,0,0"))
            (rule "mul_literals" (formula "25") (term "0,1,0,0,0,0,0"))
            (rule "polySimp_addAssoc" (formula "25") (term "0,0,0,0,0"))
            (rule "add_literals" (formula "25") (term "0,0,0,0,0,0"))
            (rule "add_zero_left" (formula "25") (term "0,0,0,0,0"))
            (rule "inEqSimp_sepPosMonomial1" (formula "25") (term "0,0,0"))
            (rule "polySimp_mulLiterals" (formula "25") (term "1,0,0,0"))
            (rule "polySimp_elimOne" (formula "25") (term "1,0,0,0"))
            (rule "nnf_notAnd" (formula "13") (term "0,0"))
            (rule "inEqSimp_notLeq" (formula "13") (term "1,0,0"))
            (rule "mul_literals" (formula "13") (term "1,0,0,1,0,0"))
            (rule "add_literals" (formula "13") (term "0,0,1,0,0"))
            (rule "inEqSimp_sepPosMonomial1" (formula "13") (term "1,0,0"))
            (rule "mul_literals" (formula "13") (term "1,1,0,0"))
            (rule "nnf_notAnd" (formula "12") (term "0,0"))
            (rule "inEqSimp_notLeq" (formula "12") (term "1,0,0"))
            (rule "mul_literals" (formula "12") (term "1,0,0,1,0,0"))
            (rule "add_literals" (formula "12") (term "0,0,1,0,0"))
            (rule "inEqSimp_sepPosMonomial1" (formula "12") (term "1,0,0"))
            (rule "mul_literals" (formula "12") (term "1,1,0,0"))
            (rule "nnf_notAnd" (formula "27") (term "0,0"))
            (rule "inEqSimp_notLeq" (formula "27") (term "1,0,0"))
            (rule "mul_literals" (formula "27") (term "1,0,0,1,0,0"))
            (rule "add_literals" (formula "27") (term "0,0,1,0,0"))
            (rule "inEqSimp_sepPosMonomial1" (formula "27") (term "1,0,0"))
            (rule "mul_literals" (formula "27") (term "1,1,0,0"))
            (rule "nnf_notAnd" (formula "30") (term "0,0"))
            (rule "inEqSimp_notLeq" (formula "30") (term "1,0,0"))
            (rule "mul_literals" (formula "30") (term "1,0,0,1,0,0"))
            (rule "add_literals" (formula "30") (term "0,0,1,0,0"))
            (rule "inEqSimp_sepPosMonomial1" (formula "30") (term "1,0,0"))
            (rule "mul_literals" (formula "30") (term "1,1,0,0"))
            (rule "nnf_notAnd" (formula "13") (term "0,0,0"))
            (rule "inEqSimp_notLeq" (formula "13") (term "0,0,0,0"))
            (rule "polySimp_rightDist" (formula "13") (term "1,0,0,0,0,0,0"))
            (rule "mul_literals" (formula "13") (term "0,1,0,0,0,0,0,0"))
            (rule "polySimp_addAssoc" (formula "13") (term "0,0,0,0,0,0"))
            (rule "add_literals" (formula "13") (term "0,0,0,0,0,0,0"))
            (rule "add_zero_left" (formula "13") (term "0,0,0,0,0,0"))
            (rule "inEqSimp_sepPosMonomial1" (formula "13") (term "0,0,0,0"))
            (rule "polySimp_mulLiterals" (formula "13") (term "1,0,0,0,0"))
            (rule "polySimp_elimOne" (formula "13") (term "1,0,0,0,0"))
            (rule "inEqSimp_notGeq" (formula "13") (term "1,0,0,0"))
            (rule "mul_literals" (formula "13") (term "1,0,0,1,0,0,0"))
            (rule "add_literals" (formula "13") (term "0,0,1,0,0,0"))
            (rule "inEqSimp_sepPosMonomial0" (formula "13") (term "1,0,0,0"))
            (rule "mul_literals" (formula "13") (term "1,1,0,0,0"))
            (rule "nnf_notAnd" (formula "12") (term "0,0,0"))
            (rule "inEqSimp_notLeq" (formula "12") (term "0,0,0,0"))
            (rule "polySimp_rightDist" (formula "12") (term "1,0,0,0,0,0,0"))
            (rule "mul_literals" (formula "12") (term "0,1,0,0,0,0,0,0"))
            (rule "polySimp_addAssoc" (formula "12") (term "0,0,0,0,0,0"))
            (rule "add_literals" (formula "12") (term "0,0,0,0,0,0,0"))
            (rule "add_zero_left" (formula "12") (term "0,0,0,0,0,0"))
            (rule "inEqSimp_sepPosMonomial1" (formula "12") (term "0,0,0,0"))
            (rule "polySimp_mulLiterals" (formula "12") (term "1,0,0,0,0"))
            (rule "polySimp_elimOne" (formula "12") (term "1,0,0,0,0"))
            (rule "inEqSimp_notGeq" (formula "12") (term "1,0,0,0"))
            (rule "times_zero_1" (formula "12") (term "1,0,0,1,0,0,0"))
            (rule "add_literals" (formula "12") (term "0,0,1,0,0,0"))
            (rule "inEqSimp_sepPosMonomial0" (formula "12") (term "1,0,0,0"))
            (rule "mul_literals" (formula "12") (term "1,1,0,0,0"))
            (rule "nnf_notAnd" (formula "27") (term "0,0,0"))
            (rule "inEqSimp_notLeq" (formula "27") (term "0,0,0,0"))
            (rule "polySimp_rightDist" (formula "27") (term "1,0,0,0,0,0,0"))
            (rule "mul_literals" (formula "27") (term "0,1,0,0,0,0,0,0"))
            (rule "polySimp_addAssoc" (formula "27") (term "0,0,0,0,0,0"))
            (rule "add_literals" (formula "27") (term "0,0,0,0,0,0,0"))
            (rule "add_zero_left" (formula "27") (term "0,0,0,0,0,0"))
            (rule "inEqSimp_sepPosMonomial1" (formula "27") (term "0,0,0,0"))
            (rule "polySimp_mulLiterals" (formula "27") (term "1,0,0,0,0"))
            (rule "polySimp_elimOne" (formula "27") (term "1,0,0,0,0"))
            (rule "inEqSimp_notGeq" (formula "27") (term "1,0,0,0"))
            (rule "mul_literals" (formula "27") (term "1,0,0,1,0,0,0"))
            (rule "add_zero_right" (formula "27") (term "0,0,1,0,0,0"))
            (rule "inEqSimp_sepPosMonomial0" (formula "27") (term "1,0,0,0"))
            (rule "mul_literals" (formula "27") (term "1,1,0,0,0"))
            (rule "nnf_notAnd" (formula "30") (term "0,0,0"))
            (rule "inEqSimp_notGeq" (formula "30") (term "1,0,0,0"))
            (rule "times_zero_1" (formula "30") (term "1,0,0,1,0,0,0"))
            (rule "add_zero_right" (formula "30") (term "0,0,1,0,0,0"))
            (rule "inEqSimp_sepPosMonomial0" (formula "30") (term "1,0,0,0"))
            (rule "mul_literals" (formula "30") (term "1,1,0,0,0"))
            (rule "inEqSimp_notLeq" (formula "30") (term "0,0,0,0"))
            (rule "polySimp_rightDist" (formula "30") (term "1,0,0,0,0,0,0"))
            (rule "mul_literals" (formula "30") (term "0,1,0,0,0,0,0,0"))
            (rule "polySimp_addAssoc" (formula "30") (term "0,0,0,0,0,0"))
            (rule "add_literals" (formula "30") (term "0,0,0,0,0,0,0"))
            (rule "add_zero_left" (formula "30") (term "0,0,0,0,0,0"))
            (rule "inEqSimp_sepPosMonomial1" (formula "30") (term "0,0,0,0"))
            (rule "polySimp_mulLiterals" (formula "30") (term "1,0,0,0,0"))
            (rule "polySimp_elimOne" (formula "30") (term "1,0,0,0,0"))
            (rule "Class_invariant_axiom_for_java_util_CollectionIterator" (formula "42"))
            (rule "replaceKnownSelect_taclet10_7" (formula "42") (term "1,0"))
            (rule "replaceKnownSelect_taclet10_7" (formula "42") (term "0,1"))
            (rule "replaceKnownAuxiliaryConstant_taclet10_10" (formula "42") (term "1,0"))
            (rule "replaceKnownAuxiliaryConstant_taclet10_10" (formula "42") (term "0,1"))
            (rule "replaceKnownSelect_taclet10_8" (formula "42") (term "0,1,1"))
            (rule "replaceKnownAuxiliaryConstant_taclet10_11" (formula "42") (term "0,1,1"))
            (rule "inEqSimp_commuteLeq" (formula "42") (term "0"))
            (rule "replace_known_left" (formula "42") (term "0") (ifseqformula "31"))
             (builtin "One Step Simplification" (formula "42"))
            (rule "inEqSimp_leqRight" (formula "42"))
            (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
            (rule "polySimp_addComm1" (formula "1") (term "0"))
            (rule "inEqSimp_sepNegMonomial1" (formula "1"))
            (rule "polySimp_mulLiterals" (formula "1") (term "0"))
            (rule "polySimp_elimOne" (formula "1") (term "0"))
            (rule "inEqSimp_contradInEq1" (formula "1") (ifseqformula "35"))
            (rule "andLeft" (formula "1"))
            (rule "inEqSimp_homoInEq1" (formula "1"))
            (rule "polySimp_mulComm0" (formula "1") (term "1,0"))
            (rule "polySimp_rightDist" (formula "1") (term "1,0"))
            (rule "mul_literals" (formula "1") (term "0,1,0"))
            (rule "polySimp_addAssoc" (formula "1") (term "0"))
            (rule "polySimp_addComm1" (formula "1") (term "0,0"))
            (rule "add_literals" (formula "1") (term "0,0,0"))
            (rule "polySimp_pullOutFactor1b" (formula "1") (term "0"))
            (rule "add_literals" (formula "1") (term "1,1,0"))
            (rule "times_zero_1" (formula "1") (term "1,0"))
            (rule "add_literals" (formula "1") (term "0"))
            (rule "leq_literals" (formula "1"))
            (rule "closeFalse" (formula "1"))
         )
         (branch "Null reference (it = null)"
             (builtin "One Step Simplification" (formula "43") (ifInst ""  (formula "37")))
            (rule "closeTrue" (formula "43"))
         )
      )
      (branch "Exceptional Post (hasNext)"
          (builtin "One Step Simplification" (formula "32"))
          (builtin "One Step Simplification" (formula "33"))
         (rule "selectCreatedOfAnonAsFormulaEQ" (formula "32") (term "0,1,0") (ifseqformula "13"))
         (rule "replaceKnownSelect_taclet10_7" (formula "32") (term "0,1,0,0,1"))
         (rule "replaceKnownAuxiliaryConstant_taclet10_10" (formula "32") (term "0,1,0,0,1"))
         (rule "replaceKnownSelect_taclet10_8" (formula "32") (term "0,1,1,0,0,1"))
         (rule "replaceKnownAuxiliaryConstant_taclet10_11" (formula "32") (term "0,1,1,0,0,1"))
         (rule "andLeft" (formula "32"))
         (rule "andLeft" (formula "32"))
         (rule "andLeft" (formula "34"))
         (rule "notLeft" (formula "32"))
         (rule "close" (formula "35") (ifseqformula "34"))
      )
      (branch "Pre (hasNext)"
          (builtin "One Step Simplification" (formula "32"))
         (rule "wellFormedAnon" (formula "32") (term "1"))
         (rule "wellFormedAnonEQ" (formula "32") (term "0,1") (ifseqformula "13"))
         (rule "replace_known_left" (formula "32") (term "1,1") (ifseqformula "19"))
          (builtin "One Step Simplification" (formula "32") (ifInst ""  (formula "1")) (ifInst ""  (formula "12")))
         (rule "Class_invariant_axiom_for_java_util_CollectionIterator" (formula "32"))
         (rule "replaceKnownSelect_taclet10_7" (formula "32") (term "0,1"))
         (rule "replaceKnownSelect_taclet10_7" (formula "32") (term "1,0"))
         (rule "replaceKnownAuxiliaryConstant_taclet10_10" (formula "32") (term "0,1"))
         (rule "replaceKnownAuxiliaryConstant_taclet10_10" (formula "32") (term "1,0"))
         (rule "replaceKnownSelect_taclet10_8" (formula "32") (term "0,1,1"))
         (rule "replaceKnownAuxiliaryConstant_taclet10_11" (formula "32") (term "0,1,1"))
         (rule "inEqSimp_commuteLeq" (formula "32") (term "0"))
         (rule "replace_known_left" (formula "32") (term "0") (ifseqformula "29"))
          (builtin "One Step Simplification" (formula "32"))
         (rule "inEqSimp_commuteLeq" (formula "32"))
         (rule "close" (formula "32") (ifseqformula "30"))
      )
      (branch "Null reference (it = null)"
          (builtin "One Step Simplification" (formula "32") (ifInst ""  (formula "34")))
         (rule "closeTrue" (formula "32"))
      )
   )
   (branch "Use Case"
       (builtin "One Step Simplification" (formula "18") (ifInst ""  (formula "20")) (ifInst ""  (formula "20")))
       (builtin "One Step Simplification" (formula "26"))
      (rule "andLeft" (formula "18"))
      (rule "andLeft" (formula "18"))
      (rule "andLeft" (formula "18"))
      (rule "andLeft" (formula "20"))
      (rule "andLeft" (formula "18"))
      (rule "notLeft" (formula "22"))
      (rule "andLeft" (formula "21"))
      (rule "andLeft" (formula "18"))
      (rule "notLeft" (formula "22"))
      (rule "notLeft" (formula "22"))
      (rule "andLeft" (formula "18"))
      (rule "andLeft" (formula "18"))
      (rule "notLeft" (formula "19"))
      (rule "andLeft" (formula "18"))
      (rule "eqSymm" (formula "24"))
      (rule "eqSymm" (formula "18") (term "1,0,1,0"))
      (rule "castedGetAny" (formula "19") (term "0,0,1,0"))
      (rule "castedGetAny" (formula "18") (term "1,1,0,1,0"))
      (rule "castedGetAny" (formula "18") (term "0,1,0,1,0"))
      (rule "inEqSimp_commuteLeq" (formula "18") (term "0,0,0"))
      (rule "inEqSimp_commuteLeq" (formula "18") (term "0,0,0,1,0"))
      (rule "inEqSimp_commuteLeq" (formula "19") (term "0,0,0"))
      (rule "pullOutSelect" (formula "36") (term "0,0,1,0,1,0") (inst "selectSK=de_polyas_core3_open_cred_CredTool_vals_0"))
      (rule "applyEq" (formula "27") (term "0,0,1,0,0") (ifseqformula "1"))
      (rule "applyEq" (formula "23") (term "0,0,1,0") (ifseqformula "1"))
      (rule "applyEq" (formula "20") (term "0,0,1,0,1,0,1,1,0,0") (ifseqformula "1"))
      (rule "applyEq" (formula "19") (term "0,0,1,0,1,0,1,1,0,0") (ifseqformula "1"))
      (rule "applyEq" (formula "19") (term "0,0,1,0,0,1,1,0,0") (ifseqformula "1"))
      (rule "applyEq" (formula "24") (term "0,0,1,0") (ifseqformula "1"))
      (rule "applyEq" (formula "19") (term "0,0,1,0,1,0,1,1,0,0,1,0") (ifseqformula "1"))
      (rule "applyEq" (formula "29") (term "0,0,1,0,0") (ifseqformula "1"))
      (rule "applyEq" (formula "22") (term "0,0,1,0") (ifseqformula "1"))
      (rule "applyEq" (formula "26") (term "0,0,1,0,1") (ifseqformula "1"))
      (rule "applyEq" (formula "25") (term "0,0,1,0,1") (ifseqformula "1"))
      (rule "applyEq" (formula "19") (term "0,0,1,0,0,1,1,0,0,1,0") (ifseqformula "1"))
      (rule "applyEq" (formula "28") (term "0,0,1,0,0") (ifseqformula "1"))
      (rule "applyEq" (formula "26") (term "0,0,1,0,0") (ifseqformula "1"))
      (rule "applyEq" (formula "25") (term "0,0,1,0,0") (ifseqformula "1"))
      (rule "applyEq" (formula "19") (term "0,0,1,0,0,0,1,0,1,0") (ifseqformula "1"))
      (rule "applyEq" (formula "19") (term "0,0,1,0,0,1,1,0,1,0") (ifseqformula "1"))
      (rule "applyEq" (formula "25") (term "0,0,1,0,1,0") (ifseqformula "1"))
      (rule "applyEq" (formula "21") (term "0,0,1,0,1") (ifseqformula "1"))
      (rule "applyEq" (formula "20") (term "0,0,1,0,0,1,1,0,0") (ifseqformula "1"))
      (rule "applyEq" (formula "20") (term "0,0,1,0,1,0,0,0,1,0") (ifseqformula "1"))
      (rule "applyEq" (formula "22") (term "0,0,1,0,1") (ifseqformula "1"))
      (rule "applyEq" (formula "23") (term "0,0,1,0,1") (ifseqformula "1"))
      (rule "applyEq" (formula "19") (term "0,0,1,0,1,0,0,1,0,1,0") (ifseqformula "1"))
      (rule "applyEq" (formula "21") (term "0,0,1,0") (ifseqformula "1"))
      (rule "applyEq" (formula "19") (term "0,0,1,0,1,0,1,1,0,1,0") (ifseqformula "1"))
      (rule "applyEq" (formula "20") (term "0,0,1,0,0,0,0,1,0") (ifseqformula "1"))
      (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "12"))
       (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "35")) (ifInst ""  (formula "3")))
      (rule "applyEqReverse" (formula "37") (term "0,0,1,0,1,0") (ifseqformula "1"))
      (rule "applyEqReverse" (formula "27") (term "0,0,1,0,0") (ifseqformula "1"))
      (rule "applyEqReverse" (formula "23") (term "0,0,1,0") (ifseqformula "1"))
      (rule "applyEqReverse" (formula "20") (term "0,0,1,0,1,0,1,1,0,0") (ifseqformula "1"))
      (rule "applyEqReverse" (formula "19") (term "0,0,1,0,1,0,1,1,0,0") (ifseqformula "1"))
      (rule "applyEqReverse" (formula "19") (term "0,0,1,0,0,1,1,0,0") (ifseqformula "1"))
      (rule "applyEqReverse" (formula "24") (term "0,0,1,0") (ifseqformula "1"))
      (rule "applyEqReverse" (formula "19") (term "0,0,1,0,1,0,1,1,0,0,1,0") (ifseqformula "1"))
      (rule "applyEqReverse" (formula "29") (term "0,0,1,0,0") (ifseqformula "1"))
      (rule "applyEqReverse" (formula "22") (term "0,0,1,0") (ifseqformula "1"))
      (rule "applyEqReverse" (formula "26") (term "0,0,1,0,1") (ifseqformula "1"))
      (rule "applyEqReverse" (formula "25") (term "0,0,1,0,1") (ifseqformula "1"))
      (rule "applyEqReverse" (formula "19") (term "0,0,1,0,0,1,1,0,0,1,0") (ifseqformula "1"))
      (rule "applyEqReverse" (formula "28") (term "0,0,1,0,0") (ifseqformula "1"))
      (rule "applyEqReverse" (formula "26") (term "0,0,1,0,0") (ifseqformula "1"))
      (rule "applyEqReverse" (formula "25") (term "0,0,1,0,0") (ifseqformula "1"))
      (rule "applyEqReverse" (formula "19") (term "0,0,1,0,0,0,1,0,1,0") (ifseqformula "1"))
      (rule "applyEqReverse" (formula "19") (term "0,0,1,0,0,1,1,0,1,0") (ifseqformula "1"))
      (rule "applyEqReverse" (formula "25") (term "0,0,1,0,1,0") (ifseqformula "1"))
      (rule "applyEqReverse" (formula "21") (term "0,0,1,0,1") (ifseqformula "1"))
      (rule "applyEqReverse" (formula "20") (term "0,0,1,0,0,1,1,0,0") (ifseqformula "1"))
      (rule "applyEqReverse" (formula "20") (term "0,0,1,0,1,0,0,0,1,0") (ifseqformula "1"))
      (rule "applyEqReverse" (formula "22") (term "0,0,1,0,1") (ifseqformula "1"))
      (rule "applyEqReverse" (formula "23") (term "0,0,1,0,1") (ifseqformula "1"))
      (rule "applyEqReverse" (formula "19") (term "0,0,1,0,1,0,0,1,0,1,0") (ifseqformula "1"))
      (rule "applyEqReverse" (formula "21") (term "0,0,1,0") (ifseqformula "1"))
      (rule "applyEqReverse" (formula "19") (term "0,0,1,0,1,0,1,1,0,1,0") (ifseqformula "1"))
      (rule "applyEqReverse" (formula "20") (term "0,0,1,0,0,0,0,1,0") (ifseqformula "1"))
      (rule "hideAuxiliaryEq" (formula "1"))
      (rule "variableDeclarationAssign" (formula "36") (term "1"))
      (rule "variableDeclaration" (formula "36") (term "1") (newnames "b_1"))
      (rule "pullOutSelect" (formula "26") (term "0") (inst "selectSK=de_polyas_core3_open_cred_CredTool_vals_1"))
      (rule "applyEq" (formula "22") (term "1") (ifseqformula "1"))
      (rule "applyEq" (formula "26") (term "0") (ifseqformula "1"))
      (rule "simplifySelectOfAnon" (formula "1"))
       (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "35")))
      (rule "replaceKnownSelect_taclet20_5" (formula "1") (term "2,0"))
      (rule "replaceKnownAuxiliaryConstant_taclet20_6" (formula "1") (term "2,0"))
      (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,1,0,0") (ifseqformula "12"))
      (rule "eqSymm" (formula "26"))
      (rule "replace_known_left" (formula "1") (term "0,0,1,0,0") (ifseqformula "3"))
       (builtin "One Step Simplification" (formula "1"))
      (rule "elementOfUnion" (formula "1") (term "0,0"))
      (rule "elementOfSingleton" (formula "1") (term "1,0,0"))
       (builtin "One Step Simplification" (formula "1"))
      (rule "elementOfSingleton" (formula "1") (term "0,0"))
       (builtin "One Step Simplification" (formula "1"))
      (rule "applyEqReverse" (formula "22") (term "1") (ifseqformula "1"))
      (rule "applyEqReverse" (formula "27") (term "0") (ifseqformula "1"))
      (rule "applyEqReverse" (formula "26") (term "1") (ifseqformula "1"))
      (rule "hideAuxiliaryEq" (formula "1"))
      (rule "pullOutSelect" (formula "19") (term "1,0,1,1,0,0") (inst "selectSK=de_polyas_core3_open_cred_CredTool_cols_0"))
      (rule "applyEq" (formula "18") (term "1,0,1,1,0,0") (ifseqformula "19"))
      (rule "applyEq" (formula "23") (term "1") (ifseqformula "19"))
      (rule "applyEq" (formula "28") (term "0") (ifseqformula "19"))
      (rule "applyEq" (formula "26") (term "0") (ifseqformula "19"))
      (rule "applyEq" (formula "25") (term "1,0") (ifseqformula "19"))
      (rule "applyEq" (formula "20") (term "1,0,0,0,1,0") (ifseqformula "19"))
      (rule "applyEq" (formula "18") (term "1,0,0,1,0,1,0") (ifseqformula "19"))
      (rule "simplifySelectOfAnon" (formula "19"))
       (builtin "One Step Simplification" (formula "19") (ifInst ""  (formula "34")))
      (rule "selectCreatedOfAnonAsFormulaEQ" (formula "19") (term "0,1,0,0") (ifseqformula "11"))
      (rule "eqSymm" (formula "26"))
      (rule "eqSymm" (formula "25"))
      (rule "replace_known_left" (formula "19") (term "0,0,1,0,0") (ifseqformula "2"))
       (builtin "One Step Simplification" (formula "19"))
      (rule "elementOfUnion" (formula "19") (term "0,0"))
      (rule "elementOfSingleton" (formula "19") (term "0,0,0"))
       (builtin "One Step Simplification" (formula "19"))
      (rule "elementOfSingleton" (formula "19") (term "0,0"))
       (builtin "One Step Simplification" (formula "19"))
      (rule "simplifySelectOfAnonEQ" (formula "19") (ifseqformula "11"))
       (builtin "One Step Simplification" (formula "19") (ifInst ""  (formula "34")) (ifInst ""  (formula "2")))
      (rule "applyEqReverse" (formula "18") (term "1,0,0,1,0,1,0") (ifseqformula "19"))
      (rule "applyEqReverse" (formula "26") (term "1") (ifseqformula "19"))
      (rule "applyEqReverse" (formula "20") (term "1,0,1,1,0,0") (ifseqformula "19"))
      (rule "applyEqReverse" (formula "20") (term "1,0,0,0,1,0") (ifseqformula "19"))
      (rule "applyEqReverse" (formula "18") (term "1,0,1,1,0,0") (ifseqformula "19"))
      (rule "applyEqReverse" (formula "23") (term "1") (ifseqformula "19"))
      (rule "applyEqReverse" (formula "27") (term "0") (ifseqformula "19"))
      (rule "applyEqReverse" (formula "25") (term "1,1") (ifseqformula "19"))
      (rule "hideAuxiliaryEq" (formula "19"))
      (rule "eqSymm" (formula "24"))
      (rule "pullOutSelect" (formula "18") (term "1,0,1,1,0,0,1,0") (inst "selectSK=de_polyas_core3_open_cred_CredTool_record_0"))
      (rule "applyEq" (formula "26") (term "0") (ifseqformula "18"))
      (rule "applyEq" (formula "19") (term "1,0,1,1,0,1,0") (ifseqformula "18"))
      (rule "applyEq" (formula "21") (term "1") (ifseqformula "18"))
      (rule "simplifySelectOfAnon" (formula "18"))
       (builtin "One Step Simplification" (formula "18") (ifInst ""  (formula "32")))
      (rule "selectCreatedOfAnonAsFormulaEQ" (formula "18") (term "0,1,0,0") (ifseqformula "11"))
      (rule "replace_known_left" (formula "18") (term "0,0,1,0,0") (ifseqformula "2"))
       (builtin "One Step Simplification" (formula "18"))
      (rule "elementOfUnion" (formula "18") (term "0,0"))
      (rule "elementOfSingleton" (formula "18") (term "1,0,0"))
       (builtin "One Step Simplification" (formula "18"))
      (rule "elementOfSingleton" (formula "18") (term "0,0"))
       (builtin "One Step Simplification" (formula "18"))
      (rule "simplifySelectOfAnonEQ" (formula "18") (ifseqformula "11"))
       (builtin "One Step Simplification" (formula "18") (ifInst ""  (formula "32")) (ifInst ""  (formula "2")))
      (rule "applyEqReverse" (formula "19") (term "1,0,1,1,0,1,0") (ifseqformula "18"))
      (rule "applyEqReverse" (formula "19") (term "1,0,1,1,0,0,1,0") (ifseqformula "18"))
      (rule "applyEqReverse" (formula "26") (term "0") (ifseqformula "18"))
      (rule "applyEqReverse" (formula "21") (term "1") (ifseqformula "18"))
      (rule "hideAuxiliaryEq" (formula "18"))
      (rule "pullOutSelect" (formula "18") (term "0,0,1,0,1,0") (inst "selectSK=java_util_Collection_seq_1"))
      (rule "applyEq" (formula "25") (term "0") (ifseqformula "18"))
      (rule "applyEq" (formula "20") (term "0,0,0,1,0") (ifseqformula "18"))
      (rule "applyEq" (formula "20") (term "0,1,1,0,0") (ifseqformula "18"))
      (rule "applyEq" (formula "19") (term "0,1,1,0,0") (ifseqformula "18"))
      (rule "simplifySelectOfAnon" (formula "18"))
       (builtin "One Step Simplification" (formula "18") (ifInst ""  (formula "30")))
      (rule "replaceKnownSelect_taclet0_2" (formula "18") (term "2,0"))
      (rule "replaceKnownAuxiliaryConstant_taclet0_4" (formula "18") (term "2,0"))
      (rule "selectCreatedOfAnonAsFormulaEQ" (formula "18") (term "0,1,0,0") (ifseqformula "11"))
      (rule "eqSymm" (formula "25"))
      (rule "simplifySelectOfAnon" (formula "25"))
       (builtin "One Step Simplification" (formula "25") (ifInst ""  (formula "27")))
      (rule "replaceKnownSelect_taclet0_3" (formula "25") (term "2,0"))
      (rule "replaceKnownAuxiliaryConstant_taclet0_4" (formula "25") (term "2,0"))
      (rule "selectCreatedOfAnonAsFormulaEQ" (formula "25") (term "0,1,0,0") (ifseqformula "11"))
      (rule "replace_known_right" (formula "25") (term "0,0,1,0,0") (ifseqformula "26"))
       (builtin "One Step Simplification" (formula "25") (ifInst ""  (formula "12")))
      (rule "elementOfUnion" (formula "18") (term "0,0,0"))
      (rule "elementOfSingleton" (formula "18") (term "1,0,0,0"))
       (builtin "One Step Simplification" (formula "18"))
      (rule "elementOfSingleton" (formula "18") (term "0,0,0"))
       (builtin "One Step Simplification" (formula "18"))
      (rule "eqSymm" (formula "18") (term "0,0,0"))
      (rule "replace_known_right" (formula "18") (term "0,0,0") (ifseqformula "32"))
       (builtin "One Step Simplification" (formula "18"))
      (rule "ifthenelse_negated" (formula "18") (term "0"))
      (rule "elementOfUnion" (formula "25") (term "0,0"))
      (rule "elementOfSingleton" (formula "25") (term "0,0,0"))
       (builtin "One Step Simplification" (formula "25"))
      (rule "elementOfSingleton" (formula "25") (term "0,0"))
       (builtin "One Step Simplification" (formula "25"))
      (rule "applyEqReverse" (formula "18") (term "1") (ifseqformula "25"))
       (builtin "One Step Simplification" (formula "18"))
      (rule "applyEqReverse" (formula "19") (term "0,1,1,0,0") (ifseqformula "25"))
      (rule "applyEqReverse" (formula "20") (term "0,1,1,0,0") (ifseqformula "25"))
      (rule "applyEqReverse" (formula "20") (term "0,0,0,1,0") (ifseqformula "25"))
      (rule "applyEqReverse" (formula "19") (term "0,0,1,0,1,0") (ifseqformula "25"))
      (rule "hideAuxiliaryEq" (formula "25"))
      (rule "eqSymm" (formula "18") (term "1"))
      (rule "pullOutSelect" (formula "19") (term "0,1,1,0,1,0") (inst "selectSK=org_apache_commons_csv_CSVRecord_key_seq_0"))
      (rule "applyEq" (formula "20") (term "0,1,1,0,0,1,0") (ifseqformula "19"))
      (rule "simplifySelectOfAnon" (formula "19"))
       (builtin "One Step Simplification" (formula "19") (ifInst ""  (formula "28")))
      (rule "selectCreatedOfAnonAsFormulaEQ" (formula "19") (term "0,1,0,0") (ifseqformula "11"))
      (rule "elementOfUnion" (formula "19") (term "0,0,0"))
      (rule "elementOfSingleton" (formula "19") (term "1,0,0,0"))
       (builtin "One Step Simplification" (formula "19"))
      (rule "elementOfSingleton" (formula "19") (term "0,0,0"))
       (builtin "One Step Simplification" (formula "19"))
      (rule "ifthenelse_negated" (formula "19") (term "0"))
      (rule "pullOutSelect" (formula "19") (term "1,0") (inst "selectSK=org_apache_commons_csv_CSVRecord_key_seq_1"))
      (rule "simplifySelectOfAnonEQ" (formula "19") (ifseqformula "11"))
       (builtin "One Step Simplification" (formula "19") (ifInst ""  (formula "29")))
      (rule "ifthenelse_negated" (formula "19") (term "0"))
      (rule "Class_invariant_axiom_for_java_util_CollectionIterator" (formula "26"))
      (rule "replaceKnownSelect_taclet20_16" (formula "26") (term "0,1,1"))
      (rule "replaceKnownAuxiliaryConstant_taclet20_17" (formula "26") (term "0,1,1"))
      (rule "andLeft" (formula "26"))
      (rule "inEqSimp_commuteLeq" (formula "26"))
      (rule "pullOutSelect" (formula "27") (term "0") (inst "selectSK=java_util_Iterator_index_1"))
      (rule "applyEq" (formula "26") (term "0") (ifseqformula "27"))
      (rule "simplifySelectOfAnon" (formula "27"))
       (builtin "One Step Simplification" (formula "27") (ifInst ""  (formula "30")))
      (rule "replaceKnownSelect_taclet0_0" (formula "27") (term "2,0"))
      (rule "replaceKnownAuxiliaryConstant_taclet0_1" (formula "27") (term "2,0"))
      (rule "selectCreatedOfAnonAsFormulaEQ" (formula "27") (term "0,1,0,0") (ifseqformula "11"))
      (rule "replace_known_right" (formula "27") (term "0,0,1,0,0") (ifseqformula "29"))
       (builtin "One Step Simplification" (formula "27") (ifInst ""  (formula "12")))
      (rule "inEqSimp_commuteLeq" (formula "28"))
      (rule "applyEq" (formula "27") (term "2,0") (ifseqformula "13"))
      (rule "elementOfUnion" (formula "27") (term "0,0"))
      (rule "elementOfSingleton" (formula "27") (term "1,0,0"))
       (builtin "One Step Simplification" (formula "27"))
      (rule "applyEqReverse" (formula "26") (term "0") (ifseqformula "27"))
      (rule "applyEqReverse" (formula "28") (term "1") (ifseqformula "27"))
      (rule "hideAuxiliaryEq" (formula "27"))
      (rule "Class_invariant_axiom_for_java_util_ArrayList" (formula "24"))
      (rule "true_left" (formula "24"))
      (rule "Class_invariant_axiom_for_java_util_ArrayList" (formula "24"))
      (rule "true_left" (formula "24"))
      (rule "Class_invariant_axiom_for_org_apache_commons_csv_CSVRecord" (formula "23") (inst "i=i") (inst "i_0=i_0"))
      (rule "replaceKnownSelect_taclet20_18" (formula "23") (term "0,0,0,0"))
      (rule "replaceKnownSelect_taclet20_18" (formula "23") (term "0,0,0,0,1,0,1,0"))
      (rule "replaceKnownSelect_taclet20_18" (formula "23") (term "0,1,1,0,0,0,1,0"))
      (rule "expand_inInt" (formula "23") (term "1,0,0,1"))
      (rule "expand_inInt" (formula "23") (term "1,0,0,1,0"))
      (rule "replace_int_MAX" (formula "23") (term "1,0,1,0,0,1"))
      (rule "replace_int_MIN" (formula "23") (term "0,1,1,0,0,1"))
      (rule "replace_int_MIN" (formula "23") (term "0,1,1,0,0,1,0"))
      (rule "replace_int_MAX" (formula "23") (term "1,0,1,0,0,1,0"))
      (rule "andLeft" (formula "23"))
      (rule "andLeft" (formula "23"))
      (rule "eqSymm" (formula "23"))
      (rule "castedGetAny" (formula "25") (term "0,0,1,0"))
      (rule "castedGetAny" (formula "24") (term "0,0,1,0"))
      (rule "inEqSimp_commuteLeq" (formula "25") (term "0,0,0,0"))
      (rule "inEqSimp_commuteLeq" (formula "25") (term "1,1,0,0"))
      (rule "inEqSimp_commuteLeq" (formula "24") (term "1,1,0,0"))
      (rule "inEqSimp_commuteLeq" (formula "24") (term "0,0,0,0"))
      (rule "pullOutSelect" (formula "25") (term "0,1,1,0,0,0") (inst "selectSK=org_apache_commons_csv_CSVRecord_value_seq_0"))
      (rule "applyEq" (formula "23") (term "0,0") (ifseqformula "25"))
      (rule "applyEq" (formula "26") (term "0,0,0,1,0") (ifseqformula "25"))
      (rule "simplifySelectOfAnon" (formula "25"))
       (builtin "One Step Simplification" (formula "25") (ifInst ""  (formula "31")))
      (rule "selectCreatedOfAnonAsFormulaEQ" (formula "25") (term "0,1,0,0") (ifseqformula "11"))
      (rule "applyEqRigid" (formula "26") (term "1,1,0,0,0") (ifseqformula "23"))
      (rule "elementOfUnion" (formula "25") (term "0,0,0"))
      (rule "elementOfSingleton" (formula "25") (term "1,0,0,0"))
       (builtin "One Step Simplification" (formula "25"))
      (rule "elementOfSingleton" (formula "25") (term "0,0,0"))
       (builtin "One Step Simplification" (formula "25"))
      (rule "ifthenelse_negated" (formula "25") (term "0"))
      (rule "pullOutSelect" (formula "25") (term "1,0") (inst "selectSK=org_apache_commons_csv_CSVRecord_value_seq_1"))
      (rule "simplifySelectOfAnonEQ" (formula "25") (ifseqformula "11"))
       (builtin "One Step Simplification" (formula "25") (ifInst ""  (formula "32")))
      (rule "ifthenelse_negated" (formula "25") (term "0"))
      (rule "commute_and" (formula "21") (term "0,0"))
      (rule "commute_and" (formula "22") (term "0,0"))
      (rule "lenNonNegative" (formula "7") (term "0"))
      (rule "inEqSimp_commuteLeq" (formula "7"))
      (rule "applyEq" (formula "7") (term "0") (ifseqformula "8"))
      (rule "lenNonNegative" (formula "8") (term "1"))
      (rule "inEqSimp_commuteLeq" (formula "8"))
      (rule "lenNonNegative" (formula "5") (term "1,0,0,0"))
      (rule "inEqSimp_commuteLeq" (formula "5"))
       (builtin "Use Operation Contract" (formula "39") (newnames "heapBefore_hasNext,result_0,exc_1") (contract "java.util.Iterator[java.util.Iterator::hasNext()].JML normal_behavior operation contract.0"))
      (branch "Post (hasNext)"
          (builtin "One Step Simplification" (formula "32"))
          (builtin "One Step Simplification" (formula "40"))
         (rule "replaceKnownSelect_taclet20_20" (formula "32") (term "0,1,0,0,1"))
         (rule "replaceKnownAuxiliaryConstant_taclet20_21" (formula "32") (term "0,1,0,0,1"))
         (rule "replaceKnownSelect_taclet20_16" (formula "32") (term "0,1,1,0,0,1"))
         (rule "replaceKnownAuxiliaryConstant_taclet20_17" (formula "32") (term "0,1,1,0,0,1"))
         (rule "andLeft" (formula "32"))
         (rule "andLeft" (formula "33"))
         (rule "andLeft" (formula "33"))
         (rule "assignment" (formula "42") (term "1"))
          (builtin "One Step Simplification" (formula "42"))
         (rule "Class_invariant_axiom_for_java_util_CollectionIterator" (formula "34"))
         (rule "replaceKnownSelect_taclet20_20" (formula "34") (term "1,0"))
         (rule "replaceKnownSelect_taclet20_20" (formula "34") (term "0,1"))
         (rule "replaceKnownAuxiliaryConstant_taclet20_21" (formula "34") (term "1,0"))
         (rule "replaceKnownAuxiliaryConstant_taclet20_21" (formula "34") (term "0,1"))
         (rule "replaceKnownSelect_taclet20_16" (formula "34") (term "0,1,1"))
         (rule "replaceKnownAuxiliaryConstant_taclet20_17" (formula "34") (term "0,1,1"))
         (rule "andLeft" (formula "34"))
         (rule "inEqSimp_commuteLeq" (formula "35"))
         (rule "inEqSimp_commuteLeq" (formula "34"))
         (rule "commute_and" (formula "23") (term "0,0,1,0"))
         (rule "equalityToSeqGetAndSeqLenLeft" (formula "16") (inst "iv=iv"))
         (rule "andLeft" (formula "16"))
         (rule "inEqSimp_commuteLeq" (formula "17") (term "0,0,0"))
         (rule "applyEq" (formula "16") (term "0,0") (ifseqformula "18"))
          (builtin "One Step Simplification" (formula "16"))
         (rule "true_left" (formula "16"))
         (rule "applyEq" (formula "16") (term "0,0,1,0") (ifseqformula "17"))
          (builtin "One Step Simplification" (formula "16"))
         (rule "true_left" (formula "16"))
         (rule "commute_and" (formula "29") (term "1,0,0"))
         (rule "commute_and" (formula "26") (term "1,0,0"))
         (rule "commute_and" (formula "26") (term "0,0,0"))
         (rule "commute_and" (formula "29") (term "0,0,0"))
         (rule "commute_and_2" (formula "23") (term "0,1,0"))
         (rule "methodCallEmpty" (formula "41") (term "1"))
         (rule "shift_paren_and" (formula "26") (term "0,0"))
         (rule "commute_and_2" (formula "26") (term "0,0,0"))
         (rule "shift_paren_and" (formula "29") (term "0,0"))
         (rule "commute_and_2" (formula "29") (term "0,0,0"))
         (rule "emptyModality" (formula "41") (term "1"))
          (builtin "One Step Simplification" (formula "41"))
         (rule "impRight" (formula "41"))
         (rule "notLeft" (formula "1"))
         (rule "replace_known_right" (formula "33") (term "0") (ifseqformula "34"))
          (builtin "One Step Simplification" (formula "33"))
         (rule "notLeft" (formula "33"))
         (rule "methodCallEmpty" (formula "42") (term "1"))
         (rule "tryEmpty" (formula "42") (term "1"))
         (rule "emptyModality" (formula "42") (term "1"))
         (rule "andRight" (formula "42"))
         (branch
            (rule "andRight" (formula "42"))
            (branch
               (rule "andRight" (formula "42"))
               (branch
                   (builtin "One Step Simplification" (formula "42"))
                  (rule "replaceKnownSelect_taclet20_12" (formula "42") (term "1"))
                  (rule "replaceKnownAuxiliaryConstant_taclet20_14" (formula "42") (term "1"))
                  (rule "inEqSimp_ltRight" (formula "33"))
                  (rule "polySimp_mulComm0" (formula "1") (term "0,0"))
                  (rule "polySimp_addComm0" (formula "1") (term "0"))
                  (rule "inEqSimp_ltToLeq" (formula "11") (term "0,0,0,0,0"))
                  (rule "polySimp_mulComm0" (formula "11") (term "1,0,0,0,0,0,0,0"))
                  (rule "inEqSimp_ltToLeq" (formula "7") (term "0,0,0"))
                  (rule "polySimp_mulComm0" (formula "7") (term "1,0,0,0,0,0"))
                  (rule "inEqSimp_ltToLeq" (formula "12") (term "0,0,0,0,0"))
                  (rule "polySimp_mulComm0" (formula "12") (term "1,0,0,0,0,0,0,0"))
                  (rule "inEqSimp_ltToLeq" (formula "24") (term "0,0,0,1,0"))
                  (rule "polySimp_mulComm0" (formula "24") (term "1,0,0,0,0,0,1,0"))
                  (rule "inEqSimp_ltToLeq" (formula "7") (term "0,0,0,1,0"))
                  (rule "polySimp_mulComm0" (formula "7") (term "1,0,0,0,0,0,1,0"))
                  (rule "inEqSimp_ltToLeq" (formula "30") (term "0,0,0,0,0"))
                  (rule "polySimp_mulComm0" (formula "30") (term "1,0,0,0,0,0,0,0"))
                  (rule "inEqSimp_ltToLeq" (formula "24") (term "0,0,0"))
                  (rule "polySimp_mulComm0" (formula "24") (term "1,0,0,0,0,0"))
                  (rule "inEqSimp_ltToLeq" (formula "25") (term "0,0,0"))
                  (rule "polySimp_mulComm0" (formula "25") (term "1,0,0,0,0,0"))
                  (rule "inEqSimp_ltToLeq" (formula "27") (term "0,0,0,0,0"))
                  (rule "polySimp_mulComm0" (formula "27") (term "1,0,0,0,0,0,0,0"))
                  (rule "inEqSimp_ltToLeq" (formula "8") (term "0,0,0"))
                  (rule "polySimp_mulComm0" (formula "8") (term "1,0,0,0,0,0"))
                  (rule "inEqSimp_sepNegMonomial1" (formula "1"))
                  (rule "polySimp_mulLiterals" (formula "1") (term "0"))
                  (rule "polySimp_elimOne" (formula "1") (term "0"))
                  (rule "inEqSimp_sepPosMonomial0" (formula "11") (term "0,0,0,0,0"))
                  (rule "polySimp_mulComm0" (formula "11") (term "1,0,0,0,0,0"))
                  (rule "polySimp_rightDist" (formula "11") (term "1,0,0,0,0,0"))
                  (rule "mul_literals" (formula "11") (term "0,1,0,0,0,0,0"))
                  (rule "polySimp_mulLiterals" (formula "11") (term "1,1,0,0,0,0,0"))
                  (rule "polySimp_elimOne" (formula "11") (term "1,1,0,0,0,0,0"))
                  (rule "inEqSimp_sepPosMonomial0" (formula "7") (term "0,0,0"))
                  (rule "polySimp_mulComm0" (formula "7") (term "1,0,0,0"))
                  (rule "polySimp_rightDist" (formula "7") (term "1,0,0,0"))
                  (rule "mul_literals" (formula "7") (term "0,1,0,0,0"))
                  (rule "polySimp_mulLiterals" (formula "7") (term "1,1,0,0,0"))
                  (rule "polySimp_elimOne" (formula "7") (term "1,1,0,0,0"))
                  (rule "inEqSimp_sepPosMonomial0" (formula "12") (term "0,0,0,0,0"))
                  (rule "polySimp_mulComm0" (formula "12") (term "1,0,0,0,0,0"))
                  (rule "polySimp_rightDist" (formula "12") (term "1,0,0,0,0,0"))
                  (rule "polySimp_mulLiterals" (formula "12") (term "1,1,0,0,0,0,0"))
                  (rule "mul_literals" (formula "12") (term "0,1,0,0,0,0,0"))
                  (rule "polySimp_elimOne" (formula "12") (term "1,1,0,0,0,0,0"))
                  (rule "inEqSimp_sepPosMonomial0" (formula "24") (term "0,0,0,1,0"))
                  (rule "polySimp_mulComm0" (formula "24") (term "1,0,0,0,1,0"))
                  (rule "polySimp_rightDist" (formula "24") (term "1,0,0,0,1,0"))
                  (rule "mul_literals" (formula "24") (term "0,1,0,0,0,1,0"))
                  (rule "polySimp_mulLiterals" (formula "24") (term "1,1,0,0,0,1,0"))
                  (rule "polySimp_elimOne" (formula "24") (term "1,1,0,0,0,1,0"))
                  (rule "inEqSimp_sepPosMonomial0" (formula "7") (term "0,0,0,1,0"))
                  (rule "polySimp_mulComm0" (formula "7") (term "1,0,0,0,1,0"))
                  (rule "polySimp_rightDist" (formula "7") (term "1,0,0,0,1,0"))
                  (rule "polySimp_mulLiterals" (formula "7") (term "1,1,0,0,0,1,0"))
                  (rule "mul_literals" (formula "7") (term "0,1,0,0,0,1,0"))
                  (rule "polySimp_elimOne" (formula "7") (term "1,1,0,0,0,1,0"))
                  (rule "inEqSimp_sepPosMonomial0" (formula "30") (term "0,0,0,0,0"))
                  (rule "polySimp_mulComm0" (formula "30") (term "1,0,0,0,0,0"))
                  (rule "polySimp_rightDist" (formula "30") (term "1,0,0,0,0,0"))
                  (rule "mul_literals" (formula "30") (term "0,1,0,0,0,0,0"))
                  (rule "polySimp_mulLiterals" (formula "30") (term "1,1,0,0,0,0,0"))
                  (rule "polySimp_elimOne" (formula "30") (term "1,1,0,0,0,0,0"))
                  (rule "inEqSimp_sepPosMonomial0" (formula "24") (term "0,0,0"))
                  (rule "polySimp_mulComm0" (formula "24") (term "1,0,0,0"))
                  (rule "polySimp_rightDist" (formula "24") (term "1,0,0,0"))
                  (rule "mul_literals" (formula "24") (term "0,1,0,0,0"))
                  (rule "polySimp_mulLiterals" (formula "24") (term "1,1,0,0,0"))
                  (rule "polySimp_elimOne" (formula "24") (term "1,1,0,0,0"))
                  (rule "inEqSimp_sepPosMonomial0" (formula "25") (term "0,0,0"))
                  (rule "polySimp_mulComm0" (formula "25") (term "1,0,0,0"))
                  (rule "polySimp_rightDist" (formula "25") (term "1,0,0,0"))
                  (rule "mul_literals" (formula "25") (term "0,1,0,0,0"))
                  (rule "polySimp_mulLiterals" (formula "25") (term "1,1,0,0,0"))
                  (rule "polySimp_elimOne" (formula "25") (term "1,1,0,0,0"))
                  (rule "inEqSimp_sepPosMonomial0" (formula "27") (term "0,0,0,0,0"))
                  (rule "polySimp_mulComm0" (formula "27") (term "1,0,0,0,0,0"))
                  (rule "polySimp_rightDist" (formula "27") (term "1,0,0,0,0,0"))
                  (rule "mul_literals" (formula "27") (term "0,1,0,0,0,0,0"))
                  (rule "polySimp_mulLiterals" (formula "27") (term "1,1,0,0,0,0,0"))
                  (rule "polySimp_elimOne" (formula "27") (term "1,1,0,0,0,0,0"))
                  (rule "inEqSimp_sepPosMonomial0" (formula "8") (term "0,0,0"))
                  (rule "polySimp_mulComm0" (formula "8") (term "1,0,0,0"))
                  (rule "polySimp_rightDist" (formula "8") (term "1,0,0,0"))
                  (rule "polySimp_mulLiterals" (formula "8") (term "1,1,0,0,0"))
                  (rule "mul_literals" (formula "8") (term "0,1,0,0,0"))
                  (rule "polySimp_elimOne" (formula "8") (term "1,1,0,0,0"))
                  (rule "inEqSimp_antiSymm" (formula "32") (ifseqformula "1"))
                  (rule "applyEq" (formula "33") (term "0") (ifseqformula "32"))
                  (rule "inEqSimp_homoInEq1" (formula "33"))
                  (rule "polySimp_pullOutFactor1" (formula "33") (term "0"))
                  (rule "add_literals" (formula "33") (term "1,0"))
                  (rule "times_zero_1" (formula "33") (term "0"))
                  (rule "leq_literals" (formula "33"))
                  (rule "true_left" (formula "33"))
                  (rule "applyEq" (formula "24") (term "1,1,0,0,0") (ifseqformula "32"))
                  (rule "applyEq" (formula "25") (term "1,1,0,0,0") (ifseqformula "32"))
                  (rule "applyEq" (formula "1") (term "0") (ifseqformula "32"))
                  (rule "inEqSimp_homoInEq0" (formula "1"))
                  (rule "polySimp_pullOutFactor1" (formula "1") (term "0"))
                  (rule "add_literals" (formula "1") (term "1,0"))
                  (rule "times_zero_1" (formula "1") (term "0"))
                  (rule "qeq_literals" (formula "1"))
                  (rule "true_left" (formula "1"))
                  (rule "inEqSimp_and_subsumption3" (formula "10") (term "0,0,0"))
                  (rule "leq_literals" (formula "10") (term "0,1,0,0,0,0"))
                   (builtin "One Step Simplification" (formula "10"))
                  (rule "inEqSimp_and_subsumption3" (formula "11") (term "0,0,0"))
                  (rule "leq_literals" (formula "11") (term "0,1,0,0,0,0"))
                   (builtin "One Step Simplification" (formula "11"))
                  (rule "inEqSimp_and_subsumption3" (formula "29") (term "0,0,0"))
                  (rule "leq_literals" (formula "29") (term "0,1,0,0,0,0"))
                   (builtin "One Step Simplification" (formula "29"))
                  (rule "inEqSimp_and_subsumption3" (formula "26") (term "0,0,0"))
                  (rule "leq_literals" (formula "26") (term "0,1,0,0,0,0"))
                   (builtin "One Step Simplification" (formula "26"))
                  (rule "nnf_imp2or" (formula "6") (term "0"))
                  (rule "nnf_imp2or" (formula "7") (term "0"))
                  (rule "nnf_imp2or" (formula "23") (term "0"))
                  (rule "nnf_imp2or" (formula "24") (term "0"))
                  (rule "nnf_imp2or" (formula "10") (term "0"))
                  (rule "nnf_imp2or" (formula "11") (term "0"))
                  (rule "nnf_imp2or" (formula "29") (term "0"))
                  (rule "nnf_imp2or" (formula "26") (term "0"))
                  (rule "nnf_notAnd" (formula "6") (term "0,0"))
                  (rule "inEqSimp_notGeq" (formula "6") (term "1,0,0"))
                  (rule "times_zero_1" (formula "6") (term "1,0,0,1,0,0"))
                  (rule "add_literals" (formula "6") (term "0,0,1,0,0"))
                  (rule "inEqSimp_sepPosMonomial0" (formula "6") (term "1,0,0"))
                  (rule "mul_literals" (formula "6") (term "1,1,0,0"))
                  (rule "inEqSimp_notLeq" (formula "6") (term "0,0,0"))
                  (rule "polySimp_rightDist" (formula "6") (term "1,0,0,0,0,0"))
                  (rule "mul_literals" (formula "6") (term "0,1,0,0,0,0,0"))
                  (rule "polySimp_addAssoc" (formula "6") (term "0,0,0,0,0"))
                  (rule "add_literals" (formula "6") (term "0,0,0,0,0,0"))
                  (rule "add_zero_left" (formula "6") (term "0,0,0,0,0"))
                  (rule "inEqSimp_sepPosMonomial1" (formula "6") (term "0,0,0"))
                  (rule "polySimp_mulLiterals" (formula "6") (term "1,0,0,0"))
                  (rule "polySimp_elimOne" (formula "6") (term "1,0,0,0"))
                  (rule "nnf_notAnd" (formula "7") (term "0,0"))
                  (rule "inEqSimp_notLeq" (formula "7") (term "0,0,0"))
                  (rule "polySimp_rightDist" (formula "7") (term "1,0,0,0,0,0"))
                  (rule "mul_literals" (formula "7") (term "0,1,0,0,0,0,0"))
                  (rule "polySimp_addAssoc" (formula "7") (term "0,0,0,0,0"))
                  (rule "add_literals" (formula "7") (term "0,0,0,0,0,0"))
                  (rule "add_zero_left" (formula "7") (term "0,0,0,0,0"))
                  (rule "inEqSimp_sepPosMonomial1" (formula "7") (term "0,0,0"))
                  (rule "polySimp_mulLiterals" (formula "7") (term "1,0,0,0"))
                  (rule "polySimp_elimOne" (formula "7") (term "1,0,0,0"))
                  (rule "inEqSimp_notGeq" (formula "7") (term "1,0,0"))
                  (rule "mul_literals" (formula "7") (term "1,0,0,1,0,0"))
                  (rule "add_literals" (formula "7") (term "0,0,1,0,0"))
                  (rule "inEqSimp_sepPosMonomial0" (formula "7") (term "1,0,0"))
                  (rule "mul_literals" (formula "7") (term "1,1,0,0"))
                  (rule "nnf_notAnd" (formula "23") (term "0,0"))
                  (rule "inEqSimp_notGeq" (formula "23") (term "1,0,0"))
                  (rule "mul_literals" (formula "23") (term "1,0,0,1,0,0"))
                  (rule "add_literals" (formula "23") (term "0,0,1,0,0"))
                  (rule "inEqSimp_sepPosMonomial0" (formula "23") (term "1,0,0"))
                  (rule "mul_literals" (formula "23") (term "1,1,0,0"))
                  (rule "inEqSimp_notLeq" (formula "23") (term "0,0,0"))
                  (rule "polySimp_rightDist" (formula "23") (term "1,0,0,0,0,0"))
                  (rule "mul_literals" (formula "23") (term "0,1,0,0,0,0,0"))
                  (rule "polySimp_addAssoc" (formula "23") (term "0,0,0,0,0"))
                  (rule "add_literals" (formula "23") (term "0,0,0,0,0,0"))
                  (rule "add_zero_left" (formula "23") (term "0,0,0,0,0"))
                  (rule "inEqSimp_sepPosMonomial1" (formula "23") (term "0,0,0"))
                  (rule "polySimp_mulLiterals" (formula "23") (term "1,0,0,0"))
                  (rule "polySimp_elimOne" (formula "23") (term "1,0,0,0"))
                  (rule "nnf_notAnd" (formula "24") (term "0,0"))
                  (rule "inEqSimp_notGeq" (formula "24") (term "1,0,0"))
                  (rule "times_zero_1" (formula "24") (term "1,0,0,1,0,0"))
                  (rule "add_literals" (formula "24") (term "0,0,1,0,0"))
                  (rule "inEqSimp_sepPosMonomial0" (formula "24") (term "1,0,0"))
                  (rule "mul_literals" (formula "24") (term "1,1,0,0"))
                  (rule "inEqSimp_notLeq" (formula "24") (term "0,0,0"))
                  (rule "polySimp_rightDist" (formula "24") (term "1,0,0,0,0,0"))
                  (rule "mul_literals" (formula "24") (term "0,1,0,0,0,0,0"))
                  (rule "polySimp_addAssoc" (formula "24") (term "0,0,0,0,0"))
                  (rule "add_literals" (formula "24") (term "0,0,0,0,0,0"))
                  (rule "add_zero_left" (formula "24") (term "0,0,0,0,0"))
                  (rule "inEqSimp_sepPosMonomial1" (formula "24") (term "0,0,0"))
                  (rule "polySimp_mulLiterals" (formula "24") (term "1,0,0,0"))
                  (rule "polySimp_elimOne" (formula "24") (term "1,0,0,0"))
                  (rule "nnf_notAnd" (formula "10") (term "0,0"))
                  (rule "inEqSimp_notLeq" (formula "10") (term "1,0,0"))
                  (rule "mul_literals" (formula "10") (term "1,0,0,1,0,0"))
                  (rule "add_literals" (formula "10") (term "0,0,1,0,0"))
                  (rule "inEqSimp_sepPosMonomial1" (formula "10") (term "1,0,0"))
                  (rule "mul_literals" (formula "10") (term "1,1,0,0"))
                  (rule "nnf_notAnd" (formula "11") (term "0,0"))
                  (rule "inEqSimp_notLeq" (formula "11") (term "1,0,0"))
                  (rule "mul_literals" (formula "11") (term "1,0,0,1,0,0"))
                  (rule "add_literals" (formula "11") (term "0,0,1,0,0"))
                  (rule "inEqSimp_sepPosMonomial1" (formula "11") (term "1,0,0"))
                  (rule "mul_literals" (formula "11") (term "1,1,0,0"))
                  (rule "nnf_notAnd" (formula "29") (term "0,0"))
                  (rule "inEqSimp_notLeq" (formula "29") (term "1,0,0"))
                  (rule "mul_literals" (formula "29") (term "1,0,0,1,0,0"))
                  (rule "add_literals" (formula "29") (term "0,0,1,0,0"))
                  (rule "inEqSimp_sepPosMonomial1" (formula "29") (term "1,0,0"))
                  (rule "mul_literals" (formula "29") (term "1,1,0,0"))
                  (rule "nnf_notAnd" (formula "26") (term "0,0"))
                  (rule "inEqSimp_notLeq" (formula "26") (term "1,0,0"))
                  (rule "mul_literals" (formula "26") (term "1,0,0,1,0,0"))
                  (rule "add_literals" (formula "26") (term "0,0,1,0,0"))
                  (rule "inEqSimp_sepPosMonomial1" (formula "26") (term "1,0,0"))
                  (rule "mul_literals" (formula "26") (term "1,1,0,0"))
                  (rule "nnf_notAnd" (formula "10") (term "0,0,0"))
                  (rule "inEqSimp_notGeq" (formula "10") (term "1,0,0,0"))
                  (rule "times_zero_1" (formula "10") (term "1,0,0,1,0,0,0"))
                  (rule "add_literals" (formula "10") (term "0,0,1,0,0,0"))
                  (rule "inEqSimp_sepPosMonomial0" (formula "10") (term "1,0,0,0"))
                  (rule "mul_literals" (formula "10") (term "1,1,0,0,0"))
                  (rule "inEqSimp_notLeq" (formula "10") (term "0,0,0,0"))
                  (rule "polySimp_rightDist" (formula "10") (term "1,0,0,0,0,0,0"))
                  (rule "mul_literals" (formula "10") (term "0,1,0,0,0,0,0,0"))
                  (rule "polySimp_addAssoc" (formula "10") (term "0,0,0,0,0,0"))
                  (rule "add_literals" (formula "10") (term "0,0,0,0,0,0,0"))
                  (rule "add_zero_left" (formula "10") (term "0,0,0,0,0,0"))
                  (rule "inEqSimp_sepPosMonomial1" (formula "10") (term "0,0,0,0"))
                  (rule "polySimp_mulLiterals" (formula "10") (term "1,0,0,0,0"))
                  (rule "polySimp_elimOne" (formula "10") (term "1,0,0,0,0"))
                  (rule "nnf_notAnd" (formula "11") (term "0,0,0"))
                  (rule "inEqSimp_notLeq" (formula "11") (term "0,0,0,0"))
                  (rule "polySimp_rightDist" (formula "11") (term "1,0,0,0,0,0,0"))
                  (rule "mul_literals" (formula "11") (term "0,1,0,0,0,0,0,0"))
                  (rule "polySimp_addAssoc" (formula "11") (term "0,0,0,0,0,0"))
                  (rule "add_literals" (formula "11") (term "0,0,0,0,0,0,0"))
                  (rule "add_zero_left" (formula "11") (term "0,0,0,0,0,0"))
                  (rule "inEqSimp_sepPosMonomial1" (formula "11") (term "0,0,0,0"))
                  (rule "polySimp_mulLiterals" (formula "11") (term "1,0,0,0,0"))
                  (rule "polySimp_elimOne" (formula "11") (term "1,0,0,0,0"))
                  (rule "inEqSimp_notGeq" (formula "11") (term "1,0,0,0"))
                  (rule "mul_literals" (formula "11") (term "1,0,0,1,0,0,0"))
                  (rule "add_zero_right" (formula "11") (term "0,0,1,0,0,0"))
                  (rule "inEqSimp_sepPosMonomial0" (formula "11") (term "1,0,0,0"))
                  (rule "mul_literals" (formula "11") (term "1,1,0,0,0"))
                  (rule "nnf_notAnd" (formula "29") (term "0,0,0"))
                  (rule "inEqSimp_notGeq" (formula "29") (term "1,0,0,0"))
                  (rule "mul_literals" (formula "29") (term "1,0,0,1,0,0,0"))
                  (rule "add_zero_right" (formula "29") (term "0,0,1,0,0,0"))
                  (rule "inEqSimp_sepPosMonomial0" (formula "29") (term "1,0,0,0"))
                  (rule "mul_literals" (formula "29") (term "1,1,0,0,0"))
                  (rule "inEqSimp_notLeq" (formula "29") (term "0,0,0,0"))
                  (rule "polySimp_rightDist" (formula "29") (term "1,0,0,0,0,0,0"))
                  (rule "mul_literals" (formula "29") (term "0,1,0,0,0,0,0,0"))
                  (rule "polySimp_addAssoc" (formula "29") (term "0,0,0,0,0,0"))
                  (rule "add_literals" (formula "29") (term "0,0,0,0,0,0,0"))
                  (rule "add_zero_left" (formula "29") (term "0,0,0,0,0,0"))
                  (rule "inEqSimp_sepPosMonomial1" (formula "29") (term "0,0,0,0"))
                  (rule "polySimp_mulLiterals" (formula "29") (term "1,0,0,0,0"))
                  (rule "polySimp_elimOne" (formula "29") (term "1,0,0,0,0"))
                  (rule "nnf_notAnd" (formula "26") (term "0,0,0"))
                  (rule "inEqSimp_notLeq" (formula "26") (term "0,0,0,0"))
                  (rule "polySimp_rightDist" (formula "26") (term "1,0,0,0,0,0,0"))
                  (rule "mul_literals" (formula "26") (term "0,1,0,0,0,0,0,0"))
                  (rule "polySimp_addAssoc" (formula "26") (term "0,0,0,0,0,0"))
                  (rule "add_literals" (formula "26") (term "0,0,0,0,0,0,0"))
                  (rule "add_zero_left" (formula "26") (term "0,0,0,0,0,0"))
                  (rule "inEqSimp_sepPosMonomial1" (formula "26") (term "0,0,0,0"))
                  (rule "polySimp_mulLiterals" (formula "26") (term "1,0,0,0,0"))
                  (rule "polySimp_elimOne" (formula "26") (term "1,0,0,0,0"))
                  (rule "inEqSimp_notGeq" (formula "26") (term "1,0,0,0"))
                  (rule "mul_literals" (formula "26") (term "1,0,0,1,0,0,0"))
                  (rule "add_zero_right" (formula "26") (term "0,0,1,0,0,0"))
                  (rule "inEqSimp_sepPosMonomial0" (formula "26") (term "1,0,0,0"))
                  (rule "mul_literals" (formula "26") (term "1,1,0,0,0"))
                  (rule "Class_invariant_axiom_for_org_apache_commons_csv_CSVRecord" (formula "41") (inst "i=i") (inst "i_0=i_0"))
                  (rule "replaceKnownSelect_taclet20_18" (formula "41") (term "0,0,0,0"))
                  (rule "replaceKnownSelect_taclet20_22" (formula "41") (term "0,1,0,0"))
                  (rule "replaceKnownSelect_taclet20_22" (formula "41") (term "0,0,0,0,1,0,1"))
                  (rule "replaceKnownSelect_taclet20_22" (formula "41") (term "0,1,1,0,0,0,1"))
                  (rule "replaceKnownSelect_taclet20_18" (formula "41") (term "0,1,1,0,0,0,1,0"))
                  (rule "replaceKnownSelect_taclet20_18" (formula "41") (term "0,0,0,0,1,0,1,0"))
                  (rule "expand_inInt" (formula "41") (term "1,0,0,1"))
                  (rule "expand_inInt" (formula "41") (term "1,0,0,1,0"))
                  (rule "replace_int_MAX" (formula "41") (term "1,0,1,0,0,1"))
                  (rule "replace_int_MIN" (formula "41") (term "0,1,1,0,0,1"))
                  (rule "replace_int_MIN" (formula "41") (term "0,1,1,0,0,1,0"))
                  (rule "replace_int_MAX" (formula "41") (term "1,0,1,0,0,1,0"))
                  (rule "eqSymm" (formula "41") (term "0,0"))
                  (rule "replace_known_left" (formula "41") (term "0,0") (ifseqformula "25"))
                   (builtin "One Step Simplification" (formula "41"))
                  (rule "castedGetAny" (formula "41") (term "0,0,1,0,1"))
                  (rule "castedGetAny" (formula "41") (term "0,0,1,0,0"))
                  (rule "inEqSimp_ltToLeq" (formula "41") (term "1,0,0,0,1"))
                  (rule "polySimp_mulComm0" (formula "41") (term "1,0,0,1,0,0,0,1"))
                  (rule "inEqSimp_ltToLeq" (formula "41") (term "1,0,0,0,0"))
                  (rule "polySimp_mulComm0" (formula "41") (term "1,0,0,1,0,0,0,0"))
                  (rule "inEqSimp_commuteLeq" (formula "41") (term "1,1,0,0,0"))
                  (rule "inEqSimp_commuteLeq" (formula "41") (term "0,0,0,0,0"))
                  (rule "inEqSimp_commuteLeq" (formula "41") (term "0,0,0,0,1"))
                  (rule "inEqSimp_commuteLeq" (formula "41") (term "1,1,0,0,1"))
                  (rule "applyEq" (formula "41") (term "0,1,0,0,1,0,0,0,1") (ifseqformula "25"))
                  (rule "inEqSimp_sepPosMonomial0" (formula "41") (term "1,0,0,0,0"))
                  (rule "polySimp_mulComm0" (formula "41") (term "1,1,0,0,0,0"))
                  (rule "polySimp_rightDist" (formula "41") (term "1,1,0,0,0,0"))
                  (rule "polySimp_mulLiterals" (formula "41") (term "1,1,1,0,0,0,0"))
                  (rule "mul_literals" (formula "41") (term "0,1,1,0,0,0,0"))
                  (rule "polySimp_elimOne" (formula "41") (term "1,1,1,0,0,0,0"))
                  (rule "inEqSimp_sepPosMonomial0" (formula "41") (term "1,0,0,0,1"))
                  (rule "polySimp_mulComm0" (formula "41") (term "1,1,0,0,0,1"))
                  (rule "polySimp_rightDist" (formula "41") (term "1,1,0,0,0,1"))
                  (rule "polySimp_mulLiterals" (formula "41") (term "1,1,1,0,0,0,1"))
                  (rule "mul_literals" (formula "41") (term "0,1,1,0,0,0,1"))
                  (rule "polySimp_elimOne" (formula "41") (term "1,1,1,0,0,0,1"))
                  (rule "nnf_imp2or" (formula "41") (term "0,0"))
                  (rule "nnf_imp2or" (formula "41") (term "0,1"))
                  (rule "nnf_notAnd" (formula "41") (term "0,0,0"))
                  (rule "nnf_notAnd" (formula "41") (term "0,0,1"))
                  (rule "nnf_notAnd" (formula "41") (term "0,0,0,0"))
                  (rule "inEqSimp_notGeq" (formula "41") (term "0,0,0,0,0"))
                  (rule "mul_literals" (formula "41") (term "1,0,0,0,0,0,0,0"))
                  (rule "add_literals" (formula "41") (term "0,0,0,0,0,0,0"))
                  (rule "inEqSimp_sepPosMonomial0" (formula "41") (term "0,0,0,0,0"))
                  (rule "mul_literals" (formula "41") (term "1,0,0,0,0,0"))
                  (rule "inEqSimp_notLeq" (formula "41") (term "1,0,0,0,0"))
                  (rule "polySimp_rightDist" (formula "41") (term "1,0,0,1,0,0,0,0"))
                  (rule "mul_literals" (formula "41") (term "0,1,0,0,1,0,0,0,0"))
                  (rule "polySimp_addAssoc" (formula "41") (term "0,0,1,0,0,0,0"))
                  (rule "add_literals" (formula "41") (term "0,0,0,1,0,0,0,0"))
                  (rule "add_zero_left" (formula "41") (term "0,0,1,0,0,0,0"))
                  (rule "inEqSimp_sepPosMonomial1" (formula "41") (term "1,0,0,0,0"))
                  (rule "polySimp_mulLiterals" (formula "41") (term "1,1,0,0,0,0"))
                  (rule "polySimp_elimOne" (formula "41") (term "1,1,0,0,0,0"))
                  (rule "nnf_notAnd" (formula "41") (term "1,0,0,0"))
                  (rule "inEqSimp_notLeq" (formula "41") (term "0,1,0,0,0"))
                  (rule "mul_literals" (formula "41") (term "1,0,0,0,1,0,0,0"))
                  (rule "add_literals" (formula "41") (term "0,0,0,1,0,0,0"))
                  (rule "inEqSimp_sepPosMonomial1" (formula "41") (term "0,1,0,0,0"))
                  (rule "mul_literals" (formula "41") (term "1,0,1,0,0,0"))
                  (rule "inEqSimp_notGeq" (formula "41") (term "1,1,0,0,0"))
                  (rule "mul_literals" (formula "41") (term "1,0,0,1,1,0,0,0"))
                  (rule "add_literals" (formula "41") (term "0,0,1,1,0,0,0"))
                  (rule "inEqSimp_sepPosMonomial0" (formula "41") (term "1,1,0,0,0"))
                  (rule "mul_literals" (formula "41") (term "1,1,1,0,0,0"))
                  (rule "nnf_notAnd" (formula "41") (term "0,0,0,1"))
                  (rule "inEqSimp_notGeq" (formula "41") (term "0,0,0,0,1"))
                  (rule "times_zero_1" (formula "41") (term "1,0,0,0,0,0,0,1"))
                  (rule "add_literals" (formula "41") (term "0,0,0,0,0,0,1"))
                  (rule "inEqSimp_sepPosMonomial0" (formula "41") (term "0,0,0,0,1"))
                  (rule "mul_literals" (formula "41") (term "1,0,0,0,0,1"))
                  (rule "inEqSimp_notLeq" (formula "41") (term "1,0,0,0,1"))
                  (rule "polySimp_rightDist" (formula "41") (term "1,0,0,1,0,0,0,1"))
                  (rule "mul_literals" (formula "41") (term "0,1,0,0,1,0,0,0,1"))
                  (rule "polySimp_addAssoc" (formula "41") (term "0,0,1,0,0,0,1"))
                  (rule "add_literals" (formula "41") (term "0,0,0,1,0,0,0,1"))
                  (rule "add_zero_left" (formula "41") (term "0,0,1,0,0,0,1"))
                  (rule "inEqSimp_sepPosMonomial1" (formula "41") (term "1,0,0,0,1"))
                  (rule "polySimp_mulLiterals" (formula "41") (term "1,1,0,0,0,1"))
                  (rule "polySimp_elimOne" (formula "41") (term "1,1,0,0,0,1"))
                  (rule "nnf_notAnd" (formula "41") (term "1,0,0,1"))
                  (rule "inEqSimp_notLeq" (formula "41") (term "0,1,0,0,1"))
                  (rule "mul_literals" (formula "41") (term "1,0,0,0,1,0,0,1"))
                  (rule "add_literals" (formula "41") (term "0,0,0,1,0,0,1"))
                  (rule "inEqSimp_sepPosMonomial1" (formula "41") (term "0,1,0,0,1"))
                  (rule "mul_literals" (formula "41") (term "1,0,1,0,0,1"))
                  (rule "inEqSimp_notGeq" (formula "41") (term "1,1,0,0,1"))
                  (rule "mul_literals" (formula "41") (term "1,0,0,1,1,0,0,1"))
                  (rule "add_literals" (formula "41") (term "0,0,1,1,0,0,1"))
                  (rule "inEqSimp_sepPosMonomial0" (formula "41") (term "1,1,0,0,1"))
                  (rule "mul_literals" (formula "41") (term "1,1,1,0,0,1"))
                  (rule "commute_or_2" (formula "7") (term "0"))
                  (rule "commute_or" (formula "6") (term "0,0"))
                  (rule "commute_or_2" (formula "24") (term "0"))
                  (rule "commute_or" (formula "23") (term "0,0"))
                  (rule "commute_and" (formula "6") (term "0,0,1,0"))
                  (rule "commute_and" (formula "23") (term "0,0,1,0"))
                  (rule "commute_or_2" (formula "10") (term "0"))
                  (rule "ifthenelse_split" (formula "21") (term "0"))
                  (branch "self.record.<created> = TRUE TRUE"
                     (rule "applyEqReverse" (formula "23") (term "1,0") (ifseqformula "22"))
                     (rule "hideAuxiliaryEq" (formula "22"))
                     (rule "replace_known_left" (formula "28") (term "0,0,0") (ifseqformula "21"))
                      (builtin "One Step Simplification" (formula "28"))
                     (rule "applyEqReverse" (formula "25") (term "0,0") (ifseqformula "28"))
                     (rule "applyEqReverse" (formula "29") (term "0,0,0,1,0") (ifseqformula "28"))
                     (rule "applyEqReverse" (formula "41") (term "0,0,0,1,0,1") (ifseqformula "28"))
                     (rule "hideAuxiliaryEq" (formula "28"))
                     (rule "replace_known_left" (formula "22") (term "0,0,0") (ifseqformula "21"))
                      (builtin "One Step Simplification" (formula "22"))
                     (rule "applyEqReverse" (formula "40") (term "0,0,0,1,0,0") (ifseqformula "22"))
                     (rule "applyEqReverse" (formula "23") (term "0,1,0,0,0,1,0") (ifseqformula "22"))
                     (rule "applyEqReverse" (formula "26") (term "0,0,0,1,0") (ifseqformula "22"))
                     (rule "applyEqReverse" (formula "23") (term "0,1,1,1,0,0,1,0") (ifseqformula "22"))
                     (rule "applyEqReverse" (formula "25") (term "0,1") (ifseqformula "22"))
                     (rule "applyEqReverse" (formula "28") (term "0,1,0,0,0,0") (ifseqformula "22"))
                     (rule "applyEqReverse" (formula "26") (term "0,1,0,0,0,0") (ifseqformula "22"))
                     (rule "applyEqReverse" (formula "40") (term "0,1,1,0,0,0,0") (ifseqformula "22"))
                     (rule "applyEqReverse" (formula "40") (term "0,1,1,0,0,0,1") (ifseqformula "22"))
                     (rule "hideAuxiliaryEq" (formula "22"))
                     (rule "replace_known_left" (formula "26") (term "0,0") (ifseqformula "21"))
                      (builtin "One Step Simplification" (formula "26"))
                     (rule "applyEqReverse" (formula "39") (term "0,0,0,1,0,1") (ifseqformula "26"))
                     (rule "applyEqReverse" (formula "24") (term "0,0") (ifseqformula "26"))
                     (rule "applyEqReverse" (formula "26") (term "0,0,0,1,0") (ifseqformula "25"))
                     (rule "hideAuxiliaryEq" (formula "25"))
                     (rule "commute_or_2" (formula "11") (term "0"))
                     (rule "ifthenelse_split" (formula "16") (term "0"))
                     (branch "self.cols.<created> = TRUE TRUE"
                        (rule "eqSymm" (formula "17"))
                        (rule "replace_known_left" (formula "21") (term "0,0") (ifseqformula "16"))
                         (builtin "One Step Simplification" (formula "21"))
                        (rule "true_left" (formula "21"))
                        (rule "applyEq" (formula "22") (term "0,0,0,0,0,1,0") (ifseqformula "17"))
                        (rule "applyEq" (formula "26") (term "0,0") (ifseqformula "17"))
                        (rule "applyEq" (formula "23") (term "0,0,0,1,0,0") (ifseqformula "17"))
                        (rule "applyEq" (formula "7") (term "1,0,0,0") (ifseqformula "26"))
                        (rule "applyEq" (formula "5") (term "0") (ifseqformula "25"))
                        (rule "applyEq" (formula "5") (term "1,1,0,0") (ifseqformula "24"))
                        (rule "commute_or_2" (formula "21") (term "0"))
                        (rule "commute_or_2" (formula "7") (term "0,0"))
                        (rule "commute_or_2" (formula "8") (term "0,0"))
                        (rule "commute_or" (formula "20") (term "0,0"))
                        (rule "commute_or_2" (formula "20") (term "0"))
                        (rule "commute_or" (formula "7") (term "0,0,0"))
                        (rule "commute_or_2" (formula "7") (term "0,0"))
                        (rule "commute_or_2" (formula "7") (term "0"))
                        (rule "commute_or" (formula "8") (term "0,0,0"))
                        (rule "commute_or_2" (formula "8") (term "0,0"))
                        (rule "commute_or_2" (formula "8") (term "0"))
                        (rule "andRight" (formula "32"))
                        (branch
                           (rule "allRight" (formula "32") (inst "sk=i_0_0"))
                           (rule "orRight" (formula "32"))
                           (rule "orRight" (formula "32"))
                           (rule "notRight" (formula "34"))
                           (rule "orRight" (formula "34"))
                           (rule "orRight" (formula "33"))
                           (rule "inEqSimp_geqRight" (formula "35"))
                           (rule "mul_literals" (formula "1") (term "1,0,0"))
                           (rule "add_literals" (formula "1") (term "0,0"))
                           (rule "inEqSimp_leqRight" (formula "36"))
                           (rule "mul_literals" (formula "1") (term "1,0,0"))
                           (rule "add_literals" (formula "1") (term "0,0"))
                           (rule "inEqSimp_leqRight" (formula "35"))
                           (rule "mul_literals" (formula "1") (term "1,0,0"))
                           (rule "add_literals" (formula "1") (term "0,0"))
                           (rule "add_zero_left" (formula "1") (term "0"))
                           (rule "inEqSimp_geqRight" (formula "36"))
                           (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
                           (rule "polySimp_addComm1" (formula "1") (term "0"))
                           (rule "inEqSimp_sepPosMonomial0" (formula "4"))
                           (rule "mul_literals" (formula "4") (term "1"))
                           (rule "inEqSimp_sepPosMonomial1" (formula "3"))
                           (rule "mul_literals" (formula "3") (term "1"))
                           (rule "inEqSimp_sepNegMonomial0" (formula "1"))
                           (rule "polySimp_mulLiterals" (formula "1") (term "0"))
                           (rule "polySimp_elimOne" (formula "1") (term "0"))
                           (rule "inEqSimp_subsumption1" (formula "3") (ifseqformula "2"))
                           (rule "leq_literals" (formula "3") (term "0"))
                            (builtin "One Step Simplification" (formula "3"))
                           (rule "true_left" (formula "3"))
                           (rule "commute_and_2" (formula "23") (term "0,1,0"))
                           (rule "ex_pull_out3" (formula "23") (term "0"))
                           (rule "cnf_rightDist" (formula "23") (term "0,0"))
                           (rule "shift_paren_or" (formula "23") (term "1,0,0"))
                           (rule "cnf_rightDist" (formula "23") (term "0,0,0"))
                           (rule "commute_or_2" (formula "23") (term "0,0,0,0"))
                           (rule "shift_paren_or" (formula "23") (term "1,0,0,0"))
                           (rule "commute_or" (formula "23") (term "0,0,0,0,0"))
                           (rule "allLeft" (formula "11") (inst "t=i_0_0"))
                           (rule "replace_known_left" (formula "11") (term "0,0,0,0") (ifseqformula "4"))
                            (builtin "One Step Simplification" (formula "11"))
                           (rule "inEqSimp_commuteGeq" (formula "11") (term "1"))
                           (rule "inEqSimp_contradInEq1" (formula "11") (term "0,0") (ifseqformula "2"))
                           (rule "qeq_literals" (formula "11") (term "0,0,0"))
                            (builtin "One Step Simplification" (formula "11"))
                           (rule "inEqSimp_contradInEq0" (formula "11") (term "0") (ifseqformula "3"))
                           (rule "qeq_literals" (formula "11") (term "0,0"))
                            (builtin "One Step Simplification" (formula "11"))
                           (rule "inEqSimp_contradInEq1" (formula "11") (ifseqformula "1"))
                           (rule "andLeft" (formula "11"))
                           (rule "inEqSimp_homoInEq1" (formula "11"))
                           (rule "polySimp_pullOutFactor1b" (formula "11") (term "0"))
                           (rule "add_literals" (formula "11") (term "1,1,0"))
                           (rule "times_zero_1" (formula "11") (term "1,0"))
                           (rule "add_literals" (formula "11") (term "0"))
                           (rule "leq_literals" (formula "11"))
                           (rule "closeFalse" (formula "11"))
                        )
                        (branch
                           (rule "allRight" (formula "32") (inst "sk=i_0"))
                           (rule "orRight" (formula "32"))
                           (rule "orRight" (formula "32"))
                           (rule "notRight" (formula "34"))
                           (rule "orRight" (formula "34"))
                           (rule "orRight" (formula "33"))
                           (rule "inEqSimp_geqRight" (formula "35"))
                           (rule "mul_literals" (formula "1") (term "1,0,0"))
                           (rule "add_literals" (formula "1") (term "0,0"))
                           (rule "inEqSimp_leqRight" (formula "36"))
                           (rule "mul_literals" (formula "1") (term "1,0,0"))
                           (rule "add_literals" (formula "1") (term "0,0"))
                           (rule "inEqSimp_geqRight" (formula "36"))
                           (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
                           (rule "polySimp_addComm1" (formula "1") (term "0"))
                           (rule "inEqSimp_leqRight" (formula "36"))
                           (rule "mul_literals" (formula "1") (term "1,0,0"))
                           (rule "add_literals" (formula "1") (term "0,0"))
                           (rule "add_zero_left" (formula "1") (term "0"))
                           (rule "inEqSimp_sepPosMonomial0" (formula "4"))
                           (rule "mul_literals" (formula "4") (term "1"))
                           (rule "inEqSimp_sepPosMonomial1" (formula "3"))
                           (rule "mul_literals" (formula "3") (term "1"))
                           (rule "inEqSimp_sepNegMonomial0" (formula "2"))
                           (rule "polySimp_mulLiterals" (formula "2") (term "0"))
                           (rule "polySimp_elimOne" (formula "2") (term "0"))
                           (rule "inEqSimp_subsumption1" (formula "3") (ifseqformula "1"))
                           (rule "leq_literals" (formula "3") (term "0"))
                            (builtin "One Step Simplification" (formula "3"))
                           (rule "true_left" (formula "3"))
                           (rule "commute_and_2" (formula "23") (term "0,1,0"))
                           (rule "ex_pull_out3" (formula "23") (term "0"))
                           (rule "cnf_rightDist" (formula "23") (term "0,0"))
                           (rule "shift_paren_or" (formula "23") (term "1,0,0"))
                           (rule "cnf_rightDist" (formula "23") (term "0,0,0"))
                           (rule "commute_or_2" (formula "23") (term "0,0,0,0"))
                           (rule "shift_paren_or" (formula "23") (term "1,0,0,0"))
                           (rule "commute_or" (formula "23") (term "0,0,0,0,0"))
                           (rule "allLeft" (formula "12") (inst "t=i_0"))
                           (rule "replace_known_left" (formula "12") (term "0,0,0,0") (ifseqformula "4"))
                            (builtin "One Step Simplification" (formula "12"))
                           (rule "inEqSimp_commuteGeq" (formula "12") (term "1"))
                           (rule "inEqSimp_contradInEq1" (formula "12") (term "0,0") (ifseqformula "1"))
                           (rule "qeq_literals" (formula "12") (term "0,0,0"))
                            (builtin "One Step Simplification" (formula "12"))
                           (rule "inEqSimp_contradInEq1" (formula "12") (term "1") (ifseqformula "2"))
                           (rule "inEqSimp_homoInEq1" (formula "12") (term "0,1"))
                           (rule "polySimp_pullOutFactor1b" (formula "12") (term "0,0,1"))
                           (rule "add_literals" (formula "12") (term "1,1,0,0,1"))
                           (rule "times_zero_1" (formula "12") (term "1,0,0,1"))
                           (rule "add_literals" (formula "12") (term "0,0,1"))
                           (rule "leq_literals" (formula "12") (term "0,1"))
                            (builtin "One Step Simplification" (formula "12"))
                           (rule "inEqSimp_contradInEq1" (formula "3") (ifseqformula "12"))
                           (rule "qeq_literals" (formula "3") (term "0"))
                            (builtin "One Step Simplification" (formula "3"))
                           (rule "closeFalse" (formula "3"))
                        )
                     )
                     (branch "self.cols.<created> = TRUE FALSE"
                        (rule "referencedObjectIsCreatedRight" (formula "28") (ifseqformula "34"))
                        (rule "close" (formula "28") (ifseqformula "1"))
                     )
                  )
                  (branch "self.record.<created> = TRUE FALSE"
                     (rule "referencedObjectIsCreatedRight" (formula "33") (ifseqformula "37"))
                     (rule "close" (formula "33") (ifseqformula "1"))
                  )
               )
               (branch
                  (rule "andRight" (formula "42"))
                  (branch
                      (builtin "One Step Simplification" (formula "42"))
                     (rule "replaceKnownSelect_taclet20_7" (formula "42") (term "1"))
                     (rule "replaceKnownAuxiliaryConstant_taclet20_8" (formula "42") (term "1"))
                     (rule "inEqSimp_ltRight" (formula "33"))
                     (rule "polySimp_mulComm0" (formula "1") (term "0,0"))
                     (rule "polySimp_addComm0" (formula "1") (term "0"))
                     (rule "inEqSimp_ltToLeq" (formula "11") (term "0,0,0,0,0"))
                     (rule "polySimp_mulComm0" (formula "11") (term "1,0,0,0,0,0,0,0"))
                     (rule "inEqSimp_ltToLeq" (formula "7") (term "0,0,0,1,0"))
                     (rule "polySimp_mulComm0" (formula "7") (term "1,0,0,0,0,0,1,0"))
                     (rule "inEqSimp_ltToLeq" (formula "30") (term "0,0,0,0,0"))
                     (rule "polySimp_mulComm0" (formula "30") (term "1,0,0,0,0,0,0,0"))
                     (rule "inEqSimp_ltToLeq" (formula "27") (term "0,0,0,0,0"))
                     (rule "polySimp_mulComm0" (formula "27") (term "1,0,0,0,0,0,0,0"))
                     (rule "inEqSimp_ltToLeq" (formula "25") (term "0,0,0"))
                     (rule "polySimp_mulComm0" (formula "25") (term "1,0,0,0,0,0"))
                     (rule "inEqSimp_ltToLeq" (formula "7") (term "0,0,0"))
                     (rule "polySimp_mulComm0" (formula "7") (term "1,0,0,0,0,0"))
                     (rule "inEqSimp_ltToLeq" (formula "12") (term "0,0,0,0,0"))
                     (rule "polySimp_mulComm0" (formula "12") (term "1,0,0,0,0,0,0,0"))
                     (rule "inEqSimp_ltToLeq" (formula "8") (term "0,0,0"))
                     (rule "polySimp_mulComm0" (formula "8") (term "1,0,0,0,0,0"))
                     (rule "inEqSimp_ltToLeq" (formula "24") (term "0,0,0,1,0"))
                     (rule "polySimp_mulComm0" (formula "24") (term "1,0,0,0,0,0,1,0"))
                     (rule "inEqSimp_ltToLeq" (formula "24") (term "0,0,0"))
                     (rule "polySimp_mulComm0" (formula "24") (term "1,0,0,0,0,0"))
                     (rule "inEqSimp_sepNegMonomial1" (formula "1"))
                     (rule "polySimp_mulLiterals" (formula "1") (term "0"))
                     (rule "polySimp_elimOne" (formula "1") (term "0"))
                     (rule "inEqSimp_sepPosMonomial0" (formula "11") (term "0,0,0,0,0"))
                     (rule "polySimp_mulComm0" (formula "11") (term "1,0,0,0,0,0"))
                     (rule "polySimp_rightDist" (formula "11") (term "1,0,0,0,0,0"))
                     (rule "polySimp_mulLiterals" (formula "11") (term "1,1,0,0,0,0,0"))
                     (rule "mul_literals" (formula "11") (term "0,1,0,0,0,0,0"))
                     (rule "polySimp_elimOne" (formula "11") (term "1,1,0,0,0,0,0"))
                     (rule "inEqSimp_sepPosMonomial0" (formula "7") (term "0,0,0,1,0"))
                     (rule "polySimp_mulComm0" (formula "7") (term "1,0,0,0,1,0"))
                     (rule "polySimp_rightDist" (formula "7") (term "1,0,0,0,1,0"))
                     (rule "polySimp_mulLiterals" (formula "7") (term "1,1,0,0,0,1,0"))
                     (rule "mul_literals" (formula "7") (term "0,1,0,0,0,1,0"))
                     (rule "polySimp_elimOne" (formula "7") (term "1,1,0,0,0,1,0"))
                     (rule "inEqSimp_sepPosMonomial0" (formula "30") (term "0,0,0,0,0"))
                     (rule "polySimp_mulComm0" (formula "30") (term "1,0,0,0,0,0"))
                     (rule "polySimp_rightDist" (formula "30") (term "1,0,0,0,0,0"))
                     (rule "mul_literals" (formula "30") (term "0,1,0,0,0,0,0"))
                     (rule "polySimp_mulLiterals" (formula "30") (term "1,1,0,0,0,0,0"))
                     (rule "polySimp_elimOne" (formula "30") (term "1,1,0,0,0,0,0"))
                     (rule "inEqSimp_sepPosMonomial0" (formula "27") (term "0,0,0,0,0"))
                     (rule "polySimp_mulComm0" (formula "27") (term "1,0,0,0,0,0"))
                     (rule "polySimp_rightDist" (formula "27") (term "1,0,0,0,0,0"))
                     (rule "mul_literals" (formula "27") (term "0,1,0,0,0,0,0"))
                     (rule "polySimp_mulLiterals" (formula "27") (term "1,1,0,0,0,0,0"))
                     (rule "polySimp_elimOne" (formula "27") (term "1,1,0,0,0,0,0"))
                     (rule "inEqSimp_sepPosMonomial0" (formula "25") (term "0,0,0"))
                     (rule "polySimp_mulComm0" (formula "25") (term "1,0,0,0"))
                     (rule "polySimp_rightDist" (formula "25") (term "1,0,0,0"))
                     (rule "polySimp_mulLiterals" (formula "25") (term "1,1,0,0,0"))
                     (rule "mul_literals" (formula "25") (term "0,1,0,0,0"))
                     (rule "polySimp_elimOne" (formula "25") (term "1,1,0,0,0"))
                     (rule "inEqSimp_sepPosMonomial0" (formula "7") (term "0,0,0"))
                     (rule "polySimp_mulComm0" (formula "7") (term "1,0,0,0"))
                     (rule "polySimp_rightDist" (formula "7") (term "1,0,0,0"))
                     (rule "mul_literals" (formula "7") (term "0,1,0,0,0"))
                     (rule "polySimp_mulLiterals" (formula "7") (term "1,1,0,0,0"))
                     (rule "polySimp_elimOne" (formula "7") (term "1,1,0,0,0"))
                     (rule "inEqSimp_sepPosMonomial0" (formula "12") (term "0,0,0,0,0"))
                     (rule "polySimp_mulComm0" (formula "12") (term "1,0,0,0,0,0"))
                     (rule "polySimp_rightDist" (formula "12") (term "1,0,0,0,0,0"))
                     (rule "polySimp_mulLiterals" (formula "12") (term "1,1,0,0,0,0,0"))
                     (rule "mul_literals" (formula "12") (term "0,1,0,0,0,0,0"))
                     (rule "polySimp_elimOne" (formula "12") (term "1,1,0,0,0,0,0"))
                     (rule "inEqSimp_sepPosMonomial0" (formula "8") (term "0,0,0"))
                     (rule "polySimp_mulComm0" (formula "8") (term "1,0,0,0"))
                     (rule "polySimp_rightDist" (formula "8") (term "1,0,0,0"))
                     (rule "polySimp_mulLiterals" (formula "8") (term "1,1,0,0,0"))
                     (rule "mul_literals" (formula "8") (term "0,1,0,0,0"))
                     (rule "polySimp_elimOne" (formula "8") (term "1,1,0,0,0"))
                     (rule "inEqSimp_sepPosMonomial0" (formula "24") (term "0,0,0,1,0"))
                     (rule "polySimp_mulComm0" (formula "24") (term "1,0,0,0,1,0"))
                     (rule "polySimp_rightDist" (formula "24") (term "1,0,0,0,1,0"))
                     (rule "polySimp_mulLiterals" (formula "24") (term "1,1,0,0,0,1,0"))
                     (rule "mul_literals" (formula "24") (term "0,1,0,0,0,1,0"))
                     (rule "polySimp_elimOne" (formula "24") (term "1,1,0,0,0,1,0"))
                     (rule "inEqSimp_sepPosMonomial0" (formula "24") (term "0,0,0"))
                     (rule "polySimp_mulComm0" (formula "24") (term "1,0,0,0"))
                     (rule "polySimp_rightDist" (formula "24") (term "1,0,0,0"))
                     (rule "mul_literals" (formula "24") (term "0,1,0,0,0"))
                     (rule "polySimp_mulLiterals" (formula "24") (term "1,1,0,0,0"))
                     (rule "polySimp_elimOne" (formula "24") (term "1,1,0,0,0"))
                     (rule "inEqSimp_antiSymm" (formula "32") (ifseqformula "1"))
                     (rule "applyEq" (formula "24") (term "1,1,0,0,0") (ifseqformula "32"))
                     (rule "applyEq" (formula "25") (term "1,1,0,0,0") (ifseqformula "32"))
                     (rule "applyEq" (formula "33") (term "0") (ifseqformula "32"))
                     (rule "inEqSimp_homoInEq1" (formula "33"))
                     (rule "polySimp_pullOutFactor1" (formula "33") (term "0"))
                     (rule "add_literals" (formula "33") (term "1,0"))
                     (rule "times_zero_1" (formula "33") (term "0"))
                     (rule "leq_literals" (formula "33"))
                     (rule "true_left" (formula "33"))
                     (rule "applyEq" (formula "1") (term "0") (ifseqformula "32"))
                     (rule "inEqSimp_homoInEq0" (formula "1"))
                     (rule "polySimp_pullOutFactor1" (formula "1") (term "0"))
                     (rule "add_literals" (formula "1") (term "1,0"))
                     (rule "times_zero_1" (formula "1") (term "0"))
                     (rule "qeq_literals" (formula "1"))
                     (rule "true_left" (formula "1"))
                     (rule "inEqSimp_and_subsumption3" (formula "10") (term "0,0,0"))
                     (rule "leq_literals" (formula "10") (term "0,1,0,0,0,0"))
                      (builtin "One Step Simplification" (formula "10"))
                     (rule "inEqSimp_and_subsumption3" (formula "29") (term "0,0,0"))
                     (rule "leq_literals" (formula "29") (term "0,1,0,0,0,0"))
                      (builtin "One Step Simplification" (formula "29"))
                     (rule "inEqSimp_and_subsumption3" (formula "26") (term "0,0,0"))
                     (rule "leq_literals" (formula "26") (term "0,1,0,0,0,0"))
                      (builtin "One Step Simplification" (formula "26"))
                     (rule "inEqSimp_and_subsumption3" (formula "11") (term "0,0,0"))
                     (rule "leq_literals" (formula "11") (term "0,1,0,0,0,0"))
                      (builtin "One Step Simplification" (formula "11"))
                     (rule "nnf_imp2or" (formula "6") (term "0"))
                     (rule "nnf_imp2or" (formula "7") (term "0"))
                     (rule "nnf_imp2or" (formula "23") (term "0"))
                     (rule "nnf_imp2or" (formula "24") (term "0"))
                     (rule "nnf_imp2or" (formula "10") (term "0"))
                     (rule "nnf_imp2or" (formula "29") (term "0"))
                     (rule "nnf_imp2or" (formula "26") (term "0"))
                     (rule "nnf_imp2or" (formula "11") (term "0"))
                     (rule "nnf_notAnd" (formula "6") (term "0,0"))
                     (rule "inEqSimp_notLeq" (formula "6") (term "0,0,0"))
                     (rule "polySimp_rightDist" (formula "6") (term "1,0,0,0,0,0"))
                     (rule "mul_literals" (formula "6") (term "0,1,0,0,0,0,0"))
                     (rule "polySimp_addAssoc" (formula "6") (term "0,0,0,0,0"))
                     (rule "add_literals" (formula "6") (term "0,0,0,0,0,0"))
                     (rule "add_zero_left" (formula "6") (term "0,0,0,0,0"))
                     (rule "inEqSimp_sepPosMonomial1" (formula "6") (term "0,0,0"))
                     (rule "polySimp_mulLiterals" (formula "6") (term "1,0,0,0"))
                     (rule "polySimp_elimOne" (formula "6") (term "1,0,0,0"))
                     (rule "inEqSimp_notGeq" (formula "6") (term "1,0,0"))
                     (rule "times_zero_1" (formula "6") (term "1,0,0,1,0,0"))
                     (rule "add_literals" (formula "6") (term "0,0,1,0,0"))
                     (rule "inEqSimp_sepPosMonomial0" (formula "6") (term "1,0,0"))
                     (rule "mul_literals" (formula "6") (term "1,1,0,0"))
                     (rule "nnf_notAnd" (formula "7") (term "0,0"))
                     (rule "inEqSimp_notGeq" (formula "7") (term "1,0,0"))
                     (rule "times_zero_1" (formula "7") (term "1,0,0,1,0,0"))
                     (rule "add_literals" (formula "7") (term "0,0,1,0,0"))
                     (rule "inEqSimp_sepPosMonomial0" (formula "7") (term "1,0,0"))
                     (rule "mul_literals" (formula "7") (term "1,1,0,0"))
                     (rule "inEqSimp_notLeq" (formula "7") (term "0,0,0"))
                     (rule "polySimp_rightDist" (formula "7") (term "1,0,0,0,0,0"))
                     (rule "mul_literals" (formula "7") (term "0,1,0,0,0,0,0"))
                     (rule "polySimp_addAssoc" (formula "7") (term "0,0,0,0,0"))
                     (rule "add_literals" (formula "7") (term "0,0,0,0,0,0"))
                     (rule "add_zero_left" (formula "7") (term "0,0,0,0,0"))
                     (rule "inEqSimp_sepPosMonomial1" (formula "7") (term "0,0,0"))
                     (rule "polySimp_mulLiterals" (formula "7") (term "1,0,0,0"))
                     (rule "polySimp_elimOne" (formula "7") (term "1,0,0,0"))
                     (rule "nnf_notAnd" (formula "23") (term "0,0"))
                     (rule "inEqSimp_notLeq" (formula "23") (term "0,0,0"))
                     (rule "polySimp_rightDist" (formula "23") (term "1,0,0,0,0,0"))
                     (rule "mul_literals" (formula "23") (term "0,1,0,0,0,0,0"))
                     (rule "polySimp_addAssoc" (formula "23") (term "0,0,0,0,0"))
                     (rule "add_literals" (formula "23") (term "0,0,0,0,0,0"))
                     (rule "add_zero_left" (formula "23") (term "0,0,0,0,0"))
                     (rule "inEqSimp_sepPosMonomial1" (formula "23") (term "0,0,0"))
                     (rule "polySimp_mulLiterals" (formula "23") (term "1,0,0,0"))
                     (rule "polySimp_elimOne" (formula "23") (term "1,0,0,0"))
                     (rule "inEqSimp_notGeq" (formula "23") (term "1,0,0"))
                     (rule "mul_literals" (formula "23") (term "1,0,0,1,0,0"))
                     (rule "add_literals" (formula "23") (term "0,0,1,0,0"))
                     (rule "inEqSimp_sepPosMonomial0" (formula "23") (term "1,0,0"))
                     (rule "mul_literals" (formula "23") (term "1,1,0,0"))
                     (rule "nnf_notAnd" (formula "24") (term "0,0"))
                     (rule "inEqSimp_notGeq" (formula "24") (term "1,0,0"))
                     (rule "mul_literals" (formula "24") (term "1,0,0,1,0,0"))
                     (rule "add_literals" (formula "24") (term "0,0,1,0,0"))
                     (rule "inEqSimp_sepPosMonomial0" (formula "24") (term "1,0,0"))
                     (rule "mul_literals" (formula "24") (term "1,1,0,0"))
                     (rule "inEqSimp_notLeq" (formula "24") (term "0,0,0"))
                     (rule "polySimp_rightDist" (formula "24") (term "1,0,0,0,0,0"))
                     (rule "mul_literals" (formula "24") (term "0,1,0,0,0,0,0"))
                     (rule "polySimp_addAssoc" (formula "24") (term "0,0,0,0,0"))
                     (rule "add_literals" (formula "24") (term "0,0,0,0,0,0"))
                     (rule "add_zero_left" (formula "24") (term "0,0,0,0,0"))
                     (rule "inEqSimp_sepPosMonomial1" (formula "24") (term "0,0,0"))
                     (rule "polySimp_mulLiterals" (formula "24") (term "1,0,0,0"))
                     (rule "polySimp_elimOne" (formula "24") (term "1,0,0,0"))
                     (rule "nnf_notAnd" (formula "10") (term "0,0"))
                     (rule "inEqSimp_notLeq" (formula "10") (term "1,0,0"))
                     (rule "mul_literals" (formula "10") (term "1,0,0,1,0,0"))
                     (rule "add_literals" (formula "10") (term "0,0,1,0,0"))
                     (rule "inEqSimp_sepPosMonomial1" (formula "10") (term "1,0,0"))
                     (rule "mul_literals" (formula "10") (term "1,1,0,0"))
                     (rule "nnf_notAnd" (formula "29") (term "0,0"))
                     (rule "inEqSimp_notLeq" (formula "29") (term "1,0,0"))
                     (rule "mul_literals" (formula "29") (term "1,0,0,1,0,0"))
                     (rule "add_literals" (formula "29") (term "0,0,1,0,0"))
                     (rule "inEqSimp_sepPosMonomial1" (formula "29") (term "1,0,0"))
                     (rule "mul_literals" (formula "29") (term "1,1,0,0"))
                     (rule "nnf_notAnd" (formula "26") (term "0,0"))
                     (rule "inEqSimp_notLeq" (formula "26") (term "1,0,0"))
                     (rule "mul_literals" (formula "26") (term "1,0,0,1,0,0"))
                     (rule "add_literals" (formula "26") (term "0,0,1,0,0"))
                     (rule "inEqSimp_sepPosMonomial1" (formula "26") (term "1,0,0"))
                     (rule "mul_literals" (formula "26") (term "1,1,0,0"))
                     (rule "nnf_notAnd" (formula "11") (term "0,0"))
                     (rule "inEqSimp_notLeq" (formula "11") (term "1,0,0"))
                     (rule "mul_literals" (formula "11") (term "1,0,0,1,0,0"))
                     (rule "add_literals" (formula "11") (term "0,0,1,0,0"))
                     (rule "inEqSimp_sepPosMonomial1" (formula "11") (term "1,0,0"))
                     (rule "mul_literals" (formula "11") (term "1,1,0,0"))
                     (rule "nnf_notAnd" (formula "10") (term "0,0,0"))
                     (rule "inEqSimp_notLeq" (formula "10") (term "0,0,0,0"))
                     (rule "polySimp_rightDist" (formula "10") (term "1,0,0,0,0,0,0"))
                     (rule "mul_literals" (formula "10") (term "0,1,0,0,0,0,0,0"))
                     (rule "polySimp_addAssoc" (formula "10") (term "0,0,0,0,0,0"))
                     (rule "add_literals" (formula "10") (term "0,0,0,0,0,0,0"))
                     (rule "add_zero_left" (formula "10") (term "0,0,0,0,0,0"))
                     (rule "inEqSimp_sepPosMonomial1" (formula "10") (term "0,0,0,0"))
                     (rule "polySimp_mulLiterals" (formula "10") (term "1,0,0,0,0"))
                     (rule "polySimp_elimOne" (formula "10") (term "1,0,0,0,0"))
                     (rule "inEqSimp_notGeq" (formula "10") (term "1,0,0,0"))
                     (rule "mul_literals" (formula "10") (term "1,0,0,1,0,0,0"))
                     (rule "add_zero_right" (formula "10") (term "0,0,1,0,0,0"))
                     (rule "inEqSimp_sepPosMonomial0" (formula "10") (term "1,0,0,0"))
                     (rule "mul_literals" (formula "10") (term "1,1,0,0,0"))
                     (rule "nnf_notAnd" (formula "29") (term "0,0,0"))
                     (rule "inEqSimp_notGeq" (formula "29") (term "1,0,0,0"))
                     (rule "mul_literals" (formula "29") (term "1,0,0,1,0,0,0"))
                     (rule "add_zero_right" (formula "29") (term "0,0,1,0,0,0"))
                     (rule "inEqSimp_sepPosMonomial0" (formula "29") (term "1,0,0,0"))
                     (rule "mul_literals" (formula "29") (term "1,1,0,0,0"))
                     (rule "inEqSimp_notLeq" (formula "29") (term "0,0,0,0"))
                     (rule "polySimp_rightDist" (formula "29") (term "1,0,0,0,0,0,0"))
                     (rule "mul_literals" (formula "29") (term "0,1,0,0,0,0,0,0"))
                     (rule "polySimp_addAssoc" (formula "29") (term "0,0,0,0,0,0"))
                     (rule "add_literals" (formula "29") (term "0,0,0,0,0,0,0"))
                     (rule "add_zero_left" (formula "29") (term "0,0,0,0,0,0"))
                     (rule "inEqSimp_sepPosMonomial1" (formula "29") (term "0,0,0,0"))
                     (rule "polySimp_mulLiterals" (formula "29") (term "1,0,0,0,0"))
                     (rule "polySimp_elimOne" (formula "29") (term "1,0,0,0,0"))
                     (rule "nnf_notAnd" (formula "26") (term "0,0,0"))
                     (rule "inEqSimp_notLeq" (formula "26") (term "0,0,0,0"))
                     (rule "polySimp_rightDist" (formula "26") (term "1,0,0,0,0,0,0"))
                     (rule "mul_literals" (formula "26") (term "0,1,0,0,0,0,0,0"))
                     (rule "polySimp_addAssoc" (formula "26") (term "0,0,0,0,0,0"))
                     (rule "add_literals" (formula "26") (term "0,0,0,0,0,0,0"))
                     (rule "add_zero_left" (formula "26") (term "0,0,0,0,0,0"))
                     (rule "inEqSimp_sepPosMonomial1" (formula "26") (term "0,0,0,0"))
                     (rule "polySimp_mulLiterals" (formula "26") (term "1,0,0,0,0"))
                     (rule "polySimp_elimOne" (formula "26") (term "1,0,0,0,0"))
                     (rule "inEqSimp_notGeq" (formula "26") (term "1,0,0,0"))
                     (rule "times_zero_1" (formula "26") (term "1,0,0,1,0,0,0"))
                     (rule "add_literals" (formula "26") (term "0,0,1,0,0,0"))
                     (rule "inEqSimp_sepPosMonomial0" (formula "26") (term "1,0,0,0"))
                     (rule "mul_literals" (formula "26") (term "1,1,0,0,0"))
                     (rule "nnf_notAnd" (formula "11") (term "0,0,0"))
                     (rule "inEqSimp_notLeq" (formula "11") (term "0,0,0,0"))
                     (rule "polySimp_rightDist" (formula "11") (term "1,0,0,0,0,0,0"))
                     (rule "mul_literals" (formula "11") (term "0,1,0,0,0,0,0,0"))
                     (rule "polySimp_addAssoc" (formula "11") (term "0,0,0,0,0,0"))
                     (rule "add_literals" (formula "11") (term "0,0,0,0,0,0,0"))
                     (rule "add_zero_left" (formula "11") (term "0,0,0,0,0,0"))
                     (rule "inEqSimp_sepPosMonomial1" (formula "11") (term "0,0,0,0"))
                     (rule "polySimp_mulLiterals" (formula "11") (term "1,0,0,0,0"))
                     (rule "polySimp_elimOne" (formula "11") (term "1,0,0,0,0"))
                     (rule "inEqSimp_notGeq" (formula "11") (term "1,0,0,0"))
                     (rule "mul_literals" (formula "11") (term "1,0,0,1,0,0,0"))
                     (rule "add_zero_right" (formula "11") (term "0,0,1,0,0,0"))
                     (rule "inEqSimp_sepPosMonomial0" (formula "11") (term "1,0,0,0"))
                     (rule "mul_literals" (formula "11") (term "1,1,0,0,0"))
                     (rule "Class_invariant_axiom_for_java_util_ArrayList" (formula "41"))
                     (rule "closeTrue" (formula "41"))
                  )
                  (branch
                      (builtin "One Step Simplification" (formula "42"))
                     (rule "replaceKnownSelect_taclet20_9" (formula "42") (term "1"))
                     (rule "replaceKnownAuxiliaryConstant_taclet20_11" (formula "42") (term "1"))
                     (rule "inEqSimp_ltRight" (formula "33"))
                     (rule "polySimp_mulComm0" (formula "1") (term "0,0"))
                     (rule "polySimp_addComm0" (formula "1") (term "0"))
                     (rule "inEqSimp_ltToLeq" (formula "11") (term "0,0,0,0,0"))
                     (rule "polySimp_mulComm0" (formula "11") (term "1,0,0,0,0,0,0,0"))
                     (rule "inEqSimp_ltToLeq" (formula "7") (term "0,0,0,1,0"))
                     (rule "polySimp_mulComm0" (formula "7") (term "1,0,0,0,0,0,1,0"))
                     (rule "inEqSimp_ltToLeq" (formula "30") (term "0,0,0,0,0"))
                     (rule "polySimp_mulComm0" (formula "30") (term "1,0,0,0,0,0,0,0"))
                     (rule "inEqSimp_ltToLeq" (formula "27") (term "0,0,0,0,0"))
                     (rule "polySimp_mulComm0" (formula "27") (term "1,0,0,0,0,0,0,0"))
                     (rule "inEqSimp_ltToLeq" (formula "25") (term "0,0,0"))
                     (rule "polySimp_mulComm0" (formula "25") (term "1,0,0,0,0,0"))
                     (rule "inEqSimp_ltToLeq" (formula "7") (term "0,0,0"))
                     (rule "polySimp_mulComm0" (formula "7") (term "1,0,0,0,0,0"))
                     (rule "inEqSimp_ltToLeq" (formula "12") (term "0,0,0,0,0"))
                     (rule "polySimp_mulComm0" (formula "12") (term "1,0,0,0,0,0,0,0"))
                     (rule "inEqSimp_ltToLeq" (formula "8") (term "0,0,0"))
                     (rule "polySimp_mulComm0" (formula "8") (term "1,0,0,0,0,0"))
                     (rule "inEqSimp_ltToLeq" (formula "24") (term "0,0,0,1,0"))
                     (rule "polySimp_mulComm0" (formula "24") (term "1,0,0,0,0,0,1,0"))
                     (rule "inEqSimp_ltToLeq" (formula "24") (term "0,0,0"))
                     (rule "polySimp_mulComm0" (formula "24") (term "1,0,0,0,0,0"))
                     (rule "inEqSimp_sepNegMonomial1" (formula "1"))
                     (rule "polySimp_mulLiterals" (formula "1") (term "0"))
                     (rule "polySimp_elimOne" (formula "1") (term "0"))
                     (rule "inEqSimp_sepPosMonomial0" (formula "11") (term "0,0,0,0,0"))
                     (rule "polySimp_mulComm0" (formula "11") (term "1,0,0,0,0,0"))
                     (rule "polySimp_rightDist" (formula "11") (term "1,0,0,0,0,0"))
                     (rule "polySimp_mulLiterals" (formula "11") (term "1,1,0,0,0,0,0"))
                     (rule "mul_literals" (formula "11") (term "0,1,0,0,0,0,0"))
                     (rule "polySimp_elimOne" (formula "11") (term "1,1,0,0,0,0,0"))
                     (rule "inEqSimp_sepPosMonomial0" (formula "7") (term "0,0,0,1,0"))
                     (rule "polySimp_mulComm0" (formula "7") (term "1,0,0,0,1,0"))
                     (rule "polySimp_rightDist" (formula "7") (term "1,0,0,0,1,0"))
                     (rule "polySimp_mulLiterals" (formula "7") (term "1,1,0,0,0,1,0"))
                     (rule "mul_literals" (formula "7") (term "0,1,0,0,0,1,0"))
                     (rule "polySimp_elimOne" (formula "7") (term "1,1,0,0,0,1,0"))
                     (rule "inEqSimp_sepPosMonomial0" (formula "30") (term "0,0,0,0,0"))
                     (rule "polySimp_mulComm0" (formula "30") (term "1,0,0,0,0,0"))
                     (rule "polySimp_rightDist" (formula "30") (term "1,0,0,0,0,0"))
                     (rule "mul_literals" (formula "30") (term "0,1,0,0,0,0,0"))
                     (rule "polySimp_mulLiterals" (formula "30") (term "1,1,0,0,0,0,0"))
                     (rule "polySimp_elimOne" (formula "30") (term "1,1,0,0,0,0,0"))
                     (rule "inEqSimp_sepPosMonomial0" (formula "27") (term "0,0,0,0,0"))
                     (rule "polySimp_mulComm0" (formula "27") (term "1,0,0,0,0,0"))
                     (rule "polySimp_rightDist" (formula "27") (term "1,0,0,0,0,0"))
                     (rule "mul_literals" (formula "27") (term "0,1,0,0,0,0,0"))
                     (rule "polySimp_mulLiterals" (formula "27") (term "1,1,0,0,0,0,0"))
                     (rule "polySimp_elimOne" (formula "27") (term "1,1,0,0,0,0,0"))
                     (rule "inEqSimp_sepPosMonomial0" (formula "25") (term "0,0,0"))
                     (rule "polySimp_mulComm0" (formula "25") (term "1,0,0,0"))
                     (rule "polySimp_rightDist" (formula "25") (term "1,0,0,0"))
                     (rule "polySimp_mulLiterals" (formula "25") (term "1,1,0,0,0"))
                     (rule "mul_literals" (formula "25") (term "0,1,0,0,0"))
                     (rule "polySimp_elimOne" (formula "25") (term "1,1,0,0,0"))
                     (rule "inEqSimp_sepPosMonomial0" (formula "7") (term "0,0,0"))
                     (rule "polySimp_mulComm0" (formula "7") (term "1,0,0,0"))
                     (rule "polySimp_rightDist" (formula "7") (term "1,0,0,0"))
                     (rule "mul_literals" (formula "7") (term "0,1,0,0,0"))
                     (rule "polySimp_mulLiterals" (formula "7") (term "1,1,0,0,0"))
                     (rule "polySimp_elimOne" (formula "7") (term "1,1,0,0,0"))
                     (rule "inEqSimp_sepPosMonomial0" (formula "12") (term "0,0,0,0,0"))
                     (rule "polySimp_mulComm0" (formula "12") (term "1,0,0,0,0,0"))
                     (rule "polySimp_rightDist" (formula "12") (term "1,0,0,0,0,0"))
                     (rule "polySimp_mulLiterals" (formula "12") (term "1,1,0,0,0,0,0"))
                     (rule "mul_literals" (formula "12") (term "0,1,0,0,0,0,0"))
                     (rule "polySimp_elimOne" (formula "12") (term "1,1,0,0,0,0,0"))
                     (rule "inEqSimp_sepPosMonomial0" (formula "8") (term "0,0,0"))
                     (rule "polySimp_mulComm0" (formula "8") (term "1,0,0,0"))
                     (rule "polySimp_rightDist" (formula "8") (term "1,0,0,0"))
                     (rule "polySimp_mulLiterals" (formula "8") (term "1,1,0,0,0"))
                     (rule "mul_literals" (formula "8") (term "0,1,0,0,0"))
                     (rule "polySimp_elimOne" (formula "8") (term "1,1,0,0,0"))
                     (rule "inEqSimp_sepPosMonomial0" (formula "24") (term "0,0,0,1,0"))
                     (rule "polySimp_mulComm0" (formula "24") (term "1,0,0,0,1,0"))
                     (rule "polySimp_rightDist" (formula "24") (term "1,0,0,0,1,0"))
                     (rule "polySimp_mulLiterals" (formula "24") (term "1,1,0,0,0,1,0"))
                     (rule "mul_literals" (formula "24") (term "0,1,0,0,0,1,0"))
                     (rule "polySimp_elimOne" (formula "24") (term "1,1,0,0,0,1,0"))
                     (rule "inEqSimp_sepPosMonomial0" (formula "24") (term "0,0,0"))
                     (rule "polySimp_mulComm0" (formula "24") (term "1,0,0,0"))
                     (rule "polySimp_rightDist" (formula "24") (term "1,0,0,0"))
                     (rule "mul_literals" (formula "24") (term "0,1,0,0,0"))
                     (rule "polySimp_mulLiterals" (formula "24") (term "1,1,0,0,0"))
                     (rule "polySimp_elimOne" (formula "24") (term "1,1,0,0,0"))
                     (rule "inEqSimp_antiSymm" (formula "32") (ifseqformula "1"))
                     (rule "applyEq" (formula "24") (term "1,1,0,0,0") (ifseqformula "32"))
                     (rule "applyEq" (formula "25") (term "1,1,0,0,0") (ifseqformula "32"))
                     (rule "applyEq" (formula "33") (term "0") (ifseqformula "32"))
                     (rule "inEqSimp_homoInEq1" (formula "33"))
                     (rule "polySimp_pullOutFactor1" (formula "33") (term "0"))
                     (rule "add_literals" (formula "33") (term "1,0"))
                     (rule "times_zero_1" (formula "33") (term "0"))
                     (rule "leq_literals" (formula "33"))
                     (rule "true_left" (formula "33"))
                     (rule "applyEq" (formula "1") (term "0") (ifseqformula "32"))
                     (rule "inEqSimp_homoInEq0" (formula "1"))
                     (rule "polySimp_pullOutFactor1" (formula "1") (term "0"))
                     (rule "add_literals" (formula "1") (term "1,0"))
                     (rule "times_zero_1" (formula "1") (term "0"))
                     (rule "qeq_literals" (formula "1"))
                     (rule "true_left" (formula "1"))
                     (rule "inEqSimp_and_subsumption3" (formula "10") (term "0,0,0"))
                     (rule "leq_literals" (formula "10") (term "0,1,0,0,0,0"))
                      (builtin "One Step Simplification" (formula "10"))
                     (rule "inEqSimp_and_subsumption3" (formula "29") (term "0,0,0"))
                     (rule "leq_literals" (formula "29") (term "0,1,0,0,0,0"))
                      (builtin "One Step Simplification" (formula "29"))
                     (rule "inEqSimp_and_subsumption3" (formula "26") (term "0,0,0"))
                     (rule "leq_literals" (formula "26") (term "0,1,0,0,0,0"))
                      (builtin "One Step Simplification" (formula "26"))
                     (rule "inEqSimp_and_subsumption3" (formula "11") (term "0,0,0"))
                     (rule "leq_literals" (formula "11") (term "0,1,0,0,0,0"))
                      (builtin "One Step Simplification" (formula "11"))
                     (rule "nnf_imp2or" (formula "6") (term "0"))
                     (rule "nnf_imp2or" (formula "7") (term "0"))
                     (rule "nnf_imp2or" (formula "23") (term "0"))
                     (rule "nnf_imp2or" (formula "24") (term "0"))
                     (rule "nnf_imp2or" (formula "10") (term "0"))
                     (rule "nnf_imp2or" (formula "29") (term "0"))
                     (rule "nnf_imp2or" (formula "26") (term "0"))
                     (rule "nnf_imp2or" (formula "11") (term "0"))
                     (rule "nnf_notAnd" (formula "6") (term "0,0"))
                     (rule "inEqSimp_notLeq" (formula "6") (term "0,0,0"))
                     (rule "polySimp_rightDist" (formula "6") (term "1,0,0,0,0,0"))
                     (rule "mul_literals" (formula "6") (term "0,1,0,0,0,0,0"))
                     (rule "polySimp_addAssoc" (formula "6") (term "0,0,0,0,0"))
                     (rule "add_literals" (formula "6") (term "0,0,0,0,0,0"))
                     (rule "add_zero_left" (formula "6") (term "0,0,0,0,0"))
                     (rule "inEqSimp_sepPosMonomial1" (formula "6") (term "0,0,0"))
                     (rule "polySimp_mulLiterals" (formula "6") (term "1,0,0,0"))
                     (rule "polySimp_elimOne" (formula "6") (term "1,0,0,0"))
                     (rule "inEqSimp_notGeq" (formula "6") (term "1,0,0"))
                     (rule "times_zero_1" (formula "6") (term "1,0,0,1,0,0"))
                     (rule "add_literals" (formula "6") (term "0,0,1,0,0"))
                     (rule "inEqSimp_sepPosMonomial0" (formula "6") (term "1,0,0"))
                     (rule "mul_literals" (formula "6") (term "1,1,0,0"))
                     (rule "nnf_notAnd" (formula "7") (term "0,0"))
                     (rule "inEqSimp_notGeq" (formula "7") (term "1,0,0"))
                     (rule "times_zero_1" (formula "7") (term "1,0,0,1,0,0"))
                     (rule "add_literals" (formula "7") (term "0,0,1,0,0"))
                     (rule "inEqSimp_sepPosMonomial0" (formula "7") (term "1,0,0"))
                     (rule "mul_literals" (formula "7") (term "1,1,0,0"))
                     (rule "inEqSimp_notLeq" (formula "7") (term "0,0,0"))
                     (rule "polySimp_rightDist" (formula "7") (term "1,0,0,0,0,0"))
                     (rule "mul_literals" (formula "7") (term "0,1,0,0,0,0,0"))
                     (rule "polySimp_addAssoc" (formula "7") (term "0,0,0,0,0"))
                     (rule "add_literals" (formula "7") (term "0,0,0,0,0,0"))
                     (rule "add_zero_left" (formula "7") (term "0,0,0,0,0"))
                     (rule "inEqSimp_sepPosMonomial1" (formula "7") (term "0,0,0"))
                     (rule "polySimp_mulLiterals" (formula "7") (term "1,0,0,0"))
                     (rule "polySimp_elimOne" (formula "7") (term "1,0,0,0"))
                     (rule "nnf_notAnd" (formula "23") (term "0,0"))
                     (rule "inEqSimp_notLeq" (formula "23") (term "0,0,0"))
                     (rule "polySimp_rightDist" (formula "23") (term "1,0,0,0,0,0"))
                     (rule "mul_literals" (formula "23") (term "0,1,0,0,0,0,0"))
                     (rule "polySimp_addAssoc" (formula "23") (term "0,0,0,0,0"))
                     (rule "add_literals" (formula "23") (term "0,0,0,0,0,0"))
                     (rule "add_zero_left" (formula "23") (term "0,0,0,0,0"))
                     (rule "inEqSimp_sepPosMonomial1" (formula "23") (term "0,0,0"))
                     (rule "polySimp_mulLiterals" (formula "23") (term "1,0,0,0"))
                     (rule "polySimp_elimOne" (formula "23") (term "1,0,0,0"))
                     (rule "inEqSimp_notGeq" (formula "23") (term "1,0,0"))
                     (rule "mul_literals" (formula "23") (term "1,0,0,1,0,0"))
                     (rule "add_literals" (formula "23") (term "0,0,1,0,0"))
                     (rule "inEqSimp_sepPosMonomial0" (formula "23") (term "1,0,0"))
                     (rule "mul_literals" (formula "23") (term "1,1,0,0"))
                     (rule "nnf_notAnd" (formula "24") (term "0,0"))
                     (rule "inEqSimp_notGeq" (formula "24") (term "1,0,0"))
                     (rule "mul_literals" (formula "24") (term "1,0,0,1,0,0"))
                     (rule "add_literals" (formula "24") (term "0,0,1,0,0"))
                     (rule "inEqSimp_sepPosMonomial0" (formula "24") (term "1,0,0"))
                     (rule "mul_literals" (formula "24") (term "1,1,0,0"))
                     (rule "inEqSimp_notLeq" (formula "24") (term "0,0,0"))
                     (rule "polySimp_rightDist" (formula "24") (term "1,0,0,0,0,0"))
                     (rule "mul_literals" (formula "24") (term "0,1,0,0,0,0,0"))
                     (rule "polySimp_addAssoc" (formula "24") (term "0,0,0,0,0"))
                     (rule "add_literals" (formula "24") (term "0,0,0,0,0,0"))
                     (rule "add_zero_left" (formula "24") (term "0,0,0,0,0"))
                     (rule "inEqSimp_sepPosMonomial1" (formula "24") (term "0,0,0"))
                     (rule "polySimp_mulLiterals" (formula "24") (term "1,0,0,0"))
                     (rule "polySimp_elimOne" (formula "24") (term "1,0,0,0"))
                     (rule "nnf_notAnd" (formula "10") (term "0,0"))
                     (rule "inEqSimp_notLeq" (formula "10") (term "1,0,0"))
                     (rule "mul_literals" (formula "10") (term "1,0,0,1,0,0"))
                     (rule "add_literals" (formula "10") (term "0,0,1,0,0"))
                     (rule "inEqSimp_sepPosMonomial1" (formula "10") (term "1,0,0"))
                     (rule "mul_literals" (formula "10") (term "1,1,0,0"))
                     (rule "nnf_notAnd" (formula "29") (term "0,0"))
                     (rule "inEqSimp_notLeq" (formula "29") (term "1,0,0"))
                     (rule "mul_literals" (formula "29") (term "1,0,0,1,0,0"))
                     (rule "add_literals" (formula "29") (term "0,0,1,0,0"))
                     (rule "inEqSimp_sepPosMonomial1" (formula "29") (term "1,0,0"))
                     (rule "mul_literals" (formula "29") (term "1,1,0,0"))
                     (rule "nnf_notAnd" (formula "26") (term "0,0"))
                     (rule "inEqSimp_notLeq" (formula "26") (term "1,0,0"))
                     (rule "mul_literals" (formula "26") (term "1,0,0,1,0,0"))
                     (rule "add_literals" (formula "26") (term "0,0,1,0,0"))
                     (rule "inEqSimp_sepPosMonomial1" (formula "26") (term "1,0,0"))
                     (rule "mul_literals" (formula "26") (term "1,1,0,0"))
                     (rule "nnf_notAnd" (formula "11") (term "0,0"))
                     (rule "inEqSimp_notLeq" (formula "11") (term "1,0,0"))
                     (rule "mul_literals" (formula "11") (term "1,0,0,1,0,0"))
                     (rule "add_literals" (formula "11") (term "0,0,1,0,0"))
                     (rule "inEqSimp_sepPosMonomial1" (formula "11") (term "1,0,0"))
                     (rule "mul_literals" (formula "11") (term "1,1,0,0"))
                     (rule "nnf_notAnd" (formula "10") (term "0,0,0"))
                     (rule "inEqSimp_notLeq" (formula "10") (term "0,0,0,0"))
                     (rule "polySimp_rightDist" (formula "10") (term "1,0,0,0,0,0,0"))
                     (rule "mul_literals" (formula "10") (term "0,1,0,0,0,0,0,0"))
                     (rule "polySimp_addAssoc" (formula "10") (term "0,0,0,0,0,0"))
                     (rule "add_literals" (formula "10") (term "0,0,0,0,0,0,0"))
                     (rule "add_zero_left" (formula "10") (term "0,0,0,0,0,0"))
                     (rule "inEqSimp_sepPosMonomial1" (formula "10") (term "0,0,0,0"))
                     (rule "polySimp_mulLiterals" (formula "10") (term "1,0,0,0,0"))
                     (rule "polySimp_elimOne" (formula "10") (term "1,0,0,0,0"))
                     (rule "inEqSimp_notGeq" (formula "10") (term "1,0,0,0"))
                     (rule "mul_literals" (formula "10") (term "1,0,0,1,0,0,0"))
                     (rule "add_zero_right" (formula "10") (term "0,0,1,0,0,0"))
                     (rule "inEqSimp_sepPosMonomial0" (formula "10") (term "1,0,0,0"))
                     (rule "mul_literals" (formula "10") (term "1,1,0,0,0"))
                     (rule "nnf_notAnd" (formula "29") (term "0,0,0"))
                     (rule "inEqSimp_notGeq" (formula "29") (term "1,0,0,0"))
                     (rule "mul_literals" (formula "29") (term "1,0,0,1,0,0,0"))
                     (rule "add_zero_right" (formula "29") (term "0,0,1,0,0,0"))
                     (rule "inEqSimp_sepPosMonomial0" (formula "29") (term "1,0,0,0"))
                     (rule "mul_literals" (formula "29") (term "1,1,0,0,0"))
                     (rule "inEqSimp_notLeq" (formula "29") (term "0,0,0,0"))
                     (rule "polySimp_rightDist" (formula "29") (term "1,0,0,0,0,0,0"))
                     (rule "mul_literals" (formula "29") (term "0,1,0,0,0,0,0,0"))
                     (rule "polySimp_addAssoc" (formula "29") (term "0,0,0,0,0,0"))
                     (rule "add_literals" (formula "29") (term "0,0,0,0,0,0,0"))
                     (rule "add_zero_left" (formula "29") (term "0,0,0,0,0,0"))
                     (rule "inEqSimp_sepPosMonomial1" (formula "29") (term "0,0,0,0"))
                     (rule "polySimp_mulLiterals" (formula "29") (term "1,0,0,0,0"))
                     (rule "polySimp_elimOne" (formula "29") (term "1,0,0,0,0"))
                     (rule "nnf_notAnd" (formula "26") (term "0,0,0"))
                     (rule "inEqSimp_notLeq" (formula "26") (term "0,0,0,0"))
                     (rule "polySimp_rightDist" (formula "26") (term "1,0,0,0,0,0,0"))
                     (rule "mul_literals" (formula "26") (term "0,1,0,0,0,0,0,0"))
                     (rule "polySimp_addAssoc" (formula "26") (term "0,0,0,0,0,0"))
                     (rule "add_literals" (formula "26") (term "0,0,0,0,0,0,0"))
                     (rule "add_zero_left" (formula "26") (term "0,0,0,0,0,0"))
                     (rule "inEqSimp_sepPosMonomial1" (formula "26") (term "0,0,0,0"))
                     (rule "polySimp_mulLiterals" (formula "26") (term "1,0,0,0,0"))
                     (rule "polySimp_elimOne" (formula "26") (term "1,0,0,0,0"))
                     (rule "inEqSimp_notGeq" (formula "26") (term "1,0,0,0"))
                     (rule "times_zero_1" (formula "26") (term "1,0,0,1,0,0,0"))
                     (rule "add_literals" (formula "26") (term "0,0,1,0,0,0"))
                     (rule "inEqSimp_sepPosMonomial0" (formula "26") (term "1,0,0,0"))
                     (rule "mul_literals" (formula "26") (term "1,1,0,0,0"))
                     (rule "nnf_notAnd" (formula "11") (term "0,0,0"))
                     (rule "inEqSimp_notLeq" (formula "11") (term "0,0,0,0"))
                     (rule "polySimp_rightDist" (formula "11") (term "1,0,0,0,0,0,0"))
                     (rule "mul_literals" (formula "11") (term "0,1,0,0,0,0,0,0"))
                     (rule "polySimp_addAssoc" (formula "11") (term "0,0,0,0,0,0"))
                     (rule "add_literals" (formula "11") (term "0,0,0,0,0,0,0"))
                     (rule "add_zero_left" (formula "11") (term "0,0,0,0,0,0"))
                     (rule "inEqSimp_sepPosMonomial1" (formula "11") (term "0,0,0,0"))
                     (rule "polySimp_mulLiterals" (formula "11") (term "1,0,0,0,0"))
                     (rule "polySimp_elimOne" (formula "11") (term "1,0,0,0,0"))
                     (rule "inEqSimp_notGeq" (formula "11") (term "1,0,0,0"))
                     (rule "mul_literals" (formula "11") (term "1,0,0,1,0,0,0"))
                     (rule "add_zero_right" (formula "11") (term "0,0,1,0,0,0"))
                     (rule "inEqSimp_sepPosMonomial0" (formula "11") (term "1,0,0,0"))
                     (rule "mul_literals" (formula "11") (term "1,1,0,0,0"))
                     (rule "Class_invariant_axiom_for_java_util_ArrayList" (formula "41"))
                     (rule "closeTrue" (formula "41"))
                  )
               )
            )
            (branch
                (builtin "One Step Simplification" (formula "42"))
               (rule "closeTrue" (formula "42"))
            )
         )
         (branch
             (builtin "One Step Simplification" (formula "42"))
            (rule "allRight" (formula "42") (inst "sk=f_0"))
            (rule "allRight" (formula "42") (inst "sk=o_0"))
            (rule "orRight" (formula "42"))
            (rule "orRight" (formula "42"))
            (rule "eqSymm" (formula "44"))
            (rule "inEqSimp_ltRight" (formula "33"))
            (rule "polySimp_mulComm0" (formula "1") (term "0,0"))
            (rule "polySimp_addComm0" (formula "1") (term "0"))
            (rule "inEqSimp_ltToLeq" (formula "8") (term "0,0,0"))
            (rule "polySimp_mulComm0" (formula "8") (term "1,0,0,0,0,0"))
            (rule "inEqSimp_ltToLeq" (formula "7") (term "0,0,0,1,0"))
            (rule "polySimp_mulComm0" (formula "7") (term "1,0,0,0,0,0,1,0"))
            (rule "inEqSimp_ltToLeq" (formula "12") (term "0,0,0,0,0"))
            (rule "polySimp_mulComm0" (formula "12") (term "1,0,0,0,0,0,0,0"))
            (rule "inEqSimp_ltToLeq" (formula "27") (term "0,0,0,0,0"))
            (rule "polySimp_mulComm0" (formula "27") (term "1,0,0,0,0,0,0,0"))
            (rule "inEqSimp_ltToLeq" (formula "24") (term "0,0,0,1,0"))
            (rule "polySimp_mulComm0" (formula "24") (term "1,0,0,0,0,0,1,0"))
            (rule "inEqSimp_ltToLeq" (formula "30") (term "0,0,0,0,0"))
            (rule "polySimp_mulComm0" (formula "30") (term "1,0,0,0,0,0,0,0"))
            (rule "inEqSimp_ltToLeq" (formula "11") (term "0,0,0,0,0"))
            (rule "polySimp_mulComm0" (formula "11") (term "1,0,0,0,0,0,0,0"))
            (rule "inEqSimp_ltToLeq" (formula "24") (term "0,0,0"))
            (rule "polySimp_mulComm0" (formula "24") (term "1,0,0,0,0,0"))
            (rule "inEqSimp_ltToLeq" (formula "25") (term "0,0,0"))
            (rule "polySimp_mulComm0" (formula "25") (term "1,0,0,0,0,0"))
            (rule "inEqSimp_ltToLeq" (formula "7") (term "0,0,0"))
            (rule "polySimp_mulComm0" (formula "7") (term "1,0,0,0,0,0"))
            (rule "inEqSimp_sepNegMonomial1" (formula "1"))
            (rule "polySimp_mulLiterals" (formula "1") (term "0"))
            (rule "polySimp_elimOne" (formula "1") (term "0"))
            (rule "inEqSimp_sepPosMonomial0" (formula "8") (term "0,0,0"))
            (rule "polySimp_mulComm0" (formula "8") (term "1,0,0,0"))
            (rule "polySimp_rightDist" (formula "8") (term "1,0,0,0"))
            (rule "mul_literals" (formula "8") (term "0,1,0,0,0"))
            (rule "polySimp_mulLiterals" (formula "8") (term "1,1,0,0,0"))
            (rule "polySimp_elimOne" (formula "8") (term "1,1,0,0,0"))
            (rule "inEqSimp_sepPosMonomial0" (formula "7") (term "0,0,0,1,0"))
            (rule "polySimp_mulComm0" (formula "7") (term "1,0,0,0,1,0"))
            (rule "polySimp_rightDist" (formula "7") (term "1,0,0,0,1,0"))
            (rule "polySimp_mulLiterals" (formula "7") (term "1,1,0,0,0,1,0"))
            (rule "mul_literals" (formula "7") (term "0,1,0,0,0,1,0"))
            (rule "polySimp_elimOne" (formula "7") (term "1,1,0,0,0,1,0"))
            (rule "inEqSimp_sepPosMonomial0" (formula "12") (term "0,0,0,0,0"))
            (rule "polySimp_mulComm0" (formula "12") (term "1,0,0,0,0,0"))
            (rule "polySimp_rightDist" (formula "12") (term "1,0,0,0,0,0"))
            (rule "polySimp_mulLiterals" (formula "12") (term "1,1,0,0,0,0,0"))
            (rule "mul_literals" (formula "12") (term "0,1,0,0,0,0,0"))
            (rule "polySimp_elimOne" (formula "12") (term "1,1,0,0,0,0,0"))
            (rule "inEqSimp_sepPosMonomial0" (formula "27") (term "0,0,0,0,0"))
            (rule "polySimp_mulComm0" (formula "27") (term "1,0,0,0,0,0"))
            (rule "polySimp_rightDist" (formula "27") (term "1,0,0,0,0,0"))
            (rule "mul_literals" (formula "27") (term "0,1,0,0,0,0,0"))
            (rule "polySimp_mulLiterals" (formula "27") (term "1,1,0,0,0,0,0"))
            (rule "polySimp_elimOne" (formula "27") (term "1,1,0,0,0,0,0"))
            (rule "inEqSimp_sepPosMonomial0" (formula "24") (term "0,0,0,1,0"))
            (rule "polySimp_mulComm0" (formula "24") (term "1,0,0,0,1,0"))
            (rule "polySimp_rightDist" (formula "24") (term "1,0,0,0,1,0"))
            (rule "mul_literals" (formula "24") (term "0,1,0,0,0,1,0"))
            (rule "polySimp_mulLiterals" (formula "24") (term "1,1,0,0,0,1,0"))
            (rule "polySimp_elimOne" (formula "24") (term "1,1,0,0,0,1,0"))
            (rule "inEqSimp_sepPosMonomial0" (formula "30") (term "0,0,0,0,0"))
            (rule "polySimp_mulComm0" (formula "30") (term "1,0,0,0,0,0"))
            (rule "polySimp_rightDist" (formula "30") (term "1,0,0,0,0,0"))
            (rule "mul_literals" (formula "30") (term "0,1,0,0,0,0,0"))
            (rule "polySimp_mulLiterals" (formula "30") (term "1,1,0,0,0,0,0"))
            (rule "polySimp_elimOne" (formula "30") (term "1,1,0,0,0,0,0"))
            (rule "inEqSimp_sepPosMonomial0" (formula "11") (term "0,0,0,0,0"))
            (rule "polySimp_mulComm0" (formula "11") (term "1,0,0,0,0,0"))
            (rule "polySimp_rightDist" (formula "11") (term "1,0,0,0,0,0"))
            (rule "mul_literals" (formula "11") (term "0,1,0,0,0,0,0"))
            (rule "polySimp_mulLiterals" (formula "11") (term "1,1,0,0,0,0,0"))
            (rule "polySimp_elimOne" (formula "11") (term "1,1,0,0,0,0,0"))
            (rule "inEqSimp_sepPosMonomial0" (formula "24") (term "0,0,0"))
            (rule "polySimp_mulComm0" (formula "24") (term "1,0,0,0"))
            (rule "polySimp_rightDist" (formula "24") (term "1,0,0,0"))
            (rule "mul_literals" (formula "24") (term "0,1,0,0,0"))
            (rule "polySimp_mulLiterals" (formula "24") (term "1,1,0,0,0"))
            (rule "polySimp_elimOne" (formula "24") (term "1,1,0,0,0"))
            (rule "inEqSimp_sepPosMonomial0" (formula "25") (term "0,0,0"))
            (rule "polySimp_mulComm0" (formula "25") (term "1,0,0,0"))
            (rule "polySimp_rightDist" (formula "25") (term "1,0,0,0"))
            (rule "mul_literals" (formula "25") (term "0,1,0,0,0"))
            (rule "polySimp_mulLiterals" (formula "25") (term "1,1,0,0,0"))
            (rule "polySimp_elimOne" (formula "25") (term "1,1,0,0,0"))
            (rule "inEqSimp_sepPosMonomial0" (formula "7") (term "0,0,0"))
            (rule "polySimp_mulComm0" (formula "7") (term "1,0,0,0"))
            (rule "polySimp_rightDist" (formula "7") (term "1,0,0,0"))
            (rule "polySimp_mulLiterals" (formula "7") (term "1,1,0,0,0"))
            (rule "mul_literals" (formula "7") (term "0,1,0,0,0"))
            (rule "polySimp_elimOne" (formula "7") (term "1,1,0,0,0"))
            (rule "pullOutSelect" (formula "44") (term "0") (inst "selectSK=f_0_0"))
            (rule "simplifySelectOfAnon" (formula "1"))
             (builtin "One Step Simplification" (formula "1"))
            (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,1,1,0,0") (ifseqformula "15"))
            (rule "eqSymm" (formula "45"))
            (rule "elementOfUnion" (formula "1") (term "0,0,0,0"))
            (rule "elementOfSingleton" (formula "1") (term "0,0,0,0,0"))
            (rule "replace_known_right" (formula "1") (term "0,0,0,0,0") (ifseqformula "43"))
             (builtin "One Step Simplification" (formula "1"))
            (rule "elementOfSingleton" (formula "1") (term "0,0,0,0"))
            (rule "inEqSimp_antiSymm" (formula "33") (ifseqformula "2"))
            (rule "applyEq" (formula "34") (term "0") (ifseqformula "33"))
            (rule "inEqSimp_homoInEq1" (formula "34"))
            (rule "polySimp_pullOutFactor1" (formula "34") (term "0"))
            (rule "add_literals" (formula "34") (term "1,0"))
            (rule "times_zero_1" (formula "34") (term "0"))
            (rule "leq_literals" (formula "34"))
            (rule "true_left" (formula "34"))
            (rule "applyEq" (formula "25") (term "1,1,0,0,0") (ifseqformula "33"))
            (rule "applyEq" (formula "26") (term "1,1,0,0,0") (ifseqformula "33"))
            (rule "applyEq" (formula "2") (term "0") (ifseqformula "33"))
            (rule "inEqSimp_homoInEq0" (formula "2"))
            (rule "polySimp_pullOutFactor1" (formula "2") (term "0"))
            (rule "add_literals" (formula "2") (term "1,0"))
            (rule "times_zero_1" (formula "2") (term "0"))
            (rule "qeq_literals" (formula "2"))
            (rule "true_left" (formula "2"))
            (rule "pullOutSelect" (formula "1") (term "2,0") (inst "selectSK=f_0_1"))
            (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "15"))
             (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "44")))
            (rule "applyEqReverse" (formula "2") (term "2,0") (ifseqformula "1"))
            (rule "hideAuxiliaryEq" (formula "1"))
            (rule "inEqSimp_and_subsumption3" (formula "12") (term "0,0,0"))
            (rule "leq_literals" (formula "12") (term "0,1,0,0,0,0"))
             (builtin "One Step Simplification" (formula "12"))
            (rule "inEqSimp_and_subsumption3" (formula "27") (term "0,0,0"))
            (rule "leq_literals" (formula "27") (term "0,1,0,0,0,0"))
             (builtin "One Step Simplification" (formula "27"))
            (rule "inEqSimp_and_subsumption3" (formula "30") (term "0,0,0"))
            (rule "leq_literals" (formula "30") (term "0,1,0,0,0,0"))
             (builtin "One Step Simplification" (formula "30"))
            (rule "inEqSimp_and_subsumption3" (formula "11") (term "0,0,0"))
            (rule "leq_literals" (formula "11") (term "0,1,0,0,0,0"))
             (builtin "One Step Simplification" (formula "11"))
            (rule "nnf_imp2or" (formula "8") (term "0"))
            (rule "nnf_imp2or" (formula "7") (term "0"))
            (rule "nnf_imp2or" (formula "24") (term "0"))
            (rule "nnf_imp2or" (formula "25") (term "0"))
            (rule "nnf_imp2or" (formula "12") (term "0"))
            (rule "nnf_imp2or" (formula "27") (term "0"))
            (rule "nnf_imp2or" (formula "30") (term "0"))
            (rule "nnf_imp2or" (formula "11") (term "0"))
            (rule "nnf_notAnd" (formula "8") (term "0,0"))
            (rule "inEqSimp_notLeq" (formula "8") (term "0,0,0"))
            (rule "polySimp_rightDist" (formula "8") (term "1,0,0,0,0,0"))
            (rule "mul_literals" (formula "8") (term "0,1,0,0,0,0,0"))
            (rule "polySimp_addAssoc" (formula "8") (term "0,0,0,0,0"))
            (rule "add_literals" (formula "8") (term "0,0,0,0,0,0"))
            (rule "add_zero_left" (formula "8") (term "0,0,0,0,0"))
            (rule "inEqSimp_sepPosMonomial1" (formula "8") (term "0,0,0"))
            (rule "polySimp_mulLiterals" (formula "8") (term "1,0,0,0"))
            (rule "polySimp_elimOne" (formula "8") (term "1,0,0,0"))
            (rule "inEqSimp_notGeq" (formula "8") (term "1,0,0"))
            (rule "mul_literals" (formula "8") (term "1,0,0,1,0,0"))
            (rule "add_zero_right" (formula "8") (term "0,0,1,0,0"))
            (rule "inEqSimp_sepPosMonomial0" (formula "8") (term "1,0,0"))
            (rule "mul_literals" (formula "8") (term "1,1,0,0"))
            (rule "nnf_notAnd" (formula "7") (term "0,0"))
            (rule "inEqSimp_notGeq" (formula "7") (term "1,0,0"))
            (rule "times_zero_1" (formula "7") (term "1,0,0,1,0,0"))
            (rule "add_zero_right" (formula "7") (term "0,0,1,0,0"))
            (rule "inEqSimp_sepPosMonomial0" (formula "7") (term "1,0,0"))
            (rule "mul_literals" (formula "7") (term "1,1,0,0"))
            (rule "inEqSimp_notLeq" (formula "7") (term "0,0,0"))
            (rule "polySimp_rightDist" (formula "7") (term "1,0,0,0,0,0"))
            (rule "mul_literals" (formula "7") (term "0,1,0,0,0,0,0"))
            (rule "polySimp_addAssoc" (formula "7") (term "0,0,0,0,0"))
            (rule "add_literals" (formula "7") (term "0,0,0,0,0,0"))
            (rule "add_zero_left" (formula "7") (term "0,0,0,0,0"))
            (rule "inEqSimp_sepPosMonomial1" (formula "7") (term "0,0,0"))
            (rule "polySimp_mulLiterals" (formula "7") (term "1,0,0,0"))
            (rule "polySimp_elimOne" (formula "7") (term "1,0,0,0"))
            (rule "nnf_notAnd" (formula "24") (term "0,0"))
            (rule "inEqSimp_notGeq" (formula "24") (term "1,0,0"))
            (rule "mul_literals" (formula "24") (term "1,0,0,1,0,0"))
            (rule "add_zero_right" (formula "24") (term "0,0,1,0,0"))
            (rule "inEqSimp_sepPosMonomial0" (formula "24") (term "1,0,0"))
            (rule "mul_literals" (formula "24") (term "1,1,0,0"))
            (rule "inEqSimp_notLeq" (formula "24") (term "0,0,0"))
            (rule "polySimp_rightDist" (formula "24") (term "1,0,0,0,0,0"))
            (rule "mul_literals" (formula "24") (term "0,1,0,0,0,0,0"))
            (rule "polySimp_addAssoc" (formula "24") (term "0,0,0,0,0"))
            (rule "add_literals" (formula "24") (term "0,0,0,0,0,0"))
            (rule "add_zero_left" (formula "24") (term "0,0,0,0,0"))
            (rule "inEqSimp_sepPosMonomial1" (formula "24") (term "0,0,0"))
            (rule "polySimp_mulLiterals" (formula "24") (term "1,0,0,0"))
            (rule "polySimp_elimOne" (formula "24") (term "1,0,0,0"))
            (rule "nnf_notAnd" (formula "25") (term "0,0"))
            (rule "inEqSimp_notGeq" (formula "25") (term "1,0,0"))
            (rule "mul_literals" (formula "25") (term "1,0,0,1,0,0"))
            (rule "add_zero_right" (formula "25") (term "0,0,1,0,0"))
            (rule "inEqSimp_sepPosMonomial0" (formula "25") (term "1,0,0"))
            (rule "mul_literals" (formula "25") (term "1,1,0,0"))
            (rule "inEqSimp_notLeq" (formula "25") (term "0,0,0"))
            (rule "polySimp_rightDist" (formula "25") (term "1,0,0,0,0,0"))
            (rule "mul_literals" (formula "25") (term "0,1,0,0,0,0,0"))
            (rule "polySimp_addAssoc" (formula "25") (term "0,0,0,0,0"))
            (rule "add_literals" (formula "25") (term "0,0,0,0,0,0"))
            (rule "add_zero_left" (formula "25") (term "0,0,0,0,0"))
            (rule "inEqSimp_sepPosMonomial1" (formula "25") (term "0,0,0"))
            (rule "polySimp_mulLiterals" (formula "25") (term "1,0,0,0"))
            (rule "polySimp_elimOne" (formula "25") (term "1,0,0,0"))
            (rule "nnf_notAnd" (formula "12") (term "0,0"))
            (rule "inEqSimp_notLeq" (formula "12") (term "1,0,0"))
            (rule "mul_literals" (formula "12") (term "1,0,0,1,0,0"))
            (rule "add_literals" (formula "12") (term "0,0,1,0,0"))
            (rule "inEqSimp_sepPosMonomial1" (formula "12") (term "1,0,0"))
            (rule "mul_literals" (formula "12") (term "1,1,0,0"))
            (rule "nnf_notAnd" (formula "27") (term "0,0"))
            (rule "inEqSimp_notLeq" (formula "27") (term "1,0,0"))
            (rule "mul_literals" (formula "27") (term "1,0,0,1,0,0"))
            (rule "add_literals" (formula "27") (term "0,0,1,0,0"))
            (rule "inEqSimp_sepPosMonomial1" (formula "27") (term "1,0,0"))
            (rule "mul_literals" (formula "27") (term "1,1,0,0"))
            (rule "nnf_notAnd" (formula "30") (term "0,0"))
            (rule "inEqSimp_notLeq" (formula "30") (term "1,0,0"))
            (rule "mul_literals" (formula "30") (term "1,0,0,1,0,0"))
            (rule "add_literals" (formula "30") (term "0,0,1,0,0"))
            (rule "inEqSimp_sepPosMonomial1" (formula "30") (term "1,0,0"))
            (rule "mul_literals" (formula "30") (term "1,1,0,0"))
            (rule "nnf_notAnd" (formula "11") (term "0,0"))
            (rule "inEqSimp_notLeq" (formula "11") (term "1,0,0"))
            (rule "mul_literals" (formula "11") (term "1,0,0,1,0,0"))
            (rule "add_literals" (formula "11") (term "0,0,1,0,0"))
            (rule "inEqSimp_sepPosMonomial1" (formula "11") (term "1,0,0"))
            (rule "mul_literals" (formula "11") (term "1,1,0,0"))
            (rule "nnf_notAnd" (formula "12") (term "0,0,0"))
            (rule "inEqSimp_notLeq" (formula "12") (term "0,0,0,0"))
            (rule "polySimp_rightDist" (formula "12") (term "1,0,0,0,0,0,0"))
            (rule "mul_literals" (formula "12") (term "0,1,0,0,0,0,0,0"))
            (rule "polySimp_addAssoc" (formula "12") (term "0,0,0,0,0,0"))
            (rule "add_literals" (formula "12") (term "0,0,0,0,0,0,0"))
            (rule "add_zero_left" (formula "12") (term "0,0,0,0,0,0"))
            (rule "inEqSimp_sepPosMonomial1" (formula "12") (term "0,0,0,0"))
            (rule "polySimp_mulLiterals" (formula "12") (term "1,0,0,0,0"))
            (rule "polySimp_elimOne" (formula "12") (term "1,0,0,0,0"))
            (rule "inEqSimp_notGeq" (formula "12") (term "1,0,0,0"))
            (rule "times_zero_1" (formula "12") (term "1,0,0,1,0,0,0"))
            (rule "add_literals" (formula "12") (term "0,0,1,0,0,0"))
            (rule "inEqSimp_sepPosMonomial0" (formula "12") (term "1,0,0,0"))
            (rule "mul_literals" (formula "12") (term "1,1,0,0,0"))
            (rule "nnf_notAnd" (formula "27") (term "0,0,0"))
            (rule "inEqSimp_notGeq" (formula "27") (term "1,0,0,0"))
            (rule "mul_literals" (formula "27") (term "1,0,0,1,0,0,0"))
            (rule "add_literals" (formula "27") (term "0,0,1,0,0,0"))
            (rule "inEqSimp_sepPosMonomial0" (formula "27") (term "1,0,0,0"))
            (rule "mul_literals" (formula "27") (term "1,1,0,0,0"))
            (rule "inEqSimp_notLeq" (formula "27") (term "0,0,0,0"))
            (rule "polySimp_rightDist" (formula "27") (term "1,0,0,0,0,0,0"))
            (rule "mul_literals" (formula "27") (term "0,1,0,0,0,0,0,0"))
            (rule "polySimp_addAssoc" (formula "27") (term "0,0,0,0,0,0"))
            (rule "add_literals" (formula "27") (term "0,0,0,0,0,0,0"))
            (rule "add_zero_left" (formula "27") (term "0,0,0,0,0,0"))
            (rule "inEqSimp_sepPosMonomial1" (formula "27") (term "0,0,0,0"))
            (rule "polySimp_mulLiterals" (formula "27") (term "1,0,0,0,0"))
            (rule "polySimp_elimOne" (formula "27") (term "1,0,0,0,0"))
            (rule "nnf_notAnd" (formula "30") (term "0,0,0"))
            (rule "inEqSimp_notGeq" (formula "30") (term "1,0,0,0"))
            (rule "mul_literals" (formula "30") (term "1,0,0,1,0,0,0"))
            (rule "add_literals" (formula "30") (term "0,0,1,0,0,0"))
            (rule "inEqSimp_sepPosMonomial0" (formula "30") (term "1,0,0,0"))
            (rule "mul_literals" (formula "30") (term "1,1,0,0,0"))
            (rule "inEqSimp_notLeq" (formula "30") (term "0,0,0,0"))
            (rule "polySimp_rightDist" (formula "30") (term "1,0,0,0,0,0,0"))
            (rule "mul_literals" (formula "30") (term "0,1,0,0,0,0,0,0"))
            (rule "polySimp_addAssoc" (formula "30") (term "0,0,0,0,0,0"))
            (rule "add_literals" (formula "30") (term "0,0,0,0,0,0,0"))
            (rule "add_zero_left" (formula "30") (term "0,0,0,0,0,0"))
            (rule "inEqSimp_sepPosMonomial1" (formula "30") (term "0,0,0,0"))
            (rule "polySimp_mulLiterals" (formula "30") (term "1,0,0,0,0"))
            (rule "polySimp_elimOne" (formula "30") (term "1,0,0,0,0"))
            (rule "nnf_notAnd" (formula "11") (term "0,0,0"))
            (rule "inEqSimp_notLeq" (formula "11") (term "0,0,0,0"))
            (rule "polySimp_rightDist" (formula "11") (term "1,0,0,0,0,0,0"))
            (rule "mul_literals" (formula "11") (term "0,1,0,0,0,0,0,0"))
            (rule "polySimp_addAssoc" (formula "11") (term "0,0,0,0,0,0"))
            (rule "add_literals" (formula "11") (term "0,0,0,0,0,0,0"))
            (rule "add_zero_left" (formula "11") (term "0,0,0,0,0,0"))
            (rule "inEqSimp_sepPosMonomial1" (formula "11") (term "0,0,0,0"))
            (rule "polySimp_mulLiterals" (formula "11") (term "1,0,0,0,0"))
            (rule "polySimp_elimOne" (formula "11") (term "1,0,0,0,0"))
            (rule "inEqSimp_notGeq" (formula "11") (term "1,0,0,0"))
            (rule "mul_literals" (formula "11") (term "1,0,0,1,0,0,0"))
            (rule "add_literals" (formula "11") (term "0,0,1,0,0,0"))
            (rule "inEqSimp_sepPosMonomial0" (formula "11") (term "1,0,0,0"))
            (rule "mul_literals" (formula "11") (term "1,1,0,0,0"))
            (rule "commute_and" (formula "42"))
            (rule "commute_or_2" (formula "8") (term "0"))
            (rule "commute_and_2" (formula "1") (term "0,0,0"))
            (rule "commute_or" (formula "7") (term "0,0"))
            (rule "commute_or_2" (formula "25") (term "0"))
            (rule "commute_or" (formula "24") (term "0,0"))
            (rule "ifthenelse_split" (formula "28") (term "0"))
            (branch "self.record.<created> = TRUE TRUE"
               (rule "applyEqReverse" (formula "30") (term "1,0") (ifseqformula "29"))
               (rule "hideAuxiliaryEq" (formula "29"))
               (rule "replace_known_left" (formula "23") (term "0,0,0") (ifseqformula "28"))
                (builtin "One Step Simplification" (formula "23"))
               (rule "applyEqReverse" (formula "27") (term "0,1,0,0,0,0") (ifseqformula "23"))
               (rule "applyEqReverse" (formula "26") (term "0,1") (ifseqformula "23"))
               (rule "applyEqReverse" (formula "24") (term "0,1,1,0,0,0,1,0") (ifseqformula "23"))
               (rule "applyEqReverse" (formula "24") (term "0,1,1,0,0,1,0") (ifseqformula "23"))
               (rule "applyEqReverse" (formula "30") (term "0,1,0,0,0,0") (ifseqformula "23"))
               (rule "applyEqReverse" (formula "27") (term "0,0,0,1,0") (ifseqformula "23"))
               (rule "hideAuxiliaryEq" (formula "23"))
               (rule "replace_known_left" (formula "28") (term "0,0,0") (ifseqformula "27"))
                (builtin "One Step Simplification" (formula "28"))
               (rule "applyEqReverse" (formula "25") (term "0,0") (ifseqformula "28"))
               (rule "applyEqReverse" (formula "29") (term "0,0,0,1,0") (ifseqformula "28"))
               (rule "hideAuxiliaryEq" (formula "28"))
               (rule "replace_known_left" (formula "22") (term "0,0") (ifseqformula "27"))
                (builtin "One Step Simplification" (formula "22"))
               (rule "applyEqReverse" (formula "26") (term "0,1,0,0,0,0") (ifseqformula "22"))
               (rule "applyEqReverse" (formula "23") (term "0,1,1,0,0,1,0") (ifseqformula "22"))
               (rule "applyEqReverse" (formula "26") (term "0,0,0,1,0") (ifseqformula "22"))
               (rule "applyEqReverse" (formula "23") (term "0,1,1,0,0,0,1,0") (ifseqformula "22"))
               (rule "applyEqReverse" (formula "25") (term "0,1") (ifseqformula "22"))
               (rule "applyEqReverse" (formula "26") (term "0,1,0,0,0,0") (ifseqformula "22"))
               (rule "hideAuxiliaryEq" (formula "22"))
               (rule "commute_and" (formula "7") (term "0,0,1,0"))
               (rule "commute_or_2" (formula "12") (term "0"))
               (rule "ifthenelse_split" (formula "17") (term "0"))
               (branch "self.cols.<created> = TRUE TRUE"
                  (rule "eqSymm" (formula "18"))
                  (rule "replace_known_left" (formula "22") (term "0,0") (ifseqformula "17"))
                   (builtin "One Step Simplification" (formula "22"))
                  (rule "true_left" (formula "22"))
                  (rule "applyEq" (formula "23") (term "0,0,0,1,0,0") (ifseqformula "18"))
                  (rule "applyEq" (formula "22") (term "0,0,1,0,0,1,0") (ifseqformula "18"))
                  (rule "applyEq" (formula "26") (term "0,0") (ifseqformula "18"))
                  (rule "applyEq" (formula "6") (term "0") (ifseqformula "26"))
                  (rule "applyEq" (formula "6") (term "1,1,0,0") (ifseqformula "25"))
                  (rule "applyEq" (formula "7") (term "1,0,0,0") (ifseqformula "25"))
                  (rule "commute_or_2" (formula "9") (term "0"))
                  (rule "cut_direct" (formula "35") (term "0,0"))
                  (branch "CUT: o_0 = null TRUE"
                      (builtin "One Step Simplification" (formula "36"))
                     (rule "false_right" (formula "36"))
                     (rule "replace_known_left" (formula "2") (term "0,0,1,0,0") (ifseqformula "1"))
                      (builtin "One Step Simplification" (formula "2"))
                     (rule "applyEqRigid" (formula "36") (term "1,0") (ifseqformula "1"))
                     (rule "applyEqRigid" (formula "2") (term "0,0,0,0,0") (ifseqformula "1"))
                     (rule "eqSymm" (formula "2") (term "0,0,0,0"))
                     (rule "replace_known_right" (formula "2") (term "0,0,0,0") (ifseqformula "29"))
                      (builtin "One Step Simplification" (formula "2"))
                     (rule "applyEqReverse" (formula "36") (term "1") (ifseqformula "2"))
                     (rule "hideAuxiliaryEq" (formula "2"))
                     (rule "eqSymm" (formula "35"))
                     (rule "applyEqRigid" (formula "34") (term "0,1") (ifseqformula "1"))
                     (rule "eqSymm" (formula "34") (term "1"))
                     (rule "replace_known_right" (formula "34") (term "1") (ifseqformula "30"))
                      (builtin "One Step Simplification" (formula "34"))
                     (rule "false_right" (formula "34"))
                     (rule "applyEqRigid" (formula "34") (term "1,0") (ifseqformula "1"))
                      (builtin "One Step Simplification" (formula "34"))
                     (rule "closeTrue" (formula "34"))
                  )
                  (branch "CUT: o_0 = null FALSE"
                      (builtin "One Step Simplification" (formula "36"))
                     (rule "notRight" (formula "36"))
                     (rule "replace_known_left" (formula "2") (term "0,0,1,1,0,0") (ifseqformula "1"))
                      (builtin "One Step Simplification" (formula "2") (ifInst ""  (formula "36")))
                     (rule "commute_or_2" (formula "11") (term "0,0"))
                     (rule "commute_or" (formula "22") (term "0,0"))
                     (rule "commute_or_2" (formula "22") (term "0"))
                     (rule "commute_or_2" (formula "10") (term "0,0"))
                     (rule "commute_or" (formula "11") (term "0,0,0"))
                     (rule "commute_or_2" (formula "11") (term "0,0"))
                     (rule "commute_or_2" (formula "11") (term "0"))
                     (rule "commute_or" (formula "10") (term "0,0,0"))
                     (rule "commute_or_2" (formula "10") (term "0,0"))
                     (rule "commute_or_2" (formula "10") (term "0"))
                     (rule "commute_and_2" (formula "7") (term "0,1,0"))
                     (rule "applyEq_and_gen3" (formula "2") (term "0,0"))
                      (builtin "One Step Simplification" (formula "2"))
                     (rule "commute_and" (formula "2") (term "0,0"))
                     (rule "commute_and" (formula "21") (term "0,0,1,0"))
                     (rule "commute_and_2" (formula "21") (term "0,1,0"))
                     (rule "ex_pull_out3" (formula "7") (term "0"))
                     (rule "cnf_rightDist" (formula "7") (term "0,0"))
                     (rule "shift_paren_or" (formula "7") (term "1,0,0"))
                     (rule "cnf_rightDist" (formula "7") (term "0,0,0"))
                     (rule "commute_or_2" (formula "7") (term "0,0,0,0"))
                     (rule "shift_paren_or" (formula "7") (term "1,0,0,0"))
                     (rule "commute_or" (formula "7") (term "0,0,0,0,0"))
                     (rule "commute_and" (formula "7") (term "0,0,0"))
                     (rule "commute_and_2" (formula "7") (term "0,0"))
                     (rule "ifthenelse_split" (formula "2") (term "0"))
                     (branch "f_0 = java.util.Iterator::$index ∧ o_0 = result TRUE"
                        (rule "andLeft" (formula "2"))
                        (rule "applyEqReverse" (formula "38") (term "1") (ifseqformula "4"))
                        (rule "hideAuxiliaryEq" (formula "4"))
                        (rule "eqSymm" (formula "37"))
                        (rule "applyEq" (formula "35") (term "0,0") (ifseqformula "2"))
                         (builtin "One Step Simplification" (formula "35"))
                        (rule "false_right" (formula "35"))
                        (rule "applyEq" (formula "36") (term "2,0") (ifseqformula "2"))
                        (rule "narrowSelectType" (formula "36") (term "0") (ifseqformula "21"))
                        (rule "eqSymm" (formula "36"))
                        (rule "applyEq" (formula "1") (term "1,0") (ifseqformula "3"))
                        (rule "close" (formula "28") (ifseqformula "1"))
                     )
                     (branch "f_0 = java.util.Iterator::$index ∧ o_0 = result FALSE"
                        (rule "close" (formula "37") (ifseqformula "2"))
                     )
                  )
               )
               (branch "self.cols.<created> = TRUE FALSE"
                  (rule "referencedObjectIsCreatedRight" (formula "28") (ifseqformula "34"))
                  (rule "close" (formula "28") (ifseqformula "2"))
               )
            )
            (branch "self.record.<created> = TRUE FALSE"
               (rule "referencedObjectIsCreatedRight" (formula "34") (ifseqformula "38"))
               (rule "close" (formula "34") (ifseqformula "2"))
            )
         )
      )
      (branch "Exceptional Post (hasNext)"
          (builtin "One Step Simplification" (formula "32"))
          (builtin "One Step Simplification" (formula "40"))
         (rule "selectCreatedOfAnonAsFormulaEQ" (formula "32") (term "0,1,0") (ifseqformula "13"))
         (rule "replaceKnownSelect_taclet20_20" (formula "32") (term "0,1,0,0,1"))
         (rule "replaceKnownAuxiliaryConstant_taclet20_21" (formula "32") (term "0,1,0,0,1"))
         (rule "replaceKnownSelect_taclet20_16" (formula "32") (term "0,1,1,0,0,1"))
         (rule "replaceKnownAuxiliaryConstant_taclet20_17" (formula "32") (term "0,1,1,0,0,1"))
         (rule "andLeft" (formula "32"))
         (rule "andLeft" (formula "33"))
         (rule "andLeft" (formula "32"))
         (rule "andLeft" (formula "34"))
         (rule "notLeft" (formula "32"))
         (rule "close" (formula "36") (ifseqformula "35"))
      )
      (branch "Pre (hasNext)"
          (builtin "One Step Simplification" (formula "39"))
         (rule "wellFormedAnon" (formula "39") (term "1"))
         (rule "wellFormedAnonEQ" (formula "39") (term "0,1") (ifseqformula "13"))
         (rule "replace_known_left" (formula "39") (term "1,0,1") (ifseqformula "12"))
          (builtin "One Step Simplification" (formula "39") (ifInst ""  (formula "1")) (ifInst ""  (formula "19")))
         (rule "inEqSimp_ltToLeq" (formula "24") (term "0,0,0"))
         (rule "polySimp_mulComm0" (formula "24") (term "1,0,0,0,0,0"))
         (rule "inEqSimp_ltToLeq" (formula "10") (term "0,0,0,0,0"))
         (rule "polySimp_mulComm0" (formula "10") (term "1,0,0,0,0,0,0,0"))
         (rule "inEqSimp_ltToLeq" (formula "26") (term "1,0,0,0"))
         (rule "polySimp_mulComm0" (formula "26") (term "1,0,0,1,0,0,0"))
         (rule "inEqSimp_ltToLeq" (formula "23") (term "1,0,0,1,0"))
         (rule "polySimp_mulComm0" (formula "23") (term "1,0,0,1,0,0,1,0"))
         (rule "inEqSimp_ltToLeq" (formula "29") (term "1,0,0,0"))
         (rule "polySimp_mulComm0" (formula "29") (term "1,0,0,1,0,0,0"))
         (rule "inEqSimp_ltToLeq" (formula "23") (term "0,0,0"))
         (rule "polySimp_mulComm0" (formula "23") (term "1,0,0,0,0,0"))
         (rule "inEqSimp_ltToLeq" (formula "6") (term "0,0,0"))
         (rule "polySimp_mulComm0" (formula "6") (term "1,0,0,0,0,0"))
         (rule "inEqSimp_ltToLeq" (formula "7") (term "0,0,0"))
         (rule "polySimp_mulComm0" (formula "7") (term "1,0,0,0,0,0"))
         (rule "inEqSimp_ltToLeq" (formula "6") (term "0,0,0,1,0"))
         (rule "polySimp_mulComm0" (formula "6") (term "1,0,0,0,0,0,1,0"))
         (rule "inEqSimp_ltToLeq" (formula "11") (term "0,0,0,0,0"))
         (rule "polySimp_mulComm0" (formula "11") (term "1,0,0,0,0,0,0,0"))
         (rule "inEqSimp_sepPosMonomial0" (formula "24") (term "0,0,0"))
         (rule "polySimp_mulComm0" (formula "24") (term "1,0,0,0"))
         (rule "polySimp_rightDist" (formula "24") (term "1,0,0,0"))
         (rule "polySimp_mulLiterals" (formula "24") (term "1,1,0,0,0"))
         (rule "mul_literals" (formula "24") (term "0,1,0,0,0"))
         (rule "polySimp_elimOne" (formula "24") (term "1,1,0,0,0"))
         (rule "inEqSimp_sepPosMonomial0" (formula "10") (term "0,0,0,0,0"))
         (rule "polySimp_mulComm0" (formula "10") (term "1,0,0,0,0,0"))
         (rule "polySimp_rightDist" (formula "10") (term "1,0,0,0,0,0"))
         (rule "polySimp_mulLiterals" (formula "10") (term "1,1,0,0,0,0,0"))
         (rule "mul_literals" (formula "10") (term "0,1,0,0,0,0,0"))
         (rule "polySimp_elimOne" (formula "10") (term "1,1,0,0,0,0,0"))
         (rule "inEqSimp_sepPosMonomial0" (formula "26") (term "1,0,0,0"))
         (rule "polySimp_mulComm0" (formula "26") (term "1,1,0,0,0"))
         (rule "polySimp_rightDist" (formula "26") (term "1,1,0,0,0"))
         (rule "mul_literals" (formula "26") (term "0,1,1,0,0,0"))
         (rule "polySimp_mulLiterals" (formula "26") (term "1,1,1,0,0,0"))
         (rule "polySimp_elimOne" (formula "26") (term "1,1,1,0,0,0"))
         (rule "inEqSimp_sepPosMonomial0" (formula "23") (term "1,0,0,1,0"))
         (rule "polySimp_mulComm0" (formula "23") (term "1,1,0,0,1,0"))
         (rule "polySimp_rightDist" (formula "23") (term "1,1,0,0,1,0"))
         (rule "polySimp_mulLiterals" (formula "23") (term "1,1,1,0,0,1,0"))
         (rule "mul_literals" (formula "23") (term "0,1,1,0,0,1,0"))
         (rule "polySimp_elimOne" (formula "23") (term "1,1,1,0,0,1,0"))
         (rule "inEqSimp_sepPosMonomial0" (formula "29") (term "1,0,0,0"))
         (rule "polySimp_mulComm0" (formula "29") (term "1,1,0,0,0"))
         (rule "polySimp_rightDist" (formula "29") (term "1,1,0,0,0"))
         (rule "mul_literals" (formula "29") (term "0,1,1,0,0,0"))
         (rule "polySimp_mulLiterals" (formula "29") (term "1,1,1,0,0,0"))
         (rule "polySimp_elimOne" (formula "29") (term "1,1,1,0,0,0"))
         (rule "inEqSimp_sepPosMonomial0" (formula "23") (term "0,0,0"))
         (rule "polySimp_mulComm0" (formula "23") (term "1,0,0,0"))
         (rule "polySimp_rightDist" (formula "23") (term "1,0,0,0"))
         (rule "polySimp_mulLiterals" (formula "23") (term "1,1,0,0,0"))
         (rule "mul_literals" (formula "23") (term "0,1,0,0,0"))
         (rule "polySimp_elimOne" (formula "23") (term "1,1,0,0,0"))
         (rule "inEqSimp_sepPosMonomial0" (formula "6") (term "0,0,0"))
         (rule "polySimp_mulComm0" (formula "6") (term "1,0,0,0"))
         (rule "polySimp_rightDist" (formula "6") (term "1,0,0,0"))
         (rule "mul_literals" (formula "6") (term "0,1,0,0,0"))
         (rule "polySimp_mulLiterals" (formula "6") (term "1,1,0,0,0"))
         (rule "polySimp_elimOne" (formula "6") (term "1,1,0,0,0"))
         (rule "inEqSimp_sepPosMonomial0" (formula "7") (term "0,0,0"))
         (rule "polySimp_mulComm0" (formula "7") (term "1,0,0,0"))
         (rule "polySimp_rightDist" (formula "7") (term "1,0,0,0"))
         (rule "mul_literals" (formula "7") (term "0,1,0,0,0"))
         (rule "polySimp_mulLiterals" (formula "7") (term "1,1,0,0,0"))
         (rule "polySimp_elimOne" (formula "7") (term "1,1,0,0,0"))
         (rule "inEqSimp_sepPosMonomial0" (formula "6") (term "0,0,0,1,0"))
         (rule "polySimp_mulComm0" (formula "6") (term "1,0,0,0,1,0"))
         (rule "polySimp_rightDist" (formula "6") (term "1,0,0,0,1,0"))
         (rule "mul_literals" (formula "6") (term "0,1,0,0,0,1,0"))
         (rule "polySimp_mulLiterals" (formula "6") (term "1,1,0,0,0,1,0"))
         (rule "polySimp_elimOne" (formula "6") (term "1,1,0,0,0,1,0"))
         (rule "inEqSimp_sepPosMonomial0" (formula "11") (term "0,0,0,0,0"))
         (rule "polySimp_mulComm0" (formula "11") (term "1,0,0,0,0,0"))
         (rule "polySimp_rightDist" (formula "11") (term "1,0,0,0,0,0"))
         (rule "mul_literals" (formula "11") (term "0,1,0,0,0,0,0"))
         (rule "polySimp_mulLiterals" (formula "11") (term "1,1,0,0,0,0,0"))
         (rule "polySimp_elimOne" (formula "11") (term "1,1,0,0,0,0,0"))
         (rule "inEqSimp_and_subsumption3" (formula "10") (term "0,0,0"))
         (rule "leq_literals" (formula "10") (term "0,1,0,0,0,0"))
          (builtin "One Step Simplification" (formula "10"))
         (rule "inEqSimp_and_subsumption3" (formula "11") (term "0,0,0"))
         (rule "leq_literals" (formula "11") (term "0,1,0,0,0,0"))
          (builtin "One Step Simplification" (formula "11"))
         (rule "nnf_imp2or" (formula "24") (term "0"))
         (rule "nnf_imp2or" (formula "26") (term "0"))
         (rule "nnf_imp2or" (formula "29") (term "0"))
         (rule "nnf_imp2or" (formula "23") (term "0"))
         (rule "nnf_imp2or" (formula "7") (term "0"))
         (rule "nnf_imp2or" (formula "6") (term "0"))
         (rule "nnf_imp2or" (formula "10") (term "0"))
         (rule "nnf_imp2or" (formula "11") (term "0"))
         (rule "nnf_notAnd" (formula "24") (term "0,0"))
         (rule "inEqSimp_notLeq" (formula "24") (term "0,0,0"))
         (rule "polySimp_rightDist" (formula "24") (term "1,0,0,0,0,0"))
         (rule "mul_literals" (formula "24") (term "0,1,0,0,0,0,0"))
         (rule "polySimp_addAssoc" (formula "24") (term "0,0,0,0,0"))
         (rule "add_literals" (formula "24") (term "0,0,0,0,0,0"))
         (rule "add_zero_left" (formula "24") (term "0,0,0,0,0"))
         (rule "inEqSimp_sepPosMonomial1" (formula "24") (term "0,0,0"))
         (rule "polySimp_mulLiterals" (formula "24") (term "1,0,0,0"))
         (rule "polySimp_elimOne" (formula "24") (term "1,0,0,0"))
         (rule "inEqSimp_notGeq" (formula "24") (term "1,0,0"))
         (rule "mul_literals" (formula "24") (term "1,0,0,1,0,0"))
         (rule "add_literals" (formula "24") (term "0,0,1,0,0"))
         (rule "inEqSimp_sepPosMonomial0" (formula "24") (term "1,0,0"))
         (rule "mul_literals" (formula "24") (term "1,1,0,0"))
         (rule "nnf_notAnd" (formula "26") (term "0,0"))
         (rule "nnf_notAnd" (formula "29") (term "0,0"))
         (rule "nnf_notAnd" (formula "23") (term "0,0"))
         (rule "inEqSimp_notLeq" (formula "23") (term "0,0,0"))
         (rule "polySimp_rightDist" (formula "23") (term "1,0,0,0,0,0"))
         (rule "mul_literals" (formula "23") (term "0,1,0,0,0,0,0"))
         (rule "polySimp_addAssoc" (formula "23") (term "0,0,0,0,0"))
         (rule "add_literals" (formula "23") (term "0,0,0,0,0,0"))
         (rule "add_zero_left" (formula "23") (term "0,0,0,0,0"))
         (rule "inEqSimp_sepPosMonomial1" (formula "23") (term "0,0,0"))
         (rule "polySimp_mulLiterals" (formula "23") (term "1,0,0,0"))
         (rule "polySimp_elimOne" (formula "23") (term "1,0,0,0"))
         (rule "inEqSimp_notGeq" (formula "23") (term "1,0,0"))
         (rule "mul_literals" (formula "23") (term "1,0,0,1,0,0"))
         (rule "add_literals" (formula "23") (term "0,0,1,0,0"))
         (rule "inEqSimp_sepPosMonomial0" (formula "23") (term "1,0,0"))
         (rule "mul_literals" (formula "23") (term "1,1,0,0"))
         (rule "nnf_notAnd" (formula "7") (term "0,0"))
         (rule "inEqSimp_notLeq" (formula "7") (term "0,0,0"))
         (rule "polySimp_rightDist" (formula "7") (term "1,0,0,0,0,0"))
         (rule "mul_literals" (formula "7") (term "0,1,0,0,0,0,0"))
         (rule "polySimp_addAssoc" (formula "7") (term "0,0,0,0,0"))
         (rule "add_literals" (formula "7") (term "0,0,0,0,0,0"))
         (rule "add_zero_left" (formula "7") (term "0,0,0,0,0"))
         (rule "inEqSimp_sepPosMonomial1" (formula "7") (term "0,0,0"))
         (rule "polySimp_mulLiterals" (formula "7") (term "1,0,0,0"))
         (rule "polySimp_elimOne" (formula "7") (term "1,0,0,0"))
         (rule "inEqSimp_notGeq" (formula "7") (term "1,0,0"))
         (rule "mul_literals" (formula "7") (term "1,0,0,1,0,0"))
         (rule "add_literals" (formula "7") (term "0,0,1,0,0"))
         (rule "inEqSimp_sepPosMonomial0" (formula "7") (term "1,0,0"))
         (rule "mul_literals" (formula "7") (term "1,1,0,0"))
         (rule "nnf_notAnd" (formula "6") (term "0,0"))
         (rule "inEqSimp_notGeq" (formula "6") (term "1,0,0"))
         (rule "times_zero_1" (formula "6") (term "1,0,0,1,0,0"))
         (rule "add_literals" (formula "6") (term "0,0,1,0,0"))
         (rule "inEqSimp_sepPosMonomial0" (formula "6") (term "1,0,0"))
         (rule "mul_literals" (formula "6") (term "1,1,0,0"))
         (rule "inEqSimp_notLeq" (formula "6") (term "0,0,0"))
         (rule "polySimp_rightDist" (formula "6") (term "1,0,0,0,0,0"))
         (rule "mul_literals" (formula "6") (term "0,1,0,0,0,0,0"))
         (rule "polySimp_addAssoc" (formula "6") (term "0,0,0,0,0"))
         (rule "add_literals" (formula "6") (term "0,0,0,0,0,0"))
         (rule "add_zero_left" (formula "6") (term "0,0,0,0,0"))
         (rule "inEqSimp_sepPosMonomial1" (formula "6") (term "0,0,0"))
         (rule "polySimp_mulLiterals" (formula "6") (term "1,0,0,0"))
         (rule "polySimp_elimOne" (formula "6") (term "1,0,0,0"))
         (rule "nnf_notAnd" (formula "10") (term "0,0"))
         (rule "inEqSimp_notLeq" (formula "10") (term "1,0,0"))
         (rule "mul_literals" (formula "10") (term "1,0,0,1,0,0"))
         (rule "add_literals" (formula "10") (term "0,0,1,0,0"))
         (rule "inEqSimp_sepPosMonomial1" (formula "10") (term "1,0,0"))
         (rule "mul_literals" (formula "10") (term "1,1,0,0"))
         (rule "nnf_notAnd" (formula "11") (term "0,0"))
         (rule "inEqSimp_notLeq" (formula "11") (term "1,0,0"))
         (rule "mul_literals" (formula "11") (term "1,0,0,1,0,0"))
         (rule "add_literals" (formula "11") (term "0,0,1,0,0"))
         (rule "inEqSimp_sepPosMonomial1" (formula "11") (term "1,0,0"))
         (rule "mul_literals" (formula "11") (term "1,1,0,0"))
         (rule "nnf_notAnd" (formula "26") (term "0,0,0"))
         (rule "inEqSimp_notGeq" (formula "26") (term "0,0,0,0"))
         (rule "mul_literals" (formula "26") (term "1,0,0,0,0,0,0"))
         (rule "add_literals" (formula "26") (term "0,0,0,0,0,0"))
         (rule "inEqSimp_sepPosMonomial0" (formula "26") (term "0,0,0,0"))
         (rule "mul_literals" (formula "26") (term "1,0,0,0,0"))
         (rule "inEqSimp_notLeq" (formula "26") (term "1,0,0,0"))
         (rule "polySimp_rightDist" (formula "26") (term "1,0,0,1,0,0,0"))
         (rule "mul_literals" (formula "26") (term "0,1,0,0,1,0,0,0"))
         (rule "polySimp_addAssoc" (formula "26") (term "0,0,1,0,0,0"))
         (rule "add_literals" (formula "26") (term "0,0,0,1,0,0,0"))
         (rule "add_zero_left" (formula "26") (term "0,0,1,0,0,0"))
         (rule "inEqSimp_sepPosMonomial1" (formula "26") (term "1,0,0,0"))
         (rule "polySimp_mulLiterals" (formula "26") (term "1,1,0,0,0"))
         (rule "polySimp_elimOne" (formula "26") (term "1,1,0,0,0"))
         (rule "nnf_notAnd" (formula "26") (term "1,0,0"))
         (rule "inEqSimp_notLeq" (formula "26") (term "0,1,0,0"))
         (rule "mul_literals" (formula "26") (term "1,0,0,0,1,0,0"))
         (rule "add_literals" (formula "26") (term "0,0,0,1,0,0"))
         (rule "inEqSimp_sepPosMonomial1" (formula "26") (term "0,1,0,0"))
         (rule "mul_literals" (formula "26") (term "1,0,1,0,0"))
         (rule "inEqSimp_notGeq" (formula "26") (term "1,1,0,0"))
         (rule "mul_literals" (formula "26") (term "1,0,0,1,1,0,0"))
         (rule "add_literals" (formula "26") (term "0,0,1,1,0,0"))
         (rule "inEqSimp_sepPosMonomial0" (formula "26") (term "1,1,0,0"))
         (rule "mul_literals" (formula "26") (term "1,1,1,0,0"))
         (rule "nnf_notAnd" (formula "29") (term "0,0,0"))
         (rule "inEqSimp_notLeq" (formula "29") (term "1,0,0,0"))
         (rule "polySimp_rightDist" (formula "29") (term "1,0,0,1,0,0,0"))
         (rule "mul_literals" (formula "29") (term "0,1,0,0,1,0,0,0"))
         (rule "polySimp_addAssoc" (formula "29") (term "0,0,1,0,0,0"))
         (rule "add_literals" (formula "29") (term "0,0,0,1,0,0,0"))
         (rule "add_zero_left" (formula "29") (term "0,0,1,0,0,0"))
         (rule "inEqSimp_sepPosMonomial1" (formula "29") (term "1,0,0,0"))
         (rule "polySimp_mulLiterals" (formula "29") (term "1,1,0,0,0"))
         (rule "polySimp_elimOne" (formula "29") (term "1,1,0,0,0"))
         (rule "inEqSimp_notGeq" (formula "29") (term "0,0,0,0"))
         (rule "mul_literals" (formula "29") (term "1,0,0,0,0,0,0"))
         (rule "add_zero_right" (formula "29") (term "0,0,0,0,0,0"))
         (rule "inEqSimp_sepPosMonomial0" (formula "29") (term "0,0,0,0"))
         (rule "mul_literals" (formula "29") (term "1,0,0,0,0"))
         (rule "nnf_notAnd" (formula "29") (term "1,0,0"))
         (rule "inEqSimp_notGeq" (formula "29") (term "1,1,0,0"))
         (rule "mul_literals" (formula "29") (term "1,0,0,1,1,0,0"))
         (rule "add_literals" (formula "29") (term "0,0,1,1,0,0"))
         (rule "inEqSimp_sepPosMonomial0" (formula "29") (term "1,1,0,0"))
         (rule "mul_literals" (formula "29") (term "1,1,1,0,0"))
         (rule "inEqSimp_notLeq" (formula "29") (term "0,1,0,0"))
         (rule "mul_literals" (formula "29") (term "1,0,0,0,1,0,0"))
         (rule "add_literals" (formula "29") (term "0,0,0,1,0,0"))
         (rule "inEqSimp_sepPosMonomial1" (formula "29") (term "0,1,0,0"))
         (rule "mul_literals" (formula "29") (term "1,0,1,0,0"))
         (rule "nnf_notAnd" (formula "10") (term "0,0,0"))
         (rule "inEqSimp_notLeq" (formula "10") (term "0,0,0,0"))
         (rule "polySimp_rightDist" (formula "10") (term "1,0,0,0,0,0,0"))
         (rule "mul_literals" (formula "10") (term "0,1,0,0,0,0,0,0"))
         (rule "polySimp_addAssoc" (formula "10") (term "0,0,0,0,0,0"))
         (rule "add_literals" (formula "10") (term "0,0,0,0,0,0,0"))
         (rule "add_zero_left" (formula "10") (term "0,0,0,0,0,0"))
         (rule "inEqSimp_sepPosMonomial1" (formula "10") (term "0,0,0,0"))
         (rule "polySimp_mulLiterals" (formula "10") (term "1,0,0,0,0"))
         (rule "polySimp_elimOne" (formula "10") (term "1,0,0,0,0"))
         (rule "inEqSimp_notGeq" (formula "10") (term "1,0,0,0"))
         (rule "times_zero_1" (formula "10") (term "1,0,0,1,0,0,0"))
         (rule "add_literals" (formula "10") (term "0,0,1,0,0,0"))
         (rule "inEqSimp_sepPosMonomial0" (formula "10") (term "1,0,0,0"))
         (rule "mul_literals" (formula "10") (term "1,1,0,0,0"))
         (rule "nnf_notAnd" (formula "11") (term "0,0,0"))
         (rule "inEqSimp_notGeq" (formula "11") (term "1,0,0,0"))
         (rule "mul_literals" (formula "11") (term "1,0,0,1,0,0,0"))
         (rule "add_literals" (formula "11") (term "0,0,1,0,0,0"))
         (rule "inEqSimp_sepPosMonomial0" (formula "11") (term "1,0,0,0"))
         (rule "mul_literals" (formula "11") (term "1,1,0,0,0"))
         (rule "inEqSimp_notLeq" (formula "11") (term "0,0,0,0"))
         (rule "polySimp_rightDist" (formula "11") (term "1,0,0,0,0,0,0"))
         (rule "mul_literals" (formula "11") (term "0,1,0,0,0,0,0,0"))
         (rule "polySimp_addAssoc" (formula "11") (term "0,0,0,0,0,0"))
         (rule "add_literals" (formula "11") (term "0,0,0,0,0,0,0"))
         (rule "add_zero_left" (formula "11") (term "0,0,0,0,0,0"))
         (rule "inEqSimp_sepPosMonomial1" (formula "11") (term "0,0,0,0"))
         (rule "polySimp_mulLiterals" (formula "11") (term "1,0,0,0,0"))
         (rule "polySimp_elimOne" (formula "11") (term "1,0,0,0,0"))
         (rule "Class_invariant_axiom_for_java_util_CollectionIterator" (formula "39"))
         (rule "replaceKnownSelect_taclet20_20" (formula "39") (term "1,0"))
         (rule "replaceKnownSelect_taclet20_20" (formula "39") (term "0,1"))
         (rule "replaceKnownAuxiliaryConstant_taclet20_21" (formula "39") (term "1,0"))
         (rule "replaceKnownAuxiliaryConstant_taclet20_21" (formula "39") (term "0,1"))
         (rule "replaceKnownSelect_taclet20_16" (formula "39") (term "0,1,1"))
         (rule "replaceKnownAuxiliaryConstant_taclet20_17" (formula "39") (term "0,1,1"))
         (rule "inEqSimp_commuteLeq" (formula "39") (term "0"))
         (rule "replace_known_left" (formula "39") (term "0") (ifseqformula "30"))
          (builtin "One Step Simplification" (formula "39"))
         (rule "inEqSimp_leqRight" (formula "39"))
         (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
         (rule "polySimp_addComm1" (formula "1") (term "0"))
         (rule "inEqSimp_sepNegMonomial1" (formula "1"))
         (rule "polySimp_mulLiterals" (formula "1") (term "0"))
         (rule "polySimp_elimOne" (formula "1") (term "0"))
         (rule "inEqSimp_contradInEq0" (formula "32") (ifseqformula "1"))
         (rule "andLeft" (formula "32"))
         (rule "inEqSimp_homoInEq1" (formula "32"))
         (rule "polySimp_mulComm0" (formula "32") (term "1,0"))
         (rule "polySimp_rightDist" (formula "32") (term "1,0"))
         (rule "mul_literals" (formula "32") (term "0,1,0"))
         (rule "polySimp_addAssoc" (formula "32") (term "0"))
         (rule "polySimp_addComm0" (formula "32") (term "0,0"))
         (rule "polySimp_pullOutFactor1b" (formula "32") (term "0"))
         (rule "add_literals" (formula "32") (term "1,1,0"))
         (rule "times_zero_1" (formula "32") (term "1,0"))
         (rule "add_literals" (formula "32") (term "0"))
         (rule "leq_literals" (formula "32"))
         (rule "closeFalse" (formula "32"))
      )
      (branch "Null reference (it = null)"
          (builtin "One Step Simplification" (formula "39") (ifInst ""  (formula "33")))
         (rule "closeTrue" (formula "39"))
      )
   )
)
(branch "Exceptional Post (iterator)"
    (builtin "One Step Simplification" (formula "11"))
    (builtin "One Step Simplification" (formula "17"))
   (rule "andLeft" (formula "11"))
   (rule "selectCreatedOfAnonAsFormulaEQ" (formula "12") (term "1,0") (ifseqformula "11"))
   (rule "andLeft" (formula "12"))
   (rule "andLeft" (formula "13"))
   (rule "andLeft" (formula "12"))
   (rule "andLeft" (formula "14"))
   (rule "notLeft" (formula "12"))
   (rule "close" (formula "16") (ifseqformula "15"))
)
(branch "Pre (iterator)"
    (builtin "One Step Simplification" (formula "15") (ifInst ""  (formula "1")))
   (rule "inEqSimp_ltToLeq" (formula "8") (term "0,0,0,0,0"))
   (rule "polySimp_mulComm0" (formula "8") (term "1,0,0,0,0,0,0,0"))
   (rule "inEqSimp_ltToLeq" (formula "5") (term "0,0,0"))
   (rule "polySimp_mulComm0" (formula "5") (term "1,0,0,0,0,0"))
   (rule "inEqSimp_ltToLeq" (formula "6") (term "0,0,0"))
   (rule "polySimp_mulComm0" (formula "6") (term "1,0,0,0,0,0"))
   (rule "inEqSimp_ltToLeq" (formula "5") (term "0,0,0,1,0"))
   (rule "polySimp_mulComm0" (formula "5") (term "1,0,0,0,0,0,1,0"))
   (rule "inEqSimp_ltToLeq" (formula "9") (term "0,0,0,0,0"))
   (rule "polySimp_mulComm0" (formula "9") (term "1,0,0,0,0,0,0,0"))
   (rule "inEqSimp_sepPosMonomial0" (formula "8") (term "0,0,0,0,0"))
   (rule "polySimp_mulComm0" (formula "8") (term "1,0,0,0,0,0"))
   (rule "polySimp_rightDist" (formula "8") (term "1,0,0,0,0,0"))
   (rule "mul_literals" (formula "8") (term "0,1,0,0,0,0,0"))
   (rule "polySimp_mulLiterals" (formula "8") (term "1,1,0,0,0,0,0"))
   (rule "polySimp_elimOne" (formula "8") (term "1,1,0,0,0,0,0"))
   (rule "inEqSimp_sepPosMonomial0" (formula "5") (term "0,0,0"))
   (rule "polySimp_mulComm0" (formula "5") (term "1,0,0,0"))
   (rule "polySimp_rightDist" (formula "5") (term "1,0,0,0"))
   (rule "mul_literals" (formula "5") (term "0,1,0,0,0"))
   (rule "polySimp_mulLiterals" (formula "5") (term "1,1,0,0,0"))
   (rule "polySimp_elimOne" (formula "5") (term "1,1,0,0,0"))
   (rule "inEqSimp_sepPosMonomial0" (formula "6") (term "0,0,0"))
   (rule "polySimp_mulComm0" (formula "6") (term "1,0,0,0"))
   (rule "polySimp_rightDist" (formula "6") (term "1,0,0,0"))
   (rule "mul_literals" (formula "6") (term "0,1,0,0,0"))
   (rule "polySimp_mulLiterals" (formula "6") (term "1,1,0,0,0"))
   (rule "polySimp_elimOne" (formula "6") (term "1,1,0,0,0"))
   (rule "inEqSimp_sepPosMonomial0" (formula "5") (term "0,0,0,1,0"))
   (rule "polySimp_mulComm0" (formula "5") (term "1,0,0,0,1,0"))
   (rule "polySimp_rightDist" (formula "5") (term "1,0,0,0,1,0"))
   (rule "polySimp_mulLiterals" (formula "5") (term "1,1,0,0,0,1,0"))
   (rule "mul_literals" (formula "5") (term "0,1,0,0,0,1,0"))
   (rule "polySimp_elimOne" (formula "5") (term "1,1,0,0,0,1,0"))
   (rule "inEqSimp_sepPosMonomial0" (formula "9") (term "0,0,0,0,0"))
   (rule "polySimp_mulComm0" (formula "9") (term "1,0,0,0,0,0"))
   (rule "polySimp_rightDist" (formula "9") (term "1,0,0,0,0,0"))
   (rule "mul_literals" (formula "9") (term "0,1,0,0,0,0,0"))
   (rule "polySimp_mulLiterals" (formula "9") (term "1,1,0,0,0,0,0"))
   (rule "polySimp_elimOne" (formula "9") (term "1,1,0,0,0,0,0"))
   (rule "inEqSimp_and_subsumption3" (formula "8") (term "0,0,0"))
   (rule "leq_literals" (formula "8") (term "0,1,0,0,0,0"))
    (builtin "One Step Simplification" (formula "8"))
   (rule "inEqSimp_and_subsumption3" (formula "9") (term "0,0,0"))
   (rule "leq_literals" (formula "9") (term "0,1,0,0,0,0"))
    (builtin "One Step Simplification" (formula "9"))
   (rule "nnf_imp2or" (formula "6") (term "0"))
   (rule "nnf_imp2or" (formula "5") (term "0"))
   (rule "nnf_imp2or" (formula "8") (term "0"))
   (rule "nnf_imp2or" (formula "9") (term "0"))
   (rule "nnf_notAnd" (formula "6") (term "0,0"))
   (rule "inEqSimp_notGeq" (formula "6") (term "1,0,0"))
   (rule "times_zero_1" (formula "6") (term "1,0,0,1,0,0"))
   (rule "add_zero_right" (formula "6") (term "0,0,1,0,0"))
   (rule "inEqSimp_sepPosMonomial0" (formula "6") (term "1,0,0"))
   (rule "mul_literals" (formula "6") (term "1,1,0,0"))
   (rule "inEqSimp_notLeq" (formula "6") (term "0,0,0"))
   (rule "polySimp_rightDist" (formula "6") (term "1,0,0,0,0,0"))
   (rule "mul_literals" (formula "6") (term "0,1,0,0,0,0,0"))
   (rule "polySimp_addAssoc" (formula "6") (term "0,0,0,0,0"))
   (rule "add_literals" (formula "6") (term "0,0,0,0,0,0"))
   (rule "add_zero_left" (formula "6") (term "0,0,0,0,0"))
   (rule "inEqSimp_sepPosMonomial1" (formula "6") (term "0,0,0"))
   (rule "polySimp_mulLiterals" (formula "6") (term "1,0,0,0"))
   (rule "polySimp_elimOne" (formula "6") (term "1,0,0,0"))
   (rule "nnf_notAnd" (formula "5") (term "0,0"))
   (rule "inEqSimp_notGeq" (formula "5") (term "1,0,0"))
   (rule "times_zero_1" (formula "5") (term "1,0,0,1,0,0"))
   (rule "add_zero_right" (formula "5") (term "0,0,1,0,0"))
   (rule "inEqSimp_sepPosMonomial0" (formula "5") (term "1,0,0"))
   (rule "mul_literals" (formula "5") (term "1,1,0,0"))
   (rule "inEqSimp_notLeq" (formula "5") (term "0,0,0"))
   (rule "polySimp_rightDist" (formula "5") (term "1,0,0,0,0,0"))
   (rule "mul_literals" (formula "5") (term "0,1,0,0,0,0,0"))
   (rule "polySimp_addAssoc" (formula "5") (term "0,0,0,0,0"))
   (rule "add_literals" (formula "5") (term "0,0,0,0,0,0"))
   (rule "add_zero_left" (formula "5") (term "0,0,0,0,0"))
   (rule "inEqSimp_sepPosMonomial1" (formula "5") (term "0,0,0"))
   (rule "polySimp_mulLiterals" (formula "5") (term "1,0,0,0"))
   (rule "polySimp_elimOne" (formula "5") (term "1,0,0,0"))
   (rule "nnf_notAnd" (formula "8") (term "0,0"))
   (rule "inEqSimp_notLeq" (formula "8") (term "1,0,0"))
   (rule "mul_literals" (formula "8") (term "1,0,0,1,0,0"))
   (rule "add_literals" (formula "8") (term "0,0,1,0,0"))
   (rule "inEqSimp_sepPosMonomial1" (formula "8") (term "1,0,0"))
   (rule "mul_literals" (formula "8") (term "1,1,0,0"))
   (rule "nnf_notAnd" (formula "9") (term "0,0"))
   (rule "inEqSimp_notLeq" (formula "9") (term "1,0,0"))
   (rule "mul_literals" (formula "9") (term "1,0,0,1,0,0"))
   (rule "add_literals" (formula "9") (term "0,0,1,0,0"))
   (rule "inEqSimp_sepPosMonomial1" (formula "9") (term "1,0,0"))
   (rule "mul_literals" (formula "9") (term "1,1,0,0"))
   (rule "nnf_notAnd" (formula "8") (term "0,0,0"))
   (rule "inEqSimp_notGeq" (formula "8") (term "1,0,0,0"))
   (rule "times_zero_1" (formula "8") (term "1,0,0,1,0,0,0"))
   (rule "add_literals" (formula "8") (term "0,0,1,0,0,0"))
   (rule "inEqSimp_sepPosMonomial0" (formula "8") (term "1,0,0,0"))
   (rule "mul_literals" (formula "8") (term "1,1,0,0,0"))
   (rule "inEqSimp_notLeq" (formula "8") (term "0,0,0,0"))
   (rule "polySimp_rightDist" (formula "8") (term "1,0,0,0,0,0,0"))
   (rule "mul_literals" (formula "8") (term "0,1,0,0,0,0,0,0"))
   (rule "polySimp_addAssoc" (formula "8") (term "0,0,0,0,0,0"))
   (rule "add_literals" (formula "8") (term "0,0,0,0,0,0,0"))
   (rule "add_zero_left" (formula "8") (term "0,0,0,0,0,0"))
   (rule "inEqSimp_sepPosMonomial1" (formula "8") (term "0,0,0,0"))
   (rule "polySimp_mulLiterals" (formula "8") (term "1,0,0,0,0"))
   (rule "polySimp_elimOne" (formula "8") (term "1,0,0,0,0"))
   (rule "nnf_notAnd" (formula "9") (term "0,0,0"))
   (rule "inEqSimp_notGeq" (formula "9") (term "1,0,0,0"))
   (rule "times_zero_1" (formula "9") (term "1,0,0,1,0,0,0"))
   (rule "add_zero_right" (formula "9") (term "0,0,1,0,0,0"))
   (rule "inEqSimp_sepPosMonomial0" (formula "9") (term "1,0,0,0"))
   (rule "mul_literals" (formula "9") (term "1,1,0,0,0"))
   (rule "inEqSimp_notLeq" (formula "9") (term "0,0,0,0"))
   (rule "polySimp_rightDist" (formula "9") (term "1,0,0,0,0,0,0"))
   (rule "mul_literals" (formula "9") (term "0,1,0,0,0,0,0,0"))
   (rule "polySimp_addAssoc" (formula "9") (term "0,0,0,0,0,0"))
   (rule "add_literals" (formula "9") (term "0,0,0,0,0,0,0"))
   (rule "add_zero_left" (formula "9") (term "0,0,0,0,0,0"))
   (rule "inEqSimp_sepPosMonomial1" (formula "9") (term "0,0,0,0"))
   (rule "polySimp_mulLiterals" (formula "9") (term "1,0,0,0,0"))
   (rule "polySimp_elimOne" (formula "9") (term "1,0,0,0,0"))
   (rule "Class_invariant_axiom_for_java_util_ArrayList" (formula "15"))
   (rule "closeTrue" (formula "15"))
)
(branch "Null reference (a = null)"
    (builtin "One Step Simplification" (formula "15") (ifInst ""  (formula "12")))
   (rule "closeTrue" (formula "15"))
)
)
}
