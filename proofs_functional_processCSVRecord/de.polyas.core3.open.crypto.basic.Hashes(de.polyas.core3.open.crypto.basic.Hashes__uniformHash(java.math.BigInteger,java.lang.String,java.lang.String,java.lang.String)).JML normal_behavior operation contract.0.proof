\profile "Java Profile";

\settings {
"#Proof-Settings-Config-File
#Sun Feb 09 14:58:50 CET 2020
[Labels]UseOriginLabels=false
[StrategyProperty]QUERYAXIOM_OPTIONS_KEY=QUERYAXIOM_ON
[SMTSettings]invariantForall=false
[Strategy]ActiveStrategy=JavaCardDLStrategy
[StrategyProperty]USER_TACLETS_OPTIONS_KEY1=USER_TACLETS_OFF
[StrategyProperty]QUANTIFIERS_OPTIONS_KEY=QUANTIFIERS_NON_SPLITTING_WITH_PROGS
[StrategyProperty]USER_TACLETS_OPTIONS_KEY2=USER_TACLETS_OFF
[Choice]DefaultChoices=methodExpansion-methodExpansion\\:modularOnly , mergeGenerateIsWeakeningGoal-mergeGenerateIsWeakeningGoal\\:off , wdChecks-wdChecks\\:off , wdOperator-wdOperator\\:L , permissions-permissions\\:off , integerSimplificationRules-integerSimplificationRules\\:full , reach-reach\\:on , moreSeqRules-moreSeqRules\\:on , sequences-sequences\\:on , bigint-bigint\\:on , modelFields-modelFields\\:treatAsAxiom , Strings-Strings\\:on , JavaCard-JavaCard\\:off , runtimeExceptions-runtimeExceptions\\:allow , programRules-programRules\\:Java , intRules-intRules\\:javaSemantics , initialisation-initialisation\\:disableStaticInitialisation , assertions-assertions\\:on
[StrategyProperty]LOOP_OPTIONS_KEY=LOOP_INVARIANT
[StrategyProperty]INF_FLOW_CHECK_PROPERTY=INF_FLOW_CHECK_FALSE
[SMTSettings]UseBuiltUniqueness=false
[SMTSettings]explicitTypeHierarchy=false
[SMTSettings]instantiateHierarchyAssumptions=true
[StrategyProperty]NON_LIN_ARITH_OPTIONS_KEY=NON_LIN_ARITH_DEF_OPS
[SMTSettings]SelectedTaclets=
[StrategyProperty]DEP_OPTIONS_KEY=DEP_ON
[StrategyProperty]AUTO_INDUCTION_OPTIONS_KEY=AUTO_INDUCTION_OFF
[Strategy]MaximumNumberOfAutomaticApplications=10000
[StrategyProperty]STOPMODE_OPTIONS_KEY=STOPMODE_DEFAULT
[StrategyProperty]CLASS_AXIOM_OPTIONS_KEY=CLASS_AXIOM_FREE
[SMTSettings]useConstantsForBigOrSmallIntegers=true
[StrategyProperty]MPS_OPTIONS_KEY=MPS_MERGE
[StrategyProperty]SYMBOLIC_EXECUTION_NON_EXECUTION_BRANCH_HIDING_OPTIONS_KEY=SYMBOLIC_EXECUTION_NON_EXECUTION_BRANCH_HIDING_OFF
[Strategy]Timeout=-1
[StrategyProperty]SYMBOLIC_EXECUTION_ALIAS_CHECK_OPTIONS_KEY=SYMBOLIC_EXECUTION_ALIAS_CHECK_NEVER
[StrategyProperty]QUERY_NEW_OPTIONS_KEY=QUERY_OFF
[SMTSettings]useUninterpretedMultiplication=true
[StrategyProperty]BLOCK_OPTIONS_KEY=BLOCK_CONTRACT_INTERNAL
[StrategyProperty]METHOD_OPTIONS_KEY=METHOD_CONTRACT
[StrategyProperty]USER_TACLETS_OPTIONS_KEY3=USER_TACLETS_OFF
[SMTSettings]maxGenericSorts=2
[StrategyProperty]OSS_OPTIONS_KEY=OSS_ON
[StrategyProperty]SPLITTING_OPTIONS_KEY=SPLITTING_DELAYED
[SMTSettings]integersMinimum=-2147483645
[StrategyProperty]VBT_PHASE=VBT_SYM_EX
[SMTSettings]integersMaximum=2147483645
"
}

\bootclasspath "../../../../../../home/flo/git/polyas-core3-open-cred/boot";

\javaSource "../../../../../../home/flo/git/polyas-core3-open-cred/src";

\proofObligation "#Proof Obligation Settings
#Sun Feb 09 14:58:50 CET 2020
contract=de.polyas.core3.open.crypto.basic.Hashes[de.polyas.core3.open.crypto.basic.Hashes\\:\\:uniformHash(java.math.BigInteger,java.lang.String,java.lang.String,java.lang.String)].JML normal_behavior operation contract.0
name=de.polyas.core3.open.crypto.basic.Hashes[de.polyas.core3.open.crypto.basic.Hashes\\:\\:uniformHash(java.math.BigInteger,java.lang.String,java.lang.String,java.lang.String)].JML normal_behavior operation contract.0
class=de.uka.ilkd.key.proof.init.FunctionalOperationContractPO
";

\proof {
(keyLog "0" (keyUser "flo" ) (keyVersion ""))

(autoModeTime "1801")

(branch "dummy ID"
(rule "impRight" (formula "1") (newnames "upperBound_6,s1_13,s2_13,s3_6,result_351,exc_463,heapAtPre_0,o,f"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "2"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "4"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "5"))
(rule "andLeft" (formula "7"))
(rule "andLeft" (formula "2"))
(rule "notLeft" (formula "9"))
(rule "andLeft" (formula "2"))
(rule "andLeft" (formula "2"))
(rule "eqSymm" (formula "12") (term "0,0,0,0,1"))
(rule "eqSymm" (formula "12") (term "1,0,0,1,0,1"))
(rule "translateJavaAddInt" (formula "12") (term "0,0,0,0,0,1"))
(rule "replace_known_right" (formula "2") (term "0") (ifseqformula "11"))
 (builtin "One Step Simplification" (formula "2"))
(rule "elementOfSingleton" (formula "12") (term "0,0,0,0,1,0,1"))
(rule "inEqSimp_ltToLeq" (formula "9"))
(rule "polySimp_mulComm0" (formula "9") (term "1,0,0"))
(rule "inEqSimp_commuteLeq" (formula "8"))
(rule "assignment" (formula "12") (term "1"))
 (builtin "One Step Simplification" (formula "12"))
(rule "inEqSimp_sepPosMonomial0" (formula "9"))
(rule "polySimp_mulComm0" (formula "9") (term "1"))
(rule "polySimp_rightDist" (formula "9") (term "1"))
(rule "mul_literals" (formula "9") (term "0,1"))
(rule "polySimp_mulLiterals" (formula "9") (term "1,1"))
(rule "polySimp_elimOne" (formula "9") (term "1,1"))
(rule "inEqSimp_exactShadow3" (formula "8") (ifseqformula "9"))
(rule "times_zero_1" (formula "8") (term "0,0"))
(rule "add_zero_left" (formula "8") (term "0"))
(rule "inEqSimp_sepPosMonomial1" (formula "8"))
(rule "mul_literals" (formula "8") (term "1"))
(rule "expand_addJint" (formula "13") (term "0,0,0,0,0,1"))
(rule "polySimp_addComm0" (formula "13") (term "0,0,0,0,0,0,1"))
(rule "expand_moduloInteger" (formula "13") (term "0,0,0,0,0,1"))
(rule "replace_int_HALFRANGE" (formula "13") (term "0,0,1,0,0,0,0,0,1"))
(rule "replace_int_RANGE" (formula "13") (term "1,1,0,0,0,0,0,1"))
(rule "replace_int_MIN" (formula "13") (term "0,0,0,0,0,0,1"))
(rule "polySimp_homoEq" (formula "13") (term "0,0,0,0,1"))
(rule "polySimp_mulComm0" (formula "13") (term "1,0,0,0,0,0,1"))
(rule "polySimp_rightDist" (formula "13") (term "1,0,0,0,0,0,1"))
(rule "mul_literals" (formula "13") (term "0,1,0,0,0,0,0,1"))
(rule "polySimp_addAssoc" (formula "13") (term "0,0,1,1,0,0,0,0,0,1"))
(rule "add_literals" (formula "13") (term "0,0,0,1,1,0,0,0,0,0,1"))
(rule "polySimp_addAssoc" (formula "13") (term "0,0,0,0,0,1"))
(rule "polySimp_addComm0" (formula "13") (term "0,0,0,0,0,0,1"))
(rule "polySimp_sepNegMonomial" (formula "13") (term "0,0,0,0,1"))
(rule "polySimp_mulLiterals" (formula "13") (term "0,0,0,0,0,1"))
(rule "polySimp_elimOne" (formula "13") (term "0,0,0,0,0,1"))
(rule "polyMod_pullOut" (formula "13") (term "0,0,0,0,0,1") (inst "polyDivCoeff=Z(1(#))"))
(rule "polySimp_mulLiterals" (formula "13") (term "1,0,0,0,0,0,0,1"))
(rule "mul_literals" (formula "13") (term "1,0,0,0,0,0,0,1"))
(rule "polySimp_addComm1" (formula "13") (term "0,0,0,0,0,0,1"))
(rule "add_literals" (formula "13") (term "0,0,0,0,0,0,0,1"))
(rule "Static_class_invariant_axiom_for_java_math_BigInteger" (formula "7"))
(rule "andLeft" (formula "7"))
(rule "notLeft" (formula "7"))
(rule "Static_class_invariant_axiom_for_de_polyas_core3_open_crypto_basic_Hashes" (formula "11"))
(rule "nonNull" (formula "11") (inst "i=i"))
(rule "greater_literals" (formula "11") (term "0,1"))
 (builtin "One Step Simplification" (formula "11"))
(rule "sub_literals" (formula "11") (term "2,1,0,1"))
 (builtin "One Step Simplification" (formula "11"))
(rule "andLeft" (formula "11"))
(rule "notLeft" (formula "11"))
(rule "narrowSelectArrayType" (formula "11") (term "0,0,1,0") (ifseqformula "1") (ifseqformula "12"))
(rule "inEqSimp_ltToLeq" (formula "11") (term "1,0,0"))
(rule "polySimp_mulComm0" (formula "11") (term "1,0,0,1,0,0"))
(rule "inEqSimp_commuteLeq" (formula "11") (term "0,0,0"))
(rule "inEqSimp_sepPosMonomial0" (formula "11") (term "1,0,0"))
(rule "polySimp_mulComm0" (formula "11") (term "1,1,0,0"))
(rule "polySimp_rightDist" (formula "11") (term "1,1,0,0"))
(rule "polySimp_mulLiterals" (formula "11") (term "1,1,1,0,0"))
(rule "mul_literals" (formula "11") (term "0,1,1,0,0"))
(rule "polySimp_elimOne" (formula "11") (term "1,1,1,0,0"))
(rule "nnf_imp2or" (formula "11") (term "0"))
(rule "nnf_notAnd" (formula "11") (term "0,0"))
(rule "inEqSimp_notLeq" (formula "11") (term "1,0,0"))
(rule "polySimp_rightDist" (formula "11") (term "1,0,0,1,0,0"))
(rule "mul_literals" (formula "11") (term "0,1,0,0,1,0,0"))
(rule "polySimp_addAssoc" (formula "11") (term "0,0,1,0,0"))
(rule "add_literals" (formula "11") (term "0,0,0,1,0,0"))
(rule "add_zero_left" (formula "11") (term "0,0,1,0,0"))
(rule "inEqSimp_sepPosMonomial1" (formula "11") (term "1,0,0"))
(rule "polySimp_mulLiterals" (formula "11") (term "1,1,0,0"))
(rule "polySimp_elimOne" (formula "11") (term "1,1,0,0"))
(rule "inEqSimp_notGeq" (formula "11") (term "0,0,0"))
(rule "times_zero_1" (formula "11") (term "1,0,0,0,0,0"))
(rule "add_zero_right" (formula "11") (term "0,0,0,0,0"))
(rule "inEqSimp_sepPosMonomial0" (formula "11") (term "0,0,0"))
(rule "mul_literals" (formula "11") (term "1,0,0,0"))
(rule "commute_or_2" (formula "11") (term "0"))
(rule "commute_or" (formula "11") (term "0,0"))
(rule "methodBodyExpand" (formula "15") (term "1") (newnames "heapBefore_uniformHash,savedHeapBefore_uniformHash"))
 (builtin "One Step Simplification" (formula "15"))
(rule "returnUnfold" (formula "15") (term "1") (inst "#v0=b"))
(rule "variableDeclarationAssign" (formula "15") (term "1"))
(rule "variableDeclaration" (formula "15") (term "1") (newnames "b_6"))
(rule "eval_order_array_access4" (formula "15") (term "1") (inst "#v0=b_arr"))
(rule "variableDeclarationAssign" (formula "15") (term "1"))
(rule "variableDeclaration" (formula "15") (term "1") (newnames "b_arr"))
(rule "activeUseStaticFieldReadAccess" (formula "15") (term "1"))
(rule "assignment_read_static_attribute" (formula "15") (term "1"))
 (builtin "One Step Simplification" (formula "15"))
(rule "eval_order_array_access5" (formula "15") (term "1") (inst "#v1=x") (inst "#ar1=b_arr_1"))
(rule "variableDeclarationAssign" (formula "15") (term "1"))
(rule "variableDeclaration" (formula "15") (term "1") (newnames "b_arr_1"))
(rule "assignment" (formula "15") (term "1"))
 (builtin "One Step Simplification" (formula "15"))
(rule "variableDeclarationAssign" (formula "15") (term "1"))
(rule "variableDeclaration" (formula "15") (term "1") (newnames "x"))
(rule "postincrement_assignment" (formula "15") (term "1") (inst "#v=x_1"))
(rule "variableDeclarationAssign" (formula "15") (term "1"))
(rule "variableDeclaration" (formula "15") (term "1") (newnames "x_1"))
(rule "activeUseStaticFieldReadAccess" (formula "15") (term "1"))
(rule "assignment_read_static_attribute" (formula "15") (term "1"))
 (builtin "One Step Simplification" (formula "15"))
(rule "activeUseStaticFieldWriteAccess" (formula "15") (term "1") (inst "#v0=x_2"))
(rule "variableDeclarationAssign" (formula "15") (term "1"))
(rule "variableDeclaration" (formula "15") (term "1") (newnames "x_2"))
(rule "compound_int_cast_expression" (formula "15") (term "1") (inst "#v=x_3"))
(rule "variableDeclarationAssign" (formula "15") (term "1"))
(rule "variableDeclaration" (formula "15") (term "1") (newnames "x_3"))
(rule "remove_parentheses_right" (formula "15") (term "1"))
(rule "compound_addition_1" (formula "15") (term "1") (inst "#v=x_4"))
(rule "variableDeclarationAssign" (formula "15") (term "1"))
(rule "variableDeclaration" (formula "15") (term "1") (newnames "x_4"))
(rule "activeUseStaticFieldReadAccess" (formula "15") (term "1"))
(rule "assignment_read_static_attribute" (formula "15") (term "1"))
 (builtin "One Step Simplification" (formula "15"))
(rule "assignmentAdditionInt" (formula "15") (term "1"))
 (builtin "One Step Simplification" (formula "15"))
(rule "translateJavaAddInt" (formula "15") (term "0,1,0"))
(rule "expand_addJint" (formula "15") (term "0,1,0"))
(rule "polySimp_addComm0" (formula "15") (term "0,0,1,0"))
(rule "expand_moduloInteger" (formula "15") (term "0,1,0"))
(rule "replace_int_RANGE" (formula "15") (term "1,1,0,1,0"))
(rule "replace_int_MIN" (formula "15") (term "0,0,1,0"))
(rule "replace_int_HALFRANGE" (formula "15") (term "0,0,1,0,1,0"))
(rule "polySimp_addAssoc" (formula "15") (term "0,1,0,1,0"))
(rule "add_literals" (formula "15") (term "0,0,1,0,1,0"))
(rule "polyMod_pullOut" (formula "15") (term "1,0,1,0") (inst "polyDivCoeff=Z(1(#))"))
(rule "polySimp_mulLiterals" (formula "15") (term "1,0,1,0,1,0"))
(rule "mul_literals" (formula "15") (term "1,0,1,0,1,0"))
(rule "polySimp_addComm1" (formula "15") (term "0,1,0,1,0"))
(rule "add_literals" (formula "15") (term "0,0,1,0,1,0"))
(rule "widening_identity_cast_5" (formula "15") (term "1"))
(rule "assignment" (formula "15") (term "1"))
 (builtin "One Step Simplification" (formula "15"))
(rule "assignment_write_static_attribute" (formula "15") (term "1"))
 (builtin "One Step Simplification" (formula "15"))
(rule "assignment" (formula "15") (term "1"))
 (builtin "One Step Simplification" (formula "15"))
(rule "assignment_array2" (formula "15") (term "1"))
(branch "Normal Execution (b_arr_1 != null)"
    (builtin "One Step Simplification" (formula "16"))
    (builtin "One Step Simplification" (formula "15") (ifInst ""  (formula "12")))
   (rule "orRight" (formula "15"))
   (rule "dismissNonSelectedField" (formula "17") (term "0,1,0"))
   (rule "inEqSimp_leqRight" (formula "15"))
   (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
   (rule "polySimp_addComm1" (formula "1") (term "0"))
   (rule "inEqSimp_ltRight" (formula "16"))
   (rule "mul_literals" (formula "1") (term "0,0"))
   (rule "add_zero_left" (formula "1") (term "0"))
   (rule "inEqSimp_sepNegMonomial1" (formula "1"))
   (rule "polySimp_mulLiterals" (formula "1") (term "0"))
   (rule "polySimp_elimOne" (formula "1") (term "0"))
   (rule "methodCallReturn" (formula "15") (term "1"))
   (rule "assignment" (formula "15") (term "1"))
    (builtin "One Step Simplification" (formula "15"))
   (rule "methodCallEmpty" (formula "15") (term "1"))
   (rule "tryEmpty" (formula "15") (term "1"))
   (rule "emptyModality" (formula "15") (term "1"))
    (builtin "One Step Simplification" (formula "15"))
   (rule "eqSymm" (formula "15") (term "1,0,0,1"))
   (rule "polySimp_homoEq" (formula "15") (term "0,0"))
   (rule "polySimp_addComm1" (formula "15") (term "0,0,0"))
   (rule "mod_axiom" (formula "15") (term "1,3,0,0,1,0"))
   (rule "polySimp_mulLiterals" (formula "15") (term "1,1,3,0,0,1,0"))
   (rule "polySimp_addAssoc" (formula "15") (term "3,0,0,1,0"))
   (rule "polySimp_addAssoc" (formula "15") (term "0,3,0,0,1,0"))
   (rule "add_literals" (formula "15") (term "0,0,3,0,0,1,0"))
   (rule "mod_axiom" (formula "15") (term "1,3,0,0,1,0,0,1"))
   (rule "polySimp_mulLiterals" (formula "15") (term "1,1,3,0,0,1,0,0,1"))
   (rule "polySimp_addAssoc" (formula "15") (term "3,0,0,1,0,0,1"))
   (rule "polySimp_addAssoc" (formula "15") (term "0,3,0,0,1,0,0,1"))
   (rule "add_literals" (formula "15") (term "0,0,3,0,0,1,0,0,1"))
   (rule "mod_axiom" (formula "15") (term "0,1,0,0,0,0"))
   (rule "polySimp_mulLiterals" (formula "15") (term "1,0,1,0,0,0,0"))
   (rule "polySimp_mulComm0" (formula "15") (term "1,0,0,0,0"))
   (rule "polySimp_rightDist" (formula "15") (term "1,0,0,0,0"))
   (rule "polySimp_mulLiterals" (formula "15") (term "1,1,0,0,0,0"))
   (rule "polySimp_rightDist" (formula "15") (term "0,1,0,0,0,0"))
   (rule "mul_literals" (formula "15") (term "0,0,1,0,0,0,0"))
   (rule "polySimp_addAssoc" (formula "15") (term "0,0,0,0"))
   (rule "polySimp_addAssoc" (formula "15") (term "0,0,0,0,0"))
   (rule "add_literals" (formula "15") (term "0,0,0,0,0,0"))
   (rule "mod_axiom" (formula "15") (term "1,3,0,1,0,0,0"))
   (rule "polySimp_mulLiterals" (formula "15") (term "1,1,3,0,1,0,0,0"))
   (rule "polySimp_addAssoc" (formula "15") (term "3,0,1,0,0,0"))
   (rule "polySimp_addAssoc" (formula "15") (term "0,3,0,1,0,0,0"))
   (rule "add_literals" (formula "15") (term "0,0,3,0,1,0,0,0"))
   (rule "polySimp_sepPosMonomial" (formula "15") (term "0,0"))
   (rule "polySimp_mulComm0" (formula "15") (term "1,0,0"))
   (rule "polySimp_rightDist" (formula "15") (term "1,0,0"))
   (rule "polySimp_mulLiterals" (formula "15") (term "1,1,0,0"))
   (rule "polySimp_rightDist" (formula "15") (term "0,1,0,0"))
   (rule "mul_literals" (formula "15") (term "0,0,1,0,0"))
   (rule "polySimp_mulLiterals" (formula "15") (term "1,0,1,0,0"))
   (rule "polySimp_elimOne" (formula "15") (term "1,0,1,0,0"))
   (rule "pullOutSelect" (formula "15") (term "0,0,0") (inst "selectSK=de_polyas_core3_open_crypto_basic_Hashes_currentIndex_0"))
   (rule "simplifySelectOfStore" (formula "1"))
    (builtin "One Step Simplification" (formula "1"))
   (rule "castDel" (formula "1") (term "0"))
   (rule "applyEqReverse" (formula "16") (term "0,0,0") (ifseqformula "1"))
    (builtin "One Step Simplification" (formula "16"))
   (rule "hideAuxiliaryEq" (formula "1"))
   (rule "Static_class_invariant_axiom_for_de_polyas_core3_open_crypto_basic_Hashes" (formula "15") (term "0,0"))
   (rule "dismissNonSelectedField" (formula "15") (term "1,0,0"))
   (rule "nonNull" (formula "15") (term "0,0") (inst "i=i"))
   (rule "sub_literals" (formula "15") (term "2,1,0,1,1,0,0"))
    (builtin "One Step Simplification" (formula "15") (ifInst ""  (formula "12")))
   (rule "greater_literals" (formula "15") (term "0,0,0"))
    (builtin "One Step Simplification" (formula "15"))
   (rule "dismissNonSelectedField" (formula "15") (term "0,0,1,0,0,0"))
   (rule "narrowSelectArrayType" (formula "15") (term "0,0,1,0,0,0") (ifseqformula "1") (ifseqformula "12"))
   (rule "inEqSimp_ltToLeq" (formula "15") (term "1,0,0,0,0"))
   (rule "polySimp_mulComm0" (formula "15") (term "1,0,0,1,0,0,0,0"))
   (rule "inEqSimp_commuteLeq" (formula "15") (term "0,0,0,0,0"))
   (rule "inEqSimp_sepPosMonomial0" (formula "15") (term "1,0,0,0,0"))
   (rule "polySimp_mulComm0" (formula "15") (term "1,1,0,0,0,0"))
   (rule "polySimp_rightDist" (formula "15") (term "1,1,0,0,0,0"))
   (rule "mul_literals" (formula "15") (term "0,1,1,0,0,0,0"))
   (rule "polySimp_mulLiterals" (formula "15") (term "1,1,1,0,0,0,0"))
   (rule "polySimp_elimOne" (formula "15") (term "1,1,1,0,0,0,0"))
   (rule "nnf_imp2or" (formula "15") (term "0,0,0"))
   (rule "nnf_notAnd" (formula "15") (term "0,0,0,0"))
   (rule "inEqSimp_notGeq" (formula "15") (term "0,0,0,0,0"))
   (rule "times_zero_1" (formula "15") (term "1,0,0,0,0,0,0,0"))
   (rule "add_zero_right" (formula "15") (term "0,0,0,0,0,0,0"))
   (rule "inEqSimp_sepPosMonomial0" (formula "15") (term "0,0,0,0,0"))
   (rule "mul_literals" (formula "15") (term "1,0,0,0,0,0"))
   (rule "inEqSimp_notLeq" (formula "15") (term "1,0,0,0,0"))
   (rule "polySimp_rightDist" (formula "15") (term "1,0,0,1,0,0,0,0"))
   (rule "mul_literals" (formula "15") (term "0,1,0,0,1,0,0,0,0"))
   (rule "polySimp_addAssoc" (formula "15") (term "0,0,1,0,0,0,0"))
   (rule "add_literals" (formula "15") (term "0,0,0,1,0,0,0,0"))
   (rule "add_zero_left" (formula "15") (term "0,0,1,0,0,0,0"))
   (rule "inEqSimp_sepPosMonomial1" (formula "15") (term "1,0,0,0,0"))
   (rule "polySimp_mulLiterals" (formula "15") (term "1,1,0,0,0,0"))
   (rule "polySimp_elimOne" (formula "15") (term "1,1,0,0,0,0"))
   (rule "cut_direct" (formula "5") (term "0"))
   (branch "CUT: s3_6 = null TRUE"
       (builtin "One Step Simplification" (formula "6"))
      (rule "true_left" (formula "6"))
      (rule "cut_direct" (formula "4") (term "0"))
      (branch "CUT: s2_13 = null TRUE"
          (builtin "One Step Simplification" (formula "5"))
         (rule "true_left" (formula "5"))
         (rule "cut_direct" (formula "3") (term "0"))
         (branch "CUT: s1_13 = null TRUE"
             (builtin "One Step Simplification" (formula "4"))
            (rule "true_left" (formula "4"))
            (rule "arrayLengthNotNegative" (formula "10") (term "1,1"))
            (rule "inEqSimp_subsumption1" (formula "10") (ifseqformula "8"))
            (rule "leq_literals" (formula "10") (term "0"))
             (builtin "One Step Simplification" (formula "10"))
            (rule "true_left" (formula "10"))
            (rule "arrayLengthIsAnInt" (formula "10") (term "1,1"))
            (rule "expand_inInt" (formula "10"))
            (rule "replace_int_MAX" (formula "10") (term "1,0"))
            (rule "replace_int_MIN" (formula "10") (term "0,1"))
            (rule "andLeft" (formula "10"))
            (rule "inEqSimp_commuteLeq" (formula "11"))
            (rule "inEqSimp_subsumption1" (formula "11") (ifseqformula "8"))
            (rule "leq_literals" (formula "11") (term "0"))
             (builtin "One Step Simplification" (formula "11"))
            (rule "true_left" (formula "11"))
            (rule "div_axiom" (formula "16") (term "0,1,3,0,0,1,0,0,1") (inst "quotient=quotient_0"))
            (rule "mul_literals" (formula "1") (term "1,1,1,1,1"))
            (rule "qeq_literals" (formula "1") (term "0,1,1"))
             (builtin "One Step Simplification" (formula "1"))
            (rule "equal_literals" (formula "1") (term "0"))
             (builtin "One Step Simplification" (formula "1"))
            (rule "andLeft" (formula "1"))
            (rule "andLeft" (formula "1"))
            (rule "polySimp_addAssoc" (formula "3") (term "0,1"))
            (rule "add_literals" (formula "3") (term "0,0,1"))
            (rule "polySimp_addComm1" (formula "3") (term "1"))
            (rule "add_literals" (formula "3") (term "0,1"))
            (rule "inEqSimp_homoInEq0" (formula "2"))
            (rule "polySimp_mulLiterals" (formula "2") (term "1,0"))
            (rule "polySimp_addComm1" (formula "2") (term "0"))
            (rule "inEqSimp_homoInEq1" (formula "3"))
            (rule "polySimp_mulLiterals" (formula "3") (term "1,0"))
            (rule "polySimp_addComm1" (formula "3") (term "0"))
            (rule "applyEq" (formula "19") (term "0,1,3,0,0,1,0,0,1") (ifseqformula "1"))
            (rule "polySimp_addComm1" (formula "19") (term "3,0,0,1,0,0,1"))
            (rule "inEqSimp_sepPosMonomial1" (formula "2"))
            (rule "polySimp_mulComm0" (formula "2") (term "1"))
            (rule "polySimp_rightDist" (formula "2") (term "1"))
            (rule "polySimp_mulLiterals" (formula "2") (term "1,1"))
            (rule "mul_literals" (formula "2") (term "0,1"))
            (rule "inEqSimp_sepPosMonomial0" (formula "3"))
            (rule "polySimp_mulComm0" (formula "3") (term "1"))
            (rule "polySimp_rightDist" (formula "3") (term "1"))
            (rule "polySimp_mulLiterals" (formula "3") (term "1,1"))
            (rule "mul_literals" (formula "3") (term "0,1"))
            (rule "inEqSimp_exactShadow3" (formula "12") (ifseqformula "3"))
            (rule "times_zero_1" (formula "12") (term "0,0"))
            (rule "add_zero_left" (formula "12") (term "0"))
            (rule "inEqSimp_sepPosMonomial1" (formula "12"))
            (rule "mul_literals" (formula "12") (term "1"))
            (rule "elimGcdGeq_antec" (formula "12") (inst "elimGcdRightDiv=Z(neglit(1(#)))") (inst "elimGcdLeftDiv=quotient_0") (inst "elimGcd=Z(6(9(2(7(6(9(4(9(2(4(#)))))))))))"))
            (rule "polySimp_mulLiterals" (formula "12") (term "1,0,1,0"))
            (rule "polySimp_mulLiterals" (formula "12") (term "1,0,0,0,0,1,0"))
            (rule "leq_literals" (formula "12") (term "0,0"))
             (builtin "One Step Simplification" (formula "12"))
            (rule "mul_literals" (formula "12") (term "1,0,0,0,0,0"))
            (rule "polySimp_addLiterals" (formula "12") (term "0,0,0,0"))
            (rule "add_literals" (formula "12") (term "0,0,0,0"))
            (rule "polySimp_pullOutFactor0b" (formula "12") (term "0,0"))
            (rule "add_literals" (formula "12") (term "1,1,0,0"))
            (rule "times_zero_1" (formula "12") (term "1,0,0"))
            (rule "add_zero_right" (formula "12") (term "0,0"))
            (rule "leq_literals" (formula "12") (term "0"))
             (builtin "One Step Simplification" (formula "12"))
            (rule "inEqSimp_exactShadow3" (formula "2") (ifseqformula "15"))
            (rule "polySimp_rightDist" (formula "2") (term "0,0"))
            (rule "mul_literals" (formula "2") (term "0,0,0"))
            (rule "polySimp_mulLiterals" (formula "2") (term "1,0,0"))
            (rule "polySimp_addAssoc" (formula "2") (term "0"))
            (rule "polySimp_addComm1" (formula "2") (term "0,0"))
            (rule "add_literals" (formula "2") (term "0,0,0"))
            (rule "inEqSimp_sepPosMonomial1" (formula "2"))
            (rule "polySimp_mulComm0" (formula "2") (term "1"))
            (rule "polySimp_rightDist" (formula "2") (term "1"))
            (rule "polySimp_mulLiterals" (formula "2") (term "1,1"))
            (rule "mul_literals" (formula "2") (term "0,1"))
            (rule "inEqSimp_exactShadow3" (formula "2") (ifseqformula "15"))
            (rule "polySimp_rightDist" (formula "2") (term "0,0"))
            (rule "polySimp_mulLiterals" (formula "2") (term "1,0,0"))
            (rule "mul_literals" (formula "2") (term "0,0,0"))
            (rule "polySimp_addComm1" (formula "2") (term "0"))
            (rule "add_literals" (formula "2") (term "0,0"))
            (rule "inEqSimp_sepNegMonomial1" (formula "2"))
            (rule "polySimp_mulLiterals" (formula "2") (term "0"))
            (rule "elimGcdLeq_antec" (formula "2") (inst "elimGcdRightDiv=Z(neglit(1(#)))") (inst "elimGcdLeftDiv=quotient_0") (inst "elimGcd=Z(6(9(2(7(6(9(4(9(2(4(#)))))))))))"))
            (rule "neg_literal" (formula "2") (term "0,0,0,0,0,1,0"))
            (rule "polySimp_mulLiterals" (formula "2") (term "1,0,0,0,0,1,0"))
            (rule "polySimp_mulLiterals" (formula "2") (term "1,0,1,0"))
            (rule "leq_literals" (formula "2") (term "0,0"))
             (builtin "One Step Simplification" (formula "2"))
            (rule "mul_literals" (formula "2") (term "1,0,0,0,0,0"))
            (rule "polySimp_addLiterals" (formula "2") (term "0,0,0,0"))
            (rule "add_literals" (formula "2") (term "0,0,0,0"))
            (rule "polySimp_pullOutFactor0b" (formula "2") (term "0,0"))
            (rule "add_literals" (formula "2") (term "1,1,0,0"))
            (rule "times_zero_1" (formula "2") (term "1,0,0"))
            (rule "add_zero_right" (formula "2") (term "0,0"))
            (rule "qeq_literals" (formula "2") (term "0"))
             (builtin "One Step Simplification" (formula "2"))
            (rule "inEqSimp_antiSymm" (formula "14") (ifseqformula "2"))
            (rule "applyEq" (formula "5") (term "0,1,1") (ifseqformula "14"))
            (rule "mul_literals" (formula "5") (term "1,1"))
            (rule "add_literals" (formula "5") (term "1"))
            (rule "applyEqRigid" (formula "4") (term "0,1,1") (ifseqformula "14"))
            (rule "mul_literals" (formula "4") (term "1,1"))
            (rule "add_literals" (formula "4") (term "1"))
            (rule "applyEqRigid" (formula "2") (term "0") (ifseqformula "14"))
            (rule "leq_literals" (formula "2"))
            (rule "true_left" (formula "2"))
            (rule "applyEq" (formula "2") (term "0,1,1") (ifseqformula "13"))
            (rule "mul_literals" (formula "2") (term "1,1"))
            (rule "add_literals" (formula "2") (term "1"))
            (rule "applyEqRigid" (formula "14") (term "0") (ifseqformula "13"))
            (rule "qeq_literals" (formula "14"))
            (rule "true_left" (formula "14"))
            (rule "applyEq" (formula "1") (term "1") (ifseqformula "13"))
            (rule "applyEq" (formula "21") (term "0,1,0,3,0,0,1,0,0,1") (ifseqformula "13"))
            (rule "mul_literals" (formula "21") (term "1,0,3,0,0,1,0,0,1"))
            (rule "add_literals" (formula "21") (term "0,3,0,0,1,0,0,1"))
            (rule "inEqSimp_subsumption1" (formula "3") (ifseqformula "14"))
            (rule "leq_literals" (formula "3") (term "0"))
             (builtin "One Step Simplification" (formula "3"))
            (rule "true_left" (formula "3"))
            (rule "inEqSimp_subsumption1" (formula "2") (ifseqformula "11"))
            (rule "leq_literals" (formula "2") (term "0"))
             (builtin "One Step Simplification" (formula "2"))
            (rule "true_left" (formula "2"))
            (rule "allLeft" (formula "15") (inst "t=int::select(heap,
            null,
            de.polyas.core3.open.crypto.basic.Hashes::$currentIndex)"))
            (rule "inEqSimp_contradInEq0" (formula "15") (term "1") (ifseqformula "14"))
            (rule "inEqSimp_homoInEq1" (formula "15") (term "0,1"))
            (rule "polySimp_mulComm0" (formula "15") (term "1,0,0,1"))
            (rule "polySimp_rightDist" (formula "15") (term "1,0,0,1"))
            (rule "mul_literals" (formula "15") (term "0,1,0,0,1"))
            (rule "polySimp_addAssoc" (formula "15") (term "0,0,1"))
            (rule "polySimp_addComm0" (formula "15") (term "0,0,0,1"))
            (rule "polySimp_pullOutFactor1b" (formula "15") (term "0,0,1"))
            (rule "add_literals" (formula "15") (term "1,1,0,0,1"))
            (rule "times_zero_1" (formula "15") (term "1,0,0,1"))
            (rule "add_zero_right" (formula "15") (term "0,0,1"))
            (rule "leq_literals" (formula "15") (term "0,1"))
             (builtin "One Step Simplification" (formula "15"))
            (rule "inEqSimp_contradInEq1" (formula "15") (term "1") (ifseqformula "12"))
            (rule "qeq_literals" (formula "15") (term "0,1"))
             (builtin "One Step Simplification" (formula "15"))
            (rule "notLeft" (formula "15"))
            (rule "replace_known_right" (formula "20") (term "0,1,0") (ifseqformula "16"))
             (builtin "One Step Simplification" (formula "20"))
            (rule "andRight" (formula "20"))
            (branch
               (rule "allRight" (formula "20") (inst "sk=i_0"))
               (rule "orRight" (formula "20"))
               (rule "orRight" (formula "20"))
               (rule "notRight" (formula "22"))
               (rule "inEqSimp_leqRight" (formula "21"))
               (rule "mul_literals" (formula "1") (term "1,0,0"))
               (rule "add_literals" (formula "1") (term "0,0"))
               (rule "add_zero_left" (formula "1") (term "0"))
               (rule "inEqSimp_geqRight" (formula "22"))
               (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
               (rule "polySimp_addComm1" (formula "1") (term "0"))
               (rule "inEqSimp_sepNegMonomial0" (formula "1"))
               (rule "polySimp_mulLiterals" (formula "1") (term "0"))
               (rule "polySimp_elimOne" (formula "1") (term "0"))
               (rule "inEqSimp_exactShadow3" (formula "1") (ifseqformula "16"))
               (rule "polySimp_rightDist" (formula "1") (term "0,0"))
               (rule "mul_literals" (formula "1") (term "0,0,0"))
               (rule "polySimp_addComm1" (formula "1") (term "0"))
               (rule "add_literals" (formula "1") (term "0,0"))
               (rule "inEqSimp_sepNegMonomial1" (formula "1"))
               (rule "polySimp_mulLiterals" (formula "1") (term "0"))
               (rule "polySimp_elimOne" (formula "1") (term "0"))
               (rule "onlyCreatedObjectsAreReferenced" (formula "18") (term "0,1,1") (ifseqformula "7"))
               (rule "replace_known_right" (formula "18") (term "0") (ifseqformula "22"))
                (builtin "One Step Simplification" (formula "18"))
               (rule "onlyCreatedObjectsAreReferenced" (formula "23") (term "0") (ifseqformula "7"))
               (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "24"))
                (builtin "One Step Simplification" (formula "1"))
               (rule "allLeft" (formula "21") (inst "t=i_0"))
               (rule "replace_known_left" (formula "21") (term "0,0,0") (ifseqformula "5"))
                (builtin "One Step Simplification" (formula "21"))
               (rule "inEqSimp_commuteGeq" (formula "21") (term "1"))
               (rule "inEqSimp_contradInEq1" (formula "21") (term "0") (ifseqformula "4"))
               (rule "qeq_literals" (formula "21") (term "0,0"))
                (builtin "One Step Simplification" (formula "21"))
               (rule "inEqSimp_contradInEq1" (formula "21") (ifseqformula "3"))
               (rule "andLeft" (formula "21"))
               (rule "inEqSimp_homoInEq1" (formula "21"))
               (rule "polySimp_pullOutFactor1b" (formula "21") (term "0"))
               (rule "add_literals" (formula "21") (term "1,1,0"))
               (rule "times_zero_1" (formula "21") (term "1,0"))
               (rule "add_literals" (formula "21") (term "0"))
               (rule "leq_literals" (formula "21"))
               (rule "closeFalse" (formula "21"))
            )
            (branch
               (rule "allRight" (formula "20") (inst "sk=f_0"))
               (rule "allRight" (formula "20") (inst "sk=o_0"))
               (rule "orRight" (formula "20"))
               (rule "orRight" (formula "20"))
               (rule "pullOutSelect" (formula "22") (term "0") (inst "selectSK=f_0_0"))
               (rule "simplifySelectOfStore" (formula "1"))
                (builtin "One Step Simplification" (formula "1"))
               (rule "castDel" (formula "1") (term "1,0"))
               (rule "eqSymm" (formula "23"))
               (rule "eqSymm" (formula "1") (term "0,0,0"))
               (rule "eqSymm" (formula "1") (term "1,0,0"))
               (rule "replace_known_right" (formula "1") (term "0,0") (ifseqformula "21"))
                (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "23")))
               (rule "closeFalse" (formula "1"))
            )
         )
         (branch "CUT: s1_13 = null FALSE"
             (builtin "One Step Simplification" (formula "3"))
            (rule "arrayLengthNotNegative" (formula "10") (term "1,1"))
            (rule "inEqSimp_subsumption1" (formula "10") (ifseqformula "8"))
            (rule "leq_literals" (formula "10") (term "0"))
             (builtin "One Step Simplification" (formula "10"))
            (rule "true_left" (formula "10"))
            (rule "arrayLengthIsAnInt" (formula "10") (term "1,1"))
            (rule "expand_inInt" (formula "10"))
            (rule "replace_int_MIN" (formula "10") (term "0,1"))
            (rule "replace_int_MAX" (formula "10") (term "1,0"))
            (rule "andLeft" (formula "10"))
            (rule "inEqSimp_commuteLeq" (formula "11"))
            (rule "inEqSimp_subsumption1" (formula "11") (ifseqformula "8"))
            (rule "leq_literals" (formula "11") (term "0"))
             (builtin "One Step Simplification" (formula "11"))
            (rule "true_left" (formula "11"))
            (rule "div_axiom" (formula "17") (term "0,1,3,0,0,1,0,0,1") (inst "quotient=quotient_0"))
            (rule "equal_literals" (formula "1") (term "0"))
             (builtin "One Step Simplification" (formula "1"))
            (rule "qeq_literals" (formula "1") (term "0,1"))
             (builtin "One Step Simplification" (formula "1"))
            (rule "mul_literals" (formula "1") (term "1,1,1"))
            (rule "andLeft" (formula "1"))
            (rule "andLeft" (formula "1"))
            (rule "polySimp_addAssoc" (formula "3") (term "0,1"))
            (rule "add_literals" (formula "3") (term "0,0,1"))
            (rule "polySimp_addComm1" (formula "3") (term "1"))
            (rule "add_literals" (formula "3") (term "0,1"))
            (rule "inEqSimp_homoInEq0" (formula "2"))
            (rule "polySimp_mulLiterals" (formula "2") (term "1,0"))
            (rule "polySimp_addComm1" (formula "2") (term "0"))
            (rule "inEqSimp_homoInEq1" (formula "3"))
            (rule "polySimp_mulLiterals" (formula "3") (term "1,0"))
            (rule "polySimp_addComm1" (formula "3") (term "0"))
            (rule "applyEq" (formula "20") (term "0,1,3,0,0,1,0,0,1") (ifseqformula "1"))
            (rule "polySimp_addComm1" (formula "20") (term "3,0,0,1,0,0,1"))
            (rule "inEqSimp_sepPosMonomial1" (formula "2"))
            (rule "polySimp_mulComm0" (formula "2") (term "1"))
            (rule "polySimp_rightDist" (formula "2") (term "1"))
            (rule "polySimp_mulLiterals" (formula "2") (term "1,1"))
            (rule "mul_literals" (formula "2") (term "0,1"))
            (rule "inEqSimp_sepPosMonomial0" (formula "3"))
            (rule "polySimp_mulComm0" (formula "3") (term "1"))
            (rule "polySimp_rightDist" (formula "3") (term "1"))
            (rule "polySimp_mulLiterals" (formula "3") (term "1,1"))
            (rule "mul_literals" (formula "3") (term "0,1"))
            (rule "inEqSimp_exactShadow3" (formula "12") (ifseqformula "3"))
            (rule "times_zero_1" (formula "12") (term "0,0"))
            (rule "add_zero_left" (formula "12") (term "0"))
            (rule "inEqSimp_sepPosMonomial1" (formula "12"))
            (rule "mul_literals" (formula "12") (term "1"))
            (rule "elimGcdGeq_antec" (formula "12") (inst "elimGcdRightDiv=Z(neglit(1(#)))") (inst "elimGcdLeftDiv=quotient_0") (inst "elimGcd=Z(6(9(2(7(6(9(4(9(2(4(#)))))))))))"))
            (rule "polySimp_mulLiterals" (formula "12") (term "1,0,1,0"))
            (rule "leq_literals" (formula "12") (term "0,0"))
             (builtin "One Step Simplification" (formula "12"))
            (rule "polySimp_mulLiterals" (formula "12") (term "1,0,0,0,0,0"))
            (rule "mul_literals" (formula "12") (term "1,0,0,0,0,0"))
            (rule "polySimp_addLiterals" (formula "12") (term "0,0,0,0"))
            (rule "add_literals" (formula "12") (term "0,0,0,0"))
            (rule "polySimp_pullOutFactor0b" (formula "12") (term "0,0"))
            (rule "add_literals" (formula "12") (term "1,1,0,0"))
            (rule "times_zero_1" (formula "12") (term "1,0,0"))
            (rule "add_zero_right" (formula "12") (term "0,0"))
            (rule "leq_literals" (formula "12") (term "0"))
             (builtin "One Step Simplification" (formula "12"))
            (rule "inEqSimp_exactShadow3" (formula "2") (ifseqformula "15"))
            (rule "polySimp_rightDist" (formula "2") (term "0,0"))
            (rule "polySimp_mulLiterals" (formula "2") (term "1,0,0"))
            (rule "mul_literals" (formula "2") (term "0,0,0"))
            (rule "polySimp_addAssoc" (formula "2") (term "0"))
            (rule "polySimp_addComm1" (formula "2") (term "0,0"))
            (rule "add_literals" (formula "2") (term "0,0,0"))
            (rule "inEqSimp_sepPosMonomial1" (formula "2"))
            (rule "polySimp_mulComm0" (formula "2") (term "1"))
            (rule "polySimp_rightDist" (formula "2") (term "1"))
            (rule "polySimp_mulLiterals" (formula "2") (term "1,1"))
            (rule "mul_literals" (formula "2") (term "0,1"))
            (rule "inEqSimp_exactShadow3" (formula "2") (ifseqformula "15"))
            (rule "polySimp_rightDist" (formula "2") (term "0,0"))
            (rule "mul_literals" (formula "2") (term "0,0,0"))
            (rule "polySimp_mulLiterals" (formula "2") (term "1,0,0"))
            (rule "polySimp_addComm1" (formula "2") (term "0"))
            (rule "add_literals" (formula "2") (term "0,0"))
            (rule "inEqSimp_sepNegMonomial1" (formula "2"))
            (rule "polySimp_mulLiterals" (formula "2") (term "0"))
            (rule "elimGcdLeq_antec" (formula "2") (inst "elimGcdRightDiv=Z(neglit(1(#)))") (inst "elimGcdLeftDiv=quotient_0") (inst "elimGcd=Z(6(9(2(7(6(9(4(9(2(4(#)))))))))))"))
            (rule "leq_literals" (formula "2") (term "0,0"))
             (builtin "One Step Simplification" (formula "2"))
            (rule "polySimp_mulLiterals" (formula "2") (term "1,0,0,0,0,0"))
            (rule "polySimp_mulLiterals" (formula "2") (term "1,0,0"))
            (rule "neg_literal" (formula "2") (term "0,0,0,0,0,0"))
            (rule "mul_literals" (formula "2") (term "1,0,0,0,0,0"))
            (rule "polySimp_addLiterals" (formula "2") (term "0,0,0,0"))
            (rule "add_literals" (formula "2") (term "0,0,0,0"))
            (rule "polySimp_pullOutFactor0b" (formula "2") (term "0,0"))
            (rule "add_literals" (formula "2") (term "1,1,0,0"))
            (rule "times_zero_1" (formula "2") (term "1,0,0"))
            (rule "add_zero_right" (formula "2") (term "0,0"))
            (rule "qeq_literals" (formula "2") (term "0"))
             (builtin "One Step Simplification" (formula "2"))
            (rule "inEqSimp_antiSymm" (formula "14") (ifseqformula "2"))
            (rule "applyEqRigid" (formula "4") (term "0,1,1") (ifseqformula "14"))
            (rule "mul_literals" (formula "4") (term "1,1"))
            (rule "add_literals" (formula "4") (term "1"))
            (rule "applyEqRigid" (formula "5") (term "0,1,1") (ifseqformula "14"))
            (rule "mul_literals" (formula "5") (term "1,1"))
            (rule "add_literals" (formula "5") (term "1"))
            (rule "applyEqRigid" (formula "2") (term "0") (ifseqformula "14"))
            (rule "leq_literals" (formula "2"))
            (rule "true_left" (formula "2"))
            (rule "applyEq" (formula "14") (term "0") (ifseqformula "13"))
            (rule "qeq_literals" (formula "14"))
            (rule "true_left" (formula "14"))
            (rule "applyEqRigid" (formula "2") (term "0,1,1") (ifseqformula "13"))
            (rule "mul_literals" (formula "2") (term "1,1"))
            (rule "add_literals" (formula "2") (term "1"))
            (rule "applyEqRigid" (formula "1") (term "1") (ifseqformula "13"))
            (rule "applyEqRigid" (formula "22") (term "0,1,0,3,0,0,1,0,0,1") (ifseqformula "13"))
            (rule "mul_literals" (formula "22") (term "1,0,3,0,0,1,0,0,1"))
            (rule "add_literals" (formula "22") (term "0,3,0,0,1,0,0,1"))
            (rule "inEqSimp_subsumption1" (formula "2") (ifseqformula "12"))
            (rule "leq_literals" (formula "2") (term "0"))
             (builtin "One Step Simplification" (formula "2"))
            (rule "true_left" (formula "2"))
            (rule "inEqSimp_subsumption1" (formula "2") (ifseqformula "13"))
            (rule "leq_literals" (formula "2") (term "0"))
             (builtin "One Step Simplification" (formula "2"))
            (rule "true_left" (formula "2"))
            (rule "allLeft" (formula "15") (inst "t=int::select(heap,
            null,
            de.polyas.core3.open.crypto.basic.Hashes::$currentIndex)"))
            (rule "inEqSimp_contradInEq0" (formula "15") (term "1") (ifseqformula "14"))
            (rule "inEqSimp_homoInEq1" (formula "15") (term "0,1"))
            (rule "polySimp_mulComm0" (formula "15") (term "1,0,0,1"))
            (rule "polySimp_rightDist" (formula "15") (term "1,0,0,1"))
            (rule "mul_literals" (formula "15") (term "0,1,0,0,1"))
            (rule "polySimp_addAssoc" (formula "15") (term "0,0,1"))
            (rule "polySimp_addComm0" (formula "15") (term "0,0,0,1"))
            (rule "polySimp_pullOutFactor1b" (formula "15") (term "0,0,1"))
            (rule "add_literals" (formula "15") (term "1,1,0,0,1"))
            (rule "times_zero_1" (formula "15") (term "1,0,0,1"))
            (rule "add_zero_right" (formula "15") (term "0,0,1"))
            (rule "leq_literals" (formula "15") (term "0,1"))
             (builtin "One Step Simplification" (formula "15"))
            (rule "inEqSimp_contradInEq1" (formula "15") (term "1") (ifseqformula "12"))
            (rule "qeq_literals" (formula "15") (term "0,1"))
             (builtin "One Step Simplification" (formula "15"))
            (rule "notLeft" (formula "15"))
            (rule "replace_known_right" (formula "21") (term "0,1,0") (ifseqformula "16"))
             (builtin "One Step Simplification" (formula "21"))
            (rule "andRight" (formula "21"))
            (branch
               (rule "allRight" (formula "21") (inst "sk=i_0"))
               (rule "orRight" (formula "21"))
               (rule "notRight" (formula "22"))
               (rule "orRight" (formula "22"))
               (rule "inEqSimp_leqRight" (formula "22"))
               (rule "mul_literals" (formula "1") (term "1,0,0"))
               (rule "add_literals" (formula "1") (term "0,0"))
               (rule "add_zero_left" (formula "1") (term "0"))
               (rule "inEqSimp_geqRight" (formula "23"))
               (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
               (rule "polySimp_addComm1" (formula "1") (term "0"))
               (rule "inEqSimp_sepNegMonomial0" (formula "1"))
               (rule "polySimp_mulLiterals" (formula "1") (term "0"))
               (rule "polySimp_elimOne" (formula "1") (term "0"))
               (rule "inEqSimp_exactShadow3" (formula "1") (ifseqformula "16"))
               (rule "polySimp_rightDist" (formula "1") (term "0,0"))
               (rule "mul_literals" (formula "1") (term "0,0,0"))
               (rule "polySimp_addComm1" (formula "1") (term "0"))
               (rule "add_literals" (formula "1") (term "0,0"))
               (rule "inEqSimp_sepNegMonomial1" (formula "1"))
               (rule "polySimp_mulLiterals" (formula "1") (term "0"))
               (rule "polySimp_elimOne" (formula "1") (term "0"))
               (rule "onlyCreatedObjectsAreReferenced" (formula "18") (term "0,1,1") (ifseqformula "7"))
               (rule "replace_known_right" (formula "18") (term "0") (ifseqformula "23"))
                (builtin "One Step Simplification" (formula "18"))
               (rule "onlyCreatedObjectsAreReferenced" (formula "24") (term "0") (ifseqformula "7"))
               (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "25"))
                (builtin "One Step Simplification" (formula "1"))
               (rule "allLeft" (formula "21") (inst "t=i_0"))
               (rule "replace_known_left" (formula "21") (term "0,0,0") (ifseqformula "5"))
                (builtin "One Step Simplification" (formula "21"))
               (rule "inEqSimp_commuteGeq" (formula "21") (term "1"))
               (rule "inEqSimp_contradInEq1" (formula "21") (term "0") (ifseqformula "4"))
               (rule "qeq_literals" (formula "21") (term "0,0"))
                (builtin "One Step Simplification" (formula "21"))
               (rule "inEqSimp_contradInEq1" (formula "21") (ifseqformula "3"))
               (rule "andLeft" (formula "21"))
               (rule "inEqSimp_homoInEq1" (formula "21"))
               (rule "polySimp_pullOutFactor1b" (formula "21") (term "0"))
               (rule "add_literals" (formula "21") (term "1,1,0"))
               (rule "times_zero_1" (formula "21") (term "1,0"))
               (rule "add_zero_right" (formula "21") (term "0"))
               (rule "leq_literals" (formula "21"))
               (rule "closeFalse" (formula "21"))
            )
            (branch
               (rule "allRight" (formula "21") (inst "sk=f_0"))
               (rule "allRight" (formula "21") (inst "sk=o_0"))
               (rule "orRight" (formula "21"))
               (rule "orRight" (formula "21"))
               (rule "pullOutSelect" (formula "23") (term "0") (inst "selectSK=f_0_0"))
               (rule "simplifySelectOfStore" (formula "1"))
                (builtin "One Step Simplification" (formula "1"))
               (rule "castDel" (formula "1") (term "1,0"))
               (rule "eqSymm" (formula "24"))
               (rule "eqSymm" (formula "1") (term "0,0,0"))
               (rule "eqSymm" (formula "1") (term "1,0,0"))
               (rule "replace_known_right" (formula "1") (term "0,0") (ifseqformula "22"))
                (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "24")))
               (rule "closeFalse" (formula "1"))
            )
         )
      )
      (branch "CUT: s2_13 = null FALSE"
          (builtin "One Step Simplification" (formula "4"))
         (rule "cut_direct" (formula "3") (term "0"))
         (branch "CUT: s1_13 = null TRUE"
             (builtin "One Step Simplification" (formula "4"))
            (rule "true_left" (formula "4"))
            (rule "arrayLengthNotNegative" (formula "10") (term "1,1"))
            (rule "inEqSimp_subsumption1" (formula "10") (ifseqformula "8"))
            (rule "leq_literals" (formula "10") (term "0"))
             (builtin "One Step Simplification" (formula "10"))
            (rule "true_left" (formula "10"))
            (rule "arrayLengthIsAnInt" (formula "10") (term "1,1"))
            (rule "expand_inInt" (formula "10"))
            (rule "replace_int_MIN" (formula "10") (term "0,1"))
            (rule "replace_int_MAX" (formula "10") (term "1,0"))
            (rule "andLeft" (formula "10"))
            (rule "inEqSimp_commuteLeq" (formula "11"))
            (rule "inEqSimp_subsumption1" (formula "11") (ifseqformula "8"))
            (rule "leq_literals" (formula "11") (term "0"))
             (builtin "One Step Simplification" (formula "11"))
            (rule "true_left" (formula "11"))
            (rule "div_axiom" (formula "17") (term "0,1,3,0,0,1,0,0,1") (inst "quotient=quotient_0"))
            (rule "equal_literals" (formula "1") (term "0"))
             (builtin "One Step Simplification" (formula "1"))
            (rule "qeq_literals" (formula "1") (term "0,1"))
             (builtin "One Step Simplification" (formula "1"))
            (rule "mul_literals" (formula "1") (term "1,1,1"))
            (rule "andLeft" (formula "1"))
            (rule "andLeft" (formula "1"))
            (rule "polySimp_addAssoc" (formula "3") (term "0,1"))
            (rule "add_literals" (formula "3") (term "0,0,1"))
            (rule "polySimp_addComm1" (formula "3") (term "1"))
            (rule "add_literals" (formula "3") (term "0,1"))
            (rule "inEqSimp_homoInEq0" (formula "2"))
            (rule "polySimp_mulLiterals" (formula "2") (term "1,0"))
            (rule "polySimp_addComm1" (formula "2") (term "0"))
            (rule "inEqSimp_homoInEq1" (formula "3"))
            (rule "polySimp_mulLiterals" (formula "3") (term "1,0"))
            (rule "polySimp_addComm1" (formula "3") (term "0"))
            (rule "applyEq" (formula "20") (term "0,1,3,0,0,1,0,0,1") (ifseqformula "1"))
            (rule "polySimp_addComm1" (formula "20") (term "3,0,0,1,0,0,1"))
            (rule "inEqSimp_sepPosMonomial1" (formula "2"))
            (rule "polySimp_mulComm0" (formula "2") (term "1"))
            (rule "polySimp_rightDist" (formula "2") (term "1"))
            (rule "polySimp_mulLiterals" (formula "2") (term "1,1"))
            (rule "mul_literals" (formula "2") (term "0,1"))
            (rule "inEqSimp_sepPosMonomial0" (formula "3"))
            (rule "polySimp_mulComm0" (formula "3") (term "1"))
            (rule "polySimp_rightDist" (formula "3") (term "1"))
            (rule "polySimp_mulLiterals" (formula "3") (term "1,1"))
            (rule "mul_literals" (formula "3") (term "0,1"))
            (rule "inEqSimp_exactShadow3" (formula "12") (ifseqformula "3"))
            (rule "times_zero_1" (formula "12") (term "0,0"))
            (rule "add_zero_left" (formula "12") (term "0"))
            (rule "inEqSimp_sepPosMonomial1" (formula "12"))
            (rule "mul_literals" (formula "12") (term "1"))
            (rule "elimGcdGeq_antec" (formula "12") (inst "elimGcdRightDiv=Z(neglit(1(#)))") (inst "elimGcdLeftDiv=quotient_0") (inst "elimGcd=Z(6(9(2(7(6(9(4(9(2(4(#)))))))))))"))
            (rule "polySimp_mulLiterals" (formula "12") (term "1,0,1,0"))
            (rule "leq_literals" (formula "12") (term "0,0"))
             (builtin "One Step Simplification" (formula "12"))
            (rule "polySimp_mulLiterals" (formula "12") (term "1,0,0,0,0,0"))
            (rule "mul_literals" (formula "12") (term "1,0,0,0,0,0"))
            (rule "polySimp_addLiterals" (formula "12") (term "0,0,0,0"))
            (rule "add_literals" (formula "12") (term "0,0,0,0"))
            (rule "polySimp_pullOutFactor0b" (formula "12") (term "0,0"))
            (rule "add_literals" (formula "12") (term "1,1,0,0"))
            (rule "times_zero_1" (formula "12") (term "1,0,0"))
            (rule "add_zero_right" (formula "12") (term "0,0"))
            (rule "leq_literals" (formula "12") (term "0"))
             (builtin "One Step Simplification" (formula "12"))
            (rule "inEqSimp_exactShadow3" (formula "2") (ifseqformula "15"))
            (rule "polySimp_rightDist" (formula "2") (term "0,0"))
            (rule "polySimp_mulLiterals" (formula "2") (term "1,0,0"))
            (rule "mul_literals" (formula "2") (term "0,0,0"))
            (rule "polySimp_addAssoc" (formula "2") (term "0"))
            (rule "polySimp_addComm1" (formula "2") (term "0,0"))
            (rule "add_literals" (formula "2") (term "0,0,0"))
            (rule "inEqSimp_sepPosMonomial1" (formula "2"))
            (rule "polySimp_mulComm0" (formula "2") (term "1"))
            (rule "polySimp_rightDist" (formula "2") (term "1"))
            (rule "polySimp_mulLiterals" (formula "2") (term "1,1"))
            (rule "mul_literals" (formula "2") (term "0,1"))
            (rule "inEqSimp_exactShadow3" (formula "2") (ifseqformula "15"))
            (rule "polySimp_rightDist" (formula "2") (term "0,0"))
            (rule "mul_literals" (formula "2") (term "0,0,0"))
            (rule "polySimp_mulLiterals" (formula "2") (term "1,0,0"))
            (rule "polySimp_addComm1" (formula "2") (term "0"))
            (rule "add_literals" (formula "2") (term "0,0"))
            (rule "inEqSimp_sepNegMonomial1" (formula "2"))
            (rule "polySimp_mulLiterals" (formula "2") (term "0"))
            (rule "elimGcdLeq_antec" (formula "2") (inst "elimGcdRightDiv=Z(neglit(1(#)))") (inst "elimGcdLeftDiv=quotient_0") (inst "elimGcd=Z(6(9(2(7(6(9(4(9(2(4(#)))))))))))"))
            (rule "leq_literals" (formula "2") (term "0,0"))
             (builtin "One Step Simplification" (formula "2"))
            (rule "polySimp_mulLiterals" (formula "2") (term "1,0,0,0,0,0"))
            (rule "polySimp_mulLiterals" (formula "2") (term "1,0,0"))
            (rule "neg_literal" (formula "2") (term "0,0,0,0,0,0"))
            (rule "mul_literals" (formula "2") (term "1,0,0,0,0,0"))
            (rule "polySimp_addLiterals" (formula "2") (term "0,0,0,0"))
            (rule "add_literals" (formula "2") (term "0,0,0,0"))
            (rule "polySimp_pullOutFactor0b" (formula "2") (term "0,0"))
            (rule "add_literals" (formula "2") (term "1,1,0,0"))
            (rule "times_zero_1" (formula "2") (term "1,0,0"))
            (rule "add_zero_right" (formula "2") (term "0,0"))
            (rule "qeq_literals" (formula "2") (term "0"))
             (builtin "One Step Simplification" (formula "2"))
            (rule "inEqSimp_antiSymm" (formula "14") (ifseqformula "2"))
            (rule "applyEqRigid" (formula "4") (term "0,1,1") (ifseqformula "14"))
            (rule "mul_literals" (formula "4") (term "1,1"))
            (rule "add_literals" (formula "4") (term "1"))
            (rule "applyEqRigid" (formula "5") (term "0,1,1") (ifseqformula "14"))
            (rule "mul_literals" (formula "5") (term "1,1"))
            (rule "add_literals" (formula "5") (term "1"))
            (rule "applyEqRigid" (formula "2") (term "0") (ifseqformula "14"))
            (rule "leq_literals" (formula "2"))
            (rule "true_left" (formula "2"))
            (rule "applyEq" (formula "14") (term "0") (ifseqformula "13"))
            (rule "qeq_literals" (formula "14"))
            (rule "true_left" (formula "14"))
            (rule "applyEqRigid" (formula "2") (term "0,1,1") (ifseqformula "13"))
            (rule "mul_literals" (formula "2") (term "1,1"))
            (rule "add_literals" (formula "2") (term "1"))
            (rule "applyEqRigid" (formula "1") (term "1") (ifseqformula "13"))
            (rule "applyEq" (formula "22") (term "0,1,0,3,0,0,1,0,0,1") (ifseqformula "13"))
            (rule "mul_literals" (formula "22") (term "1,0,3,0,0,1,0,0,1"))
            (rule "add_literals" (formula "22") (term "0,3,0,0,1,0,0,1"))
            (rule "inEqSimp_subsumption1" (formula "3") (ifseqformula "14"))
            (rule "leq_literals" (formula "3") (term "0"))
             (builtin "One Step Simplification" (formula "3"))
            (rule "true_left" (formula "3"))
            (rule "inEqSimp_subsumption1" (formula "2") (ifseqformula "11"))
            (rule "leq_literals" (formula "2") (term "0"))
             (builtin "One Step Simplification" (formula "2"))
            (rule "true_left" (formula "2"))
            (rule "allLeft" (formula "15") (inst "t=int::select(heap,
            null,
            de.polyas.core3.open.crypto.basic.Hashes::$currentIndex)"))
            (rule "inEqSimp_contradInEq0" (formula "15") (term "1") (ifseqformula "14"))
            (rule "inEqSimp_homoInEq1" (formula "15") (term "0,1"))
            (rule "polySimp_mulComm0" (formula "15") (term "1,0,0,1"))
            (rule "polySimp_rightDist" (formula "15") (term "1,0,0,1"))
            (rule "mul_literals" (formula "15") (term "0,1,0,0,1"))
            (rule "polySimp_addAssoc" (formula "15") (term "0,0,1"))
            (rule "polySimp_addComm0" (formula "15") (term "0,0,0,1"))
            (rule "polySimp_pullOutFactor1b" (formula "15") (term "0,0,1"))
            (rule "add_literals" (formula "15") (term "1,1,0,0,1"))
            (rule "times_zero_1" (formula "15") (term "1,0,0,1"))
            (rule "add_zero_right" (formula "15") (term "0,0,1"))
            (rule "leq_literals" (formula "15") (term "0,1"))
             (builtin "One Step Simplification" (formula "15"))
            (rule "inEqSimp_contradInEq1" (formula "15") (term "1") (ifseqformula "12"))
            (rule "qeq_literals" (formula "15") (term "0,1"))
             (builtin "One Step Simplification" (formula "15"))
            (rule "notLeft" (formula "15"))
            (rule "replace_known_right" (formula "21") (term "0,1,0") (ifseqformula "16"))
             (builtin "One Step Simplification" (formula "21"))
            (rule "andRight" (formula "21"))
            (branch
               (rule "allRight" (formula "21") (inst "sk=i_0"))
               (rule "orRight" (formula "21"))
               (rule "notRight" (formula "22"))
               (rule "orRight" (formula "22"))
               (rule "inEqSimp_leqRight" (formula "22"))
               (rule "mul_literals" (formula "1") (term "1,0,0"))
               (rule "add_literals" (formula "1") (term "0,0"))
               (rule "add_zero_left" (formula "1") (term "0"))
               (rule "inEqSimp_geqRight" (formula "23"))
               (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
               (rule "polySimp_addComm1" (formula "1") (term "0"))
               (rule "inEqSimp_sepNegMonomial0" (formula "1"))
               (rule "polySimp_mulLiterals" (formula "1") (term "0"))
               (rule "polySimp_elimOne" (formula "1") (term "0"))
               (rule "inEqSimp_exactShadow3" (formula "1") (ifseqformula "16"))
               (rule "polySimp_rightDist" (formula "1") (term "0,0"))
               (rule "mul_literals" (formula "1") (term "0,0,0"))
               (rule "polySimp_addComm1" (formula "1") (term "0"))
               (rule "add_literals" (formula "1") (term "0,0"))
               (rule "inEqSimp_sepNegMonomial1" (formula "1"))
               (rule "polySimp_mulLiterals" (formula "1") (term "0"))
               (rule "polySimp_elimOne" (formula "1") (term "0"))
               (rule "onlyCreatedObjectsAreReferenced" (formula "18") (term "0,1,1") (ifseqformula "7"))
               (rule "replace_known_right" (formula "18") (term "0") (ifseqformula "23"))
                (builtin "One Step Simplification" (formula "18"))
               (rule "onlyCreatedObjectsAreReferenced" (formula "24") (term "0") (ifseqformula "7"))
               (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "25"))
                (builtin "One Step Simplification" (formula "1"))
               (rule "allLeft" (formula "21") (inst "t=i_0"))
               (rule "replace_known_left" (formula "21") (term "0,0,0") (ifseqformula "5"))
                (builtin "One Step Simplification" (formula "21"))
               (rule "inEqSimp_commuteGeq" (formula "21") (term "1"))
               (rule "inEqSimp_contradInEq1" (formula "21") (term "0") (ifseqformula "4"))
               (rule "qeq_literals" (formula "21") (term "0,0"))
                (builtin "One Step Simplification" (formula "21"))
               (rule "inEqSimp_contradInEq1" (formula "21") (ifseqformula "3"))
               (rule "andLeft" (formula "21"))
               (rule "inEqSimp_homoInEq1" (formula "21"))
               (rule "polySimp_pullOutFactor1b" (formula "21") (term "0"))
               (rule "add_literals" (formula "21") (term "1,1,0"))
               (rule "times_zero_1" (formula "21") (term "1,0"))
               (rule "add_zero_right" (formula "21") (term "0"))
               (rule "leq_literals" (formula "21"))
               (rule "closeFalse" (formula "21"))
            )
            (branch
               (rule "allRight" (formula "21") (inst "sk=f_0"))
               (rule "allRight" (formula "21") (inst "sk=o_0"))
               (rule "orRight" (formula "21"))
               (rule "orRight" (formula "21"))
               (rule "pullOutSelect" (formula "23") (term "0") (inst "selectSK=f_0_0"))
               (rule "simplifySelectOfStore" (formula "1"))
                (builtin "One Step Simplification" (formula "1"))
               (rule "castDel" (formula "1") (term "1,0"))
               (rule "eqSymm" (formula "24"))
               (rule "eqSymm" (formula "1") (term "0,0,0"))
               (rule "eqSymm" (formula "1") (term "1,0,0"))
               (rule "replace_known_right" (formula "1") (term "0,0") (ifseqformula "22"))
                (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "24")))
               (rule "closeFalse" (formula "1"))
            )
         )
         (branch "CUT: s1_13 = null FALSE"
             (builtin "One Step Simplification" (formula "3"))
            (rule "arrayLengthNotNegative" (formula "10") (term "1,1"))
            (rule "inEqSimp_subsumption1" (formula "10") (ifseqformula "8"))
            (rule "leq_literals" (formula "10") (term "0"))
             (builtin "One Step Simplification" (formula "10"))
            (rule "true_left" (formula "10"))
            (rule "arrayLengthIsAnInt" (formula "10") (term "1,1"))
            (rule "expand_inInt" (formula "10"))
            (rule "replace_int_MAX" (formula "10") (term "1,0"))
            (rule "replace_int_MIN" (formula "10") (term "0,1"))
            (rule "andLeft" (formula "10"))
            (rule "inEqSimp_commuteLeq" (formula "11"))
            (rule "inEqSimp_subsumption1" (formula "11") (ifseqformula "8"))
            (rule "leq_literals" (formula "11") (term "0"))
             (builtin "One Step Simplification" (formula "11"))
            (rule "true_left" (formula "11"))
            (rule "div_axiom" (formula "18") (term "0,1,3,0,0,1,0,0,1") (inst "quotient=quotient_0"))
            (rule "equal_literals" (formula "1") (term "0"))
             (builtin "One Step Simplification" (formula "1"))
            (rule "mul_literals" (formula "1") (term "1,1,1,1"))
            (rule "qeq_literals" (formula "1") (term "0,1"))
             (builtin "One Step Simplification" (formula "1"))
            (rule "andLeft" (formula "1"))
            (rule "andLeft" (formula "1"))
            (rule "polySimp_addAssoc" (formula "3") (term "0,1"))
            (rule "add_literals" (formula "3") (term "0,0,1"))
            (rule "polySimp_addComm1" (formula "3") (term "1"))
            (rule "add_literals" (formula "3") (term "0,1"))
            (rule "inEqSimp_homoInEq0" (formula "2"))
            (rule "polySimp_mulLiterals" (formula "2") (term "1,0"))
            (rule "polySimp_addComm1" (formula "2") (term "0"))
            (rule "inEqSimp_homoInEq1" (formula "3"))
            (rule "polySimp_mulLiterals" (formula "3") (term "1,0"))
            (rule "polySimp_addComm1" (formula "3") (term "0"))
            (rule "applyEq" (formula "21") (term "0,1,3,0,0,1,0,0,1") (ifseqformula "1"))
            (rule "polySimp_addComm1" (formula "21") (term "3,0,0,1,0,0,1"))
            (rule "inEqSimp_sepPosMonomial1" (formula "2"))
            (rule "polySimp_mulComm0" (formula "2") (term "1"))
            (rule "polySimp_rightDist" (formula "2") (term "1"))
            (rule "polySimp_mulLiterals" (formula "2") (term "1,1"))
            (rule "mul_literals" (formula "2") (term "0,1"))
            (rule "inEqSimp_sepPosMonomial0" (formula "3"))
            (rule "polySimp_mulComm0" (formula "3") (term "1"))
            (rule "polySimp_rightDist" (formula "3") (term "1"))
            (rule "mul_literals" (formula "3") (term "0,1"))
            (rule "polySimp_mulLiterals" (formula "3") (term "1,1"))
            (rule "inEqSimp_exactShadow3" (formula "2") (ifseqformula "14"))
            (rule "polySimp_rightDist" (formula "2") (term "0,0"))
            (rule "polySimp_mulLiterals" (formula "2") (term "1,0,0"))
            (rule "mul_literals" (formula "2") (term "0,0,0"))
            (rule "polySimp_addAssoc" (formula "2") (term "0"))
            (rule "polySimp_addComm1" (formula "2") (term "0,0"))
            (rule "add_literals" (formula "2") (term "0,0,0"))
            (rule "inEqSimp_sepPosMonomial1" (formula "2"))
            (rule "polySimp_mulComm0" (formula "2") (term "1"))
            (rule "polySimp_rightDist" (formula "2") (term "1"))
            (rule "mul_literals" (formula "2") (term "0,1"))
            (rule "polySimp_mulLiterals" (formula "2") (term "1,1"))
            (rule "inEqSimp_exactShadow3" (formula "13") (ifseqformula "4"))
            (rule "mul_literals" (formula "13") (term "0,0"))
            (rule "add_zero_left" (formula "13") (term "0"))
            (rule "inEqSimp_sepPosMonomial1" (formula "13"))
            (rule "mul_literals" (formula "13") (term "1"))
            (rule "elimGcdGeq_antec" (formula "13") (inst "elimGcdRightDiv=Z(neglit(1(#)))") (inst "elimGcdLeftDiv=quotient_0") (inst "elimGcd=Z(6(9(2(7(6(9(4(9(2(4(#)))))))))))"))
            (rule "polySimp_mulLiterals" (formula "13") (term "1,0,0,0,0,1,0"))
            (rule "leq_literals" (formula "13") (term "0,0"))
             (builtin "One Step Simplification" (formula "13"))
            (rule "polySimp_mulLiterals" (formula "13") (term "1,0,0"))
            (rule "mul_literals" (formula "13") (term "1,0,0,0,0,0"))
            (rule "polySimp_addLiterals" (formula "13") (term "0,0,0,0"))
            (rule "add_literals" (formula "13") (term "0,0,0,0"))
            (rule "polySimp_pullOutFactor0b" (formula "13") (term "0,0"))
            (rule "add_literals" (formula "13") (term "1,1,0,0"))
            (rule "times_zero_1" (formula "13") (term "1,0,0"))
            (rule "add_zero_right" (formula "13") (term "0,0"))
            (rule "leq_literals" (formula "13") (term "0"))
             (builtin "One Step Simplification" (formula "13"))
            (rule "inEqSimp_exactShadow3" (formula "2") (ifseqformula "15"))
            (rule "polySimp_rightDist" (formula "2") (term "0,0"))
            (rule "polySimp_mulLiterals" (formula "2") (term "1,0,0"))
            (rule "mul_literals" (formula "2") (term "0,0,0"))
            (rule "polySimp_addComm1" (formula "2") (term "0"))
            (rule "add_literals" (formula "2") (term "0,0"))
            (rule "inEqSimp_sepNegMonomial1" (formula "2"))
            (rule "polySimp_mulLiterals" (formula "2") (term "0"))
            (rule "elimGcdLeq_antec" (formula "2") (inst "elimGcdRightDiv=Z(neglit(1(#)))") (inst "elimGcdLeftDiv=quotient_0") (inst "elimGcd=Z(6(9(2(7(6(9(4(9(2(4(#)))))))))))"))
            (rule "polySimp_mulLiterals" (formula "2") (term "1,0,1,0"))
            (rule "neg_literal" (formula "2") (term "0,0,0,0,0,1,0"))
            (rule "polySimp_mulLiterals" (formula "2") (term "1,0,0,0,0,1,0"))
            (rule "leq_literals" (formula "2") (term "0,0"))
             (builtin "One Step Simplification" (formula "2"))
            (rule "mul_literals" (formula "2") (term "1,0,0,0,0,0"))
            (rule "polySimp_addLiterals" (formula "2") (term "0,0,0,0"))
            (rule "add_literals" (formula "2") (term "0,0,0,0"))
            (rule "polySimp_pullOutFactor0b" (formula "2") (term "0,0"))
            (rule "add_literals" (formula "2") (term "1,1,0,0"))
            (rule "times_zero_1" (formula "2") (term "1,0,0"))
            (rule "add_zero_right" (formula "2") (term "0,0"))
            (rule "qeq_literals" (formula "2") (term "0"))
             (builtin "One Step Simplification" (formula "2"))
            (rule "inEqSimp_antiSymm" (formula "14") (ifseqformula "2"))
            (rule "applyEqRigid" (formula "5") (term "0,1,1") (ifseqformula "14"))
            (rule "mul_literals" (formula "5") (term "1,1"))
            (rule "add_literals" (formula "5") (term "1"))
            (rule "applyEqRigid" (formula "2") (term "0") (ifseqformula "14"))
            (rule "leq_literals" (formula "2"))
            (rule "true_left" (formula "2"))
            (rule "applyEqRigid" (formula "3") (term "0,1,1") (ifseqformula "13"))
            (rule "mul_literals" (formula "3") (term "1,1"))
            (rule "add_literals" (formula "3") (term "1"))
            (rule "applyEq" (formula "2") (term "0,1,1") (ifseqformula "13"))
            (rule "mul_literals" (formula "2") (term "1,1"))
            (rule "add_literals" (formula "2") (term "1"))
            (rule "applyEqRigid" (formula "14") (term "0") (ifseqformula "13"))
            (rule "qeq_literals" (formula "14"))
            (rule "true_left" (formula "14"))
            (rule "applyEqRigid" (formula "1") (term "1") (ifseqformula "13"))
            (rule "applyEqRigid" (formula "23") (term "0,1,0,3,0,0,1,0,0,1") (ifseqformula "13"))
            (rule "mul_literals" (formula "23") (term "1,0,3,0,0,1,0,0,1"))
            (rule "add_literals" (formula "23") (term "0,3,0,0,1,0,0,1"))
            (rule "inEqSimp_subsumption1" (formula "3") (ifseqformula "14"))
            (rule "leq_literals" (formula "3") (term "0"))
             (builtin "One Step Simplification" (formula "3"))
            (rule "true_left" (formula "3"))
            (rule "inEqSimp_subsumption1" (formula "2") (ifseqformula "11"))
            (rule "leq_literals" (formula "2") (term "0"))
             (builtin "One Step Simplification" (formula "2"))
            (rule "true_left" (formula "2"))
            (rule "allLeft" (formula "15") (inst "t=int::select(heap,
            null,
            de.polyas.core3.open.crypto.basic.Hashes::$currentIndex)"))
            (rule "inEqSimp_contradInEq0" (formula "15") (term "1") (ifseqformula "14"))
            (rule "inEqSimp_homoInEq1" (formula "15") (term "0,1"))
            (rule "polySimp_mulComm0" (formula "15") (term "1,0,0,1"))
            (rule "polySimp_rightDist" (formula "15") (term "1,0,0,1"))
            (rule "mul_literals" (formula "15") (term "0,1,0,0,1"))
            (rule "polySimp_addAssoc" (formula "15") (term "0,0,1"))
            (rule "polySimp_addComm0" (formula "15") (term "0,0,0,1"))
            (rule "polySimp_pullOutFactor1b" (formula "15") (term "0,0,1"))
            (rule "add_literals" (formula "15") (term "1,1,0,0,1"))
            (rule "times_zero_1" (formula "15") (term "1,0,0,1"))
            (rule "add_zero_right" (formula "15") (term "0,0,1"))
            (rule "leq_literals" (formula "15") (term "0,1"))
             (builtin "One Step Simplification" (formula "15"))
            (rule "inEqSimp_contradInEq1" (formula "15") (term "1") (ifseqformula "12"))
            (rule "qeq_literals" (formula "15") (term "0,1"))
             (builtin "One Step Simplification" (formula "15"))
            (rule "notLeft" (formula "15"))
            (rule "replace_known_right" (formula "22") (term "0,1,0") (ifseqformula "16"))
             (builtin "One Step Simplification" (formula "22"))
            (rule "andRight" (formula "22"))
            (branch
               (rule "allRight" (formula "22") (inst "sk=i_0"))
               (rule "orRight" (formula "22"))
               (rule "notRight" (formula "23"))
               (rule "orRight" (formula "23"))
               (rule "inEqSimp_leqRight" (formula "23"))
               (rule "mul_literals" (formula "1") (term "1,0,0"))
               (rule "add_literals" (formula "1") (term "0,0"))
               (rule "add_zero_left" (formula "1") (term "0"))
               (rule "inEqSimp_geqRight" (formula "24"))
               (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
               (rule "polySimp_addComm1" (formula "1") (term "0"))
               (rule "inEqSimp_sepNegMonomial0" (formula "1"))
               (rule "polySimp_mulLiterals" (formula "1") (term "0"))
               (rule "polySimp_elimOne" (formula "1") (term "0"))
               (rule "inEqSimp_exactShadow3" (formula "1") (ifseqformula "16"))
               (rule "polySimp_rightDist" (formula "1") (term "0,0"))
               (rule "mul_literals" (formula "1") (term "0,0,0"))
               (rule "polySimp_addComm1" (formula "1") (term "0"))
               (rule "add_literals" (formula "1") (term "0,0"))
               (rule "inEqSimp_sepNegMonomial1" (formula "1"))
               (rule "polySimp_mulLiterals" (formula "1") (term "0"))
               (rule "polySimp_elimOne" (formula "1") (term "0"))
               (rule "onlyCreatedObjectsAreReferenced" (formula "18") (term "0,1,1") (ifseqformula "7"))
               (rule "replace_known_right" (formula "18") (term "0") (ifseqformula "24"))
                (builtin "One Step Simplification" (formula "18"))
               (rule "onlyCreatedObjectsAreReferenced" (formula "25") (term "0") (ifseqformula "7"))
               (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "26"))
                (builtin "One Step Simplification" (formula "1"))
               (rule "allLeft" (formula "21") (inst "t=i_0"))
               (rule "replace_known_left" (formula "21") (term "0,0,0") (ifseqformula "5"))
                (builtin "One Step Simplification" (formula "21"))
               (rule "inEqSimp_commuteGeq" (formula "21") (term "1"))
               (rule "inEqSimp_contradInEq1" (formula "21") (term "0") (ifseqformula "4"))
               (rule "qeq_literals" (formula "21") (term "0,0"))
                (builtin "One Step Simplification" (formula "21"))
               (rule "inEqSimp_contradInEq1" (formula "21") (ifseqformula "3"))
               (rule "andLeft" (formula "21"))
               (rule "inEqSimp_homoInEq1" (formula "21"))
               (rule "polySimp_pullOutFactor1b" (formula "21") (term "0"))
               (rule "add_literals" (formula "21") (term "1,1,0"))
               (rule "times_zero_1" (formula "21") (term "1,0"))
               (rule "add_literals" (formula "21") (term "0"))
               (rule "leq_literals" (formula "21"))
               (rule "closeFalse" (formula "21"))
            )
            (branch
               (rule "allRight" (formula "22") (inst "sk=f_0"))
               (rule "allRight" (formula "22") (inst "sk=o_0"))
               (rule "orRight" (formula "22"))
               (rule "orRight" (formula "22"))
               (rule "pullOutSelect" (formula "24") (term "0") (inst "selectSK=f_0_0"))
               (rule "simplifySelectOfStore" (formula "1"))
                (builtin "One Step Simplification" (formula "1"))
               (rule "castDel" (formula "1") (term "1,0"))
               (rule "eqSymm" (formula "25"))
               (rule "eqSymm" (formula "1") (term "1,0,0"))
               (rule "eqSymm" (formula "1") (term "0,0,0"))
               (rule "replace_known_right" (formula "1") (term "0,0") (ifseqformula "23"))
                (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "25")))
               (rule "closeFalse" (formula "1"))
            )
         )
      )
   )
   (branch "CUT: s3_6 = null FALSE"
       (builtin "One Step Simplification" (formula "5"))
      (rule "cut_direct" (formula "4") (term "0"))
      (branch "CUT: s2_13 = null TRUE"
          (builtin "One Step Simplification" (formula "5"))
         (rule "true_left" (formula "5"))
         (rule "cut_direct" (formula "3") (term "0"))
         (branch "CUT: s1_13 = null TRUE"
             (builtin "One Step Simplification" (formula "4"))
            (rule "true_left" (formula "4"))
            (rule "arrayLengthNotNegative" (formula "10") (term "1,1"))
            (rule "inEqSimp_subsumption1" (formula "10") (ifseqformula "8"))
            (rule "leq_literals" (formula "10") (term "0"))
             (builtin "One Step Simplification" (formula "10"))
            (rule "true_left" (formula "10"))
            (rule "arrayLengthIsAnInt" (formula "10") (term "1,1"))
            (rule "expand_inInt" (formula "10"))
            (rule "replace_int_MIN" (formula "10") (term "0,1"))
            (rule "replace_int_MAX" (formula "10") (term "1,0"))
            (rule "andLeft" (formula "10"))
            (rule "inEqSimp_commuteLeq" (formula "11"))
            (rule "inEqSimp_subsumption1" (formula "11") (ifseqformula "8"))
            (rule "leq_literals" (formula "11") (term "0"))
             (builtin "One Step Simplification" (formula "11"))
            (rule "true_left" (formula "11"))
            (rule "div_axiom" (formula "17") (term "0,1,3,0,0,1,0,0,1") (inst "quotient=quotient_0"))
            (rule "equal_literals" (formula "1") (term "0"))
             (builtin "One Step Simplification" (formula "1"))
            (rule "qeq_literals" (formula "1") (term "0,1"))
             (builtin "One Step Simplification" (formula "1"))
            (rule "mul_literals" (formula "1") (term "1,1,1"))
            (rule "andLeft" (formula "1"))
            (rule "andLeft" (formula "1"))
            (rule "polySimp_addAssoc" (formula "3") (term "0,1"))
            (rule "add_literals" (formula "3") (term "0,0,1"))
            (rule "polySimp_addComm1" (formula "3") (term "1"))
            (rule "add_literals" (formula "3") (term "0,1"))
            (rule "inEqSimp_homoInEq0" (formula "2"))
            (rule "polySimp_mulLiterals" (formula "2") (term "1,0"))
            (rule "polySimp_addComm1" (formula "2") (term "0"))
            (rule "inEqSimp_homoInEq1" (formula "3"))
            (rule "polySimp_mulLiterals" (formula "3") (term "1,0"))
            (rule "polySimp_addComm1" (formula "3") (term "0"))
            (rule "applyEq" (formula "20") (term "0,1,3,0,0,1,0,0,1") (ifseqformula "1"))
            (rule "polySimp_addComm1" (formula "20") (term "3,0,0,1,0,0,1"))
            (rule "inEqSimp_sepPosMonomial1" (formula "2"))
            (rule "polySimp_mulComm0" (formula "2") (term "1"))
            (rule "polySimp_rightDist" (formula "2") (term "1"))
            (rule "polySimp_mulLiterals" (formula "2") (term "1,1"))
            (rule "mul_literals" (formula "2") (term "0,1"))
            (rule "inEqSimp_sepPosMonomial0" (formula "3"))
            (rule "polySimp_mulComm0" (formula "3") (term "1"))
            (rule "polySimp_rightDist" (formula "3") (term "1"))
            (rule "polySimp_mulLiterals" (formula "3") (term "1,1"))
            (rule "mul_literals" (formula "3") (term "0,1"))
            (rule "inEqSimp_exactShadow3" (formula "12") (ifseqformula "3"))
            (rule "times_zero_1" (formula "12") (term "0,0"))
            (rule "add_zero_left" (formula "12") (term "0"))
            (rule "inEqSimp_sepPosMonomial1" (formula "12"))
            (rule "mul_literals" (formula "12") (term "1"))
            (rule "elimGcdGeq_antec" (formula "12") (inst "elimGcdRightDiv=Z(neglit(1(#)))") (inst "elimGcdLeftDiv=quotient_0") (inst "elimGcd=Z(6(9(2(7(6(9(4(9(2(4(#)))))))))))"))
            (rule "polySimp_mulLiterals" (formula "12") (term "1,0,1,0"))
            (rule "leq_literals" (formula "12") (term "0,0"))
             (builtin "One Step Simplification" (formula "12"))
            (rule "polySimp_mulLiterals" (formula "12") (term "1,0,0,0,0,0"))
            (rule "mul_literals" (formula "12") (term "1,0,0,0,0,0"))
            (rule "polySimp_addLiterals" (formula "12") (term "0,0,0,0"))
            (rule "add_literals" (formula "12") (term "0,0,0,0"))
            (rule "polySimp_pullOutFactor0b" (formula "12") (term "0,0"))
            (rule "add_literals" (formula "12") (term "1,1,0,0"))
            (rule "times_zero_1" (formula "12") (term "1,0,0"))
            (rule "add_zero_right" (formula "12") (term "0,0"))
            (rule "leq_literals" (formula "12") (term "0"))
             (builtin "One Step Simplification" (formula "12"))
            (rule "inEqSimp_exactShadow3" (formula "2") (ifseqformula "15"))
            (rule "polySimp_rightDist" (formula "2") (term "0,0"))
            (rule "polySimp_mulLiterals" (formula "2") (term "1,0,0"))
            (rule "mul_literals" (formula "2") (term "0,0,0"))
            (rule "polySimp_addAssoc" (formula "2") (term "0"))
            (rule "polySimp_addComm1" (formula "2") (term "0,0"))
            (rule "add_literals" (formula "2") (term "0,0,0"))
            (rule "inEqSimp_sepPosMonomial1" (formula "2"))
            (rule "polySimp_mulComm0" (formula "2") (term "1"))
            (rule "polySimp_rightDist" (formula "2") (term "1"))
            (rule "polySimp_mulLiterals" (formula "2") (term "1,1"))
            (rule "mul_literals" (formula "2") (term "0,1"))
            (rule "inEqSimp_exactShadow3" (formula "2") (ifseqformula "15"))
            (rule "polySimp_rightDist" (formula "2") (term "0,0"))
            (rule "mul_literals" (formula "2") (term "0,0,0"))
            (rule "polySimp_mulLiterals" (formula "2") (term "1,0,0"))
            (rule "polySimp_addComm1" (formula "2") (term "0"))
            (rule "add_literals" (formula "2") (term "0,0"))
            (rule "inEqSimp_sepNegMonomial1" (formula "2"))
            (rule "polySimp_mulLiterals" (formula "2") (term "0"))
            (rule "elimGcdLeq_antec" (formula "2") (inst "elimGcdRightDiv=Z(neglit(1(#)))") (inst "elimGcdLeftDiv=quotient_0") (inst "elimGcd=Z(6(9(2(7(6(9(4(9(2(4(#)))))))))))"))
            (rule "leq_literals" (formula "2") (term "0,0"))
             (builtin "One Step Simplification" (formula "2"))
            (rule "polySimp_mulLiterals" (formula "2") (term "1,0,0,0,0,0"))
            (rule "polySimp_mulLiterals" (formula "2") (term "1,0,0"))
            (rule "neg_literal" (formula "2") (term "0,0,0,0,0,0"))
            (rule "mul_literals" (formula "2") (term "1,0,0,0,0,0"))
            (rule "polySimp_addLiterals" (formula "2") (term "0,0,0,0"))
            (rule "add_literals" (formula "2") (term "0,0,0,0"))
            (rule "polySimp_pullOutFactor0b" (formula "2") (term "0,0"))
            (rule "add_literals" (formula "2") (term "1,1,0,0"))
            (rule "times_zero_1" (formula "2") (term "1,0,0"))
            (rule "add_zero_right" (formula "2") (term "0,0"))
            (rule "qeq_literals" (formula "2") (term "0"))
             (builtin "One Step Simplification" (formula "2"))
            (rule "inEqSimp_antiSymm" (formula "14") (ifseqformula "2"))
            (rule "applyEqRigid" (formula "15") (term "0") (ifseqformula "14"))
            (rule "qeq_literals" (formula "15"))
            (rule "true_left" (formula "15"))
            (rule "applyEqRigid" (formula "5") (term "0,1,1") (ifseqformula "14"))
            (rule "mul_literals" (formula "5") (term "1,1"))
            (rule "add_literals" (formula "5") (term "1"))
            (rule "applyEq" (formula "2") (term "0") (ifseqformula "14"))
            (rule "leq_literals" (formula "2"))
            (rule "true_left" (formula "2"))
            (rule "applyEq" (formula "3") (term "0,1,1") (ifseqformula "13"))
            (rule "mul_literals" (formula "3") (term "1,1"))
            (rule "add_literals" (formula "3") (term "1"))
            (rule "applyEq" (formula "2") (term "0,1,1") (ifseqformula "13"))
            (rule "mul_literals" (formula "2") (term "1,1"))
            (rule "add_literals" (formula "2") (term "1"))
            (rule "applyEqRigid" (formula "1") (term "1") (ifseqformula "13"))
            (rule "applyEq" (formula "22") (term "0,1,0,3,0,0,1,0,0,1") (ifseqformula "13"))
            (rule "mul_literals" (formula "22") (term "1,0,3,0,0,1,0,0,1"))
            (rule "add_literals" (formula "22") (term "0,3,0,0,1,0,0,1"))
            (rule "inEqSimp_subsumption1" (formula "2") (ifseqformula "12"))
            (rule "leq_literals" (formula "2") (term "0"))
             (builtin "One Step Simplification" (formula "2"))
            (rule "true_left" (formula "2"))
            (rule "inEqSimp_subsumption1" (formula "2") (ifseqformula "13"))
            (rule "leq_literals" (formula "2") (term "0"))
             (builtin "One Step Simplification" (formula "2"))
            (rule "true_left" (formula "2"))
            (rule "allLeft" (formula "15") (inst "t=int::select(heap,
            null,
            de.polyas.core3.open.crypto.basic.Hashes::$currentIndex)"))
            (rule "inEqSimp_contradInEq0" (formula "15") (term "1") (ifseqformula "14"))
            (rule "inEqSimp_homoInEq1" (formula "15") (term "0,1"))
            (rule "polySimp_mulComm0" (formula "15") (term "1,0,0,1"))
            (rule "polySimp_rightDist" (formula "15") (term "1,0,0,1"))
            (rule "mul_literals" (formula "15") (term "0,1,0,0,1"))
            (rule "polySimp_addAssoc" (formula "15") (term "0,0,1"))
            (rule "polySimp_addComm0" (formula "15") (term "0,0,0,1"))
            (rule "polySimp_pullOutFactor1b" (formula "15") (term "0,0,1"))
            (rule "add_literals" (formula "15") (term "1,1,0,0,1"))
            (rule "times_zero_1" (formula "15") (term "1,0,0,1"))
            (rule "add_zero_right" (formula "15") (term "0,0,1"))
            (rule "leq_literals" (formula "15") (term "0,1"))
             (builtin "One Step Simplification" (formula "15"))
            (rule "inEqSimp_contradInEq1" (formula "15") (term "1") (ifseqformula "12"))
            (rule "qeq_literals" (formula "15") (term "0,1"))
             (builtin "One Step Simplification" (formula "15"))
            (rule "notLeft" (formula "15"))
            (rule "replace_known_right" (formula "21") (term "0,1,0") (ifseqformula "16"))
             (builtin "One Step Simplification" (formula "21"))
            (rule "andRight" (formula "21"))
            (branch
               (rule "allRight" (formula "21") (inst "sk=i_0"))
               (rule "orRight" (formula "21"))
               (rule "notRight" (formula "22"))
               (rule "orRight" (formula "22"))
               (rule "inEqSimp_leqRight" (formula "22"))
               (rule "mul_literals" (formula "1") (term "1,0,0"))
               (rule "add_literals" (formula "1") (term "0,0"))
               (rule "add_zero_left" (formula "1") (term "0"))
               (rule "inEqSimp_geqRight" (formula "23"))
               (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
               (rule "polySimp_addComm1" (formula "1") (term "0"))
               (rule "inEqSimp_sepNegMonomial0" (formula "1"))
               (rule "polySimp_mulLiterals" (formula "1") (term "0"))
               (rule "polySimp_elimOne" (formula "1") (term "0"))
               (rule "inEqSimp_exactShadow3" (formula "1") (ifseqformula "16"))
               (rule "polySimp_rightDist" (formula "1") (term "0,0"))
               (rule "mul_literals" (formula "1") (term "0,0,0"))
               (rule "polySimp_addComm1" (formula "1") (term "0"))
               (rule "add_literals" (formula "1") (term "0,0"))
               (rule "inEqSimp_sepNegMonomial1" (formula "1"))
               (rule "polySimp_mulLiterals" (formula "1") (term "0"))
               (rule "polySimp_elimOne" (formula "1") (term "0"))
               (rule "onlyCreatedObjectsAreReferenced" (formula "18") (term "0,1,1") (ifseqformula "7"))
               (rule "replace_known_right" (formula "18") (term "0") (ifseqformula "23"))
                (builtin "One Step Simplification" (formula "18"))
               (rule "onlyCreatedObjectsAreReferenced" (formula "24") (term "0") (ifseqformula "7"))
               (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "25"))
                (builtin "One Step Simplification" (formula "1"))
               (rule "allLeft" (formula "21") (inst "t=i_0"))
               (rule "replace_known_left" (formula "21") (term "0,0,0") (ifseqformula "5"))
                (builtin "One Step Simplification" (formula "21"))
               (rule "inEqSimp_commuteGeq" (formula "21") (term "1"))
               (rule "inEqSimp_contradInEq1" (formula "21") (term "0") (ifseqformula "4"))
               (rule "qeq_literals" (formula "21") (term "0,0"))
                (builtin "One Step Simplification" (formula "21"))
               (rule "inEqSimp_contradInEq1" (formula "21") (ifseqformula "3"))
               (rule "andLeft" (formula "21"))
               (rule "inEqSimp_homoInEq1" (formula "21"))
               (rule "polySimp_pullOutFactor1b" (formula "21") (term "0"))
               (rule "add_literals" (formula "21") (term "1,1,0"))
               (rule "times_zero_1" (formula "21") (term "1,0"))
               (rule "add_zero_right" (formula "21") (term "0"))
               (rule "leq_literals" (formula "21"))
               (rule "closeFalse" (formula "21"))
            )
            (branch
               (rule "allRight" (formula "21") (inst "sk=f_0"))
               (rule "allRight" (formula "21") (inst "sk=o_0"))
               (rule "orRight" (formula "21"))
               (rule "orRight" (formula "21"))
               (rule "pullOutSelect" (formula "23") (term "0") (inst "selectSK=f_0_0"))
               (rule "simplifySelectOfStore" (formula "1"))
                (builtin "One Step Simplification" (formula "1"))
               (rule "castDel" (formula "1") (term "1,0"))
               (rule "eqSymm" (formula "24"))
               (rule "eqSymm" (formula "1") (term "0,0,0"))
               (rule "eqSymm" (formula "1") (term "1,0,0"))
               (rule "replace_known_right" (formula "1") (term "0,0") (ifseqformula "22"))
                (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "24")))
               (rule "closeFalse" (formula "1"))
            )
         )
         (branch "CUT: s1_13 = null FALSE"
             (builtin "One Step Simplification" (formula "3"))
            (rule "arrayLengthNotNegative" (formula "10") (term "1,1"))
            (rule "inEqSimp_subsumption1" (formula "10") (ifseqformula "8"))
            (rule "leq_literals" (formula "10") (term "0"))
             (builtin "One Step Simplification" (formula "10"))
            (rule "true_left" (formula "10"))
            (rule "arrayLengthIsAnInt" (formula "10") (term "1,1"))
            (rule "expand_inInt" (formula "10"))
            (rule "replace_int_MAX" (formula "10") (term "1,0"))
            (rule "replace_int_MIN" (formula "10") (term "0,1"))
            (rule "andLeft" (formula "10"))
            (rule "inEqSimp_commuteLeq" (formula "11"))
            (rule "inEqSimp_subsumption1" (formula "11") (ifseqformula "8"))
            (rule "leq_literals" (formula "11") (term "0"))
             (builtin "One Step Simplification" (formula "11"))
            (rule "true_left" (formula "11"))
            (rule "div_axiom" (formula "18") (term "0,1,3,0,0,1,0,0,1") (inst "quotient=quotient_0"))
            (rule "equal_literals" (formula "1") (term "0"))
             (builtin "One Step Simplification" (formula "1"))
            (rule "mul_literals" (formula "1") (term "1,1,1,1"))
            (rule "qeq_literals" (formula "1") (term "0,1"))
             (builtin "One Step Simplification" (formula "1"))
            (rule "andLeft" (formula "1"))
            (rule "andLeft" (formula "1"))
            (rule "polySimp_addAssoc" (formula "3") (term "0,1"))
            (rule "add_literals" (formula "3") (term "0,0,1"))
            (rule "polySimp_addComm1" (formula "3") (term "1"))
            (rule "add_literals" (formula "3") (term "0,1"))
            (rule "inEqSimp_homoInEq0" (formula "2"))
            (rule "polySimp_mulLiterals" (formula "2") (term "1,0"))
            (rule "polySimp_addComm1" (formula "2") (term "0"))
            (rule "inEqSimp_homoInEq1" (formula "3"))
            (rule "polySimp_mulLiterals" (formula "3") (term "1,0"))
            (rule "polySimp_addComm1" (formula "3") (term "0"))
            (rule "applyEq" (formula "21") (term "0,1,3,0,0,1,0,0,1") (ifseqformula "1"))
            (rule "polySimp_addComm1" (formula "21") (term "3,0,0,1,0,0,1"))
            (rule "inEqSimp_sepPosMonomial1" (formula "2"))
            (rule "polySimp_mulComm0" (formula "2") (term "1"))
            (rule "polySimp_rightDist" (formula "2") (term "1"))
            (rule "polySimp_mulLiterals" (formula "2") (term "1,1"))
            (rule "mul_literals" (formula "2") (term "0,1"))
            (rule "inEqSimp_sepPosMonomial0" (formula "3"))
            (rule "polySimp_mulComm0" (formula "3") (term "1"))
            (rule "polySimp_rightDist" (formula "3") (term "1"))
            (rule "mul_literals" (formula "3") (term "0,1"))
            (rule "polySimp_mulLiterals" (formula "3") (term "1,1"))
            (rule "inEqSimp_exactShadow3" (formula "12") (ifseqformula "3"))
            (rule "times_zero_1" (formula "12") (term "0,0"))
            (rule "add_zero_left" (formula "12") (term "0"))
            (rule "inEqSimp_sepPosMonomial1" (formula "12"))
            (rule "mul_literals" (formula "12") (term "1"))
            (rule "elimGcdGeq_antec" (formula "12") (inst "elimGcdRightDiv=Z(neglit(1(#)))") (inst "elimGcdLeftDiv=quotient_0") (inst "elimGcd=Z(6(9(2(7(6(9(4(9(2(4(#)))))))))))"))
            (rule "polySimp_mulLiterals" (formula "12") (term "1,0,0,0,0,1,0"))
            (rule "polySimp_mulLiterals" (formula "12") (term "1,0,1,0"))
            (rule "leq_literals" (formula "12") (term "0,0"))
             (builtin "One Step Simplification" (formula "12"))
            (rule "mul_literals" (formula "12") (term "1,0,0,0,0,0"))
            (rule "polySimp_addLiterals" (formula "12") (term "0,0,0,0"))
            (rule "add_literals" (formula "12") (term "0,0,0,0"))
            (rule "polySimp_pullOutFactor0b" (formula "12") (term "0,0"))
            (rule "add_literals" (formula "12") (term "1,1,0,0"))
            (rule "times_zero_1" (formula "12") (term "1,0,0"))
            (rule "add_zero_right" (formula "12") (term "0,0"))
            (rule "leq_literals" (formula "12") (term "0"))
             (builtin "One Step Simplification" (formula "12"))
            (rule "inEqSimp_exactShadow3" (formula "2") (ifseqformula "15"))
            (rule "polySimp_rightDist" (formula "2") (term "0,0"))
            (rule "polySimp_mulLiterals" (formula "2") (term "1,0,0"))
            (rule "mul_literals" (formula "2") (term "0,0,0"))
            (rule "polySimp_addAssoc" (formula "2") (term "0"))
            (rule "polySimp_addComm1" (formula "2") (term "0,0"))
            (rule "add_literals" (formula "2") (term "0,0,0"))
            (rule "inEqSimp_sepPosMonomial1" (formula "2"))
            (rule "polySimp_mulComm0" (formula "2") (term "1"))
            (rule "polySimp_rightDist" (formula "2") (term "1"))
            (rule "polySimp_mulLiterals" (formula "2") (term "1,1"))
            (rule "mul_literals" (formula "2") (term "0,1"))
            (rule "inEqSimp_exactShadow3" (formula "2") (ifseqformula "15"))
            (rule "polySimp_rightDist" (formula "2") (term "0,0"))
            (rule "polySimp_mulLiterals" (formula "2") (term "1,0,0"))
            (rule "mul_literals" (formula "2") (term "0,0,0"))
            (rule "polySimp_addComm1" (formula "2") (term "0"))
            (rule "add_literals" (formula "2") (term "0,0"))
            (rule "inEqSimp_sepNegMonomial1" (formula "2"))
            (rule "polySimp_mulLiterals" (formula "2") (term "0"))
            (rule "elimGcdLeq_antec" (formula "2") (inst "elimGcdRightDiv=Z(neglit(1(#)))") (inst "elimGcdLeftDiv=quotient_0") (inst "elimGcd=Z(6(9(2(7(6(9(4(9(2(4(#)))))))))))"))
            (rule "polySimp_mulLiterals" (formula "2") (term "1,0,1,0"))
            (rule "neg_literal" (formula "2") (term "0,0,0,0,0,1,0"))
            (rule "polySimp_mulLiterals" (formula "2") (term "1,0,0,0,0,1,0"))
            (rule "leq_literals" (formula "2") (term "0,0"))
             (builtin "One Step Simplification" (formula "2"))
            (rule "mul_literals" (formula "2") (term "1,0,0,0,0,0"))
            (rule "polySimp_addLiterals" (formula "2") (term "0,0,0,0"))
            (rule "add_literals" (formula "2") (term "0,0,0,0"))
            (rule "polySimp_pullOutFactor0b" (formula "2") (term "0,0"))
            (rule "add_literals" (formula "2") (term "1,1,0,0"))
            (rule "times_zero_1" (formula "2") (term "1,0,0"))
            (rule "add_zero_right" (formula "2") (term "0,0"))
            (rule "qeq_literals" (formula "2") (term "0"))
             (builtin "One Step Simplification" (formula "2"))
            (rule "inEqSimp_antiSymm" (formula "14") (ifseqformula "2"))
            (rule "applyEq" (formula "2") (term "0") (ifseqformula "14"))
            (rule "leq_literals" (formula "2"))
            (rule "true_left" (formula "2"))
            (rule "applyEq" (formula "2") (term "0,1,1") (ifseqformula "13"))
            (rule "mul_literals" (formula "2") (term "1,1"))
            (rule "add_literals" (formula "2") (term "1"))
            (rule "applyEqRigid" (formula "4") (term "0,1,1") (ifseqformula "13"))
            (rule "mul_literals" (formula "4") (term "1,1"))
            (rule "add_literals" (formula "4") (term "1"))
            (rule "applyEqRigid" (formula "3") (term "0,1,1") (ifseqformula "13"))
            (rule "mul_literals" (formula "3") (term "1,1"))
            (rule "add_literals" (formula "3") (term "1"))
            (rule "applyEqRigid" (formula "14") (term "0") (ifseqformula "13"))
            (rule "qeq_literals" (formula "14"))
            (rule "true_left" (formula "14"))
            (rule "applyEq" (formula "23") (term "0,1,0,3,0,0,1,0,0,1") (ifseqformula "13"))
            (rule "mul_literals" (formula "23") (term "1,0,3,0,0,1,0,0,1"))
            (rule "add_literals" (formula "23") (term "0,3,0,0,1,0,0,1"))
            (rule "applyEqRigid" (formula "1") (term "1") (ifseqformula "13"))
            (rule "inEqSimp_subsumption1" (formula "2") (ifseqformula "12"))
            (rule "leq_literals" (formula "2") (term "0"))
             (builtin "One Step Simplification" (formula "2"))
            (rule "true_left" (formula "2"))
            (rule "inEqSimp_subsumption1" (formula "2") (ifseqformula "13"))
            (rule "leq_literals" (formula "2") (term "0"))
             (builtin "One Step Simplification" (formula "2"))
            (rule "true_left" (formula "2"))
            (rule "allLeft" (formula "15") (inst "t=int::select(heap,
            null,
            de.polyas.core3.open.crypto.basic.Hashes::$currentIndex)"))
            (rule "inEqSimp_contradInEq0" (formula "15") (term "1") (ifseqformula "14"))
            (rule "inEqSimp_homoInEq1" (formula "15") (term "0,1"))
            (rule "polySimp_mulComm0" (formula "15") (term "1,0,0,1"))
            (rule "polySimp_rightDist" (formula "15") (term "1,0,0,1"))
            (rule "mul_literals" (formula "15") (term "0,1,0,0,1"))
            (rule "polySimp_addAssoc" (formula "15") (term "0,0,1"))
            (rule "polySimp_addComm0" (formula "15") (term "0,0,0,1"))
            (rule "polySimp_pullOutFactor1b" (formula "15") (term "0,0,1"))
            (rule "add_literals" (formula "15") (term "1,1,0,0,1"))
            (rule "times_zero_1" (formula "15") (term "1,0,0,1"))
            (rule "add_zero_right" (formula "15") (term "0,0,1"))
            (rule "leq_literals" (formula "15") (term "0,1"))
             (builtin "One Step Simplification" (formula "15"))
            (rule "inEqSimp_contradInEq1" (formula "15") (term "1") (ifseqformula "12"))
            (rule "qeq_literals" (formula "15") (term "0,1"))
             (builtin "One Step Simplification" (formula "15"))
            (rule "notLeft" (formula "15"))
            (rule "replace_known_right" (formula "22") (term "0,1,0") (ifseqformula "16"))
             (builtin "One Step Simplification" (formula "22"))
            (rule "andRight" (formula "22"))
            (branch
               (rule "allRight" (formula "22") (inst "sk=i_0"))
               (rule "orRight" (formula "22"))
               (rule "notRight" (formula "23"))
               (rule "orRight" (formula "23"))
               (rule "inEqSimp_leqRight" (formula "23"))
               (rule "mul_literals" (formula "1") (term "1,0,0"))
               (rule "add_literals" (formula "1") (term "0,0"))
               (rule "add_zero_left" (formula "1") (term "0"))
               (rule "inEqSimp_geqRight" (formula "24"))
               (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
               (rule "polySimp_addComm1" (formula "1") (term "0"))
               (rule "inEqSimp_sepNegMonomial0" (formula "1"))
               (rule "polySimp_mulLiterals" (formula "1") (term "0"))
               (rule "polySimp_elimOne" (formula "1") (term "0"))
               (rule "inEqSimp_exactShadow3" (formula "1") (ifseqformula "16"))
               (rule "polySimp_rightDist" (formula "1") (term "0,0"))
               (rule "mul_literals" (formula "1") (term "0,0,0"))
               (rule "polySimp_addComm1" (formula "1") (term "0"))
               (rule "add_literals" (formula "1") (term "0,0"))
               (rule "inEqSimp_sepNegMonomial1" (formula "1"))
               (rule "polySimp_mulLiterals" (formula "1") (term "0"))
               (rule "polySimp_elimOne" (formula "1") (term "0"))
               (rule "onlyCreatedObjectsAreReferenced" (formula "18") (term "0,1,1") (ifseqformula "7"))
               (rule "replace_known_right" (formula "18") (term "0") (ifseqformula "24"))
                (builtin "One Step Simplification" (formula "18"))
               (rule "onlyCreatedObjectsAreReferenced" (formula "25") (term "0") (ifseqformula "7"))
               (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "26"))
                (builtin "One Step Simplification" (formula "1"))
               (rule "allLeft" (formula "21") (inst "t=i_0"))
               (rule "replace_known_left" (formula "21") (term "0,0,0") (ifseqformula "5"))
                (builtin "One Step Simplification" (formula "21"))
               (rule "inEqSimp_commuteGeq" (formula "21") (term "1"))
               (rule "inEqSimp_contradInEq1" (formula "21") (term "0") (ifseqformula "4"))
               (rule "qeq_literals" (formula "21") (term "0,0"))
                (builtin "One Step Simplification" (formula "21"))
               (rule "inEqSimp_contradInEq0" (formula "3") (ifseqformula "21"))
               (rule "andLeft" (formula "3"))
               (rule "inEqSimp_homoInEq1" (formula "3"))
               (rule "polySimp_pullOutFactor1b" (formula "3") (term "0"))
               (rule "add_literals" (formula "3") (term "1,1,0"))
               (rule "times_zero_1" (formula "3") (term "1,0"))
               (rule "add_literals" (formula "3") (term "0"))
               (rule "leq_literals" (formula "3"))
               (rule "closeFalse" (formula "3"))
            )
            (branch
               (rule "allRight" (formula "22") (inst "sk=f_0"))
               (rule "allRight" (formula "22") (inst "sk=o_0"))
               (rule "orRight" (formula "22"))
               (rule "orRight" (formula "22"))
               (rule "pullOutSelect" (formula "24") (term "0") (inst "selectSK=f_0_0"))
               (rule "simplifySelectOfStore" (formula "1"))
                (builtin "One Step Simplification" (formula "1"))
               (rule "castDel" (formula "1") (term "1,0"))
               (rule "eqSymm" (formula "25"))
               (rule "eqSymm" (formula "1") (term "1,0,0"))
               (rule "eqSymm" (formula "1") (term "0,0,0"))
               (rule "replace_known_right" (formula "1") (term "0,0") (ifseqformula "23"))
                (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "25")))
               (rule "closeFalse" (formula "1"))
            )
         )
      )
      (branch "CUT: s2_13 = null FALSE"
          (builtin "One Step Simplification" (formula "4"))
         (rule "cut_direct" (formula "3") (term "0"))
         (branch "CUT: s1_13 = null TRUE"
             (builtin "One Step Simplification" (formula "4"))
            (rule "true_left" (formula "4"))
            (rule "arrayLengthNotNegative" (formula "10") (term "1,1"))
            (rule "inEqSimp_subsumption1" (formula "10") (ifseqformula "8"))
            (rule "leq_literals" (formula "10") (term "0"))
             (builtin "One Step Simplification" (formula "10"))
            (rule "true_left" (formula "10"))
            (rule "arrayLengthIsAnInt" (formula "10") (term "1,1"))
            (rule "expand_inInt" (formula "10"))
            (rule "replace_int_MAX" (formula "10") (term "1,0"))
            (rule "replace_int_MIN" (formula "10") (term "0,1"))
            (rule "andLeft" (formula "10"))
            (rule "inEqSimp_commuteLeq" (formula "11"))
            (rule "inEqSimp_subsumption1" (formula "11") (ifseqformula "8"))
            (rule "leq_literals" (formula "11") (term "0"))
             (builtin "One Step Simplification" (formula "11"))
            (rule "true_left" (formula "11"))
            (rule "div_axiom" (formula "18") (term "0,1,3,0,0,1,0,0,1") (inst "quotient=quotient_0"))
            (rule "equal_literals" (formula "1") (term "0"))
             (builtin "One Step Simplification" (formula "1"))
            (rule "mul_literals" (formula "1") (term "1,1,1,1"))
            (rule "qeq_literals" (formula "1") (term "0,1"))
             (builtin "One Step Simplification" (formula "1"))
            (rule "andLeft" (formula "1"))
            (rule "andLeft" (formula "1"))
            (rule "polySimp_addAssoc" (formula "3") (term "0,1"))
            (rule "add_literals" (formula "3") (term "0,0,1"))
            (rule "polySimp_addComm1" (formula "3") (term "1"))
            (rule "add_literals" (formula "3") (term "0,1"))
            (rule "inEqSimp_homoInEq0" (formula "2"))
            (rule "polySimp_mulLiterals" (formula "2") (term "1,0"))
            (rule "polySimp_addComm1" (formula "2") (term "0"))
            (rule "inEqSimp_homoInEq1" (formula "3"))
            (rule "polySimp_mulLiterals" (formula "3") (term "1,0"))
            (rule "polySimp_addComm1" (formula "3") (term "0"))
            (rule "applyEq" (formula "21") (term "0,1,3,0,0,1,0,0,1") (ifseqformula "1"))
            (rule "polySimp_addComm1" (formula "21") (term "3,0,0,1,0,0,1"))
            (rule "inEqSimp_sepPosMonomial1" (formula "2"))
            (rule "polySimp_mulComm0" (formula "2") (term "1"))
            (rule "polySimp_rightDist" (formula "2") (term "1"))
            (rule "polySimp_mulLiterals" (formula "2") (term "1,1"))
            (rule "mul_literals" (formula "2") (term "0,1"))
            (rule "inEqSimp_sepPosMonomial0" (formula "3"))
            (rule "polySimp_mulComm0" (formula "3") (term "1"))
            (rule "polySimp_rightDist" (formula "3") (term "1"))
            (rule "mul_literals" (formula "3") (term "0,1"))
            (rule "polySimp_mulLiterals" (formula "3") (term "1,1"))
            (rule "inEqSimp_exactShadow3" (formula "12") (ifseqformula "3"))
            (rule "times_zero_1" (formula "12") (term "0,0"))
            (rule "add_zero_left" (formula "12") (term "0"))
            (rule "inEqSimp_sepPosMonomial1" (formula "12"))
            (rule "mul_literals" (formula "12") (term "1"))
            (rule "elimGcdGeq_antec" (formula "12") (inst "elimGcdRightDiv=Z(neglit(1(#)))") (inst "elimGcdLeftDiv=quotient_0") (inst "elimGcd=Z(6(9(2(7(6(9(4(9(2(4(#)))))))))))"))
            (rule "polySimp_mulLiterals" (formula "12") (term "1,0,0,0,0,1,0"))
            (rule "polySimp_mulLiterals" (formula "12") (term "1,0,1,0"))
            (rule "leq_literals" (formula "12") (term "0,0"))
             (builtin "One Step Simplification" (formula "12"))
            (rule "mul_literals" (formula "12") (term "1,0,0,0,0,0"))
            (rule "polySimp_addLiterals" (formula "12") (term "0,0,0,0"))
            (rule "add_literals" (formula "12") (term "0,0,0,0"))
            (rule "polySimp_pullOutFactor0b" (formula "12") (term "0,0"))
            (rule "add_literals" (formula "12") (term "1,1,0,0"))
            (rule "times_zero_1" (formula "12") (term "1,0,0"))
            (rule "add_zero_right" (formula "12") (term "0,0"))
            (rule "leq_literals" (formula "12") (term "0"))
             (builtin "One Step Simplification" (formula "12"))
            (rule "inEqSimp_exactShadow3" (formula "2") (ifseqformula "15"))
            (rule "polySimp_rightDist" (formula "2") (term "0,0"))
            (rule "polySimp_mulLiterals" (formula "2") (term "1,0,0"))
            (rule "mul_literals" (formula "2") (term "0,0,0"))
            (rule "polySimp_addAssoc" (formula "2") (term "0"))
            (rule "polySimp_addComm1" (formula "2") (term "0,0"))
            (rule "add_literals" (formula "2") (term "0,0,0"))
            (rule "inEqSimp_sepPosMonomial1" (formula "2"))
            (rule "polySimp_mulComm0" (formula "2") (term "1"))
            (rule "polySimp_rightDist" (formula "2") (term "1"))
            (rule "polySimp_mulLiterals" (formula "2") (term "1,1"))
            (rule "mul_literals" (formula "2") (term "0,1"))
            (rule "inEqSimp_exactShadow3" (formula "2") (ifseqformula "15"))
            (rule "polySimp_rightDist" (formula "2") (term "0,0"))
            (rule "polySimp_mulLiterals" (formula "2") (term "1,0,0"))
            (rule "mul_literals" (formula "2") (term "0,0,0"))
            (rule "polySimp_addComm1" (formula "2") (term "0"))
            (rule "add_literals" (formula "2") (term "0,0"))
            (rule "inEqSimp_sepNegMonomial1" (formula "2"))
            (rule "polySimp_mulLiterals" (formula "2") (term "0"))
            (rule "elimGcdLeq_antec" (formula "2") (inst "elimGcdRightDiv=Z(neglit(1(#)))") (inst "elimGcdLeftDiv=quotient_0") (inst "elimGcd=Z(6(9(2(7(6(9(4(9(2(4(#)))))))))))"))
            (rule "polySimp_mulLiterals" (formula "2") (term "1,0,1,0"))
            (rule "neg_literal" (formula "2") (term "0,0,0,0,0,1,0"))
            (rule "polySimp_mulLiterals" (formula "2") (term "1,0,0,0,0,1,0"))
            (rule "leq_literals" (formula "2") (term "0,0"))
             (builtin "One Step Simplification" (formula "2"))
            (rule "mul_literals" (formula "2") (term "1,0,0,0,0,0"))
            (rule "polySimp_addLiterals" (formula "2") (term "0,0,0,0"))
            (rule "add_literals" (formula "2") (term "0,0,0,0"))
            (rule "polySimp_pullOutFactor0b" (formula "2") (term "0,0"))
            (rule "add_literals" (formula "2") (term "1,1,0,0"))
            (rule "times_zero_1" (formula "2") (term "1,0,0"))
            (rule "add_zero_right" (formula "2") (term "0,0"))
            (rule "qeq_literals" (formula "2") (term "0"))
             (builtin "One Step Simplification" (formula "2"))
            (rule "inEqSimp_antiSymm" (formula "14") (ifseqformula "2"))
            (rule "applyEqRigid" (formula "3") (term "0,1,1") (ifseqformula "14"))
            (rule "mul_literals" (formula "3") (term "1,1"))
            (rule "add_literals" (formula "3") (term "1"))
            (rule "applyEq" (formula "2") (term "0") (ifseqformula "14"))
            (rule "leq_literals" (formula "2"))
            (rule "true_left" (formula "2"))
            (rule "applyEqRigid" (formula "4") (term "0,1,1") (ifseqformula "13"))
            (rule "mul_literals" (formula "4") (term "1,1"))
            (rule "add_literals" (formula "4") (term "1"))
            (rule "applyEq" (formula "3") (term "0,1,1") (ifseqformula "13"))
            (rule "mul_literals" (formula "3") (term "1,1"))
            (rule "add_literals" (formula "3") (term "1"))
            (rule "applyEq" (formula "14") (term "0") (ifseqformula "13"))
            (rule "qeq_literals" (formula "14"))
            (rule "true_left" (formula "14"))
            (rule "applyEqRigid" (formula "23") (term "0,1,0,3,0,0,1,0,0,1") (ifseqformula "13"))
            (rule "mul_literals" (formula "23") (term "1,0,3,0,0,1,0,0,1"))
            (rule "add_literals" (formula "23") (term "0,3,0,0,1,0,0,1"))
            (rule "applyEq" (formula "1") (term "1") (ifseqformula "13"))
            (rule "inEqSimp_subsumption1" (formula "3") (ifseqformula "14"))
            (rule "leq_literals" (formula "3") (term "0"))
             (builtin "One Step Simplification" (formula "3"))
            (rule "true_left" (formula "3"))
            (rule "inEqSimp_subsumption1" (formula "2") (ifseqformula "11"))
            (rule "leq_literals" (formula "2") (term "0"))
             (builtin "One Step Simplification" (formula "2"))
            (rule "true_left" (formula "2"))
            (rule "allLeft" (formula "15") (inst "t=int::select(heap,
            null,
            de.polyas.core3.open.crypto.basic.Hashes::$currentIndex)"))
            (rule "inEqSimp_contradInEq0" (formula "15") (term "1") (ifseqformula "14"))
            (rule "inEqSimp_homoInEq1" (formula "15") (term "0,1"))
            (rule "polySimp_mulComm0" (formula "15") (term "1,0,0,1"))
            (rule "polySimp_rightDist" (formula "15") (term "1,0,0,1"))
            (rule "mul_literals" (formula "15") (term "0,1,0,0,1"))
            (rule "polySimp_addAssoc" (formula "15") (term "0,0,1"))
            (rule "polySimp_addComm0" (formula "15") (term "0,0,0,1"))
            (rule "polySimp_pullOutFactor1b" (formula "15") (term "0,0,1"))
            (rule "add_literals" (formula "15") (term "1,1,0,0,1"))
            (rule "times_zero_1" (formula "15") (term "1,0,0,1"))
            (rule "add_zero_right" (formula "15") (term "0,0,1"))
            (rule "leq_literals" (formula "15") (term "0,1"))
             (builtin "One Step Simplification" (formula "15"))
            (rule "inEqSimp_contradInEq1" (formula "15") (term "1") (ifseqformula "12"))
            (rule "qeq_literals" (formula "15") (term "0,1"))
             (builtin "One Step Simplification" (formula "15"))
            (rule "notLeft" (formula "15"))
            (rule "replace_known_right" (formula "22") (term "0,1,0") (ifseqformula "16"))
             (builtin "One Step Simplification" (formula "22"))
            (rule "andRight" (formula "22"))
            (branch
               (rule "allRight" (formula "22") (inst "sk=i_0"))
               (rule "orRight" (formula "22"))
               (rule "notRight" (formula "23"))
               (rule "orRight" (formula "23"))
               (rule "inEqSimp_leqRight" (formula "23"))
               (rule "mul_literals" (formula "1") (term "1,0,0"))
               (rule "add_literals" (formula "1") (term "0,0"))
               (rule "add_zero_left" (formula "1") (term "0"))
               (rule "inEqSimp_geqRight" (formula "24"))
               (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
               (rule "polySimp_addComm1" (formula "1") (term "0"))
               (rule "inEqSimp_sepNegMonomial0" (formula "1"))
               (rule "polySimp_mulLiterals" (formula "1") (term "0"))
               (rule "polySimp_elimOne" (formula "1") (term "0"))
               (rule "inEqSimp_exactShadow3" (formula "1") (ifseqformula "16"))
               (rule "polySimp_rightDist" (formula "1") (term "0,0"))
               (rule "mul_literals" (formula "1") (term "0,0,0"))
               (rule "polySimp_addComm1" (formula "1") (term "0"))
               (rule "add_literals" (formula "1") (term "0,0"))
               (rule "inEqSimp_sepNegMonomial1" (formula "1"))
               (rule "polySimp_mulLiterals" (formula "1") (term "0"))
               (rule "polySimp_elimOne" (formula "1") (term "0"))
               (rule "onlyCreatedObjectsAreReferenced" (formula "18") (term "0,1,1") (ifseqformula "7"))
               (rule "replace_known_right" (formula "18") (term "0") (ifseqformula "24"))
                (builtin "One Step Simplification" (formula "18"))
               (rule "onlyCreatedObjectsAreReferenced" (formula "25") (term "0") (ifseqformula "7"))
               (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "26"))
                (builtin "One Step Simplification" (formula "1"))
               (rule "allLeft" (formula "21") (inst "t=i_0"))
               (rule "replace_known_left" (formula "21") (term "0,0,0") (ifseqformula "5"))
                (builtin "One Step Simplification" (formula "21"))
               (rule "inEqSimp_commuteGeq" (formula "21") (term "1"))
               (rule "inEqSimp_contradInEq1" (formula "21") (term "0") (ifseqformula "4"))
               (rule "qeq_literals" (formula "21") (term "0,0"))
                (builtin "One Step Simplification" (formula "21"))
               (rule "inEqSimp_contradInEq1" (formula "21") (ifseqformula "3"))
               (rule "andLeft" (formula "21"))
               (rule "inEqSimp_homoInEq1" (formula "21"))
               (rule "polySimp_pullOutFactor1b" (formula "21") (term "0"))
               (rule "add_literals" (formula "21") (term "1,1,0"))
               (rule "times_zero_1" (formula "21") (term "1,0"))
               (rule "add_literals" (formula "21") (term "0"))
               (rule "leq_literals" (formula "21"))
               (rule "closeFalse" (formula "21"))
            )
            (branch
               (rule "allRight" (formula "22") (inst "sk=f_0"))
               (rule "allRight" (formula "22") (inst "sk=o_0"))
               (rule "orRight" (formula "22"))
               (rule "orRight" (formula "22"))
               (rule "pullOutSelect" (formula "24") (term "0") (inst "selectSK=f_0_0"))
               (rule "simplifySelectOfStore" (formula "1"))
                (builtin "One Step Simplification" (formula "1"))
               (rule "castDel" (formula "1") (term "1,0"))
               (rule "eqSymm" (formula "25"))
               (rule "eqSymm" (formula "1") (term "1,0,0"))
               (rule "eqSymm" (formula "1") (term "0,0,0"))
               (rule "replace_known_right" (formula "1") (term "0,0") (ifseqformula "23"))
                (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "25")))
               (rule "closeFalse" (formula "1"))
            )
         )
         (branch "CUT: s1_13 = null FALSE"
             (builtin "One Step Simplification" (formula "3"))
            (rule "arrayLengthNotNegative" (formula "10") (term "1,1"))
            (rule "inEqSimp_subsumption1" (formula "10") (ifseqformula "8"))
            (rule "leq_literals" (formula "10") (term "0"))
             (builtin "One Step Simplification" (formula "10"))
            (rule "true_left" (formula "10"))
            (rule "arrayLengthIsAnInt" (formula "10") (term "1,1"))
            (rule "expand_inInt" (formula "10"))
            (rule "replace_int_MIN" (formula "10") (term "0,1"))
            (rule "replace_int_MAX" (formula "10") (term "1,0"))
            (rule "andLeft" (formula "10"))
            (rule "inEqSimp_commuteLeq" (formula "11"))
            (rule "inEqSimp_subsumption1" (formula "11") (ifseqformula "8"))
            (rule "leq_literals" (formula "11") (term "0"))
             (builtin "One Step Simplification" (formula "11"))
            (rule "true_left" (formula "11"))
            (rule "div_axiom" (formula "19") (term "0,1,3,0,0,1,0,0,1") (inst "quotient=quotient_0"))
            (rule "mul_literals" (formula "1") (term "1,1,1,1,1"))
            (rule "qeq_literals" (formula "1") (term "0,1,1"))
             (builtin "One Step Simplification" (formula "1"))
            (rule "equal_literals" (formula "1") (term "0"))
             (builtin "One Step Simplification" (formula "1"))
            (rule "andLeft" (formula "1"))
            (rule "andLeft" (formula "1"))
            (rule "polySimp_addAssoc" (formula "3") (term "0,1"))
            (rule "add_literals" (formula "3") (term "0,0,1"))
            (rule "polySimp_addComm1" (formula "3") (term "1"))
            (rule "add_literals" (formula "3") (term "0,1"))
            (rule "inEqSimp_homoInEq0" (formula "2"))
            (rule "polySimp_mulLiterals" (formula "2") (term "1,0"))
            (rule "polySimp_addComm1" (formula "2") (term "0"))
            (rule "inEqSimp_homoInEq1" (formula "3"))
            (rule "polySimp_mulLiterals" (formula "3") (term "1,0"))
            (rule "polySimp_addComm1" (formula "3") (term "0"))
            (rule "applyEq" (formula "22") (term "0,1,3,0,0,1,0,0,1") (ifseqformula "1"))
            (rule "polySimp_addComm1" (formula "22") (term "3,0,0,1,0,0,1"))
            (rule "inEqSimp_sepPosMonomial1" (formula "2"))
            (rule "polySimp_mulComm0" (formula "2") (term "1"))
            (rule "polySimp_rightDist" (formula "2") (term "1"))
            (rule "polySimp_mulLiterals" (formula "2") (term "1,1"))
            (rule "mul_literals" (formula "2") (term "0,1"))
            (rule "inEqSimp_sepPosMonomial0" (formula "3"))
            (rule "polySimp_mulComm0" (formula "3") (term "1"))
            (rule "polySimp_rightDist" (formula "3") (term "1"))
            (rule "polySimp_mulLiterals" (formula "3") (term "1,1"))
            (rule "mul_literals" (formula "3") (term "0,1"))
            (rule "inEqSimp_exactShadow3" (formula "12") (ifseqformula "3"))
            (rule "times_zero_1" (formula "12") (term "0,0"))
            (rule "add_zero_left" (formula "12") (term "0"))
            (rule "inEqSimp_sepPosMonomial1" (formula "12"))
            (rule "mul_literals" (formula "12") (term "1"))
            (rule "elimGcdGeq_antec" (formula "12") (inst "elimGcdRightDiv=Z(neglit(1(#)))") (inst "elimGcdLeftDiv=quotient_0") (inst "elimGcd=Z(6(9(2(7(6(9(4(9(2(4(#)))))))))))"))
            (rule "polySimp_mulLiterals" (formula "12") (term "1,0,1,0"))
            (rule "polySimp_mulLiterals" (formula "12") (term "1,0,0,0,0,1,0"))
            (rule "leq_literals" (formula "12") (term "0,0"))
             (builtin "One Step Simplification" (formula "12"))
            (rule "mul_literals" (formula "12") (term "1,0,0,0,0,0"))
            (rule "polySimp_addLiterals" (formula "12") (term "0,0,0,0"))
            (rule "add_literals" (formula "12") (term "0,0,0,0"))
            (rule "polySimp_pullOutFactor0b" (formula "12") (term "0,0"))
            (rule "add_literals" (formula "12") (term "1,1,0,0"))
            (rule "times_zero_1" (formula "12") (term "1,0,0"))
            (rule "add_zero_right" (formula "12") (term "0,0"))
            (rule "leq_literals" (formula "12") (term "0"))
             (builtin "One Step Simplification" (formula "12"))
            (rule "inEqSimp_exactShadow3" (formula "2") (ifseqformula "15"))
            (rule "polySimp_rightDist" (formula "2") (term "0,0"))
            (rule "polySimp_mulLiterals" (formula "2") (term "1,0,0"))
            (rule "mul_literals" (formula "2") (term "0,0,0"))
            (rule "polySimp_addAssoc" (formula "2") (term "0"))
            (rule "polySimp_addComm1" (formula "2") (term "0,0"))
            (rule "add_literals" (formula "2") (term "0,0,0"))
            (rule "inEqSimp_sepPosMonomial1" (formula "2"))
            (rule "polySimp_mulComm0" (formula "2") (term "1"))
            (rule "polySimp_rightDist" (formula "2") (term "1"))
            (rule "mul_literals" (formula "2") (term "0,1"))
            (rule "polySimp_mulLiterals" (formula "2") (term "1,1"))
            (rule "inEqSimp_exactShadow3" (formula "2") (ifseqformula "15"))
            (rule "polySimp_rightDist" (formula "2") (term "0,0"))
            (rule "polySimp_mulLiterals" (formula "2") (term "1,0,0"))
            (rule "mul_literals" (formula "2") (term "0,0,0"))
            (rule "polySimp_addComm1" (formula "2") (term "0"))
            (rule "add_literals" (formula "2") (term "0,0"))
            (rule "inEqSimp_sepNegMonomial1" (formula "2"))
            (rule "polySimp_mulLiterals" (formula "2") (term "0"))
            (rule "elimGcdLeq_antec" (formula "2") (inst "elimGcdRightDiv=Z(neglit(1(#)))") (inst "elimGcdLeftDiv=quotient_0") (inst "elimGcd=Z(6(9(2(7(6(9(4(9(2(4(#)))))))))))"))
            (rule "polySimp_mulLiterals" (formula "2") (term "1,0,1,0"))
            (rule "neg_literal" (formula "2") (term "0,0,0,0,0,1,0"))
            (rule "leq_literals" (formula "2") (term "0,0"))
             (builtin "One Step Simplification" (formula "2"))
            (rule "polySimp_mulLiterals" (formula "2") (term "1,0,0,0,0,0"))
            (rule "mul_literals" (formula "2") (term "1,0,0,0,0,0"))
            (rule "polySimp_addLiterals" (formula "2") (term "0,0,0,0"))
            (rule "add_literals" (formula "2") (term "0,0,0,0"))
            (rule "polySimp_pullOutFactor0b" (formula "2") (term "0,0"))
            (rule "add_literals" (formula "2") (term "1,1,0,0"))
            (rule "times_zero_1" (formula "2") (term "1,0,0"))
            (rule "add_zero_right" (formula "2") (term "0,0"))
            (rule "qeq_literals" (formula "2") (term "0"))
             (builtin "One Step Simplification" (formula "2"))
            (rule "inEqSimp_antiSymm" (formula "14") (ifseqformula "2"))
            (rule "applyEqRigid" (formula "5") (term "0,1,1") (ifseqformula "14"))
            (rule "mul_literals" (formula "5") (term "1,1"))
            (rule "add_literals" (formula "5") (term "1"))
            (rule "applyEq" (formula "2") (term "0") (ifseqformula "14"))
            (rule "leq_literals" (formula "2"))
            (rule "true_left" (formula "2"))
            (rule "applyEq" (formula "3") (term "0,1,1") (ifseqformula "13"))
            (rule "mul_literals" (formula "3") (term "1,1"))
            (rule "add_literals" (formula "3") (term "1"))
            (rule "applyEq" (formula "2") (term "0,1,1") (ifseqformula "13"))
            (rule "mul_literals" (formula "2") (term "1,1"))
            (rule "add_literals" (formula "2") (term "1"))
            (rule "applyEq" (formula "14") (term "0") (ifseqformula "13"))
            (rule "qeq_literals" (formula "14"))
            (rule "true_left" (formula "14"))
            (rule "applyEqRigid" (formula "1") (term "1") (ifseqformula "13"))
            (rule "applyEqRigid" (formula "24") (term "0,1,0,3,0,0,1,0,0,1") (ifseqformula "13"))
            (rule "mul_literals" (formula "24") (term "1,0,3,0,0,1,0,0,1"))
            (rule "add_literals" (formula "24") (term "0,3,0,0,1,0,0,1"))
            (rule "inEqSimp_subsumption1" (formula "2") (ifseqformula "12"))
            (rule "leq_literals" (formula "2") (term "0"))
             (builtin "One Step Simplification" (formula "2"))
            (rule "true_left" (formula "2"))
            (rule "inEqSimp_subsumption1" (formula "2") (ifseqformula "13"))
            (rule "leq_literals" (formula "2") (term "0"))
             (builtin "One Step Simplification" (formula "2"))
            (rule "true_left" (formula "2"))
            (rule "allLeft" (formula "15") (inst "t=int::select(heap,
            null,
            de.polyas.core3.open.crypto.basic.Hashes::$currentIndex)"))
            (rule "inEqSimp_contradInEq1" (formula "15") (term "1,0") (ifseqformula "12"))
            (rule "qeq_literals" (formula "15") (term "0,1,0"))
             (builtin "One Step Simplification" (formula "15"))
            (rule "inEqSimp_contradInEq0" (formula "15") (term "1") (ifseqformula "14"))
            (rule "inEqSimp_homoInEq1" (formula "15") (term "0,1"))
            (rule "polySimp_mulComm0" (formula "15") (term "1,0,0,1"))
            (rule "polySimp_rightDist" (formula "15") (term "1,0,0,1"))
            (rule "mul_literals" (formula "15") (term "0,1,0,0,1"))
            (rule "polySimp_addAssoc" (formula "15") (term "0,0,1"))
            (rule "polySimp_addComm0" (formula "15") (term "0,0,0,1"))
            (rule "polySimp_pullOutFactor1b" (formula "15") (term "0,0,1"))
            (rule "add_literals" (formula "15") (term "1,1,0,0,1"))
            (rule "times_zero_1" (formula "15") (term "1,0,0,1"))
            (rule "add_zero_right" (formula "15") (term "0,0,1"))
            (rule "leq_literals" (formula "15") (term "0,1"))
             (builtin "One Step Simplification" (formula "15"))
            (rule "notLeft" (formula "15"))
            (rule "replace_known_right" (formula "23") (term "0,1,0") (ifseqformula "16"))
             (builtin "One Step Simplification" (formula "23"))
            (rule "andRight" (formula "23"))
            (branch
               (rule "allRight" (formula "23") (inst "sk=i_0"))
               (rule "orRight" (formula "23"))
               (rule "notRight" (formula "24"))
               (rule "orRight" (formula "24"))
               (rule "inEqSimp_leqRight" (formula "24"))
               (rule "mul_literals" (formula "1") (term "1,0,0"))
               (rule "add_literals" (formula "1") (term "0,0"))
               (rule "add_zero_left" (formula "1") (term "0"))
               (rule "inEqSimp_geqRight" (formula "25"))
               (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
               (rule "polySimp_addComm1" (formula "1") (term "0"))
               (rule "inEqSimp_sepNegMonomial0" (formula "1"))
               (rule "polySimp_mulLiterals" (formula "1") (term "0"))
               (rule "polySimp_elimOne" (formula "1") (term "0"))
               (rule "inEqSimp_exactShadow3" (formula "1") (ifseqformula "16"))
               (rule "polySimp_rightDist" (formula "1") (term "0,0"))
               (rule "mul_literals" (formula "1") (term "0,0,0"))
               (rule "polySimp_addComm1" (formula "1") (term "0"))
               (rule "add_literals" (formula "1") (term "0,0"))
               (rule "inEqSimp_sepNegMonomial1" (formula "1"))
               (rule "polySimp_mulLiterals" (formula "1") (term "0"))
               (rule "polySimp_elimOne" (formula "1") (term "0"))
               (rule "onlyCreatedObjectsAreReferenced" (formula "18") (term "0,1,1") (ifseqformula "7"))
               (rule "replace_known_right" (formula "18") (term "0") (ifseqformula "25"))
                (builtin "One Step Simplification" (formula "18"))
               (rule "onlyCreatedObjectsAreReferenced" (formula "26") (term "0") (ifseqformula "7"))
               (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "27"))
                (builtin "One Step Simplification" (formula "1"))
               (rule "allLeft" (formula "21") (inst "t=i_0"))
               (rule "replace_known_left" (formula "21") (term "0,0,0") (ifseqformula "5"))
                (builtin "One Step Simplification" (formula "21"))
               (rule "inEqSimp_commuteGeq" (formula "21") (term "1"))
               (rule "inEqSimp_contradInEq1" (formula "21") (term "1") (ifseqformula "3"))
               (rule "inEqSimp_homoInEq1" (formula "21") (term "0,1"))
               (rule "polySimp_pullOutFactor1b" (formula "21") (term "0,0,1"))
               (rule "add_literals" (formula "21") (term "1,1,0,0,1"))
               (rule "times_zero_1" (formula "21") (term "1,0,0,1"))
               (rule "add_literals" (formula "21") (term "0,0,1"))
               (rule "leq_literals" (formula "21") (term "0,1"))
                (builtin "One Step Simplification" (formula "21"))
               (rule "inEqSimp_contradInEq0" (formula "4") (ifseqformula "21"))
               (rule "qeq_literals" (formula "4") (term "0"))
                (builtin "One Step Simplification" (formula "4"))
               (rule "closeFalse" (formula "4"))
            )
            (branch
               (rule "allRight" (formula "23") (inst "sk=f_0"))
               (rule "allRight" (formula "23") (inst "sk=o_0"))
               (rule "orRight" (formula "23"))
               (rule "orRight" (formula "23"))
               (rule "pullOutSelect" (formula "25") (term "0") (inst "selectSK=f_0_0"))
               (rule "simplifySelectOfStore" (formula "1"))
                (builtin "One Step Simplification" (formula "1"))
               (rule "castDel" (formula "1") (term "1,0"))
               (rule "eqSymm" (formula "26"))
               (rule "eqSymm" (formula "1") (term "1,0,0"))
               (rule "eqSymm" (formula "1") (term "0,0,0"))
               (rule "replace_known_right" (formula "1") (term "0,0") (ifseqformula "24"))
                (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "26")))
               (rule "closeFalse" (formula "1"))
            )
         )
      )
   )
)
(branch "Null Reference (b_arr_1 = null)"
    (builtin "One Step Simplification" (formula "16"))
    (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "13")))
   (rule "closeFalse" (formula "1"))
)
(branch "Index Out of Bounds (b_arr_1 != null, but x Out of Bounds!)"
    (builtin "One Step Simplification" (formula "16"))
    (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "13")))
   (rule "inEqSimp_ltToLeq" (formula "1") (term "1"))
   (rule "times_zero_1" (formula "1") (term "1,0,0,1"))
   (rule "add_zero_right" (formula "1") (term "0,0,1"))
   (rule "inEqSimp_commuteLeq" (formula "1") (term "0"))
   (rule "inEqSimp_sepPosMonomial0" (formula "1") (term "1"))
   (rule "mul_literals" (formula "1") (term "1,1"))
   (rule "inEqSimp_contradInEq0" (formula "1") (term "0") (ifseqformula "11"))
   (rule "inEqSimp_homoInEq1" (formula "1") (term "0,0"))
   (rule "polySimp_mulComm0" (formula "1") (term "1,0,0,0"))
   (rule "polySimp_rightDist" (formula "1") (term "1,0,0,0"))
   (rule "mul_literals" (formula "1") (term "0,1,0,0,0"))
   (rule "polySimp_addAssoc" (formula "1") (term "0,0,0"))
   (rule "polySimp_addComm0" (formula "1") (term "0,0,0,0"))
   (rule "polySimp_pullOutFactor1b" (formula "1") (term "0,0,0"))
   (rule "add_literals" (formula "1") (term "1,1,0,0,0"))
   (rule "times_zero_1" (formula "1") (term "1,0,0,0"))
   (rule "add_zero_right" (formula "1") (term "0,0,0"))
   (rule "leq_literals" (formula "1") (term "0,0"))
    (builtin "One Step Simplification" (formula "1"))
   (rule "inEqSimp_contradInEq1" (formula "1") (ifseqformula "10"))
   (rule "qeq_literals" (formula "1") (term "0"))
    (builtin "One Step Simplification" (formula "1"))
   (rule "closeFalse" (formula "1"))
)
)
}
