\profile "Java Profile";

\settings {
"#Proof-Settings-Config-File
#Sun Feb 09 15:04:04 CET 2020
[Labels]UseOriginLabels=false
[StrategyProperty]QUERYAXIOM_OPTIONS_KEY=QUERYAXIOM_ON
[SMTSettings]invariantForall=false
[Strategy]ActiveStrategy=JavaCardDLStrategy
[StrategyProperty]USER_TACLETS_OPTIONS_KEY1=USER_TACLETS_OFF
[StrategyProperty]QUANTIFIERS_OPTIONS_KEY=QUANTIFIERS_NON_SPLITTING_WITH_PROGS
[StrategyProperty]USER_TACLETS_OPTIONS_KEY2=USER_TACLETS_OFF
[Choice]DefaultChoices=methodExpansion-methodExpansion\\:modularOnly , mergeGenerateIsWeakeningGoal-mergeGenerateIsWeakeningGoal\\:off , wdChecks-wdChecks\\:off , wdOperator-wdOperator\\:L , permissions-permissions\\:off , integerSimplificationRules-integerSimplificationRules\\:full , reach-reach\\:on , moreSeqRules-moreSeqRules\\:on , sequences-sequences\\:on , bigint-bigint\\:on , modelFields-modelFields\\:treatAsAxiom , Strings-Strings\\:on , JavaCard-JavaCard\\:off , runtimeExceptions-runtimeExceptions\\:allow , programRules-programRules\\:Java , intRules-intRules\\:javaSemantics , initialisation-initialisation\\:disableStaticInitialisation , assertions-assertions\\:on
[StrategyProperty]LOOP_OPTIONS_KEY=LOOP_INVARIANT
[StrategyProperty]INF_FLOW_CHECK_PROPERTY=INF_FLOW_CHECK_FALSE
[SMTSettings]UseBuiltUniqueness=false
[SMTSettings]explicitTypeHierarchy=false
[SMTSettings]instantiateHierarchyAssumptions=true
[StrategyProperty]NON_LIN_ARITH_OPTIONS_KEY=NON_LIN_ARITH_DEF_OPS
[SMTSettings]SelectedTaclets=
[StrategyProperty]DEP_OPTIONS_KEY=DEP_ON
[StrategyProperty]AUTO_INDUCTION_OPTIONS_KEY=AUTO_INDUCTION_OFF
[Strategy]MaximumNumberOfAutomaticApplications=10000
[StrategyProperty]STOPMODE_OPTIONS_KEY=STOPMODE_DEFAULT
[StrategyProperty]CLASS_AXIOM_OPTIONS_KEY=CLASS_AXIOM_FREE
[SMTSettings]useConstantsForBigOrSmallIntegers=true
[StrategyProperty]MPS_OPTIONS_KEY=MPS_MERGE
[StrategyProperty]SYMBOLIC_EXECUTION_NON_EXECUTION_BRANCH_HIDING_OPTIONS_KEY=SYMBOLIC_EXECUTION_NON_EXECUTION_BRANCH_HIDING_OFF
[Strategy]Timeout=-1
[StrategyProperty]SYMBOLIC_EXECUTION_ALIAS_CHECK_OPTIONS_KEY=SYMBOLIC_EXECUTION_ALIAS_CHECK_NEVER
[StrategyProperty]QUERY_NEW_OPTIONS_KEY=QUERY_OFF
[SMTSettings]useUninterpretedMultiplication=true
[StrategyProperty]BLOCK_OPTIONS_KEY=BLOCK_CONTRACT_INTERNAL
[StrategyProperty]METHOD_OPTIONS_KEY=METHOD_CONTRACT
[StrategyProperty]USER_TACLETS_OPTIONS_KEY3=USER_TACLETS_OFF
[SMTSettings]maxGenericSorts=2
[StrategyProperty]OSS_OPTIONS_KEY=OSS_ON
[StrategyProperty]SPLITTING_OPTIONS_KEY=SPLITTING_DELAYED
[SMTSettings]integersMinimum=-2147483645
[StrategyProperty]VBT_PHASE=VBT_SYM_EX
[SMTSettings]integersMaximum=2147483645
"
}

\bootclasspath "../../../../../../home/flo/git/polyas-core3-open-cred/boot";

\javaSource "../../../../../../home/flo/git/polyas-core3-open-cred/src";

\proofObligation "#Proof Obligation Settings
#Sun Feb 09 15:04:04 CET 2020
contract=de.polyas.core3.open.cred.Crypto[de.polyas.core3.open.cred.Crypto\\:\\:loginPasswordFromMasterPIN(de.polyas.core3.open.crypto.groups.ECGroup,java.lang.String,java.lang.String)].JML normal_behavior operation contract.0
name=de.polyas.core3.open.cred.Crypto[de.polyas.core3.open.cred.Crypto\\:\\:loginPasswordFromMasterPIN(de.polyas.core3.open.crypto.groups.ECGroup,java.lang.String,java.lang.String)].JML normal_behavior operation contract.0
class=de.uka.ilkd.key.proof.init.FunctionalOperationContractPO
";

\proof {
(keyLog "0" (keyUser "flo" ) (keyVersion ""))

(autoModeTime "2673")

(branch "dummy ID"
 (builtin "One Step Simplification" (formula "1") (newnames "group_31,voterId_79,password_98,result_804,exc_1060,heapAtPre_0,o,f"))
(rule "impRight" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "2"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "4"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "6"))
(rule "andLeft" (formula "2"))
(rule "andLeft" (formula "8"))
(rule "andLeft" (formula "2"))
(rule "andLeft" (formula "9"))
(rule "andLeft" (formula "11"))
(rule "notLeft" (formula "11"))
(rule "andLeft" (formula "11"))
(rule "notLeft" (formula "12"))
(rule "notLeft" (formula "11"))
(rule "translateJavaAddInt" (formula "14") (term "1,0,0,0,0,1"))
(rule "eqSymm" (formula "14") (term "1,0,0,1,0,1"))
(rule "eqSymm" (formula "14") (term "0,0,0,0,1"))
(rule "replace_known_right" (formula "4") (term "0") (ifseqformula "12"))
 (builtin "One Step Simplification" (formula "4"))
(rule "replace_known_right" (formula "2") (term "0") (ifseqformula "13"))
 (builtin "One Step Simplification" (formula "2"))
(rule "replace_known_right" (formula "3") (term "0") (ifseqformula "11"))
 (builtin "One Step Simplification" (formula "3"))
(rule "elementOfSingleton" (formula "14") (term "0,0,0,0,1,0,1"))
(rule "inEqSimp_ltToLeq" (formula "10"))
(rule "polySimp_mulComm0" (formula "10") (term "1,0,0"))
(rule "inEqSimp_commuteLeq" (formula "9"))
(rule "assignment" (formula "14") (term "1"))
 (builtin "One Step Simplification" (formula "14"))
(rule "inEqSimp_sepPosMonomial0" (formula "10"))
(rule "polySimp_mulComm0" (formula "10") (term "1"))
(rule "polySimp_rightDist" (formula "10") (term "1"))
(rule "polySimp_mulLiterals" (formula "10") (term "1,1"))
(rule "mul_literals" (formula "10") (term "0,1"))
(rule "polySimp_elimOne" (formula "10") (term "1,1"))
(rule "inEqSimp_exactShadow3" (formula "9") (ifseqformula "10"))
(rule "times_zero_1" (formula "9") (term "0,0"))
(rule "add_zero_left" (formula "9") (term "0"))
(rule "inEqSimp_sepPosMonomial1" (formula "9"))
(rule "mul_literals" (formula "9") (term "1"))
(rule "expand_addJint" (formula "15") (term "0,0,0,0,0,1"))
(rule "polySimp_addComm0" (formula "15") (term "0,0,0,0,0,0,1"))
(rule "expand_moduloInteger" (formula "15") (term "0,0,0,0,0,1"))
(rule "replace_int_RANGE" (formula "15") (term "1,1,0,0,0,0,0,1"))
(rule "replace_int_HALFRANGE" (formula "15") (term "0,0,1,0,0,0,0,0,1"))
(rule "replace_int_MIN" (formula "15") (term "0,0,0,0,0,0,1"))
(rule "polySimp_homoEq" (formula "15") (term "0,0,0,0,1"))
(rule "polySimp_mulComm0" (formula "15") (term "1,0,0,0,0,0,1"))
(rule "polySimp_rightDist" (formula "15") (term "1,0,0,0,0,0,1"))
(rule "mul_literals" (formula "15") (term "0,1,0,0,0,0,0,1"))
(rule "polySimp_addAssoc" (formula "15") (term "0,0,1,1,0,0,0,0,0,1"))
(rule "add_literals" (formula "15") (term "0,0,0,1,1,0,0,0,0,0,1"))
(rule "polySimp_addAssoc" (formula "15") (term "0,0,0,0,0,1"))
(rule "polySimp_addComm0" (formula "15") (term "0,0,0,0,0,0,1"))
(rule "polySimp_sepNegMonomial" (formula "15") (term "0,0,0,0,1"))
(rule "polySimp_mulLiterals" (formula "15") (term "0,0,0,0,0,1"))
(rule "polySimp_elimOne" (formula "15") (term "0,0,0,0,0,1"))
(rule "polyMod_pullOut" (formula "15") (term "0,0,0,0,0,1") (inst "polyDivCoeff=Z(1(#))"))
(rule "polySimp_mulLiterals" (formula "15") (term "1,0,0,0,0,0,0,1"))
(rule "mul_literals" (formula "15") (term "1,0,0,0,0,0,0,1"))
(rule "polySimp_addComm1" (formula "15") (term "0,0,0,0,0,0,1"))
(rule "add_literals" (formula "15") (term "0,0,0,0,0,0,0,1"))
(rule "Static_class_invariant_axiom_for_java_math_BigInteger" (formula "6"))
(rule "andLeft" (formula "6"))
(rule "notLeft" (formula "6"))
(rule "Class_invariant_axiom_for_de_polyas_core3_open_crypto_groups_ECGroup" (formula "7"))
(rule "andLeft" (formula "7"))
(rule "andLeft" (formula "8"))
(rule "andLeft" (formula "7"))
(rule "notLeft" (formula "7"))
(rule "notLeft" (formula "7"))
(rule "Static_class_invariant_axiom_for_de_polyas_core3_open_crypto_basic_Hashes" (formula "9"))
(rule "nonNull" (formula "9") (inst "i=i"))
(rule "sub_literals" (formula "9") (term "2,1,0,1,1"))
 (builtin "One Step Simplification" (formula "9"))
(rule "greater_literals" (formula "9") (term "0,1"))
 (builtin "One Step Simplification" (formula "9"))
(rule "andLeft" (formula "9"))
(rule "notLeft" (formula "9"))
(rule "narrowSelectArrayType" (formula "9") (term "0,0,1,0") (ifseqformula "1") (ifseqformula "13"))
(rule "inEqSimp_ltToLeq" (formula "9") (term "1,0,0"))
(rule "polySimp_mulComm0" (formula "9") (term "1,0,0,1,0,0"))
(rule "inEqSimp_commuteLeq" (formula "9") (term "0,0,0"))
(rule "inEqSimp_sepPosMonomial0" (formula "9") (term "1,0,0"))
(rule "polySimp_mulComm0" (formula "9") (term "1,1,0,0"))
(rule "polySimp_rightDist" (formula "9") (term "1,1,0,0"))
(rule "mul_literals" (formula "9") (term "0,1,1,0,0"))
(rule "polySimp_mulLiterals" (formula "9") (term "1,1,1,0,0"))
(rule "polySimp_elimOne" (formula "9") (term "1,1,1,0,0"))
(rule "nnf_imp2or" (formula "9") (term "0"))
(rule "nnf_notAnd" (formula "9") (term "0,0"))
(rule "inEqSimp_notGeq" (formula "9") (term "0,0,0"))
(rule "times_zero_1" (formula "9") (term "1,0,0,0,0,0"))
(rule "add_zero_right" (formula "9") (term "0,0,0,0,0"))
(rule "inEqSimp_sepPosMonomial0" (formula "9") (term "0,0,0"))
(rule "mul_literals" (formula "9") (term "1,0,0,0"))
(rule "inEqSimp_notLeq" (formula "9") (term "1,0,0"))
(rule "polySimp_rightDist" (formula "9") (term "1,0,0,1,0,0"))
(rule "mul_literals" (formula "9") (term "0,1,0,0,1,0,0"))
(rule "polySimp_addAssoc" (formula "9") (term "0,0,1,0,0"))
(rule "add_literals" (formula "9") (term "0,0,0,1,0,0"))
(rule "add_zero_left" (formula "9") (term "0,0,1,0,0"))
(rule "inEqSimp_sepPosMonomial1" (formula "9") (term "1,0,0"))
(rule "polySimp_mulLiterals" (formula "9") (term "1,1,0,0"))
(rule "polySimp_elimOne" (formula "9") (term "1,1,0,0"))
(rule "Class_invariant_axiom_for_org_bouncycastle_jce_spec_ECNamedCurveParameterSpec" (formula "8"))
(rule "andLeft" (formula "8"))
(rule "notLeft" (formula "8"))
(rule "Class_invariant_axiom_for_org_bouncycastle_math_ec_custom_sec_SecP256K1Curve" (formula "7"))
(rule "true_left" (formula "7"))
(rule "Class_invariant_axiom_for_org_bouncycastle_math_ec_ECPoint" (formula "7"))
(rule "true_left" (formula "7"))
(rule "commute_or_2" (formula "7") (term "0"))
(rule "commute_or" (formula "7") (term "0,0"))
(rule "methodBodyExpand" (formula "19") (term "1") (newnames "heapBefore_loginPasswordFromMasterPIN,savedHeapBefore_loginPasswordFromMasterPIN"))
 (builtin "One Step Simplification" (formula "19"))
(rule "variableDeclarationFinalAssign" (formula "19") (term "1"))
(rule "variableDeclarationFinal" (formula "19") (term "1") (newnames "skPrime"))
(rule "methodCallWithAssignmentUnfoldArguments" (formula "19") (term "1"))
(rule "variableDeclarationAssign" (formula "19") (term "1"))
(rule "variableDeclaration" (formula "19") (term "1") (newnames "var"))
(rule "arrayLengthIsAnInt" (formula "10") (term "1,1"))
(rule "expand_inInt" (formula "10"))
(rule "replace_int_MAX" (formula "10") (term "1,0"))
(rule "replace_int_MIN" (formula "10") (term "0,1"))
(rule "andLeft" (formula "10"))
(rule "inEqSimp_commuteLeq" (formula "11"))
(rule "inEqSimp_subsumption1" (formula "11") (ifseqformula "8"))
(rule "leq_literals" (formula "11") (term "0"))
 (builtin "One Step Simplification" (formula "11"))
(rule "true_left" (formula "11"))
(rule "arrayLengthNotNegative" (formula "11") (term "1,1"))
(rule "inEqSimp_subsumption1" (formula "11") (ifseqformula "8"))
(rule "leq_literals" (formula "11") (term "0"))
 (builtin "One Step Simplification" (formula "11"))
(rule "true_left" (formula "11"))
(rule "onlyCreatedObjectsAreReferenced" (formula "11") (term "0,1,1") (ifseqformula "1"))
(rule "replace_known_right" (formula "11") (term "0") (ifseqformula "14"))
 (builtin "One Step Simplification" (formula "11"))
(rule "onlyCreatedObjectsAreReferenced" (formula "13") (term "1,0") (ifseqformula "1"))
(rule "replace_known_right" (formula "1") (term "0") (ifseqformula "16"))
 (builtin "One Step Simplification" (formula "1"))
(rule "onlyCreatedObjectsAreReferenced" (formula "7") (term "1,0") (ifseqformula "2"))
(rule "replace_known_right" (formula "7") (term "0") (ifseqformula "19"))
 (builtin "One Step Simplification" (formula "7"))
(rule "onlyCreatedObjectsAreReferenced" (formula "18") (term "0") (ifseqformula "2"))
(rule "replace_known_right" (formula "1") (term "0") (ifseqformula "19"))
 (builtin "One Step Simplification" (formula "1"))
(rule "onlyCreatedObjectsAreReferenced" (formula "16") (term "0") (ifseqformula "3"))
(rule "replace_known_right" (formula "1") (term "0") (ifseqformula "17"))
 (builtin "One Step Simplification" (formula "1"))
(rule "methodCallWithAssignment" (formula "25") (term "1") (inst "#v0=b"))
(branch "Normal Execution (_group_31 != null)"
    (builtin "One Step Simplification" (formula "25") (ifInst ""  (formula "24")))
   (rule "false_right" (formula "25"))
   (rule "variableDeclaration" (formula "25") (term "1") (newnames "b_18"))
   (rule "methodBodyExpand" (formula "25") (term "1") (newnames "heapBefore_order,savedHeapBefore_order"))
    (builtin "One Step Simplification" (formula "25"))
   (rule "returnUnfold" (formula "25") (term "1") (inst "#v0=b_19"))
   (rule "variableDeclarationAssign" (formula "25") (term "1"))
   (rule "variableDeclaration" (formula "25") (term "1") (newnames "b_19"))
   (rule "methodCallWithAssignmentUnfoldTarget" (formula "25") (term "1") (inst "#v0=s"))
   (rule "variableDeclaration" (formula "25") (term "1") (newnames "s"))
   (rule "assignment_read_attribute_this" (formula "25") (term "1"))
    (builtin "One Step Simplification" (formula "25"))
    (builtin "Use Operation Contract" (formula "25") (newnames "heapBefore_getOrder,result_805,exc_1061,heapAfter_getOrder,anon_heap_getOrder") (contract "org.bouncycastle.math.ec.custom.sec.SecP256K1Curve[org.bouncycastle.math.ec.ECCurve::getOrder()].JML normal_behavior operation contract.0"))
   (branch "Post (getOrder)"
       (builtin "One Step Simplification" (formula "27"))
       (builtin "One Step Simplification" (formula "18"))
      (rule "andLeft" (formula "18"))
      (rule "selectCreatedOfAnonAsFormulaEQ" (formula "19") (term "1,1,0") (ifseqformula "18"))
      (rule "andLeft" (formula "19"))
      (rule "andLeft" (formula "19"))
      (rule "andLeft" (formula "21"))
      (rule "andLeft" (formula "21"))
      (rule "andLeft" (formula "22"))
      (rule "andLeft" (formula "22"))
      (rule "andLeft" (formula "24"))
      (rule "andLeft" (formula "22"))
      (rule "notLeft" (formula "26"))
      (rule "andLeft" (formula "22"))
      (rule "notLeft" (formula "22"))
      (rule "notLeft" (formula "22"))
      (rule "eqSymm" (formula "21"))
      (rule "replace_known_right" (formula "20") (term "0") (ifseqformula "26"))
       (builtin "One Step Simplification" (formula "20") (ifInst ""  (formula "25")))
      (rule "assignment" (formula "35") (term "1"))
       (builtin "One Step Simplification" (formula "35"))
      (rule "pullOutSelect" (formula "21") (term "1") (inst "selectSK=java_math_BigInteger_value_0"))
      (rule "simplifySelectOfAnonEQ" (formula "21") (ifseqformula "18"))
       (builtin "One Step Simplification" (formula "21") (ifInst ""  (formula "27")) (ifInst ""  (formula "26")))
      (rule "simplifySelectOfAnonEQ" (formula "22") (ifseqformula "18"))
       (builtin "One Step Simplification" (formula "22") (ifInst ""  (formula "31")) (ifInst ""  (formula "2")))
      (rule "applyEqReverse" (formula "22") (term "1") (ifseqformula "21"))
      (rule "hideAuxiliaryEq" (formula "21"))
      (rule "eqSymm" (formula "21"))
      (rule "Class_invariant_axiom_for_org_bouncycastle_math_ec_custom_sec_SecP256K1Curve" (formula "24"))
      (rule "true_left" (formula "24"))
      (rule "methodCallReturn" (formula "34") (term "1"))
      (rule "assignment" (formula "34") (term "1"))
       (builtin "One Step Simplification" (formula "34"))
      (rule "methodCallEmpty" (formula "34") (term "1"))
      (rule "blockEmpty" (formula "34") (term "1"))
      (rule "assignment" (formula "34") (term "1"))
       (builtin "One Step Simplification" (formula "34"))
      (rule "variableDeclarationAssign" (formula "34") (term "1"))
      (rule "variableDeclaration" (formula "34") (term "1") (newnames "var_1"))
      (rule "stringAssignment" (formula "34") (term "1"))
       (builtin "One Step Simplification" (formula "36"))
       (builtin "One Step Simplification" (formula "1"))
       (builtin "One Step Simplification" (formula "2"))
      (rule "selectCreatedOfAnonAsFormulaEQ" (formula "2") (ifseqformula "20"))
      (rule "notLeft" (formula "1"))
      (rule "variableDeclarationAssign" (formula "36") (term "1"))
      (rule "variableDeclaration" (formula "36") (term "1") (newnames "var_2"))
      (rule "assignment" (formula "36") (term "1"))
       (builtin "One Step Simplification" (formula "36"))
      (rule "variableDeclarationAssign" (formula "36") (term "1"))
      (rule "variableDeclaration" (formula "36") (term "1") (newnames "var_3"))
      (rule "assignment" (formula "36") (term "1"))
       (builtin "One Step Simplification" (formula "36"))
       (builtin "Use Operation Contract" (formula "36") (newnames "heapBefore_uniformHash,result_806,exc_1062,heapAfter_uniformHash,anon_heap_uniformHash") (contract "de.polyas.core3.open.crypto.basic.Hashes[de.polyas.core3.open.crypto.basic.Hashes::uniformHash(java.math.BigInteger,java.lang.String,java.lang.String,java.lang.String)].JML normal_behavior operation contract.0"))
      (branch "Post (uniformHash)"
          (builtin "One Step Simplification" (formula "38"))
          (builtin "One Step Simplification" (formula "26"))
         (rule "andLeft" (formula "26"))
         (rule "selectCreatedOfAnonAsFormulaEQ" (formula "27") (term "1,1,0") (ifseqformula "26"))
         (rule "selectCreatedOfAnonAsFormulaEQ" (formula "27") (term "0,1,1,0") (ifseqformula "19"))
         (rule "andLeft" (formula "27"))
         (rule "andLeft" (formula "28"))
         (rule "andLeft" (formula "27"))
         (rule "andLeft" (formula "28"))
         (rule "andLeft" (formula "29"))
         (rule "notLeft" (formula "30"))
         (rule "translateJavaAddInt" (formula "28") (term "1"))
         (rule "replace_known_right" (formula "27") (term "0") (ifseqformula "31"))
          (builtin "One Step Simplification" (formula "27"))
         (rule "assignment" (formula "43") (term "1"))
          (builtin "One Step Simplification" (formula "43"))
         (rule "blockEmpty" (formula "43") (term "1"))
         (rule "variableDeclarationFinalAssign" (formula "43") (term "1"))
         (rule "variableDeclarationFinal" (formula "43") (term "1") (newnames "dk"))
         (rule "pullOutSelect" (formula "28") (term "0") (inst "selectSK=de_polyas_core3_open_crypto_basic_Hashes_currentIndex_0"))
         (rule "simplifySelectOfAnonEQ" (formula "28") (ifseqformula "26"))
          (builtin "One Step Simplification" (formula "28"))
         (rule "eqSymm" (formula "29"))
         (rule "elementOfSingleton" (formula "28") (term "0,0"))
          (builtin "One Step Simplification" (formula "28"))
         (rule "applyEqReverse" (formula "29") (term "1") (ifseqformula "28"))
         (rule "hideAuxiliaryEq" (formula "28"))
         (rule "pullOutSelect" (formula "28") (term "0,0") (inst "selectSK=de_polyas_core3_open_crypto_basic_Hashes_currentIndex_1"))
         (rule "simplifySelectOfAnonEQ" (formula "28") (ifseqformula "19"))
          (builtin "One Step Simplification" (formula "28"))
         (rule "applyEqReverse" (formula "29") (term "0,0") (ifseqformula "28"))
         (rule "hideAuxiliaryEq" (formula "28"))
         (rule "eqSymm" (formula "28"))
         (rule "expand_addJint" (formula "28") (term "1"))
         (rule "polySimp_addComm0" (formula "28") (term "0,1"))
         (rule "expand_moduloInteger" (formula "28") (term "1"))
         (rule "replace_int_RANGE" (formula "28") (term "1,1,1"))
         (rule "replace_int_HALFRANGE" (formula "28") (term "0,0,1,1"))
         (rule "replace_int_MIN" (formula "28") (term "0,1"))
         (rule "polySimp_addAssoc" (formula "28") (term "0,1,1"))
         (rule "add_literals" (formula "28") (term "0,0,1,1"))
         (rule "mod_axiom" (formula "28") (term "1,1"))
         (rule "polySimp_mulLiterals" (formula "28") (term "1,1,1"))
         (rule "polySimp_addAssoc" (formula "28") (term "1"))
         (rule "polySimp_addAssoc" (formula "28") (term "0,1"))
         (rule "add_literals" (formula "28") (term "0,0,1"))
         (rule "polyDiv_pullOut" (formula "28") (term "0,1,1") (inst "polyDivCoeff=Z(1(#))"))
         (rule "mul_literals" (formula "28") (term "0,1,0,0,2,0,1,1"))
         (rule "equal_literals" (formula "28") (term "0,0,1,1"))
          (builtin "One Step Simplification" (formula "28"))
         (rule "mul_literals" (formula "28") (term "1,0,0,0,1,1"))
         (rule "polySimp_mulComm0" (formula "28") (term "1,1"))
         (rule "polySimp_addComm0" (formula "28") (term "1,1,1"))
         (rule "polySimp_addComm1" (formula "28") (term "0,1,1,1,1"))
         (rule "add_literals" (formula "28") (term "0,0,1,1,1,1"))
         (rule "polySimp_rightDist" (formula "28") (term "1,1"))
         (rule "mul_literals" (formula "28") (term "0,1,1"))
         (rule "polySimp_addAssoc" (formula "28") (term "1"))
         (rule "polySimp_addComm1" (formula "28") (term "0,1"))
         (rule "add_literals" (formula "28") (term "0,0,1"))
         (rule "Static_class_invariant_axiom_for_de_polyas_core3_open_crypto_basic_Hashes" (formula "29"))
         (rule "nonNull" (formula "29") (inst "i=i"))
         (rule "greater_literals" (formula "29") (term "0,1"))
          (builtin "One Step Simplification" (formula "29"))
         (rule "sub_literals" (formula "29") (term "2,1,0,1"))
          (builtin "One Step Simplification" (formula "29"))
         (rule "andLeft" (formula "29"))
         (rule "notLeft" (formula "29"))
         (rule "inEqSimp_ltToLeq" (formula "29") (term "1,0,0"))
         (rule "polySimp_mulComm0" (formula "29") (term "1,0,0,1,0,0"))
         (rule "inEqSimp_commuteLeq" (formula "29") (term "0,0,0"))
         (rule "inEqSimp_sepPosMonomial0" (formula "29") (term "1,0,0"))
         (rule "polySimp_mulComm0" (formula "29") (term "1,1,0,0"))
         (rule "polySimp_rightDist" (formula "29") (term "1,1,0,0"))
         (rule "polySimp_mulLiterals" (formula "29") (term "1,1,1,0,0"))
         (rule "mul_literals" (formula "29") (term "0,1,1,0,0"))
         (rule "polySimp_elimOne" (formula "29") (term "1,1,1,0,0"))
         (rule "pullOutSelect" (formula "29") (term "1,0,0,1,0") (inst "selectSK=de_polyas_core3_open_crypto_basic_Hashes_VALUES_0"))
         (rule "applyEq" (formula "30") (term "0,1,1,1,0,0") (ifseqformula "29"))
         (rule "applyEq" (formula "32") (term "0") (ifseqformula "29"))
         (rule "simplifySelectOfAnonEQ" (formula "29") (ifseqformula "26"))
          (builtin "One Step Simplification" (formula "29"))
         (rule "elementOfSingleton" (formula "29") (term "0,0"))
          (builtin "One Step Simplification" (formula "29"))
         (rule "simplifySelectOfAnonEQ" (formula "29") (ifseqformula "19"))
          (builtin "One Step Simplification" (formula "29"))
         (rule "applyEqReverse" (formula "32") (term "0") (ifseqformula "29"))
         (rule "applyEqReverse" (formula "30") (term "0,1,1,1,0,0") (ifseqformula "29"))
         (rule "applyEqReverse" (formula "30") (term "1,0,0,1,0") (ifseqformula "29"))
         (rule "hideAuxiliaryEq" (formula "29"))
         (rule "nnf_imp2or" (formula "29") (term "0"))
         (rule "nnf_notAnd" (formula "29") (term "0,0"))
         (rule "inEqSimp_notLeq" (formula "29") (term "1,0,0"))
         (rule "polySimp_rightDist" (formula "29") (term "1,0,0,1,0,0"))
         (rule "mul_literals" (formula "29") (term "0,1,0,0,1,0,0"))
         (rule "polySimp_addAssoc" (formula "29") (term "0,0,1,0,0"))
         (rule "add_literals" (formula "29") (term "0,0,0,1,0,0"))
         (rule "add_zero_left" (formula "29") (term "0,0,1,0,0"))
         (rule "inEqSimp_sepPosMonomial1" (formula "29") (term "1,0,0"))
         (rule "polySimp_mulLiterals" (formula "29") (term "1,1,0,0"))
         (rule "polySimp_elimOne" (formula "29") (term "1,1,0,0"))
         (rule "inEqSimp_notGeq" (formula "29") (term "0,0,0"))
         (rule "mul_literals" (formula "29") (term "1,0,0,0,0,0"))
         (rule "add_zero_right" (formula "29") (term "0,0,0,0,0"))
         (rule "inEqSimp_sepPosMonomial0" (formula "29") (term "0,0,0"))
         (rule "mul_literals" (formula "29") (term "1,0,0,0"))
         (rule "commute_or_2" (formula "29") (term "0"))
         (rule "commute_or" (formula "29") (term "0,0"))
         (rule "methodCallWithAssignmentUnfoldArguments" (formula "43") (term "1"))
         (rule "variableDeclarationAssign" (formula "43") (term "1"))
         (rule "variableDeclaration" (formula "43") (term "1") (newnames "var_4"))
         (rule "assignment" (formula "43") (term "1"))
          (builtin "One Step Simplification" (formula "43"))
         (rule "variableDeclarationAssign" (formula "43") (term "1"))
         (rule "variableDeclaration" (formula "43") (term "1") (newnames "var_5"))
         (rule "div_axiom" (formula "28") (term "0,1,1") (inst "quotient=quotient_0"))
         (rule "qeq_literals" (formula "28") (term "0,1,1"))
          (builtin "One Step Simplification" (formula "28"))
         (rule "equal_literals" (formula "28") (term "0"))
          (builtin "One Step Simplification" (formula "28"))
         (rule "mul_literals" (formula "28") (term "1,1,1"))
         (rule "andLeft" (formula "28"))
         (rule "andLeft" (formula "28"))
         (rule "polySimp_addAssoc" (formula "30") (term "0,1"))
         (rule "add_literals" (formula "30") (term "0,0,1"))
         (rule "polySimp_addComm1" (formula "30") (term "1"))
         (rule "add_literals" (formula "30") (term "0,1"))
         (rule "inEqSimp_homoInEq0" (formula "29"))
         (rule "polySimp_mulLiterals" (formula "29") (term "1,0"))
         (rule "polySimp_addComm1" (formula "29") (term "0"))
         (rule "inEqSimp_homoInEq1" (formula "30"))
         (rule "polySimp_mulLiterals" (formula "30") (term "1,0"))
         (rule "polySimp_addComm1" (formula "30") (term "0"))
         (rule "applyEq" (formula "31") (term "0,1,1") (ifseqformula "28"))
         (rule "polySimp_addComm1" (formula "31") (term "1"))
         (rule "inEqSimp_sepPosMonomial1" (formula "29"))
         (rule "polySimp_mulComm0" (formula "29") (term "1"))
         (rule "polySimp_rightDist" (formula "29") (term "1"))
         (rule "polySimp_mulLiterals" (formula "29") (term "1,1"))
         (rule "mul_literals" (formula "29") (term "0,1"))
         (rule "inEqSimp_sepPosMonomial0" (formula "30"))
         (rule "polySimp_mulComm0" (formula "30") (term "1"))
         (rule "polySimp_rightDist" (formula "30") (term "1"))
         (rule "polySimp_mulLiterals" (formula "30") (term "1,1"))
         (rule "mul_literals" (formula "30") (term "0,1"))
         (rule "inEqSimp_exactShadow3" (formula "14") (ifseqformula "30"))
         (rule "mul_literals" (formula "14") (term "0,0"))
         (rule "add_zero_left" (formula "14") (term "0"))
         (rule "inEqSimp_sepPosMonomial1" (formula "14"))
         (rule "mul_literals" (formula "14") (term "1"))
         (rule "elimGcdGeq_antec" (formula "14") (inst "elimGcdRightDiv=Z(neglit(1(#)))") (inst "elimGcdLeftDiv=quotient_0") (inst "elimGcd=Z(6(9(2(7(6(9(4(9(2(4(#)))))))))))"))
         (rule "leq_literals" (formula "14") (term "0,0"))
          (builtin "One Step Simplification" (formula "14"))
         (rule "polySimp_mulLiterals" (formula "14") (term "1,0,0"))
         (rule "polySimp_mulLiterals" (formula "14") (term "1,0,0,0,0,0"))
         (rule "mul_literals" (formula "14") (term "1,0,0,0,0,0"))
         (rule "polySimp_addLiterals" (formula "14") (term "0,0,0,0"))
         (rule "add_literals" (formula "14") (term "0,0,0,0"))
         (rule "polySimp_pullOutFactor0b" (formula "14") (term "0,0"))
         (rule "add_literals" (formula "14") (term "1,1,0,0"))
         (rule "times_zero_1" (formula "14") (term "1,0,0"))
         (rule "add_literals" (formula "14") (term "0,0"))
         (rule "leq_literals" (formula "14") (term "0"))
          (builtin "One Step Simplification" (formula "14"))
         (rule "inEqSimp_exactShadow3" (formula "30") (ifseqformula "18"))
         (rule "polySimp_rightDist" (formula "30") (term "0,0"))
         (rule "polySimp_mulLiterals" (formula "30") (term "1,0,0"))
         (rule "mul_literals" (formula "30") (term "0,0,0"))
         (rule "polySimp_addAssoc" (formula "30") (term "0"))
         (rule "polySimp_addComm1" (formula "30") (term "0,0"))
         (rule "add_literals" (formula "30") (term "0,0,0"))
         (rule "inEqSimp_sepPosMonomial1" (formula "30"))
         (rule "polySimp_mulComm0" (formula "30") (term "1"))
         (rule "polySimp_rightDist" (formula "30") (term "1"))
         (rule "polySimp_mulLiterals" (formula "30") (term "1,1"))
         (rule "mul_literals" (formula "30") (term "0,1"))
         (rule "inEqSimp_exactShadow3" (formula "30") (ifseqformula "16"))
         (rule "polySimp_rightDist" (formula "30") (term "0,0"))
         (rule "mul_literals" (formula "30") (term "0,0,0"))
         (rule "polySimp_mulLiterals" (formula "30") (term "1,0,0"))
         (rule "polySimp_addComm1" (formula "30") (term "0"))
         (rule "add_literals" (formula "30") (term "0,0"))
         (rule "inEqSimp_sepNegMonomial1" (formula "30"))
         (rule "polySimp_mulLiterals" (formula "30") (term "0"))
         (rule "elimGcdLeq_antec" (formula "30") (inst "elimGcdRightDiv=Z(neglit(1(#)))") (inst "elimGcdLeftDiv=quotient_0") (inst "elimGcd=Z(6(9(2(7(6(9(4(9(2(4(#)))))))))))"))
         (rule "polySimp_mulLiterals" (formula "30") (term "1,0,1,0"))
         (rule "neg_literal" (formula "30") (term "0,0,0,0,0,1,0"))
         (rule "polySimp_mulLiterals" (formula "30") (term "1,0,0,0,0,1,0"))
         (rule "leq_literals" (formula "30") (term "0,0"))
          (builtin "One Step Simplification" (formula "30"))
         (rule "mul_literals" (formula "30") (term "1,0,0,0,0,0"))
         (rule "polySimp_addLiterals" (formula "30") (term "0,0,0,0"))
         (rule "add_literals" (formula "30") (term "0,0,0,0"))
         (rule "polySimp_pullOutFactor0b" (formula "30") (term "0,0"))
         (rule "add_literals" (formula "30") (term "1,1,0,0"))
         (rule "times_zero_1" (formula "30") (term "1,0,0"))
         (rule "add_zero_right" (formula "30") (term "0,0"))
         (rule "qeq_literals" (formula "30") (term "0"))
          (builtin "One Step Simplification" (formula "30"))
         (rule "inEqSimp_antiSymm" (formula "14") (ifseqformula "30"))
         (rule "applyEq" (formula "31") (term "0") (ifseqformula "14"))
         (rule "leq_literals" (formula "31"))
         (rule "true_left" (formula "31"))
         (rule "applyEq" (formula "15") (term "0") (ifseqformula "14"))
         (rule "qeq_literals" (formula "15"))
         (rule "true_left" (formula "15"))
         (rule "applyEq" (formula "32") (term "0,1,1") (ifseqformula "14"))
         (rule "mul_literals" (formula "32") (term "1,1"))
         (rule "add_literals" (formula "32") (term "1"))
         (rule "applyEqRigid" (formula "30") (term "0,1,1") (ifseqformula "14"))
         (rule "mul_literals" (formula "30") (term "1,1"))
         (rule "add_literals" (formula "30") (term "1"))
         (rule "applyEq" (formula "31") (term "0,1,1") (ifseqformula "14"))
         (rule "mul_literals" (formula "31") (term "1,1"))
         (rule "add_literals" (formula "31") (term "1"))
         (rule "applyEqRigid" (formula "29") (term "1") (ifseqformula "14"))
         (rule "applyEq" (formula "33") (term "0,1,0,1") (ifseqformula "14"))
         (rule "mul_literals" (formula "33") (term "1,0,1"))
         (rule "add_literals" (formula "33") (term "0,1"))
         (rule "inEqSimp_subsumption1" (formula "31") (ifseqformula "15"))
         (rule "leq_literals" (formula "31") (term "0"))
          (builtin "One Step Simplification" (formula "31"))
         (rule "true_left" (formula "31"))
         (rule "inEqSimp_subsumption1" (formula "30") (ifseqformula "13"))
         (rule "leq_literals" (formula "30") (term "0"))
          (builtin "One Step Simplification" (formula "30"))
         (rule "true_left" (formula "30"))
         (rule "methodCallWithAssignment" (formula "46") (term "1") (inst "#v0=e"))
         (branch "Normal Execution (_group_31 != null)"
             (builtin "One Step Simplification" (formula "46") (ifInst ""  (formula "45")))
            (rule "false_right" (formula "46"))
            (rule "variableDeclaration" (formula "46") (term "1") (newnames "e_18"))
            (rule "methodBodyExpand" (formula "46") (term "1") (newnames "heapBefore_generator,savedHeapBefore_generator"))
             (builtin "One Step Simplification" (formula "46"))
            (rule "returnUnfold" (formula "46") (term "1") (inst "#v0=e_19"))
            (rule "variableDeclarationAssign" (formula "46") (term "1"))
            (rule "variableDeclaration" (formula "46") (term "1") (newnames "e_19"))
            (rule "methodCallWithAssignmentUnfoldTarget" (formula "46") (term "1") (inst "#v0=e_20"))
            (rule "variableDeclaration" (formula "46") (term "1") (newnames "e_20"))
            (rule "assignment_read_attribute_this" (formula "46") (term "1"))
             (builtin "One Step Simplification" (formula "46"))
            (rule "pullOutSelect" (formula "46") (term "0,1,0") (inst "selectSK=de_polyas_core3_open_crypto_groups_ECGroup_group_0"))
            (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "28"))
             (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "46")))
            (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,1,0,0") (ifseqformula "21"))
            (rule "replace_known_left" (formula "1") (term "0,0,1,0,0") (ifseqformula "7"))
             (builtin "One Step Simplification" (formula "1"))
            (rule "elementOfSingleton" (formula "1") (term "0,0"))
             (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "46")))
            (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "21"))
             (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "46")) (ifInst ""  (formula "7")))
            (rule "applyEqReverse" (formula "47") (term "0,1,0") (ifseqformula "1"))
            (rule "hideAuxiliaryEq" (formula "1"))
             (builtin "Use Operation Contract" (formula "46") (newnames "heapBefore_getG,result_807,exc_1063") (contract "org.bouncycastle.jce.spec.ECNamedCurveParameterSpec[org.bouncycastle.jce.spec.ECParameterSpec::getG()].JML normal_behavior operation contract.0"))
            (branch "Post (getG)"
                (builtin "One Step Simplification" (formula "34"))
                (builtin "One Step Simplification" (formula "47"))
               (rule "selectCreatedOfAnonAsFormulaEQ" (formula "34") (term "1,1,0") (ifseqformula "27"))
               (rule "selectCreatedOfAnonAsFormulaEQ" (formula "34") (term "0,1,1,0") (ifseqformula "20"))
               (rule "andLeft" (formula "34"))
               (rule "andLeft" (formula "34"))
               (rule "andLeft" (formula "36"))
               (rule "andLeft" (formula "36"))
               (rule "andLeft" (formula "37"))
               (rule "notLeft" (formula "38"))
               (rule "eqSymm" (formula "36"))
               (rule "replace_known_right" (formula "35") (term "0") (ifseqformula "38"))
                (builtin "One Step Simplification" (formula "35"))
               (rule "assignment" (formula "51") (term "1"))
                (builtin "One Step Simplification" (formula "51"))
               (rule "pullOutSelect" (formula "36") (term "0") (inst "selectSK=org_bouncycastle_jce_spec_ECParameterSpec_generator_0"))
               (rule "simplifySelectOfAnonEQ" (formula "36") (ifseqformula "27"))
                (builtin "One Step Simplification" (formula "36") (ifInst ""  (formula "46")))
               (rule "selectCreatedOfAnonAsFormulaEQ" (formula "36") (term "0,1,0,0") (ifseqformula "20"))
               (rule "eqSymm" (formula "37"))
               (rule "applyEqReverse" (formula "36") (term "1") (ifseqformula "37"))
               (rule "hideAuxiliaryEq" (formula "37"))
               (rule "replace_known_left" (formula "36") (term "0,0,1,0,0") (ifseqformula "4"))
                (builtin "One Step Simplification" (formula "36"))
               (rule "elementOfSingleton" (formula "36") (term "0,0"))
                (builtin "One Step Simplification" (formula "36") (ifInst ""  (formula "45")))
               (rule "pullOutSelect" (formula "36") (term "0") (inst "selectSK=org_bouncycastle_jce_spec_ECParameterSpec_generator_1"))
               (rule "simplifySelectOfAnonEQ" (formula "36") (ifseqformula "20"))
                (builtin "One Step Simplification" (formula "36") (ifInst ""  (formula "46")) (ifInst ""  (formula "4")))
               (rule "applyEqReverse" (formula "37") (term "0") (ifseqformula "36"))
               (rule "hideAuxiliaryEq" (formula "36"))
               (rule "applyEq" (formula "43") (term "0") (ifseqformula "36"))
               (rule "applyEq" (formula "2") (term "1,0") (ifseqformula "36"))
               (rule "replace_known_left" (formula "35") (term "0,0") (ifseqformula "2"))
                (builtin "One Step Simplification" (formula "35"))
               (rule "true_left" (formula "35"))
               (rule "Class_invariant_axiom_for_org_bouncycastle_jce_spec_ECNamedCurveParameterSpec" (formula "36"))
               (rule "replaceKnownSelect_taclet00000_13" (formula "36") (term "1,1"))
               (rule "replaceKnownAuxiliaryConstant_taclet00000_14" (formula "36") (term "1,1"))
               (rule "replaceKnownSelect_taclet00000_13" (formula "36") (term "0,0,0"))
               (rule "replaceKnownAuxiliaryConstant_taclet00000_14" (formula "36") (term "0,0,0"))
               (rule "andLeft" (formula "36"))
               (rule "notLeft" (formula "36"))
               (rule "Class_invariant_axiom_for_org_bouncycastle_math_ec_ECPoint" (formula "36"))
               (rule "true_left" (formula "36"))
               (rule "methodCallReturn" (formula "48") (term "1"))
               (rule "assignment" (formula "48") (term "1"))
                (builtin "One Step Simplification" (formula "48"))
               (rule "methodCallEmpty" (formula "48") (term "1"))
               (rule "blockEmpty" (formula "48") (term "1"))
               (rule "assignment" (formula "48") (term "1"))
                (builtin "One Step Simplification" (formula "48"))
               (rule "variableDeclarationAssign" (formula "48") (term "1"))
               (rule "variableDeclaration" (formula "48") (term "1") (newnames "var_6"))
               (rule "assignment" (formula "48") (term "1"))
                (builtin "One Step Simplification" (formula "48"))
                (builtin "Use Operation Contract" (formula "48") (newnames "heapBefore_pow,result_808,exc_1064,heapAfter_pow,anon_heap_pow") (contract "de.polyas.core3.open.crypto.groups.ECGroup[de.polyas.core3.open.crypto.groups.ECGroup::pow(org.bouncycastle.math.ec.ECPoint,java.math.BigInteger)].JML normal_behavior operation contract.0"))
               (branch "Post (pow)"
                   (builtin "One Step Simplification" (formula "50"))
                   (builtin "One Step Simplification" (formula "37"))
                  (rule "selectCreatedOfAnonAsFormulaEQ" (formula "37") (term "0,0,0,0,0,0,1,1") (ifseqformula "27"))
                  (rule "selectCreatedOfAnonAsFormulaEQ" (formula "37") (term "0,0,0,0,0,0,0,1,1") (ifseqformula "20"))
                  (rule "andLeft" (formula "37"))
                  (rule "selectCreatedOfAnonAsFormulaEQ" (formula "38") (term "1,1,0") (ifseqformula "37"))
                  (rule "selectCreatedOfAnonAsFormulaEQ" (formula "38") (term "0,1,1,0") (ifseqformula "27"))
                  (rule "selectCreatedOfAnonAsFormulaEQ" (formula "38") (term "0,0,1,1,0") (ifseqformula "20"))
                  (rule "andLeft" (formula "38"))
                  (rule "andLeft" (formula "38"))
                  (rule "andLeft" (formula "40"))
                  (rule "andLeft" (formula "40"))
                  (rule "andLeft" (formula "41"))
                  (rule "andLeft" (formula "40"))
                  (rule "notLeft" (formula "43"))
                  (rule "andLeft" (formula "40"))
                  (rule "andLeft" (formula "40"))
                  (rule "notLeft" (formula "40"))
                  (rule "notLeft" (formula "40"))
                  (rule "orRight" (formula "43"))
                  (rule "orRight" (formula "43"))
                  (rule "replace_known_right" (formula "39") (term "0,0,0,1") (ifseqformula "43"))
                   (builtin "One Step Simplification" (formula "39") (ifInst ""  (formula "46")) (ifInst ""  (formula "44")) (ifInst ""  (formula "45")))
                  (rule "assignment" (formula "59") (term "1"))
                   (builtin "One Step Simplification" (formula "59"))
                  (rule "blockEmpty" (formula "59") (term "1"))
                  (rule "Class_invariant_axiom_for_de_polyas_core3_open_crypto_groups_ECGroup" (formula "42"))
                  (rule "andLeft" (formula "42"))
                  (rule "andLeft" (formula "43"))
                  (rule "andLeft" (formula "42"))
                  (rule "notLeft" (formula "42"))
                  (rule "notLeft" (formula "42"))
                  (rule "pullOutSelect" (formula "43") (term "1") (inst "selectSK=de_polyas_core3_open_crypto_groups_ECGroup_group_1"))
                  (rule "applyEq" (formula "45") (term "0") (ifseqformula "43"))
                  (rule "simplifySelectOfAnonEQ" (formula "43") (ifseqformula "37"))
                   (builtin "One Step Simplification" (formula "43") (ifInst ""  (formula "62")))
                  (rule "replaceKnownSelect_taclet0000_10" (formula "43") (term "2,0"))
                  (rule "replaceKnownAuxiliaryConstant_taclet0000_12" (formula "43") (term "2,0"))
                  (rule "selectCreatedOfAnonAsFormulaEQ" (formula "43") (term "0,0,0") (ifseqformula "27"))
                  (rule "selectCreatedOfAnonAsFormulaEQ" (formula "43") (term "0,0,0,0") (ifseqformula "20"))
                  (rule "replace_known_left" (formula "43") (term "0,0,0,0,0") (ifseqformula "6"))
                   (builtin "One Step Simplification" (formula "43"))
                  (rule "applyEqReverse" (formula "44") (term "1") (ifseqformula "43"))
                  (rule "applyEqReverse" (formula "45") (term "0") (ifseqformula "43"))
                  (rule "hideAuxiliaryEq" (formula "43"))
                  (rule "pullOutSelect" (formula "42") (term "1") (inst "selectSK=de_polyas_core3_open_crypto_groups_ECGroup_curve_0"))
                  (rule "applyEq" (formula "45") (term "0") (ifseqformula "42"))
                  (rule "simplifySelectOfAnonEQ" (formula "42") (ifseqformula "37"))
                   (builtin "One Step Simplification" (formula "42") (ifInst ""  (formula "61")))
                  (rule "selectCreatedOfAnonAsFormulaEQ" (formula "42") (term "0,0,0") (ifseqformula "27"))
                  (rule "selectCreatedOfAnonAsFormulaEQ" (formula "42") (term "0,0,0,0") (ifseqformula "20"))
                  (rule "replace_known_left" (formula "42") (term "0,0,0,0,0") (ifseqformula "6"))
                   (builtin "One Step Simplification" (formula "42"))
                  (rule "simplifySelectOfAnonEQ" (formula "42") (ifseqformula "27"))
                   (builtin "One Step Simplification" (formula "42") (ifInst ""  (formula "61")))
                  (rule "selectCreatedOfAnonAsFormulaEQ" (formula "42") (term "0,1,0,0") (ifseqformula "20"))
                  (rule "replace_known_left" (formula "42") (term "0,0,1,0,0") (ifseqformula "6"))
                   (builtin "One Step Simplification" (formula "42"))
                  (rule "elementOfSingleton" (formula "42") (term "0,0"))
                   (builtin "One Step Simplification" (formula "42") (ifInst ""  (formula "61")))
                  (rule "simplifySelectOfAnonEQ" (formula "42") (ifseqformula "20"))
                   (builtin "One Step Simplification" (formula "42") (ifInst ""  (formula "61")) (ifInst ""  (formula "6")))
                  (rule "applyEqReverse" (formula "43") (term "1") (ifseqformula "42"))
                  (rule "applyEqReverse" (formula "45") (term "0") (ifseqformula "42"))
                  (rule "hideAuxiliaryEq" (formula "42"))
                  (rule "Class_invariant_axiom_for_org_bouncycastle_jce_spec_ECNamedCurveParameterSpec" (formula "43"))
                  (rule "andLeft" (formula "43"))
                  (rule "notLeft" (formula "43"))
                  (rule "pullOutSelect" (formula "43") (term "1") (inst "selectSK=org_bouncycastle_jce_spec_ECParameterSpec_generator_2"))
                  (rule "applyEq" (formula "45") (term "0") (ifseqformula "43"))
                  (rule "simplifySelectOfAnonEQ" (formula "43") (ifseqformula "37"))
                   (builtin "One Step Simplification" (formula "43") (ifInst ""  (formula "56")))
                  (rule "replaceKnownSelect_taclet00000_13" (formula "43") (term "2,0"))
                  (rule "replaceKnownAuxiliaryConstant_taclet00000_14" (formula "43") (term "2,0"))
                  (rule "selectCreatedOfAnonAsFormulaEQ" (formula "43") (term "0,0,0") (ifseqformula "27"))
                  (rule "selectCreatedOfAnonAsFormulaEQ" (formula "43") (term "0,0,0,0") (ifseqformula "20"))
                  (rule "replace_known_left" (formula "43") (term "0,0,0,0,0") (ifseqformula "4"))
                   (builtin "One Step Simplification" (formula "43"))
                  (rule "applyEqReverse" (formula "44") (term "1") (ifseqformula "43"))
                  (rule "applyEqReverse" (formula "45") (term "0") (ifseqformula "43"))
                  (rule "hideAuxiliaryEq" (formula "43"))
                  (rule "Class_invariant_axiom_for_org_bouncycastle_math_ec_custom_sec_SecP256K1Curve" (formula "42"))
                  (rule "true_left" (formula "42"))
                  (rule "Class_invariant_axiom_for_org_bouncycastle_math_ec_ECPoint" (formula "42"))
                  (rule "true_left" (formula "42"))
                  (rule "returnUnfold" (formula "58") (term "1") (inst "#v0=s"))
                  (rule "variableDeclarationAssign" (formula "58") (term "1"))
                  (rule "variableDeclaration" (formula "58") (term "1") (newnames "s_1"))
                  (rule "methodCallWithAssignmentUnfoldArguments" (formula "58") (term "1"))
                  (rule "variableDeclarationAssign" (formula "58") (term "1"))
                  (rule "variableDeclaration" (formula "58") (term "1") (newnames "var_7"))
                   (builtin "Use Operation Contract" (formula "58") (newnames "heapBefore_asBytes,result_809,exc_1065,heapAfter_asBytes,anon_heap_asBytes") (contract "de.polyas.core3.open.crypto.groups.ECGroup[de.polyas.core3.open.crypto.groups.ECGroup::asBytes(org.bouncycastle.math.ec.ECPoint)].JML normal_behavior operation contract.0"))
                  (branch "Post (asBytes)"
                      (builtin "One Step Simplification" (formula "43"))
                      (builtin "One Step Simplification" (formula "60"))
                     (rule "selectCreatedOfAnonAsFormulaEQ" (formula "43") (term "0,0,0,0,0,1,1") (ifseqformula "37"))
                     (rule "selectCreatedOfAnonAsFormulaEQ" (formula "43") (term "0,0,0,0,0,0,1,1") (ifseqformula "27"))
                     (rule "selectCreatedOfAnonAsFormulaEQ" (formula "43") (term "0,0,0,0,0,0,0,1,1") (ifseqformula "20"))
                     (rule "andLeft" (formula "43"))
                     (rule "selectCreatedOfAnonAsFormulaEQ" (formula "44") (term "1,1,0") (ifseqformula "43"))
                     (rule "selectCreatedOfAnonAsFormulaEQ" (formula "44") (term "0,1,1,0") (ifseqformula "37"))
                     (rule "selectCreatedOfAnonAsFormulaEQ" (formula "44") (term "0,0,1,1,0") (ifseqformula "27"))
                     (rule "selectCreatedOfAnonAsFormulaEQ" (formula "44") (term "0,0,0,1,1,0") (ifseqformula "20"))
                     (rule "andLeft" (formula "44"))
                     (rule "andLeft" (formula "44"))
                     (rule "andLeft" (formula "46"))
                     (rule "andLeft" (formula "46"))
                     (rule "andLeft" (formula "46"))
                     (rule "andLeft" (formula "48"))
                     (rule "andLeft" (formula "46"))
                     (rule "notLeft" (formula "49"))
                     (rule "notLeft" (formula "46"))
                     (rule "orRight" (formula "48"))
                     (rule "orRight" (formula "48"))
                     (rule "orRight" (formula "48"))
                     (rule "replace_known_right" (formula "45") (term "1,0,1") (ifseqformula "51"))
                      (builtin "One Step Simplification" (formula "45") (ifInst ""  (formula "52")) (ifInst ""  (formula "48")) (ifInst ""  (formula "49")) (ifInst ""  (formula "50")))
                     (rule "assignment" (formula "69") (term "1"))
                      (builtin "One Step Simplification" (formula "69"))
                     (rule "Class_invariant_axiom_for_de_polyas_core3_open_crypto_groups_ECGroup" (formula "47"))
                     (rule "andLeft" (formula "47"))
                     (rule "andLeft" (formula "48"))
                     (rule "andLeft" (formula "47"))
                     (rule "notLeft" (formula "47"))
                     (rule "notLeft" (formula "47"))
                     (rule "pullOutSelect" (formula "47") (term "1") (inst "selectSK=de_polyas_core3_open_crypto_groups_ECGroup_curve_1"))
                     (rule "applyEq" (formula "51") (term "0") (ifseqformula "47"))
                     (rule "simplifySelectOfAnonEQ" (formula "47") (ifseqformula "43"))
                      (builtin "One Step Simplification" (formula "47") (ifInst ""  (formula "72")))
                     (rule "replaceKnownSelect_taclet000000_19" (formula "47") (term "2,0"))
                     (rule "replaceKnownAuxiliaryConstant_taclet000000_22" (formula "47") (term "2,0"))
                     (rule "selectCreatedOfAnonAsFormulaEQ" (formula "47") (term "0,0,0") (ifseqformula "37"))
                     (rule "selectCreatedOfAnonAsFormulaEQ" (formula "47") (term "0,0,0,0") (ifseqformula "27"))
                     (rule "selectCreatedOfAnonAsFormulaEQ" (formula "47") (term "0,0,0,0,0") (ifseqformula "20"))
                     (rule "replace_known_left" (formula "47") (term "0,0,0,0,0,0") (ifseqformula "6"))
                      (builtin "One Step Simplification" (formula "47"))
                     (rule "applyEqReverse" (formula "51") (term "0") (ifseqformula "47"))
                     (rule "applyEqReverse" (formula "48") (term "1") (ifseqformula "47"))
                     (rule "hideAuxiliaryEq" (formula "47"))
                     (rule "pullOutSelect" (formula "48") (term "1") (inst "selectSK=de_polyas_core3_open_crypto_groups_ECGroup_group_2"))
                     (rule "applyEq" (formula "50") (term "0") (ifseqformula "48"))
                     (rule "simplifySelectOfAnonEQ" (formula "48") (ifseqformula "43"))
                      (builtin "One Step Simplification" (formula "48") (ifInst ""  (formula "71")))
                     (rule "replaceKnownSelect_taclet000000_17" (formula "48") (term "2,0"))
                     (rule "replaceKnownAuxiliaryConstant_taclet000000_18" (formula "48") (term "2,0"))
                     (rule "selectCreatedOfAnonAsFormulaEQ" (formula "48") (term "0,0,0") (ifseqformula "37"))
                     (rule "selectCreatedOfAnonAsFormulaEQ" (formula "48") (term "0,0,0,0") (ifseqformula "27"))
                     (rule "selectCreatedOfAnonAsFormulaEQ" (formula "48") (term "0,0,0,0,0") (ifseqformula "20"))
                     (rule "replace_known_left" (formula "48") (term "0,0,0,0,0,0") (ifseqformula "6"))
                      (builtin "One Step Simplification" (formula "48"))
                     (rule "applyEqReverse" (formula "50") (term "0") (ifseqformula "48"))
                     (rule "applyEqReverse" (formula "49") (term "1") (ifseqformula "48"))
                     (rule "hideAuxiliaryEq" (formula "48"))
                     (rule "Class_invariant_axiom_for_org_bouncycastle_math_ec_custom_sec_SecP256K1Curve" (formula "47"))
                     (rule "true_left" (formula "47"))
                     (rule "Class_invariant_axiom_for_org_bouncycastle_jce_spec_ECParameterSpec" (formula "47"))
                     (rule "andLeft" (formula "47"))
                     (rule "notLeft" (formula "47"))
                     (rule "pullOutSelect" (formula "47") (term "1") (inst "selectSK=org_bouncycastle_jce_spec_ECParameterSpec_generator_3"))
                     (rule "applyEq" (formula "49") (term "0") (ifseqformula "47"))
                     (rule "simplifySelectOfAnonEQ" (formula "47") (ifseqformula "43"))
                      (builtin "One Step Simplification" (formula "47") (ifInst ""  (formula "65")))
                     (rule "replaceKnownSelect_taclet000000_23" (formula "47") (term "2,0"))
                     (rule "replaceKnownAuxiliaryConstant_taclet000000_24" (formula "47") (term "2,0"))
                     (rule "selectCreatedOfAnonAsFormulaEQ" (formula "47") (term "0,0,0") (ifseqformula "37"))
                     (rule "selectCreatedOfAnonAsFormulaEQ" (formula "47") (term "0,0,0,0") (ifseqformula "27"))
                     (rule "selectCreatedOfAnonAsFormulaEQ" (formula "47") (term "0,0,0,0,0") (ifseqformula "20"))
                     (rule "replace_known_left" (formula "47") (term "0,0,0,0,0,0") (ifseqformula "4"))
                      (builtin "One Step Simplification" (formula "47"))
                     (rule "applyEqReverse" (formula "49") (term "0") (ifseqformula "47"))
                     (rule "applyEqReverse" (formula "48") (term "1") (ifseqformula "47"))
                     (rule "hideAuxiliaryEq" (formula "47"))
                     (rule "Class_invariant_axiom_for_org_bouncycastle_math_ec_ECPoint" (formula "47"))
                     (rule "true_left" (formula "47"))
                      (builtin "Use Operation Contract" (formula "68") (newnames "heapBefore_asHexString,result_810,exc_1066,heapAfter_asHexString,anon_heap_asHexString") (contract "de.polyas.core3.open.crypto.basic.Utils[de.polyas.core3.open.crypto.basic.Utils::asHexString([B)].JML normal_behavior operation contract.0"))
                     (branch "Post (asHexString)"
                         (builtin "One Step Simplification" (formula "48"))
                         (builtin "One Step Simplification" (formula "70"))
                        (rule "selectCreatedOfAnonAsFormulaEQ" (formula "48") (term "0,0,0,0,0,1,1") (ifseqformula "43"))
                        (rule "selectCreatedOfAnonAsFormulaEQ" (formula "48") (term "0,0,0,0,0,0,1,1") (ifseqformula "37"))
                        (rule "selectCreatedOfAnonAsFormulaEQ" (formula "48") (term "0,0,0,0,0,0,0,1,1") (ifseqformula "27"))
                        (rule "selectCreatedOfAnonAsFormulaEQ" (formula "48") (term "0,0,0,0,0,0,0,0,1,1") (ifseqformula "20"))
                        (rule "andLeft" (formula "48"))
                        (rule "selectCreatedOfAnonAsFormulaEQ" (formula "49") (term "1,1,0") (ifseqformula "48"))
                        (rule "selectCreatedOfAnonAsFormulaEQ" (formula "49") (term "0,1,1,0") (ifseqformula "43"))
                        (rule "selectCreatedOfAnonAsFormulaEQ" (formula "49") (term "0,0,1,1,0") (ifseqformula "37"))
                        (rule "selectCreatedOfAnonAsFormulaEQ" (formula "49") (term "0,0,0,1,1,0") (ifseqformula "27"))
                        (rule "selectCreatedOfAnonAsFormulaEQ" (formula "49") (term "0,0,0,0,1,1,0") (ifseqformula "20"))
                        (rule "andLeft" (formula "49"))
                        (rule "andLeft" (formula "50"))
                        (rule "andLeft" (formula "49"))
                        (rule "andLeft" (formula "50"))
                        (rule "andLeft" (formula "50"))
                        (rule "notLeft" (formula "52"))
                        (rule "andLeft" (formula "50"))
                        (rule "notLeft" (formula "50"))
                        (rule "notLeft" (formula "50"))
                        (rule "orRight" (formula "52"))
                        (rule "orRight" (formula "52"))
                        (rule "orRight" (formula "52"))
                        (rule "orRight" (formula "52"))
                        (rule "replace_known_right" (formula "49") (term "1,0,1") (ifseqformula "56"))
                         (builtin "One Step Simplification" (formula "49") (ifInst ""  (formula "57")) (ifInst ""  (formula "52")) (ifInst ""  (formula "53")) (ifInst ""  (formula "54")) (ifInst ""  (formula "55")))
                        (rule "assignment" (formula "79") (term "1"))
                         (builtin "One Step Simplification" (formula "79"))
                        (rule "blockEmpty" (formula "79") (term "1"))
                        (rule "methodCallReturn" (formula "79") (term "1"))
                        (rule "assignment" (formula "79") (term "1"))
                         (builtin "One Step Simplification" (formula "79"))
                        (rule "methodCallEmpty" (formula "79") (term "1"))
                        (rule "tryEmpty" (formula "79") (term "1"))
                        (rule "emptyModality" (formula "79") (term "1"))
                         (builtin "One Step Simplification" (formula "79") (ifInst ""  (formula "52")) (ifInst ""  (formula "57")) (ifInst ""  (formula "50")) (ifInst ""  (formula "57")))
                        (rule "eqSymm" (formula "79") (term "1,0,0,1"))
                        (rule "polySimp_homoEq" (formula "79") (term "0"))
                        (rule "polySimp_addComm1" (formula "79") (term "0,0"))
                        (rule "mod_axiom" (formula "79") (term "0,1,0,0,0"))
                        (rule "polySimp_mulLiterals" (formula "79") (term "1,0,1,0,0,0"))
                        (rule "polySimp_mulComm0" (formula "79") (term "1,0,0,0"))
                        (rule "polySimp_rightDist" (formula "79") (term "1,0,0,0"))
                        (rule "polySimp_mulLiterals" (formula "79") (term "1,1,0,0,0"))
                        (rule "polySimp_rightDist" (formula "79") (term "0,1,0,0,0"))
                        (rule "mul_literals" (formula "79") (term "0,0,1,0,0,0"))
                        (rule "polySimp_addAssoc" (formula "79") (term "0,0,0"))
                        (rule "polySimp_addAssoc" (formula "79") (term "0,0,0,0"))
                        (rule "add_literals" (formula "79") (term "0,0,0,0,0"))
                        (rule "applyEq" (formula "79") (term "0,1,0,0,0") (ifseqformula "29"))
                        (rule "mul_literals" (formula "79") (term "1,0,0,0"))
                        (rule "polySimp_addComm1" (formula "79") (term "0,0,0"))
                        (rule "add_literals" (formula "79") (term "0,0,0,0"))
                        (rule "polySimp_sepPosMonomial" (formula "79") (term "0"))
                        (rule "polySimp_mulComm0" (formula "79") (term "1,0"))
                        (rule "polySimp_rightDist" (formula "79") (term "1,0"))
                        (rule "mul_literals" (formula "79") (term "0,1,0"))
                        (rule "polySimp_mulLiterals" (formula "79") (term "1,1,0"))
                        (rule "polySimp_elimOne" (formula "79") (term "1,1,0"))
                        (rule "pullOutSelect" (formula "79") (term "0,0") (inst "selectSK=de_polyas_core3_open_crypto_basic_Hashes_currentIndex_2"))
                        (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "49"))
                         (builtin "One Step Simplification" (formula "1"))
                        (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "44"))
                         (builtin "One Step Simplification" (formula "1"))
                        (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "38"))
                         (builtin "One Step Simplification" (formula "1"))
                        (rule "replaceKnownSelect_taclet000_3" (formula "1") (term "0"))
                        (rule "replaceKnownAuxiliaryConstant_taclet000_4" (formula "1") (term "0"))
                        (rule "applyEqReverse" (formula "80") (term "0,0") (ifseqformula "1"))
                        (rule "hideAuxiliaryEq" (formula "1"))
                        (rule "replace_known_left" (formula "79") (term "0") (ifseqformula "31"))
                         (builtin "One Step Simplification" (formula "79"))
                        (rule "allRight" (formula "79") (inst "sk=f_0"))
                        (rule "allRight" (formula "79") (inst "sk=o_0"))
                        (rule "orRight" (formula "79"))
                        (rule "orRight" (formula "79"))
                        (rule "pullOutSelect" (formula "81") (term "0") (inst "selectSK=f_0_0"))
                        (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "49"))
                         (builtin "One Step Simplification" (formula "1"))
                        (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,1,0,0") (ifseqformula "44"))
                        (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,0,1,0,0") (ifseqformula "38"))
                        (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,0,0,1,0,0") (ifseqformula "28"))
                        (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,0,0,0,1,0,0") (ifseqformula "21"))
                        (rule "eqSymm" (formula "82"))
                        (rule "pullOutSelect" (formula "1") (term "2,0") (inst "selectSK=f_0_1"))
                        (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "45"))
                         (builtin "One Step Simplification" (formula "1"))
                        (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,1,0,0") (ifseqformula "39"))
                        (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,0,1,0,0") (ifseqformula "29"))
                        (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,0,0,1,0,0") (ifseqformula "22"))
                        (rule "pullOutSelect" (formula "1") (term "2,0") (inst "selectSK=f_0_2"))
                        (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "40"))
                         (builtin "One Step Simplification" (formula "1"))
                        (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,1,0,0") (ifseqformula "30"))
                        (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,0,1,0,0") (ifseqformula "23"))
                        (rule "pullOutSelect" (formula "1") (term "2,0") (inst "selectSK=f_0_3"))
                        (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "31"))
                         (builtin "One Step Simplification" (formula "1"))
                        (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,1,1,0,0") (ifseqformula "24"))
                        (rule "elementOfSingleton" (formula "1") (term "0,0,0,0"))
                        (rule "replace_known_right" (formula "1") (term "0,0,0,0") (ifseqformula "83"))
                         (builtin "One Step Simplification" (formula "1"))
                        (rule "pullOutSelect" (formula "1") (term "2,0") (inst "selectSK=f_0_4"))
                        (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "25"))
                         (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "85")))
                        (rule "applyEqReverse" (formula "2") (term "2,0") (ifseqformula "1"))
                        (rule "hideAuxiliaryEq" (formula "1"))
                        (rule "commute_and" (formula "83"))
                        (rule "commute_or_2" (formula "4") (term "0,1,0,0"))
                        (rule "commute_or_2" (formula "3") (term "0,1,0,0"))
                        (rule "commute_or_2" (formula "4") (term "0,0,1,0,0"))
                        (rule "commute_or_2" (formula "4") (term "0,1,0,0"))
                        (rule "commute_or_2" (formula "4") (term "0,0,0,1,0,0"))
                        (rule "cut_direct" (formula "32") (term "0,0"))
                        (branch "CUT: result_806.<created> = TRUE TRUE"
                            (builtin "One Step Simplification" (formula "33"))
                           (rule "true_left" (formula "33"))
                           (rule "cut_direct" (formula "5") (term "0"))
                           (branch "CUT: strPool( 〈'd'〉 ∘ ( 〈'e'〉 ∘ ( 〈'r'〉 ∘ ( 〈'i'〉 ∘ ( 〈'v'〉 ∘ ( 〈'e'〉 ∘ ( 〈'-'〉 ∘ ( 〈'p'〉 ∘ ( 〈'a'〉 ∘ ( 〈's'〉 ∘ ( 〈's'〉 ∘ ( 〈'w'〉 ∘ ( 〈'o'〉 ∘ ( 〈'r'〉 ∘ 〈'd'〉)))))))))))))).<created> = TRUE TRUE"
                               (builtin "One Step Simplification" (formula "6"))
                              (rule "true_left" (formula "6"))
                              (rule "ifthenelse_split" (formula "1") (term "0"))
                              (branch " ¬o_0 = null ∧ ¬( o_0.<created> = TRUE ∨ o_0.<created>@anon_heap_getOrder«anonHeapFunction» = TRUE) TRUE"
                                 (rule "andLeft" (formula "1"))
                                 (rule "notLeft" (formula "2"))
                                 (rule "notLeft" (formula "1"))
                                 (rule "orRight" (formula "57"))
                                 (rule "applyEqReverse" (formula "2") (term "2,0") (ifseqformula "1"))
                                 (rule "hideAuxiliaryEq" (formula "1"))
                                 (rule "replace_known_right" (formula "2") (term "1,0,0,0,1,0,0") (ifseqformula "57"))
                                  (builtin "One Step Simplification" (formula "2") (ifInst ""  (formula "55")) (ifInst ""  (formula "56")))
                                 (rule "replace_known_right" (formula "1") (term "0,0,0,0") (ifseqformula "55"))
                                  (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "56")) (ifInst ""  (formula "57")))
                                 (rule "replace_known_right" (formula "3") (term "0,0,0,0,0,1,0,0") (ifseqformula "56"))
                                  (builtin "One Step Simplification" (formula "3") (ifInst ""  (formula "55")) (ifInst ""  (formula "57")))
                                 (rule "replace_known_right" (formula "86") (term "0,1") (ifseqformula "56"))
                                  (builtin "One Step Simplification" (formula "86") (ifInst ""  (formula "55")))
                                 (rule "closeTrue" (formula "86"))
                              )
                              (branch " ¬o_0 = null ∧ ¬( o_0.<created> = TRUE ∨ o_0.<created>@anon_heap_getOrder«anonHeapFunction» = TRUE) FALSE"
                                 (rule "applyEqReverse" (formula "2") (term "2,0") (ifseqformula "1"))
                                 (rule "hideAuxiliaryEq" (formula "1"))
                                 (rule "ifthenelse_split" (formula "1") (term "0"))
                                 (branch " ¬o_0 = null ∧ ¬( o_0.<created> = TRUE ∨ o_0.<created>@anon_heap_getOrder«anonHeapFunction» = TRUE ∨ o_0.<created>@anon_heap_uniformHash«anonHeapFunction» = TRUE) TRUE"
                                    (rule "andLeft" (formula "1"))
                                    (rule "notLeft" (formula "1"))
                                    (rule "notLeft" (formula "1"))
                                    (rule "orRight" (formula "55"))
                                    (rule "orRight" (formula "55"))
                                    (rule "applyEqReverse" (formula "2") (term "2,0") (ifseqformula "1"))
                                    (rule "hideAuxiliaryEq" (formula "1"))
                                    (rule "replace_known_right" (formula "1") (term "0,0,0,0,1,0,0") (ifseqformula "54"))
                                     (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "57")) (ifInst ""  (formula "55")) (ifInst ""  (formula "56")))
                                    (rule "replace_known_right" (formula "2") (term "1,0,1,0,0") (ifseqformula "56"))
                                     (builtin "One Step Simplification" (formula "2") (ifInst ""  (formula "57")) (ifInst ""  (formula "54")) (ifInst ""  (formula "55")))
                                    (rule "replace_known_right" (formula "87") (term "0,1") (ifseqformula "54"))
                                     (builtin "One Step Simplification" (formula "87") (ifInst ""  (formula "57")))
                                    (rule "closeTrue" (formula "87"))
                                 )
                                 (branch " ¬o_0 = null ∧ ¬( o_0.<created> = TRUE ∨ o_0.<created>@anon_heap_getOrder«anonHeapFunction» = TRUE ∨ o_0.<created>@anon_heap_uniformHash«anonHeapFunction» = TRUE) FALSE"
                                    (rule "applyEqReverse" (formula "2") (term "2,0") (ifseqformula "1"))
                                    (rule "hideAuxiliaryEq" (formula "1"))
                                    (rule "ifthenelse_split" (formula "1") (term "0"))
                                    (branch " ¬o_0 = null ∧ ¬( o_0.<created> = TRUE ∨ o_0.<created>@anon_heap_getOrder«anonHeapFunction» = TRUE ∨ o_0.<created>@anon_heap_pow«anonHeapFunction» = TRUE ∨ o_0.<created>@anon_heap_uniformHash«anonHeapFunction» = TRUE) TRUE"
                                       (rule "andLeft" (formula "1"))
                                       (rule "notLeft" (formula "2"))
                                       (rule "notLeft" (formula "1"))
                                       (rule "orRight" (formula "55"))
                                       (rule "orRight" (formula "55"))
                                       (rule "orRight" (formula "55"))
                                       (rule "applyEqReverse" (formula "2") (term "2,0") (ifseqformula "1"))
                                       (rule "hideAuxiliaryEq" (formula "1"))
                                       (rule "replace_known_right" (formula "1") (term "1,0,0,1,0,0") (ifseqformula "56"))
                                        (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "53")) (ifInst ""  (formula "54")) (ifInst ""  (formula "55")) (ifInst ""  (formula "57")))
                                       (rule "replace_known_right" (formula "88") (term "0,1") (ifseqformula "54"))
                                        (builtin "One Step Simplification" (formula "88") (ifInst ""  (formula "53")))
                                       (rule "closeTrue" (formula "88"))
                                    )
                                    (branch " ¬o_0 = null ∧ ¬( o_0.<created> = TRUE ∨ o_0.<created>@anon_heap_getOrder«anonHeapFunction» = TRUE ∨ o_0.<created>@anon_heap_pow«anonHeapFunction» = TRUE ∨ o_0.<created>@anon_heap_uniformHash«anonHeapFunction» = TRUE) FALSE"
                                       (rule "applyEqReverse" (formula "2") (term "2,0") (ifseqformula "1"))
                                       (rule "hideAuxiliaryEq" (formula "1"))
                                       (rule "cut_direct" (formula "83") (term "1"))
                                       (branch "CUT: o_0 = null TRUE"
                                           (builtin "One Step Simplification" (formula "84"))
                                          (rule "replace_known_left" (formula "2") (term "0,0,0,0") (ifseqformula "1"))
                                           (builtin "One Step Simplification" (formula "2") (ifInst ""  (formula "86")))
                                          (rule "closeFalse" (formula "2"))
                                       )
                                       (branch "CUT: o_0 = null FALSE"
                                           (builtin "One Step Simplification" (formula "84"))
                                          (rule "false_right" (formula "84"))
                                          (rule "replace_known_right" (formula "1") (term "0,0,0,0") (ifseqformula "83"))
                                           (builtin "One Step Simplification" (formula "1"))
                                          (rule "replace_known_right" (formula "84") (term "0,0") (ifseqformula "83"))
                                           (builtin "One Step Simplification" (formula "84"))
                                          (rule "notRight" (formula "84"))
                                          (rule "replace_known_left" (formula "2") (term "0,0,0,0,0,0,0") (ifseqformula "1"))
                                           (builtin "One Step Simplification" (formula "2") (ifInst ""  (formula "85")))
                                          (rule "closeFalse" (formula "2"))
                                       )
                                    )
                                 )
                              )
                           )
                           (branch "CUT: strPool( 〈'd'〉 ∘ ( 〈'e'〉 ∘ ( 〈'r'〉 ∘ ( 〈'i'〉 ∘ ( 〈'v'〉 ∘ ( 〈'e'〉 ∘ ( 〈'-'〉 ∘ ( 〈'p'〉 ∘ ( 〈'a'〉 ∘ ( 〈's'〉 ∘ ( 〈's'〉 ∘ ( 〈'w'〉 ∘ ( 〈'o'〉 ∘ ( 〈'r'〉 ∘ 〈'd'〉)))))))))))))).<created> = TRUE FALSE"
                               (builtin "One Step Simplification" (formula "5"))
                              (rule "ifthenelse_split" (formula "1") (term "0"))
                              (branch " ¬o_0 = null ∧ ¬( o_0.<created> = TRUE ∨ o_0.<created>@anon_heap_getOrder«anonHeapFunction» = TRUE) TRUE"
                                 (rule "andLeft" (formula "1"))
                                 (rule "notLeft" (formula "1"))
                                 (rule "notLeft" (formula "1"))
                                 (rule "orRight" (formula "56"))
                                 (rule "applyEqReverse" (formula "2") (term "2,0") (ifseqformula "1"))
                                 (rule "hideAuxiliaryEq" (formula "1"))
                                 (rule "replace_known_right" (formula "2") (term "0,0,0,0") (ifseqformula "57"))
                                  (builtin "One Step Simplification" (formula "2") (ifInst ""  (formula "55")) (ifInst ""  (formula "56")))
                                 (rule "replace_known_right" (formula "3") (term "0,0,0,0") (ifseqformula "57"))
                                  (builtin "One Step Simplification" (formula "3") (ifInst ""  (formula "55")) (ifInst ""  (formula "56")))
                                 (rule "replace_known_right" (formula "1") (term "1,0,0,1,0,0") (ifseqformula "56"))
                                  (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "57")) (ifInst ""  (formula "55")))
                                 (rule "replace_known_right" (formula "86") (term "1") (ifseqformula "57"))
                                  (builtin "One Step Simplification" (formula "86"))
                                 (rule "false_right" (formula "86"))
                                 (rule "replace_known_right" (formula "86") (term "0,1") (ifseqformula "55"))
                                  (builtin "One Step Simplification" (formula "86") (ifInst ""  (formula "57")))
                                 (rule "closeTrue" (formula "86"))
                              )
                              (branch " ¬o_0 = null ∧ ¬( o_0.<created> = TRUE ∨ o_0.<created>@anon_heap_getOrder«anonHeapFunction» = TRUE) FALSE"
                                 (rule "applyEqReverse" (formula "2") (term "2,0") (ifseqformula "1"))
                                 (rule "hideAuxiliaryEq" (formula "1"))
                                 (rule "ifthenelse_split" (formula "1") (term "0"))
                                 (branch " ¬o_0 = null ∧ ¬( o_0.<created> = TRUE ∨ o_0.<created>@anon_heap_getOrder«anonHeapFunction» = TRUE ∨ o_0.<created>@anon_heap_uniformHash«anonHeapFunction» = TRUE) TRUE"
                                    (rule "andLeft" (formula "1"))
                                    (rule "notLeft" (formula "1"))
                                    (rule "notLeft" (formula "1"))
                                    (rule "orRight" (formula "55"))
                                    (rule "orRight" (formula "55"))
                                    (rule "applyEqReverse" (formula "2") (term "2,0") (ifseqformula "1"))
                                    (rule "hideAuxiliaryEq" (formula "1"))
                                    (rule "replace_known_right" (formula "2") (term "1,0,1,0,0") (ifseqformula "56"))
                                     (builtin "One Step Simplification" (formula "2") (ifInst ""  (formula "57")) (ifInst ""  (formula "54")) (ifInst ""  (formula "55")))
                                    (rule "replace_known_right" (formula "1") (term "1,0,0,0,1,0,0") (ifseqformula "55"))
                                     (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "57")) (ifInst ""  (formula "54")) (ifInst ""  (formula "56")))
                                    (rule "replace_known_right" (formula "88") (term "0,1") (ifseqformula "54"))
                                     (builtin "One Step Simplification" (formula "88") (ifInst ""  (formula "57")))
                                    (rule "closeTrue" (formula "88"))
                                 )
                                 (branch " ¬o_0 = null ∧ ¬( o_0.<created> = TRUE ∨ o_0.<created>@anon_heap_getOrder«anonHeapFunction» = TRUE ∨ o_0.<created>@anon_heap_uniformHash«anonHeapFunction» = TRUE) FALSE"
                                    (rule "applyEqReverse" (formula "2") (term "2,0") (ifseqformula "1"))
                                    (rule "hideAuxiliaryEq" (formula "1"))
                                    (rule "ifthenelse_split" (formula "1") (term "0"))
                                    (branch " ¬o_0 = null ∧ ¬( o_0.<created> = TRUE ∨ o_0.<created>@anon_heap_getOrder«anonHeapFunction» = TRUE ∨ o_0.<created>@anon_heap_pow«anonHeapFunction» = TRUE ∨ o_0.<created>@anon_heap_uniformHash«anonHeapFunction» = TRUE) TRUE"
                                       (rule "andLeft" (formula "1"))
                                       (rule "notLeft" (formula "1"))
                                       (rule "notLeft" (formula "1"))
                                       (rule "orRight" (formula "54"))
                                       (rule "orRight" (formula "54"))
                                       (rule "orRight" (formula "54"))
                                       (rule "applyEqReverse" (formula "2") (term "2,0") (ifseqformula "1"))
                                       (rule "hideAuxiliaryEq" (formula "1"))
                                       (rule "replace_known_right" (formula "1") (term "1,0,0,0,1,0,0") (ifseqformula "54"))
                                        (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "57")) (ifInst ""  (formula "53")) (ifInst ""  (formula "55")) (ifInst ""  (formula "56")))
                                       (rule "replace_known_right" (formula "89") (term "0,0") (ifseqformula "57"))
                                        (builtin "One Step Simplification" (formula "89") (ifInst ""  (formula "53")))
                                       (rule "closeTrue" (formula "89"))
                                    )
                                    (branch " ¬o_0 = null ∧ ¬( o_0.<created> = TRUE ∨ o_0.<created>@anon_heap_getOrder«anonHeapFunction» = TRUE ∨ o_0.<created>@anon_heap_pow«anonHeapFunction» = TRUE ∨ o_0.<created>@anon_heap_uniformHash«anonHeapFunction» = TRUE) FALSE"
                                       (rule "applyEqReverse" (formula "2") (term "2,0") (ifseqformula "1"))
                                       (rule "hideAuxiliaryEq" (formula "1"))
                                       (rule "ifthenelse_split" (formula "1") (term "0"))
                                       (branch " ¬o_0 = null ∧ ¬( o_0.<created> = TRUE ∨ o_0.<created>@anon_heap_asBytes«anonHeapFunction» = TRUE ∨ o_0.<created>@anon_heap_getOrder«anonHeapFunction» = TRUE ∨ o_0.<created>@anon_heap_pow«anonHeapFunction» = TRUE ∨ o_0.<created>@anon_heap_uniformHash«anonHeapFunction» = TRUE) TRUE"
                                          (rule "andLeft" (formula "1"))
                                          (rule "notLeft" (formula "1"))
                                          (rule "notLeft" (formula "1"))
                                          (rule "orRight" (formula "53"))
                                          (rule "orRight" (formula "53"))
                                          (rule "orRight" (formula "53"))
                                          (rule "orRight" (formula "53"))
                                          (rule "applyEqReverse" (formula "92") (term "1") (ifseqformula "1"))
                                          (rule "hideAuxiliaryEq" (formula "1"))
                                          (rule "eqSymm" (formula "91"))
                                          (rule "replace_known_right" (formula "90") (term "0,1") (ifseqformula "52"))
                                           (builtin "One Step Simplification" (formula "90") (ifInst ""  (formula "57")))
                                          (rule "closeTrue" (formula "90"))
                                       )
                                       (branch " ¬o_0 = null ∧ ¬( o_0.<created> = TRUE ∨ o_0.<created>@anon_heap_asBytes«anonHeapFunction» = TRUE ∨ o_0.<created>@anon_heap_getOrder«anonHeapFunction» = TRUE ∨ o_0.<created>@anon_heap_pow«anonHeapFunction» = TRUE ∨ o_0.<created>@anon_heap_uniformHash«anonHeapFunction» = TRUE) FALSE"
                                          (rule "close" (formula "87") (ifseqformula "1"))
                                       )
                                    )
                                 )
                              )
                           )
                        )
                        (branch "CUT: result_806.<created> = TRUE FALSE"
                            (builtin "One Step Simplification" (formula "32"))
                           (rule "cut_direct" (formula "5") (term "0"))
                           (branch "CUT: strPool( 〈'd'〉 ∘ ( 〈'e'〉 ∘ ( 〈'r'〉 ∘ ( 〈'i'〉 ∘ ( 〈'v'〉 ∘ ( 〈'e'〉 ∘ ( 〈'-'〉 ∘ ( 〈'p'〉 ∘ ( 〈'a'〉 ∘ ( 〈's'〉 ∘ ( 〈's'〉 ∘ ( 〈'w'〉 ∘ ( 〈'o'〉 ∘ ( 〈'r'〉 ∘ 〈'd'〉)))))))))))))).<created> = TRUE TRUE"
                               (builtin "One Step Simplification" (formula "6"))
                              (rule "true_left" (formula "6"))
                              (rule "ifthenelse_split" (formula "1") (term "0"))
                              (branch " ¬o_0 = null ∧ ¬( o_0.<created> = TRUE ∨ o_0.<created>@anon_heap_getOrder«anonHeapFunction» = TRUE) TRUE"
                                 (rule "andLeft" (formula "1"))
                                 (rule "notLeft" (formula "2"))
                                 (rule "notLeft" (formula "1"))
                                 (rule "orRight" (formula "57"))
                                 (rule "applyEqReverse" (formula "2") (term "2,0") (ifseqformula "1"))
                                 (rule "hideAuxiliaryEq" (formula "1"))
                                 (rule "replace_known_right" (formula "2") (term "1,0,0,0,1,0,0") (ifseqformula "57"))
                                  (builtin "One Step Simplification" (formula "2") (ifInst ""  (formula "55")) (ifInst ""  (formula "56")))
                                 (rule "replace_known_right" (formula "3") (term "1,0,0,0,1,0,0") (ifseqformula "57"))
                                  (builtin "One Step Simplification" (formula "3") (ifInst ""  (formula "55")) (ifInst ""  (formula "56")))
                                 (rule "replace_known_right" (formula "1") (term "0,0,0,0") (ifseqformula "55"))
                                  (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "56")) (ifInst ""  (formula "57")))
                                 (rule "replace_known_right" (formula "86") (term "1") (ifseqformula "55"))
                                  (builtin "One Step Simplification" (formula "86"))
                                 (rule "false_right" (formula "86"))
                                 (rule "replace_known_right" (formula "86") (term "0,0") (ifseqformula "55"))
                                  (builtin "One Step Simplification" (formula "86") (ifInst ""  (formula "56")))
                                 (rule "closeTrue" (formula "86"))
                              )
                              (branch " ¬o_0 = null ∧ ¬( o_0.<created> = TRUE ∨ o_0.<created>@anon_heap_getOrder«anonHeapFunction» = TRUE) FALSE"
                                 (rule "applyEqReverse" (formula "2") (term "2,0") (ifseqformula "1"))
                                 (rule "hideAuxiliaryEq" (formula "1"))
                                 (rule "ifthenelse_split" (formula "1") (term "0"))
                                 (branch " ¬o_0 = null ∧ ¬( o_0.<created> = TRUE ∨ o_0.<created>@anon_heap_getOrder«anonHeapFunction» = TRUE ∨ o_0.<created>@anon_heap_uniformHash«anonHeapFunction» = TRUE) TRUE"
                                    (rule "andLeft" (formula "1"))
                                    (rule "notLeft" (formula "1"))
                                    (rule "notLeft" (formula "1"))
                                    (rule "orRight" (formula "55"))
                                    (rule "orRight" (formula "55"))
                                    (rule "applyEqReverse" (formula "2") (term "2,0") (ifseqformula "1"))
                                    (rule "hideAuxiliaryEq" (formula "1"))
                                    (rule "replace_known_right" (formula "2") (term "1,0,0,0,1,0,0") (ifseqformula "55"))
                                     (builtin "One Step Simplification" (formula "2") (ifInst ""  (formula "57")) (ifInst ""  (formula "54")) (ifInst ""  (formula "56")))
                                    (rule "replace_known_right" (formula "1") (term "0,0,0,0,1,0,0") (ifseqformula "54"))
                                     (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "57")) (ifInst ""  (formula "55")) (ifInst ""  (formula "56")))
                                    (rule "replace_known_right" (formula "87") (term "1") (ifseqformula "57"))
                                     (builtin "One Step Simplification" (formula "87"))
                                    (rule "false_right" (formula "87"))
                                    (rule "replace_known_right" (formula "87") (term "0,0") (ifseqformula "57"))
                                     (builtin "One Step Simplification" (formula "87") (ifInst ""  (formula "54")))
                                    (rule "closeTrue" (formula "87"))
                                 )
                                 (branch " ¬o_0 = null ∧ ¬( o_0.<created> = TRUE ∨ o_0.<created>@anon_heap_getOrder«anonHeapFunction» = TRUE ∨ o_0.<created>@anon_heap_uniformHash«anonHeapFunction» = TRUE) FALSE"
                                    (rule "applyEqReverse" (formula "2") (term "2,0") (ifseqformula "1"))
                                    (rule "hideAuxiliaryEq" (formula "1"))
                                    (rule "ifthenelse_split" (formula "1") (term "0"))
                                    (branch " ¬o_0 = null ∧ ¬( o_0.<created> = TRUE ∨ o_0.<created>@anon_heap_getOrder«anonHeapFunction» = TRUE ∨ o_0.<created>@anon_heap_pow«anonHeapFunction» = TRUE ∨ o_0.<created>@anon_heap_uniformHash«anonHeapFunction» = TRUE) TRUE"
                                       (rule "andLeft" (formula "1"))
                                       (rule "notLeft" (formula "1"))
                                       (rule "notLeft" (formula "1"))
                                       (rule "orRight" (formula "54"))
                                       (rule "orRight" (formula "54"))
                                       (rule "orRight" (formula "54"))
                                       (rule "applyEqReverse" (formula "2") (term "2,0") (ifseqformula "1"))
                                       (rule "hideAuxiliaryEq" (formula "1"))
                                       (rule "replace_known_right" (formula "1") (term "1,0,0,0,1,0,0") (ifseqformula "54"))
                                        (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "57")) (ifInst ""  (formula "53")) (ifInst ""  (formula "55")) (ifInst ""  (formula "56")))
                                       (rule "replace_known_right" (formula "88") (term "1") (ifseqformula "57"))
                                        (builtin "One Step Simplification" (formula "88"))
                                       (rule "false_right" (formula "88"))
                                       (rule "replace_known_right" (formula "88") (term "0,0") (ifseqformula "57"))
                                        (builtin "One Step Simplification" (formula "88") (ifInst ""  (formula "53")))
                                       (rule "closeTrue" (formula "88"))
                                    )
                                    (branch " ¬o_0 = null ∧ ¬( o_0.<created> = TRUE ∨ o_0.<created>@anon_heap_getOrder«anonHeapFunction» = TRUE ∨ o_0.<created>@anon_heap_pow«anonHeapFunction» = TRUE ∨ o_0.<created>@anon_heap_uniformHash«anonHeapFunction» = TRUE) FALSE"
                                       (rule "applyEqReverse" (formula "2") (term "2,0") (ifseqformula "1"))
                                       (rule "hideAuxiliaryEq" (formula "1"))
                                       (rule "ifthenelse_split" (formula "1") (term "0"))
                                       (branch " ¬o_0 = null ∧ ¬( o_0.<created> = TRUE ∨ o_0.<created>@anon_heap_asBytes«anonHeapFunction» = TRUE ∨ o_0.<created>@anon_heap_getOrder«anonHeapFunction» = TRUE ∨ o_0.<created>@anon_heap_pow«anonHeapFunction» = TRUE ∨ o_0.<created>@anon_heap_uniformHash«anonHeapFunction» = TRUE) TRUE"
                                          (rule "andLeft" (formula "1"))
                                          (rule "notLeft" (formula "1"))
                                          (rule "notLeft" (formula "1"))
                                          (rule "orRight" (formula "53"))
                                          (rule "orRight" (formula "53"))
                                          (rule "orRight" (formula "53"))
                                          (rule "orRight" (formula "53"))
                                          (rule "applyEqReverse" (formula "92") (term "1") (ifseqformula "1"))
                                          (rule "hideAuxiliaryEq" (formula "1"))
                                          (rule "eqSymm" (formula "91"))
                                          (rule "replace_known_right" (formula "89") (term "1") (ifseqformula "57"))
                                           (builtin "One Step Simplification" (formula "89"))
                                          (rule "false_right" (formula "89"))
                                          (rule "replace_known_right" (formula "89") (term "0,0") (ifseqformula "57"))
                                           (builtin "One Step Simplification" (formula "89") (ifInst ""  (formula "52")))
                                          (rule "closeTrue" (formula "89"))
                                       )
                                       (branch " ¬o_0 = null ∧ ¬( o_0.<created> = TRUE ∨ o_0.<created>@anon_heap_asBytes«anonHeapFunction» = TRUE ∨ o_0.<created>@anon_heap_getOrder«anonHeapFunction» = TRUE ∨ o_0.<created>@anon_heap_pow«anonHeapFunction» = TRUE ∨ o_0.<created>@anon_heap_uniformHash«anonHeapFunction» = TRUE) FALSE"
                                          (rule "close" (formula "87") (ifseqformula "1"))
                                       )
                                    )
                                 )
                              )
                           )
                           (branch "CUT: strPool( 〈'd'〉 ∘ ( 〈'e'〉 ∘ ( 〈'r'〉 ∘ ( 〈'i'〉 ∘ ( 〈'v'〉 ∘ ( 〈'e'〉 ∘ ( 〈'-'〉 ∘ ( 〈'p'〉 ∘ ( 〈'a'〉 ∘ ( 〈's'〉 ∘ ( 〈's'〉 ∘ ( 〈'w'〉 ∘ ( 〈'o'〉 ∘ ( 〈'r'〉 ∘ 〈'd'〉)))))))))))))).<created> = TRUE FALSE"
                               (builtin "One Step Simplification" (formula "5"))
                              (rule "ifthenelse_split" (formula "1") (term "0"))
                              (branch " ¬o_0 = null ∧ ¬( o_0.<created> = TRUE ∨ o_0.<created>@anon_heap_getOrder«anonHeapFunction» = TRUE) TRUE"
                                 (rule "andLeft" (formula "1"))
                                 (rule "notLeft" (formula "2"))
                                 (rule "notLeft" (formula "1"))
                                 (rule "orRight" (formula "57"))
                                 (rule "applyEqReverse" (formula "2") (term "2,0") (ifseqformula "1"))
                                 (rule "hideAuxiliaryEq" (formula "1"))
                                 (rule "replace_known_right" (formula "1") (term "1,0,0,1,0,0") (ifseqformula "57"))
                                  (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "55")) (ifInst ""  (formula "56")))
                                 (rule "replace_known_right" (formula "3") (term "0,0,0,0,0,1,0,0") (ifseqformula "56"))
                                  (builtin "One Step Simplification" (formula "3") (ifInst ""  (formula "55")) (ifInst ""  (formula "57")))
                                 (rule "replace_known_right" (formula "2") (term "1,0,0,0,1,0,0") (ifseqformula "57"))
                                  (builtin "One Step Simplification" (formula "2") (ifInst ""  (formula "55")) (ifInst ""  (formula "56")))
                                 (rule "replace_known_right" (formula "87") (term "1") (ifseqformula "55"))
                                  (builtin "One Step Simplification" (formula "87"))
                                 (rule "false_right" (formula "87"))
                                 (rule "replace_known_right" (formula "87") (term "0,1") (ifseqformula "56"))
                                  (builtin "One Step Simplification" (formula "87") (ifInst ""  (formula "55")))
                                 (rule "closeTrue" (formula "87"))
                              )
                              (branch " ¬o_0 = null ∧ ¬( o_0.<created> = TRUE ∨ o_0.<created>@anon_heap_getOrder«anonHeapFunction» = TRUE) FALSE"
                                 (rule "applyEqReverse" (formula "2") (term "2,0") (ifseqformula "1"))
                                 (rule "hideAuxiliaryEq" (formula "1"))
                                 (rule "ifthenelse_split" (formula "1") (term "0"))
                                 (branch " ¬o_0 = null ∧ ¬( o_0.<created> = TRUE ∨ o_0.<created>@anon_heap_getOrder«anonHeapFunction» = TRUE ∨ o_0.<created>@anon_heap_uniformHash«anonHeapFunction» = TRUE) TRUE"
                                    (rule "andLeft" (formula "1"))
                                    (rule "notLeft" (formula "2"))
                                    (rule "notLeft" (formula "1"))
                                    (rule "orRight" (formula "56"))
                                    (rule "orRight" (formula "56"))
                                    (rule "applyEqReverse" (formula "2") (term "2,0") (ifseqformula "1"))
                                    (rule "hideAuxiliaryEq" (formula "1"))
                                    (rule "replace_known_right" (formula "1") (term "1,0,1,0,0") (ifseqformula "57"))
                                     (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "54")) (ifInst ""  (formula "55")) (ifInst ""  (formula "56")))
                                    (rule "replace_known_right" (formula "2") (term "0,0,0,0,0,1,0,0") (ifseqformula "55"))
                                     (builtin "One Step Simplification" (formula "2") (ifInst ""  (formula "54")) (ifInst ""  (formula "56")) (ifInst ""  (formula "57")))
                                    (rule "replace_known_right" (formula "89") (term "0,1") (ifseqformula "55"))
                                     (builtin "One Step Simplification" (formula "89") (ifInst ""  (formula "54")))
                                    (rule "closeTrue" (formula "89"))
                                 )
                                 (branch " ¬o_0 = null ∧ ¬( o_0.<created> = TRUE ∨ o_0.<created>@anon_heap_getOrder«anonHeapFunction» = TRUE ∨ o_0.<created>@anon_heap_uniformHash«anonHeapFunction» = TRUE) FALSE"
                                    (rule "applyEqReverse" (formula "2") (term "2,0") (ifseqformula "1"))
                                    (rule "hideAuxiliaryEq" (formula "1"))
                                    (rule "ifthenelse_split" (formula "1") (term "0"))
                                    (branch " ¬o_0 = null ∧ ¬( o_0.<created> = TRUE ∨ o_0.<created>@anon_heap_getOrder«anonHeapFunction» = TRUE ∨ o_0.<created>@anon_heap_pow«anonHeapFunction» = TRUE ∨ o_0.<created>@anon_heap_uniformHash«anonHeapFunction» = TRUE) TRUE"
                                       (rule "andLeft" (formula "1"))
                                       (rule "notLeft" (formula "2"))
                                       (rule "notLeft" (formula "1"))
                                       (rule "orRight" (formula "55"))
                                       (rule "orRight" (formula "55"))
                                       (rule "orRight" (formula "55"))
                                       (rule "applyEqReverse" (formula "2") (term "2,0") (ifseqformula "1"))
                                       (rule "hideAuxiliaryEq" (formula "1"))
                                       (rule "replace_known_right" (formula "1") (term "0,0,0,0") (ifseqformula "53"))
                                        (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "54")) (ifInst ""  (formula "55")) (ifInst ""  (formula "56")) (ifInst ""  (formula "57")))
                                       (rule "replace_known_right" (formula "89") (term "1") (ifseqformula "53"))
                                        (builtin "One Step Simplification" (formula "89"))
                                       (rule "false_right" (formula "89"))
                                       (rule "replace_known_right" (formula "89") (term "0,1") (ifseqformula "54"))
                                        (builtin "One Step Simplification" (formula "89") (ifInst ""  (formula "53")))
                                       (rule "closeTrue" (formula "89"))
                                    )
                                    (branch " ¬o_0 = null ∧ ¬( o_0.<created> = TRUE ∨ o_0.<created>@anon_heap_getOrder«anonHeapFunction» = TRUE ∨ o_0.<created>@anon_heap_pow«anonHeapFunction» = TRUE ∨ o_0.<created>@anon_heap_uniformHash«anonHeapFunction» = TRUE) FALSE"
                                       (rule "applyEqReverse" (formula "2") (term "2,0") (ifseqformula "1"))
                                       (rule "hideAuxiliaryEq" (formula "1"))
                                       (rule "ifthenelse_split" (formula "1") (term "0"))
                                       (branch " ¬o_0 = null ∧ ¬( o_0.<created> = TRUE ∨ o_0.<created>@anon_heap_asBytes«anonHeapFunction» = TRUE ∨ o_0.<created>@anon_heap_getOrder«anonHeapFunction» = TRUE ∨ o_0.<created>@anon_heap_pow«anonHeapFunction» = TRUE ∨ o_0.<created>@anon_heap_uniformHash«anonHeapFunction» = TRUE) TRUE"
                                          (rule "andLeft" (formula "1"))
                                          (rule "notLeft" (formula "2"))
                                          (rule "notLeft" (formula "1"))
                                          (rule "orRight" (formula "54"))
                                          (rule "orRight" (formula "54"))
                                          (rule "orRight" (formula "54"))
                                          (rule "orRight" (formula "54"))
                                          (rule "applyEqReverse" (formula "93") (term "1") (ifseqformula "1"))
                                          (rule "hideAuxiliaryEq" (formula "1"))
                                          (rule "eqSymm" (formula "92"))
                                          (rule "replace_known_right" (formula "91") (term "0,1") (ifseqformula "53"))
                                           (builtin "One Step Simplification" (formula "91") (ifInst ""  (formula "52")))
                                          (rule "closeTrue" (formula "91"))
                                       )
                                       (branch " ¬o_0 = null ∧ ¬( o_0.<created> = TRUE ∨ o_0.<created>@anon_heap_asBytes«anonHeapFunction» = TRUE ∨ o_0.<created>@anon_heap_getOrder«anonHeapFunction» = TRUE ∨ o_0.<created>@anon_heap_pow«anonHeapFunction» = TRUE ∨ o_0.<created>@anon_heap_uniformHash«anonHeapFunction» = TRUE) FALSE"
                                          (rule "close" (formula "88") (ifseqformula "1"))
                                       )
                                    )
                                 )
                              )
                           )
                        )
                     )
                     (branch "Exceptional Post (asHexString)"
                         (builtin "One Step Simplification" (formula "48"))
                         (builtin "One Step Simplification" (formula "70"))
                        (rule "selectCreatedOfAnonAsFormulaEQ" (formula "48") (term "0,0,0,0,0,1,1") (ifseqformula "43"))
                        (rule "selectCreatedOfAnonAsFormulaEQ" (formula "48") (term "0,0,0,0,0,0,1,1") (ifseqformula "37"))
                        (rule "selectCreatedOfAnonAsFormulaEQ" (formula "48") (term "0,0,0,0,0,0,0,1,1") (ifseqformula "27"))
                        (rule "selectCreatedOfAnonAsFormulaEQ" (formula "48") (term "0,0,0,0,0,0,0,0,1,1") (ifseqformula "20"))
                        (rule "andLeft" (formula "48"))
                        (rule "selectCreatedOfAnonAsFormulaEQ" (formula "49") (term "1,0") (ifseqformula "48"))
                        (rule "selectCreatedOfAnonAsFormulaEQ" (formula "49") (term "0,1,0") (ifseqformula "43"))
                        (rule "selectCreatedOfAnonAsFormulaEQ" (formula "49") (term "0,0,1,0") (ifseqformula "37"))
                        (rule "selectCreatedOfAnonAsFormulaEQ" (formula "49") (term "0,0,0,1,0") (ifseqformula "27"))
                        (rule "selectCreatedOfAnonAsFormulaEQ" (formula "49") (term "0,0,0,0,1,0") (ifseqformula "20"))
                        (rule "andLeft" (formula "49"))
                        (rule "andLeft" (formula "49"))
                        (rule "andLeft" (formula "51"))
                        (rule "notLeft" (formula "49"))
                        (rule "close" (formula "52") (ifseqformula "51"))
                     )
                     (branch "Pre (asHexString)"
                         (builtin "One Step Simplification" (formula "68") (ifInst ""  (formula "51")) (ifInst ""  (formula "51")))
                        (rule "wellFormedAnonEQ" (formula "68") (term "0") (ifseqformula "43"))
                        (rule "selectCreatedOfAnonAsFormulaEQ" (formula "68") (term "1") (ifseqformula "43"))
                        (rule "selectCreatedOfAnonAsFormulaEQ" (formula "68") (term "0,1") (ifseqformula "37"))
                        (rule "wellFormedAnonEQ" (formula "68") (term "0,0") (ifseqformula "37"))
                        (rule "wellFormedAnonEQ" (formula "68") (term "0,0,0") (ifseqformula "27"))
                        (rule "selectCreatedOfAnonAsFormulaEQ" (formula "68") (term "0,0,1") (ifseqformula "27"))
                        (rule "selectCreatedOfAnonAsFormulaEQ" (formula "68") (term "0,0,0,1") (ifseqformula "20"))
                        (rule "wellFormedAnonEQ" (formula "68") (term "0,0,0,0") (ifseqformula "20"))
                        (rule "replace_known_right" (formula "68") (term "1,0,1") (ifseqformula "50"))
                         (builtin "One Step Simplification" (formula "68") (ifInst ""  (formula "5")) (ifInst ""  (formula "19")) (ifInst ""  (formula "26")) (ifInst ""  (formula "36")) (ifInst ""  (formula "42")) (ifInst ""  (formula "47")) (ifInst ""  (formula "48")) (ifInst ""  (formula "49")) (ifInst ""  (formula "45")))
                        (rule "closeTrue" (formula "68"))
                     )
                  )
                  (branch "Exceptional Post (asBytes)"
                      (builtin "One Step Simplification" (formula "43"))
                      (builtin "One Step Simplification" (formula "60"))
                     (rule "selectCreatedOfAnonAsFormulaEQ" (formula "43") (term "0,0,0,0,0,1,1") (ifseqformula "37"))
                     (rule "selectCreatedOfAnonAsFormulaEQ" (formula "43") (term "0,0,0,0,0,0,1,1") (ifseqformula "27"))
                     (rule "selectCreatedOfAnonAsFormulaEQ" (formula "43") (term "0,0,0,0,0,0,0,1,1") (ifseqformula "20"))
                     (rule "andLeft" (formula "43"))
                     (rule "selectCreatedOfAnonAsFormulaEQ" (formula "44") (term "1,0") (ifseqformula "43"))
                     (rule "selectCreatedOfAnonAsFormulaEQ" (formula "44") (term "0,1,0") (ifseqformula "37"))
                     (rule "selectCreatedOfAnonAsFormulaEQ" (formula "44") (term "0,0,1,0") (ifseqformula "27"))
                     (rule "selectCreatedOfAnonAsFormulaEQ" (formula "44") (term "0,0,0,1,0") (ifseqformula "20"))
                     (rule "andLeft" (formula "44"))
                     (rule "andLeft" (formula "45"))
                     (rule "andLeft" (formula "44"))
                     (rule "andLeft" (formula "46"))
                     (rule "notLeft" (formula "44"))
                     (rule "close" (formula "48") (ifseqformula "47"))
                  )
                  (branch "Pre (asBytes)"
                      (builtin "One Step Simplification" (formula "58") (ifInst ""  (formula "45")) (ifInst ""  (formula "45")))
                     (rule "selectCreatedOfAnonAsFormulaEQ" (formula "58") (term "1,1") (ifseqformula "37"))
                     (rule "wellFormedAnonEQ" (formula "58") (term "0,1") (ifseqformula "37"))
                     (rule "wellFormedAnonEQ" (formula "58") (term "0,0,1") (ifseqformula "27"))
                     (rule "selectCreatedOfAnonAsFormulaEQ" (formula "58") (term "0,1,1") (ifseqformula "27"))
                     (rule "selectCreatedOfAnonAsFormulaEQ" (formula "58") (term "0,0,1,1") (ifseqformula "20"))
                     (rule "wellFormedAnonEQ" (formula "58") (term "0,0,0,1") (ifseqformula "20"))
                     (rule "replace_known_right" (formula "58") (term "0,0,0,1,1") (ifseqformula "42"))
                      (builtin "One Step Simplification" (formula "58") (ifInst ""  (formula "5")) (ifInst ""  (formula "19")) (ifInst ""  (formula "26")) (ifInst ""  (formula "36")) (ifInst ""  (formula "43")) (ifInst ""  (formula "44")) (ifInst ""  (formula "39")))
                     (rule "Class_invariant_axiom_for_de_polyas_core3_open_crypto_groups_ECGroup" (formula "58"))
                     (rule "replaceKnownSelect_taclet000000_19" (formula "58") (term "1,0,1"))
                     (rule "replaceKnownSelect_taclet000000_17" (formula "58") (term "1,1,1"))
                     (rule "replaceKnownAuxiliaryConstant_taclet000000_22" (formula "58") (term "1,0,1"))
                     (rule "replaceKnownAuxiliaryConstant_taclet000000_18" (formula "58") (term "1,1,1"))
                     (rule "replaceKnownSelect_taclet000000_19" (formula "58") (term "0,0,0,0"))
                     (rule "replaceKnownSelect_taclet000000_17" (formula "58") (term "0,0,1,0"))
                     (rule "replaceKnownAuxiliaryConstant_taclet000000_22" (formula "58") (term "0,0,0,0"))
                     (rule "replaceKnownAuxiliaryConstant_taclet000000_18" (formula "58") (term "0,0,1,0"))
                     (rule "replace_known_right" (formula "58") (term "0,0,0") (ifseqformula "53"))
                      (builtin "One Step Simplification" (formula "58") (ifInst ""  (formula "52")))
                     (rule "Class_invariant_axiom_for_org_bouncycastle_jce_spec_ECParameterSpec" (formula "58") (term "1"))
                     (rule "replaceKnownSelect_taclet000000_23" (formula "58") (term "1,1,1"))
                     (rule "replaceKnownAuxiliaryConstant_taclet000000_24" (formula "58") (term "1,1,1"))
                     (rule "replaceKnownSelect_taclet000000_23" (formula "58") (term "0,0,0,1"))
                     (rule "replaceKnownAuxiliaryConstant_taclet000000_24" (formula "58") (term "0,0,0,1"))
                     (rule "replace_known_right" (formula "58") (term "0,0,1") (ifseqformula "46"))
                      (builtin "One Step Simplification" (formula "58"))
                     (rule "Class_invariant_axiom_for_org_bouncycastle_math_ec_custom_sec_SecP256K1Curve" (formula "58") (term "0"))
                      (builtin "One Step Simplification" (formula "58"))
                     (rule "Class_invariant_axiom_for_org_bouncycastle_math_ec_ECPoint" (formula "58"))
                     (rule "closeTrue" (formula "58"))
                  )
                  (branch "Null reference (_group_31 = null)"
                      (builtin "One Step Simplification" (formula "58") (ifInst ""  (formula "57")))
                     (rule "closeTrue" (formula "58"))
                  )
               )
               (branch "Exceptional Post (pow)"
                   (builtin "One Step Simplification" (formula "37"))
                   (builtin "One Step Simplification" (formula "50"))
                  (rule "selectCreatedOfAnonAsFormulaEQ" (formula "37") (term "0,0,0,0,0,0,1,1") (ifseqformula "27"))
                  (rule "selectCreatedOfAnonAsFormulaEQ" (formula "37") (term "0,0,0,0,0,0,0,1,1") (ifseqformula "20"))
                  (rule "andLeft" (formula "37"))
                  (rule "selectCreatedOfAnonAsFormulaEQ" (formula "38") (term "1,0") (ifseqformula "37"))
                  (rule "selectCreatedOfAnonAsFormulaEQ" (formula "38") (term "0,1,0") (ifseqformula "27"))
                  (rule "selectCreatedOfAnonAsFormulaEQ" (formula "38") (term "0,0,1,0") (ifseqformula "20"))
                  (rule "andLeft" (formula "38"))
                  (rule "andLeft" (formula "38"))
                  (rule "andLeft" (formula "40"))
                  (rule "notLeft" (formula "38"))
                  (rule "close" (formula "41") (ifseqformula "40"))
               )
               (branch "Pre (pow)"
                   (builtin "One Step Simplification" (formula "48") (ifInst ""  (formula "36")) (ifInst ""  (formula "37")) (ifInst ""  (formula "36")) (ifInst ""  (formula "37")))
                  (rule "selectCreatedOfAnonAsFormulaEQ" (formula "48") (term "1,1") (ifseqformula "27"))
                  (rule "wellFormedAnonEQ" (formula "48") (term "0,0,1") (ifseqformula "27"))
                  (rule "selectCreatedOfAnonAsFormulaEQ" (formula "48") (term "0,1,1") (ifseqformula "20"))
                  (rule "selectCreatedOfAnonAsFormulaEQ" (formula "48") (term "1,0,1") (ifseqformula "27"))
                  (rule "selectCreatedOfAnonAsFormulaEQ" (formula "48") (term "0,1,0,1") (ifseqformula "20"))
                  (rule "wellFormedAnonEQ" (formula "48") (term "0,0,0,1") (ifseqformula "20"))
                  (rule "replace_known_left" (formula "48") (term "1,0,0,1") (ifseqformula "26"))
                   (builtin "One Step Simplification" (formula "48") (ifInst ""  (formula "5")) (ifInst ""  (formula "19")) (ifInst ""  (formula "2")) (ifInst ""  (formula "28")))
                  (rule "Static_class_invariant_axiom_for_java_math_BigInteger" (formula "48") (term "0"))
                  (rule "pullOutSelect" (formula "48") (term "0,0,0,0") (inst "selectSK=java_math_BigInteger_ZERO_0"))
                  (rule "applyEq" (formula "49") (term "1,0,1,0") (ifseqformula "1"))
                  (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "28"))
                   (builtin "One Step Simplification" (formula "1"))
                  (rule "elementOfSingleton" (formula "1") (term "0,0"))
                   (builtin "One Step Simplification" (formula "1"))
                  (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "21"))
                   (builtin "One Step Simplification" (formula "1"))
                  (rule "applyEqReverse" (formula "49") (term "1,0,1,0") (ifseqformula "1"))
                  (rule "applyEqReverse" (formula "49") (term "0,0,0,0") (ifseqformula "1"))
                  (rule "hideAuxiliaryEq" (formula "1"))
                  (rule "replace_known_right" (formula "48") (term "0,0,0") (ifseqformula "44"))
                   (builtin "One Step Simplification" (formula "48"))
                  (rule "pullOutSelect" (formula "48") (term "0,0") (inst "selectSK=java_math_BigInteger_value_1"))
                  (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "28"))
                   (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "45")))
                  (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,1,0,0") (ifseqformula "21"))
                  (rule "replace_known_left" (formula "1") (term "0,0,1,0,0") (ifseqformula "11"))
                   (builtin "One Step Simplification" (formula "1"))
                  (rule "elementOfSingleton" (formula "1") (term "0,0"))
                   (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "45")))
                  (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "21"))
                   (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "45")) (ifInst ""  (formula "11")))
                  (rule "applyEqReverse" (formula "49") (term "0,0") (ifseqformula "1"))
                  (rule "hideAuxiliaryEq" (formula "1"))
                  (rule "replace_known_left" (formula "48") (term "0") (ifseqformula "11"))
                   (builtin "One Step Simplification" (formula "48"))
                  (rule "Class_invariant_axiom_for_de_polyas_core3_open_crypto_groups_ECGroup" (formula "48") (term "1,1"))
                  (rule "replaceKnownSelect_taclet0000_10" (formula "48") (term "1,1,1,1,1"))
                  (rule "replaceKnownAuxiliaryConstant_taclet0000_12" (formula "48") (term "1,1,1,1,1"))
                  (rule "replaceKnownSelect_taclet0000_10" (formula "48") (term "0,0,1,0,1,1"))
                  (rule "replaceKnownAuxiliaryConstant_taclet0000_12" (formula "48") (term "0,0,1,0,1,1"))
                  (rule "replace_known_right" (formula "48") (term "0,1,0,1,1") (ifseqformula "42"))
                   (builtin "One Step Simplification" (formula "48"))
                  (rule "pullOutSelect" (formula "48") (term "1,0,1,1,1") (inst "selectSK=de_polyas_core3_open_crypto_groups_ECGroup_curve_0"))
                  (rule "applyEq" (formula "49") (term "0,0,0,1,1") (ifseqformula "1"))
                  (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "28"))
                   (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "48")))
                  (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,1,0,0") (ifseqformula "21"))
                  (rule "replace_known_left" (formula "1") (term "0,0,1,0,0") (ifseqformula "7"))
                   (builtin "One Step Simplification" (formula "1"))
                  (rule "elementOfSingleton" (formula "1") (term "0,0"))
                   (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "48")))
                  (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "21"))
                   (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "48")) (ifInst ""  (formula "7")))
                  (rule "applyEqReverse" (formula "49") (term "1,0,1,1,1") (ifseqformula "1"))
                  (rule "applyEqReverse" (formula "49") (term "0,0,0,1,1") (ifseqformula "1"))
                  (rule "hideAuxiliaryEq" (formula "1"))
                  (rule "replace_known_right" (formula "48") (term "0,0,1,1") (ifseqformula "43"))
                   (builtin "One Step Simplification" (formula "48"))
                  (rule "Class_invariant_axiom_for_org_bouncycastle_math_ec_ECPoint" (formula "48") (term "0"))
                   (builtin "One Step Simplification" (formula "48"))
                  (rule "Class_invariant_axiom_for_org_bouncycastle_jce_spec_ECParameterSpec" (formula "48") (term "1,1"))
                  (rule "replaceKnownSelect_taclet00000_13" (formula "48") (term "1,1,1,1"))
                  (rule "replaceKnownAuxiliaryConstant_taclet00000_14" (formula "48") (term "1,1,1,1"))
                  (rule "replaceKnownSelect_taclet00000_13" (formula "48") (term "0,0,0,1,1"))
                  (rule "replaceKnownAuxiliaryConstant_taclet00000_14" (formula "48") (term "0,0,0,1,1"))
                  (rule "replace_known_right" (formula "48") (term "0,0,1,1") (ifseqformula "36"))
                   (builtin "One Step Simplification" (formula "48"))
                  (rule "Class_invariant_axiom_for_org_bouncycastle_math_ec_ECPoint" (formula "48") (term "1,1"))
                   (builtin "One Step Simplification" (formula "48"))
                  (rule "Class_invariant_axiom_for_java_math_BigInteger" (formula "48") (term "0"))
                  (rule "replaceKnownSelect_taclet200000_17" (formula "48") (term "0,0,0,0"))
                  (rule "replaceKnownSelect_taclet200000_17" (formula "48") (term "1,0,1,0"))
                  (rule "replaceKnownAuxiliaryConstant_taclet200000_19" (formula "48") (term "0,0,0,0"))
                  (rule "replaceKnownAuxiliaryConstant_taclet200000_19" (formula "48") (term "1,0,1,0"))
                  (rule "replaceKnownSelect_taclet200000_20" (formula "48") (term "0,1,0"))
                  (rule "replaceKnownAuxiliaryConstant_taclet200000_22" (formula "48") (term "0,1,0"))
                  (rule "replace_known_left" (formula "48") (term "1,0") (ifseqformula "11"))
                   (builtin "One Step Simplification" (formula "48") (ifInst ""  (formula "44")))
                  (rule "Class_invariant_axiom_for_org_bouncycastle_math_ec_custom_sec_SecP256K1Curve" (formula "48"))
                  (rule "closeTrue" (formula "48"))
               )
               (branch "Null reference (var_4 = null)"
                   (builtin "One Step Simplification" (formula "48") (ifInst ""  (formula "47")))
                  (rule "closeTrue" (formula "48"))
               )
            )
            (branch "Exceptional Post (getG)"
                (builtin "One Step Simplification" (formula "47"))
                (builtin "One Step Simplification" (formula "34"))
               (rule "selectCreatedOfAnonAsFormulaEQ" (formula "34") (term "1,0") (ifseqformula "27"))
               (rule "selectCreatedOfAnonAsFormulaEQ" (formula "34") (term "0,1,0") (ifseqformula "20"))
               (rule "andLeft" (formula "34"))
               (rule "andLeft" (formula "34"))
               (rule "andLeft" (formula "36"))
               (rule "notLeft" (formula "34"))
               (rule "close" (formula "37") (ifseqformula "36"))
            )
            (branch "Pre (getG)"
                (builtin "One Step Simplification" (formula "46"))
               (rule "wellFormedAnonEQ" (formula "46") (term "1") (ifseqformula "27"))
               (rule "wellFormedAnonEQ" (formula "46") (term "0,1") (ifseqformula "20"))
               (rule "replace_known_left" (formula "46") (term "1,1") (ifseqformula "26"))
                (builtin "One Step Simplification" (formula "46") (ifInst ""  (formula "5")) (ifInst ""  (formula "19")))
               (rule "Class_invariant_axiom_for_org_bouncycastle_jce_spec_ECNamedCurveParameterSpec" (formula "46"))
               (rule "pullOutSelect" (formula "46") (term "0,0,0") (inst "selectSK=org_bouncycastle_jce_spec_ECParameterSpec_generator_0"))
               (rule "applyEq" (formula "47") (term "1,1") (ifseqformula "1"))
               (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "28"))
                (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "41")))
               (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,1,0,0") (ifseqformula "21"))
               (rule "replace_known_left" (formula "1") (term "0,0,1,0,0") (ifseqformula "5"))
                (builtin "One Step Simplification" (formula "1"))
               (rule "elementOfSingleton" (formula "1") (term "0,0"))
                (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "41")))
               (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "21"))
                (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "41")) (ifInst ""  (formula "5")))
               (rule "applyEqReverse" (formula "47") (term "0,0,0") (ifseqformula "1"))
               (rule "applyEqReverse" (formula "47") (term "1,1") (ifseqformula "1"))
               (rule "hideAuxiliaryEq" (formula "1"))
               (rule "replace_known_right" (formula "46") (term "0,0") (ifseqformula "38"))
                (builtin "One Step Simplification" (formula "46"))
               (rule "Class_invariant_axiom_for_org_bouncycastle_math_ec_ECPoint" (formula "46"))
               (rule "closeTrue" (formula "46"))
            )
            (branch "Null reference (e_20 = null)"
                (builtin "One Step Simplification" (formula "46") (ifInst ""  (formula "40")))
               (rule "closeTrue" (formula "46"))
            )
         )
         (branch "Null Reference (_group_31 = null)"
             (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "46")))
            (rule "closeFalse" (formula "1"))
         )
      )
      (branch "Exceptional Post (uniformHash)"
          (builtin "One Step Simplification" (formula "26"))
          (builtin "One Step Simplification" (formula "38"))
         (rule "andLeft" (formula "26"))
         (rule "selectCreatedOfAnonAsFormulaEQ" (formula "27") (term "1,0") (ifseqformula "26"))
         (rule "selectCreatedOfAnonAsFormulaEQ" (formula "27") (term "0,1,0") (ifseqformula "19"))
         (rule "andLeft" (formula "27"))
         (rule "andLeft" (formula "27"))
         (rule "andLeft" (formula "29"))
         (rule "notLeft" (formula "27"))
         (rule "close" (formula "30") (ifseqformula "29"))
      )
      (branch "Pre (uniformHash)"
          (builtin "One Step Simplification" (formula "36") (ifInst ""  (formula "27")) (ifInst ""  (formula "27")) (ifInst ""  (formula "25")) (ifInst ""  (formula "34")) (ifInst ""  (formula "33")))
         (rule "selectCreatedOfAnonAsFormulaEQ" (formula "36") (term "1,1") (ifseqformula "19"))
         (rule "selectCreatedOfAnonAsFormulaEQ" (formula "36") (term "1,0,1") (ifseqformula "19"))
         (rule "selectCreatedOfAnonAsFormulaEQ" (formula "36") (term "1,0,0,1") (ifseqformula "19"))
         (rule "wellFormedAnonEQ" (formula "36") (term "0,0,0,0,1") (ifseqformula "19"))
         (rule "selectCreatedOfAnonAsFormulaEQ" (formula "36") (term "1,0,0,0,1") (ifseqformula "19"))
         (rule "replace_known_left" (formula "36") (term "0,1,1") (ifseqformula "7"))
          (builtin "One Step Simplification" (formula "36") (ifInst ""  (formula "5")) (ifInst ""  (formula "18")) (ifInst ""  (formula "26")) (ifInst ""  (formula "21")) (ifInst ""  (formula "1")) (ifInst ""  (formula "8")))
         (rule "inEqSimp_ltToLeq" (formula "36") (term "1,0,1"))
         (rule "polySimp_mulComm0" (formula "36") (term "1,0,0,1,0,1"))
         (rule "polySimp_addComm1" (formula "36") (term "0,1,0,1"))
         (rule "inEqSimp_commuteLeq" (formula "36") (term "0,0,1"))
         (rule "inEqSimp_sepNegMonomial0" (formula "36") (term "1,0,1"))
         (rule "polySimp_mulLiterals" (formula "36") (term "0,1,0,1"))
         (rule "polySimp_elimOne" (formula "36") (term "0,1,0,1"))
         (rule "pullOutSelect" (formula "36") (term "0,0,0,1") (inst "selectSK=de_polyas_core3_open_crypto_basic_Hashes_currentIndex_0"))
         (rule "applyEq" (formula "37") (term "1,1,1,0,1") (ifseqformula "1"))
         (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "20"))
          (builtin "One Step Simplification" (formula "1"))
         (rule "applyEqReverse" (formula "37") (term "0,0,0,1") (ifseqformula "1"))
         (rule "applyEqReverse" (formula "37") (term "1,1,1,0,1") (ifseqformula "1"))
         (rule "hideAuxiliaryEq" (formula "1"))
         (rule "replace_known_left" (formula "36") (term "0,0,1") (ifseqformula "14"))
          (builtin "One Step Simplification" (formula "36"))
         (rule "pullOutSelect" (formula "36") (term "0,0,0,1") (inst "selectSK=de_polyas_core3_open_crypto_basic_Hashes_VALUES_0"))
         (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "20"))
          (builtin "One Step Simplification" (formula "1"))
         (rule "applyEqReverse" (formula "37") (term "0,0,0,1") (ifseqformula "1"))
         (rule "hideAuxiliaryEq" (formula "1"))
         (rule "inEqSimp_homoInEq1" (formula "36") (term "0,1"))
         (rule "polySimp_addComm1" (formula "36") (term "0,0,1"))
         (rule "inEqSimp_sepPosMonomial0" (formula "36") (term "0,1"))
         (rule "polySimp_mulComm0" (formula "36") (term "1,0,1"))
         (rule "polySimp_rightDist" (formula "36") (term "1,0,1"))
         (rule "polySimp_mulLiterals" (formula "36") (term "1,1,0,1"))
         (rule "mul_literals" (formula "36") (term "0,1,0,1"))
         (rule "polySimp_elimOne" (formula "36") (term "1,1,0,1"))
         (rule "replace_known_left" (formula "36") (term "0,1") (ifseqformula "17"))
          (builtin "One Step Simplification" (formula "36"))
         (rule "Static_class_invariant_axiom_for_de_polyas_core3_open_crypto_basic_Hashes" (formula "36") (term "1"))
         (rule "replaceKnownSelect_taclet200_5" (formula "36") (term "1,1"))
         (rule "replaceKnownAuxiliaryConstant_taclet200_6" (formula "36") (term "1,1"))
         (rule "nonNull" (formula "36") (term "1") (inst "i=i"))
         (rule "sub_literals" (formula "36") (term "2,1,0,1,1,1"))
          (builtin "One Step Simplification" (formula "36") (ifInst ""  (formula "29")))
         (rule "greater_literals" (formula "36") (term "0,1"))
          (builtin "One Step Simplification" (formula "36"))
         (rule "inEqSimp_ltToLeq" (formula "36") (term "1,0,0,1"))
         (rule "polySimp_mulComm0" (formula "36") (term "1,0,0,1,0,0,1"))
         (rule "inEqSimp_commuteLeq" (formula "36") (term "0,0,0,1"))
         (rule "inEqSimp_sepPosMonomial0" (formula "36") (term "1,0,0,1"))
         (rule "polySimp_mulComm0" (formula "36") (term "1,1,0,0,1"))
         (rule "polySimp_rightDist" (formula "36") (term "1,1,0,0,1"))
         (rule "mul_literals" (formula "36") (term "0,1,1,0,0,1"))
         (rule "polySimp_mulLiterals" (formula "36") (term "1,1,1,0,0,1"))
         (rule "polySimp_elimOne" (formula "36") (term "1,1,1,0,0,1"))
         (rule "nnf_imp2or" (formula "36") (term "0,1"))
         (rule "nnf_notAnd" (formula "36") (term "0,0,1"))
         (rule "inEqSimp_notGeq" (formula "36") (term "0,0,0,1"))
         (rule "mul_literals" (formula "36") (term "1,0,0,0,0,0,1"))
         (rule "add_zero_right" (formula "36") (term "0,0,0,0,0,1"))
         (rule "inEqSimp_sepPosMonomial0" (formula "36") (term "0,0,0,1"))
         (rule "mul_literals" (formula "36") (term "1,0,0,0,1"))
         (rule "inEqSimp_notLeq" (formula "36") (term "1,0,0,1"))
         (rule "polySimp_rightDist" (formula "36") (term "1,0,0,1,0,0,1"))
         (rule "mul_literals" (formula "36") (term "0,1,0,0,1,0,0,1"))
         (rule "polySimp_addAssoc" (formula "36") (term "0,0,1,0,0,1"))
         (rule "add_literals" (formula "36") (term "0,0,0,1,0,0,1"))
         (rule "add_zero_left" (formula "36") (term "0,0,1,0,0,1"))
         (rule "inEqSimp_sepPosMonomial1" (formula "36") (term "1,0,0,1"))
         (rule "polySimp_mulLiterals" (formula "36") (term "1,1,0,0,1"))
         (rule "polySimp_elimOne" (formula "36") (term "1,1,0,0,1"))
         (rule "Static_class_invariant_axiom_for_java_math_BigInteger" (formula "36") (term "0"))
         (rule "pullOutSelect" (formula "36") (term "0,0,0,0") (inst "selectSK=java_math_BigInteger_ZERO_0"))
         (rule "applyEq" (formula "37") (term "1,0,1,0") (ifseqformula "1"))
         (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "20"))
          (builtin "One Step Simplification" (formula "1"))
         (rule "applyEqReverse" (formula "37") (term "0,0,0,0") (ifseqformula "1"))
         (rule "applyEqReverse" (formula "37") (term "1,0,1,0") (ifseqformula "1"))
         (rule "hideAuxiliaryEq" (formula "1"))
         (rule "replace_known_right" (formula "36") (term "0,0,0") (ifseqformula "32"))
          (builtin "One Step Simplification" (formula "36"))
         (rule "pullOutSelect" (formula "36") (term "0,0") (inst "selectSK=java_math_BigInteger_value_1"))
         (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "20"))
          (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "33")) (ifInst ""  (formula "11")))
         (rule "applyEqReverse" (formula "37") (term "0,0") (ifseqformula "1"))
         (rule "hideAuxiliaryEq" (formula "1"))
         (rule "replace_known_left" (formula "36") (term "0") (ifseqformula "11"))
          (builtin "One Step Simplification" (formula "36"))
         (rule "allRight" (formula "36") (inst "sk=i_0"))
         (rule "orRight" (formula "36"))
         (rule "orRight" (formula "36"))
         (rule "notRight" (formula "38"))
         (rule "inEqSimp_leqRight" (formula "37"))
         (rule "mul_literals" (formula "1") (term "1,0,0"))
         (rule "add_literals" (formula "1") (term "0,0"))
         (rule "add_zero_left" (formula "1") (term "0"))
         (rule "inEqSimp_geqRight" (formula "38"))
         (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
         (rule "polySimp_addComm1" (formula "1") (term "0"))
         (rule "inEqSimp_sepNegMonomial0" (formula "1"))
         (rule "polySimp_mulLiterals" (formula "1") (term "0"))
         (rule "polySimp_elimOne" (formula "1") (term "0"))
         (rule "pullOutSelect" (formula "3") (term "0") (inst "selectSK=arr_0"))
         (rule "simplifySelectOfAnonEQ" (formula "3") (ifseqformula "23"))
          (builtin "One Step Simplification" (formula "3") (ifInst ""  (formula "33")) (ifInst ""  (formula "20")))
         (rule "applyEqReverse" (formula "4") (term "0") (ifseqformula "3"))
         (rule "hideAuxiliaryEq" (formula "3"))
         (rule "narrowSelectArrayType" (formula "3") (term "0") (ifseqformula "8") (ifseqformula "32"))
         (rule "inEqSimp_exactShadow3" (formula "1") (ifseqformula "18"))
         (rule "polySimp_rightDist" (formula "1") (term "0,0"))
         (rule "mul_literals" (formula "1") (term "0,0,0"))
         (rule "polySimp_addComm1" (formula "1") (term "0"))
         (rule "add_literals" (formula "1") (term "0,0"))
         (rule "inEqSimp_sepNegMonomial1" (formula "1"))
         (rule "polySimp_mulLiterals" (formula "1") (term "0"))
         (rule "polySimp_elimOne" (formula "1") (term "0"))
         (rule "allLeft" (formula "16") (inst "t=i_0"))
         (rule "replace_known_left" (formula "16") (term "0,0,0") (ifseqformula "4"))
          (builtin "One Step Simplification" (formula "16"))
         (rule "inEqSimp_commuteGeq" (formula "16") (term "1"))
         (rule "inEqSimp_contradInEq1" (formula "16") (term "0") (ifseqformula "3"))
         (rule "qeq_literals" (formula "16") (term "0,0"))
          (builtin "One Step Simplification" (formula "16"))
         (rule "inEqSimp_contradInEq1" (formula "16") (ifseqformula "2"))
         (rule "andLeft" (formula "16"))
         (rule "inEqSimp_homoInEq1" (formula "16"))
         (rule "polySimp_pullOutFactor1b" (formula "16") (term "0"))
         (rule "add_literals" (formula "16") (term "1,1,0"))
         (rule "times_zero_1" (formula "16") (term "1,0"))
         (rule "add_zero_right" (formula "16") (term "0"))
         (rule "leq_literals" (formula "16"))
         (rule "closeFalse" (formula "16"))
      )
   )
   (branch "Exceptional Post (getOrder)"
       (builtin "One Step Simplification" (formula "27"))
       (builtin "One Step Simplification" (formula "18"))
      (rule "andLeft" (formula "18"))
      (rule "selectCreatedOfAnonAsFormulaEQ" (formula "19") (term "1,0") (ifseqformula "18"))
      (rule "andLeft" (formula "19"))
      (rule "andLeft" (formula "20"))
      (rule "andLeft" (formula "19"))
      (rule "andLeft" (formula "21"))
      (rule "notLeft" (formula "19"))
      (rule "close" (formula "23") (ifseqformula "22"))
   )
   (branch "Pre (getOrder)"
       (builtin "One Step Simplification" (formula "25") (ifInst ""  (formula "4")))
      (rule "Class_invariant_axiom_for_org_bouncycastle_math_ec_custom_sec_SecP256K1Curve" (formula "25"))
      (rule "closeTrue" (formula "25"))
   )
   (branch "Null reference (s = null)"
       (builtin "One Step Simplification" (formula "25") (ifInst ""  (formula "20")))
      (rule "closeTrue" (formula "25"))
   )
)
(branch "Null Reference (_group_31 = null)"
    (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "25")))
   (rule "closeFalse" (formula "1"))
)
)
}
