\profile "Java Profile";

\settings {
"#Proof-Settings-Config-File
#Tue Nov 19 21:43:32 CET 2019
[Labels]UseOriginLabels=false
[StrategyProperty]QUERYAXIOM_OPTIONS_KEY=QUERYAXIOM_ON
[SMTSettings]invariantForall=false
[Strategy]ActiveStrategy=JavaCardDLStrategy
[StrategyProperty]USER_TACLETS_OPTIONS_KEY1=USER_TACLETS_OFF
[StrategyProperty]QUANTIFIERS_OPTIONS_KEY=QUANTIFIERS_NON_SPLITTING_WITH_PROGS
[StrategyProperty]USER_TACLETS_OPTIONS_KEY2=USER_TACLETS_OFF
[Choice]DefaultChoices=methodExpansion-methodExpansion\\:modularOnly , mergeGenerateIsWeakeningGoal-mergeGenerateIsWeakeningGoal\\:off , wdChecks-wdChecks\\:off , wdOperator-wdOperator\\:L , permissions-permissions\\:off , integerSimplificationRules-integerSimplificationRules\\:full , reach-reach\\:on , moreSeqRules-moreSeqRules\\:on , sequences-sequences\\:on , bigint-bigint\\:on , modelFields-modelFields\\:treatAsAxiom , Strings-Strings\\:on , JavaCard-JavaCard\\:off , runtimeExceptions-runtimeExceptions\\:allow , programRules-programRules\\:Java , intRules-intRules\\:javaSemantics , initialisation-initialisation\\:disableStaticInitialisation , assertions-assertions\\:on
[StrategyProperty]LOOP_OPTIONS_KEY=LOOP_INVARIANT
[StrategyProperty]INF_FLOW_CHECK_PROPERTY=INF_FLOW_CHECK_FALSE
[SMTSettings]UseBuiltUniqueness=false
[SMTSettings]explicitTypeHierarchy=false
[SMTSettings]instantiateHierarchyAssumptions=true
[StrategyProperty]NON_LIN_ARITH_OPTIONS_KEY=NON_LIN_ARITH_DEF_OPS
[SMTSettings]SelectedTaclets=
[StrategyProperty]DEP_OPTIONS_KEY=DEP_ON
[StrategyProperty]AUTO_INDUCTION_OPTIONS_KEY=AUTO_INDUCTION_OFF
[Strategy]MaximumNumberOfAutomaticApplications=10000
[StrategyProperty]STOPMODE_OPTIONS_KEY=STOPMODE_DEFAULT
[StrategyProperty]CLASS_AXIOM_OPTIONS_KEY=CLASS_AXIOM_FREE
[SMTSettings]useConstantsForBigOrSmallIntegers=true
[StrategyProperty]MPS_OPTIONS_KEY=MPS_MERGE
[StrategyProperty]SYMBOLIC_EXECUTION_NON_EXECUTION_BRANCH_HIDING_OPTIONS_KEY=SYMBOLIC_EXECUTION_NON_EXECUTION_BRANCH_HIDING_OFF
[Strategy]Timeout=-1
[StrategyProperty]SYMBOLIC_EXECUTION_ALIAS_CHECK_OPTIONS_KEY=SYMBOLIC_EXECUTION_ALIAS_CHECK_NEVER
[StrategyProperty]QUERY_NEW_OPTIONS_KEY=QUERY_OFF
[SMTSettings]useUninterpretedMultiplication=true
[StrategyProperty]BLOCK_OPTIONS_KEY=BLOCK_CONTRACT_INTERNAL
[StrategyProperty]METHOD_OPTIONS_KEY=METHOD_CONTRACT
[StrategyProperty]USER_TACLETS_OPTIONS_KEY3=USER_TACLETS_OFF
[SMTSettings]maxGenericSorts=2
[StrategyProperty]OSS_OPTIONS_KEY=OSS_ON
[StrategyProperty]SPLITTING_OPTIONS_KEY=SPLITTING_DELAYED
[SMTSettings]integersMinimum=-2147483645
[StrategyProperty]VBT_PHASE=VBT_SYM_EX
[SMTSettings]integersMaximum=2147483645
"
}

\javaSource "../src";

\proofObligation "#Proof Obligation Settings
#Tue Nov 19 21:43:32 CET 2019
contract=de.polyas.core3.open.cred.CredTool[de.polyas.core3.open.cred.CredTool\\:\\:printStatus()].JML normal_behavior operation contract.0
name=de.polyas.core3.open.cred.CredTool[de.polyas.core3.open.cred.CredTool\\:\\:printStatus()].JML normal_behavior operation contract.0
class=de.uka.ilkd.key.proof.init.FunctionalOperationContractPO
";

\proof {
(keyLog "0" (keyUser "flo" ) (keyVersion "57d504cc0f"))

(autoModeTime "149256")

(branch "dummy ID"
(rule "impRight" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "notLeft" (formula "2"))
(rule "eqSymm" (formula "7") (term "1,0,0,1,0,1"))
(rule "elementOfSingleton" (formula "7") (term "0,0,0,0,1,0,1"))
(rule "assignment" (formula "7") (term "1"))
 (builtin "One Step Simplification" (formula "7"))
(rule "Class_invariant_axiom_for_de_polyas_core3_open_cred_CredTool" (formula "5") (inst "i=i") (inst "i_0=i_0") (inst "i_1=i_1") (inst "i_2=i_2") (inst "i_3=i_3"))
 (builtin "One Step Simplification" (formula "5"))
(rule "insert_constant_string_value" (formula "5") (term "0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0") (ifseqformula "1"))
 (builtin "One Step Simplification" (formula "5"))
(rule "insert_constant_string_value" (formula "5") (term "0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0") (ifseqformula "1"))
 (builtin "One Step Simplification" (formula "5"))
(rule "insert_constant_string_value" (formula "5") (term "0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0") (ifseqformula "1"))
 (builtin "One Step Simplification" (formula "5"))
(rule "castDel" (formula "5") (term "0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0"))
(rule "castDel" (formula "5") (term "0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0"))
(rule "castDel" (formula "5") (term "0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0"))
(rule "andLeft" (formula "5"))
(rule "andLeft" (formula "5"))
(rule "andLeft" (formula "5"))
(rule "andLeft" (formula "5"))
(rule "andLeft" (formula "5"))
(rule "andLeft" (formula "5"))
(rule "andLeft" (formula "5"))
(rule "andLeft" (formula "5"))
(rule "notLeft" (formula "7"))
(rule "andLeft" (formula "5"))
(rule "notLeft" (formula "7"))
(rule "andLeft" (formula "5"))
(rule "notLeft" (formula "7"))
(rule "andLeft" (formula "5"))
(rule "notLeft" (formula "7"))
(rule "andLeft" (formula "5"))
(rule "notLeft" (formula "7"))
(rule "andLeft" (formula "5"))
(rule "notLeft" (formula "7"))
(rule "andLeft" (formula "5"))
(rule "notLeft" (formula "7"))
(rule "notLeft" (formula "6"))
(rule "andLeft" (formula "5"))
(rule "andLeft" (formula "5"))
(rule "notLeft" (formula "7"))
(rule "andLeft" (formula "5"))
(rule "notLeft" (formula "7"))
(rule "notLeft" (formula "6"))
(rule "andLeft" (formula "5"))
(rule "andLeft" (formula "5"))
(rule "notLeft" (formula "7"))
(rule "notLeft" (formula "6"))
(rule "andLeft" (formula "5"))
(rule "notLeft" (formula "6"))
(rule "andLeft" (formula "5"))
(rule "notLeft" (formula "6"))
(rule "andLeft" (formula "5"))
(rule "notLeft" (formula "6"))
(rule "andLeft" (formula "5"))
(rule "andLeft" (formula "5"))
(rule "notLeft" (formula "7"))
(rule "andLeft" (formula "5"))
(rule "notLeft" (formula "7"))
(rule "andLeft" (formula "5"))
(rule "notLeft" (formula "7"))
(rule "notLeft" (formula "5"))
(rule "notLeft" (formula "5"))
(rule "exLeft" (formula "10") (inst "sk=i_0"))
(rule "andLeft" (formula "10"))
(rule "andLeft" (formula "10"))
(rule "exLeft" (formula "7") (inst "sk=i_2_0"))
(rule "andLeft" (formula "7"))
(rule "andLeft" (formula "7"))
(rule "castedGetAny" (formula "11") (term "0,0,1,0"))
(rule "castedGetAny" (formula "10") (term "0,0,1,0"))
(rule "castedGetAny" (formula "6") (term "0,0,1,0"))
(rule "castedGetAny" (formula "14") (term "0"))
(rule "castedGetAny" (formula "9") (term "0"))
(rule "inEqSimp_commuteLeq" (formula "11") (term "0,0,0"))
(rule "inEqSimp_commuteLeq" (formula "10") (term "0,0,0"))
(rule "inEqSimp_commuteLeq" (formula "6") (term "0,0,0"))
(rule "inEqSimp_commuteLeq" (formula "12"))
(rule "inEqSimp_commuteLeq" (formula "7"))
(rule "commute_and" (formula "11") (term "0,0"))
(rule "methodBodyExpand" (formula "37") (term "1") (newnames "heapBefore_printStatus,savedHeapBefore_printStatus"))
 (builtin "One Step Simplification" (formula "37"))
(rule "commute_and" (formula "10") (term "0,0"))
(rule "commute_and" (formula "6") (term "0,0"))
(rule "ifUnfold" (formula "37") (term "1") (inst "#boolv=x"))
(rule "variableDeclaration" (formula "37") (term "1") (newnames "x"))
(rule "compound_equality_comparison_1" (formula "37") (term "1") (inst "#v0=x_1"))
(rule "variableDeclarationAssign" (formula "37") (term "1"))
(rule "variableDeclaration" (formula "37") (term "1") (newnames "x_1"))
(rule "compound_modulo_1" (formula "37") (term "1") (inst "#v=x_2"))
(rule "variableDeclarationAssign" (formula "37") (term "1"))
(rule "variableDeclaration" (formula "37") (term "1") (newnames "x_2"))
(rule "methodCallWithAssignmentUnfoldTarget" (formula "37") (term "1") (inst "#v0=c"))
(rule "variableDeclaration" (formula "37") (term "1") (newnames "c_1"))
(rule "assignment_read_attribute_this" (formula "37") (term "1"))
 (builtin "One Step Simplification" (formula "37"))
 (builtin "Use Operation Contract" (formula "37") (newnames "heapBefore_getCurrentLineNumber,result_49,exc_64") (contract "org.apache.commons.csv.CSVParser[org.apache.commons.csv.CSVParser::getCurrentLineNumber()].JML normal_behavior operation contract.0"))
(branch "Post (getCurrentLineNumber)"
    (builtin "One Step Simplification" (formula "15"))
    (builtin "One Step Simplification" (formula "38"))
   (rule "expand_inLong" (formula "15") (term "1,0"))
   (rule "replace_long_MAX" (formula "15") (term "1,0,1,0"))
   (rule "replace_long_MIN" (formula "15") (term "0,1,1,0"))
   (rule "andLeft" (formula "15"))
   (rule "andLeft" (formula "15"))
   (rule "andLeft" (formula "17"))
   (rule "andLeft" (formula "16"))
   (rule "inEqSimp_commuteLeq" (formula "17"))
   (rule "assignment" (formula "41") (term "1"))
    (builtin "One Step Simplification" (formula "41"))
   (rule "Class_invariant_axiom_for_org_apache_commons_csv_CSVParser" (formula "18"))
   (rule "true_left" (formula "18"))
   (rule "assignmentModulo" (formula "40") (term "1"))
    (builtin "One Step Simplification" (formula "40"))
   (rule "equal_literals" (formula "40") (term "0,0"))
    (builtin "One Step Simplification" (formula "40"))
   (rule "translateJavaMod" (formula "40") (term "0,1,0"))
   (rule "equality_comparison_simple" (formula "40") (term "1"))
    (builtin "One Step Simplification" (formula "40"))
   (rule "lenNonNegative" (formula "13") (term "1"))
   (rule "inEqSimp_commuteLeq" (formula "13"))
   (rule "ifSplit" (formula "41"))
   (branch "if x true"
       (builtin "One Step Simplification" (formula "1"))
       (builtin "One Step Simplification" (formula "42"))
      (rule "activeUseStaticFieldWriteAccess" (formula "42") (term "1") (inst "#v0=s"))
      (rule "variableDeclarationAssign" (formula "42") (term "1"))
      (rule "variableDeclaration" (formula "42") (term "1") (newnames "s"))
      (rule "compound_addition_2" (formula "42") (term "1") (inst "#v1=s_2") (inst "#v0=s_1"))
      (rule "variableDeclarationAssign" (formula "42") (term "1"))
      (rule "variableDeclaration" (formula "42") (term "1") (newnames "s_1"))
      (rule "compound_addition_2" (formula "42") (term "1") (inst "#v1=x") (inst "#v0=s_3"))
      (rule "variableDeclarationAssign" (formula "42") (term "1"))
      (rule "variableDeclaration" (formula "42") (term "1") (newnames "s_3"))
      (rule "stringAssignment" (formula "42") (term "1"))
       (builtin "One Step Simplification" (formula "44"))
       (builtin "One Step Simplification" (formula "1"))
       (builtin "One Step Simplification" (formula "2"))
      (rule "notLeft" (formula "1"))
      (rule "variableDeclarationAssign" (formula "44") (term "1"))
      (rule "variableDeclaration" (formula "44") (term "1") (newnames "x_3"))
      (rule "methodCallWithAssignmentUnfoldTarget" (formula "44") (term "1") (inst "#v0=c"))
      (rule "variableDeclaration" (formula "44") (term "1") (newnames "c_2"))
      (rule "assignment_read_attribute_this" (formula "44") (term "1"))
       (builtin "One Step Simplification" (formula "44"))
       (builtin "Use Operation Contract" (formula "44") (newnames "heapBefore_getCurrentLineNumber_0,result_50,exc_65") (contract "org.apache.commons.csv.CSVParser[org.apache.commons.csv.CSVParser::getCurrentLineNumber()].JML normal_behavior operation contract.0"))
      (branch "Post (getCurrentLineNumber)"
          (builtin "One Step Simplification" (formula "45"))
          (builtin "One Step Simplification" (formula "21"))
         (rule "expand_inLong" (formula "21") (term "1,0"))
         (rule "replace_long_MIN" (formula "21") (term "0,1,1,0"))
         (rule "replace_long_MAX" (formula "21") (term "1,0,1,0"))
         (rule "andLeft" (formula "21"))
         (rule "andLeft" (formula "22"))
         (rule "andLeft" (formula "21"))
         (rule "andLeft" (formula "21"))
         (rule "inEqSimp_commuteLeq" (formula "22"))
         (rule "assignment" (formula "48") (term "1"))
          (builtin "One Step Simplification" (formula "48"))
         (rule "stringConcatIntExpRight" (formula "48") (term "1") (inst "sk=sk_0"))
          (builtin "One Step Simplification" (formula "50"))
          (builtin "One Step Simplification" (formula "49"))
          (builtin "One Step Simplification" (formula "1"))
         (rule "poolKeyIsContentOfValue" (formula "1") (term "0,1"))
         (rule "variableDeclarationAssign" (formula "50") (term "1"))
         (rule "variableDeclaration" (formula "50") (term "1") (newnames "s_2"))
         (rule "stringAssignment" (formula "50") (term "1"))
          (builtin "One Step Simplification" (formula "52"))
          (builtin "One Step Simplification" (formula "1"))
          (builtin "One Step Simplification" (formula "2"))
         (rule "notLeft" (formula "1"))
         (rule "stringConcat" (formula "52") (term "1") (inst "sk=sk_1"))
          (builtin "One Step Simplification" (formula "1"))
          (builtin "One Step Simplification" (formula "54"))
          (builtin "One Step Simplification" (formula "53"))
         (rule "poolKeyIsContentOfValue" (formula "1") (term "1,1"))
         (rule "assignment_write_static_attribute" (formula "54") (term "1"))
          (builtin "One Step Simplification" (formula "54"))
         (rule "eqSeqConcat" (formula "3"))
         (rule "andLeft" (formula "3"))
         (rule "andLeft" (formula "3"))
         (rule "lenOfSeqConcat" (formula "5") (term "1,0"))
          (builtin "One Step Simplification" (formula "5"))
         (rule "lenOfSeqConcat" (formula "4") (term "2,0"))
          (builtin "One Step Simplification" (formula "4"))
         (rule "lenOfSeqConcat" (formula "3") (term "0,1"))
          (builtin "One Step Simplification" (formula "3"))
         (rule "lenOfSeqConcat" (formula "5") (term "1,1,0"))
          (builtin "One Step Simplification" (formula "5"))
         (rule "polySimp_addAssoc" (formula "5") (term "1,0"))
         (rule "add_literals" (formula "5") (term "0,1,0"))
         (rule "lenOfSeqConcat" (formula "4") (term "1,2,0"))
          (builtin "One Step Simplification" (formula "4"))
         (rule "polySimp_addAssoc" (formula "4") (term "2,0"))
         (rule "add_literals" (formula "4") (term "0,2,0"))
         (rule "lenOfSeqConcat" (formula "3") (term "1,0,1"))
          (builtin "One Step Simplification" (formula "3"))
         (rule "polySimp_addAssoc" (formula "3") (term "0,1"))
         (rule "add_literals" (formula "3") (term "0,0,1"))
         (rule "lenOfSeqConcat" (formula "5") (term "1,1,0"))
          (builtin "One Step Simplification" (formula "5"))
         (rule "polySimp_addAssoc" (formula "5") (term "1,0"))
         (rule "add_literals" (formula "5") (term "0,1,0"))
         (rule "lenOfSeqConcat" (formula "4") (term "1,2,0"))
          (builtin "One Step Simplification" (formula "4"))
         (rule "polySimp_addAssoc" (formula "4") (term "2,0"))
         (rule "add_literals" (formula "4") (term "0,2,0"))
         (rule "lenOfSeqConcat" (formula "3") (term "1,0,1"))
          (builtin "One Step Simplification" (formula "3"))
         (rule "polySimp_addAssoc" (formula "3") (term "0,1"))
         (rule "add_literals" (formula "3") (term "0,0,1"))
         (rule "lenOfSeqConcat" (formula "5") (term "1,1,0"))
          (builtin "One Step Simplification" (formula "5"))
         (rule "polySimp_addAssoc" (formula "5") (term "1,0"))
         (rule "add_literals" (formula "5") (term "0,1,0"))
         (rule "lenOfSeqConcat" (formula "4") (term "1,2,0"))
          (builtin "One Step Simplification" (formula "4"))
         (rule "polySimp_addAssoc" (formula "4") (term "2,0"))
         (rule "add_literals" (formula "4") (term "0,2,0"))
         (rule "lenOfSeqConcat" (formula "3") (term "1,0,1"))
          (builtin "One Step Simplification" (formula "3"))
         (rule "polySimp_addAssoc" (formula "3") (term "0,1"))
         (rule "add_literals" (formula "3") (term "0,0,1"))
         (rule "lenOfSeqConcat" (formula "5") (term "1,1,0"))
          (builtin "One Step Simplification" (formula "5"))
         (rule "polySimp_addAssoc" (formula "5") (term "1,0"))
         (rule "add_literals" (formula "5") (term "0,1,0"))
         (rule "lenOfSeqConcat" (formula "4") (term "1,2,0"))
          (builtin "One Step Simplification" (formula "4"))
         (rule "polySimp_addAssoc" (formula "4") (term "2,0"))
         (rule "add_literals" (formula "4") (term "0,2,0"))
         (rule "lenOfSeqConcat" (formula "3") (term "1,0,1"))
          (builtin "One Step Simplification" (formula "3"))
         (rule "polySimp_addAssoc" (formula "3") (term "0,1"))
         (rule "add_literals" (formula "3") (term "0,0,1"))
         (rule "lenOfSeqConcat" (formula "5") (term "1,1,0"))
          (builtin "One Step Simplification" (formula "5"))
         (rule "polySimp_addAssoc" (formula "5") (term "1,0"))
         (rule "add_literals" (formula "5") (term "0,1,0"))
         (rule "lenOfSeqConcat" (formula "4") (term "1,2,0"))
          (builtin "One Step Simplification" (formula "4"))
         (rule "polySimp_addAssoc" (formula "4") (term "2,0"))
         (rule "add_literals" (formula "4") (term "0,2,0"))
         (rule "lenOfSeqConcat" (formula "3") (term "1,0,1"))
          (builtin "One Step Simplification" (formula "3"))
         (rule "polySimp_addAssoc" (formula "3") (term "0,1"))
         (rule "add_literals" (formula "3") (term "0,0,1"))
         (rule "lenOfSeqConcat" (formula "5") (term "1,1,0"))
          (builtin "One Step Simplification" (formula "5"))
         (rule "polySimp_addAssoc" (formula "5") (term "1,0"))
         (rule "add_literals" (formula "5") (term "0,1,0"))
         (rule "lenOfSeqConcat" (formula "4") (term "1,2,0"))
          (builtin "One Step Simplification" (formula "4"))
         (rule "polySimp_addAssoc" (formula "4") (term "2,0"))
         (rule "add_literals" (formula "4") (term "0,2,0"))
         (rule "lenOfSeqConcat" (formula "3") (term "1,0,1"))
          (builtin "One Step Simplification" (formula "3"))
         (rule "polySimp_addAssoc" (formula "3") (term "0,1"))
         (rule "add_literals" (formula "3") (term "0,0,1"))
         (rule "lenOfSeqConcat" (formula "5") (term "1,1,0"))
          (builtin "One Step Simplification" (formula "5"))
         (rule "polySimp_addAssoc" (formula "5") (term "1,0"))
         (rule "add_literals" (formula "5") (term "0,1,0"))
         (rule "lenOfSeqConcat" (formula "4") (term "1,2,0"))
          (builtin "One Step Simplification" (formula "4"))
         (rule "polySimp_addAssoc" (formula "4") (term "2,0"))
         (rule "add_literals" (formula "4") (term "0,2,0"))
         (rule "lenOfSeqConcat" (formula "3") (term "1,0,1"))
          (builtin "One Step Simplification" (formula "3"))
         (rule "polySimp_addAssoc" (formula "3") (term "0,1"))
         (rule "add_literals" (formula "3") (term "0,0,1"))
         (rule "lenOfSeqConcat" (formula "5") (term "1,1,0"))
          (builtin "One Step Simplification" (formula "5"))
         (rule "add_literals" (formula "5") (term "1,1,0"))
         (rule "add_literals" (formula "5") (term "1,0"))
         (rule "lenOfSeqConcat" (formula "4") (term "1,2,0"))
          (builtin "One Step Simplification" (formula "4"))
         (rule "add_literals" (formula "4") (term "1,2,0"))
         (rule "add_literals" (formula "4") (term "2,0"))
         (rule "lenOfSeqConcat" (formula "3") (term "1,0,1"))
          (builtin "One Step Simplification" (formula "3"))
         (rule "add_literals" (formula "3") (term "1,0,1"))
         (rule "add_literals" (formula "3") (term "0,1"))
         (rule "lenOfSeqSubEQ" (formula "3") (term "1,1") (ifseqformula "5"))
         (rule "polySimp_elimSub" (formula "3") (term "1,1,1"))
         (rule "mul_literals" (formula "3") (term "1,1,1,1"))
         (rule "polySimp_addComm0" (formula "3") (term "1,1,1"))
         (rule "pullOutSelect" (formula "2") (term "0") (inst "selectSK=java_lang_Object_created__0"))
         (rule "simplifySelectOfCreate" (formula "2"))
          (builtin "One Step Simplification" (formula "2") (ifInst ""  (formula "55")))
         (rule "castDel" (formula "2") (term "1,0"))
         (rule "applyEqRigid" (formula "2") (term "1") (ifseqformula "3"))
          (builtin "One Step Simplification" (formula "2"))
         (rule "eqSeqConcat" (formula "1"))
         (rule "andLeft" (formula "1"))
         (rule "andLeft" (formula "1"))
         (rule "polySimp_addComm0" (formula "1") (term "1"))
         (rule "lenOfSeqConcat" (formula "1") (term "0,1"))
          (builtin "One Step Simplification" (formula "1"))
         (rule "lenOfSeqConcat" (formula "1") (term "1,0,1"))
          (builtin "One Step Simplification" (formula "1"))
         (rule "polySimp_addAssoc" (formula "1") (term "0,1"))
         (rule "add_literals" (formula "1") (term "0,0,1"))
         (rule "lenOfSeqConcat" (formula "1") (term "1,0,1"))
          (builtin "One Step Simplification" (formula "1"))
         (rule "polySimp_addAssoc" (formula "1") (term "0,1"))
         (rule "add_literals" (formula "1") (term "0,0,1"))
         (rule "lenOfSeqConcat" (formula "1") (term "1,0,1"))
          (builtin "One Step Simplification" (formula "1"))
         (rule "polySimp_addAssoc" (formula "1") (term "0,1"))
         (rule "add_literals" (formula "1") (term "0,0,1"))
         (rule "lenOfSeqConcat" (formula "1") (term "1,0,1"))
          (builtin "One Step Simplification" (formula "1"))
         (rule "add_literals" (formula "1") (term "1,0,1"))
         (rule "add_literals" (formula "1") (term "0,1"))
         (rule "applyEqRigid" (formula "3") (term "2,0") (ifseqformula "1"))
         (rule "eqSeqConcat" (formula "7"))
          (builtin "One Step Simplification" (formula "7"))
         (rule "andLeft" (formula "7"))
         (rule "andLeft" (formula "7"))
         (rule "lenOfSeqSub" (formula "9") (term "2,0"))
         (rule "less_literals" (formula "9") (term "0,2,0"))
          (builtin "One Step Simplification" (formula "9"))
         (rule "sub_literals" (formula "9") (term "2,0"))
         (rule "eqSeqSingleton" (formula "8"))
         (rule "andLeft" (formula "8"))
         (rule "lenOfSeqSub" (formula "7") (term "0"))
         (rule "less_literals" (formula "7") (term "0,0"))
          (builtin "One Step Simplification" (formula "7"))
         (rule "sub_literals" (formula "7") (term "0"))
         (rule "lenOfSeqSub" (formula "8") (term "0"))
         (rule "less_literals" (formula "8") (term "0,0"))
          (builtin "One Step Simplification" (formula "8"))
         (rule "sub_literals" (formula "8") (term "0"))
          (builtin "One Step Simplification" (formula "8"))
         (rule "true_left" (formula "8"))
         (rule "lenOfSeqConcat" (formula "7") (term "1,1"))
          (builtin "One Step Simplification" (formula "7"))
         (rule "polySimp_addAssoc" (formula "7") (term "1"))
         (rule "add_literals" (formula "7") (term "0,1"))
         (rule "lenOfSeqConcat" (formula "7") (term "1,1"))
          (builtin "One Step Simplification" (formula "7"))
         (rule "polySimp_addAssoc" (formula "7") (term "1"))
         (rule "add_literals" (formula "7") (term "0,1"))
         (rule "lenOfSeqConcat" (formula "7") (term "1,1"))
          (builtin "One Step Simplification" (formula "7"))
         (rule "polySimp_addAssoc" (formula "7") (term "1"))
         (rule "add_literals" (formula "7") (term "0,1"))
         (rule "lenOfSeqConcat" (formula "7") (term "1,1"))
          (builtin "One Step Simplification" (formula "7"))
         (rule "polySimp_addAssoc" (formula "7") (term "1"))
         (rule "add_literals" (formula "7") (term "0,1"))
         (rule "lenOfSeqConcat" (formula "7") (term "1,1"))
          (builtin "One Step Simplification" (formula "7"))
         (rule "polySimp_addAssoc" (formula "7") (term "1"))
         (rule "add_literals" (formula "7") (term "0,1"))
         (rule "lenOfSeqConcat" (formula "7") (term "1,1"))
          (builtin "One Step Simplification" (formula "7"))
         (rule "polySimp_addAssoc" (formula "7") (term "1"))
         (rule "add_literals" (formula "7") (term "0,1"))
         (rule "lenOfSeqConcat" (formula "7") (term "1,1"))
          (builtin "One Step Simplification" (formula "7"))
         (rule "polySimp_addAssoc" (formula "7") (term "1"))
         (rule "add_literals" (formula "7") (term "0,1"))
         (rule "lenOfSeqConcat" (formula "7") (term "1,1"))
          (builtin "One Step Simplification" (formula "7"))
         (rule "add_literals" (formula "7") (term "1,1"))
         (rule "add_literals" (formula "7") (term "1"))
          (builtin "One Step Simplification" (formula "7"))
         (rule "true_left" (formula "7"))
         (rule "getOfSeqSub" (formula "7") (term "0"))
         (rule "castDel" (formula "7") (term "2,0"))
         (rule "sub_literals" (formula "7") (term "1,1,0,0"))
         (rule "leq_literals" (formula "7") (term "0,0,0"))
          (builtin "One Step Simplification" (formula "7"))
         (rule "add_zero_left" (formula "7") (term "1,1,0"))
         (rule "less_literals" (formula "7") (term "0,0"))
          (builtin "One Step Simplification" (formula "7"))
         (rule "getOfSeqSub" (formula "7") (term "0"))
         (rule "castDel" (formula "7") (term "2,0"))
         (rule "sub_literals" (formula "7") (term "1,1,0,0"))
         (rule "leq_literals" (formula "7") (term "0,0,0"))
          (builtin "One Step Simplification" (formula "7"))
         (rule "add_zero_right" (formula "7") (term "1,1,0"))
         (rule "less_literals" (formula "7") (term "0,0"))
          (builtin "One Step Simplification" (formula "7"))
         (rule "getOfSeqSubEQ" (formula "7") (term "0") (ifseqformula "2"))
         (rule "castDel" (formula "7") (term "2,0"))
         (rule "leq_literals" (formula "7") (term "0,0,0"))
          (builtin "One Step Simplification" (formula "7"))
         (rule "add_zero_left" (formula "7") (term "1,1,0"))
         (rule "polySimp_elimSub" (formula "7") (term "1,0,0"))
         (rule "mul_literals" (formula "7") (term "1,1,0,0"))
         (rule "add_zero_right" (formula "7") (term "1,0,0"))
         (rule "eqSeqConcat" (formula "3"))
          (builtin "One Step Simplification" (formula "3"))
         (rule "andLeft" (formula "3"))
         (rule "andLeft" (formula "3"))
         (rule "lenOfSeqSub" (formula "5") (term "2,0"))
         (rule "polySimp_elimSub" (formula "5") (term "1,2,0"))
         (rule "polySimp_pullOutFactor1b" (formula "5") (term "1,2,0"))
         (rule "add_literals" (formula "5") (term "1,1,1,2,0"))
         (rule "times_zero_1" (formula "5") (term "1,1,2,0"))
         (rule "add_zero_right" (formula "5") (term "1,2,0"))
         (rule "lenOfSeqSub" (formula "3") (term "0"))
         (rule "polySimp_elimSub" (formula "3") (term "1,0"))
         (rule "polySimp_pullOutFactor1b" (formula "3") (term "1,0"))
         (rule "add_literals" (formula "3") (term "1,1,1,0"))
         (rule "times_zero_1" (formula "3") (term "1,1,0"))
         (rule "add_literals" (formula "3") (term "1,0"))
         (rule "lenOfSeqConcat" (formula "3") (term "1,1"))
          (builtin "One Step Simplification" (formula "3"))
         (rule "eqSeqSingleton" (formula "4"))
         (rule "andLeft" (formula "4"))
         (rule "polySimp_addAssoc" (formula "3") (term "1"))
         (rule "add_literals" (formula "3") (term "0,1"))
         (rule "lenOfSeqSub" (formula "4") (term "0"))
         (rule "sub_literals" (formula "4") (term "1,0"))
          (builtin "One Step Simplification" (formula "4"))
         (rule "less_literals" (formula "4") (term "0"))
          (builtin "One Step Simplification" (formula "4"))
         (rule "true_left" (formula "4"))
         (rule "lenOfSeqConcat" (formula "3") (term "1,1"))
          (builtin "One Step Simplification" (formula "3"))
         (rule "polySimp_addAssoc" (formula "3") (term "1"))
         (rule "add_literals" (formula "3") (term "0,1"))
         (rule "lenOfSeqConcat" (formula "3") (term "1,1"))
          (builtin "One Step Simplification" (formula "3"))
         (rule "polySimp_addAssoc" (formula "3") (term "1"))
         (rule "add_literals" (formula "3") (term "0,1"))
         (rule "lenOfSeqConcat" (formula "3") (term "1,1"))
          (builtin "One Step Simplification" (formula "3"))
         (rule "add_literals" (formula "3") (term "1,1"))
         (rule "add_literals" (formula "3") (term "1"))
          (builtin "One Step Simplification" (formula "3"))
         (rule "equal_literals" (formula "3") (term "1"))
          (builtin "One Step Simplification" (formula "3"))
         (rule "replace_known_left" (formula "5") (term "0,2,0") (ifseqformula "3"))
          (builtin "One Step Simplification" (formula "5"))
         (rule "getOfSeqSub" (formula "4") (term "0"))
         (rule "castDel" (formula "4") (term "2,0"))
         (rule "leq_literals" (formula "4") (term "0,0,0"))
          (builtin "One Step Simplification" (formula "4"))
         (rule "sub_literals" (formula "4") (term "1,0,0"))
         (rule "add_literals" (formula "4") (term "1,1,0"))
         (rule "less_literals" (formula "4") (term "0,0"))
          (builtin "One Step Simplification" (formula "4"))
         (rule "eqSeqConcat" (formula "10"))
          (builtin "One Step Simplification" (formula "10"))
         (rule "andLeft" (formula "10"))
         (rule "andLeft" (formula "10"))
         (rule "lenOfSeqSub" (formula "12") (term "2,0"))
         (rule "sub_literals" (formula "12") (term "1,2,0"))
         (rule "less_literals" (formula "12") (term "0,2,0"))
          (builtin "One Step Simplification" (formula "12"))
         (rule "eqSeqSingleton" (formula "11"))
         (rule "andLeft" (formula "11"))
         (rule "lenOfSeqSub" (formula "10") (term "0"))
         (rule "sub_literals" (formula "10") (term "1,0"))
         (rule "less_literals" (formula "10") (term "0,0"))
          (builtin "One Step Simplification" (formula "10"))
         (rule "lenOfSeqSub" (formula "11") (term "0"))
         (rule "less_literals" (formula "11") (term "0,0"))
          (builtin "One Step Simplification" (formula "11"))
         (rule "sub_literals" (formula "11") (term "0"))
          (builtin "One Step Simplification" (formula "11"))
         (rule "true_left" (formula "11"))
         (rule "lenOfSeqConcat" (formula "10") (term "1,1"))
          (builtin "One Step Simplification" (formula "10"))
         (rule "polySimp_addAssoc" (formula "10") (term "1"))
         (rule "add_literals" (formula "10") (term "0,1"))
         (rule "lenOfSeqConcat" (formula "10") (term "1,1"))
          (builtin "One Step Simplification" (formula "10"))
         (rule "polySimp_addAssoc" (formula "10") (term "1"))
         (rule "add_literals" (formula "10") (term "0,1"))
         (rule "lenOfSeqConcat" (formula "10") (term "1,1"))
          (builtin "One Step Simplification" (formula "10"))
         (rule "polySimp_addAssoc" (formula "10") (term "1"))
         (rule "add_literals" (formula "10") (term "0,1"))
         (rule "lenOfSeqConcat" (formula "10") (term "1,1"))
          (builtin "One Step Simplification" (formula "10"))
         (rule "polySimp_addAssoc" (formula "10") (term "1"))
         (rule "add_literals" (formula "10") (term "0,1"))
         (rule "lenOfSeqConcat" (formula "10") (term "1,1"))
          (builtin "One Step Simplification" (formula "10"))
         (rule "polySimp_addAssoc" (formula "10") (term "1"))
         (rule "add_literals" (formula "10") (term "0,1"))
         (rule "lenOfSeqConcat" (formula "10") (term "1,1"))
          (builtin "One Step Simplification" (formula "10"))
         (rule "polySimp_addAssoc" (formula "10") (term "1"))
         (rule "add_literals" (formula "10") (term "0,1"))
         (rule "lenOfSeqConcat" (formula "10") (term "1,1"))
          (builtin "One Step Simplification" (formula "10"))
         (rule "add_literals" (formula "10") (term "1,1"))
         (rule "add_literals" (formula "10") (term "1"))
          (builtin "One Step Simplification" (formula "10"))
         (rule "true_left" (formula "10"))
         (rule "getOfSeqSub" (formula "4") (term "0"))
         (rule "castDel" (formula "4") (term "2,0"))
         (rule "leq_literals" (formula "4") (term "0,0,0"))
          (builtin "One Step Simplification" (formula "4"))
         (rule "add_zero_left" (formula "4") (term "1,1,0"))
         (rule "polySimp_elimSub" (formula "4") (term "1,0,0"))
         (rule "polySimp_pullOutFactor1b" (formula "4") (term "1,0,0"))
         (rule "add_literals" (formula "4") (term "1,1,1,0,0"))
         (rule "times_zero_1" (formula "4") (term "1,1,0,0"))
         (rule "add_literals" (formula "4") (term "1,0,0"))
         (rule "less_literals" (formula "4") (term "0,0"))
          (builtin "One Step Simplification" (formula "4"))
         (rule "getOfSeqSub" (formula "10") (term "0"))
         (rule "castDel" (formula "10") (term "2,0"))
         (rule "add_zero_left" (formula "10") (term "1,1,0"))
         (rule "sub_literals" (formula "10") (term "1,1,0,0"))
         (rule "leq_literals" (formula "10") (term "0,0,0"))
          (builtin "One Step Simplification" (formula "10"))
         (rule "less_literals" (formula "10") (term "0,0"))
          (builtin "One Step Simplification" (formula "10"))
         (rule "getOfSeqSub" (formula "10") (term "0"))
         (rule "castDel" (formula "10") (term "2,0"))
         (rule "sub_literals" (formula "10") (term "1,1,0,0"))
         (rule "add_zero_left" (formula "10") (term "1,1,0"))
         (rule "leq_literals" (formula "10") (term "0,0,0"))
          (builtin "One Step Simplification" (formula "10"))
         (rule "less_literals" (formula "10") (term "0,0"))
          (builtin "One Step Simplification" (formula "10"))
         (rule "getOfSeqSub" (formula "10") (term "0"))
         (rule "castDel" (formula "10") (term "2,0"))
         (rule "leq_literals" (formula "10") (term "0,0,0"))
          (builtin "One Step Simplification" (formula "10"))
         (rule "add_zero_right" (formula "10") (term "1,1,0"))
         (rule "sub_literals" (formula "10") (term "1,0,0"))
         (rule "less_literals" (formula "10") (term "0,0"))
          (builtin "One Step Simplification" (formula "10"))
         (rule "getOfSeqSubEQ" (formula "10") (term "0") (ifseqformula "2"))
         (rule "castDel" (formula "10") (term "2,0"))
         (rule "add_zero_right" (formula "10") (term "1,1,0"))
         (rule "leq_literals" (formula "10") (term "0,0,0"))
          (builtin "One Step Simplification" (formula "10"))
         (rule "polySimp_elimSub" (formula "10") (term "1,0,0"))
         (rule "mul_literals" (formula "10") (term "1,1,0,0"))
         (rule "add_zero_right" (formula "10") (term "1,0,0"))
         (rule "eqSeqConcat" (formula "5"))
          (builtin "One Step Simplification" (formula "5"))
         (rule "andLeft" (formula "5"))
         (rule "andLeft" (formula "5"))
         (rule "lenOfSeqSub" (formula "7") (term "2,0"))
         (rule "sub_literals" (formula "7") (term "1,2,0"))
         (rule "less_literals" (formula "7") (term "0,2,0"))
          (builtin "One Step Simplification" (formula "7"))
         (rule "eqSeqSingleton" (formula "6"))
         (rule "andLeft" (formula "6"))
         (rule "lenOfSeqConcat" (formula "5") (term "1,1"))
          (builtin "One Step Simplification" (formula "5"))
         (rule "polySimp_addAssoc" (formula "5") (term "1"))
         (rule "add_literals" (formula "5") (term "0,1"))
         (rule "lenOfSeqSub" (formula "6") (term "0"))
         (rule "less_literals" (formula "6") (term "0,0"))
          (builtin "One Step Simplification" (formula "6"))
         (rule "sub_literals" (formula "6") (term "0"))
          (builtin "One Step Simplification" (formula "6"))
         (rule "true_left" (formula "6"))
         (rule "lenOfSeqSub" (formula "5") (term "0"))
         (rule "less_literals" (formula "5") (term "0,0"))
          (builtin "One Step Simplification" (formula "5"))
         (rule "sub_literals" (formula "5") (term "0"))
         (rule "lenOfSeqConcat" (formula "5") (term "1,1"))
          (builtin "One Step Simplification" (formula "5"))
         (rule "polySimp_addAssoc" (formula "5") (term "1"))
         (rule "add_literals" (formula "5") (term "0,1"))
         (rule "lenOfSeqConcat" (formula "5") (term "1,1"))
          (builtin "One Step Simplification" (formula "5"))
         (rule "add_literals" (formula "5") (term "1,1"))
         (rule "add_literals" (formula "5") (term "1"))
          (builtin "One Step Simplification" (formula "5"))
         (rule "true_left" (formula "5"))
         (rule "getOfSeqSub" (formula "5") (term "0"))
         (rule "castDel" (formula "5") (term "2,0"))
         (rule "leq_literals" (formula "5") (term "0,0,0"))
          (builtin "One Step Simplification" (formula "5"))
         (rule "add_literals" (formula "5") (term "1,1,0"))
         (rule "sub_literals" (formula "5") (term "1,0,0"))
         (rule "less_literals" (formula "5") (term "0,0"))
          (builtin "One Step Simplification" (formula "5"))
         (rule "eqSeqConcat" (formula "12"))
          (builtin "One Step Simplification" (formula "12"))
         (rule "andLeft" (formula "12"))
         (rule "andLeft" (formula "12"))
         (rule "lenOfSeqSub" (formula "14") (term "2,0"))
         (rule "less_literals" (formula "14") (term "0,2,0"))
          (builtin "One Step Simplification" (formula "14"))
         (rule "sub_literals" (formula "14") (term "2,0"))
         (rule "eqSeqSingleton" (formula "13"))
         (rule "andLeft" (formula "13"))
         (rule "lenOfSeqSub" (formula "12") (term "0"))
         (rule "less_literals" (formula "12") (term "0,0"))
          (builtin "One Step Simplification" (formula "12"))
         (rule "sub_literals" (formula "12") (term "0"))
         (rule "lenOfSeqSub" (formula "13") (term "0"))
         (rule "less_literals" (formula "13") (term "0,0"))
          (builtin "One Step Simplification" (formula "13"))
         (rule "sub_literals" (formula "13") (term "0"))
          (builtin "One Step Simplification" (formula "13"))
         (rule "true_left" (formula "13"))
         (rule "lenOfSeqConcat" (formula "12") (term "1,1"))
          (builtin "One Step Simplification" (formula "12"))
         (rule "polySimp_addAssoc" (formula "12") (term "1"))
         (rule "add_literals" (formula "12") (term "0,1"))
         (rule "lenOfSeqConcat" (formula "12") (term "1,1"))
          (builtin "One Step Simplification" (formula "12"))
         (rule "polySimp_addAssoc" (formula "12") (term "1"))
         (rule "add_literals" (formula "12") (term "0,1"))
         (rule "lenOfSeqConcat" (formula "12") (term "1,1"))
          (builtin "One Step Simplification" (formula "12"))
         (rule "polySimp_addAssoc" (formula "12") (term "1"))
         (rule "add_literals" (formula "12") (term "0,1"))
         (rule "lenOfSeqConcat" (formula "12") (term "1,1"))
          (builtin "One Step Simplification" (formula "12"))
         (rule "polySimp_addAssoc" (formula "12") (term "1"))
         (rule "add_literals" (formula "12") (term "0,1"))
         (rule "lenOfSeqConcat" (formula "12") (term "1,1"))
          (builtin "One Step Simplification" (formula "12"))
         (rule "polySimp_addAssoc" (formula "12") (term "1"))
         (rule "add_literals" (formula "12") (term "0,1"))
         (rule "lenOfSeqConcat" (formula "12") (term "1,1"))
          (builtin "One Step Simplification" (formula "12"))
         (rule "add_literals" (formula "12") (term "1,1"))
         (rule "add_literals" (formula "12") (term "1"))
          (builtin "One Step Simplification" (formula "12"))
         (rule "true_left" (formula "12"))
         (rule "getOfSeqSub" (formula "5") (term "0"))
         (rule "castDel" (formula "5") (term "2,0"))
         (rule "sub_literals" (formula "5") (term "1,1,0,0"))
         (rule "add_zero_left" (formula "5") (term "1,1,0"))
         (rule "leq_literals" (formula "5") (term "0,0,0"))
          (builtin "One Step Simplification" (formula "5"))
         (rule "less_literals" (formula "5") (term "0,0"))
          (builtin "One Step Simplification" (formula "5"))
         (rule "getOfSeqSub" (formula "12") (term "0"))
         (rule "castDel" (formula "12") (term "2,0"))
         (rule "sub_literals" (formula "12") (term "1,1,0,0"))
         (rule "leq_literals" (formula "12") (term "0,0,0"))
          (builtin "One Step Simplification" (formula "12"))
         (rule "less_literals" (formula "12") (term "0,0"))
          (builtin "One Step Simplification" (formula "12"))
         (rule "add_literals" (formula "12") (term "1,0"))
         (rule "getOfSeqSub" (formula "5") (term "0"))
         (rule "castDel" (formula "5") (term "2,0"))
         (rule "leq_literals" (formula "5") (term "0,0,0"))
          (builtin "One Step Simplification" (formula "5"))
         (rule "polySimp_elimSub" (formula "5") (term "1,0,0"))
         (rule "polySimp_pullOutFactor1b" (formula "5") (term "1,0,0"))
         (rule "add_literals" (formula "5") (term "1,1,1,0,0"))
         (rule "times_zero_1" (formula "5") (term "1,1,0,0"))
         (rule "add_literals" (formula "5") (term "1,0,0"))
         (rule "less_literals" (formula "5") (term "0,0"))
          (builtin "One Step Simplification" (formula "5"))
         (rule "getOfSeqSub" (formula "12") (term "0"))
         (rule "castDel" (formula "12") (term "2,0"))
         (rule "add_zero_left" (formula "12") (term "1,1,0"))
         (rule "sub_literals" (formula "12") (term "1,1,0,0"))
         (rule "leq_literals" (formula "12") (term "0,0,0"))
          (builtin "One Step Simplification" (formula "12"))
         (rule "less_literals" (formula "12") (term "0,0"))
          (builtin "One Step Simplification" (formula "12"))
         (rule "eqSeqConcat" (formula "6"))
          (builtin "One Step Simplification" (formula "6"))
         (rule "andLeft" (formula "6"))
         (rule "andLeft" (formula "6"))
         (rule "lenOfSeqSub" (formula "8") (term "2,0"))
         (rule "less_literals" (formula "8") (term "0,2,0"))
          (builtin "One Step Simplification" (formula "8"))
         (rule "sub_literals" (formula "8") (term "2,0"))
         (rule "eqSeqSingleton" (formula "7"))
         (rule "andLeft" (formula "7"))
         (rule "lenOfSeqConcat" (formula "6") (term "1,1"))
          (builtin "One Step Simplification" (formula "6"))
         (rule "polySimp_addAssoc" (formula "6") (term "1"))
         (rule "add_literals" (formula "6") (term "0,1"))
         (rule "lenOfSeqSub" (formula "7") (term "0"))
         (rule "less_literals" (formula "7") (term "0,0"))
          (builtin "One Step Simplification" (formula "7"))
         (rule "sub_literals" (formula "7") (term "0"))
          (builtin "One Step Simplification" (formula "7"))
         (rule "true_left" (formula "7"))
         (rule "lenOfSeqSub" (formula "6") (term "0"))
         (rule "less_literals" (formula "6") (term "0,0"))
          (builtin "One Step Simplification" (formula "6"))
         (rule "sub_literals" (formula "6") (term "0"))
         (rule "lenOfSeqConcat" (formula "6") (term "1,1"))
          (builtin "One Step Simplification" (formula "6"))
         (rule "add_literals" (formula "6") (term "1,1"))
         (rule "add_literals" (formula "6") (term "1"))
          (builtin "One Step Simplification" (formula "6"))
         (rule "true_left" (formula "6"))
         (rule "getOfSeqSub" (formula "13") (term "0"))
         (rule "castDel" (formula "13") (term "2,0"))
         (rule "sub_literals" (formula "13") (term "1,1,0,0"))
         (rule "leq_literals" (formula "13") (term "0,0,0"))
          (builtin "One Step Simplification" (formula "13"))
         (rule "less_literals" (formula "13") (term "0,0"))
          (builtin "One Step Simplification" (formula "13"))
         (rule "add_literals" (formula "13") (term "1,0"))
         (rule "getOfSeqSub" (formula "6") (term "0"))
         (rule "castDel" (formula "6") (term "2,0"))
         (rule "add_zero_left" (formula "6") (term "1,1,0"))
         (rule "sub_literals" (formula "6") (term "1,1,0,0"))
         (rule "leq_literals" (formula "6") (term "0,0,0"))
          (builtin "One Step Simplification" (formula "6"))
         (rule "less_literals" (formula "6") (term "0,0"))
          (builtin "One Step Simplification" (formula "6"))
         (rule "eqSeqConcat" (formula "14"))
          (builtin "One Step Simplification" (formula "14"))
         (rule "andLeft" (formula "14"))
         (rule "andLeft" (formula "14"))
         (rule "lenOfSeqSub" (formula "16") (term "2,0"))
         (rule "sub_literals" (formula "16") (term "1,2,0"))
         (rule "less_literals" (formula "16") (term "0,2,0"))
          (builtin "One Step Simplification" (formula "16"))
         (rule "eqSeqSingleton" (formula "15"))
         (rule "andLeft" (formula "15"))
         (rule "lenOfSeqSub" (formula "14") (term "0"))
         (rule "less_literals" (formula "14") (term "0,0"))
          (builtin "One Step Simplification" (formula "14"))
         (rule "sub_literals" (formula "14") (term "0"))
         (rule "lenOfSeqSub" (formula "15") (term "0"))
         (rule "sub_literals" (formula "15") (term "1,0"))
          (builtin "One Step Simplification" (formula "15"))
         (rule "less_literals" (formula "15") (term "0"))
          (builtin "One Step Simplification" (formula "15"))
         (rule "true_left" (formula "15"))
         (rule "lenOfSeqConcat" (formula "14") (term "1,1"))
          (builtin "One Step Simplification" (formula "14"))
         (rule "polySimp_addAssoc" (formula "14") (term "1"))
         (rule "add_literals" (formula "14") (term "0,1"))
         (rule "lenOfSeqConcat" (formula "14") (term "1,1"))
          (builtin "One Step Simplification" (formula "14"))
         (rule "polySimp_addAssoc" (formula "14") (term "1"))
         (rule "add_literals" (formula "14") (term "0,1"))
         (rule "lenOfSeqConcat" (formula "14") (term "1,1"))
          (builtin "One Step Simplification" (formula "14"))
         (rule "polySimp_addAssoc" (formula "14") (term "1"))
         (rule "add_literals" (formula "14") (term "0,1"))
         (rule "lenOfSeqConcat" (formula "14") (term "1,1"))
          (builtin "One Step Simplification" (formula "14"))
         (rule "polySimp_addAssoc" (formula "14") (term "1"))
         (rule "add_literals" (formula "14") (term "0,1"))
         (rule "lenOfSeqConcat" (formula "14") (term "1,1"))
          (builtin "One Step Simplification" (formula "14"))
         (rule "add_literals" (formula "14") (term "1,1"))
         (rule "add_literals" (formula "14") (term "1"))
          (builtin "One Step Simplification" (formula "14"))
         (rule "true_left" (formula "14"))
         (rule "getOfSeqSub" (formula "13") (term "0"))
         (rule "castDel" (formula "13") (term "2,0"))
         (rule "add_zero_right" (formula "13") (term "1,1,0"))
         (rule "sub_literals" (formula "13") (term "1,1,0,0"))
         (rule "leq_literals" (formula "13") (term "0,0,0"))
          (builtin "One Step Simplification" (formula "13"))
         (rule "less_literals" (formula "13") (term "0,0"))
          (builtin "One Step Simplification" (formula "13"))
         (rule "getOfSeqSub" (formula "6") (term "0"))
         (rule "castDel" (formula "6") (term "2,0"))
         (rule "add_literals" (formula "6") (term "1,1,0"))
         (rule "sub_literals" (formula "6") (term "1,1,0,0"))
         (rule "leq_literals" (formula "6") (term "0,0,0"))
          (builtin "One Step Simplification" (formula "6"))
         (rule "less_literals" (formula "6") (term "0,0"))
          (builtin "One Step Simplification" (formula "6"))
         (rule "getOfSeqSub" (formula "14") (term "0"))
         (rule "castDel" (formula "14") (term "2,0"))
         (rule "sub_literals" (formula "14") (term "1,1,0,0"))
         (rule "leq_literals" (formula "14") (term "0,0,0"))
          (builtin "One Step Simplification" (formula "14"))
         (rule "less_literals" (formula "14") (term "0,0"))
          (builtin "One Step Simplification" (formula "14"))
         (rule "add_literals" (formula "14") (term "1,0"))
         (rule "getOfSeqSub" (formula "6") (term "0"))
         (rule "castDel" (formula "6") (term "2,0"))
         (rule "add_literals" (formula "6") (term "1,1,0"))
         (rule "sub_literals" (formula "6") (term "1,1,0,0"))
         (rule "leq_literals" (formula "6") (term "0,0,0"))
          (builtin "One Step Simplification" (formula "6"))
         (rule "less_literals" (formula "6") (term "0,0"))
          (builtin "One Step Simplification" (formula "6"))
         (rule "eqSeqConcat" (formula "7"))
          (builtin "One Step Simplification" (formula "7"))
         (rule "andLeft" (formula "7"))
         (rule "andLeft" (formula "7"))
         (rule "lenOfSeqSub" (formula "9") (term "2,0"))
         (rule "sub_literals" (formula "9") (term "1,2,0"))
         (rule "less_literals" (formula "9") (term "0,2,0"))
          (builtin "One Step Simplification" (formula "9"))
         (rule "lenOfSeqConcat" (formula "7") (term "1,1"))
          (builtin "One Step Simplification" (formula "7"))
         (rule "add_literals" (formula "7") (term "1,1"))
         (rule "add_literals" (formula "7") (term "1"))
         (rule "eqSeqSingleton" (formula "8"))
         (rule "andLeft" (formula "8"))
         (rule "lenOfSeqSub" (formula "7") (term "0"))
         (rule "sub_literals" (formula "7") (term "1,0"))
          (builtin "One Step Simplification" (formula "7"))
         (rule "equal_literals" (formula "7") (term "1"))
          (builtin "One Step Simplification" (formula "7"))
         (rule "less_literals" (formula "7"))
         (rule "true_left" (formula "7"))
         (rule "lenOfSeqSub" (formula "7") (term "0"))
         (rule "sub_literals" (formula "7") (term "1,0"))
          (builtin "One Step Simplification" (formula "7"))
         (rule "equal_literals" (formula "7") (term "1"))
          (builtin "One Step Simplification" (formula "7"))
         (rule "less_literals" (formula "7"))
         (rule "true_left" (formula "7"))
         (rule "getOfSeqSubEQ" (formula "14") (term "0") (ifseqformula "2"))
         (rule "castDel" (formula "14") (term "2,0"))
         (rule "add_zero_right" (formula "14") (term "1,1,0"))
         (rule "leq_literals" (formula "14") (term "0,0,0"))
          (builtin "One Step Simplification" (formula "14"))
         (rule "polySimp_elimSub" (formula "14") (term "1,0,0"))
         (rule "times_zero_2" (formula "14") (term "1,1,0,0"))
         (rule "add_zero_right" (formula "14") (term "1,0,0"))
         (rule "getOfSeqSub" (formula "15") (term "0"))
         (rule "castDel" (formula "15") (term "2,0"))
         (rule "add_zero_left" (formula "15") (term "1,1,0"))
         (rule "sub_literals" (formula "15") (term "1,1,0,0"))
         (rule "leq_literals" (formula "15") (term "0,0,0"))
          (builtin "One Step Simplification" (formula "15"))
         (rule "less_literals" (formula "15") (term "0,0"))
          (builtin "One Step Simplification" (formula "15"))
         (rule "getOfSeqSub" (formula "6") (term "0"))
         (rule "castDel" (formula "6") (term "2,0"))
         (rule "leq_literals" (formula "6") (term "0,0,0"))
          (builtin "One Step Simplification" (formula "6"))
         (rule "polySimp_elimSub" (formula "6") (term "1,0,0"))
         (rule "polySimp_pullOutFactor1b" (formula "6") (term "1,0,0"))
         (rule "add_literals" (formula "6") (term "1,1,1,0,0"))
         (rule "times_zero_1" (formula "6") (term "1,1,0,0"))
         (rule "add_zero_right" (formula "6") (term "1,0,0"))
         (rule "less_literals" (formula "6") (term "0,0"))
          (builtin "One Step Simplification" (formula "6"))
         (rule "getOfSeqSub" (formula "7") (term "0"))
         (rule "castDel" (formula "7") (term "2,0"))
         (rule "add_zero_right" (formula "7") (term "1,1,0"))
         (rule "sub_literals" (formula "7") (term "1,1,0,0"))
         (rule "leq_literals" (formula "7") (term "0,0,0"))
          (builtin "One Step Simplification" (formula "7"))
         (rule "less_literals" (formula "7") (term "0,0"))
          (builtin "One Step Simplification" (formula "7"))
         (rule "eqSeqConcat" (formula "16"))
          (builtin "One Step Simplification" (formula "16"))
         (rule "andLeft" (formula "16"))
         (rule "andLeft" (formula "16"))
         (rule "lenOfSeqSub" (formula "18") (term "2,0"))
         (rule "sub_literals" (formula "18") (term "1,2,0"))
         (rule "less_literals" (formula "18") (term "0,2,0"))
          (builtin "One Step Simplification" (formula "18"))
         (rule "lenOfSeqSub" (formula "16") (term "0"))
         (rule "sub_literals" (formula "16") (term "1,0"))
         (rule "less_literals" (formula "16") (term "0,0"))
          (builtin "One Step Simplification" (formula "16"))
         (rule "eqSeqSingleton" (formula "17"))
         (rule "andLeft" (formula "17"))
         (rule "lenOfSeqConcat" (formula "16") (term "1,1"))
          (builtin "One Step Simplification" (formula "16"))
         (rule "polySimp_addAssoc" (formula "16") (term "1"))
         (rule "add_literals" (formula "16") (term "0,1"))
         (rule "lenOfSeqSub" (formula "17") (term "0"))
         (rule "sub_literals" (formula "17") (term "1,0"))
          (builtin "One Step Simplification" (formula "17"))
         (rule "less_literals" (formula "17") (term "0"))
          (builtin "One Step Simplification" (formula "17"))
         (rule "true_left" (formula "17"))
         (rule "lenOfSeqConcat" (formula "16") (term "1,1"))
          (builtin "One Step Simplification" (formula "16"))
         (rule "polySimp_addAssoc" (formula "16") (term "1"))
         (rule "add_literals" (formula "16") (term "0,1"))
         (rule "lenOfSeqConcat" (formula "16") (term "1,1"))
          (builtin "One Step Simplification" (formula "16"))
         (rule "polySimp_addAssoc" (formula "16") (term "1"))
         (rule "add_literals" (formula "16") (term "0,1"))
         (rule "lenOfSeqConcat" (formula "16") (term "1,1"))
          (builtin "One Step Simplification" (formula "16"))
         (rule "add_literals" (formula "16") (term "1,1"))
         (rule "add_literals" (formula "16") (term "1"))
          (builtin "One Step Simplification" (formula "16"))
         (rule "true_left" (formula "16"))
         (rule "getOfSeqSub" (formula "15") (term "0"))
         (rule "castDel" (formula "15") (term "2,0"))
         (rule "leq_literals" (formula "15") (term "0,0,0"))
          (builtin "One Step Simplification" (formula "15"))
         (rule "sub_literals" (formula "15") (term "1,0,0"))
         (rule "add_literals" (formula "15") (term "1,1,0"))
         (rule "less_literals" (formula "15") (term "0,0"))
          (builtin "One Step Simplification" (formula "15"))
         (rule "getOfSeqSub" (formula "7") (term "0"))
         (rule "castDel" (formula "7") (term "2,0"))
         (rule "add_zero_left" (formula "7") (term "1,1,0"))
         (rule "sub_literals" (formula "7") (term "1,1,0,0"))
         (rule "leq_literals" (formula "7") (term "0,0,0"))
          (builtin "One Step Simplification" (formula "7"))
         (rule "less_literals" (formula "7") (term "0,0"))
          (builtin "One Step Simplification" (formula "7"))
         (rule "getOfSeqSub" (formula "16") (term "0"))
         (rule "castDel" (formula "16") (term "2,0"))
         (rule "add_zero_left" (formula "16") (term "1,1,0"))
         (rule "leq_literals" (formula "16") (term "0,0,0"))
          (builtin "One Step Simplification" (formula "16"))
         (rule "sub_literals" (formula "16") (term "1,0,0"))
         (rule "less_literals" (formula "16") (term "0,0"))
          (builtin "One Step Simplification" (formula "16"))
         (rule "eqSeqConcat" (formula "8"))
          (builtin "One Step Simplification" (formula "8"))
         (rule "add_literals" (formula "8") (term "1,0,0"))
         (rule "andLeft" (formula "8"))
         (rule "andLeft" (formula "8"))
         (rule "lenOfSeqSub" (formula "10") (term "2,0"))
         (rule "sub_literals" (formula "10") (term "1,2,0"))
         (rule "less_literals" (formula "10") (term "0,2,0"))
          (builtin "One Step Simplification" (formula "10"))
         (rule "lenOfSeqSub" (formula "8") (term "0"))
         (rule "sub_literals" (formula "8") (term "1,0"))
          (builtin "One Step Simplification" (formula "8"))
         (rule "less_literals" (formula "8") (term "0"))
          (builtin "One Step Simplification" (formula "8"))
         (rule "true_left" (formula "8"))
         (rule "eqSeqSingleton" (formula "8"))
         (rule "andLeft" (formula "8"))
         (rule "eqSeqSingleton" (formula "10"))
         (rule "andLeft" (formula "10"))
         (rule "lenOfSeqSub" (formula "8") (term "0"))
         (rule "sub_literals" (formula "8") (term "1,0"))
          (builtin "One Step Simplification" (formula "8"))
         (rule "less_literals" (formula "8") (term "0"))
          (builtin "One Step Simplification" (formula "8"))
         (rule "true_left" (formula "8"))
         (rule "lenOfSeqSub" (formula "9") (term "0"))
         (rule "less_literals" (formula "9") (term "0,0"))
          (builtin "One Step Simplification" (formula "9"))
         (rule "sub_literals" (formula "9") (term "0"))
          (builtin "One Step Simplification" (formula "9"))
         (rule "true_left" (formula "9"))
         (rule "getOfSeqSub" (formula "16") (term "0"))
         (rule "castDel" (formula "16") (term "2,0"))
         (rule "leq_literals" (formula "16") (term "0,0,0"))
          (builtin "One Step Simplification" (formula "16"))
         (rule "add_literals" (formula "16") (term "1,1,0"))
         (rule "sub_literals" (formula "16") (term "1,0,0"))
         (rule "less_literals" (formula "16") (term "0,0"))
          (builtin "One Step Simplification" (formula "16"))
         (rule "getOfSeqSub" (formula "7") (term "0"))
         (rule "castDel" (formula "7") (term "2,0"))
         (rule "add_literals" (formula "7") (term "1,1,0"))
         (rule "sub_literals" (formula "7") (term "1,1,0,0"))
         (rule "leq_literals" (formula "7") (term "0,0,0"))
          (builtin "One Step Simplification" (formula "7"))
         (rule "less_literals" (formula "7") (term "0,0"))
          (builtin "One Step Simplification" (formula "7"))
         (rule "getOfSeqSub" (formula "17") (term "0"))
         (rule "castDel" (formula "17") (term "2,0"))
         (rule "leq_literals" (formula "17") (term "0,0,0"))
          (builtin "One Step Simplification" (formula "17"))
         (rule "add_literals" (formula "17") (term "1,1,0"))
         (rule "sub_literals" (formula "17") (term "1,0,0"))
         (rule "less_literals" (formula "17") (term "0,0"))
          (builtin "One Step Simplification" (formula "17"))
         (rule "getOfSeqSub" (formula "8") (term "0"))
         (rule "castDel" (formula "8") (term "2,0"))
         (rule "sub_literals" (formula "8") (term "1,1,0,0"))
         (rule "add_literals" (formula "8") (term "1,1,0"))
         (rule "leq_literals" (formula "8") (term "0,0,0"))
          (builtin "One Step Simplification" (formula "8"))
         (rule "less_literals" (formula "8") (term "0,0"))
          (builtin "One Step Simplification" (formula "8"))
         (rule "getOfSeqSub" (formula "9") (term "0"))
         (rule "castDel" (formula "9") (term "2,0"))
         (rule "add_zero_left" (formula "9") (term "1,1,0"))
         (rule "leq_literals" (formula "9") (term "0,0,0"))
          (builtin "One Step Simplification" (formula "9"))
         (rule "sub_literals" (formula "9") (term "1,0,0"))
         (rule "less_literals" (formula "9") (term "0,0"))
          (builtin "One Step Simplification" (formula "9"))
         (rule "getOfSeqSub" (formula "16") (term "0"))
         (rule "castDel" (formula "16") (term "2,0"))
         (rule "leq_literals" (formula "16") (term "0,0,0"))
          (builtin "One Step Simplification" (formula "16"))
         (rule "add_zero_right" (formula "16") (term "1,1,0"))
         (rule "sub_literals" (formula "16") (term "1,0,0"))
         (rule "less_literals" (formula "16") (term "0,0"))
          (builtin "One Step Simplification" (formula "16"))
         (rule "eqSeqConcat" (formula "18"))
          (builtin "One Step Simplification" (formula "18"))
         (rule "andLeft" (formula "18"))
         (rule "andLeft" (formula "18"))
         (rule "lenOfSeqSub" (formula "20") (term "2,0"))
         (rule "sub_literals" (formula "20") (term "1,2,0"))
         (rule "less_literals" (formula "20") (term "0,2,0"))
          (builtin "One Step Simplification" (formula "20"))
         (rule "lenOfSeqConcat" (formula "18") (term "1,1"))
          (builtin "One Step Simplification" (formula "18"))
         (rule "polySimp_addAssoc" (formula "18") (term "1"))
         (rule "add_literals" (formula "18") (term "0,1"))
         (rule "eqSeqSingleton" (formula "19"))
         (rule "andLeft" (formula "19"))
         (rule "lenOfSeqSub" (formula "18") (term "0"))
         (rule "sub_literals" (formula "18") (term "1,0"))
         (rule "less_literals" (formula "18") (term "0,0"))
          (builtin "One Step Simplification" (formula "18"))
         (rule "lenOfSeqSub" (formula "19") (term "0"))
         (rule "less_literals" (formula "19") (term "0,0"))
          (builtin "One Step Simplification" (formula "19"))
         (rule "sub_literals" (formula "19") (term "0"))
          (builtin "One Step Simplification" (formula "19"))
         (rule "true_left" (formula "19"))
         (rule "lenOfSeqConcat" (formula "18") (term "1,1"))
          (builtin "One Step Simplification" (formula "18"))
         (rule "polySimp_addAssoc" (formula "18") (term "1"))
         (rule "add_literals" (formula "18") (term "0,1"))
         (rule "lenOfSeqConcat" (formula "18") (term "1,1"))
          (builtin "One Step Simplification" (formula "18"))
         (rule "add_literals" (formula "18") (term "1,1"))
         (rule "add_literals" (formula "18") (term "1"))
          (builtin "One Step Simplification" (formula "18"))
         (rule "true_left" (formula "18"))
         (rule "getOfSeqSub" (formula "7") (term "0"))
         (rule "castDel" (formula "7") (term "2,0"))
         (rule "sub_literals" (formula "7") (term "1,1,0,0"))
         (rule "add_literals" (formula "7") (term "1,1,0"))
         (rule "leq_literals" (formula "7") (term "0,0,0"))
          (builtin "One Step Simplification" (formula "7"))
         (rule "less_literals" (formula "7") (term "0,0"))
          (builtin "One Step Simplification" (formula "7"))
         (rule "getOfSeqSub" (formula "17") (term "0"))
         (rule "castDel" (formula "17") (term "2,0"))
         (rule "add_literals" (formula "17") (term "1,1,0"))
         (rule "leq_literals" (formula "17") (term "0,0,0"))
          (builtin "One Step Simplification" (formula "17"))
         (rule "sub_literals" (formula "17") (term "1,0,0"))
         (rule "less_literals" (formula "17") (term "0,0"))
          (builtin "One Step Simplification" (formula "17"))
         (rule "getOfSeqSub" (formula "8") (term "0"))
         (rule "castDel" (formula "8") (term "2,0"))
         (rule "leq_literals" (formula "8") (term "0,0,0"))
          (builtin "One Step Simplification" (formula "8"))
         (rule "add_zero_left" (formula "8") (term "1,1,0"))
         (rule "sub_literals" (formula "8") (term "1,0,0"))
         (rule "less_literals" (formula "8") (term "0,0"))
          (builtin "One Step Simplification" (formula "8"))
         (rule "getOfSeqSub" (formula "9") (term "0"))
         (rule "castDel" (formula "9") (term "2,0"))
         (rule "leq_literals" (formula "9") (term "0,0,0"))
          (builtin "One Step Simplification" (formula "9"))
         (rule "add_literals" (formula "9") (term "1,1,0"))
         (rule "sub_literals" (formula "9") (term "1,0,0"))
         (rule "less_literals" (formula "9") (term "0,0"))
          (builtin "One Step Simplification" (formula "9"))
         (rule "getOfSeqSub" (formula "18") (term "0"))
         (rule "castDel" (formula "18") (term "2,0"))
         (rule "add_zero_left" (formula "18") (term "1,1,0"))
         (rule "sub_literals" (formula "18") (term "1,1,0,0"))
         (rule "leq_literals" (formula "18") (term "0,0,0"))
          (builtin "One Step Simplification" (formula "18"))
         (rule "less_literals" (formula "18") (term "0,0"))
          (builtin "One Step Simplification" (formula "18"))
         (rule "getOfSeqSub" (formula "7") (term "0"))
         (rule "castDel" (formula "7") (term "2,0"))
         (rule "leq_literals" (formula "7") (term "0,0,0"))
          (builtin "One Step Simplification" (formula "7"))
         (rule "polySimp_elimSub" (formula "7") (term "1,0,0"))
         (rule "polySimp_pullOutFactor1b" (formula "7") (term "1,0,0"))
         (rule "add_literals" (formula "7") (term "1,1,1,0,0"))
         (rule "times_zero_1" (formula "7") (term "1,1,0,0"))
         (rule "add_zero_right" (formula "7") (term "1,0,0"))
         (rule "less_literals" (formula "7") (term "0,0"))
          (builtin "One Step Simplification" (formula "7"))
         (rule "getOfSeqSub" (formula "17") (term "0"))
         (rule "castDel" (formula "17") (term "2,0"))
         (rule "sub_literals" (formula "17") (term "1,1,0,0"))
         (rule "add_literals" (formula "17") (term "1,1,0"))
         (rule "leq_literals" (formula "17") (term "0,0,0"))
          (builtin "One Step Simplification" (formula "17"))
         (rule "less_literals" (formula "17") (term "0,0"))
          (builtin "One Step Simplification" (formula "17"))
         (rule "getOfSeqSub" (formula "8") (term "0"))
         (rule "castDel" (formula "8") (term "2,0"))
         (rule "leq_literals" (formula "8") (term "0,0,0"))
          (builtin "One Step Simplification" (formula "8"))
         (rule "add_literals" (formula "8") (term "1,1,0"))
         (rule "sub_literals" (formula "8") (term "1,0,0"))
         (rule "less_literals" (formula "8") (term "0,0"))
          (builtin "One Step Simplification" (formula "8"))
         (rule "getOfSeqSub" (formula "9") (term "0"))
         (rule "castDel" (formula "9") (term "2,0"))
         (rule "sub_literals" (formula "9") (term "1,1,0,0"))
         (rule "add_literals" (formula "9") (term "1,1,0"))
         (rule "leq_literals" (formula "9") (term "0,0,0"))
          (builtin "One Step Simplification" (formula "9"))
         (rule "less_literals" (formula "9") (term "0,0"))
          (builtin "One Step Simplification" (formula "9"))
         (rule "getOfSeqSubEQ" (formula "16") (term "0") (ifseqformula "2"))
         (rule "castDel" (formula "16") (term "2,0"))
         (rule "add_zero_right" (formula "16") (term "1,1,0"))
         (rule "leq_literals" (formula "16") (term "0,0,0"))
          (builtin "One Step Simplification" (formula "16"))
         (rule "polySimp_elimSub" (formula "16") (term "1,0,0"))
         (rule "times_zero_2" (formula "16") (term "1,1,0,0"))
         (rule "add_zero_right" (formula "16") (term "1,0,0"))
         (rule "getOfSeqSub" (formula "18") (term "0"))
         (rule "castDel" (formula "18") (term "2,0"))
         (rule "add_zero_left" (formula "18") (term "1,1,0"))
         (rule "leq_literals" (formula "18") (term "0,0,0"))
          (builtin "One Step Simplification" (formula "18"))
         (rule "sub_literals" (formula "18") (term "1,0,0"))
         (rule "less_literals" (formula "18") (term "0,0"))
          (builtin "One Step Simplification" (formula "18"))
         (rule "getOfSeqSub" (formula "17") (term "0"))
         (rule "castDel" (formula "17") (term "2,0"))
         (rule "add_literals" (formula "17") (term "1,1,0"))
         (rule "leq_literals" (formula "17") (term "0,0,0"))
          (builtin "One Step Simplification" (formula "17"))
         (rule "sub_literals" (formula "17") (term "1,0,0"))
         (rule "less_literals" (formula "17") (term "0,0"))
          (builtin "One Step Simplification" (formula "17"))
         (rule "getOfSeqSub" (formula "8") (term "0"))
         (rule "castDel" (formula "8") (term "2,0"))
         (rule "sub_literals" (formula "8") (term "1,1,0,0"))
         (rule "leq_literals" (formula "8") (term "0,0,0"))
          (builtin "One Step Simplification" (formula "8"))
         (rule "less_literals" (formula "8") (term "0,0"))
          (builtin "One Step Simplification" (formula "8"))
         (rule "add_literals" (formula "8") (term "1,0"))
         (rule "eqSeqConcat" (formula "19"))
          (builtin "One Step Simplification" (formula "19"))
         (rule "andLeft" (formula "19"))
         (rule "andLeft" (formula "19"))
         (rule "lenOfSeqSub" (formula "21") (term "2,0"))
         (rule "less_literals" (formula "21") (term "0,2,0"))
          (builtin "One Step Simplification" (formula "21"))
         (rule "sub_literals" (formula "21") (term "2,0"))
         (rule "lenOfSeqSub" (formula "19") (term "0"))
         (rule "less_literals" (formula "19") (term "0,0"))
          (builtin "One Step Simplification" (formula "19"))
         (rule "sub_literals" (formula "19") (term "0"))
         (rule "eqSeqSingleton" (formula "20"))
         (rule "andLeft" (formula "20"))
         (rule "lenOfSeqConcat" (formula "19") (term "1,1"))
          (builtin "One Step Simplification" (formula "19"))
         (rule "polySimp_addAssoc" (formula "19") (term "1"))
         (rule "add_literals" (formula "19") (term "0,1"))
         (rule "lenOfSeqSub" (formula "20") (term "0"))
         (rule "less_literals" (formula "20") (term "0,0"))
          (builtin "One Step Simplification" (formula "20"))
         (rule "sub_literals" (formula "20") (term "0"))
          (builtin "One Step Simplification" (formula "20"))
         (rule "true_left" (formula "20"))
         (rule "lenOfSeqConcat" (formula "19") (term "1,1"))
          (builtin "One Step Simplification" (formula "19"))
         (rule "add_literals" (formula "19") (term "1,1"))
         (rule "add_literals" (formula "19") (term "1"))
          (builtin "One Step Simplification" (formula "19"))
         (rule "true_left" (formula "19"))
         (rule "getOfSeqSub" (formula "9") (term "0"))
         (rule "castDel" (formula "9") (term "2,0"))
         (rule "add_literals" (formula "9") (term "1,1,0"))
         (rule "leq_literals" (formula "9") (term "0,0,0"))
          (builtin "One Step Simplification" (formula "9"))
         (rule "sub_literals" (formula "9") (term "1,0,0"))
         (rule "less_literals" (formula "9") (term "0,0"))
          (builtin "One Step Simplification" (formula "9"))
         (rule "getOfSeqSub" (formula "18") (term "0"))
         (rule "castDel" (formula "18") (term "2,0"))
         (rule "leq_literals" (formula "18") (term "0,0,0"))
          (builtin "One Step Simplification" (formula "18"))
         (rule "sub_literals" (formula "18") (term "1,0,0"))
         (rule "add_literals" (formula "18") (term "1,1,0"))
         (rule "less_literals" (formula "18") (term "0,0"))
          (builtin "One Step Simplification" (formula "18"))
         (rule "getOfSeqSub" (formula "17") (term "0"))
         (rule "castDel" (formula "17") (term "2,0"))
         (rule "sub_literals" (formula "17") (term "1,1,0,0"))
         (rule "leq_literals" (formula "17") (term "0,0,0"))
          (builtin "One Step Simplification" (formula "17"))
         (rule "less_literals" (formula "17") (term "0,0"))
          (builtin "One Step Simplification" (formula "17"))
         (rule "add_literals" (formula "17") (term "1,0"))
         (rule "getOfSeqSub" (formula "8") (term "0"))
         (rule "castDel" (formula "8") (term "2,0"))
         (rule "add_literals" (formula "8") (term "1,1,0"))
         (rule "sub_literals" (formula "8") (term "1,1,0,0"))
         (rule "leq_literals" (formula "8") (term "0,0,0"))
          (builtin "One Step Simplification" (formula "8"))
         (rule "less_literals" (formula "8") (term "0,0"))
          (builtin "One Step Simplification" (formula "8"))
         (rule "getOfSeqSub" (formula "19") (term "0"))
         (rule "castDel" (formula "19") (term "2,0"))
         (rule "leq_literals" (formula "19") (term "0,0,0"))
          (builtin "One Step Simplification" (formula "19"))
         (rule "add_literals" (formula "19") (term "1,1,0"))
         (rule "sub_literals" (formula "19") (term "1,0,0"))
         (rule "less_literals" (formula "19") (term "0,0"))
          (builtin "One Step Simplification" (formula "19"))
         (rule "getOfSeqSub" (formula "9") (term "0"))
         (rule "castDel" (formula "9") (term "2,0"))
         (rule "sub_literals" (formula "9") (term "1,1,0,0"))
         (rule "add_literals" (formula "9") (term "1,1,0"))
         (rule "leq_literals" (formula "9") (term "0,0,0"))
          (builtin "One Step Simplification" (formula "9"))
         (rule "less_literals" (formula "9") (term "0,0"))
          (builtin "One Step Simplification" (formula "9"))
         (rule "getOfSeqSub" (formula "18") (term "0"))
         (rule "castDel" (formula "18") (term "2,0"))
         (rule "leq_literals" (formula "18") (term "0,0,0"))
          (builtin "One Step Simplification" (formula "18"))
         (rule "sub_literals" (formula "18") (term "1,0,0"))
         (rule "add_literals" (formula "18") (term "1,1,0"))
         (rule "less_literals" (formula "18") (term "0,0"))
          (builtin "One Step Simplification" (formula "18"))
         (rule "getOfSeqSub" (formula "8") (term "0"))
         (rule "castDel" (formula "8") (term "2,0"))
         (rule "leq_literals" (formula "8") (term "0,0,0"))
          (builtin "One Step Simplification" (formula "8"))
         (rule "polySimp_elimSub" (formula "8") (term "1,0,0"))
         (rule "polySimp_pullOutFactor1b" (formula "8") (term "1,0,0"))
         (rule "add_literals" (formula "8") (term "1,1,1,0,0"))
         (rule "times_zero_1" (formula "8") (term "1,1,0,0"))
         (rule "add_zero_right" (formula "8") (term "1,0,0"))
         (rule "less_literals" (formula "8") (term "0,0"))
          (builtin "One Step Simplification" (formula "8"))
         (rule "getOfSeqSub" (formula "19") (term "0"))
         (rule "castDel" (formula "19") (term "2,0"))
         (rule "sub_literals" (formula "19") (term "1,1,0,0"))
         (rule "add_literals" (formula "19") (term "1,1,0"))
         (rule "leq_literals" (formula "19") (term "0,0,0"))
          (builtin "One Step Simplification" (formula "19"))
         (rule "less_literals" (formula "19") (term "0,0"))
          (builtin "One Step Simplification" (formula "19"))
         (rule "getOfSeqSub" (formula "9") (term "0"))
         (rule "castDel" (formula "9") (term "2,0"))
         (rule "leq_literals" (formula "9") (term "0,0,0"))
          (builtin "One Step Simplification" (formula "9"))
         (rule "polySimp_elimSub" (formula "9") (term "1,0,0"))
         (rule "polySimp_pullOutFactor1b" (formula "9") (term "1,0,0"))
         (rule "add_literals" (formula "9") (term "1,1,1,0,0"))
         (rule "times_zero_1" (formula "9") (term "1,1,0,0"))
         (rule "add_zero_right" (formula "9") (term "1,0,0"))
         (rule "less_literals" (formula "9") (term "0,0"))
          (builtin "One Step Simplification" (formula "9"))
         (rule "getOfSeqSub" (formula "18") (term "0"))
         (rule "castDel" (formula "18") (term "2,0"))
         (rule "sub_literals" (formula "18") (term "1,1,0,0"))
         (rule "leq_literals" (formula "18") (term "0,0,0"))
          (builtin "One Step Simplification" (formula "18"))
         (rule "add_literals" (formula "18") (term "1,1,0"))
         (rule "less_literals" (formula "18") (term "0,0"))
          (builtin "One Step Simplification" (formula "18"))
         (rule "getOfSeqSubEQ" (formula "17") (term "0") (ifseqformula "2"))
         (rule "castDel" (formula "17") (term "2,0"))
         (rule "leq_literals" (formula "17") (term "0,0,0"))
          (builtin "One Step Simplification" (formula "17"))
         (rule "add_zero_right" (formula "17") (term "1,1,0"))
         (rule "polySimp_elimSub" (formula "17") (term "1,0,0"))
         (rule "mul_literals" (formula "17") (term "1,1,0,0"))
         (rule "add_zero_right" (formula "17") (term "1,0,0"))
         (rule "getOfSeqSub" (formula "19") (term "0"))
         (rule "castDel" (formula "19") (term "2,0"))
         (rule "leq_literals" (formula "19") (term "0,0,0"))
          (builtin "One Step Simplification" (formula "19"))
         (rule "add_literals" (formula "19") (term "1,1,0"))
         (rule "sub_literals" (formula "19") (term "1,0,0"))
         (rule "less_literals" (formula "19") (term "0,0"))
          (builtin "One Step Simplification" (formula "19"))
         (rule "eqSeqConcat" (formula "20"))
          (builtin "One Step Simplification" (formula "20"))
         (rule "andLeft" (formula "20"))
         (rule "andLeft" (formula "20"))
         (rule "lenOfSeqSub" (formula "22") (term "2,0"))
         (rule "less_literals" (formula "22") (term "0,2,0"))
          (builtin "One Step Simplification" (formula "22"))
         (rule "sub_literals" (formula "22") (term "2,0"))
         (rule "lenOfSeqConcat" (formula "20") (term "1,1"))
          (builtin "One Step Simplification" (formula "20"))
         (rule "add_literals" (formula "20") (term "1,1"))
         (rule "add_literals" (formula "20") (term "1"))
         (rule "eqSeqSingleton" (formula "21"))
         (rule "andLeft" (formula "21"))
         (rule "lenOfSeqSub" (formula "20") (term "0"))
         (rule "sub_literals" (formula "20") (term "1,0"))
          (builtin "One Step Simplification" (formula "20"))
         (rule "less_literals" (formula "20") (term "0"))
          (builtin "One Step Simplification" (formula "20"))
         (rule "true_left" (formula "20"))
         (rule "lenOfSeqSub" (formula "20") (term "0"))
         (rule "less_literals" (formula "20") (term "0,0"))
          (builtin "One Step Simplification" (formula "20"))
         (rule "sub_literals" (formula "20") (term "0"))
          (builtin "One Step Simplification" (formula "20"))
         (rule "true_left" (formula "20"))
         (rule "getOfSeqSub" (formula "18") (term "0"))
         (rule "castDel" (formula "18") (term "2,0"))
         (rule "add_literals" (formula "18") (term "1,1,0"))
         (rule "leq_literals" (formula "18") (term "0,0,0"))
          (builtin "One Step Simplification" (formula "18"))
         (rule "sub_literals" (formula "18") (term "1,0,0"))
         (rule "less_literals" (formula "18") (term "0,0"))
          (builtin "One Step Simplification" (formula "18"))
         (rule "getOfSeqSub" (formula "19") (term "0"))
         (rule "castDel" (formula "19") (term "2,0"))
         (rule "sub_literals" (formula "19") (term "1,1,0,0"))
         (rule "leq_literals" (formula "19") (term "0,0,0"))
          (builtin "One Step Simplification" (formula "19"))
         (rule "add_literals" (formula "19") (term "1,1,0"))
         (rule "less_literals" (formula "19") (term "0,0"))
          (builtin "One Step Simplification" (formula "19"))
         (rule "getOfSeqSub" (formula "20") (term "0"))
         (rule "castDel" (formula "20") (term "2,0"))
         (rule "add_zero_left" (formula "20") (term "1,1,0"))
         (rule "sub_literals" (formula "20") (term "1,1,0,0"))
         (rule "leq_literals" (formula "20") (term "0,0,0"))
          (builtin "One Step Simplification" (formula "20"))
         (rule "less_literals" (formula "20") (term "0,0"))
          (builtin "One Step Simplification" (formula "20"))
         (rule "getOfSeqSub" (formula "18") (term "0"))
         (rule "castDel" (formula "18") (term "2,0"))
         (rule "leq_literals" (formula "18") (term "0,0,0"))
          (builtin "One Step Simplification" (formula "18"))
         (rule "add_zero_right" (formula "18") (term "1,1,0"))
         (rule "sub_literals" (formula "18") (term "1,0,0"))
         (rule "less_literals" (formula "18") (term "0,0"))
          (builtin "One Step Simplification" (formula "18"))
         (rule "getOfSeqSub" (formula "19") (term "0"))
         (rule "castDel" (formula "19") (term "2,0"))
         (rule "leq_literals" (formula "19") (term "0,0,0"))
          (builtin "One Step Simplification" (formula "19"))
         (rule "sub_literals" (formula "19") (term "1,0,0"))
         (rule "add_literals" (formula "19") (term "1,1,0"))
         (rule "less_literals" (formula "19") (term "0,0"))
          (builtin "One Step Simplification" (formula "19"))
         (rule "getOfSeqSub" (formula "20") (term "0"))
         (rule "castDel" (formula "20") (term "2,0"))
         (rule "add_zero_left" (formula "20") (term "1,1,0"))
         (rule "sub_literals" (formula "20") (term "1,1,0,0"))
         (rule "leq_literals" (formula "20") (term "0,0,0"))
          (builtin "One Step Simplification" (formula "20"))
         (rule "less_literals" (formula "20") (term "0,0"))
          (builtin "One Step Simplification" (formula "20"))
         (rule "getOfSeqSub" (formula "19") (term "0"))
         (rule "castDel" (formula "19") (term "2,0"))
         (rule "leq_literals" (formula "19") (term "0,0,0"))
          (builtin "One Step Simplification" (formula "19"))
         (rule "add_literals" (formula "19") (term "1,1,0"))
         (rule "sub_literals" (formula "19") (term "1,0,0"))
         (rule "less_literals" (formula "19") (term "0,0"))
          (builtin "One Step Simplification" (formula "19"))
         (rule "getOfSeqSub" (formula "20") (term "0"))
         (rule "castDel" (formula "20") (term "2,0"))
         (rule "leq_literals" (formula "20") (term "0,0,0"))
          (builtin "One Step Simplification" (formula "20"))
         (rule "sub_literals" (formula "20") (term "1,0,0"))
         (rule "add_literals" (formula "20") (term "1,1,0"))
         (rule "less_literals" (formula "20") (term "0,0"))
          (builtin "One Step Simplification" (formula "20"))
         (rule "getOfSeqSubEQ" (formula "18") (term "0") (ifseqformula "2"))
         (rule "castDel" (formula "18") (term "2,0"))
         (rule "leq_literals" (formula "18") (term "0,0,0"))
          (builtin "One Step Simplification" (formula "18"))
         (rule "add_zero_right" (formula "18") (term "1,1,0"))
         (rule "polySimp_elimSub" (formula "18") (term "1,0,0"))
         (rule "times_zero_2" (formula "18") (term "1,1,0,0"))
         (rule "add_zero_right" (formula "18") (term "1,0,0"))
         (rule "getOfSeqSub" (formula "19") (term "0"))
         (rule "castDel" (formula "19") (term "2,0"))
         (rule "sub_literals" (formula "19") (term "1,1,0,0"))
         (rule "add_literals" (formula "19") (term "1,1,0"))
         (rule "leq_literals" (formula "19") (term "0,0,0"))
          (builtin "One Step Simplification" (formula "19"))
         (rule "less_literals" (formula "19") (term "0,0"))
          (builtin "One Step Simplification" (formula "19"))
         (rule "getOfSeqSub" (formula "20") (term "0"))
         (rule "castDel" (formula "20") (term "2,0"))
         (rule "leq_literals" (formula "20") (term "0,0,0"))
          (builtin "One Step Simplification" (formula "20"))
         (rule "add_literals" (formula "20") (term "1,1,0"))
         (rule "sub_literals" (formula "20") (term "1,0,0"))
         (rule "less_literals" (formula "20") (term "0,0"))
          (builtin "One Step Simplification" (formula "20"))
         (rule "getOfSeqSub" (formula "19") (term "0"))
         (rule "castDel" (formula "19") (term "2,0"))
         (rule "sub_literals" (formula "19") (term "1,1,0,0"))
         (rule "leq_literals" (formula "19") (term "0,0,0"))
          (builtin "One Step Simplification" (formula "19"))
         (rule "add_literals" (formula "19") (term "1,1,0"))
         (rule "less_literals" (formula "19") (term "0,0"))
          (builtin "One Step Simplification" (formula "19"))
         (rule "eqSeqConcat" (formula "21"))
          (builtin "One Step Simplification" (formula "21"))
         (rule "add_literals" (formula "21") (term "1,0,0"))
         (rule "andLeft" (formula "21"))
         (rule "andLeft" (formula "21"))
         (rule "lenOfSeqSub" (formula "23") (term "2,0"))
         (rule "less_literals" (formula "23") (term "0,2,0"))
          (builtin "One Step Simplification" (formula "23"))
         (rule "sub_literals" (formula "23") (term "2,0"))
         (rule "lenOfSeqSub" (formula "21") (term "0"))
         (rule "less_literals" (formula "21") (term "0,0"))
          (builtin "One Step Simplification" (formula "21"))
         (rule "sub_literals" (formula "21") (term "0"))
          (builtin "One Step Simplification" (formula "21"))
         (rule "true_left" (formula "21"))
         (rule "eqSeqSingleton" (formula "21"))
         (rule "andLeft" (formula "21"))
         (rule "eqSeqSingleton" (formula "23"))
         (rule "andLeft" (formula "23"))
         (rule "lenOfSeqSub" (formula "21") (term "0"))
         (rule "less_literals" (formula "21") (term "0,0"))
          (builtin "One Step Simplification" (formula "21"))
         (rule "sub_literals" (formula "21") (term "0"))
          (builtin "One Step Simplification" (formula "21"))
         (rule "true_left" (formula "21"))
         (rule "lenOfSeqSub" (formula "22") (term "0"))
         (rule "less_literals" (formula "22") (term "0,0"))
          (builtin "One Step Simplification" (formula "22"))
         (rule "sub_literals" (formula "22") (term "0"))
          (builtin "One Step Simplification" (formula "22"))
         (rule "true_left" (formula "22"))
         (rule "getOfSeqSub" (formula "20") (term "0"))
         (rule "castDel" (formula "20") (term "2,0"))
         (rule "sub_literals" (formula "20") (term "1,1,0,0"))
         (rule "add_literals" (formula "20") (term "1,1,0"))
         (rule "leq_literals" (formula "20") (term "0,0,0"))
          (builtin "One Step Simplification" (formula "20"))
         (rule "less_literals" (formula "20") (term "0,0"))
          (builtin "One Step Simplification" (formula "20"))
         (rule "getOfSeqSub" (formula "21") (term "0"))
         (rule "castDel" (formula "21") (term "2,0"))
         (rule "leq_literals" (formula "21") (term "0,0,0"))
          (builtin "One Step Simplification" (formula "21"))
         (rule "add_literals" (formula "21") (term "1,1,0"))
         (rule "sub_literals" (formula "21") (term "1,0,0"))
         (rule "less_literals" (formula "21") (term "0,0"))
          (builtin "One Step Simplification" (formula "21"))
         (rule "getOfSeqSub" (formula "22") (term "0"))
         (rule "castDel" (formula "22") (term "2,0"))
         (rule "leq_literals" (formula "22") (term "0,0,0"))
          (builtin "One Step Simplification" (formula "22"))
         (rule "add_literals" (formula "22") (term "1,1,0"))
         (rule "sub_literals" (formula "22") (term "1,0,0"))
         (rule "less_literals" (formula "22") (term "0,0"))
          (builtin "One Step Simplification" (formula "22"))
         (rule "getOfSeqSubEQ" (formula "19") (term "0") (ifseqformula "2"))
         (rule "castDel" (formula "19") (term "2,0"))
         (rule "add_zero_right" (formula "19") (term "1,1,0"))
         (rule "leq_literals" (formula "19") (term "0,0,0"))
          (builtin "One Step Simplification" (formula "19"))
         (rule "polySimp_elimSub" (formula "19") (term "1,0,0"))
         (rule "times_zero_2" (formula "19") (term "1,1,0,0"))
         (rule "add_zero_right" (formula "19") (term "1,0,0"))
         (rule "getOfSeqSub" (formula "20") (term "0"))
         (rule "castDel" (formula "20") (term "2,0"))
         (rule "leq_literals" (formula "20") (term "0,0,0"))
          (builtin "One Step Simplification" (formula "20"))
         (rule "sub_literals" (formula "20") (term "1,0,0"))
         (rule "add_literals" (formula "20") (term "1,1,0"))
         (rule "less_literals" (formula "20") (term "0,0"))
          (builtin "One Step Simplification" (formula "20"))
         (rule "getOfSeqSub" (formula "21") (term "0"))
         (rule "castDel" (formula "21") (term "2,0"))
         (rule "add_literals" (formula "21") (term "1,1,0"))
         (rule "sub_literals" (formula "21") (term "1,1,0,0"))
         (rule "leq_literals" (formula "21") (term "0,0,0"))
          (builtin "One Step Simplification" (formula "21"))
         (rule "less_literals" (formula "21") (term "0,0"))
          (builtin "One Step Simplification" (formula "21"))
         (rule "getOfSeqSub" (formula "22") (term "0"))
         (rule "castDel" (formula "22") (term "2,0"))
         (rule "sub_literals" (formula "22") (term "1,1,0,0"))
         (rule "leq_literals" (formula "22") (term "0,0,0"))
          (builtin "One Step Simplification" (formula "22"))
         (rule "less_literals" (formula "22") (term "0,0"))
          (builtin "One Step Simplification" (formula "22"))
         (rule "add_literals" (formula "22") (term "1,0"))
         (rule "getOfSeqSub" (formula "20") (term "0"))
         (rule "castDel" (formula "20") (term "2,0"))
         (rule "sub_literals" (formula "20") (term "1,1,0,0"))
         (rule "add_literals" (formula "20") (term "1,1,0"))
         (rule "leq_literals" (formula "20") (term "0,0,0"))
          (builtin "One Step Simplification" (formula "20"))
         (rule "less_literals" (formula "20") (term "0,0"))
          (builtin "One Step Simplification" (formula "20"))
         (rule "getOfSeqSub" (formula "21") (term "0"))
         (rule "castDel" (formula "21") (term "2,0"))
         (rule "sub_literals" (formula "21") (term "1,1,0,0"))
         (rule "add_literals" (formula "21") (term "1,1,0"))
         (rule "leq_literals" (formula "21") (term "0,0,0"))
          (builtin "One Step Simplification" (formula "21"))
         (rule "less_literals" (formula "21") (term "0,0"))
          (builtin "One Step Simplification" (formula "21"))
         (rule "getOfSeqSub" (formula "22") (term "0"))
         (rule "castDel" (formula "22") (term "2,0"))
         (rule "leq_literals" (formula "22") (term "0,0,0"))
          (builtin "One Step Simplification" (formula "22"))
         (rule "add_literals" (formula "22") (term "1,1,0"))
         (rule "sub_literals" (formula "22") (term "1,0,0"))
         (rule "less_literals" (formula "22") (term "0,0"))
          (builtin "One Step Simplification" (formula "22"))
         (rule "getOfSeqSub" (formula "20") (term "0"))
         (rule "castDel" (formula "20") (term "2,0"))
         (rule "add_literals" (formula "20") (term "1,1,0"))
         (rule "leq_literals" (formula "20") (term "0,0,0"))
          (builtin "One Step Simplification" (formula "20"))
         (rule "sub_literals" (formula "20") (term "1,0,0"))
         (rule "less_literals" (formula "20") (term "0,0"))
          (builtin "One Step Simplification" (formula "20"))
         (rule "getOfSeqSub" (formula "21") (term "0"))
         (rule "castDel" (formula "21") (term "2,0"))
         (rule "add_literals" (formula "21") (term "1,1,0"))
         (rule "sub_literals" (formula "21") (term "1,1,0,0"))
         (rule "leq_literals" (formula "21") (term "0,0,0"))
          (builtin "One Step Simplification" (formula "21"))
         (rule "less_literals" (formula "21") (term "0,0"))
          (builtin "One Step Simplification" (formula "21"))
         (rule "getOfSeqSub" (formula "22") (term "0"))
         (rule "castDel" (formula "22") (term "2,0"))
         (rule "leq_literals" (formula "22") (term "0,0,0"))
          (builtin "One Step Simplification" (formula "22"))
         (rule "add_literals" (formula "22") (term "1,1,0"))
         (rule "sub_literals" (formula "22") (term "1,0,0"))
         (rule "less_literals" (formula "22") (term "0,0"))
          (builtin "One Step Simplification" (formula "22"))
         (rule "getOfSeqSub" (formula "20") (term "0"))
         (rule "castDel" (formula "20") (term "2,0"))
         (rule "add_literals" (formula "20") (term "1,1,0"))
         (rule "sub_literals" (formula "20") (term "1,1,0,0"))
         (rule "leq_literals" (formula "20") (term "0,0,0"))
          (builtin "One Step Simplification" (formula "20"))
         (rule "less_literals" (formula "20") (term "0,0"))
          (builtin "One Step Simplification" (formula "20"))
         (rule "getOfSeqSub" (formula "21") (term "0"))
         (rule "castDel" (formula "21") (term "2,0"))
         (rule "leq_literals" (formula "21") (term "0,0,0"))
          (builtin "One Step Simplification" (formula "21"))
         (rule "sub_literals" (formula "21") (term "1,0,0"))
         (rule "add_literals" (formula "21") (term "1,1,0"))
         (rule "less_literals" (formula "21") (term "0,0"))
          (builtin "One Step Simplification" (formula "21"))
         (rule "getOfSeqSub" (formula "22") (term "0"))
         (rule "castDel" (formula "22") (term "2,0"))
         (rule "leq_literals" (formula "22") (term "0,0,0"))
          (builtin "One Step Simplification" (formula "22"))
         (rule "sub_literals" (formula "22") (term "1,0,0"))
         (rule "add_literals" (formula "22") (term "1,1,0"))
         (rule "less_literals" (formula "22") (term "0,0"))
          (builtin "One Step Simplification" (formula "22"))
         (rule "getOfSeqSub" (formula "21") (term "0"))
         (rule "castDel" (formula "21") (term "2,0"))
         (rule "sub_literals" (formula "21") (term "1,1,0,0"))
         (rule "leq_literals" (formula "21") (term "0,0,0"))
          (builtin "One Step Simplification" (formula "21"))
         (rule "add_literals" (formula "21") (term "1,1,0"))
         (rule "less_literals" (formula "21") (term "0,0"))
          (builtin "One Step Simplification" (formula "21"))
         (rule "getOfSeqSub" (formula "22") (term "0"))
         (rule "castDel" (formula "22") (term "2,0"))
         (rule "leq_literals" (formula "22") (term "0,0,0"))
          (builtin "One Step Simplification" (formula "22"))
         (rule "sub_literals" (formula "22") (term "1,0,0"))
         (rule "add_literals" (formula "22") (term "1,1,0"))
         (rule "less_literals" (formula "22") (term "0,0"))
          (builtin "One Step Simplification" (formula "22"))
         (rule "getOfSeqSubEQ" (formula "20") (term "0") (ifseqformula "2"))
         (rule "castDel" (formula "20") (term "2,0"))
         (rule "add_literals" (formula "20") (term "1,1,0"))
         (rule "leq_literals" (formula "20") (term "0,0,0"))
          (builtin "One Step Simplification" (formula "20"))
         (rule "polySimp_elimSub" (formula "20") (term "1,0,0"))
         (rule "times_zero_2" (formula "20") (term "1,1,0,0"))
         (rule "add_zero_right" (formula "20") (term "1,0,0"))
         (rule "getOfSeqSub" (formula "21") (term "0"))
         (rule "castDel" (formula "21") (term "2,0"))
         (rule "leq_literals" (formula "21") (term "0,0,0"))
          (builtin "One Step Simplification" (formula "21"))
         (rule "sub_literals" (formula "21") (term "1,0,0"))
         (rule "add_literals" (formula "21") (term "1,1,0"))
         (rule "less_literals" (formula "21") (term "0,0"))
          (builtin "One Step Simplification" (formula "21"))
         (rule "getOfSeqSub" (formula "22") (term "0"))
         (rule "castDel" (formula "22") (term "2,0"))
         (rule "leq_literals" (formula "22") (term "0,0,0"))
          (builtin "One Step Simplification" (formula "22"))
         (rule "sub_literals" (formula "22") (term "1,0,0"))
         (rule "add_literals" (formula "22") (term "1,1,0"))
         (rule "less_literals" (formula "22") (term "0,0"))
          (builtin "One Step Simplification" (formula "22"))
         (rule "getOfSeqSub" (formula "21") (term "0"))
         (rule "castDel" (formula "21") (term "2,0"))
         (rule "add_literals" (formula "21") (term "1,1,0"))
         (rule "sub_literals" (formula "21") (term "1,1,0,0"))
         (rule "leq_literals" (formula "21") (term "0,0,0"))
          (builtin "One Step Simplification" (formula "21"))
         (rule "less_literals" (formula "21") (term "0,0"))
          (builtin "One Step Simplification" (formula "21"))
         (rule "getOfSeqSub" (formula "22") (term "0"))
         (rule "castDel" (formula "22") (term "2,0"))
         (rule "add_literals" (formula "22") (term "1,1,0"))
         (rule "sub_literals" (formula "22") (term "1,1,0,0"))
         (rule "leq_literals" (formula "22") (term "0,0,0"))
          (builtin "One Step Simplification" (formula "22"))
         (rule "less_literals" (formula "22") (term "0,0"))
          (builtin "One Step Simplification" (formula "22"))
         (rule "getOfSeqSub" (formula "21") (term "0"))
         (rule "castDel" (formula "21") (term "2,0"))
         (rule "sub_literals" (formula "21") (term "1,1,0,0"))
         (rule "leq_literals" (formula "21") (term "0,0,0"))
          (builtin "One Step Simplification" (formula "21"))
         (rule "add_literals" (formula "21") (term "1,1,0"))
         (rule "less_literals" (formula "21") (term "0,0"))
          (builtin "One Step Simplification" (formula "21"))
         (rule "getOfSeqSub" (formula "22") (term "0"))
         (rule "castDel" (formula "22") (term "2,0"))
         (rule "leq_literals" (formula "22") (term "0,0,0"))
          (builtin "One Step Simplification" (formula "22"))
         (rule "add_literals" (formula "22") (term "1,1,0"))
         (rule "sub_literals" (formula "22") (term "1,0,0"))
         (rule "less_literals" (formula "22") (term "0,0"))
          (builtin "One Step Simplification" (formula "22"))
         (rule "getOfSeqSub" (formula "21") (term "0"))
         (rule "castDel" (formula "21") (term "2,0"))
         (rule "sub_literals" (formula "21") (term "1,1,0,0"))
         (rule "add_zero_right" (formula "21") (term "1,1,0"))
         (rule "leq_literals" (formula "21") (term "0,0,0"))
          (builtin "One Step Simplification" (formula "21"))
         (rule "less_literals" (formula "21") (term "0,0"))
          (builtin "One Step Simplification" (formula "21"))
         (rule "getOfSeqSub" (formula "22") (term "0"))
         (rule "castDel" (formula "22") (term "2,0"))
         (rule "add_zero_right" (formula "22") (term "1,1,0"))
         (rule "leq_literals" (formula "22") (term "0,0,0"))
          (builtin "One Step Simplification" (formula "22"))
         (rule "sub_literals" (formula "22") (term "1,0,0"))
         (rule "less_literals" (formula "22") (term "0,0"))
          (builtin "One Step Simplification" (formula "22"))
         (rule "getOfSeqSubEQ" (formula "22") (term "0") (ifseqformula "2"))
         (rule "castDel" (formula "22") (term "2,0"))
         (rule "add_zero_right" (formula "22") (term "1,1,0"))
         (rule "leq_literals" (formula "22") (term "0,0,0"))
          (builtin "One Step Simplification" (formula "22"))
         (rule "polySimp_elimSub" (formula "22") (term "1,0,0"))
         (rule "times_zero_2" (formula "22") (term "1,1,0,0"))
         (rule "add_zero_right" (formula "22") (term "1,0,0"))
         (rule "getOfSeqSubEQ" (formula "21") (term "0") (ifseqformula "2"))
         (rule "castDel" (formula "21") (term "2,0"))
         (rule "add_zero_right" (formula "21") (term "1,1,0"))
         (rule "leq_literals" (formula "21") (term "0,0,0"))
          (builtin "One Step Simplification" (formula "21"))
         (rule "polySimp_elimSub" (formula "21") (term "1,0,0"))
         (rule "mul_literals" (formula "21") (term "1,1,0,0"))
         (rule "add_zero_right" (formula "21") (term "1,0,0"))
         (rule "hideAuxiliaryEqConcrete" (formula "11"))
         (rule "Class_invariant_axiom_for_org_apache_commons_csv_CSVParser" (formula "45"))
         (rule "true_left" (formula "45"))
         (rule "methodCallEmpty" (formula "72") (term "1"))
         (rule "lenNonNegative" (formula "32") (term "1"))
         (rule "inEqSimp_commuteLeq" (formula "32"))
         (rule "seqGetAlphaCast" (formula "40") (term "0"))
         (rule "castedGetAny" (formula "40") (term "0"))
          (builtin "One Step Simplification" (formula "40"))
         (rule "true_left" (formula "40"))
         (rule "seqGetAlphaCast" (formula "34") (term "0"))
         (rule "castedGetAny" (formula "34") (term "0"))
          (builtin "One Step Simplification" (formula "34"))
         (rule "true_left" (formula "34"))
         (rule "lenNonNegative" (formula "36") (term "1,0,0,0"))
         (rule "inEqSimp_commuteLeq" (formula "36"))
         (rule "onlyCreatedObjectsAreReferenced" (formula "50") (term "0") (ifseqformula "25"))
         (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "51"))
          (builtin "One Step Simplification" (formula "1"))
         (rule "onlyCreatedObjectsAreReferenced" (formula "41") (term "1,0,1") (ifseqformula "26"))
         (rule "replace_known_right" (formula "41") (term "0") (ifseqformula "66"))
          (builtin "One Step Simplification" (formula "41"))
         (rule "onlyCreatedObjectsAreReferenced" (formula "53") (term "0") (ifseqformula "26"))
         (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "54"))
          (builtin "One Step Simplification" (formula "1"))
         (rule "onlyCreatedObjectsAreReferenced" (formula "69") (term "0") (ifseqformula "27"))
         (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "70"))
          (builtin "One Step Simplification" (formula "1"))
         (rule "onlyCreatedObjectsAreReferenced" (formula "71") (term "0") (ifseqformula "28"))
         (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "72"))
          (builtin "One Step Simplification" (formula "1"))
         (rule "onlyCreatedObjectsAreReferenced" (formula "74") (term "0") (ifseqformula "29"))
         (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "75"))
          (builtin "One Step Simplification" (formula "1"))
         (rule "onlyCreatedObjectsAreReferenced" (formula "74") (term "0") (ifseqformula "30"))
         (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "75"))
          (builtin "One Step Simplification" (formula "1"))
         (rule "onlyCreatedObjectsAreReferenced" (formula "77") (term "0") (ifseqformula "31"))
         (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "78"))
          (builtin "One Step Simplification" (formula "1"))
         (rule "onlyCreatedObjectsAreReferenced" (formula "36") (term "1") (ifseqformula "32"))
         (rule "onlyCreatedObjectsAreReferenced" (formula "65") (term "0") (ifseqformula "32"))
         (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "66"))
          (builtin "One Step Simplification" (formula "1"))
         (rule "onlyCreatedObjectsAreReferenced" (formula "67") (term "0") (ifseqformula "33"))
         (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "68"))
          (builtin "One Step Simplification" (formula "1"))
         (rule "onlyCreatedObjectsAreReferenced" (formula "52") (term "1") (ifseqformula "34"))
         (rule "replace_known_right" (formula "52") (term "0") (ifseqformula "72"))
          (builtin "One Step Simplification" (formula "52"))
         (rule "onlyCreatedObjectsAreReferenced" (formula "64") (term "0") (ifseqformula "34"))
         (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "65"))
          (builtin "One Step Simplification" (formula "1"))
         (rule "onlyCreatedObjectsAreReferenced" (formula "74") (term "0") (ifseqformula "35"))
         (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "75"))
          (builtin "One Step Simplification" (formula "1"))
         (rule "onlyCreatedObjectsAreReferenced" (formula "72") (term "0") (ifseqformula "36"))
         (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "73"))
          (builtin "One Step Simplification" (formula "1"))
         (rule "onlyCreatedObjectsAreReferenced" (formula "74") (term "0") (ifseqformula "37"))
         (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "75"))
          (builtin "One Step Simplification" (formula "1"))
         (rule "onlyCreatedObjectsAreReferenced" (formula "81") (term "0") (ifseqformula "38"))
         (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "82"))
          (builtin "One Step Simplification" (formula "1"))
         (rule "onlyCreatedObjectsAreReferenced" (formula "79") (term "0") (ifseqformula "39"))
         (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "80"))
          (builtin "One Step Simplification" (formula "1"))
         (rule "onlyCreatedObjectsAreReferenced" (formula "81") (term "0") (ifseqformula "40"))
         (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "82"))
          (builtin "One Step Simplification" (formula "1"))
         (rule "charLiteral_to_int" (formula "28") (term "1"))
         (rule "ifEqualsInteger" (formula "28"))
         (rule "lenNonNegative" (formula "38") (term "2,0"))
         (rule "inEqSimp_commuteLeq" (formula "38"))
         (rule "equalityToSeqGetAndSeqLenLeft" (formula "39") (inst "iv=iv"))
         (rule "andLeft" (formula "39"))
         (rule "lenOfSeqSub" (formula "39") (term "0"))
         (rule "polySimp_elimSub" (formula "39") (term "1,0"))
         (rule "mul_literals" (formula "39") (term "1,1,0"))
         (rule "polySimp_addComm0" (formula "39") (term "1,0"))
         (rule "lenOfSeqSubEQ" (formula "39") (term "1") (ifseqformula "41"))
         (rule "eqSymm" (formula "39"))
         (rule "polySimp_elimSub" (formula "39") (term "1,0"))
         (rule "mul_literals" (formula "39") (term "1,1,0"))
         (rule "polySimp_addComm0" (formula "39") (term "1,0"))
          (builtin "One Step Simplification" (formula "39"))
         (rule "true_left" (formula "39"))
         (rule "lenOfSeqSub" (formula "39") (term "1,1,0,0"))
         (rule "polySimp_elimSub" (formula "39") (term "1,1,1,0,0"))
         (rule "mul_literals" (formula "39") (term "1,1,1,1,0,0"))
         (rule "polySimp_addComm0" (formula "39") (term "1,1,1,0,0"))
         (rule "inEqSimp_commuteLeq" (formula "39") (term "0,0,0"))
         (rule "getOfSeqSub" (formula "39") (term "0,1,0"))
         (rule "castDel" (formula "39") (term "2,0,1,0"))
         (rule "polySimp_elimSub" (formula "39") (term "1,1,0,0,1,0"))
         (rule "mul_literals" (formula "39") (term "1,1,1,0,0,1,0"))
         (rule "polySimp_addComm0" (formula "39") (term "1,1,0,1,0"))
         (rule "polySimp_addComm0" (formula "39") (term "1,1,0,0,1,0"))
         (rule "inEqSimp_commuteLeq" (formula "39") (term "0,0,0,1,0"))
         (rule "getOfSeqSubEQ" (formula "39") (term "1,1,0") (ifseqformula "40"))
         (rule "castDel" (formula "39") (term "2,1,1,0"))
         (rule "eqSymm" (formula "39") (term "1,0"))
         (rule "polySimp_elimSub" (formula "39") (term "1,1,0,0,1,0"))
         (rule "mul_literals" (formula "39") (term "1,1,1,0,0,1,0"))
         (rule "polySimp_addComm0" (formula "39") (term "1,1,0,1,0"))
         (rule "polySimp_addComm0" (formula "39") (term "1,1,0,0,1,0"))
         (rule "inEqSimp_commuteLeq" (formula "39") (term "0,0,0,1,0"))
          (builtin "One Step Simplification" (formula "39"))
         (rule "true_left" (formula "39"))
         (rule "equalityToSeqGetAndSeqLenLeft" (formula "18") (inst "iv=iv"))
         (rule "andLeft" (formula "18"))
         (rule "lenOfSeqSub" (formula "18") (term "0"))
         (rule "polySimp_elimSub" (formula "18") (term "1,0"))
         (rule "times_zero_2" (formula "18") (term "1,1,0"))
         (rule "add_zero_right" (formula "18") (term "1,0"))
          (builtin "One Step Simplification" (formula "18"))
         (rule "eqSymm" (formula "18") (term "1"))
         (rule "lenOfSeqSub" (formula "19") (term "1,1,0,0"))
         (rule "polySimp_elimSub" (formula "19") (term "1,1,1,0,0"))
         (rule "mul_literals" (formula "19") (term "1,1,1,1,0,0"))
         (rule "add_zero_right" (formula "19") (term "1,1,1,0,0"))
         (rule "inEqSimp_commuteLeq" (formula "19") (term "0,0,0"))
         (rule "applyEqRigid" (formula "19") (term "0,0,1,0") (ifseqformula "20"))
          (builtin "One Step Simplification" (formula "19"))
         (rule "true_left" (formula "19"))
         (rule "charLiteral_to_int" (formula "21") (term "1"))
         (rule "lenNonNegative" (formula "17") (term "0"))
         (rule "inEqSimp_commuteLeq" (formula "17"))
         (rule "applyEqRigid" (formula "17") (term "0") (ifseqformula "18"))
         (rule "charLiteral_to_int" (formula "31") (term "1"))
         (rule "ifEqualsInteger" (formula "31"))
         (rule "charLiteral_to_int" (formula "23") (term "1"))
         (rule "seqGetAlphaCast" (formula "22") (term "0"))
         (rule "castDel" (formula "22") (term "0"))
          (builtin "One Step Simplification" (formula "22"))
         (rule "true_left" (formula "22"))
         (rule "charLiteral_to_int" (formula "32") (term "1"))
         (rule "ifEqualsInteger" (formula "32"))
         (rule "charLiteral_to_int" (formula "24") (term "1"))
         (rule "seqGetAlphaCast" (formula "23") (term "0"))
         (rule "castDel" (formula "23") (term "0"))
          (builtin "One Step Simplification" (formula "23"))
         (rule "true_left" (formula "23"))
         (rule "seqGetAlphaCast" (formula "24") (term "0"))
         (rule "castDel" (formula "24") (term "0"))
          (builtin "One Step Simplification" (formula "24"))
         (rule "true_left" (formula "24"))
         (rule "charLiteral_to_int" (formula "25") (term "1"))
         (rule "charLiteral_to_int" (formula "33") (term "1"))
         (rule "ifEqualsInteger" (formula "33"))
         (rule "charLiteral_to_int" (formula "26") (term "1"))
         (rule "charLiteral_to_int" (formula "27") (term "1"))
         (rule "charLiteral_to_int" (formula "34") (term "1"))
         (rule "ifEqualsInteger" (formula "34"))
         (rule "seqGetAlphaCast" (formula "25") (term "0"))
         (rule "castDel" (formula "25") (term "0"))
          (builtin "One Step Simplification" (formula "25"))
         (rule "true_left" (formula "25"))
         (rule "charLiteral_to_int" (formula "35") (term "1"))
         (rule "ifEqualsInteger" (formula "35"))
         (rule "seqGetAlphaCast" (formula "26") (term "0"))
         (rule "castDel" (formula "26") (term "0"))
          (builtin "One Step Simplification" (formula "26"))
         (rule "true_left" (formula "26"))
         (rule "seqGetAlphaCast" (formula "27") (term "0"))
         (rule "castDel" (formula "27") (term "0"))
          (builtin "One Step Simplification" (formula "27"))
         (rule "true_left" (formula "27"))
         (rule "charLiteral_to_int" (formula "36") (term "1"))
         (rule "ifEqualsInteger" (formula "36"))
         (rule "charLiteral_to_int" (formula "37") (term "1"))
         (rule "ifEqualsInteger" (formula "37"))
         (rule "commute_and" (formula "30") (term "0"))
         (rule "commute_and" (formula "30") (term "1"))
         (rule "charLiteral_to_int" (formula "39") (term "1"))
         (rule "ifEqualsInteger" (formula "39"))
         (rule "charLiteral_to_int" (formula "38") (term "1"))
         (rule "ifEqualsInteger" (formula "38"))
         (rule "tryEmpty" (formula "96") (term "1"))
         (rule "commute_and" (formula "31") (term "0"))
         (rule "commute_and" (formula "31") (term "1"))
         (rule "commute_and" (formula "32") (term "0"))
         (rule "commute_and" (formula "32") (term "1"))
         (rule "commute_and" (formula "33") (term "1"))
         (rule "commute_and" (formula "33") (term "0"))
         (rule "commute_and" (formula "34") (term "0"))
         (rule "commute_and" (formula "34") (term "1"))
         (rule "commute_and" (formula "35") (term "0"))
         (rule "commute_and" (formula "35") (term "1"))
         (rule "commute_and" (formula "36") (term "1"))
         (rule "commute_and" (formula "36") (term "0"))
         (rule "commute_and" (formula "37") (term "0"))
         (rule "commute_and" (formula "37") (term "1"))
         (rule "commute_and" (formula "39") (term "0"))
         (rule "commute_and" (formula "39") (term "1"))
         (rule "commute_and" (formula "38") (term "1"))
         (rule "commute_and" (formula "38") (term "0"))
         (rule "cnf_rightDist" (formula "30"))
         (rule "andLeft" (formula "30"))
         (rule "commute_or" (formula "30"))
         (rule "cnf_rightDist" (formula "32"))
         (rule "andLeft" (formula "32"))
         (rule "commute_or" (formula "32"))
         (rule "cnf_rightDist" (formula "34"))
         (rule "andLeft" (formula "34"))
         (rule "commute_or" (formula "34"))
         (rule "cnf_rightDist" (formula "31"))
          (builtin "One Step Simplification" (formula "31"))
         (rule "commute_or" (formula "31"))
         (rule "cnf_rightDist" (formula "36"))
         (rule "andLeft" (formula "36"))
         (rule "commute_or" (formula "36"))
         (rule "cnf_rightDist" (formula "30"))
         (rule "andLeft" (formula "30"))
         (rule "commute_or" (formula "31"))
         (rule "cnf_rightDist" (formula "39"))
         (rule "andLeft" (formula "39"))
         (rule "commute_or" (formula "39"))
         (rule "cnf_rightDist" (formula "34"))
          (builtin "One Step Simplification" (formula "34"))
         (rule "commute_or" (formula "34"))
         (rule "cnf_rightDist" (formula "33"))
         (rule "andLeft" (formula "33"))
         (rule "commute_or" (formula "34"))
         (rule "cnf_rightDist" (formula "42"))
         (rule "andLeft" (formula "42"))
         (rule "commute_or" (formula "42"))
         (rule "cnf_rightDist" (formula "37"))
          (builtin "One Step Simplification" (formula "37"))
         (rule "commute_or" (formula "37"))
         (rule "cnf_rightDist" (formula "36"))
         (rule "andLeft" (formula "36"))
         (rule "commute_or" (formula "37"))
         (rule "cnf_rightDist" (formula "45"))
         (rule "andLeft" (formula "45"))
         (rule "commute_or" (formula "45"))
         (rule "cnf_rightDist" (formula "47"))
         (rule "andLeft" (formula "47"))
         (rule "commute_or" (formula "47"))
         (rule "cnf_rightDist" (formula "50"))
         (rule "andLeft" (formula "50"))
         (rule "commute_or" (formula "50"))
         (rule "cnf_rightDist" (formula "40"))
          (builtin "One Step Simplification" (formula "40"))
         (rule "commute_or" (formula "40"))
         (rule "cnf_rightDist" (formula "49"))
         (rule "andLeft" (formula "49"))
         (rule "commute_or" (formula "49"))
         (rule "cnf_rightDist" (formula "39"))
         (rule "andLeft" (formula "39"))
         (rule "commute_or" (formula "40"))
         (rule "cnf_rightDist" (formula "43"))
          (builtin "One Step Simplification" (formula "43"))
         (rule "commute_or" (formula "43"))
         (rule "cnf_rightDist" (formula "42"))
         (rule "andLeft" (formula "42"))
         (rule "commute_or" (formula "43"))
         (rule "cnf_rightDist" (formula "46"))
          (builtin "One Step Simplification" (formula "46"))
         (rule "commute_or" (formula "46"))
         (rule "cnf_rightDist" (formula "45"))
         (rule "andLeft" (formula "45"))
         (rule "commute_or" (formula "46"))
         (rule "cnf_rightDist" (formula "49"))
          (builtin "One Step Simplification" (formula "49"))
         (rule "commute_or" (formula "49"))
         (rule "cnf_rightDist" (formula "48"))
         (rule "andLeft" (formula "48"))
         (rule "commute_or" (formula "49"))
         (rule "cnf_rightDist" (formula "52"))
          (builtin "One Step Simplification" (formula "52"))
         (rule "commute_or" (formula "52"))
         (rule "cnf_rightDist" (formula "51"))
         (rule "andLeft" (formula "51"))
         (rule "commute_or" (formula "52"))
         (rule "cnf_rightDist" (formula "57"))
          (builtin "One Step Simplification" (formula "57"))
         (rule "commute_or" (formula "57"))
         (rule "cnf_rightDist" (formula "56"))
         (rule "andLeft" (formula "56"))
         (rule "commute_or" (formula "57"))
         (rule "cnf_rightDist" (formula "55"))
          (builtin "One Step Simplification" (formula "55"))
         (rule "commute_or" (formula "55"))
         (rule "cnf_rightDist" (formula "54"))
         (rule "andLeft" (formula "54"))
         (rule "commute_or" (formula "55"))
         (rule "emptyModality" (formula "116") (term "1"))
          (builtin "One Step Simplification" (formula "116"))
         (rule "andRight" (formula "116") (userinteraction))
         (branch "Case 1"
            (rule "notRight" (formula "116"))
            (rule "polySimp_homoEq" (formula "30"))
            (rule "polySimp_addComm1" (formula "30") (term "0"))
            (rule "inEqSimp_ltToLeq" (formula "20") (term "0"))
            (rule "add_zero_right" (formula "20") (term "0,0"))
            (rule "polySimp_mulComm0" (formula "20") (term "1,0,0"))
            (rule "inEqSimp_ltToLeq" (formula "60") (term "0,1"))
            (rule "polySimp_mulComm0" (formula "60") (term "1,0,0,0,1"))
            (rule "polySimp_addComm1" (formula "60") (term "0,0,1"))
            (rule "add_literals" (formula "60") (term "0,0,0,1"))
            (rule "inEqSimp_ltToLeq" (formula "42") (term "0,1"))
            (rule "polySimp_mulComm0" (formula "42") (term "1,0,0,0,1"))
            (rule "polySimp_addComm1" (formula "42") (term "0,0,1"))
            (rule "add_literals" (formula "42") (term "0,0,0,1"))
            (rule "inEqSimp_ltToLeq" (formula "50") (term "1"))
            (rule "polySimp_mulComm0" (formula "50") (term "1,0,0,1"))
            (rule "polySimp_addComm1" (formula "50") (term "0,1"))
            (rule "add_literals" (formula "50") (term "0,0,1"))
            (rule "inEqSimp_ltToLeq" (formula "38") (term "1"))
            (rule "polySimp_mulComm0" (formula "38") (term "1,0,0,1"))
            (rule "polySimp_addComm1" (formula "38") (term "0,1"))
            (rule "add_literals" (formula "38") (term "0,0,1"))
            (rule "inEqSimp_ltToLeq" (formula "59") (term "1"))
            (rule "polySimp_mulComm0" (formula "59") (term "1,0,0,1"))
            (rule "polySimp_addComm1" (formula "59") (term "0,1"))
            (rule "add_literals" (formula "59") (term "0,0,1"))
            (rule "inEqSimp_ltToLeq" (formula "35") (term "1"))
            (rule "polySimp_mulComm0" (formula "35") (term "1,0,0,1"))
            (rule "polySimp_addComm1" (formula "35") (term "0,1"))
            (rule "add_literals" (formula "35") (term "0,0,1"))
            (rule "inEqSimp_ltToLeq" (formula "74"))
            (rule "polySimp_mulComm0" (formula "74") (term "1,0,0"))
            (rule "polySimp_addComm1" (formula "74") (term "0"))
            (rule "inEqSimp_ltToLeq" (formula "45") (term "0,1"))
            (rule "polySimp_mulComm0" (formula "45") (term "1,0,0,0,1"))
            (rule "polySimp_addComm1" (formula "45") (term "0,0,1"))
            (rule "add_literals" (formula "45") (term "0,0,0,1"))
            (rule "inEqSimp_ltToLeq" (formula "82"))
            (rule "polySimp_mulComm0" (formula "82") (term "1,0,0"))
            (rule "polySimp_addComm1" (formula "82") (term "0"))
            (rule "inEqSimp_ltToLeq" (formula "56") (term "1"))
            (rule "polySimp_mulComm0" (formula "56") (term "1,0,0,1"))
            (rule "polySimp_addComm1" (formula "56") (term "0,1"))
            (rule "add_literals" (formula "56") (term "0,0,1"))
            (rule "inEqSimp_ltToLeq" (formula "41") (term "1"))
            (rule "polySimp_mulComm0" (formula "41") (term "1,0,0,1"))
            (rule "polySimp_addComm1" (formula "41") (term "0,1"))
            (rule "add_literals" (formula "41") (term "0,0,1"))
            (rule "inEqSimp_ltToLeq" (formula "22"))
            (rule "polySimp_rightDist" (formula "22") (term "1,0,0"))
            (rule "mul_literals" (formula "22") (term "0,1,0,0"))
            (rule "inEqSimp_ltToLeq" (formula "57") (term "0,1"))
            (rule "polySimp_mulComm0" (formula "57") (term "1,0,0,0,1"))
            (rule "polySimp_addComm1" (formula "57") (term "0,0,1"))
            (rule "add_literals" (formula "57") (term "0,0,0,1"))
            (rule "inEqSimp_ltToLeq" (formula "76") (term "0,0,0"))
            (rule "polySimp_mulComm0" (formula "76") (term "1,0,0,0,0,0"))
            (rule "inEqSimp_ltToLeq" (formula "71") (term "0,0,0"))
            (rule "polySimp_mulComm0" (formula "71") (term "1,0,0,0,0,0"))
            (rule "inEqSimp_ltToLeq" (formula "39") (term "0,1"))
            (rule "polySimp_mulComm0" (formula "39") (term "1,0,0,0,1"))
            (rule "polySimp_addComm1" (formula "39") (term "0,0,1"))
            (rule "add_literals" (formula "39") (term "0,0,0,1"))
            (rule "inEqSimp_ltToLeq" (formula "48") (term "0,1"))
            (rule "polySimp_mulComm0" (formula "48") (term "1,0,0,0,1"))
            (rule "polySimp_addComm1" (formula "48") (term "0,0,1"))
            (rule "add_literals" (formula "48") (term "0,0,0,1"))
            (rule "inEqSimp_ltToLeq" (formula "51") (term "0,1"))
            (rule "polySimp_mulComm0" (formula "51") (term "1,0,0,0,1"))
            (rule "polySimp_addComm1" (formula "51") (term "0,0,1"))
            (rule "add_literals" (formula "51") (term "0,0,0,1"))
            (rule "inEqSimp_ltToLeq" (formula "44") (term "1"))
            (rule "polySimp_mulComm0" (formula "44") (term "1,0,0,1"))
            (rule "polySimp_addComm1" (formula "44") (term "0,1"))
            (rule "add_literals" (formula "44") (term "0,0,1"))
            (rule "inEqSimp_ltToLeq" (formula "54") (term "0,1"))
            (rule "polySimp_mulComm0" (formula "54") (term "1,0,0,0,1"))
            (rule "polySimp_addComm1" (formula "54") (term "0,0,1"))
            (rule "add_literals" (formula "54") (term "0,0,0,1"))
            (rule "inEqSimp_ltToLeq" (formula "47") (term "1"))
            (rule "polySimp_mulComm0" (formula "47") (term "1,0,0,1"))
            (rule "inEqSimp_ltToLeq" (formula "36") (term "0,1"))
            (rule "polySimp_mulComm0" (formula "36") (term "1,0,0,0,1"))
            (rule "inEqSimp_ltToLeq" (formula "33") (term "0,1"))
            (rule "add_zero_right" (formula "33") (term "0,0,1"))
            (rule "polySimp_mulComm0" (formula "33") (term "1,0,0,1"))
            (rule "inEqSimp_ltToLeq" (formula "32") (term "1"))
            (rule "add_zero_right" (formula "32") (term "0,1"))
            (rule "polySimp_mulComm0" (formula "32") (term "1,0,1"))
            (rule "inEqSimp_ltToLeq" (formula "53") (term "1"))
            (rule "polySimp_mulComm0" (formula "53") (term "1,0,0,1"))
            (rule "inEqSimp_ltToLeq" (formula "78") (term "0,0,0"))
            (rule "polySimp_mulComm0" (formula "78") (term "1,0,0,0,0,0"))
            (rule "polySimp_addComm1" (formula "47") (term "0,1"))
            (rule "add_literals" (formula "47") (term "0,0,1"))
            (rule "inEqSimp_ltToLeq" (formula "30") (term "0,1,0"))
            (rule "polySimp_mulComm0" (formula "30") (term "1,0,0,0,1,0"))
            (rule "polySimp_addComm1" (formula "36") (term "0,0,1"))
            (rule "add_literals" (formula "36") (term "0,0,0,1"))
            (rule "polySimp_addComm1" (formula "53") (term "0,1"))
            (rule "add_literals" (formula "53") (term "0,0,1"))
            (rule "polySimp_addComm1" (formula "30") (term "0,0,1,0"))
            (rule "add_literals" (formula "30") (term "0,0,0,1,0"))
            (rule "polySimp_addAssoc" (formula "22") (term "0,0"))
            (rule "add_literals" (formula "22") (term "0,0,0"))
            (rule "polySimp_pullOutFactor2b" (formula "22") (term "0"))
            (rule "add_literals" (formula "22") (term "1,1,0"))
            (rule "times_zero_1" (formula "22") (term "1,0"))
            (rule "add_literals" (formula "22") (term "0"))
            (rule "leq_literals" (formula "22"))
            (rule "true_left" (formula "22"))
            (rule "applyEq" (formula "10") (term "1,0") (ifseqformula "69"))
            (rule "replace_known_left" (formula "68") (term "1") (ifseqformula "10"))
             (builtin "One Step Simplification" (formula "68"))
            (rule "true_left" (formula "68"))
            (rule "applyEq" (formula "97") (term "0") (ifseqformula "68"))
            (rule "jmod_axiom" (formula "63") (term "0"))
            (rule "polySimp_mulLiterals" (formula "63") (term "1,0"))
            (rule "polySimp_sepPosMonomial" (formula "29"))
            (rule "polySimp_mulComm0" (formula "29") (term "1"))
            (rule "polySimp_rightDist" (formula "29") (term "1"))
            (rule "polySimp_mulLiterals" (formula "29") (term "1,1"))
            (rule "mul_literals" (formula "29") (term "0,1"))
            (rule "polySimp_elimOne" (formula "29") (term "1,1"))
             (builtin "One Step Simplification" (formula "29"))
            (rule "polySimp_homoEq" (formula "29") (term "1"))
            (rule "mul_literals" (formula "29") (term "1,0,1"))
            (rule "add_zero_right" (formula "29") (term "0,1"))
            (rule "polySimp_sepNegMonomial" (formula "63"))
            (rule "polySimp_mulLiterals" (formula "63") (term "0"))
            (rule "polySimp_sepPosMonomial" (formula "29") (term "1"))
            (rule "mul_literals" (formula "29") (term "1,1"))
            (rule "inEqSimp_sepPosMonomial1" (formula "18"))
            (rule "mul_literals" (formula "18") (term "1"))
            (rule "inEqSimp_sepNegMonomial0" (formula "20") (term "0"))
            (rule "polySimp_mulLiterals" (formula "20") (term "0,0"))
            (rule "polySimp_elimOne" (formula "20") (term "0,0"))
            (rule "inEqSimp_sepNegMonomial0" (formula "59") (term "0,1"))
            (rule "polySimp_mulLiterals" (formula "59") (term "0,0,1"))
            (rule "polySimp_elimOne" (formula "59") (term "0,0,1"))
            (rule "inEqSimp_sepNegMonomial0" (formula "41") (term "0,1"))
            (rule "polySimp_mulLiterals" (formula "41") (term "0,0,1"))
            (rule "polySimp_elimOne" (formula "41") (term "0,0,1"))
            (rule "inEqSimp_sepNegMonomial0" (formula "49") (term "1"))
            (rule "polySimp_mulLiterals" (formula "49") (term "0,1"))
            (rule "polySimp_elimOne" (formula "49") (term "0,1"))
            (rule "inEqSimp_sepNegMonomial0" (formula "37") (term "1"))
            (rule "polySimp_mulLiterals" (formula "37") (term "0,1"))
            (rule "polySimp_elimOne" (formula "37") (term "0,1"))
            (rule "inEqSimp_sepNegMonomial0" (formula "58") (term "1"))
            (rule "polySimp_mulLiterals" (formula "58") (term "0,1"))
            (rule "polySimp_elimOne" (formula "58") (term "0,1"))
            (rule "inEqSimp_sepNegMonomial0" (formula "34") (term "1"))
            (rule "polySimp_mulLiterals" (formula "34") (term "0,1"))
            (rule "polySimp_elimOne" (formula "34") (term "0,1"))
            (rule "inEqSimp_sepNegMonomial0" (formula "72"))
            (rule "polySimp_mulLiterals" (formula "72") (term "0"))
            (rule "polySimp_elimOne" (formula "72") (term "0"))
            (rule "inEqSimp_sepNegMonomial0" (formula "44") (term "0,1"))
            (rule "polySimp_mulLiterals" (formula "44") (term "0,0,1"))
            (rule "polySimp_elimOne" (formula "44") (term "0,0,1"))
            (rule "inEqSimp_sepNegMonomial0" (formula "80"))
            (rule "polySimp_mulLiterals" (formula "80") (term "0"))
            (rule "polySimp_elimOne" (formula "80") (term "0"))
            (rule "inEqSimp_sepNegMonomial0" (formula "55") (term "1"))
            (rule "polySimp_mulLiterals" (formula "55") (term "0,1"))
            (rule "polySimp_elimOne" (formula "55") (term "0,1"))
            (rule "inEqSimp_sepNegMonomial0" (formula "40") (term "1"))
            (rule "polySimp_mulLiterals" (formula "40") (term "0,1"))
            (rule "polySimp_elimOne" (formula "40") (term "0,1"))
            (rule "inEqSimp_sepNegMonomial0" (formula "56") (term "0,1"))
            (rule "polySimp_mulLiterals" (formula "56") (term "0,0,1"))
            (rule "polySimp_elimOne" (formula "56") (term "0,0,1"))
            (rule "inEqSimp_sepPosMonomial0" (formula "74") (term "0,0,0"))
            (rule "polySimp_mulComm0" (formula "74") (term "1,0,0,0"))
            (rule "polySimp_rightDist" (formula "74") (term "1,0,0,0"))
            (rule "polySimp_mulLiterals" (formula "74") (term "1,1,0,0,0"))
            (rule "mul_literals" (formula "74") (term "0,1,0,0,0"))
            (rule "polySimp_elimOne" (formula "74") (term "1,1,0,0,0"))
            (rule "inEqSimp_sepPosMonomial0" (formula "69") (term "0,0,0"))
            (rule "polySimp_mulComm0" (formula "69") (term "1,0,0,0"))
            (rule "polySimp_rightDist" (formula "69") (term "1,0,0,0"))
            (rule "polySimp_mulLiterals" (formula "69") (term "1,1,0,0,0"))
            (rule "mul_literals" (formula "69") (term "0,1,0,0,0"))
            (rule "polySimp_elimOne" (formula "69") (term "1,1,0,0,0"))
            (rule "inEqSimp_sepNegMonomial0" (formula "38") (term "0,1"))
            (rule "polySimp_mulLiterals" (formula "38") (term "0,0,1"))
            (rule "polySimp_elimOne" (formula "38") (term "0,0,1"))
            (rule "inEqSimp_sepNegMonomial0" (formula "47") (term "0,1"))
            (rule "polySimp_mulLiterals" (formula "47") (term "0,0,1"))
            (rule "polySimp_elimOne" (formula "47") (term "0,0,1"))
            (rule "inEqSimp_sepNegMonomial0" (formula "50") (term "0,1"))
            (rule "polySimp_mulLiterals" (formula "50") (term "0,0,1"))
            (rule "polySimp_elimOne" (formula "50") (term "0,0,1"))
            (rule "inEqSimp_sepNegMonomial0" (formula "43") (term "1"))
            (rule "polySimp_mulLiterals" (formula "43") (term "0,1"))
            (rule "polySimp_elimOne" (formula "43") (term "0,1"))
            (rule "inEqSimp_sepNegMonomial0" (formula "53") (term "0,1"))
            (rule "polySimp_mulLiterals" (formula "53") (term "0,0,1"))
            (rule "polySimp_elimOne" (formula "53") (term "0,0,1"))
            (rule "inEqSimp_sepNegMonomial0" (formula "32") (term "0,1"))
            (rule "polySimp_mulLiterals" (formula "32") (term "0,0,1"))
            (rule "polySimp_elimOne" (formula "32") (term "0,0,1"))
            (rule "inEqSimp_sepNegMonomial0" (formula "31") (term "1"))
            (rule "polySimp_mulLiterals" (formula "31") (term "0,1"))
            (rule "polySimp_elimOne" (formula "31") (term "0,1"))
            (rule "inEqSimp_sepPosMonomial0" (formula "76") (term "0,0,0"))
            (rule "polySimp_mulComm0" (formula "76") (term "1,0,0,0"))
            (rule "polySimp_rightDist" (formula "76") (term "1,0,0,0"))
            (rule "mul_literals" (formula "76") (term "0,1,0,0,0"))
            (rule "polySimp_mulLiterals" (formula "76") (term "1,1,0,0,0"))
            (rule "polySimp_elimOne" (formula "76") (term "1,1,0,0,0"))
            (rule "inEqSimp_sepNegMonomial0" (formula "46") (term "1"))
            (rule "polySimp_mulLiterals" (formula "46") (term "0,1"))
            (rule "polySimp_elimOne" (formula "46") (term "0,1"))
            (rule "inEqSimp_sepNegMonomial0" (formula "35") (term "0,1"))
            (rule "polySimp_mulLiterals" (formula "35") (term "0,0,1"))
            (rule "polySimp_elimOne" (formula "35") (term "0,0,1"))
            (rule "inEqSimp_sepNegMonomial0" (formula "52") (term "1"))
            (rule "polySimp_mulLiterals" (formula "52") (term "0,1"))
            (rule "polySimp_elimOne" (formula "52") (term "0,1"))
            (rule "inEqSimp_sepNegMonomial0" (formula "29") (term "0"))
            (rule "polySimp_mulLiterals" (formula "29") (term "0,0"))
            (rule "polySimp_elimOne" (formula "29") (term "0,0"))
            (rule "inEqSimp_subsumption1" (formula "18") (ifseqformula "60"))
            (rule "leq_literals" (formula "18") (term "0"))
             (builtin "One Step Simplification" (formula "18"))
            (rule "true_left" (formula "18"))
            (rule "pullOutSelect" (formula "1") (term "0") (inst "selectSK=de_polyas_core3_open_cred_CredTool_print_0"))
            (rule "simplifySelectOfStore" (formula "1"))
             (builtin "One Step Simplification" (formula "1"))
            (rule "castDel" (formula "1") (term "0"))
            (rule "applyEqReverse" (formula "2") (term "0") (ifseqformula "1"))
            (rule "close" (formula "114") (ifseqformula "2"))
         )
         (branch "Case 2"
            (rule "allRight" (formula "116") (inst "sk=f_0"))
            (rule "allRight" (formula "116") (inst "sk=o_0"))
            (rule "orRight" (formula "116"))
            (rule "orRight" (formula "116"))
            (rule "selectOfStore" (formula "118") (term "1"))
             (builtin "One Step Simplification" (formula "118"))
            (rule "castDel" (formula "118") (term "1,1"))
            (rule "selectOfCreate" (formula "118") (term "2,1"))
            (rule "castDel" (formula "118") (term "1,2,1"))
            (rule "selectOfCreate" (formula "118") (term "2,2,1"))
            (rule "castDel" (formula "118") (term "1,2,2,1"))
            (rule "ifthenelse_split" (formula "118") (term "1"))
            (branch " null = o_0 ∧ de.polyas.core3.open.cred.CredTool::$print = f_0 TRUE"
               (rule "andLeft" (formula "1"))
               (rule "eqSymm" (formula "2"))
               (rule "eqSymm" (formula "1"))
               (rule "replace_known_left" (formula "118") (term "1") (ifseqformula "2"))
                (builtin "One Step Simplification" (formula "118") (ifInst ""  (formula "1")))
               (rule "closeTrue" (formula "118"))
            )
            (branch " null = o_0 ∧ de.polyas.core3.open.cred.CredTool::$print = f_0 FALSE"
               (rule "ifthenelse_split" (formula "119") (term "1"))
               (branch " sk_1 = o_0 ∧ ¬sk_1 = null ∧ f_0 = java.lang.Object::<created> TRUE"
                  (rule "andLeft" (formula "1"))
                  (rule "andLeft" (formula "1"))
                  (rule "notLeft" (formula "2"))
                  (rule "eqSymm" (formula "120") (term "1"))
                  (rule "eqSymm" (formula "1"))
                  (rule "eqSymm" (formula "120") (term "0"))
                  (rule "polySimp_homoEq" (formula "31"))
                  (rule "polySimp_addComm1" (formula "31") (term "0"))
                  (rule "inEqSimp_ltToLeq" (formula "36") (term "1"))
                  (rule "polySimp_mulComm0" (formula "36") (term "1,0,0,1"))
                  (rule "polySimp_addComm1" (formula "36") (term "0,1"))
                  (rule "add_literals" (formula "36") (term "0,0,1"))
                  (rule "inEqSimp_ltToLeq" (formula "57") (term "1"))
                  (rule "polySimp_mulComm0" (formula "57") (term "1,0,0,1"))
                  (rule "polySimp_addComm1" (formula "57") (term "0,1"))
                  (rule "add_literals" (formula "57") (term "0,0,1"))
                  (rule "inEqSimp_ltToLeq" (formula "58") (term "0,1"))
                  (rule "polySimp_mulComm0" (formula "58") (term "1,0,0,0,1"))
                  (rule "polySimp_addComm1" (formula "58") (term "0,0,1"))
                  (rule "add_literals" (formula "58") (term "0,0,0,1"))
                  (rule "inEqSimp_ltToLeq" (formula "75"))
                  (rule "polySimp_mulComm0" (formula "75") (term "1,0,0"))
                  (rule "polySimp_addComm1" (formula "75") (term "0"))
                  (rule "inEqSimp_ltToLeq" (formula "60") (term "1"))
                  (rule "polySimp_mulComm0" (formula "60") (term "1,0,0,1"))
                  (rule "polySimp_addComm1" (formula "60") (term "0,1"))
                  (rule "add_literals" (formula "60") (term "0,0,1"))
                  (rule "inEqSimp_ltToLeq" (formula "37") (term "0,1"))
                  (rule "polySimp_mulComm0" (formula "37") (term "1,0,0,0,1"))
                  (rule "polySimp_addComm1" (formula "37") (term "0,0,1"))
                  (rule "add_literals" (formula "37") (term "0,0,0,1"))
                  (rule "inEqSimp_ltToLeq" (formula "23"))
                  (rule "polySimp_rightDist" (formula "23") (term "1,0,0"))
                  (rule "mul_literals" (formula "23") (term "0,1,0,0"))
                  (rule "inEqSimp_ltToLeq" (formula "21") (term "0"))
                  (rule "add_zero_right" (formula "21") (term "0,0"))
                  (rule "polySimp_mulComm0" (formula "21") (term "1,0,0"))
                  (rule "inEqSimp_ltToLeq" (formula "72") (term "0,0,0"))
                  (rule "polySimp_mulComm0" (formula "72") (term "1,0,0,0,0,0"))
                  (rule "inEqSimp_ltToLeq" (formula "33") (term "1"))
                  (rule "add_zero_right" (formula "33") (term "0,1"))
                  (rule "polySimp_mulComm0" (formula "33") (term "1,0,1"))
                  (rule "inEqSimp_ltToLeq" (formula "43") (term "0,1"))
                  (rule "polySimp_mulComm0" (formula "43") (term "1,0,0,0,1"))
                  (rule "polySimp_addComm1" (formula "43") (term "0,0,1"))
                  (rule "add_literals" (formula "43") (term "0,0,0,1"))
                  (rule "inEqSimp_ltToLeq" (formula "79") (term "0,0,0"))
                  (rule "polySimp_mulComm0" (formula "79") (term "1,0,0,0,0,0"))
                  (rule "inEqSimp_ltToLeq" (formula "49") (term "0,1"))
                  (rule "polySimp_mulComm0" (formula "49") (term "1,0,0,0,1"))
                  (rule "polySimp_addComm1" (formula "49") (term "0,0,1"))
                  (rule "add_literals" (formula "49") (term "0,0,0,1"))
                  (rule "inEqSimp_ltToLeq" (formula "77") (term "0,0,0"))
                  (rule "polySimp_mulComm0" (formula "77") (term "1,0,0,0,0,0"))
                  (rule "inEqSimp_ltToLeq" (formula "61") (term "0,1"))
                  (rule "polySimp_mulComm0" (formula "61") (term "1,0,0,0,1"))
                  (rule "polySimp_addComm1" (formula "61") (term "0,0,1"))
                  (rule "add_literals" (formula "61") (term "0,0,0,1"))
                  (rule "inEqSimp_ltToLeq" (formula "45") (term "1"))
                  (rule "polySimp_mulComm0" (formula "45") (term "1,0,0,1"))
                  (rule "polySimp_addComm1" (formula "45") (term "0,1"))
                  (rule "add_literals" (formula "45") (term "0,0,1"))
                  (rule "inEqSimp_ltToLeq" (formula "55") (term "0,1"))
                  (rule "polySimp_mulComm0" (formula "55") (term "1,0,0,0,1"))
                  (rule "polySimp_addComm1" (formula "55") (term "0,0,1"))
                  (rule "add_literals" (formula "55") (term "0,0,0,1"))
                  (rule "inEqSimp_ltToLeq" (formula "83"))
                  (rule "polySimp_mulComm0" (formula "83") (term "1,0,0"))
                  (rule "polySimp_addComm1" (formula "83") (term "0"))
                  (rule "inEqSimp_ltToLeq" (formula "54") (term "1"))
                  (rule "polySimp_mulComm0" (formula "54") (term "1,0,0,1"))
                  (rule "polySimp_addComm1" (formula "54") (term "0,1"))
                  (rule "add_literals" (formula "54") (term "0,0,1"))
                  (rule "inEqSimp_ltToLeq" (formula "39") (term "1"))
                  (rule "polySimp_mulComm0" (formula "39") (term "1,0,0,1"))
                  (rule "polySimp_addComm1" (formula "39") (term "0,1"))
                  (rule "add_literals" (formula "39") (term "0,0,1"))
                  (rule "inEqSimp_ltToLeq" (formula "42") (term "1"))
                  (rule "polySimp_mulComm0" (formula "42") (term "1,0,0,1"))
                  (rule "polySimp_addComm1" (formula "42") (term "0,1"))
                  (rule "add_literals" (formula "42") (term "0,0,1"))
                  (rule "inEqSimp_ltToLeq" (formula "46") (term "0,1"))
                  (rule "polySimp_mulComm0" (formula "46") (term "1,0,0,0,1"))
                  (rule "inEqSimp_ltToLeq" (formula "34") (term "0,1"))
                  (rule "add_zero_right" (formula "34") (term "0,0,1"))
                  (rule "polySimp_mulComm0" (formula "34") (term "1,0,0,1"))
                  (rule "inEqSimp_ltToLeq" (formula "48") (term "1"))
                  (rule "polySimp_mulComm0" (formula "48") (term "1,0,0,1"))
                  (rule "inEqSimp_ltToLeq" (formula "52") (term "0,1"))
                  (rule "polySimp_mulComm0" (formula "52") (term "1,0,0,0,1"))
                  (rule "inEqSimp_ltToLeq" (formula "51") (term "1"))
                  (rule "polySimp_mulComm0" (formula "51") (term "1,0,0,1"))
                  (rule "inEqSimp_ltToLeq" (formula "40") (term "0,1"))
                  (rule "polySimp_mulComm0" (formula "40") (term "1,0,0,0,1"))
                  (rule "polySimp_addComm1" (formula "46") (term "0,0,1"))
                  (rule "add_literals" (formula "46") (term "0,0,0,1"))
                  (rule "polySimp_addAssoc" (formula "23") (term "0,0"))
                  (rule "add_literals" (formula "23") (term "0,0,0"))
                  (rule "polySimp_pullOutFactor2b" (formula "23") (term "0"))
                  (rule "add_literals" (formula "23") (term "1,1,0"))
                  (rule "times_zero_1" (formula "23") (term "1,0"))
                  (rule "add_zero_right" (formula "23") (term "0"))
                  (rule "leq_literals" (formula "23"))
                  (rule "true_left" (formula "23"))
                  (rule "polySimp_addComm1" (formula "47") (term "0,1"))
                  (rule "add_literals" (formula "47") (term "0,0,1"))
                  (rule "inEqSimp_ltToLeq" (formula "30") (term "0,1,0"))
                  (rule "polySimp_mulComm0" (formula "30") (term "1,0,0,0,1,0"))
                  (rule "polySimp_addComm1" (formula "51") (term "0,0,1"))
                  (rule "add_literals" (formula "51") (term "0,0,0,1"))
                  (rule "polySimp_addComm1" (formula "50") (term "0,1"))
                  (rule "add_literals" (formula "50") (term "0,0,1"))
                  (rule "polySimp_addComm1" (formula "39") (term "0,0,1"))
                  (rule "add_literals" (formula "39") (term "0,0,0,1"))
                  (rule "polySimp_addComm1" (formula "30") (term "0,0,1,0"))
                  (rule "add_literals" (formula "30") (term "0,0,0,1,0"))
                  (rule "applyEq" (formula "117") (term "0,1") (ifseqformula "2"))
                   (builtin "One Step Simplification" (formula "117"))
                  (rule "false_right" (formula "117"))
                  (rule "applyEqRigid" (formula "117") (term "1,0,0,1") (ifseqformula "1"))
                  (rule "applyEq" (formula "117") (term "0,0,0") (ifseqformula "1"))
                  (rule "replace_known_right" (formula "117") (term "0,0") (ifseqformula "116"))
                   (builtin "One Step Simplification" (formula "117"))
                  (rule "notRight" (formula "117"))
                  (rule "applyEqRigid" (formula "118") (term "1,0") (ifseqformula "2"))
                  (rule "applyEq" (formula "12") (term "1,0") (ifseqformula "71"))
                  (rule "replace_known_left" (formula "70") (term "1") (ifseqformula "12"))
                   (builtin "One Step Simplification" (formula "70"))
                  (rule "true_left" (formula "70"))
                  (rule "applyEqRigid" (formula "117") (term "2,0") (ifseqformula "3"))
                  (rule "castTrueImpliesOriginalTrue" (formula "117") (ifseqformula "1"))
                  (rule "closeTrue" (formula "117"))
               )
               (branch " sk_1 = o_0 ∧ ¬sk_1 = null ∧ f_0 = java.lang.Object::<created> FALSE"
                  (rule "ifthenelse_split" (formula "120") (term "1"))
                  (branch " sk_0 = o_0 ∧ ¬sk_0 = null ∧ f_0 = java.lang.Object::<created> TRUE"
                     (rule "andLeft" (formula "1"))
                     (rule "andLeft" (formula "1"))
                     (rule "notLeft" (formula "2"))
                     (rule "eqSymm" (formula "1"))
                     (rule "eqSymm" (formula "120") (term "0"))
                     (rule "eqSymm" (formula "121") (term "0,0"))
                     (rule "eqSymm" (formula "120") (term "1"))
                     (rule "replace_known_right" (formula "120") (term "0,1,0") (ifseqformula "117"))
                      (builtin "One Step Simplification" (formula "120") (ifInst ""  (formula "2")))
                     (rule "polySimp_homoEq" (formula "31"))
                     (rule "polySimp_addComm1" (formula "31") (term "0"))
                     (rule "inEqSimp_ltToLeq" (formula "77") (term "0,0,0"))
                     (rule "polySimp_mulComm0" (formula "77") (term "1,0,0,0,0,0"))
                     (rule "inEqSimp_ltToLeq" (formula "39") (term "1"))
                     (rule "polySimp_mulComm0" (formula "39") (term "1,0,0,1"))
                     (rule "polySimp_addComm1" (formula "39") (term "0,1"))
                     (rule "add_literals" (formula "39") (term "0,0,1"))
                     (rule "inEqSimp_ltToLeq" (formula "37") (term "0,1"))
                     (rule "polySimp_mulComm0" (formula "37") (term "1,0,0,0,1"))
                     (rule "polySimp_addComm1" (formula "37") (term "0,0,1"))
                     (rule "add_literals" (formula "37") (term "0,0,0,1"))
                     (rule "inEqSimp_ltToLeq" (formula "52") (term "0,1"))
                     (rule "polySimp_mulComm0" (formula "52") (term "1,0,0,0,1"))
                     (rule "polySimp_addComm1" (formula "52") (term "0,0,1"))
                     (rule "add_literals" (formula "52") (term "0,0,0,1"))
                     (rule "inEqSimp_ltToLeq" (formula "75"))
                     (rule "polySimp_mulComm0" (formula "75") (term "1,0,0"))
                     (rule "polySimp_addComm1" (formula "75") (term "0"))
                     (rule "inEqSimp_ltToLeq" (formula "61") (term "0,1"))
                     (rule "polySimp_mulComm0" (formula "61") (term "1,0,0,0,1"))
                     (rule "polySimp_addComm1" (formula "61") (term "0,0,1"))
                     (rule "add_literals" (formula "61") (term "0,0,0,1"))
                     (rule "inEqSimp_ltToLeq" (formula "49") (term "0,1"))
                     (rule "polySimp_mulComm0" (formula "49") (term "1,0,0,0,1"))
                     (rule "polySimp_addComm1" (formula "49") (term "0,0,1"))
                     (rule "add_literals" (formula "49") (term "0,0,0,1"))
                     (rule "inEqSimp_ltToLeq" (formula "58") (term "0,1"))
                     (rule "polySimp_mulComm0" (formula "58") (term "1,0,0,0,1"))
                     (rule "polySimp_addComm1" (formula "58") (term "0,0,1"))
                     (rule "add_literals" (formula "58") (term "0,0,0,1"))
                     (rule "inEqSimp_ltToLeq" (formula "42") (term "1"))
                     (rule "polySimp_mulComm0" (formula "42") (term "1,0,0,1"))
                     (rule "polySimp_addComm1" (formula "42") (term "0,1"))
                     (rule "add_literals" (formula "42") (term "0,0,1"))
                     (rule "inEqSimp_ltToLeq" (formula "43") (term "0,1"))
                     (rule "polySimp_mulComm0" (formula "43") (term "1,0,0,0,1"))
                     (rule "polySimp_addComm1" (formula "43") (term "0,0,1"))
                     (rule "add_literals" (formula "43") (term "0,0,0,1"))
                     (rule "inEqSimp_ltToLeq" (formula "34") (term "0,1"))
                     (rule "add_zero_right" (formula "34") (term "0,0,1"))
                     (rule "polySimp_mulComm0" (formula "34") (term "1,0,0,1"))
                     (rule "inEqSimp_ltToLeq" (formula "33") (term "1"))
                     (rule "add_zero_right" (formula "33") (term "0,1"))
                     (rule "polySimp_mulComm0" (formula "33") (term "1,0,1"))
                     (rule "inEqSimp_ltToLeq" (formula "40") (term "0,1"))
                     (rule "polySimp_mulComm0" (formula "40") (term "1,0,0,0,1"))
                     (rule "polySimp_addComm1" (formula "40") (term "0,0,1"))
                     (rule "add_literals" (formula "40") (term "0,0,0,1"))
                     (rule "inEqSimp_ltToLeq" (formula "57") (term "1"))
                     (rule "polySimp_mulComm0" (formula "57") (term "1,0,0,1"))
                     (rule "polySimp_addComm1" (formula "57") (term "0,1"))
                     (rule "add_literals" (formula "57") (term "0,0,1"))
                     (rule "inEqSimp_ltToLeq" (formula "21") (term "0"))
                     (rule "add_zero_right" (formula "21") (term "0,0"))
                     (rule "polySimp_mulComm0" (formula "21") (term "1,0,0"))
                     (rule "inEqSimp_ltToLeq" (formula "23"))
                     (rule "polySimp_rightDist" (formula "23") (term "1,0,0"))
                     (rule "mul_literals" (formula "23") (term "0,1,0,0"))
                     (rule "inEqSimp_ltToLeq" (formula "48") (term "1"))
                     (rule "polySimp_mulComm0" (formula "48") (term "1,0,0,1"))
                     (rule "polySimp_addComm1" (formula "48") (term "0,1"))
                     (rule "add_literals" (formula "48") (term "0,0,1"))
                     (rule "inEqSimp_ltToLeq" (formula "46") (term "0,1"))
                     (rule "polySimp_mulComm0" (formula "46") (term "1,0,0,0,1"))
                     (rule "polySimp_addComm1" (formula "46") (term "0,0,1"))
                     (rule "add_literals" (formula "46") (term "0,0,0,1"))
                     (rule "inEqSimp_ltToLeq" (formula "55") (term "0,1"))
                     (rule "polySimp_mulComm0" (formula "55") (term "1,0,0,0,1"))
                     (rule "polySimp_addComm1" (formula "55") (term "0,0,1"))
                     (rule "add_literals" (formula "55") (term "0,0,0,1"))
                     (rule "inEqSimp_ltToLeq" (formula "79") (term "0,0,0"))
                     (rule "polySimp_mulComm0" (formula "79") (term "1,0,0,0,0,0"))
                     (rule "inEqSimp_ltToLeq" (formula "45") (term "1"))
                     (rule "polySimp_mulComm0" (formula "45") (term "1,0,0,1"))
                     (rule "inEqSimp_ltToLeq" (formula "72") (term "0,0,0"))
                     (rule "polySimp_mulComm0" (formula "72") (term "1,0,0,0,0,0"))
                     (rule "inEqSimp_ltToLeq" (formula "54") (term "1"))
                     (rule "polySimp_mulComm0" (formula "54") (term "1,0,0,1"))
                     (rule "inEqSimp_ltToLeq" (formula "60") (term "1"))
                     (rule "polySimp_mulComm0" (formula "60") (term "1,0,0,1"))
                     (rule "inEqSimp_ltToLeq" (formula "51") (term "1"))
                     (rule "polySimp_mulComm0" (formula "51") (term "1,0,0,1"))
                     (rule "inEqSimp_ltToLeq" (formula "36") (term "1"))
                     (rule "polySimp_mulComm0" (formula "36") (term "1,0,0,1"))
                     (rule "inEqSimp_ltToLeq" (formula "83"))
                     (rule "polySimp_mulComm0" (formula "83") (term "1,0,0"))
                     (rule "polySimp_addComm1" (formula "45") (term "0,1"))
                     (rule "add_literals" (formula "45") (term "0,0,1"))
                     (rule "polySimp_addComm1" (formula "54") (term "0,1"))
                     (rule "add_literals" (formula "54") (term "0,0,1"))
                     (rule "polySimp_addComm1" (formula "60") (term "0,1"))
                     (rule "add_literals" (formula "60") (term "0,0,1"))
                     (rule "inEqSimp_ltToLeq" (formula "31") (term "0,1,0"))
                     (rule "polySimp_mulComm0" (formula "31") (term "1,0,0,0,1,0"))
                     (rule "polySimp_addComm1" (formula "51") (term "0,1"))
                     (rule "add_literals" (formula "51") (term "0,0,1"))
                     (rule "polySimp_addComm1" (formula "36") (term "0,1"))
                     (rule "add_literals" (formula "36") (term "0,0,1"))
                     (rule "polySimp_addComm1" (formula "83") (term "0"))
                     (rule "polySimp_addComm1" (formula "31") (term "0,0,1,0"))
                     (rule "add_literals" (formula "31") (term "0,0,0,1,0"))
                     (rule "polySimp_addAssoc" (formula "23") (term "0,0"))
                     (rule "add_literals" (formula "23") (term "0,0,0"))
                     (rule "polySimp_pullOutFactor2b" (formula "23") (term "0"))
                     (rule "add_literals" (formula "23") (term "1,1,0"))
                     (rule "times_zero_1" (formula "23") (term "1,0"))
                     (rule "add_literals" (formula "23") (term "0"))
                     (rule "leq_literals" (formula "23"))
                     (rule "true_left" (formula "23"))
                     (rule "applyEqRigid" (formula "120") (term "1,0") (ifseqformula "1"))
                     (rule "applyEq" (formula "117") (term "0,0") (ifseqformula "1"))
                     (rule "replace_known_right" (formula "117") (term "0") (ifseqformula "115"))
                      (builtin "One Step Simplification" (formula "117"))
                     (rule "false_right" (formula "117"))
                     (rule "applyEqRigid" (formula "119") (term "2,0") (ifseqformula "2"))
                     (rule "narrowSelectType" (formula "119") (term "0") (ifseqformula "65"))
                     (rule "applyEqRigid" (formula "118") (term "0") (ifseqformula "1"))
                     (rule "eqSymm" (formula "118"))
                     (rule "applyEq" (formula "11") (term "1,0") (ifseqformula "70"))
                     (rule "replace_known_left" (formula "69") (term "1") (ifseqformula "11"))
                      (builtin "One Step Simplification" (formula "69"))
                     (rule "true_left" (formula "69"))
                     (rule "applyEqRigid" (formula "116") (term "0,0,0") (ifseqformula "1"))
                     (rule "replace_known_right" (formula "116") (term "0,0") (ifseqformula "114"))
                      (builtin "One Step Simplification" (formula "116"))
                     (rule "notRight" (formula "116"))
                     (rule "applyEq" (formula "99") (term "0") (ifseqformula "70"))
                     (rule "applyEq" (formula "1") (term "1,0") (ifseqformula "2"))
                     (rule "close" (formula "118") (ifseqformula "1"))
                  )
                  (branch " sk_0 = o_0 ∧ ¬sk_0 = null ∧ f_0 = java.lang.Object::<created> FALSE"
                      (builtin "One Step Simplification" (formula "121"))
                     (rule "closeTrue" (formula "121"))
                  )
               )
            )
         )
      )
      (branch "Exceptional Post (getCurrentLineNumber)"
          (builtin "One Step Simplification" (formula "45"))
          (builtin "One Step Simplification" (formula "21"))
         (rule "andLeft" (formula "21"))
         (rule "andLeft" (formula "22"))
         (rule "andLeft" (formula "21"))
         (rule "notLeft" (formula "21"))
         (rule "close" (formula "24") (ifseqformula "23"))
      )
      (branch "Pre (getCurrentLineNumber)"
          (builtin "One Step Simplification" (formula "44") (ifInst ""  (formula "3")))
         (rule "Class_invariant_axiom_for_org_apache_commons_csv_CSVParser" (formula "44") (userinteraction))
         (rule "closeTrue" (formula "44") (userinteraction))
      )
      (branch "Null reference (c_2 = null)"
          (builtin "One Step Simplification" (formula "44") (ifInst ""  (formula "37")))
         (rule "closeTrue" (formula "44") (userinteraction))
      )
   )
   (branch "if x false"
       (builtin "One Step Simplification" (formula "1"))
       (builtin "One Step Simplification" (formula "42"))
      (rule "notLeft" (formula "1"))
      (rule "methodCallEmpty" (formula "42") (term "1"))
      (rule "tryEmpty" (formula "42") (term "1"))
      (rule "emptyModality" (formula "42") (term "1"))
       (builtin "One Step Simplification" (formula "42") (ifInst ""  (formula "22")))
      (rule "closeTrue" (formula "42") (userinteraction))
   )
)
(branch "Exceptional Post (getCurrentLineNumber)"
    (builtin "One Step Simplification" (formula "38"))
    (builtin "One Step Simplification" (formula "15"))
   (rule "andLeft" (formula "15"))
   (rule "andLeft" (formula "15"))
   (rule "andLeft" (formula "17"))
   (rule "notLeft" (formula "15"))
   (rule "close" (formula "18") (ifseqformula "17"))
)
(branch "Pre (getCurrentLineNumber)"
    (builtin "One Step Simplification" (formula "37") (ifInst ""  (formula "1")))
   (rule "Class_invariant_axiom_for_org_apache_commons_csv_CSVParser" (formula "37") (userinteraction))
   (rule "closeTrue" (formula "37") (userinteraction))
)
(branch "Null reference (c_1 = null)"
    (builtin "One Step Simplification" (formula "37") (ifInst ""  (formula "30")))
   (rule "closeTrue" (formula "37") (userinteraction))
)
)
}
