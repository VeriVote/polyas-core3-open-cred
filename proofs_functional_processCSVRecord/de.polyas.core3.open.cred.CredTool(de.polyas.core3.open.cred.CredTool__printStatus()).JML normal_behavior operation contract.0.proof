\profile "Java Profile";

\settings {
"#Proof-Settings-Config-File
#Thu Dec 19 18:48:15 CET 2019
[Labels]UseOriginLabels=false
[StrategyProperty]QUERYAXIOM_OPTIONS_KEY=QUERYAXIOM_ON
[SMTSettings]invariantForall=false
[Strategy]ActiveStrategy=JavaCardDLStrategy
[StrategyProperty]USER_TACLETS_OPTIONS_KEY1=USER_TACLETS_OFF
[StrategyProperty]QUANTIFIERS_OPTIONS_KEY=QUANTIFIERS_NON_SPLITTING_WITH_PROGS
[StrategyProperty]USER_TACLETS_OPTIONS_KEY2=USER_TACLETS_OFF
[Choice]DefaultChoices=methodExpansion-methodExpansion\\:modularOnly , mergeGenerateIsWeakeningGoal-mergeGenerateIsWeakeningGoal\\:off , wdChecks-wdChecks\\:off , wdOperator-wdOperator\\:L , permissions-permissions\\:off , integerSimplificationRules-integerSimplificationRules\\:full , reach-reach\\:on , moreSeqRules-moreSeqRules\\:on , sequences-sequences\\:on , bigint-bigint\\:on , modelFields-modelFields\\:treatAsAxiom , Strings-Strings\\:on , JavaCard-JavaCard\\:off , runtimeExceptions-runtimeExceptions\\:allow , programRules-programRules\\:Java , intRules-intRules\\:javaSemantics , initialisation-initialisation\\:disableStaticInitialisation , assertions-assertions\\:on
[StrategyProperty]LOOP_OPTIONS_KEY=LOOP_INVARIANT
[StrategyProperty]INF_FLOW_CHECK_PROPERTY=INF_FLOW_CHECK_FALSE
[SMTSettings]UseBuiltUniqueness=false
[SMTSettings]explicitTypeHierarchy=false
[SMTSettings]instantiateHierarchyAssumptions=true
[StrategyProperty]NON_LIN_ARITH_OPTIONS_KEY=NON_LIN_ARITH_DEF_OPS
[SMTSettings]SelectedTaclets=
[StrategyProperty]DEP_OPTIONS_KEY=DEP_ON
[StrategyProperty]AUTO_INDUCTION_OPTIONS_KEY=AUTO_INDUCTION_OFF
[Strategy]MaximumNumberOfAutomaticApplications=10000
[StrategyProperty]STOPMODE_OPTIONS_KEY=STOPMODE_DEFAULT
[StrategyProperty]CLASS_AXIOM_OPTIONS_KEY=CLASS_AXIOM_FREE
[SMTSettings]useConstantsForBigOrSmallIntegers=true
[StrategyProperty]MPS_OPTIONS_KEY=MPS_MERGE
[StrategyProperty]SYMBOLIC_EXECUTION_NON_EXECUTION_BRANCH_HIDING_OPTIONS_KEY=SYMBOLIC_EXECUTION_NON_EXECUTION_BRANCH_HIDING_OFF
[Strategy]Timeout=-1
[StrategyProperty]SYMBOLIC_EXECUTION_ALIAS_CHECK_OPTIONS_KEY=SYMBOLIC_EXECUTION_ALIAS_CHECK_NEVER
[StrategyProperty]QUERY_NEW_OPTIONS_KEY=QUERY_OFF
[SMTSettings]useUninterpretedMultiplication=true
[StrategyProperty]BLOCK_OPTIONS_KEY=BLOCK_CONTRACT_INTERNAL
[StrategyProperty]METHOD_OPTIONS_KEY=METHOD_CONTRACT
[StrategyProperty]USER_TACLETS_OPTIONS_KEY3=USER_TACLETS_OFF
[SMTSettings]maxGenericSorts=2
[StrategyProperty]OSS_OPTIONS_KEY=OSS_ON
[StrategyProperty]SPLITTING_OPTIONS_KEY=SPLITTING_DELAYED
[SMTSettings]integersMinimum=-2147483645
[StrategyProperty]VBT_PHASE=VBT_SYM_EX
[SMTSettings]integersMaximum=2147483645
"
}

\javaSource "../src";

\proofObligation "#Proof Obligation Settings
#Thu Dec 19 18:48:15 CET 2019
contract=de.polyas.core3.open.cred.CredTool[de.polyas.core3.open.cred.CredTool\\:\\:printStatus()].JML normal_behavior operation contract.0
name=de.polyas.core3.open.cred.CredTool[de.polyas.core3.open.cred.CredTool\\:\\:printStatus()].JML normal_behavior operation contract.0
class=de.uka.ilkd.key.proof.init.FunctionalOperationContractPO
";

\proof {
(keyLog "0" (keyUser "flo" ) (keyVersion "57d504cc0f"))

(autoModeTime "14027")

(branch "dummy ID"
(rule "impRight" (formula "1") (newnames "self_363,exc_454,heapAtPre_0,o,f"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "3"))
(rule "andLeft" (formula "1"))
(rule "notLeft" (formula "4"))
(rule "notLeft" (formula "4"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "notLeft" (formula "2"))
(rule "eqSymm" (formula "8") (term "1,0,0,1,0,1"))
(rule "elementOfSingleton" (formula "8") (term "0,0,0,0,1,0,1"))
(rule "assignment" (formula "8") (term "1"))
 (builtin "One Step Simplification" (formula "8"))
(rule "methodBodyExpand" (formula "8") (term "1") (newnames "heapBefore_printStatus,savedHeapBefore_printStatus"))
 (builtin "One Step Simplification" (formula "8"))
(rule "ifUnfold" (formula "8") (term "1") (inst "#boolv=x"))
(rule "variableDeclaration" (formula "8") (term "1") (newnames "x"))
(rule "compound_equality_comparison_1" (formula "8") (term "1") (inst "#v0=x_1"))
(rule "variableDeclarationAssign" (formula "8") (term "1"))
(rule "variableDeclaration" (formula "8") (term "1") (newnames "x_1"))
(rule "compound_modulo_1" (formula "8") (term "1") (inst "#v=x_2"))
(rule "variableDeclarationAssign" (formula "8") (term "1"))
(rule "variableDeclaration" (formula "8") (term "1") (newnames "x_2"))
(rule "methodCallWithAssignmentUnfoldTarget" (formula "8") (term "1") (inst "#v0=c"))
(rule "variableDeclaration" (formula "8") (term "1") (newnames "c_6"))
(rule "assignment_read_attribute_this" (formula "8") (term "1"))
 (builtin "One Step Simplification" (formula "8"))
 (builtin "Use Operation Contract" (formula "8") (newnames "heapBefore_getCurrentLineNumber,result_342,exc_455") (contract "org.apache.commons.csv.CSVParser[org.apache.commons.csv.CSVParser::getCurrentLineNumber()].JML normal_behavior operation contract.0"))
(branch "Post (getCurrentLineNumber)"
    (builtin "One Step Simplification" (formula "9"))
    (builtin "One Step Simplification" (formula "5"))
   (rule "expand_inLong" (formula "5") (term "1,0"))
   (rule "replace_long_MIN" (formula "5") (term "0,1,1,0"))
   (rule "replace_long_MAX" (formula "5") (term "1,0,1,0"))
   (rule "andLeft" (formula "5"))
   (rule "andLeft" (formula "5"))
   (rule "andLeft" (formula "7"))
   (rule "andLeft" (formula "6"))
   (rule "inEqSimp_commuteLeq" (formula "7"))
   (rule "assignment" (formula "12") (term "1"))
    (builtin "One Step Simplification" (formula "12"))
   (rule "Class_invariant_axiom_for_org_apache_commons_csv_CSVParser" (formula "8"))
   (rule "true_left" (formula "8"))
   (rule "assignmentModulo" (formula "11") (term "1"))
    (builtin "One Step Simplification" (formula "11"))
   (rule "equal_literals" (formula "11") (term "0,0"))
    (builtin "One Step Simplification" (formula "11"))
   (rule "translateJavaMod" (formula "11") (term "0,1,0"))
   (rule "equality_comparison_simple" (formula "11") (term "1"))
    (builtin "One Step Simplification" (formula "11"))
   (rule "ifSplit" (formula "11"))
   (branch "if x true"
       (builtin "One Step Simplification" (formula "1"))
       (builtin "One Step Simplification" (formula "12"))
      (rule "activeUseStaticFieldWriteAccess" (formula "12") (term "1") (inst "#v0=s"))
      (rule "variableDeclarationAssign" (formula "12") (term "1"))
      (rule "variableDeclaration" (formula "12") (term "1") (newnames "s"))
      (rule "jmod_axiom" (formula "1") (term "0"))
      (rule "polySimp_mulLiterals" (formula "1") (term "1,0"))
      (rule "polySimp_sepNegMonomial" (formula "1"))
      (rule "polySimp_mulLiterals" (formula "1") (term "0"))
      (rule "newSym_eq" (formula "1") (inst "l=l_0") (inst "newSymDef=mul(result_342, Z(0(#)))"))
      (rule "times_zero_1" (formula "1") (term "1,1"))
      (rule "add_zero_right" (formula "1") (term "1"))
      (rule "applyEq" (formula "2") (term "0,0") (ifseqformula "1"))
      (rule "eqSymm" (formula "2"))
      (rule "applyEq" (formula "8") (term "0") (ifseqformula "2"))
      (rule "applyEq" (formula "1") (term "0,0") (ifseqformula "2"))
      (rule "applyEq" (formula "9") (term "0") (ifseqformula "2"))
      (rule "elimGcdGeq_antec" (formula "9") (inst "elimGcdRightDiv=Z(neglit(5(7(7(4(5(8(6(3(0(2(7(3(3(2(2(9(#))))))))))))))))))") (inst "elimGcdLeftDiv=l_0") (inst "elimGcd=Z(0(0(0(1(#)))))"))
      (rule "mul_literals" (formula "9") (term "0,1,0,0,0,0,1,0"))
      (rule "polySimp_mulLiterals" (formula "9") (term "1,0,1,0"))
      (rule "leq_literals" (formula "9") (term "0,0"))
       (builtin "One Step Simplification" (formula "9"))
      (rule "mul_literals" (formula "9") (term "1,0,0,0,0,0"))
      (rule "polySimp_addLiterals" (formula "9") (term "0,0,0,0"))
      (rule "add_literals" (formula "9") (term "0,0,0,0"))
      (rule "polySimp_pullOutFactor0b" (formula "9") (term "0,0"))
      (rule "add_literals" (formula "9") (term "1,1,0,0"))
      (rule "times_zero_1" (formula "9") (term "1,0,0"))
      (rule "add_zero_right" (formula "9") (term "0,0"))
      (rule "leq_literals" (formula "9") (term "0"))
       (builtin "One Step Simplification" (formula "9"))
      (rule "elimGcdLeq_antec" (formula "8") (inst "elimGcdRightDiv=Z(5(7(7(4(5(8(6(3(0(2(7(3(3(2(2(9(#)))))))))))))))))") (inst "elimGcdLeftDiv=l_0") (inst "elimGcd=Z(0(0(0(1(#)))))"))
      (rule "leq_literals" (formula "8") (term "0,0"))
       (builtin "One Step Simplification" (formula "8"))
      (rule "polySimp_mulLiterals" (formula "8") (term "1,0,0"))
      (rule "neg_literal" (formula "8") (term "0,0,0,0,0,0"))
      (rule "polySimp_mulLiterals" (formula "8") (term "1,0,0,0,0,0"))
      (rule "mul_literals" (formula "8") (term "1,0,0,0,0,0"))
      (rule "polySimp_addLiterals" (formula "8") (term "0,0,0,0"))
      (rule "add_literals" (formula "8") (term "0,0,0,0"))
      (rule "polySimp_pullOutFactor0b" (formula "8") (term "0,0"))
      (rule "add_literals" (formula "8") (term "1,1,0,0"))
      (rule "times_zero_1" (formula "8") (term "1,0,0"))
      (rule "add_zero_right" (formula "8") (term "0,0"))
      (rule "qeq_literals" (formula "8") (term "0"))
       (builtin "One Step Simplification" (formula "8"))
      (rule "compound_addition_2" (formula "13") (term "1") (inst "#v1=s_2") (inst "#v0=s_1"))
      (rule "variableDeclarationAssign" (formula "13") (term "1"))
      (rule "variableDeclaration" (formula "13") (term "1") (newnames "s_1"))
      (rule "compound_addition_2" (formula "13") (term "1") (inst "#v1=x") (inst "#v0=s_3"))
      (rule "variableDeclarationAssign" (formula "13") (term "1"))
      (rule "variableDeclaration" (formula "13") (term "1") (newnames "s_3"))
      (rule "stringAssignment" (formula "13") (term "1"))
       (builtin "One Step Simplification" (formula "15"))
       (builtin "One Step Simplification" (formula "1"))
       (builtin "One Step Simplification" (formula "2"))
      (rule "notLeft" (formula "1"))
      (rule "variableDeclarationAssign" (formula "15") (term "1"))
      (rule "variableDeclaration" (formula "15") (term "1") (newnames "x_3"))
      (rule "jdiv_axiom" (formula "2") (term "0"))
      (rule "polySimp_mulLiterals" (formula "2") (term "0,0,2,1"))
      (rule "eqSymm" (formula "2"))
      (rule "applyEq" (formula "2") (term "1") (ifseqformula "3"))
      (rule "elimGcdGeq" (formula "2") (term "0,0") (inst "elimGcdRightDiv=Z(0(#))") (inst "elimGcdLeftDiv=l_0") (inst "elimGcd=Z(0(0(0(1(#)))))"))
      (rule "add_zero_right" (formula "2") (term "0,0,0,1,0,0,0"))
      (rule "mul_literals" (formula "2") (term "0,1,0,0,0,0,0,0,0,0"))
      (rule "polySimp_mulLiterals" (formula "2") (term "1,0,1,0,0,0"))
      (rule "polySimp_mulLiterals" (formula "2") (term "1,0,0,0,0,0"))
      (rule "sub_literals" (formula "2") (term "0,0,0,0,0,0,0,0,0"))
      (rule "polySimp_mulLiterals" (formula "2") (term "0,0,0,1,0,0,0"))
      (rule "mul_literals" (formula "2") (term "1,0,0,0,0,0,0,0,0"))
      (rule "times_zero_1" (formula "2") (term "0,0,0,1,0,0,0"))
      (rule "add_zero_right" (formula "2") (term "0,0,0,0,0,0,0,0"))
      (rule "add_zero_left" (formula "2") (term "0,0,1,0,0,0"))
      (rule "add_zero_right" (formula "2") (term "0,0,0,0,0,0,0"))
      (rule "polySimp_pullOutFactor0" (formula "2") (term "0,1,0,0,0"))
      (rule "add_literals" (formula "2") (term "1,0,1,0,0,0"))
      (rule "times_zero_1" (formula "2") (term "0,1,0,0,0"))
      (rule "leq_literals" (formula "2") (term "1,0,0,0"))
       (builtin "One Step Simplification" (formula "2"))
      (rule "polySimp_pullOutFactor0b" (formula "2") (term "0,0,0,0"))
      (rule "add_literals" (formula "2") (term "1,1,0,0,0,0"))
      (rule "times_zero_1" (formula "2") (term "1,0,0,0,0"))
      (rule "add_zero_right" (formula "2") (term "0,0,0,0"))
      (rule "qeq_literals" (formula "2") (term "0,0,0"))
       (builtin "One Step Simplification" (formula "2"))
      (rule "polyDiv_pullOut" (formula "2") (term "0,2,0") (inst "polyDivCoeff=mul(l_0, Z(neglit(1(#))))"))
      (rule "polySimp_mulLiterals" (formula "2") (term "0,1,0,0,2,0,2,0"))
      (rule "equal_literals" (formula "2") (term "0,0,2,0"))
       (builtin "One Step Simplification" (formula "2"))
      (rule "polySimp_mulLiterals" (formula "2") (term "1,0,0,0,2,0"))
      (rule "polySimp_pullOutFactor0" (formula "2") (term "0,0,0,2,0"))
      (rule "add_literals" (formula "2") (term "1,0,0,0,2,0"))
      (rule "times_zero_1" (formula "2") (term "0,0,0,2,0"))
      (rule "div_literals" (formula "2") (term "0,0,2,0"))
      (rule "add_zero_left" (formula "2") (term "0,2,0"))
      (rule "polySimp_mulLiterals" (formula "2") (term "2,0"))
      (rule "polySimp_elimOne" (formula "2") (term "2,0"))
       (builtin "One Step Simplification" (formula "2"))
      (rule "polyDiv_pullOut" (formula "2") (term "0,1") (inst "polyDivCoeff=l_0"))
      (rule "polySimp_mulLiterals" (formula "2") (term "1,0,0,2,0,1"))
      (rule "equal_literals" (formula "2") (term "0,0,1"))
       (builtin "One Step Simplification" (formula "2"))
      (rule "polySimp_homoEq" (formula "2") (term "1"))
      (rule "polySimp_pullOutFactor0" (formula "2") (term "0,0,0,1,0,1"))
      (rule "add_literals" (formula "2") (term "1,0,0,0,1,0,1"))
      (rule "times_zero_1" (formula "2") (term "0,0,0,1,0,1"))
      (rule "div_literals" (formula "2") (term "0,0,1,0,1"))
      (rule "add_zero_left" (formula "2") (term "0,1,0,1"))
      (rule "polySimp_pullOutFactor1" (formula "2") (term "0,1"))
      (rule "add_literals" (formula "2") (term "1,0,1"))
      (rule "times_zero_1" (formula "2") (term "0,1"))
       (builtin "One Step Simplification" (formula "2"))
      (rule "true_left" (formula "2"))
      (rule "methodCallWithAssignmentUnfoldTarget" (formula "15") (term "1") (inst "#v0=c"))
      (rule "variableDeclaration" (formula "15") (term "1") (newnames "c_7"))
      (rule "assignment_read_attribute_this" (formula "15") (term "1"))
       (builtin "One Step Simplification" (formula "15"))
       (builtin "Use Operation Contract" (formula "15") (newnames "heapBefore_getCurrentLineNumber_0,result_343,exc_456") (contract "org.apache.commons.csv.CSVParser[org.apache.commons.csv.CSVParser::getCurrentLineNumber()].JML normal_behavior operation contract.0"))
      (branch "Post (getCurrentLineNumber)"
          (builtin "One Step Simplification" (formula "11"))
          (builtin "One Step Simplification" (formula "16"))
         (rule "expand_inLong" (formula "11") (term "1,0"))
         (rule "replace_long_MAX" (formula "11") (term "1,0,1,0"))
         (rule "replace_long_MIN" (formula "11") (term "0,1,1,0"))
         (rule "andLeft" (formula "11"))
         (rule "andLeft" (formula "12"))
         (rule "andLeft" (formula "11"))
         (rule "andLeft" (formula "11"))
         (rule "inEqSimp_commuteLeq" (formula "12"))
         (rule "assignment" (formula "19") (term "1"))
          (builtin "One Step Simplification" (formula "19"))
         (rule "stringConcatIntExpRight" (formula "19") (term "1") (inst "sk=sk_0"))
          (builtin "One Step Simplification" (formula "21"))
          (builtin "One Step Simplification" (formula "20"))
          (builtin "One Step Simplification" (formula "1"))
         (rule "poolKeyIsContentOfValue" (formula "1") (term "0,1"))
         (rule "variableDeclarationAssign" (formula "21") (term "1"))
         (rule "variableDeclaration" (formula "21") (term "1") (newnames "s_2"))
         (rule "stringAssignment" (formula "21") (term "1"))
          (builtin "One Step Simplification" (formula "23"))
          (builtin "One Step Simplification" (formula "1"))
          (builtin "One Step Simplification" (formula "2"))
         (rule "notLeft" (formula "1"))
         (rule "stringConcat" (formula "23") (term "1") (inst "sk=sk_1"))
          (builtin "One Step Simplification" (formula "25"))
          (builtin "One Step Simplification" (formula "1"))
          (builtin "One Step Simplification" (formula "24"))
         (rule "poolKeyIsContentOfValue" (formula "1") (term "1,1"))
         (rule "assignment_write_static_attribute" (formula "25") (term "1"))
          (builtin "One Step Simplification" (formula "25"))
         (rule "applyEq" (formula "1") (term "0,1") (ifseqformula "3"))
         (rule "eqSeqConcat" (formula "3"))
         (rule "andLeft" (formula "3"))
         (rule "andLeft" (formula "3"))
         (rule "lenOfSeqConcat" (formula "5") (term "1,0"))
          (builtin "One Step Simplification" (formula "5"))
         (rule "lenOfSeqConcat" (formula "4") (term "2,0"))
          (builtin "One Step Simplification" (formula "4"))
         (rule "lenOfSeqConcat" (formula "3") (term "0,1"))
          (builtin "One Step Simplification" (formula "3"))
         (rule "lenOfSeqConcat" (formula "5") (term "1,1,0"))
          (builtin "One Step Simplification" (formula "5"))
         (rule "polySimp_addAssoc" (formula "5") (term "1,0"))
         (rule "add_literals" (formula "5") (term "0,1,0"))
         (rule "lenOfSeqConcat" (formula "4") (term "1,2,0"))
          (builtin "One Step Simplification" (formula "4"))
         (rule "polySimp_addAssoc" (formula "4") (term "2,0"))
         (rule "add_literals" (formula "4") (term "0,2,0"))
         (rule "lenOfSeqConcat" (formula "3") (term "1,0,1"))
          (builtin "One Step Simplification" (formula "3"))
         (rule "polySimp_addAssoc" (formula "3") (term "0,1"))
         (rule "add_literals" (formula "3") (term "0,0,1"))
         (rule "lenOfSeqConcat" (formula "5") (term "1,1,0"))
          (builtin "One Step Simplification" (formula "5"))
         (rule "polySimp_addAssoc" (formula "5") (term "1,0"))
         (rule "add_literals" (formula "5") (term "0,1,0"))
         (rule "lenOfSeqConcat" (formula "4") (term "1,2,0"))
          (builtin "One Step Simplification" (formula "4"))
         (rule "polySimp_addAssoc" (formula "4") (term "2,0"))
         (rule "add_literals" (formula "4") (term "0,2,0"))
         (rule "lenOfSeqConcat" (formula "3") (term "1,0,1"))
          (builtin "One Step Simplification" (formula "3"))
         (rule "polySimp_addAssoc" (formula "3") (term "0,1"))
         (rule "add_literals" (formula "3") (term "0,0,1"))
         (rule "lenOfSeqConcat" (formula "5") (term "1,1,0"))
          (builtin "One Step Simplification" (formula "5"))
         (rule "polySimp_addAssoc" (formula "5") (term "1,0"))
         (rule "add_literals" (formula "5") (term "0,1,0"))
         (rule "lenOfSeqConcat" (formula "4") (term "1,2,0"))
          (builtin "One Step Simplification" (formula "4"))
         (rule "polySimp_addAssoc" (formula "4") (term "2,0"))
         (rule "add_literals" (formula "4") (term "0,2,0"))
         (rule "lenOfSeqConcat" (formula "3") (term "1,0,1"))
          (builtin "One Step Simplification" (formula "3"))
         (rule "polySimp_addAssoc" (formula "3") (term "0,1"))
         (rule "add_literals" (formula "3") (term "0,0,1"))
         (rule "lenOfSeqConcat" (formula "5") (term "1,1,0"))
          (builtin "One Step Simplification" (formula "5"))
         (rule "polySimp_addAssoc" (formula "5") (term "1,0"))
         (rule "add_literals" (formula "5") (term "0,1,0"))
         (rule "lenOfSeqConcat" (formula "4") (term "1,2,0"))
          (builtin "One Step Simplification" (formula "4"))
         (rule "polySimp_addAssoc" (formula "4") (term "2,0"))
         (rule "add_literals" (formula "4") (term "0,2,0"))
         (rule "lenOfSeqConcat" (formula "3") (term "1,0,1"))
          (builtin "One Step Simplification" (formula "3"))
         (rule "polySimp_addAssoc" (formula "3") (term "0,1"))
         (rule "add_literals" (formula "3") (term "0,0,1"))
         (rule "lenOfSeqConcat" (formula "5") (term "1,1,0"))
          (builtin "One Step Simplification" (formula "5"))
         (rule "polySimp_addAssoc" (formula "5") (term "1,0"))
         (rule "add_literals" (formula "5") (term "0,1,0"))
         (rule "lenOfSeqConcat" (formula "4") (term "1,2,0"))
          (builtin "One Step Simplification" (formula "4"))
         (rule "polySimp_addAssoc" (formula "4") (term "2,0"))
         (rule "add_literals" (formula "4") (term "0,2,0"))
         (rule "lenOfSeqConcat" (formula "3") (term "1,0,1"))
          (builtin "One Step Simplification" (formula "3"))
         (rule "polySimp_addAssoc" (formula "3") (term "0,1"))
         (rule "add_literals" (formula "3") (term "0,0,1"))
         (rule "lenOfSeqConcat" (formula "5") (term "1,1,0"))
          (builtin "One Step Simplification" (formula "5"))
         (rule "polySimp_addAssoc" (formula "5") (term "1,0"))
         (rule "add_literals" (formula "5") (term "0,1,0"))
         (rule "lenOfSeqConcat" (formula "4") (term "1,2,0"))
          (builtin "One Step Simplification" (formula "4"))
         (rule "polySimp_addAssoc" (formula "4") (term "2,0"))
         (rule "add_literals" (formula "4") (term "0,2,0"))
         (rule "lenOfSeqConcat" (formula "3") (term "1,0,1"))
          (builtin "One Step Simplification" (formula "3"))
         (rule "polySimp_addAssoc" (formula "3") (term "0,1"))
         (rule "add_literals" (formula "3") (term "0,0,1"))
         (rule "lenOfSeqConcat" (formula "5") (term "1,1,0"))
          (builtin "One Step Simplification" (formula "5"))
         (rule "polySimp_addAssoc" (formula "5") (term "1,0"))
         (rule "add_literals" (formula "5") (term "0,1,0"))
         (rule "lenOfSeqConcat" (formula "4") (term "1,2,0"))
          (builtin "One Step Simplification" (formula "4"))
         (rule "polySimp_addAssoc" (formula "4") (term "2,0"))
         (rule "add_literals" (formula "4") (term "0,2,0"))
         (rule "lenOfSeqConcat" (formula "3") (term "1,0,1"))
          (builtin "One Step Simplification" (formula "3"))
         (rule "polySimp_addAssoc" (formula "3") (term "0,1"))
         (rule "add_literals" (formula "3") (term "0,0,1"))
         (rule "lenOfSeqConcat" (formula "5") (term "1,1,0"))
          (builtin "One Step Simplification" (formula "5"))
         (rule "add_literals" (formula "5") (term "1,1,0"))
         (rule "add_literals" (formula "5") (term "1,0"))
         (rule "lenOfSeqConcat" (formula "4") (term "1,2,0"))
          (builtin "One Step Simplification" (formula "4"))
         (rule "add_literals" (formula "4") (term "1,2,0"))
         (rule "add_literals" (formula "4") (term "2,0"))
         (rule "lenOfSeqConcat" (formula "3") (term "1,0,1"))
          (builtin "One Step Simplification" (formula "3"))
         (rule "add_literals" (formula "3") (term "1,0,1"))
         (rule "add_literals" (formula "3") (term "0,1"))
         (rule "lenOfSeqSubEQ" (formula "3") (term "1,1") (ifseqformula "5"))
         (rule "polySimp_elimSub" (formula "3") (term "1,1,1"))
         (rule "mul_literals" (formula "3") (term "1,1,1,1"))
         (rule "polySimp_homoEq" (formula "3"))
         (rule "polySimp_addComm1" (formula "3") (term "0"))
         (rule "polySimp_addComm0" (formula "3") (term "1,1,0"))
         (rule "inEqSimp_ltToLeq" (formula "3") (term "0,1,0"))
         (rule "polySimp_mulComm0" (formula "3") (term "1,0,0,0,1,0"))
         (rule "polySimp_addComm1" (formula "3") (term "0,0,1,0"))
         (rule "add_literals" (formula "3") (term "0,0,0,1,0"))
         (rule "polySimp_sepPosMonomial" (formula "3"))
         (rule "polySimp_mulComm0" (formula "3") (term "1"))
         (rule "polySimp_rightDist" (formula "3") (term "1"))
         (rule "polySimp_mulLiterals" (formula "3") (term "1,1"))
         (rule "mul_literals" (formula "3") (term "0,1"))
         (rule "polySimp_elimOne" (formula "3") (term "1,1"))
          (builtin "One Step Simplification" (formula "3"))
         (rule "polySimp_homoEq" (formula "3") (term "1"))
         (rule "times_zero_2" (formula "3") (term "1,0,1"))
         (rule "add_zero_right" (formula "3") (term "0,1"))
         (rule "polySimp_sepPosMonomial" (formula "3") (term "1"))
         (rule "mul_literals" (formula "3") (term "1,1"))
         (rule "inEqSimp_sepNegMonomial0" (formula "3") (term "0"))
         (rule "polySimp_mulLiterals" (formula "3") (term "0,0"))
         (rule "polySimp_elimOne" (formula "3") (term "0,0"))
         (rule "pullOutSelect" (formula "2") (term "0") (inst "selectSK=java_lang_Object_created__0"))
         (rule "simplifySelectOfCreate" (formula "2"))
          (builtin "One Step Simplification" (formula "2") (ifInst ""  (formula "26")))
         (rule "castDel" (formula "2") (term "1,0"))
         (rule "applyEqRigid" (formula "2") (term "1") (ifseqformula "3"))
          (builtin "One Step Simplification" (formula "2"))
         (rule "eqSeqConcat" (formula "1"))
         (rule "andLeft" (formula "1"))
         (rule "andLeft" (formula "1"))
         (rule "polySimp_addComm0" (formula "1") (term "1"))
         (rule "lenOfSeqConcat" (formula "3") (term "1,0"))
         (rule "lenOfSeqConcat" (formula "2") (term "2,0"))
         (rule "lenOfSeqConcat" (formula "1") (term "0,1"))
          (builtin "One Step Simplification" (formula "1"))
         (rule "lenOfSeqConcat" (formula "3") (term "0,1,0"))
          (builtin "One Step Simplification" (formula "3"))
         (rule "lenOfSeqConcat" (formula "2") (term "0,2,0"))
          (builtin "One Step Simplification" (formula "2"))
         (rule "lenOfSeqConcat" (formula "1") (term "1,1"))
         (rule "polySimp_addAssoc" (formula "1") (term "1"))
         (rule "lenOfSeqConcat" (formula "3") (term "1,0,1,0"))
          (builtin "One Step Simplification" (formula "3"))
         (rule "polySimp_addAssoc" (formula "3") (term "0,1,0"))
         (rule "add_literals" (formula "3") (term "0,0,1,0"))
         (rule "lenOfSeqConcat" (formula "2") (term "1,0,2,0"))
          (builtin "One Step Simplification" (formula "2"))
         (rule "polySimp_addAssoc" (formula "2") (term "0,2,0"))
         (rule "add_literals" (formula "2") (term "0,0,2,0"))
         (rule "lenOfSeqConcat" (formula "1") (term "1,0,0,1"))
          (builtin "One Step Simplification" (formula "1"))
         (rule "polySimp_addAssoc" (formula "1") (term "0,0,1"))
         (rule "add_literals" (formula "1") (term "0,0,0,1"))
         (rule "lenOfSeqConcat" (formula "3") (term "1,0,1,0"))
          (builtin "One Step Simplification" (formula "3"))
         (rule "polySimp_addAssoc" (formula "3") (term "0,1,0"))
         (rule "add_literals" (formula "3") (term "0,0,1,0"))
         (rule "lenOfSeqConcat" (formula "2") (term "1,0,2,0"))
          (builtin "One Step Simplification" (formula "2"))
         (rule "polySimp_addAssoc" (formula "2") (term "0,2,0"))
         (rule "add_literals" (formula "2") (term "0,0,2,0"))
         (rule "lenOfSeqConcat" (formula "1") (term "1,0,1"))
          (builtin "One Step Simplification" (formula "1"))
         (rule "polySimp_addAssoc" (formula "1") (term "0,1"))
         (rule "polySimp_addComm1" (formula "1") (term "0,0,1"))
         (rule "add_literals" (formula "1") (term "0,0,0,1"))
         (rule "lenOfSeqConcat" (formula "3") (term "1,0,1,0"))
          (builtin "One Step Simplification" (formula "3"))
         (rule "polySimp_addAssoc" (formula "3") (term "0,1,0"))
         (rule "add_literals" (formula "3") (term "0,0,1,0"))
         (rule "lenOfSeqConcat" (formula "2") (term "1,0,2,0"))
          (builtin "One Step Simplification" (formula "2"))
         (rule "polySimp_addAssoc" (formula "2") (term "0,2,0"))
         (rule "add_literals" (formula "2") (term "0,0,2,0"))
         (rule "lenOfSeqConcat" (formula "1") (term "1,0,1"))
          (builtin "One Step Simplification" (formula "1"))
         (rule "polySimp_addAssoc" (formula "1") (term "0,1"))
         (rule "polySimp_addComm1" (formula "1") (term "0,0,1"))
         (rule "add_literals" (formula "1") (term "0,0,0,1"))
         (rule "lenOfSeqConcat" (formula "3") (term "1,0,1,0"))
          (builtin "One Step Simplification" (formula "3"))
         (rule "polySimp_addAssoc" (formula "3") (term "0,1,0"))
         (rule "add_literals" (formula "3") (term "0,0,1,0"))
         (rule "lenOfSeqConcat" (formula "2") (term "1,0,2,0"))
          (builtin "One Step Simplification" (formula "2"))
         (rule "polySimp_addAssoc" (formula "2") (term "0,2,0"))
         (rule "add_literals" (formula "2") (term "0,0,2,0"))
         (rule "lenOfSeqConcat" (formula "1") (term "1,0,1"))
          (builtin "One Step Simplification" (formula "1"))
         (rule "polySimp_addAssoc" (formula "1") (term "0,1"))
         (rule "polySimp_addComm1" (formula "1") (term "0,0,1"))
         (rule "add_literals" (formula "1") (term "0,0,0,1"))
         (rule "lenOfSeqConcat" (formula "3") (term "1,0,1,0"))
          (builtin "One Step Simplification" (formula "3"))
         (rule "polySimp_addAssoc" (formula "3") (term "0,1,0"))
         (rule "add_literals" (formula "3") (term "0,0,1,0"))
         (rule "lenOfSeqConcat" (formula "2") (term "1,0,2,0"))
          (builtin "One Step Simplification" (formula "2"))
         (rule "polySimp_addAssoc" (formula "2") (term "0,2,0"))
         (rule "add_literals" (formula "2") (term "0,0,2,0"))
         (rule "lenOfSeqConcat" (formula "1") (term "1,0,1"))
          (builtin "One Step Simplification" (formula "1"))
         (rule "polySimp_addAssoc" (formula "1") (term "0,1"))
         (rule "polySimp_addComm1" (formula "1") (term "0,0,1"))
         (rule "add_literals" (formula "1") (term "0,0,0,1"))
         (rule "lenOfSeqConcat" (formula "3") (term "1,0,1,0"))
          (builtin "One Step Simplification" (formula "3"))
         (rule "polySimp_addAssoc" (formula "3") (term "0,1,0"))
         (rule "add_literals" (formula "3") (term "0,0,1,0"))
         (rule "lenOfSeqConcat" (formula "2") (term "1,0,2,0"))
          (builtin "One Step Simplification" (formula "2"))
         (rule "polySimp_addAssoc" (formula "2") (term "0,2,0"))
         (rule "add_literals" (formula "2") (term "0,0,2,0"))
         (rule "lenOfSeqConcat" (formula "1") (term "1,0,1"))
          (builtin "One Step Simplification" (formula "1"))
         (rule "polySimp_addAssoc" (formula "1") (term "0,1"))
         (rule "polySimp_addComm1" (formula "1") (term "0,0,1"))
         (rule "add_literals" (formula "1") (term "0,0,0,1"))
         (rule "lenOfSeqConcat" (formula "3") (term "1,0,1,0"))
          (builtin "One Step Simplification" (formula "3"))
         (rule "polySimp_addAssoc" (formula "3") (term "0,1,0"))
         (rule "add_literals" (formula "3") (term "0,0,1,0"))
         (rule "lenOfSeqConcat" (formula "2") (term "1,0,2,0"))
          (builtin "One Step Simplification" (formula "2"))
         (rule "polySimp_addAssoc" (formula "2") (term "0,2,0"))
         (rule "add_literals" (formula "2") (term "0,0,2,0"))
         (rule "lenOfSeqConcat" (formula "1") (term "1,0,1"))
          (builtin "One Step Simplification" (formula "1"))
         (rule "polySimp_addAssoc" (formula "1") (term "0,1"))
         (rule "polySimp_addComm1" (formula "1") (term "0,0,1"))
         (rule "add_literals" (formula "1") (term "0,0,0,1"))
         (rule "lenOfSeqConcat" (formula "3") (term "1,0,1,0"))
          (builtin "One Step Simplification" (formula "3"))
         (rule "add_literals" (formula "3") (term "1,0,1,0"))
         (rule "add_literals" (formula "3") (term "0,1,0"))
         (rule "lenOfSeqConcat" (formula "2") (term "1,0,2,0"))
          (builtin "One Step Simplification" (formula "2"))
         (rule "add_literals" (formula "2") (term "1,0,2,0"))
         (rule "add_literals" (formula "2") (term "0,2,0"))
         (rule "lenOfSeqConcat" (formula "1") (term "1,0,1"))
          (builtin "One Step Simplification" (formula "1"))
         (rule "polySimp_addComm1" (formula "1") (term "0,1"))
         (rule "polySimp_addAssoc" (formula "1") (term "0,0,1"))
         (rule "add_literals" (formula "1") (term "0,0,0,1"))
         (rule "lenOfSeqConcat" (formula "1") (term "1,0,1"))
          (builtin "One Step Simplification" (formula "1"))
         (rule "polySimp_addComm1" (formula "1") (term "0,1"))
         (rule "polySimp_addAssoc" (formula "1") (term "0,0,1"))
         (rule "add_literals" (formula "1") (term "0,0,0,1"))
         (rule "lenOfSeqSubEQ" (formula "2") (term "1,2,0") (ifseqformula "8"))
         (rule "polySimp_elimSub" (formula "2") (term "1,1,2,0"))
         (rule "mul_literals" (formula "2") (term "1,1,1,2,0"))
         (rule "polySimp_addComm0" (formula "2") (term "1,1,2,0"))
         (rule "lenOfSeqSubEQ" (formula "3") (term "1,1,0") (ifseqformula "8"))
         (rule "polySimp_elimSub" (formula "3") (term "1,1,1,0"))
         (rule "mul_literals" (formula "3") (term "1,1,1,1,0"))
         (rule "polySimp_addComm0" (formula "3") (term "1,1,1,0"))
         (rule "lenOfSeqConcat" (formula "1") (term "1,0,1"))
          (builtin "One Step Simplification" (formula "1"))
         (rule "polySimp_addComm1" (formula "1") (term "0,1"))
         (rule "polySimp_addAssoc" (formula "1") (term "0,0,1"))
         (rule "add_literals" (formula "1") (term "0,0,0,1"))
         (rule "lenOfSeqConcat" (formula "1") (term "1,0,1"))
          (builtin "One Step Simplification" (formula "1"))
         (rule "polySimp_addAssoc" (formula "1") (term "0,1"))
         (rule "polySimp_addComm1" (formula "1") (term "0,0,1"))
         (rule "add_literals" (formula "1") (term "0,0,0,1"))
         (rule "lenOfSeqConcat" (formula "1") (term "1,0,1"))
          (builtin "One Step Simplification" (formula "1"))
         (rule "add_literals" (formula "1") (term "1,0,1"))
         (rule "polySimp_addComm1" (formula "1") (term "0,1"))
         (rule "add_literals" (formula "1") (term "0,0,1"))
         (rule "inEqSimp_ltToLeq" (formula "2") (term "0,1,2,0"))
         (rule "polySimp_mulComm0" (formula "2") (term "1,0,0,0,1,2,0"))
         (rule "polySimp_addComm1" (formula "2") (term "0,0,1,2,0"))
         (rule "add_literals" (formula "2") (term "0,0,0,1,2,0"))
         (rule "lenOfSeqConcat" (formula "1") (term "1,0,1"))
          (builtin "One Step Simplification" (formula "1"))
         (rule "add_literals" (formula "1") (term "1,0,1"))
         (rule "add_literals" (formula "1") (term "0,1"))
         (rule "inEqSimp_ltToLeq" (formula "3") (term "0,1,1,0"))
         (rule "polySimp_mulComm0" (formula "3") (term "1,0,0,0,1,1,0"))
         (rule "polySimp_addComm1" (formula "3") (term "0,0,1,1,0"))
         (rule "add_literals" (formula "3") (term "0,0,0,1,1,0"))
         (rule "lenOfSeqSubEQ" (formula "1") (term "1,1") (ifseqformula "8"))
         (rule "polySimp_homoEq" (formula "1"))
         (rule "polySimp_elimSub" (formula "1") (term "1,1,0,0"))
         (rule "mul_literals" (formula "1") (term "1,1,1,0,0"))
         (rule "polySimp_addComm0" (formula "1") (term "1,1,0,0"))
         (rule "polySimp_addComm1" (formula "1") (term "0"))
         (rule "inEqSimp_ltToLeq" (formula "1") (term "0,1,0"))
         (rule "polySimp_mulComm0" (formula "1") (term "1,0,0,0,1,0"))
         (rule "polySimp_addComm1" (formula "1") (term "0,0,1,0"))
         (rule "add_literals" (formula "1") (term "0,0,0,1,0"))
         (rule "polySimp_sepPosMonomial" (formula "1"))
         (rule "polySimp_mulComm0" (formula "1") (term "1"))
         (rule "polySimp_rightDist" (formula "1") (term "1"))
         (rule "mul_literals" (formula "1") (term "0,1"))
         (rule "polySimp_mulLiterals" (formula "1") (term "1,1"))
         (rule "polySimp_elimOne" (formula "1") (term "1,1"))
         (rule "applyEq" (formula "2") (term "1,2,0") (ifseqformula "1"))
         (rule "polySimp_addAssoc" (formula "2") (term "2,0"))
         (rule "add_literals" (formula "2") (term "0,2,0"))
         (rule "applyEqRigid" (formula "3") (term "1,1,0") (ifseqformula "1"))
         (rule "polySimp_addAssoc" (formula "3") (term "1,0"))
         (rule "add_literals" (formula "3") (term "0,1,0"))
         (rule "inEqSimp_sepNegMonomial0" (formula "1") (term "0,0"))
         (rule "polySimp_mulLiterals" (formula "1") (term "0,0,0"))
         (rule "polySimp_elimOne" (formula "1") (term "0,0,0"))
         (rule "eqSeqConcat" (formula "7"))
          (builtin "One Step Simplification" (formula "7"))
         (rule "andLeft" (formula "7"))
         (rule "andLeft" (formula "7"))
         (rule "lenOfSeqSub" (formula "9") (term "2,0"))
         (rule "sub_literals" (formula "9") (term "1,2,0"))
         (rule "less_literals" (formula "9") (term "0,2,0"))
          (builtin "One Step Simplification" (formula "9"))
         (rule "lenOfSeqSub" (formula "7") (term "0"))
         (rule "less_literals" (formula "7") (term "0,0"))
          (builtin "One Step Simplification" (formula "7"))
         (rule "sub_literals" (formula "7") (term "0"))
         (rule "polySimp_homoEq" (formula "7"))
         (rule "mul_literals" (formula "7") (term "1,0"))
         (rule "polySimp_addComm1" (formula "7") (term "0"))
         (rule "add_literals" (formula "7") (term "0,0"))
         (rule "eqSeqSingleton" (formula "8"))
         (rule "andLeft" (formula "8"))
         (rule "lenOfSeqConcat" (formula "7") (term "1,0"))
          (builtin "One Step Simplification" (formula "7"))
         (rule "polySimp_addAssoc" (formula "7") (term "0"))
         (rule "add_literals" (formula "7") (term "0,0"))
         (rule "lenOfSeqSub" (formula "8") (term "0"))
         (rule "sub_literals" (formula "8") (term "1,0"))
          (builtin "One Step Simplification" (formula "8"))
         (rule "equal_literals" (formula "8") (term "1"))
          (builtin "One Step Simplification" (formula "8"))
         (rule "less_literals" (formula "8"))
         (rule "true_left" (formula "8"))
         (rule "lenOfSeqConcat" (formula "7") (term "1,0"))
          (builtin "One Step Simplification" (formula "7"))
         (rule "polySimp_addAssoc" (formula "7") (term "0"))
         (rule "add_literals" (formula "7") (term "0,0"))
         (rule "lenOfSeqConcat" (formula "7") (term "1,0"))
          (builtin "One Step Simplification" (formula "7"))
         (rule "polySimp_addAssoc" (formula "7") (term "0"))
         (rule "add_literals" (formula "7") (term "0,0"))
         (rule "lenOfSeqConcat" (formula "7") (term "1,0"))
          (builtin "One Step Simplification" (formula "7"))
         (rule "polySimp_addAssoc" (formula "7") (term "0"))
         (rule "add_literals" (formula "7") (term "0,0"))
         (rule "lenOfSeqConcat" (formula "7") (term "1,0"))
          (builtin "One Step Simplification" (formula "7"))
         (rule "polySimp_addAssoc" (formula "7") (term "0"))
         (rule "add_literals" (formula "7") (term "0,0"))
         (rule "lenOfSeqConcat" (formula "7") (term "1,0"))
          (builtin "One Step Simplification" (formula "7"))
         (rule "polySimp_addAssoc" (formula "7") (term "0"))
         (rule "add_literals" (formula "7") (term "0,0"))
         (rule "lenOfSeqConcat" (formula "7") (term "1,0"))
          (builtin "One Step Simplification" (formula "7"))
         (rule "polySimp_addAssoc" (formula "7") (term "0"))
         (rule "add_literals" (formula "7") (term "0,0"))
         (rule "lenOfSeqConcat" (formula "7") (term "1,0"))
          (builtin "One Step Simplification" (formula "7"))
         (rule "add_literals" (formula "7") (term "1,0"))
         (rule "add_literals" (formula "7") (term "0"))
          (builtin "One Step Simplification" (formula "7"))
         (rule "true_left" (formula "7"))
         (rule "getOfSeqSub" (formula "7") (term "0"))
         (rule "castDel" (formula "7") (term "2,0"))
         (rule "add_zero_left" (formula "7") (term "1,1,0"))
         (rule "sub_literals" (formula "7") (term "1,1,0,0"))
         (rule "leq_literals" (formula "7") (term "0,0,0"))
          (builtin "One Step Simplification" (formula "7"))
         (rule "less_literals" (formula "7") (term "0,0"))
          (builtin "One Step Simplification" (formula "7"))
         (rule "getOfSeqSub" (formula "7") (term "0"))
         (rule "castDel" (formula "7") (term "2,0"))
         (rule "add_zero_left" (formula "7") (term "1,1,0"))
         (rule "sub_literals" (formula "7") (term "1,1,0,0"))
         (rule "leq_literals" (formula "7") (term "0,0,0"))
          (builtin "One Step Simplification" (formula "7"))
         (rule "less_literals" (formula "7") (term "0,0"))
          (builtin "One Step Simplification" (formula "7"))
         (rule "eqSeqConcat" (formula "2"))
         (rule "andLeft" (formula "2"))
         (rule "andLeft" (formula "2"))
         (rule "lenOfSeqConcat" (formula "4") (term "1,0"))
          (builtin "One Step Simplification" (formula "4"))
         (rule "lenOfSeqConcat" (formula "2") (term "0,1"))
          (builtin "One Step Simplification" (formula "2"))
         (rule "lenOfSeqConcat" (formula "3") (term "2,0"))
          (builtin "One Step Simplification" (formula "3"))
         (rule "lenOfSeqSub" (formula "4") (term "2,0"))
         (rule "polySimp_elimSub" (formula "4") (term "1,2,0"))
         (rule "times_zero_2" (formula "4") (term "1,1,2,0"))
         (rule "add_zero_right" (formula "4") (term "1,2,0"))
         (rule "lenOfSeqConcat" (formula "4") (term "1,1,0"))
          (builtin "One Step Simplification" (formula "4"))
         (rule "polySimp_addAssoc" (formula "4") (term "1,0"))
         (rule "add_literals" (formula "4") (term "0,1,0"))
         (rule "lenOfSeqSub" (formula "2") (term "0"))
         (rule "polySimp_elimSub" (formula "2") (term "1,0"))
         (rule "times_zero_2" (formula "2") (term "1,1,0"))
         (rule "add_zero_right" (formula "2") (term "1,0"))
         (rule "lenOfSeqConcat" (formula "2") (term "1,0,1"))
          (builtin "One Step Simplification" (formula "2"))
         (rule "lenOfSeqConcat" (formula "3") (term "1,2,0"))
          (builtin "One Step Simplification" (formula "3"))
         (rule "polySimp_addAssoc" (formula "2") (term "0,1"))
         (rule "add_literals" (formula "2") (term "0,0,1"))
         (rule "polySimp_addAssoc" (formula "3") (term "2,0"))
         (rule "add_literals" (formula "3") (term "0,2,0"))
         (rule "lenOfSeqConcat" (formula "4") (term "1,1,0"))
          (builtin "One Step Simplification" (formula "4"))
         (rule "polySimp_addAssoc" (formula "4") (term "1,0"))
         (rule "add_literals" (formula "4") (term "0,1,0"))
         (rule "lenOfSeqConcat" (formula "2") (term "1,0,1"))
          (builtin "One Step Simplification" (formula "2"))
         (rule "polySimp_addAssoc" (formula "2") (term "0,1"))
         (rule "add_literals" (formula "2") (term "0,0,1"))
         (rule "lenOfSeqConcat" (formula "3") (term "1,2,0"))
          (builtin "One Step Simplification" (formula "3"))
         (rule "polySimp_addAssoc" (formula "3") (term "2,0"))
         (rule "add_literals" (formula "3") (term "0,2,0"))
         (rule "lenOfSeqConcat" (formula "4") (term "1,1,0"))
          (builtin "One Step Simplification" (formula "4"))
         (rule "polySimp_addAssoc" (formula "4") (term "1,0"))
         (rule "add_literals" (formula "4") (term "0,1,0"))
         (rule "lenOfSeqConcat" (formula "2") (term "1,0,1"))
          (builtin "One Step Simplification" (formula "2"))
         (rule "polySimp_addAssoc" (formula "2") (term "0,1"))
         (rule "add_literals" (formula "2") (term "0,0,1"))
         (rule "lenOfSeqConcat" (formula "3") (term "1,2,0"))
          (builtin "One Step Simplification" (formula "3"))
         (rule "polySimp_addAssoc" (formula "3") (term "2,0"))
         (rule "add_literals" (formula "3") (term "0,2,0"))
         (rule "lenOfSeqConcat" (formula "4") (term "1,1,0"))
          (builtin "One Step Simplification" (formula "4"))
         (rule "polySimp_addAssoc" (formula "4") (term "1,0"))
         (rule "add_literals" (formula "4") (term "0,1,0"))
         (rule "lenOfSeqConcat" (formula "2") (term "1,0,1"))
          (builtin "One Step Simplification" (formula "2"))
         (rule "polySimp_addAssoc" (formula "2") (term "0,1"))
         (rule "add_literals" (formula "2") (term "0,0,1"))
         (rule "lenOfSeqConcat" (formula "3") (term "1,2,0"))
          (builtin "One Step Simplification" (formula "3"))
         (rule "polySimp_addAssoc" (formula "3") (term "2,0"))
         (rule "add_literals" (formula "3") (term "0,2,0"))
         (rule "lenOfSeqConcat" (formula "4") (term "1,1,0"))
          (builtin "One Step Simplification" (formula "4"))
         (rule "polySimp_addAssoc" (formula "4") (term "1,0"))
         (rule "add_literals" (formula "4") (term "0,1,0"))
         (rule "lenOfSeqConcat" (formula "2") (term "1,0,1"))
          (builtin "One Step Simplification" (formula "2"))
         (rule "polySimp_addAssoc" (formula "2") (term "0,1"))
         (rule "add_literals" (formula "2") (term "0,0,1"))
         (rule "lenOfSeqConcat" (formula "3") (term "1,2,0"))
          (builtin "One Step Simplification" (formula "3"))
         (rule "polySimp_addAssoc" (formula "3") (term "2,0"))
         (rule "add_literals" (formula "3") (term "0,2,0"))
         (rule "lenOfSeqConcat" (formula "4") (term "1,1,0"))
          (builtin "One Step Simplification" (formula "4"))
         (rule "polySimp_addAssoc" (formula "4") (term "1,0"))
         (rule "add_literals" (formula "4") (term "0,1,0"))
         (rule "lenOfSeqConcat" (formula "2") (term "1,0,1"))
          (builtin "One Step Simplification" (formula "2"))
         (rule "polySimp_addAssoc" (formula "2") (term "0,1"))
         (rule "add_literals" (formula "2") (term "0,0,1"))
         (rule "lenOfSeqConcat" (formula "3") (term "1,2,0"))
          (builtin "One Step Simplification" (formula "3"))
         (rule "polySimp_addAssoc" (formula "3") (term "2,0"))
         (rule "add_literals" (formula "3") (term "0,2,0"))
         (rule "lenOfSeqConcat" (formula "4") (term "1,1,0"))
          (builtin "One Step Simplification" (formula "4"))
         (rule "polySimp_addAssoc" (formula "4") (term "1,0"))
         (rule "add_literals" (formula "4") (term "0,1,0"))
         (rule "lenOfSeqConcat" (formula "2") (term "1,0,1"))
          (builtin "One Step Simplification" (formula "2"))
         (rule "polySimp_addAssoc" (formula "2") (term "0,1"))
         (rule "add_literals" (formula "2") (term "0,0,1"))
         (rule "lenOfSeqConcat" (formula "3") (term "1,2,0"))
          (builtin "One Step Simplification" (formula "3"))
         (rule "polySimp_addAssoc" (formula "3") (term "2,0"))
         (rule "add_literals" (formula "3") (term "0,2,0"))
         (rule "lenOfSeqConcat" (formula "4") (term "1,1,0"))
          (builtin "One Step Simplification" (formula "4"))
         (rule "add_literals" (formula "4") (term "1,1,0"))
         (rule "add_literals" (formula "4") (term "1,0"))
         (rule "lenOfSeqConcat" (formula "2") (term "1,0,1"))
          (builtin "One Step Simplification" (formula "2"))
         (rule "add_literals" (formula "2") (term "1,0,1"))
         (rule "add_literals" (formula "2") (term "0,1"))
         (rule "lenOfSeqConcat" (formula "3") (term "1,2,0"))
          (builtin "One Step Simplification" (formula "3"))
         (rule "add_literals" (formula "3") (term "1,2,0"))
         (rule "add_literals" (formula "3") (term "2,0"))
         (rule "lenOfSeqSubEQ" (formula "2") (term "1,1") (ifseqformula "4"))
         (rule "polySimp_homoEq" (formula "2"))
         (rule "polySimp_elimSub" (formula "2") (term "1,1,0,0"))
         (rule "mul_literals" (formula "2") (term "1,1,1,0,0"))
         (rule "polySimp_addComm1" (formula "2") (term "0"))
         (rule "polySimp_addComm0" (formula "2") (term "1,1,0"))
         (rule "inEqSimp_ltToLeq" (formula "4") (term "0,2,0"))
         (rule "add_zero_right" (formula "4") (term "0,0,2,0"))
         (rule "polySimp_rightDist" (formula "4") (term "1,0,0,2,0"))
         (rule "mul_literals" (formula "4") (term "0,1,0,0,2,0"))
         (rule "polySimp_addAssoc" (formula "4") (term "0,0,2,0"))
         (rule "add_literals" (formula "4") (term "0,0,0,2,0"))
         (rule "inEqSimp_ltToLeq" (formula "2") (term "0,1,0"))
         (rule "polySimp_mulComm0" (formula "2") (term "1,0,0,0,1,0"))
         (rule "polySimp_addComm1" (formula "2") (term "0,0,1,0"))
         (rule "add_literals" (formula "2") (term "0,0,0,1,0"))
         (rule "inEqSimp_ltToLeq" (formula "2") (term "0,0,1,0,0"))
         (rule "add_zero_right" (formula "2") (term "0,0,0,1,0,0"))
         (rule "polySimp_rightDist" (formula "2") (term "1,0,0,0,1,0,0"))
         (rule "mul_literals" (formula "2") (term "0,1,0,0,0,1,0,0"))
         (rule "polySimp_addAssoc" (formula "2") (term "0,0,0,1,0,0"))
         (rule "add_literals" (formula "2") (term "0,0,0,0,1,0,0"))
         (rule "inEqSimp_ltToLeq" (formula "2") (term "0,1,1,1,0"))
         (rule "add_zero_right" (formula "2") (term "0,0,1,1,1,0"))
         (rule "polySimp_rightDist" (formula "2") (term "1,0,0,1,1,1,0"))
         (rule "mul_literals" (formula "2") (term "0,1,0,0,1,1,1,0"))
         (rule "polySimp_addAssoc" (formula "2") (term "0,0,1,1,1,0"))
         (rule "add_literals" (formula "2") (term "0,0,0,1,1,1,0"))
         (rule "inEqSimp_ltToLeq" (formula "2") (term "0,0,1,0,0,1,0"))
         (rule "add_zero_right" (formula "2") (term "0,0,0,1,0,0,1,0"))
         (rule "polySimp_rightDist" (formula "2") (term "1,0,0,0,1,0,0,1,0"))
         (rule "mul_literals" (formula "2") (term "0,1,0,0,0,1,0,0,1,0"))
         (rule "polySimp_addAssoc" (formula "2") (term "0,0,0,1,0,0,1,0"))
         (rule "add_literals" (formula "2") (term "0,0,0,0,1,0,0,1,0"))
         (rule "polySimp_sepPosMonomial" (formula "2"))
         (rule "polySimp_mulComm0" (formula "2") (term "1"))
         (rule "polySimp_rightDist" (formula "2") (term "1"))
         (rule "polySimp_mulLiterals" (formula "2") (term "1,1"))
         (rule "mul_literals" (formula "2") (term "0,1"))
         (rule "polySimp_elimOne" (formula "2") (term "1,1"))
          (builtin "One Step Simplification" (formula "2"))
         (rule "polySimp_homoEq" (formula "2") (term "1"))
         (rule "times_zero_2" (formula "2") (term "1,0,1"))
         (rule "add_zero_right" (formula "2") (term "0,1"))
         (rule "polySimp_sepPosMonomial" (formula "2") (term "1"))
         (rule "mul_literals" (formula "2") (term "1,1"))
         (rule "ifEqualsInteger" (formula "2") (term "1"))
         (rule "equal_literals" (formula "2") (term "1,1,1"))
          (builtin "One Step Simplification" (formula "2"))
         (rule "polySimp_homoEq" (formula "2") (term "1,1"))
         (rule "polySimp_mulComm0" (formula "2") (term "1,0,1,1"))
         (rule "polySimp_rightDist" (formula "2") (term "1,0,1,1"))
         (rule "mul_literals" (formula "2") (term "0,1,0,1,1"))
         (rule "polySimp_addAssoc" (formula "2") (term "0,1,1"))
         (rule "add_literals" (formula "2") (term "0,0,1,1"))
         (rule "polySimp_sepNegMonomial" (formula "2") (term "1,1"))
         (rule "polySimp_mulLiterals" (formula "2") (term "0,1,1"))
         (rule "polySimp_elimOne" (formula "2") (term "0,1,1"))
         (rule "inEqSimp_sepNegMonomial0" (formula "4") (term "0,2,0"))
         (rule "polySimp_mulLiterals" (formula "4") (term "0,0,2,0"))
         (rule "polySimp_elimOne" (formula "4") (term "0,0,2,0"))
         (rule "inEqSimp_sepNegMonomial0" (formula "2") (term "0"))
         (rule "polySimp_mulLiterals" (formula "2") (term "0,0"))
         (rule "polySimp_elimOne" (formula "2") (term "0,0"))
         (rule "inEqSimp_sepNegMonomial0" (formula "2") (term "0,1"))
         (rule "polySimp_mulLiterals" (formula "2") (term "0,0,1"))
         (rule "polySimp_elimOne" (formula "2") (term "0,0,1"))
         (rule "inEqSimp_sepNegMonomial0" (formula "2") (term "0,0,0"))
         (rule "polySimp_mulLiterals" (formula "2") (term "0,0,0,0"))
         (rule "polySimp_elimOne" (formula "2") (term "0,0,0,0"))
         (rule "eqSeqConcat" (formula "5"))
          (builtin "One Step Simplification" (formula "5"))
         (rule "andLeft" (formula "5"))
         (rule "andLeft" (formula "5"))
         (rule "lenOfSeqSub" (formula "7") (term "2,0"))
         (rule "polySimp_elimSub" (formula "7") (term "1,2,0"))
         (rule "polySimp_mulComm0" (formula "7") (term "1,1,2,0"))
         (rule "polySimp_rightDist" (formula "7") (term "1,1,2,0"))
         (rule "mul_literals" (formula "7") (term "0,1,1,2,0"))
         (rule "polySimp_addAssoc" (formula "7") (term "1,2,0"))
         (rule "polySimp_addComm0" (formula "7") (term "0,1,2,0"))
         (rule "polySimp_pullOutFactor1b" (formula "7") (term "1,2,0"))
         (rule "add_literals" (formula "7") (term "1,1,1,2,0"))
         (rule "times_zero_1" (formula "7") (term "1,1,2,0"))
         (rule "add_zero_right" (formula "7") (term "1,2,0"))
         (rule "lenOfSeqSub" (formula "5") (term "0"))
         (rule "polySimp_elimSub" (formula "5") (term "1,0"))
         (rule "polySimp_mulComm0" (formula "5") (term "1,1,0"))
         (rule "polySimp_rightDist" (formula "5") (term "1,1,0"))
         (rule "mul_literals" (formula "5") (term "0,1,1,0"))
         (rule "eqSeqSingleton" (formula "6"))
         (rule "andLeft" (formula "6"))
         (rule "lenOfSeqConcat" (formula "5") (term "1,1"))
          (builtin "One Step Simplification" (formula "5"))
         (rule "polySimp_addAssoc" (formula "5") (term "1"))
         (rule "add_literals" (formula "5") (term "0,1"))
         (rule "polySimp_addAssoc" (formula "5") (term "1,0"))
         (rule "polySimp_addComm0" (formula "5") (term "0,1,0"))
         (rule "polySimp_pullOutFactor1b" (formula "5") (term "1,0"))
         (rule "add_literals" (formula "5") (term "1,1,1,0"))
         (rule "times_zero_1" (formula "5") (term "1,1,0"))
         (rule "add_zero_right" (formula "5") (term "1,0"))
         (rule "lenOfSeqSub" (formula "6") (term "0"))
         (rule "sub_literals" (formula "6") (term "1,0"))
          (builtin "One Step Simplification" (formula "6"))
         (rule "less_literals" (formula "6") (term "0"))
          (builtin "One Step Simplification" (formula "6"))
         (rule "true_left" (formula "6"))
         (rule "inEqSimp_ltToLeq" (formula "7") (term "0,2,0"))
         (rule "polySimp_mulComm0" (formula "7") (term "1,0,0,0,2,0"))
         (rule "lenOfSeqConcat" (formula "5") (term "1,1"))
          (builtin "One Step Simplification" (formula "5"))
         (rule "polySimp_addAssoc" (formula "7") (term "0,0,2,0"))
         (rule "polySimp_addComm1" (formula "7") (term "0,0,0,2,0"))
         (rule "add_literals" (formula "7") (term "0,0,0,0,2,0"))
         (rule "polySimp_pullOutFactor2b" (formula "7") (term "0,0,2,0"))
         (rule "add_literals" (formula "7") (term "1,1,0,0,2,0"))
         (rule "times_zero_1" (formula "7") (term "1,0,0,2,0"))
         (rule "add_zero_right" (formula "7") (term "0,0,2,0"))
         (rule "leq_literals" (formula "7") (term "0,2,0"))
          (builtin "One Step Simplification" (formula "7"))
         (rule "polySimp_addAssoc" (formula "5") (term "1"))
         (rule "add_literals" (formula "5") (term "0,1"))
         (rule "lenOfSeqConcat" (formula "5") (term "1,1"))
          (builtin "One Step Simplification" (formula "5"))
         (rule "polySimp_addAssoc" (formula "5") (term "1"))
         (rule "add_literals" (formula "5") (term "0,1"))
         (rule "lenOfSeqConcat" (formula "5") (term "1,1"))
          (builtin "One Step Simplification" (formula "5"))
         (rule "add_literals" (formula "5") (term "1,1"))
         (rule "add_literals" (formula "5") (term "1"))
          (builtin "One Step Simplification" (formula "5"))
         (rule "equal_literals" (formula "5") (term "1"))
          (builtin "One Step Simplification" (formula "5"))
         (rule "inEqSimp_ltToLeq" (formula "5"))
         (rule "polySimp_mulComm0" (formula "5") (term "1,0,0"))
         (rule "polySimp_addAssoc" (formula "5") (term "0"))
         (rule "polySimp_addComm1" (formula "5") (term "0,0"))
         (rule "add_literals" (formula "5") (term "0,0,0"))
         (rule "polySimp_pullOutFactor2b" (formula "5") (term "0"))
         (rule "add_literals" (formula "5") (term "1,1,0"))
         (rule "times_zero_1" (formula "5") (term "1,0"))
         (rule "add_literals" (formula "5") (term "0"))
         (rule "leq_literals" (formula "5"))
         (rule "true_left" (formula "5"))
         (rule "eqSeqConcat" (formula "11"))
          (builtin "One Step Simplification" (formula "11"))
         (rule "andLeft" (formula "11"))
         (rule "andLeft" (formula "11"))
         (rule "lenOfSeqSub" (formula "13") (term "2,0"))
         (rule "sub_literals" (formula "13") (term "1,2,0"))
         (rule "less_literals" (formula "13") (term "0,2,0"))
          (builtin "One Step Simplification" (formula "13"))
         (rule "lenOfSeqSub" (formula "11") (term "0"))
         (rule "sub_literals" (formula "11") (term "1,0"))
         (rule "less_literals" (formula "11") (term "0,0"))
          (builtin "One Step Simplification" (formula "11"))
         (rule "polySimp_homoEq" (formula "11"))
         (rule "mul_literals" (formula "11") (term "1,0"))
         (rule "polySimp_addComm1" (formula "11") (term "0"))
         (rule "add_literals" (formula "11") (term "0,0"))
         (rule "eqSeqSingleton" (formula "12"))
         (rule "andLeft" (formula "12"))
         (rule "lenOfSeqConcat" (formula "11") (term "1,0"))
          (builtin "One Step Simplification" (formula "11"))
         (rule "polySimp_addAssoc" (formula "11") (term "0"))
         (rule "add_literals" (formula "11") (term "0,0"))
         (rule "lenOfSeqSub" (formula "12") (term "0"))
         (rule "sub_literals" (formula "12") (term "1,0"))
          (builtin "One Step Simplification" (formula "12"))
         (rule "less_literals" (formula "12") (term "0"))
          (builtin "One Step Simplification" (formula "12"))
         (rule "true_left" (formula "12"))
         (rule "lenOfSeqConcat" (formula "11") (term "1,0"))
          (builtin "One Step Simplification" (formula "11"))
         (rule "polySimp_addAssoc" (formula "11") (term "0"))
         (rule "add_literals" (formula "11") (term "0,0"))
         (rule "lenOfSeqConcat" (formula "11") (term "1,0"))
          (builtin "One Step Simplification" (formula "11"))
         (rule "polySimp_addAssoc" (formula "11") (term "0"))
         (rule "add_literals" (formula "11") (term "0,0"))
         (rule "lenOfSeqConcat" (formula "11") (term "1,0"))
          (builtin "One Step Simplification" (formula "11"))
         (rule "polySimp_addAssoc" (formula "11") (term "0"))
         (rule "add_literals" (formula "11") (term "0,0"))
         (rule "lenOfSeqConcat" (formula "11") (term "1,0"))
          (builtin "One Step Simplification" (formula "11"))
         (rule "polySimp_addAssoc" (formula "11") (term "0"))
         (rule "add_literals" (formula "11") (term "0,0"))
         (rule "lenOfSeqConcat" (formula "11") (term "1,0"))
          (builtin "One Step Simplification" (formula "11"))
         (rule "polySimp_addAssoc" (formula "11") (term "0"))
         (rule "add_literals" (formula "11") (term "0,0"))
         (rule "lenOfSeqConcat" (formula "11") (term "1,0"))
          (builtin "One Step Simplification" (formula "11"))
         (rule "add_literals" (formula "11") (term "1,0"))
         (rule "add_literals" (formula "11") (term "0"))
          (builtin "One Step Simplification" (formula "11"))
         (rule "true_left" (formula "11"))
         (rule "getOfSeqSub" (formula "5") (term "0"))
         (rule "castDel" (formula "5") (term "2,0"))
         (rule "add_literals" (formula "5") (term "1,1,0"))
         (rule "sub_literals" (formula "5") (term "1,1,0,0"))
         (rule "leq_literals" (formula "5") (term "0,0,0"))
          (builtin "One Step Simplification" (formula "5"))
         (rule "less_literals" (formula "5") (term "0,0"))
          (builtin "One Step Simplification" (formula "5"))
         (rule "eqSeqConcat" (formula "3"))
          (builtin "One Step Simplification" (formula "3"))
         (rule "andLeft" (formula "3"))
         (rule "andLeft" (formula "3"))
         (rule "lenOfSeqSub" (formula "5") (term "2,0"))
         (rule "sub_literals" (formula "5") (term "1,2,0"))
         (rule "less_literals" (formula "5") (term "0,2,0"))
          (builtin "One Step Simplification" (formula "5"))
         (rule "lenOfSeqSub" (formula "3") (term "0"))
         (rule "sub_literals" (formula "3") (term "1,0"))
         (rule "less_literals" (formula "3") (term "0,0"))
          (builtin "One Step Simplification" (formula "3"))
         (rule "polySimp_homoEq" (formula "3"))
         (rule "mul_literals" (formula "3") (term "1,0"))
         (rule "polySimp_addComm1" (formula "3") (term "0"))
         (rule "add_literals" (formula "3") (term "0,0"))
         (rule "eqSeqSingleton" (formula "4"))
         (rule "andLeft" (formula "4"))
         (rule "lenOfSeqConcat" (formula "3") (term "1,0"))
          (builtin "One Step Simplification" (formula "3"))
         (rule "polySimp_addAssoc" (formula "3") (term "0"))
         (rule "add_literals" (formula "3") (term "0,0"))
         (rule "lenOfSeqSub" (formula "4") (term "0"))
         (rule "less_literals" (formula "4") (term "0,0"))
          (builtin "One Step Simplification" (formula "4"))
         (rule "sub_literals" (formula "4") (term "0"))
          (builtin "One Step Simplification" (formula "4"))
         (rule "true_left" (formula "4"))
         (rule "lenOfSeqConcat" (formula "3") (term "1,0"))
          (builtin "One Step Simplification" (formula "3"))
         (rule "polySimp_addAssoc" (formula "3") (term "0"))
         (rule "add_literals" (formula "3") (term "0,0"))
         (rule "lenOfSeqConcat" (formula "3") (term "1,0"))
          (builtin "One Step Simplification" (formula "3"))
         (rule "polySimp_addAssoc" (formula "3") (term "0"))
         (rule "add_literals" (formula "3") (term "0,0"))
         (rule "lenOfSeqConcat" (formula "3") (term "1,0"))
          (builtin "One Step Simplification" (formula "3"))
         (rule "polySimp_addAssoc" (formula "3") (term "0"))
         (rule "add_literals" (formula "3") (term "0,0"))
         (rule "lenOfSeqConcat" (formula "3") (term "1,0"))
          (builtin "One Step Simplification" (formula "3"))
         (rule "polySimp_addAssoc" (formula "3") (term "0"))
         (rule "add_literals" (formula "3") (term "0,0"))
         (rule "lenOfSeqConcat" (formula "3") (term "1,0"))
          (builtin "One Step Simplification" (formula "3"))
         (rule "polySimp_addAssoc" (formula "3") (term "0"))
         (rule "add_literals" (formula "3") (term "0,0"))
         (rule "lenOfSeqConcat" (formula "3") (term "1,0"))
          (builtin "One Step Simplification" (formula "3"))
         (rule "polySimp_addAssoc" (formula "3") (term "0"))
         (rule "add_literals" (formula "3") (term "0,0"))
         (rule "lenOfSeqConcat" (formula "3") (term "1,0"))
          (builtin "One Step Simplification" (formula "3"))
         (rule "add_literals" (formula "3") (term "1,0"))
         (rule "add_literals" (formula "3") (term "0"))
          (builtin "One Step Simplification" (formula "3"))
         (rule "true_left" (formula "3"))
         (rule "getOfSeqSub" (formula "12") (term "0"))
         (rule "castDel" (formula "12") (term "2,0"))
         (rule "sub_literals" (formula "12") (term "1,1,0,0"))
         (rule "add_zero_left" (formula "12") (term "1,1,0"))
         (rule "leq_literals" (formula "12") (term "0,0,0"))
          (builtin "One Step Simplification" (formula "12"))
         (rule "less_literals" (formula "12") (term "0,0"))
          (builtin "One Step Simplification" (formula "12"))
         (rule "getOfSeqSub" (formula "6") (term "0"))
         (rule "castDel" (formula "6") (term "2,0"))
         (rule "leq_literals" (formula "6") (term "0,0,0"))
          (builtin "One Step Simplification" (formula "6"))
         (rule "add_zero_left" (formula "6") (term "1,1,0"))
         (rule "polySimp_elimSub" (formula "6") (term "1,0,0"))
         (rule "polySimp_mulComm0" (formula "6") (term "1,1,0,0"))
         (rule "polySimp_rightDist" (formula "6") (term "1,1,0,0"))
         (rule "mul_literals" (formula "6") (term "0,1,1,0,0"))
         (rule "polySimp_addAssoc" (formula "6") (term "1,0,0"))
         (rule "polySimp_addComm0" (formula "6") (term "0,1,0,0"))
         (rule "polySimp_pullOutFactor1b" (formula "6") (term "1,0,0"))
         (rule "add_literals" (formula "6") (term "1,1,1,0,0"))
         (rule "times_zero_1" (formula "6") (term "1,1,0,0"))
         (rule "add_literals" (formula "6") (term "1,0,0"))
         (rule "less_literals" (formula "6") (term "0,0"))
          (builtin "One Step Simplification" (formula "6"))
         (rule "eqSeqConcat" (formula "7"))
          (builtin "One Step Simplification" (formula "7"))
         (rule "andLeft" (formula "7"))
         (rule "andLeft" (formula "7"))
         (rule "lenOfSeqSub" (formula "9") (term "2,0"))
         (rule "sub_literals" (formula "9") (term "1,2,0"))
         (rule "less_literals" (formula "9") (term "0,2,0"))
          (builtin "One Step Simplification" (formula "9"))
         (rule "lenOfSeqSub" (formula "7") (term "0"))
         (rule "less_literals" (formula "7") (term "0,0"))
          (builtin "One Step Simplification" (formula "7"))
         (rule "sub_literals" (formula "7") (term "0"))
         (rule "polySimp_homoEq" (formula "7"))
         (rule "mul_literals" (formula "7") (term "1,0"))
         (rule "polySimp_addComm1" (formula "7") (term "0"))
         (rule "add_literals" (formula "7") (term "0,0"))
         (rule "eqSeqSingleton" (formula "8"))
         (rule "andLeft" (formula "8"))
         (rule "lenOfSeqConcat" (formula "7") (term "1,0"))
          (builtin "One Step Simplification" (formula "7"))
         (rule "polySimp_addAssoc" (formula "7") (term "0"))
         (rule "add_literals" (formula "7") (term "0,0"))
         (rule "lenOfSeqSub" (formula "8") (term "0"))
         (rule "sub_literals" (formula "8") (term "1,0"))
          (builtin "One Step Simplification" (formula "8"))
         (rule "less_literals" (formula "8") (term "0"))
          (builtin "One Step Simplification" (formula "8"))
         (rule "true_left" (formula "8"))
         (rule "lenOfSeqConcat" (formula "7") (term "1,0"))
          (builtin "One Step Simplification" (formula "7"))
         (rule "polySimp_addAssoc" (formula "7") (term "0"))
         (rule "add_literals" (formula "7") (term "0,0"))
         (rule "lenOfSeqConcat" (formula "7") (term "1,0"))
          (builtin "One Step Simplification" (formula "7"))
         (rule "add_literals" (formula "7") (term "1,0"))
         (rule "add_literals" (formula "7") (term "0"))
          (builtin "One Step Simplification" (formula "7"))
         (rule "true_left" (formula "7"))
         (rule "getOfSeqSub" (formula "3") (term "0"))
         (rule "castDel" (formula "3") (term "2,0"))
         (rule "leq_literals" (formula "3") (term "0,0,0"))
          (builtin "One Step Simplification" (formula "3"))
         (rule "add_zero_left" (formula "3") (term "1,1,0"))
         (rule "sub_literals" (formula "3") (term "1,0,0"))
         (rule "less_literals" (formula "3") (term "0,0"))
          (builtin "One Step Simplification" (formula "3"))
         (rule "eqSeqConcat" (formula "14"))
          (builtin "One Step Simplification" (formula "14"))
         (rule "andLeft" (formula "14"))
         (rule "andLeft" (formula "14"))
         (rule "lenOfSeqSub" (formula "16") (term "2,0"))
         (rule "less_literals" (formula "16") (term "0,2,0"))
          (builtin "One Step Simplification" (formula "16"))
         (rule "sub_literals" (formula "16") (term "2,0"))
         (rule "lenOfSeqSub" (formula "14") (term "0"))
         (rule "less_literals" (formula "14") (term "0,0"))
          (builtin "One Step Simplification" (formula "14"))
         (rule "sub_literals" (formula "14") (term "0"))
         (rule "polySimp_homoEq" (formula "14"))
         (rule "mul_literals" (formula "14") (term "1,0"))
         (rule "polySimp_addComm1" (formula "14") (term "0"))
         (rule "add_literals" (formula "14") (term "0,0"))
         (rule "eqSeqSingleton" (formula "15"))
         (rule "andLeft" (formula "15"))
         (rule "lenOfSeqConcat" (formula "14") (term "1,0"))
          (builtin "One Step Simplification" (formula "14"))
         (rule "polySimp_addAssoc" (formula "14") (term "0"))
         (rule "add_literals" (formula "14") (term "0,0"))
         (rule "lenOfSeqSub" (formula "15") (term "0"))
         (rule "less_literals" (formula "15") (term "0,0"))
          (builtin "One Step Simplification" (formula "15"))
         (rule "sub_literals" (formula "15") (term "0"))
          (builtin "One Step Simplification" (formula "15"))
         (rule "true_left" (formula "15"))
         (rule "lenOfSeqConcat" (formula "14") (term "1,0"))
          (builtin "One Step Simplification" (formula "14"))
         (rule "polySimp_addAssoc" (formula "14") (term "0"))
         (rule "add_literals" (formula "14") (term "0,0"))
         (rule "lenOfSeqConcat" (formula "14") (term "1,0"))
          (builtin "One Step Simplification" (formula "14"))
         (rule "polySimp_addAssoc" (formula "14") (term "0"))
         (rule "add_literals" (formula "14") (term "0,0"))
         (rule "lenOfSeqConcat" (formula "14") (term "1,0"))
          (builtin "One Step Simplification" (formula "14"))
         (rule "polySimp_addAssoc" (formula "14") (term "0"))
         (rule "add_literals" (formula "14") (term "0,0"))
         (rule "lenOfSeqConcat" (formula "14") (term "1,0"))
          (builtin "One Step Simplification" (formula "14"))
         (rule "polySimp_addAssoc" (formula "14") (term "0"))
         (rule "add_literals" (formula "14") (term "0,0"))
         (rule "lenOfSeqConcat" (formula "14") (term "1,0"))
          (builtin "One Step Simplification" (formula "14"))
         (rule "add_literals" (formula "14") (term "1,0"))
         (rule "add_literals" (formula "14") (term "0"))
          (builtin "One Step Simplification" (formula "14"))
         (rule "true_left" (formula "14"))
         (rule "getOfSeqSub" (formula "13") (term "0"))
         (rule "castDel" (formula "13") (term "2,0"))
         (rule "leq_literals" (formula "13") (term "0,0,0"))
          (builtin "One Step Simplification" (formula "13"))
         (rule "add_zero_left" (formula "13") (term "1,1,0"))
         (rule "sub_literals" (formula "13") (term "1,0,0"))
         (rule "less_literals" (formula "13") (term "0,0"))
          (builtin "One Step Simplification" (formula "13"))
         (rule "getOfSeqSub" (formula "7") (term "0"))
         (rule "castDel" (formula "7") (term "2,0"))
         (rule "leq_literals" (formula "7") (term "0,0,0"))
          (builtin "One Step Simplification" (formula "7"))
         (rule "add_zero_left" (formula "7") (term "1,1,0"))
         (rule "sub_literals" (formula "7") (term "1,0,0"))
         (rule "less_literals" (formula "7") (term "0,0"))
          (builtin "One Step Simplification" (formula "7"))
         (rule "eqSeqConcat" (formula "4"))
          (builtin "One Step Simplification" (formula "4"))
         (rule "andLeft" (formula "4"))
         (rule "andLeft" (formula "4"))
         (rule "lenOfSeqSub" (formula "6") (term "2,0"))
         (rule "sub_literals" (formula "6") (term "1,2,0"))
         (rule "less_literals" (formula "6") (term "0,2,0"))
          (builtin "One Step Simplification" (formula "6"))
         (rule "eqSeqSingleton" (formula "5"))
         (rule "andLeft" (formula "5"))
         (rule "lenOfSeqSub" (formula "4") (term "0"))
         (rule "sub_literals" (formula "4") (term "1,0"))
         (rule "less_literals" (formula "4") (term "0,0"))
          (builtin "One Step Simplification" (formula "4"))
         (rule "polySimp_homoEq" (formula "4"))
         (rule "mul_literals" (formula "4") (term "1,0"))
         (rule "polySimp_addComm1" (formula "4") (term "0"))
         (rule "add_literals" (formula "4") (term "0,0"))
         (rule "lenOfSeqSub" (formula "5") (term "0"))
         (rule "sub_literals" (formula "5") (term "1,0"))
          (builtin "One Step Simplification" (formula "5"))
         (rule "less_literals" (formula "5") (term "0"))
          (builtin "One Step Simplification" (formula "5"))
         (rule "true_left" (formula "5"))
         (rule "lenOfSeqConcat" (formula "4") (term "1,0"))
          (builtin "One Step Simplification" (formula "4"))
         (rule "polySimp_addAssoc" (formula "4") (term "0"))
         (rule "add_literals" (formula "4") (term "0,0"))
         (rule "lenOfSeqConcat" (formula "4") (term "1,0"))
          (builtin "One Step Simplification" (formula "4"))
         (rule "polySimp_addAssoc" (formula "4") (term "0"))
         (rule "add_literals" (formula "4") (term "0,0"))
         (rule "lenOfSeqConcat" (formula "4") (term "1,0"))
          (builtin "One Step Simplification" (formula "4"))
         (rule "polySimp_addAssoc" (formula "4") (term "0"))
         (rule "add_literals" (formula "4") (term "0,0"))
         (rule "lenOfSeqConcat" (formula "4") (term "1,0"))
          (builtin "One Step Simplification" (formula "4"))
         (rule "polySimp_addAssoc" (formula "4") (term "0"))
         (rule "add_literals" (formula "4") (term "0,0"))
         (rule "lenOfSeqConcat" (formula "4") (term "1,0"))
          (builtin "One Step Simplification" (formula "4"))
         (rule "polySimp_addAssoc" (formula "4") (term "0"))
         (rule "add_literals" (formula "4") (term "0,0"))
         (rule "lenOfSeqConcat" (formula "4") (term "1,0"))
          (builtin "One Step Simplification" (formula "4"))
         (rule "polySimp_addAssoc" (formula "4") (term "0"))
         (rule "add_literals" (formula "4") (term "0,0"))
         (rule "lenOfSeqConcat" (formula "4") (term "1,0"))
          (builtin "One Step Simplification" (formula "4"))
         (rule "add_literals" (formula "4") (term "1,0"))
         (rule "add_literals" (formula "4") (term "0"))
          (builtin "One Step Simplification" (formula "4"))
         (rule "true_left" (formula "4"))
         (rule "getOfSeqSub" (formula "3") (term "0"))
         (rule "castDel" (formula "3") (term "2,0"))
         (rule "add_zero_left" (formula "3") (term "1,1,0"))
         (rule "leq_literals" (formula "3") (term "0,0,0"))
          (builtin "One Step Simplification" (formula "3"))
         (rule "sub_literals" (formula "3") (term "1,0,0"))
         (rule "less_literals" (formula "3") (term "0,0"))
          (builtin "One Step Simplification" (formula "3"))
         (rule "getOfSeqSub" (formula "15") (term "0"))
         (rule "castDel" (formula "15") (term "2,0"))
         (rule "add_zero_left" (formula "15") (term "1,1,0"))
         (rule "sub_literals" (formula "15") (term "1,1,0,0"))
         (rule "leq_literals" (formula "15") (term "0,0,0"))
          (builtin "One Step Simplification" (formula "15"))
         (rule "less_literals" (formula "15") (term "0,0"))
          (builtin "One Step Simplification" (formula "15"))
         (rule "getOfSeqSub" (formula "14") (term "0"))
         (rule "castDel" (formula "14") (term "2,0"))
         (rule "leq_literals" (formula "14") (term "0,0,0"))
          (builtin "One Step Simplification" (formula "14"))
         (rule "add_zero_right" (formula "14") (term "1,1,0"))
         (rule "sub_literals" (formula "14") (term "1,0,0"))
         (rule "less_literals" (formula "14") (term "0,0"))
          (builtin "One Step Simplification" (formula "14"))
         (rule "eqSeqConcat" (formula "9"))
          (builtin "One Step Simplification" (formula "9"))
         (rule "andLeft" (formula "9"))
         (rule "andLeft" (formula "9"))
         (rule "lenOfSeqSub" (formula "11") (term "2,0"))
         (rule "less_literals" (formula "11") (term "0,2,0"))
          (builtin "One Step Simplification" (formula "11"))
         (rule "sub_literals" (formula "11") (term "2,0"))
         (rule "lenOfSeqConcat" (formula "9") (term "1,1"))
          (builtin "One Step Simplification" (formula "9"))
         (rule "polySimp_addAssoc" (formula "9") (term "1"))
         (rule "add_literals" (formula "9") (term "0,1"))
         (rule "eqSeqSingleton" (formula "10"))
         (rule "andLeft" (formula "10"))
         (rule "lenOfSeqSub" (formula "9") (term "0"))
         (rule "sub_literals" (formula "9") (term "1,0"))
         (rule "less_literals" (formula "9") (term "0,0"))
          (builtin "One Step Simplification" (formula "9"))
         (rule "polySimp_homoEq" (formula "9"))
         (rule "mul_literals" (formula "9") (term "1,0"))
         (rule "polySimp_addComm1" (formula "9") (term "0"))
         (rule "add_literals" (formula "9") (term "0,0"))
         (rule "lenOfSeqSub" (formula "10") (term "0"))
         (rule "sub_literals" (formula "10") (term "1,0"))
          (builtin "One Step Simplification" (formula "10"))
         (rule "less_literals" (formula "10") (term "0"))
          (builtin "One Step Simplification" (formula "10"))
         (rule "true_left" (formula "10"))
         (rule "lenOfSeqConcat" (formula "9") (term "1,0"))
          (builtin "One Step Simplification" (formula "9"))
         (rule "add_literals" (formula "9") (term "1,0"))
         (rule "add_literals" (formula "9") (term "0"))
          (builtin "One Step Simplification" (formula "9"))
         (rule "true_left" (formula "9"))
         (rule "getOfSeqSub" (formula "8") (term "0"))
         (rule "castDel" (formula "8") (term "2,0"))
         (rule "sub_literals" (formula "8") (term "1,1,0,0"))
         (rule "leq_literals" (formula "8") (term "0,0,0"))
          (builtin "One Step Simplification" (formula "8"))
         (rule "add_zero_left" (formula "8") (term "1,1,0"))
         (rule "less_literals" (formula "8") (term "0,0"))
          (builtin "One Step Simplification" (formula "8"))
         (rule "getOfSeqSub" (formula "4") (term "0"))
         (rule "castDel" (formula "4") (term "2,0"))
         (rule "add_zero_left" (formula "4") (term "1,1,0"))
         (rule "leq_literals" (formula "4") (term "0,0,0"))
          (builtin "One Step Simplification" (formula "4"))
         (rule "sub_literals" (formula "4") (term "1,0,0"))
         (rule "less_literals" (formula "4") (term "0,0"))
          (builtin "One Step Simplification" (formula "4"))
         (rule "eqSeqConcat" (formula "17"))
          (builtin "One Step Simplification" (formula "17"))
         (rule "andLeft" (formula "17"))
         (rule "andLeft" (formula "17"))
         (rule "lenOfSeqSub" (formula "19") (term "2,0"))
         (rule "less_literals" (formula "19") (term "0,2,0"))
          (builtin "One Step Simplification" (formula "19"))
         (rule "sub_literals" (formula "19") (term "2,0"))
         (rule "lenOfSeqSub" (formula "17") (term "0"))
         (rule "less_literals" (formula "17") (term "0,0"))
          (builtin "One Step Simplification" (formula "17"))
         (rule "sub_literals" (formula "17") (term "0"))
         (rule "polySimp_homoEq" (formula "17"))
         (rule "mul_literals" (formula "17") (term "1,0"))
         (rule "polySimp_addComm1" (formula "17") (term "0"))
         (rule "add_literals" (formula "17") (term "0,0"))
         (rule "eqSeqSingleton" (formula "18"))
         (rule "andLeft" (formula "18"))
         (rule "lenOfSeqConcat" (formula "17") (term "1,0"))
          (builtin "One Step Simplification" (formula "17"))
         (rule "polySimp_addAssoc" (formula "17") (term "0"))
         (rule "add_literals" (formula "17") (term "0,0"))
         (rule "lenOfSeqSub" (formula "18") (term "0"))
         (rule "less_literals" (formula "18") (term "0,0"))
          (builtin "One Step Simplification" (formula "18"))
         (rule "sub_literals" (formula "18") (term "0"))
          (builtin "One Step Simplification" (formula "18"))
         (rule "true_left" (formula "18"))
         (rule "lenOfSeqConcat" (formula "17") (term "1,0"))
          (builtin "One Step Simplification" (formula "17"))
         (rule "polySimp_addAssoc" (formula "17") (term "0"))
         (rule "add_literals" (formula "17") (term "0,0"))
         (rule "lenOfSeqConcat" (formula "17") (term "1,0"))
          (builtin "One Step Simplification" (formula "17"))
         (rule "polySimp_addAssoc" (formula "17") (term "0"))
         (rule "add_literals" (formula "17") (term "0,0"))
         (rule "lenOfSeqConcat" (formula "17") (term "1,0"))
          (builtin "One Step Simplification" (formula "17"))
         (rule "polySimp_addAssoc" (formula "17") (term "0"))
         (rule "add_literals" (formula "17") (term "0,0"))
         (rule "lenOfSeqConcat" (formula "17") (term "1,0"))
          (builtin "One Step Simplification" (formula "17"))
         (rule "add_literals" (formula "17") (term "1,0"))
         (rule "add_literals" (formula "17") (term "0"))
          (builtin "One Step Simplification" (formula "17"))
         (rule "true_left" (formula "17"))
         (rule "getOfSeqSub" (formula "3") (term "0"))
         (rule "castDel" (formula "3") (term "2,0"))
         (rule "leq_literals" (formula "3") (term "0,0,0"))
          (builtin "One Step Simplification" (formula "3"))
         (rule "add_zero_left" (formula "3") (term "1,1,0"))
         (rule "polySimp_elimSub" (formula "3") (term "1,0,0"))
         (rule "times_zero_2" (formula "3") (term "1,1,0,0"))
         (rule "add_zero_right" (formula "3") (term "1,0,0"))
         (rule "inEqSimp_ltToLeq" (formula "3") (term "0,0"))
         (rule "add_zero_right" (formula "3") (term "0,0,0"))
         (rule "polySimp_rightDist" (formula "3") (term "1,0,0,0"))
         (rule "mul_literals" (formula "3") (term "0,1,0,0,0"))
         (rule "polySimp_addAssoc" (formula "3") (term "0,0,0"))
         (rule "add_literals" (formula "3") (term "0,0,0,0"))
         (rule "inEqSimp_sepNegMonomial0" (formula "3") (term "0,0"))
         (rule "polySimp_mulLiterals" (formula "3") (term "0,0,0"))
         (rule "polySimp_elimOne" (formula "3") (term "0,0,0"))
         (rule "getOfSeqSub" (formula "16") (term "0"))
         (rule "castDel" (formula "16") (term "2,0"))
         (rule "leq_literals" (formula "16") (term "0,0,0"))
          (builtin "One Step Simplification" (formula "16"))
         (rule "add_zero_left" (formula "16") (term "1,1,0"))
         (rule "sub_literals" (formula "16") (term "1,0,0"))
         (rule "less_literals" (formula "16") (term "0,0"))
          (builtin "One Step Simplification" (formula "16"))
         (rule "getOfSeqSub" (formula "9") (term "0"))
         (rule "castDel" (formula "9") (term "2,0"))
         (rule "add_literals" (formula "9") (term "1,1,0"))
         (rule "leq_literals" (formula "9") (term "0,0,0"))
          (builtin "One Step Simplification" (formula "9"))
         (rule "sub_literals" (formula "9") (term "1,0,0"))
         (rule "less_literals" (formula "9") (term "0,0"))
          (builtin "One Step Simplification" (formula "9"))
         (rule "eqSeqConcat" (formula "5"))
          (builtin "One Step Simplification" (formula "5"))
         (rule "andLeft" (formula "5"))
         (rule "andLeft" (formula "5"))
         (rule "lenOfSeqSub" (formula "7") (term "2,0"))
         (rule "sub_literals" (formula "7") (term "1,2,0"))
         (rule "less_literals" (formula "7") (term "0,2,0"))
          (builtin "One Step Simplification" (formula "7"))
         (rule "eqSeqSingleton" (formula "6"))
         (rule "andLeft" (formula "6"))
         (rule "lenOfSeqConcat" (formula "5") (term "1,1"))
          (builtin "One Step Simplification" (formula "5"))
         (rule "polySimp_addAssoc" (formula "5") (term "1"))
         (rule "add_literals" (formula "5") (term "0,1"))
         (rule "lenOfSeqSub" (formula "6") (term "0"))
         (rule "sub_literals" (formula "6") (term "1,0"))
          (builtin "One Step Simplification" (formula "6"))
         (rule "less_literals" (formula "6") (term "0"))
          (builtin "One Step Simplification" (formula "6"))
         (rule "true_left" (formula "6"))
         (rule "lenOfSeqSub" (formula "5") (term "0"))
         (rule "less_literals" (formula "5") (term "0,0"))
          (builtin "One Step Simplification" (formula "5"))
         (rule "sub_literals" (formula "5") (term "0"))
         (rule "polySimp_homoEq" (formula "5"))
         (rule "mul_literals" (formula "5") (term "1,0"))
         (rule "polySimp_addComm1" (formula "5") (term "0"))
         (rule "add_literals" (formula "5") (term "0,0"))
         (rule "lenOfSeqConcat" (formula "5") (term "1,0"))
          (builtin "One Step Simplification" (formula "5"))
         (rule "polySimp_addAssoc" (formula "5") (term "0"))
         (rule "add_literals" (formula "5") (term "0,0"))
         (rule "lenOfSeqConcat" (formula "5") (term "1,0"))
          (builtin "One Step Simplification" (formula "5"))
         (rule "polySimp_addAssoc" (formula "5") (term "0"))
         (rule "add_literals" (formula "5") (term "0,0"))
         (rule "lenOfSeqConcat" (formula "5") (term "1,0"))
          (builtin "One Step Simplification" (formula "5"))
         (rule "polySimp_addAssoc" (formula "5") (term "0"))
         (rule "add_literals" (formula "5") (term "0,0"))
         (rule "lenOfSeqConcat" (formula "5") (term "1,0"))
          (builtin "One Step Simplification" (formula "5"))
         (rule "polySimp_addAssoc" (formula "5") (term "0"))
         (rule "add_literals" (formula "5") (term "0,0"))
         (rule "lenOfSeqConcat" (formula "5") (term "1,0"))
          (builtin "One Step Simplification" (formula "5"))
         (rule "add_literals" (formula "5") (term "1,0"))
         (rule "add_literals" (formula "5") (term "0"))
          (builtin "One Step Simplification" (formula "5"))
         (rule "true_left" (formula "5"))
         (rule "getOfSeqSub" (formula "9") (term "0"))
         (rule "castDel" (formula "9") (term "2,0"))
         (rule "leq_literals" (formula "9") (term "0,0,0"))
          (builtin "One Step Simplification" (formula "9"))
         (rule "polySimp_elimSub" (formula "9") (term "1,0,0"))
         (rule "polySimp_mulComm0" (formula "9") (term "1,1,0,0"))
         (rule "polySimp_rightDist" (formula "9") (term "1,1,0,0"))
         (rule "mul_literals" (formula "9") (term "0,1,1,0,0"))
         (rule "polySimp_addAssoc" (formula "9") (term "1,1,0"))
         (rule "add_literals" (formula "9") (term "0,1,1,0"))
         (rule "polySimp_addAssoc" (formula "9") (term "1,0,0"))
         (rule "polySimp_addComm0" (formula "9") (term "0,1,0,0"))
         (rule "polySimp_pullOutFactor1b" (formula "9") (term "1,0,0"))
         (rule "add_literals" (formula "9") (term "1,1,1,0,0"))
         (rule "times_zero_1" (formula "9") (term "1,1,0,0"))
         (rule "add_zero_right" (formula "9") (term "1,0,0"))
         (rule "less_literals" (formula "9") (term "0,0"))
          (builtin "One Step Simplification" (formula "9"))
         (rule "getOfSeqSub" (formula "4") (term "0"))
         (rule "castDel" (formula "4") (term "2,0"))
         (rule "sub_literals" (formula "4") (term "1,1,0,0"))
         (rule "leq_literals" (formula "4") (term "0,0,0"))
          (builtin "One Step Simplification" (formula "4"))
         (rule "add_literals" (formula "4") (term "1,1,0"))
         (rule "less_literals" (formula "4") (term "0,0"))
          (builtin "One Step Simplification" (formula "4"))
         (rule "getOfSeqSub" (formula "18") (term "0"))
         (rule "castDel" (formula "18") (term "2,0"))
         (rule "add_zero_left" (formula "18") (term "1,1,0"))
         (rule "leq_literals" (formula "18") (term "0,0,0"))
          (builtin "One Step Simplification" (formula "18"))
         (rule "sub_literals" (formula "18") (term "1,0,0"))
         (rule "less_literals" (formula "18") (term "0,0"))
          (builtin "One Step Simplification" (formula "18"))
         (rule "eqSeqConcat" (formula "11"))
          (builtin "One Step Simplification" (formula "11"))
         (rule "andLeft" (formula "11"))
         (rule "andLeft" (formula "11"))
         (rule "lenOfSeqSub" (formula "13") (term "2,0"))
         (rule "sub_literals" (formula "13") (term "1,2,0"))
         (rule "less_literals" (formula "13") (term "0,2,0"))
          (builtin "One Step Simplification" (formula "13"))
         (rule "lenOfSeqConcat" (formula "11") (term "1,1"))
          (builtin "One Step Simplification" (formula "11"))
         (rule "add_literals" (formula "11") (term "1,1"))
         (rule "add_literals" (formula "11") (term "1"))
         (rule "eqSeqSingleton" (formula "12"))
         (rule "andLeft" (formula "12"))
         (rule "lenOfSeqSub" (formula "11") (term "0"))
         (rule "sub_literals" (formula "11") (term "1,0"))
          (builtin "One Step Simplification" (formula "11"))
         (rule "equal_literals" (formula "11") (term "1"))
          (builtin "One Step Simplification" (formula "11"))
         (rule "less_literals" (formula "11"))
         (rule "true_left" (formula "11"))
         (rule "lenOfSeqSub" (formula "11") (term "0"))
         (rule "sub_literals" (formula "11") (term "1,0"))
          (builtin "One Step Simplification" (formula "11"))
         (rule "less_literals" (formula "11") (term "0"))
          (builtin "One Step Simplification" (formula "11"))
         (rule "true_left" (formula "11"))
         (rule "getOfSeqSub" (formula "18") (term "0"))
         (rule "castDel" (formula "18") (term "2,0"))
         (rule "leq_literals" (formula "18") (term "0,0,0"))
          (builtin "One Step Simplification" (formula "18"))
         (rule "add_literals" (formula "18") (term "1,1,0"))
         (rule "sub_literals" (formula "18") (term "1,0,0"))
         (rule "less_literals" (formula "18") (term "0,0"))
          (builtin "One Step Simplification" (formula "18"))
         (rule "getOfSeqSub" (formula "10") (term "0"))
         (rule "castDel" (formula "10") (term "2,0"))
         (rule "add_literals" (formula "10") (term "1,1,0"))
         (rule "leq_literals" (formula "10") (term "0,0,0"))
          (builtin "One Step Simplification" (formula "10"))
         (rule "sub_literals" (formula "10") (term "1,0,0"))
         (rule "less_literals" (formula "10") (term "0,0"))
          (builtin "One Step Simplification" (formula "10"))
         (rule "getOfSeqSub" (formula "5") (term "0"))
         (rule "castDel" (formula "5") (term "2,0"))
         (rule "add_zero_left" (formula "5") (term "1,1,0"))
         (rule "leq_literals" (formula "5") (term "0,0,0"))
          (builtin "One Step Simplification" (formula "5"))
         (rule "sub_literals" (formula "5") (term "1,0,0"))
         (rule "less_literals" (formula "5") (term "0,0"))
          (builtin "One Step Simplification" (formula "5"))
         (rule "eqSeqConcat" (formula "20"))
          (builtin "One Step Simplification" (formula "20"))
         (rule "andLeft" (formula "20"))
         (rule "andLeft" (formula "20"))
         (rule "lenOfSeqSub" (formula "22") (term "2,0"))
         (rule "less_literals" (formula "22") (term "0,2,0"))
          (builtin "One Step Simplification" (formula "22"))
         (rule "sub_literals" (formula "22") (term "2,0"))
         (rule "lenOfSeqSub" (formula "20") (term "0"))
         (rule "less_literals" (formula "20") (term "0,0"))
          (builtin "One Step Simplification" (formula "20"))
         (rule "sub_literals" (formula "20") (term "0"))
         (rule "polySimp_homoEq" (formula "20"))
         (rule "mul_literals" (formula "20") (term "1,0"))
         (rule "polySimp_addComm1" (formula "20") (term "0"))
         (rule "add_literals" (formula "20") (term "0,0"))
         (rule "eqSeqSingleton" (formula "21"))
         (rule "andLeft" (formula "21"))
         (rule "lenOfSeqConcat" (formula "20") (term "1,0"))
          (builtin "One Step Simplification" (formula "20"))
         (rule "polySimp_addAssoc" (formula "20") (term "0"))
         (rule "add_literals" (formula "20") (term "0,0"))
         (rule "lenOfSeqSub" (formula "21") (term "0"))
         (rule "sub_literals" (formula "21") (term "1,0"))
          (builtin "One Step Simplification" (formula "21"))
         (rule "less_literals" (formula "21") (term "0"))
          (builtin "One Step Simplification" (formula "21"))
         (rule "true_left" (formula "21"))
         (rule "lenOfSeqConcat" (formula "20") (term "1,0"))
          (builtin "One Step Simplification" (formula "20"))
         (rule "polySimp_addAssoc" (formula "20") (term "0"))
         (rule "add_literals" (formula "20") (term "0,0"))
         (rule "lenOfSeqConcat" (formula "20") (term "1,0"))
          (builtin "One Step Simplification" (formula "20"))
         (rule "polySimp_addAssoc" (formula "20") (term "0"))
         (rule "add_literals" (formula "20") (term "0,0"))
         (rule "lenOfSeqConcat" (formula "20") (term "1,0"))
          (builtin "One Step Simplification" (formula "20"))
         (rule "add_literals" (formula "20") (term "1,0"))
         (rule "add_literals" (formula "20") (term "0"))
          (builtin "One Step Simplification" (formula "20"))
         (rule "true_left" (formula "20"))
         (rule "getOfSeqSub" (formula "4") (term "0"))
         (rule "castDel" (formula "4") (term "2,0"))
         (rule "add_zero_right" (formula "4") (term "1,1,0"))
         (rule "sub_literals" (formula "4") (term "1,1,0,0"))
         (rule "leq_literals" (formula "4") (term "0,0,0"))
          (builtin "One Step Simplification" (formula "4"))
         (rule "less_literals" (formula "4") (term "0,0"))
          (builtin "One Step Simplification" (formula "4"))
         (rule "getOfSeqSub" (formula "19") (term "0"))
         (rule "castDel" (formula "19") (term "2,0"))
         (rule "add_literals" (formula "19") (term "1,1,0"))
         (rule "leq_literals" (formula "19") (term "0,0,0"))
          (builtin "One Step Simplification" (formula "19"))
         (rule "sub_literals" (formula "19") (term "1,0,0"))
         (rule "less_literals" (formula "19") (term "0,0"))
          (builtin "One Step Simplification" (formula "19"))
         (rule "getOfSeqSub" (formula "11") (term "0"))
         (rule "castDel" (formula "11") (term "2,0"))
         (rule "leq_literals" (formula "11") (term "0,0,0"))
          (builtin "One Step Simplification" (formula "11"))
         (rule "add_zero_left" (formula "11") (term "1,1,0"))
         (rule "sub_literals" (formula "11") (term "1,0,0"))
         (rule "less_literals" (formula "11") (term "0,0"))
          (builtin "One Step Simplification" (formula "11"))
         (rule "eqSeqConcat" (formula "6"))
          (builtin "One Step Simplification" (formula "6"))
         (rule "andLeft" (formula "6"))
         (rule "andLeft" (formula "6"))
         (rule "lenOfSeqSub" (formula "8") (term "2,0"))
         (rule "sub_literals" (formula "8") (term "1,2,0"))
         (rule "less_literals" (formula "8") (term "0,2,0"))
          (builtin "One Step Simplification" (formula "8"))
         (rule "lenOfSeqSub" (formula "6") (term "0"))
         (rule "sub_literals" (formula "6") (term "1,0"))
         (rule "less_literals" (formula "6") (term "0,0"))
          (builtin "One Step Simplification" (formula "6"))
         (rule "polySimp_homoEq" (formula "6"))
         (rule "mul_literals" (formula "6") (term "1,0"))
         (rule "polySimp_addComm1" (formula "6") (term "0"))
         (rule "add_literals" (formula "6") (term "0,0"))
         (rule "eqSeqSingleton" (formula "7"))
         (rule "andLeft" (formula "7"))
         (rule "lenOfSeqConcat" (formula "6") (term "1,0"))
          (builtin "One Step Simplification" (formula "6"))
         (rule "polySimp_addAssoc" (formula "6") (term "0"))
         (rule "add_literals" (formula "6") (term "0,0"))
         (rule "lenOfSeqSub" (formula "7") (term "0"))
         (rule "sub_literals" (formula "7") (term "1,0"))
          (builtin "One Step Simplification" (formula "7"))
         (rule "less_literals" (formula "7") (term "0"))
          (builtin "One Step Simplification" (formula "7"))
         (rule "true_left" (formula "7"))
         (rule "lenOfSeqConcat" (formula "6") (term "1,0"))
          (builtin "One Step Simplification" (formula "6"))
         (rule "polySimp_addAssoc" (formula "6") (term "0"))
         (rule "add_literals" (formula "6") (term "0,0"))
         (rule "lenOfSeqConcat" (formula "6") (term "1,0"))
          (builtin "One Step Simplification" (formula "6"))
         (rule "polySimp_addAssoc" (formula "6") (term "0"))
         (rule "add_literals" (formula "6") (term "0,0"))
         (rule "lenOfSeqConcat" (formula "6") (term "1,0"))
          (builtin "One Step Simplification" (formula "6"))
         (rule "polySimp_addAssoc" (formula "6") (term "0"))
         (rule "add_literals" (formula "6") (term "0,0"))
         (rule "lenOfSeqConcat" (formula "6") (term "1,0"))
          (builtin "One Step Simplification" (formula "6"))
         (rule "add_literals" (formula "6") (term "1,0"))
         (rule "add_literals" (formula "6") (term "0"))
          (builtin "One Step Simplification" (formula "6"))
         (rule "true_left" (formula "6"))
         (rule "getOfSeqSub" (formula "19") (term "0"))
         (rule "castDel" (formula "19") (term "2,0"))
         (rule "sub_literals" (formula "19") (term "1,1,0,0"))
         (rule "leq_literals" (formula "19") (term "0,0,0"))
          (builtin "One Step Simplification" (formula "19"))
         (rule "add_literals" (formula "19") (term "1,1,0"))
         (rule "less_literals" (formula "19") (term "0,0"))
          (builtin "One Step Simplification" (formula "19"))
         (rule "getOfSeqSub" (formula "11") (term "0"))
         (rule "castDel" (formula "11") (term "2,0"))
         (rule "add_literals" (formula "11") (term "1,1,0"))
         (rule "leq_literals" (formula "11") (term "0,0,0"))
          (builtin "One Step Simplification" (formula "11"))
         (rule "sub_literals" (formula "11") (term "1,0,0"))
         (rule "less_literals" (formula "11") (term "0,0"))
          (builtin "One Step Simplification" (formula "11"))
         (rule "getOfSeqSub" (formula "5") (term "0"))
         (rule "castDel" (formula "5") (term "2,0"))
         (rule "add_zero_left" (formula "5") (term "1,1,0"))
         (rule "leq_literals" (formula "5") (term "0,0,0"))
          (builtin "One Step Simplification" (formula "5"))
         (rule "sub_literals" (formula "5") (term "1,0,0"))
         (rule "less_literals" (formula "5") (term "0,0"))
          (builtin "One Step Simplification" (formula "5"))
         (rule "getOfSeqSub" (formula "21") (term "0"))
         (rule "castDel" (formula "21") (term "2,0"))
         (rule "sub_literals" (formula "21") (term "1,1,0,0"))
         (rule "leq_literals" (formula "21") (term "0,0,0"))
          (builtin "One Step Simplification" (formula "21"))
         (rule "add_zero_left" (formula "21") (term "1,1,0"))
         (rule "less_literals" (formula "21") (term "0,0"))
          (builtin "One Step Simplification" (formula "21"))
         (rule "getOfSeqSub" (formula "4") (term "0"))
         (rule "castDel" (formula "4") (term "2,0"))
         (rule "leq_literals" (formula "4") (term "0,0,0"))
          (builtin "One Step Simplification" (formula "4"))
         (rule "add_zero_right" (formula "4") (term "1,1,0"))
         (rule "polySimp_elimSub" (formula "4") (term "1,0,0"))
         (rule "times_zero_2" (formula "4") (term "1,1,0,0"))
         (rule "add_zero_right" (formula "4") (term "1,0,0"))
         (rule "inEqSimp_ltToLeq" (formula "4") (term "0,0"))
         (rule "polySimp_rightDist" (formula "4") (term "1,0,0,0,0"))
         (rule "mul_literals" (formula "4") (term "0,1,0,0,0,0"))
         (rule "polySimp_addAssoc" (formula "4") (term "0,0,0,0"))
         (rule "add_literals" (formula "4") (term "0,0,0,0,0"))
         (rule "polySimp_addComm1" (formula "4") (term "0,0,0"))
         (rule "add_literals" (formula "4") (term "0,0,0,0"))
         (rule "inEqSimp_sepNegMonomial0" (formula "4") (term "0,0"))
         (rule "polySimp_mulLiterals" (formula "4") (term "0,0,0"))
         (rule "polySimp_elimOne" (formula "4") (term "0,0,0"))
         (rule "eqSeqConcat" (formula "13"))
          (builtin "One Step Simplification" (formula "13"))
         (rule "add_literals" (formula "13") (term "1,0,0"))
         (rule "andLeft" (formula "13"))
         (rule "andLeft" (formula "13"))
         (rule "eqSeqSingleton" (formula "15"))
         (rule "andLeft" (formula "15"))
         (rule "lenOfSeqSub" (formula "13") (term "0"))
         (rule "sub_literals" (formula "13") (term "1,0"))
          (builtin "One Step Simplification" (formula "13"))
         (rule "equal_literals" (formula "13") (term "1"))
          (builtin "One Step Simplification" (formula "13"))
         (rule "less_literals" (formula "13"))
         (rule "true_left" (formula "13"))
         (rule "eqSeqSingleton" (formula "13"))
         (rule "andLeft" (formula "13"))
         (rule "lenOfSeqSub" (formula "15") (term "0"))
         (rule "polySimp_elimSub" (formula "15") (term "1,0"))
         (rule "mul_literals" (formula "15") (term "1,1,0"))
         (rule "polySimp_addComm0" (formula "15") (term "1,0"))
         (rule "lenOfSeqSub" (formula "16") (term "2,0,0"))
         (rule "less_literals" (formula "16") (term "0,2,0,0"))
          (builtin "One Step Simplification" (formula "16"))
         (rule "sub_literals" (formula "16") (term "2,0,0"))
         (rule "lenOfSeqSub" (formula "13") (term "0"))
         (rule "sub_literals" (formula "13") (term "1,0"))
          (builtin "One Step Simplification" (formula "13"))
         (rule "equal_literals" (formula "13") (term "1"))
          (builtin "One Step Simplification" (formula "13"))
         (rule "less_literals" (formula "13"))
         (rule "true_left" (formula "13"))
         (rule "lenOfSeqSub" (formula "14") (term "1,0,0"))
         (rule "less_literals" (formula "14") (term "0,1,0,0"))
          (builtin "One Step Simplification" (formula "14"))
         (rule "sub_literals" (formula "14") (term "1,0,0"))
         (rule "less_literals" (formula "14") (term "0,0"))
          (builtin "One Step Simplification" (formula "14"))
         (rule "polySimp_homoEq" (formula "14"))
         (rule "polySimp_mulComm0" (formula "14") (term "1,0"))
         (rule "polySimp_rightDist" (formula "14") (term "1,0"))
         (rule "mul_literals" (formula "14") (term "0,1,0"))
         (rule "polySimp_addAssoc" (formula "14") (term "0"))
         (rule "add_literals" (formula "14") (term "0,0"))
         (rule "lenOfSeqSub" (formula "14") (term "0,1,0"))
         (rule "less_literals" (formula "14") (term "0,0,1,0"))
          (builtin "One Step Simplification" (formula "14"))
         (rule "sub_literals" (formula "14") (term "0,1,0"))
         (rule "mul_literals" (formula "14") (term "1,0"))
         (rule "add_literals" (formula "14") (term "0"))
          (builtin "One Step Simplification" (formula "14"))
         (rule "true_left" (formula "14"))
         (rule "getOfSeqSub" (formula "21") (term "0"))
         (rule "castDel" (formula "21") (term "2,0"))
         (rule "leq_literals" (formula "21") (term "0,0,0"))
          (builtin "One Step Simplification" (formula "21"))
         (rule "add_literals" (formula "21") (term "1,1,0"))
         (rule "sub_literals" (formula "21") (term "1,0,0"))
         (rule "less_literals" (formula "21") (term "0,0"))
          (builtin "One Step Simplification" (formula "21"))
         (rule "getOfSeqSub" (formula "12") (term "0"))
         (rule "castDel" (formula "12") (term "2,0"))
         (rule "sub_literals" (formula "12") (term "1,1,0,0"))
         (rule "leq_literals" (formula "12") (term "0,0,0"))
          (builtin "One Step Simplification" (formula "12"))
         (rule "add_zero_left" (formula "12") (term "1,1,0"))
         (rule "less_literals" (formula "12") (term "0,0"))
          (builtin "One Step Simplification" (formula "12"))
         (rule "getOfSeqSub" (formula "6") (term "0"))
         (rule "castDel" (formula "6") (term "2,0"))
         (rule "leq_literals" (formula "6") (term "0,0,0"))
          (builtin "One Step Simplification" (formula "6"))
         (rule "add_zero_left" (formula "6") (term "1,1,0"))
         (rule "sub_literals" (formula "6") (term "1,0,0"))
         (rule "less_literals" (formula "6") (term "0,0"))
          (builtin "One Step Simplification" (formula "6"))
         (rule "eqSeqConcat" (formula "23"))
          (builtin "One Step Simplification" (formula "23"))
         (rule "andLeft" (formula "23"))
         (rule "andLeft" (formula "23"))
         (rule "lenOfSeqSub" (formula "25") (term "2,0"))
         (rule "less_literals" (formula "25") (term "0,2,0"))
          (builtin "One Step Simplification" (formula "25"))
         (rule "sub_literals" (formula "25") (term "2,0"))
         (rule "lenOfSeqSub" (formula "23") (term "0"))
         (rule "less_literals" (formula "23") (term "0,0"))
          (builtin "One Step Simplification" (formula "23"))
         (rule "sub_literals" (formula "23") (term "0"))
         (rule "polySimp_homoEq" (formula "23"))
         (rule "mul_literals" (formula "23") (term "1,0"))
         (rule "polySimp_addComm1" (formula "23") (term "0"))
         (rule "add_literals" (formula "23") (term "0,0"))
         (rule "eqSeqSingleton" (formula "24"))
         (rule "andLeft" (formula "24"))
         (rule "lenOfSeqConcat" (formula "23") (term "1,0"))
          (builtin "One Step Simplification" (formula "23"))
         (rule "polySimp_addAssoc" (formula "23") (term "0"))
         (rule "add_literals" (formula "23") (term "0,0"))
         (rule "lenOfSeqSub" (formula "24") (term "0"))
         (rule "less_literals" (formula "24") (term "0,0"))
          (builtin "One Step Simplification" (formula "24"))
         (rule "sub_literals" (formula "24") (term "0"))
          (builtin "One Step Simplification" (formula "24"))
         (rule "true_left" (formula "24"))
         (rule "lenOfSeqConcat" (formula "23") (term "1,0"))
          (builtin "One Step Simplification" (formula "23"))
         (rule "polySimp_addAssoc" (formula "23") (term "0"))
         (rule "add_literals" (formula "23") (term "0,0"))
         (rule "lenOfSeqConcat" (formula "23") (term "1,0"))
          (builtin "One Step Simplification" (formula "23"))
         (rule "add_literals" (formula "23") (term "1,0"))
         (rule "add_literals" (formula "23") (term "0"))
          (builtin "One Step Simplification" (formula "23"))
         (rule "true_left" (formula "23"))
         (rule "getOfSeqSub" (formula "11") (term "0"))
         (rule "castDel" (formula "11") (term "2,0"))
         (rule "leq_literals" (formula "11") (term "0,0,0"))
          (builtin "One Step Simplification" (formula "11"))
         (rule "polySimp_elimSub" (formula "11") (term "1,0,0"))
         (rule "polySimp_mulComm0" (formula "11") (term "1,1,0,0"))
         (rule "polySimp_rightDist" (formula "11") (term "1,1,0,0"))
         (rule "mul_literals" (formula "11") (term "0,1,1,0,0"))
         (rule "polySimp_addAssoc" (formula "11") (term "1,1,0"))
         (rule "add_literals" (formula "11") (term "0,1,1,0"))
         (rule "polySimp_addAssoc" (formula "11") (term "1,0,0"))
         (rule "polySimp_addComm0" (formula "11") (term "0,1,0,0"))
         (rule "polySimp_pullOutFactor1b" (formula "11") (term "1,0,0"))
         (rule "add_literals" (formula "11") (term "1,1,1,0,0"))
         (rule "times_zero_1" (formula "11") (term "1,1,0,0"))
         (rule "add_zero_right" (formula "11") (term "1,0,0"))
         (rule "less_literals" (formula "11") (term "0,0"))
          (builtin "One Step Simplification" (formula "11"))
         (rule "getOfSeqSub" (formula "5") (term "0"))
         (rule "castDel" (formula "5") (term "2,0"))
         (rule "sub_literals" (formula "5") (term "1,1,0,0"))
         (rule "add_literals" (formula "5") (term "1,1,0"))
         (rule "leq_literals" (formula "5") (term "0,0,0"))
          (builtin "One Step Simplification" (formula "5"))
         (rule "less_literals" (formula "5") (term "0,0"))
          (builtin "One Step Simplification" (formula "5"))
         (rule "getOfSeqSub" (formula "22") (term "0"))
         (rule "castDel" (formula "22") (term "2,0"))
         (rule "leq_literals" (formula "22") (term "0,0,0"))
          (builtin "One Step Simplification" (formula "22"))
         (rule "add_literals" (formula "22") (term "1,1,0"))
         (rule "sub_literals" (formula "22") (term "1,0,0"))
         (rule "less_literals" (formula "22") (term "0,0"))
          (builtin "One Step Simplification" (formula "22"))
         (rule "eqSeqConcat" (formula "7"))
          (builtin "One Step Simplification" (formula "7"))
         (rule "andLeft" (formula "7"))
         (rule "andLeft" (formula "7"))
         (rule "lenOfSeqSub" (formula "9") (term "2,0"))
         (rule "less_literals" (formula "9") (term "0,2,0"))
          (builtin "One Step Simplification" (formula "9"))
         (rule "sub_literals" (formula "9") (term "2,0"))
         (rule "eqSeqSingleton" (formula "8"))
         (rule "andLeft" (formula "8"))
         (rule "lenOfSeqSub" (formula "7") (term "0"))
         (rule "sub_literals" (formula "7") (term "1,0"))
         (rule "less_literals" (formula "7") (term "0,0"))
          (builtin "One Step Simplification" (formula "7"))
         (rule "polySimp_homoEq" (formula "7"))
         (rule "mul_literals" (formula "7") (term "1,0"))
         (rule "polySimp_addComm1" (formula "7") (term "0"))
         (rule "add_literals" (formula "7") (term "0,0"))
         (rule "lenOfSeqSub" (formula "8") (term "0"))
         (rule "less_literals" (formula "8") (term "0,0"))
          (builtin "One Step Simplification" (formula "8"))
         (rule "sub_literals" (formula "8") (term "0"))
          (builtin "One Step Simplification" (formula "8"))
         (rule "true_left" (formula "8"))
         (rule "lenOfSeqConcat" (formula "7") (term "1,0"))
          (builtin "One Step Simplification" (formula "7"))
         (rule "polySimp_addAssoc" (formula "7") (term "0"))
         (rule "add_literals" (formula "7") (term "0,0"))
         (rule "lenOfSeqConcat" (formula "7") (term "1,0"))
          (builtin "One Step Simplification" (formula "7"))
         (rule "polySimp_addAssoc" (formula "7") (term "0"))
         (rule "add_literals" (formula "7") (term "0,0"))
         (rule "lenOfSeqConcat" (formula "7") (term "1,0"))
          (builtin "One Step Simplification" (formula "7"))
         (rule "polySimp_addAssoc" (formula "7") (term "0"))
         (rule "add_literals" (formula "7") (term "0,0"))
         (rule "lenOfSeqConcat" (formula "7") (term "1,0"))
          (builtin "One Step Simplification" (formula "7"))
         (rule "add_literals" (formula "7") (term "1,0"))
         (rule "add_literals" (formula "7") (term "0"))
          (builtin "One Step Simplification" (formula "7"))
         (rule "true_left" (formula "7"))
         (rule "getOfSeqSub" (formula "14") (term "0"))
         (rule "castDel" (formula "14") (term "2,0"))
         (rule "leq_literals" (formula "14") (term "0,0,0"))
          (builtin "One Step Simplification" (formula "14"))
         (rule "add_zero_left" (formula "14") (term "1,1,0"))
         (rule "sub_literals" (formula "14") (term "1,0,0"))
         (rule "less_literals" (formula "14") (term "0,0"))
          (builtin "One Step Simplification" (formula "14"))
         (rule "getOfSeqSub" (formula "15") (term "0"))
         (rule "castDel" (formula "15") (term "2,0"))
         (rule "leq_literals" (formula "15") (term "0,0,0"))
          (builtin "One Step Simplification" (formula "15"))
         (rule "add_zero_left" (formula "15") (term "1,1,0"))
         (rule "sub_literals" (formula "15") (term "1,0,0"))
         (rule "less_literals" (formula "15") (term "0,0"))
          (builtin "One Step Simplification" (formula "15"))
         (rule "getOfSeqSub" (formula "22") (term "0"))
         (rule "castDel" (formula "22") (term "2,0"))
         (rule "add_literals" (formula "22") (term "1,1,0"))
         (rule "sub_literals" (formula "22") (term "1,1,0,0"))
         (rule "leq_literals" (formula "22") (term "0,0,0"))
          (builtin "One Step Simplification" (formula "22"))
         (rule "less_literals" (formula "22") (term "0,0"))
          (builtin "One Step Simplification" (formula "22"))
         (rule "getOfSeqSub" (formula "13") (term "0"))
         (rule "castDel" (formula "13") (term "2,0"))
         (rule "sub_literals" (formula "13") (term "1,1,0,0"))
         (rule "leq_literals" (formula "13") (term "0,0,0"))
          (builtin "One Step Simplification" (formula "13"))
         (rule "add_literals" (formula "13") (term "1,1,0"))
         (rule "less_literals" (formula "13") (term "0,0"))
          (builtin "One Step Simplification" (formula "13"))
         (rule "getOfSeqSub" (formula "6") (term "0"))
         (rule "castDel" (formula "6") (term "2,0"))
         (rule "sub_literals" (formula "6") (term "1,1,0,0"))
         (rule "add_zero_left" (formula "6") (term "1,1,0"))
         (rule "leq_literals" (formula "6") (term "0,0,0"))
          (builtin "One Step Simplification" (formula "6"))
         (rule "less_literals" (formula "6") (term "0,0"))
          (builtin "One Step Simplification" (formula "6"))
         (rule "getOfSeqSub" (formula "24") (term "0"))
         (rule "castDel" (formula "24") (term "2,0"))
         (rule "add_zero_left" (formula "24") (term "1,1,0"))
         (rule "leq_literals" (formula "24") (term "0,0,0"))
          (builtin "One Step Simplification" (formula "24"))
         (rule "sub_literals" (formula "24") (term "1,0,0"))
         (rule "less_literals" (formula "24") (term "0,0"))
          (builtin "One Step Simplification" (formula "24"))
         (rule "getOfSeqSub" (formula "5") (term "0"))
         (rule "castDel" (formula "5") (term "2,0"))
         (rule "add_zero_right" (formula "5") (term "1,1,0"))
         (rule "leq_literals" (formula "5") (term "0,0,0"))
          (builtin "One Step Simplification" (formula "5"))
         (rule "sub_literals" (formula "5") (term "1,0,0"))
         (rule "less_literals" (formula "5") (term "0,0"))
          (builtin "One Step Simplification" (formula "5"))
         (rule "getOfSeqSub" (formula "23") (term "0"))
         (rule "castDel" (formula "23") (term "2,0"))
         (rule "add_literals" (formula "23") (term "1,1,0"))
         (rule "sub_literals" (formula "23") (term "1,1,0,0"))
         (rule "leq_literals" (formula "23") (term "0,0,0"))
          (builtin "One Step Simplification" (formula "23"))
         (rule "less_literals" (formula "23") (term "0,0"))
          (builtin "One Step Simplification" (formula "23"))
         (rule "getOfSeqSub" (formula "7") (term "0"))
         (rule "castDel" (formula "7") (term "2,0"))
         (rule "leq_literals" (formula "7") (term "0,0,0"))
          (builtin "One Step Simplification" (formula "7"))
         (rule "add_zero_left" (formula "7") (term "1,1,0"))
         (rule "sub_literals" (formula "7") (term "1,0,0"))
         (rule "less_literals" (formula "7") (term "0,0"))
          (builtin "One Step Simplification" (formula "7"))
         (rule "eqSeqConcat" (formula "25"))
          (builtin "One Step Simplification" (formula "25"))
         (rule "andLeft" (formula "25"))
         (rule "andLeft" (formula "25"))
         (rule "lenOfSeqSub" (formula "27") (term "2,0"))
         (rule "less_literals" (formula "27") (term "0,2,0"))
          (builtin "One Step Simplification" (formula "27"))
         (rule "sub_literals" (formula "27") (term "2,0"))
         (rule "lenOfSeqConcat" (formula "25") (term "1,1"))
          (builtin "One Step Simplification" (formula "25"))
         (rule "polySimp_addAssoc" (formula "25") (term "1"))
         (rule "add_literals" (formula "25") (term "0,1"))
         (rule "eqSeqSingleton" (formula "26"))
         (rule "andLeft" (formula "26"))
         (rule "lenOfSeqSub" (formula "25") (term "0"))
         (rule "less_literals" (formula "25") (term "0,0"))
          (builtin "One Step Simplification" (formula "25"))
         (rule "sub_literals" (formula "25") (term "0"))
         (rule "polySimp_homoEq" (formula "25"))
         (rule "mul_literals" (formula "25") (term "1,0"))
         (rule "polySimp_addComm1" (formula "25") (term "0"))
         (rule "add_literals" (formula "25") (term "0,0"))
         (rule "lenOfSeqSub" (formula "26") (term "0"))
         (rule "sub_literals" (formula "26") (term "1,0"))
          (builtin "One Step Simplification" (formula "26"))
         (rule "less_literals" (formula "26") (term "0"))
          (builtin "One Step Simplification" (formula "26"))
         (rule "true_left" (formula "26"))
         (rule "lenOfSeqConcat" (formula "25") (term "1,0"))
          (builtin "One Step Simplification" (formula "25"))
         (rule "add_literals" (formula "25") (term "1,0"))
         (rule "add_literals" (formula "25") (term "0"))
          (builtin "One Step Simplification" (formula "25"))
         (rule "true_left" (formula "25"))
         (rule "getOfSeqSub" (formula "14") (term "0"))
         (rule "castDel" (formula "14") (term "2,0"))
         (rule "leq_literals" (formula "14") (term "0,0,0"))
          (builtin "One Step Simplification" (formula "14"))
         (rule "add_zero_left" (formula "14") (term "1,1,0"))
         (rule "sub_literals" (formula "14") (term "1,0,0"))
         (rule "less_literals" (formula "14") (term "0,0"))
          (builtin "One Step Simplification" (formula "14"))
         (rule "getOfSeqSub" (formula "15") (term "0"))
         (rule "castDel" (formula "15") (term "2,0"))
         (rule "add_literals" (formula "15") (term "1,1,0"))
         (rule "leq_literals" (formula "15") (term "0,0,0"))
          (builtin "One Step Simplification" (formula "15"))
         (rule "sub_literals" (formula "15") (term "1,0,0"))
         (rule "less_literals" (formula "15") (term "0,0"))
          (builtin "One Step Simplification" (formula "15"))
         (rule "getOfSeqSub" (formula "22") (term "0"))
         (rule "castDel" (formula "22") (term "2,0"))
         (rule "leq_literals" (formula "22") (term "0,0,0"))
          (builtin "One Step Simplification" (formula "22"))
         (rule "add_zero_right" (formula "22") (term "1,1,0"))
         (rule "sub_literals" (formula "22") (term "1,0,0"))
         (rule "less_literals" (formula "22") (term "0,0"))
          (builtin "One Step Simplification" (formula "22"))
         (rule "hideAuxiliaryEqConcrete" (formula "17"))
         (rule "getOfSeqSub" (formula "13") (term "0"))
         (rule "castDel" (formula "13") (term "2,0"))
         (rule "leq_literals" (formula "13") (term "0,0,0"))
          (builtin "One Step Simplification" (formula "13"))
         (rule "sub_literals" (formula "13") (term "1,0,0"))
         (rule "add_literals" (formula "13") (term "1,1,0"))
         (rule "less_literals" (formula "13") (term "0,0"))
          (builtin "One Step Simplification" (formula "13"))
         (rule "getOfSeqSub" (formula "6") (term "0"))
         (rule "castDel" (formula "6") (term "2,0"))
         (rule "add_literals" (formula "6") (term "1,1,0"))
         (rule "leq_literals" (formula "6") (term "0,0,0"))
          (builtin "One Step Simplification" (formula "6"))
         (rule "sub_literals" (formula "6") (term "1,0,0"))
         (rule "less_literals" (formula "6") (term "0,0"))
          (builtin "One Step Simplification" (formula "6"))
         (rule "getOfSeqSub" (formula "23") (term "0"))
         (rule "castDel" (formula "23") (term "2,0"))
         (rule "add_zero_left" (formula "23") (term "1,1,0"))
         (rule "leq_literals" (formula "23") (term "0,0,0"))
          (builtin "One Step Simplification" (formula "23"))
         (rule "sub_literals" (formula "23") (term "1,0,0"))
         (rule "less_literals" (formula "23") (term "0,0"))
          (builtin "One Step Simplification" (formula "23"))
         (rule "getOfSeqSub" (formula "5") (term "0"))
         (rule "castDel" (formula "5") (term "2,0"))
         (rule "leq_literals" (formula "5") (term "0,0,0"))
          (builtin "One Step Simplification" (formula "5"))
         (rule "add_zero_right" (formula "5") (term "1,1,0"))
         (rule "polySimp_elimSub" (formula "5") (term "1,0,0"))
         (rule "times_zero_2" (formula "5") (term "1,1,0,0"))
         (rule "add_zero_right" (formula "5") (term "1,0,0"))
         (rule "inEqSimp_ltToLeq" (formula "5") (term "0,0"))
         (rule "polySimp_rightDist" (formula "5") (term "1,0,0,0,0"))
         (rule "mul_literals" (formula "5") (term "0,1,0,0,0,0"))
         (rule "polySimp_addAssoc" (formula "5") (term "0,0,0,0"))
         (rule "add_literals" (formula "5") (term "0,0,0,0,0"))
         (rule "polySimp_addComm1" (formula "5") (term "0,0,0"))
         (rule "add_literals" (formula "5") (term "0,0,0,0"))
         (rule "inEqSimp_sepNegMonomial0" (formula "5") (term "0,0"))
         (rule "polySimp_mulLiterals" (formula "5") (term "0,0,0"))
         (rule "polySimp_elimOne" (formula "5") (term "0,0,0"))
         (rule "getOfSeqSub" (formula "22") (term "0"))
         (rule "castDel" (formula "22") (term "2,0"))
         (rule "add_literals" (formula "22") (term "1,1,0"))
         (rule "sub_literals" (formula "22") (term "1,1,0,0"))
         (rule "leq_literals" (formula "22") (term "0,0,0"))
          (builtin "One Step Simplification" (formula "22"))
         (rule "less_literals" (formula "22") (term "0,0"))
          (builtin "One Step Simplification" (formula "22"))
         (rule "eqSeqConcat" (formula "8"))
          (builtin "One Step Simplification" (formula "8"))
         (rule "andLeft" (formula "8"))
         (rule "andLeft" (formula "8"))
         (rule "lenOfSeqSub" (formula "10") (term "2,0"))
         (rule "sub_literals" (formula "10") (term "1,2,0"))
         (rule "less_literals" (formula "10") (term "0,2,0"))
          (builtin "One Step Simplification" (formula "10"))
         (rule "eqSeqSingleton" (formula "9"))
         (rule "andLeft" (formula "9"))
         (rule "lenOfSeqConcat" (formula "8") (term "1,1"))
          (builtin "One Step Simplification" (formula "8"))
         (rule "polySimp_addAssoc" (formula "8") (term "1"))
         (rule "add_literals" (formula "8") (term "0,1"))
         (rule "lenOfSeqSub" (formula "9") (term "0"))
         (rule "sub_literals" (formula "9") (term "1,0"))
          (builtin "One Step Simplification" (formula "9"))
         (rule "equal_literals" (formula "9") (term "1"))
          (builtin "One Step Simplification" (formula "9"))
         (rule "less_literals" (formula "9"))
         (rule "true_left" (formula "9"))
         (rule "lenOfSeqSub" (formula "8") (term "0"))
         (rule "less_literals" (formula "8") (term "0,0"))
          (builtin "One Step Simplification" (formula "8"))
         (rule "sub_literals" (formula "8") (term "0"))
         (rule "polySimp_homoEq" (formula "8"))
         (rule "mul_literals" (formula "8") (term "1,0"))
         (rule "polySimp_addComm1" (formula "8") (term "0"))
         (rule "add_literals" (formula "8") (term "0,0"))
         (rule "lenOfSeqConcat" (formula "8") (term "1,0"))
          (builtin "One Step Simplification" (formula "8"))
         (rule "polySimp_addAssoc" (formula "8") (term "0"))
         (rule "add_literals" (formula "8") (term "0,0"))
         (rule "lenOfSeqConcat" (formula "8") (term "1,0"))
          (builtin "One Step Simplification" (formula "8"))
         (rule "add_literals" (formula "8") (term "1,0"))
         (rule "add_literals" (formula "8") (term "0"))
          (builtin "One Step Simplification" (formula "8"))
         (rule "true_left" (formula "8"))
         (rule "getOfSeqSub" (formula "7") (term "0"))
         (rule "castDel" (formula "7") (term "2,0"))
         (rule "sub_literals" (formula "7") (term "1,1,0,0"))
         (rule "add_zero_left" (formula "7") (term "1,1,0"))
         (rule "leq_literals" (formula "7") (term "0,0,0"))
          (builtin "One Step Simplification" (formula "7"))
         (rule "less_literals" (formula "7") (term "0,0"))
          (builtin "One Step Simplification" (formula "7"))
         (rule "getOfSeqSub" (formula "25") (term "0"))
         (rule "castDel" (formula "25") (term "2,0"))
         (rule "add_zero_left" (formula "25") (term "1,1,0"))
         (rule "sub_literals" (formula "25") (term "1,1,0,0"))
         (rule "leq_literals" (formula "25") (term "0,0,0"))
          (builtin "One Step Simplification" (formula "25"))
         (rule "less_literals" (formula "25") (term "0,0"))
          (builtin "One Step Simplification" (formula "25"))
         (rule "getOfSeqSub" (formula "15") (term "0"))
         (rule "castDel" (formula "15") (term "2,0"))
         (rule "sub_literals" (formula "15") (term "1,1,0,0"))
         (rule "leq_literals" (formula "15") (term "0,0,0"))
          (builtin "One Step Simplification" (formula "15"))
         (rule "add_literals" (formula "15") (term "1,1,0"))
         (rule "less_literals" (formula "15") (term "0,0"))
          (builtin "One Step Simplification" (formula "15"))
         (rule "getOfSeqSub" (formula "16") (term "0"))
         (rule "castDel" (formula "16") (term "2,0"))
         (rule "leq_literals" (formula "16") (term "0,0,0"))
          (builtin "One Step Simplification" (formula "16"))
         (rule "add_literals" (formula "16") (term "1,1,0"))
         (rule "sub_literals" (formula "16") (term "1,0,0"))
         (rule "less_literals" (formula "16") (term "0,0"))
          (builtin "One Step Simplification" (formula "16"))
         (rule "Class_invariant_axiom_for_org_apache_commons_csv_CSVParser" (formula "40"))
         (rule "true_left" (formula "40"))
         (rule "getOfSeqSub" (formula "14") (term "0"))
         (rule "castDel" (formula "14") (term "2,0"))
         (rule "leq_literals" (formula "14") (term "0,0,0"))
          (builtin "One Step Simplification" (formula "14"))
         (rule "polySimp_elimSub" (formula "14") (term "1,0,0"))
         (rule "polySimp_mulComm0" (formula "14") (term "1,1,0,0"))
         (rule "polySimp_rightDist" (formula "14") (term "1,1,0,0"))
         (rule "mul_literals" (formula "14") (term "0,1,1,0,0"))
         (rule "polySimp_addAssoc" (formula "14") (term "1,1,0"))
         (rule "add_literals" (formula "14") (term "0,1,1,0"))
         (rule "polySimp_addAssoc" (formula "14") (term "1,0,0"))
         (rule "polySimp_addComm0" (formula "14") (term "0,1,0,0"))
         (rule "polySimp_pullOutFactor1b" (formula "14") (term "1,0,0"))
         (rule "add_literals" (formula "14") (term "1,1,1,0,0"))
         (rule "times_zero_1" (formula "14") (term "1,1,0,0"))
         (rule "add_zero_right" (formula "14") (term "1,0,0"))
         (rule "less_literals" (formula "14") (term "0,0"))
          (builtin "One Step Simplification" (formula "14"))
         (rule "getOfSeqSub" (formula "6") (term "0"))
         (rule "castDel" (formula "6") (term "2,0"))
         (rule "leq_literals" (formula "6") (term "0,0,0"))
          (builtin "One Step Simplification" (formula "6"))
         (rule "add_literals" (formula "6") (term "1,1,0"))
         (rule "sub_literals" (formula "6") (term "1,0,0"))
         (rule "less_literals" (formula "6") (term "0,0"))
          (builtin "One Step Simplification" (formula "6"))
         (rule "getOfSeqSub" (formula "24") (term "0"))
         (rule "castDel" (formula "24") (term "2,0"))
         (rule "sub_literals" (formula "24") (term "1,1,0,0"))
         (rule "add_literals" (formula "24") (term "1,1,0"))
         (rule "leq_literals" (formula "24") (term "0,0,0"))
          (builtin "One Step Simplification" (formula "24"))
         (rule "less_literals" (formula "24") (term "0,0"))
          (builtin "One Step Simplification" (formula "24"))
         (rule "eqSeqConcat" (formula "26"))
          (builtin "One Step Simplification" (formula "26"))
         (rule "andLeft" (formula "26"))
         (rule "andLeft" (formula "26"))
         (rule "lenOfSeqSub" (formula "28") (term "2,0"))
         (rule "less_literals" (formula "28") (term "0,2,0"))
          (builtin "One Step Simplification" (formula "28"))
         (rule "sub_literals" (formula "28") (term "2,0"))
         (rule "lenOfSeqConcat" (formula "26") (term "1,1"))
          (builtin "One Step Simplification" (formula "26"))
         (rule "add_literals" (formula "26") (term "1,1"))
         (rule "add_literals" (formula "26") (term "1"))
         (rule "eqSeqSingleton" (formula "27"))
         (rule "andLeft" (formula "27"))
         (rule "lenOfSeqSub" (formula "26") (term "0"))
         (rule "less_literals" (formula "26") (term "0,0"))
          (builtin "One Step Simplification" (formula "26"))
         (rule "sub_literals" (formula "26") (term "0"))
          (builtin "One Step Simplification" (formula "26"))
         (rule "true_left" (formula "26"))
         (rule "lenOfSeqSub" (formula "26") (term "0"))
         (rule "sub_literals" (formula "26") (term "1,0"))
          (builtin "One Step Simplification" (formula "26"))
         (rule "less_literals" (formula "26") (term "0"))
          (builtin "One Step Simplification" (formula "26"))
         (rule "true_left" (formula "26"))
         (rule "getOfSeqSub" (formula "23") (term "0"))
         (rule "castDel" (formula "23") (term "2,0"))
         (rule "leq_literals" (formula "23") (term "0,0,0"))
          (builtin "One Step Simplification" (formula "23"))
         (rule "add_literals" (formula "23") (term "1,1,0"))
         (rule "sub_literals" (formula "23") (term "1,0,0"))
         (rule "less_literals" (formula "23") (term "0,0"))
          (builtin "One Step Simplification" (formula "23"))
         (rule "getOfSeqSub" (formula "8") (term "0"))
         (rule "castDel" (formula "8") (term "2,0"))
         (rule "leq_literals" (formula "8") (term "0,0,0"))
          (builtin "One Step Simplification" (formula "8"))
         (rule "add_zero_left" (formula "8") (term "1,1,0"))
         (rule "sub_literals" (formula "8") (term "1,0,0"))
         (rule "less_literals" (formula "8") (term "0,0"))
          (builtin "One Step Simplification" (formula "8"))
         (rule "getOfSeqSub" (formula "7") (term "0"))
         (rule "castDel" (formula "7") (term "2,0"))
         (rule "add_literals" (formula "7") (term "1,1,0"))
         (rule "leq_literals" (formula "7") (term "0,0,0"))
          (builtin "One Step Simplification" (formula "7"))
         (rule "sub_literals" (formula "7") (term "1,0,0"))
         (rule "less_literals" (formula "7") (term "0,0"))
          (builtin "One Step Simplification" (formula "7"))
         (rule "getOfSeqSub" (formula "25") (term "0"))
         (rule "castDel" (formula "25") (term "2,0"))
         (rule "sub_literals" (formula "25") (term "1,1,0,0"))
         (rule "leq_literals" (formula "25") (term "0,0,0"))
          (builtin "One Step Simplification" (formula "25"))
         (rule "add_literals" (formula "25") (term "1,1,0"))
         (rule "less_literals" (formula "25") (term "0,0"))
          (builtin "One Step Simplification" (formula "25"))
         (rule "getOfSeqSub" (formula "15") (term "0"))
         (rule "castDel" (formula "15") (term "2,0"))
         (rule "add_literals" (formula "15") (term "1,1,0"))
         (rule "sub_literals" (formula "15") (term "1,1,0,0"))
         (rule "leq_literals" (formula "15") (term "0,0,0"))
          (builtin "One Step Simplification" (formula "15"))
         (rule "less_literals" (formula "15") (term "0,0"))
          (builtin "One Step Simplification" (formula "15"))
         (rule "getOfSeqSub" (formula "16") (term "0"))
         (rule "castDel" (formula "16") (term "2,0"))
         (rule "leq_literals" (formula "16") (term "0,0,0"))
          (builtin "One Step Simplification" (formula "16"))
         (rule "add_literals" (formula "16") (term "1,1,0"))
         (rule "sub_literals" (formula "16") (term "1,0,0"))
         (rule "less_literals" (formula "16") (term "0,0"))
          (builtin "One Step Simplification" (formula "16"))
         (rule "commute_or" (formula "18"))
         (rule "getOfSeqSub" (formula "6") (term "0"))
         (rule "castDel" (formula "6") (term "2,0"))
         (rule "add_literals" (formula "6") (term "1,1,0"))
         (rule "sub_literals" (formula "6") (term "1,1,0,0"))
         (rule "leq_literals" (formula "6") (term "0,0,0"))
          (builtin "One Step Simplification" (formula "6"))
         (rule "less_literals" (formula "6") (term "0,0"))
          (builtin "One Step Simplification" (formula "6"))
         (rule "getOfSeqSub" (formula "24") (term "0"))
         (rule "castDel" (formula "24") (term "2,0"))
         (rule "add_literals" (formula "24") (term "1,1,0"))
         (rule "leq_literals" (formula "24") (term "0,0,0"))
          (builtin "One Step Simplification" (formula "24"))
         (rule "sub_literals" (formula "24") (term "1,0,0"))
         (rule "less_literals" (formula "24") (term "0,0"))
          (builtin "One Step Simplification" (formula "24"))
         (rule "eqSeqConcat" (formula "9"))
          (builtin "One Step Simplification" (formula "9"))
         (rule "andLeft" (formula "9"))
         (rule "andLeft" (formula "9"))
         (rule "lenOfSeqSub" (formula "11") (term "2,0"))
         (rule "less_literals" (formula "11") (term "0,2,0"))
          (builtin "One Step Simplification" (formula "11"))
         (rule "sub_literals" (formula "11") (term "2,0"))
         (rule "lenOfSeqConcat" (formula "9") (term "1,1"))
          (builtin "One Step Simplification" (formula "9"))
         (rule "polySimp_addAssoc" (formula "9") (term "1"))
         (rule "add_literals" (formula "9") (term "0,1"))
         (rule "eqSeqSingleton" (formula "10"))
         (rule "andLeft" (formula "10"))
         (rule "lenOfSeqSub" (formula "9") (term "0"))
         (rule "less_literals" (formula "9") (term "0,0"))
          (builtin "One Step Simplification" (formula "9"))
         (rule "sub_literals" (formula "9") (term "0"))
         (rule "polySimp_homoEq" (formula "9"))
         (rule "mul_literals" (formula "9") (term "1,0"))
         (rule "polySimp_addComm1" (formula "9") (term "0"))
         (rule "add_literals" (formula "9") (term "0,0"))
         (rule "lenOfSeqSub" (formula "10") (term "0"))
         (rule "sub_literals" (formula "10") (term "1,0"))
          (builtin "One Step Simplification" (formula "10"))
         (rule "less_literals" (formula "10") (term "0"))
          (builtin "One Step Simplification" (formula "10"))
         (rule "true_left" (formula "10"))
         (rule "lenOfSeqConcat" (formula "9") (term "1,0"))
          (builtin "One Step Simplification" (formula "9"))
         (rule "add_literals" (formula "9") (term "1,0"))
         (rule "add_literals" (formula "9") (term "0"))
          (builtin "One Step Simplification" (formula "9"))
         (rule "true_left" (formula "9"))
         (rule "methodCallEmpty" (formula "50") (term "1"))
         (rule "getOfSeqSub" (formula "27") (term "0"))
         (rule "castDel" (formula "27") (term "2,0"))
         (rule "add_zero_left" (formula "27") (term "1,1,0"))
         (rule "leq_literals" (formula "27") (term "0,0,0"))
          (builtin "One Step Simplification" (formula "27"))
         (rule "sub_literals" (formula "27") (term "1,0,0"))
         (rule "less_literals" (formula "27") (term "0,0"))
          (builtin "One Step Simplification" (formula "27"))
         (rule "getOfSeqSub" (formula "24") (term "0"))
         (rule "castDel" (formula "24") (term "2,0"))
         (rule "add_zero_right" (formula "24") (term "1,1,0"))
         (rule "sub_literals" (formula "24") (term "1,1,0,0"))
         (rule "leq_literals" (formula "24") (term "0,0,0"))
          (builtin "One Step Simplification" (formula "24"))
         (rule "less_literals" (formula "24") (term "0,0"))
          (builtin "One Step Simplification" (formula "24"))
         (rule "getOfSeqSub" (formula "8") (term "0"))
         (rule "castDel" (formula "8") (term "2,0"))
         (rule "add_literals" (formula "8") (term "1,1,0"))
         (rule "leq_literals" (formula "8") (term "0,0,0"))
          (builtin "One Step Simplification" (formula "8"))
         (rule "sub_literals" (formula "8") (term "1,0,0"))
         (rule "less_literals" (formula "8") (term "0,0"))
          (builtin "One Step Simplification" (formula "8"))
         (rule "getOfSeqSub" (formula "7") (term "0"))
         (rule "castDel" (formula "7") (term "2,0"))
         (rule "add_literals" (formula "7") (term "1,1,0"))
         (rule "leq_literals" (formula "7") (term "0,0,0"))
          (builtin "One Step Simplification" (formula "7"))
         (rule "sub_literals" (formula "7") (term "1,0,0"))
         (rule "less_literals" (formula "7") (term "0,0"))
          (builtin "One Step Simplification" (formula "7"))
         (rule "getOfSeqSub" (formula "26") (term "0"))
         (rule "castDel" (formula "26") (term "2,0"))
         (rule "add_literals" (formula "26") (term "1,1,0"))
         (rule "leq_literals" (formula "26") (term "0,0,0"))
          (builtin "One Step Simplification" (formula "26"))
         (rule "sub_literals" (formula "26") (term "1,0,0"))
         (rule "less_literals" (formula "26") (term "0,0"))
          (builtin "One Step Simplification" (formula "26"))
         (rule "getOfSeqSub" (formula "16") (term "0"))
         (rule "castDel" (formula "16") (term "2,0"))
         (rule "sub_literals" (formula "16") (term "1,1,0,0"))
         (rule "add_literals" (formula "16") (term "1,1,0"))
         (rule "leq_literals" (formula "16") (term "0,0,0"))
          (builtin "One Step Simplification" (formula "16"))
         (rule "less_literals" (formula "16") (term "0,0"))
          (builtin "One Step Simplification" (formula "16"))
         (rule "getOfSeqSub" (formula "17") (term "0"))
         (rule "castDel" (formula "17") (term "2,0"))
         (rule "sub_literals" (formula "17") (term "1,1,0,0"))
         (rule "add_literals" (formula "17") (term "1,1,0"))
         (rule "leq_literals" (formula "17") (term "0,0,0"))
          (builtin "One Step Simplification" (formula "17"))
         (rule "less_literals" (formula "17") (term "0,0"))
          (builtin "One Step Simplification" (formula "17"))
         (rule "getOfSeqSub" (formula "6") (term "0"))
         (rule "castDel" (formula "6") (term "2,0"))
         (rule "add_zero_right" (formula "6") (term "1,1,0"))
         (rule "leq_literals" (formula "6") (term "0,0,0"))
          (builtin "One Step Simplification" (formula "6"))
         (rule "polySimp_elimSub" (formula "6") (term "1,0,0"))
         (rule "times_zero_2" (formula "6") (term "1,1,0,0"))
         (rule "add_zero_right" (formula "6") (term "1,0,0"))
         (rule "inEqSimp_ltToLeq" (formula "6") (term "0,0"))
         (rule "polySimp_rightDist" (formula "6") (term "1,0,0,0,0"))
         (rule "mul_literals" (formula "6") (term "0,1,0,0,0,0"))
         (rule "polySimp_addAssoc" (formula "6") (term "0,0,0,0"))
         (rule "add_literals" (formula "6") (term "0,0,0,0,0"))
         (rule "polySimp_addComm1" (formula "6") (term "0,0,0"))
         (rule "add_literals" (formula "6") (term "0,0,0,0"))
         (rule "inEqSimp_sepNegMonomial0" (formula "6") (term "0,0"))
         (rule "polySimp_mulLiterals" (formula "6") (term "0,0,0"))
         (rule "polySimp_elimOne" (formula "6") (term "0,0,0"))
         (rule "getOfSeqSub" (formula "25") (term "0"))
         (rule "castDel" (formula "25") (term "2,0"))
         (rule "leq_literals" (formula "25") (term "0,0,0"))
          (builtin "One Step Simplification" (formula "25"))
         (rule "add_literals" (formula "25") (term "1,1,0"))
         (rule "sub_literals" (formula "25") (term "1,0,0"))
         (rule "less_literals" (formula "25") (term "0,0"))
          (builtin "One Step Simplification" (formula "25"))
         (rule "getOfSeqSub" (formula "9") (term "0"))
         (rule "castDel" (formula "9") (term "2,0"))
         (rule "add_zero_left" (formula "9") (term "1,1,0"))
         (rule "leq_literals" (formula "9") (term "0,0,0"))
          (builtin "One Step Simplification" (formula "9"))
         (rule "sub_literals" (formula "9") (term "1,0,0"))
         (rule "less_literals" (formula "9") (term "0,0"))
          (builtin "One Step Simplification" (formula "9"))
         (rule "eqSeqConcat" (formula "28"))
          (builtin "One Step Simplification" (formula "28"))
         (rule "add_literals" (formula "28") (term "1,0,0"))
         (rule "andLeft" (formula "28"))
         (rule "andLeft" (formula "28"))
         (rule "eqSeqSingleton" (formula "30"))
         (rule "andLeft" (formula "30"))
         (rule "lenOfSeqSub" (formula "28") (term "0"))
         (rule "less_literals" (formula "28") (term "0,0"))
          (builtin "One Step Simplification" (formula "28"))
         (rule "sub_literals" (formula "28") (term "0"))
          (builtin "One Step Simplification" (formula "28"))
         (rule "true_left" (formula "28"))
         (rule "eqSeqSingleton" (formula "28"))
         (rule "andLeft" (formula "28"))
         (rule "lenOfSeqSub" (formula "30") (term "0"))
         (rule "polySimp_elimSub" (formula "30") (term "1,0"))
         (rule "mul_literals" (formula "30") (term "1,1,0"))
         (rule "polySimp_addComm0" (formula "30") (term "1,0"))
         (rule "lenOfSeqSub" (formula "31") (term "2,0,0"))
         (rule "less_literals" (formula "31") (term "0,2,0,0"))
          (builtin "One Step Simplification" (formula "31"))
         (rule "sub_literals" (formula "31") (term "2,0,0"))
         (rule "lenOfSeqSub" (formula "28") (term "0"))
         (rule "less_literals" (formula "28") (term "0,0"))
          (builtin "One Step Simplification" (formula "28"))
         (rule "sub_literals" (formula "28") (term "0"))
          (builtin "One Step Simplification" (formula "28"))
         (rule "true_left" (formula "28"))
         (rule "lenOfSeqSub" (formula "29") (term "1,0,0"))
         (rule "sub_literals" (formula "29") (term "1,1,0,0"))
         (rule "less_literals" (formula "29") (term "0,1,0,0"))
          (builtin "One Step Simplification" (formula "29"))
         (rule "less_literals" (formula "29") (term "0,0"))
          (builtin "One Step Simplification" (formula "29"))
         (rule "polySimp_homoEq" (formula "29"))
         (rule "polySimp_mulComm0" (formula "29") (term "1,0"))
         (rule "polySimp_rightDist" (formula "29") (term "1,0"))
         (rule "mul_literals" (formula "29") (term "0,1,0"))
         (rule "polySimp_addAssoc" (formula "29") (term "0"))
         (rule "add_literals" (formula "29") (term "0,0"))
         (rule "lenOfSeqSub" (formula "29") (term "0,1,0"))
         (rule "less_literals" (formula "29") (term "0,0,1,0"))
          (builtin "One Step Simplification" (formula "29"))
         (rule "sub_literals" (formula "29") (term "0,1,0"))
         (rule "mul_literals" (formula "29") (term "1,0"))
         (rule "add_literals" (formula "29") (term "0"))
          (builtin "One Step Simplification" (formula "29"))
         (rule "true_left" (formula "29"))
         (rule "getOfSeqSub" (formula "27") (term "0"))
         (rule "castDel" (formula "27") (term "2,0"))
         (rule "leq_literals" (formula "27") (term "0,0,0"))
          (builtin "One Step Simplification" (formula "27"))
         (rule "add_zero_left" (formula "27") (term "1,1,0"))
         (rule "sub_literals" (formula "27") (term "1,0,0"))
         (rule "less_literals" (formula "27") (term "0,0"))
          (builtin "One Step Simplification" (formula "27"))
         (rule "getOfSeqSub" (formula "8") (term "0"))
         (rule "castDel" (formula "8") (term "2,0"))
         (rule "leq_literals" (formula "8") (term "0,0,0"))
          (builtin "One Step Simplification" (formula "8"))
         (rule "add_literals" (formula "8") (term "1,1,0"))
         (rule "sub_literals" (formula "8") (term "1,0,0"))
         (rule "less_literals" (formula "8") (term "0,0"))
          (builtin "One Step Simplification" (formula "8"))
         (rule "getOfSeqSub" (formula "7") (term "0"))
         (rule "castDel" (formula "7") (term "2,0"))
         (rule "add_literals" (formula "7") (term "1,1,0"))
         (rule "sub_literals" (formula "7") (term "1,1,0,0"))
         (rule "leq_literals" (formula "7") (term "0,0,0"))
          (builtin "One Step Simplification" (formula "7"))
         (rule "less_literals" (formula "7") (term "0,0"))
          (builtin "One Step Simplification" (formula "7"))
         (rule "getOfSeqSub" (formula "26") (term "0"))
         (rule "castDel" (formula "26") (term "2,0"))
         (rule "add_literals" (formula "26") (term "1,1,0"))
         (rule "sub_literals" (formula "26") (term "1,1,0,0"))
         (rule "leq_literals" (formula "26") (term "0,0,0"))
          (builtin "One Step Simplification" (formula "26"))
         (rule "less_literals" (formula "26") (term "0,0"))
          (builtin "One Step Simplification" (formula "26"))
         (rule "onlyCreatedObjectsAreReferenced" (formula "48") (term "0") (ifseqformula "34"))
         (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "49"))
          (builtin "One Step Simplification" (formula "1"))
         (rule "getOfSeqSub" (formula "17") (term "0"))
         (rule "castDel" (formula "17") (term "2,0"))
         (rule "leq_literals" (formula "17") (term "0,0,0"))
          (builtin "One Step Simplification" (formula "17"))
         (rule "polySimp_elimSub" (formula "17") (term "1,0,0"))
         (rule "polySimp_mulComm0" (formula "17") (term "1,1,0,0"))
         (rule "polySimp_rightDist" (formula "17") (term "1,1,0,0"))
         (rule "mul_literals" (formula "17") (term "0,1,1,0,0"))
         (rule "polySimp_addAssoc" (formula "17") (term "1,1,0"))
         (rule "add_literals" (formula "17") (term "0,1,1,0"))
         (rule "polySimp_addAssoc" (formula "17") (term "1,0,0"))
         (rule "polySimp_addComm0" (formula "17") (term "0,1,0,0"))
         (rule "polySimp_pullOutFactor1b" (formula "17") (term "1,0,0"))
         (rule "add_literals" (formula "17") (term "1,1,1,0,0"))
         (rule "times_zero_1" (formula "17") (term "1,1,0,0"))
         (rule "add_zero_right" (formula "17") (term "1,0,0"))
         (rule "less_literals" (formula "17") (term "0,0"))
          (builtin "One Step Simplification" (formula "17"))
         (rule "onlyCreatedObjectsAreReferenced" (formula "48") (term "0") (ifseqformula "35"))
         (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "49"))
          (builtin "One Step Simplification" (formula "1"))
         (rule "getOfSeqSub" (formula "19") (term "0"))
         (rule "castDel" (formula "19") (term "2,0"))
         (rule "leq_literals" (formula "19") (term "0,0,0"))
          (builtin "One Step Simplification" (formula "19"))
         (rule "polySimp_elimSub" (formula "19") (term "1,0,0"))
         (rule "polySimp_mulComm0" (formula "19") (term "1,1,0,0"))
         (rule "polySimp_rightDist" (formula "19") (term "1,1,0,0"))
         (rule "mul_literals" (formula "19") (term "0,1,1,0,0"))
         (rule "polySimp_addAssoc" (formula "19") (term "1,1,0"))
         (rule "add_literals" (formula "19") (term "0,1,1,0"))
         (rule "polySimp_addAssoc" (formula "19") (term "1,0,0"))
         (rule "polySimp_addComm0" (formula "19") (term "0,1,0,0"))
         (rule "polySimp_pullOutFactor1b" (formula "19") (term "1,0,0"))
         (rule "add_literals" (formula "19") (term "1,1,1,0,0"))
         (rule "times_zero_1" (formula "19") (term "1,1,0,0"))
         (rule "add_zero_right" (formula "19") (term "1,0,0"))
         (rule "less_literals" (formula "19") (term "0,0"))
          (builtin "One Step Simplification" (formula "19"))
         (rule "eqSeqConcat" (formula "12"))
          (builtin "One Step Simplification" (formula "12"))
         (rule "andLeft" (formula "12"))
         (rule "andLeft" (formula "12"))
         (rule "lenOfSeqSub" (formula "14") (term "2,0"))
         (rule "sub_literals" (formula "14") (term "1,2,0"))
         (rule "less_literals" (formula "14") (term "0,2,0"))
          (builtin "One Step Simplification" (formula "14"))
         (rule "lenOfSeqSub" (formula "12") (term "0"))
         (rule "less_literals" (formula "12") (term "0,0"))
          (builtin "One Step Simplification" (formula "12"))
         (rule "sub_literals" (formula "12") (term "0"))
         (rule "polySimp_homoEq" (formula "12"))
         (rule "mul_literals" (formula "12") (term "1,0"))
         (rule "polySimp_addComm1" (formula "12") (term "0"))
         (rule "add_literals" (formula "12") (term "0,0"))
         (rule "eqSeqSingleton" (formula "13"))
         (rule "andLeft" (formula "13"))
         (rule "lenOfSeqConcat" (formula "12") (term "1,0"))
          (builtin "One Step Simplification" (formula "12"))
         (rule "add_literals" (formula "12") (term "1,0"))
         (rule "add_literals" (formula "12") (term "0"))
          (builtin "One Step Simplification" (formula "12"))
         (rule "true_left" (formula "12"))
         (rule "lenOfSeqSub" (formula "12") (term "0"))
         (rule "less_literals" (formula "12") (term "0,0"))
          (builtin "One Step Simplification" (formula "12"))
         (rule "sub_literals" (formula "12") (term "0"))
          (builtin "One Step Simplification" (formula "12"))
         (rule "true_left" (formula "12"))
         (rule "getOfSeqSub" (formula "28") (term "0"))
         (rule "castDel" (formula "28") (term "2,0"))
         (rule "sub_literals" (formula "28") (term "1,1,0,0"))
         (rule "add_literals" (formula "28") (term "1,1,0"))
         (rule "leq_literals" (formula "28") (term "0,0,0"))
          (builtin "One Step Simplification" (formula "28"))
         (rule "less_literals" (formula "28") (term "0,0"))
          (builtin "One Step Simplification" (formula "28"))
         (rule "getOfSeqSub" (formula "11") (term "0"))
         (rule "castDel" (formula "11") (term "2,0"))
         (rule "leq_literals" (formula "11") (term "0,0,0"))
          (builtin "One Step Simplification" (formula "11"))
         (rule "add_zero_left" (formula "11") (term "1,1,0"))
         (rule "sub_literals" (formula "11") (term "1,0,0"))
         (rule "less_literals" (formula "11") (term "0,0"))
          (builtin "One Step Simplification" (formula "11"))
         (rule "getOfSeqSub" (formula "31") (term "0"))
         (rule "castDel" (formula "31") (term "2,0"))
         (rule "add_zero_left" (formula "31") (term "1,1,0"))
         (rule "leq_literals" (formula "31") (term "0,0,0"))
          (builtin "One Step Simplification" (formula "31"))
         (rule "sub_literals" (formula "31") (term "1,0,0"))
         (rule "less_literals" (formula "31") (term "0,0"))
          (builtin "One Step Simplification" (formula "31"))
         (rule "getOfSeqSub" (formula "32") (term "0"))
         (rule "castDel" (formula "32") (term "2,0"))
         (rule "leq_literals" (formula "32") (term "0,0,0"))
          (builtin "One Step Simplification" (formula "32"))
         (rule "add_zero_left" (formula "32") (term "1,1,0"))
         (rule "sub_literals" (formula "32") (term "1,0,0"))
         (rule "less_literals" (formula "32") (term "0,0"))
          (builtin "One Step Simplification" (formula "32"))
         (rule "getOfSeqSub" (formula "30") (term "0"))
         (rule "castDel" (formula "30") (term "2,0"))
         (rule "leq_literals" (formula "30") (term "0,0,0"))
          (builtin "One Step Simplification" (formula "30"))
         (rule "add_literals" (formula "30") (term "1,1,0"))
         (rule "sub_literals" (formula "30") (term "1,0,0"))
         (rule "less_literals" (formula "30") (term "0,0"))
          (builtin "One Step Simplification" (formula "30"))
         (rule "getOfSeqSub" (formula "10") (term "0"))
         (rule "castDel" (formula "10") (term "2,0"))
         (rule "sub_literals" (formula "10") (term "1,1,0,0"))
         (rule "leq_literals" (formula "10") (term "0,0,0"))
          (builtin "One Step Simplification" (formula "10"))
         (rule "add_literals" (formula "10") (term "1,1,0"))
         (rule "less_literals" (formula "10") (term "0,0"))
          (builtin "One Step Simplification" (formula "10"))
         (rule "getOfSeqSub" (formula "9") (term "0"))
         (rule "castDel" (formula "9") (term "2,0"))
         (rule "leq_literals" (formula "9") (term "0,0,0"))
          (builtin "One Step Simplification" (formula "9"))
         (rule "add_zero_right" (formula "9") (term "1,1,0"))
         (rule "sub_literals" (formula "9") (term "1,0,0"))
         (rule "less_literals" (formula "9") (term "0,0"))
          (builtin "One Step Simplification" (formula "9"))
         (rule "getOfSeqSub" (formula "29") (term "0"))
         (rule "castDel" (formula "29") (term "2,0"))
         (rule "leq_literals" (formula "29") (term "0,0,0"))
          (builtin "One Step Simplification" (formula "29"))
         (rule "add_literals" (formula "29") (term "1,1,0"))
         (rule "sub_literals" (formula "29") (term "1,0,0"))
         (rule "less_literals" (formula "29") (term "0,0"))
          (builtin "One Step Simplification" (formula "29"))
         (rule "lenNonNegative" (formula "33") (term "2,0"))
         (rule "inEqSimp_commuteLeq" (formula "33"))
         (rule "equalityToSeqGetAndSeqLenLeft" (formula "34") (inst "iv=iv"))
         (rule "andLeft" (formula "34"))
         (rule "lenOfSeqSub" (formula "34") (term "0"))
         (rule "polySimp_elimSub" (formula "34") (term "1,0"))
         (rule "mul_literals" (formula "34") (term "1,1,0"))
         (rule "polySimp_addComm0" (formula "34") (term "1,0"))
         (rule "lenOfSeqSub" (formula "35") (term "1,1,0,0"))
         (rule "polySimp_elimSub" (formula "35") (term "1,1,1,0,0"))
         (rule "mul_literals" (formula "35") (term "1,1,1,1,0,0"))
         (rule "polySimp_addComm0" (formula "35") (term "1,1,1,0,0"))
         (rule "lenOfSeqSubEQ" (formula "34") (term "1") (ifseqformula "14"))
         (rule "eqSymm" (formula "34"))
         (rule "polySimp_elimSub" (formula "34") (term "1,0"))
         (rule "mul_literals" (formula "34") (term "1,1,0"))
         (rule "polySimp_addComm0" (formula "34") (term "1,0"))
         (rule "inEqSimp_ltToLeq" (formula "35") (term "0,1,1,0,0"))
         (rule "polySimp_mulComm0" (formula "35") (term "1,0,0,0,1,1,0,0"))
         (rule "polySimp_addComm1" (formula "35") (term "0,0,1,1,0,0"))
         (rule "add_literals" (formula "35") (term "0,0,0,1,1,0,0"))
         (rule "inEqSimp_ltToLeq" (formula "34") (term "0,1"))
         (rule "polySimp_mulComm0" (formula "34") (term "1,0,0,0,1"))
         (rule "polySimp_addComm1" (formula "34") (term "0,0,1"))
         (rule "add_literals" (formula "34") (term "0,0,0,1"))
         (rule "inEqSimp_ltToLeq" (formula "34") (term "0,0"))
         (rule "polySimp_mulComm0" (formula "34") (term "1,0,0,0,0"))
         (rule "polySimp_addComm1" (formula "34") (term "0,0,0"))
         (rule "add_literals" (formula "34") (term "0,0,0,0"))
         (rule "inEqSimp_ltToLeq" (formula "35") (term "1,0,0"))
         (rule "polySimp_mulComm0" (formula "35") (term "1,0,0,1,0,0"))
         (rule "inEqSimp_commuteLeq" (formula "35") (term "0,0,0"))
         (rule "applyEq" (formula "35") (term "0,0,1,0") (ifseqformula "36"))
          (builtin "One Step Simplification" (formula "35"))
         (rule "true_left" (formula "35"))
         (rule "inEqSimp_sepNegMonomial0" (formula "34") (term "0,1"))
         (rule "polySimp_mulLiterals" (formula "34") (term "0,0,1"))
         (rule "polySimp_elimOne" (formula "34") (term "0,0,1"))
         (rule "applyEq" (formula "34") (term "1") (ifseqformula "3"))
         (rule "inEqSimp_sepNegMonomial0" (formula "34") (term "0,0"))
         (rule "polySimp_mulLiterals" (formula "34") (term "0,0,0"))
         (rule "polySimp_elimOne" (formula "34") (term "0,0,0"))
         (rule "getOfSeqSub" (formula "12") (term "0"))
         (rule "castDel" (formula "12") (term "2,0"))
         (rule "leq_literals" (formula "12") (term "0,0,0"))
          (builtin "One Step Simplification" (formula "12"))
         (rule "add_zero_left" (formula "12") (term "1,1,0"))
         (rule "sub_literals" (formula "12") (term "1,0,0"))
         (rule "less_literals" (formula "12") (term "0,0"))
          (builtin "One Step Simplification" (formula "12"))
         (rule "getOfSeqSub" (formula "28") (term "0"))
         (rule "castDel" (formula "28") (term "2,0"))
         (rule "leq_literals" (formula "28") (term "0,0,0"))
          (builtin "One Step Simplification" (formula "28"))
         (rule "add_zero_right" (formula "28") (term "1,1,0"))
         (rule "sub_literals" (formula "28") (term "1,0,0"))
         (rule "less_literals" (formula "28") (term "0,0"))
          (builtin "One Step Simplification" (formula "28"))
         (rule "getOfSeqSub" (formula "11") (term "0"))
         (rule "castDel" (formula "11") (term "2,0"))
         (rule "leq_literals" (formula "11") (term "0,0,0"))
          (builtin "One Step Simplification" (formula "11"))
         (rule "sub_literals" (formula "11") (term "1,0,0"))
         (rule "add_literals" (formula "11") (term "1,1,0"))
         (rule "less_literals" (formula "11") (term "0,0"))
          (builtin "One Step Simplification" (formula "11"))
         (rule "getOfSeqSub" (formula "31") (term "0"))
         (rule "castDel" (formula "31") (term "2,0"))
         (rule "leq_literals" (formula "31") (term "0,0,0"))
          (builtin "One Step Simplification" (formula "31"))
         (rule "sub_literals" (formula "31") (term "1,0,0"))
         (rule "add_zero_left" (formula "31") (term "1,1,0"))
         (rule "less_literals" (formula "31") (term "0,0"))
          (builtin "One Step Simplification" (formula "31"))
         (rule "getOfSeqSub" (formula "32") (term "0"))
         (rule "castDel" (formula "32") (term "2,0"))
         (rule "leq_literals" (formula "32") (term "0,0,0"))
          (builtin "One Step Simplification" (formula "32"))
         (rule "add_literals" (formula "32") (term "1,1,0"))
         (rule "sub_literals" (formula "32") (term "1,0,0"))
         (rule "less_literals" (formula "32") (term "0,0"))
          (builtin "One Step Simplification" (formula "32"))
         (rule "charLiteral_to_int" (formula "23") (term "1"))
         (rule "getOfSeqSub" (formula "30") (term "0"))
         (rule "castDel" (formula "30") (term "2,0"))
         (rule "sub_literals" (formula "30") (term "1,1,0,0"))
         (rule "leq_literals" (formula "30") (term "0,0,0"))
          (builtin "One Step Simplification" (formula "30"))
         (rule "less_literals" (formula "30") (term "0,0"))
          (builtin "One Step Simplification" (formula "30"))
         (rule "add_literals" (formula "30") (term "1,0"))
         (rule "getOfSeqSub" (formula "10") (term "0"))
         (rule "castDel" (formula "10") (term "2,0"))
         (rule "leq_literals" (formula "10") (term "0,0,0"))
          (builtin "One Step Simplification" (formula "10"))
         (rule "sub_literals" (formula "10") (term "1,0,0"))
         (rule "add_literals" (formula "10") (term "1,1,0"))
         (rule "less_literals" (formula "10") (term "0,0"))
          (builtin "One Step Simplification" (formula "10"))
         (rule "getOfSeqSub" (formula "9") (term "0"))
         (rule "castDel" (formula "9") (term "2,0"))
         (rule "add_literals" (formula "9") (term "1,1,0"))
         (rule "leq_literals" (formula "9") (term "0,0,0"))
          (builtin "One Step Simplification" (formula "9"))
         (rule "polySimp_elimSub" (formula "9") (term "1,0,0"))
         (rule "times_zero_2" (formula "9") (term "1,1,0,0"))
         (rule "add_zero_right" (formula "9") (term "1,0,0"))
         (rule "inEqSimp_ltToLeq" (formula "9") (term "0,0"))
         (rule "polySimp_rightDist" (formula "9") (term "1,0,0,0,0"))
         (rule "mul_literals" (formula "9") (term "0,1,0,0,0,0"))
         (rule "polySimp_addAssoc" (formula "9") (term "0,0,0,0"))
         (rule "add_literals" (formula "9") (term "0,0,0,0,0"))
         (rule "polySimp_addComm1" (formula "9") (term "0,0,0"))
         (rule "add_literals" (formula "9") (term "0,0,0,0"))
         (rule "inEqSimp_sepNegMonomial0" (formula "9") (term "0,0"))
         (rule "polySimp_mulLiterals" (formula "9") (term "0,0,0"))
         (rule "polySimp_elimOne" (formula "9") (term "0,0,0"))
         (rule "getOfSeqSub" (formula "29") (term "0"))
         (rule "castDel" (formula "29") (term "2,0"))
         (rule "leq_literals" (formula "29") (term "0,0,0"))
          (builtin "One Step Simplification" (formula "29"))
         (rule "add_literals" (formula "29") (term "1,1,0"))
         (rule "sub_literals" (formula "29") (term "1,0,0"))
         (rule "less_literals" (formula "29") (term "0,0"))
          (builtin "One Step Simplification" (formula "29"))
         (rule "eqSeqConcat" (formula "13"))
          (builtin "One Step Simplification" (formula "13"))
         (rule "add_literals" (formula "13") (term "1,0,0"))
         (rule "andLeft" (formula "13"))
         (rule "andLeft" (formula "13"))
         (rule "lenOfSeqSub" (formula "15") (term "2,0"))
         (rule "sub_literals" (formula "15") (term "1,2,0"))
         (rule "less_literals" (formula "15") (term "0,2,0"))
          (builtin "One Step Simplification" (formula "15"))
         (rule "lenOfSeqSub" (formula "13") (term "0"))
         (rule "less_literals" (formula "13") (term "0,0"))
          (builtin "One Step Simplification" (formula "13"))
         (rule "sub_literals" (formula "13") (term "0"))
          (builtin "One Step Simplification" (formula "13"))
         (rule "true_left" (formula "13"))
         (rule "eqSeqSingleton" (formula "13"))
         (rule "andLeft" (formula "13"))
         (rule "eqSeqSingleton" (formula "15"))
         (rule "andLeft" (formula "15"))
         (rule "lenOfSeqSub" (formula "13") (term "0"))
         (rule "sub_literals" (formula "13") (term "1,0"))
          (builtin "One Step Simplification" (formula "13"))
         (rule "less_literals" (formula "13") (term "0"))
          (builtin "One Step Simplification" (formula "13"))
         (rule "true_left" (formula "13"))
         (rule "lenOfSeqSub" (formula "14") (term "0"))
         (rule "sub_literals" (formula "14") (term "1,0"))
          (builtin "One Step Simplification" (formula "14"))
         (rule "equal_literals" (formula "14") (term "1"))
          (builtin "One Step Simplification" (formula "14"))
         (rule "less_literals" (formula "14"))
         (rule "true_left" (formula "14"))
         (rule "getOfSeqSub" (formula "12") (term "0"))
         (rule "castDel" (formula "12") (term "2,0"))
         (rule "add_zero_left" (formula "12") (term "1,1,0"))
         (rule "sub_literals" (formula "12") (term "1,1,0,0"))
         (rule "leq_literals" (formula "12") (term "0,0,0"))
          (builtin "One Step Simplification" (formula "12"))
         (rule "less_literals" (formula "12") (term "0,0"))
          (builtin "One Step Simplification" (formula "12"))
         (rule "cnf_rightDist" (formula "4"))
         (rule "andLeft" (formula "4"))
         (rule "getOfSeqSub" (formula "12") (term "0"))
         (rule "castDel" (formula "12") (term "2,0"))
         (rule "sub_literals" (formula "12") (term "1,1,0,0"))
         (rule "add_literals" (formula "12") (term "1,1,0"))
         (rule "leq_literals" (formula "12") (term "0,0,0"))
          (builtin "One Step Simplification" (formula "12"))
         (rule "less_literals" (formula "12") (term "0,0"))
          (builtin "One Step Simplification" (formula "12"))
         (rule "getOfSeqSub" (formula "33") (term "0"))
         (rule "castDel" (formula "33") (term "2,0"))
         (rule "leq_literals" (formula "33") (term "0,0,0"))
          (builtin "One Step Simplification" (formula "33"))
         (rule "add_literals" (formula "33") (term "1,1,0"))
         (rule "sub_literals" (formula "33") (term "1,0,0"))
         (rule "less_literals" (formula "33") (term "0,0"))
          (builtin "One Step Simplification" (formula "33"))
         (rule "getOfSeqSub" (formula "34") (term "0"))
         (rule "castDel" (formula "34") (term "2,0"))
         (rule "sub_literals" (formula "34") (term "1,1,0,0"))
         (rule "add_literals" (formula "34") (term "1,1,0"))
         (rule "leq_literals" (formula "34") (term "0,0,0"))
          (builtin "One Step Simplification" (formula "34"))
         (rule "less_literals" (formula "34") (term "0,0"))
          (builtin "One Step Simplification" (formula "34"))
         (rule "lenNonNegative" (formula "3") (term "1,1"))
         (rule "inEqSimp_commuteLeq" (formula "3"))
         (rule "getOfSeqSub" (formula "33") (term "0"))
         (rule "castDel" (formula "33") (term "2,0"))
         (rule "leq_literals" (formula "33") (term "0,0,0"))
          (builtin "One Step Simplification" (formula "33"))
         (rule "add_literals" (formula "33") (term "1,1,0"))
         (rule "sub_literals" (formula "33") (term "1,0,0"))
         (rule "less_literals" (formula "33") (term "0,0"))
          (builtin "One Step Simplification" (formula "33"))
         (rule "getOfSeqSub" (formula "12") (term "0"))
         (rule "castDel" (formula "12") (term "2,0"))
         (rule "sub_literals" (formula "12") (term "1,1,0,0"))
         (rule "leq_literals" (formula "12") (term "0,0,0"))
          (builtin "One Step Simplification" (formula "12"))
         (rule "add_literals" (formula "12") (term "1,1,0"))
         (rule "less_literals" (formula "12") (term "0,0"))
          (builtin "One Step Simplification" (formula "12"))
         (rule "getOfSeqSub" (formula "32") (term "0"))
         (rule "castDel" (formula "32") (term "2,0"))
         (rule "sub_literals" (formula "32") (term "1,1,0,0"))
         (rule "leq_literals" (formula "32") (term "0,0,0"))
          (builtin "One Step Simplification" (formula "32"))
         (rule "less_literals" (formula "32") (term "0,0"))
          (builtin "One Step Simplification" (formula "32"))
         (rule "add_literals" (formula "32") (term "1,0"))
         (rule "getOfSeqSub" (formula "15") (term "0"))
         (rule "castDel" (formula "15") (term "2,0"))
         (rule "sub_literals" (formula "15") (term "1,1,0,0"))
         (rule "leq_literals" (formula "15") (term "0,0,0"))
          (builtin "One Step Simplification" (formula "15"))
         (rule "less_literals" (formula "15") (term "0,0"))
          (builtin "One Step Simplification" (formula "15"))
         (rule "add_zero_left" (formula "15") (term "1,0"))
         (rule "getOfSeqSub" (formula "16") (term "0"))
         (rule "castDel" (formula "16") (term "2,0"))
         (rule "sub_literals" (formula "16") (term "1,1,0,0"))
         (rule "leq_literals" (formula "16") (term "0,0,0"))
          (builtin "One Step Simplification" (formula "16"))
         (rule "less_literals" (formula "16") (term "0,0"))
          (builtin "One Step Simplification" (formula "16"))
         (rule "add_zero_left" (formula "16") (term "1,0"))
         (rule "getOfSeqSub" (formula "14") (term "0"))
         (rule "castDel" (formula "14") (term "2,0"))
         (rule "sub_literals" (formula "14") (term "1,1,0,0"))
         (rule "leq_literals" (formula "14") (term "0,0,0"))
          (builtin "One Step Simplification" (formula "14"))
         (rule "less_literals" (formula "14") (term "0,0"))
          (builtin "One Step Simplification" (formula "14"))
         (rule "add_literals" (formula "14") (term "1,0"))
         (rule "seqGetAlphaCast" (formula "26") (term "0"))
         (rule "castDel" (formula "26") (term "0"))
          (builtin "One Step Simplification" (formula "26"))
         (rule "true_left" (formula "26"))
         (rule "getOfSeqSub" (formula "13") (term "0"))
         (rule "castDel" (formula "13") (term "2,0"))
         (rule "leq_literals" (formula "13") (term "0,0,0"))
          (builtin "One Step Simplification" (formula "13"))
         (rule "add_literals" (formula "13") (term "1,1,0"))
         (rule "sub_literals" (formula "13") (term "1,0,0"))
         (rule "less_literals" (formula "13") (term "0,0"))
          (builtin "One Step Simplification" (formula "13"))
         (rule "getOfSeqSub" (formula "34") (term "0"))
         (rule "castDel" (formula "34") (term "2,0"))
         (rule "sub_literals" (formula "34") (term "1,1,0,0"))
         (rule "add_literals" (formula "34") (term "1,1,0"))
         (rule "leq_literals" (formula "34") (term "0,0,0"))
          (builtin "One Step Simplification" (formula "34"))
         (rule "less_literals" (formula "34") (term "0,0"))
          (builtin "One Step Simplification" (formula "34"))
         (rule "getOfSeqSub" (formula "35") (term "0"))
         (rule "castDel" (formula "35") (term "2,0"))
         (rule "add_literals" (formula "35") (term "1,1,0"))
         (rule "sub_literals" (formula "35") (term "1,1,0,0"))
         (rule "leq_literals" (formula "35") (term "0,0,0"))
          (builtin "One Step Simplification" (formula "35"))
         (rule "less_literals" (formula "35") (term "0,0"))
          (builtin "One Step Simplification" (formula "35"))
         (rule "getOfSeqSub" (formula "33") (term "0"))
         (rule "castDel" (formula "33") (term "2,0"))
         (rule "add_literals" (formula "33") (term "1,1,0"))
         (rule "sub_literals" (formula "33") (term "1,1,0,0"))
         (rule "leq_literals" (formula "33") (term "0,0,0"))
          (builtin "One Step Simplification" (formula "33"))
         (rule "less_literals" (formula "33") (term "0,0"))
          (builtin "One Step Simplification" (formula "33"))
         (rule "getOfSeqSub" (formula "12") (term "0"))
         (rule "castDel" (formula "12") (term "2,0"))
         (rule "add_zero_right" (formula "12") (term "1,1,0"))
         (rule "leq_literals" (formula "12") (term "0,0,0"))
          (builtin "One Step Simplification" (formula "12"))
         (rule "sub_literals" (formula "12") (term "1,0,0"))
         (rule "less_literals" (formula "12") (term "0,0"))
          (builtin "One Step Simplification" (formula "12"))
         (rule "getOfSeqSub" (formula "32") (term "0"))
         (rule "castDel" (formula "32") (term "2,0"))
         (rule "leq_literals" (formula "32") (term "0,0,0"))
          (builtin "One Step Simplification" (formula "32"))
         (rule "add_zero_right" (formula "32") (term "1,1,0"))
         (rule "sub_literals" (formula "32") (term "1,0,0"))
         (rule "less_literals" (formula "32") (term "0,0"))
          (builtin "One Step Simplification" (formula "32"))
         (rule "getOfSeqSub" (formula "15") (term "0"))
         (rule "castDel" (formula "15") (term "2,0"))
         (rule "sub_literals" (formula "15") (term "1,1,0,0"))
         (rule "add_literals" (formula "15") (term "1,1,0"))
         (rule "leq_literals" (formula "15") (term "0,0,0"))
          (builtin "One Step Simplification" (formula "15"))
         (rule "less_literals" (formula "15") (term "0,0"))
          (builtin "One Step Simplification" (formula "15"))
         (rule "getOfSeqSub" (formula "16") (term "0"))
         (rule "castDel" (formula "16") (term "2,0"))
         (rule "leq_literals" (formula "16") (term "0,0,0"))
          (builtin "One Step Simplification" (formula "16"))
         (rule "add_literals" (formula "16") (term "1,1,0"))
         (rule "sub_literals" (formula "16") (term "1,0,0"))
         (rule "less_literals" (formula "16") (term "0,0"))
          (builtin "One Step Simplification" (formula "16"))
         (rule "getOfSeqSub" (formula "14") (term "0"))
         (rule "castDel" (formula "14") (term "2,0"))
         (rule "add_literals" (formula "14") (term "1,1,0"))
         (rule "sub_literals" (formula "14") (term "1,1,0,0"))
         (rule "leq_literals" (formula "14") (term "0,0,0"))
          (builtin "One Step Simplification" (formula "14"))
         (rule "less_literals" (formula "14") (term "0,0"))
          (builtin "One Step Simplification" (formula "14"))
         (rule "getOfSeqSub" (formula "13") (term "0"))
         (rule "castDel" (formula "13") (term "2,0"))
         (rule "sub_literals" (formula "13") (term "1,1,0,0"))
         (rule "add_literals" (formula "13") (term "1,1,0"))
         (rule "leq_literals" (formula "13") (term "0,0,0"))
          (builtin "One Step Simplification" (formula "13"))
         (rule "less_literals" (formula "13") (term "0,0"))
          (builtin "One Step Simplification" (formula "13"))
         (rule "getOfSeqSub" (formula "34") (term "0"))
         (rule "castDel" (formula "34") (term "2,0"))
         (rule "add_literals" (formula "34") (term "1,1,0"))
         (rule "leq_literals" (formula "34") (term "0,0,0"))
          (builtin "One Step Simplification" (formula "34"))
         (rule "sub_literals" (formula "34") (term "1,0,0"))
         (rule "less_literals" (formula "34") (term "0,0"))
          (builtin "One Step Simplification" (formula "34"))
         (rule "getOfSeqSub" (formula "35") (term "0"))
         (rule "castDel" (formula "35") (term "2,0"))
         (rule "add_literals" (formula "35") (term "1,1,0"))
         (rule "sub_literals" (formula "35") (term "1,1,0,0"))
         (rule "leq_literals" (formula "35") (term "0,0,0"))
          (builtin "One Step Simplification" (formula "35"))
         (rule "less_literals" (formula "35") (term "0,0"))
          (builtin "One Step Simplification" (formula "35"))
         (rule "getOfSeqSub" (formula "33") (term "0"))
         (rule "castDel" (formula "33") (term "2,0"))
         (rule "add_literals" (formula "33") (term "1,1,0"))
         (rule "leq_literals" (formula "33") (term "0,0,0"))
          (builtin "One Step Simplification" (formula "33"))
         (rule "sub_literals" (formula "33") (term "1,0,0"))
         (rule "less_literals" (formula "33") (term "0,0"))
          (builtin "One Step Simplification" (formula "33"))
         (rule "getOfSeqSub" (formula "12") (term "0"))
         (rule "castDel" (formula "12") (term "2,0"))
         (rule "add_zero_right" (formula "12") (term "1,1,0"))
         (rule "leq_literals" (formula "12") (term "0,0,0"))
          (builtin "One Step Simplification" (formula "12"))
         (rule "polySimp_elimSub" (formula "12") (term "1,0,0"))
         (rule "times_zero_2" (formula "12") (term "1,1,0,0"))
         (rule "add_zero_right" (formula "12") (term "1,0,0"))
         (rule "inEqSimp_ltToLeq" (formula "12") (term "0,0"))
         (rule "polySimp_rightDist" (formula "12") (term "1,0,0,0,0"))
         (rule "mul_literals" (formula "12") (term "0,1,0,0,0,0"))
         (rule "polySimp_addAssoc" (formula "12") (term "0,0,0,0"))
         (rule "add_literals" (formula "12") (term "0,0,0,0,0"))
         (rule "polySimp_addComm1" (formula "12") (term "0,0,0"))
         (rule "add_literals" (formula "12") (term "0,0,0,0"))
         (rule "inEqSimp_sepNegMonomial0" (formula "12") (term "0,0"))
         (rule "polySimp_mulLiterals" (formula "12") (term "0,0,0"))
         (rule "polySimp_elimOne" (formula "12") (term "0,0,0"))
         (rule "getOfSeqSub" (formula "15") (term "0"))
         (rule "castDel" (formula "15") (term "2,0"))
         (rule "leq_literals" (formula "15") (term "0,0,0"))
          (builtin "One Step Simplification" (formula "15"))
         (rule "add_literals" (formula "15") (term "1,1,0"))
         (rule "sub_literals" (formula "15") (term "1,0,0"))
         (rule "less_literals" (formula "15") (term "0,0"))
          (builtin "One Step Simplification" (formula "15"))
         (rule "getOfSeqSub" (formula "16") (term "0"))
         (rule "castDel" (formula "16") (term "2,0"))
         (rule "add_literals" (formula "16") (term "1,1,0"))
         (rule "sub_literals" (formula "16") (term "1,1,0,0"))
         (rule "leq_literals" (formula "16") (term "0,0,0"))
          (builtin "One Step Simplification" (formula "16"))
         (rule "less_literals" (formula "16") (term "0,0"))
          (builtin "One Step Simplification" (formula "16"))
         (rule "getOfSeqSub" (formula "14") (term "0"))
         (rule "castDel" (formula "14") (term "2,0"))
         (rule "sub_literals" (formula "14") (term "1,1,0,0"))
         (rule "leq_literals" (formula "14") (term "0,0,0"))
          (builtin "One Step Simplification" (formula "14"))
         (rule "add_literals" (formula "14") (term "1,1,0"))
         (rule "less_literals" (formula "14") (term "0,0"))
          (builtin "One Step Simplification" (formula "14"))
         (rule "getOfSeqSub" (formula "13") (term "0"))
         (rule "castDel" (formula "13") (term "2,0"))
         (rule "sub_literals" (formula "13") (term "1,1,0,0"))
         (rule "leq_literals" (formula "13") (term "0,0,0"))
          (builtin "One Step Simplification" (formula "13"))
         (rule "add_literals" (formula "13") (term "1,1,0"))
         (rule "less_literals" (formula "13") (term "0,0"))
          (builtin "One Step Simplification" (formula "13"))
         (rule "getOfSeqSub" (formula "34") (term "0"))
         (rule "castDel" (formula "34") (term "2,0"))
         (rule "add_literals" (formula "34") (term "1,1,0"))
         (rule "leq_literals" (formula "34") (term "0,0,0"))
          (builtin "One Step Simplification" (formula "34"))
         (rule "sub_literals" (formula "34") (term "1,0,0"))
         (rule "less_literals" (formula "34") (term "0,0"))
          (builtin "One Step Simplification" (formula "34"))
         (rule "getOfSeqSub" (formula "35") (term "0"))
         (rule "castDel" (formula "35") (term "2,0"))
         (rule "add_literals" (formula "35") (term "1,1,0"))
         (rule "sub_literals" (formula "35") (term "1,1,0,0"))
         (rule "leq_literals" (formula "35") (term "0,0,0"))
          (builtin "One Step Simplification" (formula "35"))
         (rule "less_literals" (formula "35") (term "0,0"))
          (builtin "One Step Simplification" (formula "35"))
         (rule "equalityToSeqGetAndSeqLenLeft" (formula "17") (inst "iv=iv"))
         (rule "andLeft" (formula "17"))
         (rule "lenOfSeqSub" (formula "17") (term "0"))
         (rule "polySimp_elimSub" (formula "17") (term "1,0"))
         (rule "mul_literals" (formula "17") (term "1,1,0"))
         (rule "polySimp_addComm0" (formula "17") (term "1,0"))
         (rule "lenOfSeqSubEQ" (formula "17") (term "1") (ifseqformula "19"))
         (rule "eqSymm" (formula "17"))
         (rule "polySimp_elimSub" (formula "17") (term "1,0"))
         (rule "mul_literals" (formula "17") (term "1,1,0"))
         (rule "polySimp_addComm0" (formula "17") (term "1,0"))
          (builtin "One Step Simplification" (formula "17"))
         (rule "true_left" (formula "17"))
         (rule "lenOfSeqSub" (formula "17") (term "1,1,0,0"))
         (rule "polySimp_elimSub" (formula "17") (term "1,1,1,0,0"))
         (rule "mul_literals" (formula "17") (term "1,1,1,1,0,0"))
         (rule "polySimp_addComm0" (formula "17") (term "1,1,1,0,0"))
         (rule "inEqSimp_ltToLeq" (formula "17") (term "0,1,1,0,0"))
         (rule "polySimp_mulComm0" (formula "17") (term "1,0,0,0,1,1,0,0"))
         (rule "polySimp_addComm1" (formula "17") (term "0,0,1,1,0,0"))
         (rule "add_literals" (formula "17") (term "0,0,0,1,1,0,0"))
         (rule "inEqSimp_ltToLeq" (formula "17") (term "1,0,0"))
         (rule "polySimp_mulComm0" (formula "17") (term "1,0,0,1,0,0"))
         (rule "inEqSimp_commuteLeq" (formula "17") (term "0,0,0"))
         (rule "applyEq" (formula "17") (term "0,0,1,0") (ifseqformula "18"))
          (builtin "One Step Simplification" (formula "17"))
         (rule "true_left" (formula "17"))
         (rule "substringSubstring" (formula "17") (term "0") (inst "newSym=newSym_0"))
         (rule "qeq_literals" (formula "17") (term "0,0,0,0,0,0"))
          (builtin "One Step Simplification" (formula "17"))
         (rule "qeq_literals" (formula "17") (term "1,0,0,0"))
          (builtin "One Step Simplification" (formula "17"))
         (rule "add_zero_left" (formula "17") (term "2,0,1,1"))
         (rule "add_zero_right" (formula "17") (term "1,0,1,1"))
         (rule "polySimp_elimSub" (formula "17") (term "1,1,0"))
         (rule "times_zero_2" (formula "17") (term "1,1,1,0"))
         (rule "add_zero_right" (formula "17") (term "1,1,0"))
         (rule "inEqSimp_homoInEq0" (formula "17") (term "1,0,0,0"))
         (rule "polySimp_mulComm0" (formula "17") (term "1,0,1,0,0,0"))
         (rule "polySimp_rightDist" (formula "17") (term "1,0,1,0,0,0"))
         (rule "mul_literals" (formula "17") (term "0,1,0,1,0,0,0"))
         (rule "polySimp_addAssoc" (formula "17") (term "0,1,0,0,0"))
         (rule "polySimp_addComm0" (formula "17") (term "0,0,1,0,0,0"))
         (rule "polySimp_pullOutFactor1b" (formula "17") (term "0,1,0,0,0"))
         (rule "add_literals" (formula "17") (term "1,1,0,1,0,0,0"))
         (rule "times_zero_1" (formula "17") (term "1,0,1,0,0,0"))
         (rule "add_zero_right" (formula "17") (term "0,1,0,0,0"))
         (rule "qeq_literals" (formula "17") (term "1,0,0,0"))
          (builtin "One Step Simplification" (formula "17"))
         (rule "applyEq" (formula "17") (term "0,0,1") (ifseqformula "18"))
         (rule "inEqSimp_sepPosMonomial1" (formula "17") (term "0,0,0"))
         (rule "mul_literals" (formula "17") (term "1,0,0,0"))
         (rule "getOfSeqSub" (formula "34") (term "0"))
         (rule "castDel" (formula "34") (term "2,0"))
         (rule "sub_literals" (formula "34") (term "1,1,0,0"))
         (rule "leq_literals" (formula "34") (term "0,0,0"))
          (builtin "One Step Simplification" (formula "34"))
         (rule "less_literals" (formula "34") (term "0,0"))
          (builtin "One Step Simplification" (formula "34"))
         (rule "add_literals" (formula "34") (term "1,0"))
         (rule "charLiteral_to_int" (formula "19") (term "1"))
         (rule "getOfSeqSub" (formula "15") (term "0"))
         (rule "castDel" (formula "15") (term "2,0"))
         (rule "sub_literals" (formula "15") (term "1,1,0,0"))
         (rule "leq_literals" (formula "15") (term "0,0,0"))
          (builtin "One Step Simplification" (formula "15"))
         (rule "less_literals" (formula "15") (term "0,0"))
          (builtin "One Step Simplification" (formula "15"))
         (rule "add_literals" (formula "15") (term "1,0"))
         (rule "getOfSeqSub" (formula "16") (term "0"))
         (rule "castDel" (formula "16") (term "2,0"))
         (rule "leq_literals" (formula "16") (term "0,0,0"))
          (builtin "One Step Simplification" (formula "16"))
         (rule "add_literals" (formula "16") (term "1,1,0"))
         (rule "sub_literals" (formula "16") (term "1,0,0"))
         (rule "less_literals" (formula "16") (term "0,0"))
          (builtin "One Step Simplification" (formula "16"))
         (rule "getOfSeqSub" (formula "14") (term "0"))
         (rule "castDel" (formula "14") (term "2,0"))
         (rule "leq_literals" (formula "14") (term "0,0,0"))
          (builtin "One Step Simplification" (formula "14"))
         (rule "add_literals" (formula "14") (term "1,1,0"))
         (rule "sub_literals" (formula "14") (term "1,0,0"))
         (rule "less_literals" (formula "14") (term "0,0"))
          (builtin "One Step Simplification" (formula "14"))
         (rule "getOfSeqSub" (formula "13") (term "0"))
         (rule "castDel" (formula "13") (term "2,0"))
         (rule "sub_literals" (formula "13") (term "1,1,0,0"))
         (rule "leq_literals" (formula "13") (term "0,0,0"))
          (builtin "One Step Simplification" (formula "13"))
         (rule "less_literals" (formula "13") (term "0,0"))
          (builtin "One Step Simplification" (formula "13"))
         (rule "add_zero_right" (formula "13") (term "1,0"))
         (rule "getOfSeqSub" (formula "35") (term "0"))
         (rule "castDel" (formula "35") (term "2,0"))
         (rule "leq_literals" (formula "35") (term "0,0,0"))
          (builtin "One Step Simplification" (formula "35"))
         (rule "add_literals" (formula "35") (term "1,1,0"))
         (rule "sub_literals" (formula "35") (term "1,0,0"))
         (rule "less_literals" (formula "35") (term "0,0"))
          (builtin "One Step Simplification" (formula "35"))
         (rule "getOfSeqSub" (formula "36") (term "0"))
         (rule "castDel" (formula "36") (term "2,0"))
         (rule "sub_literals" (formula "36") (term "1,1,0,0"))
         (rule "add_literals" (formula "36") (term "1,1,0"))
         (rule "leq_literals" (formula "36") (term "0,0,0"))
          (builtin "One Step Simplification" (formula "36"))
         (rule "less_literals" (formula "36") (term "0,0"))
          (builtin "One Step Simplification" (formula "36"))
         (rule "getOfSeqSub" (formula "34") (term "0"))
         (rule "castDel" (formula "34") (term "2,0"))
         (rule "sub_literals" (formula "34") (term "1,1,0,0"))
         (rule "add_zero_right" (formula "34") (term "1,1,0"))
         (rule "leq_literals" (formula "34") (term "0,0,0"))
          (builtin "One Step Simplification" (formula "34"))
         (rule "less_literals" (formula "34") (term "0,0"))
          (builtin "One Step Simplification" (formula "34"))
         (rule "getOfSeqSub" (formula "15") (term "0"))
         (rule "castDel" (formula "15") (term "2,0"))
         (rule "sub_literals" (formula "15") (term "1,1,0,0"))
         (rule "leq_literals" (formula "15") (term "0,0,0"))
          (builtin "One Step Simplification" (formula "15"))
         (rule "less_literals" (formula "15") (term "0,0"))
          (builtin "One Step Simplification" (formula "15"))
         (rule "add_literals" (formula "15") (term "1,0"))
         (rule "getOfSeqSub" (formula "16") (term "0"))
         (rule "castDel" (formula "16") (term "2,0"))
         (rule "leq_literals" (formula "16") (term "0,0,0"))
          (builtin "One Step Simplification" (formula "16"))
         (rule "add_literals" (formula "16") (term "1,1,0"))
         (rule "sub_literals" (formula "16") (term "1,0,0"))
         (rule "less_literals" (formula "16") (term "0,0"))
          (builtin "One Step Simplification" (formula "16"))
         (rule "getOfSeqSub" (formula "14") (term "0"))
         (rule "castDel" (formula "14") (term "2,0"))
         (rule "sub_literals" (formula "14") (term "1,1,0,0"))
         (rule "leq_literals" (formula "14") (term "0,0,0"))
          (builtin "One Step Simplification" (formula "14"))
         (rule "less_literals" (formula "14") (term "0,0"))
          (builtin "One Step Simplification" (formula "14"))
         (rule "add_literals" (formula "14") (term "1,0"))
         (rule "getOfSeqSub" (formula "13") (term "0"))
         (rule "castDel" (formula "13") (term "2,0"))
         (rule "add_literals" (formula "13") (term "1,1,0"))
         (rule "leq_literals" (formula "13") (term "0,0,0"))
          (builtin "One Step Simplification" (formula "13"))
         (rule "polySimp_elimSub" (formula "13") (term "1,0,0"))
         (rule "times_zero_2" (formula "13") (term "1,1,0,0"))
         (rule "add_zero_right" (formula "13") (term "1,0,0"))
         (rule "inEqSimp_ltToLeq" (formula "13") (term "0,0"))
         (rule "polySimp_rightDist" (formula "13") (term "1,0,0,0,0"))
         (rule "mul_literals" (formula "13") (term "0,1,0,0,0,0"))
         (rule "polySimp_addAssoc" (formula "13") (term "0,0,0,0"))
         (rule "add_literals" (formula "13") (term "0,0,0,0,0"))
         (rule "polySimp_addComm1" (formula "13") (term "0,0,0"))
         (rule "add_literals" (formula "13") (term "0,0,0,0"))
         (rule "inEqSimp_sepNegMonomial0" (formula "13") (term "0,0"))
         (rule "polySimp_mulLiterals" (formula "13") (term "0,0,0"))
         (rule "polySimp_elimOne" (formula "13") (term "0,0,0"))
         (rule "getOfSeqSub" (formula "35") (term "0"))
         (rule "castDel" (formula "35") (term "2,0"))
         (rule "sub_literals" (formula "35") (term "1,1,0,0"))
         (rule "add_literals" (formula "35") (term "1,1,0"))
         (rule "leq_literals" (formula "35") (term "0,0,0"))
          (builtin "One Step Simplification" (formula "35"))
         (rule "less_literals" (formula "35") (term "0,0"))
          (builtin "One Step Simplification" (formula "35"))
         (rule "getOfSeqSub" (formula "36") (term "0"))
         (rule "castDel" (formula "36") (term "2,0"))
         (rule "add_literals" (formula "36") (term "1,1,0"))
         (rule "sub_literals" (formula "36") (term "1,1,0,0"))
         (rule "leq_literals" (formula "36") (term "0,0,0"))
          (builtin "One Step Simplification" (formula "36"))
         (rule "less_literals" (formula "36") (term "0,0"))
          (builtin "One Step Simplification" (formula "36"))
         (rule "getOfSeqSub" (formula "15") (term "0"))
         (rule "castDel" (formula "15") (term "2,0"))
         (rule "add_literals" (formula "15") (term "1,1,0"))
         (rule "leq_literals" (formula "15") (term "0,0,0"))
          (builtin "One Step Simplification" (formula "15"))
         (rule "sub_literals" (formula "15") (term "1,0,0"))
         (rule "less_literals" (formula "15") (term "0,0"))
          (builtin "One Step Simplification" (formula "15"))
         (rule "inEqSimp_or_weaken1" (formula "26"))
         (rule "add_literals" (formula "26") (term "1,0"))
          (builtin "One Step Simplification" (formula "26"))
         (rule "inEqSimp_subsumption1" (formula "37") (ifseqformula "26"))
         (rule "leq_literals" (formula "37") (term "0"))
          (builtin "One Step Simplification" (formula "37"))
         (rule "true_left" (formula "37"))
         (rule "getOfSeqSub" (formula "16") (term "0"))
         (rule "castDel" (formula "16") (term "2,0"))
         (rule "leq_literals" (formula "16") (term "0,0,0"))
          (builtin "One Step Simplification" (formula "16"))
         (rule "add_literals" (formula "16") (term "1,1,0"))
         (rule "sub_literals" (formula "16") (term "1,0,0"))
         (rule "less_literals" (formula "16") (term "0,0"))
          (builtin "One Step Simplification" (formula "16"))
         (rule "getOfSeqSub" (formula "14") (term "0"))
         (rule "castDel" (formula "14") (term "2,0"))
         (rule "sub_literals" (formula "14") (term "1,1,0,0"))
         (rule "leq_literals" (formula "14") (term "0,0,0"))
          (builtin "One Step Simplification" (formula "14"))
         (rule "add_literals" (formula "14") (term "1,1,0"))
         (rule "less_literals" (formula "14") (term "0,0"))
          (builtin "One Step Simplification" (formula "14"))
         (rule "charLiteral_to_int" (formula "28") (term "1"))
         (rule "seqGetAlphaCast" (formula "19") (term "0"))
         (rule "castDel" (formula "19") (term "0"))
          (builtin "One Step Simplification" (formula "19"))
         (rule "true_left" (formula "19"))
         (rule "getOfSeqSub" (formula "35") (term "0"))
         (rule "castDel" (formula "35") (term "2,0"))
         (rule "add_literals" (formula "35") (term "1,1,0"))
         (rule "sub_literals" (formula "35") (term "1,1,0,0"))
         (rule "leq_literals" (formula "35") (term "0,0,0"))
          (builtin "One Step Simplification" (formula "35"))
         (rule "less_literals" (formula "35") (term "0,0"))
          (builtin "One Step Simplification" (formula "35"))
         (rule "getOfSeqSub" (formula "36") (term "0"))
         (rule "castDel" (formula "36") (term "2,0"))
         (rule "add_literals" (formula "36") (term "1,1,0"))
         (rule "sub_literals" (formula "36") (term "1,1,0,0"))
         (rule "leq_literals" (formula "36") (term "0,0,0"))
          (builtin "One Step Simplification" (formula "36"))
         (rule "less_literals" (formula "36") (term "0,0"))
          (builtin "One Step Simplification" (formula "36"))
         (rule "getOfSeqSub" (formula "15") (term "0"))
         (rule "castDel" (formula "15") (term "2,0"))
         (rule "leq_literals" (formula "15") (term "0,0,0"))
          (builtin "One Step Simplification" (formula "15"))
         (rule "add_literals" (formula "15") (term "1,1,0"))
         (rule "sub_literals" (formula "15") (term "1,0,0"))
         (rule "less_literals" (formula "15") (term "0,0"))
          (builtin "One Step Simplification" (formula "15"))
         (rule "getOfSeqSub" (formula "16") (term "0"))
         (rule "castDel" (formula "16") (term "2,0"))
         (rule "sub_literals" (formula "16") (term "1,1,0,0"))
         (rule "add_literals" (formula "16") (term "1,1,0"))
         (rule "leq_literals" (formula "16") (term "0,0,0"))
          (builtin "One Step Simplification" (formula "16"))
         (rule "less_literals" (formula "16") (term "0,0"))
          (builtin "One Step Simplification" (formula "16"))
         (rule "getOfSeqSub" (formula "14") (term "0"))
         (rule "castDel" (formula "14") (term "2,0"))
         (rule "add_zero_right" (formula "14") (term "1,1,0"))
         (rule "leq_literals" (formula "14") (term "0,0,0"))
          (builtin "One Step Simplification" (formula "14"))
         (rule "sub_literals" (formula "14") (term "1,0,0"))
         (rule "less_literals" (formula "14") (term "0,0"))
          (builtin "One Step Simplification" (formula "14"))
         (rule "getOfSeqSub" (formula "35") (term "0"))
         (rule "castDel" (formula "35") (term "2,0"))
         (rule "add_zero_right" (formula "35") (term "1,1,0"))
         (rule "leq_literals" (formula "35") (term "0,0,0"))
          (builtin "One Step Simplification" (formula "35"))
         (rule "sub_literals" (formula "35") (term "1,0,0"))
         (rule "less_literals" (formula "35") (term "0,0"))
          (builtin "One Step Simplification" (formula "35"))
         (rule "getOfSeqSub" (formula "36") (term "0"))
         (rule "castDel" (formula "36") (term "2,0"))
         (rule "add_zero_right" (formula "36") (term "1,1,0"))
         (rule "leq_literals" (formula "36") (term "0,0,0"))
          (builtin "One Step Simplification" (formula "36"))
         (rule "sub_literals" (formula "36") (term "1,0,0"))
         (rule "less_literals" (formula "36") (term "0,0"))
          (builtin "One Step Simplification" (formula "36"))
         (rule "getOfSeqSub" (formula "15") (term "0"))
         (rule "castDel" (formula "15") (term "2,0"))
         (rule "sub_literals" (formula "15") (term "1,1,0,0"))
         (rule "leq_literals" (formula "15") (term "0,0,0"))
          (builtin "One Step Simplification" (formula "15"))
         (rule "add_literals" (formula "15") (term "1,1,0"))
         (rule "less_literals" (formula "15") (term "0,0"))
          (builtin "One Step Simplification" (formula "15"))
         (rule "getOfSeqSub" (formula "16") (term "0"))
         (rule "castDel" (formula "16") (term "2,0"))
         (rule "add_literals" (formula "16") (term "1,1,0"))
         (rule "sub_literals" (formula "16") (term "1,1,0,0"))
         (rule "leq_literals" (formula "16") (term "0,0,0"))
          (builtin "One Step Simplification" (formula "16"))
         (rule "less_literals" (formula "16") (term "0,0"))
          (builtin "One Step Simplification" (formula "16"))
         (rule "charLiteral_to_int" (formula "7") (term "1"))
         (rule "ifEqualsInteger" (formula "7"))
         (rule "getOfSeqSub" (formula "14") (term "0"))
         (rule "castDel" (formula "14") (term "2,0"))
         (rule "add_zero_right" (formula "14") (term "1,1,0"))
         (rule "leq_literals" (formula "14") (term "0,0,0"))
          (builtin "One Step Simplification" (formula "14"))
         (rule "polySimp_elimSub" (formula "14") (term "1,0,0"))
         (rule "times_zero_2" (formula "14") (term "1,1,0,0"))
         (rule "add_zero_right" (formula "14") (term "1,0,0"))
         (rule "inEqSimp_ltToLeq" (formula "14") (term "0,0"))
         (rule "polySimp_rightDist" (formula "14") (term "1,0,0,0,0"))
         (rule "mul_literals" (formula "14") (term "0,1,0,0,0,0"))
         (rule "polySimp_addAssoc" (formula "14") (term "0,0,0,0"))
         (rule "add_literals" (formula "14") (term "0,0,0,0,0"))
         (rule "polySimp_addComm1" (formula "14") (term "0,0,0"))
         (rule "add_literals" (formula "14") (term "0,0,0,0"))
         (rule "inEqSimp_sepNegMonomial0" (formula "14") (term "0,0"))
         (rule "polySimp_mulLiterals" (formula "14") (term "0,0,0"))
         (rule "polySimp_elimOne" (formula "14") (term "0,0,0"))
         (rule "getOfSeqSub" (formula "15") (term "0"))
         (rule "castDel" (formula "15") (term "2,0"))
         (rule "sub_literals" (formula "15") (term "1,1,0,0"))
         (rule "add_literals" (formula "15") (term "1,1,0"))
         (rule "leq_literals" (formula "15") (term "0,0,0"))
          (builtin "One Step Simplification" (formula "15"))
         (rule "less_literals" (formula "15") (term "0,0"))
          (builtin "One Step Simplification" (formula "15"))
         (rule "getOfSeqSub" (formula "16") (term "0"))
         (rule "castDel" (formula "16") (term "2,0"))
         (rule "add_literals" (formula "16") (term "1,1,0"))
         (rule "leq_literals" (formula "16") (term "0,0,0"))
          (builtin "One Step Simplification" (formula "16"))
         (rule "sub_literals" (formula "16") (term "1,0,0"))
         (rule "less_literals" (formula "16") (term "0,0"))
          (builtin "One Step Simplification" (formula "16"))
         (rule "getOfSeqSub" (formula "15") (term "0"))
         (rule "castDel" (formula "15") (term "2,0"))
         (rule "add_zero_right" (formula "15") (term "1,1,0"))
         (rule "leq_literals" (formula "15") (term "0,0,0"))
          (builtin "One Step Simplification" (formula "15"))
         (rule "sub_literals" (formula "15") (term "1,0,0"))
         (rule "less_literals" (formula "15") (term "0,0"))
          (builtin "One Step Simplification" (formula "15"))
         (rule "getOfSeqSub" (formula "16") (term "0"))
         (rule "castDel" (formula "16") (term "2,0"))
         (rule "add_zero_right" (formula "16") (term "1,1,0"))
         (rule "leq_literals" (formula "16") (term "0,0,0"))
          (builtin "One Step Simplification" (formula "16"))
         (rule "sub_literals" (formula "16") (term "1,0,0"))
         (rule "less_literals" (formula "16") (term "0,0"))
          (builtin "One Step Simplification" (formula "16"))
         (rule "getOfSeqSub" (formula "15") (term "0"))
         (rule "castDel" (formula "15") (term "2,0"))
         (rule "add_zero_right" (formula "15") (term "1,1,0"))
         (rule "leq_literals" (formula "15") (term "0,0,0"))
          (builtin "One Step Simplification" (formula "15"))
         (rule "polySimp_elimSub" (formula "15") (term "1,0,0"))
         (rule "times_zero_2" (formula "15") (term "1,1,0,0"))
         (rule "add_zero_right" (formula "15") (term "1,0,0"))
         (rule "inEqSimp_ltToLeq" (formula "15") (term "0,0"))
         (rule "polySimp_rightDist" (formula "15") (term "1,0,0,0,0"))
         (rule "mul_literals" (formula "15") (term "0,1,0,0,0,0"))
         (rule "polySimp_addAssoc" (formula "15") (term "0,0,0,0"))
         (rule "add_literals" (formula "15") (term "0,0,0,0,0"))
         (rule "polySimp_addComm1" (formula "15") (term "0,0,0"))
         (rule "add_literals" (formula "15") (term "0,0,0,0"))
         (rule "inEqSimp_sepNegMonomial0" (formula "15") (term "0,0"))
         (rule "polySimp_mulLiterals" (formula "15") (term "0,0,0"))
         (rule "polySimp_elimOne" (formula "15") (term "0,0,0"))
         (rule "getOfSeqSub" (formula "16") (term "0"))
         (rule "castDel" (formula "16") (term "2,0"))
         (rule "leq_literals" (formula "16") (term "0,0,0"))
          (builtin "One Step Simplification" (formula "16"))
         (rule "add_zero_right" (formula "16") (term "1,1,0"))
         (rule "polySimp_elimSub" (formula "16") (term "1,0,0"))
         (rule "mul_literals" (formula "16") (term "1,1,0,0"))
         (rule "add_zero_right" (formula "16") (term "1,0,0"))
         (rule "inEqSimp_ltToLeq" (formula "16") (term "0,0"))
         (rule "polySimp_rightDist" (formula "16") (term "1,0,0,0,0"))
         (rule "mul_literals" (formula "16") (term "0,1,0,0,0,0"))
         (rule "polySimp_addAssoc" (formula "16") (term "0,0,0,0"))
         (rule "add_literals" (formula "16") (term "0,0,0,0,0"))
         (rule "polySimp_addComm1" (formula "16") (term "0,0,0"))
         (rule "add_literals" (formula "16") (term "0,0,0,0"))
         (rule "inEqSimp_sepNegMonomial0" (formula "16") (term "0,0"))
         (rule "polySimp_mulLiterals" (formula "16") (term "0,0,0"))
         (rule "polySimp_elimOne" (formula "16") (term "0,0,0"))
         (rule "charLiteral_to_int" (formula "20") (term "1"))
         (rule "seqGetAlphaCast" (formula "28") (term "0"))
         (rule "castDel" (formula "28") (term "0"))
          (builtin "One Step Simplification" (formula "28"))
         (rule "true_left" (formula "28"))
         (rule "charLiteral_to_int" (formula "29") (term "1"))
         (rule "seqGetAlphaCast" (formula "20") (term "0"))
         (rule "castDel" (formula "20") (term "0"))
          (builtin "One Step Simplification" (formula "20"))
         (rule "true_left" (formula "20"))
         (rule "charLiteral_to_int" (formula "8") (term "1"))
         (rule "ifEqualsInteger" (formula "8"))
         (rule "charLiteral_to_int" (formula "21") (term "1"))
         (rule "seqGetAlphaCast" (formula "29") (term "0"))
         (rule "castDel" (formula "29") (term "0"))
          (builtin "One Step Simplification" (formula "29"))
         (rule "true_left" (formula "29"))
         (rule "charLiteral_to_int" (formula "30") (term "1"))
         (rule "seqGetAlphaCast" (formula "21") (term "0"))
         (rule "castDel" (formula "21") (term "0"))
          (builtin "One Step Simplification" (formula "21"))
         (rule "true_left" (formula "21"))
         (rule "charLiteral_to_int" (formula "9") (term "1"))
         (rule "ifEqualsInteger" (formula "9"))
         (rule "charLiteral_to_int" (formula "22") (term "1"))
         (rule "seqGetAlphaCast" (formula "30") (term "0"))
         (rule "castDel" (formula "30") (term "0"))
          (builtin "One Step Simplification" (formula "30"))
         (rule "true_left" (formula "30"))
         (rule "tryEmpty" (formula "59") (term "1"))
         (rule "inEqSimp_notGeq" (formula "7") (term "0,1"))
         (rule "mul_literals" (formula "7") (term "1,0,0,0,1"))
         (rule "add_literals" (formula "7") (term "0,0,0,1"))
         (rule "inEqSimp_sepPosMonomial0" (formula "7") (term "0,1"))
         (rule "mul_literals" (formula "7") (term "1,0,1"))
         (rule "charLiteral_to_int" (formula "31") (term "1"))
         (rule "seqGetAlphaCast" (formula "22") (term "0"))
         (rule "castDel" (formula "22") (term "0"))
          (builtin "One Step Simplification" (formula "22"))
         (rule "true_left" (formula "22"))
         (rule "charLiteral_to_int" (formula "10") (term "1"))
         (rule "ifEqualsInteger" (formula "10"))
         (rule "inEqSimp_notGeq" (formula "8") (term "0,1"))
         (rule "mul_literals" (formula "8") (term "1,0,0,0,1"))
         (rule "add_literals" (formula "8") (term "0,0,0,1"))
         (rule "inEqSimp_sepPosMonomial0" (formula "8") (term "0,1"))
         (rule "mul_literals" (formula "8") (term "1,0,1"))
         (rule "inEqSimp_notGeq" (formula "9") (term "0,1"))
         (rule "mul_literals" (formula "9") (term "1,0,0,0,1"))
         (rule "add_literals" (formula "9") (term "0,0,0,1"))
         (rule "inEqSimp_sepPosMonomial0" (formula "9") (term "0,1"))
         (rule "mul_literals" (formula "9") (term "1,0,1"))
         (rule "inEqSimp_notGeq" (formula "10") (term "0,1"))
         (rule "mul_literals" (formula "10") (term "1,0,0,0,1"))
         (rule "add_literals" (formula "10") (term "0,0,0,1"))
         (rule "inEqSimp_sepPosMonomial0" (formula "10") (term "0,1"))
         (rule "mul_literals" (formula "10") (term "1,0,1"))
         (rule "charLiteral_to_int" (formula "23") (term "1"))
         (rule "charLiteral_to_int" (formula "24") (term "1"))
         (rule "seqGetAlphaCast" (formula "31") (term "0"))
         (rule "castDel" (formula "31") (term "0"))
          (builtin "One Step Simplification" (formula "31"))
         (rule "true_left" (formula "31"))
         (rule "commute_or" (formula "5"))
         (rule "charLiteral_to_int" (formula "32") (term "1"))
         (rule "seqGetAlphaCast" (formula "23") (term "0"))
         (rule "castDel" (formula "23") (term "0"))
          (builtin "One Step Simplification" (formula "23"))
         (rule "true_left" (formula "23"))
         (rule "charLiteral_to_int" (formula "11") (term "1"))
         (rule "ifEqualsInteger" (formula "11"))
         (rule "inEqSimp_notGeq" (formula "11") (term "0,1"))
         (rule "mul_literals" (formula "11") (term "1,0,0,0,1"))
         (rule "add_literals" (formula "11") (term "0,0,0,1"))
         (rule "inEqSimp_sepPosMonomial0" (formula "11") (term "0,1"))
         (rule "mul_literals" (formula "11") (term "1,0,1"))
         (rule "seqGetAlphaCast" (formula "24") (term "0"))
         (rule "castDel" (formula "24") (term "0"))
          (builtin "One Step Simplification" (formula "24"))
         (rule "true_left" (formula "24"))
         (rule "seqGetAlphaCast" (formula "32") (term "0"))
         (rule "castDel" (formula "32") (term "0"))
          (builtin "One Step Simplification" (formula "32"))
         (rule "true_left" (formula "32"))
         (rule "charLiteral_to_int" (formula "33") (term "1"))
         (rule "charLiteral_to_int" (formula "12") (term "1"))
         (rule "ifEqualsInteger" (formula "12"))
         (rule "inEqSimp_notGeq" (formula "12") (term "0,1"))
         (rule "mul_literals" (formula "12") (term "1,0,0,0,1"))
         (rule "add_literals" (formula "12") (term "0,0,0,1"))
         (rule "inEqSimp_sepPosMonomial0" (formula "12") (term "0,1"))
         (rule "mul_literals" (formula "12") (term "1,0,1"))
         (rule "seqGetAlphaCast" (formula "33") (term "0"))
         (rule "castDel" (formula "33") (term "0"))
          (builtin "One Step Simplification" (formula "33"))
         (rule "true_left" (formula "33"))
         (rule "charLiteral_to_int" (formula "34") (term "1"))
         (rule "charLiteral_to_int" (formula "13") (term "1"))
         (rule "ifEqualsInteger" (formula "13"))
         (rule "inEqSimp_notGeq" (formula "13") (term "0,1"))
         (rule "mul_literals" (formula "13") (term "1,0,0,0,1"))
         (rule "add_literals" (formula "13") (term "0,0,0,1"))
         (rule "inEqSimp_sepPosMonomial0" (formula "13") (term "0,1"))
         (rule "mul_literals" (formula "13") (term "1,0,1"))
         (rule "commute_and" (formula "7") (term "0"))
         (rule "charLiteral_to_int" (formula "35") (term "1"))
         (rule "charLiteral_to_int" (formula "36") (term "1"))
         (rule "charLiteral_to_int" (formula "14") (term "1"))
         (rule "ifEqualsInteger" (formula "14"))
         (rule "inEqSimp_notGeq" (formula "14") (term "0,1"))
         (rule "mul_literals" (formula "14") (term "1,0,0,0,1"))
         (rule "add_literals" (formula "14") (term "0,0,0,1"))
         (rule "inEqSimp_sepPosMonomial0" (formula "14") (term "0,1"))
         (rule "mul_literals" (formula "14") (term "1,0,1"))
         (rule "commute_and" (formula "8") (term "0"))
         (rule "commute_and" (formula "9") (term "0"))
         (rule "commute_and" (formula "7") (term "1"))
         (rule "seqGetAlphaCast" (formula "34") (term "0"))
         (rule "castDel" (formula "34") (term "0"))
          (builtin "One Step Simplification" (formula "34"))
         (rule "true_left" (formula "34"))
         (rule "commute_and" (formula "10") (term "0"))
         (rule "commute_and" (formula "8") (term "1"))
         (rule "commute_and" (formula "9") (term "1"))
         (rule "commute_and" (formula "10") (term "1"))
         (rule "charLiteral_to_int" (formula "15") (term "1"))
         (rule "ifEqualsInteger" (formula "15"))
         (rule "inEqSimp_notGeq" (formula "15") (term "0,1"))
         (rule "mul_literals" (formula "15") (term "1,0,0,0,1"))
         (rule "add_literals" (formula "15") (term "0,0,0,1"))
         (rule "inEqSimp_sepPosMonomial0" (formula "15") (term "0,1"))
         (rule "mul_literals" (formula "15") (term "1,0,1"))
         (rule "commute_and" (formula "11") (term "0"))
         (rule "commute_and" (formula "11") (term "1"))
         (rule "charLiteral_to_int" (formula "16") (term "1"))
         (rule "ifEqualsInteger" (formula "16"))
         (rule "inEqSimp_notGeq" (formula "16") (term "0,1"))
         (rule "mul_literals" (formula "16") (term "1,0,0,0,1"))
         (rule "add_literals" (formula "16") (term "0,0,0,1"))
         (rule "inEqSimp_sepPosMonomial0" (formula "16") (term "0,1"))
         (rule "mul_literals" (formula "16") (term "1,0,1"))
         (rule "commute_and" (formula "12") (term "0"))
         (rule "commute_and" (formula "12") (term "1"))
         (rule "commute_and" (formula "13") (term "0"))
         (rule "commute_and" (formula "13") (term "1"))
         (rule "commute_and" (formula "14") (term "0"))
         (rule "commute_and" (formula "14") (term "1"))
         (rule "emptyModality" (formula "59") (term "1"))
          (builtin "One Step Simplification" (formula "59"))
         (rule "eqSymm" (formula "59") (term "1,0,0,1"))
         (rule "pullOutSelect" (formula "59") (term "0,0,0") (inst "selectSK=de_polyas_core3_open_cred_CredTool_print_0"))
         (rule "simplifySelectOfStore" (formula "1"))
          (builtin "One Step Simplification" (formula "1"))
         (rule "castDel" (formula "1") (term "0"))
         (rule "applyEqReverse" (formula "60") (term "0,0,0") (ifseqformula "1"))
         (rule "hideAuxiliaryEq" (formula "1"))
         (rule "replace_known_right" (formula "59") (term "0,0") (ifseqformula "58"))
          (builtin "One Step Simplification" (formula "59"))
         (rule "allRight" (formula "59") (inst "sk=f_0"))
         (rule "allRight" (formula "59") (inst "sk=o_0"))
         (rule "orRight" (formula "59"))
         (rule "orRight" (formula "59"))
         (rule "pullOutSelect" (formula "61") (term "0") (inst "selectSK=f_0_0"))
         (rule "simplifySelectOfStore" (formula "1"))
          (builtin "One Step Simplification" (formula "1"))
         (rule "castDel" (formula "1") (term "1,0"))
         (rule "eqSymm" (formula "62"))
         (rule "eqSymm" (formula "1") (term "0,0,0"))
         (rule "eqSymm" (formula "1") (term "1,0,0"))
         (rule "replace_known_right" (formula "1") (term "0,0") (ifseqformula "60"))
          (builtin "One Step Simplification" (formula "1"))
         (rule "simplifySelectOfCreate" (formula "1"))
         (rule "castDel" (formula "1") (term "1,0"))
         (rule "eqSymm" (formula "1") (term "0,0,0,0"))
         (rule "replace_known_right" (formula "1") (term "0,1,0,0,0") (ifseqformula "59"))
          (builtin "One Step Simplification" (formula "1"))
         (rule "pullOutSelect" (formula "1") (term "2,0") (inst "selectSK=f_0_1"))
         (rule "simplifySelectOfCreate" (formula "1"))
         (rule "castDel" (formula "1") (term "1,0"))
         (rule "eqSymm" (formula "1") (term "0,0,0,0"))
         (rule "replace_known_right" (formula "1") (term "0,1,0,0,0") (ifseqformula "59"))
          (builtin "One Step Simplification" (formula "1"))
         (rule "cnf_rightDist" (formula "9"))
         (rule "andLeft" (formula "9"))
         (rule "commute_or" (formula "9"))
         (rule "commute_and" (formula "18") (term "0"))
         (rule "cnf_rightDist" (formula "11"))
         (rule "andLeft" (formula "11"))
         (rule "commute_or" (formula "11"))
         (rule "cnf_rightDist" (formula "13"))
         (rule "andLeft" (formula "13"))
         (rule "cnf_rightDist" (formula "15"))
         (rule "andLeft" (formula "15"))
         (rule "commute_or" (formula "13"))
         (rule "commute_and" (formula "21") (term "1"))
         (rule "commute_or" (formula "15"))
         (rule "commute_and" (formula "22") (term "0"))
         (rule "cnf_rightDist" (formula "17"))
         (rule "andLeft" (formula "17"))
         (rule "commute_or" (formula "17"))
         (rule "commute_and" (formula "23") (term "1"))
         (rule "commute_and" (formula "66"))
         (rule "cnf_rightDist" (formula "19"))
         (rule "andLeft" (formula "19"))
         (rule "commute_or" (formula "19"))
         (rule "cnf_rightDist" (formula "21"))
         (rule "andLeft" (formula "21"))
         (rule "commute_or" (formula "21"))
         (rule "cnf_rightDist" (formula "23"))
         (rule "andLeft" (formula "23"))
         (rule "commute_or" (formula "23"))
         (rule "cnf_rightDist" (formula "10"))
         (rule "andLeft" (formula "10"))
         (rule "inEqSimp_or_tautInEq2" (formula "11"))
         (rule "add_literals" (formula "11") (term "1,1"))
         (rule "qeq_literals" (formula "11") (term "1"))
          (builtin "One Step Simplification" (formula "11"))
         (rule "true_left" (formula "11"))
         (rule "commute_or" (formula "10"))
         (rule "cnf_rightDist" (formula "9"))
         (rule "andLeft" (formula "9"))
         (rule "commute_or" (formula "10"))
         (rule "cnf_rightDist" (formula "13"))
         (rule "andLeft" (formula "13"))
         (rule "inEqSimp_or_tautInEq2" (formula "14"))
         (rule "add_literals" (formula "14") (term "1,1"))
         (rule "qeq_literals" (formula "14") (term "1"))
          (builtin "One Step Simplification" (formula "14"))
         (rule "true_left" (formula "14"))
         (rule "commute_or" (formula "13"))
         (rule "seqGetAlphaCast" (formula "46") (term "0"))
         (rule "castDel" (formula "46") (term "0"))
          (builtin "One Step Simplification" (formula "46"))
         (rule "true_left" (formula "46"))
         (rule "cnf_rightDist" (formula "12"))
         (rule "andLeft" (formula "12"))
         (rule "commute_or" (formula "13"))
         (rule "cnf_rightDist" (formula "16"))
         (rule "andLeft" (formula "16"))
         (rule "inEqSimp_or_tautInEq2" (formula "17"))
         (rule "add_literals" (formula "17") (term "1,1"))
         (rule "qeq_literals" (formula "17") (term "1"))
          (builtin "One Step Simplification" (formula "17"))
         (rule "true_left" (formula "17"))
         (rule "commute_or" (formula "16"))
         (rule "cnf_rightDist" (formula "18"))
         (rule "andLeft" (formula "18"))
         (rule "inEqSimp_or_tautInEq2" (formula "19"))
         (rule "add_literals" (formula "19") (term "1,1"))
         (rule "qeq_literals" (formula "19") (term "1"))
          (builtin "One Step Simplification" (formula "19"))
         (rule "true_left" (formula "19"))
         (rule "cnf_rightDist" (formula "15"))
         (rule "andLeft" (formula "15"))
         (rule "seqGetAlphaCast" (formula "49") (term "0"))
         (rule "castDel" (formula "49") (term "0"))
          (builtin "One Step Simplification" (formula "49"))
         (rule "true_left" (formula "49"))
         (rule "cnf_rightDist" (formula "18"))
         (rule "andLeft" (formula "18"))
         (rule "commute_or" (formula "20"))
         (rule "cnf_rightDist" (formula "22"))
         (rule "andLeft" (formula "22"))
         (rule "inEqSimp_or_tautInEq2" (formula "23"))
         (rule "add_literals" (formula "23") (term "1,1"))
         (rule "qeq_literals" (formula "23") (term "1"))
          (builtin "One Step Simplification" (formula "23"))
         (rule "true_left" (formula "23"))
         (rule "cnf_rightDist" (formula "21"))
         (rule "andLeft" (formula "21"))
         (rule "ifthenelse_split" (formula "7") (term "0,1"))
         (branch "strContent(sk_1).length >= 7 TRUE"
            (rule "replace_known_left" (formula "53") (term "0,0,0,0") (ifseqformula "7"))
             (builtin "One Step Simplification" (formula "53") (ifInst ""  (formula "7")))
            (rule "replace_known_left" (formula "34") (term "0,2,0") (ifseqformula "7"))
             (builtin "One Step Simplification" (formula "34"))
            (rule "replace_known_left" (formula "9") (term "0,0,1") (ifseqformula "7"))
             (builtin "One Step Simplification" (formula "9"))
            (rule "replace_known_left" (formula "11") (term "1") (ifseqformula "7"))
             (builtin "One Step Simplification" (formula "11"))
            (rule "true_left" (formula "11"))
            (rule "replace_known_left" (formula "8") (term "0") (ifseqformula "7"))
             (builtin "One Step Simplification" (formula "8"))
            (rule "true_left" (formula "8"))
            (rule "replace_known_left" (formula "31") (term "0,0,1,0") (ifseqformula "7"))
             (builtin "One Step Simplification" (formula "31") (ifInst ""  (formula "7")) (ifInst ""  (formula "7")))
            (rule "polySimp_addAssoc" (formula "51") (term "1,0"))
            (rule "add_literals" (formula "51") (term "0,1,0"))
             (builtin "One Step Simplification" (formula "51"))
            (rule "polySimp_homoEq" (formula "51") (term "1"))
            (rule "times_zero_2" (formula "51") (term "1,0,1"))
            (rule "add_zero_right" (formula "51") (term "0,1"))
            (rule "inEqSimp_homoInEq1" (formula "8") (term "1"))
            (rule "polySimp_mulComm0" (formula "8") (term "1,0,1"))
            (rule "polySimp_rightDist" (formula "8") (term "1,0,1"))
            (rule "mul_literals" (formula "8") (term "0,1,0,1"))
            (rule "polySimp_addAssoc" (formula "8") (term "0,1"))
            (rule "add_literals" (formula "8") (term "0,0,1"))
            (rule "inEqSimp_homoInEq1" (formula "31") (term "1,0,0"))
            (rule "polySimp_mulComm0" (formula "31") (term "1,0,1,0,0"))
            (rule "polySimp_rightDist" (formula "31") (term "1,0,1,0,0"))
            (rule "mul_literals" (formula "31") (term "0,1,0,1,0,0"))
            (rule "polySimp_addAssoc" (formula "31") (term "0,1,0,0"))
            (rule "add_literals" (formula "31") (term "0,0,1,0,0"))
            (rule "inEqSimp_homoInEq0" (formula "31") (term "1,0"))
            (rule "polySimp_pullOutFactor1" (formula "31") (term "0,1,0"))
            (rule "add_literals" (formula "31") (term "1,0,1,0"))
            (rule "times_zero_1" (formula "31") (term "0,1,0"))
            (rule "qeq_literals" (formula "31") (term "1,0"))
             (builtin "One Step Simplification" (formula "31"))
            (rule "inEqSimp_homoInEq1" (formula "51") (term "0"))
            (rule "polySimp_mulComm0" (formula "51") (term "1,0,0"))
            (rule "polySimp_rightDist" (formula "51") (term "1,0,0"))
            (rule "mul_literals" (formula "51") (term "0,1,0,0"))
            (rule "polySimp_addAssoc" (formula "51") (term "0,0"))
            (rule "add_literals" (formula "51") (term "0,0,0"))
            (rule "polySimp_sepPosMonomial" (formula "51") (term "1"))
            (rule "mul_literals" (formula "51") (term "1,1"))
            (rule "inEqSimp_sepNegMonomial0" (formula "8") (term "1"))
            (rule "polySimp_mulLiterals" (formula "8") (term "0,1"))
            (rule "polySimp_elimOne" (formula "8") (term "0,1"))
            (rule "inEqSimp_sepNegMonomial0" (formula "31") (term "1,0"))
            (rule "polySimp_mulLiterals" (formula "31") (term "0,1,0"))
            (rule "polySimp_elimOne" (formula "31") (term "0,1,0"))
            (rule "inEqSimp_sepNegMonomial0" (formula "51") (term "0"))
            (rule "polySimp_mulLiterals" (formula "51") (term "0,0"))
            (rule "polySimp_elimOne" (formula "51") (term "0,0"))
            (rule "inEqSimp_subsumption1" (formula "5") (ifseqformula "7"))
            (rule "leq_literals" (formula "5") (term "0"))
             (builtin "One Step Simplification" (formula "5"))
            (rule "true_left" (formula "5"))
            (rule "inEqSimp_contradInEq1" (formula "9") (term "1") (ifseqformula "6"))
            (rule "qeq_literals" (formula "9") (term "0,1"))
             (builtin "One Step Simplification" (formula "9"))
            (rule "replace_known_left" (formula "8") (term "1") (ifseqformula "9"))
             (builtin "One Step Simplification" (formula "8"))
            (rule "true_left" (formula "8"))
            (rule "inEqSimp_subsumption1" (formula "29") (term "0,0") (ifseqformula "6"))
            (rule "leq_literals" (formula "29") (term "0,0,0"))
             (builtin "One Step Simplification" (formula "29"))
            (rule "inEqSimp_or_weaken1" (formula "7"))
            (rule "add_literals" (formula "7") (term "1,0"))
             (builtin "One Step Simplification" (formula "7"))
            (rule "replace_known_left" (formula "29") (term "0") (ifseqformula "7"))
             (builtin "One Step Simplification" (formula "29"))
            (rule "andLeft" (formula "29"))
            (rule "replace_known_left" (formula "28") (term "1,0") (ifseqformula "7"))
             (builtin "One Step Simplification" (formula "28"))
            (rule "applyEq" (formula "51") (term "1") (ifseqformula "29"))
            (rule "applyEq" (formula "31") (term "1") (ifseqformula "29"))
            (rule "inEqSimp_contradInEq1" (formula "11") (term "1") (ifseqformula "7"))
            (rule "qeq_literals" (formula "11") (term "0,1"))
             (builtin "One Step Simplification" (formula "11"))
            (rule "replace_known_left" (formula "9") (term "1") (ifseqformula "11"))
             (builtin "One Step Simplification" (formula "9"))
            (rule "true_left" (formula "9"))
            (rule "inEqSimp_contradInEq1" (formula "23") (term "0") (ifseqformula "7"))
            (rule "qeq_literals" (formula "23") (term "0,0"))
             (builtin "One Step Simplification" (formula "23"))
            (rule "andLeft" (formula "23"))
            (rule "replace_known_left" (formula "22") (term "1,1") (ifseqformula "24"))
             (builtin "One Step Simplification" (formula "22") (ifInst ""  (formula "23")))
            (rule "true_left" (formula "22"))
            (rule "inEqSimp_subsumption1" (formula "12") (term "0") (ifseqformula "7"))
            (rule "leq_literals" (formula "12") (term "0,0"))
             (builtin "One Step Simplification" (formula "12"))
            (rule "true_left" (formula "12"))
            (rule "inEqSimp_contradInEq1" (formula "12") (term "1") (ifseqformula "7"))
            (rule "qeq_literals" (formula "12") (term "0,1"))
             (builtin "One Step Simplification" (formula "12"))
            (rule "replace_known_left" (formula "11") (term "1") (ifseqformula "12"))
             (builtin "One Step Simplification" (formula "11"))
            (rule "true_left" (formula "11"))
            (rule "inEqSimp_subsumption1" (formula "23") (term "1,1") (ifseqformula "7"))
            (rule "leq_literals" (formula "23") (term "0,1,1"))
             (builtin "One Step Simplification" (formula "23"))
            (rule "inEqSimp_subsumption1" (formula "6") (ifseqformula "7"))
            (rule "leq_literals" (formula "6") (term "0"))
             (builtin "One Step Simplification" (formula "6"))
            (rule "true_left" (formula "6"))
            (rule "inEqSimp_subsumption1" (formula "23") (term "1,0") (ifseqformula "6"))
            (rule "leq_literals" (formula "23") (term "0,1,0"))
             (builtin "One Step Simplification" (formula "23"))
            (rule "inEqSimp_contradInEq1" (formula "13") (term "1") (ifseqformula "6"))
            (rule "qeq_literals" (formula "13") (term "0,1"))
             (builtin "One Step Simplification" (formula "13"))
            (rule "replace_known_left" (formula "11") (term "1") (ifseqformula "13"))
             (builtin "One Step Simplification" (formula "11"))
            (rule "true_left" (formula "11"))
            (rule "inEqSimp_subsumption1" (formula "17") (term "1,1") (ifseqformula "6"))
            (rule "leq_literals" (formula "17") (term "0,1,1"))
             (builtin "One Step Simplification" (formula "17"))
            (rule "inEqSimp_subsumption1" (formula "14") (term "0") (ifseqformula "6"))
            (rule "leq_literals" (formula "14") (term "0,0"))
             (builtin "One Step Simplification" (formula "14"))
            (rule "true_left" (formula "14"))
            (rule "inEqSimp_subsumption1" (formula "11") (term "0") (ifseqformula "6"))
            (rule "leq_literals" (formula "11") (term "0,0"))
             (builtin "One Step Simplification" (formula "11"))
            (rule "true_left" (formula "11"))
            (rule "inEqSimp_subsumption1" (formula "8") (term "1") (ifseqformula "6"))
            (rule "leq_literals" (formula "8") (term "0,1"))
             (builtin "One Step Simplification" (formula "8"))
            (rule "true_left" (formula "8"))
            (rule "inEqSimp_contradInEq1" (formula "12") (term "0") (ifseqformula "6"))
            (rule "qeq_literals" (formula "12") (term "0,0"))
             (builtin "One Step Simplification" (formula "12"))
            (rule "replace_known_left" (formula "11") (term "1") (ifseqformula "12"))
             (builtin "One Step Simplification" (formula "11"))
            (rule "true_left" (formula "11"))
            (rule "inEqSimp_subsumption1" (formula "12") (term "1,1") (ifseqformula "6"))
            (rule "leq_literals" (formula "12") (term "0,1,1"))
             (builtin "One Step Simplification" (formula "12"))
            (rule "inEqSimp_contradInEq1" (formula "19") (term "1,1") (ifseqformula "6"))
            (rule "qeq_literals" (formula "19") (term "0,1,1"))
             (builtin "One Step Simplification" (formula "19"))
            (rule "inEqSimp_subsumption1" (formula "16") (term "1,1") (ifseqformula "6"))
            (rule "leq_literals" (formula "16") (term "0,1,1"))
             (builtin "One Step Simplification" (formula "16"))
            (rule "inEqSimp_contradInEq1" (formula "18") (term "1,1") (ifseqformula "6"))
            (rule "qeq_literals" (formula "18") (term "0,1,1"))
             (builtin "One Step Simplification" (formula "18"))
            (rule "inEqSimp_contradInEq1" (formula "17") (term "0") (ifseqformula "6"))
            (rule "qeq_literals" (formula "17") (term "0,0"))
             (builtin "One Step Simplification" (formula "17"))
            (rule "replace_known_left" (formula "16") (term "1") (ifseqformula "17"))
             (builtin "One Step Simplification" (formula "16"))
            (rule "true_left" (formula "16"))
            (rule "inEqSimp_contradInEq1" (formula "13") (term "0") (ifseqformula "6"))
            (rule "qeq_literals" (formula "13") (term "0,0"))
             (builtin "One Step Simplification" (formula "13"))
            (rule "replace_known_left" (formula "12") (term "1") (ifseqformula "13"))
             (builtin "One Step Simplification" (formula "12"))
            (rule "true_left" (formula "12"))
            (rule "inEqSimp_subsumption1" (formula "14") (ifseqformula "6"))
            (rule "leq_literals" (formula "14") (term "0"))
             (builtin "One Step Simplification" (formula "14"))
            (rule "true_left" (formula "14"))
            (rule "commute_and" (formula "2") (term "0,0"))
            (rule "commute_and" (formula "1") (term "0,0"))
            (rule "commute_or" (formula "38"))
            (rule "inEqSimp_or_weaken1" (formula "38"))
            (rule "add_literals" (formula "38") (term "1,0"))
             (builtin "One Step Simplification" (formula "38") (ifInst ""  (formula "6")))
            (rule "true_left" (formula "38"))
            (rule "ifthenelse_split" (formula "5") (term "0"))
            (branch "strContent(sk_0).length >= 11 TRUE"
               (rule "polySimp_homoEq" (formula "6"))
               (rule "polySimp_mulComm0" (formula "6") (term "1,0"))
               (rule "polySimp_rightDist" (formula "6") (term "1,0"))
               (rule "mul_literals" (formula "6") (term "0,1,0"))
               (rule "polySimp_addComm1" (formula "6") (term "0"))
               (rule "polySimp_addAssoc" (formula "6") (term "0,0"))
               (rule "add_literals" (formula "6") (term "0,0,0"))
               (rule "polySimp_sepPosMonomial" (formula "6"))
               (rule "polySimp_mulComm0" (formula "6") (term "1"))
               (rule "polySimp_rightDist" (formula "6") (term "1"))
               (rule "mul_literals" (formula "6") (term "0,1"))
               (rule "polySimp_mulLiterals" (formula "6") (term "1,1"))
               (rule "polySimp_elimOne" (formula "6") (term "1,1"))
               (rule "applyEqRigid" (formula "25") (term "1,1,0") (ifseqformula "6"))
               (rule "polySimp_addAssoc" (formula "25") (term "1,0"))
               (rule "add_literals" (formula "25") (term "0,1,0"))
               (rule "applyEq" (formula "22") (term "1,1,0") (ifseqformula "6"))
               (rule "polySimp_addAssoc" (formula "22") (term "1,0"))
               (rule "add_literals" (formula "22") (term "0,1,0"))
               (rule "applyEq" (formula "21") (term "1,1,0") (ifseqformula "6"))
               (rule "polySimp_addAssoc" (formula "21") (term "1,0"))
               (rule "add_literals" (formula "21") (term "0,1,0"))
               (rule "add_zero_left" (formula "21") (term "1,0"))
               (rule "applyEqRigid" (formula "20") (term "1,2,0,0") (ifseqformula "6"))
               (rule "polySimp_addAssoc" (formula "20") (term "2,0,0"))
               (rule "add_literals" (formula "20") (term "0,2,0,0"))
               (rule "add_zero_left" (formula "20") (term "2,0,0"))
               (rule "applyEqRigid" (formula "20") (term "1,2,0") (ifseqformula "6"))
               (rule "polySimp_addAssoc" (formula "20") (term "2,0"))
               (rule "add_literals" (formula "20") (term "0,2,0"))
               (rule "add_zero_left" (formula "20") (term "2,0"))
               (rule "applyEq" (formula "24") (term "1,1,0") (ifseqformula "6"))
               (rule "polySimp_addAssoc" (formula "24") (term "1,0"))
               (rule "add_literals" (formula "24") (term "0,1,0"))
               (rule "applyEq" (formula "19") (term "1,2,0") (ifseqformula "6"))
               (rule "polySimp_addAssoc" (formula "19") (term "2,0"))
               (rule "add_literals" (formula "19") (term "0,2,0"))
               (rule "add_zero_left" (formula "19") (term "2,0"))
               (rule "applyEqRigid" (formula "7") (term "0") (ifseqformula "6"))
               (rule "inEqSimp_homoInEq1" (formula "7"))
               (rule "polySimp_mulComm0" (formula "7") (term "1,0"))
               (rule "polySimp_rightDist" (formula "7") (term "1,0"))
               (rule "mul_literals" (formula "7") (term "0,1,0"))
               (rule "polySimp_addAssoc" (formula "7") (term "0"))
               (rule "add_literals" (formula "7") (term "0,0"))
               (rule "applyEqRigid" (formula "26") (term "1,1,0") (ifseqformula "6"))
               (rule "polySimp_addAssoc" (formula "26") (term "1,0"))
               (rule "add_literals" (formula "26") (term "0,1,0"))
               (rule "applyEq" (formula "23") (term "1,1,0") (ifseqformula "6"))
               (rule "polySimp_addAssoc" (formula "23") (term "1,0"))
               (rule "add_literals" (formula "23") (term "0,1,0"))
               (rule "inEqSimp_sepNegMonomial0" (formula "7"))
               (rule "polySimp_mulLiterals" (formula "7") (term "0"))
               (rule "polySimp_elimOne" (formula "7") (term "0"))
               (rule "inEqSimp_subsumption1" (formula "27") (ifseqformula "5"))
               (rule "leq_literals" (formula "27") (term "0"))
                (builtin "One Step Simplification" (formula "27"))
               (rule "true_left" (formula "27"))
               (rule "cut_direct" (formula "26") (term "0"))
               (branch "CUT: sk_0 = strPool(\" lines\") TRUE"
                   (builtin "One Step Simplification" (formula "27"))
                  (rule "true_left" (formula "27"))
                  (rule "applyEqRigid" (formula "31") (term "0,0,0") (ifseqformula "26"))
                  (rule "poolKeyIsContentOfValue" (formula "31") (term "0,0"))
                  (rule "applyEq" (formula "23") (term "0,0,1,1,0") (ifseqformula "26"))
                  (rule "poolKeyIsContentOfValue" (formula "23") (term "0,1,1,0"))
                  (rule "lenOfSeqConcat" (formula "23") (term "1,1,0"))
                   (builtin "One Step Simplification" (formula "23"))
                  (rule "polySimp_addAssoc" (formula "23") (term "1,0"))
                  (rule "add_literals" (formula "23") (term "0,1,0"))
                  (rule "lenOfSeqConcat" (formula "23") (term "1,1,0"))
                   (builtin "One Step Simplification" (formula "23"))
                  (rule "polySimp_addAssoc" (formula "23") (term "1,0"))
                  (rule "add_literals" (formula "23") (term "0,1,0"))
                  (rule "lenOfSeqConcat" (formula "23") (term "1,1,0"))
                   (builtin "One Step Simplification" (formula "23"))
                  (rule "polySimp_addAssoc" (formula "23") (term "1,0"))
                  (rule "add_literals" (formula "23") (term "0,1,0"))
                  (rule "lenOfSeqConcat" (formula "23") (term "1,1,0"))
                   (builtin "One Step Simplification" (formula "23"))
                  (rule "polySimp_addAssoc" (formula "23") (term "1,0"))
                  (rule "add_literals" (formula "23") (term "0,1,0"))
                  (rule "lenOfSeqConcat" (formula "23") (term "1,1,0"))
                   (builtin "One Step Simplification" (formula "23"))
                  (rule "add_literals" (formula "23") (term "1,1,0"))
                  (rule "add_literals" (formula "23") (term "1,0"))
                  (rule "applyEq" (formula "19") (term "0,0,2,0") (ifseqformula "26"))
                  (rule "poolKeyIsContentOfValue" (formula "19") (term "0,2,0"))
                  (rule "lenOfSeqConcat" (formula "19") (term "2,0"))
                   (builtin "One Step Simplification" (formula "19"))
                  (rule "lenOfSeqConcat" (formula "19") (term "1,2,0"))
                   (builtin "One Step Simplification" (formula "19"))
                  (rule "polySimp_addAssoc" (formula "19") (term "2,0"))
                  (rule "add_literals" (formula "19") (term "0,2,0"))
                  (rule "lenOfSeqConcat" (formula "19") (term "1,2,0"))
                   (builtin "One Step Simplification" (formula "19"))
                  (rule "polySimp_addAssoc" (formula "19") (term "2,0"))
                  (rule "add_literals" (formula "19") (term "0,2,0"))
                  (rule "lenOfSeqConcat" (formula "19") (term "1,2,0"))
                   (builtin "One Step Simplification" (formula "19"))
                  (rule "polySimp_addAssoc" (formula "19") (term "2,0"))
                  (rule "add_literals" (formula "19") (term "0,2,0"))
                  (rule "lenOfSeqConcat" (formula "19") (term "1,2,0"))
                   (builtin "One Step Simplification" (formula "19"))
                  (rule "add_literals" (formula "19") (term "1,2,0"))
                  (rule "add_literals" (formula "19") (term "2,0"))
                  (rule "applyEq" (formula "35") (term "0,0,0") (ifseqformula "26"))
                  (rule "poolKeyIsContentOfValue" (formula "35") (term "0,0"))
                  (rule "applyEqRigid" (formula "37") (term "0,0,2,0") (ifseqformula "26"))
                  (rule "poolKeyIsContentOfValue" (formula "37") (term "0,2,0"))
                  (rule "lenOfSeqConcat" (formula "37") (term "2,0"))
                   (builtin "One Step Simplification" (formula "37"))
                  (rule "lenOfSeqConcat" (formula "37") (term "1,2,0"))
                   (builtin "One Step Simplification" (formula "37"))
                  (rule "polySimp_addAssoc" (formula "37") (term "2,0"))
                  (rule "add_literals" (formula "37") (term "0,2,0"))
                  (rule "lenOfSeqConcat" (formula "37") (term "1,2,0"))
                   (builtin "One Step Simplification" (formula "37"))
                  (rule "polySimp_addAssoc" (formula "37") (term "2,0"))
                  (rule "add_literals" (formula "37") (term "0,2,0"))
                  (rule "lenOfSeqConcat" (formula "37") (term "1,2,0"))
                   (builtin "One Step Simplification" (formula "37"))
                  (rule "polySimp_addAssoc" (formula "37") (term "2,0"))
                  (rule "add_literals" (formula "37") (term "0,2,0"))
                  (rule "lenOfSeqConcat" (formula "37") (term "1,2,0"))
                   (builtin "One Step Simplification" (formula "37"))
                  (rule "add_literals" (formula "37") (term "1,2,0"))
                  (rule "add_literals" (formula "37") (term "2,0"))
                  (rule "applyEq" (formula "32") (term "0,0,0") (ifseqformula "26"))
                  (rule "poolKeyIsContentOfValue" (formula "32") (term "0,0"))
                  (rule "applyEq" (formula "27") (term "0,0,0") (ifseqformula "26"))
                  (rule "poolKeyIsContentOfValue" (formula "27") (term "0,0"))
                  (rule "applyEqRigid" (formula "36") (term "0,0,0") (ifseqformula "26"))
                  (rule "poolKeyIsContentOfValue" (formula "36") (term "0,0"))
                  (rule "applyEq" (formula "28") (term "0,0,0") (ifseqformula "26"))
                  (rule "poolKeyIsContentOfValue" (formula "28") (term "0,0"))
                  (rule "applyEq" (formula "5") (term "0,0,0") (ifseqformula "26"))
                  (rule "poolKeyIsContentOfValue" (formula "5") (term "0,0"))
                  (rule "lenOfSeqConcat" (formula "5") (term "0"))
                   (builtin "One Step Simplification" (formula "5"))
                  (rule "lenOfSeqConcat" (formula "5") (term "1,0"))
                   (builtin "One Step Simplification" (formula "5"))
                  (rule "polySimp_addAssoc" (formula "5") (term "0"))
                  (rule "add_literals" (formula "5") (term "0,0"))
                  (rule "lenOfSeqConcat" (formula "5") (term "1,0"))
                   (builtin "One Step Simplification" (formula "5"))
                  (rule "polySimp_addAssoc" (formula "5") (term "0"))
                  (rule "add_literals" (formula "5") (term "0,0"))
                  (rule "lenOfSeqConcat" (formula "5") (term "1,0"))
                   (builtin "One Step Simplification" (formula "5"))
                  (rule "polySimp_addAssoc" (formula "5") (term "0"))
                  (rule "add_literals" (formula "5") (term "0,0"))
                  (rule "lenOfSeqConcat" (formula "5") (term "1,0"))
                   (builtin "One Step Simplification" (formula "5"))
                  (rule "add_literals" (formula "5") (term "1,0"))
                  (rule "add_literals" (formula "5") (term "0"))
                  (rule "qeq_literals" (formula "5"))
                  (rule "closeFalse" (formula "5"))
               )
               (branch "CUT: sk_0 = strPool(\" lines\") FALSE"
                   (builtin "One Step Simplification" (formula "26"))
                  (rule "cut_direct" (formula "60") (term "0,0"))
                  (branch "CUT: o_0 = null TRUE"
                      (builtin "One Step Simplification" (formula "61"))
                     (rule "false_right" (formula "61"))
                     (rule "replace_known_left" (formula "60") (term "1") (ifseqformula "1"))
                      (builtin "One Step Simplification" (formula "60"))
                     (rule "applyEq" (formula "61") (term "1,0") (ifseqformula "1"))
                     (rule "applyEq" (formula "3") (term "0,1,0,0") (ifseqformula "1"))
                     (rule "eqSymm" (formula "3") (term "1,0,0"))
                     (rule "replace_known_right" (formula "3") (term "1,0,0") (ifseqformula "59"))
                      (builtin "One Step Simplification" (formula "3"))
                     (rule "applyEqReverse" (formula "61") (term "1") (ifseqformula "3"))
                     (rule "hideAuxiliaryEq" (formula "3"))
                     (rule "applyEqRigid" (formula "2") (term "1,2,0") (ifseqformula "1"))
                     (rule "applyEq" (formula "2") (term "0,1,0,0") (ifseqformula "1"))
                     (rule "eqSymm" (formula "2") (term "1,0,0"))
                     (rule "replace_known_right" (formula "2") (term "1,0,0") (ifseqformula "57"))
                      (builtin "One Step Simplification" (formula "2") (ifInst ""  (formula "60")))
                     (rule "closeFalse" (formula "2"))
                  )
                  (branch "CUT: o_0 = null FALSE"
                      (builtin "One Step Simplification" (formula "61"))
                     (rule "notRight" (formula "61"))
                     (rule "replace_known_right" (formula "60") (term "1") (ifseqformula "61"))
                      (builtin "One Step Simplification" (formula "60"))
                     (rule "false_right" (formula "60"))
                     (rule "seqGetAlphaCast" (formula "8") (term "0"))
                     (rule "castDel" (formula "8") (term "0"))
                      (builtin "One Step Simplification" (formula "8"))
                     (rule "true_left" (formula "8"))
                     (rule "equalityToSeqGetAndSeqLenLeft" (formula "18") (inst "iv=iv"))
                     (rule "andLeft" (formula "18"))
                     (rule "lenOfSeqSubEQ" (formula "18") (term "1") (ifseqformula "22"))
                     (rule "eqSymm" (formula "18"))
                     (rule "polySimp_elimSub" (formula "18") (term "1,0"))
                     (rule "mul_literals" (formula "18") (term "1,1,0"))
                     (rule "polySimp_addComm0" (formula "18") (term "1,0"))
                     (rule "inEqSimp_ltToLeq" (formula "19") (term "1,0,0"))
                     (rule "polySimp_mulComm0" (formula "19") (term "1,0,0,1,0,0"))
                     (rule "inEqSimp_ltToLeq" (formula "18") (term "0,0"))
                     (rule "polySimp_mulComm0" (formula "18") (term "1,0,0,0,0"))
                     (rule "polySimp_addComm1" (formula "18") (term "0,0,0"))
                     (rule "add_literals" (formula "18") (term "0,0,0,0"))
                     (rule "inEqSimp_commuteLeq" (formula "19") (term "0,0,0"))
                     (rule "applyEq" (formula "19") (term "0,0,1,0,0,1,0,0") (ifseqformula "20"))
                     (rule "lenOfSeqSubEQ" (formula "19") (term "0,1,0,0,1,0,0") (ifseqformula "21"))
                     (rule "polySimp_elimSub" (formula "19") (term "1,0,1,0,0,1,0,0"))
                     (rule "mul_literals" (formula "19") (term "1,1,0,1,0,0,1,0,0"))
                     (rule "polySimp_addComm0" (formula "19") (term "1,0,1,0,0,1,0,0"))
                     (rule "inEqSimp_ltToLeq" (formula "19") (term "0,0,1,0,0,1,0,0"))
                     (rule "polySimp_mulComm0" (formula "19") (term "1,0,0,0,0,1,0,0,1,0,0"))
                     (rule "polySimp_addComm1" (formula "19") (term "0,0,0,1,0,0,1,0,0"))
                     (rule "add_literals" (formula "19") (term "0,0,0,0,1,0,0,1,0,0"))
                     (rule "applyEq" (formula "19") (term "0,0,1,0") (ifseqformula "20"))
                      (builtin "One Step Simplification" (formula "19"))
                     (rule "true_left" (formula "19"))
                     (rule "applyEq" (formula "18") (term "0,1") (ifseqformula "19"))
                     (rule "lenOfSeqSubEQ" (formula "18") (term "1") (ifseqformula "21"))
                     (rule "eqSymm" (formula "18"))
                     (rule "polySimp_elimSub" (formula "18") (term "1,0"))
                     (rule "mul_literals" (formula "18") (term "1,1,0"))
                     (rule "polySimp_addComm0" (formula "18") (term "1,0"))
                     (rule "inEqSimp_ltToLeq" (formula "18") (term "0,0"))
                     (rule "eqSymm" (formula "18"))
                     (rule "polySimp_mulComm0" (formula "18") (term "1,0,0,0,1"))
                     (rule "eqSymm" (formula "18"))
                     (rule "polySimp_addComm1" (formula "18") (term "0,0,0"))
                     (rule "add_literals" (formula "18") (term "0,0,0,0"))
                      (builtin "One Step Simplification" (formula "18"))
                     (rule "true_left" (formula "18"))
                     (rule "equalityToSeqGetAndSeqLenLeft" (formula "38") (inst "iv=iv"))
                     (rule "andLeft" (formula "38"))
                     (rule "lenOfSeqSub" (formula "39") (term "1,1,0,0"))
                     (rule "polySimp_elimSub" (formula "39") (term "1,1,1,0,0"))
                     (rule "mul_literals" (formula "39") (term "1,1,1,1,0,0"))
                     (rule "polySimp_addComm0" (formula "39") (term "1,1,1,0,0"))
                     (rule "lenOfSeqSubEQ" (formula "38") (term "1") (ifseqformula "19"))
                     (rule "eqSymm" (formula "38"))
                     (rule "polySimp_elimSub" (formula "38") (term "1,0"))
                     (rule "mul_literals" (formula "38") (term "1,1,0"))
                     (rule "polySimp_addComm0" (formula "38") (term "1,0"))
                     (rule "lenOfSeqSub" (formula "38") (term "1"))
                     (rule "eqSymm" (formula "38"))
                     (rule "polySimp_elimSub" (formula "38") (term "1,0"))
                     (rule "mul_literals" (formula "38") (term "1,1,0"))
                     (rule "polySimp_addComm0" (formula "38") (term "1,0"))
                      (builtin "One Step Simplification" (formula "38"))
                     (rule "true_left" (formula "38"))
                     (rule "inEqSimp_ltToLeq" (formula "38") (term "0,1,1,0,0"))
                     (rule "polySimp_mulComm0" (formula "38") (term "1,0,0,0,1,1,0,0"))
                     (rule "polySimp_addComm1" (formula "38") (term "0,0,1,1,0,0"))
                     (rule "add_literals" (formula "38") (term "0,0,0,1,1,0,0"))
                     (rule "inEqSimp_ltToLeq" (formula "38") (term "1,0,0"))
                     (rule "polySimp_mulComm0" (formula "38") (term "1,0,0,1,0,0"))
                     (rule "inEqSimp_commuteLeq" (formula "38") (term "0,0,0"))
                     (rule "applyEq" (formula "38") (term "0,0,1,0") (ifseqformula "39"))
                      (builtin "One Step Simplification" (formula "38"))
                     (rule "true_left" (formula "38"))
                     (rule "seqGetAlphaCast" (formula "9") (term "0"))
                     (rule "castDel" (formula "9") (term "0"))
                      (builtin "One Step Simplification" (formula "9"))
                     (rule "true_left" (formula "9"))
                     (rule "seqGetAlphaCast" (formula "14") (term "0"))
                     (rule "castDel" (formula "14") (term "0"))
                      (builtin "One Step Simplification" (formula "14"))
                     (rule "true_left" (formula "14"))
                     (rule "ifthenelse_split" (formula "2") (term "0"))
                     (branch "f_0 = java.lang.Object::<created> & o_0 = sk_0 TRUE"
                        (rule "andLeft" (formula "2"))
                        (rule "applyEqReverse" (formula "5") (term "2,0") (ifseqformula "4"))
                         (builtin "One Step Simplification" (formula "5") (ifInst ""  (formula "2")))
                        (rule "applyEqReverse" (formula "63") (term "1") (ifseqformula "5"))
                        (rule "hideAuxiliaryEq" (formula "4"))
                        (rule "hideAuxiliaryEq" (formula "4"))
                        (rule "applyEqRigid" (formula "61") (term "1,0") (ifseqformula "3"))
                        (rule "applyEq" (formula "60") (term "0") (ifseqformula "3"))
                        (rule "applyEq" (formula "1") (term "1,0") (ifseqformula "3"))
                        (rule "applyEq" (formula "60") (term "2,0") (ifseqformula "2"))
                        (rule "castTrueImpliesOriginalTrue" (formula "60") (ifseqformula "1"))
                        (rule "closeTrue" (formula "60"))
                     )
                     (branch "f_0 = java.lang.Object::<created> & o_0 = sk_0 FALSE"
                        (rule "applyEqReverse" (formula "3") (term "2,0") (ifseqformula "2"))
                        (rule "hideAuxiliaryEq" (formula "2"))
                        (rule "seqGetAlphaCast" (formula "9") (term "0"))
                        (rule "castDel" (formula "9") (term "0"))
                         (builtin "One Step Simplification" (formula "9"))
                        (rule "true_left" (formula "9"))
                        (rule "seqGetAlphaCast" (formula "10") (term "0"))
                        (rule "castDel" (formula "10") (term "0"))
                         (builtin "One Step Simplification" (formula "10"))
                        (rule "true_left" (formula "10"))
                        (rule "seqGetAlphaCast" (formula "11") (term "0"))
                        (rule "castDel" (formula "11") (term "0"))
                         (builtin "One Step Simplification" (formula "11"))
                        (rule "true_left" (formula "11"))
                        (rule "seqGetAlphaCast" (formula "16") (term "0"))
                        (rule "castDel" (formula "16") (term "0"))
                         (builtin "One Step Simplification" (formula "16"))
                        (rule "true_left" (formula "16"))
                        (rule "seqGetAlphaCast" (formula "15") (term "0"))
                        (rule "castDel" (formula "15") (term "0"))
                         (builtin "One Step Simplification" (formula "15"))
                        (rule "true_left" (formula "15"))
                        (rule "seqGetAlphaCast" (formula "14") (term "0"))
                        (rule "castDel" (formula "14") (term "0"))
                         (builtin "One Step Simplification" (formula "14"))
                        (rule "true_left" (formula "14"))
                        (rule "seqGetAlphaCast" (formula "12") (term "0"))
                        (rule "castDel" (formula "12") (term "0"))
                         (builtin "One Step Simplification" (formula "12"))
                        (rule "true_left" (formula "12"))
                        (rule "seqGetAlphaCast" (formula "24") (term "0"))
                        (rule "castDel" (formula "24") (term "0"))
                         (builtin "One Step Simplification" (formula "24"))
                        (rule "true_left" (formula "24"))
                        (rule "seqGetAlphaCast" (formula "21") (term "0"))
                        (rule "castDel" (formula "21") (term "0"))
                         (builtin "One Step Simplification" (formula "21"))
                        (rule "true_left" (formula "21"))
                        (rule "seqGetAlphaCast" (formula "20") (term "0"))
                        (rule "castDel" (formula "20") (term "0"))
                         (builtin "One Step Simplification" (formula "20"))
                        (rule "true_left" (formula "20"))
                        (rule "substringSubstring" (formula "19") (term "0") (inst "newSym=newSym_1"))
                        (rule "add_zero_left" (formula "19") (term "2,0,1,1"))
                        (rule "add_zero_right" (formula "19") (term "1,0,1,1"))
                        (rule "qeq_literals" (formula "19") (term "1,0,0,0"))
                         (builtin "One Step Simplification" (formula "19"))
                        (rule "qeq_literals" (formula "19") (term "0,0,0,0,0"))
                         (builtin "One Step Simplification" (formula "19"))
                        (rule "polySimp_elimSub" (formula "19") (term "1,1,0"))
                        (rule "mul_literals" (formula "19") (term "1,1,1,0"))
                        (rule "add_zero_right" (formula "19") (term "1,1,0"))
                        (rule "inEqSimp_commuteLeq" (formula "19") (term "1,0,0,0"))
                        (rule "inEqSimp_homoInEq0" (formula "19") (term "1,0"))
                        (rule "polySimp_pullOutFactor1" (formula "19") (term "0,1,0"))
                        (rule "add_literals" (formula "19") (term "1,0,1,0"))
                        (rule "times_zero_1" (formula "19") (term "0,1,0"))
                        (rule "qeq_literals" (formula "19") (term "1,0"))
                         (builtin "One Step Simplification" (formula "19"))
                        (rule "applyEq" (formula "19") (term "0,0,1") (ifseqformula "20"))
                        (rule "eqSymm" (formula "19") (term "0,1"))
                        (rule "applyEqRigid" (formula "19") (term "0,1,0,0") (ifseqformula "6"))
                        (rule "inEqSimp_homoInEq1" (formula "19") (term "1,0,0"))
                        (rule "polySimp_mulComm0" (formula "19") (term "1,0,1,0,0"))
                        (rule "polySimp_rightDist" (formula "19") (term "1,0,1,0,0"))
                        (rule "mul_literals" (formula "19") (term "0,1,0,1,0,0"))
                        (rule "polySimp_addAssoc" (formula "19") (term "0,1,0,0"))
                        (rule "polySimp_addComm0" (formula "19") (term "0,0,1,0,0"))
                        (rule "polySimp_pullOutFactor1b" (formula "19") (term "0,1,0,0"))
                        (rule "add_literals" (formula "19") (term "1,1,0,1,0,0"))
                        (rule "times_zero_1" (formula "19") (term "1,0,1,0,0"))
                        (rule "add_zero_right" (formula "19") (term "0,1,0,0"))
                        (rule "leq_literals" (formula "19") (term "1,0,0"))
                         (builtin "One Step Simplification" (formula "19"))
                        (rule "applyEqRigid" (formula "19") (term "0,1,1") (ifseqformula "18"))
                        (rule "eqSymm" (formula "19") (term "1,1"))
                         (builtin "One Step Simplification" (formula "19"))
                        (rule "inEqSimp_subsumption1" (formula "19") (term "0,0") (ifseqformula "5"))
                        (rule "leq_literals" (formula "19") (term "0,0,0"))
                         (builtin "One Step Simplification" (formula "19"))
                        (rule "inEqSimp_subsumption1" (formula "19") (term "0") (ifseqformula "5"))
                        (rule "leq_literals" (formula "19") (term "0,0"))
                         (builtin "One Step Simplification" (formula "19"))
                        (rule "equalityToSeqGetAndSeqLenLeft" (formula "20") (inst "iv=iv"))
                        (rule "andLeft" (formula "20"))
                        (rule "lenOfSeqSub" (formula "21") (term "1,1,0,0"))
                        (rule "polySimp_elimSub" (formula "21") (term "1,1,1,0,0"))
                        (rule "mul_literals" (formula "21") (term "1,1,1,1,0,0"))
                        (rule "polySimp_addComm0" (formula "21") (term "1,1,1,0,0"))
                        (rule "lenOfSeqSub" (formula "20") (term "0"))
                        (rule "polySimp_elimSub" (formula "20") (term "1,0"))
                        (rule "mul_literals" (formula "20") (term "1,1,0"))
                        (rule "polySimp_addComm0" (formula "20") (term "1,0"))
                        (rule "lenOfSeqSubEQ" (formula "20") (term "1") (ifseqformula "18"))
                        (rule "eqSymm" (formula "20"))
                        (rule "polySimp_elimSub" (formula "20") (term "1,0"))
                        (rule "mul_literals" (formula "20") (term "1,1,0"))
                        (rule "polySimp_addComm0" (formula "20") (term "1,0"))
                         (builtin "One Step Simplification" (formula "20"))
                        (rule "true_left" (formula "20"))
                        (rule "inEqSimp_ltToLeq" (formula "20") (term "0,1,1,0,0"))
                        (rule "polySimp_mulComm0" (formula "20") (term "1,0,0,0,1,1,0,0"))
                        (rule "polySimp_addComm1" (formula "20") (term "0,0,1,1,0,0"))
                        (rule "add_literals" (formula "20") (term "0,0,0,1,1,0,0"))
                        (rule "inEqSimp_ltToLeq" (formula "20") (term "1,0,0"))
                        (rule "polySimp_mulComm0" (formula "20") (term "1,0,0,1,0,0"))
                        (rule "inEqSimp_commuteLeq" (formula "20") (term "0,0,0"))
                        (rule "applyEqRigid" (formula "20") (term "0,0,1,0") (ifseqformula "21"))
                         (builtin "One Step Simplification" (formula "20"))
                        (rule "true_left" (formula "20"))
                        (rule "seqGetAlphaCast" (formula "24") (term "0"))
                        (rule "castDel" (formula "24") (term "0"))
                         (builtin "One Step Simplification" (formula "24"))
                        (rule "true_left" (formula "24"))
                        (rule "equalityToSeqGetAndSeqLenLeft" (formula "18") (inst "iv=iv"))
                        (rule "andLeft" (formula "18"))
                        (rule "lenOfSeqSub" (formula "19") (term "1,1,0,0"))
                        (rule "polySimp_elimSub" (formula "19") (term "1,1,1,0,0"))
                        (rule "mul_literals" (formula "19") (term "1,1,1,1,0,0"))
                        (rule "polySimp_addComm0" (formula "19") (term "1,1,1,0,0"))
                        (rule "lenOfSeqSub" (formula "18") (term "0"))
                        (rule "polySimp_elimSub" (formula "18") (term "1,0"))
                        (rule "mul_literals" (formula "18") (term "1,1,0"))
                        (rule "polySimp_addComm0" (formula "18") (term "1,0"))
                        (rule "lenOfSeqSubEQ" (formula "18") (term "1") (ifseqformula "20"))
                        (rule "eqSymm" (formula "18"))
                        (rule "polySimp_elimSub" (formula "18") (term "1,0"))
                        (rule "mul_literals" (formula "18") (term "1,1,0"))
                        (rule "polySimp_addComm0" (formula "18") (term "1,0"))
                         (builtin "One Step Simplification" (formula "18"))
                        (rule "true_left" (formula "18"))
                        (rule "inEqSimp_ltToLeq" (formula "18") (term "0,1,1,0,0"))
                        (rule "polySimp_mulComm0" (formula "18") (term "1,0,0,0,1,1,0,0"))
                        (rule "polySimp_addComm1" (formula "18") (term "0,0,1,1,0,0"))
                        (rule "add_literals" (formula "18") (term "0,0,0,1,1,0,0"))
                        (rule "inEqSimp_ltToLeq" (formula "18") (term "1,0,0"))
                        (rule "polySimp_mulComm0" (formula "18") (term "1,0,0,1,0,0"))
                        (rule "inEqSimp_commuteLeq" (formula "18") (term "0,0,0"))
                        (rule "applyEqRigid" (formula "18") (term "0,0,1,0") (ifseqformula "19"))
                         (builtin "One Step Simplification" (formula "18"))
                        (rule "true_left" (formula "18"))
                        (rule "seqGetAlphaCast" (formula "26") (term "0"))
                        (rule "castDel" (formula "26") (term "0"))
                         (builtin "One Step Simplification" (formula "26"))
                        (rule "true_left" (formula "26"))
                        (rule "seqGetAlphaCast" (formula "23") (term "0"))
                        (rule "castDel" (formula "23") (term "0"))
                         (builtin "One Step Simplification" (formula "23"))
                        (rule "true_left" (formula "23"))
                        (rule "ifthenelse_split" (formula "2") (term "0"))
                        (branch "f_0 = java.lang.Object::<created> & o_0 = sk_1 TRUE"
                           (rule "andLeft" (formula "2"))
                           (rule "applyEqReverse" (formula "64") (term "1") (ifseqformula "4"))
                           (rule "hideAuxiliaryEq" (formula "4"))
                           (rule "replace_known_left" (formula "53") (term "0") (ifseqformula "2"))
                            (builtin "One Step Simplification" (formula "53"))
                           (rule "applyEq" (formula "53") (term "0") (ifseqformula "3"))
                           (rule "applyEq" (formula "63") (term "1,0") (ifseqformula "3"))
                           (rule "applyEqRigid" (formula "1") (term "1,0") (ifseqformula "3"))
                           (rule "applyEqRigid" (formula "63") (term "2,0") (ifseqformula "2"))
                           (rule "castTrueImpliesOriginalTrue" (formula "63") (ifseqformula "1"))
                           (rule "closeTrue" (formula "63"))
                        )
                        (branch "f_0 = java.lang.Object::<created> & o_0 = sk_1 FALSE"
                           (rule "close" (formula "63") (ifseqformula "2"))
                        )
                     )
                  )
               )
            )
            (branch "strContent(sk_0).length >= 11 FALSE"
               (rule "polySimp_homoEq" (formula "5"))
               (rule "times_zero_2" (formula "5") (term "1,0"))
               (rule "add_zero_right" (formula "5") (term "0"))
               (rule "inEqSimp_geqRight" (formula "52"))
               (rule "mul_literals" (formula "1") (term "1,0,0"))
               (rule "add_literals" (formula "1") (term "0,0"))
               (rule "polySimp_sepPosMonomial" (formula "6"))
               (rule "mul_literals" (formula "6") (term "1"))
               (rule "applyEqRigid" (formula "20") (term "1,2,0") (ifseqformula "6"))
               (rule "add_literals" (formula "20") (term "2,0"))
                (builtin "One Step Simplification" (formula "20"))
               (rule "eqSymm" (formula "20"))
               (rule "eqSeqEmpty" (formula "20"))
               (rule "lenOfSeqSubEQ" (formula "20") (term "0") (ifseqformula "39"))
                (builtin "One Step Simplification" (formula "20"))
               (rule "polySimp_elimSub" (formula "20") (term "0,1"))
               (rule "mul_literals" (formula "20") (term "1,0,1"))
               (rule "polySimp_addComm0" (formula "20") (term "0,1"))
               (rule "inEqSimp_ltToLeq" (formula "20") (term "0,0"))
               (rule "polySimp_mulComm0" (formula "20") (term "1,0,0,0,0"))
               (rule "polySimp_addComm1" (formula "20") (term "0,0,0"))
               (rule "add_literals" (formula "20") (term "0,0,0,0"))
               (rule "applyEq" (formula "21") (term "1,1,0") (ifseqformula "6"))
               (rule "add_literals" (formula "21") (term "1,0"))
               (rule "applyEqRigid" (formula "19") (term "1,2,0") (ifseqformula "6"))
               (rule "add_literals" (formula "19") (term "2,0"))
                (builtin "One Step Simplification" (formula "19"))
               (rule "eqSymm" (formula "19"))
               (rule "eqSeqEmpty" (formula "19"))
               (rule "lenOfSeqSubEQ" (formula "19") (term "0") (ifseqformula "39"))
                (builtin "One Step Simplification" (formula "19"))
               (rule "polySimp_elimSub" (formula "19") (term "0,1"))
               (rule "mul_literals" (formula "19") (term "1,0,1"))
               (rule "polySimp_addComm0" (formula "19") (term "0,1"))
               (rule "inEqSimp_ltToLeq" (formula "19") (term "0,0"))
               (rule "polySimp_mulComm0" (formula "19") (term "1,0,0,0,0"))
               (rule "polySimp_addComm1" (formula "19") (term "0,0,0"))
               (rule "add_literals" (formula "19") (term "0,0,0,0"))
               (rule "applyEq" (formula "7") (term "0") (ifseqformula "6"))
               (rule "qeq_literals" (formula "7"))
               (rule "true_left" (formula "7"))
               (rule "applyEq" (formula "24") (term "1,1,0") (ifseqformula "6"))
               (rule "add_literals" (formula "24") (term "1,0"))
               (rule "applyEq" (formula "20") (term "1,1,0") (ifseqformula "6"))
               (rule "add_literals" (formula "20") (term "1,0"))
               (rule "applyEq" (formula "22") (term "1,1,0") (ifseqformula "6"))
               (rule "add_literals" (formula "22") (term "1,0"))
               (rule "applyEqRigid" (formula "21") (term "1,1,0") (ifseqformula "6"))
               (rule "add_literals" (formula "21") (term "1,0"))
               (rule "applyEq" (formula "23") (term "1,1,0") (ifseqformula "6"))
               (rule "add_literals" (formula "23") (term "1,0"))
               (rule "polySimp_sepPosMonomial" (formula "18") (term "1"))
               (rule "mul_literals" (formula "18") (term "1,1"))
               (rule "inEqSimp_sepPosMonomial0" (formula "1"))
               (rule "mul_literals" (formula "1") (term "1"))
               (rule "inEqSimp_sepNegMonomial0" (formula "18") (term "0,0"))
               (rule "polySimp_mulLiterals" (formula "18") (term "0,0,0"))
               (rule "polySimp_elimOne" (formula "18") (term "0,0,0"))
               (rule "inEqSimp_contradInEq0" (formula "18") (term "0,0") (ifseqformula "1"))
               (rule "qeq_literals" (formula "18") (term "0,0,0"))
                (builtin "One Step Simplification" (formula "18"))
               (rule "true_left" (formula "18"))
               (rule "inEqSimp_antiSymm" (formula "25") (ifseqformula "1"))
               (rule "applyEq" (formula "1") (term "0") (ifseqformula "25"))
               (rule "leq_literals" (formula "1"))
               (rule "true_left" (formula "1"))
               (rule "applyEqRigid" (formula "25") (term "0") (ifseqformula "24"))
               (rule "qeq_literals" (formula "25"))
               (rule "true_left" (formula "25"))
               (rule "applyEq" (formula "35") (term "2,0") (ifseqformula "24"))
                (builtin "One Step Simplification" (formula "35"))
               (rule "eqSymm" (formula "35"))
               (rule "eqSeqEmpty" (formula "35"))
               (rule "cut_direct" (formula "23") (term "0"))
               (branch "CUT: sk_0 = strPool(\" lines\") TRUE"
                   (builtin "One Step Simplification" (formula "24"))
                  (rule "true_left" (formula "24"))
                  (rule "applyEq" (formula "25") (term "0,0,0") (ifseqformula "23"))
                  (rule "poolKeyIsContentOfValue" (formula "25") (term "0,0"))
                  (rule "applyEqRigid" (formula "30") (term "0,0,0") (ifseqformula "23"))
                  (rule "poolKeyIsContentOfValue" (formula "30") (term "0,0"))
                  (rule "applyEqRigid" (formula "34") (term "0,0,0") (ifseqformula "23"))
                  (rule "poolKeyIsContentOfValue" (formula "34") (term "0,0"))
                  (rule "applyEq" (formula "32") (term "0,0,0") (ifseqformula "23"))
                  (rule "poolKeyIsContentOfValue" (formula "32") (term "0,0"))
                  (rule "applyEq" (formula "29") (term "0,0,0") (ifseqformula "23"))
                  (rule "poolKeyIsContentOfValue" (formula "29") (term "0,0"))
                  (rule "applyEq" (formula "26") (term "0,0,0") (ifseqformula "23"))
                  (rule "poolKeyIsContentOfValue" (formula "26") (term "0,0"))
                  (rule "applyEq" (formula "33") (term "0,0,0") (ifseqformula "23"))
                  (rule "poolKeyIsContentOfValue" (formula "33") (term "0,0"))
                  (rule "applyEqRigid" (formula "27") (term "0,0,0") (ifseqformula "23"))
                  (rule "poolKeyIsContentOfValue" (formula "27") (term "0,0"))
                  (rule "applyEq" (formula "54") (term "0") (ifseqformula "23"))
                  (rule "applyEq" (formula "28") (term "0,0,0") (ifseqformula "23"))
                  (rule "poolKeyIsContentOfValue" (formula "28") (term "0,0"))
                  (rule "applyEqRigid" (formula "24") (term "0,0,0") (ifseqformula "23"))
                  (rule "poolKeyIsContentOfValue" (formula "24") (term "0,0"))
                  (rule "lenOfSeqConcat" (formula "24") (term "0"))
                   (builtin "One Step Simplification" (formula "24"))
                  (rule "polySimp_homoEq" (formula "24"))
                  (rule "polySimp_mulComm0" (formula "24") (term "1,0"))
                  (rule "polySimp_rightDist" (formula "24") (term "1,0"))
                  (rule "mul_literals" (formula "24") (term "0,1,0"))
                  (rule "polySimp_addAssoc" (formula "24") (term "0"))
                  (rule "add_literals" (formula "24") (term "0,0"))
                  (rule "lenOfSeqConcat" (formula "24") (term "0,1,0"))
                   (builtin "One Step Simplification" (formula "24"))
                  (rule "polySimp_mulComm0" (formula "24") (term "1,0"))
                  (rule "polySimp_rightDist" (formula "24") (term "1,0"))
                  (rule "mul_literals" (formula "24") (term "0,1,0"))
                  (rule "polySimp_addAssoc" (formula "24") (term "0"))
                  (rule "add_literals" (formula "24") (term "0,0"))
                  (rule "lenOfSeqConcat" (formula "24") (term "0,1,0"))
                   (builtin "One Step Simplification" (formula "24"))
                  (rule "polySimp_mulComm0" (formula "24") (term "1,0"))
                  (rule "polySimp_rightDist" (formula "24") (term "1,0"))
                  (rule "mul_literals" (formula "24") (term "0,1,0"))
                  (rule "polySimp_addAssoc" (formula "24") (term "0"))
                  (rule "add_literals" (formula "24") (term "0,0"))
                  (rule "lenOfSeqConcat" (formula "24") (term "0,1,0"))
                   (builtin "One Step Simplification" (formula "24"))
                  (rule "polySimp_mulComm0" (formula "24") (term "1,0"))
                  (rule "polySimp_rightDist" (formula "24") (term "1,0"))
                  (rule "mul_literals" (formula "24") (term "0,1,0"))
                  (rule "polySimp_addAssoc" (formula "24") (term "0"))
                  (rule "add_literals" (formula "24") (term "0,0"))
                  (rule "lenOfSeqConcat" (formula "24") (term "0,1,0"))
                   (builtin "One Step Simplification" (formula "24"))
                  (rule "add_literals" (formula "24") (term "0,1,0"))
                  (rule "mul_literals" (formula "24") (term "1,0"))
                  (rule "add_literals" (formula "24") (term "0"))
                  (rule "equal_literals" (formula "24"))
                  (rule "closeFalse" (formula "24"))
               )
               (branch "CUT: sk_0 = strPool(\" lines\") FALSE"
                   (builtin "One Step Simplification" (formula "23"))
                  (rule "cut_direct" (formula "58") (term "0,0"))
                  (branch "CUT: o_0 = null TRUE"
                      (builtin "One Step Simplification" (formula "59"))
                     (rule "false_right" (formula "59"))
                     (rule "replace_known_left" (formula "58") (term "1") (ifseqformula "1"))
                      (builtin "One Step Simplification" (formula "58"))
                     (rule "applyEq" (formula "59") (term "1,0") (ifseqformula "1"))
                     (rule "applyEqRigid" (formula "2") (term "0,1,0,0") (ifseqformula "1"))
                     (rule "eqSymm" (formula "2") (term "1,0,0"))
                     (rule "replace_known_right" (formula "2") (term "1,0,0") (ifseqformula "56"))
                      (builtin "One Step Simplification" (formula "2"))
                     (rule "applyEqReverse" (formula "3") (term "2,0") (ifseqformula "2"))
                     (rule "hideAuxiliaryEq" (formula "2"))
                     (rule "applyEqRigid" (formula "2") (term "0,1,0,0") (ifseqformula "1"))
                     (rule "eqSymm" (formula "2") (term "1,0,0"))
                     (rule "replace_known_right" (formula "2") (term "1,0,0") (ifseqformula "56"))
                      (builtin "One Step Simplification" (formula "2"))
                     (rule "applyEqReverse" (formula "58") (term "1") (ifseqformula "2"))
                     (rule "hideAuxiliaryEq" (formula "2"))
                     (rule "eqSymm" (formula "57"))
                     (rule "applyEqRigid" (formula "57") (term "1,0") (ifseqformula "1"))
                      (builtin "One Step Simplification" (formula "57"))
                     (rule "closeTrue" (formula "57"))
                  )
                  (branch "CUT: o_0 = null FALSE"
                      (builtin "One Step Simplification" (formula "59"))
                     (rule "notRight" (formula "59"))
                     (rule "replace_known_right" (formula "58") (term "1") (ifseqformula "59"))
                      (builtin "One Step Simplification" (formula "58"))
                     (rule "false_right" (formula "58"))
                     (rule "seqGetAlphaCast" (formula "7") (term "0"))
                     (rule "castDel" (formula "7") (term "0"))
                      (builtin "One Step Simplification" (formula "7"))
                     (rule "true_left" (formula "7"))
                     (rule "equalityToSeqGetAndSeqLenLeft" (formula "17") (inst "iv=iv"))
                     (rule "andLeft" (formula "17"))
                     (rule "inEqSimp_ltToLeq" (formula "18") (term "1,0,0"))
                     (rule "polySimp_mulComm0" (formula "18") (term "1,0,0,1,0,0"))
                     (rule "inEqSimp_commuteLeq" (formula "18") (term "0,0,0"))
                     (rule "applyEq" (formula "18") (term "0,0,1,0,0,1,0,0") (ifseqformula "19"))
                     (rule "applyEq" (formula "18") (term "0,0,1,0") (ifseqformula "19"))
                      (builtin "One Step Simplification" (formula "18"))
                     (rule "true_left" (formula "18"))
                     (rule "applyEq" (formula "17") (term "0,0") (ifseqformula "18"))
                      (builtin "One Step Simplification" (formula "17"))
                     (rule "true_left" (formula "17"))
                     (rule "seqGetAlphaCast" (formula "8") (term "0"))
                     (rule "castDel" (formula "8") (term "0"))
                      (builtin "One Step Simplification" (formula "8"))
                     (rule "true_left" (formula "8"))
                     (rule "seqGetAlphaCast" (formula "13") (term "0"))
                     (rule "castDel" (formula "13") (term "0"))
                      (builtin "One Step Simplification" (formula "13"))
                     (rule "true_left" (formula "13"))
                     (rule "ifthenelse_split" (formula "2") (term "0"))
                     (branch "f_0 = java.lang.Object::<created> & o_0 = sk_0 TRUE"
                        (rule "andLeft" (formula "2"))
                        (rule "applyEqReverse" (formula "5") (term "2,0") (ifseqformula "4"))
                         (builtin "One Step Simplification" (formula "5") (ifInst ""  (formula "2")))
                        (rule "applyEqReverse" (formula "61") (term "1") (ifseqformula "5"))
                        (rule "hideAuxiliaryEq" (formula "4"))
                        (rule "hideAuxiliaryEq" (formula "4"))
                        (rule "applyEq" (formula "58") (term "0") (ifseqformula "3"))
                        (rule "applyEq" (formula "58") (term "1,0") (ifseqformula "3"))
                        (rule "applyEq" (formula "1") (term "1,0") (ifseqformula "3"))
                        (rule "applyEqRigid" (formula "58") (term "2,0") (ifseqformula "2"))
                        (rule "castTrueImpliesOriginalTrue" (formula "58") (ifseqformula "1"))
                        (rule "closeTrue" (formula "58"))
                     )
                     (branch "f_0 = java.lang.Object::<created> & o_0 = sk_0 FALSE"
                        (rule "applyEqReverse" (formula "3") (term "2,0") (ifseqformula "2"))
                        (rule "hideAuxiliaryEq" (formula "2"))
                        (rule "seqGetAlphaCast" (formula "8") (term "0"))
                        (rule "castDel" (formula "8") (term "0"))
                         (builtin "One Step Simplification" (formula "8"))
                        (rule "true_left" (formula "8"))
                        (rule "seqGetAlphaCast" (formula "9") (term "0"))
                        (rule "castDel" (formula "9") (term "0"))
                         (builtin "One Step Simplification" (formula "9"))
                        (rule "true_left" (formula "9"))
                        (rule "seqGetAlphaCast" (formula "10") (term "0"))
                        (rule "castDel" (formula "10") (term "0"))
                         (builtin "One Step Simplification" (formula "10"))
                        (rule "true_left" (formula "10"))
                        (rule "seqGetAlphaCast" (formula "15") (term "0"))
                        (rule "castDel" (formula "15") (term "0"))
                         (builtin "One Step Simplification" (formula "15"))
                        (rule "true_left" (formula "15"))
                        (rule "seqGetAlphaCast" (formula "14") (term "0"))
                        (rule "castDel" (formula "14") (term "0"))
                         (builtin "One Step Simplification" (formula "14"))
                        (rule "true_left" (formula "14"))
                        (rule "seqGetAlphaCast" (formula "13") (term "0"))
                        (rule "castDel" (formula "13") (term "0"))
                         (builtin "One Step Simplification" (formula "13"))
                        (rule "true_left" (formula "13"))
                        (rule "seqGetAlphaCast" (formula "11") (term "0"))
                        (rule "castDel" (formula "11") (term "0"))
                         (builtin "One Step Simplification" (formula "11"))
                        (rule "true_left" (formula "11"))
                        (rule "seqGetAlphaCast" (formula "17") (term "0"))
                        (rule "castDel" (formula "17") (term "0"))
                         (builtin "One Step Simplification" (formula "17"))
                        (rule "true_left" (formula "17"))
                        (rule "ifthenelse_split" (formula "2") (term "0"))
                        (branch "f_0 = java.lang.Object::<created> & o_0 = sk_1 TRUE"
                           (rule "andLeft" (formula "2"))
                           (rule "applyEqReverse" (formula "61") (term "1") (ifseqformula "4"))
                           (rule "hideAuxiliaryEq" (formula "4"))
                           (rule "replace_known_left" (formula "50") (term "0") (ifseqformula "2"))
                            (builtin "One Step Simplification" (formula "50"))
                           (rule "applyEq" (formula "50") (term "0") (ifseqformula "3"))
                           (rule "applyEq" (formula "60") (term "1,0") (ifseqformula "3"))
                           (rule "applyEq" (formula "59") (term "0") (ifseqformula "3"))
                           (rule "applyEqRigid" (formula "1") (term "1,0") (ifseqformula "3"))
                           (rule "applyEqRigid" (formula "59") (term "2,0") (ifseqformula "2"))
                           (rule "castTrueImpliesOriginalTrue" (formula "59") (ifseqformula "1"))
                           (rule "closeTrue" (formula "59"))
                        )
                        (branch "f_0 = java.lang.Object::<created> & o_0 = sk_1 FALSE"
                           (rule "close" (formula "60") (ifseqformula "2"))
                        )
                     )
                  )
               )
            )
         )
         (branch "strContent(sk_1).length >= 7 FALSE"
            (rule "qeq_literals" (formula "7") (term "1"))
             (builtin "One Step Simplification" (formula "7") (ifInst ""  (formula "67")))
            (rule "closeFalse" (formula "7"))
         )
      )
      (branch "Exceptional Post (getCurrentLineNumber)"
          (builtin "One Step Simplification" (formula "11"))
          (builtin "One Step Simplification" (formula "16"))
         (rule "andLeft" (formula "11"))
         (rule "andLeft" (formula "12"))
         (rule "andLeft" (formula "11"))
         (rule "notLeft" (formula "11"))
         (rule "close" (formula "14") (ifseqformula "13"))
      )
      (branch "Pre (getCurrentLineNumber)"
          (builtin "One Step Simplification" (formula "15") (ifInst ""  (formula "4")))
         (rule "Class_invariant_axiom_for_org_apache_commons_csv_CSVParser" (formula "15"))
         (rule "closeTrue" (formula "15"))
      )
      (branch "Null reference (c_7 = null)"
          (builtin "One Step Simplification" (formula "15") (ifInst ""  (formula "13")))
         (rule "closeTrue" (formula "15"))
      )
   )
   (branch "if x false"
       (builtin "One Step Simplification" (formula "1"))
       (builtin "One Step Simplification" (formula "12"))
      (rule "notLeft" (formula "1"))
      (rule "jmod_axiom" (formula "8") (term "0"))
      (rule "polySimp_mulLiterals" (formula "8") (term "1,0"))
      (rule "polySimp_sepNegMonomial" (formula "8"))
      (rule "polySimp_mulLiterals" (formula "8") (term "0"))
      (rule "methodCallEmpty" (formula "12") (term "1"))
      (rule "tryEmpty" (formula "12") (term "1"))
      (rule "emptyModality" (formula "12") (term "1"))
       (builtin "One Step Simplification" (formula "12") (ifInst ""  (formula "11")))
      (rule "closeTrue" (formula "12"))
   )
)
(branch "Exceptional Post (getCurrentLineNumber)"
    (builtin "One Step Simplification" (formula "9"))
    (builtin "One Step Simplification" (formula "5"))
   (rule "andLeft" (formula "5"))
   (rule "andLeft" (formula "5"))
   (rule "andLeft" (formula "7"))
   (rule "notLeft" (formula "5"))
   (rule "close" (formula "8") (ifseqformula "7"))
)
(branch "Pre (getCurrentLineNumber)"
    (builtin "One Step Simplification" (formula "8") (ifInst ""  (formula "1")))
   (rule "Class_invariant_axiom_for_org_apache_commons_csv_CSVParser" (formula "8"))
   (rule "closeTrue" (formula "8"))
)
(branch "Null reference (c_6 = null)"
    (builtin "One Step Simplification" (formula "8") (ifInst ""  (formula "6")))
   (rule "closeTrue" (formula "8"))
)
)
}
