\profile "Java Profile";

\settings {
"#Proof-Settings-Config-File
#Sun Feb 09 23:45:23 CET 2020
[Labels]UseOriginLabels=false
[StrategyProperty]QUERYAXIOM_OPTIONS_KEY=QUERYAXIOM_ON
[SMTSettings]invariantForall=false
[Strategy]ActiveStrategy=JavaCardDLStrategy
[StrategyProperty]USER_TACLETS_OPTIONS_KEY1=USER_TACLETS_OFF
[StrategyProperty]QUANTIFIERS_OPTIONS_KEY=QUANTIFIERS_NON_SPLITTING_WITH_PROGS
[StrategyProperty]USER_TACLETS_OPTIONS_KEY2=USER_TACLETS_OFF
[Choice]DefaultChoices=methodExpansion-methodExpansion\\:modularOnly , mergeGenerateIsWeakeningGoal-mergeGenerateIsWeakeningGoal\\:off , wdChecks-wdChecks\\:off , wdOperator-wdOperator\\:L , permissions-permissions\\:off , integerSimplificationRules-integerSimplificationRules\\:full , reach-reach\\:on , moreSeqRules-moreSeqRules\\:on , sequences-sequences\\:on , bigint-bigint\\:on , modelFields-modelFields\\:treatAsAxiom , Strings-Strings\\:on , JavaCard-JavaCard\\:off , runtimeExceptions-runtimeExceptions\\:allow , programRules-programRules\\:Java , intRules-intRules\\:javaSemantics , initialisation-initialisation\\:disableStaticInitialisation , assertions-assertions\\:on
[StrategyProperty]LOOP_OPTIONS_KEY=LOOP_INVARIANT
[StrategyProperty]INF_FLOW_CHECK_PROPERTY=INF_FLOW_CHECK_FALSE
[SMTSettings]UseBuiltUniqueness=false
[SMTSettings]explicitTypeHierarchy=false
[SMTSettings]instantiateHierarchyAssumptions=true
[StrategyProperty]NON_LIN_ARITH_OPTIONS_KEY=NON_LIN_ARITH_DEF_OPS
[SMTSettings]SelectedTaclets=
[StrategyProperty]DEP_OPTIONS_KEY=DEP_ON
[StrategyProperty]AUTO_INDUCTION_OPTIONS_KEY=AUTO_INDUCTION_OFF
[Strategy]MaximumNumberOfAutomaticApplications=10000
[StrategyProperty]STOPMODE_OPTIONS_KEY=STOPMODE_DEFAULT
[StrategyProperty]CLASS_AXIOM_OPTIONS_KEY=CLASS_AXIOM_FREE
[SMTSettings]useConstantsForBigOrSmallIntegers=true
[StrategyProperty]MPS_OPTIONS_KEY=MPS_MERGE
[StrategyProperty]SYMBOLIC_EXECUTION_NON_EXECUTION_BRANCH_HIDING_OPTIONS_KEY=SYMBOLIC_EXECUTION_NON_EXECUTION_BRANCH_HIDING_OFF
[Strategy]Timeout=-1
[StrategyProperty]SYMBOLIC_EXECUTION_ALIAS_CHECK_OPTIONS_KEY=SYMBOLIC_EXECUTION_ALIAS_CHECK_NEVER
[StrategyProperty]QUERY_NEW_OPTIONS_KEY=QUERY_OFF
[SMTSettings]useUninterpretedMultiplication=true
[StrategyProperty]BLOCK_OPTIONS_KEY=BLOCK_CONTRACT_INTERNAL
[StrategyProperty]METHOD_OPTIONS_KEY=METHOD_CONTRACT
[StrategyProperty]USER_TACLETS_OPTIONS_KEY3=USER_TACLETS_OFF
[SMTSettings]maxGenericSorts=2
[StrategyProperty]OSS_OPTIONS_KEY=OSS_ON
[StrategyProperty]SPLITTING_OPTIONS_KEY=SPLITTING_DELAYED
[SMTSettings]integersMinimum=-2147483645
[StrategyProperty]VBT_PHASE=VBT_SYM_EX
[SMTSettings]integersMaximum=2147483645
"
}

\bootclasspath "../../../../../../home/flo/git/polyas-core3-open-cred/boot";

\javaSource "../../../../../../home/flo/git/polyas-core3-open-cred/src";

\proofObligation "#Proof Obligation Settings
#Sun Feb 09 23:45:23 CET 2020
contract=de.polyas.core3.open.cred.CredTool[de.polyas.core3.open.cred.CredTool\\:\\:generateDataForVoter(org.apache.commons.csv.CSVRecord,java.lang.String)].JML normal_behavior operation contract.0
name=de.polyas.core3.open.cred.CredTool[de.polyas.core3.open.cred.CredTool\\:\\:generateDataForVoter(org.apache.commons.csv.CSVRecord,java.lang.String)].JML normal_behavior operation contract.0
class=de.uka.ilkd.key.proof.init.FunctionalOperationContractPO
";

\proof {
(keyLog "0" (keyUser "flo" ) (keyVersion ""))

(autoModeTime "26490")

(branch "dummy ID"
 (builtin "One Step Simplification" (formula "1") (newnames "record_227,password_239,self_1992,result_1897,exc_2513,heapAtPre_0,o,f"))
(rule "impRight" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "3"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "5"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "3"))
(rule "andLeft" (formula "8"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "10"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "12"))
(rule "notLeft" (formula "2"))
(rule "andLeft" (formula "12"))
(rule "andLeft" (formula "13"))
(rule "andLeft" (formula "14"))
(rule "andLeft" (formula "15"))
(rule "andLeft" (formula "16"))
(rule "andLeft" (formula "15"))
(rule "notLeft" (formula "18"))
(rule "notLeft" (formula "17"))
(rule "exLeft" (formula "12") (inst "sk=i_0"))
(rule "andLeft" (formula "12"))
(rule "andLeft" (formula "12"))
(rule "translateJavaAddInt" (formula "22") (term "1,0,0,0,0,1"))
(rule "eqSymm" (formula "22") (term "1,0,0,1,0,1"))
(rule "translateJavaSubInt" (formula "18") (term "1"))
(rule "eqSymm" (formula "22") (term "0,0,0,0,1"))
(rule "replace_known_right" (formula "5") (term "0") (ifseqformula "20"))
 (builtin "One Step Simplification" (formula "5"))
(rule "replace_known_right" (formula "4") (term "0") (ifseqformula "19"))
 (builtin "One Step Simplification" (formula "4"))
(rule "castedGetAny" (formula "15") (term "0,0,1,0"))
(rule "castedGetAny" (formula "15") (term "0,1,0,1,1,0"))
(rule "castedGetAny" (formula "15") (term "0,0,1,1,0,0,1,1,0"))
(rule "castedGetAny" (formula "14") (term "0"))
(rule "castedGetAny" (formula "15") (term "0,0,0,1,0,1,1,0"))
(rule "inEqSimp_ltToLeq" (formula "15") (term "1,0,0"))
(rule "polySimp_mulComm0" (formula "15") (term "1,0,0,1,0,0"))
(rule "inEqSimp_ltToLeq" (formula "13"))
(rule "polySimp_mulComm0" (formula "13") (term "1,0,0"))
(rule "polySimp_addComm1" (formula "13") (term "0"))
(rule "inEqSimp_ltToLeq" (formula "18"))
(rule "polySimp_mulComm0" (formula "18") (term "1,0,0"))
(rule "inEqSimp_ltToLeq" (formula "15") (term "1,0,0,1,1,0"))
(rule "polySimp_mulComm0" (formula "15") (term "1,0,0,1,0,0,1,1,0"))
(rule "inEqSimp_gtToGeq" (formula "15") (term "1,0,1,1,0"))
(rule "polySimp_mulComm0" (formula "15") (term "1,0,0,1,0,1,1,0"))
(rule "inEqSimp_commuteLeq" (formula "15") (term "0,0,0,1,1,0"))
(rule "inEqSimp_commuteLeq" (formula "15") (term "0,0,0"))
(rule "inEqSimp_commuteLeq" (formula "17"))
(rule "inEqSimp_commuteLeq" (formula "12"))
(rule "assignment" (formula "22") (term "1"))
 (builtin "One Step Simplification" (formula "22"))
(rule "inEqSimp_sepPosMonomial0" (formula "15") (term "1,0,0"))
(rule "polySimp_mulComm0" (formula "15") (term "1,1,0,0"))
(rule "polySimp_rightDist" (formula "15") (term "1,1,0,0"))
(rule "polySimp_mulLiterals" (formula "15") (term "1,1,1,0,0"))
(rule "mul_literals" (formula "15") (term "0,1,1,0,0"))
(rule "polySimp_elimOne" (formula "15") (term "1,1,1,0,0"))
(rule "inEqSimp_sepNegMonomial0" (formula "13"))
(rule "polySimp_mulLiterals" (formula "13") (term "0"))
(rule "polySimp_elimOne" (formula "13") (term "0"))
(rule "inEqSimp_sepPosMonomial0" (formula "18"))
(rule "polySimp_mulComm0" (formula "18") (term "1"))
(rule "polySimp_rightDist" (formula "18") (term "1"))
(rule "mul_literals" (formula "18") (term "0,1"))
(rule "polySimp_mulLiterals" (formula "18") (term "1,1"))
(rule "polySimp_elimOne" (formula "18") (term "1,1"))
(rule "inEqSimp_sepPosMonomial0" (formula "15") (term "1,0,0,1,1,0"))
(rule "polySimp_mulComm0" (formula "15") (term "1,1,0,0,1,1,0"))
(rule "polySimp_rightDist" (formula "15") (term "1,1,0,0,1,1,0"))
(rule "polySimp_mulLiterals" (formula "15") (term "1,1,1,0,0,1,1,0"))
(rule "mul_literals" (formula "15") (term "0,1,1,0,0,1,1,0"))
(rule "polySimp_elimOne" (formula "15") (term "1,1,1,0,0,1,1,0"))
(rule "inEqSimp_sepPosMonomial1" (formula "15") (term "1,0,1,1,0"))
(rule "polySimp_mulComm0" (formula "15") (term "1,1,0,1,1,0"))
(rule "polySimp_rightDist" (formula "15") (term "1,1,0,1,1,0"))
(rule "mul_literals" (formula "15") (term "0,1,1,0,1,1,0"))
(rule "polySimp_mulLiterals" (formula "15") (term "1,1,1,0,1,1,0"))
(rule "polySimp_elimOne" (formula "15") (term "1,1,1,0,1,1,0"))
(rule "elementOfUnion" (formula "22") (term "0,0,0,0,1,0,1"))
(rule "elementOfSingleton" (formula "22") (term "1,0,0,0,0,1,0,1"))
(rule "elementOfSingleton" (formula "22") (term "0,0,0,0,0,1,0,1"))
(rule "inEqSimp_exactShadow3" (formula "17") (ifseqformula "18"))
(rule "times_zero_1" (formula "17") (term "0,0"))
(rule "add_zero_left" (formula "17") (term "0"))
(rule "inEqSimp_sepPosMonomial1" (formula "17"))
(rule "mul_literals" (formula "17") (term "1"))
(rule "expand_addJint" (formula "23") (term "0,0,0,0,0,1"))
(rule "polySimp_addComm0" (formula "23") (term "0,0,0,0,0,0,1"))
(rule "expand_subJint" (formula "19") (term "1,1"))
(rule "polySimp_elimSub" (formula "19") (term "0,1,1"))
(rule "mul_literals" (formula "19") (term "1,0,1,1"))
(rule "polySimp_addComm0" (formula "19") (term "0,1,1"))
(rule "inEqSimp_exactShadow3" (formula "18") (ifseqformula "19"))
(rule "times_zero_1" (formula "18") (term "0,0"))
(rule "add_zero_left" (formula "18") (term "0"))
(rule "inEqSimp_sepPosMonomial1" (formula "18"))
(rule "mul_literals" (formula "18") (term "1"))
(rule "expand_subJint" (formula "17") (term "0"))
(rule "polySimp_elimSub" (formula "17") (term "0,0"))
(rule "mul_literals" (formula "17") (term "1,0,0"))
(rule "polySimp_addComm0" (formula "17") (term "0,0"))
(rule "nnf_imp2or" (formula "15") (term "0"))
(rule "expand_moduloInteger" (formula "23") (term "0,0,0,0,0,1"))
(rule "replace_int_RANGE" (formula "23") (term "1,1,0,0,0,0,0,1"))
(rule "replace_int_MIN" (formula "23") (term "0,0,0,0,0,0,1"))
(rule "replace_int_HALFRANGE" (formula "23") (term "0,0,1,0,0,0,0,0,1"))
(rule "polySimp_homoEq" (formula "23") (term "0,0,0,0,1"))
(rule "polySimp_mulComm0" (formula "23") (term "1,0,0,0,0,0,1"))
(rule "polySimp_rightDist" (formula "23") (term "1,0,0,0,0,0,1"))
(rule "mul_literals" (formula "23") (term "0,1,0,0,0,0,0,1"))
(rule "polySimp_addAssoc" (formula "23") (term "0,0,1,1,0,0,0,0,0,1"))
(rule "add_literals" (formula "23") (term "0,0,0,1,1,0,0,0,0,0,1"))
(rule "polySimp_addAssoc" (formula "23") (term "0,0,0,0,0,1"))
(rule "polySimp_addComm0" (formula "23") (term "0,0,0,0,0,0,1"))
(rule "polySimp_sepNegMonomial" (formula "23") (term "0,0,0,0,1"))
(rule "polySimp_mulLiterals" (formula "23") (term "0,0,0,0,0,1"))
(rule "polySimp_elimOne" (formula "23") (term "0,0,0,0,0,1"))
(rule "polyMod_pullOut" (formula "23") (term "0,0,0,0,0,1") (inst "polyDivCoeff=Z(1(#))"))
(rule "mul_literals" (formula "23") (term "0,1,0,0,0,0,0,0,1"))
(rule "mul_literals" (formula "23") (term "1,0,0,0,0,0,0,1"))
(rule "polySimp_addComm1" (formula "23") (term "0,0,0,0,0,0,1"))
(rule "add_literals" (formula "23") (term "0,0,0,0,0,0,0,1"))
(rule "expand_moduloInteger" (formula "19") (term "1,1"))
(rule "replace_int_RANGE" (formula "19") (term "1,1,1,1"))
(rule "replace_int_HALFRANGE" (formula "19") (term "0,0,1,1,1"))
(rule "replace_int_MIN" (formula "19") (term "0,1,1"))
(rule "polySimp_addAssoc" (formula "19") (term "0,1,1,1"))
(rule "add_literals" (formula "19") (term "0,0,1,1,1"))
(rule "polySimp_addAssoc" (formula "19") (term "1"))
(rule "add_literals" (formula "19") (term "0,1"))
(rule "mod_axiom" (formula "19") (term "1,1"))
(rule "polySimp_mulLiterals" (formula "19") (term "1,1,1"))
(rule "polySimp_addAssoc" (formula "19") (term "1"))
(rule "polySimp_addAssoc" (formula "19") (term "0,1"))
(rule "add_literals" (formula "19") (term "0,0,1"))
(rule "inEqSimp_exactShadow3" (formula "18") (ifseqformula "19"))
(rule "times_zero_1" (formula "18") (term "0,0"))
(rule "add_zero_left" (formula "18") (term "0"))
(rule "inEqSimp_sepNegMonomial1" (formula "18"))
(rule "polySimp_mulLiterals" (formula "18") (term "0"))
(rule "expand_moduloInteger" (formula "17") (term "0"))
(rule "replace_int_HALFRANGE" (formula "17") (term "0,0,1,0"))
(rule "replace_int_MIN" (formula "17") (term "0,0"))
(rule "replace_int_RANGE" (formula "17") (term "1,1,0"))
(rule "polySimp_addAssoc" (formula "17") (term "0,1,0"))
(rule "add_literals" (formula "17") (term "0,0,1,0"))
(rule "inEqSimp_homoInEq1" (formula "17"))
(rule "polySimp_mulComm0" (formula "17") (term "1,0"))
(rule "polySimp_rightDist" (formula "17") (term "1,0"))
(rule "mul_literals" (formula "17") (term "0,1,0"))
(rule "polySimp_addAssoc" (formula "17") (term "0"))
(rule "add_literals" (formula "17") (term "0,0"))
(rule "mod_axiom" (formula "17") (term "0,1,0"))
(rule "polySimp_mulLiterals" (formula "17") (term "1,0,1,0"))
(rule "polySimp_mulComm0" (formula "17") (term "1,0"))
(rule "polySimp_rightDist" (formula "17") (term "1,0"))
(rule "polySimp_mulLiterals" (formula "17") (term "1,1,0"))
(rule "polySimp_rightDist" (formula "17") (term "0,1,0"))
(rule "mul_literals" (formula "17") (term "0,0,1,0"))
(rule "polySimp_addAssoc" (formula "17") (term "0"))
(rule "polySimp_addAssoc" (formula "17") (term "0,0"))
(rule "add_literals" (formula "17") (term "0,0,0"))
(rule "inEqSimp_sepPosMonomial0" (formula "17"))
(rule "polySimp_mulComm0" (formula "17") (term "1"))
(rule "polySimp_rightDist" (formula "17") (term "1"))
(rule "polySimp_mulLiterals" (formula "17") (term "1,1"))
(rule "mul_literals" (formula "17") (term "0,1"))
(rule "polySimp_elimOne" (formula "17") (term "1,1"))
(rule "nnf_imp2or" (formula "15") (term "1,0"))
(rule "nnf_notAnd" (formula "15") (term "0,0"))
(rule "inEqSimp_notLeq" (formula "15") (term "1,0,0"))
(rule "polySimp_rightDist" (formula "15") (term "1,0,0,1,0,0"))
(rule "mul_literals" (formula "15") (term "0,1,0,0,1,0,0"))
(rule "polySimp_addAssoc" (formula "15") (term "0,0,1,0,0"))
(rule "add_literals" (formula "15") (term "0,0,0,1,0,0"))
(rule "add_zero_left" (formula "15") (term "0,0,1,0,0"))
(rule "inEqSimp_sepPosMonomial1" (formula "15") (term "1,0,0"))
(rule "polySimp_mulLiterals" (formula "15") (term "1,1,0,0"))
(rule "polySimp_elimOne" (formula "15") (term "1,1,0,0"))
(rule "inEqSimp_notGeq" (formula "15") (term "0,0,0"))
(rule "times_zero_1" (formula "15") (term "1,0,0,0,0,0"))
(rule "add_literals" (formula "15") (term "0,0,0,0,0"))
(rule "inEqSimp_sepPosMonomial0" (formula "15") (term "0,0,0"))
(rule "mul_literals" (formula "15") (term "1,0,0,0"))
(rule "Static_class_invariant_axiom_for_java_math_BigInteger" (formula "7"))
(rule "andLeft" (formula "7"))
(rule "notLeft" (formula "7"))
(rule "Static_class_invariant_axiom_for_de_polyas_core3_open_cred_CredentialGenerator" (formula "8"))
(rule "andLeft" (formula "8"))
(rule "andLeft" (formula "8"))
(rule "andLeft" (formula "8"))
(rule "notLeft" (formula "8"))
(rule "notLeft" (formula "8"))
(rule "Static_class_invariant_axiom_for_de_polyas_core3_open_cred_Crypto" (formula "10"))
(rule "insert_constant_string_value" (formula "10") (term "0,0,0,0") (ifseqformula "1"))
 (builtin "One Step Simplification" (formula "10"))
(rule "castDel" (formula "10") (term "0,0,0,0,0"))
(rule "andLeft" (formula "10"))
(rule "andLeft" (formula "10"))
(rule "notLeft" (formula "12"))
(rule "notLeft" (formula "11"))
(rule "notLeft" (formula "10"))
(rule "Class_invariant_axiom_for_org_apache_commons_csv_CSVRecord" (formula "10") (inst "i=i") (inst "i_0=i_0"))
(rule "expand_inInt" (formula "10") (term "1,0,0,1"))
(rule "expand_inInt" (formula "10") (term "1,0,0,1,0"))
(rule "replace_int_MAX" (formula "10") (term "1,0,1,0,0,1"))
(rule "replace_int_MIN" (formula "10") (term "0,1,1,0,0,1"))
(rule "replace_int_MIN" (formula "10") (term "0,1,1,0,0,1,0"))
(rule "replace_int_MAX" (formula "10") (term "1,0,1,0,0,1,0"))
(rule "andLeft" (formula "10"))
(rule "andLeft" (formula "10"))
(rule "eqSymm" (formula "10"))
(rule "castedGetAny" (formula "12") (term "0,0,1,0"))
(rule "castedGetAny" (formula "11") (term "0,0,1,0"))
(rule "inEqSimp_ltToLeq" (formula "12") (term "1,0,0,0"))
(rule "polySimp_mulComm0" (formula "12") (term "1,0,0,1,0,0,0"))
(rule "inEqSimp_ltToLeq" (formula "11") (term "1,0,0,0"))
(rule "polySimp_mulComm0" (formula "11") (term "1,0,0,1,0,0,0"))
(rule "inEqSimp_commuteLeq" (formula "12") (term "1,1,0,0"))
(rule "inEqSimp_commuteLeq" (formula "12") (term "0,0,0,0"))
(rule "inEqSimp_commuteLeq" (formula "11") (term "1,1,0,0"))
(rule "inEqSimp_commuteLeq" (formula "11") (term "0,0,0,0"))
(rule "applyEq" (formula "12") (term "0,1,0,0,1,0,0,0") (ifseqformula "10"))
(rule "inEqSimp_sepPosMonomial0" (formula "11") (term "1,0,0,0"))
(rule "polySimp_mulComm0" (formula "11") (term "1,1,0,0,0"))
(rule "polySimp_rightDist" (formula "11") (term "1,1,0,0,0"))
(rule "mul_literals" (formula "11") (term "0,1,1,0,0,0"))
(rule "polySimp_mulLiterals" (formula "11") (term "1,1,1,0,0,0"))
(rule "polySimp_elimOne" (formula "11") (term "1,1,1,0,0,0"))
(rule "inEqSimp_sepPosMonomial0" (formula "12") (term "1,0,0,0"))
(rule "polySimp_mulComm0" (formula "12") (term "1,1,0,0,0"))
(rule "polySimp_rightDist" (formula "12") (term "1,1,0,0,0"))
(rule "mul_literals" (formula "12") (term "0,1,1,0,0,0"))
(rule "polySimp_mulLiterals" (formula "12") (term "1,1,1,0,0,0"))
(rule "polySimp_elimOne" (formula "12") (term "1,1,1,0,0,0"))
(rule "nnf_imp2or" (formula "11") (term "0"))
(rule "nnf_imp2or" (formula "12") (term "0"))
(rule "nnf_notAnd" (formula "11") (term "0,0"))
(rule "nnf_notAnd" (formula "12") (term "0,0"))
(rule "Class_invariant_axiom_for_de_polyas_core3_open_cred_CredTool" (formula "13") (inst "i=i") (inst "i_0=i_0") (inst "i_1=i_1") (inst "i_2=i_2") (inst "i_3=i_3"))
(rule "insert_constant_string_value" (formula "13") (term "0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0") (ifseqformula "1"))
 (builtin "One Step Simplification" (formula "13"))
(rule "insert_constant_string_value" (formula "13") (term "0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0") (ifseqformula "1"))
 (builtin "One Step Simplification" (formula "13"))
(rule "insert_constant_string_value" (formula "13") (term "0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0") (ifseqformula "1"))
 (builtin "One Step Simplification" (formula "13"))
(rule "castDel" (formula "13") (term "0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0"))
(rule "castDel" (formula "13") (term "0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0"))
(rule "castDel" (formula "13") (term "0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0"))
(rule "andLeft" (formula "13"))
(rule "andLeft" (formula "13"))
(rule "andLeft" (formula "13"))
(rule "andLeft" (formula "13"))
(rule "andLeft" (formula "13"))
(rule "andLeft" (formula "13"))
(rule "andLeft" (formula "13"))
(rule "andLeft" (formula "13"))
(rule "notLeft" (formula "15"))
(rule "andLeft" (formula "13"))
(rule "notLeft" (formula "15"))
(rule "notLeft" (formula "14"))
(rule "andLeft" (formula "13"))
(rule "andLeft" (formula "13"))
(rule "notLeft" (formula "15"))
(rule "andLeft" (formula "13"))
(rule "notLeft" (formula "15"))
(rule "notLeft" (formula "14"))
(rule "andLeft" (formula "13"))
(rule "notLeft" (formula "14"))
(rule "andLeft" (formula "13"))
(rule "andLeft" (formula "13"))
(rule "notLeft" (formula "15"))
(rule "notLeft" (formula "14"))
(rule "andLeft" (formula "13"))
(rule "andLeft" (formula "13"))
(rule "notLeft" (formula "15"))
(rule "andLeft" (formula "13"))
(rule "notLeft" (formula "15"))
(rule "notLeft" (formula "14"))
(rule "andLeft" (formula "13"))
(rule "notLeft" (formula "14"))
(rule "andLeft" (formula "13"))
(rule "andLeft" (formula "13"))
(rule "notLeft" (formula "15"))
(rule "andLeft" (formula "13"))
(rule "notLeft" (formula "15"))
(rule "andLeft" (formula "13"))
(rule "notLeft" (formula "15"))
(rule "notLeft" (formula "14"))
(rule "notLeft" (formula "13"))
(rule "exLeft" (formula "18") (inst "sk=i_1"))
(rule "andLeft" (formula "18"))
(rule "andLeft" (formula "18"))
(rule "exLeft" (formula "15") (inst "sk=i_2_0"))
(rule "andLeft" (formula "15"))
(rule "andLeft" (formula "15"))
(rule "castedGetAny" (formula "19") (term "0,0,1,0"))
(rule "castedGetAny" (formula "18") (term "0,0,1,0"))
(rule "castedGetAny" (formula "14") (term "0,0,1,0"))
(rule "inEqSimp_ltToLeq" (formula "19") (term "1,0,0"))
(rule "polySimp_mulComm0" (formula "19") (term "1,0,0,1,0,0"))
(rule "inEqSimp_ltToLeq" (formula "18") (term "1,0,0"))
(rule "polySimp_mulComm0" (formula "18") (term "1,0,0,1,0,0"))
(rule "inEqSimp_ltToLeq" (formula "14") (term "1,0,0"))
(rule "polySimp_mulComm0" (formula "14") (term "1,0,0,1,0,0"))
(rule "castedGetAny" (formula "22") (term "0"))
(rule "castedGetAny" (formula "17") (term "0"))
(rule "inEqSimp_commuteLeq" (formula "19") (term "0,0,0"))
(rule "inEqSimp_commuteLeq" (formula "18") (term "0,0,0"))
(rule "inEqSimp_ltToLeq" (formula "21"))
(rule "polySimp_mulComm0" (formula "21") (term "1,0,0"))
(rule "polySimp_addComm1" (formula "21") (term "0"))
(rule "inEqSimp_commuteLeq" (formula "14") (term "0,0,0"))
(rule "inEqSimp_ltToLeq" (formula "16"))
(rule "polySimp_mulComm0" (formula "16") (term "1,0,0"))
(rule "polySimp_addComm1" (formula "16") (term "0"))
(rule "inEqSimp_commuteLeq" (formula "20"))
(rule "inEqSimp_commuteLeq" (formula "15"))
(rule "inEqSimp_sepPosMonomial0" (formula "19") (term "1,0,0"))
(rule "polySimp_mulComm0" (formula "19") (term "1,1,0,0"))
(rule "polySimp_rightDist" (formula "19") (term "1,1,0,0"))
(rule "mul_literals" (formula "19") (term "0,1,1,0,0"))
(rule "polySimp_mulLiterals" (formula "19") (term "1,1,1,0,0"))
(rule "polySimp_elimOne" (formula "19") (term "1,1,1,0,0"))
(rule "inEqSimp_sepPosMonomial0" (formula "18") (term "1,0,0"))
(rule "polySimp_mulComm0" (formula "18") (term "1,1,0,0"))
(rule "polySimp_rightDist" (formula "18") (term "1,1,0,0"))
(rule "mul_literals" (formula "18") (term "0,1,1,0,0"))
(rule "polySimp_mulLiterals" (formula "18") (term "1,1,1,0,0"))
(rule "polySimp_elimOne" (formula "18") (term "1,1,1,0,0"))
(rule "inEqSimp_sepPosMonomial0" (formula "14") (term "1,0,0"))
(rule "polySimp_mulComm0" (formula "14") (term "1,1,0,0"))
(rule "polySimp_rightDist" (formula "14") (term "1,1,0,0"))
(rule "mul_literals" (formula "14") (term "0,1,1,0,0"))
(rule "polySimp_mulLiterals" (formula "14") (term "1,1,1,0,0"))
(rule "polySimp_elimOne" (formula "14") (term "1,1,1,0,0"))
(rule "inEqSimp_sepNegMonomial0" (formula "21"))
(rule "polySimp_mulLiterals" (formula "21") (term "0"))
(rule "polySimp_elimOne" (formula "21") (term "0"))
(rule "inEqSimp_sepNegMonomial0" (formula "16"))
(rule "polySimp_mulLiterals" (formula "16") (term "0"))
(rule "polySimp_elimOne" (formula "16") (term "0"))
(rule "Static_class_invariant_axiom_for_de_polyas_core3_open_crypto_basic_Hashes" (formula "27"))
(rule "nonNull" (formula "27") (inst "i=i"))
(rule "sub_literals" (formula "27") (term "2,1,0,1,1"))
 (builtin "One Step Simplification" (formula "27"))
(rule "greater_literals" (formula "27") (term "0,1"))
 (builtin "One Step Simplification" (formula "27"))
(rule "andLeft" (formula "27"))
(rule "notLeft" (formula "27"))
(rule "narrowSelectArrayType" (formula "27") (term "0,0,1,0") (ifseqformula "1") (ifseqformula "31"))
(rule "inEqSimp_ltToLeq" (formula "27") (term "1,0,0"))
(rule "polySimp_mulComm0" (formula "27") (term "1,0,0,1,0,0"))
(rule "inEqSimp_commuteLeq" (formula "27") (term "0,0,0"))
(rule "inEqSimp_sepPosMonomial0" (formula "27") (term "1,0,0"))
(rule "polySimp_mulComm0" (formula "27") (term "1,1,0,0"))
(rule "polySimp_rightDist" (formula "27") (term "1,1,0,0"))
(rule "mul_literals" (formula "27") (term "0,1,1,0,0"))
(rule "polySimp_mulLiterals" (formula "27") (term "1,1,1,0,0"))
(rule "polySimp_elimOne" (formula "27") (term "1,1,1,0,0"))
(rule "nnf_notAnd" (formula "11") (term "1,0,0"))
(rule "inEqSimp_notGeq" (formula "11") (term "1,1,0,0"))
(rule "mul_literals" (formula "11") (term "1,0,0,1,1,0,0"))
(rule "add_literals" (formula "11") (term "0,0,1,1,0,0"))
(rule "inEqSimp_sepPosMonomial0" (formula "11") (term "1,1,0,0"))
(rule "mul_literals" (formula "11") (term "1,1,1,0,0"))
(rule "inEqSimp_notLeq" (formula "11") (term "0,1,0,0"))
(rule "mul_literals" (formula "11") (term "1,0,0,0,1,0,0"))
(rule "add_literals" (formula "11") (term "0,0,0,1,0,0"))
(rule "inEqSimp_sepPosMonomial1" (formula "11") (term "0,1,0,0"))
(rule "mul_literals" (formula "11") (term "1,0,1,0,0"))
(rule "nnf_notAnd" (formula "11") (term "0,0,0"))
(rule "inEqSimp_notGeq" (formula "11") (term "0,0,0,0"))
(rule "mul_literals" (formula "11") (term "1,0,0,0,0,0,0"))
(rule "add_zero_right" (formula "11") (term "0,0,0,0,0,0"))
(rule "inEqSimp_sepPosMonomial0" (formula "11") (term "0,0,0,0"))
(rule "mul_literals" (formula "11") (term "1,0,0,0,0"))
(rule "inEqSimp_notLeq" (formula "11") (term "1,0,0,0"))
(rule "polySimp_rightDist" (formula "11") (term "1,0,0,1,0,0,0"))
(rule "mul_literals" (formula "11") (term "0,1,0,0,1,0,0,0"))
(rule "polySimp_addAssoc" (formula "11") (term "0,0,1,0,0,0"))
(rule "add_literals" (formula "11") (term "0,0,0,1,0,0,0"))
(rule "add_zero_left" (formula "11") (term "0,0,1,0,0,0"))
(rule "inEqSimp_sepPosMonomial1" (formula "11") (term "1,0,0,0"))
(rule "polySimp_mulLiterals" (formula "11") (term "1,1,0,0,0"))
(rule "polySimp_elimOne" (formula "11") (term "1,1,0,0,0"))
(rule "nnf_notAnd" (formula "12") (term "1,0,0"))
(rule "inEqSimp_notGeq" (formula "12") (term "1,1,0,0"))
(rule "mul_literals" (formula "12") (term "1,0,0,1,1,0,0"))
(rule "add_literals" (formula "12") (term "0,0,1,1,0,0"))
(rule "inEqSimp_sepPosMonomial0" (formula "12") (term "1,1,0,0"))
(rule "mul_literals" (formula "12") (term "1,1,1,0,0"))
(rule "inEqSimp_notLeq" (formula "12") (term "0,1,0,0"))
(rule "mul_literals" (formula "12") (term "1,0,0,0,1,0,0"))
(rule "add_literals" (formula "12") (term "0,0,0,1,0,0"))
(rule "inEqSimp_sepPosMonomial1" (formula "12") (term "0,1,0,0"))
(rule "mul_literals" (formula "12") (term "1,0,1,0,0"))
(rule "nnf_notAnd" (formula "12") (term "0,0,0"))
(rule "inEqSimp_notGeq" (formula "12") (term "0,0,0,0"))
(rule "times_zero_1" (formula "12") (term "1,0,0,0,0,0,0"))
(rule "add_literals" (formula "12") (term "0,0,0,0,0,0"))
(rule "inEqSimp_sepPosMonomial0" (formula "12") (term "0,0,0,0"))
(rule "mul_literals" (formula "12") (term "1,0,0,0,0"))
(rule "inEqSimp_notLeq" (formula "12") (term "1,0,0,0"))
(rule "polySimp_rightDist" (formula "12") (term "1,0,0,1,0,0,0"))
(rule "mul_literals" (formula "12") (term "0,1,0,0,1,0,0,0"))
(rule "polySimp_addAssoc" (formula "12") (term "0,0,1,0,0,0"))
(rule "add_literals" (formula "12") (term "0,0,0,1,0,0,0"))
(rule "add_zero_left" (formula "12") (term "0,0,1,0,0,0"))
(rule "inEqSimp_sepPosMonomial1" (formula "12") (term "1,0,0,0"))
(rule "polySimp_mulLiterals" (formula "12") (term "1,1,0,0,0"))
(rule "polySimp_elimOne" (formula "12") (term "1,1,0,0,0"))
(rule "nnf_imp2or" (formula "19") (term "0"))
(rule "nnf_imp2or" (formula "18") (term "0"))
(rule "nnf_imp2or" (formula "14") (term "0"))
(rule "nnf_imp2or" (formula "27") (term "0"))
(rule "nnf_notAnd" (formula "19") (term "0,0"))
(rule "inEqSimp_notGeq" (formula "19") (term "0,0,0"))
(rule "times_zero_1" (formula "19") (term "1,0,0,0,0,0"))
(rule "add_literals" (formula "19") (term "0,0,0,0,0"))
(rule "inEqSimp_sepPosMonomial0" (formula "19") (term "0,0,0"))
(rule "mul_literals" (formula "19") (term "1,0,0,0"))
(rule "inEqSimp_notLeq" (formula "19") (term "1,0,0"))
(rule "polySimp_rightDist" (formula "19") (term "1,0,0,1,0,0"))
(rule "mul_literals" (formula "19") (term "0,1,0,0,1,0,0"))
(rule "polySimp_addAssoc" (formula "19") (term "0,0,1,0,0"))
(rule "add_literals" (formula "19") (term "0,0,0,1,0,0"))
(rule "add_zero_left" (formula "19") (term "0,0,1,0,0"))
(rule "inEqSimp_sepPosMonomial1" (formula "19") (term "1,0,0"))
(rule "polySimp_mulLiterals" (formula "19") (term "1,1,0,0"))
(rule "polySimp_elimOne" (formula "19") (term "1,1,0,0"))
(rule "nnf_notAnd" (formula "18") (term "0,0"))
(rule "inEqSimp_notGeq" (formula "18") (term "0,0,0"))
(rule "times_zero_1" (formula "18") (term "1,0,0,0,0,0"))
(rule "add_literals" (formula "18") (term "0,0,0,0,0"))
(rule "inEqSimp_sepPosMonomial0" (formula "18") (term "0,0,0"))
(rule "mul_literals" (formula "18") (term "1,0,0,0"))
(rule "inEqSimp_notLeq" (formula "18") (term "1,0,0"))
(rule "polySimp_rightDist" (formula "18") (term "1,0,0,1,0,0"))
(rule "mul_literals" (formula "18") (term "0,1,0,0,1,0,0"))
(rule "polySimp_addAssoc" (formula "18") (term "0,0,1,0,0"))
(rule "add_literals" (formula "18") (term "0,0,0,1,0,0"))
(rule "add_zero_left" (formula "18") (term "0,0,1,0,0"))
(rule "inEqSimp_sepPosMonomial1" (formula "18") (term "1,0,0"))
(rule "polySimp_mulLiterals" (formula "18") (term "1,1,0,0"))
(rule "polySimp_elimOne" (formula "18") (term "1,1,0,0"))
(rule "nnf_notAnd" (formula "14") (term "0,0"))
(rule "inEqSimp_notGeq" (formula "14") (term "0,0,0"))
(rule "mul_literals" (formula "14") (term "1,0,0,0,0,0"))
(rule "add_zero_right" (formula "14") (term "0,0,0,0,0"))
(rule "inEqSimp_sepPosMonomial0" (formula "14") (term "0,0,0"))
(rule "mul_literals" (formula "14") (term "1,0,0,0"))
(rule "inEqSimp_notLeq" (formula "14") (term "1,0,0"))
(rule "polySimp_rightDist" (formula "14") (term "1,0,0,1,0,0"))
(rule "mul_literals" (formula "14") (term "0,1,0,0,1,0,0"))
(rule "polySimp_addAssoc" (formula "14") (term "0,0,1,0,0"))
(rule "add_literals" (formula "14") (term "0,0,0,1,0,0"))
(rule "add_zero_left" (formula "14") (term "0,0,1,0,0"))
(rule "inEqSimp_sepPosMonomial1" (formula "14") (term "1,0,0"))
(rule "polySimp_mulLiterals" (formula "14") (term "1,1,0,0"))
(rule "polySimp_elimOne" (formula "14") (term "1,1,0,0"))
(rule "nnf_notAnd" (formula "27") (term "0,0"))
(rule "inEqSimp_notGeq" (formula "27") (term "0,0,0"))
(rule "times_zero_1" (formula "27") (term "1,0,0,0,0,0"))
(rule "add_zero_right" (formula "27") (term "0,0,0,0,0"))
(rule "inEqSimp_sepPosMonomial0" (formula "27") (term "0,0,0"))
(rule "mul_literals" (formula "27") (term "1,0,0,0"))
(rule "inEqSimp_notLeq" (formula "27") (term "1,0,0"))
(rule "polySimp_rightDist" (formula "27") (term "1,0,0,1,0,0"))
(rule "mul_literals" (formula "27") (term "0,1,0,0,1,0,0"))
(rule "polySimp_addAssoc" (formula "27") (term "0,0,1,0,0"))
(rule "add_literals" (formula "27") (term "0,0,0,1,0,0"))
(rule "add_zero_left" (formula "27") (term "0,0,1,0,0"))
(rule "inEqSimp_sepPosMonomial1" (formula "27") (term "1,0,0"))
(rule "polySimp_mulLiterals" (formula "27") (term "1,1,0,0"))
(rule "polySimp_elimOne" (formula "27") (term "1,1,0,0"))
(rule "Class_invariant_axiom_for_java_security_SecureRandom" (formula "9"))
(rule "true_left" (formula "9"))
(rule "Class_invariant_axiom_for_de_polyas_core3_open_crypto_groups_ECGroup" (formula "8"))
(rule "andLeft" (formula "8"))
(rule "andLeft" (formula "8"))
(rule "andLeft" (formula "10"))
(rule "notLeft" (formula "8"))
(rule "notLeft" (formula "8"))
(rule "commute_or" (formula "13"))
(rule "methodBodyExpand" (formula "61") (term "1") (newnames "heapBefore_generateDataForVoter,savedHeapBefore_generateDataForVoter"))
 (builtin "One Step Simplification" (formula "61"))
(rule "charLiteral_to_int" (formula "26") (term "1,1,1,0,1,1,0"))
(rule "add_literals" (formula "26") (term "1,1,0,1,1,0"))
(rule "seqGetAlphaCast" (formula "25") (term "0"))
(rule "castedGetAny" (formula "25") (term "0"))
 (builtin "One Step Simplification" (formula "25"))
(rule "true_left" (formula "25"))
(rule "div_axiom" (formula "30") (term "0,1,1") (inst "quotient=quotient_0"))
(rule "equal_literals" (formula "30") (term "0"))
 (builtin "One Step Simplification" (formula "30"))
(rule "qeq_literals" (formula "30") (term "0,1"))
 (builtin "One Step Simplification" (formula "30"))
(rule "mul_literals" (formula "30") (term "1,1,1"))
(rule "andLeft" (formula "30"))
(rule "andLeft" (formula "30"))
(rule "polySimp_addAssoc" (formula "32") (term "0,1"))
(rule "add_literals" (formula "32") (term "0,0,1"))
(rule "polySimp_addComm1" (formula "32") (term "1"))
(rule "add_literals" (formula "32") (term "0,1"))
(rule "inEqSimp_homoInEq0" (formula "31"))
(rule "polySimp_mulLiterals" (formula "31") (term "1,0"))
(rule "polySimp_addComm1" (formula "31") (term "0"))
(rule "inEqSimp_homoInEq1" (formula "32"))
(rule "polySimp_mulLiterals" (formula "32") (term "1,0"))
(rule "polySimp_addComm1" (formula "32") (term "0"))
(rule "applyEq" (formula "33") (term "0,1,1") (ifseqformula "30"))
(rule "polySimp_addComm1" (formula "33") (term "1"))
(rule "applyEq" (formula "28") (term "0,0") (ifseqformula "30"))
(rule "inEqSimp_homoInEq0" (formula "28"))
(rule "polySimp_mulLiterals" (formula "28") (term "1,0"))
(rule "polySimp_addComm1" (formula "28") (term "0"))
(rule "inEqSimp_sepPosMonomial1" (formula "31"))
(rule "polySimp_mulComm0" (formula "31") (term "1"))
(rule "polySimp_rightDist" (formula "31") (term "1"))
(rule "polySimp_mulLiterals" (formula "31") (term "1,1"))
(rule "mul_literals" (formula "31") (term "0,1"))
(rule "inEqSimp_sepPosMonomial0" (formula "32"))
(rule "polySimp_mulComm0" (formula "32") (term "1"))
(rule "polySimp_rightDist" (formula "32") (term "1"))
(rule "polySimp_mulLiterals" (formula "32") (term "1,1"))
(rule "mul_literals" (formula "32") (term "0,1"))
(rule "inEqSimp_sepPosMonomial1" (formula "28"))
(rule "polySimp_mulComm0" (formula "28") (term "1"))
(rule "polySimp_rightDist" (formula "28") (term "1"))
(rule "polySimp_mulLiterals" (formula "28") (term "1,1"))
(rule "mul_literals" (formula "28") (term "0,1"))
(rule "inEqSimp_subsumption1" (formula "31") (ifseqformula "28"))
(rule "inEqSimp_homoInEq0" (formula "31") (term "0"))
(rule "polySimp_mulComm0" (formula "31") (term "1,0,0"))
(rule "polySimp_rightDist" (formula "31") (term "1,0,0"))
(rule "mul_literals" (formula "31") (term "0,1,0,0"))
(rule "polySimp_mulLiterals" (formula "31") (term "1,1,0,0"))
(rule "polySimp_addAssoc" (formula "31") (term "0,0"))
(rule "polySimp_addComm1" (formula "31") (term "0,0,0"))
(rule "add_literals" (formula "31") (term "0,0,0,0"))
(rule "polySimp_pullOutFactor0b" (formula "31") (term "0,0"))
(rule "add_literals" (formula "31") (term "1,1,0,0"))
(rule "times_zero_1" (formula "31") (term "1,0,0"))
(rule "add_literals" (formula "31") (term "0,0"))
(rule "qeq_literals" (formula "31") (term "0"))
 (builtin "One Step Simplification" (formula "31"))
(rule "true_left" (formula "31"))
(rule "inEqSimp_exactShadow3" (formula "29") (ifseqformula "32"))
(rule "times_zero_1" (formula "29") (term "0,0"))
(rule "add_zero_left" (formula "29") (term "0"))
(rule "inEqSimp_sepPosMonomial1" (formula "29"))
(rule "polySimp_mulComm0" (formula "29") (term "1"))
(rule "polySimp_rightDist" (formula "29") (term "1"))
(rule "mul_literals" (formula "29") (term "0,1"))
(rule "polySimp_mulLiterals" (formula "29") (term "1,1"))
(rule "lenNonNegative" (formula "24") (term "0"))
(rule "inEqSimp_commuteLeq" (formula "24"))
(rule "commute_or_2" (formula "11") (term "0,0"))
(rule "commute_or_2" (formula "19") (term "0"))
(rule "commute_or_2" (formula "12") (term "0,0"))
(rule "commute_or_2" (formula "18") (term "0"))
(rule "commute_or_2" (formula "14") (term "0"))
(rule "Class_invariant_axiom_for_org_bouncycastle_math_ec_custom_sec_SecP256K1Curve" (formula "8"))
(rule "true_left" (formula "8"))
(rule "Class_invariant_axiom_for_org_bouncycastle_jce_spec_ECNamedCurveParameterSpec" (formula "8"))
(rule "andLeft" (formula "8"))
(rule "notLeft" (formula "8"))
(rule "commute_or_2" (formula "27") (term "0"))
(rule "lenNonNegative" (formula "9") (term "0"))
(rule "inEqSimp_commuteLeq" (formula "9"))
(rule "applyEq" (formula "9") (term "0") (ifseqformula "10"))
(rule "Class_invariant_axiom_for_org_bouncycastle_math_ec_ECPoint" (formula "8"))
(rule "true_left" (formula "8"))
(rule "commute_or" (formula "17") (term "0,0"))
(rule "commute_or" (formula "16") (term "0,0"))
(rule "commute_or" (formula "12") (term "0,0"))
(rule "commute_or" (formula "26") (term "0,0"))
(rule "commute_or" (formula "9") (term "1,0,0,0"))
(rule "shift_paren_or" (formula "10") (term "0,0,0"))
(rule "commute_or_2" (formula "10") (term "0"))
(rule "commute_or_2" (formula "10") (term "0,0"))
(rule "commute_or_2" (formula "10") (term "0,0,0"))
(rule "commute_or_2" (formula "10") (term "0,0"))
(rule "seqGetAlphaCast" (formula "20") (term "0"))
(rule "castedGetAny" (formula "20") (term "0"))
 (builtin "One Step Simplification" (formula "20"))
(rule "true_left" (formula "20"))
(rule "seqGetAlphaCast" (formula "15") (term "0"))
(rule "castedGetAny" (formula "15") (term "0"))
 (builtin "One Step Simplification" (formula "15"))
(rule "true_left" (formula "15"))
(rule "shift_paren_or" (formula "9") (term "0,0,0"))
(rule "commute_or_2" (formula "9") (term "0"))
(rule "commute_or_2" (formula "9") (term "0,0"))
(rule "commute_or_2" (formula "9") (term "0,0,0"))
(rule "commute_or" (formula "10") (term "0,0,0,0"))
(rule "commute_or_2" (formula "10") (term "0,0,0"))
(rule "inEqSimp_or_subsumption1" (formula "10") (term "0,0,0"))
(rule "qeq_literals" (formula "10") (term "0,1,0,0,0,0"))
 (builtin "One Step Simplification" (formula "10"))
(rule "commute_or" (formula "9") (term "0,0,0,0"))
(rule "commute_or_2" (formula "9") (term "0,0,0"))
(rule "inEqSimp_or_subsumption1" (formula "9") (term "0,0,0"))
(rule "qeq_literals" (formula "9") (term "0,1,0,0,0,0"))
 (builtin "One Step Simplification" (formula "9"))
(rule "lenNonNegative" (formula "19") (term "0"))
(rule "inEqSimp_commuteLeq" (formula "19"))
(rule "lenNonNegative" (formula "14") (term "0"))
(rule "inEqSimp_commuteLeq" (formula "14"))
(rule "ex_pull_out3" (formula "27") (term "1,0"))
 (builtin "Use Operation Contract" (formula "65") (newnames "heapBefore_printStatus,exc_2514,heapAfter_printStatus,anon_heap_printStatus") (contract "de.polyas.core3.open.cred.CredTool[de.polyas.core3.open.cred.CredTool::printStatus()].JML normal_behavior operation contract.0"))
(branch "Post (printStatus)"
    (builtin "One Step Simplification" (formula "35"))
    (builtin "One Step Simplification" (formula "67"))
   (rule "andLeft" (formula "35"))
   (rule "andLeft" (formula "36"))
   (rule "andLeft" (formula "37"))
   (rule "notLeft" (formula "37"))
   (rule "variableDeclarationFinalAssign" (formula "69") (term "1"))
   (rule "variableDeclarationFinal" (formula "69") (term "1") (newnames "voterId_203"))
   (rule "pullOutSelect" (formula "37") (term "0") (inst "selectSK=de_polyas_core3_open_cred_CredTool_print_0"))
   (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "36"))
    (builtin "One Step Simplification" (formula "1"))
   (rule "elementOfSingleton" (formula "1") (term "0,0"))
    (builtin "One Step Simplification" (formula "1"))
   (rule "applyEqReverse" (formula "38") (term "0") (ifseqformula "1"))
   (rule "hideAuxiliaryEq" (formula "1"))
   (rule "cnf_rightDist" (formula "27") (term "0,1,0"))
   (rule "commute_or" (formula "27") (term "1,0,1,0"))
   (rule "cnf_rightDist" (formula "27") (term "0,0,1,0"))
   (rule "commute_or" (formula "27") (term "1,0,0,1,0"))
   (rule "onlyCreatedObjectsAreReferenced" (formula "26") (term "1") (ifseqformula "1"))
   (rule "replace_known_right" (formula "26") (term "0") (ifseqformula "53"))
    (builtin "One Step Simplification" (formula "26"))
   (rule "ex_pull_out3" (formula "28") (term "0"))
   (rule "cnf_rightDist" (formula "28") (term "0,0"))
   (rule "commute_or_2" (formula "28") (term "1,0,0"))
   (rule "shift_paren_or" (formula "28") (term "0,1,0,0"))
   (rule "cnf_rightDist" (formula "28") (term "0,0,0"))
   (rule "commute_or_2" (formula "28") (term "1,0,0,0"))
   (rule "shift_paren_or" (formula "28") (term "0,0,0,0"))
   (rule "commute_or_2" (formula "28") (term "0,0,0,0,0"))
   (rule "shift_paren_or" (formula "28") (term "0,1,0,0,0"))
   (rule "commute_or" (formula "28") (term "0,0,0,0,0,0"))
   (rule "arrayLengthNotNegative" (formula "32") (term "1,0,0"))
   (rule "inEqSimp_exactShadow3" (formula "32") (ifseqformula "34"))
   (rule "times_zero_1" (formula "32") (term "0,0"))
   (rule "add_zero_left" (formula "32") (term "0"))
   (rule "inEqSimp_sepPosMonomial1" (formula "32"))
   (rule "mul_literals" (formula "32") (term "1"))
   (rule "elimGcdGeq_antec" (formula "32") (inst "elimGcdRightDiv=Z(0(#))") (inst "elimGcdLeftDiv=quotient_0") (inst "elimGcd=Z(6(9(2(7(6(9(4(9(2(4(#)))))))))))"))
   (rule "leq_literals" (formula "32") (term "0,0"))
    (builtin "One Step Simplification" (formula "32"))
   (rule "times_zero_1" (formula "32") (term "1,0,0,0,0,0"))
   (rule "polySimp_mulLiterals" (formula "32") (term "1,0,0"))
   (rule "polySimp_addLiterals" (formula "32") (term "0,0,0,0"))
   (rule "add_literals" (formula "32") (term "0,0,0,0"))
   (rule "polySimp_pullOutFactor0b" (formula "32") (term "0,0"))
   (rule "add_literals" (formula "32") (term "1,1,0,0"))
   (rule "times_zero_1" (formula "32") (term "1,0,0"))
   (rule "add_zero_right" (formula "32") (term "0,0"))
   (rule "leq_literals" (formula "32") (term "0"))
    (builtin "One Step Simplification" (formula "32"))
   (rule "arrayLengthIsAnInt" (formula "34") (term "1,0,0"))
   (rule "expand_inInt" (formula "34"))
   (rule "replace_int_MAX" (formula "34") (term "1,0"))
   (rule "replace_int_MIN" (formula "34") (term "0,1"))
   (rule "andLeft" (formula "34"))
   (rule "inEqSimp_commuteLeq" (formula "35"))
   (rule "inEqSimp_subsumption1" (formula "35") (ifseqformula "33"))
   (rule "leq_literals" (formula "35") (term "0"))
    (builtin "One Step Simplification" (formula "35"))
   (rule "true_left" (formula "35"))
   (rule "inEqSimp_exactShadow3" (formula "30") (ifseqformula "34"))
   (rule "polySimp_rightDist" (formula "30") (term "0,0"))
   (rule "mul_literals" (formula "30") (term "0,0,0"))
   (rule "polySimp_mulLiterals" (formula "30") (term "1,0,0"))
   (rule "polySimp_addComm1" (formula "30") (term "0"))
   (rule "add_literals" (formula "30") (term "0,0"))
   (rule "inEqSimp_sepNegMonomial1" (formula "30"))
   (rule "polySimp_mulLiterals" (formula "30") (term "0"))
   (rule "elimGcdLeq_antec" (formula "30") (inst "elimGcdRightDiv=Z(0(#))") (inst "elimGcdLeftDiv=quotient_0") (inst "elimGcd=Z(6(9(2(7(6(9(4(9(2(4(#)))))))))))"))
   (rule "neg_literal" (formula "30") (term "0,0,0,0,0,1,0"))
   (rule "times_zero_1" (formula "30") (term "1,0,0,0,0,1,0"))
   (rule "polySimp_mulLiterals" (formula "30") (term "1,0,1,0"))
   (rule "leq_literals" (formula "30") (term "0,0"))
    (builtin "One Step Simplification" (formula "30"))
   (rule "polySimp_addLiterals" (formula "30") (term "0,0,0,0"))
   (rule "add_literals" (formula "30") (term "0,0,0,0"))
   (rule "polySimp_pullOutFactor0b" (formula "30") (term "0,0"))
   (rule "add_literals" (formula "30") (term "1,1,0,0"))
   (rule "times_zero_1" (formula "30") (term "1,0,0"))
   (rule "add_zero_right" (formula "30") (term "0,0"))
   (rule "qeq_literals" (formula "30") (term "0"))
    (builtin "One Step Simplification" (formula "30"))
   (rule "inEqSimp_antiSymm" (formula "33") (ifseqformula "30"))
   (rule "applyEq" (formula "31") (term "0,1,1") (ifseqformula "33"))
   (rule "times_zero_2" (formula "31") (term "1,1"))
   (rule "add_zero_right" (formula "31") (term "1"))
   (rule "applyEq" (formula "34") (term "0") (ifseqformula "33"))
   (rule "qeq_literals" (formula "34"))
   (rule "true_left" (formula "34"))
   (rule "applyEqRigid" (formula "30") (term "0") (ifseqformula "33"))
   (rule "leq_literals" (formula "30"))
   (rule "true_left" (formula "30"))
   (rule "applyEq" (formula "36") (term "0,1,1") (ifseqformula "32"))
   (rule "mul_literals" (formula "36") (term "1,1"))
   (rule "add_zero_right" (formula "36") (term "1"))
   (rule "applyEq" (formula "37") (term "0,1,0,1") (ifseqformula "32"))
   (rule "times_zero_2" (formula "37") (term "1,0,1"))
   (rule "add_zero_right" (formula "37") (term "0,1"))
   (rule "applyEq" (formula "35") (term "1") (ifseqformula "32"))
   (rule "inEqSimp_subsumption1" (formula "33") (ifseqformula "30"))
   (rule "leq_literals" (formula "33") (term "0"))
    (builtin "One Step Simplification" (formula "33"))
   (rule "true_left" (formula "33"))
   (rule "inEqSimp_subsumption0" (formula "35") (ifseqformula "33"))
   (rule "leq_literals" (formula "35") (term "0"))
    (builtin "One Step Simplification" (formula "35"))
   (rule "true_left" (formula "35"))
   (rule "inEqSimp_exactShadow3" (formula "31") (ifseqformula "35"))
   (rule "times_zero_1" (formula "31") (term "0,0"))
   (rule "add_zero_left" (formula "31") (term "0"))
   (rule "inEqSimp_sepPosMonomial1" (formula "31"))
   (rule "mul_literals" (formula "31") (term "1"))
   (rule "methodCallWithAssignmentUnfoldArguments" (formula "71") (term "1"))
   (rule "variableDeclarationAssign" (formula "71") (term "1"))
   (rule "variableDeclaration" (formula "71") (term "1") (newnames "var"))
   (rule "assignment" (formula "71") (term "1"))
    (builtin "One Step Simplification" (formula "71"))
   (rule "variableDeclarationAssign" (formula "71") (term "1"))
   (rule "variableDeclaration" (formula "71") (term "1") (newnames "var_1"))
   (rule "assignment_read_attribute_this" (formula "71") (term "1"))
    (builtin "One Step Simplification" (formula "71"))
   (rule "pullOutSelect" (formula "71") (term "0,1,0") (inst "selectSK=de_polyas_core3_open_cred_CredTool_idCol_0"))
   (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "38"))
    (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "71")) (ifInst ""  (formula "3")))
   (rule "elementOfSingleton" (formula "1") (term "0,0"))
    (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "71")))
   (rule "applyEqReverse" (formula "72") (term "0,1,0") (ifseqformula "1"))
   (rule "hideAuxiliaryEq" (formula "1"))
   (rule "commute_and_2" (formula "28") (term "0,0"))
   (rule "lenNonNegative" (formula "18") (term "1,1,0"))
   (rule "inEqSimp_commuteLeq" (formula "18"))
   (rule "onlyCreatedObjectsAreReferenced" (formula "65") (term "0") (ifseqformula "1"))
   (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "66"))
    (builtin "One Step Simplification" (formula "1"))
   (rule "onlyCreatedObjectsAreReferenced" (formula "65") (term "0") (ifseqformula "2"))
   (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "66"))
    (builtin "One Step Simplification" (formula "1"))
   (rule "onlyCreatedObjectsAreReferenced" (formula "68") (term "0") (ifseqformula "3"))
   (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "69"))
    (builtin "One Step Simplification" (formula "1"))
   (rule "onlyCreatedObjectsAreReferenced" (formula "70") (term "0") (ifseqformula "4"))
   (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "71"))
    (builtin "One Step Simplification" (formula "1"))
   (rule "onlyCreatedObjectsAreReferenced" (formula "72") (term "0") (ifseqformula "5"))
   (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "73"))
    (builtin "One Step Simplification" (formula "1"))
   (rule "onlyCreatedObjectsAreReferenced" (formula "67") (term "0") (ifseqformula "6"))
   (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "68"))
    (builtin "One Step Simplification" (formula "1"))
   (rule "onlyCreatedObjectsAreReferenced" (formula "59") (term "0") (ifseqformula "7"))
   (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "60"))
    (builtin "One Step Simplification" (formula "1"))
   (rule "onlyCreatedObjectsAreReferenced" (formula "53") (term "0") (ifseqformula "8"))
   (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "54"))
    (builtin "One Step Simplification" (formula "1"))
   (rule "onlyCreatedObjectsAreReferenced" (formula "59") (term "0") (ifseqformula "9"))
   (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "60"))
    (builtin "One Step Simplification" (formula "1"))
   (rule "onlyCreatedObjectsAreReferenced" (formula "61") (term "0") (ifseqformula "10"))
   (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "62"))
    (builtin "One Step Simplification" (formula "1"))
   (rule "onlyCreatedObjectsAreReferenced" (formula "57") (term "0") (ifseqformula "11"))
   (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "58"))
    (builtin "One Step Simplification" (formula "1"))
   (rule "onlyCreatedObjectsAreReferenced" (formula "67") (term "0") (ifseqformula "12"))
   (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "68"))
    (builtin "One Step Simplification" (formula "1"))
   (rule "onlyCreatedObjectsAreReferenced" (formula "72") (term "0") (ifseqformula "13"))
   (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "73"))
    (builtin "One Step Simplification" (formula "1"))
   (rule "onlyCreatedObjectsAreReferenced" (formula "67") (term "0") (ifseqformula "14"))
   (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "68"))
    (builtin "One Step Simplification" (formula "1"))
   (rule "onlyCreatedObjectsAreReferenced" (formula "71") (term "0") (ifseqformula "15"))
   (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "72"))
    (builtin "One Step Simplification" (formula "1"))
   (rule "onlyCreatedObjectsAreReferenced" (formula "73") (term "0") (ifseqformula "16"))
   (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "74"))
    (builtin "One Step Simplification" (formula "1"))
   (rule "onlyCreatedObjectsAreReferenced" (formula "75") (term "0") (ifseqformula "17"))
   (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "76"))
    (builtin "One Step Simplification" (formula "1"))
   (rule "onlyCreatedObjectsAreReferenced" (formula "78") (term "0") (ifseqformula "18"))
   (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "79"))
    (builtin "One Step Simplification" (formula "1"))
   (rule "onlyCreatedObjectsAreReferenced" (formula "63") (term "0") (ifseqformula "19"))
   (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "64"))
    (builtin "One Step Simplification" (formula "1"))
   (rule "onlyCreatedObjectsAreReferenced" (formula "63") (term "0") (ifseqformula "20"))
   (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "64"))
    (builtin "One Step Simplification" (formula "1"))
    (builtin "Use Operation Contract" (formula "92") (newnames "heapBefore_get,result_1898,exc_2515") (contract "org.apache.commons.csv.CSVRecord[org.apache.commons.csv.CSVRecord::get(java.lang.String)].JML normal_behavior operation contract.0"))
   (branch "Post (get)"
       (builtin "One Step Simplification" (formula "60"))
       (builtin "One Step Simplification" (formula "93"))
      (rule "selectCreatedOfAnonAsFormulaEQ" (formula "60") (term "1,1,0") (ifseqformula "58"))
      (rule "andLeft" (formula "60"))
      (rule "andLeft" (formula "60"))
      (rule "andLeft" (formula "62"))
      (rule "andLeft" (formula "62"))
      (rule "andLeft" (formula "63"))
      (rule "notLeft" (formula "64"))
      (rule "exLeft" (formula "62") (inst "sk=i_2"))
      (rule "andLeft" (formula "62"))
      (rule "andLeft" (formula "63"))
      (rule "andLeft" (formula "62"))
      (rule "replace_known_right" (formula "61") (term "0") (ifseqformula "67"))
       (builtin "One Step Simplification" (formula "61"))
      (rule "castedGetAny" (formula "65") (term "0"))
      (rule "castedGetAny" (formula "64") (term "0"))
      (rule "inEqSimp_ltToLeq" (formula "63"))
      (rule "polySimp_mulComm0" (formula "63") (term "1,0,0"))
      (rule "polySimp_addComm1" (formula "63") (term "0"))
      (rule "inEqSimp_commuteLeq" (formula "62"))
      (rule "assignment" (formula "100") (term "1"))
       (builtin "One Step Simplification" (formula "100"))
      (rule "blockEmpty" (formula "100") (term "1"))
      (rule "inEqSimp_sepNegMonomial0" (formula "63"))
      (rule "polySimp_mulLiterals" (formula "63") (term "0"))
      (rule "polySimp_elimOne" (formula "63") (term "0"))
      (rule "pullOutSelect" (formula "65") (term "0,0") (inst "selectSK=org_apache_commons_csv_CSVRecord_value_seq_0"))
      (rule "simplifySelectOfAnonEQ" (formula "65") (ifseqformula "58"))
       (builtin "One Step Simplification" (formula "65") (ifInst ""  (formula "98")) (ifInst ""  (formula "24")))
      (rule "elementOfSingleton" (formula "65") (term "0,0"))
       (builtin "One Step Simplification" (formula "65") (ifInst ""  (formula "98")))
      (rule "applyEqReverse" (formula "66") (term "0,0") (ifseqformula "65"))
      (rule "hideAuxiliaryEq" (formula "65"))
      (rule "pullOutSelect" (formula "64") (term "0,0") (inst "selectSK=org_apache_commons_csv_CSVRecord_key_seq_0"))
      (rule "applyEq" (formula "63") (term "0,0") (ifseqformula "64"))
      (rule "simplifySelectOfAnonEQ" (formula "64") (ifseqformula "58"))
       (builtin "One Step Simplification" (formula "64") (ifInst ""  (formula "98")) (ifInst ""  (formula "24")))
      (rule "elementOfSingleton" (formula "64") (term "0,0"))
       (builtin "One Step Simplification" (formula "64") (ifInst ""  (formula "98")))
      (rule "applyEqReverse" (formula "63") (term "0,0") (ifseqformula "64"))
      (rule "applyEqReverse" (formula "65") (term "0,0") (ifseqformula "64"))
      (rule "hideAuxiliaryEq" (formula "64"))
      (rule "Class_invariant_axiom_for_org_apache_commons_csv_CSVRecord" (formula "66") (inst "i=i") (inst "i_0=i_0"))
      (rule "replaceKnownSelect_taclet00_4" (formula "66") (term "0,1,0,0"))
      (rule "replaceKnownSelect_taclet00_6" (formula "66") (term "0,0,0,0"))
      (rule "replaceKnownAuxiliaryConstant_taclet00_5" (formula "66") (term "0,1,0,0"))
      (rule "replaceKnownAuxiliaryConstant_taclet00_7" (formula "66") (term "0,0,0,0"))
      (rule "replaceKnownSelect_taclet00_4" (formula "66") (term "0,0,0,0,1,0,1"))
      (rule "replaceKnownSelect_taclet00_4" (formula "66") (term "0,1,1,0,0,0,1"))
      (rule "replaceKnownAuxiliaryConstant_taclet00_5" (formula "66") (term "0,0,0,0,1,0,1"))
      (rule "replaceKnownAuxiliaryConstant_taclet00_5" (formula "66") (term "0,1,1,0,0,0,1"))
      (rule "replaceKnownSelect_taclet00_6" (formula "66") (term "0,0,0,0,1,0,1,0"))
      (rule "replaceKnownSelect_taclet00_6" (formula "66") (term "0,1,1,0,0,0,1,0"))
      (rule "replaceKnownAuxiliaryConstant_taclet00_7" (formula "66") (term "0,0,0,0,1,0,1,0"))
      (rule "replaceKnownAuxiliaryConstant_taclet00_7" (formula "66") (term "0,1,1,0,0,0,1,0"))
      (rule "expand_inInt" (formula "66") (term "1,0,0,1,0"))
      (rule "expand_inInt" (formula "66") (term "1,0,0,1"))
      (rule "replace_int_MIN" (formula "66") (term "0,1,1,0,0,1,0"))
      (rule "replace_int_MAX" (formula "66") (term "1,0,1,0,0,1,0"))
      (rule "replace_int_MAX" (formula "66") (term "1,0,1,0,0,1"))
      (rule "replace_int_MIN" (formula "66") (term "0,1,1,0,0,1"))
      (rule "andLeft" (formula "66"))
      (rule "andLeft" (formula "66"))
      (rule "eqSymm" (formula "66"))
      (rule "castedGetAny" (formula "67") (term "0,0,1,0"))
      (rule "castedGetAny" (formula "66") (term "0,0,1,0"))
      (rule "inEqSimp_ltToLeq" (formula "67") (term "1,0,0,0"))
      (rule "polySimp_mulComm0" (formula "67") (term "1,0,0,1,0,0,0"))
      (rule "inEqSimp_ltToLeq" (formula "66") (term "1,0,0,0"))
      (rule "polySimp_mulComm0" (formula "66") (term "1,0,0,1,0,0,0"))
      (rule "inEqSimp_commuteLeq" (formula "67") (term "1,1,0,0"))
      (rule "inEqSimp_commuteLeq" (formula "67") (term "0,0,0,0"))
      (rule "inEqSimp_commuteLeq" (formula "66") (term "0,0,0,0"))
      (rule "inEqSimp_commuteLeq" (formula "66") (term "1,1,0,0"))
      (rule "applyEq" (formula "67") (term "0,1,0,0,1,0,0,0") (ifseqformula "28"))
      (rule "inEqSimp_sepPosMonomial0" (formula "66") (term "1,0,0,0"))
      (rule "polySimp_mulComm0" (formula "66") (term "1,1,0,0,0"))
      (rule "polySimp_rightDist" (formula "66") (term "1,1,0,0,0"))
      (rule "polySimp_mulLiterals" (formula "66") (term "1,1,1,0,0,0"))
      (rule "mul_literals" (formula "66") (term "0,1,1,0,0,0"))
      (rule "polySimp_elimOne" (formula "66") (term "1,1,1,0,0,0"))
      (rule "inEqSimp_sepPosMonomial0" (formula "67") (term "1,0,0,0"))
      (rule "polySimp_mulComm0" (formula "67") (term "1,1,0,0,0"))
      (rule "polySimp_rightDist" (formula "67") (term "1,1,0,0,0"))
      (rule "mul_literals" (formula "67") (term "0,1,1,0,0,0"))
      (rule "polySimp_mulLiterals" (formula "67") (term "1,1,1,0,0,0"))
      (rule "polySimp_elimOne" (formula "67") (term "1,1,1,0,0,0"))
      (rule "nnf_imp2or" (formula "66") (term "0"))
      (rule "nnf_imp2or" (formula "67") (term "0"))
      (rule "nnf_notAnd" (formula "66") (term "0,0"))
      (rule "nnf_notAnd" (formula "67") (term "0,0"))
      (rule "nnf_notAnd" (formula "66") (term "0,0,0"))
      (rule "inEqSimp_notLeq" (formula "66") (term "1,0,0,0"))
      (rule "polySimp_rightDist" (formula "66") (term "1,0,0,1,0,0,0"))
      (rule "mul_literals" (formula "66") (term "0,1,0,0,1,0,0,0"))
      (rule "polySimp_addAssoc" (formula "66") (term "0,0,1,0,0,0"))
      (rule "add_literals" (formula "66") (term "0,0,0,1,0,0,0"))
      (rule "add_zero_left" (formula "66") (term "0,0,1,0,0,0"))
      (rule "inEqSimp_sepPosMonomial1" (formula "66") (term "1,0,0,0"))
      (rule "polySimp_mulLiterals" (formula "66") (term "1,1,0,0,0"))
      (rule "polySimp_elimOne" (formula "66") (term "1,1,0,0,0"))
      (rule "inEqSimp_notGeq" (formula "66") (term "0,0,0,0"))
      (rule "mul_literals" (formula "66") (term "1,0,0,0,0,0,0"))
      (rule "add_zero_right" (formula "66") (term "0,0,0,0,0,0"))
      (rule "inEqSimp_sepPosMonomial0" (formula "66") (term "0,0,0,0"))
      (rule "mul_literals" (formula "66") (term "1,0,0,0,0"))
      (rule "nnf_notAnd" (formula "66") (term "1,0,0"))
      (rule "inEqSimp_notGeq" (formula "66") (term "1,1,0,0"))
      (rule "mul_literals" (formula "66") (term "1,0,0,1,1,0,0"))
      (rule "add_literals" (formula "66") (term "0,0,1,1,0,0"))
      (rule "inEqSimp_sepPosMonomial0" (formula "66") (term "1,1,0,0"))
      (rule "mul_literals" (formula "66") (term "1,1,1,0,0"))
      (rule "inEqSimp_notLeq" (formula "66") (term "0,1,0,0"))
      (rule "mul_literals" (formula "66") (term "1,0,0,0,1,0,0"))
      (rule "add_literals" (formula "66") (term "0,0,0,1,0,0"))
      (rule "inEqSimp_sepPosMonomial1" (formula "66") (term "0,1,0,0"))
      (rule "mul_literals" (formula "66") (term "1,0,1,0,0"))
      (rule "nnf_notAnd" (formula "67") (term "1,0,0"))
      (rule "inEqSimp_notGeq" (formula "67") (term "1,1,0,0"))
      (rule "mul_literals" (formula "67") (term "1,0,0,1,1,0,0"))
      (rule "add_literals" (formula "67") (term "0,0,1,1,0,0"))
      (rule "inEqSimp_sepPosMonomial0" (formula "67") (term "1,1,0,0"))
      (rule "mul_literals" (formula "67") (term "1,1,1,0,0"))
      (rule "inEqSimp_notLeq" (formula "67") (term "0,1,0,0"))
      (rule "mul_literals" (formula "67") (term "1,0,0,0,1,0,0"))
      (rule "add_literals" (formula "67") (term "0,0,0,1,0,0"))
      (rule "inEqSimp_sepPosMonomial1" (formula "67") (term "0,1,0,0"))
      (rule "mul_literals" (formula "67") (term "1,0,1,0,0"))
      (rule "nnf_notAnd" (formula "67") (term "0,0,0"))
      (rule "inEqSimp_notLeq" (formula "67") (term "1,0,0,0"))
      (rule "polySimp_rightDist" (formula "67") (term "1,0,0,1,0,0,0"))
      (rule "mul_literals" (formula "67") (term "0,1,0,0,1,0,0,0"))
      (rule "polySimp_addAssoc" (formula "67") (term "0,0,1,0,0,0"))
      (rule "add_literals" (formula "67") (term "0,0,0,1,0,0,0"))
      (rule "add_zero_left" (formula "67") (term "0,0,1,0,0,0"))
      (rule "inEqSimp_sepPosMonomial1" (formula "67") (term "1,0,0,0"))
      (rule "polySimp_mulLiterals" (formula "67") (term "1,1,0,0,0"))
      (rule "polySimp_elimOne" (formula "67") (term "1,1,0,0,0"))
      (rule "inEqSimp_notGeq" (formula "67") (term "0,0,0,0"))
      (rule "times_zero_1" (formula "67") (term "1,0,0,0,0,0,0"))
      (rule "add_zero_right" (formula "67") (term "0,0,0,0,0,0"))
      (rule "inEqSimp_sepPosMonomial0" (formula "67") (term "0,0,0,0"))
      (rule "mul_literals" (formula "67") (term "1,0,0,0,0"))
      (rule "commute_or_2" (formula "66") (term "0,0"))
      (rule "onlyCreatedObjectsAreReferenced" (formula "31") (term "1,0") (ifseqformula "21"))
      (rule "onlyCreatedObjectsAreReferenced" (formula "72") (term "0") (ifseqformula "21"))
      (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "73"))
       (builtin "One Step Simplification" (formula "1"))
      (rule "onlyCreatedObjectsAreReferenced" (formula "33") (term "1,1") (ifseqformula "22"))
      (rule "onlyCreatedObjectsAreReferenced" (formula "75") (term "0") (ifseqformula "22"))
      (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "76"))
       (builtin "One Step Simplification" (formula "1"))
      (rule "commute_or_2" (formula "71") (term "0,0"))
      (rule "allLeft" (formula "36") (inst "t=i_2_0"))
      (rule "inEqSimp_commuteGeq" (formula "36") (term "1"))
      (rule "applyEq" (formula "36") (term "0,0,0,0") (ifseqformula "41"))
      (rule "replace_known_right" (formula "36") (term "0,0,0") (ifseqformula "89"))
       (builtin "One Step Simplification" (formula "36"))
      (rule "true_left" (formula "36"))
      (rule "allLeft" (formula "41") (inst "t=i_1"))
      (rule "inEqSimp_commuteGeq" (formula "41") (term "1"))
      (rule "applyEq" (formula "41") (term "0,0,0,0") (ifseqformula "48"))
      (rule "replace_known_right" (formula "41") (term "0,0,0") (ifseqformula "89"))
       (builtin "One Step Simplification" (formula "41"))
      (rule "true_left" (formula "41"))
      (rule "shift_paren_or" (formula "70") (term "0,0,0"))
      (rule "commute_or_2" (formula "70") (term "0"))
      (rule "commute_or_2" (formula "70") (term "0,0"))
      (rule "commute_or_2" (formula "70") (term "0,0,0"))
      (rule "commute_or_2" (formula "70") (term "0,0"))
      (rule "shift_paren_or" (formula "71") (term "0,0,0"))
      (rule "commute_or_2" (formula "71") (term "0"))
      (rule "commute_or_2" (formula "71") (term "0,0"))
      (rule "commute_or_2" (formula "71") (term "0,0,0"))
      (rule "commute_or_2" (formula "71") (term "0,0"))
      (rule "commute_or" (formula "70") (term "0,0,0,0"))
      (rule "commute_or_2" (formula "70") (term "0,0,0"))
      (rule "inEqSimp_or_subsumption1" (formula "70") (term "0,0,0"))
      (rule "qeq_literals" (formula "70") (term "0,1,0,0,0,0"))
       (builtin "One Step Simplification" (formula "70") (ifInst ""  (formula "31")))
      (rule "true_left" (formula "70"))
       (builtin "Use Operation Contract" (formula "104") (newnames "heapBefore_exitIfIdInvalid,exc_2516,heapAfter_exitIfIdInvalid,anon_heap_exitIfIdInvalid") (contract "de.polyas.core3.open.cred.CredTool[de.polyas.core3.open.cred.CredTool::exitIfIdInvalid(java.lang.String)].JML normal_behavior operation contract.0"))
      (branch "Post (exitIfIdInvalid)"
          (builtin "One Step Simplification" (formula "72"))
          (builtin "One Step Simplification" (formula "106"))
         (rule "andLeft" (formula "72"))
         (rule "commute_or" (formula "70") (term "0,0,0,0"))
         (rule "commute_or_2" (formula "70") (term "0,0,0"))
         (rule "inEqSimp_or_subsumption1" (formula "70") (term "0,0,0"))
         (rule "qeq_literals" (formula "70") (term "0,1,0,0,0,0"))
          (builtin "One Step Simplification" (formula "70") (ifInst ""  (formula "32")))
         (rule "true_left" (formula "70"))
         (rule "onlyCreatedObjectsAreReferenced" (formula "75") (term "0") (ifseqformula "23"))
         (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "76"))
          (builtin "One Step Simplification" (formula "1"))
         (rule "returnUnfold" (formula "107") (term "1") (inst "#v0=g"))
         (rule "variableDeclarationAssign" (formula "107") (term "1"))
         (rule "variableDeclaration" (formula "107") (term "1") (newnames "g"))
         (rule "seqGetAlphaCast" (formula "70") (term "0"))
         (rule "castedGetAny" (formula "70") (term "0"))
          (builtin "One Step Simplification" (formula "70"))
         (rule "true_left" (formula "70"))
         (rule "seqGetAlphaCast" (formula "69") (term "0"))
         (rule "castedGetAny" (formula "69") (term "0"))
          (builtin "One Step Simplification" (formula "69"))
         (rule "true_left" (formula "69"))
          (builtin "Use Operation Contract" (formula "107") (newnames "heapBefore_generateDataForVoter_0,result_1899,exc_2517,heapAfter_generateDataForVoter,anon_heap_generateDataForVoter") (contract "de.polyas.core3.open.cred.CredentialGenerator[de.polyas.core3.open.cred.CredentialGenerator::generateDataForVoter(java.lang.String,java.lang.String)].JML normal_behavior operation contract.0"))
         (branch "Post (generateDataForVoter)"
             (builtin "One Step Simplification" (formula "109"))
             (builtin "One Step Simplification" (formula "75"))
            (rule "selectCreatedOfAnonAsFormulaEQ" (formula "75") (term "0,0,1,0,0,0,0,1,1,0,1,1") (ifseqformula "72"))
            (rule "selectCreatedOfAnonAsFormulaEQ" (formula "75") (term "0,0,0,0,0,0,0,0,1,1,0,1,1") (ifseqformula "72"))
            (rule "selectCreatedOfAnonAsFormulaEQ" (formula "75") (term "0,0,1,0,0,0,0,0,1,1,0,1,1") (ifseqformula "72"))
            (rule "selectCreatedOfAnonAsFormulaEQ" (formula "75") (term "0,0,0,1,0,0,0,0,1,1,0,1,1") (ifseqformula "63"))
            (rule "selectCreatedOfAnonAsFormulaEQ" (formula "75") (term "0,0,0,1,0,0,0,0,0,1,1,0,1,1") (ifseqformula "63"))
            (rule "selectCreatedOfAnonAsFormulaEQ" (formula "75") (term "0,0,0,0,0,0,0,0,0,1,1,0,1,1") (ifseqformula "63"))
            (rule "andLeft" (formula "75"))
            (rule "selectCreatedOfAnonAsFormulaEQ" (formula "76") (term "1,1,0") (ifseqformula "75"))
            (rule "selectCreatedOfAnonAsFormulaEQ" (formula "76") (term "0,1,1,0") (ifseqformula "72"))
            (rule "selectCreatedOfAnonAsFormulaEQ" (formula "76") (term "0,0,1,1,0") (ifseqformula "63"))
            (rule "andLeft" (formula "76"))
            (rule "andLeft" (formula "76"))
            (rule "andLeft" (formula "78"))
            (rule "andLeft" (formula "78"))
            (rule "andLeft" (formula "79"))
            (rule "andLeft" (formula "80"))
            (rule "andLeft" (formula "81"))
            (rule "andLeft" (formula "80"))
            (rule "notLeft" (formula "83"))
            (rule "andLeft" (formula "80"))
            (rule "andLeft" (formula "80"))
            (rule "andLeft" (formula "80"))
            (rule "andLeft" (formula "80"))
            (rule "andLeft" (formula "82"))
            (rule "andLeft" (formula "81"))
            (rule "andLeft" (formula "80"))
            (rule "notLeft" (formula "84"))
            (rule "notLeft" (formula "84"))
            (rule "notLeft" (formula "82"))
            (rule "notLeft" (formula "82"))
            (rule "notLeft" (formula "81"))
            (rule "notLeft" (formula "80"))
            (rule "orRight" (formula "88"))
            (rule "orRight" (formula "86"))
            (rule "orRight" (formula "84"))
            (rule "orRight" (formula "90"))
            (rule "orRight" (formula "87"))
            (rule "orRight" (formula "84"))
            (rule "translateJavaAddInt" (formula "78") (term "1"))
            (rule "replace_known_right" (formula "77") (term "0") (ifseqformula "95"))
             (builtin "One Step Simplification" (formula "77") (ifInst ""  (formula "84")) (ifInst ""  (formula "85")) (ifInst ""  (formula "86")))
            (rule "assignment" (formula "129") (term "1"))
             (builtin "One Step Simplification" (formula "129"))
            (rule "pullOutSelect" (formula "78") (term "0") (inst "selectSK=de_polyas_core3_open_crypto_basic_Hashes_currentIndex_0"))
            (rule "simplifySelectOfAnonEQ" (formula "78") (ifseqformula "75"))
             (builtin "One Step Simplification" (formula "78"))
            (rule "eqSymm" (formula "79"))
            (rule "elementOfSingleton" (formula "78") (term "0,0"))
             (builtin "One Step Simplification" (formula "78"))
            (rule "applyEqReverse" (formula "79") (term "1") (ifseqformula "78"))
            (rule "hideAuxiliaryEq" (formula "78"))
            (rule "pullOutSelect" (formula "82") (term "0,0") (inst "selectSK=de_polyas_core3_open_cred_CredentialGenerator_GeneratedDataForVoter_publicSigningKey_0"))
            (rule "applyEq" (formula "95") (term "1,0") (ifseqformula "82"))
            (rule "applyEq" (formula "93") (term "1,0") (ifseqformula "82"))
            (rule "applyEq" (formula "94") (term "1,0") (ifseqformula "82"))
            (rule "applyEq" (formula "92") (term "0") (ifseqformula "82"))
            (rule "simplifySelectOfAnonEQ" (formula "82") (ifseqformula "75"))
             (builtin "One Step Simplification" (formula "82") (ifInst ""  (formula "96")))
            (rule "selectCreatedOfAnonAsFormulaEQ" (formula "82") (term "0,1,0,0") (ifseqformula "72"))
            (rule "selectCreatedOfAnonAsFormulaEQ" (formula "82") (term "0,0,1,0,0") (ifseqformula "63"))
            (rule "replace_known_right" (formula "82") (term "1,0,1,0,0") (ifseqformula "87"))
             (builtin "One Step Simplification" (formula "82") (ifInst ""  (formula "85")) (ifInst ""  (formula "86")))
            (rule "applyEqReverse" (formula "94") (term "1,0") (ifseqformula "82"))
            (rule "applyEqReverse" (formula "93") (term "1,0") (ifseqformula "82"))
            (rule "applyEqReverse" (formula "92") (term "0") (ifseqformula "82"))
            (rule "applyEqReverse" (formula "95") (term "1,0") (ifseqformula "82"))
            (rule "applyEqReverse" (formula "83") (term "0,0") (ifseqformula "82"))
            (rule "hideAuxiliaryEq" (formula "82"))
            (rule "pullOutSelect" (formula "81") (term "0,0") (inst "selectSK=de_polyas_core3_open_cred_CredentialGenerator_GeneratedDataForVoter_hashedPassword_0"))
            (rule "applyEq" (formula "89") (term "1,0") (ifseqformula "81"))
            (rule "applyEq" (formula "90") (term "1,0") (ifseqformula "81"))
            (rule "applyEq" (formula "91") (term "1,0") (ifseqformula "81"))
            (rule "applyEq" (formula "88") (term "0") (ifseqformula "81"))
            (rule "simplifySelectOfAnonEQ" (formula "81") (ifseqformula "75"))
             (builtin "One Step Simplification" (formula "81") (ifInst ""  (formula "96")))
            (rule "selectCreatedOfAnonAsFormulaEQ" (formula "81") (term "0,1,0,0") (ifseqformula "72"))
            (rule "selectCreatedOfAnonAsFormulaEQ" (formula "81") (term "0,0,1,0,0") (ifseqformula "63"))
            (rule "replace_known_right" (formula "81") (term "1,0,1,0,0") (ifseqformula "87"))
             (builtin "One Step Simplification" (formula "81") (ifInst ""  (formula "85")) (ifInst ""  (formula "86")))
            (rule "applyEqReverse" (formula "91") (term "1,0") (ifseqformula "81"))
            (rule "applyEqReverse" (formula "90") (term "1,0") (ifseqformula "81"))
            (rule "applyEqReverse" (formula "88") (term "0") (ifseqformula "81"))
            (rule "applyEqReverse" (formula "89") (term "1,0") (ifseqformula "81"))
            (rule "applyEqReverse" (formula "82") (term "0,0") (ifseqformula "81"))
            (rule "hideAuxiliaryEq" (formula "81"))
            (rule "pullOutSelect" (formula "78") (term "0,0") (inst "selectSK=de_polyas_core3_open_crypto_basic_Hashes_currentIndex_1"))
            (rule "simplifySelectOfAnonEQ" (formula "78") (ifseqformula "72"))
             (builtin "One Step Simplification" (formula "78"))
            (rule "simplifySelectOfAnonEQ" (formula "78") (ifseqformula "63"))
             (builtin "One Step Simplification" (formula "78"))
            (rule "eqSymm" (formula "79"))
            (rule "elementOfSingleton" (formula "78") (term "0,0"))
             (builtin "One Step Simplification" (formula "78"))
            (rule "applyEqReverse" (formula "79") (term "0,1") (ifseqformula "78"))
            (rule "hideAuxiliaryEq" (formula "78"))
            (rule "expand_addJint" (formula "78") (term "1"))
            (rule "polySimp_addComm0" (formula "78") (term "0,1"))
            (rule "expand_moduloInteger" (formula "78") (term "1"))
            (rule "replace_int_HALFRANGE" (formula "78") (term "0,0,1,1"))
            (rule "replace_int_MIN" (formula "78") (term "0,1"))
            (rule "replace_int_RANGE" (formula "78") (term "1,1,1"))
            (rule "polySimp_addAssoc" (formula "78") (term "0,1,1"))
            (rule "add_literals" (formula "78") (term "0,0,1,1"))
            (rule "mod_axiom" (formula "78") (term "1,1"))
            (rule "polySimp_mulLiterals" (formula "78") (term "1,1,1"))
            (rule "polySimp_addAssoc" (formula "78") (term "1"))
            (rule "polySimp_addAssoc" (formula "78") (term "0,1"))
            (rule "add_literals" (formula "78") (term "0,0,1"))
            (rule "polyDiv_pullOut" (formula "78") (term "0,1,1") (inst "polyDivCoeff=Z(1(#))"))
            (rule "mul_literals" (formula "78") (term "0,1,0,0,2,0,1,1"))
            (rule "equal_literals" (formula "78") (term "0,0,1,1"))
             (builtin "One Step Simplification" (formula "78"))
            (rule "mul_literals" (formula "78") (term "1,0,0,0,1,1"))
            (rule "polySimp_mulComm0" (formula "78") (term "1,1"))
            (rule "polySimp_addComm0" (formula "78") (term "1,1,1"))
            (rule "polySimp_addComm1" (formula "78") (term "0,1,1,1,1"))
            (rule "add_literals" (formula "78") (term "0,0,1,1,1,1"))
            (rule "polySimp_rightDist" (formula "78") (term "1,1"))
            (rule "mul_literals" (formula "78") (term "0,1,1"))
            (rule "polySimp_addAssoc" (formula "78") (term "1"))
            (rule "polySimp_addComm1" (formula "78") (term "0,1"))
            (rule "add_literals" (formula "78") (term "0,0,1"))
            (rule "Class_invariant_axiom_for_de_polyas_core3_open_cred_CredentialGenerator_GeneratedDataForVoter" (formula "79"))
            (rule "replaceKnownSelect_taclet0000_10" (formula "79") (term "0,0,1"))
            (rule "replaceKnownAuxiliaryConstant_taclet0000_11" (formula "79") (term "0,0,1"))
            (rule "replaceKnownSelect_taclet0000_12" (formula "79") (term "0,0,1,0"))
            (rule "replaceKnownAuxiliaryConstant_taclet0000_13" (formula "79") (term "0,0,1,0"))
            (rule "andLeft" (formula "79"))
            (rule "andLeft" (formula "79"))
            (rule "notLeft" (formula "81"))
            (rule "notLeft" (formula "80"))
            (rule "notLeft" (formula "79"))
            (rule "pullOutSelect" (formula "83") (term "0") (inst "selectSK=de_polyas_core3_open_cred_CredentialGenerator_GeneratedDataForVoter_password_0"))
            (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "76"))
             (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "96")))
            (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,1,0,0") (ifseqformula "73"))
            (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,0,1,0,0") (ifseqformula "64"))
            (rule "replace_known_right" (formula "1") (term "1,0,1,0,0") (ifseqformula "87"))
             (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "85")) (ifInst ""  (formula "86")))
            (rule "applyEqReverse" (formula "84") (term "0") (ifseqformula "1"))
            (rule "hideAuxiliaryEq" (formula "1"))
            (rule "Static_class_invariant_axiom_for_de_polyas_core3_open_cred_CredentialGenerator" (formula "82"))
            (rule "andLeft" (formula "82"))
            (rule "andLeft" (formula "82"))
            (rule "andLeft" (formula "82"))
            (rule "notLeft" (formula "83"))
            (rule "notLeft" (formula "82"))
            (rule "pullOutSelect" (formula "83") (term "1") (inst "selectSK=de_polyas_core3_open_cred_CredentialGenerator_RANDOM_0"))
            (rule "applyEq" (formula "86") (term "0") (ifseqformula "83"))
            (rule "simplifySelectOfAnonEQ" (formula "83") (ifseqformula "75"))
             (builtin "One Step Simplification" (formula "83"))
            (rule "elementOfSingleton" (formula "83") (term "0,0"))
             (builtin "One Step Simplification" (formula "83"))
            (rule "simplifySelectOfAnonEQ" (formula "83") (ifseqformula "72"))
             (builtin "One Step Simplification" (formula "83"))
            (rule "simplifySelectOfAnonEQ" (formula "83") (ifseqformula "63"))
             (builtin "One Step Simplification" (formula "83"))
            (rule "elementOfSingleton" (formula "83") (term "0,0"))
             (builtin "One Step Simplification" (formula "83"))
            (rule "applyEqReverse" (formula "84") (term "1") (ifseqformula "83"))
            (rule "applyEqReverse" (formula "86") (term "0") (ifseqformula "83"))
            (rule "hideAuxiliaryEq" (formula "83"))
            (rule "pullOutSelect" (formula "82") (term "1") (inst "selectSK=de_polyas_core3_open_cred_CredentialGenerator_GROUP_0"))
            (rule "applyEq" (formula "85") (term "0") (ifseqformula "82"))
            (rule "simplifySelectOfAnonEQ" (formula "82") (ifseqformula "75"))
             (builtin "One Step Simplification" (formula "82"))
            (rule "elementOfSingleton" (formula "82") (term "0,0"))
             (builtin "One Step Simplification" (formula "82"))
            (rule "simplifySelectOfAnonEQ" (formula "82") (ifseqformula "72"))
             (builtin "One Step Simplification" (formula "82"))
            (rule "simplifySelectOfAnonEQ" (formula "82") (ifseqformula "63"))
             (builtin "One Step Simplification" (formula "82"))
            (rule "elementOfSingleton" (formula "82") (term "0,0"))
             (builtin "One Step Simplification" (formula "82"))
            (rule "applyEqReverse" (formula "83") (term "1") (ifseqformula "82"))
            (rule "applyEqReverse" (formula "85") (term "0") (ifseqformula "82"))
            (rule "hideAuxiliaryEq" (formula "82"))
            (rule "Class_invariant_axiom_for_java_security_SecureRandom" (formula "83"))
            (rule "true_left" (formula "83"))
            (rule "Class_invariant_axiom_for_de_polyas_core3_open_crypto_groups_ECGroup" (formula "82"))
            (rule "andLeft" (formula "82"))
            (rule "andLeft" (formula "82"))
            (rule "andLeft" (formula "84"))
            (rule "notLeft" (formula "83"))
            (rule "notLeft" (formula "82"))
            (rule "pullOutSelect" (formula "83") (term "1") (inst "selectSK=de_polyas_core3_open_crypto_groups_ECGroup_group_0"))
            (rule "applyEq" (formula "86") (term "0") (ifseqformula "83"))
            (rule "simplifySelectOfAnonEQ" (formula "83") (ifseqformula "75"))
             (builtin "One Step Simplification" (formula "83") (ifInst ""  (formula "128")))
            (rule "selectCreatedOfAnonAsFormulaEQ" (formula "83") (term "0,1,0,0") (ifseqformula "72"))
            (rule "selectCreatedOfAnonAsFormulaEQ" (formula "83") (term "0,0,1,0,0") (ifseqformula "63"))
            (rule "replace_known_left" (formula "83") (term "0,0,0,1,0,0") (ifseqformula "20"))
             (builtin "One Step Simplification" (formula "83"))
            (rule "elementOfSingleton" (formula "83") (term "0,0"))
             (builtin "One Step Simplification" (formula "83") (ifInst ""  (formula "128")))
            (rule "simplifySelectOfAnonEQ" (formula "83") (ifseqformula "72"))
             (builtin "One Step Simplification" (formula "83") (ifInst ""  (formula "128")))
            (rule "selectCreatedOfAnonAsFormulaEQ" (formula "83") (term "0,0,0") (ifseqformula "63"))
            (rule "replace_known_left" (formula "83") (term "0,0,0,0") (ifseqformula "20"))
             (builtin "One Step Simplification" (formula "83"))
            (rule "simplifySelectOfAnonEQ" (formula "83") (ifseqformula "63"))
             (builtin "One Step Simplification" (formula "83") (ifInst ""  (formula "128")) (ifInst ""  (formula "20")))
            (rule "elementOfSingleton" (formula "83") (term "0,0"))
             (builtin "One Step Simplification" (formula "83") (ifInst ""  (formula "128")))
            (rule "applyEqReverse" (formula "84") (term "1") (ifseqformula "83"))
            (rule "applyEqReverse" (formula "86") (term "0") (ifseqformula "83"))
            (rule "hideAuxiliaryEq" (formula "83"))
            (rule "pullOutSelect" (formula "82") (term "1") (inst "selectSK=de_polyas_core3_open_crypto_groups_ECGroup_curve_0"))
            (rule "applyEq" (formula "85") (term "0") (ifseqformula "82"))
            (rule "simplifySelectOfAnonEQ" (formula "82") (ifseqformula "75"))
             (builtin "One Step Simplification" (formula "82") (ifInst ""  (formula "127")))
            (rule "selectCreatedOfAnonAsFormulaEQ" (formula "82") (term "0,1,0,0") (ifseqformula "72"))
            (rule "selectCreatedOfAnonAsFormulaEQ" (formula "82") (term "0,0,1,0,0") (ifseqformula "63"))
            (rule "replace_known_left" (formula "82") (term "0,0,0,1,0,0") (ifseqformula "20"))
             (builtin "One Step Simplification" (formula "82"))
            (rule "elementOfSingleton" (formula "82") (term "0,0"))
             (builtin "One Step Simplification" (formula "82") (ifInst ""  (formula "127")))
            (rule "simplifySelectOfAnonEQ" (formula "82") (ifseqformula "72"))
             (builtin "One Step Simplification" (formula "82") (ifInst ""  (formula "127")))
            (rule "selectCreatedOfAnonAsFormulaEQ" (formula "82") (term "0,0,0") (ifseqformula "63"))
            (rule "replace_known_left" (formula "82") (term "0,0,0,0") (ifseqformula "20"))
             (builtin "One Step Simplification" (formula "82"))
            (rule "simplifySelectOfAnonEQ" (formula "82") (ifseqformula "63"))
             (builtin "One Step Simplification" (formula "82") (ifInst ""  (formula "127")) (ifInst ""  (formula "20")))
            (rule "elementOfSingleton" (formula "82") (term "0,0"))
             (builtin "One Step Simplification" (formula "82") (ifInst ""  (formula "127")))
            (rule "applyEqReverse" (formula "85") (term "0") (ifseqformula "82"))
            (rule "applyEqReverse" (formula "83") (term "1") (ifseqformula "82"))
            (rule "hideAuxiliaryEq" (formula "82"))
            (rule "methodCallReturn" (formula "130") (term "1"))
            (rule "assignment" (formula "130") (term "1"))
             (builtin "One Step Simplification" (formula "130"))
            (rule "Class_invariant_axiom_for_org_bouncycastle_jce_spec_ECParameterSpec" (formula "83"))
            (rule "andLeft" (formula "83"))
            (rule "notLeft" (formula "83"))
            (rule "pullOutSelect" (formula "83") (term "1") (inst "selectSK=org_bouncycastle_jce_spec_ECParameterSpec_generator_0"))
            (rule "applyEq" (formula "85") (term "0") (ifseqformula "83"))
            (rule "simplifySelectOfAnonEQ" (formula "83") (ifseqformula "75"))
             (builtin "One Step Simplification" (formula "83") (ifInst ""  (formula "102")))
            (rule "selectCreatedOfAnonAsFormulaEQ" (formula "83") (term "0,1,0,0") (ifseqformula "72"))
            (rule "selectCreatedOfAnonAsFormulaEQ" (formula "83") (term "0,0,1,0,0") (ifseqformula "63"))
            (rule "replace_known_left" (formula "83") (term "0,0,0,1,0,0") (ifseqformula "3"))
             (builtin "One Step Simplification" (formula "83"))
            (rule "elementOfSingleton" (formula "83") (term "0,0"))
             (builtin "One Step Simplification" (formula "83") (ifInst ""  (formula "102")))
            (rule "simplifySelectOfAnonEQ" (formula "83") (ifseqformula "72"))
             (builtin "One Step Simplification" (formula "83") (ifInst ""  (formula "102")))
            (rule "selectCreatedOfAnonAsFormulaEQ" (formula "83") (term "0,0,0") (ifseqformula "63"))
            (rule "replace_known_left" (formula "83") (term "0,0,0,0") (ifseqformula "3"))
             (builtin "One Step Simplification" (formula "83"))
            (rule "simplifySelectOfAnonEQ" (formula "83") (ifseqformula "63"))
             (builtin "One Step Simplification" (formula "83") (ifInst ""  (formula "102")) (ifInst ""  (formula "3")))
            (rule "elementOfSingleton" (formula "83") (term "0,0"))
             (builtin "One Step Simplification" (formula "83") (ifInst ""  (formula "102")))
            (rule "applyEqReverse" (formula "84") (term "1") (ifseqformula "83"))
            (rule "applyEqReverse" (formula "85") (term "0") (ifseqformula "83"))
            (rule "hideAuxiliaryEq" (formula "83"))
            (rule "allLeft" (formula "54") (inst "t=i_2"))
            (rule "exLeft" (formula "54") (inst "sk=j_0"))
            (rule "andLeft" (formula "54"))
            (rule "andLeft" (formula "54"))
            (rule "replace_known_left" (formula "54") (term "0,0,0,0") (ifseqformula "72"))
             (builtin "One Step Simplification" (formula "54"))
            (rule "replace_known_left" (formula "56") (term "0,0,0,0") (ifseqformula "72"))
             (builtin "One Step Simplification" (formula "56"))
            (rule "replace_known_left" (formula "55") (term "0,0,0,0") (ifseqformula "72"))
             (builtin "One Step Simplification" (formula "55"))
            (rule "inEqSimp_commuteGeq" (formula "54") (term "1,0"))
            (rule "inEqSimp_commuteGeq" (formula "56") (term "1,0"))
            (rule "inEqSimp_commuteGeq" (formula "55") (term "1,0"))
            (rule "inEqSimp_homoInEq0" (formula "56") (term "1"))
            (rule "polySimp_addComm1" (formula "56") (term "0,1"))
            (rule "applyEq" (formula "55") (term "0,0,0,1") (ifseqformula "73"))
            (rule "applyEq" (formula "56") (term "0,0,1,0,1") (ifseqformula "73"))
            (rule "inEqSimp_sepPosMonomial1" (formula "56") (term "1"))
            (rule "polySimp_mulComm0" (formula "56") (term "1,1"))
            (rule "polySimp_rightDist" (formula "56") (term "1,1"))
            (rule "polySimp_mulLiterals" (formula "56") (term "1,1,1"))
            (rule "mul_literals" (formula "56") (term "0,1,1"))
            (rule "polySimp_elimOne" (formula "56") (term "1,1,1"))
            (rule "inEqSimp_contradInEq1" (formula "54") (term "0,0") (ifseqformula "70"))
            (rule "qeq_literals" (formula "54") (term "0,0,0"))
             (builtin "One Step Simplification" (formula "54"))
            (rule "inEqSimp_contradInEq1" (formula "55") (term "0,0") (ifseqformula "70"))
            (rule "qeq_literals" (formula "55") (term "0,0,0"))
             (builtin "One Step Simplification" (formula "55"))
            (rule "inEqSimp_contradInEq1" (formula "56") (term "0,0") (ifseqformula "70"))
            (rule "qeq_literals" (formula "56") (term "0,0,0"))
             (builtin "One Step Simplification" (formula "56"))
            (rule "inEqSimp_contradInEq1" (formula "54") (term "0") (ifseqformula "71"))
            (rule "inEqSimp_homoInEq1" (formula "54") (term "0,0"))
            (rule "polySimp_pullOutFactor1b" (formula "54") (term "0,0,0"))
            (rule "add_literals" (formula "54") (term "1,1,0,0,0"))
            (rule "times_zero_1" (formula "54") (term "1,0,0,0"))
            (rule "add_literals" (formula "54") (term "0,0,0"))
            (rule "leq_literals" (formula "54") (term "0,0"))
             (builtin "One Step Simplification" (formula "54"))
            (rule "inEqSimp_contradInEq1" (formula "55") (term "0") (ifseqformula "71"))
            (rule "inEqSimp_homoInEq1" (formula "55") (term "0,0"))
            (rule "polySimp_pullOutFactor1b" (formula "55") (term "0,0,0"))
            (rule "add_literals" (formula "55") (term "1,1,0,0,0"))
            (rule "times_zero_1" (formula "55") (term "1,0,0,0"))
            (rule "add_literals" (formula "55") (term "0,0,0"))
            (rule "leq_literals" (formula "55") (term "0,0"))
             (builtin "One Step Simplification" (formula "55"))
            (rule "inEqSimp_contradInEq1" (formula "56") (term "0") (ifseqformula "71"))
            (rule "inEqSimp_homoInEq1" (formula "56") (term "0,0"))
            (rule "polySimp_pullOutFactor1b" (formula "56") (term "0,0,0"))
            (rule "add_literals" (formula "56") (term "1,1,0,0,0"))
            (rule "times_zero_1" (formula "56") (term "1,0,0,0"))
            (rule "add_zero_right" (formula "56") (term "0,0,0"))
            (rule "leq_literals" (formula "56") (term "0,0"))
             (builtin "One Step Simplification" (formula "56"))
            (rule "allLeft" (formula "57") (inst "t=i_0"))
            (rule "exLeft" (formula "57") (inst "sk=j_1"))
            (rule "andLeft" (formula "57"))
            (rule "andLeft" (formula "57"))
            (rule "replace_known_left" (formula "59") (term "0,0,0,0") (ifseqformula "53"))
             (builtin "One Step Simplification" (formula "59"))
            (rule "replace_known_left" (formula "57") (term "0,0,0,0") (ifseqformula "53"))
             (builtin "One Step Simplification" (formula "57"))
            (rule "replace_known_left" (formula "58") (term "0,0,0,0") (ifseqformula "53"))
             (builtin "One Step Simplification" (formula "58"))
            (rule "inEqSimp_commuteGeq" (formula "59") (term "1,0"))
            (rule "inEqSimp_commuteGeq" (formula "57") (term "1,0"))
            (rule "inEqSimp_commuteGeq" (formula "58") (term "1,0"))
            (rule "inEqSimp_homoInEq0" (formula "59") (term "1"))
            (rule "polySimp_addComm1" (formula "59") (term "0,1"))
            (rule "inEqSimp_sepPosMonomial1" (formula "59") (term "1"))
            (rule "polySimp_mulComm0" (formula "59") (term "1,1"))
            (rule "polySimp_rightDist" (formula "59") (term "1,1"))
            (rule "mul_literals" (formula "59") (term "0,1,1"))
            (rule "polySimp_mulLiterals" (formula "59") (term "1,1,1"))
            (rule "polySimp_elimOne" (formula "59") (term "1,1,1"))
            (rule "inEqSimp_contradInEq1" (formula "57") (term "0,0") (ifseqformula "49"))
            (rule "qeq_literals" (formula "57") (term "0,0,0"))
             (builtin "One Step Simplification" (formula "57"))
            (rule "inEqSimp_contradInEq1" (formula "58") (term "1,0") (ifseqformula "51"))
            (rule "inEqSimp_homoInEq1" (formula "58") (term "0,1,0"))
            (rule "polySimp_pullOutFactor1b" (formula "58") (term "0,0,1,0"))
            (rule "add_literals" (formula "58") (term "1,1,0,0,1,0"))
            (rule "times_zero_1" (formula "58") (term "1,0,0,1,0"))
            (rule "add_zero_right" (formula "58") (term "0,0,1,0"))
            (rule "leq_literals" (formula "58") (term "0,1,0"))
             (builtin "One Step Simplification" (formula "58"))
            (rule "inEqSimp_contradInEq1" (formula "59") (term "1,0") (ifseqformula "51"))
            (rule "inEqSimp_homoInEq1" (formula "59") (term "0,1,0"))
            (rule "polySimp_pullOutFactor1b" (formula "59") (term "0,0,1,0"))
            (rule "add_literals" (formula "59") (term "1,1,0,0,1,0"))
            (rule "times_zero_1" (formula "59") (term "1,0,0,1,0"))
            (rule "add_literals" (formula "59") (term "0,0,1,0"))
            (rule "leq_literals" (formula "59") (term "0,1,0"))
             (builtin "One Step Simplification" (formula "59"))
            (rule "inEqSimp_contradInEq1" (formula "58") (term "0") (ifseqformula "49"))
            (rule "qeq_literals" (formula "58") (term "0,0"))
             (builtin "One Step Simplification" (formula "58"))
            (rule "inEqSimp_contradInEq1" (formula "57") (term "0") (ifseqformula "51"))
            (rule "inEqSimp_homoInEq1" (formula "57") (term "0,0"))
            (rule "polySimp_pullOutFactor1b" (formula "57") (term "0,0,0"))
            (rule "add_literals" (formula "57") (term "1,1,0,0,0"))
            (rule "times_zero_1" (formula "57") (term "1,0,0,0"))
            (rule "add_literals" (formula "57") (term "0,0,0"))
            (rule "leq_literals" (formula "57") (term "0,0"))
             (builtin "One Step Simplification" (formula "57"))
            (rule "inEqSimp_contradInEq1" (formula "59") (term "0") (ifseqformula "49"))
            (rule "qeq_literals" (formula "59") (term "0,0"))
             (builtin "One Step Simplification" (formula "59"))
            (rule "Class_invariant_axiom_for_org_bouncycastle_math_ec_custom_sec_SecP256K1Curve" (formula "88"))
            (rule "true_left" (formula "88"))
            (rule "Class_invariant_axiom_for_org_bouncycastle_math_ec_ECPoint" (formula "88"))
            (rule "true_left" (formula "88"))
            (rule "onlyCreatedObjectsAreReferenced" (formula "102") (term "0") (ifseqformula "68"))
            (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "103"))
             (builtin "One Step Simplification" (formula "1"))
            (rule "div_axiom" (formula "85") (term "0,1,1") (inst "quotient=quotient_1"))
            (rule "qeq_literals" (formula "85") (term "0,1,1"))
             (builtin "One Step Simplification" (formula "85"))
            (rule "mul_literals" (formula "85") (term "1,1,1,1"))
            (rule "equal_literals" (formula "85") (term "0"))
             (builtin "One Step Simplification" (formula "85"))
            (rule "andLeft" (formula "85"))
            (rule "andLeft" (formula "85"))
            (rule "polySimp_addAssoc" (formula "87") (term "0,1"))
            (rule "add_literals" (formula "87") (term "0,0,1"))
            (rule "polySimp_addComm1" (formula "87") (term "1"))
            (rule "add_literals" (formula "87") (term "0,1"))
            (rule "inEqSimp_homoInEq0" (formula "86"))
            (rule "polySimp_mulLiterals" (formula "86") (term "1,0"))
            (rule "polySimp_addComm1" (formula "86") (term "0"))
            (rule "inEqSimp_homoInEq1" (formula "87"))
            (rule "polySimp_mulLiterals" (formula "87") (term "1,0"))
            (rule "polySimp_addComm1" (formula "87") (term "0"))
            (rule "applyEq" (formula "88") (term "0,1,1") (ifseqformula "85"))
            (rule "polySimp_addComm1" (formula "88") (term "1"))
            (rule "inEqSimp_sepPosMonomial1" (formula "86"))
            (rule "polySimp_mulComm0" (formula "86") (term "1"))
            (rule "polySimp_rightDist" (formula "86") (term "1"))
            (rule "polySimp_mulLiterals" (formula "86") (term "1,1"))
            (rule "mul_literals" (formula "86") (term "0,1"))
            (rule "inEqSimp_sepPosMonomial0" (formula "87"))
            (rule "polySimp_mulComm0" (formula "87") (term "1"))
            (rule "polySimp_rightDist" (formula "87") (term "1"))
            (rule "mul_literals" (formula "87") (term "0,1"))
            (rule "polySimp_mulLiterals" (formula "87") (term "1,1"))
            (rule "inEqSimp_exactShadow3" (formula "86") (ifseqformula "68"))
            (rule "polySimp_rightDist" (formula "86") (term "0,0"))
            (rule "mul_literals" (formula "86") (term "0,0,0"))
            (rule "polySimp_mulLiterals" (formula "86") (term "1,0,0"))
            (rule "polySimp_addAssoc" (formula "86") (term "0"))
            (rule "polySimp_addComm1" (formula "86") (term "0,0"))
            (rule "add_literals" (formula "86") (term "0,0,0"))
            (rule "inEqSimp_sepPosMonomial1" (formula "86"))
            (rule "polySimp_mulComm0" (formula "86") (term "1"))
            (rule "polySimp_rightDist" (formula "86") (term "1"))
            (rule "mul_literals" (formula "86") (term "0,1"))
            (rule "polySimp_mulLiterals" (formula "86") (term "1,1"))
            (rule "inEqSimp_exactShadow3" (formula "64") (ifseqformula "88"))
            (rule "mul_literals" (formula "64") (term "0,0"))
            (rule "add_zero_left" (formula "64") (term "0"))
            (rule "inEqSimp_sepPosMonomial1" (formula "64"))
            (rule "mul_literals" (formula "64") (term "1"))
            (rule "elimGcdGeq_antec" (formula "64") (inst "elimGcdRightDiv=Z(neglit(1(#)))") (inst "elimGcdLeftDiv=quotient_1") (inst "elimGcd=Z(6(9(2(7(6(9(4(9(2(4(#)))))))))))"))
            (rule "mul_literals" (formula "64") (term "0,1,0,0,0,0,1,0"))
            (rule "polySimp_mulLiterals" (formula "64") (term "1,0,1,0"))
            (rule "leq_literals" (formula "64") (term "0,0"))
             (builtin "One Step Simplification" (formula "64"))
            (rule "mul_literals" (formula "64") (term "1,0,0,0,0,0"))
            (rule "polySimp_addLiterals" (formula "64") (term "0,0,0,0"))
            (rule "add_literals" (formula "64") (term "0,0,0,0"))
            (rule "polySimp_pullOutFactor0b" (formula "64") (term "0,0"))
            (rule "add_literals" (formula "64") (term "1,1,0,0"))
            (rule "times_zero_1" (formula "64") (term "1,0,0"))
            (rule "add_literals" (formula "64") (term "0,0"))
            (rule "leq_literals" (formula "64") (term "0"))
             (builtin "One Step Simplification" (formula "64"))
            (rule "inEqSimp_exactShadow3" (formula "87") (ifseqformula "67"))
            (rule "polySimp_rightDist" (formula "87") (term "0,0"))
            (rule "polySimp_mulLiterals" (formula "87") (term "1,0,0"))
            (rule "mul_literals" (formula "87") (term "0,0,0"))
            (rule "polySimp_addComm1" (formula "87") (term "0"))
            (rule "add_literals" (formula "87") (term "0,0"))
            (rule "inEqSimp_sepNegMonomial1" (formula "87"))
            (rule "polySimp_mulLiterals" (formula "87") (term "0"))
            (rule "elimGcdLeq_antec" (formula "87") (inst "elimGcdRightDiv=Z(neglit(1(#)))") (inst "elimGcdLeftDiv=quotient_1") (inst "elimGcd=Z(6(9(2(7(6(9(4(9(2(4(#)))))))))))"))
            (rule "polySimp_mulLiterals" (formula "87") (term "1,0,1,0"))
            (rule "neg_literal" (formula "87") (term "0,0,0,0,0,1,0"))
            (rule "mul_literals" (formula "87") (term "0,1,0,0,0,0,1,0"))
            (rule "leq_literals" (formula "87") (term "0,0"))
             (builtin "One Step Simplification" (formula "87"))
            (rule "mul_literals" (formula "87") (term "1,0,0,0,0,0"))
            (rule "polySimp_addLiterals" (formula "87") (term "0,0,0,0"))
            (rule "add_literals" (formula "87") (term "0,0,0,0"))
            (rule "polySimp_pullOutFactor0b" (formula "87") (term "0,0"))
            (rule "add_literals" (formula "87") (term "1,1,0,0"))
            (rule "times_zero_1" (formula "87") (term "1,0,0"))
            (rule "add_literals" (formula "87") (term "0,0"))
            (rule "qeq_literals" (formula "87") (term "0"))
             (builtin "One Step Simplification" (formula "87"))
            (rule "inEqSimp_antiSymm" (formula "64") (ifseqformula "87"))
            (rule "applyEq" (formula "90") (term "0,1,1") (ifseqformula "64"))
            (rule "mul_literals" (formula "90") (term "1,1"))
            (rule "add_literals" (formula "90") (term "1"))
            (rule "applyEqRigid" (formula "91") (term "0,1,1") (ifseqformula "64"))
            (rule "mul_literals" (formula "91") (term "1,1"))
            (rule "add_literals" (formula "91") (term "1"))
            (rule "applyEq" (formula "88") (term "0") (ifseqformula "64"))
            (rule "leq_literals" (formula "88"))
            (rule "true_left" (formula "88"))
            (rule "applyEqRigid" (formula "88") (term "0,1,1") (ifseqformula "64"))
            (rule "mul_literals" (formula "88") (term "1,1"))
            (rule "add_literals" (formula "88") (term "1"))
            (rule "applyEqRigid" (formula "65") (term "0") (ifseqformula "64"))
            (rule "qeq_literals" (formula "65"))
            (rule "true_left" (formula "65"))
            (rule "applyEq" (formula "86") (term "1") (ifseqformula "64"))
            (rule "applyEqRigid" (formula "90") (term "0,1,0,1") (ifseqformula "64"))
            (rule "mul_literals" (formula "90") (term "1,0,1"))
            (rule "add_literals" (formula "90") (term "0,1"))
            (rule "inEqSimp_subsumption1" (formula "87") (ifseqformula "63"))
            (rule "leq_literals" (formula "87") (term "0"))
             (builtin "One Step Simplification" (formula "87"))
            (rule "true_left" (formula "87"))
            (rule "inEqSimp_subsumption1" (formula "87") (ifseqformula "65"))
            (rule "leq_literals" (formula "87") (term "0"))
             (builtin "One Step Simplification" (formula "87"))
            (rule "true_left" (formula "87"))
            (rule "methodCallEmpty" (formula "138") (term "1"))
            (rule "tryEmpty" (formula "138") (term "1"))
            (rule "emptyModality" (formula "138") (term "1"))
             (builtin "One Step Simplification" (formula "138") (ifInst ""  (formula "93")) (ifInst ""  (formula "104")) (ifInst ""  (formula "89")) (ifInst ""  (formula "104")))
            (rule "replaceKnownSelect_taclet0000_8" (formula "138") (term "1,1,0,0"))
            (rule "replaceKnownAuxiliaryConstant_taclet0000_9" (formula "138") (term "1,1,0,0"))
            (rule "replaceKnownSelect_taclet0000_10" (formula "138") (term "0,0,1,1,1,1,0"))
            (rule "replaceKnownAuxiliaryConstant_taclet0000_11" (formula "138") (term "0,0,1,1,1,1,0"))
            (rule "replaceKnownSelect_taclet0000_12" (formula "138") (term "0,0,1,0,1,1,1,0"))
            (rule "replaceKnownAuxiliaryConstant_taclet0000_13" (formula "138") (term "0,0,1,0,1,1,1,0"))
            (rule "replaceKnownSelect_taclet0000_12" (formula "138") (term "0,0,1,0,0,0,1,1,1,0"))
            (rule "replaceKnownSelect_taclet0000_10" (formula "138") (term "0,0,1,1,0,0,1,1,1,0"))
            (rule "replaceKnownAuxiliaryConstant_taclet0000_13" (formula "138") (term "0,0,1,0,0,0,1,1,1,0"))
            (rule "replaceKnownAuxiliaryConstant_taclet0000_11" (formula "138") (term "0,0,1,1,0,0,1,1,1,0"))
            (rule "replaceKnownSelect_taclet0000_12" (formula "138") (term "1,0,0,0,0,0,0,1,1,1,0"))
            (rule "replaceKnownSelect_taclet0000_10" (formula "138") (term "1,0,0,0,1,0,0,1,1,1,0"))
            (rule "replaceKnownAuxiliaryConstant_taclet0000_13" (formula "138") (term "1,0,0,0,0,0,0,1,1,1,0"))
            (rule "replaceKnownAuxiliaryConstant_taclet0000_11" (formula "138") (term "1,0,0,0,1,0,0,1,1,1,0"))
            (rule "eqSymm" (formula "138") (term "1,0,0,1"))
            (rule "replace_known_left" (formula "138") (term "1,1,1,1,0") (ifseqformula "91"))
             (builtin "One Step Simplification" (formula "138") (ifInst ""  (formula "97")) (ifInst ""  (formula "96")) (ifInst ""  (formula "101")) (ifInst ""  (formula "100")) (ifInst ""  (formula "90")))
            (rule "polySimp_homoEq" (formula "138") (term "0,0"))
            (rule "polySimp_addComm1" (formula "138") (term "0,0,0"))
            (rule "applyEq" (formula "138") (term "1,0,0,0") (ifseqformula "88"))
            (rule "polySimp_addComm1" (formula "138") (term "0,0,0"))
            (rule "polySimp_addAssoc" (formula "138") (term "0,0,0,0"))
            (rule "add_literals" (formula "138") (term "0,0,0,0,0"))
            (rule "mod_axiom" (formula "138") (term "0,1,0,0,0"))
            (rule "polySimp_mulLiterals" (formula "138") (term "1,0,1,0,0,0"))
            (rule "polySimp_mulComm0" (formula "138") (term "1,0,0,0"))
            (rule "polySimp_rightDist" (formula "138") (term "1,0,0,0"))
            (rule "polySimp_mulLiterals" (formula "138") (term "1,1,0,0,0"))
            (rule "polySimp_rightDist" (formula "138") (term "0,1,0,0,0"))
            (rule "mul_literals" (formula "138") (term "0,0,1,0,0,0"))
            (rule "polySimp_addAssoc" (formula "138") (term "0,0,0"))
            (rule "polySimp_addAssoc" (formula "138") (term "0,0,0,0"))
            (rule "polySimp_addComm1" (formula "138") (term "0,0,0,0,0"))
            (rule "add_literals" (formula "138") (term "0,0,0,0,0,0"))
            (rule "polySimp_pullOutFactor1b" (formula "138") (term "0,0,0,0"))
            (rule "add_literals" (formula "138") (term "1,1,0,0,0,0"))
            (rule "times_zero_1" (formula "138") (term "1,0,0,0,0"))
            (rule "add_literals" (formula "138") (term "0,0,0,0"))
            (rule "applyEq" (formula "138") (term "0,1,0,0,0") (ifseqformula "86"))
            (rule "mul_literals" (formula "138") (term "1,0,0,0"))
            (rule "add_literals" (formula "138") (term "0,0,0"))
             (builtin "One Step Simplification" (formula "138"))
            (rule "pullOutSelect" (formula "138") (term "0,0,1,0") (inst "selectSK=de_polyas_core3_open_cred_CredTool_print_1"))
            (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "84"))
             (builtin "One Step Simplification" (formula "1"))
            (rule "elementOfSingleton" (formula "1") (term "0,0"))
             (builtin "One Step Simplification" (formula "1"))
            (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "81"))
             (builtin "One Step Simplification" (formula "1"))
            (rule "replaceKnownSelect_taclet0_0" (formula "1") (term "0"))
            (rule "replaceKnownAuxiliaryConstant_taclet0_1" (formula "1") (term "0"))
            (rule "applyEqReverse" (formula "139") (term "0,0,1,0") (ifseqformula "1"))
            (rule "hideAuxiliaryEq" (formula "1"))
            (rule "replace_known_right" (formula "138") (term "0,1,0") (ifseqformula "106"))
             (builtin "One Step Simplification" (formula "138"))
            (rule "Class_invariant_axiom_for_de_polyas_core3_open_cred_CredentialGenerator_GeneratedDataForVoter" (formula "138") (term "0"))
            (rule "replaceKnownSelect_taclet0000_10" (formula "138") (term "0,0,1,0"))
            (rule "replaceKnownAuxiliaryConstant_taclet0000_11" (formula "138") (term "0,0,1,0"))
            (rule "replaceKnownSelect_taclet0000_17" (formula "138") (term "0,0,0,0,0"))
            (rule "replaceKnownSelect_taclet0000_12" (formula "138") (term "0,0,1,0,0"))
            (rule "replaceKnownAuxiliaryConstant_taclet0000_18" (formula "138") (term "0,0,0,0,0"))
            (rule "replaceKnownAuxiliaryConstant_taclet0000_13" (formula "138") (term "0,0,1,0,0"))
            (rule "replace_known_right" (formula "138") (term "0,1,0") (ifseqformula "100"))
             (builtin "One Step Simplification" (formula "138") (ifInst ""  (formula "92")) (ifInst ""  (formula "96")))
            (rule "allRight" (formula "138") (inst "sk=f_0"))
            (rule "allRight" (formula "138") (inst "sk=o_0"))
            (rule "orRight" (formula "138"))
            (rule "orRight" (formula "138"))
            (rule "orRight" (formula "138"))
            (rule "pullOutSelect" (formula "141") (term "0") (inst "selectSK=f_0_0"))
            (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "84"))
             (builtin "One Step Simplification" (formula "1"))
            (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,1,1,0,0") (ifseqformula "81"))
            (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,0,1,1,0,0") (ifseqformula "72"))
            (rule "eqSymm" (formula "142"))
            (rule "elementOfSingleton" (formula "1") (term "0,0,0,0"))
            (rule "replace_known_right" (formula "1") (term "0,0,0,0") (ifseqformula "140"))
             (builtin "One Step Simplification" (formula "1"))
            (rule "pullOutSelect" (formula "1") (term "2,0") (inst "selectSK=f_0_1"))
            (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "82"))
             (builtin "One Step Simplification" (formula "1"))
            (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,1,0,0") (ifseqformula "73"))
            (rule "pullOutSelect" (formula "1") (term "2,0") (inst "selectSK=f_0_2"))
            (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "74"))
             (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "143")))
            (rule "elementOfSingleton" (formula "1") (term "0,0,0"))
            (rule "replace_known_right" (formula "1") (term "0,0,0") (ifseqformula "141"))
             (builtin "One Step Simplification" (formula "1"))
            (rule "applyEqReverse" (formula "2") (term "2,0") (ifseqformula "1"))
            (rule "hideAuxiliaryEq" (formula "1"))
            (rule "commute_and" (formula "140"))
            (rule "commute_and" (formula "141"))
            (rule "commute_or_2" (formula "2") (term "0,1,0,0"))
            (rule "seqGetAlphaCast" (formula "58") (term "0"))
            (rule "castedGetAny" (formula "58") (term "0"))
             (builtin "One Step Simplification" (formula "58"))
            (rule "true_left" (formula "58"))
            (rule "lenNonNegative" (formula "59") (term "0"))
            (rule "inEqSimp_commuteLeq" (formula "59"))
            (rule "seqGetAlphaCast" (formula "62") (term "0"))
            (rule "castedGetAny" (formula "62") (term "0"))
             (builtin "One Step Simplification" (formula "62"))
            (rule "true_left" (formula "62"))
            (rule "seqGetAlphaCast" (formula "62") (term "0,0,0"))
            (rule "castedGetAny" (formula "62") (term "0"))
             (builtin "One Step Simplification" (formula "62"))
            (rule "true_left" (formula "62"))
            (rule "cut_direct" (formula "37") (term "0"))
            (branch "CUT: de.polyas.core3.open.cred.CredTool.FieldsForPolyasMode.MAX = null TRUE"
                (builtin "One Step Simplification" (formula "38"))
               (rule "true_left" (formula "38"))
               (rule "applyEq" (formula "39") (term "1,0") (ifseqformula "37"))
               (rule "replace_known_right" (formula "39") (term "0") (ifseqformula "120"))
                (builtin "One Step Simplification" (formula "39"))
               (rule "applyEq" (formula "18") (term "1,0") (ifseqformula "39"))
               (rule "replace_known_left" (formula "38") (term "1") (ifseqformula "18"))
                (builtin "One Step Simplification" (formula "38"))
               (rule "true_left" (formula "38"))
               (rule "applyEq" (formula "119") (term "0") (ifseqformula "38"))
               (rule "lenNonNegative" (formula "62") (term "0"))
               (rule "inEqSimp_commuteLeq" (formula "62"))
               (rule "cut_direct" (formula "77") (term "0"))
               (branch "CUT: result_1898.<created> = TRUE TRUE"
                   (builtin "One Step Simplification" (formula "78"))
                  (rule "true_left" (formula "78"))
                  (rule "onlyCreatedObjectsAreReferenced" (formula "101") (term "1,0") (ifseqformula "85"))
                  (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "100"))
                   (builtin "One Step Simplification" (formula "1"))
                  (rule "onlyCreatedObjectsAreReferenced" (formula "95") (term "0,0") (ifseqformula "86"))
                  (rule "replace_known_right" (formula "95") (term "0") (ifseqformula "105"))
                   (builtin "One Step Simplification" (formula "95"))
                  (rule "onlyCreatedObjectsAreReferenced" (formula "97") (term "0") (ifseqformula "86"))
                  (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "98"))
                   (builtin "One Step Simplification" (formula "1"))
                  (rule "ifthenelse_split" (formula "3") (term "0"))
                  (branch " ¬o_0 = null ∧ ¬( o_0.<created> = TRUE ∨ o_0.<created>@anon_heap_printStatus«anonHeapFunction» = TRUE) TRUE"
                     (rule "andLeft" (formula "3"))
                     (rule "notLeft" (formula "3"))
                     (rule "notLeft" (formula "3"))
                     (rule "orRight" (formula "98"))
                     (rule "applyEqReverse" (formula "4") (term "2,0") (ifseqformula "3"))
                     (rule "hideAuxiliaryEq" (formula "3"))
                     (rule "replace_known_right" (formula "3") (term "0,0,0,1,0,0") (ifseqformula "97"))
                      (builtin "One Step Simplification" (formula "3") (ifInst ""  (formula "99")) (ifInst ""  (formula "98")))
                     (rule "replace_known_right" (formula "148") (term "0,1") (ifseqformula "97"))
                      (builtin "One Step Simplification" (formula "148") (ifInst ""  (formula "99")))
                     (rule "closeTrue" (formula "148"))
                  )
                  (branch " ¬o_0 = null ∧ ¬( o_0.<created> = TRUE ∨ o_0.<created>@anon_heap_printStatus«anonHeapFunction» = TRUE) FALSE"
                     (rule "applyEqReverse" (formula "4") (term "2,0") (ifseqformula "3"))
                     (rule "hideAuxiliaryEq" (formula "3"))
                     (rule "cut_direct" (formula "146") (term "0,0"))
                     (branch "CUT: o_0 = null TRUE"
                         (builtin "One Step Simplification" (formula "147"))
                        (rule "false_right" (formula "147"))
                        (rule "replace_known_left" (formula "4") (term "0,0,0,0") (ifseqformula "1"))
                         (builtin "One Step Simplification" (formula "4") (ifInst ""  (formula "147")))
                        (rule "closeFalse" (formula "4"))
                     )
                     (branch "CUT: o_0 = null FALSE"
                         (builtin "One Step Simplification" (formula "147"))
                        (rule "notRight" (formula "147"))
                        (rule "replace_known_right" (formula "4") (term "0,0,0,0") (ifseqformula "147"))
                         (builtin "One Step Simplification" (formula "4") (ifInst ""  (formula "1")) (ifInst ""  (formula "148")))
                        (rule "closeFalse" (formula "4"))
                     )
                  )
               )
               (branch "CUT: result_1898.<created> = TRUE FALSE"
                   (builtin "One Step Simplification" (formula "77"))
                  (rule "onlyCreatedObjectsAreReferenced" (formula "102") (term "1,0") (ifseqformula "85"))
                  (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "101"))
                   (builtin "One Step Simplification" (formula "1"))
                  (rule "onlyCreatedObjectsAreReferenced" (formula "95") (term "0,0") (ifseqformula "86"))
                  (rule "replace_known_right" (formula "95") (term "0") (ifseqformula "106"))
                   (builtin "One Step Simplification" (formula "95"))
                  (rule "onlyCreatedObjectsAreReferenced" (formula "98") (term "0") (ifseqformula "86"))
                  (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "99"))
                   (builtin "One Step Simplification" (formula "1"))
                  (rule "ifthenelse_split" (formula "3") (term "0"))
                  (branch " ¬o_0 = null ∧ ¬( o_0.<created> = TRUE ∨ o_0.<created>@anon_heap_printStatus«anonHeapFunction» = TRUE) TRUE"
                     (rule "andLeft" (formula "3"))
                     (rule "notLeft" (formula "4"))
                     (rule "notLeft" (formula "3"))
                     (rule "orRight" (formula "99"))
                     (rule "applyEqReverse" (formula "4") (term "2,0") (ifseqformula "3"))
                     (rule "hideAuxiliaryEq" (formula "3"))
                     (rule "replace_known_right" (formula "3") (term "1,0,1,0,0") (ifseqformula "99"))
                      (builtin "One Step Simplification" (formula "3") (ifInst ""  (formula "97")) (ifInst ""  (formula "98")))
                     (rule "replace_known_right" (formula "147") (term "1") (ifseqformula "97"))
                      (builtin "One Step Simplification" (formula "147"))
                     (rule "false_right" (formula "147"))
                     (rule "replace_known_right" (formula "148") (term "0,0") (ifseqformula "97"))
                      (builtin "One Step Simplification" (formula "148") (ifInst ""  (formula "98")))
                     (rule "closeTrue" (formula "148"))
                  )
                  (branch " ¬o_0 = null ∧ ¬( o_0.<created> = TRUE ∨ o_0.<created>@anon_heap_printStatus«anonHeapFunction» = TRUE) FALSE"
                     (rule "applyEqReverse" (formula "4") (term "2,0") (ifseqformula "3"))
                     (rule "hideAuxiliaryEq" (formula "3"))
                     (rule "cut_direct" (formula "147") (term "0,0"))
                     (branch "CUT: o_0 = null TRUE"
                         (builtin "One Step Simplification" (formula "148"))
                        (rule "false_right" (formula "148"))
                        (rule "replace_known_left" (formula "4") (term "0,0,0,0") (ifseqformula "1"))
                         (builtin "One Step Simplification" (formula "4") (ifInst ""  (formula "148")))
                        (rule "closeFalse" (formula "4"))
                     )
                     (branch "CUT: o_0 = null FALSE"
                         (builtin "One Step Simplification" (formula "148"))
                        (rule "notRight" (formula "148"))
                        (rule "replace_known_left" (formula "4") (term "0,0,0,1,0,0") (ifseqformula "1"))
                         (builtin "One Step Simplification" (formula "4") (ifInst ""  (formula "148")) (ifInst ""  (formula "149")))
                        (rule "closeFalse" (formula "4"))
                     )
                  )
               )
            )
            (branch "CUT: de.polyas.core3.open.cred.CredTool.FieldsForPolyasMode.MAX = null FALSE"
                (builtin "One Step Simplification" (formula "37"))
               (rule "cut_direct" (formula "38") (term "0"))
               (branch "CUT: de.polyas.core3.open.cred.CredTool.FieldsForPolyasMode.MIN = null TRUE"
                   (builtin "One Step Simplification" (formula "39"))
                  (rule "true_left" (formula "39"))
                  (rule "applyEq" (formula "39") (term "1,1") (ifseqformula "38"))
                  (rule "replace_known_right" (formula "39") (term "1") (ifseqformula "121"))
                   (builtin "One Step Simplification" (formula "39"))
                  (rule "applyEq" (formula "121") (term "0") (ifseqformula "39"))
                  (rule "applyEq" (formula "18") (term "1,0") (ifseqformula "39"))
                  (rule "lenNonNegative" (formula "62") (term "0"))
                  (rule "inEqSimp_commuteLeq" (formula "62"))
                  (rule "cut_direct" (formula "77") (term "0"))
                  (branch "CUT: result_1898.<created> = TRUE TRUE"
                      (builtin "One Step Simplification" (formula "78"))
                     (rule "true_left" (formula "78"))
                     (rule "onlyCreatedObjectsAreReferenced" (formula "96") (term "0") (ifseqformula "85"))
                     (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "97"))
                      (builtin "One Step Simplification" (formula "1"))
                     (rule "onlyCreatedObjectsAreReferenced" (formula "102") (term "1,0") (ifseqformula "86"))
                     (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "102"))
                      (builtin "One Step Simplification" (formula "1"))
                     (rule "onlyCreatedObjectsAreReferenced" (formula "109") (term "1,0") (ifseqformula "87"))
                     (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "107"))
                      (builtin "One Step Simplification" (formula "1"))
                     (rule "ifthenelse_split" (formula "4") (term "0"))
                     (branch " ¬o_0 = null ∧ ¬( o_0.<created> = TRUE ∨ o_0.<created>@anon_heap_printStatus«anonHeapFunction» = TRUE) TRUE"
                        (rule "andLeft" (formula "4"))
                        (rule "notLeft" (formula "4"))
                        (rule "notLeft" (formula "4"))
                        (rule "orRight" (formula "98"))
                        (rule "applyEqReverse" (formula "5") (term "2,0") (ifseqformula "4"))
                        (rule "hideAuxiliaryEq" (formula "4"))
                        (rule "replace_known_right" (formula "4") (term "1,0,1,0,0") (ifseqformula "98"))
                         (builtin "One Step Simplification" (formula "4") (ifInst ""  (formula "99")) (ifInst ""  (formula "97")))
                        (rule "replace_known_right" (formula "148") (term "0,1") (ifseqformula "97"))
                         (builtin "One Step Simplification" (formula "148") (ifInst ""  (formula "99")))
                        (rule "closeTrue" (formula "148"))
                     )
                     (branch " ¬o_0 = null ∧ ¬( o_0.<created> = TRUE ∨ o_0.<created>@anon_heap_printStatus«anonHeapFunction» = TRUE) FALSE"
                        (rule "applyEqReverse" (formula "5") (term "2,0") (ifseqformula "4"))
                        (rule "hideAuxiliaryEq" (formula "4"))
                        (rule "cut_direct" (formula "146") (term "0,0"))
                        (branch "CUT: o_0 = null TRUE"
                            (builtin "One Step Simplification" (formula "147"))
                           (rule "false_right" (formula "147"))
                           (rule "replace_known_left" (formula "5") (term "0,0,0,0") (ifseqformula "1"))
                            (builtin "One Step Simplification" (formula "5") (ifInst ""  (formula "147")))
                           (rule "closeFalse" (formula "5"))
                        )
                        (branch "CUT: o_0 = null FALSE"
                            (builtin "One Step Simplification" (formula "147"))
                           (rule "notRight" (formula "147"))
                           (rule "replace_known_left" (formula "5") (term "0,0,0,1,0,0") (ifseqformula "1"))
                            (builtin "One Step Simplification" (formula "5") (ifInst ""  (formula "147")) (ifInst ""  (formula "148")))
                           (rule "closeFalse" (formula "5"))
                        )
                     )
                  )
                  (branch "CUT: result_1898.<created> = TRUE FALSE"
                      (builtin "One Step Simplification" (formula "77"))
                     (rule "onlyCreatedObjectsAreReferenced" (formula "97") (term "0") (ifseqformula "85"))
                     (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "98"))
                      (builtin "One Step Simplification" (formula "1"))
                     (rule "onlyCreatedObjectsAreReferenced" (formula "103") (term "1,0") (ifseqformula "86"))
                     (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "103"))
                      (builtin "One Step Simplification" (formula "1"))
                     (rule "onlyCreatedObjectsAreReferenced" (formula "110") (term "1,0") (ifseqformula "87"))
                     (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "108"))
                      (builtin "One Step Simplification" (formula "1"))
                     (rule "ifthenelse_split" (formula "4") (term "0"))
                     (branch " ¬o_0 = null ∧ ¬( o_0.<created> = TRUE ∨ o_0.<created>@anon_heap_printStatus«anonHeapFunction» = TRUE) TRUE"
                        (rule "andLeft" (formula "4"))
                        (rule "notLeft" (formula "5"))
                        (rule "notLeft" (formula "4"))
                        (rule "orRight" (formula "99"))
                        (rule "applyEqReverse" (formula "5") (term "2,0") (ifseqformula "4"))
                        (rule "hideAuxiliaryEq" (formula "4"))
                        (rule "replace_known_right" (formula "4") (term "1,0,1,0,0") (ifseqformula "99"))
                         (builtin "One Step Simplification" (formula "4") (ifInst ""  (formula "97")) (ifInst ""  (formula "98")))
                        (rule "replace_known_right" (formula "148") (term "1") (ifseqformula "97"))
                         (builtin "One Step Simplification" (formula "148"))
                        (rule "false_right" (formula "148"))
                        (rule "replace_known_right" (formula "148") (term "0,0") (ifseqformula "97"))
                         (builtin "One Step Simplification" (formula "148") (ifInst ""  (formula "98")))
                        (rule "closeTrue" (formula "148"))
                     )
                     (branch " ¬o_0 = null ∧ ¬( o_0.<created> = TRUE ∨ o_0.<created>@anon_heap_printStatus«anonHeapFunction» = TRUE) FALSE"
                        (rule "applyEqReverse" (formula "5") (term "2,0") (ifseqformula "4"))
                        (rule "hideAuxiliaryEq" (formula "4"))
                        (rule "cut_direct" (formula "147") (term "0,0"))
                        (branch "CUT: o_0 = null TRUE"
                            (builtin "One Step Simplification" (formula "148"))
                           (rule "false_right" (formula "148"))
                           (rule "replace_known_left" (formula "5") (term "0,0,0,0") (ifseqformula "1"))
                            (builtin "One Step Simplification" (formula "5") (ifInst ""  (formula "148")))
                           (rule "closeFalse" (formula "5"))
                        )
                        (branch "CUT: o_0 = null FALSE"
                            (builtin "One Step Simplification" (formula "148"))
                           (rule "notRight" (formula "148"))
                           (rule "replace_known_right" (formula "5") (term "0,0,0,0") (ifseqformula "148"))
                            (builtin "One Step Simplification" (formula "5") (ifInst ""  (formula "1")) (ifInst ""  (formula "149")))
                           (rule "closeFalse" (formula "5"))
                        )
                     )
                  )
               )
               (branch "CUT: de.polyas.core3.open.cred.CredTool.FieldsForPolyasMode.MIN = null FALSE"
                   (builtin "One Step Simplification" (formula "38"))
                  (rule "lenNonNegative" (formula "63") (term "0"))
                  (rule "inEqSimp_commuteLeq" (formula "63"))
                  (rule "cut_direct" (formula "78") (term "0"))
                  (branch "CUT: result_1898.<created> = TRUE TRUE"
                      (builtin "One Step Simplification" (formula "79"))
                     (rule "true_left" (formula "79"))
                     (rule "cut_direct" (formula "39") (term "1"))
                     (branch "CUT: de.polyas.core3.open.cred.CredTool.polyasMode = de.polyas.core3.open.cred.CredTool.FieldsForPolyasMode.MIN TRUE"
                         (builtin "One Step Simplification" (formula "40"))
                        (rule "true_left" (formula "40"))
                        (rule "applyEq" (formula "123") (term "0") (ifseqformula "39"))
                        (rule "applyEq" (formula "18") (term "1,0") (ifseqformula "39"))
                        (rule "onlyCreatedObjectsAreReferenced" (formula "104") (term "1,0") (ifseqformula "85"))
                        (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "102"))
                         (builtin "One Step Simplification" (formula "1"))
                        (rule "onlyCreatedObjectsAreReferenced" (formula "95") (term "0,0") (ifseqformula "86"))
                        (rule "replace_known_right" (formula "95") (term "0") (ifseqformula "107"))
                         (builtin "One Step Simplification" (formula "95"))
                        (rule "onlyCreatedObjectsAreReferenced" (formula "99") (term "0") (ifseqformula "86"))
                        (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "100"))
                         (builtin "One Step Simplification" (formula "1"))
                        (rule "ifthenelse_split" (formula "3") (term "0"))
                        (branch " ¬o_0 = null ∧ ¬( o_0.<created> = TRUE ∨ o_0.<created>@anon_heap_printStatus«anonHeapFunction» = TRUE) TRUE"
                           (rule "andLeft" (formula "3"))
                           (rule "notLeft" (formula "4"))
                           (rule "notLeft" (formula "3"))
                           (rule "orRight" (formula "99"))
                           (rule "applyEqReverse" (formula "4") (term "2,0") (ifseqformula "3"))
                           (rule "hideAuxiliaryEq" (formula "3"))
                           (rule "replace_known_right" (formula "3") (term "1,0,1,0,0") (ifseqformula "99"))
                            (builtin "One Step Simplification" (formula "3") (ifInst ""  (formula "97")) (ifInst ""  (formula "98")))
                           (rule "replace_known_right" (formula "149") (term "0,1") (ifseqformula "98"))
                            (builtin "One Step Simplification" (formula "149") (ifInst ""  (formula "97")))
                           (rule "closeTrue" (formula "149"))
                        )
                        (branch " ¬o_0 = null ∧ ¬( o_0.<created> = TRUE ∨ o_0.<created>@anon_heap_printStatus«anonHeapFunction» = TRUE) FALSE"
                           (rule "applyEqReverse" (formula "4") (term "2,0") (ifseqformula "3"))
                           (rule "hideAuxiliaryEq" (formula "3"))
                           (rule "cut_direct" (formula "147") (term "0,0"))
                           (branch "CUT: o_0 = null TRUE"
                               (builtin "One Step Simplification" (formula "148"))
                              (rule "false_right" (formula "148"))
                              (rule "replace_known_left" (formula "4") (term "0,0,0,0") (ifseqformula "1"))
                               (builtin "One Step Simplification" (formula "4") (ifInst ""  (formula "148")))
                              (rule "closeFalse" (formula "4"))
                           )
                           (branch "CUT: o_0 = null FALSE"
                               (builtin "One Step Simplification" (formula "148"))
                              (rule "notRight" (formula "148"))
                              (rule "replace_known_left" (formula "4") (term "0,0,0,1,0,0") (ifseqformula "1"))
                               (builtin "One Step Simplification" (formula "4") (ifInst ""  (formula "148")) (ifInst ""  (formula "149")))
                              (rule "closeFalse" (formula "4"))
                           )
                        )
                     )
                     (branch "CUT: de.polyas.core3.open.cred.CredTool.polyasMode = de.polyas.core3.open.cred.CredTool.FieldsForPolyasMode.MIN FALSE"
                         (builtin "One Step Simplification" (formula "39"))
                        (rule "applyEq" (formula "18") (term "1,0") (ifseqformula "39"))
                        (rule "applyEq" (formula "123") (term "0") (ifseqformula "38"))
                        (rule "applyEq" (formula "95") (term "0") (ifseqformula "38"))
                        (rule "eqSymm" (formula "95"))
                        (rule "onlyCreatedObjectsAreReferenced" (formula "104") (term "1,0") (ifseqformula "85"))
                        (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "103"))
                         (builtin "One Step Simplification" (formula "1"))
                        (rule "onlyCreatedObjectsAreReferenced" (formula "95") (term "0,0") (ifseqformula "86"))
                        (rule "replace_known_right" (formula "95") (term "0") (ifseqformula "108"))
                         (builtin "One Step Simplification" (formula "95"))
                        (rule "onlyCreatedObjectsAreReferenced" (formula "100") (term "0") (ifseqformula "86"))
                        (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "101"))
                         (builtin "One Step Simplification" (formula "1"))
                        (rule "ifthenelse_split" (formula "3") (term "0"))
                        (branch " ¬o_0 = null ∧ ¬( o_0.<created> = TRUE ∨ o_0.<created>@anon_heap_printStatus«anonHeapFunction» = TRUE) TRUE"
                           (rule "andLeft" (formula "3"))
                           (rule "notLeft" (formula "4"))
                           (rule "notLeft" (formula "3"))
                           (rule "orRight" (formula "99"))
                           (rule "applyEqReverse" (formula "4") (term "2,0") (ifseqformula "3"))
                           (rule "hideAuxiliaryEq" (formula "3"))
                           (rule "replace_known_right" (formula "3") (term "0,0,0,0") (ifseqformula "97"))
                            (builtin "One Step Simplification" (formula "3") (ifInst ""  (formula "98")) (ifInst ""  (formula "99")))
                           (rule "replace_known_right" (formula "150") (term "0,0") (ifseqformula "97"))
                            (builtin "One Step Simplification" (formula "150") (ifInst ""  (formula "98")))
                           (rule "closeTrue" (formula "150"))
                        )
                        (branch " ¬o_0 = null ∧ ¬( o_0.<created> = TRUE ∨ o_0.<created>@anon_heap_printStatus«anonHeapFunction» = TRUE) FALSE"
                           (rule "applyEqReverse" (formula "4") (term "2,0") (ifseqformula "3"))
                           (rule "hideAuxiliaryEq" (formula "3"))
                           (rule "cut_direct" (formula "148") (term "0,0"))
                           (branch "CUT: o_0 = null TRUE"
                               (builtin "One Step Simplification" (formula "149"))
                              (rule "false_right" (formula "149"))
                              (rule "replace_known_left" (formula "4") (term "0,0,0,0") (ifseqformula "1"))
                               (builtin "One Step Simplification" (formula "4") (ifInst ""  (formula "149")))
                              (rule "closeFalse" (formula "4"))
                           )
                           (branch "CUT: o_0 = null FALSE"
                               (builtin "One Step Simplification" (formula "149"))
                              (rule "notRight" (formula "149"))
                              (rule "replace_known_right" (formula "4") (term "0,0,0,0") (ifseqformula "149"))
                               (builtin "One Step Simplification" (formula "4") (ifInst ""  (formula "1")) (ifInst ""  (formula "150")))
                              (rule "closeFalse" (formula "4"))
                           )
                        )
                     )
                  )
                  (branch "CUT: result_1898.<created> = TRUE FALSE"
                      (builtin "One Step Simplification" (formula "78"))
                     (rule "cut_direct" (formula "39") (term "1"))
                     (branch "CUT: de.polyas.core3.open.cred.CredTool.polyasMode = de.polyas.core3.open.cred.CredTool.FieldsForPolyasMode.MIN TRUE"
                         (builtin "One Step Simplification" (formula "40"))
                        (rule "true_left" (formula "40"))
                        (rule "applyEq" (formula "18") (term "1,0") (ifseqformula "39"))
                        (rule "applyEq" (formula "123") (term "0") (ifseqformula "38"))
                        (rule "onlyCreatedObjectsAreReferenced" (formula "104") (term "1,0") (ifseqformula "85"))
                        (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "103"))
                         (builtin "One Step Simplification" (formula "1"))
                        (rule "onlyCreatedObjectsAreReferenced" (formula "95") (term "0,0") (ifseqformula "86"))
                        (rule "replace_known_right" (formula "95") (term "0") (ifseqformula "108"))
                         (builtin "One Step Simplification" (formula "95"))
                        (rule "onlyCreatedObjectsAreReferenced" (formula "100") (term "0") (ifseqformula "86"))
                        (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "101"))
                         (builtin "One Step Simplification" (formula "1"))
                        (rule "ifthenelse_split" (formula "3") (term "0"))
                        (branch " ¬o_0 = null ∧ ¬( o_0.<created> = TRUE ∨ o_0.<created>@anon_heap_printStatus«anonHeapFunction» = TRUE) TRUE"
                           (rule "andLeft" (formula "3"))
                           (rule "notLeft" (formula "4"))
                           (rule "notLeft" (formula "3"))
                           (rule "orRight" (formula "99"))
                           (rule "applyEqReverse" (formula "4") (term "2,0") (ifseqformula "3"))
                           (rule "hideAuxiliaryEq" (formula "3"))
                           (rule "replace_known_right" (formula "3") (term "1,0,1,0,0") (ifseqformula "99"))
                            (builtin "One Step Simplification" (formula "3") (ifInst ""  (formula "97")) (ifInst ""  (formula "98")))
                           (rule "replace_known_right" (formula "149") (term "1") (ifseqformula "97"))
                            (builtin "One Step Simplification" (formula "149"))
                           (rule "false_right" (formula "149"))
                           (rule "replace_known_right" (formula "149") (term "0,0") (ifseqformula "97"))
                            (builtin "One Step Simplification" (formula "149") (ifInst ""  (formula "98")))
                           (rule "closeTrue" (formula "149"))
                        )
                        (branch " ¬o_0 = null ∧ ¬( o_0.<created> = TRUE ∨ o_0.<created>@anon_heap_printStatus«anonHeapFunction» = TRUE) FALSE"
                           (rule "applyEqReverse" (formula "4") (term "2,0") (ifseqformula "3"))
                           (rule "hideAuxiliaryEq" (formula "3"))
                           (rule "cut_direct" (formula "148") (term "0,0"))
                           (branch "CUT: o_0 = null TRUE"
                               (builtin "One Step Simplification" (formula "149"))
                              (rule "false_right" (formula "149"))
                              (rule "replace_known_left" (formula "4") (term "0,0,0,0") (ifseqformula "1"))
                               (builtin "One Step Simplification" (formula "4") (ifInst ""  (formula "149")))
                              (rule "closeFalse" (formula "4"))
                           )
                           (branch "CUT: o_0 = null FALSE"
                               (builtin "One Step Simplification" (formula "149"))
                              (rule "notRight" (formula "149"))
                              (rule "replace_known_left" (formula "4") (term "0,0,0,1,0,0") (ifseqformula "1"))
                               (builtin "One Step Simplification" (formula "4") (ifInst ""  (formula "149")) (ifInst ""  (formula "150")))
                              (rule "closeFalse" (formula "4"))
                           )
                        )
                     )
                     (branch "CUT: de.polyas.core3.open.cred.CredTool.polyasMode = de.polyas.core3.open.cred.CredTool.FieldsForPolyasMode.MIN FALSE"
                         (builtin "One Step Simplification" (formula "39"))
                        (rule "applyEq" (formula "96") (term "0") (ifseqformula "39"))
                        (rule "eqSymm" (formula "96"))
                        (rule "applyEq" (formula "18") (term "1,0") (ifseqformula "39"))
                        (rule "applyEq" (formula "124") (term "0") (ifseqformula "38"))
                        (rule "onlyCreatedObjectsAreReferenced" (formula "106") (term "1,0") (ifseqformula "85"))
                        (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "104"))
                         (builtin "One Step Simplification" (formula "1"))
                        (rule "onlyCreatedObjectsAreReferenced" (formula "111") (term "1,0") (ifseqformula "86"))
                        (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "109"))
                         (builtin "One Step Simplification" (formula "1"))
                        (rule "onlyCreatedObjectsAreReferenced" (formula "101") (term "0") (ifseqformula "87"))
                        (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "102"))
                         (builtin "One Step Simplification" (formula "1"))
                        (rule "ifthenelse_split" (formula "4") (term "0"))
                        (branch " ¬o_0 = null ∧ ¬( o_0.<created> = TRUE ∨ o_0.<created>@anon_heap_printStatus«anonHeapFunction» = TRUE) TRUE"
                           (rule "andLeft" (formula "4"))
                           (rule "notLeft" (formula "5"))
                           (rule "notLeft" (formula "4"))
                           (rule "orRight" (formula "99"))
                           (rule "applyEqReverse" (formula "5") (term "2,0") (ifseqformula "4"))
                           (rule "hideAuxiliaryEq" (formula "4"))
                           (rule "replace_known_right" (formula "4") (term "0,0,0,1,0,0") (ifseqformula "98"))
                            (builtin "One Step Simplification" (formula "4") (ifInst ""  (formula "97")) (ifInst ""  (formula "99")))
                           (rule "replace_known_right" (formula "150") (term "1") (ifseqformula "97"))
                            (builtin "One Step Simplification" (formula "150"))
                           (rule "false_right" (formula "150"))
                           (rule "replace_known_right" (formula "150") (term "0,1") (ifseqformula "98"))
                            (builtin "One Step Simplification" (formula "150") (ifInst ""  (formula "97")))
                           (rule "closeTrue" (formula "150"))
                        )
                        (branch " ¬o_0 = null ∧ ¬( o_0.<created> = TRUE ∨ o_0.<created>@anon_heap_printStatus«anonHeapFunction» = TRUE) FALSE"
                           (rule "applyEqReverse" (formula "5") (term "2,0") (ifseqformula "4"))
                           (rule "hideAuxiliaryEq" (formula "4"))
                           (rule "cut_direct" (formula "149") (term "0,0"))
                           (branch "CUT: o_0 = null TRUE"
                               (builtin "One Step Simplification" (formula "150"))
                              (rule "false_right" (formula "150"))
                              (rule "replace_known_left" (formula "5") (term "0,0,0,0") (ifseqformula "1"))
                               (builtin "One Step Simplification" (formula "5") (ifInst ""  (formula "150")))
                              (rule "closeFalse" (formula "5"))
                           )
                           (branch "CUT: o_0 = null FALSE"
                               (builtin "One Step Simplification" (formula "150"))
                              (rule "notRight" (formula "150"))
                              (rule "replace_known_right" (formula "5") (term "0,0,0,0") (ifseqformula "150"))
                               (builtin "One Step Simplification" (formula "5") (ifInst ""  (formula "1")) (ifInst ""  (formula "151")))
                              (rule "closeFalse" (formula "5"))
                           )
                        )
                     )
                  )
               )
            )
         )
         (branch "Exceptional Post (generateDataForVoter)"
             (builtin "One Step Simplification" (formula "75"))
             (builtin "One Step Simplification" (formula "109"))
            (rule "selectCreatedOfAnonAsFormulaEQ" (formula "75") (term "0,0,1,0,0,0,0,1,1,0,1,1") (ifseqformula "72"))
            (rule "selectCreatedOfAnonAsFormulaEQ" (formula "75") (term "0,0,0,0,0,0,0,0,1,1,0,1,1") (ifseqformula "72"))
            (rule "selectCreatedOfAnonAsFormulaEQ" (formula "75") (term "0,0,1,0,0,0,0,0,1,1,0,1,1") (ifseqformula "72"))
            (rule "selectCreatedOfAnonAsFormulaEQ" (formula "75") (term "0,0,0,1,0,0,0,0,1,1,0,1,1") (ifseqformula "63"))
            (rule "selectCreatedOfAnonAsFormulaEQ" (formula "75") (term "0,0,0,1,0,0,0,0,0,1,1,0,1,1") (ifseqformula "63"))
            (rule "selectCreatedOfAnonAsFormulaEQ" (formula "75") (term "0,0,0,0,0,0,0,0,0,1,1,0,1,1") (ifseqformula "63"))
            (rule "andLeft" (formula "75"))
            (rule "selectCreatedOfAnonAsFormulaEQ" (formula "76") (term "1,0") (ifseqformula "75"))
            (rule "selectCreatedOfAnonAsFormulaEQ" (formula "76") (term "0,1,0") (ifseqformula "72"))
            (rule "selectCreatedOfAnonAsFormulaEQ" (formula "76") (term "0,0,1,0") (ifseqformula "63"))
            (rule "andLeft" (formula "76"))
            (rule "andLeft" (formula "76"))
            (rule "andLeft" (formula "78"))
            (rule "notLeft" (formula "76"))
            (rule "close" (formula "79") (ifseqformula "78"))
         )
         (branch "Pre (generateDataForVoter)"
             (builtin "One Step Simplification" (formula "107") (ifInst ""  (formula "74")) (ifInst ""  (formula "105")) (ifInst ""  (formula "74")) (ifInst ""  (formula "105")))
            (rule "selectCreatedOfAnonAsFormulaEQ" (formula "107") (term "1,1") (ifseqformula "72"))
            (rule "selectCreatedOfAnonAsFormulaEQ" (formula "107") (term "1,0,1") (ifseqformula "72"))
            (rule "wellFormedAnonEQ" (formula "107") (term "0,0,1") (ifseqformula "72"))
            (rule "selectCreatedOfAnonAsFormulaEQ" (formula "107") (term "0,1,1") (ifseqformula "63"))
            (rule "wellFormedAnonEQ" (formula "107") (term "0,0,0,1") (ifseqformula "63"))
            (rule "selectCreatedOfAnonAsFormulaEQ" (formula "107") (term "0,1,0,1") (ifseqformula "63"))
            (rule "translateJavaSubInt" (formula "107") (term "1,1,0,1,1,1,0"))
            (rule "replace_known_left" (formula "107") (term "0,0,1,1") (ifseqformula "28"))
             (builtin "One Step Simplification" (formula "107") (ifInst ""  (formula "24")) (ifInst ""  (formula "62")) (ifInst ""  (formula "71")) (ifInst ""  (formula "66")))
            (rule "inEqSimp_ltToLeq" (formula "107") (term "1,0,1,1,1"))
            (rule "polySimp_mulComm0" (formula "107") (term "1,0,0,1,0,1,1,1"))
            (rule "polySimp_addComm1" (formula "107") (term "0,1,0,1,1,1"))
            (rule "inEqSimp_commuteLeq" (formula "107") (term "0,0,1,1,1"))
            (rule "inEqSimp_sepNegMonomial0" (formula "107") (term "1,0,1,1,1"))
            (rule "polySimp_mulLiterals" (formula "107") (term "0,1,0,1,1,1"))
            (rule "polySimp_elimOne" (formula "107") (term "0,1,0,1,1,1"))
            (rule "pullOutSelect" (formula "107") (term "0,0,0,1,1,1") (inst "selectSK=de_polyas_core3_open_crypto_basic_Hashes_currentIndex_0"))
            (rule "applyEq" (formula "108") (term "1,1,1,0,1,1,1") (ifseqformula "1"))
            (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "73"))
             (builtin "One Step Simplification" (formula "1"))
            (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "64"))
             (builtin "One Step Simplification" (formula "1"))
            (rule "elementOfSingleton" (formula "1") (term "0,0"))
             (builtin "One Step Simplification" (formula "1"))
            (rule "applyEqReverse" (formula "108") (term "1,1,1,0,1,1,1") (ifseqformula "1"))
            (rule "applyEqReverse" (formula "108") (term "0,0,0,1,1,1") (ifseqformula "1"))
            (rule "hideAuxiliaryEq" (formula "1"))
            (rule "replace_known_left" (formula "107") (term "0,0,1,1,1") (ifseqformula "57"))
             (builtin "One Step Simplification" (formula "107"))
            (rule "pullOutSelect" (formula "107") (term "0,0,0,0,1,1,1") (inst "selectSK=de_polyas_core3_open_crypto_basic_Hashes_VALUES_0"))
            (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "73"))
             (builtin "One Step Simplification" (formula "1"))
            (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "64"))
             (builtin "One Step Simplification" (formula "1"))
            (rule "elementOfSingleton" (formula "1") (term "0,0"))
             (builtin "One Step Simplification" (formula "1"))
            (rule "applyEqReverse" (formula "108") (term "0,0,0,0,1,1,1") (ifseqformula "1"))
            (rule "hideAuxiliaryEq" (formula "1"))
            (rule "inEqSimp_homoInEq1" (formula "107") (term "0,1,1,1"))
            (rule "polySimp_addComm1" (formula "107") (term "0,0,1,1,1"))
            (rule "inEqSimp_sepPosMonomial0" (formula "107") (term "0,1,1,1"))
            (rule "polySimp_mulComm0" (formula "107") (term "1,0,1,1,1"))
            (rule "polySimp_rightDist" (formula "107") (term "1,0,1,1,1"))
            (rule "mul_literals" (formula "107") (term "0,1,0,1,1,1"))
            (rule "polySimp_mulLiterals" (formula "107") (term "1,1,0,1,1,1"))
            (rule "polySimp_elimOne" (formula "107") (term "1,1,0,1,1,1"))
            (rule "expand_subJint" (formula "107") (term "1,1,0,1,1,1"))
            (rule "polySimp_elimSub" (formula "107") (term "0,1,1,0,1,1,1"))
            (rule "mul_literals" (formula "107") (term "1,0,1,1,0,1,1,1"))
            (rule "polySimp_addComm0" (formula "107") (term "0,1,1,0,1,1,1"))
            (rule "expand_moduloInteger" (formula "107") (term "1,1,0,1,1,1"))
            (rule "replace_int_MIN" (formula "107") (term "0,1,1,0,1,1,1"))
            (rule "replace_int_RANGE" (formula "107") (term "1,1,1,1,0,1,1,1"))
            (rule "replace_int_HALFRANGE" (formula "107") (term "0,0,1,1,1,0,1,1,1"))
            (rule "polySimp_addAssoc" (formula "107") (term "0,1,1,1,0,1,1,1"))
            (rule "add_literals" (formula "107") (term "0,0,1,1,1,0,1,1,1"))
            (rule "polySimp_addAssoc" (formula "107") (term "1,0,1,1,1"))
            (rule "add_literals" (formula "107") (term "0,1,0,1,1,1"))
            (rule "mod_axiom" (formula "107") (term "1,1,0,1,1,1"))
            (rule "polySimp_mulLiterals" (formula "107") (term "1,1,1,0,1,1,1"))
            (rule "polySimp_addAssoc" (formula "107") (term "1,0,1,1,1"))
            (rule "polySimp_addAssoc" (formula "107") (term "0,1,0,1,1,1"))
            (rule "add_literals" (formula "107") (term "0,0,1,0,1,1,1"))
            (rule "applyEq" (formula "107") (term "0,1,1,0,1,1,1") (ifseqformula "60"))
            (rule "times_zero_2" (formula "107") (term "1,1,0,1,1,1"))
            (rule "add_zero_right" (formula "107") (term "1,0,1,1,1"))
            (rule "replace_known_left" (formula "107") (term "0,1,1,1") (ifseqformula "61"))
             (builtin "One Step Simplification" (formula "107"))
            (rule "Static_class_invariant_axiom_for_de_polyas_core3_open_cred_CredentialGenerator" (formula "107") (term "1,1,1"))
            (rule "pullOutSelect" (formula "107") (term "0,0,1,0,0,1,1,1") (inst "selectSK=de_polyas_core3_open_cred_CredentialGenerator_RANDOM_0"))
            (rule "applyEq" (formula "108") (term "1,1,1,1,1") (ifseqformula "1"))
            (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "73"))
             (builtin "One Step Simplification" (formula "1"))
            (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "64"))
             (builtin "One Step Simplification" (formula "1"))
            (rule "elementOfSingleton" (formula "1") (term "0,0"))
             (builtin "One Step Simplification" (formula "1"))
            (rule "applyEqReverse" (formula "108") (term "0,0,1,0,0,1,1,1") (ifseqformula "1"))
            (rule "applyEqReverse" (formula "108") (term "1,1,1,1,1") (ifseqformula "1"))
            (rule "hideAuxiliaryEq" (formula "1"))
            (rule "replace_known_right" (formula "107") (term "0,1,0,0,1,1,1") (ifseqformula "101"))
             (builtin "One Step Simplification" (formula "107"))
            (rule "pullOutSelect" (formula "107") (term "1,1,0,1,1,1") (inst "selectSK=de_polyas_core3_open_cred_CredentialGenerator_GROUP_0"))
            (rule "applyEq" (formula "108") (term "0,0,0,0,1,1,1") (ifseqformula "1"))
            (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "73"))
             (builtin "One Step Simplification" (formula "1"))
            (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "64"))
             (builtin "One Step Simplification" (formula "1"))
            (rule "elementOfSingleton" (formula "1") (term "0,0"))
             (builtin "One Step Simplification" (formula "1"))
            (rule "applyEqReverse" (formula "108") (term "0,0,0,0,1,1,1") (ifseqformula "1"))
            (rule "applyEqReverse" (formula "108") (term "1,1,0,1,1,1") (ifseqformula "1"))
            (rule "hideAuxiliaryEq" (formula "1"))
            (rule "replace_known_right" (formula "107") (term "0,0,0,1,1,1") (ifseqformula "102"))
             (builtin "One Step Simplification" (formula "107"))
            (rule "Class_invariant_axiom_for_java_security_SecureRandom" (formula "107") (term "1,1,1,1"))
             (builtin "One Step Simplification" (formula "107"))
            (rule "Static_class_invariant_axiom_for_de_polyas_core3_open_crypto_basic_Hashes" (formula "107") (term "0,1,1"))
            (rule "replaceKnownSelect_taclet2000_11" (formula "107") (term "1,0,1,1"))
            (rule "replaceKnownAuxiliaryConstant_taclet2000_13" (formula "107") (term "1,0,1,1"))
            (rule "nonNull" (formula "107") (term "0,1,1") (inst "i=i"))
            (rule "greater_literals" (formula "107") (term "0,1,0,1,1"))
             (builtin "One Step Simplification" (formula "107") (ifInst ""  (formula "79")))
            (rule "sub_literals" (formula "107") (term "2,1,0,0,1,1"))
             (builtin "One Step Simplification" (formula "107"))
            (rule "inEqSimp_ltToLeq" (formula "107") (term "1,0,0,0,1,1"))
            (rule "polySimp_mulComm0" (formula "107") (term "1,0,0,1,0,0,0,1,1"))
            (rule "inEqSimp_commuteLeq" (formula "107") (term "0,0,0,0,1,1"))
            (rule "inEqSimp_sepPosMonomial0" (formula "107") (term "1,0,0,0,1,1"))
            (rule "polySimp_mulComm0" (formula "107") (term "1,1,0,0,0,1,1"))
            (rule "polySimp_rightDist" (formula "107") (term "1,1,0,0,0,1,1"))
            (rule "polySimp_mulLiterals" (formula "107") (term "1,1,1,0,0,0,1,1"))
            (rule "mul_literals" (formula "107") (term "0,1,1,0,0,0,1,1"))
            (rule "polySimp_elimOne" (formula "107") (term "1,1,1,0,0,0,1,1"))
            (rule "nnf_imp2or" (formula "107") (term "0,0,1,1"))
            (rule "nnf_notAnd" (formula "107") (term "0,0,0,1,1"))
            (rule "inEqSimp_notGeq" (formula "107") (term "0,0,0,0,1,1"))
            (rule "mul_literals" (formula "107") (term "1,0,0,0,0,0,0,1,1"))
            (rule "add_literals" (formula "107") (term "0,0,0,0,0,0,1,1"))
            (rule "inEqSimp_sepPosMonomial0" (formula "107") (term "0,0,0,0,1,1"))
            (rule "mul_literals" (formula "107") (term "1,0,0,0,0,1,1"))
            (rule "inEqSimp_notLeq" (formula "107") (term "1,0,0,0,1,1"))
            (rule "polySimp_rightDist" (formula "107") (term "1,0,0,1,0,0,0,1,1"))
            (rule "mul_literals" (formula "107") (term "0,1,0,0,1,0,0,0,1,1"))
            (rule "polySimp_addAssoc" (formula "107") (term "0,0,1,0,0,0,1,1"))
            (rule "add_literals" (formula "107") (term "0,0,0,1,0,0,0,1,1"))
            (rule "add_zero_left" (formula "107") (term "0,0,1,0,0,0,1,1"))
            (rule "inEqSimp_sepPosMonomial1" (formula "107") (term "1,0,0,0,1,1"))
            (rule "polySimp_mulLiterals" (formula "107") (term "1,1,0,0,0,1,1"))
            (rule "polySimp_elimOne" (formula "107") (term "1,1,0,0,0,1,1"))
            (rule "Class_invariant_axiom_for_de_polyas_core3_open_crypto_groups_ECGroup" (formula "107") (term "1,1,1"))
            (rule "pullOutSelect" (formula "107") (term "0,0,0,0,1,1,1") (inst "selectSK=de_polyas_core3_open_crypto_groups_ECGroup_curve_0"))
            (rule "applyEq" (formula "108") (term "1,0,1,1,1,1") (ifseqformula "1"))
            (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "73"))
             (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "103")))
            (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,0,0") (ifseqformula "64"))
            (rule "replace_known_left" (formula "1") (term "0,0,0,0") (ifseqformula "21"))
             (builtin "One Step Simplification" (formula "1"))
            (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "64"))
             (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "103")) (ifInst ""  (formula "21")))
            (rule "elementOfSingleton" (formula "1") (term "0,0"))
             (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "103")))
            (rule "applyEqReverse" (formula "108") (term "0,0,0,0,1,1,1") (ifseqformula "1"))
            (rule "applyEqReverse" (formula "108") (term "1,0,1,1,1,1") (ifseqformula "1"))
            (rule "hideAuxiliaryEq" (formula "1"))
            (rule "replace_known_right" (formula "107") (term "0,0,0,1,1,1") (ifseqformula "78"))
             (builtin "One Step Simplification" (formula "107"))
            (rule "pullOutSelect" (formula "107") (term "1,1,1,1,1,1") (inst "selectSK=de_polyas_core3_open_crypto_groups_ECGroup_group_0"))
            (rule "applyEq" (formula "108") (term "0,0,0,1,1,1") (ifseqformula "1"))
            (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "73"))
             (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "103")))
            (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,0,0") (ifseqformula "64"))
            (rule "replace_known_left" (formula "1") (term "0,0,0,0") (ifseqformula "21"))
             (builtin "One Step Simplification" (formula "1"))
            (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "64"))
             (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "103")) (ifInst ""  (formula "21")))
            (rule "elementOfSingleton" (formula "1") (term "0,0"))
             (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "103")))
            (rule "applyEqReverse" (formula "108") (term "1,1,1,1,1,1") (ifseqformula "1"))
            (rule "applyEqReverse" (formula "108") (term "0,0,0,1,1,1") (ifseqformula "1"))
            (rule "hideAuxiliaryEq" (formula "1"))
            (rule "replace_known_right" (formula "107") (term "0,0,1,1,1") (ifseqformula "77"))
             (builtin "One Step Simplification" (formula "107"))
            (rule "Class_invariant_axiom_for_org_bouncycastle_jce_spec_ECNamedCurveParameterSpec" (formula "107") (term "1,1,1,1"))
            (rule "pullOutSelect" (formula "107") (term "0,0,0,1,1,1,1") (inst "selectSK=org_bouncycastle_jce_spec_ECParameterSpec_generator_0"))
            (rule "applyEq" (formula "108") (term "1,1,1,1,1,1") (ifseqformula "1"))
            (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "73"))
             (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "78")))
            (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,0,0") (ifseqformula "64"))
            (rule "replace_known_left" (formula "1") (term "0,0,0,0") (ifseqformula "4"))
             (builtin "One Step Simplification" (formula "1"))
            (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "64"))
             (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "78")) (ifInst ""  (formula "4")))
            (rule "elementOfSingleton" (formula "1") (term "0,0"))
             (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "78")))
            (rule "applyEqReverse" (formula "108") (term "1,1,1,1,1,1") (ifseqformula "1"))
            (rule "applyEqReverse" (formula "108") (term "0,0,0,1,1,1,1") (ifseqformula "1"))
            (rule "hideAuxiliaryEq" (formula "1"))
            (rule "replace_known_right" (formula "107") (term "0,0,1,1,1,1") (ifseqformula "76"))
             (builtin "One Step Simplification" (formula "107"))
            (rule "Static_class_invariant_axiom_for_de_polyas_core3_open_cred_Crypto" (formula "107") (term "0"))
            (rule "insert_constant_string_value" (formula "107") (term "0,0,0,0,0") (ifseqformula "24"))
             (builtin "One Step Simplification" (formula "107"))
            (rule "castDel" (formula "107") (term "0,0,0,0,0,0"))
            (rule "replace_known_right" (formula "107") (term "0,0,0,0") (ifseqformula "98"))
             (builtin "One Step Simplification" (formula "107"))
            (rule "pullOutSelect" (formula "107") (term "0,0,1,0") (inst "selectSK=de_polyas_core3_open_cred_Crypto_SHA_256_DIGEST_0"))
            (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "73"))
             (builtin "One Step Simplification" (formula "1"))
            (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "64"))
             (builtin "One Step Simplification" (formula "1"))
            (rule "elementOfSingleton" (formula "1") (term "0,0"))
             (builtin "One Step Simplification" (formula "1"))
            (rule "applyEqReverse" (formula "108") (term "0,0,1,0") (ifseqformula "1"))
            (rule "hideAuxiliaryEq" (formula "1"))
            (rule "replace_known_right" (formula "107") (term "0,1,0") (ifseqformula "100"))
             (builtin "One Step Simplification" (formula "107"))
            (rule "pullOutSelect" (formula "107") (term "0,0,0") (inst "selectSK=de_polyas_core3_open_cred_Crypto_SECURE_RANDOM_0"))
            (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "73"))
             (builtin "One Step Simplification" (formula "1"))
            (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "64"))
             (builtin "One Step Simplification" (formula "1"))
            (rule "elementOfSingleton" (formula "1") (term "0,0"))
             (builtin "One Step Simplification" (formula "1"))
            (rule "applyEqReverse" (formula "108") (term "0,0,0") (ifseqformula "1"))
            (rule "hideAuxiliaryEq" (formula "1"))
            (rule "replace_known_right" (formula "107") (term "0,0") (ifseqformula "99"))
             (builtin "One Step Simplification" (formula "107"))
            (rule "Static_class_invariant_axiom_for_java_math_BigInteger" (formula "107") (term "0"))
            (rule "pullOutSelect" (formula "107") (term "0,0,0,0") (inst "selectSK=java_math_BigInteger_ZERO_0"))
            (rule "applyEq" (formula "108") (term "1,0,1,0") (ifseqformula "1"))
            (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "73"))
             (builtin "One Step Simplification" (formula "1"))
            (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "64"))
             (builtin "One Step Simplification" (formula "1"))
            (rule "elementOfSingleton" (formula "1") (term "0,0"))
             (builtin "One Step Simplification" (formula "1"))
            (rule "applyEqReverse" (formula "108") (term "0,0,0,0") (ifseqformula "1"))
            (rule "applyEqReverse" (formula "108") (term "1,0,1,0") (ifseqformula "1"))
            (rule "hideAuxiliaryEq" (formula "1"))
            (rule "replace_known_right" (formula "107") (term "0,0,0") (ifseqformula "103"))
             (builtin "One Step Simplification" (formula "107"))
            (rule "pullOutSelect" (formula "107") (term "0,0") (inst "selectSK=java_math_BigInteger_value_0"))
            (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "73"))
             (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "104")))
            (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,0,0") (ifseqformula "64"))
            (rule "replace_known_left" (formula "1") (term "0,0,0,0") (ifseqformula "20"))
             (builtin "One Step Simplification" (formula "1"))
            (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "64"))
             (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "104")) (ifInst ""  (formula "20")))
            (rule "elementOfSingleton" (formula "1") (term "0,0"))
             (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "104")))
            (rule "applyEqReverse" (formula "108") (term "0,0") (ifseqformula "1"))
            (rule "hideAuxiliaryEq" (formula "1"))
            (rule "replace_known_left" (formula "107") (term "0") (ifseqformula "30"))
             (builtin "One Step Simplification" (formula "107"))
            (rule "allLeft" (formula "54") (inst "t=i_2"))
            (rule "exLeft" (formula "54") (inst "sk=j_0"))
            (rule "andLeft" (formula "54"))
            (rule "andLeft" (formula "54"))
            (rule "replace_known_left" (formula "55") (term "0,0,0,0") (ifseqformula "72"))
             (builtin "One Step Simplification" (formula "55"))
            (rule "replace_known_left" (formula "56") (term "0,0,0,0") (ifseqformula "72"))
             (builtin "One Step Simplification" (formula "56"))
            (rule "replace_known_left" (formula "54") (term "0,0,0,0") (ifseqformula "72"))
             (builtin "One Step Simplification" (formula "54"))
            (rule "inEqSimp_commuteGeq" (formula "55") (term "1,0"))
            (rule "inEqSimp_commuteGeq" (formula "56") (term "1,0"))
            (rule "inEqSimp_commuteGeq" (formula "54") (term "1,0"))
            (rule "inEqSimp_homoInEq0" (formula "56") (term "1"))
            (rule "polySimp_addComm1" (formula "56") (term "0,1"))
            (rule "applyEq" (formula "56") (term "0,0,1,0,1") (ifseqformula "73"))
            (rule "applyEq" (formula "55") (term "0,0,0,1") (ifseqformula "73"))
            (rule "inEqSimp_sepPosMonomial1" (formula "56") (term "1"))
            (rule "polySimp_mulComm0" (formula "56") (term "1,1"))
            (rule "polySimp_rightDist" (formula "56") (term "1,1"))
            (rule "mul_literals" (formula "56") (term "0,1,1"))
            (rule "polySimp_mulLiterals" (formula "56") (term "1,1,1"))
            (rule "polySimp_elimOne" (formula "56") (term "1,1,1"))
            (rule "inEqSimp_contradInEq1" (formula "56") (term "0,0") (ifseqformula "70"))
            (rule "qeq_literals" (formula "56") (term "0,0,0"))
             (builtin "One Step Simplification" (formula "56"))
            (rule "inEqSimp_contradInEq1" (formula "55") (term "1,0") (ifseqformula "71"))
            (rule "inEqSimp_homoInEq1" (formula "55") (term "0,1,0"))
            (rule "polySimp_pullOutFactor1b" (formula "55") (term "0,0,1,0"))
            (rule "add_literals" (formula "55") (term "1,1,0,0,1,0"))
            (rule "times_zero_1" (formula "55") (term "1,0,0,1,0"))
            (rule "add_literals" (formula "55") (term "0,0,1,0"))
            (rule "leq_literals" (formula "55") (term "0,1,0"))
             (builtin "One Step Simplification" (formula "55"))
            (rule "inEqSimp_contradInEq1" (formula "54") (term "1,0") (ifseqformula "71"))
            (rule "inEqSimp_homoInEq1" (formula "54") (term "0,1,0"))
            (rule "polySimp_pullOutFactor1b" (formula "54") (term "0,0,1,0"))
            (rule "add_literals" (formula "54") (term "1,1,0,0,1,0"))
            (rule "times_zero_1" (formula "54") (term "1,0,0,1,0"))
            (rule "add_literals" (formula "54") (term "0,0,1,0"))
            (rule "leq_literals" (formula "54") (term "0,1,0"))
             (builtin "One Step Simplification" (formula "54"))
            (rule "inEqSimp_contradInEq1" (formula "55") (term "0") (ifseqformula "70"))
            (rule "qeq_literals" (formula "55") (term "0,0"))
             (builtin "One Step Simplification" (formula "55"))
            (rule "inEqSimp_contradInEq1" (formula "56") (term "0") (ifseqformula "71"))
            (rule "inEqSimp_homoInEq1" (formula "56") (term "0,0"))
            (rule "polySimp_pullOutFactor1b" (formula "56") (term "0,0,0"))
            (rule "add_literals" (formula "56") (term "1,1,0,0,0"))
            (rule "times_zero_1" (formula "56") (term "1,0,0,0"))
            (rule "add_literals" (formula "56") (term "0,0,0"))
            (rule "leq_literals" (formula "56") (term "0,0"))
             (builtin "One Step Simplification" (formula "56"))
            (rule "inEqSimp_contradInEq1" (formula "54") (term "0") (ifseqformula "70"))
            (rule "qeq_literals" (formula "54") (term "0,0"))
             (builtin "One Step Simplification" (formula "54"))
            (rule "allLeft" (formula "57") (inst "t=i_0"))
            (rule "exLeft" (formula "57") (inst "sk=j_1"))
            (rule "andLeft" (formula "57"))
            (rule "andLeft" (formula "57"))
            (rule "replace_known_left" (formula "59") (term "0,0,0,0") (ifseqformula "53"))
             (builtin "One Step Simplification" (formula "59"))
            (rule "replace_known_left" (formula "57") (term "0,0,0,0") (ifseqformula "53"))
             (builtin "One Step Simplification" (formula "57"))
            (rule "replace_known_left" (formula "58") (term "0,0,0,0") (ifseqformula "53"))
             (builtin "One Step Simplification" (formula "58"))
            (rule "inEqSimp_commuteGeq" (formula "59") (term "1,0"))
            (rule "inEqSimp_commuteGeq" (formula "57") (term "1,0"))
            (rule "inEqSimp_commuteGeq" (formula "58") (term "1,0"))
            (rule "inEqSimp_homoInEq0" (formula "59") (term "1"))
            (rule "polySimp_addComm1" (formula "59") (term "0,1"))
            (rule "inEqSimp_sepPosMonomial1" (formula "59") (term "1"))
            (rule "polySimp_mulComm0" (formula "59") (term "1,1"))
            (rule "polySimp_rightDist" (formula "59") (term "1,1"))
            (rule "polySimp_mulLiterals" (formula "59") (term "1,1,1"))
            (rule "mul_literals" (formula "59") (term "0,1,1"))
            (rule "polySimp_elimOne" (formula "59") (term "1,1,1"))
            (rule "inEqSimp_contradInEq1" (formula "59") (term "0,0") (ifseqformula "49"))
            (rule "qeq_literals" (formula "59") (term "0,0,0"))
             (builtin "One Step Simplification" (formula "59"))
            (rule "inEqSimp_contradInEq1" (formula "57") (term "0,0") (ifseqformula "49"))
            (rule "qeq_literals" (formula "57") (term "0,0,0"))
             (builtin "One Step Simplification" (formula "57"))
            (rule "inEqSimp_contradInEq1" (formula "58") (term "0,0") (ifseqformula "49"))
            (rule "qeq_literals" (formula "58") (term "0,0,0"))
             (builtin "One Step Simplification" (formula "58"))
            (rule "inEqSimp_contradInEq1" (formula "57") (term "0") (ifseqformula "51"))
            (rule "inEqSimp_homoInEq1" (formula "57") (term "0,0"))
            (rule "polySimp_pullOutFactor1b" (formula "57") (term "0,0,0"))
            (rule "add_literals" (formula "57") (term "1,1,0,0,0"))
            (rule "times_zero_1" (formula "57") (term "1,0,0,0"))
            (rule "add_zero_right" (formula "57") (term "0,0,0"))
            (rule "leq_literals" (formula "57") (term "0,0"))
             (builtin "One Step Simplification" (formula "57"))
            (rule "inEqSimp_contradInEq1" (formula "59") (term "0") (ifseqformula "51"))
            (rule "inEqSimp_homoInEq1" (formula "59") (term "0,0"))
            (rule "polySimp_pullOutFactor1b" (formula "59") (term "0,0,0"))
            (rule "add_literals" (formula "59") (term "1,1,0,0,0"))
            (rule "times_zero_1" (formula "59") (term "1,0,0,0"))
            (rule "add_zero_right" (formula "59") (term "0,0,0"))
            (rule "leq_literals" (formula "59") (term "0,0"))
             (builtin "One Step Simplification" (formula "59"))
            (rule "inEqSimp_contradInEq1" (formula "58") (term "0") (ifseqformula "51"))
            (rule "inEqSimp_homoInEq1" (formula "58") (term "0,0"))
            (rule "polySimp_pullOutFactor1b" (formula "58") (term "0,0,0"))
            (rule "add_literals" (formula "58") (term "1,1,0,0,0"))
            (rule "times_zero_1" (formula "58") (term "1,0,0,0"))
            (rule "add_literals" (formula "58") (term "0,0,0"))
            (rule "leq_literals" (formula "58") (term "0,0"))
             (builtin "One Step Simplification" (formula "58"))
            (rule "Class_invariant_axiom_for_org_bouncycastle_math_ec_custom_sec_SecP256K1Curve" (formula "113") (term "0,1"))
             (builtin "One Step Simplification" (formula "113"))
            (rule "cut_direct" (formula "34") (term "0"))
            (branch "CUT: de.polyas.core3.open.cred.CredTool.FieldsForPolyasMode.MAX = null TRUE"
                (builtin "One Step Simplification" (formula "35"))
               (rule "true_left" (formula "35"))
               (rule "applyEq" (formula "36") (term "1,0") (ifseqformula "34"))
               (rule "replace_known_right" (formula "36") (term "0") (ifseqformula "92"))
                (builtin "One Step Simplification" (formula "36"))
               (rule "applyEq" (formula "92") (term "0") (ifseqformula "36"))
               (rule "replace_known_right" (formula "35") (term "0") (ifseqformula "92"))
                (builtin "One Step Simplification" (formula "35"))
               (rule "applyEq" (formula "15") (term "1,0") (ifseqformula "36"))
               (rule "onlyCreatedObjectsAreReferenced" (formula "80") (term "0") (ifseqformula "67"))
               (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "81"))
                (builtin "One Step Simplification" (formula "1"))
               (rule "cut_direct" (formula "72") (term "0"))
               (branch "CUT: result_1898.<created> = TRUE TRUE"
                   (builtin "One Step Simplification" (formula "73"))
                  (rule "true_left" (formula "73"))
                  (rule "Class_invariant_axiom_for_org_bouncycastle_math_ec_ECPoint" (formula "113") (term "1"))
                   (builtin "One Step Simplification" (formula "113"))
                  (rule "allRight" (formula "113") (inst "sk=i_3"))
                  (rule "orRight" (formula "113"))
                  (rule "orRight" (formula "113"))
                  (rule "notRight" (formula "115"))
                  (rule "inEqSimp_leqRight" (formula "114"))
                  (rule "mul_literals" (formula "1") (term "1,0,0"))
                  (rule "add_literals" (formula "1") (term "0,0"))
                  (rule "add_zero_left" (formula "1") (term "0"))
                  (rule "inEqSimp_geqRight" (formula "115"))
                  (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
                  (rule "polySimp_addComm1" (formula "1") (term "0"))
                  (rule "inEqSimp_sepNegMonomial0" (formula "1"))
                  (rule "polySimp_mulLiterals" (formula "1") (term "0"))
                  (rule "polySimp_elimOne" (formula "1") (term "0"))
                  (rule "pullOutSelect" (formula "3") (term "0") (inst "selectSK=arr_0"))
                  (rule "simplifySelectOfAnonEQ" (formula "3") (ifseqformula "82"))
                   (builtin "One Step Simplification" (formula "3") (ifInst ""  (formula "89")))
                  (rule "selectCreatedOfAnonAsFormulaEQ" (formula "3") (term "0,0,0") (ifseqformula "73"))
                  (rule "replace_known_left" (formula "3") (term "0,0,0,0") (ifseqformula "9"))
                   (builtin "One Step Simplification" (formula "3"))
                  (rule "simplifySelectOfAnonEQ" (formula "3") (ifseqformula "73"))
                   (builtin "One Step Simplification" (formula "3") (ifInst ""  (formula "89")) (ifInst ""  (formula "9")))
                  (rule "elementOfSingleton" (formula "3") (term "0,0"))
                   (builtin "One Step Simplification" (formula "3") (ifInst ""  (formula "89")))
                  (rule "applyEqReverse" (formula "4") (term "0") (ifseqformula "3"))
                  (rule "hideAuxiliaryEq" (formula "3"))
                  (rule "narrowSelectArrayType" (formula "3") (term "0") (ifseqformula "27") (ifseqformula "88"))
                  (rule "inEqSimp_exactShadow3" (formula "1") (ifseqformula "68"))
                  (rule "polySimp_rightDist" (formula "1") (term "0,0"))
                  (rule "mul_literals" (formula "1") (term "0,0,0"))
                  (rule "polySimp_addComm1" (formula "1") (term "0"))
                  (rule "add_literals" (formula "1") (term "0,0"))
                  (rule "inEqSimp_sepNegMonomial1" (formula "1"))
                  (rule "polySimp_mulLiterals" (formula "1") (term "0"))
                  (rule "polySimp_elimOne" (formula "1") (term "0"))
                  (rule "allLeft" (formula "65") (inst "t=i_3"))
                  (rule "replace_known_left" (formula "65") (term "0,0,0") (ifseqformula "4"))
                   (builtin "One Step Simplification" (formula "65"))
                  (rule "inEqSimp_commuteGeq" (formula "65") (term "1"))
                  (rule "inEqSimp_contradInEq1" (formula "65") (term "1") (ifseqformula "2"))
                  (rule "inEqSimp_homoInEq1" (formula "65") (term "0,1"))
                  (rule "polySimp_pullOutFactor1b" (formula "65") (term "0,0,1"))
                  (rule "add_literals" (formula "65") (term "1,1,0,0,1"))
                  (rule "times_zero_1" (formula "65") (term "1,0,0,1"))
                  (rule "add_literals" (formula "65") (term "0,0,1"))
                  (rule "leq_literals" (formula "65") (term "0,1"))
                   (builtin "One Step Simplification" (formula "65"))
                  (rule "inEqSimp_contradInEq0" (formula "3") (ifseqformula "65"))
                  (rule "qeq_literals" (formula "3") (term "0"))
                   (builtin "One Step Simplification" (formula "3"))
                  (rule "closeFalse" (formula "3"))
               )
               (branch "CUT: result_1898.<created> = TRUE FALSE"
                   (builtin "One Step Simplification" (formula "72"))
                  (rule "Class_invariant_axiom_for_org_bouncycastle_math_ec_ECPoint" (formula "114") (term "1"))
                   (builtin "One Step Simplification" (formula "114"))
                  (rule "allRight" (formula "114") (inst "sk=i_3"))
                  (rule "orRight" (formula "114"))
                  (rule "orRight" (formula "114"))
                  (rule "notRight" (formula "116"))
                  (rule "inEqSimp_leqRight" (formula "115"))
                  (rule "mul_literals" (formula "1") (term "1,0,0"))
                  (rule "add_literals" (formula "1") (term "0,0"))
                  (rule "add_zero_left" (formula "1") (term "0"))
                  (rule "inEqSimp_geqRight" (formula "116"))
                  (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
                  (rule "polySimp_addComm1" (formula "1") (term "0"))
                  (rule "inEqSimp_sepNegMonomial0" (formula "1"))
                  (rule "polySimp_mulLiterals" (formula "1") (term "0"))
                  (rule "polySimp_elimOne" (formula "1") (term "0"))
                  (rule "pullOutSelect" (formula "3") (term "0") (inst "selectSK=arr_0"))
                  (rule "simplifySelectOfAnonEQ" (formula "3") (ifseqformula "82"))
                   (builtin "One Step Simplification" (formula "3") (ifInst ""  (formula "90")))
                  (rule "selectCreatedOfAnonAsFormulaEQ" (formula "3") (term "0,0,0") (ifseqformula "73"))
                  (rule "replace_known_left" (formula "3") (term "0,0,0,0") (ifseqformula "9"))
                   (builtin "One Step Simplification" (formula "3"))
                  (rule "simplifySelectOfAnonEQ" (formula "3") (ifseqformula "73"))
                   (builtin "One Step Simplification" (formula "3") (ifInst ""  (formula "90")) (ifInst ""  (formula "9")))
                  (rule "elementOfSingleton" (formula "3") (term "0,0"))
                   (builtin "One Step Simplification" (formula "3") (ifInst ""  (formula "90")))
                  (rule "applyEqReverse" (formula "4") (term "0") (ifseqformula "3"))
                  (rule "hideAuxiliaryEq" (formula "3"))
                  (rule "narrowSelectArrayType" (formula "3") (term "0") (ifseqformula "27") (ifseqformula "89"))
                  (rule "inEqSimp_exactShadow3" (formula "1") (ifseqformula "68"))
                  (rule "polySimp_rightDist" (formula "1") (term "0,0"))
                  (rule "mul_literals" (formula "1") (term "0,0,0"))
                  (rule "polySimp_addComm1" (formula "1") (term "0"))
                  (rule "add_literals" (formula "1") (term "0,0"))
                  (rule "inEqSimp_sepNegMonomial1" (formula "1"))
                  (rule "polySimp_mulLiterals" (formula "1") (term "0"))
                  (rule "polySimp_elimOne" (formula "1") (term "0"))
                  (rule "allLeft" (formula "65") (inst "t=i_3"))
                  (rule "replace_known_left" (formula "65") (term "0,0,0") (ifseqformula "4"))
                   (builtin "One Step Simplification" (formula "65"))
                  (rule "inEqSimp_commuteGeq" (formula "65") (term "1"))
                  (rule "inEqSimp_contradInEq1" (formula "65") (term "0") (ifseqformula "3"))
                  (rule "qeq_literals" (formula "65") (term "0,0"))
                   (builtin "One Step Simplification" (formula "65"))
                  (rule "inEqSimp_contradInEq1" (formula "65") (ifseqformula "2"))
                  (rule "andLeft" (formula "65"))
                  (rule "inEqSimp_homoInEq1" (formula "65"))
                  (rule "polySimp_pullOutFactor1b" (formula "65") (term "0"))
                  (rule "add_literals" (formula "65") (term "1,1,0"))
                  (rule "times_zero_1" (formula "65") (term "1,0"))
                  (rule "add_zero_right" (formula "65") (term "0"))
                  (rule "leq_literals" (formula "65"))
                  (rule "closeFalse" (formula "65"))
               )
            )
            (branch "CUT: de.polyas.core3.open.cred.CredTool.FieldsForPolyasMode.MAX = null FALSE"
                (builtin "One Step Simplification" (formula "34"))
               (rule "cut_direct" (formula "36") (term "1"))
               (branch "CUT: de.polyas.core3.open.cred.CredTool.polyasMode = de.polyas.core3.open.cred.CredTool.FieldsForPolyasMode.MIN TRUE"
                   (builtin "One Step Simplification" (formula "37"))
                  (rule "true_left" (formula "37"))
                  (rule "applyEq" (formula "15") (term "1,0") (ifseqformula "36"))
                  (rule "replace_known_left" (formula "35") (term "1") (ifseqformula "15"))
                   (builtin "One Step Simplification" (formula "35"))
                  (rule "true_left" (formula "35"))
                  (rule "applyEq" (formula "92") (term "0") (ifseqformula "35"))
                  (rule "onlyCreatedObjectsAreReferenced" (formula "81") (term "0") (ifseqformula "67"))
                  (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "82"))
                   (builtin "One Step Simplification" (formula "1"))
                  (rule "cut_direct" (formula "72") (term "0"))
                  (branch "CUT: result_1898.<created> = TRUE TRUE"
                      (builtin "One Step Simplification" (formula "73"))
                     (rule "true_left" (formula "73"))
                     (rule "Class_invariant_axiom_for_org_bouncycastle_math_ec_ECPoint" (formula "114") (term "1"))
                      (builtin "One Step Simplification" (formula "114"))
                     (rule "allRight" (formula "114") (inst "sk=i_3"))
                     (rule "orRight" (formula "114"))
                     (rule "notRight" (formula "115"))
                     (rule "orRight" (formula "115"))
                     (rule "inEqSimp_leqRight" (formula "115"))
                     (rule "mul_literals" (formula "1") (term "1,0,0"))
                     (rule "add_literals" (formula "1") (term "0,0"))
                     (rule "add_zero_left" (formula "1") (term "0"))
                     (rule "inEqSimp_geqRight" (formula "116"))
                     (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
                     (rule "polySimp_addComm1" (formula "1") (term "0"))
                     (rule "inEqSimp_sepNegMonomial0" (formula "1"))
                     (rule "polySimp_mulLiterals" (formula "1") (term "0"))
                     (rule "polySimp_elimOne" (formula "1") (term "0"))
                     (rule "pullOutSelect" (formula "3") (term "0") (inst "selectSK=arr_0"))
                     (rule "simplifySelectOfAnonEQ" (formula "3") (ifseqformula "82"))
                      (builtin "One Step Simplification" (formula "3") (ifInst ""  (formula "90")))
                     (rule "selectCreatedOfAnonAsFormulaEQ" (formula "3") (term "0,0,0") (ifseqformula "73"))
                     (rule "replace_known_left" (formula "3") (term "0,0,0,0") (ifseqformula "9"))
                      (builtin "One Step Simplification" (formula "3"))
                     (rule "simplifySelectOfAnonEQ" (formula "3") (ifseqformula "73"))
                      (builtin "One Step Simplification" (formula "3") (ifInst ""  (formula "90")) (ifInst ""  (formula "9")))
                     (rule "elementOfSingleton" (formula "3") (term "0,0"))
                      (builtin "One Step Simplification" (formula "3") (ifInst ""  (formula "90")))
                     (rule "applyEqReverse" (formula "4") (term "0") (ifseqformula "3"))
                     (rule "hideAuxiliaryEq" (formula "3"))
                     (rule "narrowSelectArrayType" (formula "3") (term "0") (ifseqformula "28") (ifseqformula "89"))
                     (rule "inEqSimp_exactShadow3" (formula "1") (ifseqformula "68"))
                     (rule "polySimp_rightDist" (formula "1") (term "0,0"))
                     (rule "mul_literals" (formula "1") (term "0,0,0"))
                     (rule "polySimp_addComm1" (formula "1") (term "0"))
                     (rule "add_literals" (formula "1") (term "0,0"))
                     (rule "inEqSimp_sepNegMonomial1" (formula "1"))
                     (rule "polySimp_mulLiterals" (formula "1") (term "0"))
                     (rule "polySimp_elimOne" (formula "1") (term "0"))
                     (rule "allLeft" (formula "65") (inst "t=i_3"))
                     (rule "replace_known_left" (formula "65") (term "0,0,0") (ifseqformula "4"))
                      (builtin "One Step Simplification" (formula "65"))
                     (rule "inEqSimp_commuteGeq" (formula "65") (term "1"))
                     (rule "inEqSimp_contradInEq1" (formula "65") (term "0") (ifseqformula "3"))
                     (rule "qeq_literals" (formula "65") (term "0,0"))
                      (builtin "One Step Simplification" (formula "65"))
                     (rule "inEqSimp_contradInEq0" (formula "2") (ifseqformula "65"))
                     (rule "andLeft" (formula "2"))
                     (rule "inEqSimp_homoInEq1" (formula "2"))
                     (rule "polySimp_pullOutFactor1b" (formula "2") (term "0"))
                     (rule "add_literals" (formula "2") (term "1,1,0"))
                     (rule "times_zero_1" (formula "2") (term "1,0"))
                     (rule "add_literals" (formula "2") (term "0"))
                     (rule "leq_literals" (formula "2"))
                     (rule "closeFalse" (formula "2"))
                  )
                  (branch "CUT: result_1898.<created> = TRUE FALSE"
                      (builtin "One Step Simplification" (formula "72"))
                     (rule "Class_invariant_axiom_for_org_bouncycastle_math_ec_ECPoint" (formula "115") (term "1"))
                      (builtin "One Step Simplification" (formula "115"))
                     (rule "allRight" (formula "115") (inst "sk=i_3"))
                     (rule "orRight" (formula "115"))
                     (rule "notRight" (formula "116"))
                     (rule "orRight" (formula "116"))
                     (rule "inEqSimp_geqRight" (formula "117"))
                     (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
                     (rule "polySimp_addComm1" (formula "1") (term "0"))
                     (rule "inEqSimp_leqRight" (formula "117"))
                     (rule "mul_literals" (formula "1") (term "1,0,0"))
                     (rule "add_literals" (formula "1") (term "0,0"))
                     (rule "add_zero_left" (formula "1") (term "0"))
                     (rule "inEqSimp_sepNegMonomial0" (formula "2"))
                     (rule "polySimp_mulLiterals" (formula "2") (term "0"))
                     (rule "polySimp_elimOne" (formula "2") (term "0"))
                     (rule "pullOutSelect" (formula "3") (term "0") (inst "selectSK=arr_0"))
                     (rule "simplifySelectOfAnonEQ" (formula "3") (ifseqformula "82"))
                      (builtin "One Step Simplification" (formula "3") (ifInst ""  (formula "91")))
                     (rule "selectCreatedOfAnonAsFormulaEQ" (formula "3") (term "0,0,0") (ifseqformula "73"))
                     (rule "replace_known_left" (formula "3") (term "0,0,0,0") (ifseqformula "9"))
                      (builtin "One Step Simplification" (formula "3"))
                     (rule "simplifySelectOfAnonEQ" (formula "3") (ifseqformula "73"))
                      (builtin "One Step Simplification" (formula "3") (ifInst ""  (formula "91")) (ifInst ""  (formula "9")))
                     (rule "elementOfSingleton" (formula "3") (term "0,0"))
                      (builtin "One Step Simplification" (formula "3") (ifInst ""  (formula "91")))
                     (rule "applyEqReverse" (formula "4") (term "0") (ifseqformula "3"))
                     (rule "hideAuxiliaryEq" (formula "3"))
                     (rule "narrowSelectArrayType" (formula "3") (term "0") (ifseqformula "28") (ifseqformula "90"))
                     (rule "inEqSimp_exactShadow3" (formula "2") (ifseqformula "68"))
                     (rule "polySimp_rightDist" (formula "2") (term "0,0"))
                     (rule "mul_literals" (formula "2") (term "0,0,0"))
                     (rule "polySimp_addComm1" (formula "2") (term "0"))
                     (rule "add_literals" (formula "2") (term "0,0"))
                     (rule "inEqSimp_sepNegMonomial1" (formula "2"))
                     (rule "polySimp_mulLiterals" (formula "2") (term "0"))
                     (rule "polySimp_elimOne" (formula "2") (term "0"))
                     (rule "allLeft" (formula "65") (inst "t=i_3"))
                     (rule "replace_known_left" (formula "65") (term "0,0,0") (ifseqformula "4"))
                      (builtin "One Step Simplification" (formula "65"))
                     (rule "inEqSimp_commuteGeq" (formula "65") (term "1"))
                     (rule "inEqSimp_contradInEq1" (formula "65") (term "1") (ifseqformula "3"))
                     (rule "inEqSimp_homoInEq1" (formula "65") (term "0,1"))
                     (rule "polySimp_pullOutFactor1b" (formula "65") (term "0,0,1"))
                     (rule "add_literals" (formula "65") (term "1,1,0,0,1"))
                     (rule "times_zero_1" (formula "65") (term "1,0,0,1"))
                     (rule "add_literals" (formula "65") (term "0,0,1"))
                     (rule "leq_literals" (formula "65") (term "0,1"))
                      (builtin "One Step Simplification" (formula "65"))
                     (rule "inEqSimp_contradInEq0" (formula "1") (ifseqformula "65"))
                     (rule "qeq_literals" (formula "1") (term "0"))
                      (builtin "One Step Simplification" (formula "1"))
                     (rule "closeFalse" (formula "1"))
                  )
               )
               (branch "CUT: de.polyas.core3.open.cred.CredTool.polyasMode = de.polyas.core3.open.cred.CredTool.FieldsForPolyasMode.MIN FALSE"
                   (builtin "One Step Simplification" (formula "36"))
                  (rule "applyEq" (formula "94") (term "0") (ifseqformula "36"))
                  (rule "applyEq" (formula "80") (term "0") (ifseqformula "36"))
                  (rule "eqSymm" (formula "80"))
                  (rule "applyEq" (formula "15") (term "1,0") (ifseqformula "36"))
                  (rule "onlyCreatedObjectsAreReferenced" (formula "82") (term "0") (ifseqformula "67"))
                  (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "83"))
                   (builtin "One Step Simplification" (formula "1"))
                  (rule "cut_direct" (formula "35") (term "0"))
                  (branch "CUT: de.polyas.core3.open.cred.CredTool.FieldsForPolyasMode.MIN = null TRUE"
                      (builtin "One Step Simplification" (formula "36"))
                     (rule "true_left" (formula "36"))
                     (rule "applyEq" (formula "80") (term "0") (ifseqformula "35"))
                     (rule "eqSymm" (formula "80"))
                     (rule "cut_direct" (formula "72") (term "0"))
                     (branch "CUT: result_1898.<created> = TRUE TRUE"
                         (builtin "One Step Simplification" (formula "73"))
                        (rule "true_left" (formula "73"))
                        (rule "Class_invariant_axiom_for_org_bouncycastle_math_ec_ECPoint" (formula "113") (term "1"))
                         (builtin "One Step Simplification" (formula "113"))
                        (rule "allRight" (formula "113") (inst "sk=i_3"))
                        (rule "orRight" (formula "113"))
                        (rule "orRight" (formula "113"))
                        (rule "notRight" (formula "115"))
                        (rule "inEqSimp_leqRight" (formula "114"))
                        (rule "mul_literals" (formula "1") (term "1,0,0"))
                        (rule "add_literals" (formula "1") (term "0,0"))
                        (rule "add_zero_left" (formula "1") (term "0"))
                        (rule "inEqSimp_geqRight" (formula "115"))
                        (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
                        (rule "polySimp_addComm1" (formula "1") (term "0"))
                        (rule "inEqSimp_sepNegMonomial0" (formula "1"))
                        (rule "polySimp_mulLiterals" (formula "1") (term "0"))
                        (rule "polySimp_elimOne" (formula "1") (term "0"))
                        (rule "pullOutSelect" (formula "3") (term "0") (inst "selectSK=arr_0"))
                        (rule "simplifySelectOfAnonEQ" (formula "3") (ifseqformula "82"))
                         (builtin "One Step Simplification" (formula "3") (ifInst ""  (formula "90")))
                        (rule "selectCreatedOfAnonAsFormulaEQ" (formula "3") (term "0,0,0") (ifseqformula "73"))
                        (rule "replace_known_left" (formula "3") (term "0,0,0,0") (ifseqformula "9"))
                         (builtin "One Step Simplification" (formula "3"))
                        (rule "simplifySelectOfAnonEQ" (formula "3") (ifseqformula "73"))
                         (builtin "One Step Simplification" (formula "3") (ifInst ""  (formula "90")) (ifInst ""  (formula "9")))
                        (rule "elementOfSingleton" (formula "3") (term "0,0"))
                         (builtin "One Step Simplification" (formula "3") (ifInst ""  (formula "90")))
                        (rule "applyEqReverse" (formula "4") (term "0") (ifseqformula "3"))
                        (rule "hideAuxiliaryEq" (formula "3"))
                        (rule "narrowSelectArrayType" (formula "3") (term "0") (ifseqformula "27") (ifseqformula "89"))
                        (rule "inEqSimp_exactShadow3" (formula "1") (ifseqformula "68"))
                        (rule "polySimp_rightDist" (formula "1") (term "0,0"))
                        (rule "mul_literals" (formula "1") (term "0,0,0"))
                        (rule "polySimp_addComm1" (formula "1") (term "0"))
                        (rule "add_literals" (formula "1") (term "0,0"))
                        (rule "inEqSimp_sepNegMonomial1" (formula "1"))
                        (rule "polySimp_mulLiterals" (formula "1") (term "0"))
                        (rule "polySimp_elimOne" (formula "1") (term "0"))
                        (rule "allLeft" (formula "65") (inst "t=i_3"))
                        (rule "replace_known_left" (formula "65") (term "0,0,0") (ifseqformula "4"))
                         (builtin "One Step Simplification" (formula "65"))
                        (rule "inEqSimp_commuteGeq" (formula "65") (term "1"))
                        (rule "inEqSimp_contradInEq1" (formula "65") (term "1") (ifseqformula "2"))
                        (rule "inEqSimp_homoInEq1" (formula "65") (term "0,1"))
                        (rule "polySimp_pullOutFactor1b" (formula "65") (term "0,0,1"))
                        (rule "add_literals" (formula "65") (term "1,1,0,0,1"))
                        (rule "times_zero_1" (formula "65") (term "1,0,0,1"))
                        (rule "add_literals" (formula "65") (term "0,0,1"))
                        (rule "leq_literals" (formula "65") (term "0,1"))
                         (builtin "One Step Simplification" (formula "65"))
                        (rule "inEqSimp_contradInEq0" (formula "3") (ifseqformula "65"))
                        (rule "qeq_literals" (formula "3") (term "0"))
                         (builtin "One Step Simplification" (formula "3"))
                        (rule "closeFalse" (formula "3"))
                     )
                     (branch "CUT: result_1898.<created> = TRUE FALSE"
                         (builtin "One Step Simplification" (formula "72"))
                        (rule "Class_invariant_axiom_for_org_bouncycastle_math_ec_ECPoint" (formula "114") (term "1"))
                         (builtin "One Step Simplification" (formula "114"))
                        (rule "allRight" (formula "114") (inst "sk=i_3"))
                        (rule "orRight" (formula "114"))
                        (rule "orRight" (formula "114"))
                        (rule "notRight" (formula "116"))
                        (rule "inEqSimp_leqRight" (formula "115"))
                        (rule "mul_literals" (formula "1") (term "1,0,0"))
                        (rule "add_literals" (formula "1") (term "0,0"))
                        (rule "add_zero_left" (formula "1") (term "0"))
                        (rule "inEqSimp_geqRight" (formula "116"))
                        (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
                        (rule "polySimp_addComm1" (formula "1") (term "0"))
                        (rule "inEqSimp_sepNegMonomial0" (formula "1"))
                        (rule "polySimp_mulLiterals" (formula "1") (term "0"))
                        (rule "polySimp_elimOne" (formula "1") (term "0"))
                        (rule "pullOutSelect" (formula "3") (term "0") (inst "selectSK=arr_0"))
                        (rule "simplifySelectOfAnonEQ" (formula "3") (ifseqformula "82"))
                         (builtin "One Step Simplification" (formula "3") (ifInst ""  (formula "91")))
                        (rule "selectCreatedOfAnonAsFormulaEQ" (formula "3") (term "0,0,0") (ifseqformula "73"))
                        (rule "replace_known_left" (formula "3") (term "0,0,0,0") (ifseqformula "9"))
                         (builtin "One Step Simplification" (formula "3"))
                        (rule "simplifySelectOfAnonEQ" (formula "3") (ifseqformula "73"))
                         (builtin "One Step Simplification" (formula "3") (ifInst ""  (formula "91")) (ifInst ""  (formula "9")))
                        (rule "elementOfSingleton" (formula "3") (term "0,0"))
                         (builtin "One Step Simplification" (formula "3") (ifInst ""  (formula "91")))
                        (rule "applyEqReverse" (formula "4") (term "0") (ifseqformula "3"))
                        (rule "hideAuxiliaryEq" (formula "3"))
                        (rule "narrowSelectArrayType" (formula "3") (term "0") (ifseqformula "27") (ifseqformula "90"))
                        (rule "inEqSimp_exactShadow3" (formula "1") (ifseqformula "68"))
                        (rule "polySimp_rightDist" (formula "1") (term "0,0"))
                        (rule "mul_literals" (formula "1") (term "0,0,0"))
                        (rule "polySimp_addComm1" (formula "1") (term "0"))
                        (rule "add_literals" (formula "1") (term "0,0"))
                        (rule "inEqSimp_sepNegMonomial1" (formula "1"))
                        (rule "polySimp_mulLiterals" (formula "1") (term "0"))
                        (rule "polySimp_elimOne" (formula "1") (term "0"))
                        (rule "allLeft" (formula "65") (inst "t=i_3"))
                        (rule "replace_known_left" (formula "65") (term "0,0,0") (ifseqformula "4"))
                         (builtin "One Step Simplification" (formula "65"))
                        (rule "inEqSimp_commuteGeq" (formula "65") (term "1"))
                        (rule "inEqSimp_contradInEq1" (formula "65") (term "0") (ifseqformula "3"))
                        (rule "qeq_literals" (formula "65") (term "0,0"))
                         (builtin "One Step Simplification" (formula "65"))
                        (rule "inEqSimp_contradInEq1" (formula "65") (ifseqformula "2"))
                        (rule "andLeft" (formula "65"))
                        (rule "inEqSimp_homoInEq1" (formula "65"))
                        (rule "polySimp_pullOutFactor1b" (formula "65") (term "0"))
                        (rule "add_literals" (formula "65") (term "1,1,0"))
                        (rule "times_zero_1" (formula "65") (term "1,0"))
                        (rule "add_zero_right" (formula "65") (term "0"))
                        (rule "leq_literals" (formula "65"))
                        (rule "closeFalse" (formula "65"))
                     )
                  )
                  (branch "CUT: de.polyas.core3.open.cred.CredTool.FieldsForPolyasMode.MIN = null FALSE"
                      (builtin "One Step Simplification" (formula "35"))
                     (rule "cut_direct" (formula "72") (term "0"))
                     (branch "CUT: result_1898.<created> = TRUE TRUE"
                         (builtin "One Step Simplification" (formula "73"))
                        (rule "true_left" (formula "73"))
                        (rule "Class_invariant_axiom_for_org_bouncycastle_math_ec_ECPoint" (formula "115") (term "1"))
                         (builtin "One Step Simplification" (formula "115"))
                        (rule "allRight" (formula "115") (inst "sk=i_3"))
                        (rule "orRight" (formula "115"))
                        (rule "orRight" (formula "115"))
                        (rule "notRight" (formula "117"))
                        (rule "inEqSimp_leqRight" (formula "116"))
                        (rule "mul_literals" (formula "1") (term "1,0,0"))
                        (rule "add_literals" (formula "1") (term "0,0"))
                        (rule "add_zero_left" (formula "1") (term "0"))
                        (rule "inEqSimp_geqRight" (formula "117"))
                        (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
                        (rule "polySimp_addComm1" (formula "1") (term "0"))
                        (rule "inEqSimp_sepNegMonomial0" (formula "1"))
                        (rule "polySimp_mulLiterals" (formula "1") (term "0"))
                        (rule "polySimp_elimOne" (formula "1") (term "0"))
                        (rule "pullOutSelect" (formula "3") (term "0") (inst "selectSK=arr_0"))
                        (rule "simplifySelectOfAnonEQ" (formula "3") (ifseqformula "82"))
                         (builtin "One Step Simplification" (formula "3") (ifInst ""  (formula "92")))
                        (rule "selectCreatedOfAnonAsFormulaEQ" (formula "3") (term "0,0,0") (ifseqformula "73"))
                        (rule "replace_known_left" (formula "3") (term "0,0,0,0") (ifseqformula "9"))
                         (builtin "One Step Simplification" (formula "3"))
                        (rule "simplifySelectOfAnonEQ" (formula "3") (ifseqformula "73"))
                         (builtin "One Step Simplification" (formula "3") (ifInst ""  (formula "92")) (ifInst ""  (formula "9")))
                        (rule "elementOfSingleton" (formula "3") (term "0,0"))
                         (builtin "One Step Simplification" (formula "3") (ifInst ""  (formula "92")))
                        (rule "applyEqReverse" (formula "4") (term "0") (ifseqformula "3"))
                        (rule "hideAuxiliaryEq" (formula "3"))
                        (rule "narrowSelectArrayType" (formula "3") (term "0") (ifseqformula "27") (ifseqformula "91"))
                        (rule "inEqSimp_exactShadow3" (formula "1") (ifseqformula "68"))
                        (rule "polySimp_rightDist" (formula "1") (term "0,0"))
                        (rule "mul_literals" (formula "1") (term "0,0,0"))
                        (rule "polySimp_addComm1" (formula "1") (term "0"))
                        (rule "add_literals" (formula "1") (term "0,0"))
                        (rule "inEqSimp_sepNegMonomial1" (formula "1"))
                        (rule "polySimp_mulLiterals" (formula "1") (term "0"))
                        (rule "polySimp_elimOne" (formula "1") (term "0"))
                        (rule "allLeft" (formula "65") (inst "t=i_3"))
                        (rule "replace_known_left" (formula "65") (term "0,0,0") (ifseqformula "4"))
                         (builtin "One Step Simplification" (formula "65"))
                        (rule "inEqSimp_commuteGeq" (formula "65") (term "1"))
                        (rule "inEqSimp_contradInEq1" (formula "65") (term "1") (ifseqformula "2"))
                        (rule "inEqSimp_homoInEq1" (formula "65") (term "0,1"))
                        (rule "polySimp_pullOutFactor1b" (formula "65") (term "0,0,1"))
                        (rule "add_literals" (formula "65") (term "1,1,0,0,1"))
                        (rule "times_zero_1" (formula "65") (term "1,0,0,1"))
                        (rule "add_zero_right" (formula "65") (term "0,0,1"))
                        (rule "leq_literals" (formula "65") (term "0,1"))
                         (builtin "One Step Simplification" (formula "65"))
                        (rule "inEqSimp_contradInEq0" (formula "3") (ifseqformula "65"))
                        (rule "qeq_literals" (formula "3") (term "0"))
                         (builtin "One Step Simplification" (formula "3"))
                        (rule "closeFalse" (formula "3"))
                     )
                     (branch "CUT: result_1898.<created> = TRUE FALSE"
                         (builtin "One Step Simplification" (formula "72"))
                        (rule "Class_invariant_axiom_for_org_bouncycastle_math_ec_ECPoint" (formula "116") (term "1"))
                         (builtin "One Step Simplification" (formula "116"))
                        (rule "allRight" (formula "116") (inst "sk=i_3"))
                        (rule "orRight" (formula "116"))
                        (rule "notRight" (formula "117"))
                        (rule "orRight" (formula "117"))
                        (rule "inEqSimp_leqRight" (formula "117"))
                        (rule "mul_literals" (formula "1") (term "1,0,0"))
                        (rule "add_literals" (formula "1") (term "0,0"))
                        (rule "add_zero_left" (formula "1") (term "0"))
                        (rule "inEqSimp_geqRight" (formula "118"))
                        (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
                        (rule "polySimp_addComm1" (formula "1") (term "0"))
                        (rule "inEqSimp_sepNegMonomial0" (formula "1"))
                        (rule "polySimp_mulLiterals" (formula "1") (term "0"))
                        (rule "polySimp_elimOne" (formula "1") (term "0"))
                        (rule "pullOutSelect" (formula "3") (term "0") (inst "selectSK=arr_0"))
                        (rule "simplifySelectOfAnonEQ" (formula "3") (ifseqformula "82"))
                         (builtin "One Step Simplification" (formula "3") (ifInst ""  (formula "93")))
                        (rule "selectCreatedOfAnonAsFormulaEQ" (formula "3") (term "0,0,0") (ifseqformula "73"))
                        (rule "replace_known_left" (formula "3") (term "0,0,0,0") (ifseqformula "9"))
                         (builtin "One Step Simplification" (formula "3"))
                        (rule "simplifySelectOfAnonEQ" (formula "3") (ifseqformula "73"))
                         (builtin "One Step Simplification" (formula "3") (ifInst ""  (formula "93")) (ifInst ""  (formula "9")))
                        (rule "elementOfSingleton" (formula "3") (term "0,0"))
                         (builtin "One Step Simplification" (formula "3") (ifInst ""  (formula "93")))
                        (rule "applyEqReverse" (formula "4") (term "0") (ifseqformula "3"))
                        (rule "hideAuxiliaryEq" (formula "3"))
                        (rule "narrowSelectArrayType" (formula "3") (term "0") (ifseqformula "27") (ifseqformula "92"))
                        (rule "inEqSimp_exactShadow3" (formula "1") (ifseqformula "68"))
                        (rule "polySimp_rightDist" (formula "1") (term "0,0"))
                        (rule "mul_literals" (formula "1") (term "0,0,0"))
                        (rule "polySimp_addComm1" (formula "1") (term "0"))
                        (rule "add_literals" (formula "1") (term "0,0"))
                        (rule "inEqSimp_sepNegMonomial1" (formula "1"))
                        (rule "polySimp_mulLiterals" (formula "1") (term "0"))
                        (rule "polySimp_elimOne" (formula "1") (term "0"))
                        (rule "allLeft" (formula "65") (inst "t=i_3"))
                        (rule "replace_known_left" (formula "65") (term "0,0,0") (ifseqformula "4"))
                         (builtin "One Step Simplification" (formula "65"))
                        (rule "inEqSimp_commuteGeq" (formula "65") (term "1"))
                        (rule "inEqSimp_contradInEq1" (formula "65") (term "1") (ifseqformula "2"))
                        (rule "inEqSimp_homoInEq1" (formula "65") (term "0,1"))
                        (rule "polySimp_pullOutFactor1b" (formula "65") (term "0,0,1"))
                        (rule "add_literals" (formula "65") (term "1,1,0,0,1"))
                        (rule "times_zero_1" (formula "65") (term "1,0,0,1"))
                        (rule "add_literals" (formula "65") (term "0,0,1"))
                        (rule "leq_literals" (formula "65") (term "0,1"))
                         (builtin "One Step Simplification" (formula "65"))
                        (rule "inEqSimp_contradInEq0" (formula "3") (ifseqformula "65"))
                        (rule "qeq_literals" (formula "3") (term "0"))
                         (builtin "One Step Simplification" (formula "3"))
                        (rule "closeFalse" (formula "3"))
                     )
                  )
               )
            )
         )
      )
      (branch "Exceptional Post (exitIfIdInvalid)"
          (builtin "One Step Simplification" (formula "106"))
          (builtin "One Step Simplification" (formula "72"))
         (rule "andLeft" (formula "72"))
         (rule "selectCreatedOfAnonAsFormulaEQ" (formula "73") (term "1,0") (ifseqformula "72"))
         (rule "selectCreatedOfAnonAsFormulaEQ" (formula "73") (term "0,1,0") (ifseqformula "62"))
         (rule "andLeft" (formula "73"))
         (rule "andLeft" (formula "73"))
         (rule "notLeft" (formula "73"))
         (rule "close" (formula "75") (ifseqformula "74"))
      )
      (branch "Pre (exitIfIdInvalid)"
          (builtin "One Step Simplification" (formula "104") (ifInst ""  (formula "71")) (ifInst ""  (formula "71")))
         (rule "selectCreatedOfAnonAsFormulaEQ" (formula "104") (term "1,1") (ifseqformula "62"))
         (rule "wellFormedAnonEQ" (formula "104") (term "0,1") (ifseqformula "62"))
         (rule "replace_known_left" (formula "104") (term "1,0,1") (ifseqformula "61"))
          (builtin "One Step Simplification" (formula "104") (ifInst ""  (formula "23")) (ifInst ""  (formula "65")))
         (rule "castedGetAny" (formula "104") (term "0,1,0"))
         (rule "inEqSimp_ltToLeq" (formula "104") (term "1,0,0"))
         (rule "polySimp_mulComm0" (formula "104") (term "1,0,0,1,0,0"))
         (rule "inEqSimp_gtToGeq" (formula "104") (term "1,0"))
         (rule "polySimp_mulComm0" (formula "104") (term "1,0,0,1,0"))
         (rule "inEqSimp_commuteLeq" (formula "104") (term "0,0,0"))
         (rule "inEqSimp_sepPosMonomial0" (formula "104") (term "1,0,0"))
         (rule "polySimp_mulComm0" (formula "104") (term "1,1,0,0"))
         (rule "polySimp_rightDist" (formula "104") (term "1,1,0,0"))
         (rule "mul_literals" (formula "104") (term "0,1,1,0,0"))
         (rule "polySimp_mulLiterals" (formula "104") (term "1,1,1,0,0"))
         (rule "polySimp_elimOne" (formula "104") (term "1,1,1,0,0"))
         (rule "inEqSimp_sepPosMonomial1" (formula "104") (term "1,0"))
         (rule "polySimp_mulComm0" (formula "104") (term "1,1,0"))
         (rule "polySimp_rightDist" (formula "104") (term "1,1,0"))
         (rule "polySimp_mulLiterals" (formula "104") (term "1,1,1,0"))
         (rule "mul_literals" (formula "104") (term "0,1,1,0"))
         (rule "polySimp_elimOne" (formula "104") (term "1,1,1,0"))
         (rule "nnf_ex2all" (formula "104"))
         (rule "nnf_notAnd" (formula "1") (term "0"))
         (rule "inEqSimp_notGeq" (formula "1") (term "1,0"))
         (rule "polySimp_rightDist" (formula "1") (term "1,0,0,1,0"))
         (rule "mul_literals" (formula "1") (term "0,1,0,0,1,0"))
         (rule "polySimp_addAssoc" (formula "1") (term "0,0,1,0"))
         (rule "add_literals" (formula "1") (term "0,0,0,1,0"))
         (rule "add_zero_left" (formula "1") (term "0,0,1,0"))
         (rule "inEqSimp_sepPosMonomial0" (formula "1") (term "1,0"))
         (rule "polySimp_mulLiterals" (formula "1") (term "1,1,0"))
         (rule "polySimp_elimOne" (formula "1") (term "1,1,0"))
         (rule "nnf_notAnd" (formula "1") (term "0,0"))
         (rule "inEqSimp_notGeq" (formula "1") (term "0,0,0"))
         (rule "mul_literals" (formula "1") (term "1,0,0,0,0,0"))
         (rule "add_literals" (formula "1") (term "0,0,0,0,0"))
         (rule "inEqSimp_sepPosMonomial0" (formula "1") (term "0,0,0"))
         (rule "mul_literals" (formula "1") (term "1,0,0,0"))
         (rule "inEqSimp_notLeq" (formula "1") (term "1,0,0"))
         (rule "polySimp_rightDist" (formula "1") (term "1,0,0,1,0,0"))
         (rule "mul_literals" (formula "1") (term "0,1,0,0,1,0,0"))
         (rule "polySimp_addAssoc" (formula "1") (term "0,0,1,0,0"))
         (rule "add_literals" (formula "1") (term "0,0,0,1,0,0"))
         (rule "add_zero_left" (formula "1") (term "0,0,1,0,0"))
         (rule "inEqSimp_sepPosMonomial1" (formula "1") (term "1,0,0"))
         (rule "polySimp_mulLiterals" (formula "1") (term "1,1,0,0"))
         (rule "polySimp_elimOne" (formula "1") (term "1,1,0,0"))
         (rule "commute_or" (formula "71") (term "0,0,0,0"))
         (rule "onlyCreatedObjectsAreReferenced" (formula "74") (term "0") (ifseqformula "24"))
         (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "75"))
          (builtin "One Step Simplification" (formula "1"))
         (rule "commute_or_2" (formula "72") (term "0,0,0"))
         (rule "inEqSimp_or_subsumption1" (formula "72") (term "0,0,0"))
         (rule "qeq_literals" (formula "72") (term "0,1,0,0,0,0"))
          (builtin "One Step Simplification" (formula "72") (ifInst ""  (formula "34")))
         (rule "true_left" (formula "72"))
         (rule "cut_direct" (formula "67") (term "0"))
         (branch "CUT: result_1898.<created> = TRUE TRUE"
             (builtin "One Step Simplification" (formula "68"))
            (rule "true_left" (formula "68"))
            (rule "charLiteral_to_int" (formula "2") (term "1,1,0"))
            (rule "seqGetAlphaCast" (formula "71") (term "0"))
            (rule "castedGetAny" (formula "71") (term "0"))
             (builtin "One Step Simplification" (formula "71"))
            (rule "true_left" (formula "71"))
            (rule "seqGetAlphaCast" (formula "70") (term "0"))
            (rule "castedGetAny" (formula "70") (term "0"))
             (builtin "One Step Simplification" (formula "70"))
            (rule "true_left" (formula "70"))
            (rule "allLeft" (formula "55") (inst "t=i_2"))
            (rule "exLeft" (formula "55") (inst "sk=j_0"))
            (rule "andLeft" (formula "55"))
            (rule "andLeft" (formula "55"))
            (rule "replace_known_left" (formula "57") (term "0,0,0,0") (ifseqformula "73"))
             (builtin "One Step Simplification" (formula "57"))
            (rule "replace_known_left" (formula "56") (term "0,0,0,0") (ifseqformula "73"))
             (builtin "One Step Simplification" (formula "56"))
            (rule "replace_known_left" (formula "55") (term "0,0,0,0") (ifseqformula "73"))
             (builtin "One Step Simplification" (formula "55"))
            (rule "inEqSimp_commuteGeq" (formula "57") (term "1,0"))
            (rule "inEqSimp_commuteGeq" (formula "56") (term "1,0"))
            (rule "inEqSimp_commuteGeq" (formula "55") (term "1,0"))
            (rule "inEqSimp_homoInEq0" (formula "57") (term "1"))
            (rule "polySimp_addComm1" (formula "57") (term "0,1"))
            (rule "applyEq" (formula "57") (term "0,0,1,0,1") (ifseqformula "74"))
            (rule "applyEq" (formula "56") (term "0,0,0,1") (ifseqformula "74"))
            (rule "inEqSimp_sepPosMonomial1" (formula "57") (term "1"))
            (rule "polySimp_mulComm0" (formula "57") (term "1,1"))
            (rule "polySimp_rightDist" (formula "57") (term "1,1"))
            (rule "mul_literals" (formula "57") (term "0,1,1"))
            (rule "polySimp_mulLiterals" (formula "57") (term "1,1,1"))
            (rule "polySimp_elimOne" (formula "57") (term "1,1,1"))
            (rule "inEqSimp_contradInEq1" (formula "57") (term "0,0") (ifseqformula "71"))
            (rule "qeq_literals" (formula "57") (term "0,0,0"))
             (builtin "One Step Simplification" (formula "57"))
            (rule "inEqSimp_contradInEq1" (formula "55") (term "0,0") (ifseqformula "71"))
            (rule "qeq_literals" (formula "55") (term "0,0,0"))
             (builtin "One Step Simplification" (formula "55"))
            (rule "inEqSimp_contradInEq1" (formula "56") (term "1,0") (ifseqformula "72"))
            (rule "inEqSimp_homoInEq1" (formula "56") (term "0,1,0"))
            (rule "polySimp_pullOutFactor1b" (formula "56") (term "0,0,1,0"))
            (rule "add_literals" (formula "56") (term "1,1,0,0,1,0"))
            (rule "times_zero_1" (formula "56") (term "1,0,0,1,0"))
            (rule "add_zero_right" (formula "56") (term "0,0,1,0"))
            (rule "leq_literals" (formula "56") (term "0,1,0"))
             (builtin "One Step Simplification" (formula "56"))
            (rule "inEqSimp_contradInEq1" (formula "55") (term "0") (ifseqformula "72"))
            (rule "inEqSimp_homoInEq1" (formula "55") (term "0,0"))
            (rule "polySimp_pullOutFactor1b" (formula "55") (term "0,0,0"))
            (rule "add_literals" (formula "55") (term "1,1,0,0,0"))
            (rule "times_zero_1" (formula "55") (term "1,0,0,0"))
            (rule "add_zero_right" (formula "55") (term "0,0,0"))
            (rule "leq_literals" (formula "55") (term "0,0"))
             (builtin "One Step Simplification" (formula "55"))
            (rule "inEqSimp_contradInEq1" (formula "57") (term "0") (ifseqformula "72"))
            (rule "inEqSimp_homoInEq1" (formula "57") (term "0,0"))
            (rule "polySimp_pullOutFactor1b" (formula "57") (term "0,0,0"))
            (rule "add_literals" (formula "57") (term "1,1,0,0,0"))
            (rule "times_zero_1" (formula "57") (term "1,0,0,0"))
            (rule "add_zero_right" (formula "57") (term "0,0,0"))
            (rule "leq_literals" (formula "57") (term "0,0"))
             (builtin "One Step Simplification" (formula "57"))
            (rule "inEqSimp_contradInEq1" (formula "56") (term "0") (ifseqformula "71"))
            (rule "qeq_literals" (formula "56") (term "0,0"))
             (builtin "One Step Simplification" (formula "56"))
            (rule "allLeft" (formula "58") (inst "t=i_0"))
            (rule "exLeft" (formula "58") (inst "sk=j_1"))
            (rule "andLeft" (formula "58"))
            (rule "andLeft" (formula "58"))
            (rule "replace_known_left" (formula "60") (term "0,0,0,0") (ifseqformula "54"))
             (builtin "One Step Simplification" (formula "60"))
            (rule "replace_known_left" (formula "58") (term "0,0,0,0") (ifseqformula "54"))
             (builtin "One Step Simplification" (formula "58"))
            (rule "replace_known_left" (formula "59") (term "0,0,0,0") (ifseqformula "54"))
             (builtin "One Step Simplification" (formula "59"))
            (rule "inEqSimp_commuteGeq" (formula "60") (term "1,0"))
            (rule "inEqSimp_commuteGeq" (formula "58") (term "1,0"))
            (rule "inEqSimp_commuteGeq" (formula "59") (term "1,0"))
            (rule "inEqSimp_homoInEq0" (formula "60") (term "1"))
            (rule "polySimp_addComm1" (formula "60") (term "0,1"))
            (rule "inEqSimp_sepPosMonomial1" (formula "60") (term "1"))
            (rule "polySimp_mulComm0" (formula "60") (term "1,1"))
            (rule "polySimp_rightDist" (formula "60") (term "1,1"))
            (rule "polySimp_mulLiterals" (formula "60") (term "1,1,1"))
            (rule "mul_literals" (formula "60") (term "0,1,1"))
            (rule "polySimp_elimOne" (formula "60") (term "1,1,1"))
            (rule "inEqSimp_contradInEq1" (formula "59") (term "0,0") (ifseqformula "50"))
            (rule "qeq_literals" (formula "59") (term "0,0,0"))
             (builtin "One Step Simplification" (formula "59"))
            (rule "inEqSimp_contradInEq1" (formula "60") (term "1,0") (ifseqformula "52"))
            (rule "inEqSimp_homoInEq1" (formula "60") (term "0,1,0"))
            (rule "polySimp_pullOutFactor1b" (formula "60") (term "0,0,1,0"))
            (rule "add_literals" (formula "60") (term "1,1,0,0,1,0"))
            (rule "times_zero_1" (formula "60") (term "1,0,0,1,0"))
            (rule "add_zero_right" (formula "60") (term "0,0,1,0"))
            (rule "leq_literals" (formula "60") (term "0,1,0"))
             (builtin "One Step Simplification" (formula "60"))
            (rule "inEqSimp_contradInEq1" (formula "58") (term "0,0") (ifseqformula "50"))
            (rule "qeq_literals" (formula "58") (term "0,0,0"))
             (builtin "One Step Simplification" (formula "58"))
            (rule "inEqSimp_contradInEq1" (formula "59") (term "0") (ifseqformula "52"))
            (rule "inEqSimp_homoInEq1" (formula "59") (term "0,0"))
            (rule "polySimp_pullOutFactor1b" (formula "59") (term "0,0,0"))
            (rule "add_literals" (formula "59") (term "1,1,0,0,0"))
            (rule "times_zero_1" (formula "59") (term "1,0,0,0"))
            (rule "add_zero_right" (formula "59") (term "0,0,0"))
            (rule "leq_literals" (formula "59") (term "0,0"))
             (builtin "One Step Simplification" (formula "59"))
            (rule "inEqSimp_contradInEq1" (formula "60") (term "0") (ifseqformula "50"))
            (rule "qeq_literals" (formula "60") (term "0,0"))
             (builtin "One Step Simplification" (formula "60"))
            (rule "inEqSimp_contradInEq1" (formula "58") (term "0") (ifseqformula "52"))
            (rule "inEqSimp_homoInEq1" (formula "58") (term "0,0"))
            (rule "polySimp_pullOutFactor1b" (formula "58") (term "0,0,0"))
            (rule "add_literals" (formula "58") (term "1,1,0,0,0"))
            (rule "times_zero_1" (formula "58") (term "1,0,0,0"))
            (rule "add_zero_right" (formula "58") (term "0,0,0"))
            (rule "leq_literals" (formula "58") (term "0,0"))
             (builtin "One Step Simplification" (formula "58"))
            (rule "cut_direct" (formula "35") (term "0"))
            (branch "CUT: de.polyas.core3.open.cred.CredTool.FieldsForPolyasMode.MAX = null TRUE"
                (builtin "One Step Simplification" (formula "36"))
               (rule "true_left" (formula "36"))
               (rule "applyEq" (formula "37") (term "1,0") (ifseqformula "35"))
               (rule "replace_known_right" (formula "37") (term "0") (ifseqformula "90"))
                (builtin "One Step Simplification" (formula "37"))
               (rule "applyEq" (formula "16") (term "1,0") (ifseqformula "37"))
               (rule "replace_known_left" (formula "36") (term "1") (ifseqformula "16"))
                (builtin "One Step Simplification" (formula "36"))
               (rule "true_left" (formula "36"))
               (rule "applyEq" (formula "89") (term "0") (ifseqformula "36"))
               (rule "onlyCreatedObjectsAreReferenced" (formula "78") (term "0") (ifseqformula "68"))
               (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "79"))
                (builtin "One Step Simplification" (formula "1"))
               (rule "allLeft" (formula "3") (inst "t=j_0"))
               (rule "inEqSimp_commuteGeq" (formula "3") (term "1,0"))
               (rule "inEqSimp_contradInEq1" (formula "3") (term "0,0") (ifseqformula "56"))
               (rule "qeq_literals" (formula "3") (term "0,0,0"))
                (builtin "One Step Simplification" (formula "3"))
               (rule "inEqSimp_contradInEq1" (formula "3") (term "1") (ifseqformula "57"))
               (rule "qeq_literals" (formula "3") (term "0,1"))
                (builtin "One Step Simplification" (formula "3"))
               (rule "inEqSimp_contradInEq0" (formula "58") (ifseqformula "3"))
               (rule "andLeft" (formula "58"))
               (rule "inEqSimp_homoInEq1" (formula "58"))
               (rule "polySimp_pullOutFactor1b" (formula "58") (term "0"))
               (rule "add_literals" (formula "58") (term "1,1,0"))
               (rule "times_zero_1" (formula "58") (term "1,0"))
               (rule "add_literals" (formula "58") (term "0"))
               (rule "leq_literals" (formula "58"))
               (rule "closeFalse" (formula "58"))
            )
            (branch "CUT: de.polyas.core3.open.cred.CredTool.FieldsForPolyasMode.MAX = null FALSE"
                (builtin "One Step Simplification" (formula "35"))
               (rule "cut_direct" (formula "37") (term "1"))
               (branch "CUT: de.polyas.core3.open.cred.CredTool.polyasMode = de.polyas.core3.open.cred.CredTool.FieldsForPolyasMode.MIN TRUE"
                   (builtin "One Step Simplification" (formula "38"))
                  (rule "true_left" (formula "38"))
                  (rule "applyEq" (formula "91") (term "0") (ifseqformula "37"))
                  (rule "replace_known_right" (formula "36") (term "0") (ifseqformula "91"))
                   (builtin "One Step Simplification" (formula "36"))
                  (rule "applyEq" (formula "16") (term "1,0") (ifseqformula "37"))
                  (rule "onlyCreatedObjectsAreReferenced" (formula "79") (term "0") (ifseqformula "68"))
                  (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "80"))
                   (builtin "One Step Simplification" (formula "1"))
                  (rule "allLeft" (formula "3") (inst "t=j_0"))
                  (rule "inEqSimp_commuteGeq" (formula "3") (term "1,0"))
                  (rule "inEqSimp_contradInEq1" (formula "3") (term "0,0") (ifseqformula "56"))
                  (rule "qeq_literals" (formula "3") (term "0,0,0"))
                   (builtin "One Step Simplification" (formula "3"))
                  (rule "inEqSimp_contradInEq1" (formula "3") (term "1") (ifseqformula "57"))
                  (rule "qeq_literals" (formula "3") (term "0,1"))
                   (builtin "One Step Simplification" (formula "3"))
                  (rule "inEqSimp_contradInEq0" (formula "58") (ifseqformula "3"))
                  (rule "andLeft" (formula "58"))
                  (rule "inEqSimp_homoInEq1" (formula "58"))
                  (rule "polySimp_pullOutFactor1b" (formula "58") (term "0"))
                  (rule "add_literals" (formula "58") (term "1,1,0"))
                  (rule "times_zero_1" (formula "58") (term "1,0"))
                  (rule "add_zero_right" (formula "58") (term "0"))
                  (rule "leq_literals" (formula "58"))
                  (rule "closeFalse" (formula "58"))
               )
               (branch "CUT: de.polyas.core3.open.cred.CredTool.polyasMode = de.polyas.core3.open.cred.CredTool.FieldsForPolyasMode.MIN FALSE"
                   (builtin "One Step Simplification" (formula "37"))
                  (rule "applyEq" (formula "16") (term "1,0") (ifseqformula "37"))
                  (rule "applyEq" (formula "91") (term "0") (ifseqformula "36"))
                  (rule "applyEq" (formula "77") (term "0") (ifseqformula "36"))
                  (rule "eqSymm" (formula "77"))
                  (rule "cut_direct" (formula "35") (term "0"))
                  (branch "CUT: de.polyas.core3.open.cred.CredTool.FieldsForPolyasMode.MIN = null TRUE"
                      (builtin "One Step Simplification" (formula "36"))
                     (rule "true_left" (formula "36"))
                     (rule "applyEq" (formula "77") (term "0") (ifseqformula "35"))
                     (rule "eqSymm" (formula "77"))
                     (rule "onlyCreatedObjectsAreReferenced" (formula "79") (term "0") (ifseqformula "68"))
                     (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "80"))
                      (builtin "One Step Simplification" (formula "1"))
                     (rule "allLeft" (formula "3") (inst "t=j_0"))
                     (rule "inEqSimp_commuteGeq" (formula "3") (term "1,0"))
                     (rule "inEqSimp_contradInEq1" (formula "3") (term "0,0") (ifseqformula "56"))
                     (rule "qeq_literals" (formula "3") (term "0,0,0"))
                      (builtin "One Step Simplification" (formula "3"))
                     (rule "inEqSimp_contradInEq1" (formula "3") (term "0") (ifseqformula "58"))
                     (rule "inEqSimp_homoInEq1" (formula "3") (term "0,0"))
                     (rule "polySimp_pullOutFactor1b" (formula "3") (term "0,0,0"))
                     (rule "add_literals" (formula "3") (term "1,1,0,0,0"))
                     (rule "times_zero_1" (formula "3") (term "1,0,0,0"))
                     (rule "add_literals" (formula "3") (term "0,0,0"))
                     (rule "leq_literals" (formula "3") (term "0,0"))
                      (builtin "One Step Simplification" (formula "3"))
                     (rule "inEqSimp_contradInEq0" (formula "57") (ifseqformula "3"))
                     (rule "qeq_literals" (formula "57") (term "0"))
                      (builtin "One Step Simplification" (formula "57"))
                     (rule "closeFalse" (formula "57"))
                  )
                  (branch "CUT: de.polyas.core3.open.cred.CredTool.FieldsForPolyasMode.MIN = null FALSE"
                      (builtin "One Step Simplification" (formula "35"))
                     (rule "onlyCreatedObjectsAreReferenced" (formula "81") (term "0") (ifseqformula "68"))
                     (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "82"))
                      (builtin "One Step Simplification" (formula "1"))
                     (rule "allLeft" (formula "3") (inst "t=j_0"))
                     (rule "inEqSimp_commuteGeq" (formula "3") (term "1,0"))
                     (rule "inEqSimp_contradInEq1" (formula "3") (term "1") (ifseqformula "57"))
                     (rule "qeq_literals" (formula "3") (term "0,1"))
                      (builtin "One Step Simplification" (formula "3"))
                     (rule "inEqSimp_contradInEq1" (formula "3") (term "0") (ifseqformula "56"))
                     (rule "qeq_literals" (formula "3") (term "0,0"))
                      (builtin "One Step Simplification" (formula "3"))
                     (rule "inEqSimp_contradInEq0" (formula "58") (ifseqformula "3"))
                     (rule "andLeft" (formula "58"))
                     (rule "inEqSimp_homoInEq1" (formula "58"))
                     (rule "polySimp_pullOutFactor1b" (formula "58") (term "0"))
                     (rule "add_literals" (formula "58") (term "1,1,0"))
                     (rule "times_zero_1" (formula "58") (term "1,0"))
                     (rule "add_literals" (formula "58") (term "0"))
                     (rule "leq_literals" (formula "58"))
                     (rule "closeFalse" (formula "58"))
                  )
               )
            )
         )
         (branch "CUT: result_1898.<created> = TRUE FALSE"
             (builtin "One Step Simplification" (formula "67"))
            (rule "charLiteral_to_int" (formula "2") (term "1,1,0"))
            (rule "seqGetAlphaCast" (formula "71") (term "0"))
            (rule "castedGetAny" (formula "71") (term "0"))
             (builtin "One Step Simplification" (formula "71"))
            (rule "true_left" (formula "71"))
            (rule "seqGetAlphaCast" (formula "70") (term "0"))
            (rule "castedGetAny" (formula "70") (term "0"))
             (builtin "One Step Simplification" (formula "70"))
            (rule "true_left" (formula "70"))
            (rule "allLeft" (formula "55") (inst "t=i_2"))
            (rule "exLeft" (formula "55") (inst "sk=j_0"))
            (rule "andLeft" (formula "55"))
            (rule "andLeft" (formula "55"))
            (rule "replace_known_left" (formula "56") (term "0,0,0,0") (ifseqformula "73"))
             (builtin "One Step Simplification" (formula "56"))
            (rule "replace_known_left" (formula "57") (term "0,0,0,0") (ifseqformula "73"))
             (builtin "One Step Simplification" (formula "57"))
            (rule "replace_known_left" (formula "55") (term "0,0,0,0") (ifseqformula "73"))
             (builtin "One Step Simplification" (formula "55"))
            (rule "inEqSimp_commuteGeq" (formula "56") (term "1,0"))
            (rule "inEqSimp_commuteGeq" (formula "57") (term "1,0"))
            (rule "inEqSimp_commuteGeq" (formula "55") (term "1,0"))
            (rule "inEqSimp_homoInEq0" (formula "57") (term "1"))
            (rule "polySimp_addComm1" (formula "57") (term "0,1"))
            (rule "applyEq" (formula "57") (term "0,0,1,0,1") (ifseqformula "74"))
            (rule "applyEq" (formula "56") (term "0,0,0,1") (ifseqformula "74"))
            (rule "inEqSimp_sepPosMonomial1" (formula "57") (term "1"))
            (rule "polySimp_mulComm0" (formula "57") (term "1,1"))
            (rule "polySimp_rightDist" (formula "57") (term "1,1"))
            (rule "polySimp_mulLiterals" (formula "57") (term "1,1,1"))
            (rule "mul_literals" (formula "57") (term "0,1,1"))
            (rule "polySimp_elimOne" (formula "57") (term "1,1,1"))
            (rule "inEqSimp_contradInEq1" (formula "55") (term "0,0") (ifseqformula "71"))
            (rule "qeq_literals" (formula "55") (term "0,0,0"))
             (builtin "One Step Simplification" (formula "55"))
            (rule "inEqSimp_contradInEq1" (formula "56") (term "1,0") (ifseqformula "72"))
            (rule "inEqSimp_homoInEq1" (formula "56") (term "0,1,0"))
            (rule "polySimp_pullOutFactor1b" (formula "56") (term "0,0,1,0"))
            (rule "add_literals" (formula "56") (term "1,1,0,0,1,0"))
            (rule "times_zero_1" (formula "56") (term "1,0,0,1,0"))
            (rule "add_zero_right" (formula "56") (term "0,0,1,0"))
            (rule "leq_literals" (formula "56") (term "0,1,0"))
             (builtin "One Step Simplification" (formula "56"))
            (rule "inEqSimp_contradInEq1" (formula "57") (term "0,0") (ifseqformula "71"))
            (rule "qeq_literals" (formula "57") (term "0,0,0"))
             (builtin "One Step Simplification" (formula "57"))
            (rule "inEqSimp_contradInEq1" (formula "56") (term "0") (ifseqformula "71"))
            (rule "qeq_literals" (formula "56") (term "0,0"))
             (builtin "One Step Simplification" (formula "56"))
            (rule "inEqSimp_contradInEq1" (formula "55") (term "0") (ifseqformula "72"))
            (rule "inEqSimp_homoInEq1" (formula "55") (term "0,0"))
            (rule "polySimp_pullOutFactor1b" (formula "55") (term "0,0,0"))
            (rule "add_literals" (formula "55") (term "1,1,0,0,0"))
            (rule "times_zero_1" (formula "55") (term "1,0,0,0"))
            (rule "add_zero_right" (formula "55") (term "0,0,0"))
            (rule "leq_literals" (formula "55") (term "0,0"))
             (builtin "One Step Simplification" (formula "55"))
            (rule "inEqSimp_contradInEq1" (formula "57") (term "0") (ifseqformula "72"))
            (rule "inEqSimp_homoInEq1" (formula "57") (term "0,0"))
            (rule "polySimp_pullOutFactor1b" (formula "57") (term "0,0,0"))
            (rule "add_literals" (formula "57") (term "1,1,0,0,0"))
            (rule "times_zero_1" (formula "57") (term "1,0,0,0"))
            (rule "add_zero_right" (formula "57") (term "0,0,0"))
            (rule "leq_literals" (formula "57") (term "0,0"))
             (builtin "One Step Simplification" (formula "57"))
            (rule "allLeft" (formula "58") (inst "t=i_0"))
            (rule "exLeft" (formula "58") (inst "sk=j_1"))
            (rule "andLeft" (formula "58"))
            (rule "andLeft" (formula "58"))
            (rule "replace_known_left" (formula "59") (term "0,0,0,0") (ifseqformula "54"))
             (builtin "One Step Simplification" (formula "59"))
            (rule "replace_known_left" (formula "60") (term "0,0,0,0") (ifseqformula "54"))
             (builtin "One Step Simplification" (formula "60"))
            (rule "replace_known_left" (formula "58") (term "0,0,0,0") (ifseqformula "54"))
             (builtin "One Step Simplification" (formula "58"))
            (rule "inEqSimp_commuteGeq" (formula "59") (term "1,0"))
            (rule "inEqSimp_commuteGeq" (formula "60") (term "1,0"))
            (rule "inEqSimp_commuteGeq" (formula "58") (term "1,0"))
            (rule "inEqSimp_homoInEq0" (formula "60") (term "1"))
            (rule "polySimp_addComm1" (formula "60") (term "0,1"))
            (rule "inEqSimp_sepPosMonomial1" (formula "60") (term "1"))
            (rule "polySimp_mulComm0" (formula "60") (term "1,1"))
            (rule "polySimp_rightDist" (formula "60") (term "1,1"))
            (rule "polySimp_mulLiterals" (formula "60") (term "1,1,1"))
            (rule "mul_literals" (formula "60") (term "0,1,1"))
            (rule "polySimp_elimOne" (formula "60") (term "1,1,1"))
            (rule "inEqSimp_contradInEq1" (formula "59") (term "0,0") (ifseqformula "50"))
            (rule "qeq_literals" (formula "59") (term "0,0,0"))
             (builtin "One Step Simplification" (formula "59"))
            (rule "inEqSimp_contradInEq1" (formula "58") (term "0,0") (ifseqformula "50"))
            (rule "qeq_literals" (formula "58") (term "0,0,0"))
             (builtin "One Step Simplification" (formula "58"))
            (rule "inEqSimp_contradInEq1" (formula "60") (term "0,0") (ifseqformula "50"))
            (rule "qeq_literals" (formula "60") (term "0,0,0"))
             (builtin "One Step Simplification" (formula "60"))
            (rule "inEqSimp_contradInEq1" (formula "59") (term "0") (ifseqformula "52"))
            (rule "inEqSimp_homoInEq1" (formula "59") (term "0,0"))
            (rule "polySimp_pullOutFactor1b" (formula "59") (term "0,0,0"))
            (rule "add_literals" (formula "59") (term "1,1,0,0,0"))
            (rule "times_zero_1" (formula "59") (term "1,0,0,0"))
            (rule "add_literals" (formula "59") (term "0,0,0"))
            (rule "leq_literals" (formula "59") (term "0,0"))
             (builtin "One Step Simplification" (formula "59"))
            (rule "inEqSimp_contradInEq1" (formula "58") (term "0") (ifseqformula "52"))
            (rule "inEqSimp_homoInEq1" (formula "58") (term "0,0"))
            (rule "polySimp_pullOutFactor1b" (formula "58") (term "0,0,0"))
            (rule "add_literals" (formula "58") (term "1,1,0,0,0"))
            (rule "times_zero_1" (formula "58") (term "1,0,0,0"))
            (rule "add_zero_right" (formula "58") (term "0,0,0"))
            (rule "leq_literals" (formula "58") (term "0,0"))
             (builtin "One Step Simplification" (formula "58"))
            (rule "inEqSimp_contradInEq1" (formula "60") (term "0") (ifseqformula "52"))
            (rule "inEqSimp_homoInEq1" (formula "60") (term "0,0"))
            (rule "polySimp_pullOutFactor1b" (formula "60") (term "0,0,0"))
            (rule "add_literals" (formula "60") (term "1,1,0,0,0"))
            (rule "times_zero_1" (formula "60") (term "1,0,0,0"))
            (rule "add_zero_right" (formula "60") (term "0,0,0"))
            (rule "leq_literals" (formula "60") (term "0,0"))
             (builtin "One Step Simplification" (formula "60"))
            (rule "cut_direct" (formula "35") (term "0"))
            (branch "CUT: de.polyas.core3.open.cred.CredTool.FieldsForPolyasMode.MAX = null TRUE"
                (builtin "One Step Simplification" (formula "36"))
               (rule "true_left" (formula "36"))
               (rule "applyEq" (formula "37") (term "1,0") (ifseqformula "35"))
               (rule "replace_known_right" (formula "37") (term "0") (ifseqformula "91"))
                (builtin "One Step Simplification" (formula "37"))
               (rule "applyEq" (formula "91") (term "0") (ifseqformula "37"))
               (rule "replace_known_right" (formula "36") (term "0") (ifseqformula "91"))
                (builtin "One Step Simplification" (formula "36"))
               (rule "applyEq" (formula "16") (term "1,0") (ifseqformula "37"))
               (rule "allLeft" (formula "2") (inst "t=j_0"))
               (rule "inEqSimp_commuteGeq" (formula "2") (term "1,0"))
               (rule "inEqSimp_contradInEq1" (formula "2") (term "1,0") (ifseqformula "57"))
               (rule "inEqSimp_homoInEq1" (formula "2") (term "0,1,0"))
               (rule "polySimp_pullOutFactor1b" (formula "2") (term "0,0,1,0"))
               (rule "add_literals" (formula "2") (term "1,1,0,0,1,0"))
               (rule "times_zero_1" (formula "2") (term "1,0,0,1,0"))
               (rule "add_zero_right" (formula "2") (term "0,0,1,0"))
               (rule "leq_literals" (formula "2") (term "0,1,0"))
                (builtin "One Step Simplification" (formula "2"))
               (rule "inEqSimp_contradInEq1" (formula "2") (term "0") (ifseqformula "55"))
               (rule "qeq_literals" (formula "2") (term "0,0"))
                (builtin "One Step Simplification" (formula "2"))
               (rule "inEqSimp_contradInEq0" (formula "56") (ifseqformula "2"))
               (rule "qeq_literals" (formula "56") (term "0"))
                (builtin "One Step Simplification" (formula "56"))
               (rule "closeFalse" (formula "56"))
            )
            (branch "CUT: de.polyas.core3.open.cred.CredTool.FieldsForPolyasMode.MAX = null FALSE"
                (builtin "One Step Simplification" (formula "35"))
               (rule "allLeft" (formula "2") (inst "t=j_0"))
               (rule "inEqSimp_commuteGeq" (formula "2") (term "1,0"))
               (rule "inEqSimp_contradInEq1" (formula "2") (term "0,0") (ifseqformula "56"))
               (rule "qeq_literals" (formula "2") (term "0,0,0"))
                (builtin "One Step Simplification" (formula "2"))
               (rule "inEqSimp_contradInEq1" (formula "2") (term "1") (ifseqformula "57"))
               (rule "qeq_literals" (formula "2") (term "0,1"))
                (builtin "One Step Simplification" (formula "2"))
               (rule "inEqSimp_contradInEq1" (formula "2") (ifseqformula "58"))
               (rule "andLeft" (formula "2"))
               (rule "inEqSimp_homoInEq1" (formula "2"))
               (rule "polySimp_pullOutFactor1b" (formula "2") (term "0"))
               (rule "add_literals" (formula "2") (term "1,1,0"))
               (rule "times_zero_1" (formula "2") (term "1,0"))
               (rule "add_zero_right" (formula "2") (term "0"))
               (rule "leq_literals" (formula "2"))
               (rule "closeFalse" (formula "2"))
            )
         )
      )
   )
   (branch "Exceptional Post (get)"
       (builtin "One Step Simplification" (formula "60"))
       (builtin "One Step Simplification" (formula "93"))
      (rule "selectCreatedOfAnonAsFormulaEQ" (formula "60") (term "1,0") (ifseqformula "58"))
      (rule "andLeft" (formula "60"))
      (rule "andLeft" (formula "61"))
      (rule "andLeft" (formula "60"))
      (rule "andLeft" (formula "62"))
      (rule "notLeft" (formula "60"))
      (rule "close" (formula "64") (ifseqformula "63"))
   )
   (branch "Pre (get)"
       (builtin "One Step Simplification" (formula "92") (ifInst ""  (formula "75")) (ifInst ""  (formula "75")))
      (rule "selectCreatedOfAnonAsFormulaEQ" (formula "92") (term "1,1") (ifseqformula "58"))
      (rule "wellFormedAnonEQ" (formula "92") (term "0,1") (ifseqformula "58"))
      (rule "replace_known_left" (formula "92") (term "0,1,1") (ifseqformula "47"))
       (builtin "One Step Simplification" (formula "92") (ifInst ""  (formula "21")) (ifInst ""  (formula "57")))
      (rule "castedGetAny" (formula "92") (term "0,1,0,0"))
      (rule "inEqSimp_ltToLeq" (formula "92") (term "1,0,0,0"))
      (rule "polySimp_mulComm0" (formula "92") (term "1,0,0,1,0,0,0"))
      (rule "inEqSimp_commuteLeq" (formula "92") (term "0,0,0,0"))
      (rule "inEqSimp_sepPosMonomial0" (formula "92") (term "1,0,0,0"))
      (rule "polySimp_mulComm0" (formula "92") (term "1,1,0,0,0"))
      (rule "polySimp_rightDist" (formula "92") (term "1,1,0,0,0"))
      (rule "polySimp_mulLiterals" (formula "92") (term "1,1,1,0,0,0"))
      (rule "mul_literals" (formula "92") (term "0,1,1,0,0,0"))
      (rule "polySimp_elimOne" (formula "92") (term "1,1,1,0,0,0"))
      (rule "pullOutSelect" (formula "92") (term "0,0,1,0,0") (inst "selectSK=org_apache_commons_csv_CSVRecord_key_seq_0"))
      (rule "applyEq" (formula "93") (term "0,1,1,1,0,0,0") (ifseqformula "1"))
      (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "59"))
       (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "90")) (ifInst ""  (formula "25")))
      (rule "elementOfSingleton" (formula "1") (term "0,0"))
       (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "90")))
      (rule "applyEqReverse" (formula "93") (term "0,1,1,1,0,0,0") (ifseqformula "1"))
      (rule "applyEqReverse" (formula "93") (term "0,0,1,0,0") (ifseqformula "1"))
      (rule "hideAuxiliaryEq" (formula "1"))
      (rule "Class_invariant_axiom_for_org_apache_commons_csv_CSVRecord" (formula "92") (term "1") (inst "i=i") (inst "i_0=i_0"))
      (rule "replaceKnownSelect_taclet20_4" (formula "92") (term "0,0,0,0,1"))
      (rule "replaceKnownAuxiliaryConstant_taclet20_5" (formula "92") (term "0,0,0,0,1"))
      (rule "replaceKnownSelect_taclet20_4" (formula "92") (term "0,0,0,0,1,0,1,0,1"))
      (rule "replaceKnownSelect_taclet20_4" (formula "92") (term "0,1,1,0,0,0,1,0,1"))
      (rule "replaceKnownAuxiliaryConstant_taclet20_5" (formula "92") (term "0,0,0,0,1,0,1,0,1"))
      (rule "replaceKnownAuxiliaryConstant_taclet20_5" (formula "92") (term "0,1,1,0,0,0,1,0,1"))
      (rule "expand_inInt" (formula "92") (term "1,0,0,1,0,1"))
      (rule "expand_inInt" (formula "92") (term "1,0,0,1,1"))
      (rule "replace_int_MAX" (formula "92") (term "1,0,1,0,0,1,0,1"))
      (rule "replace_int_MIN" (formula "92") (term "0,1,1,0,0,1,0,1"))
      (rule "replace_int_MIN" (formula "92") (term "0,1,1,0,0,1,1"))
      (rule "replace_int_MAX" (formula "92") (term "1,0,1,0,0,1,1"))
      (rule "eqSymm" (formula "92") (term "0,0,1"))
      (rule "castedGetAny" (formula "92") (term "0,0,1,0,1,1"))
      (rule "castedGetAny" (formula "92") (term "0,0,1,0,1,0,1"))
      (rule "inEqSimp_ltToLeq" (formula "92") (term "1,0,0,0,1,1"))
      (rule "polySimp_mulComm0" (formula "92") (term "1,0,0,1,0,0,0,1,1"))
      (rule "inEqSimp_ltToLeq" (formula "92") (term "1,0,0,0,1,0,1"))
      (rule "polySimp_mulComm0" (formula "92") (term "1,0,0,1,0,0,0,1,0,1"))
      (rule "inEqSimp_commuteLeq" (formula "92") (term "0,0,0,0,1,1"))
      (rule "inEqSimp_commuteLeq" (formula "92") (term "0,0,0,0,1,0,1"))
      (rule "inEqSimp_commuteLeq" (formula "92") (term "1,1,0,0,1,0,1"))
      (rule "inEqSimp_commuteLeq" (formula "92") (term "1,1,0,0,1,1"))
      (rule "inEqSimp_sepPosMonomial0" (formula "92") (term "1,0,0,0,1,1"))
      (rule "polySimp_mulComm0" (formula "92") (term "1,1,0,0,0,1,1"))
      (rule "polySimp_rightDist" (formula "92") (term "1,1,0,0,0,1,1"))
      (rule "mul_literals" (formula "92") (term "0,1,1,0,0,0,1,1"))
      (rule "polySimp_mulLiterals" (formula "92") (term "1,1,1,0,0,0,1,1"))
      (rule "polySimp_elimOne" (formula "92") (term "1,1,1,0,0,0,1,1"))
      (rule "inEqSimp_sepPosMonomial0" (formula "92") (term "1,0,0,0,1,0,1"))
      (rule "polySimp_mulComm0" (formula "92") (term "1,1,0,0,0,1,0,1"))
      (rule "polySimp_rightDist" (formula "92") (term "1,1,0,0,0,1,0,1"))
      (rule "mul_literals" (formula "92") (term "0,1,1,0,0,0,1,0,1"))
      (rule "polySimp_mulLiterals" (formula "92") (term "1,1,1,0,0,0,1,0,1"))
      (rule "polySimp_elimOne" (formula "92") (term "1,1,1,0,0,0,1,0,1"))
      (rule "pullOutSelect" (formula "92") (term "0,0,0,0,1") (inst "selectSK=org_apache_commons_csv_CSVRecord_value_seq_0"))
      (rule "applyEq" (formula "93") (term "0,1,1,1,0,0,0,1,1") (ifseqformula "1"))
      (rule "applyEq" (formula "93") (term "0,0,0,1,0,1,1") (ifseqformula "1"))
      (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "59"))
       (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "90")) (ifInst ""  (formula "25")))
      (rule "eqSymm" (formula "93") (term "0,0,1"))
      (rule "elementOfSingleton" (formula "1") (term "0,0"))
       (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "90")))
      (rule "applyEqReverse" (formula "93") (term "0,1,1,1,0,0,0,1,1") (ifseqformula "1"))
      (rule "applyEqReverse" (formula "93") (term "0,0,0,1,0,1,1") (ifseqformula "1"))
      (rule "applyEqReverse" (formula "93") (term "0,1,0,0,1") (ifseqformula "1"))
      (rule "hideAuxiliaryEq" (formula "1"))
      (rule "eqSymm" (formula "92") (term "0,0,1"))
      (rule "replace_known_left" (formula "92") (term "0,0,1") (ifseqformula "28"))
       (builtin "One Step Simplification" (formula "92"))
      (rule "applyEq" (formula "92") (term "1,1,1,0,0,0,1,1") (ifseqformula "28"))
      (rule "nnf_imp2or" (formula "92") (term "0,0,1"))
      (rule "nnf_imp2or" (formula "92") (term "0,1,1"))
      (rule "nnf_notAnd" (formula "92") (term "0,0,0,1"))
      (rule "nnf_notAnd" (formula "92") (term "0,0,1,1"))
      (rule "nnf_notAnd" (formula "92") (term "0,0,0,0,1"))
      (rule "inEqSimp_notGeq" (formula "92") (term "0,0,0,0,0,1"))
      (rule "times_zero_1" (formula "92") (term "1,0,0,0,0,0,0,0,1"))
      (rule "add_zero_right" (formula "92") (term "0,0,0,0,0,0,0,1"))
      (rule "inEqSimp_sepPosMonomial0" (formula "92") (term "0,0,0,0,0,1"))
      (rule "mul_literals" (formula "92") (term "1,0,0,0,0,0,1"))
      (rule "inEqSimp_notLeq" (formula "92") (term "1,0,0,0,0,1"))
      (rule "polySimp_rightDist" (formula "92") (term "1,0,0,1,0,0,0,0,1"))
      (rule "mul_literals" (formula "92") (term "0,1,0,0,1,0,0,0,0,1"))
      (rule "polySimp_addAssoc" (formula "92") (term "0,0,1,0,0,0,0,1"))
      (rule "add_literals" (formula "92") (term "0,0,0,1,0,0,0,0,1"))
      (rule "add_zero_left" (formula "92") (term "0,0,1,0,0,0,0,1"))
      (rule "inEqSimp_sepPosMonomial1" (formula "92") (term "1,0,0,0,0,1"))
      (rule "polySimp_mulLiterals" (formula "92") (term "1,1,0,0,0,0,1"))
      (rule "polySimp_elimOne" (formula "92") (term "1,1,0,0,0,0,1"))
      (rule "nnf_notAnd" (formula "92") (term "1,0,0,0,1"))
      (rule "inEqSimp_notLeq" (formula "92") (term "0,1,0,0,0,1"))
      (rule "mul_literals" (formula "92") (term "1,0,0,0,1,0,0,0,1"))
      (rule "add_literals" (formula "92") (term "0,0,0,1,0,0,0,1"))
      (rule "inEqSimp_sepPosMonomial1" (formula "92") (term "0,1,0,0,0,1"))
      (rule "mul_literals" (formula "92") (term "1,0,1,0,0,0,1"))
      (rule "inEqSimp_notGeq" (formula "92") (term "1,1,0,0,0,1"))
      (rule "mul_literals" (formula "92") (term "1,0,0,1,1,0,0,0,1"))
      (rule "add_literals" (formula "92") (term "0,0,1,1,0,0,0,1"))
      (rule "inEqSimp_sepPosMonomial0" (formula "92") (term "1,1,0,0,0,1"))
      (rule "mul_literals" (formula "92") (term "1,1,1,0,0,0,1"))
      (rule "nnf_notAnd" (formula "92") (term "1,0,0,1,1"))
      (rule "inEqSimp_notLeq" (formula "92") (term "0,1,0,0,1,1"))
      (rule "mul_literals" (formula "92") (term "1,0,0,0,1,0,0,1,1"))
      (rule "add_literals" (formula "92") (term "0,0,0,1,0,0,1,1"))
      (rule "inEqSimp_sepPosMonomial1" (formula "92") (term "0,1,0,0,1,1"))
      (rule "mul_literals" (formula "92") (term "1,0,1,0,0,1,1"))
      (rule "inEqSimp_notGeq" (formula "92") (term "1,1,0,0,1,1"))
      (rule "mul_literals" (formula "92") (term "1,0,0,1,1,0,0,1,1"))
      (rule "add_literals" (formula "92") (term "0,0,1,1,0,0,1,1"))
      (rule "inEqSimp_sepPosMonomial0" (formula "92") (term "1,1,0,0,1,1"))
      (rule "mul_literals" (formula "92") (term "1,1,1,0,0,1,1"))
      (rule "nnf_notAnd" (formula "92") (term "0,0,0,1,1"))
      (rule "inEqSimp_notGeq" (formula "92") (term "0,0,0,0,1,1"))
      (rule "times_zero_1" (formula "92") (term "1,0,0,0,0,0,0,1,1"))
      (rule "add_zero_right" (formula "92") (term "0,0,0,0,0,0,1,1"))
      (rule "inEqSimp_sepPosMonomial0" (formula "92") (term "0,0,0,0,1,1"))
      (rule "mul_literals" (formula "92") (term "1,0,0,0,0,1,1"))
      (rule "inEqSimp_notLeq" (formula "92") (term "1,0,0,0,1,1"))
      (rule "polySimp_rightDist" (formula "92") (term "1,0,0,1,0,0,0,1,1"))
      (rule "mul_literals" (formula "92") (term "0,1,0,0,1,0,0,0,1,1"))
      (rule "polySimp_addAssoc" (formula "92") (term "0,0,1,0,0,0,1,1"))
      (rule "add_literals" (formula "92") (term "0,0,0,1,0,0,0,1,1"))
      (rule "add_zero_left" (formula "92") (term "0,0,1,0,0,0,1,1"))
      (rule "inEqSimp_sepPosMonomial1" (formula "92") (term "1,0,0,0,1,1"))
      (rule "polySimp_mulLiterals" (formula "92") (term "1,1,0,0,0,1,1"))
      (rule "polySimp_elimOne" (formula "92") (term "1,1,0,0,0,1,1"))
      (rule "onlyCreatedObjectsAreReferenced" (formula "31") (term "1,0") (ifseqformula "21"))
      (rule "onlyCreatedObjectsAreReferenced" (formula "63") (term "0") (ifseqformula "21"))
      (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "64"))
       (builtin "One Step Simplification" (formula "1"))
      (rule "cut_direct" (formula "33") (term "0"))
      (branch "CUT: de.polyas.core3.open.cred.CredTool.polyasMode = de.polyas.core3.open.cred.CredTool.FieldsForPolyasMode.MAX TRUE"
          (builtin "One Step Simplification" (formula "34"))
         (rule "true_left" (formula "34"))
         (rule "applyEq" (formula "13") (term "1,0") (ifseqformula "33"))
         (rule "replace_known_left" (formula "32") (term "1") (ifseqformula "13"))
          (builtin "One Step Simplification" (formula "32"))
         (rule "true_left" (formula "32"))
         (rule "applyEq" (formula "72") (term "0") (ifseqformula "32"))
         (rule "onlyCreatedObjectsAreReferenced" (formula "64") (term "0") (ifseqformula "22"))
         (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "65"))
          (builtin "One Step Simplification" (formula "1"))
         (rule "allLeft" (formula "34") (inst "t=i_2_0"))
         (rule "inEqSimp_commuteGeq" (formula "34") (term "1"))
         (rule "applyEq" (formula "34") (term "0,0,0,0") (ifseqformula "39"))
         (rule "replace_known_right" (formula "34") (term "0,0,0") (ifseqformula "78"))
          (builtin "One Step Simplification" (formula "34"))
         (rule "true_left" (formula "34"))
         (rule "allLeft" (formula "39") (inst "t=i_1"))
         (rule "inEqSimp_commuteGeq" (formula "39") (term "1"))
         (rule "applyEq" (formula "39") (term "0,0,0,0") (ifseqformula "46"))
         (rule "replace_known_right" (formula "39") (term "0,0,0") (ifseqformula "78"))
          (builtin "One Step Simplification" (formula "39"))
         (rule "true_left" (formula "39"))
         (rule "andRight" (formula "94"))
         (branch
            (rule "nnf_ex2all" (formula "94"))
            (rule "nnf_notAnd" (formula "1") (term "0"))
            (rule "nnf_notAnd" (formula "1") (term "0,0"))
            (rule "inEqSimp_notGeq" (formula "1") (term "0,0,0"))
            (rule "mul_literals" (formula "1") (term "1,0,0,0,0,0"))
            (rule "add_literals" (formula "1") (term "0,0,0,0,0"))
            (rule "inEqSimp_sepPosMonomial0" (formula "1") (term "0,0,0"))
            (rule "mul_literals" (formula "1") (term "1,0,0,0"))
            (rule "inEqSimp_notLeq" (formula "1") (term "1,0,0"))
            (rule "polySimp_rightDist" (formula "1") (term "1,0,0,1,0,0"))
            (rule "mul_literals" (formula "1") (term "0,1,0,0,1,0,0"))
            (rule "polySimp_addAssoc" (formula "1") (term "0,0,1,0,0"))
            (rule "add_literals" (formula "1") (term "0,0,0,1,0,0"))
            (rule "add_zero_left" (formula "1") (term "0,0,1,0,0"))
            (rule "inEqSimp_sepPosMonomial1" (formula "1") (term "1,0,0"))
            (rule "polySimp_mulLiterals" (formula "1") (term "1,1,0,0"))
            (rule "polySimp_elimOne" (formula "1") (term "1,1,0,0"))
            (rule "commute_or_2" (formula "1") (term "0"))
            (rule "commute_or" (formula "1") (term "0,0"))
            (rule "onlyCreatedObjectsAreReferenced" (formula "64") (term "0") (ifseqformula "24"))
            (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "65"))
             (builtin "One Step Simplification" (formula "1"))
            (rule "allLeft" (formula "2") (inst "t=i_0"))
            (rule "replace_known_left" (formula "2") (term "0,0,0") (ifseqformula "53"))
             (builtin "One Step Simplification" (formula "2"))
            (rule "inEqSimp_commuteGeq" (formula "2") (term "1"))
            (rule "inEqSimp_contradInEq1" (formula "2") (term "0") (ifseqformula "49"))
            (rule "qeq_literals" (formula "2") (term "0,0"))
             (builtin "One Step Simplification" (formula "2"))
            (rule "inEqSimp_contradInEq1" (formula "2") (ifseqformula "51"))
            (rule "andLeft" (formula "2"))
            (rule "inEqSimp_homoInEq1" (formula "2"))
            (rule "polySimp_pullOutFactor1b" (formula "2") (term "0"))
            (rule "add_literals" (formula "2") (term "1,1,0"))
            (rule "times_zero_1" (formula "2") (term "1,0"))
            (rule "add_literals" (formula "2") (term "0"))
            (rule "leq_literals" (formula "2"))
            (rule "closeFalse" (formula "2"))
         )
         (branch
            (rule "andRight" (formula "94"))
            (branch
               (rule "allRight" (formula "94") (inst "sk=i_0_0"))
               (rule "orRight" (formula "94"))
               (rule "orRight" (formula "94"))
               (rule "notRight" (formula "96"))
               (rule "orRight" (formula "95"))
               (rule "orRight" (formula "97"))
               (rule "inEqSimp_leqRight" (formula "95"))
               (rule "mul_literals" (formula "1") (term "1,0,0"))
               (rule "add_literals" (formula "1") (term "0,0"))
               (rule "add_zero_left" (formula "1") (term "0"))
               (rule "inEqSimp_geqRight" (formula "96"))
               (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
               (rule "polySimp_addComm1" (formula "1") (term "0"))
               (rule "inEqSimp_geqRight" (formula "97"))
               (rule "mul_literals" (formula "1") (term "1,0,0"))
               (rule "add_literals" (formula "1") (term "0,0"))
               (rule "inEqSimp_leqRight" (formula "98"))
               (rule "mul_literals" (formula "1") (term "1,0,0"))
               (rule "add_literals" (formula "1") (term "0,0"))
               (rule "inEqSimp_sepNegMonomial0" (formula "3"))
               (rule "polySimp_mulLiterals" (formula "3") (term "0"))
               (rule "polySimp_elimOne" (formula "3") (term "0"))
               (rule "inEqSimp_sepPosMonomial0" (formula "2"))
               (rule "mul_literals" (formula "2") (term "1"))
               (rule "inEqSimp_sepPosMonomial1" (formula "1"))
               (rule "mul_literals" (formula "1") (term "1"))
               (rule "inEqSimp_subsumption1" (formula "1") (ifseqformula "4"))
               (rule "leq_literals" (formula "1") (term "0"))
                (builtin "One Step Simplification" (formula "1"))
               (rule "true_left" (formula "1"))
               (rule "onlyCreatedObjectsAreReferenced" (formula "67") (term "0") (ifseqformula "27"))
               (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "68"))
                (builtin "One Step Simplification" (formula "1"))
               (rule "allLeft" (formula "36") (inst "t=i_0_0"))
               (rule "replace_known_left" (formula "36") (term "0,0,0,0") (ifseqformula "5"))
                (builtin "One Step Simplification" (formula "36"))
               (rule "inEqSimp_commuteGeq" (formula "36") (term "1"))
               (rule "inEqSimp_contradInEq0" (formula "36") (term "1,0") (ifseqformula "2"))
               (rule "qeq_literals" (formula "36") (term "0,1,0"))
                (builtin "One Step Simplification" (formula "36"))
               (rule "inEqSimp_contradInEq1" (formula "36") (term "1") (ifseqformula "3"))
               (rule "inEqSimp_homoInEq1" (formula "36") (term "0,1"))
               (rule "polySimp_pullOutFactor1b" (formula "36") (term "0,0,1"))
               (rule "add_literals" (formula "36") (term "1,1,0,0,1"))
               (rule "times_zero_1" (formula "36") (term "1,0,0,1"))
               (rule "add_zero_right" (formula "36") (term "0,0,1"))
               (rule "leq_literals" (formula "36") (term "0,1"))
                (builtin "One Step Simplification" (formula "36"))
               (rule "inEqSimp_contradInEq0" (formula "4") (ifseqformula "36"))
               (rule "qeq_literals" (formula "4") (term "0"))
                (builtin "One Step Simplification" (formula "4"))
               (rule "closeFalse" (formula "4"))
            )
            (branch
               (rule "allRight" (formula "94") (inst "sk=i_2"))
               (rule "orRight" (formula "94"))
               (rule "orRight" (formula "94"))
               (rule "notRight" (formula "96"))
               (rule "orRight" (formula "95"))
               (rule "orRight" (formula "97"))
               (rule "inEqSimp_leqRight" (formula "95"))
               (rule "mul_literals" (formula "1") (term "1,0,0"))
               (rule "add_literals" (formula "1") (term "0,0"))
               (rule "add_zero_left" (formula "1") (term "0"))
               (rule "inEqSimp_geqRight" (formula "96"))
               (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
               (rule "polySimp_addComm1" (formula "1") (term "0"))
               (rule "inEqSimp_geqRight" (formula "97"))
               (rule "mul_literals" (formula "1") (term "1,0,0"))
               (rule "add_literals" (formula "1") (term "0,0"))
               (rule "inEqSimp_leqRight" (formula "98"))
               (rule "mul_literals" (formula "1") (term "1,0,0"))
               (rule "add_literals" (formula "1") (term "0,0"))
               (rule "inEqSimp_sepNegMonomial0" (formula "3"))
               (rule "polySimp_mulLiterals" (formula "3") (term "0"))
               (rule "polySimp_elimOne" (formula "3") (term "0"))
               (rule "inEqSimp_sepPosMonomial0" (formula "2"))
               (rule "mul_literals" (formula "2") (term "1"))
               (rule "inEqSimp_sepPosMonomial1" (formula "1"))
               (rule "mul_literals" (formula "1") (term "1"))
               (rule "inEqSimp_subsumption1" (formula "1") (ifseqformula "4"))
               (rule "leq_literals" (formula "1") (term "0"))
                (builtin "One Step Simplification" (formula "1"))
               (rule "true_left" (formula "1"))
               (rule "onlyCreatedObjectsAreReferenced" (formula "67") (term "0") (ifseqformula "27"))
               (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "68"))
                (builtin "One Step Simplification" (formula "1"))
               (rule "allLeft" (formula "37") (inst "t=i_2"))
               (rule "replace_known_left" (formula "37") (term "0,0,0,0") (ifseqformula "5"))
                (builtin "One Step Simplification" (formula "37"))
               (rule "inEqSimp_commuteGeq" (formula "37") (term "1"))
               (rule "inEqSimp_contradInEq1" (formula "37") (term "0,0") (ifseqformula "4"))
               (rule "qeq_literals" (formula "37") (term "0,0,0"))
                (builtin "One Step Simplification" (formula "37"))
               (rule "inEqSimp_contradInEq1" (formula "37") (term "1") (ifseqformula "3"))
               (rule "inEqSimp_homoInEq1" (formula "37") (term "0,1"))
               (rule "polySimp_pullOutFactor1b" (formula "37") (term "0,0,1"))
               (rule "add_literals" (formula "37") (term "1,1,0,0,1"))
               (rule "times_zero_1" (formula "37") (term "1,0,0,1"))
               (rule "add_zero_right" (formula "37") (term "0,0,1"))
               (rule "leq_literals" (formula "37") (term "0,1"))
                (builtin "One Step Simplification" (formula "37"))
               (rule "inEqSimp_contradInEq1" (formula "2") (ifseqformula "37"))
               (rule "qeq_literals" (formula "2") (term "0"))
                (builtin "One Step Simplification" (formula "2"))
               (rule "closeFalse" (formula "2"))
            )
         )
      )
      (branch "CUT: de.polyas.core3.open.cred.CredTool.polyasMode = de.polyas.core3.open.cred.CredTool.FieldsForPolyasMode.MAX FALSE"
          (builtin "One Step Simplification" (formula "33"))
         (rule "applyEq" (formula "62") (term "0") (ifseqformula "33"))
         (rule "applyEq" (formula "13") (term "1,0") (ifseqformula "33"))
         (rule "applyEq" (formula "74") (term "0") (ifseqformula "33"))
         (rule "onlyCreatedObjectsAreReferenced" (formula "66") (term "0") (ifseqformula "22"))
         (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "67"))
          (builtin "One Step Simplification" (formula "1"))
         (rule "allLeft" (formula "35") (inst "t=i_2_0"))
         (rule "inEqSimp_commuteGeq" (formula "35") (term "1"))
         (rule "applyEq" (formula "35") (term "0,0,0,0") (ifseqformula "40"))
         (rule "replace_known_right" (formula "35") (term "0,0,0") (ifseqformula "80"))
          (builtin "One Step Simplification" (formula "35"))
         (rule "true_left" (formula "35"))
         (rule "allLeft" (formula "40") (inst "t=i_1"))
         (rule "inEqSimp_commuteGeq" (formula "40") (term "1"))
         (rule "applyEq" (formula "40") (term "0,0,0,0") (ifseqformula "47"))
         (rule "replace_known_right" (formula "40") (term "0,0,0") (ifseqformula "80"))
          (builtin "One Step Simplification" (formula "40"))
         (rule "true_left" (formula "40"))
         (rule "andRight" (formula "96"))
         (branch
            (rule "nnf_ex2all" (formula "96"))
            (rule "nnf_notAnd" (formula "1") (term "0"))
            (rule "nnf_notAnd" (formula "1") (term "0,0"))
            (rule "inEqSimp_notGeq" (formula "1") (term "0,0,0"))
            (rule "mul_literals" (formula "1") (term "1,0,0,0,0,0"))
            (rule "add_zero_right" (formula "1") (term "0,0,0,0,0"))
            (rule "inEqSimp_sepPosMonomial0" (formula "1") (term "0,0,0"))
            (rule "mul_literals" (formula "1") (term "1,0,0,0"))
            (rule "inEqSimp_notLeq" (formula "1") (term "1,0,0"))
            (rule "polySimp_rightDist" (formula "1") (term "1,0,0,1,0,0"))
            (rule "mul_literals" (formula "1") (term "0,1,0,0,1,0,0"))
            (rule "polySimp_addAssoc" (formula "1") (term "0,0,1,0,0"))
            (rule "add_literals" (formula "1") (term "0,0,0,1,0,0"))
            (rule "add_zero_left" (formula "1") (term "0,0,1,0,0"))
            (rule "inEqSimp_sepPosMonomial1" (formula "1") (term "1,0,0"))
            (rule "polySimp_mulLiterals" (formula "1") (term "1,1,0,0"))
            (rule "polySimp_elimOne" (formula "1") (term "1,1,0,0"))
            (rule "commute_or_2" (formula "1") (term "0"))
            (rule "commute_or" (formula "1") (term "0,0"))
            (rule "onlyCreatedObjectsAreReferenced" (formula "66") (term "0") (ifseqformula "24"))
            (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "67"))
             (builtin "One Step Simplification" (formula "1"))
            (rule "allLeft" (formula "2") (inst "t=i_0"))
            (rule "replace_known_left" (formula "2") (term "0,0,0") (ifseqformula "54"))
             (builtin "One Step Simplification" (formula "2"))
            (rule "inEqSimp_commuteGeq" (formula "2") (term "1"))
            (rule "inEqSimp_contradInEq1" (formula "2") (term "1") (ifseqformula "52"))
            (rule "inEqSimp_homoInEq1" (formula "2") (term "0,1"))
            (rule "polySimp_pullOutFactor1b" (formula "2") (term "0,0,1"))
            (rule "add_literals" (formula "2") (term "1,1,0,0,1"))
            (rule "times_zero_1" (formula "2") (term "1,0,0,1"))
            (rule "add_zero_right" (formula "2") (term "0,0,1"))
            (rule "leq_literals" (formula "2") (term "0,1"))
             (builtin "One Step Simplification" (formula "2"))
            (rule "inEqSimp_contradInEq1" (formula "2") (ifseqformula "50"))
            (rule "qeq_literals" (formula "2") (term "0"))
             (builtin "One Step Simplification" (formula "2"))
            (rule "closeFalse" (formula "2"))
         )
         (branch
            (rule "andRight" (formula "96"))
            (branch
               (rule "allRight" (formula "96") (inst "sk=i_0_0"))
               (rule "orRight" (formula "96"))
               (rule "orRight" (formula "96"))
               (rule "notRight" (formula "98"))
               (rule "orRight" (formula "98"))
               (rule "orRight" (formula "97"))
               (rule "inEqSimp_leqRight" (formula "100"))
               (rule "mul_literals" (formula "1") (term "1,0,0"))
               (rule "add_literals" (formula "1") (term "0,0"))
               (rule "inEqSimp_geqRight" (formula "100"))
               (rule "mul_literals" (formula "1") (term "1,0,0"))
               (rule "add_literals" (formula "1") (term "0,0"))
               (rule "inEqSimp_geqRight" (formula "100"))
               (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
               (rule "polySimp_addComm1" (formula "1") (term "0"))
               (rule "inEqSimp_leqRight" (formula "100"))
               (rule "mul_literals" (formula "1") (term "1,0,0"))
               (rule "add_literals" (formula "1") (term "0,0"))
               (rule "add_zero_left" (formula "1") (term "0"))
               (rule "inEqSimp_sepPosMonomial1" (formula "4"))
               (rule "mul_literals" (formula "4") (term "1"))
               (rule "inEqSimp_sepPosMonomial0" (formula "3"))
               (rule "mul_literals" (formula "3") (term "1"))
               (rule "inEqSimp_sepNegMonomial0" (formula "2"))
               (rule "polySimp_mulLiterals" (formula "2") (term "0"))
               (rule "polySimp_elimOne" (formula "2") (term "0"))
               (rule "inEqSimp_subsumption1" (formula "4") (ifseqformula "1"))
               (rule "leq_literals" (formula "4") (term "0"))
                (builtin "One Step Simplification" (formula "4"))
               (rule "true_left" (formula "4"))
               (rule "onlyCreatedObjectsAreReferenced" (formula "69") (term "0") (ifseqformula "27"))
               (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "70"))
                (builtin "One Step Simplification" (formula "1"))
               (rule "allLeft" (formula "36") (inst "t=i_0_0"))
               (rule "replace_known_left" (formula "36") (term "0,0,0,0") (ifseqformula "5"))
                (builtin "One Step Simplification" (formula "36"))
               (rule "inEqSimp_commuteGeq" (formula "36") (term "1"))
               (rule "inEqSimp_contradInEq0" (formula "36") (term "1,0") (ifseqformula "4"))
               (rule "qeq_literals" (formula "36") (term "0,1,0"))
                (builtin "One Step Simplification" (formula "36"))
               (rule "inEqSimp_contradInEq1" (formula "36") (term "0") (ifseqformula "2"))
               (rule "qeq_literals" (formula "36") (term "0,0"))
                (builtin "One Step Simplification" (formula "36"))
               (rule "inEqSimp_contradInEq1" (formula "36") (ifseqformula "3"))
               (rule "andLeft" (formula "36"))
               (rule "inEqSimp_homoInEq1" (formula "36"))
               (rule "polySimp_pullOutFactor1b" (formula "36") (term "0"))
               (rule "add_literals" (formula "36") (term "1,1,0"))
               (rule "times_zero_1" (formula "36") (term "1,0"))
               (rule "add_zero_right" (formula "36") (term "0"))
               (rule "leq_literals" (formula "36"))
               (rule "closeFalse" (formula "36"))
            )
            (branch
               (rule "allRight" (formula "96") (inst "sk=i_2"))
               (rule "orRight" (formula "96"))
               (rule "orRight" (formula "96"))
               (rule "notRight" (formula "98"))
               (rule "orRight" (formula "98"))
               (rule "orRight" (formula "97"))
               (rule "inEqSimp_leqRight" (formula "100"))
               (rule "mul_literals" (formula "1") (term "1,0,0"))
               (rule "add_literals" (formula "1") (term "0,0"))
               (rule "inEqSimp_geqRight" (formula "100"))
               (rule "mul_literals" (formula "1") (term "1,0,0"))
               (rule "add_literals" (formula "1") (term "0,0"))
               (rule "inEqSimp_geqRight" (formula "100"))
               (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
               (rule "polySimp_addComm1" (formula "1") (term "0"))
               (rule "inEqSimp_leqRight" (formula "100"))
               (rule "mul_literals" (formula "1") (term "1,0,0"))
               (rule "add_literals" (formula "1") (term "0,0"))
               (rule "add_zero_left" (formula "1") (term "0"))
               (rule "inEqSimp_sepPosMonomial1" (formula "4"))
               (rule "mul_literals" (formula "4") (term "1"))
               (rule "inEqSimp_sepPosMonomial0" (formula "3"))
               (rule "mul_literals" (formula "3") (term "1"))
               (rule "inEqSimp_sepNegMonomial0" (formula "2"))
               (rule "polySimp_mulLiterals" (formula "2") (term "0"))
               (rule "polySimp_elimOne" (formula "2") (term "0"))
               (rule "inEqSimp_subsumption1" (formula "4") (ifseqformula "1"))
               (rule "leq_literals" (formula "4") (term "0"))
                (builtin "One Step Simplification" (formula "4"))
               (rule "true_left" (formula "4"))
               (rule "onlyCreatedObjectsAreReferenced" (formula "69") (term "0") (ifseqformula "27"))
               (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "70"))
                (builtin "One Step Simplification" (formula "1"))
               (rule "allLeft" (formula "37") (inst "t=i_2"))
               (rule "replace_known_left" (formula "37") (term "0,0,0,0") (ifseqformula "5"))
                (builtin "One Step Simplification" (formula "37"))
               (rule "inEqSimp_commuteGeq" (formula "37") (term "1"))
               (rule "inEqSimp_contradInEq1" (formula "37") (term "0,0") (ifseqformula "2"))
               (rule "qeq_literals" (formula "37") (term "0,0,0"))
                (builtin "One Step Simplification" (formula "37"))
               (rule "inEqSimp_contradInEq0" (formula "37") (term "0") (ifseqformula "4"))
               (rule "qeq_literals" (formula "37") (term "0,0"))
                (builtin "One Step Simplification" (formula "37"))
               (rule "inEqSimp_contradInEq1" (formula "37") (ifseqformula "3"))
               (rule "andLeft" (formula "37"))
               (rule "inEqSimp_homoInEq1" (formula "37"))
               (rule "polySimp_pullOutFactor1b" (formula "37") (term "0"))
               (rule "add_literals" (formula "37") (term "1,1,0"))
               (rule "times_zero_1" (formula "37") (term "1,0"))
               (rule "add_zero_right" (formula "37") (term "0"))
               (rule "leq_literals" (formula "37"))
               (rule "closeFalse" (formula "37"))
            )
         )
      )
   )
   (branch "Null reference (var = null)"
       (builtin "One Step Simplification" (formula "92") (ifInst ""  (formula "89")))
      (rule "closeTrue" (formula "92"))
   )
)
(branch "Exceptional Post (printStatus)"
    (builtin "One Step Simplification" (formula "35"))
    (builtin "One Step Simplification" (formula "67"))
   (rule "andLeft" (formula "35"))
   (rule "selectCreatedOfAnonAsFormulaEQ" (formula "36") (term "1,0") (ifseqformula "35"))
   (rule "andLeft" (formula "36"))
   (rule "andLeft" (formula "37"))
   (rule "andLeft" (formula "36"))
   (rule "notLeft" (formula "38"))
   (rule "notLeft" (formula "36"))
   (rule "close" (formula "38") (ifseqformula "37"))
)
(branch "Pre (printStatus)"
    (builtin "One Step Simplification" (formula "65") (ifInst ""  (formula "40")) (ifInst ""  (formula "53")) (ifInst ""  (formula "1")))
   (rule "closeTrue" (formula "65"))
)
)
}
