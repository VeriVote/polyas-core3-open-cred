\profile "Java Profile";

\settings {
"#Proof-Settings-Config-File
#Tue Nov 19 00:42:01 CET 2019
[Labels]UseOriginLabels=false
[StrategyProperty]QUERYAXIOM_OPTIONS_KEY=QUERYAXIOM_ON
[SMTSettings]invariantForall=false
[Strategy]ActiveStrategy=JavaCardDLStrategy
[StrategyProperty]USER_TACLETS_OPTIONS_KEY1=USER_TACLETS_OFF
[StrategyProperty]QUANTIFIERS_OPTIONS_KEY=QUANTIFIERS_NON_SPLITTING_WITH_PROGS
[StrategyProperty]USER_TACLETS_OPTIONS_KEY2=USER_TACLETS_OFF
[Choice]DefaultChoices=methodExpansion-methodExpansion\\:modularOnly , mergeGenerateIsWeakeningGoal-mergeGenerateIsWeakeningGoal\\:off , wdChecks-wdChecks\\:off , wdOperator-wdOperator\\:L , permissions-permissions\\:off , integerSimplificationRules-integerSimplificationRules\\:full , reach-reach\\:on , moreSeqRules-moreSeqRules\\:on , sequences-sequences\\:on , bigint-bigint\\:on , modelFields-modelFields\\:treatAsAxiom , Strings-Strings\\:on , JavaCard-JavaCard\\:off , runtimeExceptions-runtimeExceptions\\:allow , programRules-programRules\\:Java , intRules-intRules\\:javaSemantics , initialisation-initialisation\\:disableStaticInitialisation , assertions-assertions\\:on
[StrategyProperty]LOOP_OPTIONS_KEY=LOOP_INVARIANT
[StrategyProperty]INF_FLOW_CHECK_PROPERTY=INF_FLOW_CHECK_FALSE
[SMTSettings]UseBuiltUniqueness=false
[SMTSettings]explicitTypeHierarchy=false
[SMTSettings]instantiateHierarchyAssumptions=true
[StrategyProperty]NON_LIN_ARITH_OPTIONS_KEY=NON_LIN_ARITH_DEF_OPS
[SMTSettings]SelectedTaclets=
[StrategyProperty]DEP_OPTIONS_KEY=DEP_ON
[StrategyProperty]AUTO_INDUCTION_OPTIONS_KEY=AUTO_INDUCTION_OFF
[Strategy]MaximumNumberOfAutomaticApplications=10000
[StrategyProperty]STOPMODE_OPTIONS_KEY=STOPMODE_DEFAULT
[StrategyProperty]CLASS_AXIOM_OPTIONS_KEY=CLASS_AXIOM_FREE
[SMTSettings]useConstantsForBigOrSmallIntegers=true
[StrategyProperty]MPS_OPTIONS_KEY=MPS_MERGE
[StrategyProperty]SYMBOLIC_EXECUTION_NON_EXECUTION_BRANCH_HIDING_OPTIONS_KEY=SYMBOLIC_EXECUTION_NON_EXECUTION_BRANCH_HIDING_OFF
[Strategy]Timeout=-1
[StrategyProperty]SYMBOLIC_EXECUTION_ALIAS_CHECK_OPTIONS_KEY=SYMBOLIC_EXECUTION_ALIAS_CHECK_NEVER
[StrategyProperty]QUERY_NEW_OPTIONS_KEY=QUERY_OFF
[SMTSettings]useUninterpretedMultiplication=true
[StrategyProperty]BLOCK_OPTIONS_KEY=BLOCK_CONTRACT_INTERNAL
[StrategyProperty]METHOD_OPTIONS_KEY=METHOD_CONTRACT
[StrategyProperty]USER_TACLETS_OPTIONS_KEY3=USER_TACLETS_OFF
[SMTSettings]maxGenericSorts=2
[StrategyProperty]OSS_OPTIONS_KEY=OSS_ON
[StrategyProperty]SPLITTING_OPTIONS_KEY=SPLITTING_DELAYED
[SMTSettings]integersMinimum=-2147483645
[StrategyProperty]VBT_PHASE=VBT_SYM_EX
[SMTSettings]integersMaximum=2147483645
"
}

\javaSource "src";

\problem {
{heap:=heap_Before_LOOP<<anonHeapFunction>>}
  !(  wellFormed(heap_Before_LOOP<<anonHeapFunction>>)
    & heap = heap_Before_LOOP<<anonHeapFunction>>
    & !self_50 = null
    &   boolean::select(heap,
                        self_50,
                        java.lang.Object::<created>)
      = TRUE
    &   de.polyas.core3.open.cred.CredTool::exactInstance(self_50)
      = TRUE
    & (  ((  _record_7 = null
           |   boolean::select(heap_Before_LOOP<<anonHeapFunction>>,
                               _record_7,
                               java.lang.Object::<created>)
             = TRUE)<<SC>>)
       & ((  _vals_3 = null
           |   boolean::select(heap_Before_LOOP<<anonHeapFunction>>,
                               _vals_3,
                               java.lang.Object::<created>)
             = TRUE)<<SC>>)
       & ((  it = null
           |   boolean::select(heap_Before_LOOP<<anonHeapFunction>>,
                               it,
                               java.lang.Object::<created>)
             = TRUE)<<SC>>))
    & ((  (((((((((\forall int j;
                     ((   (  leq(Z(0(#)), j)<<origin("loop_invariant @ file CredTool.java @ line 312","[]")>>
                           & lt(j,
                                seqLen(Seq::select(heap_Before_LOOP<<anonHeapFunction>>,
                                                   _cols_2,
                                                   java.util.Collection::$seq)))<<origin("loop_invariant @ file CredTool.java @ line 312","[]")>>)<<SC,
                                                                                                                                                    origin("loop_invariant @ file CredTool.java @ line 312","[]")>>
                       -> (\exists int i;
                             ((  (leq(Z(0(#)), i)<<origin("loop_invariant @ file CredTool.java @ line 312","[]")>>
                               & lt(i,
                                    seqLen(Seq::select(heap_Before_LOOP<<anonHeapFunction>>,
                                                       _record_7,
                                                       org.apache.commons.csv.CSVRecord::$key_seq)))<<origin("loop_invariant @ file CredTool.java @ line 312","[]")>>)<<SC,
                                                                                                                                                                        origin("loop_invariant @ file CredTool.java @ line 312","[]")>>
                               & (  (java.lang.String)(any::seqGet(Seq::select(heap_Before_LOOP<<anonHeapFunction>>,
                                                                               _record_7,
                                                                               org.apache.commons.csv.CSVRecord::$key_seq),
                                                                   i))
                                  = (java.lang.String)(any::seqGet(Seq::select(heap_Before_LOOP<<anonHeapFunction>>,
                                                                               _cols_2,
                                                                               java.util.Collection::$seq),
                                                                   j)))<<origin("loop_invariant @ file CredTool.java @ line 312","[]")>>)<<SC,
                                                                                                                                           origin("loop_invariant @ file CredTool.java @ line 312","[]")>>))<<origin("loop_invariant @ file CredTool.java @ line 312","[]")>>)<<origin("loop_invariant @ file CredTool.java @ line 312","[]")>>))<<origin("loop_invariant @ file CredTool.java @ line 312","[]")>>
        & (\forall int i;
             ((   (  leq(Z(0(#)), i)<<origin("loop_invariant @ file CredTool.java @ line 314","[]")>>
                   & lt(i,
                        seqLen(Seq::select(heap_Before_LOOP<<anonHeapFunction>>,
                                           _cols_2,
                                           java.util.Collection::$seq)))<<origin("loop_invariant @ file CredTool.java @ line 314","[]")>>)<<SC,
                                                                                                                                            origin("loop_invariant @ file CredTool.java @ line 314","[]")>>
               -> (!(  (java.lang.String)(any::seqGet(Seq::select(heap_Before_LOOP<<anonHeapFunction>>,
                                                                  _cols_2,
                                                                  java.util.Collection::$seq),
                                                      i))
                     = null)<<origin("loop_invariant @ file CredTool.java @ line 314","[]")>>)<<origin("loop_invariant @ file CredTool.java @ line 314","[]")>>)<<origin("loop_invariant @ file CredTool.java @ line 314","[]")>>))<<origin("loop_invariant @ file CredTool.java @ line 314","[]")>>)<<SC>>
        & (!(_vals_3 = _cols_2)<<origin("loop_invariant @ file CredTool.java @ line 315","[]")>>)<<origin("loop_invariant @ file CredTool.java @ line 315","[]")>>)<<SC>>
        & java.lang.Object::<inv>(heap_Before_LOOP<<anonHeapFunction>>,
                                  _record_7))<<SC>>
        & java.lang.Object::<inv>(heap_Before_LOOP<<anonHeapFunction>>,
                                  _vals_3))<<SC>>
        & java.lang.Object::<inv>(heap_Before_LOOP<<anonHeapFunction>>,
                                  _cols_2))<<SC>>
        & java.lang.Object::<inv>(heap_Before_LOOP<<anonHeapFunction>>,
                                  it))<<SC>>
        & ((  (((!(it = null)<<origin("loop_invariant @ file CredTool.java @ line 320","[]")>>)<<origin("loop_invariant @ file CredTool.java @ line 320","[]")>>
            & (!(_record_7 = null)<<origin("loop_invariant @ file CredTool.java @ line 320","[]")>>)<<origin("loop_invariant @ file CredTool.java @ line 320","[]")>>)<<SC,
                                                                                                                                                                        origin("loop_invariant @ file CredTool.java @ line 320","[]")>>
            & (!(_vals_3 = null)<<origin("loop_invariant @ file CredTool.java @ line 320","[]")>>)<<origin("loop_invariant @ file CredTool.java @ line 320","[]")>>)<<SC,
                                                                                                                                                                      origin("loop_invariant @ file CredTool.java @ line 320","[]")>>
            & (!(_cols_2 = null)<<origin("loop_invariant @ file CredTool.java @ line 320","[]")>>)<<origin("loop_invariant @ file CredTool.java @ line 320","[]")>>)<<SC,
                                                                                                                                                                      origin("loop_invariant @ file CredTool.java @ line 320","[]")>>))<<SC>>
        & ((  (!(it = null)<<origin("loop_invariant @ file CredTool.java @ line 321","[]")>>)<<origin("loop_invariant @ file CredTool.java @ line 321","[]")>>
            & (  java.util.CollectionIterator::instance(it)
               = TRUE)<<origin("loop_invariant @ file CredTool.java @ line 321","[]")>>)<<origin("loop_invariant @ file CredTool.java @ line 321","[]")>>))<<SC>>
        & (  Seq::select(heap_Before_LOOP<<anonHeapFunction>>,
                         it,
                         java.util.Iterator::$seq)
           = Seq::select(heap_Before_LOOP<<anonHeapFunction>>,
                         _cols_2,
                         java.util.Collection::$seq))<<origin("loop_invariant @ file CredTool.java @ line 322","[]")>>)<<SC>>)
    & {self_50:=self_50
       || (_record_7:=_record_7
       || _vals_3:=_vals_3
       || it:=it)}
        (  \[{method-frame(source=addInputCols(java.util.ArrayList, java.util.ArrayList, org.apache.commons.csv.CSVRecord)@de.polyas.core3.open.cred.CredTool,this=self_50): {
                 b_0=it.hasNext();
               }
             }\] (  b_0 = b_0_Before
                  & (   b_0_Before = TRUE
                     -> \<{method-frame(source=addInputCols(java.util.ArrayList, java.util.ArrayList, org.apache.commons.csv.CSVRecord)@de.polyas.core3.open.cred.CredTool,this=self_50): {
                              addInputCol(_vals_3,(String)it.next(),_record_7);
                            }
                          }\> (    self_50_After_LOOP
                                 = self_50
                               & \[{method-frame(source=addInputCols(java.util.ArrayList, java.util.ArrayList, org.apache.commons.csv.CSVRecord)@de.polyas.core3.open.cred.CredTool,this=self_50): {
                                       b_0=it.hasNext();
                                     }
                                   }\] b_0_After = b_0
                               & _record_7 = _record_7
                               & _vals_3 = _vals_3
                               & it = it
                               & heap_After_LOOP = heap)))
         & (   b_0_Before = FALSE
            ->   self_50_After_LOOP = self_50
               & \[{method-frame(source=addInputCols(java.util.ArrayList, java.util.ArrayList, org.apache.commons.csv.CSVRecord)@de.polyas.core3.open.cred.CredTool,this=self_50): {
                       b_0=it.hasNext();
                     }
                   }\] b_0_After = b_0
               & _record_7 = _record_7
               & _vals_3 = _vals_3
               & it = it
               & heap_After_LOOP = heap)))

}

\proof {
(keyLog "0" (keyUser "flo" ) (keyVersion "57d504cc0f"))

(autoModeTime "9435")

(branch "dummy ID"
 (builtin "One Step Simplification" (formula "1"))
(rule "notRight" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "2"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "2"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "3"))
(rule "andLeft" (formula "2"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "6"))
(rule "andLeft" (formula "5"))
(rule "andLeft" (formula "3"))
(rule "andLeft" (formula "1"))
(rule "notLeft" (formula "9"))
(rule "andLeft" (formula "7"))
(rule "andLeft" (formula "9"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "8"))
(rule "notLeft" (formula "12"))
(rule "andLeft" (formula "11"))
(rule "notLeft" (formula "2"))
(rule "andLeft" (formula "7"))
(rule "notLeft" (formula "12"))
(rule "andLeft" (formula "11"))
(rule "andLeft" (formula "7"))
(rule "notLeft" (formula "12"))
(rule "notLeft" (formula "12"))
(rule "andLeft" (formula "7"))
(rule "andLeft" (formula "7"))
(rule "notLeft" (formula "9"))
(rule "eqSymm" (formula "15") (term "0,0,1"))
(rule "eqSymm" (formula "7") (term "1,0,1,0"))
(rule "replace_known_right" (formula "6") (term "0") (ifseqformula "22"))
 (builtin "One Step Simplification" (formula "6"))
(rule "replace_known_right" (formula "4") (term "0") (ifseqformula "18"))
 (builtin "One Step Simplification" (formula "4"))
(rule "replace_known_right" (formula "5") (term "0") (ifseqformula "19"))
 (builtin "One Step Simplification" (formula "5"))
(rule "castedGetAny" (formula "8") (term "0,0,1,0"))
(rule "castedGetAny" (formula "7") (term "1,1,0,1,0"))
(rule "castedGetAny" (formula "7") (term "0,1,0,1,0"))
(rule "inEqSimp_commuteLeq" (formula "7") (term "0,0,0"))
(rule "inEqSimp_commuteLeq" (formula "7") (term "0,0,0,1,0"))
(rule "inEqSimp_commuteLeq" (formula "8") (term "0,0,0"))
(rule "boxToDiamond" (formula "15") (term "1"))
 (builtin "One Step Simplification" (formula "15"))
(rule "notLeft" (formula "15"))
(rule "Class_invariant_axiom_for_java_util_ArrayList" (formula "11"))
(rule "true_left" (formula "11"))
(rule "Class_invariant_axiom_for_java_util_ArrayList" (formula "10"))
(rule "true_left" (formula "10"))
(rule "Class_invariant_axiom_for_org_apache_commons_csv_CSVRecord" (formula "9") (inst "i=i") (inst "i_0=i_0"))
(rule "expand_inInt" (formula "9") (term "1,0,0,1"))
(rule "expand_inInt" (formula "9") (term "1,0,0,1,0"))
(rule "replace_int_MIN" (formula "9") (term "0,1,1,0,0,1"))
(rule "replace_int_MAX" (formula "9") (term "1,0,1,0,0,1"))
(rule "replace_int_MAX" (formula "9") (term "1,0,1,0,0,1,0"))
(rule "replace_int_MIN" (formula "9") (term "0,1,1,0,0,1,0"))
(rule "andLeft" (formula "9"))
(rule "andLeft" (formula "9"))
(rule "eqSymm" (formula "9"))
(rule "castedGetAny" (formula "11") (term "0,0,1,0"))
(rule "castedGetAny" (formula "10") (term "0,0,1,0"))
(rule "inEqSimp_commuteLeq" (formula "11") (term "1,1,0,0"))
(rule "inEqSimp_commuteLeq" (formula "11") (term "0,0,0,0"))
(rule "inEqSimp_commuteLeq" (formula "10") (term "1,1,0,0"))
(rule "inEqSimp_commuteLeq" (formula "10") (term "0,0,0,0"))
(rule "commute_and_2" (formula "15") (term "1"))
(rule "commute_and" (formula "7") (term "0,0"))
(rule "commute_and" (formula "8") (term "0,0"))
(rule "commute_and" (formula "7") (term "0,0,1,0"))
(rule "commute_and" (formula "11") (term "1,0,0"))
(rule "commute_and" (formula "11") (term "0,0,0"))
(rule "commute_and" (formula "10") (term "1,0,0"))
(rule "commute_and" (formula "10") (term "0,0,0"))
(rule "commute_and_2" (formula "7") (term "0,1,0"))
(rule "shift_paren_and" (formula "11") (term "0,0"))
(rule "commute_and_2" (formula "11") (term "0,0,0"))
(rule "shift_paren_and" (formula "10") (term "0,0"))
(rule "commute_and_2" (formula "10") (term "0,0,0"))
 (builtin "Use Operation Contract" (formula "16") (newnames "heapBefore_hasNext,result_49,exc_65") (contract "java.util.Iterator[java.util.Iterator::hasNext()].JML normal_behavior operation contract.0"))
(branch "Post (hasNext)"
    (builtin "One Step Simplification" (formula "17") (ifInst ""  (formula "12")))
    (builtin "One Step Simplification" (formula "19") (ifInst ""  (formula "12")) (ifInst ""  (formula "1")))
    (builtin "One Step Simplification" (formula "18"))
   (rule "true_left" (formula "19"))
   (rule "andLeft" (formula "17"))
   (rule "andLeft" (formula "18"))
   (rule "assignment" (formula "20") (term "1"))
    (builtin "One Step Simplification" (formula "20"))
   (rule "methodCallEmpty" (formula "20") (term "1"))
   (rule "emptyModality" (formula "20") (term "1"))
    (builtin "One Step Simplification" (formula "20"))
   (rule "notRight" (formula "20"))
   (rule "andLeft" (formula "1"))
   (rule "eqSymm" (formula "1"))
   (rule "cut_direct" (formula "17") (term "0,0"))
   (branch "CUT: b_0_Before = TRUE TRUE"
       (builtin "One Step Simplification" (formula "18"))
      (rule "true_left" (formula "18"))
      (rule "replace_known_left" (formula "2") (term "0") (ifseqformula "17"))
       (builtin "One Step Simplification" (formula "2"))
      (rule "diamondToBox" (formula "2") (term "1"))
       (builtin "One Step Simplification" (formula "2"))
      (rule "notLeft" (formula "2"))
      (rule "methodCallUnfoldArguments" (formula "21") (term "1"))
      (rule "variableDeclarationAssign" (formula "21") (term "1"))
      (rule "variableDeclaration" (formula "21") (term "1") (newnames "var"))
      (rule "assignment" (formula "21") (term "1"))
       (builtin "One Step Simplification" (formula "21"))
      (rule "variableDeclarationAssign" (formula "21") (term "1"))
      (rule "variableDeclaration" (formula "21") (term "1") (newnames "var_1"))
      (rule "compound_reference_cast_expression" (formula "21") (term "1") (inst "#v=o"))
      (rule "variableDeclarationAssign" (formula "21") (term "1"))
      (rule "variableDeclaration" (formula "21") (term "1") (newnames "o"))
       (builtin "Use Operation Contract" (formula "21") (newnames "heapBefore_next,result_50,exc_66,heapAfter_next,anon_heap_next") (contract "java.util.Iterator[java.util.Iterator::next()].JML normal_behavior operation contract.0"))
      (branch "Post (next)"
          (builtin "One Step Simplification" (formula "25"))
          (builtin "One Step Simplification" (formula "24") (ifInst ""  (formula "13")) (ifInst ""  (formula "2")))
          (builtin "One Step Simplification" (formula "23"))
          (builtin "One Step Simplification" (formula "22"))
         (rule "true_left" (formula "24"))
         (rule "andLeft" (formula "22"))
         (rule "selectCreatedOfAnonAsFormulaEQ" (formula "23") (term "1,1,0") (ifseqformula "22"))
         (rule "andLeft" (formula "23"))
         (rule "andLeft" (formula "24"))
         (rule "andLeft" (formula "23"))
         (rule "andLeft" (formula "24"))
         (rule "andLeft" (formula "25"))
         (rule "andLeft" (formula "26"))
         (rule "andLeft" (formula "27"))
         (rule "andLeft" (formula "28"))
         (rule "eqSymm" (formula "24") (term "1"))
         (rule "eqSymm" (formula "27") (term "0"))
         (rule "eqSymm" (formula "28") (term "0"))
         (rule "polySimp_addComm0" (formula "26") (term "1,1"))
         (rule "castedGetAny" (formula "24") (term "0,1"))
         (rule "assignment" (formula "32") (term "1"))
          (builtin "One Step Simplification" (formula "32"))
         (rule "pullOutSelect" (formula "24") (term "0,1,0") (inst "selectSK=java_util_Iterator_seq_0"))
         (rule "simplifySelectOfAnonEQ" (formula "24") (ifseqformula "22"))
          (builtin "One Step Simplification" (formula "24") (ifInst ""  (formula "39")) (ifInst ""  (formula "7")))
         (rule "replaceKnownSelect_taclet000_2" (formula "29") (term "0,0,0"))
         (rule "replaceKnownSelect_taclet000_2" (formula "27") (term "0,1,0"))
         (rule "replaceKnownSelect_taclet000_2" (formula "26") (term "0,1,0"))
         (rule "replaceKnownSelect_taclet000_2" (formula "25") (term "0,0,1"))
         (rule "replaceKnownSelect_taclet000_2" (formula "28") (term "0,0,0"))
         (rule "elementOfSingleton" (formula "24") (term "0,0"))
          (builtin "One Step Simplification" (formula "24"))
         (rule "hideAuxiliaryEq" (formula "24"))
         (rule "replaceKnownAuxiliaryConstant_taclet000_3" (formula "26") (term "0,1,0"))
         (rule "replaceKnownAuxiliaryConstant_taclet000_3" (formula "24") (term "0,1,0"))
         (rule "replaceKnownAuxiliaryConstant_taclet000_3" (formula "25") (term "0,1,0"))
         (rule "replaceKnownAuxiliaryConstant_taclet000_3" (formula "27") (term "0,0,0"))
         (rule "replaceKnownAuxiliaryConstant_taclet000_3" (formula "28") (term "0,0,0"))
         (rule "replaceKnownAuxiliaryConstant_taclet000_3" (formula "24") (term "0,0,1"))
         (rule "pullOutSelect" (formula "26") (term "0,1") (inst "selectSK=java_util_Iterator_index_0"))
         (rule "simplifySelectOfAnonEQ" (formula "26") (ifseqformula "22"))
          (builtin "One Step Simplification" (formula "26") (ifInst ""  (formula "39")) (ifInst ""  (formula "7")))
         (rule "replaceKnownSelect_taclet000_4" (formula "29") (term "0,1"))
         (rule "eqSymm" (formula "29") (term "1"))
         (rule "elementOfSingleton" (formula "26") (term "0,0"))
          (builtin "One Step Simplification" (formula "26"))
         (rule "hideAuxiliaryEq" (formula "26"))
         (rule "replaceKnownAuxiliaryConstant_taclet000_5" (formula "28") (term "1,1"))
         (rule "replaceKnownAuxiliaryConstant_taclet000_5" (formula "26") (term "0,1"))
         (rule "shift_paren_or" (formula "23"))
         (rule "commute_or_2" (formula "23"))
         (rule "reference_type_cast" (formula "32") (term "1"))
         (branch "Normal Execution (o instanceof String)"
             (builtin "One Step Simplification" (formula "33"))
             (builtin "One Step Simplification" (formula "1"))
            (rule "variableDeclarationAssign" (formula "33") (term "1"))
            (rule "variableDeclaration" (formula "33") (term "1") (newnames "var_2"))
            (rule "assignment" (formula "33") (term "1"))
             (builtin "One Step Simplification" (formula "33"))
            (rule "equalityToSeqGetAndSeqLenLeft" (formula "16") (inst "iv=iv"))
            (rule "andLeft" (formula "16"))
            (rule "inEqSimp_commuteLeq" (formula "17") (term "0,0,0"))
            (rule "commute_and" (formula "17") (term "0,0"))
             (builtin "Use Operation Contract" (formula "35") (newnames "heapBefore_addInputCol,exc_67,heapAfter_addInputCol,anon_heap_addInputCol") (contract "de.polyas.core3.open.cred.CredTool[de.polyas.core3.open.cred.CredTool::addInputCol(java.util.ArrayList,java.lang.String,org.apache.commons.csv.CSVRecord)].JML normal_behavior operation contract.0"))
            (branch "Post (addInputCol)"
                (builtin "One Step Simplification" (formula "38") (ifInst ""  (formula "42")) (ifInst ""  (formula "41")) (ifInst ""  (formula "42")) (ifInst ""  (formula "41")))
                (builtin "One Step Simplification" (formula "37"))
                (builtin "One Step Simplification" (formula "36"))
                (builtin "One Step Simplification" (formula "39"))
               (rule "selectCreatedOfAnonAsFormulaEQ" (formula "38") (term "1,1") (ifseqformula "25"))
               (rule "selectCreatedOfAnonAsFormulaEQ" (formula "38") (term "1,1,0,1") (ifseqformula "25"))
               (rule "selectCreatedOfAnonAsFormulaEQ" (formula "38") (term "1,0,0,1") (ifseqformula "25"))
               (rule "andLeft" (formula "36"))
               (rule "andLeft" (formula "39"))
               (rule "andLeft" (formula "37"))
               (rule "andLeft" (formula "40"))
               (rule "andLeft" (formula "42"))
               (rule "andLeft" (formula "38"))
               (rule "andLeft" (formula "41"))
               (rule "andLeft" (formula "43"))
               (rule "andLeft" (formula "38"))
               (rule "andLeft" (formula "43"))
               (rule "andLeft" (formula "45"))
               (rule "notLeft" (formula "44"))
               (rule "exLeft" (formula "41") (inst "sk=i_0"))
               (rule "andLeft" (formula "41"))
               (rule "andLeft" (formula "41"))
               (rule "replace_known_left" (formula "49") (term "0") (ifseqformula "6"))
                (builtin "One Step Simplification" (formula "49"))
               (rule "true_left" (formula "49"))
               (rule "replace_known_left" (formula "47") (term "0") (ifseqformula "7"))
                (builtin "One Step Simplification" (formula "47"))
               (rule "true_left" (formula "47"))
               (rule "replace_known_right" (formula "47") (term "0") (ifseqformula "48"))
                (builtin "One Step Simplification" (formula "47"))
               (rule "castedGetAny" (formula "43") (term "0"))
               (rule "inEqSimp_commuteLeq" (formula "41"))
               (rule "pullOutSelect" (formula "42") (term "0,1") (inst "selectSK=org_apache_commons_csv_CSVRecord_key_seq_0"))
               (rule "simplifySelectOfAnonEQ" (formula "42") (ifseqformula "25"))
                (builtin "One Step Simplification" (formula "42") (ifInst ""  (formula "52")) (ifInst ""  (formula "6")))
               (rule "replaceKnownSelect_taclet00000_7" (formula "44") (term "0,0"))
               (rule "eqSymm" (formula "44"))
               (rule "elementOfSingleton" (formula "42") (term "0,0"))
                (builtin "One Step Simplification" (formula "42"))
               (rule "hideAuxiliaryEq" (formula "42"))
               (rule "replaceKnownAuxiliaryConstant_taclet00000_8" (formula "42") (term "0,1"))
               (rule "replaceKnownAuxiliaryConstant_taclet00000_8" (formula "43") (term "0,1"))
               (rule "eqSymm" (formula "43"))
               (rule "Class_invariant_axiom_for_org_apache_commons_csv_CSVRecord" (formula "44") (inst "i=i") (inst "i_0=i_0"))
               (rule "replaceKnownSelect_taclet00000_7" (formula "44") (term "0,0,0,0"))
               (rule "replaceKnownAuxiliaryConstant_taclet00000_8" (formula "44") (term "0,0,0,0"))
               (rule "replaceKnownSelect_taclet00000_7" (formula "44") (term "0,0,0,0,1,0,1,0"))
               (rule "replaceKnownSelect_taclet00000_7" (formula "44") (term "0,1,1,0,0,0,1,0"))
               (rule "replaceKnownAuxiliaryConstant_taclet00000_8" (formula "44") (term "0,0,0,0,1,0,1,0"))
               (rule "replaceKnownAuxiliaryConstant_taclet00000_8" (formula "44") (term "0,1,1,0,0,0,1,0"))
               (rule "expand_inInt" (formula "44") (term "1,0,0,1,0"))
               (rule "expand_inInt" (formula "44") (term "1,0,0,1"))
               (rule "replace_int_MAX" (formula "44") (term "1,0,1,0,0,1,0"))
               (rule "replace_int_MIN" (formula "44") (term "0,1,1,0,0,1,0"))
               (rule "replace_int_MIN" (formula "44") (term "0,1,1,0,0,1"))
               (rule "replace_int_MAX" (formula "44") (term "1,0,1,0,0,1"))
               (rule "andLeft" (formula "44"))
               (rule "andLeft" (formula "44"))
               (rule "eqSymm" (formula "44"))
               (rule "castedGetAny" (formula "46") (term "0,0,1,0"))
               (rule "castedGetAny" (formula "45") (term "0,0,1,0"))
               (rule "inEqSimp_commuteLeq" (formula "46") (term "1,1,0,0"))
               (rule "inEqSimp_commuteLeq" (formula "46") (term "0,0,0,0"))
               (rule "inEqSimp_commuteLeq" (formula "45") (term "0,0,0,0"))
               (rule "inEqSimp_commuteLeq" (formula "45") (term "1,1,0,0"))
               (rule "pullOutSelect" (formula "46") (term "0,1,1,0,0,0") (inst "selectSK=org_apache_commons_csv_CSVRecord_value_seq_0"))
               (rule "simplifySelectOfAnonEQ" (formula "46") (ifseqformula "25"))
                (builtin "One Step Simplification" (formula "46") (ifInst ""  (formula "54")) (ifInst ""  (formula "6")))
               (rule "replaceKnownSelect_taclet00000_9" (formula "44") (term "0,0"))
               (rule "replaceKnownSelect_taclet00000_9" (formula "47") (term "0,0,0,1,0"))
               (rule "eqSymm" (formula "44"))
               (rule "elementOfSingleton" (formula "46") (term "0,0"))
                (builtin "One Step Simplification" (formula "46"))
               (rule "hideAuxiliaryEq" (formula "46"))
               (rule "replaceKnownAuxiliaryConstant_taclet00000_10" (formula "44") (term "0,1"))
               (rule "replaceKnownAuxiliaryConstant_taclet00000_10" (formula "46") (term "0,0,0,1,0"))
               (rule "replaceKnownAuxiliaryConstant_taclet00000_10" (formula "46") (term "0,1,1,0,0,0"))
               (rule "eqSymm" (formula "44"))
               (rule "Class_invariant_axiom_for_java_util_ArrayList" (formula "39"))
               (rule "true_left" (formula "39"))
               (rule "Class_invariant_axiom_for_org_apache_commons_csv_CSVRecord" (formula "38") (inst "i=i") (inst "i_0=i_0"))
               (rule "expand_inInt" (formula "38") (term "1,0,0,1"))
               (rule "expand_inInt" (formula "38") (term "1,0,0,1,0"))
               (rule "replace_int_MAX" (formula "38") (term "1,0,1,0,0,1"))
               (rule "replace_int_MIN" (formula "38") (term "0,1,1,0,0,1"))
               (rule "replace_int_MAX" (formula "38") (term "1,0,1,0,0,1,0"))
               (rule "replace_int_MIN" (formula "38") (term "0,1,1,0,0,1,0"))
               (rule "andLeft" (formula "38"))
               (rule "andLeft" (formula "38"))
               (rule "eqSymm" (formula "38"))
               (rule "castedGetAny" (formula "40") (term "0,0,1,0"))
               (rule "castedGetAny" (formula "39") (term "0,0,1,0"))
               (rule "inEqSimp_commuteLeq" (formula "40") (term "0,0,0,0"))
               (rule "inEqSimp_commuteLeq" (formula "40") (term "1,1,0,0"))
               (rule "inEqSimp_commuteLeq" (formula "39") (term "1,1,0,0"))
               (rule "inEqSimp_commuteLeq" (formula "39") (term "0,0,0,0"))
               (rule "pullOutSelect" (formula "40") (term "0,1,1,0,0,0") (inst "selectSK=org_apache_commons_csv_CSVRecord_value_seq_1"))
               (rule "simplifySelectOfAnonEQ" (formula "40") (ifseqformula "36"))
                (builtin "One Step Simplification" (formula "40") (ifInst ""  (formula "54")))
               (rule "replaceKnownSelect_taclet00000_11" (formula "38") (term "0,0"))
               (rule "replaceKnownSelect_taclet00000_9" (formula "40") (term "2,0"))
               (rule "replaceKnownAuxiliaryConstant_taclet00000_10" (formula "40") (term "2,0"))
               (rule "selectCreatedOfAnonAsFormulaEQ" (formula "40") (term "0,1,0,0") (ifseqformula "25"))
               (rule "replaceKnownSelect_taclet00000_11" (formula "41") (term "0,0,0,1,0"))
               (rule "eqSymm" (formula "38"))
               (rule "replace_known_left" (formula "40") (term "0,0,1,0,0") (ifseqformula "6"))
                (builtin "One Step Simplification" (formula "40"))
               (rule "elementOfSingleton" (formula "40") (term "0,0"))
                (builtin "One Step Simplification" (formula "40"))
               (rule "hideAuxiliaryEq" (formula "40"))
               (rule "replaceKnownAuxiliaryConstant_taclet00000_12" (formula "38") (term "0,1"))
               (rule "replaceKnownAuxiliaryConstant_taclet00000_12" (formula "40") (term "0,0,0,1,0"))
               (rule "replaceKnownAuxiliaryConstant_taclet00000_12" (formula "40") (term "0,1,1,0,0,0"))
               (rule "pullOutSelect" (formula "39") (term "0,1,1,0,0,0") (inst "selectSK=org_apache_commons_csv_CSVRecord_key_seq_1"))
               (rule "simplifySelectOfAnonEQ" (formula "39") (ifseqformula "36"))
                (builtin "One Step Simplification" (formula "39") (ifInst ""  (formula "53")))
               (rule "replaceKnownSelect_taclet00000_13" (formula "38") (term "0,0"))
               (rule "replaceKnownSelect_taclet00000_7" (formula "39") (term "2,0"))
               (rule "replaceKnownAuxiliaryConstant_taclet00000_8" (formula "39") (term "2,0"))
               (rule "selectCreatedOfAnonAsFormulaEQ" (formula "39") (term "0,1,0,0") (ifseqformula "25"))
               (rule "replaceKnownSelect_taclet00000_13" (formula "40") (term "0,0,0,1,0"))
               (rule "eqSymm" (formula "38"))
               (rule "replace_known_left" (formula "39") (term "0,0,1,0,0") (ifseqformula "6"))
                (builtin "One Step Simplification" (formula "39"))
               (rule "elementOfSingleton" (formula "39") (term "0,0"))
                (builtin "One Step Simplification" (formula "39"))
               (rule "hideAuxiliaryEq" (formula "39"))
               (rule "replaceKnownAuxiliaryConstant_taclet00000_14" (formula "38") (term "0,1"))
               (rule "replaceKnownAuxiliaryConstant_taclet00000_14" (formula "38") (term "0,0,0,1,0"))
               (rule "replaceKnownAuxiliaryConstant_taclet00000_14" (formula "38") (term "0,1,1,0,0,0"))
               (rule "Class_invariant_axiom_for_java_util_ArrayList" (formula "44"))
               (rule "true_left" (formula "44"))
               (rule "commute_or" (formula "45"))
               (rule "methodCallEmpty" (formula "47") (term "1"))
               (rule "commute_and" (formula "43") (term "1,0,0"))
               (rule "commute_and" (formula "42") (term "0,0,0"))
               (rule "commute_and" (formula "42") (term "1,0,0"))
               (rule "commute_and" (formula "43") (term "0,0,0"))
               (rule "lenNonNegative" (formula "11") (term "0"))
               (rule "inEqSimp_commuteLeq" (formula "11"))
               (rule "lenNonNegative" (formula "12") (term "1"))
               (rule "inEqSimp_commuteLeq" (formula "12"))
               (rule "lenNonNegative" (formula "9") (term "1,0,0,0"))
               (rule "inEqSimp_commuteLeq" (formula "9"))
               (rule "lenNonNegative" (formula "25") (term "1,1"))
               (rule "inEqSimp_commuteLeq" (formula "25"))
               (rule "shift_paren_and" (formula "46") (term "0,0"))
               (rule "commute_and_2" (formula "46") (term "0,0,0"))
               (rule "shift_paren_and" (formula "46") (term "0,0"))
               (rule "commute_and_2" (formula "46") (term "0,0,0"))
               (rule "emptyModality" (formula "49") (term "1"))
                (builtin "One Step Simplification" (formula "49"))
               (rule "notRight" (formula "49"))
               (rule "andLeft" (formula "1"))
               (rule "andLeft" (formula "1"))
               (rule "boxToDiamond" (formula "2") (term "1"))
                (builtin "One Step Simplification" (formula "2"))
               (rule "notLeft" (formula "2"))
               (rule "seqGetAlphaCast" (formula "33") (term "0,1"))
               (rule "castedGetAny" (formula "33") (term "0"))
                (builtin "One Step Simplification" (formula "33"))
               (rule "true_left" (formula "33"))
                (builtin "Use Operation Contract" (formula "50") (newnames "heapBefore_hasNext_0,result_51,exc_68") (contract "java.util.Iterator[java.util.Iterator::hasNext()].JML normal_behavior operation contract.0"))
               (branch "Post (hasNext)"
                   (builtin "One Step Simplification" (formula "52"))
                   (builtin "One Step Simplification" (formula "50"))
                   (builtin "One Step Simplification" (formula "53"))
                   (builtin "One Step Simplification" (formula "51"))
                  (rule "andLeft" (formula "52"))
                  (rule "andLeft" (formula "50"))
                  (rule "andLeft" (formula "51"))
                  (rule "andLeft" (formula "51"))
                  (rule "assignment" (formula "55") (term "1"))
                   (builtin "One Step Simplification" (formula "55"))
                  (rule "pullOutSelect" (formula "51") (term "0,1") (inst "selectSK=java_util_Iterator_index_1"))
                  (rule "simplifySelectOfAnonEQ" (formula "51") (ifseqformula "42"))
                   (builtin "One Step Simplification" (formula "51") (ifInst ""  (formula "63")))
                  (rule "replaceKnownSelect_taclet000_4" (formula "51") (term "2,0"))
                  (rule "replaceKnownAuxiliaryConstant_taclet000_5" (formula "51") (term "2,0"))
                  (rule "selectCreatedOfAnonAsFormulaEQ" (formula "51") (term "0,1,0,0") (ifseqformula "31"))
                  (rule "replace_known_left" (formula "51") (term "0,0,1,0,0") (ifseqformula "10"))
                   (builtin "One Step Simplification" (formula "51"))
                  (rule "elementOfSingleton" (formula "51") (term "0,0"))
                   (builtin "One Step Simplification" (formula "51"))
                  (rule "hideAuxiliaryEq" (formula "51"))
                  (rule "replaceKnownAuxiliaryConstant_taclet000000_17" (formula "51") (term "0,1"))
                  (rule "pullOutSelect" (formula "51") (term "0,1,1") (inst "selectSK=java_util_Iterator_seq_1"))
                  (rule "simplifySelectOfAnonEQ" (formula "51") (ifseqformula "42"))
                   (builtin "One Step Simplification" (formula "51") (ifInst ""  (formula "63")))
                  (rule "replaceKnownSelect_taclet000_2" (formula "51") (term "2,0"))
                  (rule "replaceKnownAuxiliaryConstant_taclet000_3" (formula "51") (term "2,0"))
                  (rule "selectCreatedOfAnonAsFormulaEQ" (formula "51") (term "0,1,0,0") (ifseqformula "31"))
                  (rule "replace_known_left" (formula "51") (term "0,0,1,0,0") (ifseqformula "10"))
                   (builtin "One Step Simplification" (formula "51"))
                  (rule "elementOfSingleton" (formula "51") (term "0,0"))
                   (builtin "One Step Simplification" (formula "51"))
                  (rule "hideAuxiliaryEq" (formula "51"))
                  (rule "replaceKnownAuxiliaryConstant_taclet000000_19" (formula "51") (term "0,1,1"))
                  (rule "methodCallEmpty" (formula "55") (term "1"))
                   (builtin "One Step Simplification" (formula "55"))
                  (rule "emptyModality" (formula "55") (term "1"))
                   (opengoal "{heap:=heap_Before_LOOP<<anonHeapFunction>>}   !(  wellFormed(heap_Before_LOOP<<anonHeapFunction>>)     & heap = heap_Before_LOOP<<anonHeapFunction>>     & !self_50 = null     &   boolean::select(heap,                         self_50,                         java.lang.Object::<created>)       = TRUE     &   de.polyas.core3.open.cred.CredTool::exactInstance(self_50)       = TRUE     & (  ((  _record_7 = null            |   boolean::select(heap_Before_LOOP<<anonHeapFunction>>,                                _record_7,                                java.lang.Object::<created>)              = TRUE)<<SC>>)        & ((  _vals_3 = null            |   boolean::select(heap_Before_LOOP<<anonHeapFunction>>,                                _vals_3,                                java.lang.Object::<created>)              = TRUE)<<SC>>)        & ((  it = null            |   boolean::select(heap_Before_LOOP<<anonHeapFunction>>,                                it,                                java.lang.Object::<created>)              = TRUE)<<SC>>))     & ((  (((((((((\\forall int j;                      ((   (  leq(Z(0(#)), j)<<origin(\"loop_invariant @ file CredTool.java @ line 312\",\"[]\")>>                            & lt(j,                                 seqLen(Seq::select(heap_Before_LOOP<<anonHeapFunction>>,                                                    _cols_2,                                                    java.util.Collection::$seq)))<<origin(\"loop_invariant @ file CredTool.java @ line 312\",\"[]\")>>)<<SC,                                                                                                                                                     origin(\"loop_invariant @ file CredTool.java @ line 312\",\"[]\")>>                        -> (\\exists int i;                              ((  (leq(Z(0(#)), i)<<origin(\"loop_invariant @ file CredTool.java @ line 312\",\"[]\")>>                                & lt(i,                                     seqLen(Seq::select(heap_Before_LOOP<<anonHeapFunction>>,                                                        _record_7,                                                        org.apache.commons.csv.CSVRecord::$key_seq)))<<origin(\"loop_invariant @ file CredTool.java @ line 312\",\"[]\")>>)<<SC,                                                                                                                                                                         origin(\"loop_invariant @ file CredTool.java @ line 312\",\"[]\")>>                                & (  (java.lang.String)(any::seqGet(Seq::select(heap_Before_LOOP<<anonHeapFunction>>,                                                                                _record_7,                                                                                org.apache.commons.csv.CSVRecord::$key_seq),                                                                    i))                                   = (java.lang.String)(any::seqGet(Seq::select(heap_Before_LOOP<<anonHeapFunction>>,                                                                                _cols_2,                                                                                java.util.Collection::$seq),                                                                    j)))<<origin(\"loop_invariant @ file CredTool.java @ line 312\",\"[]\")>>)<<SC,                                                                                                                                            origin(\"loop_invariant @ file CredTool.java @ line 312\",\"[]\")>>))<<origin(\"loop_invariant @ file CredTool.java @ line 312\",\"[]\")>>)<<origin(\"loop_invariant @ file CredTool.java @ line 312\",\"[]\")>>))<<origin(\"loop_invariant @ file CredTool.java @ line 312\",\"[]\")>>         & (\\forall int i;              ((   (  leq(Z(0(#)), i)<<origin(\"loop_invariant @ file CredTool.java @ line 314\",\"[]\")>>                    & lt(i,                         seqLen(Seq::select(heap_Before_LOOP<<anonHeapFunction>>,                                            _cols_2,                                            java.util.Collection::$seq)))<<origin(\"loop_invariant @ file CredTool.java @ line 314\",\"[]\")>>)<<SC,                                                                                                                                             origin(\"loop_invariant @ file CredTool.java @ line 314\",\"[]\")>>                -> (!(  (java.lang.String)(any::seqGet(Seq::select(heap_Before_LOOP<<anonHeapFunction>>,                                                                   _cols_2,                                                                   java.util.Collection::$seq),                                                       i))                      = null)<<origin(\"loop_invariant @ file CredTool.java @ line 314\",\"[]\")>>)<<origin(\"loop_invariant @ file CredTool.java @ line 314\",\"[]\")>>)<<origin(\"loop_invariant @ file CredTool.java @ line 314\",\"[]\")>>))<<origin(\"loop_invariant @ file CredTool.java @ line 314\",\"[]\")>>)<<SC>>         & (!(_vals_3 = _cols_2)<<origin(\"loop_invariant @ file CredTool.java @ line 315\",\"[]\")>>)<<origin(\"loop_invariant @ file CredTool.java @ line 315\",\"[]\")>>)<<SC>>         & java.lang.Object::<inv>(heap_Before_LOOP<<anonHeapFunction>>,                                   _record_7))<<SC>>         & java.lang.Object::<inv>(heap_Before_LOOP<<anonHeapFunction>>,                                   _vals_3))<<SC>>         & java.lang.Object::<inv>(heap_Before_LOOP<<anonHeapFunction>>,                                   _cols_2))<<SC>>         & java.lang.Object::<inv>(heap_Before_LOOP<<anonHeapFunction>>,                                   it))<<SC>>         & ((  (((!(it = null)<<origin(\"loop_invariant @ file CredTool.java @ line 320\",\"[]\")>>)<<origin(\"loop_invariant @ file CredTool.java @ line 320\",\"[]\")>>             & (!(_record_7 = null)<<origin(\"loop_invariant @ file CredTool.java @ line 320\",\"[]\")>>)<<origin(\"loop_invariant @ file CredTool.java @ line 320\",\"[]\")>>)<<SC,                                                                                                                                                                         origin(\"loop_invariant @ file CredTool.java @ line 320\",\"[]\")>>             & (!(_vals_3 = null)<<origin(\"loop_invariant @ file CredTool.java @ line 320\",\"[]\")>>)<<origin(\"loop_invariant @ file CredTool.java @ line 320\",\"[]\")>>)<<SC,                                                                                                                                                                       origin(\"loop_invariant @ file CredTool.java @ line 320\",\"[]\")>>             & (!(_cols_2 = null)<<origin(\"loop_invariant @ file CredTool.java @ line 320\",\"[]\")>>)<<origin(\"loop_invariant @ file CredTool.java @ line 320\",\"[]\")>>)<<SC,                                                                                                                                                                       origin(\"loop_invariant @ file CredTool.java @ line 320\",\"[]\")>>))<<SC>>         & ((  (!(it = null)<<origin(\"loop_invariant @ file CredTool.java @ line 321\",\"[]\")>>)<<origin(\"loop_invariant @ file CredTool.java @ line 321\",\"[]\")>>             & (  java.util.CollectionIterator::instance(it)                = TRUE)<<origin(\"loop_invariant @ file CredTool.java @ line 321\",\"[]\")>>)<<origin(\"loop_invariant @ file CredTool.java @ line 321\",\"[]\")>>))<<SC>>         & (  Seq::select(heap_Before_LOOP<<anonHeapFunction>>,                          it,                          java.util.Iterator::$seq)            = Seq::select(heap_Before_LOOP<<anonHeapFunction>>,                          _cols_2,                          java.util.Collection::$seq))<<origin(\"loop_invariant @ file CredTool.java @ line 322\",\"[]\")>>)<<SC>>)     & {self_50:=self_50        || (_record_7:=_record_7        || _vals_3:=_vals_3        || it:=it)}         (  \\[{method-frame(source=addInputCols(java.util.ArrayList, java.util.ArrayList, org.apache.commons.csv.CSVRecord)@de.polyas.core3.open.cred.CredTool,this=self_50): {                  b_0=it.hasNext();                }              }\\] (  b_0 = b_0_Before                   & (   b_0_Before = TRUE                      -> \\<{method-frame(source=addInputCols(java.util.ArrayList, java.util.ArrayList, org.apache.commons.csv.CSVRecord)@de.polyas.core3.open.cred.CredTool,this=self_50): {                               addInputCol(_vals_3,(String)it.next(),_record_7);                             }                           }\\> (    self_50_After_LOOP                                  = self_50                                & \\[{method-frame(source=addInputCols(java.util.ArrayList, java.util.ArrayList, org.apache.commons.csv.CSVRecord)@de.polyas.core3.open.cred.CredTool,this=self_50): {                                        b_0=it.hasNext();                                      }                                    }\\] b_0_After = b_0                                & _record_7 = _record_7                                & _vals_3 = _vals_3                                & it = it                                & heap_After_LOOP = heap)))          & (   b_0_Before = FALSE             ->   self_50_After_LOOP = self_50                & \\[{method-frame(source=addInputCols(java.util.ArrayList, java.util.ArrayList, org.apache.commons.csv.CSVRecord)@de.polyas.core3.open.cred.CredTool,this=self_50): {                        b_0=it.hasNext();                      }                    }\\] b_0_After = b_0                & _record_7 = _record_7                & _vals_3 = _vals_3                & it = it                & heap_After_LOOP = heap))) ")
               )
               (branch "Exceptional Post (hasNext)"
                   (builtin "One Step Simplification" (formula "51"))
                   (builtin "One Step Simplification" (formula "50"))
                  (rule "selectCreatedOfAnonAsFormulaEQ" (formula "50") (term "1,0") (ifseqformula "42"))
                  (rule "selectCreatedOfAnonAsFormulaEQ" (formula "50") (term "0,1,0") (ifseqformula "31"))
                  (rule "andLeft" (formula "50"))
                  (rule "andLeft" (formula "50"))
                  (rule "andLeft" (formula "52"))
                  (rule "notLeft" (formula "50"))
                  (rule "close" (formula "53") (ifseqformula "52"))
               )
               (branch "Pre (hasNext)"
                   (builtin "One Step Simplification" (formula "50"))
                  (rule "castAdd" (formula "50") (term "1,0") (ifseqformula "20") (userinteraction))
                  (rule "Class_invariant_axiom_for_java_util_CollectionIterator" (formula "50") (term "0") (userinteraction))
                  (rule "andRight" (formula "50"))
                  (branch
                     (rule "andRight" (formula "50"))
                     (branch
                        (rule "polySimp_homoEq" (formula "35") (term "1"))
                        (rule "polySimp_addComm1" (formula "35") (term "0,1"))
                        (rule "inEqSimp_leqRight" (formula "50"))
                        (rule "add_zero_right" (formula "1") (term "0"))
                        (rule "polySimp_mulComm0" (formula "1") (term "1,0"))
                        (rule "inEqSimp_ltToLeq" (formula "19") (term "0,0,0,0,0"))
                        (rule "polySimp_mulComm0" (formula "19") (term "1,0,0,0,0,0,0,0"))
                        (rule "inEqSimp_ltToLeq" (formula "47"))
                        (rule "polySimp_mulComm0" (formula "47") (term "1,0,0"))
                        (rule "polySimp_addComm1" (formula "47") (term "0"))
                        (rule "inEqSimp_ltToLeq" (formula "35") (term "0"))
                        (rule "polySimp_mulComm0" (formula "35") (term "1,0,0,0"))
                        (rule "polySimp_addComm1" (formula "35") (term "0,0"))
                        (rule "inEqSimp_ltToLeq" (formula "13") (term "0,0,0,1,0"))
                        (rule "polySimp_mulComm0" (formula "13") (term "1,0,0,0,0,0,1,0"))
                        (rule "inEqSimp_ltToLeq" (formula "18") (term "0,0,0,0,0"))
                        (rule "polySimp_mulComm0" (formula "18") (term "1,0,0,0,0,0,0,0"))
                        (rule "inEqSimp_ltToLeq" (formula "29") (term "1"))
                        (rule "polySimp_mulComm0" (formula "29") (term "1,0,0,1"))
                        (rule "polySimp_addComm1" (formula "29") (term "0,1"))
                        (rule "inEqSimp_ltToLeq" (formula "36") (term "0"))
                        (rule "polySimp_mulComm0" (formula "36") (term "1,0,0,0"))
                        (rule "polySimp_addComm1" (formula "36") (term "0,0"))
                        (rule "inEqSimp_ltToLeq" (formula "34") (term "0"))
                        (rule "polySimp_mulComm0" (formula "34") (term "1,0,0,0"))
                        (rule "polySimp_addComm1" (formula "34") (term "0,0"))
                        (rule "inEqSimp_ltToLeq" (formula "13") (term "0,0,0"))
                        (rule "polySimp_mulComm0" (formula "13") (term "1,0,0,0,0,0"))
                        (rule "inEqSimp_ltToLeq" (formula "14") (term "0,0,0"))
                        (rule "polySimp_mulComm0" (formula "14") (term "1,0,0,0,0,0"))
                        (rule "inEqSimp_ltToLeq" (formula "23") (term "0,0,0"))
                        (rule "polySimp_mulComm0" (formula "23") (term "1,0,0,0,0,0"))
                        (rule "applyEq" (formula "23") (term "0,0,1,0,0,0,0,0") (ifseqformula "24"))
                        (rule "applyEq" (formula "29") (term "0,0") (ifseqformula "5"))
                        (rule "replace_known_left" (formula "29") (term "0") (ifseqformula "25"))
                         (builtin "One Step Simplification" (formula "29"))
                        (rule "replace_known_left" (formula "34") (term "0") (ifseqformula "29"))
                         (builtin "One Step Simplification" (formula "34"))
                        (rule "replace_known_left" (formula "36") (term "0") (ifseqformula "29"))
                         (builtin "One Step Simplification" (formula "36"))
                        (rule "replace_known_left" (formula "35") (term "0") (ifseqformula "29"))
                         (builtin "One Step Simplification" (formula "35"))
                        (rule "notLeft" (formula "35"))
                        (rule "replace_known_right" (formula "4") (term "0") (ifseqformula "50"))
                         (builtin "One Step Simplification" (formula "4"))
                        (rule "replace_known_right" (formula "33") (term "0,0") (ifseqformula "50"))
                         (builtin "One Step Simplification" (formula "33"))
                        (rule "replace_known_right" (formula "36") (term "1") (ifseqformula "50"))
                         (builtin "One Step Simplification" (formula "36"))
                        (rule "notLeft" (formula "36"))
                        (rule "replace_known_right" (formula "36") (term "0") (ifseqformula "49"))
                         (builtin "One Step Simplification" (formula "36"))
                        (rule "true_left" (formula "36"))
                        (rule "applyEq" (formula "23") (term "0,0,1,0") (ifseqformula "24"))
                         (builtin "One Step Simplification" (formula "23"))
                        (rule "true_left" (formula "23"))
                        (rule "applyEq" (formula "15") (term "0") (ifseqformula "17"))
                        (rule "applyEq" (formula "21") (term "0,0") (ifseqformula "22"))
                         (builtin "One Step Simplification" (formula "21"))
                        (rule "true_left" (formula "21"))
                        (rule "applyEq" (formula "27") (term "3") (ifseqformula "5"))
                        (rule "applyEq" (formula "35") (term "4") (ifseqformula "34"))
                        (rule "applyEq" (formula "25") (term "0,0") (ifseqformula "21"))
                        (rule "applyEq" (formula "5") (term "1") (ifseqformula "22"))
                        (rule "applyEq" (formula "38") (term "6") (ifseqformula "37"))
                        (rule "applyEq" (formula "26") (term "4") (ifseqformula "24"))
                        (rule "applyEq" (formula "18") (term "0,1,0,0,0,0,0,0,0") (ifseqformula "16"))
                        (rule "applyEq" (formula "30") (term "0,0") (ifseqformula "21"))
                        (rule "applyEq" (formula "25") (term "0,0,1,0") (ifseqformula "21"))
                        (rule "applyEq" (formula "26") (term "3") (ifseqformula "22"))
                        (rule "applyEq" (formula "44") (term "0,0") (ifseqformula "21"))
                        (rule "polySimp_sepPosMonomial" (formula "31"))
                        (rule "polySimp_mulComm0" (formula "31") (term "1"))
                        (rule "polySimp_rightDist" (formula "31") (term "1"))
                        (rule "polySimp_mulLiterals" (formula "31") (term "1,1"))
                        (rule "mul_literals" (formula "31") (term "0,1"))
                        (rule "polySimp_elimOne" (formula "31") (term "1,1"))
                        (rule "applyEq" (formula "30") (term "1,0") (ifseqformula "31"))
                        (rule "applyEq" (formula "44") (term "1") (ifseqformula "31"))
                        (rule "applyEq" (formula "25") (term "1,0,0") (ifseqformula "31"))
                        (rule "polySimp_addAssoc" (formula "25") (term "0,0"))
                        (rule "add_literals" (formula "25") (term "0,0,0"))
                        (rule "add_zero_left" (formula "25") (term "0,0"))
                        (rule "inEqSimp_sepNegMonomial1" (formula "1"))
                        (rule "polySimp_mulLiterals" (formula "1") (term "0"))
                        (rule "polySimp_elimOne" (formula "1") (term "0"))
                        (rule "inEqSimp_sepNegMonomial0" (formula "40"))
                        (rule "polySimp_mulLiterals" (formula "40") (term "0"))
                        (rule "polySimp_elimOne" (formula "40") (term "0"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "13") (term "0,0,0,1,0"))
                        (rule "polySimp_mulComm0" (formula "13") (term "1,0,0,0,1,0"))
                        (rule "polySimp_rightDist" (formula "13") (term "1,0,0,0,1,0"))
                        (rule "mul_literals" (formula "13") (term "0,1,0,0,0,1,0"))
                        (rule "polySimp_mulLiterals" (formula "13") (term "1,1,0,0,0,1,0"))
                        (rule "polySimp_elimOne" (formula "13") (term "1,1,0,0,0,1,0"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "17") (term "0,0,0,0,0"))
                        (rule "polySimp_mulComm0" (formula "17") (term "1,0,0,0,0,0"))
                        (rule "polySimp_rightDist" (formula "17") (term "1,0,0,0,0,0"))
                        (rule "polySimp_mulLiterals" (formula "17") (term "1,1,0,0,0,0,0"))
                        (rule "mul_literals" (formula "17") (term "0,1,0,0,0,0,0"))
                        (rule "polySimp_elimOne" (formula "17") (term "1,1,0,0,0,0,0"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "13") (term "0,0,0"))
                        (rule "polySimp_mulComm0" (formula "13") (term "1,0,0,0"))
                        (rule "polySimp_rightDist" (formula "13") (term "1,0,0,0"))
                        (rule "polySimp_mulLiterals" (formula "13") (term "1,1,0,0,0"))
                        (rule "mul_literals" (formula "13") (term "0,1,0,0,0"))
                        (rule "polySimp_elimOne" (formula "13") (term "1,1,0,0,0"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "14") (term "0,0,0"))
                        (rule "polySimp_mulComm0" (formula "14") (term "1,0,0,0"))
                        (rule "polySimp_rightDist" (formula "14") (term "1,0,0,0"))
                        (rule "polySimp_mulLiterals" (formula "14") (term "1,1,0,0,0"))
                        (rule "mul_literals" (formula "14") (term "0,1,0,0,0"))
                        (rule "polySimp_elimOne" (formula "14") (term "1,1,0,0,0"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "18") (term "0,0,0,0,0"))
                        (rule "polySimp_mulComm0" (formula "18") (term "1,0,0,0,0,0"))
                        (rule "polySimp_rightDist" (formula "18") (term "1,0,0,0,0,0"))
                        (rule "mul_literals" (formula "18") (term "0,1,0,0,0,0,0"))
                        (rule "polySimp_mulLiterals" (formula "18") (term "1,1,0,0,0,0,0"))
                        (rule "polySimp_elimOne" (formula "18") (term "1,1,0,0,0,0,0"))
                        (rule "inEqSimp_sepNegMonomial0" (formula "25"))
                        (rule "polySimp_mulLiterals" (formula "25") (term "0"))
                        (rule "polySimp_elimOne" (formula "25") (term "0"))
                        (rule "inEqSimp_contradEq7" (formula "44") (ifseqformula "25"))
                        (rule "polySimp_rightDist" (formula "44") (term "1,0,0"))
                        (rule "mul_literals" (formula "44") (term "0,1,0,0"))
                        (rule "polySimp_addAssoc" (formula "44") (term "0,0"))
                        (rule "polySimp_addComm0" (formula "44") (term "0,0,0"))
                        (rule "polySimp_pullOutFactor1b" (formula "44") (term "0,0"))
                        (rule "add_literals" (formula "44") (term "1,1,0,0"))
                        (rule "times_zero_1" (formula "44") (term "1,0,0"))
                        (rule "add_zero_right" (formula "44") (term "0,0"))
                        (rule "leq_literals" (formula "44") (term "0"))
                         (builtin "One Step Simplification" (formula "44"))
                        (rule "false_right" (formula "44"))
                        (rule "pullOutSelect" (formula "1") (term "0") (inst "selectSK=java_util_Iterator_index_1"))
                        (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "37"))
                         (builtin "One Step Simplification" (formula "1"))
                        (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,1,1,0,0") (ifseqformula "29"))
                        (rule "elementOfSingleton" (formula "1") (term "0,0,0"))
                         (builtin "One Step Simplification" (formula "1"))
                        (rule "pullOutSelect" (formula "1") (term "2,0") (inst "selectSK=java_util_Iterator_index_2"))
                        (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "30"))
                         (builtin "One Step Simplification" (formula "1"))
                        (rule "elementOfSingleton" (formula "1") (term "0,0,0"))
                         (builtin "One Step Simplification" (formula "1"))
                        (rule "inEqSimp_and_subsumption3" (formula "19") (term "0,0,0"))
                        (rule "leq_literals" (formula "19") (term "0,1,0,0,0,0"))
                         (builtin "One Step Simplification" (formula "19"))
                        (rule "inEqSimp_and_subsumption3" (formula "20") (term "0,0,0"))
                        (rule "leq_literals" (formula "20") (term "0,1,0,0,0,0"))
                         (builtin "One Step Simplification" (formula "20"))
                        (rule "nnf_imp2or" (formula "15") (term "0"))
                        (rule "nnf_imp2or" (formula "16") (term "0"))
                        (rule "nnf_imp2or" (formula "19") (term "0"))
                        (rule "nnf_imp2or" (formula "20") (term "0"))
                        (rule "nnf_notAnd" (formula "15") (term "0,0"))
                        (rule "inEqSimp_notGeq" (formula "15") (term "1,0,0"))
                        (rule "mul_literals" (formula "15") (term "1,0,0,1,0,0"))
                        (rule "add_zero_right" (formula "15") (term "0,0,1,0,0"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "15") (term "1,0,0"))
                        (rule "mul_literals" (formula "15") (term "1,1,0,0"))
                        (rule "inEqSimp_notLeq" (formula "15") (term "0,0,0"))
                        (rule "polySimp_rightDist" (formula "15") (term "1,0,0,0,0,0"))
                        (rule "mul_literals" (formula "15") (term "0,1,0,0,0,0,0"))
                        (rule "polySimp_addAssoc" (formula "15") (term "0,0,0,0,0"))
                        (rule "add_literals" (formula "15") (term "0,0,0,0,0,0"))
                        (rule "add_zero_left" (formula "15") (term "0,0,0,0,0"))
                        (rule "inEqSimp_sepPosMonomial1" (formula "15") (term "0,0,0"))
                        (rule "polySimp_mulLiterals" (formula "15") (term "1,0,0,0"))
                        (rule "polySimp_elimOne" (formula "15") (term "1,0,0,0"))
                        (rule "nnf_notAnd" (formula "16") (term "0,0"))
                        (rule "inEqSimp_notGeq" (formula "16") (term "1,0,0"))
                        (rule "mul_literals" (formula "16") (term "1,0,0,1,0,0"))
                        (rule "add_literals" (formula "16") (term "0,0,1,0,0"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "16") (term "1,0,0"))
                        (rule "mul_literals" (formula "16") (term "1,1,0,0"))
                        (rule "inEqSimp_notLeq" (formula "16") (term "0,0,0"))
                        (rule "polySimp_rightDist" (formula "16") (term "1,0,0,0,0,0"))
                        (rule "mul_literals" (formula "16") (term "0,1,0,0,0,0,0"))
                        (rule "polySimp_addAssoc" (formula "16") (term "0,0,0,0,0"))
                        (rule "add_literals" (formula "16") (term "0,0,0,0,0,0"))
                        (rule "add_zero_left" (formula "16") (term "0,0,0,0,0"))
                        (rule "inEqSimp_sepPosMonomial1" (formula "16") (term "0,0,0"))
                        (rule "polySimp_mulLiterals" (formula "16") (term "1,0,0,0"))
                        (rule "polySimp_elimOne" (formula "16") (term "1,0,0,0"))
                        (rule "nnf_notAnd" (formula "19") (term "0,0"))
                        (rule "inEqSimp_notLeq" (formula "19") (term "1,0,0"))
                        (rule "mul_literals" (formula "19") (term "1,0,0,1,0,0"))
                        (rule "add_literals" (formula "19") (term "0,0,1,0,0"))
                        (rule "inEqSimp_sepPosMonomial1" (formula "19") (term "1,0,0"))
                        (rule "mul_literals" (formula "19") (term "1,1,0,0"))
                        (rule "nnf_notAnd" (formula "20") (term "0,0"))
                        (rule "inEqSimp_notLeq" (formula "20") (term "1,0,0"))
                        (rule "mul_literals" (formula "20") (term "1,0,0,1,0,0"))
                        (rule "add_literals" (formula "20") (term "0,0,1,0,0"))
                        (rule "inEqSimp_sepPosMonomial1" (formula "20") (term "1,0,0"))
                        (rule "mul_literals" (formula "20") (term "1,1,0,0"))
                        (rule "nnf_notAnd" (formula "19") (term "0,0,0"))
                        (rule "inEqSimp_notGeq" (formula "19") (term "1,0,0,0"))
                        (rule "mul_literals" (formula "19") (term "1,0,0,1,0,0,0"))
                        (rule "add_literals" (formula "19") (term "0,0,1,0,0,0"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "19") (term "1,0,0,0"))
                        (rule "mul_literals" (formula "19") (term "1,1,0,0,0"))
                        (rule "inEqSimp_notLeq" (formula "19") (term "0,0,0,0"))
                        (rule "polySimp_rightDist" (formula "19") (term "1,0,0,0,0,0,0"))
                        (rule "mul_literals" (formula "19") (term "0,1,0,0,0,0,0,0"))
                        (rule "polySimp_addAssoc" (formula "19") (term "0,0,0,0,0,0"))
                        (rule "add_literals" (formula "19") (term "0,0,0,0,0,0,0"))
                        (rule "add_zero_left" (formula "19") (term "0,0,0,0,0,0"))
                        (rule "inEqSimp_sepPosMonomial1" (formula "19") (term "0,0,0,0"))
                        (rule "polySimp_mulLiterals" (formula "19") (term "1,0,0,0,0"))
                        (rule "polySimp_elimOne" (formula "19") (term "1,0,0,0,0"))
                        (rule "nnf_notAnd" (formula "20") (term "0,0,0"))
                        (rule "inEqSimp_notLeq" (formula "20") (term "0,0,0,0"))
                        (rule "polySimp_rightDist" (formula "20") (term "1,0,0,0,0,0,0"))
                        (rule "mul_literals" (formula "20") (term "0,1,0,0,0,0,0,0"))
                        (rule "polySimp_addAssoc" (formula "20") (term "0,0,0,0,0,0"))
                        (rule "add_literals" (formula "20") (term "0,0,0,0,0,0,0"))
                        (rule "add_zero_left" (formula "20") (term "0,0,0,0,0,0"))
                        (rule "inEqSimp_sepPosMonomial1" (formula "20") (term "0,0,0,0"))
                        (rule "polySimp_mulLiterals" (formula "20") (term "1,0,0,0,0"))
                        (rule "polySimp_elimOne" (formula "20") (term "1,0,0,0,0"))
                        (rule "inEqSimp_notGeq" (formula "20") (term "1,0,0,0"))
                        (rule "mul_literals" (formula "20") (term "1,0,0,1,0,0,0"))
                        (rule "add_literals" (formula "20") (term "0,0,1,0,0,0"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "20") (term "1,0,0,0"))
                        (rule "mul_literals" (formula "20") (term "1,1,0,0,0"))
                        (rule "commute_or_2" (formula "16") (term "0"))
                        (rule "commute_or" (formula "15") (term "0,0"))
                        (rule "commute_or" (formula "2") (term "0,1,0,0"))
                        (rule "commute_or_2" (formula "19") (term "0"))
                        (rule "cnf_rightDist" (formula "1") (term "0,0"))
                        (rule "commute_or_2" (formula "20") (term "0"))
                        (rule "commute_or" (formula "16") (term "0,0"))
                        (rule "commute_or_2" (formula "16") (term "0"))
                        (rule "commute_or_2" (formula "19") (term "0,0"))
                        (rule "commute_and" (formula "15") (term "0,0,1,0"))
                        (rule "commute_or_2" (formula "20") (term "0,0"))
                        (rule "commute_or" (formula "1") (term "1,0,0"))
                        (rule "commute_or" (formula "1") (term "0,0,0"))
                        (rule "commute_or" (formula "19") (term "0,0,0"))
                        (rule "commute_or_2" (formula "19") (term "0,0"))
                        (rule "commute_or_2" (formula "19") (term "0"))
                        (rule "commute_or" (formula "20") (term "0,0,0"))
                        (rule "commute_or_2" (formula "20") (term "0,0"))
                        (rule "commute_or_2" (formula "20") (term "0"))
                        (rule "commute_and_2" (formula "15") (term "0,1,0"))
                        (rule "seqGetAlphaCast" (formula "43") (term "0"))
                        (rule "castedGetAny" (formula "43") (term "0"))
                         (builtin "One Step Simplification" (formula "43"))
                        (rule "true_left" (formula "43"))
                        (rule "seqGetAlphaCast" (formula "32") (term "0"))
                        (rule "castedGetAny" (formula "32") (term "0"))
                         (builtin "One Step Simplification" (formula "32"))
                        (rule "true_left" (formula "32"))
                        (rule "ex_pull_out3" (formula "15") (term "0"))
                        (rule "cnf_rightDist" (formula "15") (term "0,0"))
                        (rule "shift_paren_or" (formula "15") (term "1,0,0"))
                        (rule "cnf_rightDist" (formula "15") (term "0,0,0"))
                        (rule "commute_or_2" (formula "15") (term "0,0,0,0"))
                        (rule "shift_paren_or" (formula "15") (term "1,0,0,0"))
                        (rule "commute_or" (formula "15") (term "0,0,0,0,0"))
                        (rule "ifthenelse_split" (formula "1") (term "0"))
                        (branch " ( ¬(java.util.CollectionIterator)it = null ∨ (java.util.CollectionIterator)it = it) ∧ ( (java.util.CollectionIterator)it = it ∨ ¬ (java.util.CollectionIterator)it.<created>@heap_Before_LOOP«anonHeapFunction» = TRUE) TRUE"
                           (rule "andLeft" (formula "1"))
                           (rule "applyEqReverse" (formula "4") (term "2,0") (ifseqformula "3"))
                           (rule "hideAuxiliaryEq" (formula "3"))
                           (rule "commute_and" (formula "16") (term "0,0,0"))
                           (rule "commute_and_2" (formula "16") (term "0,0"))
                           (rule "ifthenelse_split" (formula "3") (term "0"))
                           (branch " ¬(java.util.CollectionIterator)it = null ∧ ¬( (java.util.CollectionIterator)it.<created>@anon_heap_next«anonHeapFunction» = TRUE ∨ (java.util.CollectionIterator)it.<created>@heap_Before_LOOP«anonHeapFunction» = TRUE) TRUE"
                              (rule "andLeft" (formula "3"))
                              (rule "notLeft" (formula "3"))
                              (rule "notLeft" (formula "3"))
                              (rule "orRight" (formula "47"))
                              (rule "applyEqReverse" (formula "4") (term "0") (ifseqformula "3"))
                              (rule "hideAuxiliaryEq" (formula "3"))
                              (rule "replace_known_right" (formula "2") (term "0,1") (ifseqformula "47"))
                               (builtin "One Step Simplification" (formula "2"))
                              (rule "true_left" (formula "2"))
                              (rule "replace_known_right" (formula "1") (term "0,0") (ifseqformula "47"))
                               (builtin "One Step Simplification" (formula "1"))
                              (rule "true_left" (formula "1"))
                              (rule "ineffectiveCast" (formula "48") (term "0") (ifseqformula "4"))
                              (rule "typeEqDerived2" (formula "5") (term "0") (ifseqformula "1"))
                               (builtin "One Step Simplification" (formula "5"))
                              (rule "true_left" (formula "5"))
                              (rule "applyEq" (formula "43") (term "1,0,0") (ifseqformula "1"))
                              (rule "applyEq" (formula "38") (term "2") (ifseqformula "1"))
                              (rule "applyEq" (formula "41") (term "1") (ifseqformula "1"))
                              (rule "applyEq" (formula "43") (term "1,0,1") (ifseqformula "1"))
                              (rule "applyEq" (formula "47") (term "0") (ifseqformula "1"))
                              (rule "ineffectiveCast" (formula "44") (term "1,0") (ifseqformula "20"))
                              (rule "typeEqDerived2" (formula "21") (term "0") (ifseqformula "1"))
                               (builtin "One Step Simplification" (formula "21"))
                              (rule "true_left" (formula "21"))
                              (rule "applyEq" (formula "3") (term "1,0") (ifseqformula "1"))
                              (rule "applyEq" (formula "43") (term "1,0") (ifseqformula "1"))
                              (rule "applyEq" (formula "44") (term "1,0") (ifseqformula "1"))
                              (rule "close" (formula "44") (ifseqformula "12"))
                           )
                           (branch " ¬(java.util.CollectionIterator)it = null ∧ ¬( (java.util.CollectionIterator)it.<created>@anon_heap_next«anonHeapFunction» = TRUE ∨ (java.util.CollectionIterator)it.<created>@heap_Before_LOOP«anonHeapFunction» = TRUE) FALSE"
                              (rule "applyEqReverse" (formula "4") (term "0") (ifseqformula "3"))
                              (rule "hideAuxiliaryEq" (formula "3"))
                              (rule "ineffectiveCast" (formula "48") (term "0") (ifseqformula "6"))
                              (rule "typeEqDerived2" (formula "7") (term "0") (ifseqformula "1"))
                               (builtin "One Step Simplification" (formula "7"))
                              (rule "true_left" (formula "7"))
                              (rule "applyEq" (formula "48") (term "0") (ifseqformula "1"))
                              (rule "applyEq" (formula "43") (term "1") (ifseqformula "1"))
                              (rule "applyEq" (formula "45") (term "1,0,1") (ifseqformula "1"))
                              (rule "applyEq" (formula "45") (term "1,0,0") (ifseqformula "1"))
                              (rule "applyEq" (formula "40") (term "2") (ifseqformula "1"))
                              (rule "cut_direct" (formula "2") (term "0,0"))
                              (branch "CUT: (java.util.CollectionIterator)it = null TRUE"
                                  (builtin "One Step Simplification" (formula "3"))
                                 (rule "typeEqDerived2" (formula "23") (term "0") (ifseqformula "3"))
                                  (builtin "One Step Simplification" (formula "23"))
                                 (rule "true_left" (formula "23"))
                                 (rule "replace_known_left" (formula "4") (term "0") (ifseqformula "3"))
                                  (builtin "One Step Simplification" (formula "4"))
                                 (rule "true_left" (formula "4"))
                                 (rule "replace_known_left" (formula "44") (term "0,0") (ifseqformula "2"))
                                  (builtin "One Step Simplification" (formula "44"))
                                 (rule "false_right" (formula "44"))
                                 (rule "applyEq" (formula "4") (term "1,0") (ifseqformula "3"))
                                 (rule "applyEq" (formula "3") (term "0") (ifseqformula "2"))
                                 (rule "eqSymm" (formula "3"))
                                 (rule "close" (formula "50") (ifseqformula "3"))
                              )
                              (branch "CUT: (java.util.CollectionIterator)it = null FALSE"
                                  (builtin "One Step Simplification" (formula "2"))
                                 (rule "true_left" (formula "2"))
                                 (rule "replace_known_right" (formula "45") (term "0,0") (ifseqformula "44"))
                                  (builtin "One Step Simplification" (formula "45"))
                                 (rule "notRight" (formula "45"))
                                 (rule "cut_direct" (formula "3") (term "0"))
                                 (branch "CUT: (java.util.CollectionIterator)it = it TRUE"
                                    (rule "typeEqDerived2" (formula "23") (term "0") (ifseqformula "3"))
                                     (builtin "One Step Simplification" (formula "4"))
                                     (builtin "One Step Simplification" (formula "23"))
                                    (rule "true_left" (formula "4"))
                                    (rule "applyEq" (formula "44") (term "0") (ifseqformula "3"))
                                    (rule "applyEq" (formula "1") (term "1,0,0") (ifseqformula "3"))
                                    (rule "applyEq" (formula "4") (term "1,0") (ifseqformula "3"))
                                    (rule "applyEq" (formula "1") (term "1,0,1") (ifseqformula "3"))
                                    (rule "replace_known_left" (formula "1") (term "1") (ifseqformula "13"))
                                     (builtin "One Step Simplification" (formula "1"))
                                    (rule "true_left" (formula "1"))
                                    (rule "ineffectiveCast2" (formula "38") (term "2") (ifseqformula "41"))
                                    (rule "ineffectiveCast2" (formula "1") (term "0") (ifseqformula "1"))
                                    (rule "ineffectiveCast2" (formula "2") (term "0") (ifseqformula "2"))
                                    (rule "allLeft" (formula "18") (inst "t=i_0"))
                                    (rule "inEqSimp_commuteGeq" (formula "18") (term "1"))
                                    (rule "applyEq" (formula "18") (term "0,0,0,0,0") (ifseqformula "42"))
                                    (rule "replace_known_right" (formula "18") (term "0,0,0,0") (ifseqformula "44"))
                                     (builtin "One Step Simplification" (formula "18"))
                                    (rule "true_left" (formula "18"))
                                    (rule "cut_direct" (formula "29") (term "0"))
                                    (branch "CUT: result_50.<created>@anon_heap_next«anonHeapFunction» = TRUE TRUE"
                                        (builtin "One Step Simplification" (formula "30"))
                                       (rule "true_left" (formula "30"))
                                       (rule "Partial_inv_axiom_for_JML_class_invariant_nr_63_in_Iterator" (formula "32"))
                                       (rule "replaceKnownSelect_taclet000_4" (formula "32") (term "1,0"))
                                       (rule "replaceKnownSelect_taclet000_4" (formula "32") (term "0,1"))
                                       (rule "replaceKnownAuxiliaryConstant_taclet000_5" (formula "32") (term "1,0"))
                                       (rule "replaceKnownAuxiliaryConstant_taclet000_5" (formula "32") (term "0,1"))
                                       (rule "replaceKnownSelect_taclet000_2" (formula "32") (term "0,1,1"))
                                       (rule "replaceKnownAuxiliaryConstant_taclet000_3" (formula "32") (term "0,1,1"))
                                       (rule "andLeft" (formula "32"))
                                       (rule "inEqSimp_commuteLeq" (formula "32"))
                                       (rule "inEqSimp_commuteLeq" (formula "33"))
                                       (rule "applyEq" (formula "33") (term "0,0") (ifseqformula "21"))
                                       (rule "inEqSimp_contradInEq1" (formula "3") (ifseqformula "32"))
                                       (rule "qeq_literals" (formula "3") (term "0"))
                                        (builtin "One Step Simplification" (formula "3"))
                                       (rule "closeFalse" (formula "3"))
                                    )
                                    (branch "CUT: result_50.<created>@anon_heap_next«anonHeapFunction» = TRUE FALSE"
                                        (builtin "One Step Simplification" (formula "29"))
                                       (rule "Partial_inv_axiom_for_JML_class_invariant_nr_63_in_Iterator" (formula "32"))
                                       (rule "replaceKnownSelect_taclet000_4" (formula "32") (term "0,1"))
                                       (rule "replaceKnownSelect_taclet000_4" (formula "32") (term "1,0"))
                                       (rule "replaceKnownAuxiliaryConstant_taclet000_5" (formula "32") (term "0,1"))
                                       (rule "replaceKnownAuxiliaryConstant_taclet000_5" (formula "32") (term "1,0"))
                                       (rule "replaceKnownSelect_taclet000_2" (formula "32") (term "0,1,1"))
                                       (rule "replaceKnownAuxiliaryConstant_taclet000_3" (formula "32") (term "0,1,1"))
                                       (rule "andLeft" (formula "32"))
                                       (rule "inEqSimp_commuteLeq" (formula "32"))
                                       (rule "inEqSimp_commuteLeq" (formula "33"))
                                       (rule "applyEq" (formula "33") (term "0,0") (ifseqformula "21"))
                                       (rule "inEqSimp_contradInEq1" (formula "3") (ifseqformula "32"))
                                       (rule "qeq_literals" (formula "3") (term "0"))
                                        (builtin "One Step Simplification" (formula "3"))
                                       (rule "closeFalse" (formula "3"))
                                    )
                                 )
                                 (branch "CUT: (java.util.CollectionIterator)it = it FALSE"
                                     (builtin "One Step Simplification" (formula "3"))
                                    (rule "notLeft" (formula "3"))
                                    (rule "replace_known_right" (formula "1") (term "1") (ifseqformula "44"))
                                     (builtin "One Step Simplification" (formula "1"))
                                    (rule "ineffectiveCast" (formula "3") (term "1,0") (ifseqformula "21"))
                                    (rule "typeEqDerived2" (formula "22") (term "0") (ifseqformula "3"))
                                    (rule "close" (formula "46") (ifseqformula "3"))
                                 )
                              )
                           )
                        )
                        (branch " ( ¬(java.util.CollectionIterator)it = null ∨ (java.util.CollectionIterator)it = it) ∧ ( (java.util.CollectionIterator)it = it ∨ ¬ (java.util.CollectionIterator)it.<created>@heap_Before_LOOP«anonHeapFunction» = TRUE) FALSE"
                           (rule "applyEqReverse" (formula "2") (term "2,0") (ifseqformula "1"))
                           (rule "hideAuxiliaryEq" (formula "1"))
                           (rule "andRight" (formula "45"))
                           (branch
                              (rule "orRight" (formula "45"))
                              (rule "notRight" (formula "45"))
                              (rule "replace_known_left" (formula "2") (term "0,0,0,0") (ifseqformula "1"))
                               (builtin "One Step Simplification" (formula "2"))
                              (rule "applyEqReverse" (formula "3") (term "0") (ifseqformula "2"))
                              (rule "hideAuxiliaryEq" (formula "2"))
                              (rule "applyEq" (formula "45") (term "0") (ifseqformula "1"))
                              (rule "eqSymm" (formula "45"))
                              (rule "applyEq" (formula "2") (term "1,0") (ifseqformula "1"))
                              (rule "commute_and" (formula "14") (term "0,0,0"))
                              (rule "commute_and_2" (formula "14") (term "0,0"))
                              (rule "ineffectiveCast" (formula "42") (term "1") (ifseqformula "5"))
                              (rule "typeEqDerived2" (formula "5") (term "0") (ifseqformula "42"))
                               (builtin "One Step Simplification" (formula "5"))
                              (rule "true_left" (formula "5"))
                              (rule "applyEq" (formula "46") (term "0") (ifseqformula "41"))
                              (rule "applyEq" (formula "42") (term "1") (ifseqformula "41"))
                              (rule "applyEq" (formula "38") (term "2") (ifseqformula "41"))
                              (rule "applyEq" (formula "44") (term "1,0,1") (ifseqformula "41"))
                              (rule "applyEq" (formula "44") (term "1,0,0") (ifseqformula "41"))
                              (rule "ineffectiveCast" (formula "1") (term "0") (ifseqformula "20"))
                              (rule "typeEqDerived2" (formula "21") (term "0") (ifseqformula "1"))
                               (builtin "One Step Simplification" (formula "21"))
                              (rule "true_left" (formula "21"))
                              (rule "applyEq" (formula "2") (term "0") (ifseqformula "1"))
                              (rule "close" (formula "50") (ifseqformula "2"))
                           )
                           (branch
                              (rule "orRight" (formula "45"))
                              (rule "notRight" (formula "46"))
                              (rule "replace_known_left" (formula "2") (term "1,0,1,0,0") (ifseqformula "1"))
                               (builtin "One Step Simplification" (formula "2"))
                              (rule "applyEqReverse" (formula "3") (term "0") (ifseqformula "2"))
                              (rule "hideAuxiliaryEq" (formula "2"))
                              (rule "commute_and" (formula "14") (term "0,0,0"))
                              (rule "commute_and_2" (formula "14") (term "0,0"))
                              (rule "ineffectiveCast" (formula "42") (term "1") (ifseqformula "5"))
                              (rule "typeEqDerived2" (formula "5") (term "0") (ifseqformula "42"))
                               (builtin "One Step Simplification" (formula "5"))
                              (rule "true_left" (formula "5"))
                              (rule "applyEq" (formula "44") (term "1,0,1") (ifseqformula "41"))
                              (rule "applyEq" (formula "44") (term "1,0,0") (ifseqformula "41"))
                              (rule "applyEq" (formula "38") (term "2") (ifseqformula "41"))
                              (rule "applyEq" (formula "46") (term "0") (ifseqformula "41"))
                              (rule "applyEq" (formula "42") (term "1") (ifseqformula "41"))
                              (rule "ineffectiveCast" (formula "1") (term "1,0") (ifseqformula "20"))
                              (rule "typeEqDerived2" (formula "21") (term "0") (ifseqformula "1"))
                              (rule "close" (formula "45") (ifseqformula "1"))
                           )
                        )
                     )
                     (branch
                        (rule "polySimp_homoEq" (formula "35") (term "1"))
                        (rule "polySimp_addComm1" (formula "35") (term "0,1"))
                        (rule "inEqSimp_leqRight" (formula "50"))
                        (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
                        (rule "polySimp_addComm1" (formula "1") (term "0"))
                        (rule "inEqSimp_ltToLeq" (formula "19") (term "0,0,0,0,0"))
                        (rule "polySimp_mulComm0" (formula "19") (term "1,0,0,0,0,0,0,0"))
                        (rule "inEqSimp_ltToLeq" (formula "14") (term "0,0,0"))
                        (rule "polySimp_mulComm0" (formula "14") (term "1,0,0,0,0,0"))
                        (rule "inEqSimp_ltToLeq" (formula "23") (term "0,0,0"))
                        (rule "polySimp_mulComm0" (formula "23") (term "1,0,0,0,0,0"))
                        (rule "inEqSimp_ltToLeq" (formula "18") (term "0,0,0,0,0"))
                        (rule "polySimp_mulComm0" (formula "18") (term "1,0,0,0,0,0,0,0"))
                        (rule "inEqSimp_ltToLeq" (formula "29") (term "1"))
                        (rule "polySimp_mulComm0" (formula "29") (term "1,0,0,1"))
                        (rule "polySimp_addComm1" (formula "29") (term "0,1"))
                        (rule "inEqSimp_ltToLeq" (formula "35") (term "0"))
                        (rule "polySimp_mulComm0" (formula "35") (term "1,0,0,0"))
                        (rule "polySimp_addComm1" (formula "35") (term "0,0"))
                        (rule "inEqSimp_ltToLeq" (formula "13") (term "0,0,0"))
                        (rule "polySimp_mulComm0" (formula "13") (term "1,0,0,0,0,0"))
                        (rule "inEqSimp_ltToLeq" (formula "47"))
                        (rule "polySimp_mulComm0" (formula "47") (term "1,0,0"))
                        (rule "polySimp_addComm1" (formula "47") (term "0"))
                        (rule "inEqSimp_ltToLeq" (formula "34") (term "0"))
                        (rule "polySimp_mulComm0" (formula "34") (term "1,0,0,0"))
                        (rule "polySimp_addComm1" (formula "34") (term "0,0"))
                        (rule "inEqSimp_ltToLeq" (formula "13") (term "0,0,0,1,0"))
                        (rule "polySimp_mulComm0" (formula "13") (term "1,0,0,0,0,0,1,0"))
                        (rule "inEqSimp_ltToLeq" (formula "36") (term "0"))
                        (rule "polySimp_mulComm0" (formula "36") (term "1,0,0,0"))
                        (rule "polySimp_addComm1" (formula "36") (term "0,0"))
                        (rule "applyEq" (formula "36") (term "0,0,1,0,0") (ifseqformula "24"))
                        (rule "applyEq" (formula "34") (term "0,1,0,0") (ifseqformula "22"))
                        (rule "applyEq" (formula "29") (term "0,0,1,0,1") (ifseqformula "24"))
                        (rule "applyEq" (formula "28") (term "0,0") (ifseqformula "24"))
                        (rule "applyEq" (formula "36") (term "0,0") (ifseqformula "22"))
                        (rule "applyEq" (formula "44") (term "6") (ifseqformula "43"))
                        (rule "applyEq" (formula "37") (term "0,0") (ifseqformula "22"))
                        (rule "applyEq" (formula "23") (term "0,0,1,0,0,0,0,0") (ifseqformula "24"))
                        (rule "applyEq" (formula "33") (term "0,0,1") (ifseqformula "24"))
                        (rule "applyEq" (formula "22") (term "0,0") (ifseqformula "24"))
                         (builtin "One Step Simplification" (formula "22"))
                        (rule "true_left" (formula "22"))
                        (rule "applyEq" (formula "28") (term "4") (ifseqformula "26"))
                        (rule "applyEq" (formula "28") (term "3") (ifseqformula "5"))
                        (rule "applyEq" (formula "5") (term "1") (ifseqformula "24"))
                        (rule "replace_known_left" (formula "27") (term "0") (ifseqformula "5"))
                         (builtin "One Step Simplification" (formula "27"))
                        (rule "replace_known_left" (formula "34") (term "0") (ifseqformula "27"))
                         (builtin "One Step Simplification" (formula "34"))
                        (rule "replace_known_left" (formula "32") (term "0") (ifseqformula "27"))
                         (builtin "One Step Simplification" (formula "32"))
                        (rule "applyEq" (formula "33") (term "0,0,1,0,0") (ifseqformula "23"))
                        (rule "replace_known_left" (formula "33") (term "0") (ifseqformula "27"))
                         (builtin "One Step Simplification" (formula "33"))
                        (rule "notLeft" (formula "33"))
                        (rule "replace_known_right" (formula "4") (term "0") (ifseqformula "48"))
                         (builtin "One Step Simplification" (formula "4"))
                        (rule "replace_known_right" (formula "31") (term "0,0") (ifseqformula "48"))
                         (builtin "One Step Simplification" (formula "31"))
                        (rule "replace_known_right" (formula "34") (term "1") (ifseqformula "48"))
                         (builtin "One Step Simplification" (formula "34"))
                        (rule "notLeft" (formula "34"))
                        (rule "replace_known_right" (formula "34") (term "0") (ifseqformula "47"))
                         (builtin "One Step Simplification" (formula "34"))
                        (rule "true_left" (formula "34"))
                        (rule "applyEq" (formula "36") (term "4") (ifseqformula "35"))
                        (rule "applyEq" (formula "15") (term "0") (ifseqformula "17"))
                        (rule "applyEq" (formula "21") (term "0,0,1,0") (ifseqformula "22"))
                         (builtin "One Step Simplification" (formula "21"))
                        (rule "true_left" (formula "21"))
                        (rule "applyEq" (formula "18") (term "0,1,0,0,0,0,0,0,0") (ifseqformula "16"))
                        (rule "applyEq" (formula "26") (term "3") (ifseqformula "22"))
                        (rule "polySimp_sepPosMonomial" (formula "31"))
                        (rule "polySimp_mulComm0" (formula "31") (term "1"))
                        (rule "polySimp_rightDist" (formula "31") (term "1"))
                        (rule "polySimp_mulLiterals" (formula "31") (term "1,1"))
                        (rule "mul_literals" (formula "31") (term "0,1"))
                        (rule "polySimp_elimOne" (formula "31") (term "1,1"))
                        (rule "applyEq" (formula "30") (term "1,0") (ifseqformula "31"))
                        (rule "applyEq" (formula "44") (term "1") (ifseqformula "31"))
                        (rule "applyEq" (formula "25") (term "1,0,0") (ifseqformula "31"))
                        (rule "polySimp_addAssoc" (formula "25") (term "0,0"))
                        (rule "add_literals" (formula "25") (term "0,0,0"))
                        (rule "add_zero_left" (formula "25") (term "0,0"))
                        (rule "inEqSimp_sepNegMonomial1" (formula "1"))
                        (rule "polySimp_mulLiterals" (formula "1") (term "0"))
                        (rule "polySimp_elimOne" (formula "1") (term "0"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "14") (term "0,0,0"))
                        (rule "polySimp_mulComm0" (formula "14") (term "1,0,0,0"))
                        (rule "polySimp_rightDist" (formula "14") (term "1,0,0,0"))
                        (rule "mul_literals" (formula "14") (term "0,1,0,0,0"))
                        (rule "polySimp_mulLiterals" (formula "14") (term "1,1,0,0,0"))
                        (rule "polySimp_elimOne" (formula "14") (term "1,1,0,0,0"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "17") (term "0,0,0,0,0"))
                        (rule "polySimp_mulComm0" (formula "17") (term "1,0,0,0,0,0"))
                        (rule "polySimp_rightDist" (formula "17") (term "1,0,0,0,0,0"))
                        (rule "polySimp_mulLiterals" (formula "17") (term "1,1,0,0,0,0,0"))
                        (rule "mul_literals" (formula "17") (term "0,1,0,0,0,0,0"))
                        (rule "polySimp_elimOne" (formula "17") (term "1,1,0,0,0,0,0"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "13") (term "0,0,0"))
                        (rule "polySimp_mulComm0" (formula "13") (term "1,0,0,0"))
                        (rule "polySimp_rightDist" (formula "13") (term "1,0,0,0"))
                        (rule "polySimp_mulLiterals" (formula "13") (term "1,1,0,0,0"))
                        (rule "mul_literals" (formula "13") (term "0,1,0,0,0"))
                        (rule "polySimp_elimOne" (formula "13") (term "1,1,0,0,0"))
                        (rule "inEqSimp_sepNegMonomial0" (formula "40"))
                        (rule "polySimp_mulLiterals" (formula "40") (term "0"))
                        (rule "polySimp_elimOne" (formula "40") (term "0"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "13") (term "0,0,0,1,0"))
                        (rule "polySimp_mulComm0" (formula "13") (term "1,0,0,0,1,0"))
                        (rule "polySimp_rightDist" (formula "13") (term "1,0,0,0,1,0"))
                        (rule "mul_literals" (formula "13") (term "0,1,0,0,0,1,0"))
                        (rule "polySimp_mulLiterals" (formula "13") (term "1,1,0,0,0,1,0"))
                        (rule "polySimp_elimOne" (formula "13") (term "1,1,0,0,0,1,0"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "18") (term "0,0,0,0,0"))
                        (rule "polySimp_mulComm0" (formula "18") (term "1,0,0,0,0,0"))
                        (rule "polySimp_rightDist" (formula "18") (term "1,0,0,0,0,0"))
                        (rule "polySimp_mulLiterals" (formula "18") (term "1,1,0,0,0,0,0"))
                        (rule "mul_literals" (formula "18") (term "0,1,0,0,0,0,0"))
                        (rule "polySimp_elimOne" (formula "18") (term "1,1,0,0,0,0,0"))
                        (rule "inEqSimp_sepNegMonomial0" (formula "25"))
                        (rule "polySimp_mulLiterals" (formula "25") (term "0"))
                        (rule "polySimp_elimOne" (formula "25") (term "0"))
                        (rule "inEqSimp_contradEq7" (formula "44") (ifseqformula "25"))
                        (rule "polySimp_rightDist" (formula "44") (term "1,0,0"))
                        (rule "mul_literals" (formula "44") (term "0,1,0,0"))
                        (rule "polySimp_addAssoc" (formula "44") (term "0,0"))
                        (rule "polySimp_addComm0" (formula "44") (term "0,0,0"))
                        (rule "polySimp_pullOutFactor1b" (formula "44") (term "0,0"))
                        (rule "add_literals" (formula "44") (term "1,1,0,0"))
                        (rule "times_zero_1" (formula "44") (term "1,0,0"))
                        (rule "add_zero_right" (formula "44") (term "0,0"))
                        (rule "leq_literals" (formula "44") (term "0"))
                         (builtin "One Step Simplification" (formula "44"))
                        (rule "false_right" (formula "44"))
                        (rule "pullOutSelect" (formula "1") (term "1,1") (inst "selectSK=java_util_Iterator_index_1"))
                        (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "37"))
                         (builtin "One Step Simplification" (formula "1"))
                        (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,1,1,0,0") (ifseqformula "29"))
                        (rule "elementOfSingleton" (formula "1") (term "0,0,0"))
                         (builtin "One Step Simplification" (formula "1"))
                        (rule "pullOutSelect" (formula "2") (term "0,0") (inst "selectSK=java_util_Iterator_seq_1"))
                        (rule "simplifySelectOfAnonEQ" (formula "2") (ifseqformula "38"))
                         (builtin "One Step Simplification" (formula "2"))
                        (rule "selectCreatedOfAnonAsFormulaEQ" (formula "2") (term "0,1,1,0,0") (ifseqformula "30"))
                        (rule "elementOfSingleton" (formula "2") (term "0,0,0"))
                         (builtin "One Step Simplification" (formula "2"))
                        (rule "pullOutSelect" (formula "1") (term "2,0") (inst "selectSK=java_util_Iterator_index_2"))
                        (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "31"))
                         (builtin "One Step Simplification" (formula "1"))
                        (rule "elementOfSingleton" (formula "1") (term "0,0,0"))
                         (builtin "One Step Simplification" (formula "1"))
                        (rule "pullOutSelect" (formula "3") (term "2,0") (inst "selectSK=java_util_Iterator_seq_2"))
                        (rule "simplifySelectOfAnonEQ" (formula "3") (ifseqformula "32"))
                         (builtin "One Step Simplification" (formula "3"))
                        (rule "elementOfSingleton" (formula "3") (term "0,0,0"))
                         (builtin "One Step Simplification" (formula "3"))
                        (rule "inEqSimp_and_subsumption3" (formula "21") (term "0,0,0"))
                        (rule "leq_literals" (formula "21") (term "0,1,0,0,0,0"))
                         (builtin "One Step Simplification" (formula "21"))
                        (rule "inEqSimp_and_subsumption3" (formula "22") (term "0,0,0"))
                        (rule "leq_literals" (formula "22") (term "0,1,0,0,0,0"))
                         (builtin "One Step Simplification" (formula "22"))
                        (rule "nnf_imp2or" (formula "18") (term "0"))
                        (rule "nnf_imp2or" (formula "17") (term "0"))
                        (rule "nnf_imp2or" (formula "21") (term "0"))
                        (rule "nnf_imp2or" (formula "22") (term "0"))
                        (rule "nnf_notAnd" (formula "18") (term "0,0"))
                        (rule "inEqSimp_notGeq" (formula "18") (term "1,0,0"))
                        (rule "mul_literals" (formula "18") (term "1,0,0,1,0,0"))
                        (rule "add_zero_right" (formula "18") (term "0,0,1,0,0"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "18") (term "1,0,0"))
                        (rule "mul_literals" (formula "18") (term "1,1,0,0"))
                        (rule "inEqSimp_notLeq" (formula "18") (term "0,0,0"))
                        (rule "polySimp_rightDist" (formula "18") (term "1,0,0,0,0,0"))
                        (rule "mul_literals" (formula "18") (term "0,1,0,0,0,0,0"))
                        (rule "polySimp_addAssoc" (formula "18") (term "0,0,0,0,0"))
                        (rule "add_literals" (formula "18") (term "0,0,0,0,0,0"))
                        (rule "add_zero_left" (formula "18") (term "0,0,0,0,0"))
                        (rule "inEqSimp_sepPosMonomial1" (formula "18") (term "0,0,0"))
                        (rule "polySimp_mulLiterals" (formula "18") (term "1,0,0,0"))
                        (rule "polySimp_elimOne" (formula "18") (term "1,0,0,0"))
                        (rule "nnf_notAnd" (formula "17") (term "0,0"))
                        (rule "inEqSimp_notLeq" (formula "17") (term "0,0,0"))
                        (rule "polySimp_rightDist" (formula "17") (term "1,0,0,0,0,0"))
                        (rule "mul_literals" (formula "17") (term "0,1,0,0,0,0,0"))
                        (rule "polySimp_addAssoc" (formula "17") (term "0,0,0,0,0"))
                        (rule "add_literals" (formula "17") (term "0,0,0,0,0,0"))
                        (rule "add_zero_left" (formula "17") (term "0,0,0,0,0"))
                        (rule "inEqSimp_sepPosMonomial1" (formula "17") (term "0,0,0"))
                        (rule "polySimp_mulLiterals" (formula "17") (term "1,0,0,0"))
                        (rule "polySimp_elimOne" (formula "17") (term "1,0,0,0"))
                        (rule "inEqSimp_notGeq" (formula "17") (term "1,0,0"))
                        (rule "times_zero_1" (formula "17") (term "1,0,0,1,0,0"))
                        (rule "add_zero_right" (formula "17") (term "0,0,1,0,0"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "17") (term "1,0,0"))
                        (rule "mul_literals" (formula "17") (term "1,1,0,0"))
                        (rule "nnf_notAnd" (formula "21") (term "0,0"))
                        (rule "inEqSimp_notLeq" (formula "21") (term "1,0,0"))
                        (rule "mul_literals" (formula "21") (term "1,0,0,1,0,0"))
                        (rule "add_literals" (formula "21") (term "0,0,1,0,0"))
                        (rule "inEqSimp_sepPosMonomial1" (formula "21") (term "1,0,0"))
                        (rule "mul_literals" (formula "21") (term "1,1,0,0"))
                        (rule "nnf_notAnd" (formula "22") (term "0,0"))
                        (rule "inEqSimp_notLeq" (formula "22") (term "1,0,0"))
                        (rule "mul_literals" (formula "22") (term "1,0,0,1,0,0"))
                        (rule "add_literals" (formula "22") (term "0,0,1,0,0"))
                        (rule "inEqSimp_sepPosMonomial1" (formula "22") (term "1,0,0"))
                        (rule "mul_literals" (formula "22") (term "1,1,0,0"))
                        (rule "nnf_notAnd" (formula "21") (term "0,0,0"))
                        (rule "inEqSimp_notGeq" (formula "21") (term "1,0,0,0"))
                        (rule "mul_literals" (formula "21") (term "1,0,0,1,0,0,0"))
                        (rule "add_zero_right" (formula "21") (term "0,0,1,0,0,0"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "21") (term "1,0,0,0"))
                        (rule "mul_literals" (formula "21") (term "1,1,0,0,0"))
                        (rule "inEqSimp_notLeq" (formula "21") (term "0,0,0,0"))
                        (rule "polySimp_rightDist" (formula "21") (term "1,0,0,0,0,0,0"))
                        (rule "mul_literals" (formula "21") (term "0,1,0,0,0,0,0,0"))
                        (rule "polySimp_addAssoc" (formula "21") (term "0,0,0,0,0,0"))
                        (rule "add_literals" (formula "21") (term "0,0,0,0,0,0,0"))
                        (rule "add_zero_left" (formula "21") (term "0,0,0,0,0,0"))
                        (rule "inEqSimp_sepPosMonomial1" (formula "21") (term "0,0,0,0"))
                        (rule "polySimp_mulLiterals" (formula "21") (term "1,0,0,0,0"))
                        (rule "polySimp_elimOne" (formula "21") (term "1,0,0,0,0"))
                        (rule "nnf_notAnd" (formula "22") (term "0,0,0"))
                        (rule "inEqSimp_notLeq" (formula "22") (term "0,0,0,0"))
                        (rule "polySimp_rightDist" (formula "22") (term "1,0,0,0,0,0,0"))
                        (rule "mul_literals" (formula "22") (term "0,1,0,0,0,0,0,0"))
                        (rule "polySimp_addAssoc" (formula "22") (term "0,0,0,0,0,0"))
                        (rule "add_literals" (formula "22") (term "0,0,0,0,0,0,0"))
                        (rule "add_zero_left" (formula "22") (term "0,0,0,0,0,0"))
                        (rule "inEqSimp_sepPosMonomial1" (formula "22") (term "0,0,0,0"))
                        (rule "polySimp_mulLiterals" (formula "22") (term "1,0,0,0,0"))
                        (rule "polySimp_elimOne" (formula "22") (term "1,0,0,0,0"))
                        (rule "inEqSimp_notGeq" (formula "22") (term "1,0,0,0"))
                        (rule "mul_literals" (formula "22") (term "1,0,0,1,0,0,0"))
                        (rule "add_zero_right" (formula "22") (term "0,0,1,0,0,0"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "22") (term "1,0,0,0"))
                        (rule "mul_literals" (formula "22") (term "1,1,0,0,0"))
                        (rule "commute_or_2" (formula "18") (term "0"))
                        (rule "commute_or" (formula "2") (term "0,1,0,0"))
                        (rule "commute_or" (formula "4") (term "0,1,0,0"))
                        (rule "commute_or" (formula "17") (term "0,0"))
                        (rule "cnf_rightDist" (formula "1") (term "0,0"))
                        (rule "commute_or_2" (formula "21") (term "0"))
                        (rule "commute_or_2" (formula "22") (term "0"))
                        (rule "commute_or" (formula "18") (term "0,0"))
                        (rule "commute_or_2" (formula "18") (term "0"))
                        (rule "commute_and" (formula "17") (term "0,0,1,0"))
                        (rule "commute_or_2" (formula "21") (term "0,0"))
                        (rule "commute_or_2" (formula "22") (term "0,0"))
                        (rule "commute_or" (formula "1") (term "0,0,0"))
                        (rule "commute_or" (formula "1") (term "1,0,0"))
                        (rule "commute_or" (formula "21") (term "0,0,0"))
                        (rule "commute_or_2" (formula "21") (term "0,0"))
                        (rule "commute_or_2" (formula "21") (term "0"))
                        (rule "commute_or" (formula "22") (term "0,0,0"))
                        (rule "commute_or_2" (formula "22") (term "0,0"))
                        (rule "commute_or_2" (formula "22") (term "0"))
                        (rule "seqGetAlphaCast" (formula "45") (term "0"))
                        (rule "castedGetAny" (formula "45") (term "0"))
                         (builtin "One Step Simplification" (formula "45"))
                        (rule "true_left" (formula "45"))
                        (rule "commute_and_2" (formula "17") (term "0,1,0"))
                        (rule "ifthenelse_split" (formula "3") (term "0"))
                        (branch " ¬(java.util.CollectionIterator)it = null ∧ ¬ (java.util.CollectionIterator)it.<created>@heap_Before_LOOP«anonHeapFunction» = TRUE TRUE"
                           (rule "andLeft" (formula "3"))
                           (rule "notLeft" (formula "3"))
                           (rule "notLeft" (formula "3"))
                           (rule "applyEqReverse" (formula "4") (term "2,0") (ifseqformula "3"))
                           (rule "hideAuxiliaryEq" (formula "3"))
                           (rule "replace_known_right" (formula "2") (term "1,0,1,0,0") (ifseqformula "47"))
                            (builtin "One Step Simplification" (formula "2") (ifInst ""  (formula "48")))
                           (rule "replace_known_right" (formula "3") (term "1,0,1,0,0") (ifseqformula "47"))
                            (builtin "One Step Simplification" (formula "3") (ifInst ""  (formula "48")))
                           (rule "replace_known_right" (formula "1") (term "0,0,0,0,0") (ifseqformula "48"))
                            (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "47")))
                           (rule "applyEqReverse" (formula "2") (term "2,0") (ifseqformula "1"))
                           (rule "hideAuxiliaryEq" (formula "1"))
                           (rule "ifthenelse_negated" (formula "2") (term "0"))
                           (rule "ifthenelse_negated" (formula "1") (term "0"))
                           (rule "seqGetAlphaCast" (formula "32") (term "0"))
                           (rule "castedGetAny" (formula "32") (term "0"))
                            (builtin "One Step Simplification" (formula "32"))
                           (rule "true_left" (formula "32"))
                           (rule "ex_pull_out3" (formula "15") (term "0"))
                           (rule "cnf_rightDist" (formula "15") (term "0,0"))
                           (rule "shift_paren_or" (formula "15") (term "1,0,0"))
                           (rule "cnf_rightDist" (formula "15") (term "0,0,0"))
                           (rule "commute_or_2" (formula "15") (term "0,0,0,0"))
                           (rule "shift_paren_or" (formula "15") (term "1,0,0,0"))
                           (rule "commute_or" (formula "15") (term "0,0,0,0,0"))
                           (rule "lenNonNegative" (formula "3") (term "0"))
                           (rule "inEqSimp_commuteLeq" (formula "3"))
                           (rule "inEqSimp_exactShadow3" (formula "3") (ifseqformula "4"))
                           (rule "mul_literals" (formula "3") (term "0,0"))
                           (rule "add_zero_left" (formula "3") (term "0"))
                           (rule "inEqSimp_sepPosMonomial1" (formula "3"))
                           (rule "mul_literals" (formula "3") (term "1"))
                           (rule "ifthenelse_split" (formula "2") (term "0"))
                           (branch " (java.util.CollectionIterator)it.<created>@anon_heap_next«anonHeapFunction» = TRUE TRUE"
                              (rule "applyEqReverse" (formula "5") (term "0,0") (ifseqformula "3"))
                              (rule "applyEqReverse" (formula "6") (term "0,0") (ifseqformula "3"))
                              (rule "hideAuxiliaryEq" (formula "3"))
                              (rule "replace_known_left" (formula "1") (term "0,0") (ifseqformula "2"))
                               (builtin "One Step Simplification" (formula "1"))
                              (rule "applyEqReverse" (formula "5") (term "1,1") (ifseqformula "1"))
                              (rule "applyEqReverse" (formula "3") (term "0") (ifseqformula "1"))
                              (rule "hideAuxiliaryEq" (formula "1"))
                              (rule "inEqSimp_exactShadow3" (formula "3") (ifseqformula "4"))
                              (rule "times_zero_1" (formula "3") (term "0,0"))
                              (rule "add_zero_left" (formula "3") (term "0"))
                              (rule "inEqSimp_sepPosMonomial1" (formula "3"))
                              (rule "mul_literals" (formula "3") (term "1"))
                              (rule "commute_and" (formula "16") (term "0,0,0"))
                              (rule "commute_and_2" (formula "16") (term "0,0"))
                              (rule "ineffectiveCast" (formula "46") (term "1,0,0") (ifseqformula "7"))
                              (rule "typeEqDerived2" (formula "7") (term "0") (ifseqformula "46"))
                               (builtin "One Step Simplification" (formula "7"))
                              (rule "true_left" (formula "7"))
                              (rule "applyEq" (formula "46") (term "1,0,0") (ifseqformula "45"))
                              (rule "applyEq" (formula "46") (term "1,0,1") (ifseqformula "45"))
                              (rule "applyEq" (formula "49") (term "0") (ifseqformula "45"))
                              (rule "applyEq" (formula "43") (term "1") (ifseqformula "45"))
                              (rule "applyEq" (formula "40") (term "2") (ifseqformula "45"))
                              (rule "lenNonNegative" (formula "3") (term "0"))
                              (rule "inEqSimp_commuteLeq" (formula "3"))
                              (rule "ineffectiveCast" (formula "46") (term "1,0") (ifseqformula "22"))
                              (rule "typeEqDerived2" (formula "23") (term "0") (ifseqformula "1"))
                               (builtin "One Step Simplification" (formula "23"))
                              (rule "true_left" (formula "23"))
                              (rule "applyEq" (formula "4") (term "1,0,0") (ifseqformula "1"))
                              (rule "applyEq" (formula "5") (term "1,0,0") (ifseqformula "1"))
                              (rule "applyEq" (formula "46") (term "1,0") (ifseqformula "1"))
                              (rule "close" (formula "46") (ifseqformula "14"))
                           )
                           (branch " (java.util.CollectionIterator)it.<created>@anon_heap_next«anonHeapFunction» = TRUE FALSE"
                              (rule "applyEqReverse" (formula "4") (term "0,0") (ifseqformula "2"))
                              (rule "applyEqReverse" (formula "5") (term "0,0") (ifseqformula "2"))
                              (rule "hideAuxiliaryEq" (formula "2"))
                              (rule "replace_known_right" (formula "1") (term "0,0") (ifseqformula "47"))
                               (builtin "One Step Simplification" (formula "1"))
                              (rule "applyEqReverse" (formula "2") (term "0") (ifseqformula "1"))
                              (rule "applyEqReverse" (formula "4") (term "1,1") (ifseqformula "1"))
                              (rule "hideAuxiliaryEq" (formula "1"))
                              (rule "inEqSimp_exactShadow3" (formula "2") (ifseqformula "3"))
                              (rule "mul_literals" (formula "2") (term "0,0"))
                              (rule "add_zero_left" (formula "2") (term "0"))
                              (rule "inEqSimp_sepPosMonomial1" (formula "2"))
                              (rule "mul_literals" (formula "2") (term "1"))
                              (rule "commute_and" (formula "15") (term "0,0,0"))
                              (rule "commute_and_2" (formula "15") (term "0,0"))
                              (rule "ineffectiveCast" (formula "43") (term "1") (ifseqformula "6"))
                              (rule "typeEqDerived2" (formula "6") (term "0") (ifseqformula "43"))
                               (builtin "One Step Simplification" (formula "6"))
                              (rule "true_left" (formula "6"))
                              (rule "applyEq" (formula "39") (term "2") (ifseqformula "42"))
                              (rule "applyEq" (formula "43") (term "1") (ifseqformula "42"))
                              (rule "applyEq" (formula "50") (term "0") (ifseqformula "42"))
                              (rule "applyEq" (formula "45") (term "1,0,1") (ifseqformula "42"))
                              (rule "applyEq" (formula "45") (term "1,0,0") (ifseqformula "42"))
                              (rule "lenNonNegative" (formula "2") (term "0"))
                              (rule "inEqSimp_commuteLeq" (formula "2"))
                              (rule "ineffectiveCast" (formula "45") (term "1,0") (ifseqformula "21"))
                              (rule "typeEqDerived2" (formula "22") (term "0") (ifseqformula "1"))
                               (builtin "One Step Simplification" (formula "22"))
                              (rule "true_left" (formula "22"))
                              (rule "applyEq" (formula "4") (term "1,1,1") (ifseqformula "1"))
                              (rule "applyEq" (formula "4") (term "1,0,0") (ifseqformula "1"))
                              (rule "applyEq" (formula "47") (term "0") (ifseqformula "1"))
                              (rule "applyEq" (formula "45") (term "1,0") (ifseqformula "1"))
                              (rule "applyEq" (formula "2") (term "1,0") (ifseqformula "1"))
                              (rule "applyEq" (formula "46") (term "1,0") (ifseqformula "1"))
                              (rule "close" (formula "46") (ifseqformula "13"))
                           )
                        )
                        (branch " ¬(java.util.CollectionIterator)it = null ∧ ¬ (java.util.CollectionIterator)it.<created>@heap_Before_LOOP«anonHeapFunction» = TRUE FALSE"
                           (rule "applyEqReverse" (formula "4") (term "2,0") (ifseqformula "3"))
                           (rule "hideAuxiliaryEq" (formula "3"))
                           (rule "seqGetAlphaCast" (formula "33") (term "0"))
                           (rule "castedGetAny" (formula "33") (term "0"))
                            (builtin "One Step Simplification" (formula "33"))
                           (rule "true_left" (formula "33"))
                           (rule "ex_pull_out3" (formula "16") (term "0"))
                           (rule "cnf_rightDist" (formula "16") (term "0,0"))
                           (rule "shift_paren_or" (formula "16") (term "1,0,0"))
                           (rule "cnf_rightDist" (formula "16") (term "0,0,0"))
                           (rule "commute_or_2" (formula "16") (term "0,0,0,0"))
                           (rule "shift_paren_or" (formula "16") (term "1,0,0,0"))
                           (rule "commute_or" (formula "16") (term "0,0,0,0,0"))
                           (rule "lenNonNegative" (formula "4") (term "0"))
                           (rule "inEqSimp_commuteLeq" (formula "4"))
                           (rule "inEqSimp_exactShadow3" (formula "4") (ifseqformula "5"))
                           (rule "times_zero_1" (formula "4") (term "0,0"))
                           (rule "add_zero_left" (formula "4") (term "0"))
                           (rule "inEqSimp_sepPosMonomial1" (formula "4"))
                           (rule "mul_literals" (formula "4") (term "1"))
                           (rule "ifthenelse_split" (formula "1") (term "0"))
                           (branch " ( ¬(java.util.CollectionIterator)it = null ∨ (java.util.CollectionIterator)it = it) ∧ ( (java.util.CollectionIterator)it = it ∨ ¬ (java.util.CollectionIterator)it.<created>@heap_Before_LOOP«anonHeapFunction» = TRUE) TRUE"
                              (rule "andLeft" (formula "1"))
                              (rule "applyEqReverse" (formula "4") (term "2,0") (ifseqformula "3"))
                              (rule "hideAuxiliaryEq" (formula "3"))
                              (rule "ifthenelse_split" (formula "4") (term "0"))
                              (branch " ¬(java.util.CollectionIterator)it = null ∧ ¬( (java.util.CollectionIterator)it.<created>@anon_heap_next«anonHeapFunction» = TRUE ∨ (java.util.CollectionIterator)it.<created>@heap_Before_LOOP«anonHeapFunction» = TRUE) TRUE"
                                 (rule "andLeft" (formula "4"))
                                 (rule "notLeft" (formula "4"))
                                 (rule "notLeft" (formula "4"))
                                 (rule "orRight" (formula "50"))
                                 (rule "applyEqReverse" (formula "6") (term "0,0") (ifseqformula "4"))
                                 (rule "applyEqReverse" (formula "7") (term "0,0") (ifseqformula "4"))
                                 (rule "hideAuxiliaryEq" (formula "4"))
                                 (rule "replace_known_right" (formula "3") (term "0,0,1,0,0") (ifseqformula "49"))
                                  (builtin "One Step Simplification" (formula "3") (ifInst ""  (formula "51")) (ifInst ""  (formula "50")))
                                 (rule "applyEqReverse" (formula "6") (term "1,1") (ifseqformula "3"))
                                 (rule "applyEqReverse" (formula "4") (term "0") (ifseqformula "3"))
                                 (rule "hideAuxiliaryEq" (formula "3"))
                                 (rule "replace_known_right" (formula "1") (term "0,0") (ifseqformula "50"))
                                  (builtin "One Step Simplification" (formula "1"))
                                 (rule "true_left" (formula "1"))
                                 (rule "replace_known_right" (formula "1") (term "0,1") (ifseqformula "48"))
                                  (builtin "One Step Simplification" (formula "1"))
                                 (rule "true_left" (formula "1"))
                                 (rule "replace_known_right" (formula "49") (term "0,0") (ifseqformula "48"))
                                  (builtin "One Step Simplification" (formula "49") (ifInst ""  (formula "47")))
                                 (rule "closeTrue" (formula "49"))
                              )
                              (branch " ¬(java.util.CollectionIterator)it = null ∧ ¬( (java.util.CollectionIterator)it.<created>@anon_heap_next«anonHeapFunction» = TRUE ∨ (java.util.CollectionIterator)it.<created>@heap_Before_LOOP«anonHeapFunction» = TRUE) FALSE"
                                 (rule "applyEqReverse" (formula "7") (term "0,0") (ifseqformula "4"))
                                 (rule "applyEqReverse" (formula "6") (term "0,0") (ifseqformula "4"))
                                 (rule "hideAuxiliaryEq" (formula "4"))
                                 (rule "replace_known_right" (formula "3") (term "0,0") (ifseqformula "49"))
                                  (builtin "One Step Simplification" (formula "3"))
                                 (rule "applyEqReverse" (formula "4") (term "0") (ifseqformula "3"))
                                 (rule "applyEqReverse" (formula "6") (term "1,1") (ifseqformula "3"))
                                 (rule "hideAuxiliaryEq" (formula "3"))
                                 (rule "inEqSimp_exactShadow3" (formula "4") (ifseqformula "5"))
                                 (rule "times_zero_1" (formula "4") (term "0,0"))
                                 (rule "add_zero_left" (formula "4") (term "0"))
                                 (rule "inEqSimp_sepPosMonomial1" (formula "4"))
                                 (rule "mul_literals" (formula "4") (term "1"))
                                 (rule "commute_and" (formula "17") (term "0,0,0"))
                                 (rule "commute_and_2" (formula "17") (term "0,0"))
                                 (rule "cut_direct" (formula "49") (term "0,0"))
                                 (branch "CUT: (java.util.CollectionIterator)it = null TRUE"
                                     (builtin "One Step Simplification" (formula "50"))
                                    (rule "false_right" (formula "50"))
                                    (rule "replace_known_left" (formula "2") (term "0,0") (ifseqformula "1"))
                                     (builtin "One Step Simplification" (formula "2"))
                                    (rule "typeEqDerived2" (formula "25") (term "0") (ifseqformula "2"))
                                     (builtin "One Step Simplification" (formula "25"))
                                    (rule "true_left" (formula "25"))
                                    (rule "replace_known_left" (formula "3") (term "0") (ifseqformula "2"))
                                     (builtin "One Step Simplification" (formula "3"))
                                    (rule "true_left" (formula "3"))
                                    (rule "replace_known_left" (formula "47") (term "0,0") (ifseqformula "1"))
                                     (builtin "One Step Simplification" (formula "47"))
                                    (rule "false_right" (formula "47"))
                                    (rule "applyEq" (formula "2") (term "0") (ifseqformula "1"))
                                    (rule "eqSymm" (formula "2"))
                                    (rule "close" (formula "54") (ifseqformula "2"))
                                 )
                                 (branch "CUT: (java.util.CollectionIterator)it = null FALSE"
                                     (builtin "One Step Simplification" (formula "50"))
                                    (rule "notRight" (formula "50"))
                                    (rule "replace_known_left" (formula "3") (term "0,1") (ifseqformula "1"))
                                     (builtin "One Step Simplification" (formula "3"))
                                    (rule "typeEqDerived2" (formula "25") (term "0") (ifseqformula "3"))
                                     (builtin "One Step Simplification" (formula "25"))
                                    (rule "true_left" (formula "25"))
                                    (rule "replace_known_right" (formula "2") (term "0,0") (ifseqformula "49"))
                                     (builtin "One Step Simplification" (formula "2") (ifInst ""  (formula "3")))
                                    (rule "true_left" (formula "2"))
                                    (rule "replace_known_right" (formula "47") (term "0,0") (ifseqformula "48"))
                                     (builtin "One Step Simplification" (formula "47") (ifInst ""  (formula "1")))
                                    (rule "false_right" (formula "47"))
                                    (rule "applyEq" (formula "1") (term "1,0") (ifseqformula "2"))
                                    (rule "applyEq" (formula "3") (term "1,0,0") (ifseqformula "1"))
                                    (rule "applyEq" (formula "4") (term "1,1,1") (ifseqformula "1"))
                                    (rule "applyEq" (formula "4") (term "1,0,0") (ifseqformula "1"))
                                    (rule "applyEq" (formula "46") (term "0") (ifseqformula "1"))
                                    (rule "applyEq" (formula "2") (term "1,0") (ifseqformula "1"))
                                    (rule "applyEq" (formula "4") (term "0,0") (ifseqformula "23"))
                                    (rule "applyEq" (formula "3") (term "0,0") (ifseqformula "23"))
                                    (rule "inEqSimp_contradInEq1" (formula "3") (ifseqformula "26"))
                                    (rule "andLeft" (formula "3"))
                                    (rule "inEqSimp_homoInEq1" (formula "3"))
                                    (rule "polySimp_mulComm0" (formula "3") (term "1,0"))
                                    (rule "polySimp_rightDist" (formula "3") (term "1,0"))
                                    (rule "mul_literals" (formula "3") (term "0,1,0"))
                                    (rule "polySimp_addAssoc" (formula "3") (term "0"))
                                    (rule "polySimp_addComm0" (formula "3") (term "0,0"))
                                    (rule "polySimp_pullOutFactor1b" (formula "3") (term "0"))
                                    (rule "add_literals" (formula "3") (term "1,1,0"))
                                    (rule "times_zero_1" (formula "3") (term "1,0"))
                                    (rule "add_zero_right" (formula "3") (term "0"))
                                    (rule "leq_literals" (formula "3"))
                                    (rule "closeFalse" (formula "3"))
                                 )
                              )
                           )
                           (branch " ( ¬(java.util.CollectionIterator)it = null ∨ (java.util.CollectionIterator)it = it) ∧ ( (java.util.CollectionIterator)it = it ∨ ¬ (java.util.CollectionIterator)it.<created>@heap_Before_LOOP«anonHeapFunction» = TRUE) FALSE"
                              (rule "applyEqReverse" (formula "2") (term "2,0") (ifseqformula "1"))
                              (rule "hideAuxiliaryEq" (formula "1"))
                              (rule "andRight" (formula "48"))
                              (branch
                                 (rule "orRight" (formula "48"))
                                 (rule "notRight" (formula "48"))
                                 (rule "replace_known_left" (formula "3") (term "0,0,0,0") (ifseqformula "1"))
                                  (builtin "One Step Simplification" (formula "3"))
                                 (rule "applyEqReverse" (formula "5") (term "0,0") (ifseqformula "3"))
                                 (rule "applyEqReverse" (formula "6") (term "0,0") (ifseqformula "3"))
                                 (rule "hideAuxiliaryEq" (formula "3"))
                                 (rule "replace_known_left" (formula "2") (term "0,0,0,0") (ifseqformula "1"))
                                  (builtin "One Step Simplification" (formula "2"))
                                 (rule "applyEqReverse" (formula "5") (term "1,1") (ifseqformula "2"))
                                 (rule "applyEqReverse" (formula "3") (term "0") (ifseqformula "2"))
                                 (rule "hideAuxiliaryEq" (formula "2"))
                                 (rule "replace_known_left" (formula "48") (term "0,0") (ifseqformula "1"))
                                  (builtin "One Step Simplification" (formula "48"))
                                 (rule "false_right" (formula "48"))
                                 (rule "applyEq" (formula "4") (term "1,1,1") (ifseqformula "1"))
                                 (rule "applyEq" (formula "2") (term "1,0") (ifseqformula "1"))
                                 (rule "applyEq" (formula "4") (term "1,0,0") (ifseqformula "1"))
                                 (rule "applyEq" (formula "47") (term "0") (ifseqformula "1"))
                                 (rule "eqSymm" (formula "47"))
                                 (rule "applyEq" (formula "3") (term "1,0,0") (ifseqformula "1"))
                                 (rule "inEqSimp_exactShadow3" (formula "3") (ifseqformula "4"))
                                 (rule "mul_literals" (formula "3") (term "0,0"))
                                 (rule "add_zero_left" (formula "3") (term "0"))
                                 (rule "inEqSimp_sepPosMonomial1" (formula "3"))
                                 (rule "mul_literals" (formula "3") (term "1"))
                                 (rule "commute_and" (formula "16") (term "0,0,0"))
                                 (rule "commute_and_2" (formula "16") (term "0,0"))
                                 (rule "ineffectiveCast" (formula "46") (term "1,0,1") (ifseqformula "7"))
                                 (rule "typeEqDerived2" (formula "7") (term "0") (ifseqformula "46"))
                                  (builtin "One Step Simplification" (formula "7"))
                                 (rule "true_left" (formula "7"))
                                 (rule "applyEq" (formula "46") (term "1,0,0") (ifseqformula "45"))
                                 (rule "applyEq" (formula "48") (term "0") (ifseqformula "45"))
                                 (rule "applyEq" (formula "43") (term "1") (ifseqformula "45"))
                                 (rule "applyEq" (formula "46") (term "1,0,1") (ifseqformula "45"))
                                 (rule "applyEq" (formula "40") (term "2") (ifseqformula "45"))
                                 (rule "lenNonNegative" (formula "4") (term "0"))
                                 (rule "inEqSimp_commuteLeq" (formula "4"))
                                 (rule "ineffectiveCast" (formula "1") (term "0") (ifseqformula "22"))
                                 (rule "typeEqDerived2" (formula "23") (term "0") (ifseqformula "1"))
                                  (builtin "One Step Simplification" (formula "23"))
                                 (rule "true_left" (formula "23"))
                                 (rule "applyEq" (formula "1") (term "0") (ifseqformula "2"))
                                 (rule "eqSymm" (formula "1"))
                                 (rule "close" (formula "52") (ifseqformula "1"))
                              )
                              (branch
                                 (rule "orRight" (formula "48"))
                                 (rule "notRight" (formula "49"))
                                 (rule "replace_known_left" (formula "3") (term "1,0,1,0,0") (ifseqformula "1"))
                                  (builtin "One Step Simplification" (formula "3"))
                                 (rule "applyEqReverse" (formula "5") (term "0,0") (ifseqformula "3"))
                                 (rule "applyEqReverse" (formula "6") (term "0,0") (ifseqformula "3"))
                                 (rule "hideAuxiliaryEq" (formula "3"))
                                 (rule "replace_known_left" (formula "2") (term "1,0,1,0,0") (ifseqformula "1"))
                                  (builtin "One Step Simplification" (formula "2"))
                                 (rule "applyEqReverse" (formula "3") (term "0") (ifseqformula "2"))
                                 (rule "applyEqReverse" (formula "5") (term "1,1") (ifseqformula "2"))
                                 (rule "hideAuxiliaryEq" (formula "2"))
                                 (rule "replace_known_left" (formula "48") (term "0,1") (ifseqformula "1"))
                                  (builtin "One Step Simplification" (formula "48"))
                                 (rule "false_right" (formula "48"))
                                 (rule "inEqSimp_exactShadow3" (formula "3") (ifseqformula "4"))
                                 (rule "mul_literals" (formula "3") (term "0,0"))
                                 (rule "add_zero_left" (formula "3") (term "0"))
                                 (rule "inEqSimp_sepPosMonomial1" (formula "3"))
                                 (rule "mul_literals" (formula "3") (term "1"))
                                 (rule "commute_and" (formula "16") (term "0,0,0"))
                                 (rule "commute_and_2" (formula "16") (term "0,0"))
                                 (rule "ineffectiveCast" (formula "46") (term "1,0,1") (ifseqformula "7"))
                                 (rule "typeEqDerived2" (formula "7") (term "0") (ifseqformula "46"))
                                  (builtin "One Step Simplification" (formula "7"))
                                 (rule "true_left" (formula "7"))
                                 (rule "applyEq" (formula "46") (term "1,0,1") (ifseqformula "45"))
                                 (rule "applyEq" (formula "49") (term "0") (ifseqformula "45"))
                                 (rule "applyEq" (formula "46") (term "1,0,0") (ifseqformula "45"))
                                 (rule "applyEq" (formula "43") (term "1") (ifseqformula "45"))
                                 (rule "applyEq" (formula "40") (term "2") (ifseqformula "45"))
                                 (rule "lenNonNegative" (formula "3") (term "0"))
                                 (rule "inEqSimp_commuteLeq" (formula "3"))
                                 (rule "ineffectiveCast" (formula "1") (term "1,0") (ifseqformula "22"))
                                 (rule "typeEqDerived2" (formula "23") (term "0") (ifseqformula "1"))
                                 (rule "close" (formula "47") (ifseqformula "1"))
                              )
                           )
                        )
                     )
                  )
                  (branch
                     (rule "wellFormedAnonEQ" (formula "50") (ifseqformula "42"))
                     (rule "wellFormedAnonEQ" (formula "50") (term "0") (ifseqformula "31"))
                     (rule "replace_known_left" (formula "50") (term "1") (ifseqformula "41"))
                      (builtin "One Step Simplification" (formula "50") (ifInst ""  (formula "5")) (ifInst ""  (formula "30")))
                     (rule "closeTrue" (formula "50"))
                  )
               )
               (branch "Null reference (it = null)"
                   (builtin "One Step Simplification" (formula "50") (ifInst ""  (formula "57")))
                  (rule "closeTrue" (formula "50"))
               )
            )
            (branch "Exceptional Post (addInputCol)"
                (builtin "One Step Simplification" (formula "36"))
                (builtin "One Step Simplification" (formula "37"))
               (rule "andLeft" (formula "36"))
               (rule "selectCreatedOfAnonAsFormulaEQ" (formula "37") (term "1,0") (ifseqformula "36"))
               (rule "selectCreatedOfAnonAsFormulaEQ" (formula "37") (term "0,1,0") (ifseqformula "25"))
               (rule "andLeft" (formula "37"))
               (rule "andLeft" (formula "37"))
               (rule "andLeft" (formula "39"))
               (rule "notLeft" (formula "37"))
               (rule "close" (formula "40") (ifseqformula "39"))
            )
            (branch "Pre (addInputCol)"
                (builtin "One Step Simplification" (formula "35") (ifInst ""  (formula "38")) (ifInst ""  (formula "37")) (ifInst ""  (formula "38")) (ifInst ""  (formula "37")))
               (rule "andRight" (formula "35"))
               (branch "Case 1"
                  (rule "andRight" (formula "35"))
                  (branch "Case 1"
                     (rule "impLeft" (formula "27") (userinteraction))
                     (branch "Case 1"
                        (rule "replace_known_right" (formula "27") (term "0") (ifseqformula "34"))
                         (builtin "One Step Simplification" (formula "27"))
                        (rule "true_left" (formula "27"))
                        (rule "replace_known_right" (formula "27") (term "0") (ifseqformula "33"))
                         (builtin "One Step Simplification" (formula "27"))
                        (rule "true_left" (formula "27"))
                        (rule "replace_known_right" (formula "22") (term "1") (ifseqformula "32"))
                         (builtin "One Step Simplification" (formula "22"))
                        (rule "notLeft" (formula "22"))
                        (rule "castedGetAny" (formula "33") (term "0,1,0"))
                        (rule "inEqSimp_ltRight" (formula "32"))
                        (rule "polySimp_mulComm0" (formula "1") (term "0,0"))
                        (rule "polySimp_addComm0" (formula "1") (term "0"))
                        (rule "inEqSimp_ltToLeq" (formula "10") (term "0,0,0"))
                        (rule "polySimp_mulComm0" (formula "10") (term "1,0,0,0,0,0"))
                        (rule "inEqSimp_ltToLeq" (formula "14") (term "0,0,0,0,0"))
                        (rule "polySimp_mulComm0" (formula "14") (term "1,0,0,0,0,0,0,0"))
                        (rule "inEqSimp_ltToLeq" (formula "18") (term "0,0,0"))
                        (rule "polySimp_mulComm0" (formula "18") (term "1,0,0,0,0,0"))
                        (rule "inEqSimp_ltToLeq" (formula "10") (term "0,0,0,1,0"))
                        (rule "polySimp_mulComm0" (formula "10") (term "1,0,0,0,0,0,1,0"))
                        (rule "inEqSimp_ltToLeq" (formula "33") (term "1,0,0"))
                        (rule "polySimp_mulComm0" (formula "33") (term "1,0,0,1,0,0"))
                        (rule "inEqSimp_ltToLeq" (formula "11") (term "0,0,0"))
                        (rule "polySimp_mulComm0" (formula "11") (term "1,0,0,0,0,0"))
                        (rule "inEqSimp_ltToLeq" (formula "13") (term "0,0,0,0,0"))
                        (rule "polySimp_mulComm0" (formula "13") (term "1,0,0,0,0,0,0,0"))
                        (rule "inEqSimp_commuteLeq" (formula "33") (term "0,0,0"))
                        (rule "applyEq" (formula "28") (term "0,0,0") (ifseqformula "19"))
                        (rule "applyEq" (formula "1") (term "0,1,0") (ifseqformula "17"))
                        (rule "applyEq" (formula "23") (term "3") (ifseqformula "3"))
                        (rule "applyEq" (formula "3") (term "1") (ifseqformula "20"))
                        (rule "close" (formula "32") (ifseqformula "3"))
                     )
                     (branch "Case 2"
                        (rule "applyEqReverse" (formula "35") (term "0,1,1,0") (ifseqformula "27") (userinteraction))
                        (rule "seqCastRemoveBeta" (formula "35") (term "1,1,0") (userinteraction))
                        (rule "instAll" (formula "35") (term "1,1,1,0") (ifseqformula "9") (userinteraction))
                        (rule "impLeft" (formula "1") (userinteraction))
                        (branch "Case 1"
                           (rule "andRight" (formula "35"))
                           (branch
                              (rule "polySimp_homoEq" (formula "29") (term "1"))
                              (rule "polySimp_addComm1" (formula "29") (term "0,1"))
                              (rule "castedGetAny" (formula "36") (term "0,1,0"))
                              (rule "inEqSimp_ltRight" (formula "35"))
                              (rule "polySimp_mulComm0" (formula "1") (term "0,0"))
                              (rule "polySimp_addComm0" (formula "1") (term "0"))
                              (rule "inEqSimp_ltToLeq" (formula "11") (term "0,0,0"))
                              (rule "polySimp_mulComm0" (formula "11") (term "1,0,0,0,0,0"))
                              (rule "inEqSimp_ltToLeq" (formula "10") (term "0,0,0"))
                              (rule "polySimp_mulComm0" (formula "10") (term "1,0,0,0,0,0"))
                              (rule "inEqSimp_ltToLeq" (formula "13") (term "0,0,0,0,0"))
                              (rule "polySimp_mulComm0" (formula "13") (term "1,0,0,0,0,0,0,0"))
                              (rule "inEqSimp_ltToLeq" (formula "18") (term "0,0,0"))
                              (rule "polySimp_mulComm0" (formula "18") (term "1,0,0,0,0,0"))
                              (rule "inEqSimp_ltToLeq" (formula "36") (term "1,0,0"))
                              (rule "polySimp_mulComm0" (formula "36") (term "1,0,0,1,0,0"))
                              (rule "inEqSimp_ltToLeq" (formula "29") (term "0"))
                              (rule "polySimp_mulComm0" (formula "29") (term "1,0,0,0"))
                              (rule "polySimp_addComm1" (formula "29") (term "0,0"))
                              (rule "inEqSimp_ltToLeq" (formula "30") (term "0"))
                              (rule "polySimp_mulComm0" (formula "30") (term "1,0,0,0"))
                              (rule "polySimp_addComm1" (formula "30") (term "0,0"))
                              (rule "inEqSimp_ltToLeq" (formula "23") (term "1"))
                              (rule "polySimp_mulComm0" (formula "23") (term "1,0,0,1"))
                              (rule "polySimp_addComm1" (formula "23") (term "0,1"))
                              (rule "inEqSimp_ltToLeq" (formula "10") (term "0,0,0,1,0"))
                              (rule "polySimp_mulComm0" (formula "10") (term "1,0,0,0,0,0,1,0"))
                              (rule "inEqSimp_ltToLeq" (formula "14") (term "0,0,0,0,0"))
                              (rule "polySimp_mulComm0" (formula "14") (term "1,0,0,0,0,0,0,0"))
                              (rule "inEqSimp_commuteLeq" (formula "36") (term "0,0,0"))
                              (rule "applyEq" (formula "23") (term "0,0,1,0,1") (ifseqformula "19"))
                              (rule "applyEq" (formula "18") (term "0,0,1,0,0,0,0,0") (ifseqformula "19"))
                              (rule "applyEq" (formula "32") (term "0,0") (ifseqformula "17"))
                              (rule "applyEq" (formula "28") (term "0,0") (ifseqformula "19"))
                              (rule "applyEq" (formula "29") (term "0,0,1,0,0") (ifseqformula "19"))
                              (rule "applyEq" (formula "30") (term "0,1,0,0") (ifseqformula "17"))
                              (rule "applyEq" (formula "18") (term "0,0,1,0") (ifseqformula "19"))
                               (builtin "One Step Simplification" (formula "18"))
                              (rule "true_left" (formula "18"))
                              (rule "applyEq" (formula "30") (term "0,0") (ifseqformula "17"))
                              (rule "applyEq" (formula "17") (term "0,0") (ifseqformula "18"))
                               (builtin "One Step Simplification" (formula "17"))
                              (rule "true_left" (formula "17"))
                              (rule "applyEq" (formula "22") (term "3") (ifseqformula "3"))
                              (rule "applyEq" (formula "22") (term "4") (ifseqformula "20"))
                              (rule "applyEq" (formula "34") (term "0,1,1,0") (ifseqformula "17"))
                              (rule "applyEq" (formula "21") (term "0,0") (ifseqformula "3"))
                              (rule "replace_known_left" (formula "21") (term "0") (ifseqformula "18"))
                               (builtin "One Step Simplification" (formula "21"))
                              (rule "replace_known_left" (formula "27") (term "0") (ifseqformula "21"))
                               (builtin "One Step Simplification" (formula "27"))
                              (rule "notLeft" (formula "27"))
                              (rule "replace_known_left" (formula "27") (term "0") (ifseqformula "21"))
                               (builtin "One Step Simplification" (formula "27"))
                              (rule "replace_known_right" (formula "2") (term "0") (ifseqformula "33"))
                               (builtin "One Step Simplification" (formula "2"))
                              (rule "replace_known_right" (formula "25") (term "0,0") (ifseqformula "33"))
                               (builtin "One Step Simplification" (formula "25"))
                              (rule "replace_known_right" (formula "28") (term "1") (ifseqformula "33"))
                               (builtin "One Step Simplification" (formula "28"))
                              (rule "notLeft" (formula "28"))
                              (rule "replace_known_right" (formula "28") (term "0") (ifseqformula "32"))
                               (builtin "One Step Simplification" (formula "28"))
                              (rule "true_left" (formula "28"))
                              (rule "applyEq" (formula "30") (term "4") (ifseqformula "29"))
                              (rule "applyEq" (formula "3") (term "1") (ifseqformula "18"))
                              (rule "applyEq" (formula "22") (term "3") (ifseqformula "18"))
                              (rule "applyEq" (formula "14") (term "0,1,0,0,0,0,0,0,0") (ifseqformula "12"))
                              (rule "polySimp_sepPosMonomial" (formula "27"))
                              (rule "polySimp_mulComm0" (formula "27") (term "1"))
                              (rule "polySimp_rightDist" (formula "27") (term "1"))
                              (rule "polySimp_mulLiterals" (formula "27") (term "1,1"))
                              (rule "mul_literals" (formula "27") (term "0,1"))
                              (rule "polySimp_elimOne" (formula "27") (term "1,1"))
                              (rule "applyEq" (formula "26") (term "1,0") (ifseqformula "27"))
                              (rule "applyEq" (formula "1") (term "0,0") (ifseqformula "27"))
                              (rule "applyEq" (formula "33") (term "1,1,1,0") (ifseqformula "27"))
                              (rule "applyEq" (formula "31") (term "1") (ifseqformula "27"))
                              (rule "applyEq" (formula "21") (term "1,0,0") (ifseqformula "27"))
                              (rule "polySimp_addAssoc" (formula "21") (term "0,0"))
                              (rule "add_literals" (formula "21") (term "0,0,0"))
                              (rule "add_zero_left" (formula "21") (term "0,0"))
                              (rule "inEqSimp_sepPosMonomial0" (formula "11") (term "0,0,0"))
                              (rule "polySimp_mulComm0" (formula "11") (term "1,0,0,0"))
                              (rule "polySimp_rightDist" (formula "11") (term "1,0,0,0"))
                              (rule "polySimp_mulLiterals" (formula "11") (term "1,1,0,0,0"))
                              (rule "mul_literals" (formula "11") (term "0,1,0,0,0"))
                              (rule "polySimp_elimOne" (formula "11") (term "1,1,0,0,0"))
                              (rule "inEqSimp_sepPosMonomial0" (formula "10") (term "0,0,0"))
                              (rule "polySimp_mulComm0" (formula "10") (term "1,0,0,0"))
                              (rule "polySimp_rightDist" (formula "10") (term "1,0,0,0"))
                              (rule "polySimp_mulLiterals" (formula "10") (term "1,1,0,0,0"))
                              (rule "mul_literals" (formula "10") (term "0,1,0,0,0"))
                              (rule "polySimp_elimOne" (formula "10") (term "1,1,0,0,0"))
                              (rule "inEqSimp_sepPosMonomial0" (formula "13") (term "0,0,0,0,0"))
                              (rule "polySimp_mulComm0" (formula "13") (term "1,0,0,0,0,0"))
                              (rule "polySimp_rightDist" (formula "13") (term "1,0,0,0,0,0"))
                              (rule "polySimp_mulLiterals" (formula "13") (term "1,1,0,0,0,0,0"))
                              (rule "mul_literals" (formula "13") (term "0,1,0,0,0,0,0"))
                              (rule "polySimp_elimOne" (formula "13") (term "1,1,0,0,0,0,0"))
                              (rule "inEqSimp_sepPosMonomial0" (formula "33") (term "1,0,0"))
                              (rule "polySimp_mulComm0" (formula "33") (term "1,1,0,0"))
                              (rule "polySimp_rightDist" (formula "33") (term "1,1,0,0"))
                              (rule "mul_literals" (formula "33") (term "0,1,1,0,0"))
                              (rule "polySimp_mulLiterals" (formula "33") (term "1,1,1,0,0"))
                              (rule "polySimp_elimOne" (formula "33") (term "1,1,1,0,0"))
                              (rule "inEqSimp_sepPosMonomial0" (formula "10") (term "0,0,0,1,0"))
                              (rule "polySimp_mulComm0" (formula "10") (term "1,0,0,0,1,0"))
                              (rule "polySimp_rightDist" (formula "10") (term "1,0,0,0,1,0"))
                              (rule "mul_literals" (formula "10") (term "0,1,0,0,0,1,0"))
                              (rule "polySimp_mulLiterals" (formula "10") (term "1,1,0,0,0,1,0"))
                              (rule "polySimp_elimOne" (formula "10") (term "1,1,0,0,0,1,0"))
                              (rule "inEqSimp_sepPosMonomial0" (formula "14") (term "0,0,0,0,0"))
                              (rule "polySimp_mulComm0" (formula "14") (term "1,0,0,0,0,0"))
                              (rule "polySimp_rightDist" (formula "14") (term "1,0,0,0,0,0"))
                              (rule "mul_literals" (formula "14") (term "0,1,0,0,0,0,0"))
                              (rule "polySimp_mulLiterals" (formula "14") (term "1,1,0,0,0,0,0"))
                              (rule "polySimp_elimOne" (formula "14") (term "1,1,0,0,0,0,0"))
                              (rule "inEqSimp_sepNegMonomial1" (formula "1"))
                              (rule "polySimp_mulLiterals" (formula "1") (term "0"))
                              (rule "polySimp_elimOne" (formula "1") (term "0"))
                              (rule "inEqSimp_sepNegMonomial0" (formula "21"))
                              (rule "polySimp_mulLiterals" (formula "21") (term "0"))
                              (rule "polySimp_elimOne" (formula "21") (term "0"))
                              (rule "inEqSimp_contradEq7" (formula "31") (ifseqformula "21"))
                              (rule "polySimp_rightDist" (formula "31") (term "1,0,0"))
                              (rule "mul_literals" (formula "31") (term "0,1,0,0"))
                              (rule "polySimp_addAssoc" (formula "31") (term "0,0"))
                              (rule "polySimp_addComm0" (formula "31") (term "0,0,0"))
                              (rule "polySimp_pullOutFactor1b" (formula "31") (term "0,0"))
                              (rule "add_literals" (formula "31") (term "1,1,0,0"))
                              (rule "times_zero_1" (formula "31") (term "1,0,0"))
                              (rule "add_literals" (formula "31") (term "0,0"))
                              (rule "leq_literals" (formula "31") (term "0"))
                               (builtin "One Step Simplification" (formula "31"))
                              (rule "false_right" (formula "31"))
                              (rule "inEqSimp_contradInEq0" (formula "21") (ifseqformula "1"))
                              (rule "andLeft" (formula "21"))
                              (rule "inEqSimp_homoInEq1" (formula "21"))
                              (rule "polySimp_mulComm0" (formula "21") (term "1,0"))
                              (rule "polySimp_rightDist" (formula "21") (term "1,0"))
                              (rule "mul_literals" (formula "21") (term "0,1,0"))
                              (rule "polySimp_addAssoc" (formula "21") (term "0"))
                              (rule "polySimp_addComm0" (formula "21") (term "0,0"))
                              (rule "polySimp_pullOutFactor1b" (formula "21") (term "0"))
                              (rule "add_literals" (formula "21") (term "1,1,0"))
                              (rule "times_zero_1" (formula "21") (term "1,0"))
                              (rule "add_literals" (formula "21") (term "0"))
                              (rule "leq_literals" (formula "21"))
                              (rule "closeFalse" (formula "21"))
                           )
                           (branch
                              (rule "polySimp_homoEq" (formula "29") (term "1"))
                              (rule "polySimp_addComm1" (formula "29") (term "0,1"))
                              (rule "castedGetAny" (formula "36") (term "0,1,0"))
                              (rule "inEqSimp_geqRight" (formula "35"))
                              (rule "mul_literals" (formula "1") (term "1,0,0"))
                              (rule "add_zero_right" (formula "1") (term "0,0"))
                              (rule "inEqSimp_ltToLeq" (formula "30") (term "0"))
                              (rule "polySimp_mulComm0" (formula "30") (term "1,0,0,0"))
                              (rule "polySimp_addComm1" (formula "30") (term "0,0"))
                              (rule "inEqSimp_ltToLeq" (formula "36") (term "1,0,0"))
                              (rule "polySimp_mulComm0" (formula "36") (term "1,0,0,1,0,0"))
                              (rule "inEqSimp_ltToLeq" (formula "10") (term "0,0,0"))
                              (rule "polySimp_mulComm0" (formula "10") (term "1,0,0,0,0,0"))
                              (rule "inEqSimp_ltToLeq" (formula "13") (term "0,0,0,0,0"))
                              (rule "polySimp_mulComm0" (formula "13") (term "1,0,0,0,0,0,0,0"))
                              (rule "inEqSimp_ltToLeq" (formula "23") (term "1"))
                              (rule "polySimp_mulComm0" (formula "23") (term "1,0,0,1"))
                              (rule "polySimp_addComm1" (formula "23") (term "0,1"))
                              (rule "inEqSimp_ltToLeq" (formula "11") (term "0,0,0"))
                              (rule "polySimp_mulComm0" (formula "11") (term "1,0,0,0,0,0"))
                              (rule "inEqSimp_ltToLeq" (formula "14") (term "0,0,0,0,0"))
                              (rule "polySimp_mulComm0" (formula "14") (term "1,0,0,0,0,0,0,0"))
                              (rule "inEqSimp_ltToLeq" (formula "29") (term "0"))
                              (rule "polySimp_mulComm0" (formula "29") (term "1,0,0,0"))
                              (rule "polySimp_addComm1" (formula "29") (term "0,0"))
                              (rule "inEqSimp_ltToLeq" (formula "18") (term "0,0,0"))
                              (rule "polySimp_mulComm0" (formula "18") (term "1,0,0,0,0,0"))
                              (rule "inEqSimp_ltToLeq" (formula "10") (term "0,0,0,1,0"))
                              (rule "polySimp_mulComm0" (formula "10") (term "1,0,0,0,0,0,1,0"))
                              (rule "inEqSimp_commuteLeq" (formula "36") (term "0,0,0"))
                              (rule "applyEq" (formula "18") (term "0,0,1,0,0,0,0,0") (ifseqformula "19"))
                              (rule "applyEq" (formula "29") (term "0,0,1,0,0") (ifseqformula "19"))
                              (rule "applyEq" (formula "35") (term "4") (ifseqformula "34"))
                              (rule "applyEq" (formula "3") (term "1") (ifseqformula "20"))
                              (rule "replace_known_left" (formula "23") (term "0") (ifseqformula "3"))
                               (builtin "One Step Simplification" (formula "23"))
                              (rule "replace_known_left" (formula "30") (term "0") (ifseqformula "23"))
                               (builtin "One Step Simplification" (formula "30"))
                              (rule "applyEq" (formula "32") (term "0,0") (ifseqformula "17"))
                              (rule "applyEq" (formula "36") (term "0,1,1,0") (ifseqformula "19"))
                              (rule "applyEq" (formula "31") (term "0,0,0") (ifseqformula "19"))
                              (rule "applyEq" (formula "18") (term "0,0,1,0") (ifseqformula "19"))
                               (builtin "One Step Simplification" (formula "18"))
                              (rule "true_left" (formula "18"))
                              (rule "applyEq" (formula "23") (term "4") (ifseqformula "21"))
                              (rule "applyEq" (formula "27") (term "0,0") (ifseqformula "18"))
                              (rule "applyEq" (formula "17") (term "0,0") (ifseqformula "18"))
                               (builtin "One Step Simplification" (formula "17"))
                              (rule "true_left" (formula "17"))
                              (rule "applyEq" (formula "14") (term "0,1,0,0,0,0,0,0,0") (ifseqformula "12"))
                              (rule "applyEq" (formula "22") (term "3") (ifseqformula "3"))
                              (rule "applyEq" (formula "21") (term "0,0,1,0") (ifseqformula "17"))
                              (rule "replace_known_left" (formula "27") (term "0") (ifseqformula "21"))
                               (builtin "One Step Simplification" (formula "27"))
                              (rule "notLeft" (formula "27"))
                              (rule "replace_known_right" (formula "2") (term "0") (ifseqformula "33"))
                               (builtin "One Step Simplification" (formula "2"))
                              (rule "replace_known_right" (formula "25") (term "0,0") (ifseqformula "33"))
                               (builtin "One Step Simplification" (formula "25"))
                              (rule "replace_known_right" (formula "28") (term "1") (ifseqformula "33"))
                               (builtin "One Step Simplification" (formula "28"))
                              (rule "notLeft" (formula "28"))
                              (rule "replace_known_right" (formula "28") (term "0") (ifseqformula "32"))
                               (builtin "One Step Simplification" (formula "28"))
                              (rule "true_left" (formula "28"))
                              (rule "polySimp_sepPosMonomial" (formula "27"))
                              (rule "polySimp_mulComm0" (formula "27") (term "1"))
                              (rule "polySimp_rightDist" (formula "27") (term "1"))
                              (rule "mul_literals" (formula "27") (term "0,1"))
                              (rule "polySimp_mulLiterals" (formula "27") (term "1,1"))
                              (rule "polySimp_elimOne" (formula "27") (term "1,1"))
                              (rule "applyEq" (formula "1") (term "1,0") (ifseqformula "27"))
                              (rule "polySimp_addAssoc" (formula "1") (term "0"))
                              (rule "add_literals" (formula "1") (term "0,0"))
                              (rule "add_zero_left" (formula "1") (term "0"))
                              (rule "applyEq" (formula "26") (term "1,0") (ifseqformula "27"))
                              (rule "applyEq" (formula "21") (term "1,0,0") (ifseqformula "27"))
                              (rule "polySimp_addAssoc" (formula "21") (term "0,0"))
                              (rule "add_literals" (formula "21") (term "0,0,0"))
                              (rule "add_zero_left" (formula "21") (term "0,0"))
                              (rule "applyEq" (formula "31") (term "1") (ifseqformula "27"))
                              (rule "applyEq" (formula "33") (term "1,1,1,0") (ifseqformula "27"))
                              (rule "inEqSimp_sepPosMonomial0" (formula "33") (term "1,0,0"))
                              (rule "polySimp_mulComm0" (formula "33") (term "1,1,0,0"))
                              (rule "polySimp_rightDist" (formula "33") (term "1,1,0,0"))
                              (rule "polySimp_mulLiterals" (formula "33") (term "1,1,1,0,0"))
                              (rule "mul_literals" (formula "33") (term "0,1,1,0,0"))
                              (rule "polySimp_elimOne" (formula "33") (term "1,1,1,0,0"))
                              (rule "inEqSimp_sepPosMonomial0" (formula "10") (term "0,0,0"))
                              (rule "polySimp_mulComm0" (formula "10") (term "1,0,0,0"))
                              (rule "polySimp_rightDist" (formula "10") (term "1,0,0,0"))
                              (rule "mul_literals" (formula "10") (term "0,1,0,0,0"))
                              (rule "polySimp_mulLiterals" (formula "10") (term "1,1,0,0,0"))
                              (rule "polySimp_elimOne" (formula "10") (term "1,1,0,0,0"))
                              (rule "inEqSimp_sepPosMonomial0" (formula "13") (term "0,0,0,0,0"))
                              (rule "polySimp_mulComm0" (formula "13") (term "1,0,0,0,0,0"))
                              (rule "polySimp_rightDist" (formula "13") (term "1,0,0,0,0,0"))
                              (rule "mul_literals" (formula "13") (term "0,1,0,0,0,0,0"))
                              (rule "polySimp_mulLiterals" (formula "13") (term "1,1,0,0,0,0,0"))
                              (rule "polySimp_elimOne" (formula "13") (term "1,1,0,0,0,0,0"))
                              (rule "inEqSimp_sepPosMonomial0" (formula "11") (term "0,0,0"))
                              (rule "polySimp_mulComm0" (formula "11") (term "1,0,0,0"))
                              (rule "polySimp_rightDist" (formula "11") (term "1,0,0,0"))
                              (rule "mul_literals" (formula "11") (term "0,1,0,0,0"))
                              (rule "polySimp_mulLiterals" (formula "11") (term "1,1,0,0,0"))
                              (rule "polySimp_elimOne" (formula "11") (term "1,1,0,0,0"))
                              (rule "inEqSimp_sepPosMonomial0" (formula "10") (term "0,0,0,1,0"))
                              (rule "polySimp_mulComm0" (formula "10") (term "1,0,0,0,1,0"))
                              (rule "polySimp_rightDist" (formula "10") (term "1,0,0,0,1,0"))
                              (rule "mul_literals" (formula "10") (term "0,1,0,0,0,1,0"))
                              (rule "polySimp_mulLiterals" (formula "10") (term "1,1,0,0,0,1,0"))
                              (rule "polySimp_elimOne" (formula "10") (term "1,1,0,0,0,1,0"))
                              (rule "inEqSimp_sepPosMonomial0" (formula "14") (term "0,0,0,0,0"))
                              (rule "polySimp_mulComm0" (formula "14") (term "1,0,0,0,0,0"))
                              (rule "polySimp_rightDist" (formula "14") (term "1,0,0,0,0,0"))
                              (rule "mul_literals" (formula "14") (term "0,1,0,0,0,0,0"))
                              (rule "polySimp_mulLiterals" (formula "14") (term "1,1,0,0,0,0,0"))
                              (rule "polySimp_elimOne" (formula "14") (term "1,1,0,0,0,0,0"))
                              (rule "inEqSimp_sepNegMonomial0" (formula "21"))
                              (rule "polySimp_mulLiterals" (formula "21") (term "0"))
                              (rule "polySimp_elimOne" (formula "21") (term "0"))
                              (rule "inEqSimp_contradEq7" (formula "31") (ifseqformula "21"))
                              (rule "polySimp_rightDist" (formula "31") (term "1,0,0"))
                              (rule "mul_literals" (formula "31") (term "0,1,0,0"))
                              (rule "polySimp_addAssoc" (formula "31") (term "0,0"))
                              (rule "polySimp_addComm0" (formula "31") (term "0,0,0"))
                              (rule "polySimp_pullOutFactor1b" (formula "31") (term "0,0"))
                              (rule "add_literals" (formula "31") (term "1,1,0,0"))
                              (rule "times_zero_1" (formula "31") (term "1,0,0"))
                              (rule "add_literals" (formula "31") (term "0,0"))
                              (rule "leq_literals" (formula "31") (term "0"))
                               (builtin "One Step Simplification" (formula "31"))
                              (rule "false_right" (formula "31"))
                              (rule "pullOutSelect" (formula "32") (term "0,0,1,0") (inst "selectSK=org_apache_commons_csv_CSVRecord_key_seq_0"))
                              (rule "applyEq" (formula "33") (term "0,1,1,1,0,0") (ifseqformula "1"))
                              (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "25"))
                               (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "35")) (ifInst ""  (formula "8")))
                              (rule "elementOfSingleton" (formula "1") (term "0,0"))
                               (builtin "One Step Simplification" (formula "1"))
                              (rule "applyEqReverse" (formula "33") (term "0,1,1,1,0,0") (ifseqformula "1"))
                              (rule "applyEqReverse" (formula "33") (term "0,0,1,0") (ifseqformula "1"))
                              (rule "hideAuxiliaryEq" (formula "1"))
                              (rule "inEqSimp_and_subsumption3" (formula "13") (term "0,0,0"))
                              (rule "leq_literals" (formula "13") (term "0,1,0,0,0,0"))
                               (builtin "One Step Simplification" (formula "13"))
                              (rule "inEqSimp_and_subsumption3" (formula "14") (term "0,0,0"))
                              (rule "leq_literals" (formula "14") (term "0,1,0,0,0,0"))
                               (builtin "One Step Simplification" (formula "14"))
                              (rule "nnf_ex2all" (formula "32"))
                              (rule "nnf_imp2or" (formula "12") (term "0"))
                              (rule "nnf_imp2or" (formula "11") (term "0"))
                              (rule "nnf_imp2or" (formula "14") (term "0"))
                              (rule "nnf_imp2or" (formula "15") (term "0"))
                              (rule "nnf_notAnd" (formula "1") (term "0"))
                              (rule "nnf_notAnd" (formula "12") (term "0,0"))
                              (rule "inEqSimp_notLeq" (formula "12") (term "0,0,0"))
                              (rule "polySimp_rightDist" (formula "12") (term "1,0,0,0,0,0"))
                              (rule "mul_literals" (formula "12") (term "0,1,0,0,0,0,0"))
                              (rule "polySimp_addAssoc" (formula "12") (term "0,0,0,0,0"))
                              (rule "add_literals" (formula "12") (term "0,0,0,0,0,0"))
                              (rule "add_zero_left" (formula "12") (term "0,0,0,0,0"))
                              (rule "inEqSimp_sepPosMonomial1" (formula "12") (term "0,0,0"))
                              (rule "polySimp_mulLiterals" (formula "12") (term "1,0,0,0"))
                              (rule "polySimp_elimOne" (formula "12") (term "1,0,0,0"))
                              (rule "inEqSimp_notGeq" (formula "12") (term "1,0,0"))
                              (rule "mul_literals" (formula "12") (term "1,0,0,1,0,0"))
                              (rule "add_literals" (formula "12") (term "0,0,1,0,0"))
                              (rule "inEqSimp_sepPosMonomial0" (formula "12") (term "1,0,0"))
                              (rule "mul_literals" (formula "12") (term "1,1,0,0"))
                              (rule "nnf_notAnd" (formula "11") (term "0,0"))
                              (rule "inEqSimp_notGeq" (formula "11") (term "1,0,0"))
                              (rule "mul_literals" (formula "11") (term "1,0,0,1,0,0"))
                              (rule "add_literals" (formula "11") (term "0,0,1,0,0"))
                              (rule "inEqSimp_sepPosMonomial0" (formula "11") (term "1,0,0"))
                              (rule "mul_literals" (formula "11") (term "1,1,0,0"))
                              (rule "inEqSimp_notLeq" (formula "11") (term "0,0,0"))
                              (rule "polySimp_rightDist" (formula "11") (term "1,0,0,0,0,0"))
                              (rule "mul_literals" (formula "11") (term "0,1,0,0,0,0,0"))
                              (rule "polySimp_addAssoc" (formula "11") (term "0,0,0,0,0"))
                              (rule "add_literals" (formula "11") (term "0,0,0,0,0,0"))
                              (rule "add_zero_left" (formula "11") (term "0,0,0,0,0"))
                              (rule "inEqSimp_sepPosMonomial1" (formula "11") (term "0,0,0"))
                              (rule "polySimp_mulLiterals" (formula "11") (term "1,0,0,0"))
                              (rule "polySimp_elimOne" (formula "11") (term "1,0,0,0"))
                              (rule "nnf_notAnd" (formula "14") (term "0,0"))
                              (rule "inEqSimp_notLeq" (formula "14") (term "1,0,0"))
                              (rule "mul_literals" (formula "14") (term "1,0,0,1,0,0"))
                              (rule "add_literals" (formula "14") (term "0,0,1,0,0"))
                              (rule "inEqSimp_sepPosMonomial1" (formula "14") (term "1,0,0"))
                              (rule "mul_literals" (formula "14") (term "1,1,0,0"))
                              (rule "nnf_notAnd" (formula "15") (term "0,0"))
                              (rule "inEqSimp_notLeq" (formula "15") (term "1,0,0"))
                              (rule "mul_literals" (formula "15") (term "1,0,0,1,0,0"))
                              (rule "add_literals" (formula "15") (term "0,0,1,0,0"))
                              (rule "inEqSimp_sepPosMonomial1" (formula "15") (term "1,0,0"))
                              (rule "mul_literals" (formula "15") (term "1,1,0,0"))
                              (rule "nnf_notAnd" (formula "1") (term "0,0"))
                              (rule "inEqSimp_notLeq" (formula "1") (term "1,0,0"))
                              (rule "polySimp_rightDist" (formula "1") (term "1,0,0,1,0,0"))
                              (rule "mul_literals" (formula "1") (term "0,1,0,0,1,0,0"))
                              (rule "polySimp_addAssoc" (formula "1") (term "0,0,1,0,0"))
                              (rule "add_literals" (formula "1") (term "0,0,0,1,0,0"))
                              (rule "add_zero_left" (formula "1") (term "0,0,1,0,0"))
                              (rule "inEqSimp_sepPosMonomial1" (formula "1") (term "1,0,0"))
                              (rule "polySimp_mulLiterals" (formula "1") (term "1,1,0,0"))
                              (rule "polySimp_elimOne" (formula "1") (term "1,1,0,0"))
                              (rule "inEqSimp_notGeq" (formula "1") (term "0,0,0"))
                              (rule "mul_literals" (formula "1") (term "1,0,0,0,0,0"))
                              (rule "add_literals" (formula "1") (term "0,0,0,0,0"))
                              (rule "inEqSimp_sepPosMonomial0" (formula "1") (term "0,0,0"))
                              (rule "mul_literals" (formula "1") (term "1,0,0,0"))
                              (rule "nnf_notAnd" (formula "14") (term "0,0,0"))
                              (rule "inEqSimp_notGeq" (formula "14") (term "1,0,0,0"))
                              (rule "mul_literals" (formula "14") (term "1,0,0,1,0,0,0"))
                              (rule "add_literals" (formula "14") (term "0,0,1,0,0,0"))
                              (rule "inEqSimp_sepPosMonomial0" (formula "14") (term "1,0,0,0"))
                              (rule "mul_literals" (formula "14") (term "1,1,0,0,0"))
                              (rule "inEqSimp_notLeq" (formula "14") (term "0,0,0,0"))
                              (rule "polySimp_rightDist" (formula "14") (term "1,0,0,0,0,0,0"))
                              (rule "mul_literals" (formula "14") (term "0,1,0,0,0,0,0,0"))
                              (rule "polySimp_addAssoc" (formula "14") (term "0,0,0,0,0,0"))
                              (rule "add_literals" (formula "14") (term "0,0,0,0,0,0,0"))
                              (rule "add_zero_left" (formula "14") (term "0,0,0,0,0,0"))
                              (rule "inEqSimp_sepPosMonomial1" (formula "14") (term "0,0,0,0"))
                              (rule "polySimp_mulLiterals" (formula "14") (term "1,0,0,0,0"))
                              (rule "polySimp_elimOne" (formula "14") (term "1,0,0,0,0"))
                              (rule "nnf_notAnd" (formula "15") (term "0,0,0"))
                              (rule "inEqSimp_notLeq" (formula "15") (term "0,0,0,0"))
                              (rule "polySimp_rightDist" (formula "15") (term "1,0,0,0,0,0,0"))
                              (rule "mul_literals" (formula "15") (term "0,1,0,0,0,0,0,0"))
                              (rule "polySimp_addAssoc" (formula "15") (term "0,0,0,0,0,0"))
                              (rule "add_literals" (formula "15") (term "0,0,0,0,0,0,0"))
                              (rule "add_zero_left" (formula "15") (term "0,0,0,0,0,0"))
                              (rule "inEqSimp_sepPosMonomial1" (formula "15") (term "0,0,0,0"))
                              (rule "polySimp_mulLiterals" (formula "15") (term "1,0,0,0,0"))
                              (rule "polySimp_elimOne" (formula "15") (term "1,0,0,0,0"))
                              (rule "inEqSimp_notGeq" (formula "15") (term "1,0,0,0"))
                              (rule "mul_literals" (formula "15") (term "1,0,0,1,0,0,0"))
                              (rule "add_literals" (formula "15") (term "0,0,1,0,0,0"))
                              (rule "inEqSimp_sepPosMonomial0" (formula "15") (term "1,0,0,0"))
                              (rule "mul_literals" (formula "15") (term "1,1,0,0,0"))
                              (rule "commute_or_2" (formula "12") (term "0"))
                              (rule "commute_or" (formula "11") (term "0,0"))
                              (rule "commute_or_2" (formula "1") (term "0"))
                              (rule "commute_or_2" (formula "14") (term "0"))
                              (rule "commute_or_2" (formula "15") (term "0"))
                              (rule "commute_and" (formula "11") (term "0,0,1,0"))
                              (rule "commute_or" (formula "12") (term "0,0"))
                              (rule "commute_or_2" (formula "12") (term "0"))
                              (rule "commute_or" (formula "1") (term "0,0"))
                              (rule "commute_or_2" (formula "14") (term "0,0"))
                              (rule "commute_or_2" (formula "15") (term "0,0"))
                              (rule "commute_or" (formula "14") (term "0,0,0"))
                              (rule "commute_or_2" (formula "14") (term "0,0"))
                              (rule "commute_or_2" (formula "14") (term "0"))
                              (rule "commute_or" (formula "15") (term "0,0,0"))
                              (rule "commute_or_2" (formula "15") (term "0,0"))
                              (rule "commute_or_2" (formula "15") (term "0"))
                              (rule "commute_and_2" (formula "11") (term "0,1,0"))
                              (rule "lenNonNegative" (formula "13") (term "0"))
                              (rule "inEqSimp_commuteLeq" (formula "13"))
                              (rule "applyEq" (formula "13") (term "0") (ifseqformula "14"))
                              (rule "lenNonNegative" (formula "14") (term "1"))
                              (rule "inEqSimp_commuteLeq" (formula "14"))
                              (rule "seqGetAlphaCast" (formula "28") (term "0"))
                              (rule "castedGetAny" (formula "28") (term "0"))
                               (builtin "One Step Simplification" (formula "28"))
                              (rule "true_left" (formula "28"))
                              (rule "ex_pull_out3" (formula "11") (term "0"))
                              (rule "cnf_rightDist" (formula "11") (term "0,0"))
                              (rule "shift_paren_or" (formula "11") (term "1,0,0"))
                              (rule "cnf_rightDist" (formula "11") (term "0,0,0"))
                              (rule "commute_or_2" (formula "11") (term "0,0,0,0"))
                              (rule "shift_paren_or" (formula "11") (term "1,0,0,0"))
                              (rule "commute_or" (formula "11") (term "0,0,0,0,0"))
                              (rule "lenNonNegative" (formula "23") (term "0"))
                              (rule "inEqSimp_commuteLeq" (formula "23"))
                              (rule "commute_and" (formula "11") (term "0,0,0"))
                              (rule "commute_and_2" (formula "11") (term "0,0"))
                              (rule "seqGetAlphaCast" (formula "1") (term "1,0,0,0,0"))
                              (rule "castedGetAny" (formula "1") (term "0"))
                               (builtin "One Step Simplification" (formula "1"))
                              (rule "true_left" (formula "1"))
                              (rule "cut_direct" (formula "28") (term "1"))
                              (branch "CUT: result_50.<created>@heap_Before_LOOP«anonHeapFunction» = TRUE TRUE"
                                  (builtin "One Step Simplification" (formula "29"))
                                 (rule "true_left" (formula "29"))
                                 (rule "Partial_inv_axiom_for_JML_class_invariant_nr_63_in_Iterator" (formula "17"))
                                 (rule "andLeft" (formula "17"))
                                 (rule "inEqSimp_commuteLeq" (formula "17"))
                                 (rule "inEqSimp_commuteLeq" (formula "18"))
                                 (rule "applyEq" (formula "17") (term "0") (ifseqformula "32"))
                                 (rule "applyEq" (formula "18") (term "1") (ifseqformula "32"))
                                 (rule "applyEq" (formula "18") (term "0,0") (ifseqformula "21"))
                                 (rule "inEqSimp_sepPosMonomial1" (formula "17"))
                                 (rule "mul_literals" (formula "17") (term "1"))
                                 (rule "inEqSimp_contradInEq1" (formula "2") (ifseqformula "17"))
                                 (rule "qeq_literals" (formula "2") (term "0"))
                                  (builtin "One Step Simplification" (formula "2"))
                                 (rule "closeFalse" (formula "2"))
                              )
                              (branch "CUT: result_50.<created>@heap_Before_LOOP«anonHeapFunction» = TRUE FALSE"
                                  (builtin "One Step Simplification" (formula "28"))
                                 (rule "Partial_inv_axiom_for_JML_class_invariant_nr_63_in_Iterator" (formula "17"))
                                 (rule "andLeft" (formula "17"))
                                 (rule "inEqSimp_commuteLeq" (formula "17"))
                                 (rule "inEqSimp_commuteLeq" (formula "18"))
                                 (rule "applyEq" (formula "18") (term "1") (ifseqformula "32"))
                                 (rule "applyEq" (formula "18") (term "0,0") (ifseqformula "21"))
                                 (rule "applyEq" (formula "17") (term "0") (ifseqformula "32"))
                                 (rule "inEqSimp_sepPosMonomial1" (formula "17"))
                                 (rule "mul_literals" (formula "17") (term "1"))
                                 (rule "inEqSimp_subsumption1" (formula "18") (ifseqformula "26"))
                                 (rule "inEqSimp_homoInEq0" (formula "18") (term "0"))
                                 (rule "polySimp_mulComm0" (formula "18") (term "1,0,0"))
                                 (rule "polySimp_rightDist" (formula "18") (term "1,0,0"))
                                 (rule "mul_literals" (formula "18") (term "0,1,0,0"))
                                 (rule "polySimp_addAssoc" (formula "18") (term "0,0"))
                                 (rule "polySimp_addComm0" (formula "18") (term "0,0,0"))
                                 (rule "polySimp_pullOutFactor1b" (formula "18") (term "0,0"))
                                 (rule "add_literals" (formula "18") (term "1,1,0,0"))
                                 (rule "times_zero_1" (formula "18") (term "1,0,0"))
                                 (rule "add_zero_right" (formula "18") (term "0,0"))
                                 (rule "qeq_literals" (formula "18") (term "0"))
                                  (builtin "One Step Simplification" (formula "18"))
                                 (rule "true_left" (formula "18"))
                                 (rule "inEqSimp_contradInEq1" (formula "2") (ifseqformula "17"))
                                 (rule "qeq_literals" (formula "2") (term "0"))
                                  (builtin "One Step Simplification" (formula "2"))
                                 (rule "closeFalse" (formula "2"))
                              )
                           )
                        )
                        (branch "Case 2"
                           (rule "exLeft" (formula "1") (inst "sk=i_0") (userinteraction))
                           (rule "instEx" (formula "1") (term "0,0,0") (ifseqformula "36") (userinteraction))
                           (rule "andRight" (formula "36"))
                           (branch
                              (rule "andRight" (formula "36"))
                              (branch
                                 (rule "andLeft" (formula "1"))
                                 (rule "andLeft" (formula "1"))
                                 (rule "eqSymm" (formula "2"))
                                 (rule "polySimp_homoEq" (formula "32") (term "1"))
                                 (rule "polySimp_addComm1" (formula "32") (term "0,1"))
                                 (rule "castedGetAny" (formula "39") (term "0,1,0"))
                                 (rule "inEqSimp_leqRight" (formula "38"))
                                 (rule "add_zero_right" (formula "1") (term "0"))
                                 (rule "polySimp_mulComm0" (formula "1") (term "1,0"))
                                 (rule "inEqSimp_ltToLeq" (formula "32") (term "0"))
                                 (rule "polySimp_mulComm0" (formula "32") (term "1,0,0,0"))
                                 (rule "polySimp_addComm1" (formula "32") (term "0,0"))
                                 (rule "inEqSimp_ltToLeq" (formula "33") (term "0"))
                                 (rule "polySimp_mulComm0" (formula "33") (term "1,0,0,0"))
                                 (rule "polySimp_addComm1" (formula "33") (term "0,0"))
                                 (rule "inEqSimp_ltToLeq" (formula "26") (term "1"))
                                 (rule "polySimp_mulComm0" (formula "26") (term "1,0,0,1"))
                                 (rule "polySimp_addComm1" (formula "26") (term "0,1"))
                                 (rule "inEqSimp_ltToLeq" (formula "13") (term "0,0,0,1,0"))
                                 (rule "polySimp_mulComm0" (formula "13") (term "1,0,0,0,0,0,1,0"))
                                 (rule "inEqSimp_ltToLeq" (formula "21") (term "0,0,0"))
                                 (rule "polySimp_mulComm0" (formula "21") (term "1,0,0,0,0,0"))
                                 (rule "inEqSimp_ltToLeq" (formula "14") (term "0,0,0"))
                                 (rule "polySimp_mulComm0" (formula "14") (term "1,0,0,0,0,0"))
                                 (rule "inEqSimp_ltToLeq" (formula "17") (term "0,0,0,0,0"))
                                 (rule "polySimp_mulComm0" (formula "17") (term "1,0,0,0,0,0,0,0"))
                                 (rule "inEqSimp_ltToLeq" (formula "16") (term "0,0,0,0,0"))
                                 (rule "polySimp_mulComm0" (formula "16") (term "1,0,0,0,0,0,0,0"))
                                 (rule "inEqSimp_ltToLeq" (formula "13") (term "0,0,0"))
                                 (rule "polySimp_mulComm0" (formula "13") (term "1,0,0,0,0,0"))
                                 (rule "inEqSimp_ltToLeq" (formula "39") (term "1,0,0"))
                                 (rule "polySimp_mulComm0" (formula "39") (term "1,0,0,1,0,0"))
                                 (rule "inEqSimp_ltToLeq" (formula "2"))
                                 (rule "polySimp_mulComm0" (formula "2") (term "1,0,0"))
                                 (rule "polySimp_addComm1" (formula "2") (term "0"))
                                 (rule "inEqSimp_commuteLeq" (formula "39") (term "0,0,0"))
                                 (rule "applyEq" (formula "20") (term "0,0") (ifseqformula "22"))
                                  (builtin "One Step Simplification" (formula "20"))
                                 (rule "true_left" (formula "20"))
                                 (rule "applyEq" (formula "20") (term "0,0,1,0,0,0,0,0") (ifseqformula "21"))
                                 (rule "applyEq" (formula "30") (term "0,0") (ifseqformula "21"))
                                 (rule "applyEq" (formula "31") (term "0,0,1,0,0") (ifseqformula "21"))
                                 (rule "applyEq" (formula "34") (term "0,0,0") (ifseqformula "21"))
                                 (rule "applyEq" (formula "32") (term "0,0,1,0,0") (ifseqformula "21"))
                                 (rule "applyEq" (formula "25") (term "0,0,1,0,1") (ifseqformula "21"))
                                 (rule "applyEq" (formula "26") (term "4") (ifseqformula "24"))
                                 (rule "applyEq" (formula "25") (term "0,0") (ifseqformula "6"))
                                 (rule "replace_known_left" (formula "25") (term "0") (ifseqformula "22"))
                                  (builtin "One Step Simplification" (formula "25"))
                                 (rule "replace_known_left" (formula "32") (term "0") (ifseqformula "25"))
                                  (builtin "One Step Simplification" (formula "32"))
                                 (rule "replace_known_left" (formula "31") (term "0") (ifseqformula "25"))
                                  (builtin "One Step Simplification" (formula "31"))
                                 (rule "notLeft" (formula "31"))
                                 (rule "replace_known_right" (formula "5") (term "0") (ifseqformula "37"))
                                  (builtin "One Step Simplification" (formula "5"))
                                 (rule "replace_known_right" (formula "29") (term "0,0") (ifseqformula "37"))
                                  (builtin "One Step Simplification" (formula "29"))
                                 (rule "replace_known_right" (formula "32") (term "1") (ifseqformula "37"))
                                  (builtin "One Step Simplification" (formula "32"))
                                 (rule "notLeft" (formula "32"))
                                 (rule "applyEq" (formula "38") (term "0,1,1,0") (ifseqformula "21"))
                                 (rule "applyEq" (formula "26") (term "3") (ifseqformula "6"))
                                 (rule "applyEq" (formula "35") (term "4") (ifseqformula "34"))
                                 (rule "applyEq" (formula "6") (term "1") (ifseqformula "22"))
                                 (rule "applyEq" (formula "20") (term "0,0,1,0") (ifseqformula "21"))
                                  (builtin "One Step Simplification" (formula "20"))
                                 (rule "true_left" (formula "20"))
                                 (rule "applyEq" (formula "17") (term "0,1,0,0,0,0,0,0,0") (ifseqformula "15"))
                                 (rule "applyEq" (formula "25") (term "3") (ifseqformula "21"))
                                 (rule "applyEq" (formula "35") (term "0,0") (ifseqformula "20"))
                                 (rule "replace_known_right" (formula "31") (term "0") (ifseqformula "35"))
                                  (builtin "One Step Simplification" (formula "31"))
                                 (rule "true_left" (formula "31"))
                                 (rule "polySimp_sepPosMonomial" (formula "30"))
                                 (rule "polySimp_mulComm0" (formula "30") (term "1"))
                                 (rule "polySimp_rightDist" (formula "30") (term "1"))
                                 (rule "mul_literals" (formula "30") (term "0,1"))
                                 (rule "polySimp_mulLiterals" (formula "30") (term "1,1"))
                                 (rule "polySimp_elimOne" (formula "30") (term "1,1"))
                                 (rule "applyEq" (formula "29") (term "1,0") (ifseqformula "30"))
                                 (rule "applyEq" (formula "3") (term "1,1") (ifseqformula "30"))
                                 (rule "applyEq" (formula "36") (term "1,1,1,0") (ifseqformula "30"))
                                 (rule "applyEq" (formula "34") (term "1") (ifseqformula "30"))
                                 (rule "applyEq" (formula "24") (term "1,0,0") (ifseqformula "30"))
                                 (rule "polySimp_addAssoc" (formula "24") (term "0,0"))
                                 (rule "add_literals" (formula "24") (term "0,0,0"))
                                 (rule "add_zero_left" (formula "24") (term "0,0"))
                                 (rule "inEqSimp_sepNegMonomial1" (formula "1"))
                                 (rule "polySimp_mulLiterals" (formula "1") (term "0"))
                                 (rule "polySimp_elimOne" (formula "1") (term "0"))
                                 (rule "inEqSimp_sepPosMonomial0" (formula "13") (term "0,0,0,1,0"))
                                 (rule "polySimp_mulComm0" (formula "13") (term "1,0,0,0,1,0"))
                                 (rule "polySimp_rightDist" (formula "13") (term "1,0,0,0,1,0"))
                                 (rule "polySimp_mulLiterals" (formula "13") (term "1,1,0,0,0,1,0"))
                                 (rule "mul_literals" (formula "13") (term "0,1,0,0,0,1,0"))
                                 (rule "polySimp_elimOne" (formula "13") (term "1,1,0,0,0,1,0"))
                                 (rule "inEqSimp_sepPosMonomial0" (formula "14") (term "0,0,0"))
                                 (rule "polySimp_mulComm0" (formula "14") (term "1,0,0,0"))
                                 (rule "polySimp_rightDist" (formula "14") (term "1,0,0,0"))
                                 (rule "polySimp_mulLiterals" (formula "14") (term "1,1,0,0,0"))
                                 (rule "mul_literals" (formula "14") (term "0,1,0,0,0"))
                                 (rule "polySimp_elimOne" (formula "14") (term "1,1,0,0,0"))
                                 (rule "inEqSimp_sepPosMonomial0" (formula "16") (term "0,0,0,0,0"))
                                 (rule "polySimp_mulComm0" (formula "16") (term "1,0,0,0,0,0"))
                                 (rule "polySimp_rightDist" (formula "16") (term "1,0,0,0,0,0"))
                                 (rule "mul_literals" (formula "16") (term "0,1,0,0,0,0,0"))
                                 (rule "polySimp_mulLiterals" (formula "16") (term "1,1,0,0,0,0,0"))
                                 (rule "polySimp_elimOne" (formula "16") (term "1,1,0,0,0,0,0"))
                                 (rule "inEqSimp_sepPosMonomial0" (formula "13") (term "0,0,0"))
                                 (rule "polySimp_mulComm0" (formula "13") (term "1,0,0,0"))
                                 (rule "polySimp_rightDist" (formula "13") (term "1,0,0,0"))
                                 (rule "mul_literals" (formula "13") (term "0,1,0,0,0"))
                                 (rule "polySimp_mulLiterals" (formula "13") (term "1,1,0,0,0"))
                                 (rule "polySimp_elimOne" (formula "13") (term "1,1,0,0,0"))
                                 (rule "inEqSimp_sepPosMonomial0" (formula "36") (term "1,0,0"))
                                 (rule "polySimp_mulComm0" (formula "36") (term "1,1,0,0"))
                                 (rule "polySimp_rightDist" (formula "36") (term "1,1,0,0"))
                                 (rule "mul_literals" (formula "36") (term "0,1,1,0,0"))
                                 (rule "polySimp_mulLiterals" (formula "36") (term "1,1,1,0,0"))
                                 (rule "polySimp_elimOne" (formula "36") (term "1,1,1,0,0"))
                                 (rule "inEqSimp_sepNegMonomial0" (formula "2"))
                                 (rule "polySimp_mulLiterals" (formula "2") (term "0"))
                                 (rule "polySimp_elimOne" (formula "2") (term "0"))
                                 (rule "inEqSimp_sepPosMonomial0" (formula "17") (term "0,0,0,0,0"))
                                 (rule "polySimp_mulComm0" (formula "17") (term "1,0,0,0,0,0"))
                                 (rule "polySimp_rightDist" (formula "17") (term "1,0,0,0,0,0"))
                                 (rule "mul_literals" (formula "17") (term "0,1,0,0,0,0,0"))
                                 (rule "polySimp_mulLiterals" (formula "17") (term "1,1,0,0,0,0,0"))
                                 (rule "polySimp_elimOne" (formula "17") (term "1,1,0,0,0,0,0"))
                                 (rule "inEqSimp_sepNegMonomial0" (formula "24"))
                                 (rule "polySimp_mulLiterals" (formula "24") (term "0"))
                                 (rule "polySimp_elimOne" (formula "24") (term "0"))
                                 (rule "inEqSimp_contradEq7" (formula "34") (ifseqformula "24"))
                                 (rule "polySimp_rightDist" (formula "34") (term "1,0,0"))
                                 (rule "mul_literals" (formula "34") (term "0,1,0,0"))
                                 (rule "polySimp_addAssoc" (formula "34") (term "0,0"))
                                 (rule "polySimp_addComm0" (formula "34") (term "0,0,0"))
                                 (rule "polySimp_pullOutFactor1b" (formula "34") (term "0,0"))
                                 (rule "add_literals" (formula "34") (term "1,1,0,0"))
                                 (rule "times_zero_1" (formula "34") (term "1,0,0"))
                                 (rule "add_literals" (formula "34") (term "0,0"))
                                 (rule "leq_literals" (formula "34") (term "0"))
                                  (builtin "One Step Simplification" (formula "34"))
                                 (rule "false_right" (formula "34"))
                                 (rule "inEqSimp_contradInEq0" (formula "4") (ifseqformula "1"))
                                 (rule "qeq_literals" (formula "4") (term "0"))
                                  (builtin "One Step Simplification" (formula "4"))
                                 (rule "closeFalse" (formula "4"))
                              )
                              (branch
                                 (rule "andLeft" (formula "1"))
                                 (rule "andLeft" (formula "1"))
                                 (rule "eqSymm" (formula "2"))
                                 (rule "polySimp_homoEq" (formula "32") (term "1"))
                                 (rule "polySimp_addComm1" (formula "32") (term "0,1"))
                                 (rule "castedGetAny" (formula "39") (term "0,1,0"))
                                 (rule "inEqSimp_ltRight" (formula "38"))
                                 (rule "polySimp_mulComm0" (formula "1") (term "0,0"))
                                 (rule "polySimp_addComm0" (formula "1") (term "0"))
                                 (rule "inEqSimp_ltToLeq" (formula "17") (term "0,0,0,0,0"))
                                 (rule "polySimp_mulComm0" (formula "17") (term "1,0,0,0,0,0,0,0"))
                                 (rule "inEqSimp_ltToLeq" (formula "21") (term "0,0,0"))
                                 (rule "polySimp_mulComm0" (formula "21") (term "1,0,0,0,0,0"))
                                 (rule "inEqSimp_ltToLeq" (formula "33") (term "0"))
                                 (rule "polySimp_mulComm0" (formula "33") (term "1,0,0,0"))
                                 (rule "polySimp_addComm1" (formula "33") (term "0,0"))
                                 (rule "inEqSimp_ltToLeq" (formula "13") (term "0,0,0,1,0"))
                                 (rule "polySimp_mulComm0" (formula "13") (term "1,0,0,0,0,0,1,0"))
                                 (rule "inEqSimp_ltToLeq" (formula "26") (term "1"))
                                 (rule "polySimp_mulComm0" (formula "26") (term "1,0,0,1"))
                                 (rule "polySimp_addComm1" (formula "26") (term "0,1"))
                                 (rule "inEqSimp_ltToLeq" (formula "39") (term "1,0,0"))
                                 (rule "polySimp_mulComm0" (formula "39") (term "1,0,0,1,0,0"))
                                 (rule "inEqSimp_ltToLeq" (formula "14") (term "0,0,0"))
                                 (rule "polySimp_mulComm0" (formula "14") (term "1,0,0,0,0,0"))
                                 (rule "inEqSimp_ltToLeq" (formula "16") (term "0,0,0,0,0"))
                                 (rule "polySimp_mulComm0" (formula "16") (term "1,0,0,0,0,0,0,0"))
                                 (rule "inEqSimp_ltToLeq" (formula "13") (term "0,0,0"))
                                 (rule "polySimp_mulComm0" (formula "13") (term "1,0,0,0,0,0"))
                                 (rule "inEqSimp_ltToLeq" (formula "32") (term "0"))
                                 (rule "polySimp_mulComm0" (formula "32") (term "1,0,0,0"))
                                 (rule "polySimp_addComm1" (formula "32") (term "0,0"))
                                 (rule "inEqSimp_ltToLeq" (formula "2"))
                                 (rule "polySimp_mulComm0" (formula "2") (term "1,0,0"))
                                 (rule "polySimp_addComm1" (formula "2") (term "0"))
                                 (rule "inEqSimp_commuteLeq" (formula "39") (term "0,0,0"))
                                 (rule "applyEq" (formula "33") (term "0,1,0,0") (ifseqformula "20"))
                                 (rule "applyEq" (formula "31") (term "0,0") (ifseqformula "22"))
                                 (rule "applyEq" (formula "27") (term "4") (ifseqformula "25"))
                                 (rule "applyEq" (formula "27") (term "3") (ifseqformula "6"))
                                 (rule "applyEq" (formula "39") (term "0,1,1,0") (ifseqformula "22"))
                                 (rule "applyEq" (formula "34") (term "0,0,0") (ifseqformula "22"))
                                 (rule "applyEq" (formula "38") (term "4") (ifseqformula "37"))
                                 (rule "applyEq" (formula "26") (term "0,0") (ifseqformula "6"))
                                 (rule "replace_known_left" (formula "26") (term "0") (ifseqformula "23"))
                                  (builtin "One Step Simplification" (formula "26"))
                                 (rule "replace_known_left" (formula "32") (term "0") (ifseqformula "26"))
                                  (builtin "One Step Simplification" (formula "32"))
                                 (rule "notLeft" (formula "32"))
                                 (rule "replace_known_right" (formula "5") (term "0") (ifseqformula "38"))
                                  (builtin "One Step Simplification" (formula "5"))
                                 (rule "replace_known_right" (formula "30") (term "0,0") (ifseqformula "38"))
                                  (builtin "One Step Simplification" (formula "30"))
                                 (rule "replace_known_right" (formula "33") (term "1") (ifseqformula "38"))
                                  (builtin "One Step Simplification" (formula "33"))
                                 (rule "notLeft" (formula "33"))
                                 (rule "applyEq" (formula "6") (term "1") (ifseqformula "23"))
                                 (rule "applyEq" (formula "33") (term "0,0") (ifseqformula "20"))
                                 (rule "replace_known_right" (formula "33") (term "0") (ifseqformula "37"))
                                  (builtin "One Step Simplification" (formula "33"))
                                 (rule "true_left" (formula "33"))
                                 (rule "applyEq" (formula "21") (term "0,0,1,0,0,0,0,0") (ifseqformula "22"))
                                 (rule "applyEq" (formula "20") (term "0,0") (ifseqformula "22"))
                                  (builtin "One Step Simplification" (formula "20"))
                                 (rule "true_left" (formula "20"))
                                 (rule "applyEq" (formula "20") (term "0,0,1,0") (ifseqformula "21"))
                                  (builtin "One Step Simplification" (formula "20"))
                                 (rule "true_left" (formula "20"))
                                 (rule "applyEq" (formula "17") (term "0,1,0,0,0,0,0,0,0") (ifseqformula "15"))
                                 (rule "applyEq" (formula "25") (term "3") (ifseqformula "21"))
                                 (rule "applyEq" (formula "24") (term "0,0,1,0") (ifseqformula "20"))
                                 (rule "replace_known_left" (formula "30") (term "0") (ifseqformula "24"))
                                  (builtin "One Step Simplification" (formula "30"))
                                 (rule "polySimp_sepPosMonomial" (formula "30"))
                                 (rule "polySimp_mulComm0" (formula "30") (term "1"))
                                 (rule "polySimp_rightDist" (formula "30") (term "1"))
                                 (rule "polySimp_mulLiterals" (formula "30") (term "1,1"))
                                 (rule "mul_literals" (formula "30") (term "0,1"))
                                 (rule "polySimp_elimOne" (formula "30") (term "1,1"))
                                 (rule "applyEq" (formula "29") (term "1,0") (ifseqformula "30"))
                                 (rule "applyEq" (formula "34") (term "1") (ifseqformula "30"))
                                 (rule "applyEq" (formula "24") (term "1,0,0") (ifseqformula "30"))
                                 (rule "polySimp_addAssoc" (formula "24") (term "0,0"))
                                 (rule "add_literals" (formula "24") (term "0,0,0"))
                                 (rule "add_zero_left" (formula "24") (term "0,0"))
                                 (rule "applyEq" (formula "3") (term "1,1") (ifseqformula "30"))
                                 (rule "applyEq" (formula "36") (term "1,1,1,0") (ifseqformula "30"))
                                 (rule "inEqSimp_sepNegMonomial1" (formula "1"))
                                 (rule "polySimp_mulLiterals" (formula "1") (term "0"))
                                 (rule "polySimp_elimOne" (formula "1") (term "0"))
                                 (rule "inEqSimp_sepPosMonomial0" (formula "13") (term "0,0,0,1,0"))
                                 (rule "polySimp_mulComm0" (formula "13") (term "1,0,0,0,1,0"))
                                 (rule "polySimp_rightDist" (formula "13") (term "1,0,0,0,1,0"))
                                 (rule "mul_literals" (formula "13") (term "0,1,0,0,0,1,0"))
                                 (rule "polySimp_mulLiterals" (formula "13") (term "1,1,0,0,0,1,0"))
                                 (rule "polySimp_elimOne" (formula "13") (term "1,1,0,0,0,1,0"))
                                 (rule "inEqSimp_sepPosMonomial0" (formula "36") (term "1,0,0"))
                                 (rule "polySimp_mulComm0" (formula "36") (term "1,1,0,0"))
                                 (rule "polySimp_rightDist" (formula "36") (term "1,1,0,0"))
                                 (rule "mul_literals" (formula "36") (term "0,1,1,0,0"))
                                 (rule "polySimp_mulLiterals" (formula "36") (term "1,1,1,0,0"))
                                 (rule "polySimp_elimOne" (formula "36") (term "1,1,1,0,0"))
                                 (rule "inEqSimp_sepPosMonomial0" (formula "14") (term "0,0,0"))
                                 (rule "polySimp_mulComm0" (formula "14") (term "1,0,0,0"))
                                 (rule "polySimp_rightDist" (formula "14") (term "1,0,0,0"))
                                 (rule "polySimp_mulLiterals" (formula "14") (term "1,1,0,0,0"))
                                 (rule "mul_literals" (formula "14") (term "0,1,0,0,0"))
                                 (rule "polySimp_elimOne" (formula "14") (term "1,1,0,0,0"))
                                 (rule "inEqSimp_sepPosMonomial0" (formula "16") (term "0,0,0,0,0"))
                                 (rule "polySimp_mulComm0" (formula "16") (term "1,0,0,0,0,0"))
                                 (rule "polySimp_rightDist" (formula "16") (term "1,0,0,0,0,0"))
                                 (rule "polySimp_mulLiterals" (formula "16") (term "1,1,0,0,0,0,0"))
                                 (rule "mul_literals" (formula "16") (term "0,1,0,0,0,0,0"))
                                 (rule "polySimp_elimOne" (formula "16") (term "1,1,0,0,0,0,0"))
                                 (rule "inEqSimp_sepPosMonomial0" (formula "13") (term "0,0,0"))
                                 (rule "polySimp_mulComm0" (formula "13") (term "1,0,0,0"))
                                 (rule "polySimp_rightDist" (formula "13") (term "1,0,0,0"))
                                 (rule "polySimp_mulLiterals" (formula "13") (term "1,1,0,0,0"))
                                 (rule "mul_literals" (formula "13") (term "0,1,0,0,0"))
                                 (rule "polySimp_elimOne" (formula "13") (term "1,1,0,0,0"))
                                 (rule "inEqSimp_sepNegMonomial0" (formula "2"))
                                 (rule "polySimp_mulLiterals" (formula "2") (term "0"))
                                 (rule "polySimp_elimOne" (formula "2") (term "0"))
                                 (rule "inEqSimp_sepPosMonomial0" (formula "17") (term "0,0,0,0,0"))
                                 (rule "polySimp_mulComm0" (formula "17") (term "1,0,0,0,0,0"))
                                 (rule "polySimp_rightDist" (formula "17") (term "1,0,0,0,0,0"))
                                 (rule "mul_literals" (formula "17") (term "0,1,0,0,0,0,0"))
                                 (rule "polySimp_mulLiterals" (formula "17") (term "1,1,0,0,0,0,0"))
                                 (rule "polySimp_elimOne" (formula "17") (term "1,1,0,0,0,0,0"))
                                 (rule "inEqSimp_sepNegMonomial0" (formula "24"))
                                 (rule "polySimp_mulLiterals" (formula "24") (term "0"))
                                 (rule "polySimp_elimOne" (formula "24") (term "0"))
                                 (rule "inEqSimp_contradEq7" (formula "34") (ifseqformula "24"))
                                 (rule "polySimp_rightDist" (formula "34") (term "1,0,0"))
                                 (rule "mul_literals" (formula "34") (term "0,1,0,0"))
                                 (rule "polySimp_addAssoc" (formula "34") (term "0,0"))
                                 (rule "polySimp_addComm0" (formula "34") (term "0,0,0"))
                                 (rule "polySimp_pullOutFactor1b" (formula "34") (term "0,0"))
                                 (rule "add_literals" (formula "34") (term "1,1,0,0"))
                                 (rule "times_zero_1" (formula "34") (term "1,0,0"))
                                 (rule "add_zero_right" (formula "34") (term "0,0"))
                                 (rule "leq_literals" (formula "34") (term "0"))
                                  (builtin "One Step Simplification" (formula "34"))
                                 (rule "false_right" (formula "34"))
                                 (rule "pullOutSelect" (formula "35") (term "0,0,1,0") (inst "selectSK=org_apache_commons_csv_CSVRecord_key_seq_0"))
                                 (rule "applyEq" (formula "36") (term "0,1,1,1,0,0") (ifseqformula "1"))
                                 (rule "applyEq" (formula "2") (term "0,0") (ifseqformula "1"))
                                 (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "28"))
                                  (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "38")) (ifInst ""  (formula "11")))
                                 (rule "elementOfSingleton" (formula "1") (term "0,0"))
                                  (builtin "One Step Simplification" (formula "1"))
                                 (rule "applyEqReverse" (formula "2") (term "0,0") (ifseqformula "1"))
                                 (rule "applyEqReverse" (formula "36") (term "0,1,1,1,0,0") (ifseqformula "1"))
                                 (rule "applyEqReverse" (formula "36") (term "0,0,1,0") (ifseqformula "1"))
                                 (rule "hideAuxiliaryEq" (formula "1"))
                                 (rule "inEqSimp_contradInEq1" (formula "1") (ifseqformula "2"))
                                 (rule "andLeft" (formula "1"))
                                 (rule "inEqSimp_homoInEq1" (formula "1"))
                                 (rule "polySimp_pullOutFactor1b" (formula "1") (term "0"))
                                 (rule "add_literals" (formula "1") (term "1,1,0"))
                                 (rule "times_zero_1" (formula "1") (term "1,0"))
                                 (rule "add_zero_right" (formula "1") (term "0"))
                                 (rule "leq_literals" (formula "1"))
                                 (rule "closeFalse" (formula "1"))
                              )
                           )
                           (branch
                              (rule "andLeft" (formula "1"))
                              (rule "andLeft" (formula "1"))
                              (rule "eqSymm" (formula "2"))
                              (rule "polySimp_homoEq" (formula "32") (term "1"))
                              (rule "polySimp_addComm1" (formula "32") (term "0,1"))
                              (rule "castedGetAny" (formula "39") (term "0,1,0"))
                              (rule "castedGetAny" (formula "38") (term "0"))
                              (rule "inEqSimp_ltToLeq" (formula "31") (term "0"))
                              (rule "polySimp_mulComm0" (formula "31") (term "1,0,0,0"))
                              (rule "polySimp_addComm1" (formula "31") (term "0,0"))
                              (rule "inEqSimp_ltToLeq" (formula "20") (term "0,0,0"))
                              (rule "polySimp_mulComm0" (formula "20") (term "1,0,0,0,0,0"))
                              (rule "inEqSimp_ltToLeq" (formula "12") (term "0,0,0,1,0"))
                              (rule "polySimp_mulComm0" (formula "12") (term "1,0,0,0,0,0,1,0"))
                              (rule "inEqSimp_ltToLeq" (formula "39") (term "1,0,0"))
                              (rule "polySimp_mulComm0" (formula "39") (term "1,0,0,1,0,0"))
                              (rule "inEqSimp_ltToLeq" (formula "32") (term "0"))
                              (rule "polySimp_mulComm0" (formula "32") (term "1,0,0,0"))
                              (rule "polySimp_addComm1" (formula "32") (term "0,0"))
                              (rule "inEqSimp_ltToLeq" (formula "25") (term "1"))
                              (rule "polySimp_mulComm0" (formula "25") (term "1,0,0,1"))
                              (rule "polySimp_addComm1" (formula "25") (term "0,1"))
                              (rule "inEqSimp_ltToLeq" (formula "16") (term "0,0,0,0,0"))
                              (rule "polySimp_mulComm0" (formula "16") (term "1,0,0,0,0,0,0,0"))
                              (rule "inEqSimp_ltToLeq" (formula "15") (term "0,0,0,0,0"))
                              (rule "polySimp_mulComm0" (formula "15") (term "1,0,0,0,0,0,0,0"))
                              (rule "inEqSimp_ltToLeq" (formula "13") (term "0,0,0"))
                              (rule "polySimp_mulComm0" (formula "13") (term "1,0,0,0,0,0"))
                              (rule "inEqSimp_ltToLeq" (formula "12") (term "0,0,0"))
                              (rule "polySimp_mulComm0" (formula "12") (term "1,0,0,0,0,0"))
                              (rule "inEqSimp_ltToLeq" (formula "1"))
                              (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
                              (rule "polySimp_addComm1" (formula "1") (term "0"))
                              (rule "inEqSimp_commuteLeq" (formula "39") (term "0,0,0"))
                              (rule "applyEq" (formula "34") (term "0,0,0") (ifseqformula "21"))
                              (rule "applyEq" (formula "30") (term "0,0") (ifseqformula "21"))
                              (rule "applyEq" (formula "33") (term "0,0") (ifseqformula "19"))
                              (rule "applyEq" (formula "5") (term "1") (ifseqformula "22"))
                              (rule "replace_known_left" (formula "25") (term "0") (ifseqformula "5"))
                               (builtin "One Step Simplification" (formula "25"))
                              (rule "replace_known_left" (formula "31") (term "0") (ifseqformula "25"))
                               (builtin "One Step Simplification" (formula "31"))
                              (rule "notLeft" (formula "31"))
                              (rule "replace_known_left" (formula "31") (term "0") (ifseqformula "25"))
                               (builtin "One Step Simplification" (formula "31"))
                              (rule "replace_known_right" (formula "4") (term "0") (ifseqformula "37"))
                               (builtin "One Step Simplification" (formula "4"))
                              (rule "replace_known_right" (formula "29") (term "0,0") (ifseqformula "37"))
                               (builtin "One Step Simplification" (formula "29"))
                              (rule "replace_known_right" (formula "32") (term "1") (ifseqformula "37"))
                               (builtin "One Step Simplification" (formula "32"))
                              (rule "notLeft" (formula "32"))
                              (rule "replace_known_right" (formula "32") (term "0") (ifseqformula "36"))
                               (builtin "One Step Simplification" (formula "32"))
                              (rule "true_left" (formula "32"))
                              (rule "applyEq" (formula "19") (term "0,0") (ifseqformula "21"))
                               (builtin "One Step Simplification" (formula "19"))
                              (rule "true_left" (formula "19"))
                              (rule "applyEq" (formula "19") (term "0,0,1,0") (ifseqformula "20"))
                               (builtin "One Step Simplification" (formula "19"))
                              (rule "true_left" (formula "19"))
                              (rule "applyEq" (formula "35") (term "0,1") (ifseqformula "19"))
                              (rule "applyEq" (formula "32") (term "4") (ifseqformula "31"))
                              (rule "applyEq" (formula "36") (term "0,1,1,0") (ifseqformula "19"))
                              (rule "applyEq" (formula "24") (term "4") (ifseqformula "22"))
                              (rule "applyEq" (formula "16") (term "0,1,0,0,0,0,0,0,0") (ifseqformula "14"))
                              (rule "applyEq" (formula "24") (term "3") (ifseqformula "5"))
                              (rule "applyEq" (formula "23") (term "0,0,1,0") (ifseqformula "19"))
                              (rule "polySimp_sepPosMonomial" (formula "29"))
                              (rule "polySimp_mulComm0" (formula "29") (term "1"))
                              (rule "polySimp_rightDist" (formula "29") (term "1"))
                              (rule "mul_literals" (formula "29") (term "0,1"))
                              (rule "polySimp_mulLiterals" (formula "29") (term "1,1"))
                              (rule "polySimp_elimOne" (formula "29") (term "1,1"))
                              (rule "applyEq" (formula "28") (term "1,0") (ifseqformula "29"))
                              (rule "applyEq" (formula "36") (term "1,1,1,0") (ifseqformula "29"))
                              (rule "applyEq" (formula "23") (term "1,0,0") (ifseqformula "29"))
                              (rule "polySimp_addAssoc" (formula "23") (term "0,0"))
                              (rule "add_literals" (formula "23") (term "0,0,0"))
                              (rule "add_zero_left" (formula "23") (term "0,0"))
                              (rule "applyEq" (formula "33") (term "1") (ifseqformula "29"))
                              (rule "applyEq" (formula "2") (term "1,1") (ifseqformula "29"))
                              (rule "applyEq" (formula "35") (term "1,1") (ifseqformula "29"))
                              (rule "inEqSimp_sepPosMonomial0" (formula "12") (term "0,0,0,1,0"))
                              (rule "polySimp_mulComm0" (formula "12") (term "1,0,0,0,1,0"))
                              (rule "polySimp_rightDist" (formula "12") (term "1,0,0,0,1,0"))
                              (rule "polySimp_mulLiterals" (formula "12") (term "1,1,0,0,0,1,0"))
                              (rule "mul_literals" (formula "12") (term "0,1,0,0,0,1,0"))
                              (rule "polySimp_elimOne" (formula "12") (term "1,1,0,0,0,1,0"))
                              (rule "inEqSimp_sepPosMonomial0" (formula "36") (term "1,0,0"))
                              (rule "polySimp_mulComm0" (formula "36") (term "1,1,0,0"))
                              (rule "polySimp_rightDist" (formula "36") (term "1,1,0,0"))
                              (rule "mul_literals" (formula "36") (term "0,1,1,0,0"))
                              (rule "polySimp_mulLiterals" (formula "36") (term "1,1,1,0,0"))
                              (rule "polySimp_elimOne" (formula "36") (term "1,1,1,0,0"))
                              (rule "inEqSimp_sepPosMonomial0" (formula "15") (term "0,0,0,0,0"))
                              (rule "polySimp_mulComm0" (formula "15") (term "1,0,0,0,0,0"))
                              (rule "polySimp_rightDist" (formula "15") (term "1,0,0,0,0,0"))
                              (rule "polySimp_mulLiterals" (formula "15") (term "1,1,0,0,0,0,0"))
                              (rule "mul_literals" (formula "15") (term "0,1,0,0,0,0,0"))
                              (rule "polySimp_elimOne" (formula "15") (term "1,1,0,0,0,0,0"))
                              (rule "inEqSimp_sepPosMonomial0" (formula "13") (term "0,0,0"))
                              (rule "polySimp_mulComm0" (formula "13") (term "1,0,0,0"))
                              (rule "polySimp_rightDist" (formula "13") (term "1,0,0,0"))
                              (rule "polySimp_mulLiterals" (formula "13") (term "1,1,0,0,0"))
                              (rule "mul_literals" (formula "13") (term "0,1,0,0,0"))
                              (rule "polySimp_elimOne" (formula "13") (term "1,1,0,0,0"))
                              (rule "inEqSimp_sepPosMonomial0" (formula "12") (term "0,0,0"))
                              (rule "polySimp_mulComm0" (formula "12") (term "1,0,0,0"))
                              (rule "polySimp_rightDist" (formula "12") (term "1,0,0,0"))
                              (rule "polySimp_mulLiterals" (formula "12") (term "1,1,0,0,0"))
                              (rule "mul_literals" (formula "12") (term "0,1,0,0,0"))
                              (rule "polySimp_elimOne" (formula "12") (term "1,1,0,0,0"))
                              (rule "inEqSimp_sepNegMonomial0" (formula "1"))
                              (rule "polySimp_mulLiterals" (formula "1") (term "0"))
                              (rule "polySimp_elimOne" (formula "1") (term "0"))
                              (rule "inEqSimp_sepPosMonomial0" (formula "16") (term "0,0,0,0,0"))
                              (rule "polySimp_mulComm0" (formula "16") (term "1,0,0,0,0,0"))
                              (rule "polySimp_rightDist" (formula "16") (term "1,0,0,0,0,0"))
                              (rule "mul_literals" (formula "16") (term "0,1,0,0,0,0,0"))
                              (rule "polySimp_mulLiterals" (formula "16") (term "1,1,0,0,0,0,0"))
                              (rule "polySimp_elimOne" (formula "16") (term "1,1,0,0,0,0,0"))
                              (rule "inEqSimp_sepNegMonomial0" (formula "23"))
                              (rule "polySimp_mulLiterals" (formula "23") (term "0"))
                              (rule "polySimp_elimOne" (formula "23") (term "0"))
                              (rule "inEqSimp_contradEq7" (formula "33") (ifseqformula "23"))
                              (rule "polySimp_rightDist" (formula "33") (term "1,0,0"))
                              (rule "mul_literals" (formula "33") (term "0,1,0,0"))
                              (rule "polySimp_addAssoc" (formula "33") (term "0,0"))
                              (rule "polySimp_addComm0" (formula "33") (term "0,0,0"))
                              (rule "polySimp_pullOutFactor1b" (formula "33") (term "0,0"))
                              (rule "add_literals" (formula "33") (term "1,1,0,0"))
                              (rule "times_zero_1" (formula "33") (term "1,0,0"))
                              (rule "add_zero_right" (formula "33") (term "0,0"))
                              (rule "leq_literals" (formula "33") (term "0"))
                               (builtin "One Step Simplification" (formula "33"))
                              (rule "false_right" (formula "33"))
                              (rule "pullOutSelect" (formula "35") (term "0,0,1,0") (inst "selectSK=org_apache_commons_csv_CSVRecord_key_seq_0"))
                              (rule "applyEq" (formula "35") (term "0,0") (ifseqformula "1"))
                              (rule "applyEq" (formula "36") (term "0,1,1,1,0,0") (ifseqformula "1"))
                              (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "27"))
                               (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "38")) (ifInst ""  (formula "10")))
                              (rule "eqSymm" (formula "35"))
                              (rule "elementOfSingleton" (formula "1") (term "0,0"))
                               (builtin "One Step Simplification" (formula "1"))
                              (rule "applyEqReverse" (formula "35") (term "0,1") (ifseqformula "1"))
                              (rule "applyEqReverse" (formula "36") (term "0,0,1,0") (ifseqformula "1"))
                              (rule "applyEqReverse" (formula "36") (term "0,1,1,1,0,0") (ifseqformula "1"))
                              (rule "hideAuxiliaryEq" (formula "1"))
                              (rule "eqSymm" (formula "34"))
                              (rule "close" (formula "34") (ifseqformula "2"))
                           )
                        )
                     )
                  )
                  (branch
                     (rule "andRight" (formula "35"))
                     (branch
                        (rule "polySimp_homoEq" (formula "29") (term "1"))
                        (rule "polySimp_addComm1" (formula "29") (term "0,1"))
                        (rule "inEqSimp_ltToLeq" (formula "10") (term "0,0,0"))
                        (rule "polySimp_mulComm0" (formula "10") (term "1,0,0,0,0,0"))
                        (rule "inEqSimp_ltToLeq" (formula "27") (term "0"))
                        (rule "polySimp_mulComm0" (formula "27") (term "1,0,0,0"))
                        (rule "polySimp_addComm1" (formula "27") (term "0,0"))
                        (rule "inEqSimp_ltToLeq" (formula "12") (term "0,0,0,0,0"))
                        (rule "polySimp_mulComm0" (formula "12") (term "1,0,0,0,0,0,0,0"))
                        (rule "inEqSimp_ltToLeq" (formula "17") (term "0,0,0"))
                        (rule "polySimp_mulComm0" (formula "17") (term "1,0,0,0,0,0"))
                        (rule "inEqSimp_ltToLeq" (formula "29") (term "0"))
                        (rule "polySimp_mulComm0" (formula "29") (term "1,0,0,0"))
                        (rule "polySimp_addComm1" (formula "29") (term "0,0"))
                        (rule "inEqSimp_ltToLeq" (formula "9") (term "0,0,0,1,0"))
                        (rule "polySimp_mulComm0" (formula "9") (term "1,0,0,0,0,0,1,0"))
                        (rule "inEqSimp_ltToLeq" (formula "13") (term "0,0,0,0,0"))
                        (rule "polySimp_mulComm0" (formula "13") (term "1,0,0,0,0,0,0,0"))
                        (rule "inEqSimp_ltToLeq" (formula "9") (term "0,0,0"))
                        (rule "polySimp_mulComm0" (formula "9") (term "1,0,0,0,0,0"))
                        (rule "inEqSimp_ltToLeq" (formula "22") (term "1"))
                        (rule "polySimp_mulComm0" (formula "22") (term "1,0,0,1"))
                        (rule "polySimp_addComm1" (formula "22") (term "0,1"))
                        (rule "inEqSimp_ltToLeq" (formula "28") (term "0"))
                        (rule "polySimp_mulComm0" (formula "28") (term "1,0,0,0"))
                        (rule "polySimp_addComm1" (formula "28") (term "0,0"))
                        (rule "applyEq" (formula "27") (term "0,0,1,0,0") (ifseqformula "18"))
                        (rule "applyEq" (formula "22") (term "0,1,0,1") (ifseqformula "16"))
                        (rule "applyEq" (formula "29") (term "0,0,1,0,0") (ifseqformula "18"))
                        (rule "applyEq" (formula "2") (term "1") (ifseqformula "19"))
                        (rule "replace_known_left" (formula "22") (term "0") (ifseqformula "2"))
                         (builtin "One Step Simplification" (formula "22"))
                        (rule "replace_known_left" (formula "29") (term "0") (ifseqformula "22"))
                         (builtin "One Step Simplification" (formula "29"))
                        (rule "replace_known_left" (formula "27") (term "0") (ifseqformula "22"))
                         (builtin "One Step Simplification" (formula "27"))
                        (rule "applyEq" (formula "34") (term "4") (ifseqformula "33"))
                        (rule "applyEq" (formula "23") (term "4") (ifseqformula "21"))
                        (rule "applyEq" (formula "31") (term "0,0") (ifseqformula "16"))
                        (rule "applyEq" (formula "30") (term "0,0") (ifseqformula "16"))
                        (rule "applyEq" (formula "16") (term "0,0") (ifseqformula "18"))
                         (builtin "One Step Simplification" (formula "16"))
                        (rule "true_left" (formula "16"))
                        (rule "applyEq" (formula "27") (term "0,0,1,0,0") (ifseqformula "17"))
                        (rule "replace_known_left" (formula "27") (term "0") (ifseqformula "21"))
                         (builtin "One Step Simplification" (formula "27"))
                        (rule "notLeft" (formula "27"))
                        (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "33"))
                         (builtin "One Step Simplification" (formula "1"))
                        (rule "replace_known_right" (formula "25") (term "0,0") (ifseqformula "33"))
                         (builtin "One Step Simplification" (formula "25"))
                        (rule "replace_known_right" (formula "28") (term "1") (ifseqformula "33"))
                         (builtin "One Step Simplification" (formula "28"))
                        (rule "notLeft" (formula "28"))
                        (rule "replace_known_right" (formula "28") (term "0") (ifseqformula "32"))
                         (builtin "One Step Simplification" (formula "28"))
                        (rule "true_left" (formula "28"))
                        (rule "applyEq" (formula "16") (term "0,0,1,0,0,0,0,0") (ifseqformula "17"))
                        (rule "applyEq" (formula "16") (term "0,0,1,0") (ifseqformula "17"))
                         (builtin "One Step Simplification" (formula "16"))
                        (rule "true_left" (formula "16"))
                        (rule "applyEq" (formula "13") (term "0,1,0,0,0,0,0,0,0") (ifseqformula "11"))
                        (rule "applyEq" (formula "21") (term "3") (ifseqformula "2"))
                        (rule "applyEq" (formula "25") (term "0,0") (ifseqformula "16"))
                        (rule "polySimp_sepPosMonomial" (formula "26"))
                        (rule "polySimp_mulComm0" (formula "26") (term "1"))
                        (rule "polySimp_rightDist" (formula "26") (term "1"))
                        (rule "mul_literals" (formula "26") (term "0,1"))
                        (rule "polySimp_mulLiterals" (formula "26") (term "1,1"))
                        (rule "polySimp_elimOne" (formula "26") (term "1,1"))
                        (rule "applyEq" (formula "25") (term "1,0") (ifseqformula "26"))
                        (rule "applyEq" (formula "30") (term "1") (ifseqformula "26"))
                        (rule "applyEq" (formula "20") (term "1,0,0") (ifseqformula "26"))
                        (rule "polySimp_addAssoc" (formula "20") (term "0,0"))
                        (rule "add_literals" (formula "20") (term "0,0,0"))
                        (rule "add_zero_left" (formula "20") (term "0,0"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "10") (term "0,0,0"))
                        (rule "polySimp_mulComm0" (formula "10") (term "1,0,0,0"))
                        (rule "polySimp_rightDist" (formula "10") (term "1,0,0,0"))
                        (rule "polySimp_mulLiterals" (formula "10") (term "1,1,0,0,0"))
                        (rule "mul_literals" (formula "10") (term "0,1,0,0,0"))
                        (rule "polySimp_elimOne" (formula "10") (term "1,1,0,0,0"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "12") (term "0,0,0,0,0"))
                        (rule "polySimp_mulComm0" (formula "12") (term "1,0,0,0,0,0"))
                        (rule "polySimp_rightDist" (formula "12") (term "1,0,0,0,0,0"))
                        (rule "polySimp_mulLiterals" (formula "12") (term "1,1,0,0,0,0,0"))
                        (rule "mul_literals" (formula "12") (term "0,1,0,0,0,0,0"))
                        (rule "polySimp_elimOne" (formula "12") (term "1,1,0,0,0,0,0"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "9") (term "0,0,0,1,0"))
                        (rule "polySimp_mulComm0" (formula "9") (term "1,0,0,0,1,0"))
                        (rule "polySimp_rightDist" (formula "9") (term "1,0,0,0,1,0"))
                        (rule "polySimp_mulLiterals" (formula "9") (term "1,1,0,0,0,1,0"))
                        (rule "mul_literals" (formula "9") (term "0,1,0,0,0,1,0"))
                        (rule "polySimp_elimOne" (formula "9") (term "1,1,0,0,0,1,0"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "9") (term "0,0,0"))
                        (rule "polySimp_mulComm0" (formula "9") (term "1,0,0,0"))
                        (rule "polySimp_rightDist" (formula "9") (term "1,0,0,0"))
                        (rule "polySimp_mulLiterals" (formula "9") (term "1,1,0,0,0"))
                        (rule "mul_literals" (formula "9") (term "0,1,0,0,0"))
                        (rule "polySimp_elimOne" (formula "9") (term "1,1,0,0,0"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "13") (term "0,0,0,0,0"))
                        (rule "polySimp_mulComm0" (formula "13") (term "1,0,0,0,0,0"))
                        (rule "polySimp_rightDist" (formula "13") (term "1,0,0,0,0,0"))
                        (rule "polySimp_mulLiterals" (formula "13") (term "1,1,0,0,0,0,0"))
                        (rule "mul_literals" (formula "13") (term "0,1,0,0,0,0,0"))
                        (rule "polySimp_elimOne" (formula "13") (term "1,1,0,0,0,0,0"))
                        (rule "inEqSimp_sepNegMonomial0" (formula "20"))
                        (rule "polySimp_mulLiterals" (formula "20") (term "0"))
                        (rule "polySimp_elimOne" (formula "20") (term "0"))
                        (rule "inEqSimp_contradEq7" (formula "30") (ifseqformula "20"))
                        (rule "polySimp_rightDist" (formula "30") (term "1,0,0"))
                        (rule "mul_literals" (formula "30") (term "0,1,0,0"))
                        (rule "polySimp_addAssoc" (formula "30") (term "0,0"))
                        (rule "polySimp_addComm0" (formula "30") (term "0,0,0"))
                        (rule "polySimp_pullOutFactor1b" (formula "30") (term "0,0"))
                        (rule "add_literals" (formula "30") (term "1,1,0,0"))
                        (rule "times_zero_1" (formula "30") (term "1,0,0"))
                        (rule "add_zero_right" (formula "30") (term "0,0"))
                        (rule "leq_literals" (formula "30") (term "0"))
                         (builtin "One Step Simplification" (formula "30"))
                        (rule "false_right" (formula "30"))
                        (rule "inEqSimp_and_subsumption3" (formula "12") (term "0,0,0"))
                        (rule "leq_literals" (formula "12") (term "0,1,0,0,0,0"))
                         (builtin "One Step Simplification" (formula "12"))
                        (rule "inEqSimp_and_subsumption3" (formula "13") (term "0,0,0"))
                        (rule "leq_literals" (formula "13") (term "0,1,0,0,0,0"))
                         (builtin "One Step Simplification" (formula "13"))
                        (rule "nnf_imp2or" (formula "10") (term "0"))
                        (rule "nnf_imp2or" (formula "9") (term "0"))
                        (rule "nnf_imp2or" (formula "12") (term "0"))
                        (rule "nnf_imp2or" (formula "13") (term "0"))
                        (rule "nnf_notAnd" (formula "10") (term "0,0"))
                        (rule "inEqSimp_notGeq" (formula "10") (term "1,0,0"))
                        (rule "times_zero_1" (formula "10") (term "1,0,0,1,0,0"))
                        (rule "add_zero_right" (formula "10") (term "0,0,1,0,0"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "10") (term "1,0,0"))
                        (rule "mul_literals" (formula "10") (term "1,1,0,0"))
                        (rule "inEqSimp_notLeq" (formula "10") (term "0,0,0"))
                        (rule "polySimp_rightDist" (formula "10") (term "1,0,0,0,0,0"))
                        (rule "mul_literals" (formula "10") (term "0,1,0,0,0,0,0"))
                        (rule "polySimp_addAssoc" (formula "10") (term "0,0,0,0,0"))
                        (rule "add_literals" (formula "10") (term "0,0,0,0,0,0"))
                        (rule "add_zero_left" (formula "10") (term "0,0,0,0,0"))
                        (rule "inEqSimp_sepPosMonomial1" (formula "10") (term "0,0,0"))
                        (rule "polySimp_mulLiterals" (formula "10") (term "1,0,0,0"))
                        (rule "polySimp_elimOne" (formula "10") (term "1,0,0,0"))
                        (rule "nnf_notAnd" (formula "9") (term "0,0"))
                        (rule "inEqSimp_notLeq" (formula "9") (term "0,0,0"))
                        (rule "polySimp_rightDist" (formula "9") (term "1,0,0,0,0,0"))
                        (rule "mul_literals" (formula "9") (term "0,1,0,0,0,0,0"))
                        (rule "polySimp_addAssoc" (formula "9") (term "0,0,0,0,0"))
                        (rule "add_literals" (formula "9") (term "0,0,0,0,0,0"))
                        (rule "add_zero_left" (formula "9") (term "0,0,0,0,0"))
                        (rule "inEqSimp_sepPosMonomial1" (formula "9") (term "0,0,0"))
                        (rule "polySimp_mulLiterals" (formula "9") (term "1,0,0,0"))
                        (rule "polySimp_elimOne" (formula "9") (term "1,0,0,0"))
                        (rule "inEqSimp_notGeq" (formula "9") (term "1,0,0"))
                        (rule "mul_literals" (formula "9") (term "1,0,0,1,0,0"))
                        (rule "add_zero_right" (formula "9") (term "0,0,1,0,0"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "9") (term "1,0,0"))
                        (rule "mul_literals" (formula "9") (term "1,1,0,0"))
                        (rule "nnf_notAnd" (formula "12") (term "0,0"))
                        (rule "inEqSimp_notLeq" (formula "12") (term "1,0,0"))
                        (rule "mul_literals" (formula "12") (term "1,0,0,1,0,0"))
                        (rule "add_literals" (formula "12") (term "0,0,1,0,0"))
                        (rule "inEqSimp_sepPosMonomial1" (formula "12") (term "1,0,0"))
                        (rule "mul_literals" (formula "12") (term "1,1,0,0"))
                        (rule "nnf_notAnd" (formula "13") (term "0,0"))
                        (rule "inEqSimp_notLeq" (formula "13") (term "1,0,0"))
                        (rule "mul_literals" (formula "13") (term "1,0,0,1,0,0"))
                        (rule "add_literals" (formula "13") (term "0,0,1,0,0"))
                        (rule "inEqSimp_sepPosMonomial1" (formula "13") (term "1,0,0"))
                        (rule "mul_literals" (formula "13") (term "1,1,0,0"))
                        (rule "nnf_notAnd" (formula "12") (term "0,0,0"))
                        (rule "inEqSimp_notLeq" (formula "12") (term "0,0,0,0"))
                        (rule "polySimp_rightDist" (formula "12") (term "1,0,0,0,0,0,0"))
                        (rule "mul_literals" (formula "12") (term "0,1,0,0,0,0,0,0"))
                        (rule "polySimp_addAssoc" (formula "12") (term "0,0,0,0,0,0"))
                        (rule "add_literals" (formula "12") (term "0,0,0,0,0,0,0"))
                        (rule "add_zero_left" (formula "12") (term "0,0,0,0,0,0"))
                        (rule "inEqSimp_sepPosMonomial1" (formula "12") (term "0,0,0,0"))
                        (rule "polySimp_mulLiterals" (formula "12") (term "1,0,0,0,0"))
                        (rule "polySimp_elimOne" (formula "12") (term "1,0,0,0,0"))
                        (rule "inEqSimp_notGeq" (formula "12") (term "1,0,0,0"))
                        (rule "mul_literals" (formula "12") (term "1,0,0,1,0,0,0"))
                        (rule "add_zero_right" (formula "12") (term "0,0,1,0,0,0"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "12") (term "1,0,0,0"))
                        (rule "mul_literals" (formula "12") (term "1,1,0,0,0"))
                        (rule "nnf_notAnd" (formula "13") (term "0,0,0"))
                        (rule "inEqSimp_notLeq" (formula "13") (term "0,0,0,0"))
                        (rule "polySimp_rightDist" (formula "13") (term "1,0,0,0,0,0,0"))
                        (rule "mul_literals" (formula "13") (term "0,1,0,0,0,0,0,0"))
                        (rule "polySimp_addAssoc" (formula "13") (term "0,0,0,0,0,0"))
                        (rule "add_literals" (formula "13") (term "0,0,0,0,0,0,0"))
                        (rule "add_zero_left" (formula "13") (term "0,0,0,0,0,0"))
                        (rule "inEqSimp_sepPosMonomial1" (formula "13") (term "0,0,0,0"))
                        (rule "polySimp_mulLiterals" (formula "13") (term "1,0,0,0,0"))
                        (rule "polySimp_elimOne" (formula "13") (term "1,0,0,0,0"))
                        (rule "inEqSimp_notGeq" (formula "13") (term "1,0,0,0"))
                        (rule "mul_literals" (formula "13") (term "1,0,0,1,0,0,0"))
                        (rule "add_zero_right" (formula "13") (term "0,0,1,0,0,0"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "13") (term "1,0,0,0"))
                        (rule "mul_literals" (formula "13") (term "1,1,0,0,0"))
                        (rule "Class_invariant_axiom_for_org_apache_commons_csv_CSVRecord" (formula "31") (inst "i=i") (inst "i_0=i_0"))
                        (rule "expand_inInt" (formula "31") (term "1,0,0,1,0"))
                        (rule "expand_inInt" (formula "31") (term "1,0,0,1"))
                        (rule "replace_int_MAX" (formula "31") (term "1,0,1,0,0,1,0"))
                        (rule "replace_int_MIN" (formula "31") (term "0,1,1,0,0,1,0"))
                        (rule "replace_int_MAX" (formula "31") (term "1,0,1,0,0,1"))
                        (rule "replace_int_MIN" (formula "31") (term "0,1,1,0,0,1"))
                        (rule "eqSymm" (formula "31") (term "0,0"))
                        (rule "castedGetAny" (formula "31") (term "0,0,1,0,1"))
                        (rule "castedGetAny" (formula "31") (term "0,0,1,0,1,0"))
                        (rule "inEqSimp_ltToLeq" (formula "31") (term "1,0,0,0,1"))
                        (rule "polySimp_mulComm0" (formula "31") (term "1,0,0,1,0,0,0,1"))
                        (rule "inEqSimp_ltToLeq" (formula "31") (term "1,0,0,0,1,0"))
                        (rule "polySimp_mulComm0" (formula "31") (term "1,0,0,1,0,0,0,1,0"))
                        (rule "inEqSimp_commuteLeq" (formula "31") (term "0,0,0,0,1,0"))
                        (rule "inEqSimp_commuteLeq" (formula "31") (term "0,0,0,0,1"))
                        (rule "inEqSimp_commuteLeq" (formula "31") (term "1,1,0,0,1,0"))
                        (rule "inEqSimp_commuteLeq" (formula "31") (term "1,1,0,0,1"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "31") (term "1,0,0,0,1"))
                        (rule "polySimp_mulComm0" (formula "31") (term "1,1,0,0,0,1"))
                        (rule "polySimp_rightDist" (formula "31") (term "1,1,0,0,0,1"))
                        (rule "polySimp_mulLiterals" (formula "31") (term "1,1,1,0,0,0,1"))
                        (rule "mul_literals" (formula "31") (term "0,1,1,0,0,0,1"))
                        (rule "polySimp_elimOne" (formula "31") (term "1,1,1,0,0,0,1"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "31") (term "1,0,0,0,1,0"))
                        (rule "polySimp_mulComm0" (formula "31") (term "1,1,0,0,0,1,0"))
                        (rule "polySimp_rightDist" (formula "31") (term "1,1,0,0,0,1,0"))
                        (rule "polySimp_mulLiterals" (formula "31") (term "1,1,1,0,0,0,1,0"))
                        (rule "mul_literals" (formula "31") (term "0,1,1,0,0,0,1,0"))
                        (rule "polySimp_elimOne" (formula "31") (term "1,1,1,0,0,0,1,0"))
                        (rule "pullOutSelect" (formula "31") (term "0,0,0,0") (inst "selectSK=org_apache_commons_csv_CSVRecord_value_seq_0"))
                        (rule "applyEq" (formula "32") (term "0,1,1,1,0,0,0,1") (ifseqformula "1"))
                        (rule "applyEq" (formula "32") (term "0,0,0,1,0,1") (ifseqformula "1"))
                        (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "24"))
                         (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "34")) (ifInst ""  (formula "7")))
                        (rule "eqSymm" (formula "32") (term "0,0"))
                        (rule "elementOfSingleton" (formula "1") (term "0,0"))
                         (builtin "One Step Simplification" (formula "1"))
                        (rule "applyEqReverse" (formula "32") (term "0,1,1,1,0,0,0,1") (ifseqformula "1"))
                        (rule "applyEqReverse" (formula "32") (term "0,0,0,1,0,1") (ifseqformula "1"))
                        (rule "applyEqReverse" (formula "32") (term "0,1,0,0") (ifseqformula "1"))
                        (rule "hideAuxiliaryEq" (formula "1"))
                        (rule "applyEq" (formula "31") (term "1,1,1,0,0,0,1") (ifseqformula "11"))
                        (rule "applyEq" (formula "31") (term "1,0,0") (ifseqformula "11"))
                        (rule "pullOutSelect" (formula "31") (term "0,0,0,1,0,1,0") (inst "selectSK=org_apache_commons_csv_CSVRecord_key_seq_0"))
                        (rule "applyEq" (formula "32") (term "0,0,0,0") (ifseqformula "1"))
                        (rule "applyEq" (formula "32") (term "0,1,1,1,0,0,0,1,0") (ifseqformula "1"))
                        (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "24"))
                         (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "34")) (ifInst ""  (formula "7")))
                        (rule "eqSymm" (formula "32") (term "0,0"))
                        (rule "elementOfSingleton" (formula "1") (term "0,0"))
                         (builtin "One Step Simplification" (formula "1"))
                        (rule "applyEqReverse" (formula "32") (term "0,1,0,0") (ifseqformula "1"))
                         (builtin "One Step Simplification" (formula "32"))
                        (rule "applyEqReverse" (formula "32") (term "0,0,0,1,0,0") (ifseqformula "1"))
                        (rule "applyEqReverse" (formula "32") (term "0,1,1,1,0,0,0,0") (ifseqformula "1"))
                        (rule "hideAuxiliaryEq" (formula "1"))
                        (rule "nnf_imp2or" (formula "31") (term "0,1"))
                        (rule "nnf_imp2or" (formula "31") (term "0,0"))
                        (rule "nnf_notAnd" (formula "31") (term "0,0,1"))
                        (rule "nnf_notAnd" (formula "31") (term "0,0,0"))
                        (rule "nnf_notAnd" (formula "31") (term "0,0,0,1"))
                        (rule "inEqSimp_notLeq" (formula "31") (term "1,0,0,0,1"))
                        (rule "polySimp_rightDist" (formula "31") (term "1,0,0,1,0,0,0,1"))
                        (rule "mul_literals" (formula "31") (term "0,1,0,0,1,0,0,0,1"))
                        (rule "polySimp_addAssoc" (formula "31") (term "0,0,1,0,0,0,1"))
                        (rule "add_literals" (formula "31") (term "0,0,0,1,0,0,0,1"))
                        (rule "add_zero_left" (formula "31") (term "0,0,1,0,0,0,1"))
                        (rule "inEqSimp_sepPosMonomial1" (formula "31") (term "1,0,0,0,1"))
                        (rule "polySimp_mulLiterals" (formula "31") (term "1,1,0,0,0,1"))
                        (rule "polySimp_elimOne" (formula "31") (term "1,1,0,0,0,1"))
                        (rule "inEqSimp_notGeq" (formula "31") (term "0,0,0,0,1"))
                        (rule "times_zero_1" (formula "31") (term "1,0,0,0,0,0,0,1"))
                        (rule "add_zero_right" (formula "31") (term "0,0,0,0,0,0,1"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "31") (term "0,0,0,0,1"))
                        (rule "mul_literals" (formula "31") (term "1,0,0,0,0,1"))
                        (rule "nnf_notAnd" (formula "31") (term "1,0,0,1"))
                        (rule "inEqSimp_notLeq" (formula "31") (term "0,1,0,0,1"))
                        (rule "mul_literals" (formula "31") (term "1,0,0,0,1,0,0,1"))
                        (rule "add_literals" (formula "31") (term "0,0,0,1,0,0,1"))
                        (rule "inEqSimp_sepPosMonomial1" (formula "31") (term "0,1,0,0,1"))
                        (rule "mul_literals" (formula "31") (term "1,0,1,0,0,1"))
                        (rule "inEqSimp_notGeq" (formula "31") (term "1,1,0,0,1"))
                        (rule "mul_literals" (formula "31") (term "1,0,0,1,1,0,0,1"))
                        (rule "add_literals" (formula "31") (term "0,0,1,1,0,0,1"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "31") (term "1,1,0,0,1"))
                        (rule "mul_literals" (formula "31") (term "1,1,1,0,0,1"))
                        (rule "nnf_notAnd" (formula "31") (term "0,0,0,0"))
                        (rule "inEqSimp_notGeq" (formula "31") (term "0,0,0,0,0"))
                        (rule "times_zero_1" (formula "31") (term "1,0,0,0,0,0,0,0"))
                        (rule "add_zero_right" (formula "31") (term "0,0,0,0,0,0,0"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "31") (term "0,0,0,0,0"))
                        (rule "mul_literals" (formula "31") (term "1,0,0,0,0,0"))
                        (rule "inEqSimp_notLeq" (formula "31") (term "1,0,0,0,0"))
                        (rule "polySimp_rightDist" (formula "31") (term "1,0,0,1,0,0,0,0"))
                        (rule "mul_literals" (formula "31") (term "0,1,0,0,1,0,0,0,0"))
                        (rule "polySimp_addAssoc" (formula "31") (term "0,0,1,0,0,0,0"))
                        (rule "add_literals" (formula "31") (term "0,0,0,1,0,0,0,0"))
                        (rule "add_zero_left" (formula "31") (term "0,0,1,0,0,0,0"))
                        (rule "inEqSimp_sepPosMonomial1" (formula "31") (term "1,0,0,0,0"))
                        (rule "polySimp_mulLiterals" (formula "31") (term "1,1,0,0,0,0"))
                        (rule "polySimp_elimOne" (formula "31") (term "1,1,0,0,0,0"))
                        (rule "nnf_notAnd" (formula "31") (term "1,0,0,0"))
                        (rule "inEqSimp_notGeq" (formula "31") (term "1,1,0,0,0"))
                        (rule "mul_literals" (formula "31") (term "1,0,0,1,1,0,0,0"))
                        (rule "add_literals" (formula "31") (term "0,0,1,1,0,0,0"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "31") (term "1,1,0,0,0"))
                        (rule "mul_literals" (formula "31") (term "1,1,1,0,0,0"))
                        (rule "inEqSimp_notLeq" (formula "31") (term "0,1,0,0,0"))
                        (rule "mul_literals" (formula "31") (term "1,0,0,0,1,0,0,0"))
                        (rule "add_literals" (formula "31") (term "0,0,0,1,0,0,0"))
                        (rule "inEqSimp_sepPosMonomial1" (formula "31") (term "0,1,0,0,0"))
                        (rule "mul_literals" (formula "31") (term "1,0,1,0,0,0"))
                        (rule "commute_or_2" (formula "10") (term "0"))
                        (rule "commute_or" (formula "9") (term "0,0"))
                        (rule "commute_or_2" (formula "12") (term "0"))
                        (rule "commute_or_2" (formula "13") (term "0"))
                        (rule "commute_and" (formula "9") (term "0,0,1,0"))
                        (rule "lenNonNegative" (formula "11") (term "0"))
                        (rule "inEqSimp_commuteLeq" (formula "11"))
                        (rule "applyEq" (formula "11") (term "0") (ifseqformula "12"))
                        (rule "lenNonNegative" (formula "12") (term "1"))
                        (rule "inEqSimp_commuteLeq" (formula "12"))
                        (rule "commute_or" (formula "10") (term "0,0"))
                        (rule "commute_or_2" (formula "10") (term "0"))
                        (rule "commute_or_2" (formula "13") (term "0,0"))
                        (rule "commute_or_2" (formula "14") (term "0,0"))
                        (rule "commute_or" (formula "13") (term "0,0,0"))
                        (rule "commute_or_2" (formula "13") (term "0,0"))
                        (rule "commute_or_2" (formula "13") (term "0"))
                        (rule "commute_or" (formula "14") (term "0,0,0"))
                        (rule "commute_or_2" (formula "14") (term "0,0"))
                        (rule "commute_or_2" (formula "14") (term "0"))
                        (rule "andRight" (formula "32"))
                        (branch
                           (rule "allRight" (formula "32") (inst "sk=i_0_0"))
                           (rule "orRight" (formula "32"))
                           (rule "orRight" (formula "32"))
                           (rule "notRight" (formula "34"))
                           (rule "orRight" (formula "33"))
                           (rule "orRight" (formula "35"))
                           (rule "inEqSimp_leqRight" (formula "33"))
                           (rule "mul_literals" (formula "1") (term "1,0,0"))
                           (rule "add_literals" (formula "1") (term "0,0"))
                           (rule "add_zero_left" (formula "1") (term "0"))
                           (rule "inEqSimp_geqRight" (formula "34"))
                           (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
                           (rule "polySimp_addComm1" (formula "1") (term "0"))
                           (rule "inEqSimp_leqRight" (formula "36"))
                           (rule "mul_literals" (formula "1") (term "1,0,0"))
                           (rule "add_literals" (formula "1") (term "0,0"))
                           (rule "inEqSimp_geqRight" (formula "36"))
                           (rule "mul_literals" (formula "1") (term "1,0,0"))
                           (rule "add_literals" (formula "1") (term "0,0"))
                           (rule "inEqSimp_sepNegMonomial0" (formula "3"))
                           (rule "polySimp_mulLiterals" (formula "3") (term "0"))
                           (rule "polySimp_elimOne" (formula "3") (term "0"))
                           (rule "inEqSimp_sepPosMonomial1" (formula "2"))
                           (rule "mul_literals" (formula "2") (term "1"))
                           (rule "inEqSimp_sepPosMonomial0" (formula "1"))
                           (rule "mul_literals" (formula "1") (term "1"))
                           (rule "inEqSimp_subsumption1" (formula "2") (ifseqformula "4"))
                           (rule "leq_literals" (formula "2") (term "0"))
                            (builtin "One Step Simplification" (formula "2"))
                           (rule "true_left" (formula "2"))
                           (rule "seqGetAlphaCast" (formula "30") (term "0"))
                           (rule "castedGetAny" (formula "30") (term "0"))
                            (builtin "One Step Simplification" (formula "30"))
                           (rule "true_left" (formula "30"))
                           (rule "commute_and_2" (formula "13") (term "0,1,0"))
                           (rule "lenNonNegative" (formula "25") (term "0"))
                           (rule "inEqSimp_commuteLeq" (formula "25"))
                           (rule "ex_pull_out3" (formula "13") (term "0"))
                           (rule "cnf_rightDist" (formula "13") (term "0,0"))
                           (rule "shift_paren_or" (formula "13") (term "1,0,0"))
                           (rule "cnf_rightDist" (formula "13") (term "0,0,0"))
                           (rule "commute_or_2" (formula "13") (term "0,0,0,0"))
                           (rule "shift_paren_or" (formula "13") (term "1,0,0,0"))
                           (rule "commute_or" (formula "13") (term "0,0,0,0,0"))
                           (rule "allLeft" (formula "17") (inst "t=i_0_0"))
                           (rule "replace_known_left" (formula "17") (term "0,0,0,0") (ifseqformula "4"))
                            (builtin "One Step Simplification" (formula "17"))
                           (rule "inEqSimp_commuteGeq" (formula "17") (term "1"))
                           (rule "inEqSimp_contradInEq1" (formula "17") (term "1") (ifseqformula "2"))
                           (rule "inEqSimp_homoInEq1" (formula "17") (term "0,1"))
                           (rule "polySimp_pullOutFactor1b" (formula "17") (term "0,0,1"))
                           (rule "add_literals" (formula "17") (term "1,1,0,0,1"))
                           (rule "times_zero_1" (formula "17") (term "1,0,0,1"))
                           (rule "add_zero_right" (formula "17") (term "0,0,1"))
                           (rule "leq_literals" (formula "17") (term "0,1"))
                            (builtin "One Step Simplification" (formula "17"))
                           (rule "inEqSimp_contradInEq1" (formula "17") (term "0") (ifseqformula "3"))
                           (rule "qeq_literals" (formula "17") (term "0,0"))
                            (builtin "One Step Simplification" (formula "17"))
                           (rule "inEqSimp_subsumption1" (formula "3") (ifseqformula "17"))
                           (rule "leq_literals" (formula "3") (term "0"))
                            (builtin "One Step Simplification" (formula "3"))
                           (rule "true_left" (formula "3"))
                           (rule "inEqSimp_contradInEq1" (formula "1") (ifseqformula "16"))
                           (rule "qeq_literals" (formula "1") (term "0"))
                            (builtin "One Step Simplification" (formula "1"))
                           (rule "closeFalse" (formula "1"))
                        )
                        (branch
                           (rule "allRight" (formula "32") (inst "sk=i_0"))
                           (rule "orRight" (formula "32"))
                           (rule "orRight" (formula "32"))
                           (rule "notRight" (formula "34"))
                           (rule "orRight" (formula "33"))
                           (rule "orRight" (formula "35"))
                           (rule "inEqSimp_leqRight" (formula "33"))
                           (rule "mul_literals" (formula "1") (term "1,0,0"))
                           (rule "add_literals" (formula "1") (term "0,0"))
                           (rule "add_zero_left" (formula "1") (term "0"))
                           (rule "inEqSimp_geqRight" (formula "34"))
                           (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
                           (rule "polySimp_addComm1" (formula "1") (term "0"))
                           (rule "inEqSimp_leqRight" (formula "36"))
                           (rule "mul_literals" (formula "1") (term "1,0,0"))
                           (rule "add_literals" (formula "1") (term "0,0"))
                           (rule "inEqSimp_geqRight" (formula "36"))
                           (rule "mul_literals" (formula "1") (term "1,0,0"))
                           (rule "add_literals" (formula "1") (term "0,0"))
                           (rule "inEqSimp_sepNegMonomial0" (formula "3"))
                           (rule "polySimp_mulLiterals" (formula "3") (term "0"))
                           (rule "polySimp_elimOne" (formula "3") (term "0"))
                           (rule "inEqSimp_sepPosMonomial1" (formula "2"))
                           (rule "mul_literals" (formula "2") (term "1"))
                           (rule "inEqSimp_sepPosMonomial0" (formula "1"))
                           (rule "mul_literals" (formula "1") (term "1"))
                           (rule "inEqSimp_subsumption1" (formula "2") (ifseqformula "4"))
                           (rule "leq_literals" (formula "2") (term "0"))
                            (builtin "One Step Simplification" (formula "2"))
                           (rule "true_left" (formula "2"))
                           (rule "seqGetAlphaCast" (formula "30") (term "0"))
                           (rule "castedGetAny" (formula "30") (term "0"))
                            (builtin "One Step Simplification" (formula "30"))
                           (rule "true_left" (formula "30"))
                           (rule "commute_and_2" (formula "13") (term "0,1,0"))
                           (rule "lenNonNegative" (formula "25") (term "0"))
                           (rule "inEqSimp_commuteLeq" (formula "25"))
                           (rule "ex_pull_out3" (formula "13") (term "0"))
                           (rule "cnf_rightDist" (formula "13") (term "0,0"))
                           (rule "shift_paren_or" (formula "13") (term "1,0,0"))
                           (rule "cnf_rightDist" (formula "13") (term "0,0,0"))
                           (rule "commute_or_2" (formula "13") (term "0,0,0,0"))
                           (rule "shift_paren_or" (formula "13") (term "1,0,0,0"))
                           (rule "commute_or" (formula "13") (term "0,0,0,0,0"))
                           (rule "allLeft" (formula "18") (inst "t=i_0"))
                           (rule "replace_known_left" (formula "18") (term "0,0,0,0") (ifseqformula "4"))
                            (builtin "One Step Simplification" (formula "18"))
                           (rule "inEqSimp_commuteGeq" (formula "18") (term "1"))
                           (rule "inEqSimp_contradInEq0" (formula "18") (term "1,0") (ifseqformula "1"))
                           (rule "qeq_literals" (formula "18") (term "0,1,0"))
                            (builtin "One Step Simplification" (formula "18"))
                           (rule "inEqSimp_contradInEq1" (formula "18") (term "1") (ifseqformula "2"))
                           (rule "inEqSimp_homoInEq1" (formula "18") (term "0,1"))
                           (rule "polySimp_pullOutFactor1b" (formula "18") (term "0,0,1"))
                           (rule "add_literals" (formula "18") (term "1,1,0,0,1"))
                           (rule "times_zero_1" (formula "18") (term "1,0,0,1"))
                           (rule "add_zero_right" (formula "18") (term "0,0,1"))
                           (rule "leq_literals" (formula "18") (term "0,1"))
                            (builtin "One Step Simplification" (formula "18"))
                           (rule "inEqSimp_contradInEq0" (formula "3") (ifseqformula "18"))
                           (rule "qeq_literals" (formula "3") (term "0"))
                            (builtin "One Step Simplification" (formula "3"))
                           (rule "closeFalse" (formula "3"))
                        )
                     )
                     (branch
                        (rule "andRight" (formula "35"))
                        (branch
                           (rule "polySimp_homoEq" (formula "29") (term "1"))
                           (rule "polySimp_addComm1" (formula "29") (term "0,1"))
                           (rule "inEqSimp_ltToLeq" (formula "10") (term "0,0,0"))
                           (rule "polySimp_mulComm0" (formula "10") (term "1,0,0,0,0,0"))
                           (rule "inEqSimp_ltToLeq" (formula "27") (term "0"))
                           (rule "polySimp_mulComm0" (formula "27") (term "1,0,0,0"))
                           (rule "polySimp_addComm1" (formula "27") (term "0,0"))
                           (rule "inEqSimp_ltToLeq" (formula "12") (term "0,0,0,0,0"))
                           (rule "polySimp_mulComm0" (formula "12") (term "1,0,0,0,0,0,0,0"))
                           (rule "inEqSimp_ltToLeq" (formula "17") (term "0,0,0"))
                           (rule "polySimp_mulComm0" (formula "17") (term "1,0,0,0,0,0"))
                           (rule "inEqSimp_ltToLeq" (formula "29") (term "0"))
                           (rule "polySimp_mulComm0" (formula "29") (term "1,0,0,0"))
                           (rule "polySimp_addComm1" (formula "29") (term "0,0"))
                           (rule "inEqSimp_ltToLeq" (formula "9") (term "0,0,0,1,0"))
                           (rule "polySimp_mulComm0" (formula "9") (term "1,0,0,0,0,0,1,0"))
                           (rule "inEqSimp_ltToLeq" (formula "13") (term "0,0,0,0,0"))
                           (rule "polySimp_mulComm0" (formula "13") (term "1,0,0,0,0,0,0,0"))
                           (rule "inEqSimp_ltToLeq" (formula "9") (term "0,0,0"))
                           (rule "polySimp_mulComm0" (formula "9") (term "1,0,0,0,0,0"))
                           (rule "inEqSimp_ltToLeq" (formula "22") (term "1"))
                           (rule "polySimp_mulComm0" (formula "22") (term "1,0,0,1"))
                           (rule "polySimp_addComm1" (formula "22") (term "0,1"))
                           (rule "inEqSimp_ltToLeq" (formula "28") (term "0"))
                           (rule "polySimp_mulComm0" (formula "28") (term "1,0,0,0"))
                           (rule "polySimp_addComm1" (formula "28") (term "0,0"))
                           (rule "applyEq" (formula "27") (term "0,0,1,0,0") (ifseqformula "18"))
                           (rule "applyEq" (formula "22") (term "0,1,0,1") (ifseqformula "16"))
                           (rule "applyEq" (formula "29") (term "0,0,1,0,0") (ifseqformula "18"))
                           (rule "applyEq" (formula "2") (term "1") (ifseqformula "19"))
                           (rule "replace_known_left" (formula "22") (term "0") (ifseqformula "2"))
                            (builtin "One Step Simplification" (formula "22"))
                           (rule "replace_known_left" (formula "29") (term "0") (ifseqformula "22"))
                            (builtin "One Step Simplification" (formula "29"))
                           (rule "replace_known_left" (formula "27") (term "0") (ifseqformula "22"))
                            (builtin "One Step Simplification" (formula "27"))
                           (rule "applyEq" (formula "34") (term "4") (ifseqformula "33"))
                           (rule "applyEq" (formula "23") (term "4") (ifseqformula "21"))
                           (rule "applyEq" (formula "31") (term "0,0") (ifseqformula "16"))
                           (rule "applyEq" (formula "30") (term "0,0") (ifseqformula "16"))
                           (rule "applyEq" (formula "16") (term "0,0") (ifseqformula "18"))
                            (builtin "One Step Simplification" (formula "16"))
                           (rule "true_left" (formula "16"))
                           (rule "applyEq" (formula "27") (term "0,0,1,0,0") (ifseqformula "17"))
                           (rule "replace_known_left" (formula "27") (term "0") (ifseqformula "21"))
                            (builtin "One Step Simplification" (formula "27"))
                           (rule "notLeft" (formula "27"))
                           (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "33"))
                            (builtin "One Step Simplification" (formula "1"))
                           (rule "replace_known_right" (formula "25") (term "0,0") (ifseqformula "33"))
                            (builtin "One Step Simplification" (formula "25"))
                           (rule "replace_known_right" (formula "28") (term "1") (ifseqformula "33"))
                            (builtin "One Step Simplification" (formula "28"))
                           (rule "notLeft" (formula "28"))
                           (rule "replace_known_right" (formula "28") (term "0") (ifseqformula "32"))
                            (builtin "One Step Simplification" (formula "28"))
                           (rule "true_left" (formula "28"))
                           (rule "applyEq" (formula "16") (term "0,0,1,0,0,0,0,0") (ifseqformula "17"))
                           (rule "applyEq" (formula "16") (term "0,0,1,0") (ifseqformula "17"))
                            (builtin "One Step Simplification" (formula "16"))
                           (rule "true_left" (formula "16"))
                           (rule "applyEq" (formula "13") (term "0,1,0,0,0,0,0,0,0") (ifseqformula "11"))
                           (rule "applyEq" (formula "21") (term "3") (ifseqformula "2"))
                           (rule "applyEq" (formula "25") (term "0,0") (ifseqformula "16"))
                           (rule "polySimp_sepPosMonomial" (formula "26"))
                           (rule "polySimp_mulComm0" (formula "26") (term "1"))
                           (rule "polySimp_rightDist" (formula "26") (term "1"))
                           (rule "mul_literals" (formula "26") (term "0,1"))
                           (rule "polySimp_mulLiterals" (formula "26") (term "1,1"))
                           (rule "polySimp_elimOne" (formula "26") (term "1,1"))
                           (rule "applyEq" (formula "25") (term "1,0") (ifseqformula "26"))
                           (rule "applyEq" (formula "30") (term "1") (ifseqformula "26"))
                           (rule "applyEq" (formula "20") (term "1,0,0") (ifseqformula "26"))
                           (rule "polySimp_addAssoc" (formula "20") (term "0,0"))
                           (rule "add_literals" (formula "20") (term "0,0,0"))
                           (rule "add_zero_left" (formula "20") (term "0,0"))
                           (rule "inEqSimp_sepPosMonomial0" (formula "10") (term "0,0,0"))
                           (rule "polySimp_mulComm0" (formula "10") (term "1,0,0,0"))
                           (rule "polySimp_rightDist" (formula "10") (term "1,0,0,0"))
                           (rule "polySimp_mulLiterals" (formula "10") (term "1,1,0,0,0"))
                           (rule "mul_literals" (formula "10") (term "0,1,0,0,0"))
                           (rule "polySimp_elimOne" (formula "10") (term "1,1,0,0,0"))
                           (rule "inEqSimp_sepPosMonomial0" (formula "12") (term "0,0,0,0,0"))
                           (rule "polySimp_mulComm0" (formula "12") (term "1,0,0,0,0,0"))
                           (rule "polySimp_rightDist" (formula "12") (term "1,0,0,0,0,0"))
                           (rule "polySimp_mulLiterals" (formula "12") (term "1,1,0,0,0,0,0"))
                           (rule "mul_literals" (formula "12") (term "0,1,0,0,0,0,0"))
                           (rule "polySimp_elimOne" (formula "12") (term "1,1,0,0,0,0,0"))
                           (rule "inEqSimp_sepPosMonomial0" (formula "9") (term "0,0,0,1,0"))
                           (rule "polySimp_mulComm0" (formula "9") (term "1,0,0,0,1,0"))
                           (rule "polySimp_rightDist" (formula "9") (term "1,0,0,0,1,0"))
                           (rule "polySimp_mulLiterals" (formula "9") (term "1,1,0,0,0,1,0"))
                           (rule "mul_literals" (formula "9") (term "0,1,0,0,0,1,0"))
                           (rule "polySimp_elimOne" (formula "9") (term "1,1,0,0,0,1,0"))
                           (rule "inEqSimp_sepPosMonomial0" (formula "9") (term "0,0,0"))
                           (rule "polySimp_mulComm0" (formula "9") (term "1,0,0,0"))
                           (rule "polySimp_rightDist" (formula "9") (term "1,0,0,0"))
                           (rule "polySimp_mulLiterals" (formula "9") (term "1,1,0,0,0"))
                           (rule "mul_literals" (formula "9") (term "0,1,0,0,0"))
                           (rule "polySimp_elimOne" (formula "9") (term "1,1,0,0,0"))
                           (rule "inEqSimp_sepPosMonomial0" (formula "13") (term "0,0,0,0,0"))
                           (rule "polySimp_mulComm0" (formula "13") (term "1,0,0,0,0,0"))
                           (rule "polySimp_rightDist" (formula "13") (term "1,0,0,0,0,0"))
                           (rule "polySimp_mulLiterals" (formula "13") (term "1,1,0,0,0,0,0"))
                           (rule "mul_literals" (formula "13") (term "0,1,0,0,0,0,0"))
                           (rule "polySimp_elimOne" (formula "13") (term "1,1,0,0,0,0,0"))
                           (rule "inEqSimp_sepNegMonomial0" (formula "20"))
                           (rule "polySimp_mulLiterals" (formula "20") (term "0"))
                           (rule "polySimp_elimOne" (formula "20") (term "0"))
                           (rule "inEqSimp_contradEq7" (formula "30") (ifseqformula "20"))
                           (rule "polySimp_rightDist" (formula "30") (term "1,0,0"))
                           (rule "mul_literals" (formula "30") (term "0,1,0,0"))
                           (rule "polySimp_addAssoc" (formula "30") (term "0,0"))
                           (rule "polySimp_addComm0" (formula "30") (term "0,0,0"))
                           (rule "polySimp_pullOutFactor1b" (formula "30") (term "0,0"))
                           (rule "add_literals" (formula "30") (term "1,1,0,0"))
                           (rule "times_zero_1" (formula "30") (term "1,0,0"))
                           (rule "add_zero_right" (formula "30") (term "0,0"))
                           (rule "leq_literals" (formula "30") (term "0"))
                            (builtin "One Step Simplification" (formula "30"))
                           (rule "false_right" (formula "30"))
                           (rule "inEqSimp_and_subsumption3" (formula "12") (term "0,0,0"))
                           (rule "leq_literals" (formula "12") (term "0,1,0,0,0,0"))
                            (builtin "One Step Simplification" (formula "12"))
                           (rule "inEqSimp_and_subsumption3" (formula "13") (term "0,0,0"))
                           (rule "leq_literals" (formula "13") (term "0,1,0,0,0,0"))
                            (builtin "One Step Simplification" (formula "13"))
                           (rule "nnf_imp2or" (formula "10") (term "0"))
                           (rule "nnf_imp2or" (formula "9") (term "0"))
                           (rule "nnf_imp2or" (formula "12") (term "0"))
                           (rule "nnf_imp2or" (formula "13") (term "0"))
                           (rule "nnf_notAnd" (formula "10") (term "0,0"))
                           (rule "inEqSimp_notGeq" (formula "10") (term "1,0,0"))
                           (rule "times_zero_1" (formula "10") (term "1,0,0,1,0,0"))
                           (rule "add_zero_right" (formula "10") (term "0,0,1,0,0"))
                           (rule "inEqSimp_sepPosMonomial0" (formula "10") (term "1,0,0"))
                           (rule "mul_literals" (formula "10") (term "1,1,0,0"))
                           (rule "inEqSimp_notLeq" (formula "10") (term "0,0,0"))
                           (rule "polySimp_rightDist" (formula "10") (term "1,0,0,0,0,0"))
                           (rule "mul_literals" (formula "10") (term "0,1,0,0,0,0,0"))
                           (rule "polySimp_addAssoc" (formula "10") (term "0,0,0,0,0"))
                           (rule "add_literals" (formula "10") (term "0,0,0,0,0,0"))
                           (rule "add_zero_left" (formula "10") (term "0,0,0,0,0"))
                           (rule "inEqSimp_sepPosMonomial1" (formula "10") (term "0,0,0"))
                           (rule "polySimp_mulLiterals" (formula "10") (term "1,0,0,0"))
                           (rule "polySimp_elimOne" (formula "10") (term "1,0,0,0"))
                           (rule "nnf_notAnd" (formula "9") (term "0,0"))
                           (rule "inEqSimp_notLeq" (formula "9") (term "0,0,0"))
                           (rule "polySimp_rightDist" (formula "9") (term "1,0,0,0,0,0"))
                           (rule "mul_literals" (formula "9") (term "0,1,0,0,0,0,0"))
                           (rule "polySimp_addAssoc" (formula "9") (term "0,0,0,0,0"))
                           (rule "add_literals" (formula "9") (term "0,0,0,0,0,0"))
                           (rule "add_zero_left" (formula "9") (term "0,0,0,0,0"))
                           (rule "inEqSimp_sepPosMonomial1" (formula "9") (term "0,0,0"))
                           (rule "polySimp_mulLiterals" (formula "9") (term "1,0,0,0"))
                           (rule "polySimp_elimOne" (formula "9") (term "1,0,0,0"))
                           (rule "inEqSimp_notGeq" (formula "9") (term "1,0,0"))
                           (rule "mul_literals" (formula "9") (term "1,0,0,1,0,0"))
                           (rule "add_zero_right" (formula "9") (term "0,0,1,0,0"))
                           (rule "inEqSimp_sepPosMonomial0" (formula "9") (term "1,0,0"))
                           (rule "mul_literals" (formula "9") (term "1,1,0,0"))
                           (rule "nnf_notAnd" (formula "12") (term "0,0"))
                           (rule "inEqSimp_notLeq" (formula "12") (term "1,0,0"))
                           (rule "mul_literals" (formula "12") (term "1,0,0,1,0,0"))
                           (rule "add_literals" (formula "12") (term "0,0,1,0,0"))
                           (rule "inEqSimp_sepPosMonomial1" (formula "12") (term "1,0,0"))
                           (rule "mul_literals" (formula "12") (term "1,1,0,0"))
                           (rule "nnf_notAnd" (formula "13") (term "0,0"))
                           (rule "inEqSimp_notLeq" (formula "13") (term "1,0,0"))
                           (rule "mul_literals" (formula "13") (term "1,0,0,1,0,0"))
                           (rule "add_literals" (formula "13") (term "0,0,1,0,0"))
                           (rule "inEqSimp_sepPosMonomial1" (formula "13") (term "1,0,0"))
                           (rule "mul_literals" (formula "13") (term "1,1,0,0"))
                           (rule "nnf_notAnd" (formula "12") (term "0,0,0"))
                           (rule "inEqSimp_notLeq" (formula "12") (term "0,0,0,0"))
                           (rule "polySimp_rightDist" (formula "12") (term "1,0,0,0,0,0,0"))
                           (rule "mul_literals" (formula "12") (term "0,1,0,0,0,0,0,0"))
                           (rule "polySimp_addAssoc" (formula "12") (term "0,0,0,0,0,0"))
                           (rule "add_literals" (formula "12") (term "0,0,0,0,0,0,0"))
                           (rule "add_zero_left" (formula "12") (term "0,0,0,0,0,0"))
                           (rule "inEqSimp_sepPosMonomial1" (formula "12") (term "0,0,0,0"))
                           (rule "polySimp_mulLiterals" (formula "12") (term "1,0,0,0,0"))
                           (rule "polySimp_elimOne" (formula "12") (term "1,0,0,0,0"))
                           (rule "inEqSimp_notGeq" (formula "12") (term "1,0,0,0"))
                           (rule "mul_literals" (formula "12") (term "1,0,0,1,0,0,0"))
                           (rule "add_zero_right" (formula "12") (term "0,0,1,0,0,0"))
                           (rule "inEqSimp_sepPosMonomial0" (formula "12") (term "1,0,0,0"))
                           (rule "mul_literals" (formula "12") (term "1,1,0,0,0"))
                           (rule "nnf_notAnd" (formula "13") (term "0,0,0"))
                           (rule "inEqSimp_notLeq" (formula "13") (term "0,0,0,0"))
                           (rule "polySimp_rightDist" (formula "13") (term "1,0,0,0,0,0,0"))
                           (rule "mul_literals" (formula "13") (term "0,1,0,0,0,0,0,0"))
                           (rule "polySimp_addAssoc" (formula "13") (term "0,0,0,0,0,0"))
                           (rule "add_literals" (formula "13") (term "0,0,0,0,0,0,0"))
                           (rule "add_zero_left" (formula "13") (term "0,0,0,0,0,0"))
                           (rule "inEqSimp_sepPosMonomial1" (formula "13") (term "0,0,0,0"))
                           (rule "polySimp_mulLiterals" (formula "13") (term "1,0,0,0,0"))
                           (rule "polySimp_elimOne" (formula "13") (term "1,0,0,0,0"))
                           (rule "inEqSimp_notGeq" (formula "13") (term "1,0,0,0"))
                           (rule "mul_literals" (formula "13") (term "1,0,0,1,0,0,0"))
                           (rule "add_zero_right" (formula "13") (term "0,0,1,0,0,0"))
                           (rule "inEqSimp_sepPosMonomial0" (formula "13") (term "1,0,0,0"))
                           (rule "mul_literals" (formula "13") (term "1,1,0,0,0"))
                           (rule "Class_invariant_axiom_for_java_util_ArrayList" (formula "31"))
                           (rule "closeTrue" (formula "31"))
                        )
                        (branch
                           (rule "notRight" (formula "35"))
                           (rule "polySimp_homoEq" (formula "30") (term "1"))
                           (rule "polySimp_addComm1" (formula "30") (term "0,1"))
                           (rule "inEqSimp_ltToLeq" (formula "11") (term "0,0,0"))
                           (rule "polySimp_mulComm0" (formula "11") (term "1,0,0,0,0,0"))
                           (rule "inEqSimp_ltToLeq" (formula "13") (term "0,0,0,0,0"))
                           (rule "polySimp_mulComm0" (formula "13") (term "1,0,0,0,0,0,0,0"))
                           (rule "inEqSimp_ltToLeq" (formula "23") (term "1"))
                           (rule "polySimp_mulComm0" (formula "23") (term "1,0,0,1"))
                           (rule "polySimp_addComm1" (formula "23") (term "0,1"))
                           (rule "inEqSimp_ltToLeq" (formula "14") (term "0,0,0,0,0"))
                           (rule "polySimp_mulComm0" (formula "14") (term "1,0,0,0,0,0,0,0"))
                           (rule "inEqSimp_ltToLeq" (formula "28") (term "0"))
                           (rule "polySimp_mulComm0" (formula "28") (term "1,0,0,0"))
                           (rule "polySimp_addComm1" (formula "28") (term "0,0"))
                           (rule "inEqSimp_ltToLeq" (formula "10") (term "0,0,0,1,0"))
                           (rule "polySimp_mulComm0" (formula "10") (term "1,0,0,0,0,0,1,0"))
                           (rule "inEqSimp_ltToLeq" (formula "29") (term "0"))
                           (rule "polySimp_mulComm0" (formula "29") (term "1,0,0,0"))
                           (rule "polySimp_addComm1" (formula "29") (term "0,0"))
                           (rule "inEqSimp_ltToLeq" (formula "10") (term "0,0,0"))
                           (rule "polySimp_mulComm0" (formula "10") (term "1,0,0,0,0,0"))
                           (rule "inEqSimp_ltToLeq" (formula "18") (term "0,0,0"))
                           (rule "polySimp_mulComm0" (formula "18") (term "1,0,0,0,0,0"))
                           (rule "inEqSimp_ltToLeq" (formula "30") (term "0"))
                           (rule "polySimp_mulComm0" (formula "30") (term "1,0,0,0"))
                           (rule "polySimp_addComm1" (formula "30") (term "0,0"))
                           (rule "applyEq" (formula "18") (term "0,0,1,0,0,0,0,0") (ifseqformula "19"))
                           (rule "applyEq" (formula "30") (term "0,0,1,0,0") (ifseqformula "19"))
                           (rule "applyEq" (formula "28") (term "0,0,1,0,0") (ifseqformula "19"))
                           (rule "applyEq" (formula "23") (term "0,1,0,1") (ifseqformula "17"))
                           (rule "applyEq" (formula "29") (term "0,1,0,0") (ifseqformula "17"))
                           (rule "applyEq" (formula "24") (term "4") (ifseqformula "22"))
                           (rule "applyEq" (formula "18") (term "0,0,1,0") (ifseqformula "19"))
                            (builtin "One Step Simplification" (formula "18"))
                           (rule "true_left" (formula "18"))
                           (rule "applyEq" (formula "3") (term "1") (ifseqformula "19"))
                           (rule "replace_known_left" (formula "22") (term "0") (ifseqformula "3"))
                            (builtin "One Step Simplification" (formula "22"))
                           (rule "replace_known_left" (formula "29") (term "0") (ifseqformula "22"))
                            (builtin "One Step Simplification" (formula "29"))
                           (rule "replace_known_left" (formula "27") (term "0") (ifseqformula "22"))
                            (builtin "One Step Simplification" (formula "27"))
                           (rule "replace_known_left" (formula "28") (term "0") (ifseqformula "22"))
                            (builtin "One Step Simplification" (formula "28"))
                           (rule "notLeft" (formula "28"))
                           (rule "replace_known_right" (formula "2") (term "0") (ifseqformula "34"))
                            (builtin "One Step Simplification" (formula "2"))
                           (rule "replace_known_right" (formula "26") (term "0,0") (ifseqformula "34"))
                            (builtin "One Step Simplification" (formula "26"))
                           (rule "replace_known_right" (formula "29") (term "1") (ifseqformula "34"))
                            (builtin "One Step Simplification" (formula "29"))
                           (rule "notLeft" (formula "29"))
                           (rule "replace_known_right" (formula "29") (term "0") (ifseqformula "33"))
                            (builtin "One Step Simplification" (formula "29"))
                           (rule "true_left" (formula "29"))
                           (rule "applyEq" (formula "17") (term "0,0") (ifseqformula "18"))
                            (builtin "One Step Simplification" (formula "17"))
                           (rule "true_left" (formula "17"))
                           (rule "applyEq" (formula "30") (term "4") (ifseqformula "29"))
                           (rule "applyEq" (formula "14") (term "0,1,0,0,0,0,0,0,0") (ifseqformula "12"))
                           (rule "applyEq" (formula "22") (term "3") (ifseqformula "3"))
                           (rule "applyEq" (formula "31") (term "0,0") (ifseqformula "17"))
                           (rule "applyEq" (formula "26") (term "0,0") (ifseqformula "17"))
                           (rule "polySimp_sepPosMonomial" (formula "27"))
                           (rule "polySimp_mulComm0" (formula "27") (term "1"))
                           (rule "polySimp_rightDist" (formula "27") (term "1"))
                           (rule "polySimp_mulLiterals" (formula "27") (term "1,1"))
                           (rule "mul_literals" (formula "27") (term "0,1"))
                           (rule "polySimp_elimOne" (formula "27") (term "1,1"))
                           (rule "applyEq" (formula "26") (term "1,0") (ifseqformula "27"))
                           (rule "applyEq" (formula "21") (term "1,0,0") (ifseqformula "27"))
                           (rule "polySimp_addAssoc" (formula "21") (term "0,0"))
                           (rule "add_literals" (formula "21") (term "0,0,0"))
                           (rule "add_zero_left" (formula "21") (term "0,0"))
                           (rule "applyEq" (formula "31") (term "1") (ifseqformula "27"))
                           (rule "inEqSimp_sepPosMonomial0" (formula "11") (term "0,0,0"))
                           (rule "polySimp_mulComm0" (formula "11") (term "1,0,0,0"))
                           (rule "polySimp_rightDist" (formula "11") (term "1,0,0,0"))
                           (rule "mul_literals" (formula "11") (term "0,1,0,0,0"))
                           (rule "polySimp_mulLiterals" (formula "11") (term "1,1,0,0,0"))
                           (rule "polySimp_elimOne" (formula "11") (term "1,1,0,0,0"))
                           (rule "inEqSimp_sepPosMonomial0" (formula "13") (term "0,0,0,0,0"))
                           (rule "polySimp_mulComm0" (formula "13") (term "1,0,0,0,0,0"))
                           (rule "polySimp_rightDist" (formula "13") (term "1,0,0,0,0,0"))
                           (rule "polySimp_mulLiterals" (formula "13") (term "1,1,0,0,0,0,0"))
                           (rule "mul_literals" (formula "13") (term "0,1,0,0,0,0,0"))
                           (rule "polySimp_elimOne" (formula "13") (term "1,1,0,0,0,0,0"))
                           (rule "inEqSimp_sepPosMonomial0" (formula "10") (term "0,0,0,1,0"))
                           (rule "polySimp_mulComm0" (formula "10") (term "1,0,0,0,1,0"))
                           (rule "polySimp_rightDist" (formula "10") (term "1,0,0,0,1,0"))
                           (rule "mul_literals" (formula "10") (term "0,1,0,0,0,1,0"))
                           (rule "polySimp_mulLiterals" (formula "10") (term "1,1,0,0,0,1,0"))
                           (rule "polySimp_elimOne" (formula "10") (term "1,1,0,0,0,1,0"))
                           (rule "inEqSimp_sepPosMonomial0" (formula "10") (term "0,0,0"))
                           (rule "polySimp_mulComm0" (formula "10") (term "1,0,0,0"))
                           (rule "polySimp_rightDist" (formula "10") (term "1,0,0,0"))
                           (rule "polySimp_mulLiterals" (formula "10") (term "1,1,0,0,0"))
                           (rule "mul_literals" (formula "10") (term "0,1,0,0,0"))
                           (rule "polySimp_elimOne" (formula "10") (term "1,1,0,0,0"))
                           (rule "inEqSimp_sepPosMonomial0" (formula "14") (term "0,0,0,0,0"))
                           (rule "polySimp_mulComm0" (formula "14") (term "1,0,0,0,0,0"))
                           (rule "polySimp_rightDist" (formula "14") (term "1,0,0,0,0,0"))
                           (rule "polySimp_mulLiterals" (formula "14") (term "1,1,0,0,0,0,0"))
                           (rule "mul_literals" (formula "14") (term "0,1,0,0,0,0,0"))
                           (rule "polySimp_elimOne" (formula "14") (term "1,1,0,0,0,0,0"))
                           (rule "inEqSimp_sepNegMonomial0" (formula "21"))
                           (rule "polySimp_mulLiterals" (formula "21") (term "0"))
                           (rule "polySimp_elimOne" (formula "21") (term "0"))
                           (rule "inEqSimp_contradEq7" (formula "31") (ifseqformula "21"))
                           (rule "polySimp_rightDist" (formula "31") (term "1,0,0"))
                           (rule "mul_literals" (formula "31") (term "0,1,0,0"))
                           (rule "polySimp_addAssoc" (formula "31") (term "0,0"))
                           (rule "polySimp_addComm0" (formula "31") (term "0,0,0"))
                           (rule "polySimp_pullOutFactor1b" (formula "31") (term "0,0"))
                           (rule "add_literals" (formula "31") (term "1,1,0,0"))
                           (rule "times_zero_1" (formula "31") (term "1,0,0"))
                           (rule "add_zero_right" (formula "31") (term "0,0"))
                           (rule "leq_literals" (formula "31") (term "0"))
                            (builtin "One Step Simplification" (formula "31"))
                           (rule "false_right" (formula "31"))
                           (rule "inEqSimp_and_subsumption3" (formula "13") (term "0,0,0"))
                           (rule "leq_literals" (formula "13") (term "0,1,0,0,0,0"))
                            (builtin "One Step Simplification" (formula "13"))
                           (rule "inEqSimp_and_subsumption3" (formula "14") (term "0,0,0"))
                           (rule "leq_literals" (formula "14") (term "0,1,0,0,0,0"))
                            (builtin "One Step Simplification" (formula "14"))
                           (rule "nnf_imp2or" (formula "11") (term "0"))
                           (rule "nnf_imp2or" (formula "10") (term "0"))
                           (rule "nnf_imp2or" (formula "13") (term "0"))
                           (rule "nnf_imp2or" (formula "14") (term "0"))
                           (rule "nnf_notAnd" (formula "11") (term "0,0"))
                           (rule "inEqSimp_notGeq" (formula "11") (term "1,0,0"))
                           (rule "times_zero_1" (formula "11") (term "1,0,0,1,0,0"))
                           (rule "add_literals" (formula "11") (term "0,0,1,0,0"))
                           (rule "inEqSimp_sepPosMonomial0" (formula "11") (term "1,0,0"))
                           (rule "mul_literals" (formula "11") (term "1,1,0,0"))
                           (rule "inEqSimp_notLeq" (formula "11") (term "0,0,0"))
                           (rule "polySimp_rightDist" (formula "11") (term "1,0,0,0,0,0"))
                           (rule "mul_literals" (formula "11") (term "0,1,0,0,0,0,0"))
                           (rule "polySimp_addAssoc" (formula "11") (term "0,0,0,0,0"))
                           (rule "add_literals" (formula "11") (term "0,0,0,0,0,0"))
                           (rule "add_zero_left" (formula "11") (term "0,0,0,0,0"))
                           (rule "inEqSimp_sepPosMonomial1" (formula "11") (term "0,0,0"))
                           (rule "polySimp_mulLiterals" (formula "11") (term "1,0,0,0"))
                           (rule "polySimp_elimOne" (formula "11") (term "1,0,0,0"))
                           (rule "nnf_notAnd" (formula "10") (term "0,0"))
                           (rule "inEqSimp_notLeq" (formula "10") (term "0,0,0"))
                           (rule "polySimp_rightDist" (formula "10") (term "1,0,0,0,0,0"))
                           (rule "mul_literals" (formula "10") (term "0,1,0,0,0,0,0"))
                           (rule "polySimp_addAssoc" (formula "10") (term "0,0,0,0,0"))
                           (rule "add_literals" (formula "10") (term "0,0,0,0,0,0"))
                           (rule "add_zero_left" (formula "10") (term "0,0,0,0,0"))
                           (rule "inEqSimp_sepPosMonomial1" (formula "10") (term "0,0,0"))
                           (rule "polySimp_mulLiterals" (formula "10") (term "1,0,0,0"))
                           (rule "polySimp_elimOne" (formula "10") (term "1,0,0,0"))
                           (rule "inEqSimp_notGeq" (formula "10") (term "1,0,0"))
                           (rule "times_zero_1" (formula "10") (term "1,0,0,1,0,0"))
                           (rule "add_literals" (formula "10") (term "0,0,1,0,0"))
                           (rule "inEqSimp_sepPosMonomial0" (formula "10") (term "1,0,0"))
                           (rule "mul_literals" (formula "10") (term "1,1,0,0"))
                           (rule "nnf_notAnd" (formula "13") (term "0,0"))
                           (rule "inEqSimp_notLeq" (formula "13") (term "1,0,0"))
                           (rule "mul_literals" (formula "13") (term "1,0,0,1,0,0"))
                           (rule "add_literals" (formula "13") (term "0,0,1,0,0"))
                           (rule "inEqSimp_sepPosMonomial1" (formula "13") (term "1,0,0"))
                           (rule "mul_literals" (formula "13") (term "1,1,0,0"))
                           (rule "nnf_notAnd" (formula "14") (term "0,0"))
                           (rule "inEqSimp_notLeq" (formula "14") (term "1,0,0"))
                           (rule "mul_literals" (formula "14") (term "1,0,0,1,0,0"))
                           (rule "add_literals" (formula "14") (term "0,0,1,0,0"))
                           (rule "inEqSimp_sepPosMonomial1" (formula "14") (term "1,0,0"))
                           (rule "mul_literals" (formula "14") (term "1,1,0,0"))
                           (rule "nnf_notAnd" (formula "13") (term "0,0,0"))
                           (rule "inEqSimp_notGeq" (formula "13") (term "1,0,0,0"))
                           (rule "times_zero_1" (formula "13") (term "1,0,0,1,0,0,0"))
                           (rule "add_zero_right" (formula "13") (term "0,0,1,0,0,0"))
                           (rule "inEqSimp_sepPosMonomial0" (formula "13") (term "1,0,0,0"))
                           (rule "mul_literals" (formula "13") (term "1,1,0,0,0"))
                           (rule "inEqSimp_notLeq" (formula "13") (term "0,0,0,0"))
                           (rule "polySimp_rightDist" (formula "13") (term "1,0,0,0,0,0,0"))
                           (rule "mul_literals" (formula "13") (term "0,1,0,0,0,0,0,0"))
                           (rule "polySimp_addAssoc" (formula "13") (term "0,0,0,0,0,0"))
                           (rule "add_literals" (formula "13") (term "0,0,0,0,0,0,0"))
                           (rule "add_zero_left" (formula "13") (term "0,0,0,0,0,0"))
                           (rule "inEqSimp_sepPosMonomial1" (formula "13") (term "0,0,0,0"))
                           (rule "polySimp_mulLiterals" (formula "13") (term "1,0,0,0,0"))
                           (rule "polySimp_elimOne" (formula "13") (term "1,0,0,0,0"))
                           (rule "nnf_notAnd" (formula "14") (term "0,0,0"))
                           (rule "inEqSimp_notLeq" (formula "14") (term "0,0,0,0"))
                           (rule "polySimp_rightDist" (formula "14") (term "1,0,0,0,0,0,0"))
                           (rule "mul_literals" (formula "14") (term "0,1,0,0,0,0,0,0"))
                           (rule "polySimp_addAssoc" (formula "14") (term "0,0,0,0,0,0"))
                           (rule "add_literals" (formula "14") (term "0,0,0,0,0,0,0"))
                           (rule "add_zero_left" (formula "14") (term "0,0,0,0,0,0"))
                           (rule "inEqSimp_sepPosMonomial1" (formula "14") (term "0,0,0,0"))
                           (rule "polySimp_mulLiterals" (formula "14") (term "1,0,0,0,0"))
                           (rule "polySimp_elimOne" (formula "14") (term "1,0,0,0,0"))
                           (rule "inEqSimp_notGeq" (formula "14") (term "1,0,0,0"))
                           (rule "times_zero_1" (formula "14") (term "1,0,0,1,0,0,0"))
                           (rule "add_zero_right" (formula "14") (term "0,0,1,0,0,0"))
                           (rule "inEqSimp_sepPosMonomial0" (formula "14") (term "1,0,0,0"))
                           (rule "mul_literals" (formula "14") (term "1,1,0,0,0"))
                           (rule "commute_or_2" (formula "11") (term "0"))
                           (rule "commute_or" (formula "10") (term "0,0"))
                           (rule "commute_or_2" (formula "13") (term "0"))
                           (rule "commute_or_2" (formula "14") (term "0"))
                           (rule "commute_or" (formula "11") (term "0,0"))
                           (rule "commute_or_2" (formula "11") (term "0"))
                           (rule "commute_or_2" (formula "13") (term "0,0"))
                           (rule "commute_or_2" (formula "14") (term "0,0"))
                           (rule "commute_and" (formula "10") (term "0,0,1,0"))
                           (rule "commute_or" (formula "13") (term "0,0,0"))
                           (rule "commute_or_2" (formula "13") (term "0,0"))
                           (rule "commute_or_2" (formula "13") (term "0"))
                           (rule "commute_or" (formula "14") (term "0,0,0"))
                           (rule "commute_or_2" (formula "14") (term "0,0"))
                           (rule "commute_or_2" (formula "14") (term "0"))
                           (rule "commute_and_2" (formula "10") (term "0,1,0"))
                           (rule "lenNonNegative" (formula "12") (term "1"))
                           (rule "inEqSimp_commuteLeq" (formula "12"))
                           (rule "lenNonNegative" (formula "13") (term "0"))
                           (rule "inEqSimp_commuteLeq" (formula "13"))
                           (rule "applyEq" (formula "13") (term "0") (ifseqformula "14"))
                           (rule "seqGetAlphaCast" (formula "27") (term "0"))
                           (rule "castedGetAny" (formula "27") (term "0"))
                            (builtin "One Step Simplification" (formula "27"))
                           (rule "true_left" (formula "27"))
                           (rule "ex_pull_out3" (formula "10") (term "0"))
                           (rule "cnf_rightDist" (formula "10") (term "0,0"))
                           (rule "shift_paren_or" (formula "10") (term "1,0,0"))
                           (rule "cnf_rightDist" (formula "10") (term "0,0,0"))
                           (rule "commute_or_2" (formula "10") (term "0,0,0,0"))
                           (rule "shift_paren_or" (formula "10") (term "1,0,0,0"))
                           (rule "commute_or" (formula "10") (term "0,0,0,0,0"))
                           (rule "lenNonNegative" (formula "22") (term "0"))
                           (rule "inEqSimp_commuteLeq" (formula "22"))
                           (rule "commute_and" (formula "10") (term "0,0,0"))
                           (rule "commute_and_2" (formula "10") (term "0,0"))
                           (rule "ineffectiveCast" (formula "1") (term "0") (ifseqformula "2"))
                           (rule "typeEqDerived2" (formula "3") (term "0") (ifseqformula "1"))
                            (builtin "One Step Simplification" (formula "3"))
                           (rule "true_left" (formula "3"))
                           (rule "applyEq" (formula "1") (term "0") (ifseqformula "2"))
                           (rule "eqSymm" (formula "1"))
                           (rule "close" (formula "33") (ifseqformula "1"))
                        )
                     )
                  )
               )
               (branch
                  (rule "andRight" (formula "35"))
                  (branch
                     (rule "andRight" (formula "35"))
                     (branch
                        (rule "andRight" (formula "35"))
                        (branch
                           (rule "wellFormedAnonEQ" (formula "35") (ifseqformula "25"))
                           (rule "replace_known_left" (formula "35") (term "0") (ifseqformula "3"))
                            (builtin "One Step Simplification" (formula "35") (ifInst ""  (formula "24")))
                           (rule "closeTrue" (formula "35"))
                        )
                        (branch
                           (rule "selectCreatedOfAnonAsFormulaEQ" (formula "35") (ifseqformula "25"))
                           (rule "orRight" (formula "35"))
                           (rule "close" (formula "35") (ifseqformula "7"))
                        )
                     )
                     (branch
                        (rule "orRight" (formula "35"))
                        (rule "selectCreatedOfAnonAsFormulaEQ" (formula "36") (ifseqformula "25"))
                        (rule "orRight" (formula "36"))
                        (rule "polySimp_homoEq" (formula "29") (term "1"))
                        (rule "polySimp_addComm1" (formula "29") (term "0,1"))
                        (rule "inEqSimp_ltToLeq" (formula "17") (term "0,0,0"))
                        (rule "polySimp_mulComm0" (formula "17") (term "1,0,0,0,0,0"))
                        (rule "inEqSimp_ltToLeq" (formula "27") (term "0"))
                        (rule "polySimp_mulComm0" (formula "27") (term "1,0,0,0"))
                        (rule "polySimp_addComm1" (formula "27") (term "0,0"))
                        (rule "inEqSimp_ltToLeq" (formula "29") (term "0"))
                        (rule "polySimp_mulComm0" (formula "29") (term "1,0,0,0"))
                        (rule "polySimp_addComm1" (formula "29") (term "0,0"))
                        (rule "inEqSimp_ltToLeq" (formula "9") (term "0,0,0,1,0"))
                        (rule "polySimp_mulComm0" (formula "9") (term "1,0,0,0,0,0,1,0"))
                        (rule "inEqSimp_ltToLeq" (formula "28") (term "0"))
                        (rule "polySimp_mulComm0" (formula "28") (term "1,0,0,0"))
                        (rule "polySimp_addComm1" (formula "28") (term "0,0"))
                        (rule "inEqSimp_ltToLeq" (formula "10") (term "0,0,0"))
                        (rule "polySimp_mulComm0" (formula "10") (term "1,0,0,0,0,0"))
                        (rule "inEqSimp_ltToLeq" (formula "9") (term "0,0,0"))
                        (rule "polySimp_mulComm0" (formula "9") (term "1,0,0,0,0,0"))
                        (rule "inEqSimp_ltToLeq" (formula "12") (term "0,0,0,0,0"))
                        (rule "polySimp_mulComm0" (formula "12") (term "1,0,0,0,0,0,0,0"))
                        (rule "inEqSimp_ltToLeq" (formula "22") (term "1"))
                        (rule "polySimp_mulComm0" (formula "22") (term "1,0,0,1"))
                        (rule "polySimp_addComm1" (formula "22") (term "0,1"))
                        (rule "inEqSimp_ltToLeq" (formula "13") (term "0,0,0,0,0"))
                        (rule "polySimp_mulComm0" (formula "13") (term "1,0,0,0,0,0,0,0"))
                        (rule "applyEq" (formula "31") (term "0,0,0") (ifseqformula "18"))
                        (rule "applyEq" (formula "29") (term "0,0,1,0,0") (ifseqformula "18"))
                        (rule "applyEq" (formula "23") (term "4") (ifseqformula "21"))
                        (rule "applyEq" (formula "23") (term "3") (ifseqformula "2"))
                        (rule "applyEq" (formula "2") (term "1") (ifseqformula "19"))
                        (rule "replace_known_left" (formula "22") (term "0") (ifseqformula "2"))
                         (builtin "One Step Simplification" (formula "22"))
                        (rule "replace_known_left" (formula "27") (term "0") (ifseqformula "22"))
                         (builtin "One Step Simplification" (formula "27"))
                        (rule "replace_known_left" (formula "28") (term "0") (ifseqformula "22"))
                         (builtin "One Step Simplification" (formula "28"))
                        (rule "notLeft" (formula "28"))
                        (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "34"))
                         (builtin "One Step Simplification" (formula "1"))
                        (rule "replace_known_right" (formula "26") (term "0,0") (ifseqformula "34"))
                         (builtin "One Step Simplification" (formula "26"))
                        (rule "replace_known_right" (formula "29") (term "1") (ifseqformula "34"))
                         (builtin "One Step Simplification" (formula "29"))
                        (rule "notLeft" (formula "29"))
                        (rule "applyEq" (formula "17") (term "0,0,1,0") (ifseqformula "18"))
                         (builtin "One Step Simplification" (formula "17"))
                        (rule "true_left" (formula "17"))
                        (rule "applyEq" (formula "16") (term "0,0") (ifseqformula "17"))
                         (builtin "One Step Simplification" (formula "16"))
                        (rule "true_left" (formula "16"))
                        (rule "applyEq" (formula "30") (term "4") (ifseqformula "29"))
                        (rule "applyEq" (formula "31") (term "0,0") (ifseqformula "16"))
                        (rule "replace_known_right" (formula "27") (term "0") (ifseqformula "31"))
                         (builtin "One Step Simplification" (formula "27"))
                        (rule "true_left" (formula "27"))
                        (rule "applyEq" (formula "25") (term "0,0") (ifseqformula "16"))
                        (rule "applyEq" (formula "21") (term "3") (ifseqformula "17"))
                        (rule "applyEq" (formula "20") (term "0,0,1,0") (ifseqformula "16"))
                        (rule "replace_known_left" (formula "26") (term "0") (ifseqformula "20"))
                         (builtin "One Step Simplification" (formula "26"))
                        (rule "applyEq" (formula "13") (term "0,1,0,0,0,0,0,0,0") (ifseqformula "11"))
                        (rule "polySimp_sepPosMonomial" (formula "26"))
                        (rule "polySimp_mulComm0" (formula "26") (term "1"))
                        (rule "polySimp_rightDist" (formula "26") (term "1"))
                        (rule "polySimp_mulLiterals" (formula "26") (term "1,1"))
                        (rule "mul_literals" (formula "26") (term "0,1"))
                        (rule "polySimp_elimOne" (formula "26") (term "1,1"))
                        (rule "applyEq" (formula "25") (term "1,0") (ifseqformula "26"))
                        (rule "applyEq" (formula "20") (term "1,0,0") (ifseqformula "26"))
                        (rule "polySimp_addAssoc" (formula "20") (term "0,0"))
                        (rule "add_literals" (formula "20") (term "0,0,0"))
                        (rule "add_zero_left" (formula "20") (term "0,0"))
                        (rule "applyEq" (formula "30") (term "1") (ifseqformula "26"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "9") (term "0,0,0,1,0"))
                        (rule "polySimp_mulComm0" (formula "9") (term "1,0,0,0,1,0"))
                        (rule "polySimp_rightDist" (formula "9") (term "1,0,0,0,1,0"))
                        (rule "polySimp_mulLiterals" (formula "9") (term "1,1,0,0,0,1,0"))
                        (rule "mul_literals" (formula "9") (term "0,1,0,0,0,1,0"))
                        (rule "polySimp_elimOne" (formula "9") (term "1,1,0,0,0,1,0"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "10") (term "0,0,0"))
                        (rule "polySimp_mulComm0" (formula "10") (term "1,0,0,0"))
                        (rule "polySimp_rightDist" (formula "10") (term "1,0,0,0"))
                        (rule "polySimp_mulLiterals" (formula "10") (term "1,1,0,0,0"))
                        (rule "mul_literals" (formula "10") (term "0,1,0,0,0"))
                        (rule "polySimp_elimOne" (formula "10") (term "1,1,0,0,0"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "9") (term "0,0,0"))
                        (rule "polySimp_mulComm0" (formula "9") (term "1,0,0,0"))
                        (rule "polySimp_rightDist" (formula "9") (term "1,0,0,0"))
                        (rule "polySimp_mulLiterals" (formula "9") (term "1,1,0,0,0"))
                        (rule "mul_literals" (formula "9") (term "0,1,0,0,0"))
                        (rule "polySimp_elimOne" (formula "9") (term "1,1,0,0,0"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "12") (term "0,0,0,0,0"))
                        (rule "polySimp_mulComm0" (formula "12") (term "1,0,0,0,0,0"))
                        (rule "polySimp_rightDist" (formula "12") (term "1,0,0,0,0,0"))
                        (rule "polySimp_mulLiterals" (formula "12") (term "1,1,0,0,0,0,0"))
                        (rule "mul_literals" (formula "12") (term "0,1,0,0,0,0,0"))
                        (rule "polySimp_elimOne" (formula "12") (term "1,1,0,0,0,0,0"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "13") (term "0,0,0,0,0"))
                        (rule "polySimp_mulComm0" (formula "13") (term "1,0,0,0,0,0"))
                        (rule "polySimp_rightDist" (formula "13") (term "1,0,0,0,0,0"))
                        (rule "polySimp_mulLiterals" (formula "13") (term "1,1,0,0,0,0,0"))
                        (rule "mul_literals" (formula "13") (term "0,1,0,0,0,0,0"))
                        (rule "polySimp_elimOne" (formula "13") (term "1,1,0,0,0,0,0"))
                        (rule "inEqSimp_sepNegMonomial0" (formula "20"))
                        (rule "polySimp_mulLiterals" (formula "20") (term "0"))
                        (rule "polySimp_elimOne" (formula "20") (term "0"))
                        (rule "inEqSimp_contradEq7" (formula "30") (ifseqformula "20"))
                        (rule "polySimp_rightDist" (formula "30") (term "1,0,0"))
                        (rule "mul_literals" (formula "30") (term "0,1,0,0"))
                        (rule "polySimp_addAssoc" (formula "30") (term "0,0"))
                        (rule "polySimp_addComm0" (formula "30") (term "0,0,0"))
                        (rule "polySimp_pullOutFactor1b" (formula "30") (term "0,0"))
                        (rule "add_literals" (formula "30") (term "1,1,0,0"))
                        (rule "times_zero_1" (formula "30") (term "1,0,0"))
                        (rule "add_literals" (formula "30") (term "0,0"))
                        (rule "leq_literals" (formula "30") (term "0"))
                         (builtin "One Step Simplification" (formula "30"))
                        (rule "false_right" (formula "30"))
                        (rule "inEqSimp_and_subsumption3" (formula "12") (term "0,0,0"))
                        (rule "leq_literals" (formula "12") (term "0,1,0,0,0,0"))
                         (builtin "One Step Simplification" (formula "12"))
                        (rule "inEqSimp_and_subsumption3" (formula "13") (term "0,0,0"))
                        (rule "leq_literals" (formula "13") (term "0,1,0,0,0,0"))
                         (builtin "One Step Simplification" (formula "13"))
                        (rule "nnf_imp2or" (formula "10") (term "0"))
                        (rule "nnf_imp2or" (formula "9") (term "0"))
                        (rule "nnf_imp2or" (formula "12") (term "0"))
                        (rule "nnf_imp2or" (formula "13") (term "0"))
                        (rule "nnf_notAnd" (formula "10") (term "0,0"))
                        (rule "inEqSimp_notLeq" (formula "10") (term "0,0,0"))
                        (rule "polySimp_rightDist" (formula "10") (term "1,0,0,0,0,0"))
                        (rule "mul_literals" (formula "10") (term "0,1,0,0,0,0,0"))
                        (rule "polySimp_addAssoc" (formula "10") (term "0,0,0,0,0"))
                        (rule "add_literals" (formula "10") (term "0,0,0,0,0,0"))
                        (rule "add_zero_left" (formula "10") (term "0,0,0,0,0"))
                        (rule "inEqSimp_sepPosMonomial1" (formula "10") (term "0,0,0"))
                        (rule "polySimp_mulLiterals" (formula "10") (term "1,0,0,0"))
                        (rule "polySimp_elimOne" (formula "10") (term "1,0,0,0"))
                        (rule "inEqSimp_notGeq" (formula "10") (term "1,0,0"))
                        (rule "mul_literals" (formula "10") (term "1,0,0,1,0,0"))
                        (rule "add_zero_right" (formula "10") (term "0,0,1,0,0"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "10") (term "1,0,0"))
                        (rule "mul_literals" (formula "10") (term "1,1,0,0"))
                        (rule "nnf_notAnd" (formula "9") (term "0,0"))
                        (rule "inEqSimp_notLeq" (formula "9") (term "0,0,0"))
                        (rule "polySimp_rightDist" (formula "9") (term "1,0,0,0,0,0"))
                        (rule "mul_literals" (formula "9") (term "0,1,0,0,0,0,0"))
                        (rule "polySimp_addAssoc" (formula "9") (term "0,0,0,0,0"))
                        (rule "add_literals" (formula "9") (term "0,0,0,0,0,0"))
                        (rule "add_zero_left" (formula "9") (term "0,0,0,0,0"))
                        (rule "inEqSimp_sepPosMonomial1" (formula "9") (term "0,0,0"))
                        (rule "polySimp_mulLiterals" (formula "9") (term "1,0,0,0"))
                        (rule "polySimp_elimOne" (formula "9") (term "1,0,0,0"))
                        (rule "inEqSimp_notGeq" (formula "9") (term "1,0,0"))
                        (rule "times_zero_1" (formula "9") (term "1,0,0,1,0,0"))
                        (rule "add_literals" (formula "9") (term "0,0,1,0,0"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "9") (term "1,0,0"))
                        (rule "mul_literals" (formula "9") (term "1,1,0,0"))
                        (rule "nnf_notAnd" (formula "12") (term "0,0"))
                        (rule "inEqSimp_notLeq" (formula "12") (term "1,0,0"))
                        (rule "mul_literals" (formula "12") (term "1,0,0,1,0,0"))
                        (rule "add_literals" (formula "12") (term "0,0,1,0,0"))
                        (rule "inEqSimp_sepPosMonomial1" (formula "12") (term "1,0,0"))
                        (rule "mul_literals" (formula "12") (term "1,1,0,0"))
                        (rule "nnf_notAnd" (formula "13") (term "0,0"))
                        (rule "inEqSimp_notLeq" (formula "13") (term "1,0,0"))
                        (rule "mul_literals" (formula "13") (term "1,0,0,1,0,0"))
                        (rule "add_literals" (formula "13") (term "0,0,1,0,0"))
                        (rule "inEqSimp_sepPosMonomial1" (formula "13") (term "1,0,0"))
                        (rule "mul_literals" (formula "13") (term "1,1,0,0"))
                        (rule "nnf_notAnd" (formula "12") (term "0,0,0"))
                        (rule "inEqSimp_notGeq" (formula "12") (term "1,0,0,0"))
                        (rule "times_zero_1" (formula "12") (term "1,0,0,1,0,0,0"))
                        (rule "add_zero_right" (formula "12") (term "0,0,1,0,0,0"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "12") (term "1,0,0,0"))
                        (rule "mul_literals" (formula "12") (term "1,1,0,0,0"))
                        (rule "inEqSimp_notLeq" (formula "12") (term "0,0,0,0"))
                        (rule "polySimp_rightDist" (formula "12") (term "1,0,0,0,0,0,0"))
                        (rule "mul_literals" (formula "12") (term "0,1,0,0,0,0,0,0"))
                        (rule "polySimp_addAssoc" (formula "12") (term "0,0,0,0,0,0"))
                        (rule "add_literals" (formula "12") (term "0,0,0,0,0,0,0"))
                        (rule "add_zero_left" (formula "12") (term "0,0,0,0,0,0"))
                        (rule "inEqSimp_sepPosMonomial1" (formula "12") (term "0,0,0,0"))
                        (rule "polySimp_mulLiterals" (formula "12") (term "1,0,0,0,0"))
                        (rule "polySimp_elimOne" (formula "12") (term "1,0,0,0,0"))
                        (rule "nnf_notAnd" (formula "13") (term "0,0,0"))
                        (rule "inEqSimp_notGeq" (formula "13") (term "1,0,0,0"))
                        (rule "times_zero_1" (formula "13") (term "1,0,0,1,0,0,0"))
                        (rule "add_zero_right" (formula "13") (term "0,0,1,0,0,0"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "13") (term "1,0,0,0"))
                        (rule "mul_literals" (formula "13") (term "1,1,0,0,0"))
                        (rule "inEqSimp_notLeq" (formula "13") (term "0,0,0,0"))
                        (rule "polySimp_rightDist" (formula "13") (term "1,0,0,0,0,0,0"))
                        (rule "mul_literals" (formula "13") (term "0,1,0,0,0,0,0,0"))
                        (rule "polySimp_addAssoc" (formula "13") (term "0,0,0,0,0,0"))
                        (rule "add_literals" (formula "13") (term "0,0,0,0,0,0,0"))
                        (rule "add_zero_left" (formula "13") (term "0,0,0,0,0,0"))
                        (rule "inEqSimp_sepPosMonomial1" (formula "13") (term "0,0,0,0"))
                        (rule "polySimp_mulLiterals" (formula "13") (term "1,0,0,0,0"))
                        (rule "polySimp_elimOne" (formula "13") (term "1,0,0,0,0"))
                        (rule "commute_or_2" (formula "10") (term "0"))
                        (rule "commute_or" (formula "9") (term "0,0"))
                        (rule "commute_or_2" (formula "12") (term "0"))
                        (rule "commute_or_2" (formula "13") (term "0"))
                        (rule "commute_or" (formula "10") (term "0,0"))
                        (rule "commute_or_2" (formula "10") (term "0"))
                        (rule "commute_or_2" (formula "12") (term "0,0"))
                        (rule "commute_or_2" (formula "13") (term "0,0"))
                        (rule "commute_and" (formula "9") (term "0,0,1,0"))
                        (rule "commute_or" (formula "12") (term "0,0,0"))
                        (rule "commute_or_2" (formula "12") (term "0,0"))
                        (rule "commute_or_2" (formula "12") (term "0"))
                        (rule "commute_or" (formula "13") (term "0,0,0"))
                        (rule "commute_or_2" (formula "13") (term "0,0"))
                        (rule "commute_or_2" (formula "13") (term "0"))
                        (rule "commute_and_2" (formula "9") (term "0,1,0"))
                        (rule "lenNonNegative" (formula "11") (term "1"))
                        (rule "inEqSimp_commuteLeq" (formula "11"))
                        (rule "lenNonNegative" (formula "12") (term "0"))
                        (rule "inEqSimp_commuteLeq" (formula "12"))
                        (rule "applyEq" (formula "12") (term "0") (ifseqformula "13"))
                        (rule "seqGetAlphaCast" (formula "26") (term "0"))
                        (rule "castedGetAny" (formula "26") (term "0"))
                         (builtin "One Step Simplification" (formula "26"))
                        (rule "true_left" (formula "26"))
                        (rule "ex_pull_out3" (formula "9") (term "0"))
                        (rule "cnf_rightDist" (formula "9") (term "0,0"))
                        (rule "shift_paren_or" (formula "9") (term "1,0,0"))
                        (rule "cnf_rightDist" (formula "9") (term "0,0,0"))
                        (rule "commute_or_2" (formula "9") (term "0,0,0,0"))
                        (rule "shift_paren_or" (formula "9") (term "1,0,0,0"))
                        (rule "commute_or" (formula "9") (term "0,0,0,0,0"))
                        (rule "lenNonNegative" (formula "21") (term "0"))
                        (rule "inEqSimp_commuteLeq" (formula "21"))
                        (rule "commute_and" (formula "9") (term "0,0,0"))
                        (rule "commute_and_2" (formula "9") (term "0,0"))
                        (rule "ineffectiveCast" (formula "33") (term "0") (ifseqformula "1"))
                        (rule "typeEqDerived2" (formula "2") (term "0") (ifseqformula "1"))
                         (builtin "One Step Simplification" (formula "2"))
                        (rule "true_left" (formula "2"))
                        (rule "applyEq" (formula "35") (term "1,0") (ifseqformula "1"))
                        (rule "replace_known_right" (formula "26") (term "0") (ifseqformula "35"))
                         (builtin "One Step Simplification" (formula "26"))
                        (rule "applyEq" (formula "34") (term "1,0") (ifseqformula "1"))
                        (rule "close" (formula "34") (ifseqformula "26"))
                     )
                  )
                  (branch
                     (rule "selectCreatedOfAnonAsFormulaEQ" (formula "35") (ifseqformula "25"))
                     (rule "orRight" (formula "35"))
                     (rule "close" (formula "35") (ifseqformula "6"))
                  )
               )
            )
         )
         (branch "ClassCastException (!(o instanceof String))"
             (builtin "One Step Simplification" (formula "33"))
             (builtin "One Step Simplification" (formula "32"))
            (rule "orRight" (formula "32"))
            (rule "replace_known_right" (formula "25") (term "0,1") (ifseqformula "32"))
             (builtin "One Step Simplification" (formula "25"))
            (rule "true_left" (formula "25"))
            (rule "replace_known_right" (formula "23") (term "0,0") (ifseqformula "31"))
             (builtin "One Step Simplification" (formula "23"))
            (rule "replace_known_right" (formula "26") (term "1") (ifseqformula "31"))
             (builtin "One Step Simplification" (formula "26"))
            (rule "notLeft" (formula "26"))
            (rule "replace_known_right" (formula "26") (term "0") (ifseqformula "30"))
             (builtin "One Step Simplification" (formula "26"))
            (rule "true_left" (formula "26"))
            (rule "equalityToSeqGetAndSeqLenLeft" (formula "15") (inst "iv=iv"))
            (rule "andLeft" (formula "15"))
            (rule "inEqSimp_commuteLeq" (formula "16") (term "0,0,0"))
            (rule "commute_and" (formula "16") (term "0,0"))
            (rule "lenNonNegative" (formula "10") (term "1"))
            (rule "inEqSimp_commuteLeq" (formula "10"))
            (rule "lenNonNegative" (formula "11") (term "0"))
            (rule "inEqSimp_commuteLeq" (formula "11"))
            (rule "lenNonNegative" (formula "8") (term "1,0,0,0"))
            (rule "inEqSimp_commuteLeq" (formula "8"))
            (rule "lenNonNegative" (formula "24") (term "1,1"))
            (rule "inEqSimp_commuteLeq" (formula "24"))
            (rule "seqGetAlphaCast" (formula "30") (term "0,1"))
            (rule "castedGetAny" (formula "30") (term "0"))
             (builtin "One Step Simplification" (formula "30"))
            (rule "true_left" (formula "30"))
            (rule "throwUnfold" (formula "38") (term "1") (inst "#v0=c"))
            (rule "variableDeclarationAssign" (formula "38") (term "1"))
            (rule "variableDeclaration" (formula "38") (term "1") (newnames "c_1"))
            (rule "instanceCreationAssignment" (formula "38") (term "1") (inst "#v0=c_2"))
            (rule "variableDeclarationAssign" (formula "38") (term "1"))
            (rule "variableDeclaration" (formula "38") (term "1") (newnames "c_2"))
            (rule "staticMethodCallStaticWithAssignmentViaTypereference" (formula "38") (term "1") (inst "#v0=c_3"))
            (rule "variableDeclaration" (formula "38") (term "1") (newnames "c_3"))
            (rule "methodBodyExpand" (formula "38") (term "1") (newnames "heapBefore_<createObject>,savedHeapBefore_<createObject>"))
             (builtin "One Step Simplification" (formula "38"))
            (rule "variableDeclaration" (formula "38") (term "1") (newnames "__NEW__"))
            (rule "staticMethodCallStaticWithAssignmentViaTypereference" (formula "38") (term "1") (inst "#v0=c_4"))
            (rule "variableDeclaration" (formula "38") (term "1") (newnames "c_4"))
            (rule "allocateInstance" (formula "38"))
             (builtin "One Step Simplification" (formula "39"))
             (builtin "One Step Simplification" (formula "1"))
            (rule "wellFormedAnonEQ" (formula "1") (term "0,1,0") (ifseqformula "29"))
            (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,1,1,0") (ifseqformula "29"))
            (rule "andLeft" (formula "1"))
            (rule "andLeft" (formula "1"))
            (rule "notLeft" (formula "1"))
            (rule "replace_known_left" (formula "1") (term "0,0") (ifseqformula "4"))
             (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "29")))
            (rule "notLeft" (formula "1"))
            (rule "orRight" (formula "36"))
            (rule "blockEmpty" (formula "42") (term "1"))
            (rule "assignment" (formula "42") (term "1"))
             (builtin "One Step Simplification" (formula "42"))
            (rule "methodBodyExpand" (formula "42") (term "1") (newnames "heapBefore_<create>,savedHeapBefore_<create>"))
             (builtin "One Step Simplification" (formula "42"))
            (rule "assignment_write_attribute_this" (formula "42") (term "1"))
             (builtin "One Step Simplification" (formula "42"))
            (rule "methodCallWithinClass" (formula "42") (term "1"))
            (rule "methodBodyExpand" (formula "42") (term "1") (newnames "heapBefore_<prepareEnter>,savedHeapBefore_<prepareEnter>"))
             (builtin "One Step Simplification" (formula "42"))
            (rule "methodCallSuper" (formula "42") (term "1"))
            (rule "methodBodyExpand" (formula "42") (term "1") (newnames "heapBefore_<prepare>,savedHeapBefore_<prepare>"))
             (builtin "One Step Simplification" (formula "42"))
            (rule "methodCallSuper" (formula "42") (term "1"))
            (rule "methodBodyExpand" (formula "42") (term "1") (newnames "heapBefore_<prepare>_0,savedHeapBefore_<prepare>_0"))
             (builtin "One Step Simplification" (formula "42"))
            (rule "methodCallSuper" (formula "42") (term "1"))
            (rule "methodBodyExpand" (formula "42") (term "1") (newnames "heapBefore_<prepare>_1,savedHeapBefore_<prepare>_1"))
             (builtin "One Step Simplification" (formula "42"))
            (rule "methodCallSuper" (formula "42") (term "1"))
            (rule "methodBodyExpand" (formula "42") (term "1") (newnames "heapBefore_<prepare>_2,savedHeapBefore_<prepare>_2"))
             (builtin "One Step Simplification" (formula "42"))
            (rule "methodCallEmpty" (formula "42") (term "1"))
            (rule "blockEmpty" (formula "42") (term "1"))
            (rule "assignment_write_attribute_this" (formula "42") (term "1"))
             (builtin "One Step Simplification" (formula "42"))
            (rule "assignment_write_attribute_this" (formula "42") (term "1"))
             (builtin "One Step Simplification" (formula "42"))
            (rule "methodCallEmpty" (formula "42") (term "1"))
            (rule "methodCallEmpty" (formula "42") (term "1"))
            (rule "methodCallEmpty" (formula "42") (term "1"))
            (rule "methodCallEmpty" (formula "42") (term "1"))
            (rule "blockEmpty" (formula "42") (term "1"))
            (rule "methodCallReturnIgnoreResult" (formula "42") (term "1"))
            (rule "methodCallReturn" (formula "42") (term "1"))
            (rule "assignment" (formula "42") (term "1"))
             (builtin "One Step Simplification" (formula "42"))
            (rule "methodCallEmpty" (formula "42") (term "1"))
            (rule "blockEmpty" (formula "42") (term "1"))
            (rule "assignment" (formula "42") (term "1"))
             (builtin "One Step Simplification" (formula "42"))
            (rule "methodBodyExpand" (formula "42") (term "1") (newnames "heapBefore_<init>,savedHeapBefore_<init>"))
             (builtin "One Step Simplification" (formula "42"))
            (rule "methodCallSuper" (formula "42") (term "1"))
            (rule "methodBodyExpand" (formula "42") (term "1") (newnames "heapBefore_<init>_0,savedHeapBefore_<init>_0"))
             (builtin "One Step Simplification" (formula "42"))
            (rule "methodCallSuper" (formula "42") (term "1"))
            (rule "methodBodyExpand" (formula "42") (term "1") (newnames "heapBefore_<init>_1,savedHeapBefore_<init>_1"))
             (builtin "One Step Simplification" (formula "42"))
            (rule "methodCallSuper" (formula "42") (term "1"))
            (rule "methodBodyExpand" (formula "42") (term "1") (newnames "heapBefore_<init>_2,savedHeapBefore_<init>_2"))
             (builtin "One Step Simplification" (formula "42"))
            (rule "methodCallSuper" (formula "42") (term "1"))
            (rule "methodBodyExpand" (formula "42") (term "1") (newnames "heapBefore_<init>_3,savedHeapBefore_<init>_3"))
             (builtin "One Step Simplification" (formula "42"))
            (rule "methodCallEmpty" (formula "42") (term "1"))
            (rule "blockEmpty" (formula "42") (term "1"))
            (rule "assignment_write_attribute_this" (formula "42") (term "1"))
             (builtin "One Step Simplification" (formula "42"))
            (rule "assignment_write_attribute_this" (formula "42") (term "1"))
             (builtin "One Step Simplification" (formula "42"))
            (rule "methodCallEmpty" (formula "42") (term "1"))
            (rule "methodCallEmpty" (formula "42") (term "1"))
            (rule "methodCallEmpty" (formula "42") (term "1"))
            (rule "methodCallEmpty" (formula "42") (term "1"))
            (rule "blockEmpty" (formula "42") (term "1"))
            (rule "assignment_write_attribute" (formula "42") (term "1"))
            (branch "Normal Execution (c_2 != null)"
                (builtin "One Step Simplification" (formula "43"))
                (builtin "One Step Simplification" (formula "42") (ifInst ""  (formula "38")))
               (rule "false_right" (formula "42"))
               (rule "assignment" (formula "42") (term "1"))
                (builtin "One Step Simplification" (formula "42"))
               (rule "methodCallThrow" (formula "42") (term "1"))
                (builtin "One Step Simplification" (formula "42"))
               (rule "throwBox" (formula "42") (term "1"))
               (rule "closeTrue" (formula "42"))
            )
            (branch "Null Reference (c_2 = null)"
                (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "39")))
               (rule "closeFalse" (formula "1"))
            )
         )
      )
      (branch "Exceptional Post (next)"
          (builtin "One Step Simplification" (formula "22"))
          (builtin "One Step Simplification" (formula "23"))
         (rule "andLeft" (formula "22"))
         (rule "selectCreatedOfAnonAsFormulaEQ" (formula "23") (term "1,0") (ifseqformula "22"))
         (rule "andLeft" (formula "23"))
         (rule "andLeft" (formula "24"))
         (rule "andLeft" (formula "23"))
         (rule "andLeft" (formula "25"))
         (rule "notLeft" (formula "23"))
         (rule "close" (formula "27") (ifseqformula "26"))
      )
      (branch "Pre (next)"
          (builtin "One Step Simplification" (formula "21") (ifInst ""  (formula "13")) (ifInst ""  (formula "2")))
         (rule "closeTrue" (formula "21"))
      )
      (branch "Null reference (it = null)"
          (builtin "One Step Simplification" (formula "21") (ifInst ""  (formula "27")))
         (rule "closeTrue" (formula "21"))
      )
   )
   (branch "CUT: b_0_Before = TRUE FALSE"
       (builtin "One Step Simplification" (formula "17"))
      (rule "andLeft" (formula "17"))
      (rule "andLeft" (formula "17"))
      (rule "replace_known_right" (formula "2") (term "0") (ifseqformula "24"))
       (builtin "One Step Simplification" (formula "2"))
      (rule "true_left" (formula "2"))
      (rule "apply_eq_boolean" (formula "1") (term "1") (ifseqformula "23"))
       (builtin "One Step Simplification" (formula "1"))
      (rule "notLeft" (formula "1"))
      (rule "replace_known_right" (formula "20") (term "0") (ifseqformula "22"))
       (builtin "One Step Simplification" (formula "20"))
      (rule "notLeft" (formula "20"))
      (rule "apply_eq_boolean" (formula "20") (term "3") (ifseqformula "22"))
      (rule "boxToDiamond" (formula "17") (term "1"))
       (builtin "One Step Simplification" (formula "17"))
      (rule "notLeft" (formula "17"))
       (builtin "Use Operation Contract" (formula "20") (newnames "heapBefore_hasNext_0,result_50,exc_66") (contract "java.util.Iterator[java.util.Iterator::hasNext()].JML normal_behavior operation contract.0"))
      (branch "Post (hasNext)"
          (builtin "One Step Simplification" (formula "22") (ifInst ""  (formula "12")) (ifInst ""  (formula "1")))
          (builtin "One Step Simplification" (formula "21"))
          (builtin "One Step Simplification" (formula "23"))
          (builtin "One Step Simplification" (formula "20") (ifInst ""  (formula "24")) (ifInst ""  (formula "12")))
         (rule "true_left" (formula "22"))
         (rule "andLeft" (formula "20"))
         (rule "andLeft" (formula "21"))
         (rule "notLeft" (formula "21"))
         (rule "assignment" (formula "23") (term "1"))
          (builtin "One Step Simplification" (formula "23"))
         (rule "apply_eq_boolean" (formula "23") (term "0,1,0") (ifseqformula "22"))
         (rule "apply_eq_boolean" (formula "21") (term "3") (ifseqformula "22"))
         (rule "methodCallEmpty" (formula "23") (term "1"))
          (builtin "One Step Simplification" (formula "23"))
         (rule "emptyModality" (formula "23") (term "1"))
          (opengoal "{heap:=heap_Before_LOOP<<anonHeapFunction>>}   !(  wellFormed(heap_Before_LOOP<<anonHeapFunction>>)     & heap = heap_Before_LOOP<<anonHeapFunction>>     & !self_50 = null     &   boolean::select(heap,                         self_50,                         java.lang.Object::<created>)       = TRUE     &   de.polyas.core3.open.cred.CredTool::exactInstance(self_50)       = TRUE     & (  ((  _record_7 = null            |   boolean::select(heap_Before_LOOP<<anonHeapFunction>>,                                _record_7,                                java.lang.Object::<created>)              = TRUE)<<SC>>)        & ((  _vals_3 = null            |   boolean::select(heap_Before_LOOP<<anonHeapFunction>>,                                _vals_3,                                java.lang.Object::<created>)              = TRUE)<<SC>>)        & ((  it = null            |   boolean::select(heap_Before_LOOP<<anonHeapFunction>>,                                it,                                java.lang.Object::<created>)              = TRUE)<<SC>>))     & ((  (((((((((\\forall int j;                      ((   (  leq(Z(0(#)), j)<<origin(\"loop_invariant @ file CredTool.java @ line 312\",\"[]\")>>                            & lt(j,                                 seqLen(Seq::select(heap_Before_LOOP<<anonHeapFunction>>,                                                    _cols_2,                                                    java.util.Collection::$seq)))<<origin(\"loop_invariant @ file CredTool.java @ line 312\",\"[]\")>>)<<SC,                                                                                                                                                     origin(\"loop_invariant @ file CredTool.java @ line 312\",\"[]\")>>                        -> (\\exists int i;                              ((  (leq(Z(0(#)), i)<<origin(\"loop_invariant @ file CredTool.java @ line 312\",\"[]\")>>                                & lt(i,                                     seqLen(Seq::select(heap_Before_LOOP<<anonHeapFunction>>,                                                        _record_7,                                                        org.apache.commons.csv.CSVRecord::$key_seq)))<<origin(\"loop_invariant @ file CredTool.java @ line 312\",\"[]\")>>)<<SC,                                                                                                                                                                         origin(\"loop_invariant @ file CredTool.java @ line 312\",\"[]\")>>                                & (  (java.lang.String)(any::seqGet(Seq::select(heap_Before_LOOP<<anonHeapFunction>>,                                                                                _record_7,                                                                                org.apache.commons.csv.CSVRecord::$key_seq),                                                                    i))                                   = (java.lang.String)(any::seqGet(Seq::select(heap_Before_LOOP<<anonHeapFunction>>,                                                                                _cols_2,                                                                                java.util.Collection::$seq),                                                                    j)))<<origin(\"loop_invariant @ file CredTool.java @ line 312\",\"[]\")>>)<<SC,                                                                                                                                            origin(\"loop_invariant @ file CredTool.java @ line 312\",\"[]\")>>))<<origin(\"loop_invariant @ file CredTool.java @ line 312\",\"[]\")>>)<<origin(\"loop_invariant @ file CredTool.java @ line 312\",\"[]\")>>))<<origin(\"loop_invariant @ file CredTool.java @ line 312\",\"[]\")>>         & (\\forall int i;              ((   (  leq(Z(0(#)), i)<<origin(\"loop_invariant @ file CredTool.java @ line 314\",\"[]\")>>                    & lt(i,                         seqLen(Seq::select(heap_Before_LOOP<<anonHeapFunction>>,                                            _cols_2,                                            java.util.Collection::$seq)))<<origin(\"loop_invariant @ file CredTool.java @ line 314\",\"[]\")>>)<<SC,                                                                                                                                             origin(\"loop_invariant @ file CredTool.java @ line 314\",\"[]\")>>                -> (!(  (java.lang.String)(any::seqGet(Seq::select(heap_Before_LOOP<<anonHeapFunction>>,                                                                   _cols_2,                                                                   java.util.Collection::$seq),                                                       i))                      = null)<<origin(\"loop_invariant @ file CredTool.java @ line 314\",\"[]\")>>)<<origin(\"loop_invariant @ file CredTool.java @ line 314\",\"[]\")>>)<<origin(\"loop_invariant @ file CredTool.java @ line 314\",\"[]\")>>))<<origin(\"loop_invariant @ file CredTool.java @ line 314\",\"[]\")>>)<<SC>>         & (!(_vals_3 = _cols_2)<<origin(\"loop_invariant @ file CredTool.java @ line 315\",\"[]\")>>)<<origin(\"loop_invariant @ file CredTool.java @ line 315\",\"[]\")>>)<<SC>>         & java.lang.Object::<inv>(heap_Before_LOOP<<anonHeapFunction>>,                                   _record_7))<<SC>>         & java.lang.Object::<inv>(heap_Before_LOOP<<anonHeapFunction>>,                                   _vals_3))<<SC>>         & java.lang.Object::<inv>(heap_Before_LOOP<<anonHeapFunction>>,                                   _cols_2))<<SC>>         & java.lang.Object::<inv>(heap_Before_LOOP<<anonHeapFunction>>,                                   it))<<SC>>         & ((  (((!(it = null)<<origin(\"loop_invariant @ file CredTool.java @ line 320\",\"[]\")>>)<<origin(\"loop_invariant @ file CredTool.java @ line 320\",\"[]\")>>             & (!(_record_7 = null)<<origin(\"loop_invariant @ file CredTool.java @ line 320\",\"[]\")>>)<<origin(\"loop_invariant @ file CredTool.java @ line 320\",\"[]\")>>)<<SC,                                                                                                                                                                         origin(\"loop_invariant @ file CredTool.java @ line 320\",\"[]\")>>             & (!(_vals_3 = null)<<origin(\"loop_invariant @ file CredTool.java @ line 320\",\"[]\")>>)<<origin(\"loop_invariant @ file CredTool.java @ line 320\",\"[]\")>>)<<SC,                                                                                                                                                                       origin(\"loop_invariant @ file CredTool.java @ line 320\",\"[]\")>>             & (!(_cols_2 = null)<<origin(\"loop_invariant @ file CredTool.java @ line 320\",\"[]\")>>)<<origin(\"loop_invariant @ file CredTool.java @ line 320\",\"[]\")>>)<<SC,                                                                                                                                                                       origin(\"loop_invariant @ file CredTool.java @ line 320\",\"[]\")>>))<<SC>>         & ((  (!(it = null)<<origin(\"loop_invariant @ file CredTool.java @ line 321\",\"[]\")>>)<<origin(\"loop_invariant @ file CredTool.java @ line 321\",\"[]\")>>             & (  java.util.CollectionIterator::instance(it)                = TRUE)<<origin(\"loop_invariant @ file CredTool.java @ line 321\",\"[]\")>>)<<origin(\"loop_invariant @ file CredTool.java @ line 321\",\"[]\")>>))<<SC>>         & (  Seq::select(heap_Before_LOOP<<anonHeapFunction>>,                          it,                          java.util.Iterator::$seq)            = Seq::select(heap_Before_LOOP<<anonHeapFunction>>,                          _cols_2,                          java.util.Collection::$seq))<<origin(\"loop_invariant @ file CredTool.java @ line 322\",\"[]\")>>)<<SC>>)     & {self_50:=self_50        || (_record_7:=_record_7        || _vals_3:=_vals_3        || it:=it)}         (  \\[{method-frame(source=addInputCols(java.util.ArrayList, java.util.ArrayList, org.apache.commons.csv.CSVRecord)@de.polyas.core3.open.cred.CredTool,this=self_50): {                  b_0=it.hasNext();                }              }\\] (  b_0 = b_0_Before                   & (   b_0_Before = TRUE                      -> \\<{method-frame(source=addInputCols(java.util.ArrayList, java.util.ArrayList, org.apache.commons.csv.CSVRecord)@de.polyas.core3.open.cred.CredTool,this=self_50): {                               addInputCol(_vals_3,(String)it.next(),_record_7);                             }                           }\\> (    self_50_After_LOOP                                  = self_50                                & \\[{method-frame(source=addInputCols(java.util.ArrayList, java.util.ArrayList, org.apache.commons.csv.CSVRecord)@de.polyas.core3.open.cred.CredTool,this=self_50): {                                        b_0=it.hasNext();                                      }                                    }\\] b_0_After = b_0                                & _record_7 = _record_7                                & _vals_3 = _vals_3                                & it = it                                & heap_After_LOOP = heap)))          & (   b_0_Before = FALSE             ->   self_50_After_LOOP = self_50                & \\[{method-frame(source=addInputCols(java.util.ArrayList, java.util.ArrayList, org.apache.commons.csv.CSVRecord)@de.polyas.core3.open.cred.CredTool,this=self_50): {                        b_0=it.hasNext();                      }                    }\\] b_0_After = b_0                & _record_7 = _record_7                & _vals_3 = _vals_3                & it = it                & heap_After_LOOP = heap))) ")
      )
      (branch "Exceptional Post (hasNext)"
          (builtin "One Step Simplification" (formula "20") (ifInst ""  (formula "22")) (ifInst ""  (formula "12")))
          (builtin "One Step Simplification" (formula "21"))
         (rule "andLeft" (formula "20"))
         (rule "andLeft" (formula "20"))
         (rule "andLeft" (formula "22"))
         (rule "notLeft" (formula "20"))
         (rule "close" (formula "23") (ifseqformula "22"))
      )
      (branch "Pre (hasNext)"
          (builtin "One Step Simplification" (formula "20") (ifInst ""  (formula "12")) (ifInst ""  (formula "1")))
         (rule "closeTrue" (formula "20"))
      )
      (branch "Null reference (it = null)"
          (builtin "One Step Simplification" (formula "20") (ifInst ""  (formula "29")))
         (rule "closeTrue" (formula "20"))
      )
   )
)
(branch "Exceptional Post (hasNext)"
    (builtin "One Step Simplification" (formula "17") (ifInst ""  (formula "12")))
   (rule "andLeft" (formula "17"))
   (rule "andLeft" (formula "18"))
   (rule "andLeft" (formula "17"))
   (rule "notLeft" (formula "17"))
   (rule "close" (formula "20") (ifseqformula "19"))
)
(branch "Pre (hasNext)"
    (builtin "One Step Simplification" (formula "16") (ifInst ""  (formula "12")) (ifInst ""  (formula "1")))
   (rule "closeTrue" (formula "16"))
)
(branch "Null reference (it = null)"
    (builtin "One Step Simplification" (formula "16") (ifInst ""  (formula "22")))
   (rule "closeTrue" (formula "16"))
)
)
}
