rule "One Step Simplification";
rule impRight;
rule andLeft;
macro symbex occ=0;

select number=-1;
macro autopilot-prep;

select number=-1;
macro use-inf-flow-contracts;
rule doubleImpLeft occ=1;
select number=-2;
rule impLeft occ=0;

select number=6;
macro autopilot-prep occ=232;
select number=7;
macro autopilot-prep occ=231;

# -------------------------------------------------------------------------------------------------

select formula="\exists int i#23; ((  (leq(Z(0(#)), i#23) & lt(i#23, seqLen(Seq::select(heapAtPre_A<<anonHeapFunction>>, record_A, org.apache.commons.csv.CSVRecord::$key_seq))))<<SC>> &   (java.lang.String)(any::seqGet(Seq::select(heapAtPre_A<<anonHeapFunction>>, record_A, org.apache.commons.csv.CSVRecord::$key_seq), i#23)) = java.lang.String::select(heapAtPre_A<<anonHeapFunction>>, selfAtPost_A, de.polyas.core3.open.cred.CredTool::$idCol))<<SC>>)";
instantiate
    formula="\exists int i#23; ((  (leq(Z(0(#)), i#23) & lt(i#23, seqLen(Seq::select(heapAtPre_A<<anonHeapFunction>>, record_A, org.apache.commons.csv.CSVRecord::$key_seq))))<<SC>> &   (java.lang.String)(any::seqGet(Seq::select(heapAtPre_A<<anonHeapFunction>>, record_A, org.apache.commons.csv.CSVRecord::$key_seq), i#23)) = java.lang.String::select(heapAtPre_A<<anonHeapFunction>>, selfAtPost_A, de.polyas.core3.open.cred.CredTool::$idCol))<<SC>>)"
    with="i_2";
auto;

select formula="\exists int i#23; ((  (leq(Z(0(#)), i#23) & lt(i#23, seqLen(Seq::select(heapAtPre_B<<anonHeapFunction>>, record_B, org.apache.commons.csv.CSVRecord::$key_seq))))<<SC>> &   (java.lang.String)(any::seqGet(Seq::select(heapAtPre_B<<anonHeapFunction>>, record_B, org.apache.commons.csv.CSVRecord::$key_seq), i#23)) = java.lang.String::select(heapAtPre_B<<anonHeapFunction>>, self_B, de.polyas.core3.open.cred.CredTool::$idCol))<<SC>>)";
instantiate
    formula="\exists int i#23; ((  (leq(Z(0(#)), i#23) & lt(i#23, seqLen(Seq::select(heapAtPre_B<<anonHeapFunction>>, record_B, org.apache.commons.csv.CSVRecord::$key_seq))))<<SC>> &   (java.lang.String)(any::seqGet(Seq::select(heapAtPre_B<<anonHeapFunction>>, record_B, org.apache.commons.csv.CSVRecord::$key_seq), i#23)) = java.lang.String::select(heapAtPre_B<<anonHeapFunction>>, self_B, de.polyas.core3.open.cred.CredTool::$idCol))<<SC>>)"
    with="i_7";
auto;

# -------------------------------------------------------------------------------------------------

select formula="\forall int j#110; (   (  leq(Z(0(#)), j#110) & lt(j#110, seqLen(Seq::select(heapAfter_initDistVals, java.util.ArrayList::select(heapAfter_initDistVals, selfAtPost_A, de.polyas.core3.open.cred.CredTool::$inputColsForPolyas), java.util.Collection::$seq))))<<SC>> -> \exists int i#57; ((  (leq(Z(0(#)), i#57) & lt(i#57, seqLen(Seq::select(heapAfter_initDistVals, record_A, org.apache.commons.csv.CSVRecord::$key_seq))))<<SC>> &   (java.lang.String)(any::seqGet(Seq::select(heapAfter_initDistVals, record_A, org.apache.commons.csv.CSVRecord::$key_seq), i#57)) = (java.lang.String)(any::seqGet(Seq::select(heapAfter_initDistVals, java.util.ArrayList::select(heapAfter_initDistVals, selfAtPost_A, de.polyas.core3.open.cred.CredTool::$inputColsForPolyas), java.util.Collection::$seq), j#110)))<<SC>>))";
rule allRight
    formula="\forall int j#110; (   (  leq(Z(0(#)), j#110) & lt(j#110, seqLen(Seq::select(heapAfter_initDistVals, java.util.ArrayList::select(heapAfter_initDistVals, selfAtPost_A, de.polyas.core3.open.cred.CredTool::$inputColsForPolyas), java.util.Collection::$seq))))<<SC>> -> \exists int i#57; ((  (leq(Z(0(#)), i#57) & lt(i#57, seqLen(Seq::select(heapAfter_initDistVals, record_A, org.apache.commons.csv.CSVRecord::$key_seq))))<<SC>> &   (java.lang.String)(any::seqGet(Seq::select(heapAfter_initDistVals, record_A, org.apache.commons.csv.CSVRecord::$key_seq), i#57)) = (java.lang.String)(any::seqGet(Seq::select(heapAfter_initDistVals, java.util.ArrayList::select(heapAfter_initDistVals, selfAtPost_A, de.polyas.core3.open.cred.CredTool::$inputColsForPolyas), java.util.Collection::$seq), j#110)))<<SC>>))";
rule impRight formula="(  leq(Z(0(#)), j_110_0) & lt(j_110_0, seqLen(Seq::select(heapAfter_initDistVals, java.util.ArrayList::select(heapAfter_initDistVals, selfAtPost_A, de.polyas.core3.open.cred.CredTool::$inputColsForPolyas), java.util.Collection::$seq))))<<SC>> -> \exists int i#111; ((  (leq(Z(0(#)), i#111) & lt(i#111, seqLen(Seq::select(heapAfter_initDistVals, record_A, org.apache.commons.csv.CSVRecord::$key_seq))))<<SC>> &   (java.lang.String)(any::seqGet(Seq::select(heapAfter_initDistVals, record_A, org.apache.commons.csv.CSVRecord::$key_seq), i#111)) = (java.lang.String)(any::seqGet(Seq::select(heapAfter_initDistVals, java.util.ArrayList::select(heapAfter_initDistVals, selfAtPost_A, de.polyas.core3.open.cred.CredTool::$inputColsForPolyas), java.util.Collection::$seq), j_110_0)))<<SC>>)";
instantiate
    formula="\forall int j; (     lt(j, seqLen(Seq::select(heapAtPre_A<<anonHeapFunction>>, java.util.ArrayList::select(heapAtPre_A<<anonHeapFunction>>, selfAtPost_A, de.polyas.core3.open.cred.CredTool::$inputColsForPolyas), java.util.Collection::$seq))) & geq(j, Z(0(#))) -> \exists int i; (  lt(i, seqLen(Seq::select(heapAtPre_A<<anonHeapFunction>>, record_A, org.apache.commons.csv.CSVRecord::$key_seq))) &   java.lang.String::seqGet(Seq::select(heapAtPre_A<<anonHeapFunction>>, java.util.ArrayList::select(heapAtPre_A<<anonHeapFunction>>, selfAtPost_A, de.polyas.core3.open.cred.CredTool::$inputColsForPolyas), java.util.Collection::$seq), j) = java.lang.String::seqGet(Seq::select(heapAtPre_A<<anonHeapFunction>>, record_A, org.apache.commons.csv.CSVRecord::$key_seq), i) & geq(i, Z(0(#)))))"
    with="j_110_0";
rule impLeft formula="lt(j_110_0, seqLen(Seq::select(heapAtPre_A<<anonHeapFunction>>, java.util.ArrayList::select(heapAtPre_A<<anonHeapFunction>>, selfAtPost_A, de.polyas.core3.open.cred.CredTool::$inputColsForPolyas), java.util.Collection::$seq))) & geq(j_110_0, Z(0(#))) -> \exists int i; (  lt(i, seqLen(Seq::select(heapAtPre_A<<anonHeapFunction>>, record_A, org.apache.commons.csv.CSVRecord::$key_seq))) &   java.lang.String::seqGet(Seq::select(heapAtPre_A<<anonHeapFunction>>, java.util.ArrayList::select(heapAtPre_A<<anonHeapFunction>>, selfAtPost_A, de.polyas.core3.open.cred.CredTool::$inputColsForPolyas), java.util.Collection::$seq), j_110_0) = java.lang.String::seqGet(Seq::select(heapAtPre_A<<anonHeapFunction>>, record_A, org.apache.commons.csv.CSVRecord::$key_seq), i) & geq(i, Z(0(#))))";
select formula="\exists int i; (  lt(i, seqLen(Seq::select(heapAtPre_A<<anonHeapFunction>>, record_A, org.apache.commons.csv.CSVRecord::$key_seq))) &   java.lang.String::seqGet(Seq::select(heapAtPre_A<<anonHeapFunction>>, java.util.ArrayList::select(heapAtPre_A<<anonHeapFunction>>, selfAtPost_A, de.polyas.core3.open.cred.CredTool::$inputColsForPolyas), java.util.Collection::$seq), j_110_0) = java.lang.String::seqGet(Seq::select(heapAtPre_A<<anonHeapFunction>>, record_A, org.apache.commons.csv.CSVRecord::$key_seq), i) & geq(i, Z(0(#))))";
rule exLeft formula="\exists int i; (  lt(i, seqLen(Seq::select(heapAtPre_A<<anonHeapFunction>>, record_A, org.apache.commons.csv.CSVRecord::$key_seq))) &   java.lang.String::seqGet(Seq::select(heapAtPre_A<<anonHeapFunction>>, java.util.ArrayList::select(heapAtPre_A<<anonHeapFunction>>, selfAtPost_A, de.polyas.core3.open.cred.CredTool::$inputColsForPolyas), java.util.Collection::$seq), j_110_0) = java.lang.String::seqGet(Seq::select(heapAtPre_A<<anonHeapFunction>>, record_A, org.apache.commons.csv.CSVRecord::$key_seq), i) & geq(i, Z(0(#))))";
instantiate
    formula="\exists int i#57; ((  (leq(Z(0(#)), i#57) & lt(i#57, seqLen(Seq::select(heapAfter_initDistVals, record_A, org.apache.commons.csv.CSVRecord::$key_seq))))<<SC>> &   (java.lang.String)(any::seqGet(Seq::select(heapAfter_initDistVals, record_A, org.apache.commons.csv.CSVRecord::$key_seq), i#57)) = (java.lang.String)(any::seqGet(Seq::select(heapAfter_initDistVals, java.util.ArrayList::select(heapAfter_initDistVals, selfAtPost_A, de.polyas.core3.open.cred.CredTool::$inputColsForPolyas), java.util.Collection::$seq), j_110_0)))<<SC>>)"
    with="i_14";
auto;
auto;

select formula="\forall int j#110; (   (  leq(Z(0(#)), j#110) & lt(j#110, seqLen(Seq::select(heapAfter_initDistVals_0, java.util.ArrayList::select(heapAfter_initDistVals_0, self_B, de.polyas.core3.open.cred.CredTool::$inputColsForPolyas), java.util.Collection::$seq))))<<SC>> -> \exists int i#111; ((  (leq(Z(0(#)), i#111) & lt(i#111, seqLen(Seq::select(heapAfter_initDistVals_0, record_B, org.apache.commons.csv.CSVRecord::$key_seq))))<<SC>> &   (java.lang.String)(any::seqGet(Seq::select(heapAfter_initDistVals_0, record_B, org.apache.commons.csv.CSVRecord::$key_seq), i#111)) = (java.lang.String)(any::seqGet(Seq::select(heapAfter_initDistVals_0, java.util.ArrayList::select(heapAfter_initDistVals_0, self_B, de.polyas.core3.open.cred.CredTool::$inputColsForPolyas), java.util.Collection::$seq), j#110)))<<SC>>))";
rule allRight
    formula="\forall int j#110; (   (  leq(Z(0(#)), j#110) & lt(j#110, seqLen(Seq::select(heapAfter_initDistVals_0, java.util.ArrayList::select(heapAfter_initDistVals_0, self_B, de.polyas.core3.open.cred.CredTool::$inputColsForPolyas), java.util.Collection::$seq))))<<SC>> -> \exists int i#111; ((  (leq(Z(0(#)), i#111) & lt(i#111, seqLen(Seq::select(heapAfter_initDistVals_0, record_B, org.apache.commons.csv.CSVRecord::$key_seq))))<<SC>> &   (java.lang.String)(any::seqGet(Seq::select(heapAfter_initDistVals_0, record_B, org.apache.commons.csv.CSVRecord::$key_seq), i#111)) = (java.lang.String)(any::seqGet(Seq::select(heapAfter_initDistVals_0, java.util.ArrayList::select(heapAfter_initDistVals_0, self_B, de.polyas.core3.open.cred.CredTool::$inputColsForPolyas), java.util.Collection::$seq), j#110)))<<SC>>))";
rule impRight formula="   (  leq(Z(0(#)), j_110_0) & lt(j_110_0, seqLen(Seq::select(heapAfter_initDistVals_0, java.util.ArrayList::select(heapAfter_initDistVals_0, self_B, de.polyas.core3.open.cred.CredTool::$inputColsForPolyas), java.util.Collection::$seq))))<<SC>> -> \exists int i#111; ((  (leq(Z(0(#)), i#111) & lt(i#111, seqLen(Seq::select(heapAfter_initDistVals_0, record_B, org.apache.commons.csv.CSVRecord::$key_seq))))<<SC>> &   (java.lang.String)(any::seqGet(Seq::select(heapAfter_initDistVals_0, record_B, org.apache.commons.csv.CSVRecord::$key_seq), i#111)) = (java.lang.String)(any::seqGet(Seq::select(heapAfter_initDistVals_0, java.util.ArrayList::select(heapAfter_initDistVals_0, self_B, de.polyas.core3.open.cred.CredTool::$inputColsForPolyas), java.util.Collection::$seq), j_110_0)))<<SC>>)";
instantiate
    formula="\forall int j; (     lt(j, seqLen(Seq::select(heapAtPre_A<<anonHeapFunction>>, java.util.ArrayList::select(heapAtPre_A<<anonHeapFunction>>, selfAtPost_A, de.polyas.core3.open.cred.CredTool::$inputColsForPolyas), java.util.Collection::$seq))) & geq(j, Z(0(#))) -> \exists int i; (  lt(i, seqLen(Seq::select(heapAtPre_A<<anonHeapFunction>>, record_A, org.apache.commons.csv.CSVRecord::$key_seq))) &   java.lang.String::seqGet(Seq::select(heapAtPre_A<<anonHeapFunction>>, java.util.ArrayList::select(heapAtPre_A<<anonHeapFunction>>, selfAtPost_A, de.polyas.core3.open.cred.CredTool::$inputColsForPolyas), java.util.Collection::$seq), j) = java.lang.String::seqGet(Seq::select(heapAtPre_A<<anonHeapFunction>>, record_A, org.apache.commons.csv.CSVRecord::$key_seq), i) & geq(i, Z(0(#)))))"
    with="j_110_0";
rule impLeft formula="lt(j_110_0, seqLen(Seq::select(heapAtPre_A<<anonHeapFunction>>, java.util.ArrayList::select(heapAtPre_A<<anonHeapFunction>>, selfAtPost_A, de.polyas.core3.open.cred.CredTool::$inputColsForPolyas), java.util.Collection::$seq))) & geq(j_110_0, Z(0(#))) -> \exists int i; (  lt(i, seqLen(Seq::select(heapAtPre_A<<anonHeapFunction>>, record_A, org.apache.commons.csv.CSVRecord::$key_seq))) &   java.lang.String::seqGet(Seq::select(heapAtPre_A<<anonHeapFunction>>, java.util.ArrayList::select(heapAtPre_A<<anonHeapFunction>>, selfAtPost_A, de.polyas.core3.open.cred.CredTool::$inputColsForPolyas), java.util.Collection::$seq), j_110_0) = java.lang.String::seqGet(Seq::select(heapAtPre_A<<anonHeapFunction>>, record_A, org.apache.commons.csv.CSVRecord::$key_seq), i) & geq(i, Z(0(#))))";
select formula="\exists int i; (  lt(i, seqLen(Seq::select(heapAtPre_A<<anonHeapFunction>>, record_A, org.apache.commons.csv.CSVRecord::$key_seq))) &   java.lang.String::seqGet(Seq::select(heapAtPre_A<<anonHeapFunction>>, java.util.ArrayList::select(heapAtPre_A<<anonHeapFunction>>, selfAtPost_A, de.polyas.core3.open.cred.CredTool::$inputColsForPolyas), java.util.Collection::$seq), j_110_0) = java.lang.String::seqGet(Seq::select(heapAtPre_A<<anonHeapFunction>>, record_A, org.apache.commons.csv.CSVRecord::$key_seq), i) & geq(i, Z(0(#))))";
rule exLeft formula="\exists int i; (  lt(i, seqLen(Seq::select(heapAtPre_A<<anonHeapFunction>>, record_A, org.apache.commons.csv.CSVRecord::$key_seq))) &   java.lang.String::seqGet(Seq::select(heapAtPre_A<<anonHeapFunction>>, java.util.ArrayList::select(heapAtPre_A<<anonHeapFunction>>, selfAtPost_A, de.polyas.core3.open.cred.CredTool::$inputColsForPolyas), java.util.Collection::$seq), j_110_0) = java.lang.String::seqGet(Seq::select(heapAtPre_A<<anonHeapFunction>>, record_A, org.apache.commons.csv.CSVRecord::$key_seq), i) & geq(i, Z(0(#))))";
instantiate
    formula="\exists int i#111; ((  (leq(Z(0(#)), i#111) & lt(i#111, seqLen(Seq::select(heapAfter_initDistVals_0, record_B, org.apache.commons.csv.CSVRecord::$key_seq))))<<SC>> &   (java.lang.String)(any::seqGet(Seq::select(heapAfter_initDistVals_0, record_B, org.apache.commons.csv.CSVRecord::$key_seq), i#111)) = (java.lang.String)(any::seqGet(Seq::select(heapAfter_initDistVals_0, java.util.ArrayList::select(heapAfter_initDistVals_0, self_B, de.polyas.core3.open.cred.CredTool::$inputColsForPolyas), java.util.Collection::$seq), j_110_0)))<<SC>>)"
    with="i_14";
auto;
auto;

# -------------------------------------------------------------------------------------------------
    
select formula="\forall int i#24; (   (leq(Z(0(#)), i#24) & lt(i#24, seqLen(Seq::select(heapAtPre_A<<anonHeapFunction>>, record_A, org.apache.commons.csv.CSVRecord::$key_seq))))<<SC>> ->   (java.lang.String)(any::seqGet(Seq::select(heapAtPre_A<<anonHeapFunction>>, record_A, org.apache.commons.csv.CSVRecord::$key_seq), i#24)) = java.lang.String::select(heapAtPre_A<<anonHeapFunction>>, selfAtPost_A, de.polyas.core3.open.cred.CredTool::$idCol) -> \exists int j#25; ((  (leq(Z(0(#)), j#25) & lt(j#25, seqLen(strContent((java.lang.String)(any::seqGet(Seq::select(heapAtPre_A<<anonHeapFunction>>, record_A, org.apache.commons.csv.CSVRecord::$value_seq), i#24))))))<<SC>> & gt((int)(any::seqGet(strContent((java.lang.String)(any::seqGet(Seq::select(heapAtPre_A<<anonHeapFunction>>, record_A, org.apache.commons.csv.CSVRecord::$value_seq), i#24))), j#25)), C(2(3(#)))))<<SC>>))";
rule allRight
    formula="\forall int i#24; (   (leq(Z(0(#)), i#24) & lt(i#24, seqLen(Seq::select(heapAtPre_A<<anonHeapFunction>>, record_A, org.apache.commons.csv.CSVRecord::$key_seq))))<<SC>> ->   (java.lang.String)(any::seqGet(Seq::select(heapAtPre_A<<anonHeapFunction>>, record_A, org.apache.commons.csv.CSVRecord::$key_seq), i#24)) = java.lang.String::select(heapAtPre_A<<anonHeapFunction>>, selfAtPost_A, de.polyas.core3.open.cred.CredTool::$idCol) -> \exists int j#25; ((  (leq(Z(0(#)), j#25) & lt(j#25, seqLen(strContent((java.lang.String)(any::seqGet(Seq::select(heapAtPre_A<<anonHeapFunction>>, record_A, org.apache.commons.csv.CSVRecord::$value_seq), i#24))))))<<SC>> & gt((int)(any::seqGet(strContent((java.lang.String)(any::seqGet(Seq::select(heapAtPre_A<<anonHeapFunction>>, record_A, org.apache.commons.csv.CSVRecord::$value_seq), i#24))), j#25)), C(2(3(#)))))<<SC>>))";
rule impRight
    formula="(leq(Z(0(#)), i_24_0) & lt(i_24_0, seqLen(Seq::select(heapAtPre_A<<anonHeapFunction>>, record_A, org.apache.commons.csv.CSVRecord::$key_seq))))<<SC>> ->   (java.lang.String)(any::seqGet(Seq::select(heapAtPre_A<<anonHeapFunction>>, record_A, org.apache.commons.csv.CSVRecord::$key_seq), i_24_0)) = java.lang.String::select(heapAtPre_A<<anonHeapFunction>>, selfAtPost_A, de.polyas.core3.open.cred.CredTool::$idCol) -> \exists int j#25; ((  (leq(Z(0(#)), j#25) & lt(j#25, seqLen(strContent((java.lang.String)(any::seqGet(Seq::select(heapAtPre_A<<anonHeapFunction>>, record_A, org.apache.commons.csv.CSVRecord::$value_seq), i_24_0))))))<<SC>> & gt((int)(any::seqGet(strContent((java.lang.String)(any::seqGet(Seq::select(heapAtPre_A<<anonHeapFunction>>, record_A, org.apache.commons.csv.CSVRecord::$value_seq), i_24_0))), j#25)), C(2(3(#)))))<<SC>>)";
rule impRight
    formula="(java.lang.String)(any::seqGet(Seq::select(heapAtPre_A<<anonHeapFunction>>, record_A, org.apache.commons.csv.CSVRecord::$key_seq), i_24_0)) = java.lang.String::select(heapAtPre_A<<anonHeapFunction>>, selfAtPost_A, de.polyas.core3.open.cred.CredTool::$idCol) -> \exists int j#25; ((  (leq(Z(0(#)), j#25) & lt(j#25, seqLen(strContent((java.lang.String)(any::seqGet(Seq::select(heapAtPre_A<<anonHeapFunction>>, record_A, org.apache.commons.csv.CSVRecord::$value_seq), i_24_0))))))<<SC>> & gt((int)(any::seqGet(strContent((java.lang.String)(any::seqGet(Seq::select(heapAtPre_A<<anonHeapFunction>>, record_A, org.apache.commons.csv.CSVRecord::$value_seq), i_24_0))), j#25)), C(2(3(#)))))<<SC>>)";
instantiate
    formula="\forall int i; (   lt(i, seqLen(Seq::select(heapAtPre_A<<anonHeapFunction>>, record_A, org.apache.commons.csv.CSVRecord::$key_seq))) & geq(i, Z(0(#))) ->   java.lang.String::seqGet(Seq::select(heapAtPre_A<<anonHeapFunction>>, record_A, org.apache.commons.csv.CSVRecord::$key_seq), i) = java.lang.String::select(heapAtPre_A<<anonHeapFunction>>, selfAtPost_A, de.polyas.core3.open.cred.CredTool::$idCol) -> \exists int j; (  gt(int::seqGet(strContent(java.lang.String::seqGet(Seq::select(heapAtPre_A<<anonHeapFunction>>, record_A, org.apache.commons.csv.CSVRecord::$value_seq), i)), j), Z(2(3(#)))) & lt(j, seqLen(strContent(java.lang.String::seqGet(Seq::select(heapAtPre_A<<anonHeapFunction>>, record_A, org.apache.commons.csv.CSVRecord::$value_seq), i)))) & geq(j, Z(0(#)))))"
    with="i_24_0";
rule doubleImpLeft
    formula="lt(i_24_0, seqLen(Seq::select(heapAtPre_A<<anonHeapFunction>>, record_A, org.apache.commons.csv.CSVRecord::$key_seq))) & geq(i_24_0, Z(0(#))) ->   java.lang.String::seqGet(Seq::select(heapAtPre_A<<anonHeapFunction>>, record_A, org.apache.commons.csv.CSVRecord::$key_seq), i_24_0) = java.lang.String::select(heapAtPre_A<<anonHeapFunction>>, selfAtPost_A, de.polyas.core3.open.cred.CredTool::$idCol) -> \exists int j; (  gt(int::seqGet(strContent(java.lang.String::seqGet(Seq::select(heapAtPre_A<<anonHeapFunction>>, record_A, org.apache.commons.csv.CSVRecord::$value_seq), i_24_0)), j), Z(2(3(#)))) & lt(j, seqLen(strContent(java.lang.String::seqGet(Seq::select(heapAtPre_A<<anonHeapFunction>>, record_A, org.apache.commons.csv.CSVRecord::$value_seq), i_24_0)))) & geq(j, Z(0(#))))";
select formula="\exists int j; (  gt(int::seqGet(strContent(java.lang.String::seqGet(Seq::select(heapAtPre_A<<anonHeapFunction>>, record_A, org.apache.commons.csv.CSVRecord::$value_seq), i_24_0)), j), Z(2(3(#)))) & lt(j, seqLen(strContent(java.lang.String::seqGet(Seq::select(heapAtPre_A<<anonHeapFunction>>, record_A, org.apache.commons.csv.CSVRecord::$value_seq), i_24_0)))) & geq(j, Z(0(#))))";
rule exLeft
    formula="\exists int j; (  gt(int::seqGet(strContent(java.lang.String::seqGet(Seq::select(heapAtPre_A<<anonHeapFunction>>, record_A, org.apache.commons.csv.CSVRecord::$value_seq), i_24_0)), j), Z(2(3(#)))) & lt(j, seqLen(strContent(java.lang.String::seqGet(Seq::select(heapAtPre_A<<anonHeapFunction>>, record_A, org.apache.commons.csv.CSVRecord::$value_seq), i_24_0)))) & geq(j, Z(0(#))))";
instantiate
    formula="\exists int j#25; ((  (leq(Z(0(#)), j#25) & lt(j#25, seqLen(strContent((java.lang.String)(any::seqGet(Seq::select(heapAtPre_A<<anonHeapFunction>>, record_A, org.apache.commons.csv.CSVRecord::$value_seq), i_24_0))))))<<SC>> & gt((int)(any::seqGet(strContent((java.lang.String)(any::seqGet(Seq::select(heapAtPre_A<<anonHeapFunction>>, record_A, org.apache.commons.csv.CSVRecord::$value_seq), i_24_0))), j#25)), C(2(3(#)))))<<SC>>)"
    with="j_0";
auto;
auto;
auto;

select formula="\forall int i#24; (   (leq(Z(0(#)), i#24) & lt(i#24, seqLen(Seq::select(heapAtPre_B<<anonHeapFunction>>, record_B, org.apache.commons.csv.CSVRecord::$key_seq))))<<SC>> ->   (java.lang.String)(any::seqGet(Seq::select(heapAtPre_B<<anonHeapFunction>>, record_B, org.apache.commons.csv.CSVRecord::$key_seq), i#24)) = java.lang.String::select(heapAtPre_B<<anonHeapFunction>>, self_B, de.polyas.core3.open.cred.CredTool::$idCol) -> \exists int j#25; ((  (leq(Z(0(#)), j#25) & lt(j#25, seqLen(strContent((java.lang.String)(any::seqGet(Seq::select(heapAtPre_B<<anonHeapFunction>>, record_B, org.apache.commons.csv.CSVRecord::$value_seq), i#24))))))<<SC>> & gt((int)(any::seqGet(strContent((java.lang.String)(any::seqGet(Seq::select(heapAtPre_B<<anonHeapFunction>>, record_B, org.apache.commons.csv.CSVRecord::$value_seq), i#24))), j#25)), C(2(3(#)))))<<SC>>))";
rule allRight
    formula="\forall int i#24; (   (leq(Z(0(#)), i#24) & lt(i#24, seqLen(Seq::select(heapAtPre_B<<anonHeapFunction>>, record_B, org.apache.commons.csv.CSVRecord::$key_seq))))<<SC>> ->   (java.lang.String)(any::seqGet(Seq::select(heapAtPre_B<<anonHeapFunction>>, record_B, org.apache.commons.csv.CSVRecord::$key_seq), i#24)) = java.lang.String::select(heapAtPre_B<<anonHeapFunction>>, self_B, de.polyas.core3.open.cred.CredTool::$idCol) -> \exists int j#25; ((  (leq(Z(0(#)), j#25) & lt(j#25, seqLen(strContent((java.lang.String)(any::seqGet(Seq::select(heapAtPre_B<<anonHeapFunction>>, record_B, org.apache.commons.csv.CSVRecord::$value_seq), i#24))))))<<SC>> & gt((int)(any::seqGet(strContent((java.lang.String)(any::seqGet(Seq::select(heapAtPre_B<<anonHeapFunction>>, record_B, org.apache.commons.csv.CSVRecord::$value_seq), i#24))), j#25)), C(2(3(#)))))<<SC>>))";
rule impRight
    formula="(leq(Z(0(#)), i_24_0) & lt(i_24_0, seqLen(Seq::select(heapAtPre_B<<anonHeapFunction>>, record_B, org.apache.commons.csv.CSVRecord::$key_seq))))<<SC>> ->   (java.lang.String)(any::seqGet(Seq::select(heapAtPre_B<<anonHeapFunction>>, record_B, org.apache.commons.csv.CSVRecord::$key_seq), i_24_0)) = java.lang.String::select(heapAtPre_B<<anonHeapFunction>>, self_B, de.polyas.core3.open.cred.CredTool::$idCol) -> \exists int j#25; ((  (leq(Z(0(#)), j#25) & lt(j#25, seqLen(strContent((java.lang.String)(any::seqGet(Seq::select(heapAtPre_B<<anonHeapFunction>>, record_B, org.apache.commons.csv.CSVRecord::$value_seq), i_24_0))))))<<SC>> & gt((int)(any::seqGet(strContent((java.lang.String)(any::seqGet(Seq::select(heapAtPre_B<<anonHeapFunction>>, record_B, org.apache.commons.csv.CSVRecord::$value_seq), i_24_0))), j#25)), C(2(3(#)))))<<SC>>)";
rule impRight
    formula="(java.lang.String)(any::seqGet(Seq::select(heapAtPre_B<<anonHeapFunction>>, record_B, org.apache.commons.csv.CSVRecord::$key_seq), i_24_0)) = java.lang.String::select(heapAtPre_B<<anonHeapFunction>>, self_B, de.polyas.core3.open.cred.CredTool::$idCol) -> \exists int j#25; ((  (leq(Z(0(#)), j#25) & lt(j#25, seqLen(strContent((java.lang.String)(any::seqGet(Seq::select(heapAtPre_B<<anonHeapFunction>>, record_B, org.apache.commons.csv.CSVRecord::$value_seq), i_24_0))))))<<SC>> & gt((int)(any::seqGet(strContent((java.lang.String)(any::seqGet(Seq::select(heapAtPre_B<<anonHeapFunction>>, record_B, org.apache.commons.csv.CSVRecord::$value_seq), i_24_0))), j#25)), C(2(3(#)))))<<SC>>)";
instantiate
    formula="\forall int i; (   lt(i, seqLen(Seq::select(heapAtPre_A<<anonHeapFunction>>, record_A, org.apache.commons.csv.CSVRecord::$key_seq))) & geq(i, Z(0(#))) ->   java.lang.String::seqGet(Seq::select(heapAtPre_A<<anonHeapFunction>>, record_A, org.apache.commons.csv.CSVRecord::$key_seq), i) = java.lang.String::select(heapAtPre_B<<anonHeapFunction>>, self_B, de.polyas.core3.open.cred.CredTool::$idCol) -> \exists int j; (  gt(int::seqGet(strContent(java.lang.String::seqGet(Seq::select(heapAtPre_A<<anonHeapFunction>>, record_A, org.apache.commons.csv.CSVRecord::$value_seq), i)), j), Z(2(3(#)))) & lt(j, seqLen(strContent(java.lang.String::seqGet(Seq::select(heapAtPre_A<<anonHeapFunction>>, record_A, org.apache.commons.csv.CSVRecord::$value_seq), i)))) & geq(j, Z(0(#)))))"
    with="i_24_0";
rule doubleImpLeft
    formula="lt(i_24_0, seqLen(Seq::select(heapAtPre_A<<anonHeapFunction>>, record_A, org.apache.commons.csv.CSVRecord::$key_seq))) & geq(i_24_0, Z(0(#))) ->   java.lang.String::seqGet(Seq::select(heapAtPre_A<<anonHeapFunction>>, record_A, org.apache.commons.csv.CSVRecord::$key_seq), i_24_0) = java.lang.String::select(heapAtPre_B<<anonHeapFunction>>, self_B, de.polyas.core3.open.cred.CredTool::$idCol) -> \exists int j; (  gt(int::seqGet(strContent(java.lang.String::seqGet(Seq::select(heapAtPre_A<<anonHeapFunction>>, record_A, org.apache.commons.csv.CSVRecord::$value_seq), i_24_0)), j), Z(2(3(#)))) & lt(j, seqLen(strContent(java.lang.String::seqGet(Seq::select(heapAtPre_A<<anonHeapFunction>>, record_A, org.apache.commons.csv.CSVRecord::$value_seq), i_24_0)))) & geq(j, Z(0(#))))";
select formula="\exists int j; (  gt(int::seqGet(strContent(java.lang.String::seqGet(Seq::select(heapAtPre_A<<anonHeapFunction>>, record_A, org.apache.commons.csv.CSVRecord::$value_seq), i_24_0)), j), Z(2(3(#)))) & lt(j, seqLen(strContent(java.lang.String::seqGet(Seq::select(heapAtPre_A<<anonHeapFunction>>, record_A, org.apache.commons.csv.CSVRecord::$value_seq), i_24_0)))) & geq(j, Z(0(#))))";
rule exLeft
    formula="\exists int j; (  gt(int::seqGet(strContent(java.lang.String::seqGet(Seq::select(heapAtPre_A<<anonHeapFunction>>, record_A, org.apache.commons.csv.CSVRecord::$value_seq), i_24_0)), j), Z(2(3(#)))) & lt(j, seqLen(strContent(java.lang.String::seqGet(Seq::select(heapAtPre_A<<anonHeapFunction>>, record_A, org.apache.commons.csv.CSVRecord::$value_seq), i_24_0)))) & geq(j, Z(0(#))))";
instantiate
    formula="\exists int j#25; ((  (leq(Z(0(#)), j#25) & lt(j#25, seqLen(strContent((java.lang.String)(any::seqGet(Seq::select(heapAtPre_B<<anonHeapFunction>>, record_B, org.apache.commons.csv.CSVRecord::$value_seq), i_24_0))))))<<SC>> & gt((int)(any::seqGet(strContent((java.lang.String)(any::seqGet(Seq::select(heapAtPre_B<<anonHeapFunction>>, record_B, org.apache.commons.csv.CSVRecord::$value_seq), i_24_0))), j#25)), C(2(3(#)))))<<SC>>)"
    with="j_0";
auto;
auto;
auto;

# -------------------------------------------------------------------------------------------------

select formula="java.lang.Object::<inv>(heapAtPre_A<<anonHeapFunction>>, selfAtPost_A)";
rule Class_invariant_axiom_for_de_polyas_core3_open_cred_CredTool
    formula="java.lang.Object::<inv>(heapAtPre_A<<anonHeapFunction>>, selfAtPost_A)";
macro autopilot steps=10000 occ=231;

select formula="\exists int i; (  leq(Z(0(#)), i) & lt(i, seqLen(Seq::select(heapAtPre_A<<anonHeapFunction>>, java.util.ArrayList::select(heapAtPre_A<<anonHeapFunction>>, selfAtPost_A, de.polyas.core3.open.cred.CredTool::$inputColsForPolyas), java.util.Collection::$seq))) &   (java.lang.String)(any::seqGet(Seq::select(heapAtPre_A<<anonHeapFunction>>, java.util.ArrayList::select(heapAtPre_A<<anonHeapFunction>>, selfAtPost_A, de.polyas.core3.open.cred.CredTool::$inputColsForPolyas), java.util.Collection::$seq), i)) = java.lang.String::select(heapAtPre_A<<anonHeapFunction>>, selfAtPost_A, de.polyas.core3.open.cred.CredTool::$idCol))";
instantiate
    formula="\exists int i; (  leq(Z(0(#)), i) & lt(i, seqLen(Seq::select(heapAtPre_A<<anonHeapFunction>>, java.util.ArrayList::select(heapAtPre_A<<anonHeapFunction>>, selfAtPost_A, de.polyas.core3.open.cred.CredTool::$inputColsForPolyas), java.util.Collection::$seq))) &   (java.lang.String)(any::seqGet(Seq::select(heapAtPre_A<<anonHeapFunction>>, java.util.ArrayList::select(heapAtPre_A<<anonHeapFunction>>, selfAtPost_A, de.polyas.core3.open.cred.CredTool::$inputColsForPolyas), java.util.Collection::$seq), i)) = java.lang.String::select(heapAtPre_A<<anonHeapFunction>>, selfAtPost_A, de.polyas.core3.open.cred.CredTool::$idCol))"
    with="i_5";
auto;

select formula="\exists int i_2; (  leq(Z(0(#)), i_2) & lt(i_2, seqLen(Seq::select(heapAtPre_A<<anonHeapFunction>>, java.util.LinkedList::select(heapAtPre_A<<anonHeapFunction>>, selfAtPost_A, de.polyas.core3.open.cred.CredTool::$inputCols), java.util.Collection::$seq))) &   (java.lang.String)(any::seqGet(Seq::select(heapAtPre_A<<anonHeapFunction>>, java.util.LinkedList::select(heapAtPre_A<<anonHeapFunction>>, selfAtPost_A, de.polyas.core3.open.cred.CredTool::$inputCols), java.util.Collection::$seq), i_2)) = java.lang.String::select(heapAtPre_A<<anonHeapFunction>>, selfAtPost_A, de.polyas.core3.open.cred.CredTool::$idCol))";
instantiate
    formula="\exists int i_2; (  leq(Z(0(#)), i_2) & lt(i_2, seqLen(Seq::select(heapAtPre_A<<anonHeapFunction>>, java.util.LinkedList::select(heapAtPre_A<<anonHeapFunction>>, selfAtPost_A, de.polyas.core3.open.cred.CredTool::$inputCols), java.util.Collection::$seq))) &   (java.lang.String)(any::seqGet(Seq::select(heapAtPre_A<<anonHeapFunction>>, java.util.LinkedList::select(heapAtPre_A<<anonHeapFunction>>, selfAtPost_A, de.polyas.core3.open.cred.CredTool::$inputCols), java.util.Collection::$seq), i_2)) = java.lang.String::select(heapAtPre_A<<anonHeapFunction>>, selfAtPost_A, de.polyas.core3.open.cred.CredTool::$idCol))"
    with="i_2_2";
auto;

select formula="java.lang.Object::<inv>(heapAtPre_B<<anonHeapFunction>>, self_B)";
rule Class_invariant_axiom_for_de_polyas_core3_open_cred_CredTool
    formula="java.lang.Object::<inv>(heapAtPre_B<<anonHeapFunction>>, self_B)";
macro autopilot steps=10000 occ=231;

select formula="\exists int i; (  leq(Z(0(#)), i) & lt(i, seqLen(Seq::select(heapAtPre_B<<anonHeapFunction>>, java.util.ArrayList::select(heapAtPre_B<<anonHeapFunction>>, self_B, de.polyas.core3.open.cred.CredTool::$inputColsForPolyas), java.util.Collection::$seq))) &   (java.lang.String)(any::seqGet(Seq::select(heapAtPre_B<<anonHeapFunction>>, java.util.ArrayList::select(heapAtPre_B<<anonHeapFunction>>, self_B, de.polyas.core3.open.cred.CredTool::$inputColsForPolyas), java.util.Collection::$seq), i)) = java.lang.String::select(heapAtPre_B<<anonHeapFunction>>, self_B, de.polyas.core3.open.cred.CredTool::$idCol))";
instantiate
    formula="\exists int i; (  leq(Z(0(#)), i) & lt(i, seqLen(Seq::select(heapAtPre_B<<anonHeapFunction>>, java.util.ArrayList::select(heapAtPre_B<<anonHeapFunction>>, self_B, de.polyas.core3.open.cred.CredTool::$inputColsForPolyas), java.util.Collection::$seq))) &   (java.lang.String)(any::seqGet(Seq::select(heapAtPre_B<<anonHeapFunction>>, java.util.ArrayList::select(heapAtPre_B<<anonHeapFunction>>, self_B, de.polyas.core3.open.cred.CredTool::$inputColsForPolyas), java.util.Collection::$seq), i)) = java.lang.String::select(heapAtPre_B<<anonHeapFunction>>, self_B, de.polyas.core3.open.cred.CredTool::$idCol))"
    with="i_11";
auto;

select formula="\exists int i_2; (  leq(Z(0(#)), i_2) & lt(i_2, seqLen(Seq::select(heapAtPre_B<<anonHeapFunction>>, java.util.LinkedList::select(heapAtPre_B<<anonHeapFunction>>, self_B, de.polyas.core3.open.cred.CredTool::$inputCols), java.util.Collection::$seq))) &   (java.lang.String)(any::seqGet(Seq::select(heapAtPre_B<<anonHeapFunction>>, java.util.LinkedList::select(heapAtPre_B<<anonHeapFunction>>, self_B, de.polyas.core3.open.cred.CredTool::$inputCols), java.util.Collection::$seq), i_2)) = java.lang.String::select(heapAtPre_B<<anonHeapFunction>>, self_B, de.polyas.core3.open.cred.CredTool::$idCol))";
instantiate
    formula="\exists int i_2; (  leq(Z(0(#)), i_2) & lt(i_2, seqLen(Seq::select(heapAtPre_B<<anonHeapFunction>>, java.util.LinkedList::select(heapAtPre_B<<anonHeapFunction>>, self_B, de.polyas.core3.open.cred.CredTool::$inputCols), java.util.Collection::$seq))) &   (java.lang.String)(any::seqGet(Seq::select(heapAtPre_B<<anonHeapFunction>>, java.util.LinkedList::select(heapAtPre_B<<anonHeapFunction>>, self_B, de.polyas.core3.open.cred.CredTool::$inputCols), java.util.Collection::$seq), i_2)) = java.lang.String::select(heapAtPre_B<<anonHeapFunction>>, self_B, de.polyas.core3.open.cred.CredTool::$idCol))"
    with="i_2_6";
auto;

# -------------------------------------------------------------------------------------------------

select formula="java.lang.Object::<inv>(heapAfter_initDistVals, selfAtPost_A)";
rule Class_invariant_axiom_for_de_polyas_core3_open_cred_CredTool
    formula="java.lang.Object::<inv>(heapAfter_initDistVals, selfAtPost_A)";
macro autopilot steps=10000 occ=232;

select formula="\exists int i; (  leq(Z(0(#)), i) & lt(i, seqLen(Seq::select(heapAfter_initDistVals, java.util.ArrayList::select(heapAfter_initDistVals, selfAtPost_A, de.polyas.core3.open.cred.CredTool::$inputColsForPolyas), java.util.Collection::$seq))) &   (java.lang.String)(any::seqGet(Seq::select(heapAfter_initDistVals, java.util.ArrayList::select(heapAfter_initDistVals, selfAtPost_A, de.polyas.core3.open.cred.CredTool::$inputColsForPolyas), java.util.Collection::$seq), i)) = java.lang.String::select(heapAfter_initDistVals, selfAtPost_A, de.polyas.core3.open.cred.CredTool::$idCol))";
instantiate
    formula="\exists int i; (  leq(Z(0(#)), i) & lt(i, seqLen(Seq::select(heapAfter_initDistVals, java.util.ArrayList::select(heapAfter_initDistVals, selfAtPost_A, de.polyas.core3.open.cred.CredTool::$inputColsForPolyas), java.util.Collection::$seq))) &   (java.lang.String)(any::seqGet(Seq::select(heapAfter_initDistVals, java.util.ArrayList::select(heapAfter_initDistVals, selfAtPost_A, de.polyas.core3.open.cred.CredTool::$inputColsForPolyas), java.util.Collection::$seq), i)) = java.lang.String::select(heapAfter_initDistVals, selfAtPost_A, de.polyas.core3.open.cred.CredTool::$idCol))"
    with="i_5";
auto;

select formula="\exists int i_2; (  leq(Z(0(#)), i_2) & lt(i_2, seqLen(Seq::select(heapAfter_initDistVals, java.util.LinkedList::select(heapAfter_initDistVals, selfAtPost_A, de.polyas.core3.open.cred.CredTool::$inputCols), java.util.Collection::$seq))) &   (java.lang.String)(any::seqGet(Seq::select(heapAfter_initDistVals, java.util.LinkedList::select(heapAfter_initDistVals, selfAtPost_A, de.polyas.core3.open.cred.CredTool::$inputCols), java.util.Collection::$seq), i_2)) = java.lang.String::select(heapAfter_initDistVals, selfAtPost_A, de.polyas.core3.open.cred.CredTool::$idCol))";
instantiate
    formula="\exists int i_2; (  leq(Z(0(#)), i_2) & lt(i_2, seqLen(Seq::select(heapAfter_initDistVals, java.util.LinkedList::select(heapAfter_initDistVals, selfAtPost_A, de.polyas.core3.open.cred.CredTool::$inputCols), java.util.Collection::$seq))) &   (java.lang.String)(any::seqGet(Seq::select(heapAfter_initDistVals, java.util.LinkedList::select(heapAfter_initDistVals, selfAtPost_A, de.polyas.core3.open.cred.CredTool::$inputCols), java.util.Collection::$seq), i_2)) = java.lang.String::select(heapAfter_initDistVals, selfAtPost_A, de.polyas.core3.open.cred.CredTool::$idCol))"
    with="i_2_2";
auto;

select formula="java.lang.Object::<inv>(heapAfter_initDistVals_0, self_B)";
rule Class_invariant_axiom_for_de_polyas_core3_open_cred_CredTool
    formula="java.lang.Object::<inv>(heapAfter_initDistVals_0, self_B)";
macro autopilot steps=10000 occ=232;

select formula="\exists int i; (  leq(Z(0(#)), i) & lt(i, seqLen(Seq::select(heapAfter_initDistVals_0, java.util.ArrayList::select(heapAfter_initDistVals_0, self_B, de.polyas.core3.open.cred.CredTool::$inputColsForPolyas), java.util.Collection::$seq))) &   (java.lang.String)(any::seqGet(Seq::select(heapAfter_initDistVals_0, java.util.ArrayList::select(heapAfter_initDistVals_0, self_B, de.polyas.core3.open.cred.CredTool::$inputColsForPolyas), java.util.Collection::$seq), i)) = java.lang.String::select(heapAfter_initDistVals_0, self_B, de.polyas.core3.open.cred.CredTool::$idCol))";
instantiate
    formula="\exists int i; (  leq(Z(0(#)), i) & lt(i, seqLen(Seq::select(heapAfter_initDistVals_0, java.util.ArrayList::select(heapAfter_initDistVals_0, self_B, de.polyas.core3.open.cred.CredTool::$inputColsForPolyas), java.util.Collection::$seq))) &   (java.lang.String)(any::seqGet(Seq::select(heapAfter_initDistVals_0, java.util.ArrayList::select(heapAfter_initDistVals_0, self_B, de.polyas.core3.open.cred.CredTool::$inputColsForPolyas), java.util.Collection::$seq), i)) = java.lang.String::select(heapAfter_initDistVals_0, self_B, de.polyas.core3.open.cred.CredTool::$idCol))"
    with="i_11";
auto;

select formula="\exists int i_2; (  leq(Z(0(#)), i_2) & lt(i_2, seqLen(Seq::select(heapAfter_initDistVals_0, java.util.LinkedList::select(heapAfter_initDistVals_0, self_B, de.polyas.core3.open.cred.CredTool::$inputCols), java.util.Collection::$seq))) &   (java.lang.String)(any::seqGet(Seq::select(heapAfter_initDistVals_0, java.util.LinkedList::select(heapAfter_initDistVals_0, self_B, de.polyas.core3.open.cred.CredTool::$inputCols), java.util.Collection::$seq), i_2)) = java.lang.String::select(heapAfter_initDistVals_0, self_B, de.polyas.core3.open.cred.CredTool::$idCol))";
instantiate
    formula="\exists int i_2; (  leq(Z(0(#)), i_2) & lt(i_2, seqLen(Seq::select(heapAfter_initDistVals_0, java.util.LinkedList::select(heapAfter_initDistVals_0, self_B, de.polyas.core3.open.cred.CredTool::$inputCols), java.util.Collection::$seq))) &   (java.lang.String)(any::seqGet(Seq::select(heapAfter_initDistVals_0, java.util.LinkedList::select(heapAfter_initDistVals_0, self_B, de.polyas.core3.open.cred.CredTool::$inputCols), java.util.Collection::$seq), i_2)) = java.lang.String::select(heapAfter_initDistVals_0, self_B, de.polyas.core3.open.cred.CredTool::$idCol))"
    with="i_2_6";
auto;

# -------------------------------------------------------------------------------------------------

select formula="de.polyas.core3.open.crypto.basic.Hashes::<$inv>(heapAtPre_A<<anonHeapFunction>>)";
rule Static_class_invariant_axiom_for_de_polyas_core3_open_crypto_basic_Hashes
    formula="de.polyas.core3.open.crypto.basic.Hashes::<$inv>(heapAtPre_A<<anonHeapFunction>>)";
macro autopilot steps=10000 occ=231;

select formula="de.polyas.core3.open.crypto.basic.Hashes::<$inv>(heapAtPre_B<<anonHeapFunction>>)";
rule Static_class_invariant_axiom_for_de_polyas_core3_open_crypto_basic_Hashes
    formula="de.polyas.core3.open.crypto.basic.Hashes::<$inv>(heapAtPre_B<<anonHeapFunction>>)";
macro autopilot steps=10000 occ=231;

# -------------------------------------------------------------------------------------------------

select formula="de.polyas.core3.open.cred.Crypto::<$inv>(heapAtPre_A<<anonHeapFunction>>)";
rule Static_class_invariant_axiom_for_de_polyas_core3_open_cred_Crypto
    formula="de.polyas.core3.open.cred.Crypto::<$inv>(heapAtPre_A<<anonHeapFunction>>)";
macro autopilot steps=10000 occ=231;

select formula="de.polyas.core3.open.cred.Crypto::<$inv>(heapAtPre_B<<anonHeapFunction>>)";
rule Static_class_invariant_axiom_for_de_polyas_core3_open_cred_Crypto
    formula="de.polyas.core3.open.cred.Crypto::<$inv>(heapAtPre_B<<anonHeapFunction>>)";
macro autopilot steps=10000 occ=231;

# -------------------------------------------------------------------------------------------------

select formula="de.polyas.core3.open.cred.CredentialGenerator::<$inv>(heapAtPre_A<<anonHeapFunction>>)";
rule Static_class_invariant_axiom_for_de_polyas_core3_open_cred_CredentialGenerator
    formula="de.polyas.core3.open.cred.CredentialGenerator::<$inv>(heapAtPre_A<<anonHeapFunction>>)";
macro autopilot steps=10000 occ=231;

select formula="de.polyas.core3.open.cred.CredentialGenerator::<$inv>(heapAtPre_B<<anonHeapFunction>>)";
rule Static_class_invariant_axiom_for_de_polyas_core3_open_cred_CredentialGenerator
    formula="de.polyas.core3.open.cred.CredentialGenerator::<$inv>(heapAtPre_B<<anonHeapFunction>>)";
macro autopilot steps=10000 occ=231;

# -------------------------------------------------------------------------------------------------

select formula="java.math.BigInteger::<$inv>(heapAtPre_A<<anonHeapFunction>>)";
rule Static_class_invariant_axiom_for_java_math_BigInteger
    formula="java.math.BigInteger::<$inv>(heapAtPre_A<<anonHeapFunction>>)";
macro autopilot steps=10000 occ=231;

select formula="java.math.BigInteger::<$inv>(heapAtPre_B<<anonHeapFunction>>)";
rule Static_class_invariant_axiom_for_java_math_BigInteger
    formula="java.math.BigInteger::<$inv>(heapAtPre_B<<anonHeapFunction>>)";
macro autopilot steps=10000 occ=231;

# -------------------------------------------------------------------------------------------------

select formula="java.lang.Object::<inv>(heapAtPre_A<<anonHeapFunction>>, record_A)";
rule Class_invariant_axiom_for_org_apache_commons_csv_CSVRecord
    formula="java.lang.Object::<inv>(heapAtPre_A<<anonHeapFunction>>, record_A)";
macro autopilot steps=10000 occ=231;

select formula="java.lang.Object::<inv>(heapAtPre_B<<anonHeapFunction>>, record_B)";
rule Class_invariant_axiom_for_org_apache_commons_csv_CSVRecord
    formula="java.lang.Object::<inv>(heapAtPre_B<<anonHeapFunction>>, record_B)";
macro autopilot steps=10000 occ=231;

# -------------------------------------------------------------------------------------------------

select formula="java.lang.Object::<inv>(heapAfter_initDistVals, record_A)";
rule Class_invariant_axiom_for_org_apache_commons_csv_CSVRecord
    formula="java.lang.Object::<inv>(heapAfter_initDistVals, record_A)";
macro autopilot steps=10000 occ=232;

select formula="java.lang.Object::<inv>(heapAfter_initDistVals_0, record_B)";
rule Class_invariant_axiom_for_org_apache_commons_csv_CSVRecord
    formula="java.lang.Object::<inv>(heapAfter_initDistVals_0, record_B)";
macro autopilot steps=10000 occ=232;

# -------------------------------------------------------------------------------------------------

tryclose steps=10000000;
