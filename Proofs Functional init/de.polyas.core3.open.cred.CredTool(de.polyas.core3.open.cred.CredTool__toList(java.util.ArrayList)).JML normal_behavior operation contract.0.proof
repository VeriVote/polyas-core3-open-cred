\profile "Java Profile";

\settings {
"#Proof-Settings-Config-File
#Sun Nov 10 02:16:53 CET 2019
[Labels]UseOriginLabels=false
[StrategyProperty]QUERYAXIOM_OPTIONS_KEY=QUERYAXIOM_ON
[SMTSettings]invariantForall=false
[Strategy]ActiveStrategy=JavaCardDLStrategy
[StrategyProperty]USER_TACLETS_OPTIONS_KEY1=USER_TACLETS_OFF
[StrategyProperty]QUANTIFIERS_OPTIONS_KEY=QUANTIFIERS_NON_SPLITTING_WITH_PROGS
[StrategyProperty]USER_TACLETS_OPTIONS_KEY2=USER_TACLETS_OFF
[Choice]DefaultChoices=methodExpansion-methodExpansion\\:modularOnly , mergeGenerateIsWeakeningGoal-mergeGenerateIsWeakeningGoal\\:off , wdChecks-wdChecks\\:off , wdOperator-wdOperator\\:L , permissions-permissions\\:off , integerSimplificationRules-integerSimplificationRules\\:full , reach-reach\\:on , moreSeqRules-moreSeqRules\\:on , sequences-sequences\\:on , bigint-bigint\\:on , modelFields-modelFields\\:treatAsAxiom , Strings-Strings\\:on , JavaCard-JavaCard\\:off , runtimeExceptions-runtimeExceptions\\:allow , programRules-programRules\\:Java , intRules-intRules\\:javaSemantics , initialisation-initialisation\\:disableStaticInitialisation , assertions-assertions\\:on
[StrategyProperty]LOOP_OPTIONS_KEY=LOOP_INVARIANT
[StrategyProperty]INF_FLOW_CHECK_PROPERTY=INF_FLOW_CHECK_FALSE
[SMTSettings]UseBuiltUniqueness=false
[SMTSettings]explicitTypeHierarchy=false
[SMTSettings]instantiateHierarchyAssumptions=true
[StrategyProperty]NON_LIN_ARITH_OPTIONS_KEY=NON_LIN_ARITH_DEF_OPS
[SMTSettings]SelectedTaclets=
[StrategyProperty]DEP_OPTIONS_KEY=DEP_ON
[StrategyProperty]AUTO_INDUCTION_OPTIONS_KEY=AUTO_INDUCTION_OFF
[Strategy]MaximumNumberOfAutomaticApplications=10000
[StrategyProperty]STOPMODE_OPTIONS_KEY=STOPMODE_DEFAULT
[StrategyProperty]CLASS_AXIOM_OPTIONS_KEY=CLASS_AXIOM_FREE
[SMTSettings]useConstantsForBigOrSmallIntegers=true
[StrategyProperty]MPS_OPTIONS_KEY=MPS_MERGE
[StrategyProperty]SYMBOLIC_EXECUTION_NON_EXECUTION_BRANCH_HIDING_OPTIONS_KEY=SYMBOLIC_EXECUTION_NON_EXECUTION_BRANCH_HIDING_OFF
[Strategy]Timeout=-1
[StrategyProperty]SYMBOLIC_EXECUTION_ALIAS_CHECK_OPTIONS_KEY=SYMBOLIC_EXECUTION_ALIAS_CHECK_NEVER
[StrategyProperty]QUERY_NEW_OPTIONS_KEY=QUERY_OFF
[SMTSettings]useUninterpretedMultiplication=true
[StrategyProperty]BLOCK_OPTIONS_KEY=BLOCK_CONTRACT_INTERNAL
[StrategyProperty]METHOD_OPTIONS_KEY=METHOD_CONTRACT
[StrategyProperty]USER_TACLETS_OPTIONS_KEY3=USER_TACLETS_OFF
[SMTSettings]maxGenericSorts=2
[StrategyProperty]OSS_OPTIONS_KEY=OSS_ON
[StrategyProperty]SPLITTING_OPTIONS_KEY=SPLITTING_DELAYED
[SMTSettings]integersMinimum=-2147483645
[StrategyProperty]VBT_PHASE=VBT_SYM_EX
[SMTSettings]integersMaximum=2147483645
"
}

\javaSource "../src";

\proofObligation "#Proof Obligation Settings
#Sun Nov 10 02:16:53 CET 2019
contract=de.polyas.core3.open.cred.CredTool[de.polyas.core3.open.cred.CredTool\\:\\:toList(java.util.ArrayList)].JML normal_behavior operation contract.0
name=de.polyas.core3.open.cred.CredTool[de.polyas.core3.open.cred.CredTool\\:\\:toList(java.util.ArrayList)].JML normal_behavior operation contract.0
class=de.uka.ilkd.key.proof.init.FunctionalOperationContractPO
";

\proof {
(keyLog "0" (keyUser "flo" ) (keyVersion "57d504cc0f"))

(autoModeTime "504")

(branch "dummy ID"
 (builtin "One Step Simplification" (formula "1") (newnames "ls,result_549,exc_626,heapAtPre_0,o,f"))
(rule "impRight" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "3"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "5"))
(rule "andLeft" (formula "6"))
(rule "andLeft" (formula "7"))
(rule "notLeft" (formula "8"))
(rule "eqSymm" (formula "9") (term "1,0,0,1,0,1"))
(rule "replace_known_right" (formula "2") (term "0") (ifseqformula "8"))
 (builtin "One Step Simplification" (formula "2"))
(rule "castedGetAny" (formula "9") (term "0,0,1,0,0,1,0,0,0,1"))
(rule "castedGetAny" (formula "5") (term "0,0,1,0"))
(rule "inEqSimp_commuteLeq" (formula "9") (term "0,0,0,0,1,0,0,0,1"))
(rule "inEqSimp_commuteLeq" (formula "5") (term "0,0,0"))
(rule "assignment" (formula "9") (term "1"))
 (builtin "One Step Simplification" (formula "9"))
(rule "Class_invariant_axiom_for_java_util_ArrayList" (formula "4"))
(rule "true_left" (formula "4"))
(rule "Static_class_invariant_axiom_for_org_apache_commons_csv_CSVFormat" (formula "5"))
(rule "notLeft" (formula "5"))
(rule "Static_class_invariant_axiom_for_de_polyas_core3_open_cred_CredTool" (formula "5"))
 (builtin "One Step Simplification" (formula "5"))
(rule "insert_constant_string_value" (formula "5") (term "0,0,1,0,0") (ifseqformula "1"))
 (builtin "One Step Simplification" (formula "5"))
(rule "insert_constant_string_value" (formula "5") (term "0,0,1,0,0,0") (ifseqformula "1"))
 (builtin "One Step Simplification" (formula "5"))
(rule "insert_constant_string_value" (formula "5") (term "0,0,1,0,0,0,0") (ifseqformula "1"))
 (builtin "One Step Simplification" (formula "5"))
(rule "castDel" (formula "5") (term "0,0,0,1,0,0,0"))
(rule "castDel" (formula "5") (term "0,0,0,1,0,0"))
(rule "castDel" (formula "5") (term "0,0,0,1,0,0,0,0"))
(rule "andLeft" (formula "5"))
(rule "andLeft" (formula "5"))
(rule "notLeft" (formula "6"))
(rule "andLeft" (formula "5"))
(rule "notLeft" (formula "6"))
(rule "andLeft" (formula "5"))
(rule "notLeft" (formula "6"))
(rule "andLeft" (formula "5"))
(rule "andLeft" (formula "5"))
(rule "notLeft" (formula "7"))
(rule "andLeft" (formula "5"))
(rule "notLeft" (formula "7"))
(rule "notLeft" (formula "6"))
(rule "notLeft" (formula "5"))
(rule "applyEq" (formula "12") (term "0") (ifseqformula "5"))
(rule "commute_and" (formula "4") (term "0,0"))
(rule "methodBodyExpand" (formula "15") (term "1") (newnames "heapBefore_toList,savedHeapBefore_toList"))
 (builtin "One Step Simplification" (formula "15"))
(rule "returnUnfold" (formula "15") (term "1") (inst "#v0=a"))
(rule "variableDeclarationAssign" (formula "15") (term "1"))
(rule "variableDeclaration" (formula "15") (term "1") (newnames "a"))
 (builtin "Use Operation Contract" (formula "15") (newnames "heapBefore_ArrayList,self_472,exc_627,heapAfter_ArrayList,anon_heap_ArrayList") (contract "java.util.ArrayList[java.util.ArrayList::ArrayList(java.util.Collection)].JML normal_behavior operation contract.0"))
(branch "Post (ArrayList)"
    (builtin "One Step Simplification" (formula "17"))
    (builtin "One Step Simplification" (formula "7"))
   (rule "andLeft" (formula "7"))
   (rule "selectCreatedOfAnonAsFormulaEQ" (formula "8") (term "1,1,0,1,0") (ifseqformula "7"))
   (rule "andLeft" (formula "8"))
   (rule "andLeft" (formula "8"))
   (rule "andLeft" (formula "10"))
   (rule "andLeft" (formula "9"))
   (rule "andLeft" (formula "11"))
   (rule "andLeft" (formula "9"))
   (rule "andLeft" (formula "13"))
   (rule "notLeft" (formula "9"))
   (rule "andLeft" (formula "9"))
   (rule "andLeft" (formula "13"))
   (rule "notLeft" (formula "9"))
   (rule "andLeft" (formula "12"))
   (rule "notLeft" (formula "13"))
   (rule "notLeft" (formula "12"))
   (rule "replace_known_right" (formula "9") (term "0") (ifseqformula "14"))
    (builtin "One Step Simplification" (formula "9"))
   (rule "assignment" (formula "25") (term "1"))
    (builtin "One Step Simplification" (formula "25"))
   (rule "pullOutSelect" (formula "11") (term "1") (inst "selectSK=java_util_Collection_seq_0"))
   (rule "simplifySelectOfAnonEQ" (formula "11") (ifseqformula "7"))
    (builtin "One Step Simplification" (formula "11") (ifInst ""  (formula "25")) (ifInst ""  (formula "2")))
   (rule "simplifySelectOfAnonEQ" (formula "12") (ifseqformula "7"))
    (builtin "One Step Simplification" (formula "12") (ifInst ""  (formula "16")) (ifInst ""  (formula "15")))
   (rule "applyEqReverse" (formula "12") (term "1") (ifseqformula "11"))
   (rule "hideAuxiliaryEq" (formula "11"))
   (rule "Class_invariant_axiom_for_java_util_ArrayList" (formula "13"))
   (rule "true_left" (formula "13"))
   (rule "methodCallReturn" (formula "24") (term "1"))
   (rule "assignment" (formula "24") (term "1"))
    (builtin "One Step Simplification" (formula "24"))
   (rule "methodCallEmpty" (formula "24") (term "1"))
   (rule "tryEmpty" (formula "24") (term "1"))
   (rule "emptyModality" (formula "24") (term "1"))
   (rule "andRight" (formula "24"))
   (branch
      (rule "andRight" (formula "24"))
      (branch
         (rule "andRight" (formula "24"))
         (branch
             (builtin "One Step Simplification" (formula "24"))
            (rule "inEqSimp_ltToLeq" (formula "4") (term "0,0,0"))
            (rule "polySimp_mulComm0" (formula "4") (term "1,0,0,0,0,0"))
            (rule "inEqSimp_sepPosMonomial0" (formula "4") (term "0,0,0"))
            (rule "polySimp_mulComm0" (formula "4") (term "1,0,0,0"))
            (rule "polySimp_rightDist" (formula "4") (term "1,0,0,0"))
            (rule "mul_literals" (formula "4") (term "0,1,0,0,0"))
            (rule "polySimp_mulLiterals" (formula "4") (term "1,1,0,0,0"))
            (rule "polySimp_elimOne" (formula "4") (term "1,1,0,0,0"))
            (rule "nnf_imp2or" (formula "4") (term "0"))
            (rule "nnf_notAnd" (formula "4") (term "0,0"))
            (rule "inEqSimp_notLeq" (formula "4") (term "0,0,0"))
            (rule "polySimp_rightDist" (formula "4") (term "1,0,0,0,0,0"))
            (rule "mul_literals" (formula "4") (term "0,1,0,0,0,0,0"))
            (rule "polySimp_addAssoc" (formula "4") (term "0,0,0,0,0"))
            (rule "add_literals" (formula "4") (term "0,0,0,0,0,0"))
            (rule "add_zero_left" (formula "4") (term "0,0,0,0,0"))
            (rule "inEqSimp_sepPosMonomial1" (formula "4") (term "0,0,0"))
            (rule "polySimp_mulLiterals" (formula "4") (term "1,0,0,0"))
            (rule "polySimp_elimOne" (formula "4") (term "1,0,0,0"))
            (rule "inEqSimp_notGeq" (formula "4") (term "1,0,0"))
            (rule "mul_literals" (formula "4") (term "1,0,0,1,0,0"))
            (rule "add_zero_right" (formula "4") (term "0,0,1,0,0"))
            (rule "inEqSimp_sepPosMonomial0" (formula "4") (term "1,0,0"))
            (rule "mul_literals" (formula "4") (term "1,1,0,0"))
            (rule "Class_invariant_axiom_for_java_util_ArrayList" (formula "24"))
            (rule "closeTrue" (formula "24"))
         )
         (branch
            (rule "andRight" (formula "24"))
            (branch
                (builtin "One Step Simplification" (formula "24"))
               (rule "replaceKnownSelect_taclet0_1" (formula "24") (term "0,0,0,1,0"))
               (rule "replaceKnownSelect_taclet0_1" (formula "24") (term "0,1,1,0,0"))
               (rule "replaceKnownAuxiliaryConstant_taclet0_2" (formula "24") (term "0,0,0,1,0"))
               (rule "replaceKnownAuxiliaryConstant_taclet0_2" (formula "24") (term "0,1,1,0,0"))
               (rule "allRight" (formula "24") (inst "sk=i_0"))
               (rule "impRight" (formula "24"))
               (rule "andLeft" (formula "1"))
               (rule "notRight" (formula "26"))
               (rule "inEqSimp_ltToLeq" (formula "7") (term "0,0,0"))
               (rule "polySimp_mulComm0" (formula "7") (term "1,0,0,0,0,0"))
               (rule "inEqSimp_ltToLeq" (formula "3"))
               (rule "polySimp_mulComm0" (formula "3") (term "1,0,0"))
               (rule "polySimp_addComm1" (formula "3") (term "0"))
               (rule "inEqSimp_sepPosMonomial0" (formula "7") (term "0,0,0"))
               (rule "polySimp_mulComm0" (formula "7") (term "1,0,0,0"))
               (rule "polySimp_rightDist" (formula "7") (term "1,0,0,0"))
               (rule "polySimp_mulLiterals" (formula "7") (term "1,1,0,0,0"))
               (rule "mul_literals" (formula "7") (term "0,1,0,0,0"))
               (rule "polySimp_elimOne" (formula "7") (term "1,1,0,0,0"))
               (rule "inEqSimp_sepNegMonomial0" (formula "3"))
               (rule "polySimp_mulLiterals" (formula "3") (term "0"))
               (rule "polySimp_elimOne" (formula "3") (term "0"))
               (rule "nnf_imp2or" (formula "7") (term "0"))
               (rule "nnf_notAnd" (formula "7") (term "0,0"))
               (rule "inEqSimp_notGeq" (formula "7") (term "1,0,0"))
               (rule "times_zero_1" (formula "7") (term "1,0,0,1,0,0"))
               (rule "add_literals" (formula "7") (term "0,0,1,0,0"))
               (rule "inEqSimp_sepPosMonomial0" (formula "7") (term "1,0,0"))
               (rule "mul_literals" (formula "7") (term "1,1,0,0"))
               (rule "inEqSimp_notLeq" (formula "7") (term "0,0,0"))
               (rule "polySimp_rightDist" (formula "7") (term "1,0,0,0,0,0"))
               (rule "mul_literals" (formula "7") (term "0,1,0,0,0,0,0"))
               (rule "polySimp_addAssoc" (formula "7") (term "0,0,0,0,0"))
               (rule "add_literals" (formula "7") (term "0,0,0,0,0,0"))
               (rule "add_zero_left" (formula "7") (term "0,0,0,0,0"))
               (rule "inEqSimp_sepPosMonomial1" (formula "7") (term "0,0,0"))
               (rule "polySimp_mulLiterals" (formula "7") (term "1,0,0,0"))
               (rule "polySimp_elimOne" (formula "7") (term "1,0,0,0"))
               (rule "commute_or_2" (formula "7") (term "0"))
               (rule "commute_or" (formula "7") (term "0,0"))
               (rule "commute_or_2" (formula "7") (term "0"))
               (rule "allLeft" (formula "7") (inst "t=i_0"))
               (rule "replace_known_left" (formula "7") (term "0,0,0") (ifseqformula "1"))
                (builtin "One Step Simplification" (formula "7"))
               (rule "inEqSimp_commuteGeq" (formula "7") (term "1"))
               (rule "inEqSimp_contradInEq1" (formula "7") (term "1") (ifseqformula "3"))
               (rule "inEqSimp_homoInEq1" (formula "7") (term "0,1"))
               (rule "polySimp_pullOutFactor1b" (formula "7") (term "0,0,1"))
               (rule "add_literals" (formula "7") (term "1,1,0,0,1"))
               (rule "times_zero_1" (formula "7") (term "1,0,0,1"))
               (rule "add_zero_right" (formula "7") (term "0,0,1"))
               (rule "leq_literals" (formula "7") (term "0,1"))
                (builtin "One Step Simplification" (formula "7"))
               (rule "inEqSimp_contradInEq1" (formula "7") (ifseqformula "2"))
               (rule "qeq_literals" (formula "7") (term "0"))
                (builtin "One Step Simplification" (formula "7"))
               (rule "closeFalse" (formula "7"))
            )
            (branch
               (rule "andRight" (formula "24"))
               (branch
                  (rule "andRight" (formula "24"))
                  (branch
                     (rule "andRight" (formula "24"))
                     (branch
                         (builtin "One Step Simplification" (formula "24") (ifInst ""  (formula "13")))
                        (rule "closeTrue" (formula "24"))
                     )
                     (branch
                         (builtin "One Step Simplification" (formula "24") (ifInst ""  (formula "14")))
                        (rule "closeTrue" (formula "24"))
                     )
                  )
                  (branch
                      (builtin "One Step Simplification" (formula "24") (ifInst ""  (formula "12")))
                     (rule "closeTrue" (formula "24"))
                  )
               )
               (branch
                  (rule "andRight" (formula "24"))
                  (branch
                      (builtin "One Step Simplification" (formula "24"))
                     (rule "inEqSimp_ltToLeq" (formula "4") (term "0,0,0"))
                     (rule "polySimp_mulComm0" (formula "4") (term "1,0,0,0,0,0"))
                     (rule "inEqSimp_sepPosMonomial0" (formula "4") (term "0,0,0"))
                     (rule "polySimp_mulComm0" (formula "4") (term "1,0,0,0"))
                     (rule "polySimp_rightDist" (formula "4") (term "1,0,0,0"))
                     (rule "polySimp_mulLiterals" (formula "4") (term "1,1,0,0,0"))
                     (rule "mul_literals" (formula "4") (term "0,1,0,0,0"))
                     (rule "polySimp_elimOne" (formula "4") (term "1,1,0,0,0"))
                     (rule "nnf_imp2or" (formula "4") (term "0"))
                     (rule "nnf_notAnd" (formula "4") (term "0,0"))
                     (rule "inEqSimp_notLeq" (formula "4") (term "0,0,0"))
                     (rule "polySimp_rightDist" (formula "4") (term "1,0,0,0,0,0"))
                     (rule "mul_literals" (formula "4") (term "0,1,0,0,0,0,0"))
                     (rule "polySimp_addAssoc" (formula "4") (term "0,0,0,0,0"))
                     (rule "add_literals" (formula "4") (term "0,0,0,0,0,0"))
                     (rule "add_zero_left" (formula "4") (term "0,0,0,0,0"))
                     (rule "inEqSimp_sepPosMonomial1" (formula "4") (term "0,0,0"))
                     (rule "polySimp_mulLiterals" (formula "4") (term "1,0,0,0"))
                     (rule "polySimp_elimOne" (formula "4") (term "1,0,0,0"))
                     (rule "inEqSimp_notGeq" (formula "4") (term "1,0,0"))
                     (rule "times_zero_1" (formula "4") (term "1,0,0,1,0,0"))
                     (rule "add_literals" (formula "4") (term "0,0,1,0,0"))
                     (rule "inEqSimp_sepPosMonomial0" (formula "4") (term "1,0,0"))
                     (rule "mul_literals" (formula "4") (term "1,1,0,0"))
                     (rule "Static_class_invariant_axiom_for_org_apache_commons_csv_CSVFormat" (formula "24"))
                     (rule "notRight" (formula "24"))
                     (rule "pullOutSelect" (formula "1") (term "0") (inst "selectSK=org_apache_commons_csv_CSVFormat_RFC4180_0"))
                     (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "9"))
                      (builtin "One Step Simplification" (formula "1"))
                     (rule "applyEqReverse" (formula "2") (term "0") (ifseqformula "1"))
                     (rule "close" (formula "24") (ifseqformula "2"))
                  )
                  (branch
                     (rule "andRight" (formula "24"))
                     (branch
                         (builtin "One Step Simplification" (formula "24"))
                        (rule "inEqSimp_ltToLeq" (formula "4") (term "0,0,0"))
                        (rule "polySimp_mulComm0" (formula "4") (term "1,0,0,0,0,0"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "4") (term "0,0,0"))
                        (rule "polySimp_mulComm0" (formula "4") (term "1,0,0,0"))
                        (rule "polySimp_rightDist" (formula "4") (term "1,0,0,0"))
                        (rule "polySimp_mulLiterals" (formula "4") (term "1,1,0,0,0"))
                        (rule "mul_literals" (formula "4") (term "0,1,0,0,0"))
                        (rule "polySimp_elimOne" (formula "4") (term "1,1,0,0,0"))
                        (rule "nnf_imp2or" (formula "4") (term "0"))
                        (rule "nnf_notAnd" (formula "4") (term "0,0"))
                        (rule "inEqSimp_notLeq" (formula "4") (term "0,0,0"))
                        (rule "polySimp_rightDist" (formula "4") (term "1,0,0,0,0,0"))
                        (rule "mul_literals" (formula "4") (term "0,1,0,0,0,0,0"))
                        (rule "polySimp_addAssoc" (formula "4") (term "0,0,0,0,0"))
                        (rule "add_literals" (formula "4") (term "0,0,0,0,0,0"))
                        (rule "add_zero_left" (formula "4") (term "0,0,0,0,0"))
                        (rule "inEqSimp_sepPosMonomial1" (formula "4") (term "0,0,0"))
                        (rule "polySimp_mulLiterals" (formula "4") (term "1,0,0,0"))
                        (rule "polySimp_elimOne" (formula "4") (term "1,0,0,0"))
                        (rule "inEqSimp_notGeq" (formula "4") (term "1,0,0"))
                        (rule "times_zero_1" (formula "4") (term "1,0,0,1,0,0"))
                        (rule "add_literals" (formula "4") (term "0,0,1,0,0"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "4") (term "1,0,0"))
                        (rule "mul_literals" (formula "4") (term "1,1,0,0"))
                        (rule "Static_class_invariant_axiom_for_de_polyas_core3_open_cred_CredTool" (formula "24"))
                         (builtin "One Step Simplification" (formula "24"))
                        (rule "insert_constant_string_value" (formula "24") (term "0,0,1,0,0") (ifseqformula "1"))
                         (builtin "One Step Simplification" (formula "24"))
                        (rule "insert_constant_string_value" (formula "24") (term "0,0,1,0,0,0") (ifseqformula "1"))
                         (builtin "One Step Simplification" (formula "24"))
                        (rule "insert_constant_string_value" (formula "24") (term "0,0,1,0,0,0,0") (ifseqformula "1"))
                         (builtin "One Step Simplification" (formula "24"))
                        (rule "castDel" (formula "24") (term "0,0,0,1,0,0,0"))
                        (rule "castDel" (formula "24") (term "0,0,0,1,0,0"))
                        (rule "castDel" (formula "24") (term "0,0,0,1,0,0,0,0"))
                        (rule "replace_known_right" (formula "24") (term "0,1,0,0,0") (ifseqformula "19"))
                         (builtin "One Step Simplification" (formula "24") (ifInst ""  (formula "18")) (ifInst ""  (formula "20")))
                        (rule "pullOutSelect" (formula "24") (term "1,1") (inst "selectSK=de_polyas_core3_open_cred_CredTool_FieldsForPolyasMode_MIN_0"))
                        (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "8"))
                         (builtin "One Step Simplification" (formula "1"))
                        (rule "applyEqReverse" (formula "25") (term "1,1") (ifseqformula "1"))
                        (rule "hideAuxiliaryEq" (formula "1"))
                        (rule "pullOutSelect" (formula "24") (term "0,0,0,0,0,0") (inst "selectSK=de_polyas_core3_open_cred_CredTool_distVals_0"))
                        (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "8"))
                         (builtin "One Step Simplification" (formula "1"))
                        (rule "applyEqReverse" (formula "25") (term "0,0,0,0,0,0") (ifseqformula "1"))
                        (rule "hideAuxiliaryEq" (formula "1"))
                        (rule "replace_known_right" (formula "24") (term "0,0,0,0,0") (ifseqformula "15"))
                         (builtin "One Step Simplification" (formula "24"))
                        (rule "pullOutSelect" (formula "24") (term "0,1") (inst "selectSK=de_polyas_core3_open_cred_CredTool_polyasMode_0"))
                        (rule "applyEq" (formula "25") (term "0,0,1,0") (ifseqformula "1"))
                        (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "8"))
                         (builtin "One Step Simplification" (formula "1"))
                        (rule "applyEqReverse" (formula "25") (term "0,1") (ifseqformula "1"))
                        (rule "applyEqReverse" (formula "25") (term "0,0,1,0") (ifseqformula "1"))
                        (rule "hideAuxiliaryEq" (formula "1"))
                        (rule "replace_known_left" (formula "24") (term "1") (ifseqformula "5"))
                         (builtin "One Step Simplification" (formula "24"))
                        (rule "applyEq" (formula "24") (term "0,0,1") (ifseqformula "5"))
                        (rule "replace_known_right" (formula "24") (term "0,1") (ifseqformula "21"))
                         (builtin "One Step Simplification" (formula "24"))
                        (rule "pullOutSelect" (formula "24") (term "0,0,1") (inst "selectSK=de_polyas_core3_open_cred_CredTool_print_0"))
                        (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "8"))
                         (builtin "One Step Simplification" (formula "1"))
                        (rule "applyEqReverse" (formula "25") (term "0,0,1") (ifseqformula "1"))
                        (rule "hideAuxiliaryEq" (formula "1"))
                        (rule "replace_known_right" (formula "24") (term "0,1") (ifseqformula "17"))
                         (builtin "One Step Simplification" (formula "24"))
                        (rule "notRight" (formula "24"))
                        (rule "pullOutSelect" (formula "1") (term "0") (inst "selectSK=de_polyas_core3_open_cred_CredTool_polyasVals_0"))
                        (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "9"))
                         (builtin "One Step Simplification" (formula "1"))
                        (rule "applyEqReverse" (formula "2") (term "0") (ifseqformula "1"))
                        (rule "close" (formula "18") (ifseqformula "2"))
                     )
                     (branch
                         (builtin "One Step Simplification" (formula "24") (ifInst ""  (formula "14")))
                        (rule "closeTrue" (formula "24"))
                     )
                  )
               )
            )
         )
      )
      (branch
          (builtin "One Step Simplification" (formula "24"))
         (rule "closeTrue" (formula "24"))
      )
   )
   (branch
       (builtin "One Step Simplification" (formula "24"))
      (rule "allRight" (formula "24") (inst "sk=f_0"))
      (rule "allRight" (formula "24") (inst "sk=o_0"))
      (rule "orRight" (formula "24"))
      (rule "eqSymm" (formula "25"))
      (rule "inEqSimp_ltToLeq" (formula "4") (term "0,0,0"))
      (rule "polySimp_mulComm0" (formula "4") (term "1,0,0,0,0,0"))
      (rule "inEqSimp_sepPosMonomial0" (formula "4") (term "0,0,0"))
      (rule "polySimp_mulComm0" (formula "4") (term "1,0,0,0"))
      (rule "polySimp_rightDist" (formula "4") (term "1,0,0,0"))
      (rule "polySimp_mulLiterals" (formula "4") (term "1,1,0,0,0"))
      (rule "mul_literals" (formula "4") (term "0,1,0,0,0"))
      (rule "polySimp_elimOne" (formula "4") (term "1,1,0,0,0"))
      (rule "pullOutSelect" (formula "25") (term "0") (inst "selectSK=f_0_0"))
      (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "8"))
       (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "25")))
      (rule "applyEqReverse" (formula "26") (term "0") (ifseqformula "1"))
       (builtin "One Step Simplification" (formula "26"))
      (rule "closeTrue" (formula "26"))
   )
)
(branch "Exceptional Post (ArrayList)"
    (builtin "One Step Simplification" (formula "7"))
    (builtin "One Step Simplification" (formula "17"))
   (rule "andLeft" (formula "7"))
   (rule "selectCreatedOfAnonAsFormulaEQ" (formula "8") (term "1,0,0") (ifseqformula "7"))
   (rule "selectCreatedOfAnonAsFormulaEQ" (formula "8") (term "1,1,0,1,0") (ifseqformula "7"))
   (rule "andLeft" (formula "8"))
   (rule "andLeft" (formula "8"))
   (rule "andLeft" (formula "10"))
   (rule "andLeft" (formula "9"))
   (rule "andLeft" (formula "8"))
   (rule "andLeft" (formula "12"))
   (rule "andLeft" (formula "10"))
   (rule "notLeft" (formula "8"))
   (rule "close" (formula "15") (ifseqformula "14"))
)
(branch "Pre (ArrayList)"
    (builtin "One Step Simplification" (formula "15") (ifInst ""  (formula "14")) (ifInst ""  (formula "1")) (ifInst ""  (formula "14")) (ifInst ""  (formula "2")))
   (rule "closeTrue" (formula "15"))
)
)
}
