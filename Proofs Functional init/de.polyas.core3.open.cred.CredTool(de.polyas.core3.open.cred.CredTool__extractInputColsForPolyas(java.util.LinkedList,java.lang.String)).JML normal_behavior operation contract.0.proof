\profile "Java Profile";

\settings {
"#Proof-Settings-Config-File
#Mon Nov 11 01:22:01 CET 2019
[Labels]UseOriginLabels=false
[StrategyProperty]QUERYAXIOM_OPTIONS_KEY=QUERYAXIOM_ON
[SMTSettings]invariantForall=false
[Strategy]ActiveStrategy=JavaCardDLStrategy
[StrategyProperty]USER_TACLETS_OPTIONS_KEY1=USER_TACLETS_OFF
[StrategyProperty]QUANTIFIERS_OPTIONS_KEY=QUANTIFIERS_NON_SPLITTING_WITH_PROGS
[StrategyProperty]USER_TACLETS_OPTIONS_KEY2=USER_TACLETS_OFF
[Choice]DefaultChoices=methodExpansion-methodExpansion\\:modularOnly , mergeGenerateIsWeakeningGoal-mergeGenerateIsWeakeningGoal\\:off , wdChecks-wdChecks\\:off , wdOperator-wdOperator\\:L , permissions-permissions\\:off , integerSimplificationRules-integerSimplificationRules\\:full , reach-reach\\:on , moreSeqRules-moreSeqRules\\:on , sequences-sequences\\:on , bigint-bigint\\:on , modelFields-modelFields\\:treatAsAxiom , Strings-Strings\\:on , JavaCard-JavaCard\\:off , runtimeExceptions-runtimeExceptions\\:allow , programRules-programRules\\:Java , intRules-intRules\\:javaSemantics , initialisation-initialisation\\:disableStaticInitialisation , assertions-assertions\\:on
[StrategyProperty]LOOP_OPTIONS_KEY=LOOP_INVARIANT
[StrategyProperty]INF_FLOW_CHECK_PROPERTY=INF_FLOW_CHECK_FALSE
[SMTSettings]UseBuiltUniqueness=false
[SMTSettings]explicitTypeHierarchy=false
[SMTSettings]instantiateHierarchyAssumptions=true
[StrategyProperty]NON_LIN_ARITH_OPTIONS_KEY=NON_LIN_ARITH_DEF_OPS
[SMTSettings]SelectedTaclets=
[StrategyProperty]DEP_OPTIONS_KEY=DEP_ON
[StrategyProperty]AUTO_INDUCTION_OPTIONS_KEY=AUTO_INDUCTION_OFF
[Strategy]MaximumNumberOfAutomaticApplications=10000
[StrategyProperty]STOPMODE_OPTIONS_KEY=STOPMODE_DEFAULT
[StrategyProperty]CLASS_AXIOM_OPTIONS_KEY=CLASS_AXIOM_FREE
[SMTSettings]useConstantsForBigOrSmallIntegers=true
[StrategyProperty]MPS_OPTIONS_KEY=MPS_MERGE
[StrategyProperty]SYMBOLIC_EXECUTION_NON_EXECUTION_BRANCH_HIDING_OPTIONS_KEY=SYMBOLIC_EXECUTION_NON_EXECUTION_BRANCH_HIDING_OFF
[Strategy]Timeout=-1
[StrategyProperty]SYMBOLIC_EXECUTION_ALIAS_CHECK_OPTIONS_KEY=SYMBOLIC_EXECUTION_ALIAS_CHECK_NEVER
[StrategyProperty]QUERY_NEW_OPTIONS_KEY=QUERY_OFF
[SMTSettings]useUninterpretedMultiplication=true
[StrategyProperty]BLOCK_OPTIONS_KEY=BLOCK_CONTRACT_INTERNAL
[StrategyProperty]METHOD_OPTIONS_KEY=METHOD_CONTRACT
[StrategyProperty]USER_TACLETS_OPTIONS_KEY3=USER_TACLETS_OFF
[SMTSettings]maxGenericSorts=2
[StrategyProperty]OSS_OPTIONS_KEY=OSS_ON
[StrategyProperty]SPLITTING_OPTIONS_KEY=SPLITTING_DELAYED
[SMTSettings]integersMinimum=-2147483645
[StrategyProperty]VBT_PHASE=VBT_SYM_EX
[SMTSettings]integersMaximum=2147483645
"
}

\javaSource "../src";

\proofObligation "#Proof Obligation Settings
#Mon Nov 11 01:22:01 CET 2019
contract=de.polyas.core3.open.cred.CredTool[de.polyas.core3.open.cred.CredTool\\:\\:extractInputColsForPolyas(java.util.LinkedList,java.lang.String)].JML normal_behavior operation contract.0
name=de.polyas.core3.open.cred.CredTool[de.polyas.core3.open.cred.CredTool\\:\\:extractInputColsForPolyas(java.util.LinkedList,java.lang.String)].JML normal_behavior operation contract.0
class=de.uka.ilkd.key.proof.init.FunctionalOperationContractPO
";

\proof {
(keyLog "0" (keyUser "flo" ) (keyVersion "57d504cc0f"))

(autoModeTime "2085")

(branch "dummy ID"
(rule "impRight" (formula "1") (newnames "cols_5,id,result_299,exc_359,heapAtPre_0,o,f"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "2"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "4"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "6"))
(rule "andLeft" (formula "2"))
(rule "andLeft" (formula "8"))
(rule "notLeft" (formula "9"))
(rule "notLeft" (formula "8"))
(rule "exLeft" (formula "6") (inst "sk=i_0"))
(rule "andLeft" (formula "6"))
(rule "andLeft" (formula "6"))
(rule "eqSymm" (formula "12") (term "1,0,0,1,0,1"))
(rule "replace_known_right" (formula "2") (term "0") (ifseqformula "10"))
 (builtin "One Step Simplification" (formula "2"))
(rule "replace_known_right" (formula "3") (term "0") (ifseqformula "11"))
 (builtin "One Step Simplification" (formula "3"))
(rule "castedGetAny" (formula "12") (term "0,1,0,0,1,0,0,0,1"))
(rule "castedGetAny" (formula "12") (term "0,0,1,0,0,0,0,0,1"))
(rule "castedGetAny" (formula "5") (term "0,0,1,0"))
(rule "castedGetAny" (formula "8") (term "0"))
(rule "inEqSimp_commuteLeq" (formula "12") (term "0,0,0,0,0,0,0,1"))
(rule "inEqSimp_commuteLeq" (formula "12") (term "0,0,0,0,1,0,0,0,1"))
(rule "inEqSimp_commuteLeq" (formula "5") (term "0,0,0"))
(rule "inEqSimp_commuteLeq" (formula "6"))
(rule "assignment" (formula "12") (term "1"))
 (builtin "One Step Simplification" (formula "12"))
(rule "Static_class_invariant_axiom_for_de_polyas_core3_open_cred_CredTool" (formula "9"))
 (builtin "One Step Simplification" (formula "9"))
(rule "insert_constant_string_value" (formula "9") (term "0,0,1,0,0") (ifseqformula "1"))
 (builtin "One Step Simplification" (formula "9"))
(rule "insert_constant_string_value" (formula "9") (term "0,0,1,0,0,0") (ifseqformula "1"))
 (builtin "One Step Simplification" (formula "9"))
(rule "insert_constant_string_value" (formula "9") (term "0,0,1,0,0,0,0") (ifseqformula "1"))
 (builtin "One Step Simplification" (formula "9"))
(rule "castDel" (formula "9") (term "0,0,0,1,0,0"))
(rule "castDel" (formula "9") (term "0,0,0,1,0,0,0,0"))
(rule "castDel" (formula "9") (term "0,0,0,1,0,0,0"))
(rule "andLeft" (formula "9"))
(rule "andLeft" (formula "9"))
(rule "andLeft" (formula "9"))
(rule "notLeft" (formula "11"))
(rule "andLeft" (formula "9"))
(rule "notLeft" (formula "11"))
(rule "notLeft" (formula "10"))
(rule "andLeft" (formula "9"))
(rule "andLeft" (formula "9"))
(rule "notLeft" (formula "11"))
(rule "notLeft" (formula "10"))
(rule "andLeft" (formula "9"))
(rule "notLeft" (formula "10"))
(rule "notLeft" (formula "9"))
(rule "commute_and" (formula "5") (term "0,0"))
(rule "methodBodyExpand" (formula "19") (term "1") (newnames "heapBefore_extractInputColsForPolyas,savedHeapBefore_extractInputColsForPolyas"))
 (builtin "One Step Simplification" (formula "19"))
(rule "variableDeclarationAssign" (formula "19") (term "1"))
(rule "variableDeclaration" (formula "19") (term "1") (newnames "result_300"))
 (builtin "Use Operation Contract" (formula "19") (newnames "heapBefore_ArrayList,self_275,exc_360,heapAfter_ArrayList,anon_heap_ArrayList") (contract "java.util.ArrayList[java.util.ArrayList::ArrayList()].JML normal_behavior operation contract.0"))
(branch "Post (ArrayList)"
    (builtin "One Step Simplification" (formula "21"))
    (builtin "One Step Simplification" (formula "11"))
   (rule "andLeft" (formula "11"))
   (rule "selectCreatedOfAnonAsFormulaEQ" (formula "12") (term "1,1,0,1,0") (ifseqformula "11"))
   (rule "andLeft" (formula "12"))
   (rule "andLeft" (formula "13"))
   (rule "andLeft" (formula "12"))
   (rule "andLeft" (formula "13"))
   (rule "andLeft" (formula "12"))
   (rule "andLeft" (formula "15"))
   (rule "andLeft" (formula "12"))
   (rule "andLeft" (formula "16"))
   (rule "notLeft" (formula "12"))
   (rule "andLeft" (formula "12"))
   (rule "andLeft" (formula "16"))
   (rule "notLeft" (formula "12"))
   (rule "notLeft" (formula "15"))
   (rule "replace_known_right" (formula "12") (term "0") (ifseqformula "18"))
    (builtin "One Step Simplification" (formula "12"))
   (rule "assignment" (formula "29") (term "1"))
    (builtin "One Step Simplification" (formula "29"))
   (rule "pullOutSelect" (formula "14") (term "0,0") (inst "selectSK=java_util_Collection_seq_0"))
   (rule "simplifySelectOfAnonEQ" (formula "14") (ifseqformula "11"))
    (builtin "One Step Simplification" (formula "14") (ifInst ""  (formula "20")) (ifInst ""  (formula "19")))
   (rule "hideAuxiliaryEq" (formula "14"))
   (rule "replaceKnownAuxiliaryConstant_taclet0_1" (formula "14") (term "0,0"))
   (rule "Class_invariant_axiom_for_java_util_ArrayList" (formula "16"))
   (rule "true_left" (formula "16"))
   (rule "ifElseUnfold" (formula "28") (term "1") (inst "#boolv=x"))
   (rule "variableDeclaration" (formula "28") (term "1") (newnames "x"))
   (rule "compound_equality_comparison_2" (formula "28") (term "1") (inst "#v1=f_1") (inst "#v0=f"))
   (rule "variableDeclarationAssign" (formula "28") (term "1"))
   (rule "variableDeclaration" (formula "28") (term "1") (newnames "f"))
   (rule "activeUseStaticFieldReadAccess" (formula "28") (term "1"))
   (rule "assignment_read_static_attribute" (formula "28") (term "1"))
    (builtin "One Step Simplification" (formula "28"))
   (rule "pullOutSelect" (formula "28") (term "0,1,0") (inst "selectSK=de_polyas_core3_open_cred_CredTool_polyasMode_0"))
   (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "12"))
    (builtin "One Step Simplification" (formula "1"))
   (rule "hideAuxiliaryEq" (formula "1"))
   (rule "replaceKnownAuxiliaryConstant_taclet0_3" (formula "28") (term "0,1,0"))
   (rule "variableDeclarationAssign" (formula "28") (term "1"))
   (rule "variableDeclaration" (formula "28") (term "1") (newnames "f_1"))
   (rule "activeUseStaticFieldReadAccess" (formula "28") (term "1"))
   (rule "assignment_read_static_attribute" (formula "28") (term "1"))
    (builtin "One Step Simplification" (formula "28"))
   (rule "pullOutSelect" (formula "28") (term "0,1,0") (inst "selectSK=de_polyas_core3_open_cred_CredTool_FieldsForPolyasMode_MIN_0"))
   (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "12"))
    (builtin "One Step Simplification" (formula "1"))
   (rule "hideAuxiliaryEq" (formula "1"))
   (rule "replaceKnownAuxiliaryConstant_taclet0_5" (formula "28") (term "0,1,0"))
   (rule "equality_comparison_simple" (formula "28") (term "1"))
    (builtin "One Step Simplification" (formula "28"))
   (rule "replace_known_left" (formula "28") (term "0,0,1,0") (ifseqformula "9"))
    (builtin "One Step Simplification" (formula "28"))
   (rule "lenNonNegative" (formula "7") (term "1"))
   (rule "inEqSimp_commuteLeq" (formula "7"))
   (rule "seqGetAlphaCast" (formula "9") (term "0"))
   (rule "castedGetAny" (formula "9") (term "0"))
    (builtin "One Step Simplification" (formula "9"))
   (rule "true_left" (formula "9"))
   (rule "ifElseSplit" (formula "29"))
   (branch "if x true"
       (builtin "One Step Simplification" (formula "30"))
       (builtin "One Step Simplification" (formula "1"))
      (rule "true_left" (formula "1"))
      (rule "ifUnfold" (formula "29") (term "1") (inst "#boolv=x"))
      (rule "variableDeclaration" (formula "29") (term "1") (newnames "x_1"))
       (builtin "Use Operation Contract" (formula "29") (newnames "heapBefore_contains,result_301,exc_361,heapAfter_contains,anon_heap_contains") (contract "java.util.LinkedList[java.util.Collection::contains(java.lang.String)].JML normal_behavior operation contract.0"))
      (branch "Post (contains)"
          (builtin "One Step Simplification" (formula "19"))
          (builtin "One Step Simplification" (formula "31"))
         (rule "andLeft" (formula "19"))
         (rule "andLeft" (formula "20"))
         (rule "andLeft" (formula "21"))
         (rule "andLeft" (formula "21"))
         (rule "eqSymm" (formula "21"))
         (rule "castedGetAny" (formula "21") (term "0,1,0,0,0"))
         (rule "inEqSimp_commuteLeq" (formula "21") (term "0,0,0,0,0"))
         (rule "assignment" (formula "34") (term "1"))
          (builtin "One Step Simplification" (formula "34"))
         (rule "pullOutSelect" (formula "21") (term "0,1,1,0,0,0,0") (inst "selectSK=java_util_Collection_seq_1"))
         (rule "simplifySelectOfAnonEQ" (formula "21") (ifseqformula "19"))
          (builtin "One Step Simplification" (formula "21") (ifInst ""  (formula "33")))
         (rule "selectCreatedOfAnonAsFormulaEQ" (formula "21") (term "0,0,0") (ifseqformula "12"))
         (rule "replaceKnownSelect_taclet000_6" (formula "22") (term "0,0,1,0,0,0"))
         (rule "replace_known_left" (formula "21") (term "0,0,0,0") (ifseqformula "2"))
          (builtin "One Step Simplification" (formula "21"))
         (rule "simplifySelectOfAnonEQ" (formula "21") (ifseqformula "12"))
          (builtin "One Step Simplification" (formula "21") (ifInst ""  (formula "33")) (ifInst ""  (formula "2")))
         (rule "hideAuxiliaryEq" (formula "21"))
         (rule "replaceKnownAuxiliaryConstant_taclet000_8" (formula "21") (term "0,0,1,0,0,0"))
         (rule "replaceKnownAuxiliaryConstant_taclet000_8" (formula "21") (term "0,1,1,0,0,0,0"))
         (rule "Class_invariant_axiom_for_java_util_LinkedList" (formula "22"))
         (rule "true_left" (formula "22"))
         (rule "commute_and_2" (formula "21") (term "0,0,0"))
         (rule "commute_and" (formula "21") (term "0,0,0,0"))
         (rule "commute_and_2" (formula "21") (term "0,0,0"))
         (rule "lenNonNegative" (formula "15") (term "0"))
         (rule "inEqSimp_commuteLeq" (formula "15"))
         (rule "ifSplit" (formula "34"))
         (branch "if x_1 true"
             (builtin "One Step Simplification" (formula "1"))
             (builtin "One Step Simplification" (formula "35"))
             (builtin "Use Operation Contract" (formula "35") (newnames "heapBefore_add,result_302,exc_362,heapAfter_add,anon_heap_add") (contract "java.util.ArrayList[java.util.Collection::add(java.lang.Object)].JML normal_behavior operation contract.0"))
            (branch "Post (add)"
                (builtin "One Step Simplification" (formula "25"))
               (rule "andLeft" (formula "25"))
               (rule "andLeft" (formula "26"))
               (rule "andLeft" (formula "27"))
               (rule "andLeft" (formula "27"))
                (builtin "One Step Simplification" (formula "40"))
               (rule "blockEmpty" (formula "40") (term "1"))
               (rule "methodCallReturn" (formula "40") (term "1"))
               (rule "assignment" (formula "40") (term "1"))
                (builtin "One Step Simplification" (formula "40"))
               (rule "methodCallEmpty" (formula "40") (term "1"))
               (rule "tryEmpty" (formula "40") (term "1"))
               (rule "emptyModality" (formula "40") (term "1"))
               (rule "andRight" (formula "40"))
               (branch "Case 1"
                  (rule "andRight" (formula "40"))
                  (branch "Case 1"
                     (rule "andRight" (formula "40"))
                     (branch "Case 1"
                         (builtin "One Step Simplification" (formula "40"))
                        (rule "allRight" (formula "40") (inst "sk=i_1"))
                        (rule "impRight" (formula "40"))
                        (rule "andLeft" (formula "1"))
                        (rule "notRight" (formula "42"))
                        (rule "eqSymm" (formula "30"))
                        (rule "lenOfSeqConcatEQ" (formula "3") (term "1") (ifseqformula "30"))
                         (builtin "One Step Simplification" (formula "3"))
                        (rule "polySimp_addComm0" (formula "3") (term "1"))
                        (rule "inEqSimp_ltToLeq" (formula "12"))
                        (rule "polySimp_mulComm0" (formula "12") (term "1,0,0"))
                        (rule "polySimp_addComm1" (formula "12") (term "0"))
                        (rule "inEqSimp_ltToLeq" (formula "26") (term "1,0,0,0,0"))
                        (rule "polySimp_mulComm0" (formula "26") (term "1,0,0,1,0,0,0,0"))
                        (rule "inEqSimp_ltToLeq" (formula "9") (term "0,0,0"))
                        (rule "polySimp_mulComm0" (formula "9") (term "1,0,0,0,0,0"))
                        (rule "inEqSimp_ltToLeq" (formula "3"))
                        (rule "polySimp_rightDist" (formula "3") (term "1,0,0"))
                        (rule "mul_literals" (formula "3") (term "0,1,0,0"))
                        (rule "polySimp_addAssoc" (formula "3") (term "0,0"))
                        (rule "add_literals" (formula "3") (term "0,0,0"))
                        (rule "add_zero_left" (formula "3") (term "0,0"))
                        (rule "polySimp_addComm0" (formula "3") (term "0"))
                        (rule "applyEq" (formula "40") (term "0") (ifseqformula "14"))
                        (rule "applyEq" (formula "26") (term "1") (ifseqformula "4"))
                         (builtin "One Step Simplification" (formula "26"))
                        (rule "exLeft" (formula "26") (inst "sk=i_2"))
                        (rule "andLeft" (formula "26"))
                        (rule "andLeft" (formula "26"))
                        (rule "polySimp_addComm1" (formula "27") (term "0"))
                        (rule "applyEq" (formula "19") (term "0") (ifseqformula "20"))
                        (rule "qeq_literals" (formula "19"))
                        (rule "true_left" (formula "19"))
                        (rule "inEqSimp_sepNegMonomial0" (formula "12"))
                        (rule "polySimp_mulLiterals" (formula "12") (term "0"))
                        (rule "polySimp_elimOne" (formula "12") (term "0"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "9") (term "0,0,0"))
                        (rule "polySimp_mulComm0" (formula "9") (term "1,0,0,0"))
                        (rule "polySimp_rightDist" (formula "9") (term "1,0,0,0"))
                        (rule "mul_literals" (formula "9") (term "0,1,0,0,0"))
                        (rule "polySimp_mulLiterals" (formula "9") (term "1,1,0,0,0"))
                        (rule "polySimp_elimOne" (formula "9") (term "1,1,0,0,0"))
                        (rule "inEqSimp_sepNegMonomial0" (formula "3"))
                        (rule "polySimp_mulLiterals" (formula "3") (term "0"))
                        (rule "polySimp_elimOne" (formula "3") (term "0"))
                        (rule "inEqSimp_sepNegMonomial0" (formula "26"))
                        (rule "polySimp_mulLiterals" (formula "26") (term "0"))
                        (rule "polySimp_elimOne" (formula "26") (term "0"))
                        (rule "getOfSeqConcatEQ" (formula "1") (term "0") (ifseqformula "31"))
                        (rule "polySimp_elimSub" (formula "1") (term "1,2,0"))
                        (rule "getOfSeqSingleton" (formula "1") (term "2,0"))
                        (rule "castDel" (formula "1") (term "1,2,0"))
                        (rule "ifEqualsNull" (formula "1"))
                        (rule "ifEqualsNull" (formula "1") (term "1,1"))
                        (rule "replace_known_right" (formula "1") (term "1,0,1,1") (ifseqformula "43"))
                         (builtin "One Step Simplification" (formula "1"))
                        (rule "inEqSimp_ltToLeq" (formula "1") (term "0,0,1"))
                        (rule "polySimp_mulComm0" (formula "1") (term "1,0,0,0,0,1"))
                        (rule "polySimp_addComm1" (formula "1") (term "0,0,0,1"))
                        (rule "inEqSimp_ltToLeq" (formula "1") (term "0,0"))
                        (rule "polySimp_mulComm0" (formula "1") (term "1,0,0,0,0"))
                        (rule "polySimp_addComm1" (formula "1") (term "0,0,0"))
                        (rule "polySimp_sepNegMonomial" (formula "1") (term "0,0,1,1"))
                        (rule "polySimp_mulLiterals" (formula "1") (term "0,0,0,1,1"))
                        (rule "polySimp_elimOne" (formula "1") (term "0,0,0,1,1"))
                        (rule "inEqSimp_sepNegMonomial0" (formula "1") (term "0,0,1"))
                        (rule "polySimp_mulLiterals" (formula "1") (term "0,0,0,1"))
                        (rule "polySimp_elimOne" (formula "1") (term "0,0,0,1"))
                        (rule "inEqSimp_sepNegMonomial0" (formula "1") (term "0,0"))
                        (rule "polySimp_mulLiterals" (formula "1") (term "0,0,0"))
                        (rule "polySimp_elimOne" (formula "1") (term "0,0,0"))
                        (rule "pullOutSelect" (formula "31") (term "1") (inst "selectSK=java_util_Collection_seq_2"))
                        (rule "simplifySelectOfAnonEQ" (formula "31") (ifseqformula "29"))
                         (builtin "One Step Simplification" (formula "31") (ifInst ""  (formula "35")))
                        (rule "selectCreatedOfAnonAsFormulaEQ" (formula "31") (term "0,1,0,0") (ifseqformula "23"))
                        (rule "selectCreatedOfAnonAsFormulaEQ" (formula "31") (term "0,0,1,0,0") (ifseqformula "16"))
                        (rule "replace_known_right" (formula "31") (term "0,0,0,1,0,0") (ifseqformula "34"))
                         (builtin "One Step Simplification" (formula "31") (ifInst ""  (formula "17")))
                        (rule "elementOfSingleton" (formula "31") (term "0,0"))
                         (builtin "One Step Simplification" (formula "31"))
                        (rule "applyEqReverse" (formula "32") (term "1") (ifseqformula "31"))
                        (rule "hideAuxiliaryEq" (formula "31"))
                        (rule "pullOutSelect" (formula "31") (term "0,0") (inst "selectSK=java_util_Collection_seq_3"))
                        (rule "applyEq" (formula "3") (term "0,0") (ifseqformula "31"))
                        (rule "applyEq" (formula "1") (term "0,0,0,0,1") (ifseqformula "31"))
                        (rule "applyEq" (formula "1") (term "0,0,1,0") (ifseqformula "31"))
                        (rule "applyEq" (formula "1") (term "0,0,0,0") (ifseqformula "31"))
                        (rule "applyEq" (formula "1") (term "0,0,0,0,1,1") (ifseqformula "31"))
                        (rule "simplifySelectOfAnonEQ" (formula "31") (ifseqformula "23"))
                         (builtin "One Step Simplification" (formula "31") (ifInst ""  (formula "35")))
                        (rule "replaceKnownSelect_taclet0_0" (formula "31") (term "2,0"))
                        (rule "replaceKnownAuxiliaryConstant_taclet0_1" (formula "31") (term "2,0"))
                        (rule "selectCreatedOfAnonAsFormulaEQ" (formula "31") (term "0,0,0") (ifseqformula "16"))
                        (rule "eqSymm" (formula "32"))
                        (rule "replace_known_left" (formula "31") (term "1,0,0,0") (ifseqformula "17"))
                         (builtin "One Step Simplification" (formula "31") (ifInst ""  (formula "34")))
                        (rule "applyEqReverse" (formula "32") (term "0,1") (ifseqformula "31"))
                        (rule "applyEqReverse" (formula "1") (term "0,0,1,0") (ifseqformula "31"))
                        (rule "applyEqReverse" (formula "3") (term "0,0") (ifseqformula "31"))
                        (rule "applyEqReverse" (formula "1") (term "0,0,0,0") (ifseqformula "31"))
                        (rule "applyEqReverse" (formula "1") (term "0,0,0,0,1") (ifseqformula "31"))
                        (rule "applyEqReverse" (formula "1") (term "0,0,0,0,1,1") (ifseqformula "31"))
                        (rule "hideAuxiliaryEq" (formula "31"))
                        (rule "applyEq" (formula "1") (term "0,0,0,1") (ifseqformula "19"))
                        (rule "inEqSimp_homoInEq1" (formula "1") (term "0,0,1"))
                        (rule "mul_literals" (formula "1") (term "1,0,0,0,1"))
                        (rule "add_zero_right" (formula "1") (term "0,0,0,1"))
                        (rule "applyEq" (formula "3") (term "0") (ifseqformula "19"))
                        (rule "inEqSimp_commuteGeq" (formula "3"))
                        (rule "applyEq" (formula "1") (term "0,0,0,1,1") (ifseqformula "19"))
                        (rule "eqSymm" (formula "1") (term "0,0,1,1"))
                        (rule "applyEq" (formula "1") (term "0,0,0") (ifseqformula "19"))
                        (rule "inEqSimp_homoInEq1" (formula "1") (term "0,0"))
                        (rule "times_zero_2" (formula "1") (term "1,0,0,0"))
                        (rule "add_zero_right" (formula "1") (term "0,0,0"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "1") (term "0,0,1"))
                        (rule "mul_literals" (formula "1") (term "1,0,0,1"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "1") (term "0,0"))
                        (rule "mul_literals" (formula "1") (term "1,0,0"))
                        (rule "inEqSimp_contradInEq1" (formula "1") (term "0,0") (ifseqformula "2"))
                        (rule "qeq_literals" (formula "1") (term "0,0,0"))
                         (builtin "One Step Simplification" (formula "1"))
                        (rule "andLeft" (formula "1"))
                        (rule "andLeft" (formula "2"))
                        (rule "notLeft" (formula "1"))
                        (rule "notLeft" (formula "1"))
                        (rule "inEqSimp_leqRight" (formula "34"))
                        (rule "mul_literals" (formula "1") (term "1,0,0"))
                        (rule "add_literals" (formula "1") (term "0,0"))
                        (rule "add_zero_left" (formula "1") (term "0"))
                        (rule "inEqSimp_strengthen1" (formula "2") (ifseqformula "33"))
                        (rule "add_zero_right" (formula "2") (term "1"))
                        (rule "inEqSimp_contradEq7" (formula "33") (ifseqformula "2"))
                        (rule "mul_literals" (formula "33") (term "1,0,0"))
                        (rule "add_literals" (formula "33") (term "0,0"))
                        (rule "leq_literals" (formula "33") (term "0"))
                         (builtin "One Step Simplification" (formula "33"))
                        (rule "false_right" (formula "33"))
                        (rule "inEqSimp_contradInEq0" (formula "2") (ifseqformula "3"))
                        (rule "qeq_literals" (formula "2") (term "0"))
                         (builtin "One Step Simplification" (formula "2"))
                        (rule "closeFalse" (formula "2"))
                     )
                     (branch "Case 2"
                        (rule "andRight" (formula "40"))
                        (branch "Case 1"
                            (builtin "One Step Simplification" (formula "40"))
                           (rule "eqSymm" (formula "27"))
                           (rule "lenOfSeqConcatEQ" (formula "40") (term "1,1,0,0") (ifseqformula "27"))
                            (builtin "One Step Simplification" (formula "40"))
                           (rule "polySimp_addComm0" (formula "40") (term "1,1,0,0"))
                           (rule "inEqSimp_ltToLeq" (formula "9"))
                           (rule "polySimp_mulComm0" (formula "9") (term "1,0,0"))
                           (rule "polySimp_addComm1" (formula "9") (term "0"))
                           (rule "inEqSimp_ltToLeq" (formula "6") (term "0,0,0"))
                           (rule "polySimp_mulComm0" (formula "6") (term "1,0,0,0,0,0"))
                           (rule "inEqSimp_ltToLeq" (formula "23") (term "1,0,0,0,0"))
                           (rule "polySimp_mulComm0" (formula "23") (term "1,0,0,1,0,0,0,0"))
                           (rule "inEqSimp_ltToLeq" (formula "40") (term "1,0,0"))
                           (rule "polySimp_rightDist" (formula "40") (term "1,0,0,1,0,0"))
                           (rule "mul_literals" (formula "40") (term "0,1,0,0,1,0,0"))
                           (rule "polySimp_addAssoc" (formula "40") (term "0,0,1,0,0"))
                           (rule "add_literals" (formula "40") (term "0,0,0,1,0,0"))
                           (rule "add_zero_left" (formula "40") (term "0,0,1,0,0"))
                           (rule "applyEq" (formula "37") (term "0") (ifseqformula "11"))
                           (rule "applyEq" (formula "23") (term "1") (ifseqformula "1"))
                            (builtin "One Step Simplification" (formula "23"))
                           (rule "exLeft" (formula "23") (inst "sk=i_1"))
                           (rule "andLeft" (formula "23"))
                           (rule "andLeft" (formula "23"))
                           (rule "polySimp_addComm1" (formula "24") (term "0"))
                           (rule "applyEq" (formula "16") (term "0") (ifseqformula "17"))
                           (rule "qeq_literals" (formula "16"))
                           (rule "true_left" (formula "16"))
                           (rule "inEqSimp_sepNegMonomial0" (formula "9"))
                           (rule "polySimp_mulLiterals" (formula "9") (term "0"))
                           (rule "polySimp_elimOne" (formula "9") (term "0"))
                           (rule "inEqSimp_sepPosMonomial0" (formula "6") (term "0,0,0"))
                           (rule "polySimp_mulComm0" (formula "6") (term "1,0,0,0"))
                           (rule "polySimp_rightDist" (formula "6") (term "1,0,0,0"))
                           (rule "mul_literals" (formula "6") (term "0,1,0,0,0"))
                           (rule "polySimp_mulLiterals" (formula "6") (term "1,1,0,0,0"))
                           (rule "polySimp_elimOne" (formula "6") (term "1,1,0,0,0"))
                           (rule "inEqSimp_sepPosMonomial0" (formula "41") (term "1,0,0"))
                           (rule "polySimp_mulLiterals" (formula "41") (term "1,1,0,0"))
                           (rule "polySimp_elimOne" (formula "41") (term "1,1,0,0"))
                           (rule "inEqSimp_sepNegMonomial0" (formula "23"))
                           (rule "polySimp_mulLiterals" (formula "23") (term "0"))
                           (rule "polySimp_elimOne" (formula "23") (term "0"))
                           (rule "getOfSeqConcatEQ" (formula "41") (term "0,1,0") (ifseqformula "28"))
                           (rule "polySimp_elimSub" (formula "41") (term "1,2,0,1,0"))
                           (rule "polySimp_addComm0" (formula "41") (term "1,2,0,1,0"))
                           (rule "getOfSeqSingleton" (formula "41") (term "2,0,1,0"))
                           (rule "castDel" (formula "41") (term "1,2,0,1,0"))
                           (rule "inEqSimp_ltToLeq" (formula "41") (term "0,0,1,0"))
                           (rule "polySimp_mulComm0" (formula "41") (term "1,0,0,0,0,1,0"))
                           (rule "polySimp_sepPosMonomial" (formula "41") (term "0,2,0,1,0"))
                           (rule "polySimp_mulLiterals" (formula "41") (term "1,0,2,0,1,0"))
                           (rule "polySimp_elimOne" (formula "41") (term "1,0,2,0,1,0"))
                           (rule "inEqSimp_sepPosMonomial0" (formula "41") (term "0,0,1,0"))
                           (rule "polySimp_mulComm0" (formula "41") (term "1,0,0,1,0"))
                           (rule "polySimp_rightDist" (formula "41") (term "1,0,0,1,0"))
                           (rule "polySimp_mulLiterals" (formula "41") (term "1,1,0,0,1,0"))
                           (rule "mul_literals" (formula "41") (term "0,1,0,0,1,0"))
                           (rule "polySimp_elimOne" (formula "41") (term "1,1,0,0,1,0"))
                           (rule "pullOutSelect" (formula "28") (term "1") (inst "selectSK=java_util_Collection_seq_2"))
                           (rule "simplifySelectOfAnonEQ" (formula "28") (ifseqformula "26"))
                            (builtin "One Step Simplification" (formula "28") (ifInst ""  (formula "32")))
                           (rule "selectCreatedOfAnonAsFormulaEQ" (formula "28") (term "0,1,0,0") (ifseqformula "20"))
                           (rule "selectCreatedOfAnonAsFormulaEQ" (formula "28") (term "0,0,1,0,0") (ifseqformula "13"))
                           (rule "replace_known_left" (formula "28") (term "1,0,0,1,0,0") (ifseqformula "14"))
                            (builtin "One Step Simplification" (formula "28") (ifInst ""  (formula "31")))
                           (rule "elementOfSingleton" (formula "28") (term "0,0"))
                            (builtin "One Step Simplification" (formula "28"))
                           (rule "applyEqReverse" (formula "29") (term "1") (ifseqformula "28"))
                           (rule "hideAuxiliaryEq" (formula "28"))
                           (rule "pullOutSelect" (formula "28") (term "0,0") (inst "selectSK=java_util_Collection_seq_3"))
                           (rule "applyEq" (formula "42") (term "0,1,0,2,0,1,0") (ifseqformula "28"))
                           (rule "applyEq" (formula "42") (term "0,1,1,0,0,1,0") (ifseqformula "28"))
                           (rule "applyEq" (formula "42") (term "0,1,0,1,0") (ifseqformula "28"))
                           (rule "applyEq" (formula "42") (term "0,1,1,0,0") (ifseqformula "28"))
                           (rule "simplifySelectOfAnonEQ" (formula "28") (ifseqformula "20"))
                            (builtin "One Step Simplification" (formula "28") (ifInst ""  (formula "32")))
                           (rule "replaceKnownSelect_taclet0_0" (formula "28") (term "2,0"))
                           (rule "replaceKnownAuxiliaryConstant_taclet0_1" (formula "28") (term "2,0"))
                           (rule "selectCreatedOfAnonAsFormulaEQ" (formula "28") (term "0,0,0") (ifseqformula "13"))
                           (rule "eqSymm" (formula "29"))
                           (rule "replace_known_right" (formula "28") (term "0,0,0,0") (ifseqformula "31"))
                            (builtin "One Step Simplification" (formula "28") (ifInst ""  (formula "14")))
                           (rule "applyEqReverse" (formula "42") (term "0,1,1,0,0") (ifseqformula "28"))
                           (rule "applyEqReverse" (formula "42") (term "0,1,0,1,0") (ifseqformula "28"))
                           (rule "applyEqReverse" (formula "29") (term "0,1") (ifseqformula "28"))
                           (rule "applyEqReverse" (formula "42") (term "0,1,1,0,0,1,0") (ifseqformula "28"))
                           (rule "applyEqReverse" (formula "42") (term "0,1,0,2,0,1,0") (ifseqformula "28"))
                           (rule "hideAuxiliaryEq" (formula "28"))
                           (rule "applyEq" (formula "41") (term "1,1,0,0") (ifseqformula "16"))
                           (rule "applyEq" (formula "41") (term "1,1,0,0,1,0") (ifseqformula "16"))
                           (rule "add_zero_right" (formula "41") (term "1,0,0,1,0"))
                           (rule "applyEq" (formula "41") (term "1,0,2,0,1,0") (ifseqformula "16"))
                           (rule "eqSeqConcat" (formula "28"))
                            (builtin "One Step Simplification" (formula "28"))
                           (rule "andLeft" (formula "28"))
                           (rule "andLeft" (formula "28"))
                           (rule "polySimp_addComm0" (formula "28") (term "1"))
                           (rule "eqSeqSingleton" (formula "30"))
                           (rule "andLeft" (formula "30"))
                           (rule "lenOfSeqSub" (formula "30") (term "0"))
                           (rule "polySimp_elimSub" (formula "30") (term "1,0"))
                           (rule "polySimp_addComm0" (formula "30") (term "1,0"))
                           (rule "ifEqualsInteger" (formula "30"))
                           (rule "equal_literals" (formula "30") (term "1,1"))
                            (builtin "One Step Simplification" (formula "30"))
                           (rule "andLeft" (formula "30"))
                           (rule "polySimp_homoEq" (formula "31"))
                           (rule "polySimp_mulComm0" (formula "31") (term "1,0"))
                           (rule "polySimp_rightDist" (formula "31") (term "1,0"))
                           (rule "polySimp_mulAssoc" (formula "31") (term "0,1,0"))
                           (rule "polySimp_mulComm0" (formula "31") (term "0,0,1,0"))
                           (rule "polySimp_mulLiterals" (formula "31") (term "0,1,0"))
                           (rule "polySimp_elimOne" (formula "31") (term "0,1,0"))
                           (rule "polySimp_addAssoc" (formula "31") (term "0"))
                           (rule "inEqSimp_ltToLeq" (formula "30"))
                           (rule "polySimp_mulComm0" (formula "30") (term "1,0,0"))
                           (rule "polySimp_addComm1" (formula "30") (term "0"))
                           (rule "applyEq" (formula "32") (term "2,0,0") (ifseqformula "28"))
                           (rule "applyEq" (formula "32") (term "1,0,0") (ifseqformula "16"))
                           (rule "applyEq" (formula "30") (term "0,1,0") (ifseqformula "28"))
                           (rule "polySimp_pullOutFactor1" (formula "30") (term "0"))
                           (rule "add_literals" (formula "30") (term "1,0"))
                           (rule "times_zero_1" (formula "30") (term "0"))
                           (rule "leq_literals" (formula "30"))
                           (rule "true_left" (formula "30"))
                           (rule "applyEq" (formula "29") (term "2,0") (ifseqformula "16"))
                            (builtin "One Step Simplification" (formula "29"))
                           (rule "lenOfSeqEmptyEQ" (formula "16") (term "0") (ifseqformula "29"))
                            (builtin "One Step Simplification" (formula "16"))
                           (rule "true_left" (formula "16"))
                           (rule "lenOfSeqEmptyEQ" (formula "27") (term "1,1") (ifseqformula "28"))
                           (rule "lenOfSeqEmptyEQ" (formula "29") (term "1,0,0") (ifseqformula "28"))
                           (rule "lenOfSeqEmptyEQ" (formula "30") (term "1,2,0,0") (ifseqformula "28"))
                           (rule "add_zero_right" (formula "27") (term "1"))
                           (rule "add_zero_right" (formula "29") (term "0,0"))
                           (rule "add_zero_right" (formula "30") (term "2,0,0"))
                           (rule "eqSymm" (formula "28"))
                           (rule "eqSeqEmpty" (formula "28"))
                           (rule "applyEq" (formula "29") (term "0,1,0") (ifseqformula "27"))
                           (rule "mul_literals" (formula "29") (term "1,0"))
                           (rule "add_literals" (formula "29") (term "0"))
                            (builtin "One Step Simplification" (formula "29"))
                           (rule "true_left" (formula "29"))
                           (rule "getOfSeqSub" (formula "29") (term "0"))
                           (rule "castDel" (formula "29") (term "2,0"))
                           (rule "leq_literals" (formula "29") (term "0,0,0"))
                            (builtin "One Step Simplification" (formula "29"))
                           (rule "sub_literals" (formula "29") (term "1,0,0"))
                           (rule "add_zero_left" (formula "29") (term "1,1,0"))
                           (rule "less_literals" (formula "29") (term "0,0"))
                            (builtin "One Step Simplification" (formula "29"))
                           (rule "nnf_ex2all" (formula "42"))
                           (rule "nnf_imp2or" (formula "7") (term "0"))
                           (rule "nnf_notAnd" (formula "1") (term "0"))
                           (rule "nnf_notAnd" (formula "7") (term "0,0"))
                           (rule "inEqSimp_notGeq" (formula "7") (term "1,0,0"))
                           (rule "mul_literals" (formula "7") (term "1,0,0,1,0,0"))
                           (rule "add_zero_right" (formula "7") (term "0,0,1,0,0"))
                           (rule "inEqSimp_sepPosMonomial0" (formula "7") (term "1,0,0"))
                           (rule "mul_literals" (formula "7") (term "1,1,0,0"))
                           (rule "inEqSimp_notLeq" (formula "7") (term "0,0,0"))
                           (rule "polySimp_rightDist" (formula "7") (term "1,0,0,0,0,0"))
                           (rule "mul_literals" (formula "7") (term "0,1,0,0,0,0,0"))
                           (rule "polySimp_addAssoc" (formula "7") (term "0,0,0,0,0"))
                           (rule "add_literals" (formula "7") (term "0,0,0,0,0,0"))
                           (rule "add_zero_left" (formula "7") (term "0,0,0,0,0"))
                           (rule "inEqSimp_sepPosMonomial1" (formula "7") (term "0,0,0"))
                           (rule "polySimp_mulLiterals" (formula "7") (term "1,0,0,0"))
                           (rule "polySimp_elimOne" (formula "7") (term "1,0,0,0"))
                           (rule "nnf_notAnd" (formula "1") (term "0,0"))
                           (rule "inEqSimp_notLeq" (formula "1") (term "1,0,0"))
                           (rule "times_zero_1" (formula "1") (term "1,0,0,1,0,0"))
                           (rule "add_zero_right" (formula "1") (term "0,0,1,0,0"))
                           (rule "inEqSimp_sepPosMonomial1" (formula "1") (term "1,0,0"))
                           (rule "mul_literals" (formula "1") (term "1,1,0,0"))
                           (rule "inEqSimp_notGeq" (formula "1") (term "0,0,0"))
                           (rule "times_zero_1" (formula "1") (term "1,0,0,0,0,0"))
                           (rule "add_zero_right" (formula "1") (term "0,0,0,0,0"))
                           (rule "inEqSimp_sepPosMonomial0" (formula "1") (term "0,0,0"))
                           (rule "mul_literals" (formula "1") (term "1,0,0,0"))
                           (rule "inEqSimp_or_antiSymm0" (formula "1") (term "0,0"))
                           (rule "add_literals" (formula "1") (term "1,0,1,0,0"))
                           (rule "add_literals" (formula "1") (term "0,0,0,0"))
                            (builtin "One Step Simplification" (formula "1"))
                           (rule "Class_invariant_axiom_for_java_util_ArrayList" (formula "31"))
                           (rule "true_left" (formula "31"))
                           (rule "commute_or_2" (formula "7") (term "0"))
                           (rule "commute_or" (formula "1") (term "0"))
                            (builtin "One Step Simplification" (formula "1"))
                           (rule "leq_literals" (formula "1") (term "0,0,0"))
                            (builtin "One Step Simplification" (formula "1"))
                           (rule "closeFalse" (formula "1"))
                        )
                        (branch "Case 2"
                           (rule "andRight" (formula "40"))
                           (branch "Case 1"
                               (builtin "One Step Simplification" (formula "40") (ifInst ""  (formula "28")))
                              (rule "closeTrue" (formula "40") (userinteraction))
                           )
                           (branch "Case 2"
                              (rule "andRight" (formula "40"))
                              (branch "Case 1"
                                  (builtin "One Step Simplification" (formula "40"))
                                 (rule "eqSymm" (formula "27"))
                                 (rule "inEqSimp_ltToLeq" (formula "6") (term "0,0,0"))
                                 (rule "polySimp_mulComm0" (formula "6") (term "1,0,0,0,0,0"))
                                 (rule "inEqSimp_ltToLeq" (formula "23") (term "1,0,0,0,0"))
                                 (rule "polySimp_mulComm0" (formula "23") (term "1,0,0,1,0,0,0,0"))
                                 (rule "inEqSimp_ltToLeq" (formula "9"))
                                 (rule "polySimp_mulComm0" (formula "9") (term "1,0,0"))
                                 (rule "polySimp_addComm1" (formula "9") (term "0"))
                                 (rule "applyEq" (formula "16") (term "0") (ifseqformula "17"))
                                 (rule "qeq_literals" (formula "16"))
                                 (rule "true_left" (formula "16"))
                                 (rule "applyEq" (formula "36") (term "0") (ifseqformula "11"))
                                 (rule "applyEq" (formula "22") (term "1") (ifseqformula "1"))
                                  (builtin "One Step Simplification" (formula "22"))
                                 (rule "exLeft" (formula "22") (inst "sk=i_1"))
                                 (rule "andLeft" (formula "22"))
                                 (rule "andLeft" (formula "22"))
                                 (rule "polySimp_addComm1" (formula "23") (term "0"))
                                 (rule "inEqSimp_sepPosMonomial0" (formula "6") (term "0,0,0"))
                                 (rule "polySimp_mulComm0" (formula "6") (term "1,0,0,0"))
                                 (rule "polySimp_rightDist" (formula "6") (term "1,0,0,0"))
                                 (rule "mul_literals" (formula "6") (term "0,1,0,0,0"))
                                 (rule "polySimp_mulLiterals" (formula "6") (term "1,1,0,0,0"))
                                 (rule "polySimp_elimOne" (formula "6") (term "1,1,0,0,0"))
                                 (rule "inEqSimp_sepNegMonomial0" (formula "9"))
                                 (rule "polySimp_mulLiterals" (formula "9") (term "0"))
                                 (rule "polySimp_elimOne" (formula "9") (term "0"))
                                 (rule "inEqSimp_sepNegMonomial0" (formula "23"))
                                 (rule "polySimp_mulLiterals" (formula "23") (term "0"))
                                 (rule "polySimp_elimOne" (formula "23") (term "0"))
                                 (rule "pullOutSelect" (formula "28") (term "0,0") (inst "selectSK=java_util_Collection_seq_2"))
                                 (rule "simplifySelectOfAnonEQ" (formula "28") (ifseqformula "20"))
                                  (builtin "One Step Simplification" (formula "28") (ifInst ""  (formula "32")))
                                 (rule "replaceKnownSelect_taclet0_0" (formula "28") (term "2,0"))
                                 (rule "replaceKnownAuxiliaryConstant_taclet0_1" (formula "28") (term "2,0"))
                                 (rule "selectCreatedOfAnonAsFormulaEQ" (formula "28") (term "0,0,0") (ifseqformula "13"))
                                 (rule "eqSymm" (formula "29"))
                                 (rule "replace_known_right" (formula "28") (term "0,0,0,0") (ifseqformula "31"))
                                  (builtin "One Step Simplification" (formula "28") (ifInst ""  (formula "14")))
                                 (rule "applyEqReverse" (formula "29") (term "0,1") (ifseqformula "28"))
                                 (rule "hideAuxiliaryEq" (formula "28"))
                                 (rule "pullOutSelect" (formula "28") (term "0") (inst "selectSK=java_util_Collection_seq_3"))
                                 (rule "simplifySelectOfAnonEQ" (formula "28") (ifseqformula "26"))
                                  (builtin "One Step Simplification" (formula "28") (ifInst ""  (formula "32")))
                                 (rule "replaceKnownSelect_taclet01110000000_9" (formula "28") (term "2,0"))
                                 (rule "replaceKnownAuxiliaryConstant_taclet01110000000_10" (formula "28") (term "2,0"))
                                 (rule "selectCreatedOfAnonAsFormulaEQ" (formula "28") (term "0,1,0,0") (ifseqformula "20"))
                                 (rule "selectCreatedOfAnonAsFormulaEQ" (formula "28") (term "0,0,1,0,0") (ifseqformula "13"))
                                 (rule "eqSymm" (formula "29"))
                                 (rule "applyEqReverse" (formula "28") (term "1") (ifseqformula "29"))
                                 (rule "hideAuxiliaryEq" (formula "29"))
                                 (rule "replace_known_left" (formula "28") (term "1,0,0,1,0,0") (ifseqformula "14"))
                                  (builtin "One Step Simplification" (formula "28") (ifInst ""  (formula "30")))
                                 (rule "elementOfSingleton" (formula "28") (term "0,0"))
                                  (builtin "One Step Simplification" (formula "28"))
                                 (rule "eqSeqConcat" (formula "28"))
                                  (builtin "One Step Simplification" (formula "28"))
                                 (rule "andLeft" (formula "28"))
                                 (rule "andLeft" (formula "28"))
                                 (rule "polySimp_addComm0" (formula "28") (term "1"))
                                 (rule "eqSeqSingleton" (formula "30"))
                                 (rule "andLeft" (formula "30"))
                                 (rule "lenOfSeqSub" (formula "30") (term "0"))
                                 (rule "polySimp_elimSub" (formula "30") (term "1,0"))
                                 (rule "polySimp_addComm0" (formula "30") (term "1,0"))
                                 (rule "ifEqualsInteger" (formula "30"))
                                 (rule "equal_literals" (formula "30") (term "1,1"))
                                  (builtin "One Step Simplification" (formula "30"))
                                 (rule "andLeft" (formula "30"))
                                 (rule "polySimp_homoEq" (formula "31"))
                                 (rule "polySimp_mulComm0" (formula "31") (term "1,0"))
                                 (rule "polySimp_rightDist" (formula "31") (term "1,0"))
                                 (rule "polySimp_mulAssoc" (formula "31") (term "0,1,0"))
                                 (rule "polySimp_mulComm0" (formula "31") (term "0,0,1,0"))
                                 (rule "polySimp_mulLiterals" (formula "31") (term "0,1,0"))
                                 (rule "polySimp_elimOne" (formula "31") (term "0,1,0"))
                                 (rule "polySimp_addAssoc" (formula "31") (term "0"))
                                 (rule "inEqSimp_ltToLeq" (formula "30"))
                                 (rule "polySimp_mulComm0" (formula "30") (term "1,0,0"))
                                 (rule "polySimp_addComm1" (formula "30") (term "0"))
                                 (rule "applyEq" (formula "29") (term "2,0") (ifseqformula "16"))
                                  (builtin "One Step Simplification" (formula "29"))
                                 (rule "lenOfSeqEmptyEQ" (formula "16") (term "0") (ifseqformula "29"))
                                  (builtin "One Step Simplification" (formula "16"))
                                 (rule "true_left" (formula "16"))
                                 (rule "lenOfSeqEmptyEQ" (formula "27") (term "1,1") (ifseqformula "28"))
                                 (rule "lenOfSeqEmptyEQ" (formula "29") (term "1,0,0") (ifseqformula "28"))
                                 (rule "lenOfSeqEmptyEQ" (formula "30") (term "1,0,0") (ifseqformula "28"))
                                 (rule "lenOfSeqEmptyEQ" (formula "31") (term "1,0,0") (ifseqformula "28"))
                                  (builtin "One Step Simplification" (formula "31"))
                                 (rule "add_zero_right" (formula "27") (term "1"))
                                 (rule "add_zero_right" (formula "29") (term "0,0"))
                                 (rule "add_zero_right" (formula "30") (term "0,0"))
                                 (rule "eqSymm" (formula "28"))
                                 (rule "eqSeqEmpty" (formula "28"))
                                 (rule "applyEq" (formula "29") (term "0,1,0") (ifseqformula "27"))
                                 (rule "mul_literals" (formula "29") (term "1,0"))
                                 (rule "add_literals" (formula "29") (term "0"))
                                 (rule "leq_literals" (formula "29"))
                                 (rule "true_left" (formula "29"))
                                 (rule "applyEq" (formula "29") (term "0,1,0") (ifseqformula "27"))
                                 (rule "mul_literals" (formula "29") (term "1,0"))
                                 (rule "add_literals" (formula "29") (term "0"))
                                  (builtin "One Step Simplification" (formula "29"))
                                 (rule "true_left" (formula "29"))
                                 (rule "nnf_imp2or" (formula "6") (term "0"))
                                 (rule "nnf_notAnd" (formula "6") (term "0,0"))
                                 (rule "inEqSimp_notLeq" (formula "6") (term "0,0,0"))
                                 (rule "polySimp_rightDist" (formula "6") (term "1,0,0,0,0,0"))
                                 (rule "mul_literals" (formula "6") (term "0,1,0,0,0,0,0"))
                                 (rule "polySimp_addAssoc" (formula "6") (term "0,0,0,0,0"))
                                 (rule "add_literals" (formula "6") (term "0,0,0,0,0,0"))
                                 (rule "add_zero_left" (formula "6") (term "0,0,0,0,0"))
                                 (rule "inEqSimp_sepPosMonomial1" (formula "6") (term "0,0,0"))
                                 (rule "polySimp_mulLiterals" (formula "6") (term "1,0,0,0"))
                                 (rule "polySimp_elimOne" (formula "6") (term "1,0,0,0"))
                                 (rule "inEqSimp_notGeq" (formula "6") (term "1,0,0"))
                                 (rule "mul_literals" (formula "6") (term "1,0,0,1,0,0"))
                                 (rule "add_zero_right" (formula "6") (term "0,0,1,0,0"))
                                 (rule "inEqSimp_sepPosMonomial0" (formula "6") (term "1,0,0"))
                                 (rule "mul_literals" (formula "6") (term "1,1,0,0"))
                                 (rule "Static_class_invariant_axiom_for_de_polyas_core3_open_cred_CredTool" (formula "42"))
                                  (builtin "One Step Simplification" (formula "42"))
                                 (rule "insert_constant_string_value" (formula "42") (term "0,0,1,0,0") (ifseqformula "2"))
                                  (builtin "One Step Simplification" (formula "42"))
                                 (rule "insert_constant_string_value" (formula "42") (term "0,0,1,0,0,0") (ifseqformula "2"))
                                  (builtin "One Step Simplification" (formula "42"))
                                 (rule "insert_constant_string_value" (formula "42") (term "0,0,1,0,0,0,0") (ifseqformula "2"))
                                  (builtin "One Step Simplification" (formula "42"))
                                 (rule "castDel" (formula "42") (term "0,0,0,1,0,0"))
                                 (rule "castDel" (formula "42") (term "0,0,0,1,0,0,0,0"))
                                 (rule "castDel" (formula "42") (term "0,0,0,1,0,0,0"))
                                 (rule "replace_known_right" (formula "42") (term "0,1,0,0") (ifseqformula "38"))
                                  (builtin "One Step Simplification" (formula "42") (ifInst ""  (formula "36")) (ifInst ""  (formula "37")))
                                 (rule "pullOutSelect" (formula "42") (term "1,1") (inst "selectSK=de_polyas_core3_open_cred_CredTool_FieldsForPolyasMode_MIN_1"))
                                 (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "26"))
                                  (builtin "One Step Simplification" (formula "1"))
                                 (rule "elementOfSingleton" (formula "1") (term "0,0"))
                                  (builtin "One Step Simplification" (formula "1"))
                                 (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "20"))
                                  (builtin "One Step Simplification" (formula "1"))
                                 (rule "replaceKnownSelect_taclet0_4" (formula "1") (term "0"))
                                 (rule "replaceKnownAuxiliaryConstant_taclet0_5" (formula "1") (term "0"))
                                 (rule "applyEqReverse" (formula "43") (term "1,1") (ifseqformula "1"))
                                 (rule "hideAuxiliaryEq" (formula "1"))
                                 (rule "pullOutSelect" (formula "42") (term "0,0,0,0,0,0") (inst "selectSK=de_polyas_core3_open_cred_CredTool_distVals_0"))
                                 (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "26"))
                                  (builtin "One Step Simplification" (formula "1"))
                                 (rule "elementOfSingleton" (formula "1") (term "0,0"))
                                  (builtin "One Step Simplification" (formula "1"))
                                 (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "20"))
                                  (builtin "One Step Simplification" (formula "1"))
                                 (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "14"))
                                  (builtin "One Step Simplification" (formula "1"))
                                 (rule "applyEqReverse" (formula "43") (term "0,0,0,0,0,0") (ifseqformula "1"))
                                 (rule "hideAuxiliaryEq" (formula "1"))
                                 (rule "replace_known_right" (formula "42") (term "0,0,0,0,0") (ifseqformula "33"))
                                  (builtin "One Step Simplification" (formula "42"))
                                 (rule "pullOutSelect" (formula "42") (term "0,0,1,0") (inst "selectSK=de_polyas_core3_open_cred_CredTool_polyasMode_1"))
                                 (rule "applyEq" (formula "43") (term "0,1") (ifseqformula "1"))
                                 (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "26"))
                                  (builtin "One Step Simplification" (formula "1"))
                                 (rule "eqSymm" (formula "43") (term "1"))
                                 (rule "elementOfSingleton" (formula "1") (term "0,0"))
                                  (builtin "One Step Simplification" (formula "1"))
                                 (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "20"))
                                  (builtin "One Step Simplification" (formula "1"))
                                 (rule "replaceKnownSelect_taclet0_2" (formula "1") (term "0"))
                                 (rule "replaceKnownAuxiliaryConstant_taclet0_3" (formula "1") (term "0"))
                                 (rule "applyEqReverse" (formula "43") (term "1,1") (ifseqformula "1"))
                                 (rule "applyEqReverse" (formula "43") (term "0,0,1,0") (ifseqformula "1"))
                                 (rule "hideAuxiliaryEq" (formula "1"))
                                 (rule "eqSymm" (formula "42") (term "1"))
                                 (rule "replace_known_left" (formula "42") (term "1") (ifseqformula "11"))
                                  (builtin "One Step Simplification" (formula "42"))
                                 (rule "applyEq" (formula "42") (term "0,0,1") (ifseqformula "11"))
                                 (rule "replace_known_right" (formula "42") (term "0,1") (ifseqformula "39"))
                                  (builtin "One Step Simplification" (formula "42"))
                                 (rule "pullOutSelect" (formula "42") (term "0,0,1") (inst "selectSK=de_polyas_core3_open_cred_CredTool_print_0"))
                                 (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "26"))
                                  (builtin "One Step Simplification" (formula "1"))
                                 (rule "elementOfSingleton" (formula "1") (term "0,0"))
                                  (builtin "One Step Simplification" (formula "1"))
                                 (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "20"))
                                  (builtin "One Step Simplification" (formula "1"))
                                 (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "14"))
                                  (builtin "One Step Simplification" (formula "1"))
                                 (rule "applyEqReverse" (formula "43") (term "0,0,1") (ifseqformula "1"))
                                 (rule "hideAuxiliaryEq" (formula "1"))
                                 (rule "replace_known_right" (formula "42") (term "0,1") (ifseqformula "35"))
                                  (builtin "One Step Simplification" (formula "42"))
                                 (rule "notRight" (formula "42"))
                                 (rule "pullOutSelect" (formula "1") (term "0") (inst "selectSK=de_polyas_core3_open_cred_CredTool_polyasVals_0"))
                                 (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "27"))
                                  (builtin "One Step Simplification" (formula "1"))
                                 (rule "elementOfSingleton" (formula "1") (term "0,0"))
                                  (builtin "One Step Simplification" (formula "1"))
                                 (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "21"))
                                  (builtin "One Step Simplification" (formula "1"))
                                 (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "15"))
                                  (builtin "One Step Simplification" (formula "1"))
                                 (rule "applyEqReverse" (formula "2") (term "0") (ifseqformula "1"))
                                 (rule "close" (formula "36") (ifseqformula "2"))
                              )
                              (branch "Case 2"
                                  (builtin "One Step Simplification" (formula "40") (ifInst ""  (formula "30")))
                                 (rule "closeTrue" (formula "40"))
                              )
                           )
                        )
                     )
                  )
                  (branch "Case 2"
                      (builtin "One Step Simplification" (formula "40"))
                     (rule "closeTrue" (formula "40"))
                  )
               )
               (branch "Case 2"
                   (builtin "One Step Simplification" (formula "40"))
                  (rule "allRight" (formula "40") (inst "sk=f_0"))
                  (rule "allRight" (formula "40") (inst "sk=o_0"))
                  (rule "orRight" (formula "40"))
                  (rule "eqSymm" (formula "27"))
                  (rule "eqSymm" (formula "41"))
                  (rule "inEqSimp_ltToLeq" (formula "9"))
                  (rule "polySimp_mulComm0" (formula "9") (term "1,0,0"))
                  (rule "polySimp_addComm1" (formula "9") (term "0"))
                  (rule "inEqSimp_ltToLeq" (formula "23") (term "1,0,0,0,0"))
                  (rule "polySimp_mulComm0" (formula "23") (term "1,0,0,1,0,0,0,0"))
                  (rule "inEqSimp_ltToLeq" (formula "6") (term "0,0,0"))
                  (rule "polySimp_mulComm0" (formula "6") (term "1,0,0,0,0,0"))
                  (rule "applyEq" (formula "16") (term "0") (ifseqformula "17"))
                  (rule "qeq_literals" (formula "16"))
                  (rule "true_left" (formula "16"))
                  (rule "applyEq" (formula "22") (term "1") (ifseqformula "1"))
                   (builtin "One Step Simplification" (formula "22"))
                  (rule "exLeft" (formula "22") (inst "sk=i_1"))
                  (rule "andLeft" (formula "22"))
                  (rule "andLeft" (formula "22"))
                  (rule "polySimp_addComm1" (formula "23") (term "0"))
                  (rule "applyEq" (formula "38") (term "0") (ifseqformula "11"))
                  (rule "inEqSimp_sepNegMonomial0" (formula "9"))
                  (rule "polySimp_mulLiterals" (formula "9") (term "0"))
                  (rule "polySimp_elimOne" (formula "9") (term "0"))
                  (rule "inEqSimp_sepPosMonomial0" (formula "6") (term "0,0,0"))
                  (rule "polySimp_mulComm0" (formula "6") (term "1,0,0,0"))
                  (rule "polySimp_rightDist" (formula "6") (term "1,0,0,0"))
                  (rule "polySimp_mulLiterals" (formula "6") (term "1,1,0,0,0"))
                  (rule "mul_literals" (formula "6") (term "0,1,0,0,0"))
                  (rule "polySimp_elimOne" (formula "6") (term "1,1,0,0,0"))
                  (rule "inEqSimp_sepNegMonomial0" (formula "23"))
                  (rule "polySimp_mulLiterals" (formula "23") (term "0"))
                  (rule "polySimp_elimOne" (formula "23") (term "0"))
                  (rule "pullOutSelect" (formula "28") (term "1") (inst "selectSK=java_util_Collection_seq_2"))
                  (rule "simplifySelectOfAnonEQ" (formula "28") (ifseqformula "26"))
                   (builtin "One Step Simplification" (formula "28") (ifInst ""  (formula "32")))
                  (rule "selectCreatedOfAnonAsFormulaEQ" (formula "28") (term "0,1,0,0") (ifseqformula "20"))
                  (rule "selectCreatedOfAnonAsFormulaEQ" (formula "28") (term "0,0,1,0,0") (ifseqformula "13"))
                  (rule "replace_known_right" (formula "28") (term "0,0,0,1,0,0") (ifseqformula "31"))
                   (builtin "One Step Simplification" (formula "28") (ifInst ""  (formula "14")))
                  (rule "elementOfSingleton" (formula "28") (term "0,0"))
                   (builtin "One Step Simplification" (formula "28"))
                  (rule "applyEqReverse" (formula "29") (term "1") (ifseqformula "28"))
                  (rule "hideAuxiliaryEq" (formula "28"))
                  (rule "pullOutSelect" (formula "28") (term "0,0") (inst "selectSK=java_util_Collection_seq_3"))
                  (rule "simplifySelectOfAnonEQ" (formula "28") (ifseqformula "20"))
                   (builtin "One Step Simplification" (formula "28") (ifInst ""  (formula "32")))
                  (rule "replaceKnownSelect_taclet0_0" (formula "28") (term "2,0"))
                  (rule "replaceKnownAuxiliaryConstant_taclet0_1" (formula "28") (term "2,0"))
                  (rule "selectCreatedOfAnonAsFormulaEQ" (formula "28") (term "0,0,0") (ifseqformula "13"))
                  (rule "eqSymm" (formula "29"))
                  (rule "replace_known_right" (formula "28") (term "0,0,0,0") (ifseqformula "31"))
                   (builtin "One Step Simplification" (formula "28") (ifInst ""  (formula "14")))
                  (rule "applyEqReverse" (formula "29") (term "0,1") (ifseqformula "28"))
                  (rule "hideAuxiliaryEq" (formula "28"))
                  (rule "pullOutSelect" (formula "42") (term "0") (inst "selectSK=f_0_0"))
                  (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "27"))
                   (builtin "One Step Simplification" (formula "1"))
                  (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,1,1,0,0") (ifseqformula "21"))
                  (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,0,1,1,0,0") (ifseqformula "14"))
                  (rule "eqSymm" (formula "43"))
                  (rule "elementOfSingleton" (formula "1") (term "0,0,0,0"))
                  (rule "eqSeqConcat" (formula "29"))
                   (builtin "One Step Simplification" (formula "29"))
                  (rule "andLeft" (formula "29"))
                  (rule "andLeft" (formula "29"))
                  (rule "polySimp_addComm0" (formula "29") (term "1"))
                  (rule "eqSeqSingleton" (formula "31"))
                  (rule "andLeft" (formula "31"))
                  (rule "lenOfSeqSub" (formula "31") (term "0"))
                  (rule "polySimp_elimSub" (formula "31") (term "1,0"))
                  (rule "polySimp_addComm0" (formula "31") (term "1,0"))
                  (rule "ifEqualsInteger" (formula "31"))
                  (rule "equal_literals" (formula "31") (term "1,1"))
                   (builtin "One Step Simplification" (formula "31"))
                  (rule "andLeft" (formula "31"))
                  (rule "polySimp_homoEq" (formula "32"))
                  (rule "polySimp_mulComm0" (formula "32") (term "1,0"))
                  (rule "polySimp_rightDist" (formula "32") (term "1,0"))
                  (rule "polySimp_mulAssoc" (formula "32") (term "0,1,0"))
                  (rule "polySimp_mulComm0" (formula "32") (term "0,0,1,0"))
                  (rule "polySimp_mulLiterals" (formula "32") (term "0,1,0"))
                  (rule "polySimp_elimOne" (formula "32") (term "0,1,0"))
                  (rule "polySimp_addAssoc" (formula "32") (term "0"))
                  (rule "inEqSimp_ltToLeq" (formula "31"))
                  (rule "polySimp_mulComm0" (formula "31") (term "1,0,0"))
                  (rule "polySimp_addComm1" (formula "31") (term "0"))
                  (rule "applyEq" (formula "32") (term "0,1,0") (ifseqformula "29"))
                  (rule "polySimp_pullOutFactor1" (formula "32") (term "0"))
                  (rule "add_literals" (formula "32") (term "1,0"))
                  (rule "times_zero_1" (formula "32") (term "0"))
                   (builtin "One Step Simplification" (formula "32"))
                  (rule "true_left" (formula "32"))
                  (rule "applyEq" (formula "32") (term "2,0,0") (ifseqformula "29"))
                  (rule "applyEq" (formula "30") (term "2,0") (ifseqformula "17"))
                   (builtin "One Step Simplification" (formula "30"))
                  (rule "lenOfSeqEmptyEQ" (formula "17") (term "0") (ifseqformula "30"))
                   (builtin "One Step Simplification" (formula "17"))
                  (rule "true_left" (formula "17"))
                  (rule "lenOfSeqEmptyEQ" (formula "28") (term "1,1") (ifseqformula "29"))
                  (rule "lenOfSeqEmptyEQ" (formula "31") (term "1,0,0") (ifseqformula "29"))
                  (rule "lenOfSeqEmptyEQ" (formula "30") (term "1,0,0") (ifseqformula "29"))
                  (rule "lenOfSeqEmptyEQ" (formula "31") (term "1,2,0,0") (ifseqformula "29"))
                  (rule "add_zero_right" (formula "28") (term "1"))
                  (rule "add_zero_right" (formula "30") (term "0,0"))
                  (rule "add_zero_right" (formula "31") (term "2,0,0"))
                  (rule "eqSymm" (formula "29"))
                  (rule "eqSeqEmpty" (formula "29"))
                  (rule "applyEq" (formula "30") (term "0,1,0") (ifseqformula "28"))
                  (rule "mul_literals" (formula "30") (term "1,0"))
                  (rule "add_literals" (formula "30") (term "0"))
                  (rule "leq_literals" (formula "30"))
                  (rule "true_left" (formula "30"))
                  (rule "getOfSeqSub" (formula "30") (term "0"))
                  (rule "castDel" (formula "30") (term "2,0"))
                  (rule "leq_literals" (formula "30") (term "0,0,0"))
                   (builtin "One Step Simplification" (formula "30"))
                  (rule "sub_literals" (formula "30") (term "1,0,0"))
                  (rule "add_zero_left" (formula "30") (term "1,1,0"))
                  (rule "less_literals" (formula "30") (term "0,0"))
                   (builtin "One Step Simplification" (formula "30"))
                  (rule "pullOutSelect" (formula "1") (term "2,0") (inst "selectSK=f_0_1"))
                  (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "21"))
                   (builtin "One Step Simplification" (formula "1"))
                  (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,1,0,0") (ifseqformula "15"))
                  (rule "pullOutSelect" (formula "1") (term "2,0") (inst "selectSK=f_0_2"))
                  (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "16"))
                   (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "45")))
                  (rule "applyEqReverse" (formula "2") (term "2,0") (ifseqformula "1"))
                  (rule "hideAuxiliaryEq" (formula "1"))
                  (rule "nnf_imp2or" (formula "8") (term "0"))
                  (rule "nnf_notAnd" (formula "8") (term "0,0"))
                  (rule "inEqSimp_notLeq" (formula "8") (term "0,0,0"))
                  (rule "polySimp_rightDist" (formula "8") (term "1,0,0,0,0,0"))
                  (rule "mul_literals" (formula "8") (term "0,1,0,0,0,0,0"))
                  (rule "polySimp_addAssoc" (formula "8") (term "0,0,0,0,0"))
                  (rule "add_literals" (formula "8") (term "0,0,0,0,0,0"))
                  (rule "add_zero_left" (formula "8") (term "0,0,0,0,0"))
                  (rule "inEqSimp_sepPosMonomial1" (formula "8") (term "0,0,0"))
                  (rule "polySimp_mulLiterals" (formula "8") (term "1,0,0,0"))
                  (rule "polySimp_elimOne" (formula "8") (term "1,0,0,0"))
                  (rule "inEqSimp_notGeq" (formula "8") (term "1,0,0"))
                  (rule "mul_literals" (formula "8") (term "1,0,0,1,0,0"))
                  (rule "add_literals" (formula "8") (term "0,0,1,0,0"))
                  (rule "inEqSimp_sepPosMonomial0" (formula "8") (term "1,0,0"))
                  (rule "mul_literals" (formula "8") (term "1,1,0,0"))
                  (rule "Class_invariant_axiom_for_java_util_ArrayList" (formula "32"))
                  (rule "true_left" (formula "32"))
                  (rule "commute_and_2" (formula "2") (term "0,0,0"))
                  (rule "commute_or_2" (formula "8") (term "0"))
                  (rule "commute_or" (formula "8") (term "0,0"))
                  (rule "commute_or_2" (formula "8") (term "0"))
                  (rule "applyEq_and_gen3" (formula "2") (term "0,0,0"))
                   (builtin "One Step Simplification" (formula "2"))
                  (rule "commute_and" (formula "2") (term "0,0,0"))
                  (rule "cut_direct" (formula "43") (term "0,0"))
                  (branch "CUT: o_0 = null TRUE"
                      (builtin "One Step Simplification" (formula "44"))
                     (rule "false_right" (formula "44"))
                     (rule "replace_known_left" (formula "2") (term "0,0,0,0") (ifseqformula "1"))
                      (builtin "One Step Simplification" (formula "2"))
                     (rule "applyEqReverse" (formula "3") (term "2,0") (ifseqformula "2"))
                     (rule "hideAuxiliaryEq" (formula "2"))
                     (rule "replace_known_left" (formula "2") (term "0,0,1,0,0") (ifseqformula "1"))
                      (builtin "One Step Simplification" (formula "2"))
                     (rule "applyEq" (formula "2") (term "1,2,0") (ifseqformula "1"))
                     (rule "applyEq" (formula "2") (term "1,1,0") (ifseqformula "1"))
                     (rule "applyEqRigid" (formula "43") (term "1,0") (ifseqformula "1"))
                     (rule "applyEq" (formula "2") (term "0,1,0,0") (ifseqformula "1"))
                     (rule "eqSymm" (formula "2") (term "1,0,0"))
                     (rule "replace_known_right" (formula "2") (term "1,0,0") (ifseqformula "33"))
                      (builtin "One Step Simplification" (formula "2") (ifInst ""  (formula "43")))
                     (rule "closeFalse" (formula "2"))
                  )
                  (branch "CUT: o_0 = null FALSE"
                      (builtin "One Step Simplification" (formula "44"))
                     (rule "notRight" (formula "44"))
                     (rule "replace_known_left" (formula "3") (term "0,0,0,1,1,0,0") (ifseqformula "1"))
                      (builtin "One Step Simplification" (formula "3") (ifInst ""  (formula "44")))
                     (rule "replace_known_right" (formula "2") (term "0,0,0,0") (ifseqformula "44"))
                      (builtin "One Step Simplification" (formula "2") (ifInst ""  (formula "1")))
                     (rule "applyEqReverse" (formula "3") (term "2,0") (ifseqformula "2"))
                     (rule "hideAuxiliaryEq" (formula "2"))
                     (rule "seqGetAlphaCast" (formula "23") (term "0"))
                     (rule "castedGetAny" (formula "23") (term "0"))
                      (builtin "One Step Simplification" (formula "23"))
                     (rule "true_left" (formula "23"))
                     (rule "lenNonNegative" (formula "29") (term "0"))
                     (rule "inEqSimp_commuteLeq" (formula "29"))
                     (rule "applyEq" (formula "29") (term "0") (ifseqformula "30"))
                     (rule "qeq_literals" (formula "29"))
                     (rule "true_left" (formula "29"))
                     (rule "allLeft" (formula "8") (inst "t=i_1"))
                     (rule "inEqSimp_commuteGeq" (formula "8") (term "1"))
                     (rule "applyEq" (formula "8") (term "0,0,0,0") (ifseqformula "24"))
                     (rule "replace_known_right" (formula "8") (term "0,0,0") (ifseqformula "43"))
                      (builtin "One Step Simplification" (formula "8"))
                     (rule "true_left" (formula "8"))
                     (rule "allLeft" (formula "8") (inst "t=i_0"))
                     (rule "inEqSimp_commuteGeq" (formula "8") (term "1"))
                     (rule "applyEq" (formula "8") (term "0,0,0,0") (ifseqformula "13"))
                     (rule "replace_known_right" (formula "8") (term "0,0,0") (ifseqformula "43"))
                      (builtin "One Step Simplification" (formula "8"))
                     (rule "true_left" (formula "8"))
                     (rule "ifthenelse_split" (formula "2") (term "0"))
                     (branch "f_0 = java.util.Collection::$seq ∧ o_0 = self_275 TRUE"
                        (rule "andLeft" (formula "2"))
                        (rule "applyEqReverse" (formula "46") (term "1") (ifseqformula "4"))
                        (rule "hideAuxiliaryEq" (formula "4"))
                        (rule "eqSymm" (formula "45"))
                        (rule "applyEqRigid" (formula "45") (term "2,0") (ifseqformula "2"))
                        (rule "narrowSelectType" (formula "45") (term "0") (ifseqformula "27"))
                        (rule "eqSymm" (formula "45"))
                        (rule "applyEq" (formula "1") (term "1,0") (ifseqformula "3"))
                        (rule "close" (formula "33") (ifseqformula "1"))
                     )
                     (branch "f_0 = java.util.Collection::$seq ∧ o_0 = self_275 FALSE"
                        (rule "close" (formula "45") (ifseqformula "2"))
                     )
                  )
               )
            )
            (branch "Exceptional Post (add)"
                (builtin "One Step Simplification" (formula "37"))
                (builtin "One Step Simplification" (formula "25"))
               (rule "andLeft" (formula "25"))
               (rule "selectCreatedOfAnonAsFormulaEQ" (formula "26") (term "1,0") (ifseqformula "25"))
               (rule "selectCreatedOfAnonAsFormulaEQ" (formula "26") (term "0,1,0") (ifseqformula "21"))
               (rule "selectCreatedOfAnonAsFormulaEQ" (formula "26") (term "0,0,1,0") (ifseqformula "13"))
               (rule "andLeft" (formula "26"))
               (rule "andLeft" (formula "27"))
               (rule "andLeft" (formula "26"))
               (rule "andLeft" (formula "28"))
               (rule "notLeft" (formula "26"))
               (rule "close" (formula "30") (ifseqformula "29"))
            )
            (branch "Pre (add)"
                (builtin "One Step Simplification" (formula "35") (ifInst ""  (formula "34")) (ifInst ""  (formula "34")))
               (rule "wellFormedAnonEQ" (formula "35") (term "0,1") (ifseqformula "21"))
               (rule "selectCreatedOfAnonAsFormulaEQ" (formula "35") (term "1,1") (ifseqformula "21"))
               (rule "selectCreatedOfAnonAsFormulaEQ" (formula "35") (term "0,1,1") (ifseqformula "13"))
               (rule "wellFormedAnonEQ" (formula "35") (term "0,0,1") (ifseqformula "13"))
               (rule "replace_known_left" (formula "35") (term "0,0,1,1") (ifseqformula "4"))
                (builtin "One Step Simplification" (formula "35") (ifInst ""  (formula "2")) (ifInst ""  (formula "12")) (ifInst ""  (formula "20")))
               (rule "inEqSimp_ltToLeq" (formula "9"))
               (rule "polySimp_mulComm0" (formula "9") (term "1,0,0"))
               (rule "polySimp_addComm1" (formula "9") (term "0"))
               (rule "inEqSimp_ltToLeq" (formula "6") (term "0,0,0"))
               (rule "polySimp_mulComm0" (formula "6") (term "1,0,0,0,0,0"))
               (rule "inEqSimp_ltToLeq" (formula "23") (term "1,0,0,0,0"))
               (rule "polySimp_mulComm0" (formula "23") (term "1,0,0,1,0,0,0,0"))
               (rule "applyEq" (formula "32") (term "0") (ifseqformula "11"))
               (rule "applyEq" (formula "23") (term "1") (ifseqformula "1"))
                (builtin "One Step Simplification" (formula "23"))
               (rule "exLeft" (formula "23") (inst "sk=i_1"))
               (rule "andLeft" (formula "23"))
               (rule "andLeft" (formula "23"))
               (rule "polySimp_addComm1" (formula "24") (term "0"))
               (rule "applyEq" (formula "16") (term "0") (ifseqformula "17"))
               (rule "qeq_literals" (formula "16"))
               (rule "true_left" (formula "16"))
               (rule "inEqSimp_sepNegMonomial0" (formula "9"))
               (rule "polySimp_mulLiterals" (formula "9") (term "0"))
               (rule "polySimp_elimOne" (formula "9") (term "0"))
               (rule "inEqSimp_sepPosMonomial0" (formula "6") (term "0,0,0"))
               (rule "polySimp_mulComm0" (formula "6") (term "1,0,0,0"))
               (rule "polySimp_rightDist" (formula "6") (term "1,0,0,0"))
               (rule "polySimp_mulLiterals" (formula "6") (term "1,1,0,0,0"))
               (rule "mul_literals" (formula "6") (term "0,1,0,0,0"))
               (rule "polySimp_elimOne" (formula "6") (term "1,1,0,0,0"))
               (rule "inEqSimp_sepNegMonomial0" (formula "23"))
               (rule "polySimp_mulLiterals" (formula "23") (term "0"))
               (rule "polySimp_elimOne" (formula "23") (term "0"))
               (rule "nnf_imp2or" (formula "6") (term "0"))
               (rule "nnf_notAnd" (formula "6") (term "0,0"))
               (rule "inEqSimp_notGeq" (formula "6") (term "1,0,0"))
               (rule "mul_literals" (formula "6") (term "1,0,0,1,0,0"))
               (rule "add_zero_right" (formula "6") (term "0,0,1,0,0"))
               (rule "inEqSimp_sepPosMonomial0" (formula "6") (term "1,0,0"))
               (rule "mul_literals" (formula "6") (term "1,1,0,0"))
               (rule "inEqSimp_notLeq" (formula "6") (term "0,0,0"))
               (rule "polySimp_rightDist" (formula "6") (term "1,0,0,0,0,0"))
               (rule "mul_literals" (formula "6") (term "0,1,0,0,0,0,0"))
               (rule "polySimp_addAssoc" (formula "6") (term "0,0,0,0,0"))
               (rule "add_literals" (formula "6") (term "0,0,0,0,0,0"))
               (rule "add_zero_left" (formula "6") (term "0,0,0,0,0"))
               (rule "inEqSimp_sepPosMonomial1" (formula "6") (term "0,0,0"))
               (rule "polySimp_mulLiterals" (formula "6") (term "1,0,0,0"))
               (rule "polySimp_elimOne" (formula "6") (term "1,0,0,0"))
               (rule "Class_invariant_axiom_for_java_util_ArrayList" (formula "36"))
               (rule "closeTrue" (formula "36"))
            )
            (branch "Null reference (result_300 = null)"
                (builtin "One Step Simplification" (formula "35") (ifInst ""  (formula "25")))
               (rule "closeTrue" (formula "35"))
            )
         )
         (branch "if x_1 false"
             (builtin "One Step Simplification" (formula "1"))
             (builtin "One Step Simplification" (formula "35"))
            (rule "notLeft" (formula "1"))
            (rule "blockEmpty" (formula "35") (term "1"))
            (rule "apply_eq_boolean" (formula "22") (term "1") (ifseqformula "23"))
             (builtin "One Step Simplification" (formula "22"))
            (rule "notLeft" (formula "22"))
            (rule "methodCallReturn" (formula "35") (term "1"))
            (rule "assignment" (formula "35") (term "1"))
             (builtin "One Step Simplification" (formula "35"))
            (rule "methodCallEmpty" (formula "35") (term "1"))
            (rule "tryEmpty" (formula "35") (term "1"))
            (rule "emptyModality" (formula "35") (term "1"))
             (builtin "One Step Simplification" (formula "35") (ifInst ""  (formula "25")))
            (rule "eqSymm" (formula "35") (term "1,0,0,1"))
            (rule "inEqSimp_ltToLeq" (formula "8"))
            (rule "polySimp_mulComm0" (formula "8") (term "1,0,0"))
            (rule "polySimp_addComm1" (formula "8") (term "0"))
            (rule "inEqSimp_ltToLeq" (formula "22") (term "1,0,0"))
            (rule "polySimp_mulComm0" (formula "22") (term "1,0,0,1,0,0"))
            (rule "inEqSimp_ltToLeq" (formula "5") (term "0,0,0"))
            (rule "polySimp_mulComm0" (formula "5") (term "1,0,0,0,0,0"))
            (rule "inEqSimp_ltToLeq" (formula "35") (term "1,0,0,0,1,0"))
            (rule "polySimp_mulComm0" (formula "35") (term "1,0,0,1,0,0,0,1,0"))
            (rule "inEqSimp_ltToLeq" (formula "35") (term "1,0,0,0,0"))
            (rule "polySimp_mulComm0" (formula "35") (term "1,0,0,1,0,0,0,0"))
            (rule "applyEq" (formula "15") (term "0") (ifseqformula "16"))
            (rule "qeq_literals" (formula "15"))
            (rule "true_left" (formula "15"))
            (rule "applyEq" (formula "31") (term "0") (ifseqformula "10"))
            (rule "inEqSimp_sepNegMonomial0" (formula "8"))
            (rule "polySimp_mulLiterals" (formula "8") (term "0"))
            (rule "polySimp_elimOne" (formula "8") (term "0"))
            (rule "inEqSimp_sepPosMonomial0" (formula "21") (term "1,0,0"))
            (rule "polySimp_mulComm0" (formula "21") (term "1,1,0,0"))
            (rule "polySimp_rightDist" (formula "21") (term "1,1,0,0"))
            (rule "mul_literals" (formula "21") (term "0,1,1,0,0"))
            (rule "polySimp_mulLiterals" (formula "21") (term "1,1,1,0,0"))
            (rule "polySimp_elimOne" (formula "21") (term "1,1,1,0,0"))
            (rule "inEqSimp_sepPosMonomial0" (formula "5") (term "0,0,0"))
            (rule "polySimp_mulComm0" (formula "5") (term "1,0,0,0"))
            (rule "polySimp_rightDist" (formula "5") (term "1,0,0,0"))
            (rule "mul_literals" (formula "5") (term "0,1,0,0,0"))
            (rule "polySimp_mulLiterals" (formula "5") (term "1,1,0,0,0"))
            (rule "polySimp_elimOne" (formula "5") (term "1,1,0,0,0"))
            (rule "inEqSimp_sepPosMonomial0" (formula "34") (term "1,0,0,0,1,0"))
            (rule "polySimp_mulComm0" (formula "34") (term "1,1,0,0,0,1,0"))
            (rule "polySimp_rightDist" (formula "34") (term "1,1,0,0,0,1,0"))
            (rule "mul_literals" (formula "34") (term "0,1,1,0,0,0,1,0"))
            (rule "polySimp_mulLiterals" (formula "34") (term "1,1,1,0,0,0,1,0"))
            (rule "polySimp_elimOne" (formula "34") (term "1,1,1,0,0,0,1,0"))
            (rule "inEqSimp_sepPosMonomial0" (formula "34") (term "1,0,0,0,0"))
            (rule "polySimp_mulComm0" (formula "34") (term "1,1,0,0,0,0"))
            (rule "polySimp_rightDist" (formula "34") (term "1,1,0,0,0,0"))
            (rule "polySimp_mulLiterals" (formula "34") (term "1,1,1,0,0,0,0"))
            (rule "mul_literals" (formula "34") (term "0,1,1,0,0,0,0"))
            (rule "polySimp_elimOne" (formula "34") (term "1,1,1,0,0,0,0"))
            (rule "pullOutSelect" (formula "34") (term "0,0,1,0,0,1,0") (inst "selectSK=java_util_Collection_seq_2"))
            (rule "applyEq" (formula "35") (term "0,0,0,1,0,0,0") (ifseqformula "1"))
            (rule "applyEq" (formula "35") (term "0,1,1,1,0,0,0,1,0") (ifseqformula "1"))
            (rule "applyEq" (formula "35") (term "0,1,1,1,0,0,0,0") (ifseqformula "1"))
            (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "20"))
             (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "25")))
            (rule "replaceKnownSelect_taclet0_0" (formula "1") (term "2,0"))
            (rule "replaceKnownAuxiliaryConstant_taclet0_1" (formula "1") (term "2,0"))
            (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,0,0") (ifseqformula "13"))
            (rule "replace_known_right" (formula "1") (term "0,0,0,0") (ifseqformula "24"))
             (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "14")))
            (rule "applyEqReverse" (formula "35") (term "0,1,1,1,0,0,0,1,0") (ifseqformula "1"))
            (rule "applyEqReverse" (formula "35") (term "0,0,0,1,0,0,0") (ifseqformula "1"))
            (rule "applyEqReverse" (formula "35") (term "0,0,1,0,0,1,0") (ifseqformula "1"))
            (rule "applyEqReverse" (formula "35") (term "0,1,1,1,0,0,0,0") (ifseqformula "1"))
            (rule "hideAuxiliaryEq" (formula "1"))
            (rule "applyEq" (formula "34") (term "1,1,1,0,0,0,1,0") (ifseqformula "15"))
            (rule "add_literals" (formula "34") (term "1,1,0,0,0,1,0"))
            (rule "applyEq" (formula "34") (term "1,1,1,0,0,0,0") (ifseqformula "15"))
            (rule "add_literals" (formula "34") (term "1,1,0,0,0,0"))
            (rule "nnf_ex2all" (formula "21"))
            (rule "nnf_imp2or" (formula "6") (term "0"))
            (rule "nnf_notAnd" (formula "1") (term "0"))
            (rule "inEqSimp_notGeq" (formula "1") (term "1,0"))
            (rule "mul_literals" (formula "1") (term "1,0,0,1,0"))
            (rule "add_zero_right" (formula "1") (term "0,0,1,0"))
            (rule "inEqSimp_sepPosMonomial0" (formula "1") (term "1,0"))
            (rule "mul_literals" (formula "1") (term "1,1,0"))
            (rule "nnf_notAnd" (formula "6") (term "0,0"))
            (rule "inEqSimp_notLeq" (formula "6") (term "0,0,0"))
            (rule "polySimp_rightDist" (formula "6") (term "1,0,0,0,0,0"))
            (rule "mul_literals" (formula "6") (term "0,1,0,0,0,0,0"))
            (rule "polySimp_addAssoc" (formula "6") (term "0,0,0,0,0"))
            (rule "add_literals" (formula "6") (term "0,0,0,0,0,0"))
            (rule "add_zero_left" (formula "6") (term "0,0,0,0,0"))
            (rule "inEqSimp_sepPosMonomial1" (formula "6") (term "0,0,0"))
            (rule "polySimp_mulLiterals" (formula "6") (term "1,0,0,0"))
            (rule "polySimp_elimOne" (formula "6") (term "1,0,0,0"))
            (rule "inEqSimp_notGeq" (formula "6") (term "1,0,0"))
            (rule "times_zero_1" (formula "6") (term "1,0,0,1,0,0"))
            (rule "add_zero_right" (formula "6") (term "0,0,1,0,0"))
            (rule "inEqSimp_sepPosMonomial0" (formula "6") (term "1,0,0"))
            (rule "mul_literals" (formula "6") (term "1,1,0,0"))
            (rule "nnf_notAnd" (formula "1") (term "0,0"))
            (rule "inEqSimp_notLeq" (formula "1") (term "1,0,0"))
            (rule "polySimp_rightDist" (formula "1") (term "1,0,0,1,0,0"))
            (rule "mul_literals" (formula "1") (term "0,1,0,0,1,0,0"))
            (rule "polySimp_addAssoc" (formula "1") (term "0,0,1,0,0"))
            (rule "add_literals" (formula "1") (term "0,0,0,1,0,0"))
            (rule "add_zero_left" (formula "1") (term "0,0,1,0,0"))
            (rule "inEqSimp_sepPosMonomial1" (formula "1") (term "1,0,0"))
            (rule "polySimp_mulLiterals" (formula "1") (term "1,1,0,0"))
            (rule "polySimp_elimOne" (formula "1") (term "1,1,0,0"))
            (rule "nnf_imp2or" (formula "34") (term "0,0,0"))
            (rule "nnf_notAnd" (formula "34") (term "0,0,0,0"))
            (rule "inEqSimp_notGeq" (formula "34") (term "0,0,0,0,0"))
            (rule "mul_literals" (formula "34") (term "1,0,0,0,0,0,0,0"))
            (rule "add_literals" (formula "34") (term "0,0,0,0,0,0,0"))
            (rule "inEqSimp_sepPosMonomial0" (formula "34") (term "0,0,0,0,0"))
            (rule "mul_literals" (formula "34") (term "1,0,0,0,0,0"))
             (builtin "One Step Simplification" (formula "34"))
            (rule "Class_invariant_axiom_for_java_util_ArrayList" (formula "34") (term "0,1,0"))
             (builtin "One Step Simplification" (formula "34"))
            (rule "commute_or_2" (formula "6") (term "0"))
            (rule "Static_class_invariant_axiom_for_de_polyas_core3_open_cred_CredTool" (formula "34") (term "1,0"))
             (builtin "One Step Simplification" (formula "34"))
            (rule "insert_constant_string_value" (formula "34") (term "0,0,1,0,0,1,0") (ifseqformula "2"))
             (builtin "One Step Simplification" (formula "34"))
            (rule "insert_constant_string_value" (formula "34") (term "0,0,1,0,0,0,1,0") (ifseqformula "2"))
             (builtin "One Step Simplification" (formula "34"))
            (rule "insert_constant_string_value" (formula "34") (term "0,0,1,0,0,0,0,1,0") (ifseqformula "2"))
             (builtin "One Step Simplification" (formula "34"))
            (rule "castDel" (formula "34") (term "0,0,0,1,0,0,0,0,1,0"))
            (rule "castDel" (formula "34") (term "0,0,0,1,0,0,1,0"))
            (rule "castDel" (formula "34") (term "0,0,0,1,0,0,0,1,0"))
            (rule "replace_known_right" (formula "34") (term "0,1,0,0,1,0") (ifseqformula "30"))
             (builtin "One Step Simplification" (formula "34") (ifInst ""  (formula "28")) (ifInst ""  (formula "29")))
            (rule "pullOutSelect" (formula "34") (term "0,1,1,0") (inst "selectSK=de_polyas_core3_open_cred_CredTool_polyasMode_1"))
            (rule "applyEq" (formula "35") (term "0,0,1,0,1,0") (ifseqformula "1"))
            (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "21"))
             (builtin "One Step Simplification" (formula "1"))
            (rule "replaceKnownSelect_taclet0_2" (formula "1") (term "0"))
            (rule "replaceKnownAuxiliaryConstant_taclet0_3" (formula "1") (term "0"))
            (rule "applyEqReverse" (formula "35") (term "0,1,1,0") (ifseqformula "1"))
            (rule "applyEqReverse" (formula "35") (term "0,0,1,0,1,0") (ifseqformula "1"))
            (rule "hideAuxiliaryEq" (formula "1"))
            (rule "eqSymm" (formula "34") (term "1,1,0"))
            (rule "applyEq" (formula "34") (term "0,0,1,0,1,0") (ifseqformula "11"))
            (rule "replace_known_right" (formula "34") (term "0,1,0,1,0") (ifseqformula "31"))
             (builtin "One Step Simplification" (formula "34"))
            (rule "applyEq" (formula "34") (term "1,1,1,0") (ifseqformula "11"))
            (rule "pullOutSelect" (formula "34") (term "0,1,1,0") (inst "selectSK=de_polyas_core3_open_cred_CredTool_FieldsForPolyasMode_MIN_1"))
            (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "21"))
             (builtin "One Step Simplification" (formula "1"))
            (rule "replaceKnownSelect_taclet0_4" (formula "1") (term "0"))
            (rule "replaceKnownAuxiliaryConstant_taclet0_5" (formula "1") (term "0"))
            (rule "applyEqReverse" (formula "35") (term "0,1,1,0") (ifseqformula "1"))
             (builtin "One Step Simplification" (formula "35"))
            (rule "hideAuxiliaryEq" (formula "1"))
            (rule "pullOutSelect" (formula "34") (term "0,0,1,1,0") (inst "selectSK=de_polyas_core3_open_cred_CredTool_print_0"))
            (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "21"))
             (builtin "One Step Simplification" (formula "1"))
            (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "14"))
             (builtin "One Step Simplification" (formula "1"))
            (rule "applyEqReverse" (formula "35") (term "0,0,1,1,0") (ifseqformula "1"))
            (rule "hideAuxiliaryEq" (formula "1"))
            (rule "replace_known_right" (formula "34") (term "0,1,1,0") (ifseqformula "27"))
             (builtin "One Step Simplification" (formula "34"))
            (rule "pullOutSelect" (formula "34") (term "0,0,0,1,0") (inst "selectSK=de_polyas_core3_open_cred_CredTool_distVals_0"))
            (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "21"))
             (builtin "One Step Simplification" (formula "1"))
            (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "14"))
             (builtin "One Step Simplification" (formula "1"))
            (rule "applyEqReverse" (formula "35") (term "0,0,0,1,0") (ifseqformula "1"))
            (rule "hideAuxiliaryEq" (formula "1"))
            (rule "replace_known_right" (formula "34") (term "0,0,1,0") (ifseqformula "25"))
             (builtin "One Step Simplification" (formula "34"))
            (rule "pullOutSelect" (formula "34") (term "0,0,1,0") (inst "selectSK=de_polyas_core3_open_cred_CredTool_polyasVals_0"))
            (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "21"))
             (builtin "One Step Simplification" (formula "1"))
            (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "14"))
             (builtin "One Step Simplification" (formula "1"))
            (rule "applyEqReverse" (formula "35") (term "0,0,1,0") (ifseqformula "1"))
            (rule "hideAuxiliaryEq" (formula "1"))
            (rule "replace_known_right" (formula "34") (term "0,1,0") (ifseqformula "26"))
             (builtin "One Step Simplification" (formula "34"))
            (rule "commute_or_2" (formula "1") (term "0"))
            (rule "commute_or" (formula "6") (term "0,0"))
            (rule "commute_or_2" (formula "6") (term "0"))
            (rule "andRight" (formula "34"))
            (branch
               (rule "nnf_ex2all" (formula "34"))
               (rule "nnf_notAnd" (formula "1") (term "0"))
               (rule "nnf_notAnd" (formula "1") (term "0,0"))
               (rule "inEqSimp_notGeq" (formula "1") (term "0,0,0"))
               (rule "mul_literals" (formula "1") (term "1,0,0,0,0,0"))
               (rule "add_literals" (formula "1") (term "0,0,0,0,0"))
               (rule "inEqSimp_sepPosMonomial0" (formula "1") (term "0,0,0"))
               (rule "mul_literals" (formula "1") (term "1,0,0,0"))
                (builtin "One Step Simplification" (formula "1"))
               (rule "true_left" (formula "1"))
               (rule "allLeft" (formula "1") (inst "t=i_0"))
               (rule "replace_known_left" (formula "1") (term "0,0,0") (ifseqformula "11"))
                (builtin "One Step Simplification" (formula "1"))
               (rule "inEqSimp_commuteGeq" (formula "1") (term "1"))
               (rule "inEqSimp_contradInEq1" (formula "1") (term "1") (ifseqformula "10"))
               (rule "inEqSimp_homoInEq1" (formula "1") (term "0,1"))
               (rule "polySimp_pullOutFactor1b" (formula "1") (term "0,0,1"))
               (rule "add_literals" (formula "1") (term "1,1,0,0,1"))
               (rule "times_zero_1" (formula "1") (term "1,0,0,1"))
               (rule "add_zero_right" (formula "1") (term "0,0,1"))
               (rule "leq_literals" (formula "1") (term "0,1"))
                (builtin "One Step Simplification" (formula "1"))
               (rule "inEqSimp_contradInEq0" (formula "8") (ifseqformula "1"))
               (rule "qeq_literals" (formula "8") (term "0"))
                (builtin "One Step Simplification" (formula "8"))
               (rule "closeFalse" (formula "8"))
            )
            (branch
               (rule "allRight" (formula "34") (inst "sk=f_0"))
               (rule "allRight" (formula "34") (inst "sk=o_0"))
               (rule "orRight" (formula "34"))
               (rule "pullOutSelect" (formula "35") (term "0") (inst "selectSK=f_0_0"))
               (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "21"))
                (builtin "One Step Simplification" (formula "1"))
               (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,1,0,0") (ifseqformula "14"))
               (rule "eqSymm" (formula "36"))
               (rule "pullOutSelect" (formula "1") (term "2,0") (inst "selectSK=f_0_1"))
               (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "15"))
                (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "36")))
               (rule "applyEqReverse" (formula "2") (term "2,0") (ifseqformula "1"))
               (rule "hideAuxiliaryEq" (formula "1"))
               (rule "allLeft" (formula "2") (inst "t=i_0"))
               (rule "replace_known_left" (formula "2") (term "0,0,0") (ifseqformula "12"))
                (builtin "One Step Simplification" (formula "2"))
               (rule "inEqSimp_commuteGeq" (formula "2") (term "1"))
               (rule "inEqSimp_contradInEq1" (formula "2") (term "1") (ifseqformula "11"))
               (rule "inEqSimp_homoInEq1" (formula "2") (term "0,1"))
               (rule "polySimp_pullOutFactor1b" (formula "2") (term "0,0,1"))
               (rule "add_literals" (formula "2") (term "1,1,0,0,1"))
               (rule "times_zero_1" (formula "2") (term "1,0,0,1"))
               (rule "add_zero_right" (formula "2") (term "0,0,1"))
               (rule "leq_literals" (formula "2") (term "0,1"))
                (builtin "One Step Simplification" (formula "2"))
               (rule "inEqSimp_contradInEq1" (formula "2") (ifseqformula "9"))
               (rule "qeq_literals" (formula "2") (term "0"))
                (builtin "One Step Simplification" (formula "2"))
               (rule "closeFalse" (formula "2"))
            )
         )
      )
      (branch "Exceptional Post (contains)"
          (builtin "One Step Simplification" (formula "19"))
          (builtin "One Step Simplification" (formula "31"))
         (rule "andLeft" (formula "19"))
         (rule "selectCreatedOfAnonAsFormulaEQ" (formula "20") (term "1,0") (ifseqformula "19"))
         (rule "selectCreatedOfAnonAsFormulaEQ" (formula "20") (term "0,1,0") (ifseqformula "12"))
         (rule "andLeft" (formula "20"))
         (rule "andLeft" (formula "21"))
         (rule "andLeft" (formula "20"))
         (rule "andLeft" (formula "22"))
         (rule "notLeft" (formula "20"))
         (rule "close" (formula "24") (ifseqformula "23"))
      )
      (branch "Pre (contains)"
          (builtin "One Step Simplification" (formula "29") (ifInst ""  (formula "28")) (ifInst ""  (formula "28")))
         (rule "wellFormedAnonEQ" (formula "29") (term "0,1") (ifseqformula "12"))
         (rule "selectCreatedOfAnonAsFormulaEQ" (formula "29") (term "1,1") (ifseqformula "12"))
         (rule "replace_known_left" (formula "29") (term "1,0,1") (ifseqformula "11"))
          (builtin "One Step Simplification" (formula "29") (ifInst ""  (formula "1")) (ifInst ""  (formula "3")))
         (rule "inEqSimp_ltToLeq" (formula "8"))
         (rule "polySimp_mulComm0" (formula "8") (term "1,0,0"))
         (rule "polySimp_addComm1" (formula "8") (term "0"))
         (rule "inEqSimp_ltToLeq" (formula "5") (term "0,0,0"))
         (rule "polySimp_mulComm0" (formula "5") (term "1,0,0,0,0,0"))
         (rule "applyEq" (formula "26") (term "0") (ifseqformula "10"))
         (rule "inEqSimp_sepNegMonomial0" (formula "8"))
         (rule "polySimp_mulLiterals" (formula "8") (term "0"))
         (rule "polySimp_elimOne" (formula "8") (term "0"))
         (rule "inEqSimp_sepPosMonomial0" (formula "5") (term "0,0,0"))
         (rule "polySimp_mulComm0" (formula "5") (term "1,0,0,0"))
         (rule "polySimp_rightDist" (formula "5") (term "1,0,0,0"))
         (rule "polySimp_mulLiterals" (formula "5") (term "1,1,0,0,0"))
         (rule "mul_literals" (formula "5") (term "0,1,0,0,0"))
         (rule "polySimp_elimOne" (formula "5") (term "1,1,0,0,0"))
         (rule "nnf_imp2or" (formula "5") (term "0"))
         (rule "nnf_notAnd" (formula "5") (term "0,0"))
         (rule "inEqSimp_notLeq" (formula "5") (term "0,0,0"))
         (rule "polySimp_rightDist" (formula "5") (term "1,0,0,0,0,0"))
         (rule "mul_literals" (formula "5") (term "0,1,0,0,0,0,0"))
         (rule "polySimp_addAssoc" (formula "5") (term "0,0,0,0,0"))
         (rule "add_literals" (formula "5") (term "0,0,0,0,0,0"))
         (rule "add_zero_left" (formula "5") (term "0,0,0,0,0"))
         (rule "inEqSimp_sepPosMonomial1" (formula "5") (term "0,0,0"))
         (rule "polySimp_mulLiterals" (formula "5") (term "1,0,0,0"))
         (rule "polySimp_elimOne" (formula "5") (term "1,0,0,0"))
         (rule "inEqSimp_notGeq" (formula "5") (term "1,0,0"))
         (rule "mul_literals" (formula "5") (term "1,0,0,1,0,0"))
         (rule "add_zero_right" (formula "5") (term "0,0,1,0,0"))
         (rule "inEqSimp_sepPosMonomial0" (formula "5") (term "1,0,0"))
         (rule "mul_literals" (formula "5") (term "1,1,0,0"))
         (rule "Class_invariant_axiom_for_java_util_LinkedList" (formula "29"))
         (rule "closeTrue" (formula "29"))
      )
      (branch "Null reference (_cols_5 = null)"
          (builtin "One Step Simplification" (formula "29") (ifInst ""  (formula "27")))
         (rule "closeTrue" (formula "29"))
      )
   )
   (branch "if x false"
       (builtin "One Step Simplification" (formula "30"))
       (builtin "One Step Simplification" (formula "1"))
      (rule "closeFalse" (formula "1"))
   )
)
(branch "Exceptional Post (ArrayList)"
    (builtin "One Step Simplification" (formula "21"))
    (builtin "One Step Simplification" (formula "11"))
   (rule "andLeft" (formula "11"))
   (rule "selectCreatedOfAnonAsFormulaEQ" (formula "12") (term "1,0,0") (ifseqformula "11"))
   (rule "selectCreatedOfAnonAsFormulaEQ" (formula "12") (term "1,1,0,1,0") (ifseqformula "11"))
   (rule "andLeft" (formula "12"))
   (rule "andLeft" (formula "12"))
   (rule "andLeft" (formula "14"))
   (rule "andLeft" (formula "12"))
   (rule "andLeft" (formula "14"))
   (rule "andLeft" (formula "16"))
   (rule "notLeft" (formula "12"))
   (rule "close" (formula "18") (ifseqformula "17"))
)
(branch "Pre (ArrayList)"
    (builtin "One Step Simplification" (formula "19") (ifInst ""  (formula "1")))
   (rule "closeTrue" (formula "19"))
)
)
}
