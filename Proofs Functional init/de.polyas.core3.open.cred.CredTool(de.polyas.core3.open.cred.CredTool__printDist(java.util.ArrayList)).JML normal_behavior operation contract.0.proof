\profile "Java Profile";

\settings {
"#Proof-Settings-Config-File
#Sun Nov 10 02:16:29 CET 2019
[Labels]UseOriginLabels=false
[StrategyProperty]QUERYAXIOM_OPTIONS_KEY=QUERYAXIOM_ON
[SMTSettings]invariantForall=false
[Strategy]ActiveStrategy=JavaCardDLStrategy
[StrategyProperty]USER_TACLETS_OPTIONS_KEY1=USER_TACLETS_OFF
[StrategyProperty]QUANTIFIERS_OPTIONS_KEY=QUANTIFIERS_NON_SPLITTING_WITH_PROGS
[StrategyProperty]USER_TACLETS_OPTIONS_KEY2=USER_TACLETS_OFF
[Choice]DefaultChoices=methodExpansion-methodExpansion\\:modularOnly , mergeGenerateIsWeakeningGoal-mergeGenerateIsWeakeningGoal\\:off , wdChecks-wdChecks\\:off , wdOperator-wdOperator\\:L , permissions-permissions\\:off , integerSimplificationRules-integerSimplificationRules\\:full , reach-reach\\:on , moreSeqRules-moreSeqRules\\:on , sequences-sequences\\:on , bigint-bigint\\:on , modelFields-modelFields\\:treatAsAxiom , Strings-Strings\\:on , JavaCard-JavaCard\\:off , runtimeExceptions-runtimeExceptions\\:allow , programRules-programRules\\:Java , intRules-intRules\\:javaSemantics , initialisation-initialisation\\:disableStaticInitialisation , assertions-assertions\\:on
[StrategyProperty]LOOP_OPTIONS_KEY=LOOP_INVARIANT
[StrategyProperty]INF_FLOW_CHECK_PROPERTY=INF_FLOW_CHECK_FALSE
[SMTSettings]UseBuiltUniqueness=false
[SMTSettings]explicitTypeHierarchy=false
[SMTSettings]instantiateHierarchyAssumptions=true
[StrategyProperty]NON_LIN_ARITH_OPTIONS_KEY=NON_LIN_ARITH_DEF_OPS
[SMTSettings]SelectedTaclets=
[StrategyProperty]DEP_OPTIONS_KEY=DEP_ON
[StrategyProperty]AUTO_INDUCTION_OPTIONS_KEY=AUTO_INDUCTION_OFF
[Strategy]MaximumNumberOfAutomaticApplications=10000
[StrategyProperty]STOPMODE_OPTIONS_KEY=STOPMODE_DEFAULT
[StrategyProperty]CLASS_AXIOM_OPTIONS_KEY=CLASS_AXIOM_FREE
[SMTSettings]useConstantsForBigOrSmallIntegers=true
[StrategyProperty]MPS_OPTIONS_KEY=MPS_MERGE
[StrategyProperty]SYMBOLIC_EXECUTION_NON_EXECUTION_BRANCH_HIDING_OPTIONS_KEY=SYMBOLIC_EXECUTION_NON_EXECUTION_BRANCH_HIDING_OFF
[Strategy]Timeout=-1
[StrategyProperty]SYMBOLIC_EXECUTION_ALIAS_CHECK_OPTIONS_KEY=SYMBOLIC_EXECUTION_ALIAS_CHECK_NEVER
[StrategyProperty]QUERY_NEW_OPTIONS_KEY=QUERY_OFF
[SMTSettings]useUninterpretedMultiplication=true
[StrategyProperty]BLOCK_OPTIONS_KEY=BLOCK_CONTRACT_INTERNAL
[StrategyProperty]METHOD_OPTIONS_KEY=METHOD_CONTRACT
[StrategyProperty]USER_TACLETS_OPTIONS_KEY3=USER_TACLETS_OFF
[SMTSettings]maxGenericSorts=2
[StrategyProperty]OSS_OPTIONS_KEY=OSS_ON
[StrategyProperty]SPLITTING_OPTIONS_KEY=SPLITTING_DELAYED
[SMTSettings]integersMinimum=-2147483645
[StrategyProperty]VBT_PHASE=VBT_SYM_EX
[SMTSettings]integersMaximum=2147483645
"
}

\javaSource "../src";

\proofObligation "#Proof Obligation Settings
#Sun Nov 10 02:16:29 CET 2019
contract=de.polyas.core3.open.cred.CredTool[de.polyas.core3.open.cred.CredTool\\:\\:printDist(java.util.ArrayList)].JML normal_behavior operation contract.0
name=de.polyas.core3.open.cred.CredTool[de.polyas.core3.open.cred.CredTool\\:\\:printDist(java.util.ArrayList)].JML normal_behavior operation contract.0
class=de.uka.ilkd.key.proof.init.FunctionalOperationContractPO
";

\proof {
(keyLog "0" (keyUser "flo" ) (keyVersion "57d504cc0f"))

(autoModeTime "12997")

(branch "dummy ID"
(rule "impRight" (formula "1") (newnames "cols_4,result_249,exc_284,heapAtPre_0,o,f"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "3"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "5"))
(rule "andLeft" (formula "6"))
(rule "andLeft" (formula "7"))
(rule "notLeft" (formula "8"))
(rule "eqSymm" (formula "9") (term "1,0,0,1,0,1"))
(rule "replace_known_right" (formula "2") (term "0") (ifseqformula "8"))
 (builtin "One Step Simplification" (formula "2"))
(rule "castedGetAny" (formula "5") (term "0,0,1,0"))
(rule "inEqSimp_commuteLeq" (formula "5") (term "0,0,0"))
(rule "assignment" (formula "9") (term "1"))
 (builtin "One Step Simplification" (formula "9"))
(rule "Class_invariant_axiom_for_java_util_ArrayList" (formula "4"))
(rule "true_left" (formula "4"))
(rule "Static_class_invariant_axiom_for_org_apache_commons_csv_CSVFormat" (formula "5"))
(rule "notLeft" (formula "5"))
(rule "Static_class_invariant_axiom_for_de_polyas_core3_open_cred_CredTool" (formula "5"))
 (builtin "One Step Simplification" (formula "5"))
(rule "insert_constant_string_value" (formula "5") (term "0,0,1,0,0") (ifseqformula "1"))
 (builtin "One Step Simplification" (formula "5"))
(rule "insert_constant_string_value" (formula "5") (term "0,0,1,0,0,0") (ifseqformula "1"))
 (builtin "One Step Simplification" (formula "5"))
(rule "insert_constant_string_value" (formula "5") (term "0,0,1,0,0,0,0") (ifseqformula "1"))
 (builtin "One Step Simplification" (formula "5"))
(rule "castDel" (formula "5") (term "0,0,0,1,0,0,0"))
(rule "castDel" (formula "5") (term "0,0,0,1,0,0,0,0"))
(rule "castDel" (formula "5") (term "0,0,0,1,0,0"))
(rule "andLeft" (formula "5"))
(rule "andLeft" (formula "5"))
(rule "notLeft" (formula "6"))
(rule "andLeft" (formula "5"))
(rule "notLeft" (formula "6"))
(rule "andLeft" (formula "5"))
(rule "notLeft" (formula "6"))
(rule "andLeft" (formula "5"))
(rule "andLeft" (formula "5"))
(rule "notLeft" (formula "7"))
(rule "andLeft" (formula "5"))
(rule "notLeft" (formula "7"))
(rule "notLeft" (formula "6"))
(rule "notLeft" (formula "5"))
(rule "applyEq" (formula "12") (term "0") (ifseqformula "5"))
(rule "commute_and" (formula "4") (term "0,0"))
(rule "methodBodyExpand" (formula "15") (term "1") (newnames "heapBefore_printDist,savedHeapBefore_printDist"))
 (builtin "One Step Simplification" (formula "15"))
(rule "returnUnfold" (formula "15") (term "1") (inst "#v0=c"))
(rule "variableDeclarationAssign" (formula "15") (term "1"))
(rule "variableDeclaration" (formula "15") (term "1") (newnames "c_4"))
(rule "methodCallWithAssignmentUnfoldArguments" (formula "15") (term "1"))
(rule "variableDeclarationAssign" (formula "15") (term "1"))
(rule "variableDeclaration" (formula "15") (term "1") (newnames "var"))
(rule "methodCallWithAssignmentUnfoldTarget" (formula "15") (term "1") (inst "#v0=c_5"))
(rule "variableDeclaration" (formula "15") (term "1") (newnames "c_5"))
(rule "methodCallWithAssignmentUnfoldTarget" (formula "15") (term "1") (inst "#v0=c_6"))
(rule "variableDeclaration" (formula "15") (term "1") (newnames "c_6"))
(rule "activeUseStaticFieldReadAccess" (formula "15") (term "1"))
(rule "assignment_read_static_attribute" (formula "15") (term "1"))
 (builtin "One Step Simplification" (formula "15"))
 (builtin "Use Operation Contract" (formula "15") (newnames "heapBefore_withDelimiter,result_250,exc_285,heapAfter_withDelimiter,anon_heap_withDelimiter") (contract "org.apache.commons.csv.CSVFormat[org.apache.commons.csv.CSVFormat::withDelimiter(char)].JML normal_behavior operation contract.0"))
(branch "Post (withDelimiter)"
    (builtin "One Step Simplification" (formula "7"))
    (builtin "One Step Simplification" (formula "17"))
   (rule "andLeft" (formula "7"))
   (rule "selectCreatedOfAnonAsFormulaEQ" (formula "8") (term "1,1,0") (ifseqformula "7"))
   (rule "andLeft" (formula "8"))
   (rule "andLeft" (formula "8"))
   (rule "andLeft" (formula "10"))
   (rule "andLeft" (formula "10"))
   (rule "notLeft" (formula "11"))
   (rule "replace_known_right" (formula "9") (term "0") (ifseqformula "11"))
    (builtin "One Step Simplification" (formula "9"))
   (rule "assignment" (formula "21") (term "1"))
    (builtin "One Step Simplification" (formula "21"))
   (rule "Class_invariant_axiom_for_org_apache_commons_csv_CSVFormat" (formula "10"))
   (rule "notLeft" (formula "10"))
   (rule "pullOutSelect" (formula "10") (term "0") (inst "selectSK=org_apache_commons_csv_CSVFormat_RFC4180_0"))
   (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "8"))
    (builtin "One Step Simplification" (formula "1"))
   (rule "applyEqReverse" (formula "11") (term "0") (ifseqformula "1"))
   (rule "hideAuxiliaryEq" (formula "1"))
   (rule "methodCallWithAssignmentUnfoldArguments" (formula "20") (term "1"))
   (rule "variableDeclarationAssign" (formula "20") (term "1"))
   (rule "variableDeclaration" (formula "20") (term "1") (newnames "var_1"))
   (rule "assignment" (formula "20") (term "1"))
    (builtin "One Step Simplification" (formula "20"))
   (rule "variableDeclarationAssign" (formula "20") (term "1"))
   (rule "variableDeclaration" (formula "20") (term "1") (newnames "var_2"))
   (rule "methodCallWithAssignmentUnfoldArguments" (formula "20") (term "1"))
   (rule "variableDeclarationAssign" (formula "20") (term "1"))
   (rule "variableDeclaration" (formula "20") (term "1") (newnames "var_3"))
   (rule "methodCallWithAssignmentUnfoldArguments" (formula "20") (term "1"))
   (rule "variableDeclarationAssign" (formula "20") (term "1"))
   (rule "variableDeclaration" (formula "20") (term "1") (newnames "var_4"))
   (rule "stringAssignment" (formula "20") (term "1"))
    (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "16")))
    (builtin "One Step Simplification" (formula "22"))
    (builtin "One Step Simplification" (formula "2"))
   (rule "true_left" (formula "1"))
   (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (ifseqformula "8"))
   (rule "variableDeclarationAssign" (formula "21") (term "1"))
   (rule "variableDeclaration" (formula "21") (term "1") (newnames "var_5"))
   (rule "assignment" (formula "21") (term "1"))
    (builtin "One Step Simplification" (formula "21"))
    (builtin "Use Operation Contract" (formula "21") (newnames "heapBefore_toList,result_251,exc_286,heapAfter_toList,anon_heap_toList") (contract "de.polyas.core3.open.cred.CredTool[de.polyas.core3.open.cred.CredTool::toList(java.lang.String,java.util.ArrayList)].JML normal_behavior operation contract.0"))
   (branch "Post (toList)"
       (builtin "One Step Simplification" (formula "12"))
       (builtin "One Step Simplification" (formula "23"))
      (rule "andLeft" (formula "12"))
      (rule "selectCreatedOfAnonAsFormulaEQ" (formula "13") (term "1,1,0") (ifseqformula "12"))
      (rule "selectCreatedOfAnonAsFormulaEQ" (formula "13") (term "0,1,1,0") (ifseqformula "8"))
      (rule "andLeft" (formula "13"))
      (rule "andLeft" (formula "14"))
      (rule "andLeft" (formula "13"))
      (rule "andLeft" (formula "14"))
      (rule "andLeft" (formula "15"))
      (rule "andLeft" (formula "16"))
      (rule "andLeft" (formula "17"))
      (rule "notLeft" (formula "18"))
      (rule "replace_known_right" (formula "13") (term "0") (ifseqformula "19"))
       (builtin "One Step Simplification" (formula "13"))
      (rule "castedGetAny" (formula "15") (term "0,0,1,0"))
      (rule "inEqSimp_commuteLeq" (formula "15") (term "0,0,0"))
      (rule "assignment" (formula "30") (term "1"))
       (builtin "One Step Simplification" (formula "30"))
      (rule "blockEmpty" (formula "30") (term "1"))
      (rule "pullOutSelect" (formula "15") (term "0,1,1,0,0") (inst "selectSK=java_util_Collection_seq_0"))
      (rule "applyEq" (formula "16") (term "0,0,0,1,0") (ifseqformula "15"))
      (rule "simplifySelectOfAnonEQ" (formula "15") (ifseqformula "12"))
       (builtin "One Step Simplification" (formula "15") (ifInst ""  (formula "20")))
      (rule "selectCreatedOfAnonAsFormulaEQ" (formula "15") (term "0,0,0") (ifseqformula "8"))
      (rule "ifthenelse_negated" (formula "15") (term "0"))
      (rule "pullOutSelect" (formula "15") (term "1,0") (inst "selectSK=java_util_Collection_seq_1"))
      (rule "simplifySelectOfAnonEQ" (formula "15") (ifseqformula "8"))
       (builtin "One Step Simplification" (formula "15") (ifInst ""  (formula "21")))
      (rule "ifthenelse_negated" (formula "15") (term "0"))
      (rule "Class_invariant_axiom_for_java_util_ArrayList" (formula "14"))
      (rule "true_left" (formula "14"))
      (rule "Static_class_invariant_axiom_for_org_apache_commons_csv_CSVFormat" (formula "17"))
      (rule "notLeft" (formula "17"))
      (rule "pullOutSelect" (formula "19") (term "0") (inst "selectSK=org_apache_commons_csv_CSVFormat_RFC4180_1"))
      (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "13"))
       (builtin "One Step Simplification" (formula "1"))
      (rule "replaceKnownSelect_taclet0_0" (formula "1") (term "0"))
      (rule "replaceKnownAuxiliaryConstant_taclet0_1" (formula "1") (term "0"))
      (rule "applyEqReverse" (formula "20") (term "0") (ifseqformula "1"))
      (rule "hideAuxiliaryEq" (formula "1"))
      (rule "Static_class_invariant_axiom_for_de_polyas_core3_open_cred_CredTool" (formula "17"))
       (builtin "One Step Simplification" (formula "17"))
      (rule "insert_constant_string_value" (formula "17") (term "0,0,1,0,0") (ifseqformula "2"))
       (builtin "One Step Simplification" (formula "17"))
      (rule "insert_constant_string_value" (formula "17") (term "0,0,1,0,0,0") (ifseqformula "2"))
       (builtin "One Step Simplification" (formula "17"))
      (rule "insert_constant_string_value" (formula "17") (term "0,0,1,0,0,0,0") (ifseqformula "2"))
       (builtin "One Step Simplification" (formula "17"))
      (rule "castDel" (formula "17") (term "0,0,0,1,0,0,0,0"))
      (rule "castDel" (formula "17") (term "0,0,0,1,0,0"))
      (rule "castDel" (formula "17") (term "0,0,0,1,0,0,0"))
      (rule "andLeft" (formula "17"))
      (rule "andLeft" (formula "17"))
      (rule "andLeft" (formula "17"))
      (rule "notLeft" (formula "19"))
      (rule "notLeft" (formula "18"))
      (rule "andLeft" (formula "17"))
      (rule "notLeft" (formula "18"))
      (rule "andLeft" (formula "17"))
      (rule "andLeft" (formula "17"))
      (rule "notLeft" (formula "19"))
      (rule "andLeft" (formula "17"))
      (rule "notLeft" (formula "19"))
      (rule "notLeft" (formula "17"))
      (rule "notLeft" (formula "17"))
      (rule "applyEqRigid" (formula "22") (term "0") (ifseqformula "17"))
      (rule "pullOutSelect" (formula "17") (term "0") (inst "selectSK=de_polyas_core3_open_cred_CredTool_polyasMode_0"))
      (rule "simplifySelectOfAnonEQ" (formula "17") (ifseqformula "12"))
       (builtin "One Step Simplification" (formula "17"))
      (rule "simplifySelectOfAnonEQ" (formula "17") (ifseqformula "8"))
       (builtin "One Step Simplification" (formula "17"))
      (rule "applyEqReverse" (formula "18") (term "0") (ifseqformula "17"))
      (rule "hideAuxiliaryEq" (formula "17"))
      (rule "eqSymm" (formula "17"))
      (rule "applyEq" (formula "17") (term "1") (ifseqformula "6"))
      (rule "pullOutSelect" (formula "21") (term "0") (inst "selectSK=de_polyas_core3_open_cred_CredTool_print_0"))
      (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "13"))
       (builtin "One Step Simplification" (formula "1"))
      (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "9"))
       (builtin "One Step Simplification" (formula "1"))
      (rule "applyEqReverse" (formula "22") (term "0") (ifseqformula "1"))
      (rule "hideAuxiliaryEq" (formula "1"))
      (rule "pullOutSelect" (formula "20") (term "0") (inst "selectSK=de_polyas_core3_open_cred_CredTool_distVals_0"))
      (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "13"))
       (builtin "One Step Simplification" (formula "1"))
      (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "9"))
       (builtin "One Step Simplification" (formula "1"))
      (rule "applyEqReverse" (formula "21") (term "0") (ifseqformula "1"))
      (rule "hideAuxiliaryEq" (formula "1"))
      (rule "pullOutSelect" (formula "19") (term "0") (inst "selectSK=de_polyas_core3_open_cred_CredTool_polyasVals_0"))
      (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "13"))
       (builtin "One Step Simplification" (formula "1"))
      (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "9"))
       (builtin "One Step Simplification" (formula "1"))
      (rule "applyEqReverse" (formula "20") (term "0") (ifseqformula "1"))
      (rule "hideAuxiliaryEq" (formula "1"))
      (rule "pullOutSelect" (formula "19") (term "0") (inst "selectSK=de_polyas_core3_open_cred_CredTool_FieldsForPolyasMode_MIN_0"))
      (rule "applyEq" (formula "18") (term "0") (ifseqformula "1"))
      (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "13"))
       (builtin "One Step Simplification" (formula "1"))
      (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "9"))
       (builtin "One Step Simplification" (formula "1"))
      (rule "applyEqReverse" (formula "20") (term "0") (ifseqformula "1"))
      (rule "applyEqReverse" (formula "18") (term "0") (ifseqformula "1"))
       (builtin "One Step Simplification" (formula "18"))
      (rule "true_left" (formula "18"))
      (rule "hideAuxiliaryEq" (formula "1"))
      (rule "commute_or_2" (formula "13"))
      (rule "commute_and" (formula "16") (term "0,0"))
       (builtin "Use Operation Contract" (formula "29") (newnames "heapBefore_toArray,result_252,exc_287,heapAfter_toArray,anon_heap_toArray") (contract "de.polyas.core3.open.cred.CredTool[de.polyas.core3.open.cred.CredTool::toArray(java.util.ArrayList)].JML normal_behavior operation contract.0"))
      (branch "Post (toArray)"
          (builtin "One Step Simplification" (formula "19"))
          (builtin "One Step Simplification" (formula "31"))
         (rule "andLeft" (formula "19"))
         (rule "selectCreatedOfAnonAsFormulaEQ" (formula "20") (term "1,1,0") (ifseqformula "19"))
         (rule "selectCreatedOfAnonAsFormulaEQ" (formula "20") (term "0,1,1,0") (ifseqformula "12"))
         (rule "selectCreatedOfAnonAsFormulaEQ" (formula "20") (term "0,0,1,1,0") (ifseqformula "8"))
         (rule "andLeft" (formula "20"))
         (rule "andLeft" (formula "21"))
         (rule "andLeft" (formula "20"))
         (rule "andLeft" (formula "21"))
         (rule "andLeft" (formula "22"))
         (rule "andLeft" (formula "23"))
         (rule "assignment" (formula "36") (term "1"))
          (builtin "One Step Simplification" (formula "36"))
         (rule "blockEmpty" (formula "36") (term "1"))
         (rule "nonNull" (formula "21") (inst "i=i"))
         (rule "sub_literals" (formula "21") (term "2,1,0,1,1"))
          (builtin "One Step Simplification" (formula "21"))
         (rule "greater_literals" (formula "21") (term "0,1"))
          (builtin "One Step Simplification" (formula "21"))
         (rule "andLeft" (formula "21"))
         (rule "notLeft" (formula "21"))
         (rule "replace_known_right" (formula "20") (term "0") (ifseqformula "25"))
          (builtin "One Step Simplification" (formula "20"))
         (rule "inEqSimp_commuteLeq" (formula "21") (term "0,0,0"))
         (rule "Static_class_invariant_axiom_for_org_apache_commons_csv_CSVFormat" (formula "22"))
         (rule "notLeft" (formula "22"))
         (rule "pullOutSelect" (formula "24") (term "0") (inst "selectSK=org_apache_commons_csv_CSVFormat_RFC4180_2"))
         (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "20"))
          (builtin "One Step Simplification" (formula "1"))
         (rule "replaceKnownSelect_taclet00_4" (formula "1") (term "0"))
         (rule "replaceKnownAuxiliaryConstant_taclet00_5" (formula "1") (term "0"))
         (rule "applyEqReverse" (formula "25") (term "0") (ifseqformula "1"))
         (rule "hideAuxiliaryEq" (formula "1"))
         (rule "Static_class_invariant_axiom_for_de_polyas_core3_open_cred_CredTool" (formula "22"))
          (builtin "One Step Simplification" (formula "22"))
         (rule "insert_constant_string_value" (formula "22") (term "0,0,1,0,0") (ifseqformula "2"))
          (builtin "One Step Simplification" (formula "22"))
         (rule "insert_constant_string_value" (formula "22") (term "0,0,1,0,0,0") (ifseqformula "2"))
          (builtin "One Step Simplification" (formula "22"))
         (rule "insert_constant_string_value" (formula "22") (term "0,0,1,0,0,0,0") (ifseqformula "2"))
          (builtin "One Step Simplification" (formula "22"))
         (rule "castDel" (formula "22") (term "0,0,0,1,0,0"))
         (rule "castDel" (formula "22") (term "0,0,0,1,0,0,0"))
         (rule "castDel" (formula "22") (term "0,0,0,1,0,0,0,0"))
         (rule "andLeft" (formula "22"))
         (rule "andLeft" (formula "22"))
         (rule "andLeft" (formula "22"))
         (rule "notLeft" (formula "24"))
         (rule "andLeft" (formula "22"))
         (rule "notLeft" (formula "24"))
         (rule "andLeft" (formula "22"))
         (rule "notLeft" (formula "24"))
         (rule "andLeft" (formula "22"))
         (rule "notLeft" (formula "24"))
         (rule "andLeft" (formula "22"))
         (rule "notLeft" (formula "24"))
         (rule "notLeft" (formula "23"))
         (rule "notLeft" (formula "22"))
         (rule "applyEqRigid" (formula "27") (term "0") (ifseqformula "22"))
         (rule "pullOutSelect" (formula "22") (term "1") (inst "selectSK=de_polyas_core3_open_cred_CredTool_FieldsForPolyasMode_MIN_1"))
         (rule "applyEq" (formula "28") (term "0") (ifseqformula "22"))
         (rule "simplifySelectOfAnonEQ" (formula "23") (ifseqformula "19"))
          (builtin "One Step Simplification" (formula "23"))
         (rule "replaceKnownSelect_taclet00_6" (formula "23") (term "0"))
         (rule "replaceKnownAuxiliaryConstant_taclet00_8" (formula "23") (term "0"))
         (rule "simplifySelectOfAnonEQ" (formula "22") (ifseqformula "19"))
          (builtin "One Step Simplification" (formula "22"))
         (rule "replaceKnownSelect_taclet00_18" (formula "22") (term "0"))
         (rule "replaceKnownAuxiliaryConstant_taclet00_20" (formula "22") (term "0"))
         (rule "applyEqReverse" (formula "23") (term "1") (ifseqformula "22"))
         (rule "applyEqReverse" (formula "27") (term "0") (ifseqformula "22"))
         (rule "hideAuxiliaryEq" (formula "22"))
         (rule "pullOutSelect" (formula "25") (term "0") (inst "selectSK=de_polyas_core3_open_cred_CredTool_print_1"))
         (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "20"))
          (builtin "One Step Simplification" (formula "1"))
         (rule "replaceKnownSelect_taclet00_9" (formula "1") (term "0"))
         (rule "replaceKnownAuxiliaryConstant_taclet00_11" (formula "1") (term "0"))
         (rule "applyEqReverse" (formula "26") (term "0") (ifseqformula "1"))
         (rule "hideAuxiliaryEq" (formula "1"))
         (rule "pullOutSelect" (formula "24") (term "0") (inst "selectSK=de_polyas_core3_open_cred_CredTool_polyasVals_1"))
         (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "20"))
          (builtin "One Step Simplification" (formula "1"))
         (rule "replaceKnownSelect_taclet00_15" (formula "1") (term "0"))
         (rule "replaceKnownAuxiliaryConstant_taclet00_17" (formula "1") (term "0"))
         (rule "applyEqReverse" (formula "25") (term "0") (ifseqformula "1"))
         (rule "hideAuxiliaryEq" (formula "1"))
         (rule "pullOutSelect" (formula "23") (term "0") (inst "selectSK=de_polyas_core3_open_cred_CredTool_distVals_1"))
         (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "20"))
          (builtin "One Step Simplification" (formula "1"))
         (rule "replaceKnownSelect_taclet00_12" (formula "1") (term "0"))
         (rule "replaceKnownAuxiliaryConstant_taclet00_14" (formula "1") (term "0"))
         (rule "applyEqReverse" (formula "24") (term "0") (ifseqformula "1"))
         (rule "hideAuxiliaryEq" (formula "1"))
         (rule "commute_or_2" (formula "20"))
         (rule "commute_and" (formula "21") (term "0,0"))
         (rule "commute_or_2" (formula "20") (term "0"))
         (rule "commute_or_2" (formula "20"))
         (rule "lenNonNegative" (formula "5") (term "1,0,0,0"))
         (rule "inEqSimp_commuteLeq" (formula "5"))
          (builtin "Use Operation Contract" (formula "36") (newnames "heapBefore_withHeader,result_253,exc_288,heapAfter_withHeader,anon_heap_withHeader") (contract "org.apache.commons.csv.CSVFormat[org.apache.commons.csv.CSVFormat::withHeader([Ljava.lang.String)].JML normal_behavior operation contract.0"))
         (branch "Post (withHeader)"
             (builtin "One Step Simplification" (formula "38"))
             (builtin "One Step Simplification" (formula "25"))
            (rule "andLeft" (formula "25"))
            (rule "selectCreatedOfAnonAsFormulaEQ" (formula "26") (term "1,1,0") (ifseqformula "25"))
            (rule "selectCreatedOfAnonAsFormulaEQ" (formula "26") (term "0,1,1,0") (ifseqformula "20"))
            (rule "selectCreatedOfAnonAsFormulaEQ" (formula "26") (term "0,0,1,1,0") (ifseqformula "13"))
            (rule "selectCreatedOfAnonAsFormulaEQ" (formula "26") (term "0,0,0,1,1,0") (ifseqformula "9"))
            (rule "andLeft" (formula "26"))
            (rule "andLeft" (formula "27"))
            (rule "andLeft" (formula "26"))
            (rule "andLeft" (formula "27"))
            (rule "notLeft" (formula "28"))
            (rule "replace_known_right" (formula "26") (term "0") (ifseqformula "29"))
             (builtin "One Step Simplification" (formula "26"))
            (rule "assignment" (formula "42") (term "1"))
             (builtin "One Step Simplification" (formula "42"))
            (rule "blockEmpty" (formula "42") (term "1"))
            (rule "Class_invariant_axiom_for_org_apache_commons_csv_CSVFormat" (formula "27"))
            (rule "notLeft" (formula "27"))
            (rule "pullOutSelect" (formula "28") (term "0") (inst "selectSK=org_apache_commons_csv_CSVFormat_RFC4180_3"))
            (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "26"))
             (builtin "One Step Simplification" (formula "1"))
            (rule "replaceKnownSelect_taclet000_21" (formula "1") (term "0"))
            (rule "replaceKnownAuxiliaryConstant_taclet000_22" (formula "1") (term "0"))
            (rule "applyEqReverse" (formula "29") (term "0") (ifseqformula "1"))
            (rule "hideAuxiliaryEq" (formula "1"))
            (rule "commute_or_2" (formula "26") (term "0"))
            (rule "commute_or_2" (formula "26") (term "0,0"))
            (rule "commute_or_2" (formula "26") (term "0"))
            (rule "equalityToSeqGetAndSeqLenLeft" (formula "16") (inst "iv=iv"))
            (rule "andLeft" (formula "16"))
            (rule "inEqSimp_commuteLeq" (formula "17") (term "0,0,0"))
            (rule "applyEq" (formula "17") (term "0,0,1,0") (ifseqformula "18"))
             (builtin "One Step Simplification" (formula "17"))
            (rule "true_left" (formula "17"))
            (rule "applyEq" (formula "16") (term "0,0") (ifseqformula "17"))
             (builtin "One Step Simplification" (formula "16"))
            (rule "true_left" (formula "16"))
            (rule "equalityToSeqGetAndSeqLenLeft" (formula "15") (inst "iv=iv"))
            (rule "andLeft" (formula "15"))
            (rule "inEqSimp_commuteLeq" (formula "16") (term "0,0,0"))
            (rule "applyEq" (formula "16") (term "0,1,1,0,0") (ifseqformula "17"))
            (rule "applyEq" (formula "15") (term "0,0") (ifseqformula "17"))
             (builtin "One Step Simplification" (formula "15"))
            (rule "true_left" (formula "15"))
            (rule "applyEq" (formula "15") (term "0,0,1,0") (ifseqformula "16"))
             (builtin "One Step Simplification" (formula "15"))
            (rule "true_left" (formula "15"))
            (rule "lenNonNegative" (formula "17") (term "1,0,0,0"))
            (rule "inEqSimp_commuteLeq" (formula "17"))
            (rule "arrayLengthIsAnInt" (formula "23") (term "1,0,0,0"))
            (rule "expand_inInt" (formula "23"))
            (rule "replace_int_MIN" (formula "23") (term "0,1"))
            (rule "replace_int_MAX" (formula "23") (term "1,0"))
            (rule "andLeft" (formula "23"))
            (rule "inEqSimp_commuteLeq" (formula "24"))
            (rule "arrayLengthNotNegative" (formula "25") (term "1,0,0,0"))
            (rule "onlyCreatedObjectsAreReferenced" (formula "42") (term "0") (ifseqformula "2"))
            (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "43"))
             (builtin "One Step Simplification" (formula "1"))
            (rule "onlyCreatedObjectsAreReferenced" (formula "37") (term "0") (ifseqformula "3"))
            (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "38"))
             (builtin "One Step Simplification" (formula "1"))
            (rule "onlyCreatedObjectsAreReferenced" (formula "39") (term "0") (ifseqformula "4"))
            (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "40"))
             (builtin "One Step Simplification" (formula "1"))
            (rule "onlyCreatedObjectsAreReferenced" (formula "41") (term "0") (ifseqformula "5"))
            (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "42"))
             (builtin "One Step Simplification" (formula "1"))
            (rule "onlyCreatedObjectsAreReferenced" (formula "47") (term "0") (ifseqformula "6"))
            (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "48"))
             (builtin "One Step Simplification" (formula "1"))
            (rule "onlyCreatedObjectsAreReferenced" (formula "12") (term "0") (ifseqformula "7"))
            (rule "applyEq" (formula "12") (term "0,0") (ifseqformula "13"))
            (rule "replace_known_right" (formula "12") (term "0") (ifseqformula "48"))
             (builtin "One Step Simplification" (formula "12"))
            (rule "applyEq" (formula "12") (term "1,0") (ifseqformula "13"))
            (rule "methodCallWithAssignmentWithinClass" (formula "50") (term "1") (inst "#v0=c_5"))
            (rule "variableDeclaration" (formula "50") (term "1") (newnames "c_7"))
            (rule "variableDeclarationFinalAssign" (formula "50") (term "1"))
            (rule "variableDeclarationFinal" (formula "50") (term "1") (newnames "csv"))
            (rule "assignment" (formula "50") (term "1"))
             (builtin "One Step Simplification" (formula "50"))
            (rule "methodBodyExpand" (formula "50") (term "1") (newnames "heapBefore_print,savedHeapBefore_print"))
             (builtin "One Step Simplification" (formula "50"))
            (rule "returnUnfold" (formula "50") (term "1") (inst "#v0=c_8"))
            (rule "variableDeclarationAssign" (formula "50") (term "1"))
            (rule "variableDeclaration" (formula "50") (term "1") (newnames "c_8"))
            (rule "methodCallWithAssignmentUnfoldArguments" (formula "50") (term "1"))
            (rule "variableDeclarationAssign" (formula "50") (term "1"))
            (rule "variableDeclaration" (formula "50") (term "1") (newnames "var_6"))
            (rule "assignment" (formula "50") (term "1"))
             (builtin "One Step Simplification" (formula "50"))
            (rule "variableDeclarationAssign" (formula "50") (term "1"))
            (rule "variableDeclaration" (formula "50") (term "1") (newnames "var_7"))
            (rule "instanceCreationAssignment" (formula "50") (term "1") (inst "#v0=s"))
            (rule "variableDeclarationAssign" (formula "50") (term "1"))
            (rule "variableDeclaration" (formula "50") (term "1") (newnames "s"))
            (rule "staticMethodCallStaticWithAssignmentViaTypereference" (formula "50") (term "1") (inst "#v0=s_1"))
            (rule "variableDeclaration" (formula "50") (term "1") (newnames "s_1"))
            (rule "methodBodyExpand" (formula "50") (term "1") (newnames "heapBefore_<createObject>,savedHeapBefore_<createObject>"))
             (builtin "One Step Simplification" (formula "50"))
            (rule "variableDeclaration" (formula "50") (term "1") (newnames "__NEW__"))
            (rule "staticMethodCallStaticWithAssignmentViaTypereference" (formula "50") (term "1") (inst "#v0=s_2"))
            (rule "variableDeclaration" (formula "50") (term "1") (newnames "s_2"))
            (rule "allocateInstance" (formula "50"))
             (builtin "One Step Simplification" (formula "51"))
             (builtin "One Step Simplification" (formula "1"))
            (rule "wellFormedAnonEQ" (formula "1") (term "0,1,0") (ifseqformula "35"))
            (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,1,1,0") (ifseqformula "35"))
            (rule "wellFormedAnonEQ" (formula "1") (term "0,0,1,0") (ifseqformula "27"))
            (rule "wellFormedAnonEQ" (formula "1") (term "0,0,0,1,0") (ifseqformula "19"))
            (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,0,1,1,0") (ifseqformula "27"))
            (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,0,0,1,1,0") (ifseqformula "19"))
            (rule "wellFormedAnonEQ" (formula "1") (term "0,0,0,0,1,0") (ifseqformula "15"))
            (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,0,0,0,1,1,0") (ifseqformula "15"))
            (rule "andLeft" (formula "1"))
            (rule "andLeft" (formula "1"))
            (rule "notLeft" (formula "1"))
            (rule "replace_known_left" (formula "1") (term "1,0,0") (ifseqformula "27"))
             (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "9")) (ifInst ""  (formula "15")) (ifInst ""  (formula "19")) (ifInst ""  (formula "35")))
            (rule "notLeft" (formula "1"))
            (rule "orRight" (formula "38"))
            (rule "orRight" (formula "38"))
            (rule "orRight" (formula "38"))
            (rule "orRight" (formula "38"))
            (rule "blockEmpty" (formula "57") (term "1"))
            (rule "assignment" (formula "57") (term "1"))
             (builtin "One Step Simplification" (formula "57"))
            (rule "methodBodyExpand" (formula "57") (term "1") (newnames "heapBefore_<create>,savedHeapBefore_<create>"))
             (builtin "One Step Simplification" (formula "57"))
            (rule "assignment_write_attribute_this" (formula "57") (term "1"))
             (builtin "One Step Simplification" (formula "57"))
            (rule "methodCallWithinClass" (formula "57") (term "1"))
            (rule "methodBodyExpand" (formula "57") (term "1") (newnames "heapBefore_<prepareEnter>,savedHeapBefore_<prepareEnter>"))
             (builtin "One Step Simplification" (formula "57"))
            (rule "methodCallSuper" (formula "57") (term "1"))
            (rule "methodBodyExpand" (formula "57") (term "1") (newnames "heapBefore_<prepare>,savedHeapBefore_<prepare>"))
             (builtin "One Step Simplification" (formula "57"))
            (rule "methodCallEmpty" (formula "57") (term "1"))
            (rule "methodCallEmpty" (formula "57") (term "1"))
            (rule "blockEmpty" (formula "57") (term "1"))
            (rule "methodCallReturnIgnoreResult" (formula "57") (term "1"))
            (rule "methodCallReturn" (formula "57") (term "1"))
            (rule "assignment" (formula "57") (term "1"))
             (builtin "One Step Simplification" (formula "57"))
            (rule "methodCallEmpty" (formula "57") (term "1"))
            (rule "blockEmpty" (formula "57") (term "1"))
            (rule "assignment" (formula "57") (term "1"))
             (builtin "One Step Simplification" (formula "57"))
            (rule "methodBodyExpand" (formula "57") (term "1") (newnames "heapBefore_<init>,savedHeapBefore_<init>"))
             (builtin "One Step Simplification" (formula "57"))
            (rule "methodCallSuper" (formula "57") (term "1"))
            (rule "methodBodyExpand" (formula "57") (term "1") (newnames "heapBefore_<init>_0,savedHeapBefore_<init>_0"))
             (builtin "One Step Simplification" (formula "57"))
            (rule "methodCallEmpty" (formula "57") (term "1"))
            (rule "methodCallEmpty" (formula "57") (term "1"))
            (rule "blockEmpty" (formula "57") (term "1"))
            (rule "assignment_write_attribute" (formula "57") (term "1"))
            (branch "Normal Execution (s != null)"
                (builtin "One Step Simplification" (formula "58"))
                (builtin "One Step Simplification" (formula "57") (ifInst ""  (formula "43")))
               (rule "false_right" (formula "57"))
               (rule "assignment" (formula "57") (term "1"))
                (builtin "One Step Simplification" (formula "57"))
                (builtin "Use Operation Contract" (formula "57") (newnames "heapBefore_print_0,result_254,exc_289,heapAfter_print,anon_heap_print") (contract "org.apache.commons.csv.CSVFormat[org.apache.commons.csv.CSVFormat::print(java.lang.Appendable)].JML normal_behavior operation contract.0"))
               (branch "Post (print)"
                   (builtin "One Step Simplification" (formula "39"))
                   (builtin "One Step Simplification" (formula "59"))
                  (rule "andLeft" (formula "39"))
                  (rule "selectCreatedOfAnonAsFormulaEQ" (formula "40") (term "1,1,0") (ifseqformula "39"))
                  (rule "andLeft" (formula "40"))
                  (rule "andLeft" (formula "41"))
                  (rule "andLeft" (formula "40"))
                  (rule "andLeft" (formula "41"))
                  (rule "notLeft" (formula "42"))
                  (rule "replace_known_right" (formula "40") (term "0") (ifseqformula "43"))
                   (builtin "One Step Simplification" (formula "40"))
                  (rule "dismissNonSelectedField" (formula "40") (term "0,0"))
                  (rule "assignment" (formula "63") (term "1"))
                   (builtin "One Step Simplification" (formula "63"))
                  (rule "blockEmpty" (formula "63") (term "1"))
                  (rule "pullOutSelect" (formula "40") (term "0,0") (inst "selectSK=java_lang_Object_created__0"))
                  (rule "simplifySelectOfCreate" (formula "40"))
                   (builtin "One Step Simplification" (formula "40") (ifInst ""  (formula "50")))
                  (rule "castDel" (formula "40") (term "1,0"))
                  (rule "sortsDisjointModuloNull" (formula "40") (term "0,0"))
                  (rule "replace_known_right" (formula "40") (term "1,0,0") (ifseqformula "44"))
                   (builtin "One Step Simplification" (formula "40") (ifInst ""  (formula "50")))
                  (rule "simplifySelectOfAnonEQ" (formula "40") (ifseqformula "35"))
                   (builtin "One Step Simplification" (formula "40") (ifInst ""  (formula "44")))
                  (rule "selectCreatedOfAnonAsFormulaEQ" (formula "40") (term "0,0,0") (ifseqformula "27"))
                  (rule "selectCreatedOfAnonAsFormulaEQ" (formula "40") (term "0,0,0,0") (ifseqformula "19"))
                  (rule "selectCreatedOfAnonAsFormulaEQ" (formula "40") (term "0,0,0,0,0") (ifseqformula "15"))
                  (rule "ifthenelse_negated" (formula "40") (term "0"))
                  (rule "pullOutSelect" (formula "40") (term "1,0") (inst "selectSK=java_lang_Object_created__1"))
                  (rule "simplifySelectOfAnonEQ" (formula "40") (ifseqformula "27"))
                   (builtin "One Step Simplification" (formula "40") (ifInst ""  (formula "45")))
                  (rule "selectCreatedOfAnonAsFormulaEQ" (formula "40") (term "0,0,0") (ifseqformula "19"))
                  (rule "selectCreatedOfAnonAsFormulaEQ" (formula "40") (term "0,0,0,0") (ifseqformula "15"))
                  (rule "ifthenelse_negated" (formula "40") (term "0"))
                  (rule "pullOutSelect" (formula "40") (term "1,0") (inst "selectSK=java_lang_Object_created__2"))
                  (rule "simplifySelectOfAnonEQ" (formula "40") (ifseqformula "19"))
                   (builtin "One Step Simplification" (formula "40") (ifInst ""  (formula "46")))
                  (rule "selectCreatedOfAnonAsFormulaEQ" (formula "40") (term "0,0,0") (ifseqformula "15"))
                  (rule "ifthenelse_negated" (formula "40") (term "0"))
                  (rule "pullOutSelect" (formula "40") (term "1,0") (inst "selectSK=java_lang_Object_created__3"))
                  (rule "simplifySelectOfAnonEQ" (formula "40") (ifseqformula "15"))
                   (builtin "One Step Simplification" (formula "40") (ifInst ""  (formula "47")))
                  (rule "ifthenelse_negated" (formula "40") (term "0"))
                  (rule "Class_invariant_axiom_for_org_apache_commons_csv_CSVFormat" (formula "45"))
                  (rule "notLeft" (formula "45"))
                  (rule "pullOutSelect" (formula "46") (term "0") (inst "selectSK=org_apache_commons_csv_CSVFormat_RFC4180_4"))
                  (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "40"))
                   (builtin "One Step Simplification" (formula "1"))
                  (rule "simplifySelectOfStore" (formula "1"))
                   (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "54")))
                  (rule "simplifySelectOfCreate" (formula "1"))
                   (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "54")) (ifInst ""  (formula "54")))
                  (rule "replaceKnownSelect_taclet0000_32" (formula "1") (term "0"))
                  (rule "replaceKnownAuxiliaryConstant_taclet0000_33" (formula "1") (term "0"))
                  (rule "applyEqReverse" (formula "47") (term "0") (ifseqformula "1"))
                  (rule "hideAuxiliaryEq" (formula "1"))
                  (rule "commute_or_2" (formula "43") (term "0,0"))
                  (rule "commute_or_2" (formula "42") (term "0,0"))
                  (rule "commute_or_2" (formula "43") (term "0,0,0"))
                  (rule "commute_or_2" (formula "43") (term "0,0"))
                  (rule "tryReturn" (formula "66") (term "1"))
                  (rule "methodCallReturn" (formula "66") (term "1"))
                  (rule "assignment" (formula "66") (term "1"))
                   (builtin "One Step Simplification" (formula "66"))
                  (rule "methodCallEmpty" (formula "66") (term "1"))
                  (rule "blockEmpty" (formula "66") (term "1"))
                  (rule "assignment" (formula "66") (term "1"))
                   (builtin "One Step Simplification" (formula "66"))
                  (rule "blockEmpty" (formula "66") (term "1"))
                  (rule "methodCallReturn" (formula "66") (term "1"))
                  (rule "assignment" (formula "66") (term "1"))
                   (builtin "One Step Simplification" (formula "66"))
                  (rule "methodCallEmpty" (formula "66") (term "1"))
                  (rule "tryEmpty" (formula "66") (term "1"))
                  (rule "emptyModality" (formula "66") (term "1"))
                  (rule "andRight" (formula "66"))
                  (branch
                     (rule "andRight" (formula "66"))
                     (branch
                        (rule "andRight" (formula "66"))
                        (branch
                            (builtin "One Step Simplification" (formula "66"))
                           (rule "inEqSimp_ltToLeq" (formula "12") (term "0,0,0"))
                           (rule "polySimp_mulComm0" (formula "12") (term "1,0,0,0,0,0"))
                           (rule "inEqSimp_ltToLeq" (formula "24") (term "0,0,0"))
                           (rule "polySimp_mulComm0" (formula "24") (term "1,0,0,0,0,0"))
                           (rule "inEqSimp_ltToLeq" (formula "32") (term "0,0,0"))
                           (rule "polySimp_mulComm0" (formula "32") (term "1,0,0,0,0,0"))
                           (rule "inEqSimp_sepPosMonomial0" (formula "12") (term "0,0,0"))
                           (rule "polySimp_mulComm0" (formula "12") (term "1,0,0,0"))
                           (rule "polySimp_rightDist" (formula "12") (term "1,0,0,0"))
                           (rule "polySimp_mulLiterals" (formula "12") (term "1,1,0,0,0"))
                           (rule "mul_literals" (formula "12") (term "0,1,0,0,0"))
                           (rule "polySimp_elimOne" (formula "12") (term "1,1,0,0,0"))
                           (rule "inEqSimp_sepPosMonomial0" (formula "24") (term "0,0,0"))
                           (rule "polySimp_mulComm0" (formula "24") (term "1,0,0,0"))
                           (rule "polySimp_rightDist" (formula "24") (term "1,0,0,0"))
                           (rule "mul_literals" (formula "24") (term "0,1,0,0,0"))
                           (rule "polySimp_mulLiterals" (formula "24") (term "1,1,0,0,0"))
                           (rule "polySimp_elimOne" (formula "24") (term "1,1,0,0,0"))
                           (rule "inEqSimp_sepPosMonomial0" (formula "32") (term "0,0,0"))
                           (rule "polySimp_mulComm0" (formula "32") (term "1,0,0,0"))
                           (rule "polySimp_rightDist" (formula "32") (term "1,0,0,0"))
                           (rule "mul_literals" (formula "32") (term "0,1,0,0,0"))
                           (rule "polySimp_mulLiterals" (formula "32") (term "1,1,0,0,0"))
                           (rule "polySimp_elimOne" (formula "32") (term "1,1,0,0,0"))
                           (rule "inEqSimp_subsumption1" (formula "30") (ifseqformula "31"))
                           (rule "leq_literals" (formula "30") (term "0"))
                            (builtin "One Step Simplification" (formula "30"))
                           (rule "true_left" (formula "30"))
                           (rule "nnf_imp2or" (formula "12") (term "0"))
                           (rule "nnf_imp2or" (formula "24") (term "0"))
                           (rule "nnf_imp2or" (formula "31") (term "0"))
                           (rule "nnf_notAnd" (formula "12") (term "0,0"))
                           (rule "inEqSimp_notLeq" (formula "12") (term "0,0,0"))
                           (rule "polySimp_rightDist" (formula "12") (term "1,0,0,0,0,0"))
                           (rule "mul_literals" (formula "12") (term "0,1,0,0,0,0,0"))
                           (rule "polySimp_addAssoc" (formula "12") (term "0,0,0,0,0"))
                           (rule "add_literals" (formula "12") (term "0,0,0,0,0,0"))
                           (rule "add_zero_left" (formula "12") (term "0,0,0,0,0"))
                           (rule "inEqSimp_sepPosMonomial1" (formula "12") (term "0,0,0"))
                           (rule "polySimp_mulLiterals" (formula "12") (term "1,0,0,0"))
                           (rule "polySimp_elimOne" (formula "12") (term "1,0,0,0"))
                           (rule "inEqSimp_notGeq" (formula "12") (term "1,0,0"))
                           (rule "mul_literals" (formula "12") (term "1,0,0,1,0,0"))
                           (rule "add_zero_right" (formula "12") (term "0,0,1,0,0"))
                           (rule "inEqSimp_sepPosMonomial0" (formula "12") (term "1,0,0"))
                           (rule "mul_literals" (formula "12") (term "1,1,0,0"))
                           (rule "nnf_notAnd" (formula "24") (term "0,0"))
                           (rule "inEqSimp_notGeq" (formula "24") (term "1,0,0"))
                           (rule "mul_literals" (formula "24") (term "1,0,0,1,0,0"))
                           (rule "add_zero_right" (formula "24") (term "0,0,1,0,0"))
                           (rule "inEqSimp_sepPosMonomial0" (formula "24") (term "1,0,0"))
                           (rule "mul_literals" (formula "24") (term "1,1,0,0"))
                           (rule "inEqSimp_notLeq" (formula "24") (term "0,0,0"))
                           (rule "polySimp_rightDist" (formula "24") (term "1,0,0,0,0,0"))
                           (rule "mul_literals" (formula "24") (term "0,1,0,0,0,0,0"))
                           (rule "polySimp_addAssoc" (formula "24") (term "0,0,0,0,0"))
                           (rule "add_literals" (formula "24") (term "0,0,0,0,0,0"))
                           (rule "add_zero_left" (formula "24") (term "0,0,0,0,0"))
                           (rule "inEqSimp_sepPosMonomial1" (formula "24") (term "0,0,0"))
                           (rule "polySimp_mulLiterals" (formula "24") (term "1,0,0,0"))
                           (rule "polySimp_elimOne" (formula "24") (term "1,0,0,0"))
                           (rule "nnf_notAnd" (formula "31") (term "0,0"))
                           (rule "inEqSimp_notGeq" (formula "31") (term "1,0,0"))
                           (rule "mul_literals" (formula "31") (term "1,0,0,1,0,0"))
                           (rule "add_zero_right" (formula "31") (term "0,0,1,0,0"))
                           (rule "inEqSimp_sepPosMonomial0" (formula "31") (term "1,0,0"))
                           (rule "mul_literals" (formula "31") (term "1,1,0,0"))
                           (rule "inEqSimp_notLeq" (formula "31") (term "0,0,0"))
                           (rule "polySimp_rightDist" (formula "31") (term "1,0,0,0,0,0"))
                           (rule "mul_literals" (formula "31") (term "0,1,0,0,0,0,0"))
                           (rule "polySimp_addAssoc" (formula "31") (term "0,0,0,0,0"))
                           (rule "add_literals" (formula "31") (term "0,0,0,0,0,0"))
                           (rule "add_zero_left" (formula "31") (term "0,0,0,0,0"))
                           (rule "inEqSimp_sepPosMonomial1" (formula "31") (term "0,0,0"))
                           (rule "polySimp_mulLiterals" (formula "31") (term "1,0,0,0"))
                           (rule "polySimp_elimOne" (formula "31") (term "1,0,0,0"))
                           (rule "Static_class_invariant_axiom_for_de_polyas_core3_open_cred_CredTool" (formula "65"))
                            (builtin "One Step Simplification" (formula "65"))
                           (rule "insert_constant_string_value" (formula "65") (term "0,0,1,0,0") (ifseqformula "8"))
                            (builtin "One Step Simplification" (formula "65"))
                           (rule "insert_constant_string_value" (formula "65") (term "0,0,1,0,0,0") (ifseqformula "8"))
                            (builtin "One Step Simplification" (formula "65"))
                           (rule "insert_constant_string_value" (formula "65") (term "0,0,1,0,0,0,0") (ifseqformula "8"))
                            (builtin "One Step Simplification" (formula "65"))
                           (rule "castDel" (formula "65") (term "0,0,0,1,0,0"))
                           (rule "castDel" (formula "65") (term "0,0,0,1,0,0,0,0"))
                           (rule "castDel" (formula "65") (term "0,0,0,1,0,0,0"))
                           (rule "replace_known_right" (formula "65") (term "0,1,0,0") (ifseqformula "61"))
                            (builtin "One Step Simplification" (formula "65") (ifInst ""  (formula "59")) (ifInst ""  (formula "60")))
                           (rule "pullOutSelect" (formula "65") (term "0,0,1,0") (inst "selectSK=de_polyas_core3_open_cred_CredTool_polyasMode_1"))
                           (rule "applyEq" (formula "66") (term "0,1") (ifseqformula "1"))
                           (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "39"))
                            (builtin "One Step Simplification" (formula "1"))
                           (rule "simplifySelectOfStore" (formula "1"))
                            (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "52")))
                           (rule "simplifySelectOfCreate" (formula "1"))
                            (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "52")) (ifInst ""  (formula "52")))
                           (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "35"))
                            (builtin "One Step Simplification" (formula "1"))
                           (rule "replaceKnownSelect_taclet000_23" (formula "1") (term "0"))
                           (rule "replaceKnownAuxiliaryConstant_taclet000_25" (formula "1") (term "0"))
                           (rule "applyEqReverse" (formula "66") (term "0,1") (ifseqformula "1"))
                           (rule "applyEqReverse" (formula "66") (term "0,0,1,0") (ifseqformula "1"))
                           (rule "hideAuxiliaryEq" (formula "1"))
                           (rule "eqSymm" (formula "65") (term "1"))
                           (rule "replace_known_right" (formula "65") (term "0,1,0") (ifseqformula "62"))
                            (builtin "One Step Simplification" (formula "65"))
                           (rule "pullOutSelect" (formula "65") (term "0,0,1,0") (inst "selectSK=de_polyas_core3_open_cred_CredTool_print_2"))
                           (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "39"))
                            (builtin "One Step Simplification" (formula "1"))
                           (rule "simplifySelectOfStore" (formula "1"))
                            (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "52")))
                           (rule "simplifySelectOfCreate" (formula "1"))
                            (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "52")) (ifInst ""  (formula "52")))
                           (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "35"))
                            (builtin "One Step Simplification" (formula "1"))
                           (rule "replaceKnownSelect_taclet000_26" (formula "1") (term "0"))
                           (rule "replaceKnownAuxiliaryConstant_taclet000_27" (formula "1") (term "0"))
                           (rule "applyEqReverse" (formula "66") (term "0,0,1,0") (ifseqformula "1"))
                           (rule "hideAuxiliaryEq" (formula "1"))
                           (rule "replace_known_right" (formula "65") (term "0,1,0") (ifseqformula "58"))
                            (builtin "One Step Simplification" (formula "65"))
                           (rule "pullOutSelect" (formula "65") (term "0,1") (inst "selectSK=de_polyas_core3_open_cred_CredTool_FieldsForPolyasMode_MIN_2"))
                           (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "39"))
                            (builtin "One Step Simplification" (formula "1"))
                           (rule "simplifySelectOfStore" (formula "1"))
                            (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "52")))
                           (rule "simplifySelectOfCreate" (formula "1"))
                            (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "52")) (ifInst ""  (formula "52")))
                           (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "35"))
                            (builtin "One Step Simplification" (formula "1"))
                           (rule "replaceKnownSelect_taclet000_24" (formula "1") (term "0"))
                           (rule "replaceKnownAuxiliaryConstant_taclet000_25" (formula "1") (term "0"))
                           (rule "applyEqReverse" (formula "66") (term "0,1") (ifseqformula "1"))
                            (builtin "One Step Simplification" (formula "66"))
                           (rule "hideAuxiliaryEq" (formula "1"))
                           (rule "pullOutSelect" (formula "65") (term "0,0,1") (inst "selectSK=de_polyas_core3_open_cred_CredTool_polyasVals_2"))
                           (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "39"))
                            (builtin "One Step Simplification" (formula "1"))
                           (rule "simplifySelectOfStore" (formula "1"))
                            (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "52")))
                           (rule "simplifySelectOfCreate" (formula "1"))
                            (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "52")) (ifInst ""  (formula "52")))
                           (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "35"))
                            (builtin "One Step Simplification" (formula "1"))
                           (rule "replaceKnownSelect_taclet000_28" (formula "1") (term "0"))
                           (rule "replaceKnownAuxiliaryConstant_taclet000_29" (formula "1") (term "0"))
                           (rule "applyEqReverse" (formula "66") (term "0,0,1") (ifseqformula "1"))
                           (rule "hideAuxiliaryEq" (formula "1"))
                           (rule "replace_known_right" (formula "65") (term "0,1") (ifseqformula "57"))
                            (builtin "One Step Simplification" (formula "65"))
                           (rule "notRight" (formula "65"))
                           (rule "pullOutSelect" (formula "1") (term "0") (inst "selectSK=de_polyas_core3_open_cred_CredTool_distVals_2"))
                           (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "40"))
                            (builtin "One Step Simplification" (formula "1"))
                           (rule "simplifySelectOfStore" (formula "1"))
                            (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "53")))
                           (rule "simplifySelectOfCreate" (formula "1"))
                            (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "53")) (ifInst ""  (formula "53")))
                           (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "36"))
                            (builtin "One Step Simplification" (formula "1"))
                           (rule "replaceKnownSelect_taclet000_30" (formula "1") (term "0"))
                           (rule "replaceKnownAuxiliaryConstant_taclet000_31" (formula "1") (term "0"))
                           (rule "applyEqReverse" (formula "2") (term "0") (ifseqformula "1"))
                           (rule "close" (formula "58") (ifseqformula "2"))
                        )
                        (branch
                            (builtin "One Step Simplification" (formula "66") (ifInst ""  (formula "46")))
                           (rule "closeTrue" (formula "66"))
                        )
                     )
                     (branch
                         (builtin "One Step Simplification" (formula "66"))
                        (rule "closeTrue" (formula "66"))
                     )
                  )
                  (branch "Case 2"
                      (builtin "One Step Simplification" (formula "66"))
                     (rule "allRight" (formula "66") (inst "sk=f_0"))
                     (rule "allRight" (formula "66") (inst "sk=o_0"))
                     (rule "orRight" (formula "66"))
                     (rule "selectOfAnonEQ" (formula "67") (term "1") (ifseqformula "39"))
                      (builtin "One Step Simplification" (formula "67"))
                     (rule "dismissNonSelectedField" (formula "67") (term "0,0,1,0,1"))
                     (rule "selectOfStore" (formula "67") (term "2,1"))
                      (builtin "One Step Simplification" (formula "67"))
                     (rule "castDel" (formula "67") (term "1,2,1"))
                     (rule "ifthenelse_split" (formula "67") (term "2,1"))
                     (branch "s_2 = o_0 ∧ java.lang.Object::<initialized> = f_0 TRUE"
                        (rule "andLeft" (formula "1"))
                        (rule "ifthenelse_split" (formula "69") (term "1"))
                        (branch " ¬o_0 = null ∧ ¬ o_0.<created>@heapAfter_withHeader[create(s_2)] = TRUE TRUE"
                           (rule "andLeft" (formula "1"))
                           (rule "selectOfCreate" (formula "2") (term "0,0"))
                            (builtin "One Step Simplification" (formula "2") (ifInst ""  (formula "3")) (ifInst ""  (formula "56")))
                           (rule "castDel" (formula "2") (term "0,0"))
                            (builtin "One Step Simplification" (formula "2"))
                           (rule "closeFalse" (formula "2"))
                        )
                        (branch " ¬o_0 = null ∧ ¬ o_0.<created>@heapAfter_withHeader[create(s_2)] = TRUE FALSE"
                           (rule "selectOfCreate" (formula "69") (term "0,0,1"))
                            (builtin "One Step Simplification" (formula "69") (ifInst ""  (formula "1")) (ifInst ""  (formula "54")))
                           (rule "castDel" (formula "69") (term "0,0,1"))
                            (builtin "One Step Simplification" (formula "69"))
                           (rule "false_right" (formula "69"))
                           (rule "eqSymm" (formula "2"))
                           (rule "eqSymm" (formula "1"))
                           (rule "inEqSimp_ltToLeq" (formula "14") (term "0,0,0"))
                           (rule "polySimp_mulComm0" (formula "14") (term "1,0,0,0,0,0"))
                           (rule "inEqSimp_ltToLeq" (formula "26") (term "0,0,0"))
                           (rule "polySimp_mulComm0" (formula "26") (term "1,0,0,0,0,0"))
                           (rule "inEqSimp_ltToLeq" (formula "34") (term "0,0,0"))
                           (rule "polySimp_mulComm0" (formula "34") (term "1,0,0,0,0,0"))
                           (rule "applyEq" (formula "69") (term "2,0") (ifseqformula "2"))
                           (rule "narrowSelectType" (formula "69") (term "0") (ifseqformula "10"))
                           (rule "applyEq" (formula "68") (term "1,0,0,1") (ifseqformula "1"))
                           (rule "replace_known_right" (formula "68") (term "0,1") (ifseqformula "49"))
                            (builtin "One Step Simplification" (formula "68"))
                           (rule "notRight" (formula "68"))
                           (rule "applyEqRigid" (formula "2") (term "0") (ifseqformula "1"))
                           (rule "eqSymm" (formula "2"))
                           (rule "close" (formula "55") (ifseqformula "2"))
                        )
                     )
                     (branch "s_2 = o_0 ∧ java.lang.Object::<initialized> = f_0 FALSE"
                        (rule "selectOfCreate" (formula "68") (term "0,0,1,0,1"))
                         (builtin "One Step Simplification" (formula "68") (ifInst ""  (formula "52")))
                        (rule "castDel" (formula "68") (term "1,0,0,1,0,1"))
                         (builtin "One Step Simplification" (formula "68"))
                        (rule "selectOfCreate" (formula "68") (term "2,1"))
                        (rule "castDel" (formula "68") (term "1,2,1"))
                        (rule "ifthenelse_split" (formula "68") (term "2,1"))
                        (branch " s_2 = o_0 ∧ ¬s_2 = null ∧ f_0 = java.lang.Object::<created> TRUE"
                           (rule "andLeft" (formula "1"))
                           (rule "andLeft" (formula "1"))
                           (rule "ifthenelse_split" (formula "71") (term "1"))
                           (branch " ¬o_0 = null ∧ ¬( s_2 = o_0 ∨ o_0.<created>@heapAfter_withHeader = TRUE) TRUE"
                              (rule "andLeft" (formula "1"))
                              (rule "selectCreatedOfAnonEQ" (formula "2") (term "0,1,0") (ifseqformula "40"))
                               (builtin "One Step Simplification" (formula "2") (ifInst ""  (formula "3")))
                              (rule "closeFalse" (formula "2"))
                           )
                           (branch " ¬o_0 = null ∧ ¬( s_2 = o_0 ∨ o_0.<created>@heapAfter_withHeader = TRUE) FALSE"
                              (rule "selectOfAnonEQ" (formula "71") (term "0,1,0,1") (ifseqformula "38"))
                               (builtin "One Step Simplification" (formula "71") (ifInst ""  (formula "1")))
                              (rule "false_right" (formula "71"))
                              (rule "notLeft" (formula "2"))
                              (rule "eqSymm" (formula "69") (term "1"))
                              (rule "eqSymm" (formula "1"))
                              (rule "eqSymm" (formula "69") (term "0"))
                              (rule "replace_known_left" (formula "69") (term "0") (ifseqformula "1"))
                               (builtin "One Step Simplification" (formula "69"))
                              (rule "inEqSimp_ltToLeq" (formula "34") (term "0,0,0"))
                              (rule "polySimp_mulComm0" (formula "34") (term "1,0,0,0,0,0"))
                              (rule "inEqSimp_ltToLeq" (formula "14") (term "0,0,0"))
                              (rule "polySimp_mulComm0" (formula "14") (term "1,0,0,0,0,0"))
                              (rule "inEqSimp_ltToLeq" (formula "26") (term "0,0,0"))
                              (rule "polySimp_mulComm0" (formula "26") (term "1,0,0,0,0,0"))
                              (rule "applyEq" (formula "69") (term "0") (ifseqformula "2"))
                               (builtin "One Step Simplification" (formula "69"))
                              (rule "false_right" (formula "69"))
                              (rule "applyEqRigid" (formula "69") (term "2,0") (ifseqformula "2"))
                              (rule "narrowSelectType" (formula "69") (term "0") (ifseqformula "10"))
                              (rule "replace_known_right" (formula "68") (term "0,1") (ifseqformula "69"))
                               (builtin "One Step Simplification" (formula "68"))
                              (rule "notRight" (formula "68"))
                              (rule "applyEqRigid" (formula "2") (term "0") (ifseqformula "1"))
                              (rule "eqSymm" (formula "2"))
                              (rule "close" (formula "55") (ifseqformula "2"))
                           )
                        )
                        (branch " s_2 = o_0 ∧ ¬s_2 = null ∧ f_0 = java.lang.Object::<created> FALSE"
                           (rule "selectCreatedOfAnonEQ" (formula "69") (term "0,1,0,1,0,1") (ifseqformula "35"))
                            (builtin "One Step Simplification" (formula "69"))
                           (rule "ifthenelse_split" (formula "69") (term "1"))
                           (branch " ¬o_0 = null ∧ ¬( s_2 = o_0 ∨ ( o_0.<created>@heapAfter_toArray = TRUE ∨ o_0.<created>@anon_heap_withHeader«anonHeapFunction» = TRUE)) TRUE"
                              (rule "andLeft" (formula "1"))
                              (rule "selectCreatedOfAnonEQ" (formula "2") (term "0,0,1,0") (ifseqformula "29"))
                               (builtin "One Step Simplification" (formula "2"))
                              (rule "selectCreatedOfAnonEQ" (formula "2") (term "0,0,0,1,0") (ifseqformula "21"))
                               (builtin "One Step Simplification" (formula "2"))
                              (rule "selectOfAnonEQ" (formula "2") (term "0,0,0,0,1,0") (ifseqformula "17"))
                               (builtin "One Step Simplification" (formula "2") (ifInst ""  (formula "68")))
                              (rule "notLeft" (formula "1"))
                              (rule "notLeft" (formula "1"))
                              (rule "orRight" (formula "46"))
                              (rule "orRight" (formula "47"))
                              (rule "orRight" (formula "47"))
                              (rule "orRight" (formula "47"))
                              (rule "eqSymm" (formula "75"))
                              (rule "eqSymm" (formula "74") (term "0,0"))
                              (rule "eqSymm" (formula "73") (term "0"))
                              (rule "eqSymm" (formula "73") (term "1"))
                              (rule "eqSymm" (formula "46"))
                              (rule "replace_known_right" (formula "73") (term "0") (ifseqformula "46"))
                               (builtin "One Step Simplification" (formula "73"))
                              (rule "false_right" (formula "73"))
                              (rule "replace_known_right" (formula "72") (term "0,1") (ifseqformula "47"))
                               (builtin "One Step Simplification" (formula "72") (ifInst ""  (formula "51")))
                              (rule "closeTrue" (formula "72"))
                           )
                           (branch " ¬o_0 = null ∧ ¬( s_2 = o_0 ∨ ( o_0.<created>@heapAfter_toArray = TRUE ∨ o_0.<created>@anon_heap_withHeader«anonHeapFunction» = TRUE)) FALSE"
                              (rule "selectOfAnonEQ" (formula "69") (term "0,0,1,0,1") (ifseqformula "27"))
                               (builtin "One Step Simplification" (formula "69"))
                              (rule "selectOfAnonEQ" (formula "70") (term "1") (ifseqformula "35"))
                               (builtin "One Step Simplification" (formula "70"))
                              (rule "ifthenelse_split" (formula "70") (term "1"))
                              (branch "¬o_0 = null ∧ ¬o_0.<created>@heapAfter_toArray = TRUE TRUE"
                                 (rule "andLeft" (formula "1"))
                                 (rule "selectCreatedOfAnonEQ" (formula "71") (term "2,0,0,1,0,1") (ifseqformula "21"))
                                 (rule "ifthenelse_split" (formula "71") (term "0,0,1,0,1"))
                                 (branch "¬o_0 = null ∧ ¬o_0.<created>@heapAfter_toList = TRUE TRUE"
                                    (rule "andLeft" (formula "1"))
                                    (rule "selectCreatedOfAnonEQ" (formula "3") (term "0,0") (ifseqformula "30"))
                                     (builtin "One Step Simplification" (formula "3"))
                                    (rule "selectOfAnonEQ" (formula "1") (term "0,0") (ifseqformula "22"))
                                     (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "2")))
                                    (rule "ifthenelse_negated" (formula "1") (term "0,0"))
                                    (rule "ifthenelse_split" (formula "1") (term "0,0"))
                                    (branch "o_0.<created>@heapAfter_withDelimiter = TRUE TRUE"
                                       (rule "selectCreatedOfAnonEQ" (formula "4") (term "0,0,0") (ifseqformula "23"))
                                        (builtin "One Step Simplification" (formula "4") (ifInst ""  (formula "1")))
                                       (rule "closeFalse" (formula "4"))
                                    )
                                    (branch "o_0.<created>@heapAfter_withDelimiter = TRUE FALSE"
                                       (rule "selectCreatedOfAnonEQ" (formula "3") (term "0,0,0") (ifseqformula "22"))
                                        (builtin "One Step Simplification" (formula "3") (ifInst ""  (formula "49")))
                                       (rule "selectCreatedOfAnonEQ" (formula "49") (term "0") (ifseqformula "18"))
                                        (builtin "One Step Simplification" (formula "49"))
                                       (rule "orRight" (formula "49"))
                                       (rule "notLeft" (formula "3"))
                                       (rule "notLeft" (formula "1"))
                                       (rule "notLeft" (formula "1"))
                                       (rule "orRight" (formula "48"))
                                       (rule "eqSymm" (formula "73") (term "0,0"))
                                       (rule "eqSymm" (formula "74") (term "0,0,1"))
                                       (rule "eqSymm" (formula "75"))
                                       (rule "eqSymm" (formula "72") (term "0"))
                                       (rule "eqSymm" (formula "72") (term "1"))
                                       (rule "replace_known_right" (formula "71") (term "0,0") (ifseqformula "46"))
                                        (builtin "One Step Simplification" (formula "71") (ifInst ""  (formula "49")))
                                       (rule "closeTrue" (formula "71"))
                                    )
                                 )
                                 (branch "¬o_0 = null ∧ ¬o_0.<created>@heapAfter_toList = TRUE FALSE"
                                     (builtin "One Step Simplification" (formula "72") (ifInst ""  (formula "1")))
                                    (rule "selectCreatedOfAnonEQ" (formula "2") (term "0,0") (ifseqformula "29"))
                                     (builtin "One Step Simplification" (formula "2"))
                                    (rule "selectCreatedOfAnonEQ" (formula "71") (term "0,0,1") (ifseqformula "21"))
                                     (builtin "One Step Simplification" (formula "71") (ifInst ""  (formula "1")))
                                    (rule "selectOfAnonEQ" (formula "72") (term "0,0,0,1,0") (ifseqformula "17"))
                                     (builtin "One Step Simplification" (formula "72") (ifInst ""  (formula "68")))
                                    (rule "selectOfAnonEQ" (formula "2") (term "0,0,0") (ifseqformula "21"))
                                     (builtin "One Step Simplification" (formula "2") (ifInst ""  (formula "1")))
                                    (rule "ifthenelse_negated" (formula "2") (term "0,0,0"))
                                    (rule "ifthenelse_split" (formula "2") (term "0,0,0"))
                                    (branch "o_0.<created>@heapAfter_withDelimiter = TRUE TRUE"
                                       (rule "selectCreatedOfAnonEQ" (formula "72") (term "0,0,0") (ifseqformula "18"))
                                        (builtin "One Step Simplification" (formula "72"))
                                       (rule "selectOfAnonEQ" (formula "2") (term "0") (ifseqformula "18"))
                                        (builtin "One Step Simplification" (formula "2") (ifInst ""  (formula "69")))
                                       (rule "selectCreatedOfAnonEQ" (formula "3") (term "0,0,0") (ifseqformula "18"))
                                        (builtin "One Step Simplification" (formula "3") (ifInst ""  (formula "2")))
                                       (rule "closeFalse" (formula "3"))
                                    )
                                    (branch "o_0.<created>@heapAfter_withDelimiter = TRUE FALSE"
                                       (rule "selectCreatedOfAnonEQ" (formula "72") (term "0,0,0") (ifseqformula "17"))
                                        (builtin "One Step Simplification" (formula "72"))
                                       (rule "selectOfAnonEQ" (formula "48") (term "0") (ifseqformula "17"))
                                        (builtin "One Step Simplification" (formula "48") (ifInst ""  (formula "69")))
                                       (rule "notLeft" (formula "2"))
                                       (rule "notRight" (formula "73"))
                                       (rule "notRight" (formula "73"))
                                       (rule "notLeft" (formula "3"))
                                       (rule "orRight" (formula "49"))
                                       (rule "eqSymm" (formula "75"))
                                       (rule "eqSymm" (formula "73") (term "0"))
                                       (rule "eqSymm" (formula "74") (term "0,0"))
                                       (rule "eqSymm" (formula "73") (term "1"))
                                       (rule "eqSymm" (formula "2") (term "0"))
                                       (rule "replace_known_right" (formula "72") (term "0,1") (ifseqformula "51"))
                                        (builtin "One Step Simplification" (formula "72") (ifInst ""  (formula "48")))
                                       (rule "closeTrue" (formula "72"))
                                    )
                                 )
                              )
                              (branch "¬o_0 = null ∧ ¬o_0.<created>@heapAfter_toArray = TRUE FALSE"
                                 (rule "selectCreatedOfAnonEQ" (formula "69") (term "2,0,0,1,0,1") (ifseqformula "19"))
                                 (rule "selectCreatedOfAnonEQ" (formula "70") (term "0,0,1") (ifseqformula "27"))
                                  (builtin "One Step Simplification" (formula "70"))
                                 (rule "selectOfAnonEQ" (formula "69") (term "0,0,2,0,0,1,0,1") (ifseqformula "15"))
                                  (builtin "One Step Simplification" (formula "69") (ifInst ""  (formula "66")))
                                 (rule "ifthenelse_split" (formula "69") (term "2,0,0,1,0,1"))
                                 (branch "o_0.<created> = TRUE TRUE"
                                     (builtin "One Step Simplification" (formula "70"))
                                    (rule "selectOfAnonEQ" (formula "72") (term "1") (ifseqformula "28"))
                                     (builtin "One Step Simplification" (formula "72"))
                                    (rule "ifthenelse_split" (formula "72") (term "1"))
                                    (branch "¬o_0 = null ∧ ¬o_0.<created>@heapAfter_toList = TRUE TRUE"
                                       (rule "andLeft" (formula "1"))
                                       (rule "selectOfAnonEQ" (formula "72") (term "0,0,1,0,0,0,1,0,1") (ifseqformula "22"))
                                        (builtin "One Step Simplification" (formula "72") (ifInst ""  (formula "1")) (ifInst ""  (formula "1")) (ifInst ""  (formula "1")))
                                       (rule "ifthenelse_negated" (formula "72") (term "0,0,0,1,0"))
                                       (rule "selectOfAnonEQ" (formula "73") (term "0,0,0,1") (ifseqformula "22"))
                                        (builtin "One Step Simplification" (formula "73") (ifInst ""  (formula "1")) (ifInst ""  (formula "1")))
                                       (rule "ifthenelse_negated" (formula "73") (term "0,0,0"))
                                       (rule "ifthenelse_split" (formula "73") (term "0,0,0"))
                                       (branch "o_0.<created>@heapAfter_withDelimiter = TRUE TRUE"
                                          (rule "ifthenelse_split" (formula "73") (term "0,0,0,1,0"))
                                          (branch "o_0.<created>@heapAfter_withDelimiter = TRUE TRUE"
                                             (rule "selectCreatedOfAnonEQ" (formula "1") (term "0") (ifseqformula "19"))
                                              (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "4")))
                                             (rule "selectOfAnonEQ" (formula "73") (term "0,0,0,1,0") (ifseqformula "19"))
                                              (builtin "One Step Simplification" (formula "73") (ifInst ""  (formula "70")) (ifInst ""  (formula "4")))
                                             (rule "selectCreatedOfAnonEQ" (formula "74") (term "0,0,0") (ifseqformula "19"))
                                              (builtin "One Step Simplification" (formula "74") (ifInst ""  (formula "4")))
                                             (rule "selectOfAnonEQ" (formula "3") (term "0,0") (ifseqformula "23"))
                                              (builtin "One Step Simplification" (formula "3") (ifInst ""  (formula "2")))
                                             (rule "ifthenelse_negated" (formula "3") (term "0,0"))
                                             (rule "ifthenelse_split" (formula "3") (term "0,0"))
                                             (branch "o_0.<created>@heapAfter_withDelimiter = TRUE TRUE"
                                                (rule "selectOfAnonEQ" (formula "4") (term "0,0") (ifseqformula "20"))
                                                 (builtin "One Step Simplification" (formula "4") (ifInst ""  (formula "71")) (ifInst ""  (formula "5")))
                                                (rule "closeFalse" (formula "4"))
                                             )
                                             (branch "o_0.<created>@heapAfter_withDelimiter = TRUE FALSE"
                                                (rule "selectOfAnonEQ" (formula "50") (term "0") (ifseqformula "19"))
                                                 (builtin "One Step Simplification" (formula "50") (ifInst ""  (formula "71")) (ifInst ""  (formula "4")))
                                                (rule "closeTrue" (formula "50"))
                                             )
                                          )
                                          (branch "o_0.<created>@heapAfter_withDelimiter = TRUE FALSE"
                                             (rule "close" (formula "73") (ifseqformula "1"))
                                          )
                                       )
                                       (branch "o_0.<created>@heapAfter_withDelimiter = TRUE FALSE"
                                          (rule "ifthenelse_split" (formula "72") (term "0,0,0,1,0"))
                                          (branch "o_0.<created>@heapAfter_withDelimiter = TRUE TRUE"
                                             (rule "close" (formula "74") (ifseqformula "1"))
                                          )
                                          (branch "o_0.<created>@heapAfter_withDelimiter = TRUE FALSE"
                                             (rule "selectCreatedOfAnonEQ" (formula "73") (term "0") (ifseqformula "18"))
                                              (builtin "One Step Simplification" (formula "73") (ifInst ""  (formula "3")))
                                             (rule "closeTrue" (formula "73"))
                                          )
                                       )
                                    )
                                    (branch "¬o_0 = null ∧ ¬o_0.<created>@heapAfter_toList = TRUE FALSE"
                                       (rule "selectOfAnonEQ" (formula "70") (term "0,0,1,0,0,0,1,0,1") (ifseqformula "20"))
                                        (builtin "One Step Simplification" (formula "70"))
                                       (rule "ifthenelse_split" (formula "70") (term "0,0,1,0,0,0,1,0,1"))
                                       (branch " ¬o_0 = null ∧ ¬o_0.<created>@heapAfter_withDelimiter = TRUE TRUE"
                                          (rule "andLeft" (formula "1"))
                                          (rule "selectOfAnonEQ" (formula "75") (term "1") (ifseqformula "22"))
                                           (builtin "One Step Simplification" (formula "75") (ifInst ""  (formula "1")) (ifInst ""  (formula "2")))
                                          (rule "selectOfAnonEQ" (formula "74") (term "0,0,1") (ifseqformula "22"))
                                           (builtin "One Step Simplification" (formula "74") (ifInst ""  (formula "1")) (ifInst ""  (formula "1")) (ifInst ""  (formula "2")))
                                          (rule "selectCreatedOfAnonEQ" (formula "73") (term "0,0,0,1") (ifseqformula "22"))
                                           (builtin "One Step Simplification" (formula "73") (ifInst ""  (formula "1")))
                                          (rule "selectCreatedOfAnonEQ" (formula "2") (term "0,0") (ifseqformula "18"))
                                           (builtin "One Step Simplification" (formula "2") (ifInst ""  (formula "3")))
                                          (rule "closeFalse" (formula "2"))
                                       )
                                       (branch " ¬o_0 = null ∧ ¬o_0.<created>@heapAfter_withDelimiter = TRUE FALSE"
                                          (rule "selectOfAnonEQ" (formula "74") (term "1") (ifseqformula "20"))
                                           (builtin "One Step Simplification" (formula "74") (ifInst ""  (formula "70")))
                                          (rule "selectOfAnonEQ" (formula "73") (term "0,0,1") (ifseqformula "20"))
                                           (builtin "One Step Simplification" (formula "73") (ifInst ""  (formula "70")) (ifInst ""  (formula "70")))
                                          (rule "selectCreatedOfAnonEQ" (formula "70") (term "0,0,1") (ifseqformula "16"))
                                           (builtin "One Step Simplification" (formula "70") (ifInst ""  (formula "1")))
                                          (rule "selectCreatedOfAnonEQ" (formula "70") (term "0,0,1,0,0,0,1,0,1") (ifseqformula "16"))
                                           (builtin "One Step Simplification" (formula "70") (ifInst ""  (formula "1")))
                                          (rule "selectOfAnonEQ" (formula "70") (term "0,0,0,1") (ifseqformula "20"))
                                           (builtin "One Step Simplification" (formula "70"))
                                          (rule "selectOfAnonEQ" (formula "72") (term "1") (ifseqformula "16"))
                                           (builtin "One Step Simplification" (formula "72") (ifInst ""  (formula "67")))
                                          (rule "closeTrue" (formula "72"))
                                       )
                                    )
                                 )
                                 (branch "o_0.<created> = TRUE FALSE"
                                    (rule "ifthenelse_split" (formula "70") (term "0,0,1,0,1"))
                                    (branch "¬o_0 = null ∧ ¬o_0.<created>@heapAfter_toList = TRUE TRUE"
                                       (rule "andLeft" (formula "1"))
                                       (rule "selectOfAnonEQ" (formula "74") (term "1") (ifseqformula "29"))
                                        (builtin "One Step Simplification" (formula "74") (ifInst ""  (formula "1")) (ifInst ""  (formula "2")))
                                       (rule "selectOfAnonEQ" (formula "2") (term "0,0") (ifseqformula "21"))
                                        (builtin "One Step Simplification" (formula "2") (ifInst ""  (formula "1")))
                                       (rule "ifthenelse_negated" (formula "2") (term "0,0"))
                                       (rule "ifthenelse_split" (formula "2") (term "0,0"))
                                       (branch "o_0.<created>@heapAfter_withDelimiter = TRUE TRUE"
                                          (rule "selectOfAnonEQ" (formula "74") (term "0,0,0,1") (ifseqformula "22"))
                                           (builtin "One Step Simplification" (formula "74") (ifInst ""  (formula "1")) (ifInst ""  (formula "1")) (ifInst ""  (formula "3")))
                                          (rule "selectCreatedOfAnonEQ" (formula "2") (term "0") (ifseqformula "18"))
                                           (builtin "One Step Simplification" (formula "2") (ifInst ""  (formula "72")))
                                          (rule "selectOfAnonEQ" (formula "3") (term "0,0") (ifseqformula "18"))
                                           (builtin "One Step Simplification" (formula "3") (ifInst ""  (formula "69")) (ifInst ""  (formula "72")))
                                          (rule "true_left" (formula "3"))
                                          (rule "notRight" (formula "73"))
                                          (rule "notLeft" (formula "2"))
                                          (rule "eqSymm" (formula "70") (term "0"))
                                          (rule "eqSymm" (formula "70") (term "1"))
                                          (rule "eqSymm" (formula "73") (term "0,0,1"))
                                          (rule "eqSymm" (formula "71") (term "0,0"))
                                          (rule "eqSymm" (formula "74"))
                                          (rule "replace_known_right" (formula "69") (term "0,0") (ifseqformula "48"))
                                           (builtin "One Step Simplification" (formula "69") (ifInst ""  (formula "72")))
                                          (rule "closeTrue" (formula "69"))
                                       )
                                       (branch "o_0.<created>@heapAfter_withDelimiter = TRUE FALSE"
                                          (rule "selectOfAnonEQ" (formula "74") (term "0,0,0,1") (ifseqformula "21"))
                                           (builtin "One Step Simplification" (formula "74") (ifInst ""  (formula "1")) (ifInst ""  (formula "1")) (ifInst ""  (formula "48")))
                                          (rule "selectCreatedOfAnonEQ" (formula "48") (term "0") (ifseqformula "17"))
                                           (builtin "One Step Simplification" (formula "48") (ifInst ""  (formula "72")))
                                          (rule "notLeft" (formula "2"))
                                          (rule "notRight" (formula "74"))
                                          (rule "notLeft" (formula "2"))
                                          (rule "eqSymm" (formula "71") (term "0"))
                                          (rule "eqSymm" (formula "71") (term "1"))
                                          (rule "eqSymm" (formula "72") (term "0,0"))
                                          (rule "eqSymm" (formula "74") (term "0,0,1"))
                                          (rule "eqSymm" (formula "75"))
                                          (rule "replace_known_right" (formula "70") (term "0,0") (ifseqformula "47"))
                                           (builtin "One Step Simplification" (formula "70") (ifInst ""  (formula "73")))
                                          (rule "closeTrue" (formula "70"))
                                       )
                                    )
                                    (branch "¬o_0 = null ∧ ¬o_0.<created>@heapAfter_toList = TRUE FALSE"
                                       (rule "selectOfAnonEQ" (formula "73") (term "1") (ifseqformula "27"))
                                        (builtin "One Step Simplification" (formula "73") (ifInst ""  (formula "70")))
                                       (rule "selectCreatedOfAnonEQ" (formula "70") (term "0,0,1") (ifseqformula "19"))
                                        (builtin "One Step Simplification" (formula "70"))
                                       (rule "selectOfAnonEQ" (formula "73") (term "1") (ifseqformula "19"))
                                        (builtin "One Step Simplification" (formula "73"))
                                       (rule "ifthenelse_split" (formula "73") (term "1"))
                                       (branch " ¬o_0 = null ∧ ¬o_0.<created>@heapAfter_withDelimiter = TRUE TRUE"
                                          (rule "andLeft" (formula "1"))
                                          (rule "selectOfAnonEQ" (formula "72") (term "0,0,0,1") (ifseqformula "17"))
                                           (builtin "One Step Simplification" (formula "72") (ifInst ""  (formula "1")) (ifInst ""  (formula "68")) (ifInst ""  (formula "71")))
                                          (rule "selectOfAnonEQ" (formula "74") (term "0,0,0,1") (ifseqformula "21"))
                                           (builtin "One Step Simplification" (formula "74") (ifInst ""  (formula "1")) (ifInst ""  (formula "1")) (ifInst ""  (formula "2")))
                                          (rule "selectOfAnonEQ" (formula "2") (term "0,0") (ifseqformula "17"))
                                           (builtin "One Step Simplification" (formula "2") (ifInst ""  (formula "68")) (ifInst ""  (formula "71")))
                                          (rule "true_left" (formula "2"))
                                          (rule "notLeft" (formula "1"))
                                          (rule "notRight" (formula "71"))
                                          (rule "notRight" (formula "73"))
                                          (rule "eqSymm" (formula "74"))
                                          (rule "eqSymm" (formula "71") (term "0,0"))
                                          (rule "eqSymm" (formula "73") (term "0,0,1"))
                                          (rule "eqSymm" (formula "70") (term "0"))
                                          (rule "eqSymm" (formula "70") (term "1"))
                                          (rule "replace_known_right" (formula "69") (term "0,0") (ifseqformula "48"))
                                           (builtin "One Step Simplification" (formula "69") (ifInst ""  (formula "72")))
                                          (rule "closeTrue" (formula "69"))
                                       )
                                       (branch " ¬o_0 = null ∧ ¬o_0.<created>@heapAfter_withDelimiter = TRUE FALSE"
                                          (rule "selectOfAnonEQ" (formula "70") (term "0,0,0,1") (ifseqformula "15"))
                                           (builtin "One Step Simplification" (formula "70") (ifInst ""  (formula "66")) (ifInst ""  (formula "69")))
                                          (rule "selectOfAnonEQ" (formula "73") (term "0,0,1") (ifseqformula "15"))
                                           (builtin "One Step Simplification" (formula "73") (ifInst ""  (formula "66")) (ifInst ""  (formula "66")))
                                          (rule "selectOfAnonEQ" (formula "72") (term "0,0,0,1") (ifseqformula "19"))
                                           (builtin "One Step Simplification" (formula "72"))
                                          (rule "ifthenelse_split" (formula "72") (term "0,0,0,1"))
                                          (branch " ¬o_0 = null ∧ ¬o_0.<created>@heapAfter_withDelimiter = TRUE TRUE"
                                             (rule "andLeft" (formula "1"))
                                             (rule "selectOfAnonEQ" (formula "76") (term "1") (ifseqformula "17"))
                                              (builtin "One Step Simplification" (formula "76") (ifInst ""  (formula "68")))
                                             (rule "closeTrue" (formula "76"))
                                          )
                                          (branch " ¬o_0 = null ∧ ¬o_0.<created>@heapAfter_withDelimiter = TRUE FALSE"
                                             (rule "selectOfAnonEQ" (formula "75") (term "1") (ifseqformula "15"))
                                              (builtin "One Step Simplification" (formula "75") (ifInst ""  (formula "66")))
                                             (rule "closeTrue" (formula "75"))
                                          )
                                       )
                                    )
                                 )
                              )
                           )
                        )
                     )
                  )
               )
               (branch "Exceptional Post (print)"
                   (builtin "One Step Simplification" (formula "39"))
                   (builtin "One Step Simplification" (formula "59"))
                  (rule "andLeft" (formula "39"))
                  (rule "selectCreatedOfAnonAsFormulaEQ" (formula "40") (term "1,0") (ifseqformula "39"))
                  (rule "andLeft" (formula "40"))
                  (rule "andLeft" (formula "41"))
                  (rule "andLeft" (formula "40"))
                  (rule "andLeft" (formula "42"))
                  (rule "notLeft" (formula "40"))
                  (rule "close" (formula "44") (ifseqformula "43"))
               )
               (branch "Pre (print)"
                   (builtin "One Step Simplification" (formula "57") (ifInst ""  (formula "43")) (ifInst ""  (formula "43")))
                  (rule "wellFormedStorePrimitive" (formula "57") (term "0,1"))
                  (rule "wellFormedCreate" (formula "57") (term "0,1"))
                  (rule "wellFormedAnonEQ" (formula "57") (term "0,1") (ifseqformula "35"))
                  (rule "wellFormedAnonEQ" (formula "57") (term "0,0,1") (ifseqformula "27"))
                  (rule "wellFormedAnonEQ" (formula "57") (term "0,0,0,1") (ifseqformula "19"))
                  (rule "wellFormedAnonEQ" (formula "57") (term "0,0,0,0,1") (ifseqformula "15"))
                  (rule "replace_known_left" (formula "57") (term "1,0,1") (ifseqformula "34"))
                   (builtin "One Step Simplification" (formula "57") (ifInst ""  (formula "8")) (ifInst ""  (formula "14")) (ifInst ""  (formula "18")) (ifInst ""  (formula "26")))
                  (rule "dismissNonSelectedField" (formula "57") (term "0,1"))
                  (rule "inEqSimp_ltToLeq" (formula "24") (term "0,0,0"))
                  (rule "polySimp_mulComm0" (formula "24") (term "1,0,0,0,0,0"))
                  (rule "inEqSimp_ltToLeq" (formula "32") (term "0,0,0"))
                  (rule "polySimp_mulComm0" (formula "32") (term "1,0,0,0,0,0"))
                  (rule "inEqSimp_ltToLeq" (formula "12") (term "0,0,0"))
                  (rule "polySimp_mulComm0" (formula "12") (term "1,0,0,0,0,0"))
                  (rule "inEqSimp_sepPosMonomial0" (formula "24") (term "0,0,0"))
                  (rule "polySimp_mulComm0" (formula "24") (term "1,0,0,0"))
                  (rule "polySimp_rightDist" (formula "24") (term "1,0,0,0"))
                  (rule "polySimp_mulLiterals" (formula "24") (term "1,1,0,0,0"))
                  (rule "mul_literals" (formula "24") (term "0,1,0,0,0"))
                  (rule "polySimp_elimOne" (formula "24") (term "1,1,0,0,0"))
                  (rule "inEqSimp_sepPosMonomial0" (formula "32") (term "0,0,0"))
                  (rule "polySimp_mulComm0" (formula "32") (term "1,0,0,0"))
                  (rule "polySimp_rightDist" (formula "32") (term "1,0,0,0"))
                  (rule "polySimp_mulLiterals" (formula "32") (term "1,1,0,0,0"))
                  (rule "mul_literals" (formula "32") (term "0,1,0,0,0"))
                  (rule "polySimp_elimOne" (formula "32") (term "1,1,0,0,0"))
                  (rule "inEqSimp_sepPosMonomial0" (formula "12") (term "0,0,0"))
                  (rule "polySimp_mulComm0" (formula "12") (term "1,0,0,0"))
                  (rule "polySimp_rightDist" (formula "12") (term "1,0,0,0"))
                  (rule "mul_literals" (formula "12") (term "0,1,0,0,0"))
                  (rule "polySimp_mulLiterals" (formula "12") (term "1,1,0,0,0"))
                  (rule "polySimp_elimOne" (formula "12") (term "1,1,0,0,0"))
                  (rule "inEqSimp_subsumption1" (formula "30") (ifseqformula "31"))
                  (rule "leq_literals" (formula "30") (term "0"))
                   (builtin "One Step Simplification" (formula "30"))
                  (rule "true_left" (formula "30"))
                  (rule "pullOutSelect" (formula "56") (term "0,1") (inst "selectSK=java_lang_Object_created__0"))
                  (rule "simplifySelectOfCreate" (formula "1"))
                   (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "43")))
                  (rule "castDel" (formula "1") (term "0"))
                  (rule "applyEqReverse" (formula "57") (term "0,1") (ifseqformula "1"))
                   (builtin "One Step Simplification" (formula "57"))
                  (rule "hideAuxiliaryEq" (formula "1"))
                  (rule "nnf_imp2or" (formula "24") (term "0"))
                  (rule "nnf_imp2or" (formula "31") (term "0"))
                  (rule "nnf_imp2or" (formula "12") (term "0"))
                  (rule "nnf_notAnd" (formula "24") (term "0,0"))
                  (rule "inEqSimp_notGeq" (formula "24") (term "1,0,0"))
                  (rule "times_zero_1" (formula "24") (term "1,0,0,1,0,0"))
                  (rule "add_literals" (formula "24") (term "0,0,1,0,0"))
                  (rule "inEqSimp_sepPosMonomial0" (formula "24") (term "1,0,0"))
                  (rule "mul_literals" (formula "24") (term "1,1,0,0"))
                  (rule "inEqSimp_notLeq" (formula "24") (term "0,0,0"))
                  (rule "polySimp_rightDist" (formula "24") (term "1,0,0,0,0,0"))
                  (rule "mul_literals" (formula "24") (term "0,1,0,0,0,0,0"))
                  (rule "polySimp_addAssoc" (formula "24") (term "0,0,0,0,0"))
                  (rule "add_literals" (formula "24") (term "0,0,0,0,0,0"))
                  (rule "add_zero_left" (formula "24") (term "0,0,0,0,0"))
                  (rule "inEqSimp_sepPosMonomial1" (formula "24") (term "0,0,0"))
                  (rule "polySimp_mulLiterals" (formula "24") (term "1,0,0,0"))
                  (rule "polySimp_elimOne" (formula "24") (term "1,0,0,0"))
                  (rule "nnf_notAnd" (formula "31") (term "0,0"))
                  (rule "inEqSimp_notGeq" (formula "31") (term "1,0,0"))
                  (rule "times_zero_1" (formula "31") (term "1,0,0,1,0,0"))
                  (rule "add_literals" (formula "31") (term "0,0,1,0,0"))
                  (rule "inEqSimp_sepPosMonomial0" (formula "31") (term "1,0,0"))
                  (rule "mul_literals" (formula "31") (term "1,1,0,0"))
                  (rule "inEqSimp_notLeq" (formula "31") (term "0,0,0"))
                  (rule "polySimp_rightDist" (formula "31") (term "1,0,0,0,0,0"))
                  (rule "mul_literals" (formula "31") (term "0,1,0,0,0,0,0"))
                  (rule "polySimp_addAssoc" (formula "31") (term "0,0,0,0,0"))
                  (rule "add_literals" (formula "31") (term "0,0,0,0,0,0"))
                  (rule "add_zero_left" (formula "31") (term "0,0,0,0,0"))
                  (rule "inEqSimp_sepPosMonomial1" (formula "31") (term "0,0,0"))
                  (rule "polySimp_mulLiterals" (formula "31") (term "1,0,0,0"))
                  (rule "polySimp_elimOne" (formula "31") (term "1,0,0,0"))
                  (rule "nnf_notAnd" (formula "12") (term "0,0"))
                  (rule "inEqSimp_notGeq" (formula "12") (term "1,0,0"))
                  (rule "mul_literals" (formula "12") (term "1,0,0,1,0,0"))
                  (rule "add_literals" (formula "12") (term "0,0,1,0,0"))
                  (rule "inEqSimp_sepPosMonomial0" (formula "12") (term "1,0,0"))
                  (rule "mul_literals" (formula "12") (term "1,1,0,0"))
                  (rule "inEqSimp_notLeq" (formula "12") (term "0,0,0"))
                  (rule "polySimp_rightDist" (formula "12") (term "1,0,0,0,0,0"))
                  (rule "mul_literals" (formula "12") (term "0,1,0,0,0,0,0"))
                  (rule "polySimp_addAssoc" (formula "12") (term "0,0,0,0,0"))
                  (rule "add_literals" (formula "12") (term "0,0,0,0,0,0"))
                  (rule "add_zero_left" (formula "12") (term "0,0,0,0,0"))
                  (rule "inEqSimp_sepPosMonomial1" (formula "12") (term "0,0,0"))
                  (rule "polySimp_mulLiterals" (formula "12") (term "1,0,0,0"))
                  (rule "polySimp_elimOne" (formula "12") (term "1,0,0,0"))
                  (rule "Class_invariant_axiom_for_org_apache_commons_csv_CSVFormat" (formula "56"))
                  (rule "notRight" (formula "56"))
                  (rule "dismissNonSelectedField" (formula "1") (term "0"))
                  (rule "pullOutSelect" (formula "1") (term "0") (inst "selectSK=org_apache_commons_csv_CSVFormat_RFC4180_4"))
                  (rule "simplifySelectOfCreate" (formula "1"))
                   (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "44")) (ifInst ""  (formula "44")))
                  (rule "replaceKnownSelect_taclet0000_32" (formula "1") (term "0"))
                  (rule "replaceKnownAuxiliaryConstant_taclet0000_33" (formula "1") (term "0"))
                  (rule "applyEqReverse" (formula "2") (term "0") (ifseqformula "1"))
                  (rule "close" (formula "56") (ifseqformula "2"))
               )
               (branch "Null reference (var_6 = null)"
                   (builtin "One Step Simplification" (formula "57") (ifInst ""  (formula "44")))
                  (rule "closeTrue" (formula "57"))
               )
            )
            (branch "Null Reference (s = null)"
                (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "44")))
               (rule "closeFalse" (formula "1"))
            )
         )
         (branch "Exceptional Post (withHeader)"
             (builtin "One Step Simplification" (formula "38"))
             (builtin "One Step Simplification" (formula "25"))
            (rule "andLeft" (formula "25"))
            (rule "selectCreatedOfAnonAsFormulaEQ" (formula "26") (term "1,0") (ifseqformula "25"))
            (rule "selectCreatedOfAnonAsFormulaEQ" (formula "26") (term "0,1,0") (ifseqformula "20"))
            (rule "selectCreatedOfAnonAsFormulaEQ" (formula "26") (term "0,0,1,0") (ifseqformula "13"))
            (rule "selectCreatedOfAnonAsFormulaEQ" (formula "26") (term "0,0,0,1,0") (ifseqformula "9"))
            (rule "andLeft" (formula "26"))
            (rule "andLeft" (formula "27"))
            (rule "andLeft" (formula "26"))
            (rule "andLeft" (formula "28"))
            (rule "notLeft" (formula "26"))
            (rule "close" (formula "30") (ifseqformula "29"))
         )
         (branch "Pre (withHeader)"
             (builtin "One Step Simplification" (formula "36") (ifInst ""  (formula "24")))
            (rule "andRight" (formula "36"))
            (branch "Case 1"
               (rule "andRight" (formula "36"))
               (branch
                  (rule "inEqSimp_ltToLeq" (formula "17") (term "0,0,0"))
                  (rule "polySimp_mulComm0" (formula "17") (term "1,0,0,0,0,0"))
                  (rule "inEqSimp_ltToLeq" (formula "6") (term "0,0,0"))
                  (rule "polySimp_mulComm0" (formula "6") (term "1,0,0,0,0,0"))
                  (rule "inEqSimp_ltToLeq" (formula "22") (term "0,0,0"))
                  (rule "polySimp_mulComm0" (formula "22") (term "1,0,0,0,0,0"))
                  (rule "inEqSimp_sepPosMonomial0" (formula "17") (term "0,0,0"))
                  (rule "polySimp_mulComm0" (formula "17") (term "1,0,0,0"))
                  (rule "polySimp_rightDist" (formula "17") (term "1,0,0,0"))
                  (rule "mul_literals" (formula "17") (term "0,1,0,0,0"))
                  (rule "polySimp_mulLiterals" (formula "17") (term "1,1,0,0,0"))
                  (rule "polySimp_elimOne" (formula "17") (term "1,1,0,0,0"))
                  (rule "inEqSimp_sepPosMonomial0" (formula "6") (term "0,0,0"))
                  (rule "polySimp_mulComm0" (formula "6") (term "1,0,0,0"))
                  (rule "polySimp_rightDist" (formula "6") (term "1,0,0,0"))
                  (rule "polySimp_mulLiterals" (formula "6") (term "1,1,0,0,0"))
                  (rule "mul_literals" (formula "6") (term "0,1,0,0,0"))
                  (rule "polySimp_elimOne" (formula "6") (term "1,1,0,0,0"))
                  (rule "inEqSimp_sepPosMonomial0" (formula "22") (term "0,0,0"))
                  (rule "polySimp_mulComm0" (formula "22") (term "1,0,0,0"))
                  (rule "polySimp_rightDist" (formula "22") (term "1,0,0,0"))
                  (rule "polySimp_mulLiterals" (formula "22") (term "1,1,0,0,0"))
                  (rule "mul_literals" (formula "22") (term "0,1,0,0,0"))
                  (rule "polySimp_elimOne" (formula "22") (term "1,1,0,0,0"))
                  (rule "nnf_imp2or" (formula "17") (term "0"))
                  (rule "nnf_imp2or" (formula "6") (term "0"))
                  (rule "nnf_imp2or" (formula "22") (term "0"))
                  (rule "nnf_notAnd" (formula "17") (term "0,0"))
                  (rule "inEqSimp_notGeq" (formula "17") (term "1,0,0"))
                  (rule "mul_literals" (formula "17") (term "1,0,0,1,0,0"))
                  (rule "add_literals" (formula "17") (term "0,0,1,0,0"))
                  (rule "inEqSimp_sepPosMonomial0" (formula "17") (term "1,0,0"))
                  (rule "mul_literals" (formula "17") (term "1,1,0,0"))
                  (rule "inEqSimp_notLeq" (formula "17") (term "0,0,0"))
                  (rule "polySimp_rightDist" (formula "17") (term "1,0,0,0,0,0"))
                  (rule "mul_literals" (formula "17") (term "0,1,0,0,0,0,0"))
                  (rule "polySimp_addAssoc" (formula "17") (term "0,0,0,0,0"))
                  (rule "add_literals" (formula "17") (term "0,0,0,0,0,0"))
                  (rule "add_zero_left" (formula "17") (term "0,0,0,0,0"))
                  (rule "inEqSimp_sepPosMonomial1" (formula "17") (term "0,0,0"))
                  (rule "polySimp_mulLiterals" (formula "17") (term "1,0,0,0"))
                  (rule "polySimp_elimOne" (formula "17") (term "1,0,0,0"))
                  (rule "nnf_notAnd" (formula "6") (term "0,0"))
                  (rule "inEqSimp_notLeq" (formula "6") (term "0,0,0"))
                  (rule "polySimp_rightDist" (formula "6") (term "1,0,0,0,0,0"))
                  (rule "mul_literals" (formula "6") (term "0,1,0,0,0,0,0"))
                  (rule "polySimp_addAssoc" (formula "6") (term "0,0,0,0,0"))
                  (rule "add_literals" (formula "6") (term "0,0,0,0,0,0"))
                  (rule "add_zero_left" (formula "6") (term "0,0,0,0,0"))
                  (rule "inEqSimp_sepPosMonomial1" (formula "6") (term "0,0,0"))
                  (rule "polySimp_mulLiterals" (formula "6") (term "1,0,0,0"))
                  (rule "polySimp_elimOne" (formula "6") (term "1,0,0,0"))
                  (rule "inEqSimp_notGeq" (formula "6") (term "1,0,0"))
                  (rule "mul_literals" (formula "6") (term "1,0,0,1,0,0"))
                  (rule "add_literals" (formula "6") (term "0,0,1,0,0"))
                  (rule "inEqSimp_sepPosMonomial0" (formula "6") (term "1,0,0"))
                  (rule "mul_literals" (formula "6") (term "1,1,0,0"))
                  (rule "nnf_notAnd" (formula "22") (term "0,0"))
                  (rule "inEqSimp_notLeq" (formula "22") (term "0,0,0"))
                  (rule "polySimp_rightDist" (formula "22") (term "1,0,0,0,0,0"))
                  (rule "mul_literals" (formula "22") (term "0,1,0,0,0,0,0"))
                  (rule "polySimp_addAssoc" (formula "22") (term "0,0,0,0,0"))
                  (rule "add_literals" (formula "22") (term "0,0,0,0,0,0"))
                  (rule "add_zero_left" (formula "22") (term "0,0,0,0,0"))
                  (rule "inEqSimp_sepPosMonomial1" (formula "22") (term "0,0,0"))
                  (rule "polySimp_mulLiterals" (formula "22") (term "1,0,0,0"))
                  (rule "polySimp_elimOne" (formula "22") (term "1,0,0,0"))
                  (rule "inEqSimp_notGeq" (formula "22") (term "1,0,0"))
                  (rule "times_zero_1" (formula "22") (term "1,0,0,1,0,0"))
                  (rule "add_literals" (formula "22") (term "0,0,1,0,0"))
                  (rule "inEqSimp_sepPosMonomial0" (formula "22") (term "1,0,0"))
                  (rule "mul_literals" (formula "22") (term "1,1,0,0"))
                  (rule "Class_invariant_axiom_for_org_apache_commons_csv_CSVFormat" (formula "36"))
                  (rule "replaceKnownSelect_taclet000_21" (formula "36") (term "0,0"))
                  (rule "replaceKnownAuxiliaryConstant_taclet000_22" (formula "36") (term "0,0"))
                  (rule "notRight" (formula "36"))
                  (rule "close" (formula "35") (ifseqformula "1"))
               )
               (branch "Case 2"
                  (rule "nonNull" (formula "36") (inst "i=i") (userinteraction))
                  (rule "andRight" (formula "36"))
                  (branch
                     (rule "notRight" (formula "36"))
                     (rule "close" (formula "25") (ifseqformula "1"))
                  )
                  (branch "Case 2"
                     (rule "impRight" (formula "36"))
                     (rule "allRight" (formula "37") (inst "sk=i_0") (userinteraction))
                     (rule "impRight" (formula "37") (userinteraction))
                     (rule "sub_literals" (formula "38") (term "2"))
                      (builtin "One Step Simplification" (formula "38"))
                     (rule "greater_literals" (formula "2"))
                     (rule "true_left" (formula "2"))
                     (rule "andLeft" (formula "1"))
                     (rule "notRight" (formula "38"))
                     (rule "inEqSimp_ltToLeq" (formula "20") (term "0,0,0"))
                     (rule "polySimp_mulComm0" (formula "20") (term "1,0,0,0,0,0"))
                     (rule "inEqSimp_ltToLeq" (formula "25") (term "0,0,0"))
                     (rule "polySimp_mulComm0" (formula "25") (term "1,0,0,0,0,0"))
                     (rule "inEqSimp_ltToLeq" (formula "9") (term "0,0,0"))
                     (rule "polySimp_mulComm0" (formula "9") (term "1,0,0,0,0,0"))
                     (rule "inEqSimp_ltToLeq" (formula "3"))
                     (rule "polySimp_mulComm0" (formula "3") (term "1,0,0"))
                     (rule "polySimp_addComm1" (formula "3") (term "0"))
                     (rule "inEqSimp_commuteLeq" (formula "2"))
                     (rule "inEqSimp_sepPosMonomial0" (formula "20") (term "0,0,0"))
                     (rule "polySimp_mulComm0" (formula "20") (term "1,0,0,0"))
                     (rule "polySimp_rightDist" (formula "20") (term "1,0,0,0"))
                     (rule "polySimp_mulLiterals" (formula "20") (term "1,1,0,0,0"))
                     (rule "mul_literals" (formula "20") (term "0,1,0,0,0"))
                     (rule "polySimp_elimOne" (formula "20") (term "1,1,0,0,0"))
                     (rule "inEqSimp_sepPosMonomial0" (formula "25") (term "0,0,0"))
                     (rule "polySimp_mulComm0" (formula "25") (term "1,0,0,0"))
                     (rule "polySimp_rightDist" (formula "25") (term "1,0,0,0"))
                     (rule "mul_literals" (formula "25") (term "0,1,0,0,0"))
                     (rule "polySimp_mulLiterals" (formula "25") (term "1,1,0,0,0"))
                     (rule "polySimp_elimOne" (formula "25") (term "1,1,0,0,0"))
                     (rule "inEqSimp_sepPosMonomial0" (formula "9") (term "0,0,0"))
                     (rule "polySimp_mulComm0" (formula "9") (term "1,0,0,0"))
                     (rule "polySimp_rightDist" (formula "9") (term "1,0,0,0"))
                     (rule "polySimp_mulLiterals" (formula "9") (term "1,1,0,0,0"))
                     (rule "mul_literals" (formula "9") (term "0,1,0,0,0"))
                     (rule "polySimp_elimOne" (formula "9") (term "1,1,0,0,0"))
                     (rule "inEqSimp_sepNegMonomial0" (formula "3"))
                     (rule "polySimp_mulLiterals" (formula "3") (term "0"))
                     (rule "polySimp_elimOne" (formula "3") (term "0"))
                     (rule "pullOutSelect" (formula "1") (term "0") (inst "selectSK=arr_0"))
                     (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "24"))
                      (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "28")))
                     (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,0,0") (ifseqformula "17"))
                     (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,0,0,0") (ifseqformula "13"))
                     (rule "ifthenelse_negated" (formula "1") (term "0"))
                     (rule "narrowSelectArrayType" (formula "1") (term "2,0") (ifseqformula "23") (ifseqformula "28"))
                     (rule "applyEq" (formula "1") (term "1") (ifseqformula "2"))
                     (rule "ifEqualsNull" (formula "1"))
                     (rule "pullOutSelect" (formula "1") (term "0,1,0") (inst "selectSK=arr_1"))
                     (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "18"))
                      (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "29")))
                     (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,0,0") (ifseqformula "14"))
                     (rule "ifthenelse_negated" (formula "1") (term "0"))
                     (rule "narrowSelectArrayType" (formula "1") (term "2,0") (ifseqformula "17") (ifseqformula "29"))
                     (rule "pullOutSelect" (formula "1") (term "1,0") (inst "selectSK=arr_2"))
                     (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "15"))
                      (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "30")))
                     (rule "ifthenelse_negated" (formula "1") (term "0"))
                     (rule "narrowSelectArrayType" (formula "1") (term "1,0") (ifseqformula "8") (ifseqformula "30"))
                     (rule "narrowSelectArrayType" (formula "1") (term "2,0") (ifseqformula "14") (ifseqformula "30"))
                     (rule "nnf_imp2or" (formula "23") (term "0"))
                     (rule "nnf_imp2or" (formula "28") (term "0"))
                     (rule "nnf_imp2or" (formula "12") (term "0"))
                     (rule "nnf_notAnd" (formula "23") (term "0,0"))
                     (rule "inEqSimp_notLeq" (formula "23") (term "0,0,0"))
                     (rule "polySimp_rightDist" (formula "23") (term "1,0,0,0,0,0"))
                     (rule "mul_literals" (formula "23") (term "0,1,0,0,0,0,0"))
                     (rule "polySimp_addAssoc" (formula "23") (term "0,0,0,0,0"))
                     (rule "add_literals" (formula "23") (term "0,0,0,0,0,0"))
                     (rule "add_zero_left" (formula "23") (term "0,0,0,0,0"))
                     (rule "inEqSimp_sepPosMonomial1" (formula "23") (term "0,0,0"))
                     (rule "polySimp_mulLiterals" (formula "23") (term "1,0,0,0"))
                     (rule "polySimp_elimOne" (formula "23") (term "1,0,0,0"))
                     (rule "inEqSimp_notGeq" (formula "23") (term "1,0,0"))
                     (rule "mul_literals" (formula "23") (term "1,0,0,1,0,0"))
                     (rule "add_literals" (formula "23") (term "0,0,1,0,0"))
                     (rule "inEqSimp_sepPosMonomial0" (formula "23") (term "1,0,0"))
                     (rule "mul_literals" (formula "23") (term "1,1,0,0"))
                     (rule "nnf_notAnd" (formula "28") (term "0,0"))
                     (rule "inEqSimp_notGeq" (formula "28") (term "1,0,0"))
                     (rule "mul_literals" (formula "28") (term "1,0,0,1,0,0"))
                     (rule "add_literals" (formula "28") (term "0,0,1,0,0"))
                     (rule "inEqSimp_sepPosMonomial0" (formula "28") (term "1,0,0"))
                     (rule "mul_literals" (formula "28") (term "1,1,0,0"))
                     (rule "inEqSimp_notLeq" (formula "28") (term "0,0,0"))
                     (rule "polySimp_rightDist" (formula "28") (term "1,0,0,0,0,0"))
                     (rule "mul_literals" (formula "28") (term "0,1,0,0,0,0,0"))
                     (rule "polySimp_addAssoc" (formula "28") (term "0,0,0,0,0"))
                     (rule "add_literals" (formula "28") (term "0,0,0,0,0,0"))
                     (rule "add_zero_left" (formula "28") (term "0,0,0,0,0"))
                     (rule "inEqSimp_sepPosMonomial1" (formula "28") (term "0,0,0"))
                     (rule "polySimp_mulLiterals" (formula "28") (term "1,0,0,0"))
                     (rule "polySimp_elimOne" (formula "28") (term "1,0,0,0"))
                     (rule "nnf_notAnd" (formula "12") (term "0,0"))
                     (rule "inEqSimp_notGeq" (formula "12") (term "1,0,0"))
                     (rule "mul_literals" (formula "12") (term "1,0,0,1,0,0"))
                     (rule "add_literals" (formula "12") (term "0,0,1,0,0"))
                     (rule "inEqSimp_sepPosMonomial0" (formula "12") (term "1,0,0"))
                     (rule "mul_literals" (formula "12") (term "1,1,0,0"))
                     (rule "inEqSimp_notLeq" (formula "12") (term "0,0,0"))
                     (rule "polySimp_rightDist" (formula "12") (term "1,0,0,0,0,0"))
                     (rule "mul_literals" (formula "12") (term "0,1,0,0,0,0,0"))
                     (rule "polySimp_addAssoc" (formula "12") (term "0,0,0,0,0"))
                     (rule "add_literals" (formula "12") (term "0,0,0,0,0,0"))
                     (rule "add_zero_left" (formula "12") (term "0,0,0,0,0"))
                     (rule "inEqSimp_sepPosMonomial1" (formula "12") (term "0,0,0"))
                     (rule "polySimp_mulLiterals" (formula "12") (term "1,0,0,0"))
                     (rule "polySimp_elimOne" (formula "12") (term "1,0,0,0"))
                     (rule "commute_or_2" (formula "3") (term "0,0"))
                     (rule "commute_or_2" (formula "23") (term "0"))
                     (rule "commute_or_2" (formula "3") (term "0,0,1"))
                     (rule "commute_or_2" (formula "28") (term "0"))
                     (rule "commute_or_2" (formula "12") (term "0"))
                     (rule "commute_or" (formula "23") (term "0,0"))
                     (rule "commute_or_2" (formula "23") (term "0"))
                     (rule "commute_or" (formula "28") (term "0,0"))
                     (rule "commute_or_2" (formula "28") (term "0"))
                     (rule "commute_or" (formula "12") (term "0,0"))
                     (rule "commute_or_2" (formula "12") (term "0"))
                     (rule "commute_and" (formula "3") (term "0"))
                     (rule "orLeft" (formula "3"))
                     (branch " arr_1«selectSK» = null ∧ ( result_252.<created> = TRUE ∨ result_252.<created>@anon_heap_toList«anonHeapFunction» = TRUE ∨ result_252.<created>@anon_heap_withDelimiter«anonHeapFunction» = TRUE)"
                        (rule "andLeft" (formula "3"))
                        (rule "applyEqRigid" (formula "2") (term "1") (ifseqformula "3"))
                        (rule "ifEqualsNull" (formula "2"))
                        (rule "commute_and" (formula "2") (term "0"))
                        (rule "orLeft" (formula "2"))
                        (branch " arr_2«selectSK» = null ∧ ( result_252.<created> = TRUE ∨ result_252.<created>@anon_heap_withDelimiter«anonHeapFunction» = TRUE)"
                           (rule "andLeft" (formula "2"))
                           (rule "applyEqRigid" (formula "1") (term "1") (ifseqformula "2"))
                           (rule "ifEqualsNull" (formula "1"))
                           (rule "cnf_rightDist" (formula "1"))
                           (rule "andLeft" (formula "1"))
                           (rule "commute_or" (formula "1"))
                           (rule "cnf_rightDist" (formula "2"))
                           (rule "andLeft" (formula "2"))
                           (rule "commute_or" (formula "2"))
                           (rule "cnf_rightDist" (formula "1"))
                            (builtin "One Step Simplification" (formula "1"))
                           (rule "commute_or" (formula "1"))
                           (rule "ifthenelse_split" (formula "25") (term "0"))
                           (branch "result_251.<created> = TRUE TRUE"
                              (rule "applyEqReverse" (formula "27") (term "1,0") (ifseqformula "26"))
                              (rule "hideAuxiliaryEq" (formula "26"))
                              (rule "replace_known_left" (formula "26") (term "0,0,0") (ifseqformula "25"))
                               (builtin "One Step Simplification" (formula "26"))
                              (rule "applyEqReverse" (formula "27") (term "0,1,1,0") (ifseqformula "26"))
                              (rule "applyEqReverse" (formula "27") (term "0,0,0,0,0,0") (ifseqformula "26"))
                              (rule "hideAuxiliaryEq" (formula "26"))
                              (rule "replace_known_left" (formula "24") (term "0,0") (ifseqformula "25"))
                               (builtin "One Step Simplification" (formula "24"))
                              (rule "true_left" (formula "24"))
                              (rule "cut_direct" (formula "29") (term "0,0,0"))
                              (branch "CUT: result_252.<created> = TRUE TRUE"
                                  (builtin "One Step Simplification" (formula "30"))
                                 (rule "true_left" (formula "30"))
                                 (rule "replace_known_left" (formula "5") (term "0") (ifseqformula "29"))
                                  (builtin "One Step Simplification" (formula "5"))
                                 (rule "true_left" (formula "5"))
                                 (rule "replace_known_left" (formula "1") (term "0,0") (ifseqformula "28"))
                                  (builtin "One Step Simplification" (formula "1"))
                                 (rule "replace_known_left" (formula "2") (term "0") (ifseqformula "28"))
                                  (builtin "One Step Simplification" (formula "2"))
                                 (rule "true_left" (formula "2"))
                                 (rule "replace_known_left" (formula "2") (term "0") (ifseqformula "1"))
                                  (builtin "One Step Simplification" (formula "2"))
                                 (rule "true_left" (formula "2"))
                                 (rule "replace_known_left" (formula "4") (term "0,0") (ifseqformula "26"))
                                  (builtin "One Step Simplification" (formula "4"))
                                 (rule "true_left" (formula "4"))
                                 (rule "cut_direct" (formula "17") (term "0"))
                                 (branch "CUT: result_250.<created> = TRUE TRUE"
                                     (builtin "One Step Simplification" (formula "18"))
                                    (rule "true_left" (formula "18"))
                                    (rule "cut_direct" (formula "7") (term "0"))
                                    (branch "CUT: strPool( 〈'P'〉 ∘ ( 〈'a'〉 ∘ ( 〈's'〉 ∘ ( 〈's'〉 ∘ (〈'w'〉 ∘ (〈'o'〉 ∘ (〈'r'〉 ∘ 〈'd'〉))))))).<created> = TRUE TRUE"
                                        (builtin "One Step Simplification" (formula "8"))
                                       (rule "true_left" (formula "8"))
                                       (rule "arrayLengthIsAnInt" (formula "6") (term "0"))
                                       (rule "expand_inInt" (formula "6"))
                                       (rule "replace_int_MIN" (formula "6") (term "0,1"))
                                       (rule "replace_int_MAX" (formula "6") (term "1,0"))
                                       (rule "andLeft" (formula "6"))
                                       (rule "inEqSimp_commuteLeq" (formula "7"))
                                       (rule "inEqSimp_exactShadow3" (formula "8") (ifseqformula "6"))
                                       (rule "polySimp_rightDist" (formula "8") (term "0,0"))
                                       (rule "mul_literals" (formula "8") (term "0,0,0"))
                                       (rule "polySimp_addComm1" (formula "8") (term "0"))
                                       (rule "add_literals" (formula "8") (term "0,0"))
                                       (rule "inEqSimp_sepNegMonomial1" (formula "8"))
                                       (rule "polySimp_mulLiterals" (formula "8") (term "0"))
                                       (rule "polySimp_elimOne" (formula "8") (term "0"))
                                       (rule "arrayLengthNotNegative" (formula "9") (term "0"))
                                       (rule "inEqSimp_subsumption1" (formula "7") (ifseqformula "9"))
                                       (rule "leq_literals" (formula "7") (term "0"))
                                        (builtin "One Step Simplification" (formula "7"))
                                       (rule "true_left" (formula "7"))
                                       (rule "allLeft" (formula "29") (inst "t=i_0"))
                                       (rule "replaceKnownSelect_taclet1102000_32" (formula "29") (term "0,0,0,0"))
                                       (rule "replace_known_left" (formula "29") (term "0,0,0") (ifseqformula "4"))
                                        (builtin "One Step Simplification" (formula "29"))
                                       (rule "inEqSimp_commuteGeq" (formula "29") (term "1"))
                                       (rule "inEqSimp_contradInEq1" (formula "29") (term "0") (ifseqformula "5"))
                                       (rule "qeq_literals" (formula "29") (term "0,0"))
                                        (builtin "One Step Simplification" (formula "29"))
                                       (rule "inEqSimp_contradInEq0" (formula "9") (ifseqformula "29"))
                                       (rule "andLeft" (formula "9"))
                                       (rule "inEqSimp_homoInEq1" (formula "9"))
                                       (rule "polySimp_pullOutFactor1b" (formula "9") (term "0"))
                                       (rule "add_literals" (formula "9") (term "1,1,0"))
                                       (rule "times_zero_1" (formula "9") (term "1,0"))
                                       (rule "add_literals" (formula "9") (term "0"))
                                       (rule "leq_literals" (formula "9"))
                                       (rule "closeFalse" (formula "9"))
                                    )
                                    (branch "CUT: strPool( 〈'P'〉 ∘ ( 〈'a'〉 ∘ ( 〈's'〉 ∘ ( 〈's'〉 ∘ (〈'w'〉 ∘ (〈'o'〉 ∘ (〈'r'〉 ∘ 〈'd'〉))))))).<created> = TRUE FALSE"
                                        (builtin "One Step Simplification" (formula "7"))
                                       (rule "arrayLengthIsAnInt" (formula "6") (term "0"))
                                       (rule "expand_inInt" (formula "6"))
                                       (rule "replace_int_MIN" (formula "6") (term "0,1"))
                                       (rule "replace_int_MAX" (formula "6") (term "1,0"))
                                       (rule "andLeft" (formula "6"))
                                       (rule "inEqSimp_commuteLeq" (formula "7"))
                                       (rule "inEqSimp_exactShadow3" (formula "8") (ifseqformula "6"))
                                       (rule "polySimp_rightDist" (formula "8") (term "0,0"))
                                       (rule "mul_literals" (formula "8") (term "0,0,0"))
                                       (rule "polySimp_addComm1" (formula "8") (term "0"))
                                       (rule "add_literals" (formula "8") (term "0,0"))
                                       (rule "inEqSimp_sepNegMonomial1" (formula "8"))
                                       (rule "polySimp_mulLiterals" (formula "8") (term "0"))
                                       (rule "polySimp_elimOne" (formula "8") (term "0"))
                                       (rule "arrayLengthNotNegative" (formula "9") (term "0"))
                                       (rule "inEqSimp_subsumption1" (formula "7") (ifseqformula "9"))
                                       (rule "leq_literals" (formula "7") (term "0"))
                                        (builtin "One Step Simplification" (formula "7"))
                                       (rule "true_left" (formula "7"))
                                       (rule "allLeft" (formula "29") (inst "t=i_0"))
                                       (rule "replaceKnownSelect_taclet1102000_32" (formula "29") (term "0,0,0,0"))
                                       (rule "replace_known_left" (formula "29") (term "0,0,0") (ifseqformula "4"))
                                        (builtin "One Step Simplification" (formula "29"))
                                       (rule "inEqSimp_commuteGeq" (formula "29") (term "1"))
                                       (rule "inEqSimp_contradInEq1" (formula "29") (term "1") (ifseqformula "9"))
                                       (rule "inEqSimp_homoInEq1" (formula "29") (term "0,1"))
                                       (rule "polySimp_pullOutFactor1b" (formula "29") (term "0,0,1"))
                                       (rule "add_literals" (formula "29") (term "1,1,0,0,1"))
                                       (rule "times_zero_1" (formula "29") (term "1,0,0,1"))
                                       (rule "add_literals" (formula "29") (term "0,0,1"))
                                       (rule "leq_literals" (formula "29") (term "0,1"))
                                        (builtin "One Step Simplification" (formula "29"))
                                       (rule "inEqSimp_subsumption0" (formula "7") (ifseqformula "29"))
                                       (rule "leq_literals" (formula "7") (term "0"))
                                        (builtin "One Step Simplification" (formula "7"))
                                       (rule "true_left" (formula "7"))
                                       (rule "inEqSimp_contradInEq1" (formula "28") (ifseqformula "5"))
                                       (rule "qeq_literals" (formula "28") (term "0"))
                                        (builtin "One Step Simplification" (formula "28"))
                                       (rule "closeFalse" (formula "28"))
                                    )
                                 )
                                 (branch "CUT: result_250.<created> = TRUE FALSE"
                                     (builtin "One Step Simplification" (formula "17"))
                                    (rule "cut_direct" (formula "7") (term "0"))
                                    (branch "CUT: strPool( 〈'P'〉 ∘ ( 〈'a'〉 ∘ ( 〈's'〉 ∘ ( 〈's'〉 ∘ (〈'w'〉 ∘ (〈'o'〉 ∘ (〈'r'〉 ∘ 〈'd'〉))))))).<created> = TRUE TRUE"
                                        (builtin "One Step Simplification" (formula "8"))
                                       (rule "true_left" (formula "8"))
                                       (rule "arrayLengthIsAnInt" (formula "6") (term "0"))
                                       (rule "expand_inInt" (formula "6"))
                                       (rule "replace_int_MAX" (formula "6") (term "1,0"))
                                       (rule "replace_int_MIN" (formula "6") (term "0,1"))
                                       (rule "andLeft" (formula "6"))
                                       (rule "inEqSimp_commuteLeq" (formula "7"))
                                       (rule "inEqSimp_exactShadow3" (formula "8") (ifseqformula "6"))
                                       (rule "polySimp_rightDist" (formula "8") (term "0,0"))
                                       (rule "mul_literals" (formula "8") (term "0,0,0"))
                                       (rule "polySimp_addComm1" (formula "8") (term "0"))
                                       (rule "add_literals" (formula "8") (term "0,0"))
                                       (rule "inEqSimp_sepNegMonomial1" (formula "8"))
                                       (rule "polySimp_mulLiterals" (formula "8") (term "0"))
                                       (rule "polySimp_elimOne" (formula "8") (term "0"))
                                       (rule "arrayLengthNotNegative" (formula "9") (term "0"))
                                       (rule "inEqSimp_subsumption1" (formula "7") (ifseqformula "9"))
                                       (rule "leq_literals" (formula "7") (term "0"))
                                        (builtin "One Step Simplification" (formula "7"))
                                       (rule "true_left" (formula "7"))
                                       (rule "allLeft" (formula "29") (inst "t=i_0"))
                                       (rule "replaceKnownSelect_taclet1102000_32" (formula "29") (term "0,0,0,0"))
                                       (rule "replace_known_left" (formula "29") (term "0,0,0") (ifseqformula "4"))
                                        (builtin "One Step Simplification" (formula "29"))
                                       (rule "inEqSimp_commuteGeq" (formula "29") (term "1"))
                                       (rule "inEqSimp_contradInEq1" (formula "29") (term "0") (ifseqformula "5"))
                                       (rule "qeq_literals" (formula "29") (term "0,0"))
                                        (builtin "One Step Simplification" (formula "29"))
                                       (rule "inEqSimp_contradInEq1" (formula "29") (ifseqformula "9"))
                                       (rule "andLeft" (formula "29"))
                                       (rule "inEqSimp_homoInEq1" (formula "29"))
                                       (rule "polySimp_pullOutFactor1b" (formula "29") (term "0"))
                                       (rule "add_literals" (formula "29") (term "1,1,0"))
                                       (rule "times_zero_1" (formula "29") (term "1,0"))
                                       (rule "add_literals" (formula "29") (term "0"))
                                       (rule "leq_literals" (formula "29"))
                                       (rule "closeFalse" (formula "29"))
                                    )
                                    (branch "CUT: strPool( 〈'P'〉 ∘ ( 〈'a'〉 ∘ ( 〈's'〉 ∘ ( 〈's'〉 ∘ (〈'w'〉 ∘ (〈'o'〉 ∘ (〈'r'〉 ∘ 〈'd'〉))))))).<created> = TRUE FALSE"
                                        (builtin "One Step Simplification" (formula "7"))
                                       (rule "arrayLengthIsAnInt" (formula "6") (term "0"))
                                       (rule "expand_inInt" (formula "6"))
                                       (rule "replace_int_MIN" (formula "6") (term "0,1"))
                                       (rule "replace_int_MAX" (formula "6") (term "1,0"))
                                       (rule "andLeft" (formula "6"))
                                       (rule "inEqSimp_commuteLeq" (formula "7"))
                                       (rule "inEqSimp_exactShadow3" (formula "8") (ifseqformula "6"))
                                       (rule "polySimp_rightDist" (formula "8") (term "0,0"))
                                       (rule "mul_literals" (formula "8") (term "0,0,0"))
                                       (rule "polySimp_addComm1" (formula "8") (term "0"))
                                       (rule "add_literals" (formula "8") (term "0,0"))
                                       (rule "inEqSimp_sepNegMonomial1" (formula "8"))
                                       (rule "polySimp_mulLiterals" (formula "8") (term "0"))
                                       (rule "polySimp_elimOne" (formula "8") (term "0"))
                                       (rule "arrayLengthNotNegative" (formula "9") (term "0"))
                                       (rule "inEqSimp_subsumption1" (formula "7") (ifseqformula "9"))
                                       (rule "leq_literals" (formula "7") (term "0"))
                                        (builtin "One Step Simplification" (formula "7"))
                                       (rule "true_left" (formula "7"))
                                       (rule "allLeft" (formula "29") (inst "t=i_0"))
                                       (rule "replaceKnownSelect_taclet1102000_32" (formula "29") (term "0,0,0,0"))
                                       (rule "replace_known_left" (formula "29") (term "0,0,0") (ifseqformula "4"))
                                        (builtin "One Step Simplification" (formula "29"))
                                       (rule "inEqSimp_commuteGeq" (formula "29") (term "1"))
                                       (rule "inEqSimp_contradInEq1" (formula "29") (term "1") (ifseqformula "9"))
                                       (rule "inEqSimp_homoInEq1" (formula "29") (term "0,1"))
                                       (rule "polySimp_pullOutFactor1b" (formula "29") (term "0,0,1"))
                                       (rule "add_literals" (formula "29") (term "1,1,0,0,1"))
                                       (rule "times_zero_1" (formula "29") (term "1,0,0,1"))
                                       (rule "add_zero_right" (formula "29") (term "0,0,1"))
                                       (rule "leq_literals" (formula "29") (term "0,1"))
                                        (builtin "One Step Simplification" (formula "29"))
                                       (rule "inEqSimp_contradInEq0" (formula "5") (ifseqformula "29"))
                                       (rule "qeq_literals" (formula "5") (term "0"))
                                        (builtin "One Step Simplification" (formula "5"))
                                       (rule "closeFalse" (formula "5"))
                                    )
                                 )
                              )
                              (branch "CUT: result_252.<created> = TRUE FALSE"
                                  (builtin "One Step Simplification" (formula "29"))
                                 (rule "replace_known_right" (formula "1") (term "0,0") (ifseqformula "32"))
                                  (builtin "One Step Simplification" (formula "1"))
                                 (rule "true_left" (formula "1"))
                                 (rule "replace_known_right" (formula "4") (term "0") (ifseqformula "31"))
                                  (builtin "One Step Simplification" (formula "4"))
                                 (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "31"))
                                  (builtin "One Step Simplification" (formula "1"))
                                 (rule "replace_known_left" (formula "2") (term "1") (ifseqformula "1"))
                                  (builtin "One Step Simplification" (formula "2"))
                                 (rule "true_left" (formula "2"))
                                 (rule "replace_known_left" (formula "5") (term "1") (ifseqformula "3"))
                                  (builtin "One Step Simplification" (formula "5") (ifInst ""  (formula "30")))
                                 (rule "true_left" (formula "5"))
                                 (rule "replace_known_left" (formula "26") (term "1") (ifseqformula "3"))
                                  (builtin "One Step Simplification" (formula "26"))
                                 (rule "true_left" (formula "26"))
                                 (rule "cut_direct" (formula "18") (term "0"))
                                 (branch "CUT: result_250.<created> = TRUE TRUE"
                                     (builtin "One Step Simplification" (formula "19"))
                                    (rule "true_left" (formula "19"))
                                    (rule "cut_direct" (formula "8") (term "0"))
                                    (branch "CUT: strPool( 〈'P'〉 ∘ ( 〈'a'〉 ∘ ( 〈's'〉 ∘ ( 〈's'〉 ∘ (〈'w'〉 ∘ (〈'o'〉 ∘ (〈'r'〉 ∘ 〈'd'〉))))))).<created> = TRUE TRUE"
                                        (builtin "One Step Simplification" (formula "9"))
                                       (rule "true_left" (formula "9"))
                                       (rule "arrayLengthIsAnInt" (formula "7") (term "0"))
                                       (rule "expand_inInt" (formula "7"))
                                       (rule "replace_int_MAX" (formula "7") (term "1,0"))
                                       (rule "replace_int_MIN" (formula "7") (term "0,1"))
                                       (rule "andLeft" (formula "7"))
                                       (rule "inEqSimp_commuteLeq" (formula "8"))
                                       (rule "inEqSimp_exactShadow3" (formula "9") (ifseqformula "7"))
                                       (rule "polySimp_rightDist" (formula "9") (term "0,0"))
                                       (rule "mul_literals" (formula "9") (term "0,0,0"))
                                       (rule "polySimp_addComm1" (formula "9") (term "0"))
                                       (rule "add_literals" (formula "9") (term "0,0"))
                                       (rule "inEqSimp_sepNegMonomial1" (formula "9"))
                                       (rule "polySimp_mulLiterals" (formula "9") (term "0"))
                                       (rule "polySimp_elimOne" (formula "9") (term "0"))
                                       (rule "arrayLengthNotNegative" (formula "10") (term "0"))
                                       (rule "inEqSimp_subsumption1" (formula "8") (ifseqformula "10"))
                                       (rule "leq_literals" (formula "8") (term "0"))
                                        (builtin "One Step Simplification" (formula "8"))
                                       (rule "true_left" (formula "8"))
                                       (rule "allLeft" (formula "29") (inst "t=i_0"))
                                       (rule "replaceKnownSelect_taclet1102000_32" (formula "29") (term "0,0,0,0"))
                                       (rule "replace_known_left" (formula "29") (term "0,0,0") (ifseqformula "5"))
                                        (builtin "One Step Simplification" (formula "29"))
                                       (rule "inEqSimp_commuteGeq" (formula "29") (term "1"))
                                       (rule "inEqSimp_contradInEq1" (formula "29") (term "1") (ifseqformula "10"))
                                       (rule "inEqSimp_homoInEq1" (formula "29") (term "0,1"))
                                       (rule "polySimp_pullOutFactor1b" (formula "29") (term "0,0,1"))
                                       (rule "add_literals" (formula "29") (term "1,1,0,0,1"))
                                       (rule "times_zero_1" (formula "29") (term "1,0,0,1"))
                                       (rule "add_literals" (formula "29") (term "0,0,1"))
                                       (rule "leq_literals" (formula "29") (term "0,1"))
                                        (builtin "One Step Simplification" (formula "29"))
                                       (rule "inEqSimp_contradInEq0" (formula "6") (ifseqformula "29"))
                                       (rule "qeq_literals" (formula "6") (term "0"))
                                        (builtin "One Step Simplification" (formula "6"))
                                       (rule "closeFalse" (formula "6"))
                                    )
                                    (branch "CUT: strPool( 〈'P'〉 ∘ ( 〈'a'〉 ∘ ( 〈's'〉 ∘ ( 〈's'〉 ∘ (〈'w'〉 ∘ (〈'o'〉 ∘ (〈'r'〉 ∘ 〈'd'〉))))))).<created> = TRUE FALSE"
                                        (builtin "One Step Simplification" (formula "8"))
                                       (rule "arrayLengthIsAnInt" (formula "7") (term "0"))
                                       (rule "expand_inInt" (formula "7"))
                                       (rule "replace_int_MIN" (formula "7") (term "0,1"))
                                       (rule "replace_int_MAX" (formula "7") (term "1,0"))
                                       (rule "andLeft" (formula "7"))
                                       (rule "inEqSimp_commuteLeq" (formula "8"))
                                       (rule "inEqSimp_exactShadow3" (formula "9") (ifseqformula "7"))
                                       (rule "polySimp_rightDist" (formula "9") (term "0,0"))
                                       (rule "mul_literals" (formula "9") (term "0,0,0"))
                                       (rule "polySimp_addComm1" (formula "9") (term "0"))
                                       (rule "add_literals" (formula "9") (term "0,0"))
                                       (rule "inEqSimp_sepNegMonomial1" (formula "9"))
                                       (rule "polySimp_mulLiterals" (formula "9") (term "0"))
                                       (rule "polySimp_elimOne" (formula "9") (term "0"))
                                       (rule "arrayLengthNotNegative" (formula "10") (term "0"))
                                       (rule "inEqSimp_subsumption1" (formula "8") (ifseqformula "10"))
                                       (rule "leq_literals" (formula "8") (term "0"))
                                        (builtin "One Step Simplification" (formula "8"))
                                       (rule "true_left" (formula "8"))
                                       (rule "allLeft" (formula "29") (inst "t=i_0"))
                                       (rule "replaceKnownSelect_taclet1102000_32" (formula "29") (term "0,0,0,0"))
                                       (rule "replace_known_left" (formula "29") (term "0,0,0") (ifseqformula "5"))
                                        (builtin "One Step Simplification" (formula "29"))
                                       (rule "inEqSimp_commuteGeq" (formula "29") (term "1"))
                                       (rule "inEqSimp_contradInEq1" (formula "29") (term "0") (ifseqformula "6"))
                                       (rule "qeq_literals" (formula "29") (term "0,0"))
                                        (builtin "One Step Simplification" (formula "29"))
                                       (rule "inEqSimp_contradInEq0" (formula "10") (ifseqformula "29"))
                                       (rule "andLeft" (formula "10"))
                                       (rule "inEqSimp_homoInEq1" (formula "10"))
                                       (rule "polySimp_pullOutFactor1b" (formula "10") (term "0"))
                                       (rule "add_literals" (formula "10") (term "1,1,0"))
                                       (rule "times_zero_1" (formula "10") (term "1,0"))
                                       (rule "add_literals" (formula "10") (term "0"))
                                       (rule "leq_literals" (formula "10"))
                                       (rule "closeFalse" (formula "10"))
                                    )
                                 )
                                 (branch "CUT: result_250.<created> = TRUE FALSE"
                                     (builtin "One Step Simplification" (formula "18"))
                                    (rule "cut_direct" (formula "8") (term "0"))
                                    (branch "CUT: strPool( 〈'P'〉 ∘ ( 〈'a'〉 ∘ ( 〈's'〉 ∘ ( 〈's'〉 ∘ (〈'w'〉 ∘ (〈'o'〉 ∘ (〈'r'〉 ∘ 〈'd'〉))))))).<created> = TRUE TRUE"
                                        (builtin "One Step Simplification" (formula "9"))
                                       (rule "true_left" (formula "9"))
                                       (rule "arrayLengthIsAnInt" (formula "7") (term "0"))
                                       (rule "expand_inInt" (formula "7"))
                                       (rule "replace_int_MIN" (formula "7") (term "0,1"))
                                       (rule "replace_int_MAX" (formula "7") (term "1,0"))
                                       (rule "andLeft" (formula "7"))
                                       (rule "inEqSimp_commuteLeq" (formula "8"))
                                       (rule "inEqSimp_exactShadow3" (formula "9") (ifseqformula "7"))
                                       (rule "polySimp_rightDist" (formula "9") (term "0,0"))
                                       (rule "mul_literals" (formula "9") (term "0,0,0"))
                                       (rule "polySimp_addComm1" (formula "9") (term "0"))
                                       (rule "add_literals" (formula "9") (term "0,0"))
                                       (rule "inEqSimp_sepNegMonomial1" (formula "9"))
                                       (rule "polySimp_mulLiterals" (formula "9") (term "0"))
                                       (rule "polySimp_elimOne" (formula "9") (term "0"))
                                       (rule "arrayLengthNotNegative" (formula "10") (term "0"))
                                       (rule "inEqSimp_subsumption1" (formula "8") (ifseqformula "10"))
                                       (rule "leq_literals" (formula "8") (term "0"))
                                        (builtin "One Step Simplification" (formula "8"))
                                       (rule "true_left" (formula "8"))
                                       (rule "allLeft" (formula "29") (inst "t=i_0"))
                                       (rule "replaceKnownSelect_taclet1102000_32" (formula "29") (term "0,0,0,0"))
                                       (rule "replace_known_left" (formula "29") (term "0,0,0") (ifseqformula "5"))
                                        (builtin "One Step Simplification" (formula "29"))
                                       (rule "inEqSimp_commuteGeq" (formula "29") (term "1"))
                                       (rule "inEqSimp_contradInEq1" (formula "29") (term "1") (ifseqformula "10"))
                                       (rule "inEqSimp_homoInEq1" (formula "29") (term "0,1"))
                                       (rule "polySimp_pullOutFactor1b" (formula "29") (term "0,0,1"))
                                       (rule "add_literals" (formula "29") (term "1,1,0,0,1"))
                                       (rule "times_zero_1" (formula "29") (term "1,0,0,1"))
                                       (rule "add_zero_right" (formula "29") (term "0,0,1"))
                                       (rule "leq_literals" (formula "29") (term "0,1"))
                                        (builtin "One Step Simplification" (formula "29"))
                                       (rule "inEqSimp_subsumption0" (formula "8") (ifseqformula "29"))
                                       (rule "leq_literals" (formula "8") (term "0"))
                                        (builtin "One Step Simplification" (formula "8"))
                                       (rule "true_left" (formula "8"))
                                       (rule "inEqSimp_contradInEq0" (formula "6") (ifseqformula "28"))
                                       (rule "qeq_literals" (formula "6") (term "0"))
                                        (builtin "One Step Simplification" (formula "6"))
                                       (rule "closeFalse" (formula "6"))
                                    )
                                    (branch "CUT: strPool( 〈'P'〉 ∘ ( 〈'a'〉 ∘ ( 〈's'〉 ∘ ( 〈's'〉 ∘ (〈'w'〉 ∘ (〈'o'〉 ∘ (〈'r'〉 ∘ 〈'd'〉))))))).<created> = TRUE FALSE"
                                        (builtin "One Step Simplification" (formula "8"))
                                       (rule "arrayLengthIsAnInt" (formula "7") (term "0"))
                                       (rule "expand_inInt" (formula "7"))
                                       (rule "replace_int_MAX" (formula "7") (term "1,0"))
                                       (rule "replace_int_MIN" (formula "7") (term "0,1"))
                                       (rule "andLeft" (formula "7"))
                                       (rule "inEqSimp_commuteLeq" (formula "8"))
                                       (rule "inEqSimp_exactShadow3" (formula "9") (ifseqformula "7"))
                                       (rule "polySimp_rightDist" (formula "9") (term "0,0"))
                                       (rule "mul_literals" (formula "9") (term "0,0,0"))
                                       (rule "polySimp_addComm1" (formula "9") (term "0"))
                                       (rule "add_literals" (formula "9") (term "0,0"))
                                       (rule "inEqSimp_sepNegMonomial1" (formula "9"))
                                       (rule "polySimp_mulLiterals" (formula "9") (term "0"))
                                       (rule "polySimp_elimOne" (formula "9") (term "0"))
                                       (rule "arrayLengthNotNegative" (formula "10") (term "0"))
                                       (rule "inEqSimp_subsumption1" (formula "8") (ifseqformula "10"))
                                       (rule "leq_literals" (formula "8") (term "0"))
                                        (builtin "One Step Simplification" (formula "8"))
                                       (rule "true_left" (formula "8"))
                                       (rule "allLeft" (formula "29") (inst "t=i_0"))
                                       (rule "replaceKnownSelect_taclet1102000_32" (formula "29") (term "0,0,0,0"))
                                       (rule "replace_known_left" (formula "29") (term "0,0,0") (ifseqformula "5"))
                                        (builtin "One Step Simplification" (formula "29"))
                                       (rule "inEqSimp_commuteGeq" (formula "29") (term "1"))
                                       (rule "inEqSimp_contradInEq1" (formula "29") (term "0") (ifseqformula "6"))
                                       (rule "qeq_literals" (formula "29") (term "0,0"))
                                        (builtin "One Step Simplification" (formula "29"))
                                       (rule "inEqSimp_contradInEq1" (formula "29") (ifseqformula "10"))
                                       (rule "andLeft" (formula "29"))
                                       (rule "inEqSimp_homoInEq1" (formula "29"))
                                       (rule "polySimp_pullOutFactor1b" (formula "29") (term "0"))
                                       (rule "add_literals" (formula "29") (term "1,1,0"))
                                       (rule "times_zero_1" (formula "29") (term "1,0"))
                                       (rule "add_literals" (formula "29") (term "0"))
                                       (rule "leq_literals" (formula "29"))
                                       (rule "closeFalse" (formula "29"))
                                    )
                                 )
                              )
                           )
                           (branch "result_251.<created> = TRUE FALSE"
                              (rule "applyEqReverse" (formula "26") (term "1,0") (ifseqformula "25"))
                              (rule "hideAuxiliaryEq" (formula "25"))
                              (rule "replace_known_right" (formula "25") (term "0,0,0") (ifseqformula "33"))
                               (builtin "One Step Simplification" (formula "25"))
                              (rule "replace_known_right" (formula "24") (term "0,0") (ifseqformula "33"))
                               (builtin "One Step Simplification" (formula "24"))
                              (rule "cut_direct" (formula "30") (term "0,0,0"))
                              (branch "CUT: result_252.<created> = TRUE TRUE"
                                  (builtin "One Step Simplification" (formula "31"))
                                 (rule "true_left" (formula "31"))
                                 (rule "replace_known_left" (formula "1") (term "0,0") (ifseqformula "30"))
                                  (builtin "One Step Simplification" (formula "1"))
                                 (rule "replace_known_left" (formula "2") (term "0") (ifseqformula "30"))
                                  (builtin "One Step Simplification" (formula "2"))
                                 (rule "true_left" (formula "2"))
                                 (rule "replace_known_left" (formula "4") (term "0") (ifseqformula "29"))
                                  (builtin "One Step Simplification" (formula "4"))
                                 (rule "true_left" (formula "4"))
                                 (rule "replace_known_left" (formula "2") (term "0") (ifseqformula "1"))
                                  (builtin "One Step Simplification" (formula "2"))
                                 (rule "true_left" (formula "2"))
                                 (rule "replace_known_left" (formula "4") (term "0,0") (ifseqformula "27"))
                                  (builtin "One Step Simplification" (formula "4"))
                                 (rule "true_left" (formula "4"))
                                 (rule "cut_direct" (formula "7") (term "0"))
                                 (branch "CUT: strPool( 〈'P'〉 ∘ ( 〈'a'〉 ∘ ( 〈's'〉 ∘ ( 〈's'〉 ∘ (〈'w'〉 ∘ (〈'o'〉 ∘ (〈'r'〉 ∘ 〈'd'〉))))))).<created> = TRUE TRUE"
                                     (builtin "One Step Simplification" (formula "8"))
                                    (rule "true_left" (formula "8"))
                                    (rule "cut_direct" (formula "17") (term "0"))
                                    (branch "CUT: result_250.<created> = TRUE TRUE"
                                        (builtin "One Step Simplification" (formula "18"))
                                       (rule "true_left" (formula "18"))
                                       (rule "arrayLengthIsAnInt" (formula "6") (term "0"))
                                       (rule "expand_inInt" (formula "6"))
                                       (rule "replace_int_MIN" (formula "6") (term "0,1"))
                                       (rule "replace_int_MAX" (formula "6") (term "1,0"))
                                       (rule "andLeft" (formula "6"))
                                       (rule "inEqSimp_commuteLeq" (formula "7"))
                                       (rule "inEqSimp_exactShadow3" (formula "8") (ifseqformula "6"))
                                       (rule "polySimp_rightDist" (formula "8") (term "0,0"))
                                       (rule "mul_literals" (formula "8") (term "0,0,0"))
                                       (rule "polySimp_addComm1" (formula "8") (term "0"))
                                       (rule "add_literals" (formula "8") (term "0,0"))
                                       (rule "inEqSimp_sepNegMonomial1" (formula "8"))
                                       (rule "polySimp_mulLiterals" (formula "8") (term "0"))
                                       (rule "polySimp_elimOne" (formula "8") (term "0"))
                                       (rule "arrayLengthNotNegative" (formula "9") (term "0"))
                                       (rule "inEqSimp_subsumption1" (formula "7") (ifseqformula "9"))
                                       (rule "leq_literals" (formula "7") (term "0"))
                                        (builtin "One Step Simplification" (formula "7"))
                                       (rule "true_left" (formula "7"))
                                       (rule "ifthenelse_split" (formula "24") (term "0"))
                                       (branch " result_251.<created>@anon_heap_withDelimiter«anonHeapFunction» = TRUE TRUE"
                                          (rule "applyEqReverse" (formula "26") (term "0,0,0,0,0,0") (ifseqformula "25"))
                                          (rule "applyEqReverse" (formula "26") (term "0,1,1,0") (ifseqformula "25"))
                                          (rule "hideAuxiliaryEq" (formula "25"))
                                          (rule "replace_known_left" (formula "23") (term "1") (ifseqformula "24"))
                                           (builtin "One Step Simplification" (formula "23"))
                                          (rule "true_left" (formula "23"))
                                          (rule "allLeft" (formula "29") (inst "t=i_0"))
                                          (rule "replaceKnownSelect_taclet1102000_32" (formula "29") (term "0,0,0,0"))
                                          (rule "replace_known_left" (formula "29") (term "0,0,0") (ifseqformula "4"))
                                           (builtin "One Step Simplification" (formula "29"))
                                          (rule "inEqSimp_commuteGeq" (formula "29") (term "1"))
                                          (rule "inEqSimp_contradInEq1" (formula "29") (term "0") (ifseqformula "5"))
                                          (rule "qeq_literals" (formula "29") (term "0,0"))
                                           (builtin "One Step Simplification" (formula "29"))
                                          (rule "inEqSimp_contradInEq0" (formula "9") (ifseqformula "29"))
                                          (rule "andLeft" (formula "9"))
                                          (rule "inEqSimp_homoInEq1" (formula "9"))
                                          (rule "polySimp_pullOutFactor1b" (formula "9") (term "0"))
                                          (rule "add_literals" (formula "9") (term "1,1,0"))
                                          (rule "times_zero_1" (formula "9") (term "1,0"))
                                          (rule "add_literals" (formula "9") (term "0"))
                                          (rule "leq_literals" (formula "9"))
                                          (rule "closeFalse" (formula "9"))
                                       )
                                       (branch " result_251.<created>@anon_heap_withDelimiter«anonHeapFunction» = TRUE FALSE"
                                          (rule "applyEqReverse" (formula "25") (term "0,0,0,0,0,0") (ifseqformula "24"))
                                          (rule "applyEqReverse" (formula "25") (term "0,1,1,0") (ifseqformula "24"))
                                          (rule "hideAuxiliaryEq" (formula "24"))
                                          (rule "replace_known_right" (formula "23") (term "1") (ifseqformula "31"))
                                           (builtin "One Step Simplification" (formula "23"))
                                          (rule "allLeft" (formula "29") (inst "t=i_0"))
                                          (rule "replaceKnownSelect_taclet1102000_32" (formula "29") (term "0,0,0,0"))
                                          (rule "replace_known_left" (formula "29") (term "0,0,0") (ifseqformula "4"))
                                           (builtin "One Step Simplification" (formula "29"))
                                          (rule "inEqSimp_commuteGeq" (formula "29") (term "1"))
                                          (rule "inEqSimp_contradInEq1" (formula "29") (term "1") (ifseqformula "9"))
                                          (rule "inEqSimp_homoInEq1" (formula "29") (term "0,1"))
                                          (rule "polySimp_pullOutFactor1b" (formula "29") (term "0,0,1"))
                                          (rule "add_literals" (formula "29") (term "1,1,0,0,1"))
                                          (rule "times_zero_1" (formula "29") (term "1,0,0,1"))
                                          (rule "add_zero_right" (formula "29") (term "0,0,1"))
                                          (rule "leq_literals" (formula "29") (term "0,1"))
                                           (builtin "One Step Simplification" (formula "29"))
                                          (rule "inEqSimp_subsumption0" (formula "7") (ifseqformula "29"))
                                          (rule "leq_literals" (formula "7") (term "0"))
                                           (builtin "One Step Simplification" (formula "7"))
                                          (rule "true_left" (formula "7"))
                                          (rule "inEqSimp_contradInEq1" (formula "28") (ifseqformula "5"))
                                          (rule "qeq_literals" (formula "28") (term "0"))
                                           (builtin "One Step Simplification" (formula "28"))
                                          (rule "closeFalse" (formula "28"))
                                       )
                                    )
                                    (branch "CUT: result_250.<created> = TRUE FALSE"
                                        (builtin "One Step Simplification" (formula "17"))
                                       (rule "arrayLengthIsAnInt" (formula "6") (term "0"))
                                       (rule "expand_inInt" (formula "6"))
                                       (rule "replace_int_MIN" (formula "6") (term "0,1"))
                                       (rule "replace_int_MAX" (formula "6") (term "1,0"))
                                       (rule "andLeft" (formula "6"))
                                       (rule "inEqSimp_commuteLeq" (formula "7"))
                                       (rule "inEqSimp_exactShadow3" (formula "8") (ifseqformula "6"))
                                       (rule "polySimp_rightDist" (formula "8") (term "0,0"))
                                       (rule "mul_literals" (formula "8") (term "0,0,0"))
                                       (rule "polySimp_addComm1" (formula "8") (term "0"))
                                       (rule "add_literals" (formula "8") (term "0,0"))
                                       (rule "inEqSimp_sepNegMonomial1" (formula "8"))
                                       (rule "polySimp_mulLiterals" (formula "8") (term "0"))
                                       (rule "polySimp_elimOne" (formula "8") (term "0"))
                                       (rule "arrayLengthNotNegative" (formula "9") (term "0"))
                                       (rule "inEqSimp_subsumption1" (formula "7") (ifseqformula "9"))
                                       (rule "leq_literals" (formula "7") (term "0"))
                                        (builtin "One Step Simplification" (formula "7"))
                                       (rule "true_left" (formula "7"))
                                       (rule "ifthenelse_split" (formula "24") (term "0"))
                                       (branch " result_251.<created>@anon_heap_withDelimiter«anonHeapFunction» = TRUE TRUE"
                                          (rule "applyEqReverse" (formula "26") (term "0,1,1,0") (ifseqformula "25"))
                                          (rule "applyEqReverse" (formula "26") (term "0,0,0,0,0,0") (ifseqformula "25"))
                                          (rule "hideAuxiliaryEq" (formula "25"))
                                          (rule "replace_known_left" (formula "23") (term "1") (ifseqformula "24"))
                                           (builtin "One Step Simplification" (formula "23"))
                                          (rule "true_left" (formula "23"))
                                          (rule "allLeft" (formula "29") (inst "t=i_0"))
                                          (rule "replaceKnownSelect_taclet1102000_32" (formula "29") (term "0,0,0,0"))
                                          (rule "replace_known_left" (formula "29") (term "0,0,0") (ifseqformula "4"))
                                           (builtin "One Step Simplification" (formula "29"))
                                          (rule "inEqSimp_commuteGeq" (formula "29") (term "1"))
                                          (rule "inEqSimp_contradInEq1" (formula "29") (term "0") (ifseqformula "5"))
                                          (rule "qeq_literals" (formula "29") (term "0,0"))
                                           (builtin "One Step Simplification" (formula "29"))
                                          (rule "inEqSimp_contradInEq0" (formula "9") (ifseqformula "29"))
                                          (rule "andLeft" (formula "9"))
                                          (rule "inEqSimp_homoInEq1" (formula "9"))
                                          (rule "polySimp_pullOutFactor1b" (formula "9") (term "0"))
                                          (rule "add_literals" (formula "9") (term "1,1,0"))
                                          (rule "times_zero_1" (formula "9") (term "1,0"))
                                          (rule "add_literals" (formula "9") (term "0"))
                                          (rule "leq_literals" (formula "9"))
                                          (rule "closeFalse" (formula "9"))
                                       )
                                       (branch " result_251.<created>@anon_heap_withDelimiter«anonHeapFunction» = TRUE FALSE"
                                          (rule "applyEqReverse" (formula "25") (term "0,1,1,0") (ifseqformula "24"))
                                          (rule "applyEqReverse" (formula "25") (term "0,0,0,0,0,0") (ifseqformula "24"))
                                          (rule "hideAuxiliaryEq" (formula "24"))
                                          (rule "replace_known_right" (formula "23") (term "1") (ifseqformula "31"))
                                           (builtin "One Step Simplification" (formula "23"))
                                          (rule "allLeft" (formula "29") (inst "t=i_0"))
                                          (rule "replaceKnownSelect_taclet1102000_32" (formula "29") (term "0,0,0,0"))
                                          (rule "replace_known_left" (formula "29") (term "0,0,0") (ifseqformula "4"))
                                           (builtin "One Step Simplification" (formula "29"))
                                          (rule "inEqSimp_commuteGeq" (formula "29") (term "1"))
                                          (rule "inEqSimp_contradInEq1" (formula "29") (term "0") (ifseqformula "5"))
                                          (rule "qeq_literals" (formula "29") (term "0,0"))
                                           (builtin "One Step Simplification" (formula "29"))
                                          (rule "inEqSimp_contradInEq1" (formula "29") (ifseqformula "9"))
                                          (rule "andLeft" (formula "29"))
                                          (rule "inEqSimp_homoInEq1" (formula "29"))
                                          (rule "polySimp_pullOutFactor1b" (formula "29") (term "0"))
                                          (rule "add_literals" (formula "29") (term "1,1,0"))
                                          (rule "times_zero_1" (formula "29") (term "1,0"))
                                          (rule "add_literals" (formula "29") (term "0"))
                                          (rule "leq_literals" (formula "29"))
                                          (rule "closeFalse" (formula "29"))
                                       )
                                    )
                                 )
                                 (branch "CUT: strPool( 〈'P'〉 ∘ ( 〈'a'〉 ∘ ( 〈's'〉 ∘ ( 〈's'〉 ∘ (〈'w'〉 ∘ (〈'o'〉 ∘ (〈'r'〉 ∘ 〈'd'〉))))))).<created> = TRUE FALSE"
                                     (builtin "One Step Simplification" (formula "7"))
                                    (rule "cut_direct" (formula "17") (term "0"))
                                    (branch "CUT: result_250.<created> = TRUE TRUE"
                                        (builtin "One Step Simplification" (formula "18"))
                                       (rule "true_left" (formula "18"))
                                       (rule "arrayLengthIsAnInt" (formula "6") (term "0"))
                                       (rule "expand_inInt" (formula "6"))
                                       (rule "replace_int_MIN" (formula "6") (term "0,1"))
                                       (rule "replace_int_MAX" (formula "6") (term "1,0"))
                                       (rule "andLeft" (formula "6"))
                                       (rule "inEqSimp_commuteLeq" (formula "7"))
                                       (rule "inEqSimp_exactShadow3" (formula "8") (ifseqformula "6"))
                                       (rule "polySimp_rightDist" (formula "8") (term "0,0"))
                                       (rule "mul_literals" (formula "8") (term "0,0,0"))
                                       (rule "polySimp_addComm1" (formula "8") (term "0"))
                                       (rule "add_literals" (formula "8") (term "0,0"))
                                       (rule "inEqSimp_sepNegMonomial1" (formula "8"))
                                       (rule "polySimp_mulLiterals" (formula "8") (term "0"))
                                       (rule "polySimp_elimOne" (formula "8") (term "0"))
                                       (rule "arrayLengthNotNegative" (formula "9") (term "0"))
                                       (rule "inEqSimp_subsumption1" (formula "7") (ifseqformula "9"))
                                       (rule "leq_literals" (formula "7") (term "0"))
                                        (builtin "One Step Simplification" (formula "7"))
                                       (rule "true_left" (formula "7"))
                                       (rule "ifthenelse_split" (formula "24") (term "0"))
                                       (branch " result_251.<created>@anon_heap_withDelimiter«anonHeapFunction» = TRUE TRUE"
                                          (rule "applyEqReverse" (formula "26") (term "0,1,1,0") (ifseqformula "25"))
                                          (rule "applyEqReverse" (formula "26") (term "0,0,0,0,0,0") (ifseqformula "25"))
                                          (rule "hideAuxiliaryEq" (formula "25"))
                                          (rule "replace_known_left" (formula "23") (term "1") (ifseqformula "24"))
                                           (builtin "One Step Simplification" (formula "23"))
                                          (rule "true_left" (formula "23"))
                                          (rule "allLeft" (formula "29") (inst "t=i_0"))
                                          (rule "replaceKnownSelect_taclet1102000_32" (formula "29") (term "0,0,0,0"))
                                          (rule "replace_known_left" (formula "29") (term "0,0,0") (ifseqformula "4"))
                                           (builtin "One Step Simplification" (formula "29"))
                                          (rule "inEqSimp_commuteGeq" (formula "29") (term "1"))
                                          (rule "inEqSimp_contradInEq1" (formula "29") (term "1") (ifseqformula "9"))
                                          (rule "inEqSimp_homoInEq1" (formula "29") (term "0,1"))
                                          (rule "polySimp_pullOutFactor1b" (formula "29") (term "0,0,1"))
                                          (rule "add_literals" (formula "29") (term "1,1,0,0,1"))
                                          (rule "times_zero_1" (formula "29") (term "1,0,0,1"))
                                          (rule "add_zero_right" (formula "29") (term "0,0,1"))
                                          (rule "leq_literals" (formula "29") (term "0,1"))
                                           (builtin "One Step Simplification" (formula "29"))
                                          (rule "inEqSimp_contradInEq1" (formula "29") (ifseqformula "5"))
                                          (rule "qeq_literals" (formula "29") (term "0"))
                                           (builtin "One Step Simplification" (formula "29"))
                                          (rule "closeFalse" (formula "29"))
                                       )
                                       (branch " result_251.<created>@anon_heap_withDelimiter«anonHeapFunction» = TRUE FALSE"
                                          (rule "applyEqReverse" (formula "25") (term "0,1,1,0") (ifseqformula "24"))
                                          (rule "applyEqReverse" (formula "25") (term "0,0,0,0,0,0") (ifseqformula "24"))
                                          (rule "hideAuxiliaryEq" (formula "24"))
                                          (rule "replace_known_right" (formula "23") (term "1") (ifseqformula "31"))
                                           (builtin "One Step Simplification" (formula "23"))
                                          (rule "allLeft" (formula "29") (inst "t=i_0"))
                                          (rule "replaceKnownSelect_taclet1102000_32" (formula "29") (term "0,0,0,0"))
                                          (rule "replace_known_left" (formula "29") (term "0,0,0") (ifseqformula "4"))
                                           (builtin "One Step Simplification" (formula "29"))
                                          (rule "inEqSimp_commuteGeq" (formula "29") (term "1"))
                                          (rule "inEqSimp_contradInEq1" (formula "29") (term "0") (ifseqformula "5"))
                                          (rule "qeq_literals" (formula "29") (term "0,0"))
                                           (builtin "One Step Simplification" (formula "29"))
                                          (rule "inEqSimp_contradInEq0" (formula "9") (ifseqformula "29"))
                                          (rule "andLeft" (formula "9"))
                                          (rule "inEqSimp_homoInEq1" (formula "9"))
                                          (rule "polySimp_pullOutFactor1b" (formula "9") (term "0"))
                                          (rule "add_literals" (formula "9") (term "1,1,0"))
                                          (rule "times_zero_1" (formula "9") (term "1,0"))
                                          (rule "add_literals" (formula "9") (term "0"))
                                          (rule "leq_literals" (formula "9"))
                                          (rule "closeFalse" (formula "9"))
                                       )
                                    )
                                    (branch "CUT: result_250.<created> = TRUE FALSE"
                                        (builtin "One Step Simplification" (formula "17"))
                                       (rule "arrayLengthIsAnInt" (formula "6") (term "0"))
                                       (rule "expand_inInt" (formula "6"))
                                       (rule "replace_int_MIN" (formula "6") (term "0,1"))
                                       (rule "replace_int_MAX" (formula "6") (term "1,0"))
                                       (rule "andLeft" (formula "6"))
                                       (rule "inEqSimp_commuteLeq" (formula "7"))
                                       (rule "inEqSimp_exactShadow3" (formula "8") (ifseqformula "6"))
                                       (rule "polySimp_rightDist" (formula "8") (term "0,0"))
                                       (rule "mul_literals" (formula "8") (term "0,0,0"))
                                       (rule "polySimp_addComm1" (formula "8") (term "0"))
                                       (rule "add_literals" (formula "8") (term "0,0"))
                                       (rule "inEqSimp_sepNegMonomial1" (formula "8"))
                                       (rule "polySimp_mulLiterals" (formula "8") (term "0"))
                                       (rule "polySimp_elimOne" (formula "8") (term "0"))
                                       (rule "arrayLengthNotNegative" (formula "9") (term "0"))
                                       (rule "inEqSimp_subsumption1" (formula "7") (ifseqformula "9"))
                                       (rule "leq_literals" (formula "7") (term "0"))
                                        (builtin "One Step Simplification" (formula "7"))
                                       (rule "true_left" (formula "7"))
                                       (rule "ifthenelse_split" (formula "24") (term "0"))
                                       (branch " result_251.<created>@anon_heap_withDelimiter«anonHeapFunction» = TRUE TRUE"
                                          (rule "applyEqReverse" (formula "26") (term "0,1,1,0") (ifseqformula "25"))
                                          (rule "applyEqReverse" (formula "26") (term "0,0,0,0,0,0") (ifseqformula "25"))
                                          (rule "hideAuxiliaryEq" (formula "25"))
                                          (rule "replace_known_left" (formula "23") (term "1") (ifseqformula "24"))
                                           (builtin "One Step Simplification" (formula "23"))
                                          (rule "true_left" (formula "23"))
                                          (rule "allLeft" (formula "29") (inst "t=i_0"))
                                          (rule "replaceKnownSelect_taclet1102000_32" (formula "29") (term "0,0,0,0"))
                                          (rule "replace_known_left" (formula "29") (term "0,0,0") (ifseqformula "4"))
                                           (builtin "One Step Simplification" (formula "29"))
                                          (rule "inEqSimp_commuteGeq" (formula "29") (term "1"))
                                          (rule "inEqSimp_contradInEq1" (formula "29") (term "0") (ifseqformula "5"))
                                          (rule "qeq_literals" (formula "29") (term "0,0"))
                                           (builtin "One Step Simplification" (formula "29"))
                                          (rule "inEqSimp_contradInEq0" (formula "9") (ifseqformula "29"))
                                          (rule "andLeft" (formula "9"))
                                          (rule "inEqSimp_homoInEq1" (formula "9"))
                                          (rule "polySimp_pullOutFactor1b" (formula "9") (term "0"))
                                          (rule "add_literals" (formula "9") (term "1,1,0"))
                                          (rule "times_zero_1" (formula "9") (term "1,0"))
                                          (rule "add_literals" (formula "9") (term "0"))
                                          (rule "leq_literals" (formula "9"))
                                          (rule "closeFalse" (formula "9"))
                                       )
                                       (branch " result_251.<created>@anon_heap_withDelimiter«anonHeapFunction» = TRUE FALSE"
                                          (rule "applyEqReverse" (formula "25") (term "0,0,0,0,0,0") (ifseqformula "24"))
                                          (rule "applyEqReverse" (formula "25") (term "0,1,1,0") (ifseqformula "24"))
                                          (rule "hideAuxiliaryEq" (formula "24"))
                                          (rule "replace_known_right" (formula "23") (term "1") (ifseqformula "31"))
                                           (builtin "One Step Simplification" (formula "23"))
                                          (rule "allLeft" (formula "29") (inst "t=i_0"))
                                          (rule "replaceKnownSelect_taclet1102000_32" (formula "29") (term "0,0,0,0"))
                                          (rule "replace_known_left" (formula "29") (term "0,0,0") (ifseqformula "4"))
                                           (builtin "One Step Simplification" (formula "29"))
                                          (rule "inEqSimp_commuteGeq" (formula "29") (term "1"))
                                          (rule "inEqSimp_contradInEq1" (formula "29") (term "0") (ifseqformula "5"))
                                          (rule "qeq_literals" (formula "29") (term "0,0"))
                                           (builtin "One Step Simplification" (formula "29"))
                                          (rule "inEqSimp_contradInEq0" (formula "9") (ifseqformula "29"))
                                          (rule "andLeft" (formula "9"))
                                          (rule "inEqSimp_homoInEq1" (formula "9"))
                                          (rule "polySimp_pullOutFactor1b" (formula "9") (term "0"))
                                          (rule "add_literals" (formula "9") (term "1,1,0"))
                                          (rule "times_zero_1" (formula "9") (term "1,0"))
                                          (rule "add_zero_right" (formula "9") (term "0"))
                                          (rule "leq_literals" (formula "9"))
                                          (rule "closeFalse" (formula "9"))
                                       )
                                    )
                                 )
                              )
                              (branch "CUT: result_252.<created> = TRUE FALSE"
                                  (builtin "One Step Simplification" (formula "30"))
                                 (rule "replace_known_right" (formula "5") (term "0") (ifseqformula "33"))
                                  (builtin "One Step Simplification" (formula "5"))
                                 (rule "replace_known_right" (formula "2") (term "0") (ifseqformula "33"))
                                  (builtin "One Step Simplification" (formula "2"))
                                 (rule "replace_known_right" (formula "1") (term "0,0") (ifseqformula "33"))
                                  (builtin "One Step Simplification" (formula "1"))
                                 (rule "true_left" (formula "1"))
                                 (rule "replace_known_left" (formula "2") (term "1") (ifseqformula "1"))
                                  (builtin "One Step Simplification" (formula "2"))
                                 (rule "true_left" (formula "2"))
                                 (rule "replace_known_left" (formula "5") (term "1") (ifseqformula "3"))
                                  (builtin "One Step Simplification" (formula "5") (ifInst ""  (formula "31")))
                                 (rule "true_left" (formula "5"))
                                 (rule "replace_known_left" (formula "27") (term "1") (ifseqformula "3"))
                                  (builtin "One Step Simplification" (formula "27"))
                                 (rule "true_left" (formula "27"))
                                 (rule "cut_direct" (formula "8") (term "0"))
                                 (branch "CUT: strPool( 〈'P'〉 ∘ ( 〈'a'〉 ∘ ( 〈's'〉 ∘ ( 〈's'〉 ∘ (〈'w'〉 ∘ (〈'o'〉 ∘ (〈'r'〉 ∘ 〈'd'〉))))))).<created> = TRUE TRUE"
                                     (builtin "One Step Simplification" (formula "9"))
                                    (rule "true_left" (formula "9"))
                                    (rule "cut_direct" (formula "18") (term "0"))
                                    (branch "CUT: result_250.<created> = TRUE TRUE"
                                        (builtin "One Step Simplification" (formula "19"))
                                       (rule "true_left" (formula "19"))
                                       (rule "arrayLengthIsAnInt" (formula "7") (term "0"))
                                       (rule "expand_inInt" (formula "7"))
                                       (rule "replace_int_MIN" (formula "7") (term "0,1"))
                                       (rule "replace_int_MAX" (formula "7") (term "1,0"))
                                       (rule "andLeft" (formula "7"))
                                       (rule "inEqSimp_commuteLeq" (formula "8"))
                                       (rule "inEqSimp_exactShadow3" (formula "9") (ifseqformula "7"))
                                       (rule "polySimp_rightDist" (formula "9") (term "0,0"))
                                       (rule "mul_literals" (formula "9") (term "0,0,0"))
                                       (rule "polySimp_addComm1" (formula "9") (term "0"))
                                       (rule "add_literals" (formula "9") (term "0,0"))
                                       (rule "inEqSimp_sepNegMonomial1" (formula "9"))
                                       (rule "polySimp_mulLiterals" (formula "9") (term "0"))
                                       (rule "polySimp_elimOne" (formula "9") (term "0"))
                                       (rule "arrayLengthNotNegative" (formula "10") (term "0"))
                                       (rule "inEqSimp_subsumption1" (formula "8") (ifseqformula "10"))
                                       (rule "leq_literals" (formula "8") (term "0"))
                                        (builtin "One Step Simplification" (formula "8"))
                                       (rule "true_left" (formula "8"))
                                       (rule "ifthenelse_split" (formula "25") (term "0"))
                                       (branch " result_251.<created>@anon_heap_withDelimiter«anonHeapFunction» = TRUE TRUE"
                                          (rule "applyEqReverse" (formula "27") (term "0,0,0,0,0,0") (ifseqformula "26"))
                                          (rule "applyEqReverse" (formula "27") (term "0,1,1,0") (ifseqformula "26"))
                                          (rule "hideAuxiliaryEq" (formula "26"))
                                          (rule "replace_known_left" (formula "24") (term "1") (ifseqformula "25"))
                                           (builtin "One Step Simplification" (formula "24"))
                                          (rule "true_left" (formula "24"))
                                          (rule "allLeft" (formula "29") (inst "t=i_0"))
                                          (rule "replaceKnownSelect_taclet1102000_32" (formula "29") (term "0,0,0,0"))
                                          (rule "replace_known_left" (formula "29") (term "0,0,0") (ifseqformula "5"))
                                           (builtin "One Step Simplification" (formula "29"))
                                          (rule "inEqSimp_commuteGeq" (formula "29") (term "1"))
                                          (rule "inEqSimp_contradInEq1" (formula "29") (term "0") (ifseqformula "6"))
                                          (rule "qeq_literals" (formula "29") (term "0,0"))
                                           (builtin "One Step Simplification" (formula "29"))
                                          (rule "inEqSimp_contradInEq1" (formula "29") (ifseqformula "10"))
                                          (rule "andLeft" (formula "29"))
                                          (rule "inEqSimp_homoInEq1" (formula "29"))
                                          (rule "polySimp_pullOutFactor1b" (formula "29") (term "0"))
                                          (rule "add_literals" (formula "29") (term "1,1,0"))
                                          (rule "times_zero_1" (formula "29") (term "1,0"))
                                          (rule "add_literals" (formula "29") (term "0"))
                                          (rule "leq_literals" (formula "29"))
                                          (rule "closeFalse" (formula "29"))
                                       )
                                       (branch " result_251.<created>@anon_heap_withDelimiter«anonHeapFunction» = TRUE FALSE"
                                          (rule "applyEqReverse" (formula "26") (term "0,1,1,0") (ifseqformula "25"))
                                          (rule "applyEqReverse" (formula "26") (term "0,0,0,0,0,0") (ifseqformula "25"))
                                          (rule "hideAuxiliaryEq" (formula "25"))
                                          (rule "replace_known_right" (formula "24") (term "1") (ifseqformula "31"))
                                           (builtin "One Step Simplification" (formula "24"))
                                          (rule "allLeft" (formula "29") (inst "t=i_0"))
                                          (rule "replaceKnownSelect_taclet1102000_32" (formula "29") (term "0,0,0,0"))
                                          (rule "replace_known_left" (formula "29") (term "0,0,0") (ifseqformula "5"))
                                           (builtin "One Step Simplification" (formula "29"))
                                          (rule "inEqSimp_commuteGeq" (formula "29") (term "1"))
                                          (rule "inEqSimp_contradInEq1" (formula "29") (term "0") (ifseqformula "6"))
                                          (rule "qeq_literals" (formula "29") (term "0,0"))
                                           (builtin "One Step Simplification" (formula "29"))
                                          (rule "inEqSimp_contradInEq1" (formula "29") (ifseqformula "10"))
                                          (rule "andLeft" (formula "29"))
                                          (rule "inEqSimp_homoInEq1" (formula "29"))
                                          (rule "polySimp_pullOutFactor1b" (formula "29") (term "0"))
                                          (rule "add_literals" (formula "29") (term "1,1,0"))
                                          (rule "times_zero_1" (formula "29") (term "1,0"))
                                          (rule "add_literals" (formula "29") (term "0"))
                                          (rule "leq_literals" (formula "29"))
                                          (rule "closeFalse" (formula "29"))
                                       )
                                    )
                                    (branch "CUT: result_250.<created> = TRUE FALSE"
                                        (builtin "One Step Simplification" (formula "18"))
                                       (rule "arrayLengthIsAnInt" (formula "7") (term "0"))
                                       (rule "expand_inInt" (formula "7"))
                                       (rule "replace_int_MIN" (formula "7") (term "0,1"))
                                       (rule "replace_int_MAX" (formula "7") (term "1,0"))
                                       (rule "andLeft" (formula "7"))
                                       (rule "inEqSimp_commuteLeq" (formula "8"))
                                       (rule "inEqSimp_exactShadow3" (formula "9") (ifseqformula "7"))
                                       (rule "polySimp_rightDist" (formula "9") (term "0,0"))
                                       (rule "mul_literals" (formula "9") (term "0,0,0"))
                                       (rule "polySimp_addComm1" (formula "9") (term "0"))
                                       (rule "add_literals" (formula "9") (term "0,0"))
                                       (rule "inEqSimp_sepNegMonomial1" (formula "9"))
                                       (rule "polySimp_mulLiterals" (formula "9") (term "0"))
                                       (rule "polySimp_elimOne" (formula "9") (term "0"))
                                       (rule "arrayLengthNotNegative" (formula "10") (term "0"))
                                       (rule "inEqSimp_subsumption1" (formula "8") (ifseqformula "10"))
                                       (rule "leq_literals" (formula "8") (term "0"))
                                        (builtin "One Step Simplification" (formula "8"))
                                       (rule "true_left" (formula "8"))
                                       (rule "ifthenelse_split" (formula "25") (term "0"))
                                       (branch " result_251.<created>@anon_heap_withDelimiter«anonHeapFunction» = TRUE TRUE"
                                          (rule "applyEqReverse" (formula "27") (term "0,1,1,0") (ifseqformula "26"))
                                          (rule "applyEqReverse" (formula "27") (term "0,0,0,0,0,0") (ifseqformula "26"))
                                          (rule "hideAuxiliaryEq" (formula "26"))
                                          (rule "replace_known_left" (formula "24") (term "1") (ifseqformula "25"))
                                           (builtin "One Step Simplification" (formula "24"))
                                          (rule "true_left" (formula "24"))
                                          (rule "allLeft" (formula "29") (inst "t=i_0"))
                                          (rule "replaceKnownSelect_taclet1102000_32" (formula "29") (term "0,0,0,0"))
                                          (rule "replace_known_left" (formula "29") (term "0,0,0") (ifseqformula "5"))
                                           (builtin "One Step Simplification" (formula "29"))
                                          (rule "inEqSimp_commuteGeq" (formula "29") (term "1"))
                                          (rule "inEqSimp_contradInEq1" (formula "29") (term "0") (ifseqformula "6"))
                                          (rule "qeq_literals" (formula "29") (term "0,0"))
                                           (builtin "One Step Simplification" (formula "29"))
                                          (rule "inEqSimp_contradInEq0" (formula "10") (ifseqformula "29"))
                                          (rule "andLeft" (formula "10"))
                                          (rule "inEqSimp_homoInEq1" (formula "10"))
                                          (rule "polySimp_pullOutFactor1b" (formula "10") (term "0"))
                                          (rule "add_literals" (formula "10") (term "1,1,0"))
                                          (rule "times_zero_1" (formula "10") (term "1,0"))
                                          (rule "add_literals" (formula "10") (term "0"))
                                          (rule "leq_literals" (formula "10"))
                                          (rule "closeFalse" (formula "10"))
                                       )
                                       (branch " result_251.<created>@anon_heap_withDelimiter«anonHeapFunction» = TRUE FALSE"
                                          (rule "applyEqReverse" (formula "26") (term "0,1,1,0") (ifseqformula "25"))
                                          (rule "applyEqReverse" (formula "26") (term "0,0,0,0,0,0") (ifseqformula "25"))
                                          (rule "hideAuxiliaryEq" (formula "25"))
                                          (rule "replace_known_right" (formula "24") (term "1") (ifseqformula "31"))
                                           (builtin "One Step Simplification" (formula "24"))
                                          (rule "allLeft" (formula "29") (inst "t=i_0"))
                                          (rule "replaceKnownSelect_taclet1102000_32" (formula "29") (term "0,0,0,0"))
                                          (rule "replace_known_left" (formula "29") (term "0,0,0") (ifseqformula "5"))
                                           (builtin "One Step Simplification" (formula "29"))
                                          (rule "inEqSimp_commuteGeq" (formula "29") (term "1"))
                                          (rule "inEqSimp_contradInEq1" (formula "29") (term "1") (ifseqformula "10"))
                                          (rule "inEqSimp_homoInEq1" (formula "29") (term "0,1"))
                                          (rule "polySimp_pullOutFactor1b" (formula "29") (term "0,0,1"))
                                          (rule "add_literals" (formula "29") (term "1,1,0,0,1"))
                                          (rule "times_zero_1" (formula "29") (term "1,0,0,1"))
                                          (rule "add_zero_right" (formula "29") (term "0,0,1"))
                                          (rule "leq_literals" (formula "29") (term "0,1"))
                                           (builtin "One Step Simplification" (formula "29"))
                                          (rule "inEqSimp_subsumption0" (formula "8") (ifseqformula "29"))
                                          (rule "leq_literals" (formula "8") (term "0"))
                                           (builtin "One Step Simplification" (formula "8"))
                                          (rule "true_left" (formula "8"))
                                          (rule "inEqSimp_contradInEq0" (formula "6") (ifseqformula "28"))
                                          (rule "qeq_literals" (formula "6") (term "0"))
                                           (builtin "One Step Simplification" (formula "6"))
                                          (rule "closeFalse" (formula "6"))
                                       )
                                    )
                                 )
                                 (branch "CUT: strPool( 〈'P'〉 ∘ ( 〈'a'〉 ∘ ( 〈's'〉 ∘ ( 〈's'〉 ∘ (〈'w'〉 ∘ (〈'o'〉 ∘ (〈'r'〉 ∘ 〈'd'〉))))))).<created> = TRUE FALSE"
                                     (builtin "One Step Simplification" (formula "8"))
                                    (rule "cut_direct" (formula "18") (term "0"))
                                    (branch "CUT: result_250.<created> = TRUE TRUE"
                                        (builtin "One Step Simplification" (formula "19"))
                                       (rule "true_left" (formula "19"))
                                       (rule "arrayLengthIsAnInt" (formula "7") (term "0"))
                                       (rule "expand_inInt" (formula "7"))
                                       (rule "replace_int_MIN" (formula "7") (term "0,1"))
                                       (rule "replace_int_MAX" (formula "7") (term "1,0"))
                                       (rule "andLeft" (formula "7"))
                                       (rule "inEqSimp_commuteLeq" (formula "8"))
                                       (rule "inEqSimp_exactShadow3" (formula "9") (ifseqformula "7"))
                                       (rule "polySimp_rightDist" (formula "9") (term "0,0"))
                                       (rule "mul_literals" (formula "9") (term "0,0,0"))
                                       (rule "polySimp_addComm1" (formula "9") (term "0"))
                                       (rule "add_literals" (formula "9") (term "0,0"))
                                       (rule "inEqSimp_sepNegMonomial1" (formula "9"))
                                       (rule "polySimp_mulLiterals" (formula "9") (term "0"))
                                       (rule "polySimp_elimOne" (formula "9") (term "0"))
                                       (rule "arrayLengthNotNegative" (formula "10") (term "0"))
                                       (rule "inEqSimp_subsumption1" (formula "8") (ifseqformula "10"))
                                       (rule "leq_literals" (formula "8") (term "0"))
                                        (builtin "One Step Simplification" (formula "8"))
                                       (rule "true_left" (formula "8"))
                                       (rule "ifthenelse_split" (formula "25") (term "0"))
                                       (branch " result_251.<created>@anon_heap_withDelimiter«anonHeapFunction» = TRUE TRUE"
                                          (rule "applyEqReverse" (formula "27") (term "0,0,0,0,0,0") (ifseqformula "26"))
                                          (rule "applyEqReverse" (formula "27") (term "0,1,1,0") (ifseqformula "26"))
                                          (rule "hideAuxiliaryEq" (formula "26"))
                                          (rule "replace_known_left" (formula "24") (term "1") (ifseqformula "25"))
                                           (builtin "One Step Simplification" (formula "24"))
                                          (rule "true_left" (formula "24"))
                                          (rule "allLeft" (formula "29") (inst "t=i_0"))
                                          (rule "replaceKnownSelect_taclet1102000_32" (formula "29") (term "0,0,0,0"))
                                          (rule "replace_known_left" (formula "29") (term "0,0,0") (ifseqformula "5"))
                                           (builtin "One Step Simplification" (formula "29"))
                                          (rule "inEqSimp_commuteGeq" (formula "29") (term "1"))
                                          (rule "inEqSimp_contradInEq1" (formula "29") (term "0") (ifseqformula "6"))
                                          (rule "qeq_literals" (formula "29") (term "0,0"))
                                           (builtin "One Step Simplification" (formula "29"))
                                          (rule "inEqSimp_contradInEq0" (formula "10") (ifseqformula "29"))
                                          (rule "andLeft" (formula "10"))
                                          (rule "inEqSimp_homoInEq1" (formula "10"))
                                          (rule "polySimp_pullOutFactor1b" (formula "10") (term "0"))
                                          (rule "add_literals" (formula "10") (term "1,1,0"))
                                          (rule "times_zero_1" (formula "10") (term "1,0"))
                                          (rule "add_literals" (formula "10") (term "0"))
                                          (rule "leq_literals" (formula "10"))
                                          (rule "closeFalse" (formula "10"))
                                       )
                                       (branch " result_251.<created>@anon_heap_withDelimiter«anonHeapFunction» = TRUE FALSE"
                                          (rule "applyEqReverse" (formula "26") (term "0,0,0,0,0,0") (ifseqformula "25"))
                                          (rule "applyEqReverse" (formula "26") (term "0,1,1,0") (ifseqformula "25"))
                                          (rule "hideAuxiliaryEq" (formula "25"))
                                          (rule "replace_known_right" (formula "24") (term "1") (ifseqformula "31"))
                                           (builtin "One Step Simplification" (formula "24"))
                                          (rule "allLeft" (formula "29") (inst "t=i_0"))
                                          (rule "replaceKnownSelect_taclet1102000_32" (formula "29") (term "0,0,0,0"))
                                          (rule "replace_known_left" (formula "29") (term "0,0,0") (ifseqformula "5"))
                                           (builtin "One Step Simplification" (formula "29"))
                                          (rule "inEqSimp_commuteGeq" (formula "29") (term "1"))
                                          (rule "inEqSimp_contradInEq1" (formula "29") (term "1") (ifseqformula "10"))
                                          (rule "inEqSimp_homoInEq1" (formula "29") (term "0,1"))
                                          (rule "polySimp_pullOutFactor1b" (formula "29") (term "0,0,1"))
                                          (rule "add_literals" (formula "29") (term "1,1,0,0,1"))
                                          (rule "times_zero_1" (formula "29") (term "1,0,0,1"))
                                          (rule "add_zero_right" (formula "29") (term "0,0,1"))
                                          (rule "leq_literals" (formula "29") (term "0,1"))
                                           (builtin "One Step Simplification" (formula "29"))
                                          (rule "inEqSimp_subsumption0" (formula "8") (ifseqformula "29"))
                                          (rule "leq_literals" (formula "8") (term "0"))
                                           (builtin "One Step Simplification" (formula "8"))
                                          (rule "true_left" (formula "8"))
                                          (rule "inEqSimp_contradInEq1" (formula "28") (ifseqformula "6"))
                                          (rule "qeq_literals" (formula "28") (term "0"))
                                           (builtin "One Step Simplification" (formula "28"))
                                          (rule "closeFalse" (formula "28"))
                                       )
                                    )
                                    (branch "CUT: result_250.<created> = TRUE FALSE"
                                        (builtin "One Step Simplification" (formula "18"))
                                       (rule "arrayLengthIsAnInt" (formula "7") (term "0"))
                                       (rule "expand_inInt" (formula "7"))
                                       (rule "replace_int_MIN" (formula "7") (term "0,1"))
                                       (rule "replace_int_MAX" (formula "7") (term "1,0"))
                                       (rule "andLeft" (formula "7"))
                                       (rule "inEqSimp_commuteLeq" (formula "8"))
                                       (rule "inEqSimp_exactShadow3" (formula "9") (ifseqformula "7"))
                                       (rule "polySimp_rightDist" (formula "9") (term "0,0"))
                                       (rule "mul_literals" (formula "9") (term "0,0,0"))
                                       (rule "polySimp_addComm1" (formula "9") (term "0"))
                                       (rule "add_literals" (formula "9") (term "0,0"))
                                       (rule "inEqSimp_sepNegMonomial1" (formula "9"))
                                       (rule "polySimp_mulLiterals" (formula "9") (term "0"))
                                       (rule "polySimp_elimOne" (formula "9") (term "0"))
                                       (rule "arrayLengthNotNegative" (formula "10") (term "0"))
                                       (rule "inEqSimp_subsumption1" (formula "8") (ifseqformula "10"))
                                       (rule "leq_literals" (formula "8") (term "0"))
                                        (builtin "One Step Simplification" (formula "8"))
                                       (rule "true_left" (formula "8"))
                                       (rule "ifthenelse_split" (formula "25") (term "0"))
                                       (branch " result_251.<created>@anon_heap_withDelimiter«anonHeapFunction» = TRUE TRUE"
                                          (rule "applyEqReverse" (formula "27") (term "0,0,0,0,0,0") (ifseqformula "26"))
                                          (rule "applyEqReverse" (formula "27") (term "0,1,1,0") (ifseqformula "26"))
                                          (rule "hideAuxiliaryEq" (formula "26"))
                                          (rule "replace_known_left" (formula "24") (term "1") (ifseqformula "25"))
                                           (builtin "One Step Simplification" (formula "24"))
                                          (rule "true_left" (formula "24"))
                                          (rule "allLeft" (formula "29") (inst "t=i_0"))
                                          (rule "replaceKnownSelect_taclet1102000_32" (formula "29") (term "0,0,0,0"))
                                          (rule "replace_known_left" (formula "29") (term "0,0,0") (ifseqformula "5"))
                                           (builtin "One Step Simplification" (formula "29"))
                                          (rule "inEqSimp_commuteGeq" (formula "29") (term "1"))
                                          (rule "inEqSimp_contradInEq1" (formula "29") (term "1") (ifseqformula "10"))
                                          (rule "inEqSimp_homoInEq1" (formula "29") (term "0,1"))
                                          (rule "polySimp_pullOutFactor1b" (formula "29") (term "0,0,1"))
                                          (rule "add_literals" (formula "29") (term "1,1,0,0,1"))
                                          (rule "times_zero_1" (formula "29") (term "1,0,0,1"))
                                          (rule "add_zero_right" (formula "29") (term "0,0,1"))
                                          (rule "leq_literals" (formula "29") (term "0,1"))
                                           (builtin "One Step Simplification" (formula "29"))
                                          (rule "inEqSimp_subsumption0" (formula "8") (ifseqformula "29"))
                                          (rule "leq_literals" (formula "8") (term "0"))
                                           (builtin "One Step Simplification" (formula "8"))
                                          (rule "true_left" (formula "8"))
                                          (rule "inEqSimp_contradInEq0" (formula "6") (ifseqformula "28"))
                                          (rule "qeq_literals" (formula "6") (term "0"))
                                           (builtin "One Step Simplification" (formula "6"))
                                          (rule "closeFalse" (formula "6"))
                                       )
                                       (branch " result_251.<created>@anon_heap_withDelimiter«anonHeapFunction» = TRUE FALSE"
                                          (rule "applyEqReverse" (formula "26") (term "0,0,0,0,0,0") (ifseqformula "25"))
                                          (rule "applyEqReverse" (formula "26") (term "0,1,1,0") (ifseqformula "25"))
                                          (rule "hideAuxiliaryEq" (formula "25"))
                                          (rule "replace_known_right" (formula "24") (term "1") (ifseqformula "31"))
                                           (builtin "One Step Simplification" (formula "24"))
                                          (rule "allLeft" (formula "29") (inst "t=i_0"))
                                          (rule "replaceKnownSelect_taclet1102000_32" (formula "29") (term "0,0,0,0"))
                                          (rule "replace_known_left" (formula "29") (term "0,0,0") (ifseqformula "5"))
                                           (builtin "One Step Simplification" (formula "29"))
                                          (rule "inEqSimp_commuteGeq" (formula "29") (term "1"))
                                          (rule "inEqSimp_contradInEq1" (formula "29") (term "0") (ifseqformula "6"))
                                          (rule "qeq_literals" (formula "29") (term "0,0"))
                                           (builtin "One Step Simplification" (formula "29"))
                                          (rule "inEqSimp_contradInEq1" (formula "29") (ifseqformula "10"))
                                          (rule "andLeft" (formula "29"))
                                          (rule "inEqSimp_homoInEq1" (formula "29"))
                                          (rule "polySimp_pullOutFactor1b" (formula "29") (term "0"))
                                          (rule "add_literals" (formula "29") (term "1,1,0"))
                                          (rule "times_zero_1" (formula "29") (term "1,0"))
                                          (rule "add_zero_right" (formula "29") (term "0"))
                                          (rule "leq_literals" (formula "29"))
                                          (rule "closeFalse" (formula "29"))
                                       )
                                    )
                                 )
                              )
                           )
                        )
                        (branch " ¬( result_252.<created> = TRUE ∨ result_252.<created>@anon_heap_withDelimiter«anonHeapFunction» = TRUE) ∧ result_252[i_0]@anon_heap_toList«anonHeapFunction» = null"
                           (rule "andLeft" (formula "2"))
                           (rule "notLeft" (formula "2"))
                           (rule "orRight" (formula "31"))
                           (rule "replace_known_right" (formula "1") (term "0,0") (ifseqformula "31"))
                            (builtin "One Step Simplification" (formula "1"))
                           (rule "hideAuxiliaryEq" (formula "1"))
                           (rule "replace_known_right" (formula "3") (term "1") (ifseqformula "31"))
                            (builtin "One Step Simplification" (formula "3") (ifInst ""  (formula "30")))
                           (rule "replace_known_left" (formula "27") (term "1,0") (ifseqformula "3"))
                            (builtin "One Step Simplification" (formula "27") (ifInst ""  (formula "30")) (ifInst ""  (formula "31")))
                           (rule "true_left" (formula "27"))
                           (rule "ifthenelse_split" (formula "21") (term "0"))
                           (branch "result_251.<created> = TRUE TRUE"
                              (rule "applyEqReverse" (formula "23") (term "1,0") (ifseqformula "22"))
                              (rule "hideAuxiliaryEq" (formula "22"))
                              (rule "replace_known_left" (formula "22") (term "0,0,0") (ifseqformula "21"))
                               (builtin "One Step Simplification" (formula "22"))
                              (rule "applyEqReverse" (formula "23") (term "0,1,1,0") (ifseqformula "22"))
                              (rule "applyEqReverse" (formula "23") (term "0,0,0,0,0,0") (ifseqformula "22"))
                              (rule "hideAuxiliaryEq" (formula "22"))
                              (rule "replace_known_left" (formula "20") (term "0,0") (ifseqformula "21"))
                               (builtin "One Step Simplification" (formula "20"))
                              (rule "true_left" (formula "20"))
                              (rule "cut_direct" (formula "17") (term "0"))
                              (branch "CUT: result_250.<created> = TRUE TRUE"
                                  (builtin "One Step Simplification" (formula "18"))
                                 (rule "true_left" (formula "18"))
                                 (rule "cut_direct" (formula "7") (term "0"))
                                 (branch "CUT: strPool( 〈'P'〉 ∘ ( 〈'a'〉 ∘ ( 〈's'〉 ∘ ( 〈's'〉 ∘ (〈'w'〉 ∘ (〈'o'〉 ∘ (〈'r'〉 ∘ 〈'd'〉))))))).<created> = TRUE TRUE"
                                     (builtin "One Step Simplification" (formula "8"))
                                    (rule "true_left" (formula "8"))
                                    (rule "arrayLengthNotNegative" (formula "6") (term "0"))
                                    (rule "arrayLengthIsAnInt" (formula "7") (term "0"))
                                    (rule "expand_inInt" (formula "7"))
                                    (rule "replace_int_MIN" (formula "7") (term "0,1"))
                                    (rule "replace_int_MAX" (formula "7") (term "1,0"))
                                    (rule "andLeft" (formula "7"))
                                    (rule "inEqSimp_commuteLeq" (formula "8"))
                                    (rule "inEqSimp_subsumption1" (formula "8") (ifseqformula "6"))
                                    (rule "leq_literals" (formula "8") (term "0"))
                                     (builtin "One Step Simplification" (formula "8"))
                                    (rule "true_left" (formula "8"))
                                    (rule "inEqSimp_exactShadow3" (formula "8") (ifseqformula "7"))
                                    (rule "polySimp_rightDist" (formula "8") (term "0,0"))
                                    (rule "mul_literals" (formula "8") (term "0,0,0"))
                                    (rule "polySimp_addComm1" (formula "8") (term "0"))
                                    (rule "add_literals" (formula "8") (term "0,0"))
                                    (rule "inEqSimp_sepNegMonomial1" (formula "8"))
                                    (rule "polySimp_mulLiterals" (formula "8") (term "0"))
                                    (rule "polySimp_elimOne" (formula "8") (term "0"))
                                    (rule "allLeft" (formula "28") (inst "t=i_0"))
                                    (rule "replaceKnownSelect_taclet1102000_32" (formula "28") (term "0,0,0,0"))
                                    (rule "replace_known_left" (formula "28") (term "0,0,0") (ifseqformula "4"))
                                     (builtin "One Step Simplification" (formula "28"))
                                    (rule "inEqSimp_commuteGeq" (formula "28") (term "1"))
                                    (rule "inEqSimp_contradInEq1" (formula "28") (term "1") (ifseqformula "9"))
                                    (rule "inEqSimp_homoInEq1" (formula "28") (term "0,1"))
                                    (rule "polySimp_pullOutFactor1b" (formula "28") (term "0,0,1"))
                                    (rule "add_literals" (formula "28") (term "1,1,0,0,1"))
                                    (rule "times_zero_1" (formula "28") (term "1,0,0,1"))
                                    (rule "add_zero_right" (formula "28") (term "0,0,1"))
                                    (rule "leq_literals" (formula "28") (term "0,1"))
                                     (builtin "One Step Simplification" (formula "28"))
                                    (rule "inEqSimp_contradInEq0" (formula "5") (ifseqformula "28"))
                                    (rule "qeq_literals" (formula "5") (term "0"))
                                     (builtin "One Step Simplification" (formula "5"))
                                    (rule "closeFalse" (formula "5"))
                                 )
                                 (branch "CUT: strPool( 〈'P'〉 ∘ ( 〈'a'〉 ∘ ( 〈's'〉 ∘ ( 〈's'〉 ∘ (〈'w'〉 ∘ (〈'o'〉 ∘ (〈'r'〉 ∘ 〈'd'〉))))))).<created> = TRUE FALSE"
                                     (builtin "One Step Simplification" (formula "7"))
                                    (rule "arrayLengthNotNegative" (formula "6") (term "0"))
                                    (rule "arrayLengthIsAnInt" (formula "7") (term "0"))
                                    (rule "expand_inInt" (formula "7"))
                                    (rule "replace_int_MIN" (formula "7") (term "0,1"))
                                    (rule "replace_int_MAX" (formula "7") (term "1,0"))
                                    (rule "andLeft" (formula "7"))
                                    (rule "inEqSimp_commuteLeq" (formula "8"))
                                    (rule "inEqSimp_subsumption1" (formula "8") (ifseqformula "6"))
                                    (rule "leq_literals" (formula "8") (term "0"))
                                     (builtin "One Step Simplification" (formula "8"))
                                    (rule "true_left" (formula "8"))
                                    (rule "inEqSimp_exactShadow3" (formula "8") (ifseqformula "7"))
                                    (rule "polySimp_rightDist" (formula "8") (term "0,0"))
                                    (rule "mul_literals" (formula "8") (term "0,0,0"))
                                    (rule "polySimp_addComm1" (formula "8") (term "0"))
                                    (rule "add_literals" (formula "8") (term "0,0"))
                                    (rule "inEqSimp_sepNegMonomial1" (formula "8"))
                                    (rule "polySimp_mulLiterals" (formula "8") (term "0"))
                                    (rule "polySimp_elimOne" (formula "8") (term "0"))
                                    (rule "allLeft" (formula "28") (inst "t=i_0"))
                                    (rule "replaceKnownSelect_taclet1102000_32" (formula "28") (term "0,0,0,0"))
                                    (rule "replace_known_left" (formula "28") (term "0,0,0") (ifseqformula "4"))
                                     (builtin "One Step Simplification" (formula "28"))
                                    (rule "inEqSimp_commuteGeq" (formula "28") (term "1"))
                                    (rule "inEqSimp_contradInEq1" (formula "28") (term "1") (ifseqformula "9"))
                                    (rule "inEqSimp_homoInEq1" (formula "28") (term "0,1"))
                                    (rule "polySimp_pullOutFactor1b" (formula "28") (term "0,0,1"))
                                    (rule "add_literals" (formula "28") (term "1,1,0,0,1"))
                                    (rule "times_zero_1" (formula "28") (term "1,0,0,1"))
                                    (rule "add_literals" (formula "28") (term "0,0,1"))
                                    (rule "leq_literals" (formula "28") (term "0,1"))
                                     (builtin "One Step Simplification" (formula "28"))
                                    (rule "inEqSimp_contradInEq0" (formula "5") (ifseqformula "28"))
                                    (rule "qeq_literals" (formula "5") (term "0"))
                                     (builtin "One Step Simplification" (formula "5"))
                                    (rule "closeFalse" (formula "5"))
                                 )
                              )
                              (branch "CUT: result_250.<created> = TRUE FALSE"
                                  (builtin "One Step Simplification" (formula "17"))
                                 (rule "cut_direct" (formula "7") (term "0"))
                                 (branch "CUT: strPool( 〈'P'〉 ∘ ( 〈'a'〉 ∘ ( 〈's'〉 ∘ ( 〈's'〉 ∘ (〈'w'〉 ∘ (〈'o'〉 ∘ (〈'r'〉 ∘ 〈'd'〉))))))).<created> = TRUE TRUE"
                                     (builtin "One Step Simplification" (formula "8"))
                                    (rule "true_left" (formula "8"))
                                    (rule "arrayLengthNotNegative" (formula "6") (term "0"))
                                    (rule "arrayLengthIsAnInt" (formula "7") (term "0"))
                                    (rule "expand_inInt" (formula "7"))
                                    (rule "replace_int_MIN" (formula "7") (term "0,1"))
                                    (rule "replace_int_MAX" (formula "7") (term "1,0"))
                                    (rule "andLeft" (formula "7"))
                                    (rule "inEqSimp_commuteLeq" (formula "8"))
                                    (rule "inEqSimp_subsumption1" (formula "8") (ifseqformula "6"))
                                    (rule "leq_literals" (formula "8") (term "0"))
                                     (builtin "One Step Simplification" (formula "8"))
                                    (rule "true_left" (formula "8"))
                                    (rule "inEqSimp_exactShadow3" (formula "8") (ifseqformula "7"))
                                    (rule "polySimp_rightDist" (formula "8") (term "0,0"))
                                    (rule "mul_literals" (formula "8") (term "0,0,0"))
                                    (rule "polySimp_addComm1" (formula "8") (term "0"))
                                    (rule "add_literals" (formula "8") (term "0,0"))
                                    (rule "inEqSimp_sepNegMonomial1" (formula "8"))
                                    (rule "polySimp_mulLiterals" (formula "8") (term "0"))
                                    (rule "polySimp_elimOne" (formula "8") (term "0"))
                                    (rule "allLeft" (formula "28") (inst "t=i_0"))
                                    (rule "replaceKnownSelect_taclet1102000_32" (formula "28") (term "0,0,0,0"))
                                    (rule "replace_known_left" (formula "28") (term "0,0,0") (ifseqformula "4"))
                                     (builtin "One Step Simplification" (formula "28"))
                                    (rule "inEqSimp_commuteGeq" (formula "28") (term "1"))
                                    (rule "inEqSimp_contradInEq1" (formula "28") (term "0") (ifseqformula "5"))
                                    (rule "qeq_literals" (formula "28") (term "0,0"))
                                     (builtin "One Step Simplification" (formula "28"))
                                    (rule "inEqSimp_contradInEq1" (formula "28") (ifseqformula "9"))
                                    (rule "andLeft" (formula "28"))
                                    (rule "inEqSimp_homoInEq1" (formula "28"))
                                    (rule "polySimp_pullOutFactor1b" (formula "28") (term "0"))
                                    (rule "add_literals" (formula "28") (term "1,1,0"))
                                    (rule "times_zero_1" (formula "28") (term "1,0"))
                                    (rule "add_literals" (formula "28") (term "0"))
                                    (rule "leq_literals" (formula "28"))
                                    (rule "closeFalse" (formula "28"))
                                 )
                                 (branch "CUT: strPool( 〈'P'〉 ∘ ( 〈'a'〉 ∘ ( 〈's'〉 ∘ ( 〈's'〉 ∘ (〈'w'〉 ∘ (〈'o'〉 ∘ (〈'r'〉 ∘ 〈'd'〉))))))).<created> = TRUE FALSE"
                                     (builtin "One Step Simplification" (formula "7"))
                                    (rule "arrayLengthNotNegative" (formula "6") (term "0"))
                                    (rule "arrayLengthIsAnInt" (formula "7") (term "0"))
                                    (rule "expand_inInt" (formula "7"))
                                    (rule "replace_int_MIN" (formula "7") (term "0,1"))
                                    (rule "replace_int_MAX" (formula "7") (term "1,0"))
                                    (rule "andLeft" (formula "7"))
                                    (rule "inEqSimp_commuteLeq" (formula "8"))
                                    (rule "inEqSimp_subsumption1" (formula "8") (ifseqformula "6"))
                                    (rule "leq_literals" (formula "8") (term "0"))
                                     (builtin "One Step Simplification" (formula "8"))
                                    (rule "true_left" (formula "8"))
                                    (rule "inEqSimp_exactShadow3" (formula "8") (ifseqformula "7"))
                                    (rule "polySimp_rightDist" (formula "8") (term "0,0"))
                                    (rule "mul_literals" (formula "8") (term "0,0,0"))
                                    (rule "polySimp_addComm1" (formula "8") (term "0"))
                                    (rule "add_literals" (formula "8") (term "0,0"))
                                    (rule "inEqSimp_sepNegMonomial1" (formula "8"))
                                    (rule "polySimp_mulLiterals" (formula "8") (term "0"))
                                    (rule "polySimp_elimOne" (formula "8") (term "0"))
                                    (rule "allLeft" (formula "28") (inst "t=i_0"))
                                    (rule "replaceKnownSelect_taclet1102000_32" (formula "28") (term "0,0,0,0"))
                                    (rule "replace_known_left" (formula "28") (term "0,0,0") (ifseqformula "4"))
                                     (builtin "One Step Simplification" (formula "28"))
                                    (rule "inEqSimp_commuteGeq" (formula "28") (term "1"))
                                    (rule "inEqSimp_contradInEq1" (formula "28") (term "0") (ifseqformula "5"))
                                    (rule "qeq_literals" (formula "28") (term "0,0"))
                                     (builtin "One Step Simplification" (formula "28"))
                                    (rule "inEqSimp_contradInEq0" (formula "9") (ifseqformula "28"))
                                    (rule "andLeft" (formula "9"))
                                    (rule "inEqSimp_homoInEq1" (formula "9"))
                                    (rule "polySimp_pullOutFactor1b" (formula "9") (term "0"))
                                    (rule "add_literals" (formula "9") (term "1,1,0"))
                                    (rule "times_zero_1" (formula "9") (term "1,0"))
                                    (rule "add_zero_right" (formula "9") (term "0"))
                                    (rule "leq_literals" (formula "9"))
                                    (rule "closeFalse" (formula "9"))
                                 )
                              )
                           )
                           (branch "result_251.<created> = TRUE FALSE"
                              (rule "applyEqReverse" (formula "22") (term "1,0") (ifseqformula "21"))
                              (rule "hideAuxiliaryEq" (formula "21"))
                              (rule "replace_known_right" (formula "21") (term "0,0,0") (ifseqformula "28"))
                               (builtin "One Step Simplification" (formula "21"))
                              (rule "replace_known_right" (formula "20") (term "0,0") (ifseqformula "28"))
                               (builtin "One Step Simplification" (formula "20"))
                              (rule "cut_direct" (formula "17") (term "0"))
                              (branch "CUT: result_250.<created> = TRUE TRUE"
                                  (builtin "One Step Simplification" (formula "18"))
                                 (rule "true_left" (formula "18"))
                                 (rule "cut_direct" (formula "7") (term "0"))
                                 (branch "CUT: strPool( 〈'P'〉 ∘ ( 〈'a'〉 ∘ ( 〈's'〉 ∘ ( 〈's'〉 ∘ (〈'w'〉 ∘ (〈'o'〉 ∘ (〈'r'〉 ∘ 〈'd'〉))))))).<created> = TRUE TRUE"
                                     (builtin "One Step Simplification" (formula "8"))
                                    (rule "true_left" (formula "8"))
                                    (rule "arrayLengthNotNegative" (formula "6") (term "0"))
                                    (rule "arrayLengthIsAnInt" (formula "7") (term "0"))
                                    (rule "expand_inInt" (formula "7"))
                                    (rule "replace_int_MIN" (formula "7") (term "0,1"))
                                    (rule "replace_int_MAX" (formula "7") (term "1,0"))
                                    (rule "andLeft" (formula "7"))
                                    (rule "inEqSimp_commuteLeq" (formula "8"))
                                    (rule "inEqSimp_subsumption1" (formula "8") (ifseqformula "6"))
                                    (rule "leq_literals" (formula "8") (term "0"))
                                     (builtin "One Step Simplification" (formula "8"))
                                    (rule "true_left" (formula "8"))
                                    (rule "inEqSimp_exactShadow3" (formula "8") (ifseqformula "7"))
                                    (rule "polySimp_rightDist" (formula "8") (term "0,0"))
                                    (rule "mul_literals" (formula "8") (term "0,0,0"))
                                    (rule "polySimp_addComm1" (formula "8") (term "0"))
                                    (rule "add_literals" (formula "8") (term "0,0"))
                                    (rule "inEqSimp_sepNegMonomial1" (formula "8"))
                                    (rule "polySimp_mulLiterals" (formula "8") (term "0"))
                                    (rule "polySimp_elimOne" (formula "8") (term "0"))
                                    (rule "ifthenelse_split" (formula "24") (term "0"))
                                    (branch " result_251.<created>@anon_heap_withDelimiter«anonHeapFunction» = TRUE TRUE"
                                       (rule "applyEqReverse" (formula "26") (term "0,1,1,0") (ifseqformula "25"))
                                       (rule "applyEqReverse" (formula "26") (term "0,0,0,0,0,0") (ifseqformula "25"))
                                       (rule "hideAuxiliaryEq" (formula "25"))
                                       (rule "replace_known_left" (formula "23") (term "1") (ifseqformula "24"))
                                        (builtin "One Step Simplification" (formula "23"))
                                       (rule "true_left" (formula "23"))
                                       (rule "allLeft" (formula "28") (inst "t=i_0"))
                                       (rule "replaceKnownSelect_taclet1102000_32" (formula "28") (term "0,0,0,0"))
                                       (rule "replace_known_left" (formula "28") (term "0,0,0") (ifseqformula "4"))
                                        (builtin "One Step Simplification" (formula "28"))
                                       (rule "inEqSimp_commuteGeq" (formula "28") (term "1"))
                                       (rule "inEqSimp_contradInEq1" (formula "28") (term "0") (ifseqformula "5"))
                                       (rule "qeq_literals" (formula "28") (term "0,0"))
                                        (builtin "One Step Simplification" (formula "28"))
                                       (rule "inEqSimp_contradInEq1" (formula "28") (ifseqformula "9"))
                                       (rule "andLeft" (formula "28"))
                                       (rule "inEqSimp_homoInEq1" (formula "28"))
                                       (rule "polySimp_pullOutFactor1b" (formula "28") (term "0"))
                                       (rule "add_literals" (formula "28") (term "1,1,0"))
                                       (rule "times_zero_1" (formula "28") (term "1,0"))
                                       (rule "add_literals" (formula "28") (term "0"))
                                       (rule "leq_literals" (formula "28"))
                                       (rule "closeFalse" (formula "28"))
                                    )
                                    (branch " result_251.<created>@anon_heap_withDelimiter«anonHeapFunction» = TRUE FALSE"
                                       (rule "applyEqReverse" (formula "25") (term "0,1,1,0") (ifseqformula "24"))
                                       (rule "applyEqReverse" (formula "25") (term "0,0,0,0,0,0") (ifseqformula "24"))
                                       (rule "hideAuxiliaryEq" (formula "24"))
                                       (rule "replace_known_right" (formula "23") (term "1") (ifseqformula "30"))
                                        (builtin "One Step Simplification" (formula "23"))
                                       (rule "allLeft" (formula "28") (inst "t=i_0"))
                                       (rule "replaceKnownSelect_taclet1102000_32" (formula "28") (term "0,0,0,0"))
                                       (rule "replace_known_left" (formula "28") (term "0,0,0") (ifseqformula "4"))
                                        (builtin "One Step Simplification" (formula "28"))
                                       (rule "inEqSimp_commuteGeq" (formula "28") (term "1"))
                                       (rule "inEqSimp_contradInEq1" (formula "28") (term "0") (ifseqformula "5"))
                                       (rule "qeq_literals" (formula "28") (term "0,0"))
                                        (builtin "One Step Simplification" (formula "28"))
                                       (rule "inEqSimp_contradInEq0" (formula "9") (ifseqformula "28"))
                                       (rule "andLeft" (formula "9"))
                                       (rule "inEqSimp_homoInEq1" (formula "9"))
                                       (rule "polySimp_pullOutFactor1b" (formula "9") (term "0"))
                                       (rule "add_literals" (formula "9") (term "1,1,0"))
                                       (rule "times_zero_1" (formula "9") (term "1,0"))
                                       (rule "add_zero_right" (formula "9") (term "0"))
                                       (rule "leq_literals" (formula "9"))
                                       (rule "closeFalse" (formula "9"))
                                    )
                                 )
                                 (branch "CUT: strPool( 〈'P'〉 ∘ ( 〈'a'〉 ∘ ( 〈's'〉 ∘ ( 〈's'〉 ∘ (〈'w'〉 ∘ (〈'o'〉 ∘ (〈'r'〉 ∘ 〈'd'〉))))))).<created> = TRUE FALSE"
                                     (builtin "One Step Simplification" (formula "7"))
                                    (rule "arrayLengthNotNegative" (formula "6") (term "0"))
                                    (rule "arrayLengthIsAnInt" (formula "7") (term "0"))
                                    (rule "expand_inInt" (formula "7"))
                                    (rule "replace_int_MIN" (formula "7") (term "0,1"))
                                    (rule "replace_int_MAX" (formula "7") (term "1,0"))
                                    (rule "andLeft" (formula "7"))
                                    (rule "inEqSimp_commuteLeq" (formula "8"))
                                    (rule "inEqSimp_subsumption1" (formula "8") (ifseqformula "6"))
                                    (rule "leq_literals" (formula "8") (term "0"))
                                     (builtin "One Step Simplification" (formula "8"))
                                    (rule "true_left" (formula "8"))
                                    (rule "inEqSimp_exactShadow3" (formula "8") (ifseqformula "7"))
                                    (rule "polySimp_rightDist" (formula "8") (term "0,0"))
                                    (rule "mul_literals" (formula "8") (term "0,0,0"))
                                    (rule "polySimp_addComm1" (formula "8") (term "0"))
                                    (rule "add_literals" (formula "8") (term "0,0"))
                                    (rule "inEqSimp_sepNegMonomial1" (formula "8"))
                                    (rule "polySimp_mulLiterals" (formula "8") (term "0"))
                                    (rule "polySimp_elimOne" (formula "8") (term "0"))
                                    (rule "ifthenelse_split" (formula "24") (term "0"))
                                    (branch " result_251.<created>@anon_heap_withDelimiter«anonHeapFunction» = TRUE TRUE"
                                       (rule "applyEqReverse" (formula "26") (term "0,0,0,0,0,0") (ifseqformula "25"))
                                       (rule "applyEqReverse" (formula "26") (term "0,1,1,0") (ifseqformula "25"))
                                       (rule "hideAuxiliaryEq" (formula "25"))
                                       (rule "replace_known_left" (formula "23") (term "1") (ifseqformula "24"))
                                        (builtin "One Step Simplification" (formula "23"))
                                       (rule "true_left" (formula "23"))
                                       (rule "allLeft" (formula "28") (inst "t=i_0"))
                                       (rule "replaceKnownSelect_taclet1102000_32" (formula "28") (term "0,0,0,0"))
                                       (rule "replace_known_left" (formula "28") (term "0,0,0") (ifseqformula "4"))
                                        (builtin "One Step Simplification" (formula "28"))
                                       (rule "inEqSimp_commuteGeq" (formula "28") (term "1"))
                                       (rule "inEqSimp_contradInEq1" (formula "28") (term "0") (ifseqformula "5"))
                                       (rule "qeq_literals" (formula "28") (term "0,0"))
                                        (builtin "One Step Simplification" (formula "28"))
                                       (rule "inEqSimp_contradInEq1" (formula "28") (ifseqformula "9"))
                                       (rule "andLeft" (formula "28"))
                                       (rule "inEqSimp_homoInEq1" (formula "28"))
                                       (rule "polySimp_pullOutFactor1b" (formula "28") (term "0"))
                                       (rule "add_literals" (formula "28") (term "1,1,0"))
                                       (rule "times_zero_1" (formula "28") (term "1,0"))
                                       (rule "add_zero_right" (formula "28") (term "0"))
                                       (rule "leq_literals" (formula "28"))
                                       (rule "closeFalse" (formula "28"))
                                    )
                                    (branch " result_251.<created>@anon_heap_withDelimiter«anonHeapFunction» = TRUE FALSE"
                                       (rule "applyEqReverse" (formula "25") (term "0,0,0,0,0,0") (ifseqformula "24"))
                                       (rule "applyEqReverse" (formula "25") (term "0,1,1,0") (ifseqformula "24"))
                                       (rule "hideAuxiliaryEq" (formula "24"))
                                       (rule "replace_known_right" (formula "23") (term "1") (ifseqformula "30"))
                                        (builtin "One Step Simplification" (formula "23"))
                                       (rule "allLeft" (formula "28") (inst "t=i_0"))
                                       (rule "replaceKnownSelect_taclet1102000_32" (formula "28") (term "0,0,0,0"))
                                       (rule "replace_known_left" (formula "28") (term "0,0,0") (ifseqformula "4"))
                                        (builtin "One Step Simplification" (formula "28"))
                                       (rule "inEqSimp_commuteGeq" (formula "28") (term "1"))
                                       (rule "inEqSimp_contradInEq1" (formula "28") (term "1") (ifseqformula "9"))
                                       (rule "inEqSimp_homoInEq1" (formula "28") (term "0,1"))
                                       (rule "polySimp_pullOutFactor1b" (formula "28") (term "0,0,1"))
                                       (rule "add_literals" (formula "28") (term "1,1,0,0,1"))
                                       (rule "times_zero_1" (formula "28") (term "1,0,0,1"))
                                       (rule "add_literals" (formula "28") (term "0,0,1"))
                                       (rule "leq_literals" (formula "28") (term "0,1"))
                                        (builtin "One Step Simplification" (formula "28"))
                                       (rule "inEqSimp_subsumption0" (formula "8") (ifseqformula "28"))
                                       (rule "leq_literals" (formula "8") (term "0"))
                                        (builtin "One Step Simplification" (formula "8"))
                                       (rule "true_left" (formula "8"))
                                       (rule "inEqSimp_contradInEq0" (formula "5") (ifseqformula "27"))
                                       (rule "qeq_literals" (formula "5") (term "0"))
                                        (builtin "One Step Simplification" (formula "5"))
                                       (rule "closeFalse" (formula "5"))
                                    )
                                 )
                              )
                              (branch "CUT: result_250.<created> = TRUE FALSE"
                                  (builtin "One Step Simplification" (formula "17"))
                                 (rule "cut_direct" (formula "7") (term "0"))
                                 (branch "CUT: strPool( 〈'P'〉 ∘ ( 〈'a'〉 ∘ ( 〈's'〉 ∘ ( 〈's'〉 ∘ (〈'w'〉 ∘ (〈'o'〉 ∘ (〈'r'〉 ∘ 〈'd'〉))))))).<created> = TRUE TRUE"
                                     (builtin "One Step Simplification" (formula "8"))
                                    (rule "true_left" (formula "8"))
                                    (rule "arrayLengthNotNegative" (formula "6") (term "0"))
                                    (rule "arrayLengthIsAnInt" (formula "7") (term "0"))
                                    (rule "expand_inInt" (formula "7"))
                                    (rule "replace_int_MIN" (formula "7") (term "0,1"))
                                    (rule "replace_int_MAX" (formula "7") (term "1,0"))
                                    (rule "andLeft" (formula "7"))
                                    (rule "inEqSimp_commuteLeq" (formula "8"))
                                    (rule "inEqSimp_subsumption1" (formula "8") (ifseqformula "6"))
                                    (rule "leq_literals" (formula "8") (term "0"))
                                     (builtin "One Step Simplification" (formula "8"))
                                    (rule "true_left" (formula "8"))
                                    (rule "inEqSimp_exactShadow3" (formula "8") (ifseqformula "7"))
                                    (rule "polySimp_rightDist" (formula "8") (term "0,0"))
                                    (rule "mul_literals" (formula "8") (term "0,0,0"))
                                    (rule "polySimp_addComm1" (formula "8") (term "0"))
                                    (rule "add_literals" (formula "8") (term "0,0"))
                                    (rule "inEqSimp_sepNegMonomial1" (formula "8"))
                                    (rule "polySimp_mulLiterals" (formula "8") (term "0"))
                                    (rule "polySimp_elimOne" (formula "8") (term "0"))
                                    (rule "ifthenelse_split" (formula "24") (term "0"))
                                    (branch " result_251.<created>@anon_heap_withDelimiter«anonHeapFunction» = TRUE TRUE"
                                       (rule "applyEqReverse" (formula "26") (term "0,1,1,0") (ifseqformula "25"))
                                       (rule "applyEqReverse" (formula "26") (term "0,0,0,0,0,0") (ifseqformula "25"))
                                       (rule "hideAuxiliaryEq" (formula "25"))
                                       (rule "replace_known_left" (formula "23") (term "1") (ifseqformula "24"))
                                        (builtin "One Step Simplification" (formula "23"))
                                       (rule "true_left" (formula "23"))
                                       (rule "allLeft" (formula "28") (inst "t=i_0"))
                                       (rule "replaceKnownSelect_taclet1102000_32" (formula "28") (term "0,0,0,0"))
                                       (rule "replace_known_left" (formula "28") (term "0,0,0") (ifseqformula "4"))
                                        (builtin "One Step Simplification" (formula "28"))
                                       (rule "inEqSimp_commuteGeq" (formula "28") (term "1"))
                                       (rule "inEqSimp_contradInEq1" (formula "28") (term "0") (ifseqformula "5"))
                                       (rule "qeq_literals" (formula "28") (term "0,0"))
                                        (builtin "One Step Simplification" (formula "28"))
                                       (rule "inEqSimp_contradInEq1" (formula "28") (ifseqformula "9"))
                                       (rule "andLeft" (formula "28"))
                                       (rule "inEqSimp_homoInEq1" (formula "28"))
                                       (rule "polySimp_pullOutFactor1b" (formula "28") (term "0"))
                                       (rule "add_literals" (formula "28") (term "1,1,0"))
                                       (rule "times_zero_1" (formula "28") (term "1,0"))
                                       (rule "add_zero_right" (formula "28") (term "0"))
                                       (rule "leq_literals" (formula "28"))
                                       (rule "closeFalse" (formula "28"))
                                    )
                                    (branch " result_251.<created>@anon_heap_withDelimiter«anonHeapFunction» = TRUE FALSE"
                                       (rule "applyEqReverse" (formula "25") (term "0,1,1,0") (ifseqformula "24"))
                                       (rule "applyEqReverse" (formula "25") (term "0,0,0,0,0,0") (ifseqformula "24"))
                                       (rule "hideAuxiliaryEq" (formula "24"))
                                       (rule "replace_known_right" (formula "23") (term "1") (ifseqformula "30"))
                                        (builtin "One Step Simplification" (formula "23"))
                                       (rule "allLeft" (formula "28") (inst "t=i_0"))
                                       (rule "replaceKnownSelect_taclet1102000_32" (formula "28") (term "0,0,0,0"))
                                       (rule "replace_known_left" (formula "28") (term "0,0,0") (ifseqformula "4"))
                                        (builtin "One Step Simplification" (formula "28"))
                                       (rule "inEqSimp_commuteGeq" (formula "28") (term "1"))
                                       (rule "inEqSimp_contradInEq1" (formula "28") (term "0") (ifseqformula "5"))
                                       (rule "qeq_literals" (formula "28") (term "0,0"))
                                        (builtin "One Step Simplification" (formula "28"))
                                       (rule "inEqSimp_contradInEq1" (formula "28") (ifseqformula "9"))
                                       (rule "andLeft" (formula "28"))
                                       (rule "inEqSimp_homoInEq1" (formula "28"))
                                       (rule "polySimp_pullOutFactor1b" (formula "28") (term "0"))
                                       (rule "add_literals" (formula "28") (term "1,1,0"))
                                       (rule "times_zero_1" (formula "28") (term "1,0"))
                                       (rule "add_zero_right" (formula "28") (term "0"))
                                       (rule "leq_literals" (formula "28"))
                                       (rule "closeFalse" (formula "28"))
                                    )
                                 )
                                 (branch "CUT: strPool( 〈'P'〉 ∘ ( 〈'a'〉 ∘ ( 〈's'〉 ∘ ( 〈's'〉 ∘ (〈'w'〉 ∘ (〈'o'〉 ∘ (〈'r'〉 ∘ 〈'd'〉))))))).<created> = TRUE FALSE"
                                     (builtin "One Step Simplification" (formula "7"))
                                    (rule "arrayLengthNotNegative" (formula "6") (term "0"))
                                    (rule "arrayLengthIsAnInt" (formula "7") (term "0"))
                                    (rule "expand_inInt" (formula "7"))
                                    (rule "replace_int_MAX" (formula "7") (term "1,0"))
                                    (rule "replace_int_MIN" (formula "7") (term "0,1"))
                                    (rule "andLeft" (formula "7"))
                                    (rule "inEqSimp_commuteLeq" (formula "8"))
                                    (rule "inEqSimp_subsumption1" (formula "8") (ifseqformula "6"))
                                    (rule "leq_literals" (formula "8") (term "0"))
                                     (builtin "One Step Simplification" (formula "8"))
                                    (rule "true_left" (formula "8"))
                                    (rule "inEqSimp_exactShadow3" (formula "8") (ifseqformula "7"))
                                    (rule "polySimp_rightDist" (formula "8") (term "0,0"))
                                    (rule "mul_literals" (formula "8") (term "0,0,0"))
                                    (rule "polySimp_addComm1" (formula "8") (term "0"))
                                    (rule "add_literals" (formula "8") (term "0,0"))
                                    (rule "inEqSimp_sepNegMonomial1" (formula "8"))
                                    (rule "polySimp_mulLiterals" (formula "8") (term "0"))
                                    (rule "polySimp_elimOne" (formula "8") (term "0"))
                                    (rule "allLeft" (formula "29") (inst "t=i_0"))
                                    (rule "replaceKnownSelect_taclet1102000_32" (formula "29") (term "0,0,0,0"))
                                    (rule "replace_known_left" (formula "29") (term "0,0,0") (ifseqformula "4"))
                                     (builtin "One Step Simplification" (formula "29"))
                                    (rule "inEqSimp_commuteGeq" (formula "29") (term "1"))
                                    (rule "inEqSimp_contradInEq1" (formula "29") (term "1") (ifseqformula "9"))
                                    (rule "inEqSimp_homoInEq1" (formula "29") (term "0,1"))
                                    (rule "polySimp_pullOutFactor1b" (formula "29") (term "0,0,1"))
                                    (rule "add_literals" (formula "29") (term "1,1,0,0,1"))
                                    (rule "times_zero_1" (formula "29") (term "1,0,0,1"))
                                    (rule "add_literals" (formula "29") (term "0,0,1"))
                                    (rule "leq_literals" (formula "29") (term "0,1"))
                                     (builtin "One Step Simplification" (formula "29"))
                                    (rule "inEqSimp_subsumption0" (formula "8") (ifseqformula "29"))
                                    (rule "leq_literals" (formula "8") (term "0"))
                                     (builtin "One Step Simplification" (formula "8"))
                                    (rule "true_left" (formula "8"))
                                    (rule "inEqSimp_contradInEq0" (formula "5") (ifseqformula "28"))
                                    (rule "qeq_literals" (formula "5") (term "0"))
                                     (builtin "One Step Simplification" (formula "5"))
                                    (rule "closeFalse" (formula "5"))
                                 )
                              )
                           )
                        )
                     )
                     (branch " ¬( result_252.<created> = TRUE ∨ result_252.<created>@anon_heap_toList«anonHeapFunction» = TRUE ∨ result_252.<created>@anon_heap_withDelimiter«anonHeapFunction» = TRUE) ∧ result_252[i_0]@anon_heap_toArray«anonHeapFunction» = null"
                        (rule "andLeft" (formula "3"))
                        (rule "notLeft" (formula "3"))
                        (rule "orRight" (formula "30"))
                        (rule "orRight" (formula "30"))
                        (rule "replace_known_right" (formula "1") (term "0,0") (ifseqformula "30"))
                         (builtin "One Step Simplification" (formula "1"))
                        (rule "applyEqReverse" (formula "2") (term "1,0") (ifseqformula "1"))
                        (rule "hideAuxiliaryEq" (formula "1"))
                        (rule "replace_known_right" (formula "1") (term "1,0,0") (ifseqformula "31"))
                         (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "29")))
                        (rule "hideAuxiliaryEq" (formula "1"))
                        (rule "replace_known_right" (formula "25") (term "0,0,0") (ifseqformula "28"))
                         (builtin "One Step Simplification" (formula "25") (ifInst ""  (formula "29")) (ifInst ""  (formula "30")))
                        (rule "ifthenelse_split" (formula "19") (term "0"))
                        (branch "result_251.<created> = TRUE TRUE"
                           (rule "applyEqReverse" (formula "21") (term "1,0") (ifseqformula "20"))
                           (rule "hideAuxiliaryEq" (formula "20"))
                           (rule "replace_known_left" (formula "20") (term "0,0,0") (ifseqformula "19"))
                            (builtin "One Step Simplification" (formula "20"))
                           (rule "applyEqReverse" (formula "21") (term "0,0,0,0,0,0") (ifseqformula "20"))
                           (rule "applyEqReverse" (formula "21") (term "0,1,1,0") (ifseqformula "20"))
                           (rule "hideAuxiliaryEq" (formula "20"))
                           (rule "replace_known_left" (formula "18") (term "0,0") (ifseqformula "19"))
                            (builtin "One Step Simplification" (formula "18"))
                           (rule "true_left" (formula "18"))
                           (rule "cut_direct" (formula "15") (term "0"))
                           (branch "CUT: result_250.<created> = TRUE TRUE"
                               (builtin "One Step Simplification" (formula "16"))
                              (rule "true_left" (formula "16"))
                              (rule "cut_direct" (formula "5") (term "0"))
                              (branch "CUT: strPool( 〈'P'〉 ∘ ( 〈'a'〉 ∘ ( 〈's'〉 ∘ ( 〈's'〉 ∘ (〈'w'〉 ∘ (〈'o'〉 ∘ (〈'r'〉 ∘ 〈'd'〉))))))).<created> = TRUE TRUE"
                                  (builtin "One Step Simplification" (formula "6"))
                                 (rule "true_left" (formula "6"))
                                 (rule "arrayLengthIsAnInt" (formula "4") (term "0"))
                                 (rule "expand_inInt" (formula "4"))
                                 (rule "replace_int_MIN" (formula "4") (term "0,1"))
                                 (rule "replace_int_MAX" (formula "4") (term "1,0"))
                                 (rule "andLeft" (formula "4"))
                                 (rule "inEqSimp_commuteLeq" (formula "5"))
                                 (rule "inEqSimp_exactShadow3" (formula "6") (ifseqformula "4"))
                                 (rule "polySimp_rightDist" (formula "6") (term "0,0"))
                                 (rule "mul_literals" (formula "6") (term "0,0,0"))
                                 (rule "polySimp_addComm1" (formula "6") (term "0"))
                                 (rule "add_literals" (formula "6") (term "0,0"))
                                 (rule "inEqSimp_sepNegMonomial1" (formula "6"))
                                 (rule "polySimp_mulLiterals" (formula "6") (term "0"))
                                 (rule "polySimp_elimOne" (formula "6") (term "0"))
                                 (rule "arrayLengthNotNegative" (formula "7") (term "0"))
                                 (rule "inEqSimp_subsumption1" (formula "5") (ifseqformula "7"))
                                 (rule "leq_literals" (formula "5") (term "0"))
                                  (builtin "One Step Simplification" (formula "5"))
                                 (rule "true_left" (formula "5"))
                                 (rule "allLeft" (formula "27") (inst "t=i_0"))
                                 (rule "replaceKnownSelect_taclet1102000_32" (formula "27") (term "0,0,0,0"))
                                 (rule "replace_known_left" (formula "27") (term "0,0,0") (ifseqformula "2"))
                                  (builtin "One Step Simplification" (formula "27"))
                                 (rule "inEqSimp_commuteGeq" (formula "27") (term "1"))
                                 (rule "inEqSimp_contradInEq1" (formula "27") (term "0") (ifseqformula "3"))
                                 (rule "qeq_literals" (formula "27") (term "0,0"))
                                  (builtin "One Step Simplification" (formula "27"))
                                 (rule "inEqSimp_contradInEq0" (formula "7") (ifseqformula "27"))
                                 (rule "andLeft" (formula "7"))
                                 (rule "inEqSimp_homoInEq1" (formula "7"))
                                 (rule "polySimp_pullOutFactor1b" (formula "7") (term "0"))
                                 (rule "add_literals" (formula "7") (term "1,1,0"))
                                 (rule "times_zero_1" (formula "7") (term "1,0"))
                                 (rule "add_literals" (formula "7") (term "0"))
                                 (rule "leq_literals" (formula "7"))
                                 (rule "closeFalse" (formula "7"))
                              )
                              (branch "CUT: strPool( 〈'P'〉 ∘ ( 〈'a'〉 ∘ ( 〈's'〉 ∘ ( 〈's'〉 ∘ (〈'w'〉 ∘ (〈'o'〉 ∘ (〈'r'〉 ∘ 〈'd'〉))))))).<created> = TRUE FALSE"
                                  (builtin "One Step Simplification" (formula "5"))
                                 (rule "arrayLengthIsAnInt" (formula "4") (term "0"))
                                 (rule "expand_inInt" (formula "4"))
                                 (rule "replace_int_MAX" (formula "4") (term "1,0"))
                                 (rule "replace_int_MIN" (formula "4") (term "0,1"))
                                 (rule "andLeft" (formula "4"))
                                 (rule "inEqSimp_commuteLeq" (formula "5"))
                                 (rule "inEqSimp_exactShadow3" (formula "6") (ifseqformula "4"))
                                 (rule "polySimp_rightDist" (formula "6") (term "0,0"))
                                 (rule "mul_literals" (formula "6") (term "0,0,0"))
                                 (rule "polySimp_addComm1" (formula "6") (term "0"))
                                 (rule "add_literals" (formula "6") (term "0,0"))
                                 (rule "inEqSimp_sepNegMonomial1" (formula "6"))
                                 (rule "polySimp_mulLiterals" (formula "6") (term "0"))
                                 (rule "polySimp_elimOne" (formula "6") (term "0"))
                                 (rule "arrayLengthNotNegative" (formula "7") (term "0"))
                                 (rule "inEqSimp_subsumption1" (formula "5") (ifseqformula "7"))
                                 (rule "leq_literals" (formula "5") (term "0"))
                                  (builtin "One Step Simplification" (formula "5"))
                                 (rule "true_left" (formula "5"))
                                 (rule "allLeft" (formula "27") (inst "t=i_0"))
                                 (rule "replaceKnownSelect_taclet1102000_32" (formula "27") (term "0,0,0,0"))
                                 (rule "replace_known_left" (formula "27") (term "0,0,0") (ifseqformula "2"))
                                  (builtin "One Step Simplification" (formula "27"))
                                 (rule "inEqSimp_commuteGeq" (formula "27") (term "1"))
                                 (rule "inEqSimp_contradInEq1" (formula "27") (term "1") (ifseqformula "7"))
                                 (rule "inEqSimp_homoInEq1" (formula "27") (term "0,1"))
                                 (rule "polySimp_pullOutFactor1b" (formula "27") (term "0,0,1"))
                                 (rule "add_literals" (formula "27") (term "1,1,0,0,1"))
                                 (rule "times_zero_1" (formula "27") (term "1,0,0,1"))
                                 (rule "add_zero_right" (formula "27") (term "0,0,1"))
                                 (rule "leq_literals" (formula "27") (term "0,1"))
                                  (builtin "One Step Simplification" (formula "27"))
                                 (rule "inEqSimp_subsumption0" (formula "5") (ifseqformula "27"))
                                 (rule "leq_literals" (formula "5") (term "0"))
                                  (builtin "One Step Simplification" (formula "5"))
                                 (rule "true_left" (formula "5"))
                                 (rule "inEqSimp_contradInEq0" (formula "3") (ifseqformula "26"))
                                 (rule "qeq_literals" (formula "3") (term "0"))
                                  (builtin "One Step Simplification" (formula "3"))
                                 (rule "closeFalse" (formula "3"))
                              )
                           )
                           (branch "CUT: result_250.<created> = TRUE FALSE"
                               (builtin "One Step Simplification" (formula "15"))
                              (rule "cut_direct" (formula "5") (term "0"))
                              (branch "CUT: strPool( 〈'P'〉 ∘ ( 〈'a'〉 ∘ ( 〈's'〉 ∘ ( 〈's'〉 ∘ (〈'w'〉 ∘ (〈'o'〉 ∘ (〈'r'〉 ∘ 〈'd'〉))))))).<created> = TRUE TRUE"
                                  (builtin "One Step Simplification" (formula "6"))
                                 (rule "true_left" (formula "6"))
                                 (rule "arrayLengthIsAnInt" (formula "4") (term "0"))
                                 (rule "expand_inInt" (formula "4"))
                                 (rule "replace_int_MIN" (formula "4") (term "0,1"))
                                 (rule "replace_int_MAX" (formula "4") (term "1,0"))
                                 (rule "andLeft" (formula "4"))
                                 (rule "inEqSimp_commuteLeq" (formula "5"))
                                 (rule "inEqSimp_exactShadow3" (formula "6") (ifseqformula "4"))
                                 (rule "polySimp_rightDist" (formula "6") (term "0,0"))
                                 (rule "mul_literals" (formula "6") (term "0,0,0"))
                                 (rule "polySimp_addComm1" (formula "6") (term "0"))
                                 (rule "add_literals" (formula "6") (term "0,0"))
                                 (rule "inEqSimp_sepNegMonomial1" (formula "6"))
                                 (rule "polySimp_mulLiterals" (formula "6") (term "0"))
                                 (rule "polySimp_elimOne" (formula "6") (term "0"))
                                 (rule "arrayLengthNotNegative" (formula "7") (term "0"))
                                 (rule "inEqSimp_subsumption1" (formula "5") (ifseqformula "7"))
                                 (rule "leq_literals" (formula "5") (term "0"))
                                  (builtin "One Step Simplification" (formula "5"))
                                 (rule "true_left" (formula "5"))
                                 (rule "allLeft" (formula "27") (inst "t=i_0"))
                                 (rule "replaceKnownSelect_taclet1102000_32" (formula "27") (term "0,0,0,0"))
                                 (rule "replace_known_left" (formula "27") (term "0,0,0") (ifseqformula "2"))
                                  (builtin "One Step Simplification" (formula "27"))
                                 (rule "inEqSimp_commuteGeq" (formula "27") (term "1"))
                                 (rule "inEqSimp_contradInEq1" (formula "27") (term "0") (ifseqformula "3"))
                                 (rule "qeq_literals" (formula "27") (term "0,0"))
                                  (builtin "One Step Simplification" (formula "27"))
                                 (rule "inEqSimp_contradInEq1" (formula "27") (ifseqformula "7"))
                                 (rule "andLeft" (formula "27"))
                                 (rule "inEqSimp_homoInEq1" (formula "27"))
                                 (rule "polySimp_pullOutFactor1b" (formula "27") (term "0"))
                                 (rule "add_literals" (formula "27") (term "1,1,0"))
                                 (rule "times_zero_1" (formula "27") (term "1,0"))
                                 (rule "add_zero_right" (formula "27") (term "0"))
                                 (rule "leq_literals" (formula "27"))
                                 (rule "closeFalse" (formula "27"))
                              )
                              (branch "CUT: strPool( 〈'P'〉 ∘ ( 〈'a'〉 ∘ ( 〈's'〉 ∘ ( 〈's'〉 ∘ (〈'w'〉 ∘ (〈'o'〉 ∘ (〈'r'〉 ∘ 〈'd'〉))))))).<created> = TRUE FALSE"
                                  (builtin "One Step Simplification" (formula "5"))
                                 (rule "arrayLengthIsAnInt" (formula "4") (term "0"))
                                 (rule "expand_inInt" (formula "4"))
                                 (rule "replace_int_MIN" (formula "4") (term "0,1"))
                                 (rule "replace_int_MAX" (formula "4") (term "1,0"))
                                 (rule "andLeft" (formula "4"))
                                 (rule "inEqSimp_commuteLeq" (formula "5"))
                                 (rule "inEqSimp_exactShadow3" (formula "6") (ifseqformula "4"))
                                 (rule "polySimp_rightDist" (formula "6") (term "0,0"))
                                 (rule "mul_literals" (formula "6") (term "0,0,0"))
                                 (rule "polySimp_addComm1" (formula "6") (term "0"))
                                 (rule "add_literals" (formula "6") (term "0,0"))
                                 (rule "inEqSimp_sepNegMonomial1" (formula "6"))
                                 (rule "polySimp_mulLiterals" (formula "6") (term "0"))
                                 (rule "polySimp_elimOne" (formula "6") (term "0"))
                                 (rule "arrayLengthNotNegative" (formula "7") (term "0"))
                                 (rule "inEqSimp_subsumption1" (formula "5") (ifseqformula "7"))
                                 (rule "leq_literals" (formula "5") (term "0"))
                                  (builtin "One Step Simplification" (formula "5"))
                                 (rule "true_left" (formula "5"))
                                 (rule "allLeft" (formula "27") (inst "t=i_0"))
                                 (rule "replaceKnownSelect_taclet1102000_32" (formula "27") (term "0,0,0,0"))
                                 (rule "replace_known_left" (formula "27") (term "0,0,0") (ifseqformula "2"))
                                  (builtin "One Step Simplification" (formula "27"))
                                 (rule "inEqSimp_commuteGeq" (formula "27") (term "1"))
                                 (rule "inEqSimp_contradInEq1" (formula "27") (term "0") (ifseqformula "3"))
                                 (rule "qeq_literals" (formula "27") (term "0,0"))
                                  (builtin "One Step Simplification" (formula "27"))
                                 (rule "inEqSimp_contradInEq0" (formula "7") (ifseqformula "27"))
                                 (rule "andLeft" (formula "7"))
                                 (rule "inEqSimp_homoInEq1" (formula "7"))
                                 (rule "polySimp_pullOutFactor1b" (formula "7") (term "0"))
                                 (rule "add_literals" (formula "7") (term "1,1,0"))
                                 (rule "times_zero_1" (formula "7") (term "1,0"))
                                 (rule "add_zero_right" (formula "7") (term "0"))
                                 (rule "leq_literals" (formula "7"))
                                 (rule "closeFalse" (formula "7"))
                              )
                           )
                        )
                        (branch "result_251.<created> = TRUE FALSE"
                           (rule "applyEqReverse" (formula "20") (term "1,0") (ifseqformula "19"))
                           (rule "hideAuxiliaryEq" (formula "19"))
                           (rule "replace_known_right" (formula "19") (term "0,0,0") (ifseqformula "27"))
                            (builtin "One Step Simplification" (formula "19"))
                           (rule "replace_known_right" (formula "18") (term "0,0") (ifseqformula "27"))
                            (builtin "One Step Simplification" (formula "18"))
                           (rule "cut_direct" (formula "15") (term "0"))
                           (branch "CUT: result_250.<created> = TRUE TRUE"
                               (builtin "One Step Simplification" (formula "16"))
                              (rule "true_left" (formula "16"))
                              (rule "cut_direct" (formula "5") (term "0"))
                              (branch "CUT: strPool( 〈'P'〉 ∘ ( 〈'a'〉 ∘ ( 〈's'〉 ∘ ( 〈's'〉 ∘ (〈'w'〉 ∘ (〈'o'〉 ∘ (〈'r'〉 ∘ 〈'd'〉))))))).<created> = TRUE TRUE"
                                  (builtin "One Step Simplification" (formula "6"))
                                 (rule "true_left" (formula "6"))
                                 (rule "arrayLengthIsAnInt" (formula "4") (term "0"))
                                 (rule "expand_inInt" (formula "4"))
                                 (rule "replace_int_MIN" (formula "4") (term "0,1"))
                                 (rule "replace_int_MAX" (formula "4") (term "1,0"))
                                 (rule "andLeft" (formula "4"))
                                 (rule "inEqSimp_commuteLeq" (formula "5"))
                                 (rule "inEqSimp_exactShadow3" (formula "6") (ifseqformula "4"))
                                 (rule "polySimp_rightDist" (formula "6") (term "0,0"))
                                 (rule "mul_literals" (formula "6") (term "0,0,0"))
                                 (rule "polySimp_addComm1" (formula "6") (term "0"))
                                 (rule "add_literals" (formula "6") (term "0,0"))
                                 (rule "inEqSimp_sepNegMonomial1" (formula "6"))
                                 (rule "polySimp_mulLiterals" (formula "6") (term "0"))
                                 (rule "polySimp_elimOne" (formula "6") (term "0"))
                                 (rule "arrayLengthNotNegative" (formula "7") (term "0"))
                                 (rule "inEqSimp_subsumption1" (formula "5") (ifseqformula "7"))
                                 (rule "leq_literals" (formula "5") (term "0"))
                                  (builtin "One Step Simplification" (formula "5"))
                                 (rule "true_left" (formula "5"))
                                 (rule "ifthenelse_split" (formula "22") (term "0"))
                                 (branch " result_251.<created>@anon_heap_withDelimiter«anonHeapFunction» = TRUE TRUE"
                                    (rule "applyEqReverse" (formula "24") (term "0,0,0,0,0,0") (ifseqformula "23"))
                                    (rule "applyEqReverse" (formula "24") (term "0,1,1,0") (ifseqformula "23"))
                                    (rule "hideAuxiliaryEq" (formula "23"))
                                    (rule "replace_known_left" (formula "21") (term "1") (ifseqformula "22"))
                                     (builtin "One Step Simplification" (formula "21"))
                                    (rule "true_left" (formula "21"))
                                    (rule "allLeft" (formula "27") (inst "t=i_0"))
                                    (rule "replaceKnownSelect_taclet1102000_32" (formula "27") (term "0,0,0,0"))
                                    (rule "replace_known_left" (formula "27") (term "0,0,0") (ifseqformula "2"))
                                     (builtin "One Step Simplification" (formula "27"))
                                    (rule "inEqSimp_commuteGeq" (formula "27") (term "1"))
                                    (rule "inEqSimp_contradInEq1" (formula "27") (term "0") (ifseqformula "3"))
                                    (rule "qeq_literals" (formula "27") (term "0,0"))
                                     (builtin "One Step Simplification" (formula "27"))
                                    (rule "inEqSimp_contradInEq1" (formula "27") (ifseqformula "7"))
                                    (rule "andLeft" (formula "27"))
                                    (rule "inEqSimp_homoInEq1" (formula "27"))
                                    (rule "polySimp_pullOutFactor1b" (formula "27") (term "0"))
                                    (rule "add_literals" (formula "27") (term "1,1,0"))
                                    (rule "times_zero_1" (formula "27") (term "1,0"))
                                    (rule "add_zero_right" (formula "27") (term "0"))
                                    (rule "leq_literals" (formula "27"))
                                    (rule "closeFalse" (formula "27"))
                                 )
                                 (branch " result_251.<created>@anon_heap_withDelimiter«anonHeapFunction» = TRUE FALSE"
                                    (rule "applyEqReverse" (formula "23") (term "0,1,1,0") (ifseqformula "22"))
                                    (rule "applyEqReverse" (formula "23") (term "0,0,0,0,0,0") (ifseqformula "22"))
                                    (rule "hideAuxiliaryEq" (formula "22"))
                                    (rule "replace_known_right" (formula "21") (term "1") (ifseqformula "29"))
                                     (builtin "One Step Simplification" (formula "21"))
                                    (rule "allLeft" (formula "27") (inst "t=i_0"))
                                    (rule "replaceKnownSelect_taclet1102000_32" (formula "27") (term "0,0,0,0"))
                                    (rule "replace_known_left" (formula "27") (term "0,0,0") (ifseqformula "2"))
                                     (builtin "One Step Simplification" (formula "27"))
                                    (rule "inEqSimp_commuteGeq" (formula "27") (term "1"))
                                    (rule "inEqSimp_contradInEq1" (formula "27") (term "0") (ifseqformula "3"))
                                    (rule "qeq_literals" (formula "27") (term "0,0"))
                                     (builtin "One Step Simplification" (formula "27"))
                                    (rule "inEqSimp_contradInEq1" (formula "27") (ifseqformula "7"))
                                    (rule "andLeft" (formula "27"))
                                    (rule "inEqSimp_homoInEq1" (formula "27"))
                                    (rule "polySimp_pullOutFactor1b" (formula "27") (term "0"))
                                    (rule "add_literals" (formula "27") (term "1,1,0"))
                                    (rule "times_zero_1" (formula "27") (term "1,0"))
                                    (rule "add_zero_right" (formula "27") (term "0"))
                                    (rule "leq_literals" (formula "27"))
                                    (rule "closeFalse" (formula "27"))
                                 )
                              )
                              (branch "CUT: strPool( 〈'P'〉 ∘ ( 〈'a'〉 ∘ ( 〈's'〉 ∘ ( 〈's'〉 ∘ (〈'w'〉 ∘ (〈'o'〉 ∘ (〈'r'〉 ∘ 〈'd'〉))))))).<created> = TRUE FALSE"
                                  (builtin "One Step Simplification" (formula "5"))
                                 (rule "arrayLengthIsAnInt" (formula "4") (term "0"))
                                 (rule "expand_inInt" (formula "4"))
                                 (rule "replace_int_MIN" (formula "4") (term "0,1"))
                                 (rule "replace_int_MAX" (formula "4") (term "1,0"))
                                 (rule "andLeft" (formula "4"))
                                 (rule "inEqSimp_commuteLeq" (formula "5"))
                                 (rule "inEqSimp_exactShadow3" (formula "6") (ifseqformula "4"))
                                 (rule "polySimp_rightDist" (formula "6") (term "0,0"))
                                 (rule "mul_literals" (formula "6") (term "0,0,0"))
                                 (rule "polySimp_addComm1" (formula "6") (term "0"))
                                 (rule "add_literals" (formula "6") (term "0,0"))
                                 (rule "inEqSimp_sepNegMonomial1" (formula "6"))
                                 (rule "polySimp_mulLiterals" (formula "6") (term "0"))
                                 (rule "polySimp_elimOne" (formula "6") (term "0"))
                                 (rule "arrayLengthNotNegative" (formula "7") (term "0"))
                                 (rule "inEqSimp_subsumption1" (formula "5") (ifseqformula "7"))
                                 (rule "leq_literals" (formula "5") (term "0"))
                                  (builtin "One Step Simplification" (formula "5"))
                                 (rule "true_left" (formula "5"))
                                 (rule "ifthenelse_split" (formula "22") (term "0"))
                                 (branch " result_251.<created>@anon_heap_withDelimiter«anonHeapFunction» = TRUE TRUE"
                                    (rule "applyEqReverse" (formula "24") (term "0,0,0,0,0,0") (ifseqformula "23"))
                                    (rule "applyEqReverse" (formula "24") (term "0,1,1,0") (ifseqformula "23"))
                                    (rule "hideAuxiliaryEq" (formula "23"))
                                    (rule "replace_known_left" (formula "21") (term "1") (ifseqformula "22"))
                                     (builtin "One Step Simplification" (formula "21"))
                                    (rule "true_left" (formula "21"))
                                    (rule "allLeft" (formula "27") (inst "t=i_0"))
                                    (rule "replaceKnownSelect_taclet1102000_32" (formula "27") (term "0,0,0,0"))
                                    (rule "replace_known_left" (formula "27") (term "0,0,0") (ifseqformula "2"))
                                     (builtin "One Step Simplification" (formula "27"))
                                    (rule "inEqSimp_commuteGeq" (formula "27") (term "1"))
                                    (rule "inEqSimp_contradInEq1" (formula "27") (term "0") (ifseqformula "3"))
                                    (rule "qeq_literals" (formula "27") (term "0,0"))
                                     (builtin "One Step Simplification" (formula "27"))
                                    (rule "inEqSimp_contradInEq0" (formula "7") (ifseqformula "27"))
                                    (rule "andLeft" (formula "7"))
                                    (rule "inEqSimp_homoInEq1" (formula "7"))
                                    (rule "polySimp_pullOutFactor1b" (formula "7") (term "0"))
                                    (rule "add_literals" (formula "7") (term "1,1,0"))
                                    (rule "times_zero_1" (formula "7") (term "1,0"))
                                    (rule "add_zero_right" (formula "7") (term "0"))
                                    (rule "leq_literals" (formula "7"))
                                    (rule "closeFalse" (formula "7"))
                                 )
                                 (branch " result_251.<created>@anon_heap_withDelimiter«anonHeapFunction» = TRUE FALSE"
                                    (rule "applyEqReverse" (formula "23") (term "0,0,0,0,0,0") (ifseqformula "22"))
                                    (rule "applyEqReverse" (formula "23") (term "0,1,1,0") (ifseqformula "22"))
                                    (rule "hideAuxiliaryEq" (formula "22"))
                                    (rule "replace_known_right" (formula "21") (term "1") (ifseqformula "29"))
                                     (builtin "One Step Simplification" (formula "21"))
                                    (rule "allLeft" (formula "27") (inst "t=i_0"))
                                    (rule "replaceKnownSelect_taclet1102000_32" (formula "27") (term "0,0,0,0"))
                                    (rule "replace_known_left" (formula "27") (term "0,0,0") (ifseqformula "2"))
                                     (builtin "One Step Simplification" (formula "27"))
                                    (rule "inEqSimp_commuteGeq" (formula "27") (term "1"))
                                    (rule "inEqSimp_contradInEq1" (formula "27") (term "1") (ifseqformula "7"))
                                    (rule "inEqSimp_homoInEq1" (formula "27") (term "0,1"))
                                    (rule "polySimp_pullOutFactor1b" (formula "27") (term "0,0,1"))
                                    (rule "add_literals" (formula "27") (term "1,1,0,0,1"))
                                    (rule "times_zero_1" (formula "27") (term "1,0,0,1"))
                                    (rule "add_literals" (formula "27") (term "0,0,1"))
                                    (rule "leq_literals" (formula "27") (term "0,1"))
                                     (builtin "One Step Simplification" (formula "27"))
                                    (rule "inEqSimp_contradInEq1" (formula "27") (ifseqformula "3"))
                                    (rule "qeq_literals" (formula "27") (term "0"))
                                     (builtin "One Step Simplification" (formula "27"))
                                    (rule "closeFalse" (formula "27"))
                                 )
                              )
                           )
                           (branch "CUT: result_250.<created> = TRUE FALSE"
                               (builtin "One Step Simplification" (formula "15"))
                              (rule "cut_direct" (formula "5") (term "0"))
                              (branch "CUT: strPool( 〈'P'〉 ∘ ( 〈'a'〉 ∘ ( 〈's'〉 ∘ ( 〈's'〉 ∘ (〈'w'〉 ∘ (〈'o'〉 ∘ (〈'r'〉 ∘ 〈'd'〉))))))).<created> = TRUE TRUE"
                                  (builtin "One Step Simplification" (formula "6"))
                                 (rule "true_left" (formula "6"))
                                 (rule "arrayLengthIsAnInt" (formula "4") (term "0"))
                                 (rule "expand_inInt" (formula "4"))
                                 (rule "replace_int_MIN" (formula "4") (term "0,1"))
                                 (rule "replace_int_MAX" (formula "4") (term "1,0"))
                                 (rule "andLeft" (formula "4"))
                                 (rule "inEqSimp_commuteLeq" (formula "5"))
                                 (rule "inEqSimp_exactShadow3" (formula "6") (ifseqformula "4"))
                                 (rule "polySimp_rightDist" (formula "6") (term "0,0"))
                                 (rule "mul_literals" (formula "6") (term "0,0,0"))
                                 (rule "polySimp_addComm1" (formula "6") (term "0"))
                                 (rule "add_literals" (formula "6") (term "0,0"))
                                 (rule "inEqSimp_sepNegMonomial1" (formula "6"))
                                 (rule "polySimp_mulLiterals" (formula "6") (term "0"))
                                 (rule "polySimp_elimOne" (formula "6") (term "0"))
                                 (rule "arrayLengthNotNegative" (formula "7") (term "0"))
                                 (rule "inEqSimp_subsumption1" (formula "5") (ifseqformula "7"))
                                 (rule "leq_literals" (formula "5") (term "0"))
                                  (builtin "One Step Simplification" (formula "5"))
                                 (rule "true_left" (formula "5"))
                                 (rule "ifthenelse_split" (formula "22") (term "0"))
                                 (branch " result_251.<created>@anon_heap_withDelimiter«anonHeapFunction» = TRUE TRUE"
                                    (rule "applyEqReverse" (formula "24") (term "0,1,1,0") (ifseqformula "23"))
                                    (rule "applyEqReverse" (formula "24") (term "0,0,0,0,0,0") (ifseqformula "23"))
                                    (rule "hideAuxiliaryEq" (formula "23"))
                                    (rule "replace_known_left" (formula "21") (term "1") (ifseqformula "22"))
                                     (builtin "One Step Simplification" (formula "21"))
                                    (rule "true_left" (formula "21"))
                                    (rule "allLeft" (formula "27") (inst "t=i_0"))
                                    (rule "replaceKnownSelect_taclet1102000_32" (formula "27") (term "0,0,0,0"))
                                    (rule "replace_known_left" (formula "27") (term "0,0,0") (ifseqformula "2"))
                                     (builtin "One Step Simplification" (formula "27"))
                                    (rule "inEqSimp_commuteGeq" (formula "27") (term "1"))
                                    (rule "inEqSimp_contradInEq1" (formula "27") (term "0") (ifseqformula "3"))
                                    (rule "qeq_literals" (formula "27") (term "0,0"))
                                     (builtin "One Step Simplification" (formula "27"))
                                    (rule "inEqSimp_contradInEq1" (formula "27") (ifseqformula "7"))
                                    (rule "andLeft" (formula "27"))
                                    (rule "inEqSimp_homoInEq1" (formula "27"))
                                    (rule "polySimp_pullOutFactor1b" (formula "27") (term "0"))
                                    (rule "add_literals" (formula "27") (term "1,1,0"))
                                    (rule "times_zero_1" (formula "27") (term "1,0"))
                                    (rule "add_zero_right" (formula "27") (term "0"))
                                    (rule "leq_literals" (formula "27"))
                                    (rule "closeFalse" (formula "27"))
                                 )
                                 (branch " result_251.<created>@anon_heap_withDelimiter«anonHeapFunction» = TRUE FALSE"
                                    (rule "applyEqReverse" (formula "23") (term "0,0,0,0,0,0") (ifseqformula "22"))
                                    (rule "applyEqReverse" (formula "23") (term "0,1,1,0") (ifseqformula "22"))
                                    (rule "hideAuxiliaryEq" (formula "22"))
                                    (rule "replace_known_right" (formula "21") (term "1") (ifseqformula "29"))
                                     (builtin "One Step Simplification" (formula "21"))
                                    (rule "allLeft" (formula "27") (inst "t=i_0"))
                                    (rule "replaceKnownSelect_taclet1102000_32" (formula "27") (term "0,0,0,0"))
                                    (rule "replace_known_left" (formula "27") (term "0,0,0") (ifseqformula "2"))
                                     (builtin "One Step Simplification" (formula "27"))
                                    (rule "inEqSimp_commuteGeq" (formula "27") (term "1"))
                                    (rule "inEqSimp_contradInEq1" (formula "27") (term "1") (ifseqformula "7"))
                                    (rule "inEqSimp_homoInEq1" (formula "27") (term "0,1"))
                                    (rule "polySimp_pullOutFactor1b" (formula "27") (term "0,0,1"))
                                    (rule "add_literals" (formula "27") (term "1,1,0,0,1"))
                                    (rule "times_zero_1" (formula "27") (term "1,0,0,1"))
                                    (rule "add_literals" (formula "27") (term "0,0,1"))
                                    (rule "leq_literals" (formula "27") (term "0,1"))
                                     (builtin "One Step Simplification" (formula "27"))
                                    (rule "inEqSimp_subsumption0" (formula "5") (ifseqformula "27"))
                                    (rule "leq_literals" (formula "5") (term "0"))
                                     (builtin "One Step Simplification" (formula "5"))
                                    (rule "true_left" (formula "5"))
                                    (rule "inEqSimp_contradInEq1" (formula "26") (ifseqformula "3"))
                                    (rule "qeq_literals" (formula "26") (term "0"))
                                     (builtin "One Step Simplification" (formula "26"))
                                    (rule "closeFalse" (formula "26"))
                                 )
                              )
                              (branch "CUT: strPool( 〈'P'〉 ∘ ( 〈'a'〉 ∘ ( 〈's'〉 ∘ ( 〈's'〉 ∘ (〈'w'〉 ∘ (〈'o'〉 ∘ (〈'r'〉 ∘ 〈'd'〉))))))).<created> = TRUE FALSE"
                                  (builtin "One Step Simplification" (formula "5"))
                                 (rule "arrayLengthIsAnInt" (formula "4") (term "0"))
                                 (rule "expand_inInt" (formula "4"))
                                 (rule "replace_int_MIN" (formula "4") (term "0,1"))
                                 (rule "replace_int_MAX" (formula "4") (term "1,0"))
                                 (rule "andLeft" (formula "4"))
                                 (rule "inEqSimp_commuteLeq" (formula "5"))
                                 (rule "inEqSimp_exactShadow3" (formula "6") (ifseqformula "4"))
                                 (rule "polySimp_rightDist" (formula "6") (term "0,0"))
                                 (rule "mul_literals" (formula "6") (term "0,0,0"))
                                 (rule "polySimp_addComm1" (formula "6") (term "0"))
                                 (rule "add_literals" (formula "6") (term "0,0"))
                                 (rule "inEqSimp_sepNegMonomial1" (formula "6"))
                                 (rule "polySimp_mulLiterals" (formula "6") (term "0"))
                                 (rule "polySimp_elimOne" (formula "6") (term "0"))
                                 (rule "arrayLengthNotNegative" (formula "7") (term "0"))
                                 (rule "inEqSimp_subsumption1" (formula "5") (ifseqformula "7"))
                                 (rule "leq_literals" (formula "5") (term "0"))
                                  (builtin "One Step Simplification" (formula "5"))
                                 (rule "true_left" (formula "5"))
                                 (rule "ifthenelse_split" (formula "22") (term "0"))
                                 (branch " result_251.<created>@anon_heap_withDelimiter«anonHeapFunction» = TRUE TRUE"
                                    (rule "applyEqReverse" (formula "24") (term "0,1,1,0") (ifseqformula "23"))
                                    (rule "applyEqReverse" (formula "24") (term "0,0,0,0,0,0") (ifseqformula "23"))
                                    (rule "hideAuxiliaryEq" (formula "23"))
                                    (rule "replace_known_left" (formula "21") (term "1") (ifseqformula "22"))
                                     (builtin "One Step Simplification" (formula "21"))
                                    (rule "true_left" (formula "21"))
                                    (rule "allLeft" (formula "27") (inst "t=i_0"))
                                    (rule "replaceKnownSelect_taclet1102000_32" (formula "27") (term "0,0,0,0"))
                                    (rule "replace_known_left" (formula "27") (term "0,0,0") (ifseqformula "2"))
                                     (builtin "One Step Simplification" (formula "27"))
                                    (rule "inEqSimp_commuteGeq" (formula "27") (term "1"))
                                    (rule "inEqSimp_contradInEq1" (formula "27") (term "1") (ifseqformula "7"))
                                    (rule "inEqSimp_homoInEq1" (formula "27") (term "0,1"))
                                    (rule "polySimp_pullOutFactor1b" (formula "27") (term "0,0,1"))
                                    (rule "add_literals" (formula "27") (term "1,1,0,0,1"))
                                    (rule "times_zero_1" (formula "27") (term "1,0,0,1"))
                                    (rule "add_literals" (formula "27") (term "0,0,1"))
                                    (rule "leq_literals" (formula "27") (term "0,1"))
                                     (builtin "One Step Simplification" (formula "27"))
                                    (rule "inEqSimp_subsumption0" (formula "5") (ifseqformula "27"))
                                    (rule "leq_literals" (formula "5") (term "0"))
                                     (builtin "One Step Simplification" (formula "5"))
                                    (rule "true_left" (formula "5"))
                                    (rule "inEqSimp_contradInEq0" (formula "3") (ifseqformula "26"))
                                    (rule "qeq_literals" (formula "3") (term "0"))
                                     (builtin "One Step Simplification" (formula "3"))
                                    (rule "closeFalse" (formula "3"))
                                 )
                                 (branch " result_251.<created>@anon_heap_withDelimiter«anonHeapFunction» = TRUE FALSE"
                                    (rule "applyEqReverse" (formula "23") (term "0,0,0,0,0,0") (ifseqformula "22"))
                                    (rule "applyEqReverse" (formula "23") (term "0,1,1,0") (ifseqformula "22"))
                                    (rule "hideAuxiliaryEq" (formula "22"))
                                    (rule "replace_known_right" (formula "21") (term "1") (ifseqformula "29"))
                                     (builtin "One Step Simplification" (formula "21"))
                                    (rule "allLeft" (formula "27") (inst "t=i_0"))
                                    (rule "replaceKnownSelect_taclet1102000_32" (formula "27") (term "0,0,0,0"))
                                    (rule "replace_known_left" (formula "27") (term "0,0,0") (ifseqformula "2"))
                                     (builtin "One Step Simplification" (formula "27"))
                                    (rule "inEqSimp_commuteGeq" (formula "27") (term "1"))
                                    (rule "inEqSimp_contradInEq1" (formula "27") (term "0") (ifseqformula "3"))
                                    (rule "qeq_literals" (formula "27") (term "0,0"))
                                     (builtin "One Step Simplification" (formula "27"))
                                    (rule "inEqSimp_contradInEq1" (formula "27") (ifseqformula "7"))
                                    (rule "andLeft" (formula "27"))
                                    (rule "inEqSimp_homoInEq1" (formula "27"))
                                    (rule "polySimp_pullOutFactor1b" (formula "27") (term "0"))
                                    (rule "add_literals" (formula "27") (term "1,1,0"))
                                    (rule "times_zero_1" (formula "27") (term "1,0"))
                                    (rule "add_literals" (formula "27") (term "0"))
                                    (rule "leq_literals" (formula "27"))
                                    (rule "closeFalse" (formula "27"))
                                 )
                              )
                           )
                        )
                     )
                  )
               )
            )
            (branch
               (rule "andRight" (formula "36"))
               (branch
                  (rule "wellFormedAnonEQ" (formula "36") (ifseqformula "20"))
                  (rule "wellFormedAnonEQ" (formula "36") (term "0") (ifseqformula "13"))
                  (rule "wellFormedAnonEQ" (formula "36") (term "0,0") (ifseqformula "9"))
                  (rule "replace_known_left" (formula "36") (term "1") (ifseqformula "19"))
                   (builtin "One Step Simplification" (formula "36") (ifInst ""  (formula "2")) (ifInst ""  (formula "8")) (ifInst ""  (formula "12")))
                  (rule "closeTrue" (formula "36"))
               )
               (branch
                  (rule "selectCreatedOfAnonAsFormulaEQ" (formula "36") (ifseqformula "20"))
                  (rule "selectCreatedOfAnonAsFormulaEQ" (formula "36") (term "0") (ifseqformula "13"))
                  (rule "selectCreatedOfAnonAsFormulaEQ" (formula "36") (term "0,0") (ifseqformula "9"))
                  (rule "orRight" (formula "36"))
                  (rule "orRight" (formula "36"))
                  (rule "orRight" (formula "36"))
                  (rule "replace_known_right" (formula "21") (term "1") (ifseqformula "37"))
                   (builtin "One Step Simplification" (formula "21") (ifInst ""  (formula "36")) (ifInst ""  (formula "39")) (ifInst ""  (formula "38")))
                  (rule "closeFalse" (formula "21"))
               )
            )
         )
         (branch "Null reference (var_1 = null)"
             (builtin "One Step Simplification" (formula "36") (ifInst ""  (formula "26")))
            (rule "closeTrue" (formula "36"))
         )
      )
      (branch "Exceptional Post (toArray)"
          (builtin "One Step Simplification" (formula "19"))
          (builtin "One Step Simplification" (formula "31"))
         (rule "andLeft" (formula "19"))
         (rule "selectCreatedOfAnonAsFormulaEQ" (formula "20") (term "1,0") (ifseqformula "19"))
         (rule "selectCreatedOfAnonAsFormulaEQ" (formula "20") (term "0,1,0") (ifseqformula "12"))
         (rule "selectCreatedOfAnonAsFormulaEQ" (formula "20") (term "0,0,1,0") (ifseqformula "8"))
         (rule "andLeft" (formula "20"))
         (rule "andLeft" (formula "20"))
         (rule "andLeft" (formula "22"))
         (rule "notLeft" (formula "20"))
         (rule "close" (formula "23") (ifseqformula "22"))
      )
      (branch "Pre (toArray)"
          (builtin "One Step Simplification" (formula "29") (ifInst ""  (formula "18")) (ifInst ""  (formula "18")))
         (rule "selectCreatedOfAnonAsFormulaEQ" (formula "29") (term "1,1") (ifseqformula "12"))
         (rule "wellFormedAnonEQ" (formula "29") (term "0,1") (ifseqformula "12"))
         (rule "wellFormedAnonEQ" (formula "29") (term "0,0,1") (ifseqformula "8"))
         (rule "selectCreatedOfAnonAsFormulaEQ" (formula "29") (term "0,1,1") (ifseqformula "8"))
         (rule "replaceKnownSelect_taclet00_2" (formula "29") (term "0,1,1,0,0,0,1,0"))
         (rule "replaceKnownSelect_taclet00_2" (formula "29") (term "0,0,0,0,1,0,0,1,0"))
         (rule "replace_known_left" (formula "29") (term "1,0,1") (ifseqformula "11"))
          (builtin "One Step Simplification" (formula "29") (ifInst ""  (formula "2")) (ifInst ""  (formula "7")))
         (rule "castedGetAny" (formula "29") (term "0,0,1,0,0,1,0"))
         (rule "inEqSimp_ltToLeq" (formula "5") (term "0,0,0"))
         (rule "polySimp_mulComm0" (formula "5") (term "1,0,0,0,0,0"))
         (rule "inEqSimp_ltToLeq" (formula "16") (term "0,0,0"))
         (rule "polySimp_mulComm0" (formula "16") (term "1,0,0,0,0,0"))
         (rule "inEqSimp_ltToLeq" (formula "29") (term "1,0,0,0,1,0"))
         (rule "polySimp_mulComm0" (formula "29") (term "1,0,0,1,0,0,0,1,0"))
         (rule "inEqSimp_commuteLeq" (formula "29") (term "0,0,0,0,1,0"))
         (rule "inEqSimp_sepPosMonomial0" (formula "5") (term "0,0,0"))
         (rule "polySimp_mulComm0" (formula "5") (term "1,0,0,0"))
         (rule "polySimp_rightDist" (formula "5") (term "1,0,0,0"))
         (rule "polySimp_mulLiterals" (formula "5") (term "1,1,0,0,0"))
         (rule "mul_literals" (formula "5") (term "0,1,0,0,0"))
         (rule "polySimp_elimOne" (formula "5") (term "1,1,0,0,0"))
         (rule "inEqSimp_sepPosMonomial0" (formula "16") (term "0,0,0"))
         (rule "polySimp_mulComm0" (formula "16") (term "1,0,0,0"))
         (rule "polySimp_rightDist" (formula "16") (term "1,0,0,0"))
         (rule "polySimp_mulLiterals" (formula "16") (term "1,1,0,0,0"))
         (rule "mul_literals" (formula "16") (term "0,1,0,0,0"))
         (rule "polySimp_elimOne" (formula "16") (term "1,1,0,0,0"))
         (rule "inEqSimp_sepPosMonomial0" (formula "29") (term "1,0,0,0,1,0"))
         (rule "polySimp_mulComm0" (formula "29") (term "1,1,0,0,0,1,0"))
         (rule "polySimp_rightDist" (formula "29") (term "1,1,0,0,0,1,0"))
         (rule "polySimp_mulLiterals" (formula "29") (term "1,1,1,0,0,0,1,0"))
         (rule "mul_literals" (formula "29") (term "0,1,1,0,0,0,1,0"))
         (rule "polySimp_elimOne" (formula "29") (term "1,1,1,0,0,0,1,0"))
         (rule "nnf_imp2or" (formula "5") (term "0"))
         (rule "nnf_imp2or" (formula "16") (term "0"))
         (rule "nnf_notAnd" (formula "5") (term "0,0"))
         (rule "inEqSimp_notGeq" (formula "5") (term "1,0,0"))
         (rule "mul_literals" (formula "5") (term "1,0,0,1,0,0"))
         (rule "add_literals" (formula "5") (term "0,0,1,0,0"))
         (rule "inEqSimp_sepPosMonomial0" (formula "5") (term "1,0,0"))
         (rule "mul_literals" (formula "5") (term "1,1,0,0"))
         (rule "inEqSimp_notLeq" (formula "5") (term "0,0,0"))
         (rule "polySimp_rightDist" (formula "5") (term "1,0,0,0,0,0"))
         (rule "mul_literals" (formula "5") (term "0,1,0,0,0,0,0"))
         (rule "polySimp_addAssoc" (formula "5") (term "0,0,0,0,0"))
         (rule "add_literals" (formula "5") (term "0,0,0,0,0,0"))
         (rule "add_zero_left" (formula "5") (term "0,0,0,0,0"))
         (rule "inEqSimp_sepPosMonomial1" (formula "5") (term "0,0,0"))
         (rule "polySimp_mulLiterals" (formula "5") (term "1,0,0,0"))
         (rule "polySimp_elimOne" (formula "5") (term "1,0,0,0"))
         (rule "nnf_notAnd" (formula "16") (term "0,0"))
         (rule "inEqSimp_notLeq" (formula "16") (term "0,0,0"))
         (rule "polySimp_rightDist" (formula "16") (term "1,0,0,0,0,0"))
         (rule "mul_literals" (formula "16") (term "0,1,0,0,0,0,0"))
         (rule "polySimp_addAssoc" (formula "16") (term "0,0,0,0,0"))
         (rule "add_literals" (formula "16") (term "0,0,0,0,0,0"))
         (rule "add_zero_left" (formula "16") (term "0,0,0,0,0"))
         (rule "inEqSimp_sepPosMonomial1" (formula "16") (term "0,0,0"))
         (rule "polySimp_mulLiterals" (formula "16") (term "1,0,0,0"))
         (rule "polySimp_elimOne" (formula "16") (term "1,0,0,0"))
         (rule "inEqSimp_notGeq" (formula "16") (term "1,0,0"))
         (rule "times_zero_1" (formula "16") (term "1,0,0,1,0,0"))
         (rule "add_literals" (formula "16") (term "0,0,1,0,0"))
         (rule "inEqSimp_sepPosMonomial0" (formula "16") (term "1,0,0"))
         (rule "mul_literals" (formula "16") (term "1,1,0,0"))
         (rule "nnf_imp2or" (formula "29") (term "0,0,1,0"))
         (rule "nnf_notAnd" (formula "29") (term "0,0,0,1,0"))
         (rule "inEqSimp_notGeq" (formula "29") (term "0,0,0,0,1,0"))
         (rule "mul_literals" (formula "29") (term "1,0,0,0,0,0,0,1,0"))
         (rule "add_literals" (formula "29") (term "0,0,0,0,0,0,1,0"))
         (rule "inEqSimp_sepPosMonomial0" (formula "29") (term "0,0,0,0,1,0"))
         (rule "mul_literals" (formula "29") (term "1,0,0,0,0,1,0"))
         (rule "inEqSimp_notLeq" (formula "29") (term "1,0,0,0,1,0"))
         (rule "polySimp_rightDist" (formula "29") (term "1,0,0,1,0,0,0,1,0"))
         (rule "mul_literals" (formula "29") (term "0,1,0,0,1,0,0,0,1,0"))
         (rule "polySimp_addAssoc" (formula "29") (term "0,0,1,0,0,0,1,0"))
         (rule "add_literals" (formula "29") (term "0,0,0,1,0,0,0,1,0"))
         (rule "add_zero_left" (formula "29") (term "0,0,1,0,0,0,1,0"))
         (rule "inEqSimp_sepPosMonomial1" (formula "29") (term "1,0,0,0,1,0"))
         (rule "polySimp_mulLiterals" (formula "29") (term "1,1,0,0,0,1,0"))
         (rule "polySimp_elimOne" (formula "29") (term "1,1,0,0,0,1,0"))
         (rule "Static_class_invariant_axiom_for_org_apache_commons_csv_CSVFormat" (formula "29") (term "0,1,1,0"))
         (rule "replaceKnownSelect_taclet00_4" (formula "29") (term "0,0,0,1,1,0"))
         (rule "replaceKnownAuxiliaryConstant_taclet00_5" (formula "29") (term "0,0,0,1,1,0"))
         (rule "replace_known_right" (formula "29") (term "0,0,1,1,0") (ifseqformula "27"))
          (builtin "One Step Simplification" (formula "29"))
         (rule "commute_or_2" (formula "5") (term "0"))
         (rule "commute_or_2" (formula "16") (term "0"))
         (rule "Static_class_invariant_axiom_for_de_polyas_core3_open_cred_CredTool" (formula "29") (term "1,1,0"))
          (builtin "One Step Simplification" (formula "29"))
         (rule "replaceKnownSelect_taclet00_6" (formula "29") (term "0,1,1,1,0"))
         (rule "replaceKnownSelect_taclet00_18" (formula "29") (term "1,1,1,1,0"))
         (rule "replaceKnownAuxiliaryConstant_taclet00_8" (formula "29") (term "0,1,1,1,0"))
         (rule "replaceKnownAuxiliaryConstant_taclet00_20" (formula "29") (term "1,1,1,1,0"))
         (rule "replaceKnownSelect_taclet00_6" (formula "29") (term "0,0,1,0,1,1,0"))
         (rule "replaceKnownAuxiliaryConstant_taclet00_8" (formula "29") (term "0,0,1,0,1,1,0"))
         (rule "insert_constant_string_value" (formula "29") (term "0,0,1,0,0,1,1,0") (ifseqformula "2"))
          (builtin "One Step Simplification" (formula "29") (ifInst ""  (formula "6")))
         (rule "insert_constant_string_value" (formula "29") (term "0,0,1,0,0,1,1,0") (ifseqformula "2"))
          (builtin "One Step Simplification" (formula "29"))
         (rule "insert_constant_string_value" (formula "29") (term "0,0,1,0,0,0,1,1,0") (ifseqformula "2"))
          (builtin "One Step Simplification" (formula "29"))
         (rule "replaceKnownSelect_taclet00_9" (formula "29") (term "0,0,1,0,0,0,0,1,1,0"))
         (rule "replaceKnownAuxiliaryConstant_taclet00_11" (formula "29") (term "0,0,1,0,0,0,0,1,1,0"))
         (rule "replaceKnownSelect_taclet00_15" (formula "29") (term "0,0,1,0,0,0,0,0,1,1,0"))
         (rule "replaceKnownSelect_taclet00_12" (formula "29") (term "0,0,0,0,0,0,0,0,1,1,0"))
         (rule "replaceKnownAuxiliaryConstant_taclet00_17" (formula "29") (term "0,0,1,0,0,0,0,0,1,1,0"))
         (rule "replaceKnownAuxiliaryConstant_taclet00_14" (formula "29") (term "0,0,0,0,0,0,0,0,1,1,0"))
         (rule "castDel" (formula "29") (term "0,0,0,1,0,0,1,1,0"))
         (rule "castDel" (formula "29") (term "0,0,0,1,0,0,0,1,1,0"))
         (rule "castDel" (formula "29") (term "0,0,0,1,0,1,1,0"))
         (rule "replace_known_right" (formula "29") (term "0,1,0,0,0,0,1,1,0") (ifseqformula "22"))
          (builtin "One Step Simplification" (formula "29") (ifInst ""  (formula "20")) (ifInst ""  (formula "21")) (ifInst ""  (formula "23")) (ifInst ""  (formula "24")) (ifInst ""  (formula "25")))
         (rule "applyEq" (formula "29") (term "0,0,1,1,0") (ifseqformula "6"))
         (rule "replace_known_right" (formula "29") (term "0,1,1,0") (ifseqformula "26"))
          (builtin "One Step Simplification" (formula "29"))
         (rule "Class_invariant_axiom_for_java_util_ArrayList" (formula "29") (term "0,0"))
          (builtin "One Step Simplification" (formula "29"))
         (rule "commute_or" (formula "5") (term "0,0"))
         (rule "commute_or" (formula "16") (term "0,0"))
         (rule "commute_or_2" (formula "29") (term "1"))
         (rule "replace_known_left" (formula "29") (term "1") (ifseqformula "13"))
          (builtin "One Step Simplification" (formula "29"))
         (rule "allRight" (formula "29") (inst "sk=i_0"))
         (rule "orRight" (formula "29"))
         (rule "notRight" (formula "30"))
         (rule "orRight" (formula "30"))
         (rule "inEqSimp_leqRight" (formula "30"))
         (rule "mul_literals" (formula "1") (term "1,0,0"))
         (rule "add_literals" (formula "1") (term "0,0"))
         (rule "add_zero_left" (formula "1") (term "0"))
         (rule "inEqSimp_geqRight" (formula "31"))
         (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
         (rule "polySimp_addComm1" (formula "1") (term "0"))
         (rule "inEqSimp_sepNegMonomial0" (formula "1"))
         (rule "polySimp_mulLiterals" (formula "1") (term "0"))
         (rule "polySimp_elimOne" (formula "1") (term "0"))
         (rule "commute_or_2" (formula "8") (term "0"))
         (rule "commute_or_2" (formula "19") (term "0"))
         (rule "ifthenelse_split" (formula "17") (term "0"))
         (branch "result_251.<created> = TRUE TRUE"
            (rule "applyEqReverse" (formula "19") (term "1,0") (ifseqformula "18"))
            (rule "hideAuxiliaryEq" (formula "18"))
            (rule "replace_known_left" (formula "18") (term "0,0,0") (ifseqformula "17"))
             (builtin "One Step Simplification" (formula "18"))
            (rule "applyEqReverse" (formula "19") (term "0,1,1,0") (ifseqformula "18"))
            (rule "applyEqReverse" (formula "1") (term "0,0") (ifseqformula "18"))
            (rule "applyEqReverse" (formula "19") (term "0,0,0,0,0,0") (ifseqformula "18"))
            (rule "applyEqReverse" (formula "3") (term "0,0") (ifseqformula "18"))
            (rule "hideAuxiliaryEq" (formula "18"))
            (rule "replace_known_left" (formula "16") (term "0,0") (ifseqformula "17"))
             (builtin "One Step Simplification" (formula "16"))
            (rule "true_left" (formula "16"))
            (rule "cut_direct" (formula "4") (term "0"))
            (branch "CUT: strPool( 〈'P'〉 ∘ ( 〈'a'〉 ∘ ( 〈's'〉 ∘ ( 〈's'〉 ∘ (〈'w'〉 ∘ (〈'o'〉 ∘ (〈'r'〉 ∘ 〈'd'〉))))))).<created> = TRUE TRUE"
                (builtin "One Step Simplification" (formula "5"))
               (rule "true_left" (formula "5"))
               (rule "cut_direct" (formula "13") (term "0"))
               (branch "CUT: result_250.<created> = TRUE TRUE"
                   (builtin "One Step Simplification" (formula "14"))
                  (rule "true_left" (formula "14"))
                  (rule "allLeft" (formula "17") (inst "t=i_0"))
                  (rule "replace_known_left" (formula "17") (term "0,0,0") (ifseqformula "3"))
                   (builtin "One Step Simplification" (formula "17"))
                  (rule "inEqSimp_commuteGeq" (formula "17") (term "1"))
                  (rule "inEqSimp_contradInEq1" (formula "17") (term "0") (ifseqformula "2"))
                  (rule "qeq_literals" (formula "17") (term "0,0"))
                   (builtin "One Step Simplification" (formula "17"))
                  (rule "inEqSimp_contradInEq1" (formula "17") (ifseqformula "1"))
                  (rule "andLeft" (formula "17"))
                  (rule "inEqSimp_homoInEq1" (formula "17"))
                  (rule "polySimp_pullOutFactor1b" (formula "17") (term "0"))
                  (rule "add_literals" (formula "17") (term "1,1,0"))
                  (rule "times_zero_1" (formula "17") (term "1,0"))
                  (rule "add_zero_right" (formula "17") (term "0"))
                  (rule "leq_literals" (formula "17"))
                  (rule "closeFalse" (formula "17"))
               )
               (branch "CUT: result_250.<created> = TRUE FALSE"
                   (builtin "One Step Simplification" (formula "13"))
                  (rule "allLeft" (formula "17") (inst "t=i_0"))
                  (rule "replace_known_left" (formula "17") (term "0,0,0") (ifseqformula "3"))
                   (builtin "One Step Simplification" (formula "17"))
                  (rule "inEqSimp_commuteGeq" (formula "17") (term "1"))
                  (rule "inEqSimp_contradInEq1" (formula "17") (term "1") (ifseqformula "1"))
                  (rule "inEqSimp_homoInEq1" (formula "17") (term "0,1"))
                  (rule "polySimp_pullOutFactor1b" (formula "17") (term "0,0,1"))
                  (rule "add_literals" (formula "17") (term "1,1,0,0,1"))
                  (rule "times_zero_1" (formula "17") (term "1,0,0,1"))
                  (rule "add_literals" (formula "17") (term "0,0,1"))
                  (rule "leq_literals" (formula "17") (term "0,1"))
                   (builtin "One Step Simplification" (formula "17"))
                  (rule "inEqSimp_contradInEq1" (formula "17") (ifseqformula "2"))
                  (rule "qeq_literals" (formula "17") (term "0"))
                   (builtin "One Step Simplification" (formula "17"))
                  (rule "closeFalse" (formula "17"))
               )
            )
            (branch "CUT: strPool( 〈'P'〉 ∘ ( 〈'a'〉 ∘ ( 〈's'〉 ∘ ( 〈's'〉 ∘ (〈'w'〉 ∘ (〈'o'〉 ∘ (〈'r'〉 ∘ 〈'd'〉))))))).<created> = TRUE FALSE"
                (builtin "One Step Simplification" (formula "4"))
               (rule "cut_direct" (formula "13") (term "0"))
               (branch "CUT: result_250.<created> = TRUE TRUE"
                   (builtin "One Step Simplification" (formula "14"))
                  (rule "true_left" (formula "14"))
                  (rule "allLeft" (formula "17") (inst "t=i_0"))
                  (rule "replace_known_left" (formula "17") (term "0,0,0") (ifseqformula "3"))
                   (builtin "One Step Simplification" (formula "17"))
                  (rule "inEqSimp_commuteGeq" (formula "17") (term "1"))
                  (rule "inEqSimp_contradInEq1" (formula "17") (term "1") (ifseqformula "1"))
                  (rule "inEqSimp_homoInEq1" (formula "17") (term "0,1"))
                  (rule "polySimp_pullOutFactor1b" (formula "17") (term "0,0,1"))
                  (rule "add_literals" (formula "17") (term "1,1,0,0,1"))
                  (rule "times_zero_1" (formula "17") (term "1,0,0,1"))
                  (rule "add_literals" (formula "17") (term "0,0,1"))
                  (rule "leq_literals" (formula "17") (term "0,1"))
                   (builtin "One Step Simplification" (formula "17"))
                  (rule "inEqSimp_contradInEq0" (formula "2") (ifseqformula "17"))
                  (rule "qeq_literals" (formula "2") (term "0"))
                   (builtin "One Step Simplification" (formula "2"))
                  (rule "closeFalse" (formula "2"))
               )
               (branch "CUT: result_250.<created> = TRUE FALSE"
                   (builtin "One Step Simplification" (formula "13"))
                  (rule "allLeft" (formula "17") (inst "t=i_0"))
                  (rule "replace_known_left" (formula "17") (term "0,0,0") (ifseqformula "3"))
                   (builtin "One Step Simplification" (formula "17"))
                  (rule "inEqSimp_commuteGeq" (formula "17") (term "1"))
                  (rule "inEqSimp_contradInEq1" (formula "17") (term "0") (ifseqformula "2"))
                  (rule "qeq_literals" (formula "17") (term "0,0"))
                   (builtin "One Step Simplification" (formula "17"))
                  (rule "inEqSimp_contradInEq1" (formula "17") (ifseqformula "1"))
                  (rule "andLeft" (formula "17"))
                  (rule "inEqSimp_homoInEq1" (formula "17"))
                  (rule "polySimp_pullOutFactor1b" (formula "17") (term "0"))
                  (rule "add_literals" (formula "17") (term "1,1,0"))
                  (rule "times_zero_1" (formula "17") (term "1,0"))
                  (rule "add_zero_right" (formula "17") (term "0"))
                  (rule "leq_literals" (formula "17"))
                  (rule "closeFalse" (formula "17"))
               )
            )
         )
         (branch "result_251.<created> = TRUE FALSE"
            (rule "applyEqReverse" (formula "18") (term "1,0") (ifseqformula "17"))
            (rule "hideAuxiliaryEq" (formula "17"))
            (rule "replace_known_right" (formula "17") (term "0,0,0") (ifseqformula "20"))
             (builtin "One Step Simplification" (formula "17"))
            (rule "replace_known_right" (formula "16") (term "0,0") (ifseqformula "20"))
             (builtin "One Step Simplification" (formula "16"))
            (rule "cut_direct" (formula "13") (term "0"))
            (branch "CUT: result_250.<created> = TRUE TRUE"
                (builtin "One Step Simplification" (formula "14"))
               (rule "true_left" (formula "14"))
               (rule "cut_direct" (formula "4") (term "0"))
               (branch "CUT: strPool( 〈'P'〉 ∘ ( 〈'a'〉 ∘ ( 〈's'〉 ∘ ( 〈's'〉 ∘ (〈'w'〉 ∘ (〈'o'〉 ∘ (〈'r'〉 ∘ 〈'd'〉))))))).<created> = TRUE TRUE"
                   (builtin "One Step Simplification" (formula "5"))
                  (rule "true_left" (formula "5"))
                  (rule "allLeft" (formula "18") (inst "t=i_0"))
                  (rule "replace_known_left" (formula "18") (term "0,0,0") (ifseqformula "3"))
                   (builtin "One Step Simplification" (formula "18"))
                  (rule "inEqSimp_commuteGeq" (formula "18") (term "1"))
                  (rule "inEqSimp_contradInEq1" (formula "18") (term "1") (ifseqformula "1"))
                  (rule "inEqSimp_homoInEq1" (formula "18") (term "0,1"))
                  (rule "polySimp_pullOutFactor1b" (formula "18") (term "0,0,1"))
                  (rule "add_literals" (formula "18") (term "1,1,0,0,1"))
                  (rule "times_zero_1" (formula "18") (term "1,0,0,1"))
                  (rule "add_literals" (formula "18") (term "0,0,1"))
                  (rule "leq_literals" (formula "18") (term "0,1"))
                   (builtin "One Step Simplification" (formula "18"))
                  (rule "inEqSimp_contradInEq1" (formula "18") (ifseqformula "2"))
                  (rule "qeq_literals" (formula "18") (term "0"))
                   (builtin "One Step Simplification" (formula "18"))
                  (rule "closeFalse" (formula "18"))
               )
               (branch "CUT: strPool( 〈'P'〉 ∘ ( 〈'a'〉 ∘ ( 〈's'〉 ∘ ( 〈's'〉 ∘ (〈'w'〉 ∘ (〈'o'〉 ∘ (〈'r'〉 ∘ 〈'd'〉))))))).<created> = TRUE FALSE"
                   (builtin "One Step Simplification" (formula "4"))
                  (rule "allLeft" (formula "18") (inst "t=i_0"))
                  (rule "replace_known_left" (formula "18") (term "0,0,0") (ifseqformula "3"))
                   (builtin "One Step Simplification" (formula "18"))
                  (rule "inEqSimp_commuteGeq" (formula "18") (term "1"))
                  (rule "inEqSimp_contradInEq1" (formula "18") (term "1") (ifseqformula "1"))
                  (rule "inEqSimp_homoInEq1" (formula "18") (term "0,1"))
                  (rule "polySimp_pullOutFactor1b" (formula "18") (term "0,0,1"))
                  (rule "add_literals" (formula "18") (term "1,1,0,0,1"))
                  (rule "times_zero_1" (formula "18") (term "1,0,0,1"))
                  (rule "add_literals" (formula "18") (term "0,0,1"))
                  (rule "leq_literals" (formula "18") (term "0,1"))
                   (builtin "One Step Simplification" (formula "18"))
                  (rule "inEqSimp_contradInEq1" (formula "18") (ifseqformula "2"))
                  (rule "qeq_literals" (formula "18") (term "0"))
                   (builtin "One Step Simplification" (formula "18"))
                  (rule "closeFalse" (formula "18"))
               )
            )
            (branch "CUT: result_250.<created> = TRUE FALSE"
                (builtin "One Step Simplification" (formula "13"))
               (rule "cut_direct" (formula "4") (term "0"))
               (branch "CUT: strPool( 〈'P'〉 ∘ ( 〈'a'〉 ∘ ( 〈's'〉 ∘ ( 〈's'〉 ∘ (〈'w'〉 ∘ (〈'o'〉 ∘ (〈'r'〉 ∘ 〈'd'〉))))))).<created> = TRUE TRUE"
                   (builtin "One Step Simplification" (formula "5"))
                  (rule "true_left" (formula "5"))
                  (rule "allLeft" (formula "18") (inst "t=i_0"))
                  (rule "replace_known_left" (formula "18") (term "0,0,0") (ifseqformula "3"))
                   (builtin "One Step Simplification" (formula "18"))
                  (rule "inEqSimp_commuteGeq" (formula "18") (term "1"))
                  (rule "inEqSimp_contradInEq1" (formula "18") (term "1") (ifseqformula "1"))
                  (rule "inEqSimp_homoInEq1" (formula "18") (term "0,1"))
                  (rule "polySimp_pullOutFactor1b" (formula "18") (term "0,0,1"))
                  (rule "add_literals" (formula "18") (term "1,1,0,0,1"))
                  (rule "times_zero_1" (formula "18") (term "1,0,0,1"))
                  (rule "add_literals" (formula "18") (term "0,0,1"))
                  (rule "leq_literals" (formula "18") (term "0,1"))
                   (builtin "One Step Simplification" (formula "18"))
                  (rule "inEqSimp_contradInEq1" (formula "18") (ifseqformula "2"))
                  (rule "qeq_literals" (formula "18") (term "0"))
                   (builtin "One Step Simplification" (formula "18"))
                  (rule "closeFalse" (formula "18"))
               )
               (branch "CUT: strPool( 〈'P'〉 ∘ ( 〈'a'〉 ∘ ( 〈's'〉 ∘ ( 〈's'〉 ∘ (〈'w'〉 ∘ (〈'o'〉 ∘ (〈'r'〉 ∘ 〈'd'〉))))))).<created> = TRUE FALSE"
                   (builtin "One Step Simplification" (formula "4"))
                  (rule "allLeft" (formula "18") (inst "t=i_0"))
                  (rule "replace_known_left" (formula "18") (term "0,0,0") (ifseqformula "3"))
                   (builtin "One Step Simplification" (formula "18"))
                  (rule "inEqSimp_commuteGeq" (formula "18") (term "1"))
                  (rule "inEqSimp_contradInEq1" (formula "18") (term "0") (ifseqformula "2"))
                  (rule "qeq_literals" (formula "18") (term "0,0"))
                   (builtin "One Step Simplification" (formula "18"))
                  (rule "inEqSimp_contradInEq1" (formula "18") (ifseqformula "1"))
                  (rule "andLeft" (formula "18"))
                  (rule "inEqSimp_homoInEq1" (formula "18"))
                  (rule "polySimp_pullOutFactor1b" (formula "18") (term "0"))
                  (rule "add_literals" (formula "18") (term "1,1,0"))
                  (rule "times_zero_1" (formula "18") (term "1,0"))
                  (rule "add_literals" (formula "18") (term "0"))
                  (rule "leq_literals" (formula "18"))
                  (rule "closeFalse" (formula "18"))
               )
            )
         )
      )
   )
   (branch "Exceptional Post (toList)"
       (builtin "One Step Simplification" (formula "12"))
       (builtin "One Step Simplification" (formula "23"))
      (rule "andLeft" (formula "12"))
      (rule "selectCreatedOfAnonAsFormulaEQ" (formula "13") (term "1,0") (ifseqformula "12"))
      (rule "selectCreatedOfAnonAsFormulaEQ" (formula "13") (term "0,1,0") (ifseqformula "8"))
      (rule "andLeft" (formula "13"))
      (rule "andLeft" (formula "14"))
      (rule "andLeft" (formula "13"))
      (rule "andLeft" (formula "15"))
      (rule "notLeft" (formula "13"))
      (rule "close" (formula "17") (ifseqformula "16"))
   )
   (branch "Pre (toList)"
       (builtin "One Step Simplification" (formula "21") (ifInst ""  (formula "15")) (ifInst ""  (formula "20")) (ifInst ""  (formula "15")) (ifInst ""  (formula "20")))
      (rule "selectCreatedOfAnonAsFormulaEQ" (formula "21") (term "1,1") (ifseqformula "8"))
      (rule "wellFormedAnonEQ" (formula "21") (term "0,0,1") (ifseqformula "8"))
      (rule "selectCreatedOfAnonAsFormulaEQ" (formula "21") (term "1,0,1") (ifseqformula "8"))
      (rule "replace_known_left" (formula "21") (term "1,0,0,1") (ifseqformula "7"))
       (builtin "One Step Simplification" (formula "21") (ifInst ""  (formula "2")) (ifInst ""  (formula "1")) (ifInst ""  (formula "3")))
      (rule "castedGetAny" (formula "21") (term "0,0,1,0,0,1"))
      (rule "inEqSimp_ltToLeq" (formula "5") (term "0,0,0"))
      (rule "polySimp_mulComm0" (formula "5") (term "1,0,0,0,0,0"))
      (rule "inEqSimp_ltToLeq" (formula "21") (term "1,0,0,0,1"))
      (rule "polySimp_mulComm0" (formula "21") (term "1,0,0,1,0,0,0,1"))
      (rule "inEqSimp_commuteLeq" (formula "21") (term "0,0,0,0,1"))
      (rule "inEqSimp_sepPosMonomial0" (formula "5") (term "0,0,0"))
      (rule "polySimp_mulComm0" (formula "5") (term "1,0,0,0"))
      (rule "polySimp_rightDist" (formula "5") (term "1,0,0,0"))
      (rule "polySimp_mulLiterals" (formula "5") (term "1,1,0,0,0"))
      (rule "mul_literals" (formula "5") (term "0,1,0,0,0"))
      (rule "polySimp_elimOne" (formula "5") (term "1,1,0,0,0"))
      (rule "inEqSimp_sepPosMonomial0" (formula "21") (term "1,0,0,0,1"))
      (rule "polySimp_mulComm0" (formula "21") (term "1,1,0,0,0,1"))
      (rule "polySimp_rightDist" (formula "21") (term "1,1,0,0,0,1"))
      (rule "mul_literals" (formula "21") (term "0,1,1,0,0,0,1"))
      (rule "polySimp_mulLiterals" (formula "21") (term "1,1,1,0,0,0,1"))
      (rule "polySimp_elimOne" (formula "21") (term "1,1,1,0,0,0,1"))
      (rule "pullOutSelect" (formula "21") (term "0,0,0,1,0,0,1") (inst "selectSK=java_util_Collection_seq_0"))
      (rule "applyEq" (formula "22") (term "0,1,1,1,0,0,0,1") (ifseqformula "1"))
      (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "9"))
       (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "21")) (ifInst ""  (formula "4")))
      (rule "applyEqReverse" (formula "22") (term "0,0,0,1,0,0,1") (ifseqformula "1"))
      (rule "applyEqReverse" (formula "22") (term "0,1,1,1,0,0,0,1") (ifseqformula "1"))
      (rule "hideAuxiliaryEq" (formula "1"))
      (rule "nnf_imp2or" (formula "5") (term "0"))
      (rule "nnf_notAnd" (formula "5") (term "0,0"))
      (rule "inEqSimp_notGeq" (formula "5") (term "1,0,0"))
      (rule "mul_literals" (formula "5") (term "1,0,0,1,0,0"))
      (rule "add_zero_right" (formula "5") (term "0,0,1,0,0"))
      (rule "inEqSimp_sepPosMonomial0" (formula "5") (term "1,0,0"))
      (rule "mul_literals" (formula "5") (term "1,1,0,0"))
      (rule "inEqSimp_notLeq" (formula "5") (term "0,0,0"))
      (rule "polySimp_rightDist" (formula "5") (term "1,0,0,0,0,0"))
      (rule "mul_literals" (formula "5") (term "0,1,0,0,0,0,0"))
      (rule "polySimp_addAssoc" (formula "5") (term "0,0,0,0,0"))
      (rule "add_literals" (formula "5") (term "0,0,0,0,0,0"))
      (rule "add_zero_left" (formula "5") (term "0,0,0,0,0"))
      (rule "inEqSimp_sepPosMonomial1" (formula "5") (term "0,0,0"))
      (rule "polySimp_mulLiterals" (formula "5") (term "1,0,0,0"))
      (rule "polySimp_elimOne" (formula "5") (term "1,0,0,0"))
      (rule "nnf_imp2or" (formula "21") (term "0,0,1"))
      (rule "nnf_notAnd" (formula "21") (term "0,0,0,1"))
      (rule "inEqSimp_notGeq" (formula "21") (term "0,0,0,0,1"))
      (rule "times_zero_1" (formula "21") (term "1,0,0,0,0,0,0,1"))
      (rule "add_zero_right" (formula "21") (term "0,0,0,0,0,0,1"))
      (rule "inEqSimp_sepPosMonomial0" (formula "21") (term "0,0,0,0,1"))
      (rule "mul_literals" (formula "21") (term "1,0,0,0,0,1"))
      (rule "inEqSimp_notLeq" (formula "21") (term "1,0,0,0,1"))
      (rule "polySimp_rightDist" (formula "21") (term "1,0,0,1,0,0,0,1"))
      (rule "mul_literals" (formula "21") (term "0,1,0,0,1,0,0,0,1"))
      (rule "polySimp_addAssoc" (formula "21") (term "0,0,1,0,0,0,1"))
      (rule "add_literals" (formula "21") (term "0,0,0,1,0,0,0,1"))
      (rule "add_zero_left" (formula "21") (term "0,0,1,0,0,0,1"))
      (rule "inEqSimp_sepPosMonomial1" (formula "21") (term "1,0,0,0,1"))
      (rule "polySimp_mulLiterals" (formula "21") (term "1,1,0,0,0,1"))
      (rule "polySimp_elimOne" (formula "21") (term "1,1,0,0,0,1"))
      (rule "Class_invariant_axiom_for_java_util_ArrayList" (formula "21") (term "0"))
       (builtin "One Step Simplification" (formula "21"))
      (rule "Static_class_invariant_axiom_for_org_apache_commons_csv_CSVFormat" (formula "21") (term "0,1"))
      (rule "replaceKnownSelect_taclet0_0" (formula "21") (term "0,0,0,1"))
      (rule "replaceKnownAuxiliaryConstant_taclet0_1" (formula "21") (term "0,0,0,1"))
      (rule "replace_known_right" (formula "21") (term "0,0,1") (ifseqformula "19"))
       (builtin "One Step Simplification" (formula "21"))
      (rule "commute_or_2" (formula "5") (term "0"))
      (rule "Static_class_invariant_axiom_for_de_polyas_core3_open_cred_CredTool" (formula "21") (term "1"))
       (builtin "One Step Simplification" (formula "21"))
      (rule "insert_constant_string_value" (formula "21") (term "0,0,1,0,0,1") (ifseqformula "2"))
       (builtin "One Step Simplification" (formula "21"))
      (rule "insert_constant_string_value" (formula "21") (term "0,0,1,0,0,0,1") (ifseqformula "2"))
       (builtin "One Step Simplification" (formula "21"))
      (rule "insert_constant_string_value" (formula "21") (term "0,0,1,0,0,0,0,1") (ifseqformula "2"))
       (builtin "One Step Simplification" (formula "21"))
      (rule "castDel" (formula "21") (term "0,0,0,1,0,0,0,1"))
      (rule "castDel" (formula "21") (term "0,0,0,1,0,0,0,0,1"))
      (rule "castDel" (formula "21") (term "0,0,0,1,0,0,1"))
      (rule "replace_known_right" (formula "21") (term "0,1,0,0,0,1") (ifseqformula "16"))
       (builtin "One Step Simplification" (formula "21") (ifInst ""  (formula "15")) (ifInst ""  (formula "17")))
      (rule "pullOutSelect" (formula "21") (term "0,1,1") (inst "selectSK=de_polyas_core3_open_cred_CredTool_polyasMode_0"))
      (rule "applyEq" (formula "22") (term "0,0,1,0,1") (ifseqformula "1"))
      (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "9"))
       (builtin "One Step Simplification" (formula "1"))
      (rule "applyEqReverse" (formula "22") (term "0,1,1") (ifseqformula "1"))
      (rule "applyEqReverse" (formula "22") (term "0,0,1,0,1") (ifseqformula "1"))
      (rule "hideAuxiliaryEq" (formula "1"))
      (rule "eqSymm" (formula "21") (term "1,1"))
      (rule "applyEq" (formula "21") (term "0,0,1,0,1") (ifseqformula "6"))
      (rule "replace_known_right" (formula "21") (term "0,1,0,1") (ifseqformula "18"))
       (builtin "One Step Simplification" (formula "21"))
      (rule "applyEq" (formula "21") (term "1,1,1") (ifseqformula "6"))
      (rule "pullOutSelect" (formula "21") (term "0,0,1,0,0,1") (inst "selectSK=de_polyas_core3_open_cred_CredTool_polyasVals_0"))
      (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "9"))
       (builtin "One Step Simplification" (formula "1"))
      (rule "applyEqReverse" (formula "22") (term "0,0,1,0,0,1") (ifseqformula "1"))
      (rule "hideAuxiliaryEq" (formula "1"))
      (rule "replace_known_right" (formula "21") (term "0,1,0,0,1") (ifseqformula "13"))
       (builtin "One Step Simplification" (formula "21"))
      (rule "pullOutSelect" (formula "21") (term "0,1,1") (inst "selectSK=de_polyas_core3_open_cred_CredTool_FieldsForPolyasMode_MIN_0"))
      (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "9"))
       (builtin "One Step Simplification" (formula "1"))
      (rule "applyEqReverse" (formula "22") (term "0,1,1") (ifseqformula "1"))
       (builtin "One Step Simplification" (formula "22"))
      (rule "hideAuxiliaryEq" (formula "1"))
      (rule "pullOutSelect" (formula "21") (term "0,0,0,1") (inst "selectSK=de_polyas_core3_open_cred_CredTool_distVals_0"))
      (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "9"))
       (builtin "One Step Simplification" (formula "1"))
      (rule "applyEqReverse" (formula "22") (term "0,0,0,1") (ifseqformula "1"))
      (rule "hideAuxiliaryEq" (formula "1"))
      (rule "replace_known_right" (formula "21") (term "0,0,1") (ifseqformula "12"))
       (builtin "One Step Simplification" (formula "21"))
      (rule "pullOutSelect" (formula "21") (term "0,0,1") (inst "selectSK=de_polyas_core3_open_cred_CredTool_print_0"))
      (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "9"))
       (builtin "One Step Simplification" (formula "1"))
      (rule "applyEqReverse" (formula "22") (term "0,0,1") (ifseqformula "1"))
      (rule "hideAuxiliaryEq" (formula "1"))
      (rule "replace_known_right" (formula "21") (term "0,1") (ifseqformula "14"))
       (builtin "One Step Simplification" (formula "21"))
      (rule "allRight" (formula "21") (inst "sk=i_0"))
      (rule "orRight" (formula "21"))
      (rule "notRight" (formula "22"))
      (rule "orRight" (formula "22"))
      (rule "inEqSimp_geqRight" (formula "23"))
      (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
      (rule "polySimp_addComm1" (formula "1") (term "0"))
      (rule "inEqSimp_leqRight" (formula "23"))
      (rule "mul_literals" (formula "1") (term "1,0,0"))
      (rule "add_literals" (formula "1") (term "0,0"))
      (rule "add_zero_left" (formula "1") (term "0"))
      (rule "inEqSimp_sepNegMonomial0" (formula "2"))
      (rule "polySimp_mulLiterals" (formula "2") (term "0"))
      (rule "polySimp_elimOne" (formula "2") (term "0"))
      (rule "commute_or" (formula "8") (term "0,0"))
      (rule "commute_or_2" (formula "8") (term "0"))
      (rule "cut_direct" (formula "4") (term "0"))
      (branch "CUT: strPool( 〈'P'〉 ∘ ( 〈'a'〉 ∘ ( 〈's'〉 ∘ ( 〈's'〉 ∘ (〈'w'〉 ∘ (〈'o'〉 ∘ (〈'r'〉 ∘ 〈'd'〉))))))).<created> = TRUE TRUE"
          (builtin "One Step Simplification" (formula "5"))
         (rule "true_left" (formula "5"))
         (rule "cut_direct" (formula "13") (term "0"))
         (branch "CUT: result_250.<created> = TRUE TRUE"
             (builtin "One Step Simplification" (formula "14"))
            (rule "true_left" (formula "14"))
            (rule "allLeft" (formula "8") (inst "t=i_0"))
            (rule "replace_known_left" (formula "8") (term "0,0,0") (ifseqformula "3"))
             (builtin "One Step Simplification" (formula "8"))
            (rule "inEqSimp_commuteGeq" (formula "8") (term "1"))
            (rule "inEqSimp_contradInEq1" (formula "8") (term "0") (ifseqformula "1"))
            (rule "qeq_literals" (formula "8") (term "0,0"))
             (builtin "One Step Simplification" (formula "8"))
            (rule "inEqSimp_contradInEq1" (formula "8") (ifseqformula "2"))
            (rule "andLeft" (formula "8"))
            (rule "inEqSimp_homoInEq1" (formula "8"))
            (rule "polySimp_pullOutFactor1b" (formula "8") (term "0"))
            (rule "add_literals" (formula "8") (term "1,1,0"))
            (rule "times_zero_1" (formula "8") (term "1,0"))
            (rule "add_literals" (formula "8") (term "0"))
            (rule "leq_literals" (formula "8"))
            (rule "closeFalse" (formula "8"))
         )
         (branch "CUT: result_250.<created> = TRUE FALSE"
             (builtin "One Step Simplification" (formula "13"))
            (rule "allLeft" (formula "8") (inst "t=i_0"))
            (rule "replace_known_left" (formula "8") (term "0,0,0") (ifseqformula "3"))
             (builtin "One Step Simplification" (formula "8"))
            (rule "inEqSimp_commuteGeq" (formula "8") (term "1"))
            (rule "inEqSimp_contradInEq1" (formula "8") (term "1") (ifseqformula "2"))
            (rule "inEqSimp_homoInEq1" (formula "8") (term "0,1"))
            (rule "polySimp_pullOutFactor1b" (formula "8") (term "0,0,1"))
            (rule "add_literals" (formula "8") (term "1,1,0,0,1"))
            (rule "times_zero_1" (formula "8") (term "1,0,0,1"))
            (rule "add_literals" (formula "8") (term "0,0,1"))
            (rule "leq_literals" (formula "8") (term "0,1"))
             (builtin "One Step Simplification" (formula "8"))
            (rule "inEqSimp_contradInEq0" (formula "1") (ifseqformula "8"))
            (rule "qeq_literals" (formula "1") (term "0"))
             (builtin "One Step Simplification" (formula "1"))
            (rule "closeFalse" (formula "1"))
         )
      )
      (branch "CUT: strPool( 〈'P'〉 ∘ ( 〈'a'〉 ∘ ( 〈's'〉 ∘ ( 〈's'〉 ∘ (〈'w'〉 ∘ (〈'o'〉 ∘ (〈'r'〉 ∘ 〈'd'〉))))))).<created> = TRUE FALSE"
          (builtin "One Step Simplification" (formula "4"))
         (rule "cut_direct" (formula "13") (term "0"))
         (branch "CUT: result_250.<created> = TRUE TRUE"
             (builtin "One Step Simplification" (formula "14"))
            (rule "true_left" (formula "14"))
            (rule "allLeft" (formula "8") (inst "t=i_0"))
            (rule "replace_known_left" (formula "8") (term "0,0,0") (ifseqformula "3"))
             (builtin "One Step Simplification" (formula "8"))
            (rule "inEqSimp_commuteGeq" (formula "8") (term "1"))
            (rule "inEqSimp_contradInEq1" (formula "8") (term "0") (ifseqformula "1"))
            (rule "qeq_literals" (formula "8") (term "0,0"))
             (builtin "One Step Simplification" (formula "8"))
            (rule "inEqSimp_contradInEq0" (formula "2") (ifseqformula "8"))
            (rule "andLeft" (formula "2"))
            (rule "inEqSimp_homoInEq1" (formula "2"))
            (rule "polySimp_pullOutFactor1b" (formula "2") (term "0"))
            (rule "add_literals" (formula "2") (term "1,1,0"))
            (rule "times_zero_1" (formula "2") (term "1,0"))
            (rule "add_literals" (formula "2") (term "0"))
            (rule "leq_literals" (formula "2"))
            (rule "closeFalse" (formula "2"))
         )
         (branch "CUT: result_250.<created> = TRUE FALSE"
             (builtin "One Step Simplification" (formula "13"))
            (rule "allLeft" (formula "8") (inst "t=i_0"))
            (rule "replace_known_left" (formula "8") (term "0,0,0") (ifseqformula "3"))
             (builtin "One Step Simplification" (formula "8"))
            (rule "inEqSimp_commuteGeq" (formula "8") (term "1"))
            (rule "inEqSimp_contradInEq1" (formula "8") (term "0") (ifseqformula "1"))
            (rule "qeq_literals" (formula "8") (term "0,0"))
             (builtin "One Step Simplification" (formula "8"))
            (rule "inEqSimp_contradInEq0" (formula "2") (ifseqformula "8"))
            (rule "andLeft" (formula "2"))
            (rule "inEqSimp_homoInEq1" (formula "2"))
            (rule "polySimp_pullOutFactor1b" (formula "2") (term "0"))
            (rule "add_literals" (formula "2") (term "1,1,0"))
            (rule "times_zero_1" (formula "2") (term "1,0"))
            (rule "add_zero_right" (formula "2") (term "0"))
            (rule "leq_literals" (formula "2"))
            (rule "closeFalse" (formula "2"))
         )
      )
   )
)
(branch "Exceptional Post (withDelimiter)"
    (builtin "One Step Simplification" (formula "7"))
    (builtin "One Step Simplification" (formula "17"))
   (rule "andLeft" (formula "7"))
   (rule "selectCreatedOfAnonAsFormulaEQ" (formula "8") (term "1,0") (ifseqformula "7"))
   (rule "andLeft" (formula "8"))
   (rule "andLeft" (formula "9"))
   (rule "andLeft" (formula "8"))
   (rule "andLeft" (formula "10"))
   (rule "notLeft" (formula "8"))
   (rule "close" (formula "12") (ifseqformula "11"))
)
(branch "Pre (withDelimiter)"
    (builtin "One Step Simplification" (formula "15") (ifInst ""  (formula "1")))
   (rule "expand_inChar" (formula "15") (term "1"))
   (rule "replace_char_MAX" (formula "15") (term "1,0,1"))
   (rule "replace_char_MIN" (formula "15") (term "0,1,1"))
   (rule "inEqSimp_ltToLeq" (formula "4") (term "0,0,0"))
   (rule "polySimp_mulComm0" (formula "4") (term "1,0,0,0,0,0"))
   (rule "inEqSimp_commuteLeq" (formula "15") (term "1,1"))
   (rule "inEqSimp_sepPosMonomial0" (formula "4") (term "0,0,0"))
   (rule "polySimp_mulComm0" (formula "4") (term "1,0,0,0"))
   (rule "polySimp_rightDist" (formula "4") (term "1,0,0,0"))
   (rule "mul_literals" (formula "4") (term "0,1,0,0,0"))
   (rule "polySimp_mulLiterals" (formula "4") (term "1,1,0,0,0"))
   (rule "polySimp_elimOne" (formula "4") (term "1,1,0,0,0"))
   (rule "nnf_imp2or" (formula "4") (term "0"))
   (rule "nnf_notAnd" (formula "4") (term "0,0"))
   (rule "inEqSimp_notLeq" (formula "4") (term "0,0,0"))
   (rule "polySimp_rightDist" (formula "4") (term "1,0,0,0,0,0"))
   (rule "mul_literals" (formula "4") (term "0,1,0,0,0,0,0"))
   (rule "polySimp_addAssoc" (formula "4") (term "0,0,0,0,0"))
   (rule "add_literals" (formula "4") (term "0,0,0,0,0,0"))
   (rule "add_zero_left" (formula "4") (term "0,0,0,0,0"))
   (rule "inEqSimp_sepPosMonomial1" (formula "4") (term "0,0,0"))
   (rule "polySimp_mulLiterals" (formula "4") (term "1,0,0,0"))
   (rule "polySimp_elimOne" (formula "4") (term "1,0,0,0"))
   (rule "inEqSimp_notGeq" (formula "4") (term "1,0,0"))
   (rule "times_zero_1" (formula "4") (term "1,0,0,1,0,0"))
   (rule "add_literals" (formula "4") (term "0,0,1,0,0"))
   (rule "inEqSimp_sepPosMonomial0" (formula "4") (term "1,0,0"))
   (rule "mul_literals" (formula "4") (term "1,1,0,0"))
   (rule "Class_invariant_axiom_for_org_apache_commons_csv_CSVFormat" (formula "15") (term "0"))
   (rule "replace_known_right" (formula "15") (term "0,0") (ifseqformula "13"))
    (builtin "One Step Simplification" (formula "15"))
   (rule "commute_or_2" (formula "4") (term "0"))
   (rule "commute_and" (formula "15"))
   (rule "commute_or" (formula "4") (term "0,0"))
   (rule "commute_or_2" (formula "4") (term "0"))
   (rule "charLiteral_to_int" (formula "15") (term "0,1"))
   (rule "leq_literals" (formula "15") (term "1"))
    (builtin "One Step Simplification" (formula "15"))
   (rule "inEqSimp_geqRight" (formula "15"))
   (rule "times_zero_1" (formula "1") (term "1,0,0"))
   (rule "add_zero_right" (formula "1") (term "0,0"))
   (rule "inEqSimp_sepPosMonomial0" (formula "1"))
   (rule "mul_literals" (formula "1") (term "1"))
   (rule "charLiteral_to_int" (formula "1") (term "0"))
   (rule "leq_literals" (formula "1"))
   (rule "closeFalse" (formula "1"))
)
(branch "Null reference (c_6 = null)"
    (builtin "One Step Simplification" (formula "15") (ifInst ""  (formula "13")))
   (rule "closeTrue" (formula "15"))
)
)
}
