\profile "Java Profile";

\settings {
"#Proof-Settings-Config-File
#Mon Nov 11 21:47:42 CET 2019
[Labels]UseOriginLabels=false
[StrategyProperty]QUERYAXIOM_OPTIONS_KEY=QUERYAXIOM_ON
[SMTSettings]invariantForall=false
[Strategy]ActiveStrategy=JavaCardDLStrategy
[StrategyProperty]USER_TACLETS_OPTIONS_KEY1=USER_TACLETS_OFF
[StrategyProperty]QUANTIFIERS_OPTIONS_KEY=QUANTIFIERS_NON_SPLITTING_WITH_PROGS
[StrategyProperty]USER_TACLETS_OPTIONS_KEY2=USER_TACLETS_OFF
[Choice]DefaultChoices=methodExpansion-methodExpansion\\:modularOnly , mergeGenerateIsWeakeningGoal-mergeGenerateIsWeakeningGoal\\:off , wdChecks-wdChecks\\:off , wdOperator-wdOperator\\:L , permissions-permissions\\:off , integerSimplificationRules-integerSimplificationRules\\:full , reach-reach\\:on , moreSeqRules-moreSeqRules\\:on , sequences-sequences\\:on , bigint-bigint\\:on , modelFields-modelFields\\:treatAsAxiom , Strings-Strings\\:on , JavaCard-JavaCard\\:off , runtimeExceptions-runtimeExceptions\\:allow , programRules-programRules\\:Java , intRules-intRules\\:javaSemantics , initialisation-initialisation\\:disableStaticInitialisation , assertions-assertions\\:on
[StrategyProperty]LOOP_OPTIONS_KEY=LOOP_INVARIANT
[StrategyProperty]INF_FLOW_CHECK_PROPERTY=INF_FLOW_CHECK_FALSE
[SMTSettings]UseBuiltUniqueness=false
[SMTSettings]explicitTypeHierarchy=false
[SMTSettings]instantiateHierarchyAssumptions=true
[StrategyProperty]NON_LIN_ARITH_OPTIONS_KEY=NON_LIN_ARITH_DEF_OPS
[SMTSettings]SelectedTaclets=
[StrategyProperty]DEP_OPTIONS_KEY=DEP_ON
[StrategyProperty]AUTO_INDUCTION_OPTIONS_KEY=AUTO_INDUCTION_OFF
[Strategy]MaximumNumberOfAutomaticApplications=10000
[StrategyProperty]STOPMODE_OPTIONS_KEY=STOPMODE_DEFAULT
[StrategyProperty]CLASS_AXIOM_OPTIONS_KEY=CLASS_AXIOM_FREE
[SMTSettings]useConstantsForBigOrSmallIntegers=true
[StrategyProperty]MPS_OPTIONS_KEY=MPS_MERGE
[StrategyProperty]SYMBOLIC_EXECUTION_NON_EXECUTION_BRANCH_HIDING_OPTIONS_KEY=SYMBOLIC_EXECUTION_NON_EXECUTION_BRANCH_HIDING_OFF
[Strategy]Timeout=-1
[StrategyProperty]SYMBOLIC_EXECUTION_ALIAS_CHECK_OPTIONS_KEY=SYMBOLIC_EXECUTION_ALIAS_CHECK_NEVER
[StrategyProperty]QUERY_NEW_OPTIONS_KEY=QUERY_OFF
[SMTSettings]useUninterpretedMultiplication=true
[StrategyProperty]BLOCK_OPTIONS_KEY=BLOCK_CONTRACT_INTERNAL
[StrategyProperty]METHOD_OPTIONS_KEY=METHOD_CONTRACT
[StrategyProperty]USER_TACLETS_OPTIONS_KEY3=USER_TACLETS_OFF
[SMTSettings]maxGenericSorts=2
[StrategyProperty]OSS_OPTIONS_KEY=OSS_ON
[StrategyProperty]SPLITTING_OPTIONS_KEY=SPLITTING_DELAYED
[SMTSettings]integersMinimum=-2147483645
[StrategyProperty]VBT_PHASE=VBT_SYM_EX
[SMTSettings]integersMaximum=2147483645
"
}

\javaSource "../src";

\proofObligation "#Proof Obligation Settings
#Mon Nov 11 21:47:42 CET 2019
contract=de.polyas.core3.open.cred.Crypto[de.polyas.core3.open.cred.Crypto\\:\\:hashPasswordWithSHA256(java.lang.String,java.lang.String)].Non-interference contract.0
name=de.polyas.core3.open.cred.Crypto[de.polyas.core3.open.cred.Crypto\\:\\:hashPasswordWithSHA256(java.lang.String,java.lang.String)].Non-interference contract.0
class=de.uka.ilkd.key.informationflow.po.InfFlowContractPO
";

\proof {
(keyLog "0" (keyUser "flo" ) (keyVersion "57d504cc0f"))

(autoModeTime "1917")

(branch "dummy ID"
 (builtin "One Step Simplification" (formula "1"))
(rule "impRight" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "3"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "4"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "3"))
(rule "andLeft" (formula "7"))
(rule "andLeft" (formula "6"))
(rule "andLeft" (formula "2"))
(rule "andLeft" (formula "5"))
(rule "andLeft" (formula "11"))
(rule "andLeft" (formula "9"))
(rule "notLeft" (formula "6"))
(rule "notLeft" (formula "5"))
(rule "notLeft" (formula "11"))
(rule "notLeft" (formula "10"))
(rule "eqSymm" (formula "15") (term "1"))
(rule "eqSymm" (formula "15") (term "0"))
(rule "eqSymm" (formula "5") (term "1,0,0,1"))
(rule "eqSymm" (formula "5") (term "0,0,0,1"))
(rule "eqSymm" (formula "10") (term "1,0,0,1"))
(rule "eqSymm" (formula "10") (term "0,0,0,1"))
(rule "replace_known_right" (formula "3") (term "0") (ifseqformula "14"))
 (builtin "One Step Simplification" (formula "3"))
(rule "replace_known_right" (formula "7") (term "0") (ifseqformula "11"))
 (builtin "One Step Simplification" (formula "7"))
(rule "replace_known_right" (formula "2") (term "0") (ifseqformula "13"))
 (builtin "One Step Simplification" (formula "2"))
(rule "replace_known_right" (formula "8") (term "0") (ifseqformula "12"))
 (builtin "One Step Simplification" (formula "8"))
(rule "assignment" (formula "5") (term "1"))
 (builtin "One Step Simplification" (formula "5"))
(rule "assignment" (formula "10") (term "1"))
 (builtin "One Step Simplification" (formula "10"))
(rule "boxToDiamond" (formula "5") (term "1"))
 (builtin "One Step Simplification" (formula "5"))
(rule "notLeft" (formula "5"))
(rule "boxToDiamond" (formula "9") (term "1"))
 (builtin "One Step Simplification" (formula "9"))
(rule "notLeft" (formula "9"))
(rule "Static_class_invariant_axiom_for_de_polyas_core3_open_cred_Crypto" (formula "4"))
(rule "andLeft" (formula "4"))
(rule "andLeft" (formula "4"))
(rule "notLeft" (formula "6"))
(rule "notLeft" (formula "4"))
(rule "notLeft" (formula "4"))
(rule "Static_class_invariant_axiom_for_de_polyas_core3_open_cred_Crypto" (formula "7"))
(rule "andLeft" (formula "7"))
(rule "andLeft" (formula "7"))
(rule "notLeft" (formula "9"))
(rule "notLeft" (formula "8"))
(rule "notLeft" (formula "7"))
(rule "methodBodyExpand" (formula "13") (term "1") (newnames "heapBefore_hashPasswordWithSHA256,savedHeapBefore_hashPasswordWithSHA256"))
 (builtin "One Step Simplification" (formula "13"))
(rule "methodBodyExpand" (formula "12") (term "1") (newnames "heapBefore_hashPasswordWithSHA256_0,savedHeapBefore_hashPasswordWithSHA256_0"))
 (builtin "One Step Simplification" (formula "12"))
(rule "returnUnfold" (formula "13") (term "1") (inst "#v0=s"))
(rule "variableDeclarationAssign" (formula "13") (term "1"))
(rule "variableDeclaration" (formula "13") (term "1") (newnames "s"))
(rule "returnUnfold" (formula "12") (term "1") (inst "#v0=s"))
(rule "variableDeclarationAssign" (formula "12") (term "1"))
(rule "variableDeclaration" (formula "12") (term "1") (newnames "s_1"))
(rule "methodCallWithAssignmentUnfoldArguments" (formula "13") (term "1"))
(rule "variableDeclarationAssign" (formula "13") (term "1"))
(rule "variableDeclaration" (formula "13") (term "1") (newnames "var"))
(rule "stringConcat" (formula "13") (term "1") (inst "sk=sk_0"))
 (builtin "One Step Simplification" (formula "15"))
 (builtin "One Step Simplification" (formula "14"))
 (builtin "One Step Simplification" (formula "1"))
(rule "eqSeqConcat" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "polySimp_addComm0" (formula "1") (term "1"))
(rule "lenOfSeqSubEQ" (formula "1") (term "0,1") (ifseqformula "3"))
(rule "polySimp_elimSub" (formula "1") (term "1,0,1"))
(rule "polySimp_addComm0" (formula "1") (term "1"))
(rule "polySimp_addComm0" (formula "1") (term "1,1,1"))
 (builtin "Use Operation Contract" (formula "17") (newnames "heapBefore_sha256,result_158,exc_188,heapAfter_sha256,anon_heap_sha256") (contract "de.polyas.core3.open.cred.Crypto[de.polyas.core3.open.cred.Crypto::sha256(java.lang.String)].JML normal_behavior operation contract.0"))
(branch "Post (sha256)"
    (builtin "One Step Simplification" (formula "13") (ifInst ""  (formula "20")) (ifInst ""  (formula "20")))
    (builtin "One Step Simplification" (formula "21"))
    (builtin "One Step Simplification" (formula "12"))
    (builtin "One Step Simplification" (formula "11"))
   (rule "andLeft" (formula "13"))
   (rule "andLeft" (formula "11"))
   (rule "selectCreatedOfAnonAsFormulaEQ" (formula "12") (term "1,1,0") (ifseqformula "11"))
   (rule "andLeft" (formula "15"))
   (rule "andLeft" (formula "12"))
   (rule "andLeft" (formula "12"))
   (rule "andLeft" (formula "14"))
   (rule "andLeft" (formula "14"))
   (rule "notLeft" (formula "15"))
   (rule "replace_known_right" (formula "13") (term "0") (ifseqformula "19"))
    (builtin "One Step Simplification" (formula "13"))
   (rule "assignment" (formula "27") (term "1"))
    (builtin "One Step Simplification" (formula "27"))
   (rule "blockEmpty" (formula "27") (term "1"))
   (rule "applyEq" (formula "15") (term "3") (ifseqformula "12"))
   (rule "pullOutSelect" (formula "18") (term "0") (inst "selectSK=java_lang_Object_created__0"))
   (rule "simplifySelectOfCreate" (formula "18"))
    (builtin "One Step Simplification" (formula "18") (ifInst ""  (formula "27")))
   (rule "castDel" (formula "18") (term "0"))
   (rule "applyEqReverse" (formula "19") (term "0") (ifseqformula "18"))
    (builtin "One Step Simplification" (formula "19"))
   (rule "true_left" (formula "19"))
   (rule "hideAuxiliaryEq" (formula "18"))
   (rule "pullOutSelect" (formula "13") (term "0,0") (inst "selectSK=java_lang_Object_created__1"))
   (rule "simplifySelectOfCreate" (formula "13"))
    (builtin "One Step Simplification" (formula "13") (ifInst ""  (formula "26")))
   (rule "castDel" (formula "13") (term "1,0"))
   (rule "Static_class_invariant_axiom_for_de_polyas_core3_open_cred_Crypto" (formula "17"))
   (rule "andLeft" (formula "17"))
   (rule "notLeft" (formula "18"))
   (rule "andLeft" (formula "17"))
   (rule "notLeft" (formula "18"))
   (rule "notLeft" (formula "17"))
   (rule "pullOutSelect" (formula "19") (term "0") (inst "selectSK=de_polyas_core3_open_cred_Crypto_SHA_256_DIGEST_0"))
   (rule "simplifySelectOfCreate" (formula "1"))
    (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "28")) (ifInst ""  (formula "28")))
   (rule "applyEqReverse" (formula "20") (term "0") (ifseqformula "1"))
   (rule "hideAuxiliaryEq" (formula "1"))
   (rule "pullOutSelect" (formula "18") (term "0") (inst "selectSK=de_polyas_core3_open_cred_Crypto_SECURE_RANDOM_0"))
   (rule "simplifySelectOfCreate" (formula "1"))
    (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "27")) (ifInst ""  (formula "27")))
   (rule "applyEqReverse" (formula "19") (term "0") (ifseqformula "1"))
   (rule "hideAuxiliaryEq" (formula "1"))
   (rule "Static_class_invariant_axiom_for_de_polyas_core3_open_cred_Crypto" (formula "15"))
   (rule "andLeft" (formula "15"))
   (rule "notLeft" (formula "16"))
   (rule "andLeft" (formula "15"))
   (rule "notLeft" (formula "16"))
   (rule "notLeft" (formula "15"))
   (rule "pullOutSelect" (formula "18") (term "0") (inst "selectSK=de_polyas_core3_open_cred_Crypto_SHA_256_DIGEST_1"))
   (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "12"))
    (builtin "One Step Simplification" (formula "1"))
   (rule "replaceKnownSelect_taclet0_4" (formula "1") (term "0"))
   (rule "replaceKnownAuxiliaryConstant_taclet0_5" (formula "1") (term "0"))
   (rule "applyEqReverse" (formula "19") (term "0") (ifseqformula "1"))
   (rule "hideAuxiliaryEq" (formula "1"))
   (rule "pullOutSelect" (formula "17") (term "0") (inst "selectSK=de_polyas_core3_open_cred_Crypto_SECURE_RANDOM_1"))
   (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "12"))
    (builtin "One Step Simplification" (formula "1"))
   (rule "replaceKnownSelect_taclet0_6" (formula "1") (term "0"))
   (rule "replaceKnownAuxiliaryConstant_taclet0_7" (formula "1") (term "0"))
   (rule "applyEqReverse" (formula "18") (term "0") (ifseqformula "1"))
   (rule "hideAuxiliaryEq" (formula "1"))
   (rule "methodCallReturn" (formula "25") (term "1"))
   (rule "assignment" (formula "25") (term "1"))
    (builtin "One Step Simplification" (formula "25"))
   (rule "methodCallEmpty" (formula "25") (term "1"))
   (rule "tryEmpty" (formula "25") (term "1"))
   (rule "emptyModality" (formula "25") (term "1"))
    (builtin "One Step Simplification" (formula "25"))
   (rule "notRight" (formula "25"))
   (rule "andLeft" (formula "1"))
   (rule "andLeft" (formula "1"))
   (rule "eqSymm" (formula "2"))
   (rule "applyEq" (formula "18") (term "2") (ifseqformula "1"))
   (rule "applyEq" (formula "20") (term "0") (ifseqformula "1"))
   (rule "applyEq" (formula "17") (term "1,0,1") (ifseqformula "1"))
   (rule "applyEq" (formula "16") (term "1,0,0") (ifseqformula "1"))
   (rule "applyEq" (formula "16") (term "1,2,0") (ifseqformula "1"))
   (rule "methodCallWithAssignmentUnfoldArguments" (formula "26") (term "1"))
   (rule "variableDeclarationAssign" (formula "26") (term "1"))
   (rule "variableDeclaration" (formula "26") (term "1") (newnames "var_1"))
   (rule "stringConcat" (formula "26") (term "1") (inst "sk=sk_1"))
    (builtin "One Step Simplification" (formula "28"))
    (builtin "One Step Simplification" (formula "27"))
    (builtin "One Step Simplification" (formula "1"))
   (rule "eqSeqConcat" (formula "1"))
   (rule "andLeft" (formula "1"))
   (rule "andLeft" (formula "1"))
   (rule "polySimp_addComm0" (formula "1") (term "1"))
   (rule "lenOfSeqSubEQ" (formula "1") (term "0,1") (ifseqformula "3"))
   (rule "polySimp_elimSub" (formula "1") (term "1,0,1"))
   (rule "polySimp_addComm0" (formula "1") (term "1"))
   (rule "polySimp_addComm0" (formula "1") (term "1,1,1"))
    (builtin "Use Operation Contract" (formula "30") (newnames "heapBefore_sha256_0,result_159,exc_189,heapAfter_sha256_0,anon_heap_sha256_0") (contract "de.polyas.core3.open.cred.Crypto[de.polyas.core3.open.cred.Crypto::sha256(java.lang.String)].JML normal_behavior operation contract.0"))
   (branch "Post (sha256)"
       (builtin "One Step Simplification" (formula "24"))
       (builtin "One Step Simplification" (formula "26") (ifInst ""  (formula "33")) (ifInst ""  (formula "33")))
       (builtin "One Step Simplification" (formula "34"))
       (builtin "One Step Simplification" (formula "25"))
      (rule "andLeft" (formula "24"))
      (rule "selectCreatedOfAnonAsFormulaEQ" (formula "25") (term "1,1,0") (ifseqformula "24"))
      (rule "andLeft" (formula "27"))
      (rule "andLeft" (formula "25"))
      (rule "andLeft" (formula "29"))
      (rule "andLeft" (formula "26"))
      (rule "andLeft" (formula "25"))
      (rule "andLeft" (formula "26"))
      (rule "notLeft" (formula "27"))
      (rule "replace_known_right" (formula "25") (term "0") (ifseqformula "32"))
       (builtin "One Step Simplification" (formula "25"))
      (rule "assignment" (formula "40") (term "1"))
       (builtin "One Step Simplification" (formula "40"))
      (rule "blockEmpty" (formula "40") (term "1"))
      (rule "applyEq" (formula "28") (term "3") (ifseqformula "27"))
      (rule "pullOutSelect" (formula "31") (term "0") (inst "selectSK=java_lang_Object_created__2"))
      (rule "simplifySelectOfCreate" (formula "31"))
       (builtin "One Step Simplification" (formula "31") (ifInst ""  (formula "40")))
      (rule "castDel" (formula "31") (term "0"))
      (rule "applyEqReverse" (formula "32") (term "0") (ifseqformula "31"))
       (builtin "One Step Simplification" (formula "32"))
      (rule "true_left" (formula "32"))
      (rule "hideAuxiliaryEq" (formula "31"))
      (rule "pullOutSelect" (formula "25") (term "0,0") (inst "selectSK=java_lang_Object_created__3"))
      (rule "simplifySelectOfCreate" (formula "25"))
       (builtin "One Step Simplification" (formula "25") (ifInst ""  (formula "39")))
      (rule "castDel" (formula "25") (term "1,0"))
      (rule "Static_class_invariant_axiom_for_de_polyas_core3_open_cred_Crypto" (formula "30"))
      (rule "andLeft" (formula "30"))
      (rule "notLeft" (formula "31"))
      (rule "andLeft" (formula "30"))
      (rule "notLeft" (formula "30"))
      (rule "notLeft" (formula "30"))
      (rule "pullOutSelect" (formula "32") (term "0") (inst "selectSK=de_polyas_core3_open_cred_Crypto_SHA_256_DIGEST_2"))
      (rule "simplifySelectOfCreate" (formula "1"))
       (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "41")) (ifInst ""  (formula "41")))
      (rule "applyEqReverse" (formula "33") (term "0") (ifseqformula "1"))
      (rule "hideAuxiliaryEq" (formula "1"))
      (rule "pullOutSelect" (formula "31") (term "0") (inst "selectSK=de_polyas_core3_open_cred_Crypto_SECURE_RANDOM_2"))
      (rule "simplifySelectOfCreate" (formula "1"))
       (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "40")) (ifInst ""  (formula "40")))
      (rule "applyEqReverse" (formula "32") (term "0") (ifseqformula "1"))
      (rule "hideAuxiliaryEq" (formula "1"))
      (rule "Static_class_invariant_axiom_for_de_polyas_core3_open_cred_Crypto" (formula "27"))
      (rule "andLeft" (formula "27"))
      (rule "notLeft" (formula "28"))
      (rule "andLeft" (formula "27"))
      (rule "notLeft" (formula "27"))
      (rule "notLeft" (formula "27"))
      (rule "pullOutSelect" (formula "31") (term "0") (inst "selectSK=de_polyas_core3_open_cred_Crypto_SHA_256_DIGEST_3"))
      (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "25"))
       (builtin "One Step Simplification" (formula "1"))
      (rule "replaceKnownSelect_taclet00_16" (formula "1") (term "0"))
      (rule "replaceKnownAuxiliaryConstant_taclet00_17" (formula "1") (term "0"))
      (rule "applyEqReverse" (formula "32") (term "0") (ifseqformula "1"))
      (rule "hideAuxiliaryEq" (formula "1"))
      (rule "pullOutSelect" (formula "30") (term "0") (inst "selectSK=de_polyas_core3_open_cred_Crypto_SECURE_RANDOM_3"))
      (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "25"))
       (builtin "One Step Simplification" (formula "1"))
      (rule "replaceKnownSelect_taclet00_18" (formula "1") (term "0"))
      (rule "replaceKnownAuxiliaryConstant_taclet00_19" (formula "1") (term "0"))
      (rule "applyEqReverse" (formula "31") (term "0") (ifseqformula "1"))
      (rule "hideAuxiliaryEq" (formula "1"))
      (rule "methodCallReturn" (formula "38") (term "1"))
      (rule "assignment" (formula "38") (term "1"))
       (builtin "One Step Simplification" (formula "38"))
      (rule "methodCallEmpty" (formula "38") (term "1"))
      (rule "tryEmpty" (formula "38") (term "1"))
      (rule "emptyModality" (formula "38") (term "1"))
       (builtin "One Step Simplification" (formula "38"))
      (rule "notRight" (formula "38"))
      (rule "andLeft" (formula "1"))
      (rule "andLeft" (formula "1"))
      (rule "eqSymm" (formula "2"))
      (rule "polySimp_homoEq" (formula "10"))
      (rule "polySimp_homoEq" (formula "4"))
      (rule "polySimp_addComm1" (formula "10") (term "0"))
      (rule "polySimp_addComm1" (formula "4") (term "0"))
      (rule "inEqSimp_ltToLeq" (formula "10") (term "0,1,0"))
      (rule "polySimp_mulComm0" (formula "10") (term "1,0,0,0,1,0"))
      (rule "polySimp_addComm1" (formula "10") (term "0,0,1,0"))
      (rule "inEqSimp_ltToLeq" (formula "4") (term "0,1,0"))
      (rule "polySimp_mulComm0" (formula "4") (term "1,0,0,0,1,0"))
      (rule "polySimp_addComm1" (formula "4") (term "0,0,1,0"))
      (rule "applyEq" (formula "31") (term "2") (ifseqformula "1"))
      (rule "applyEq" (formula "29") (term "1,0,1") (ifseqformula "1"))
      (rule "applyEq" (formula "28") (term "1,2,0") (ifseqformula "1"))
      (rule "applyEq" (formula "28") (term "1,0,0") (ifseqformula "1"))
      (rule "applyEq" (formula "33") (term "0") (ifseqformula "1"))
      (rule "polySimp_sepPosMonomial" (formula "10"))
      (rule "polySimp_mulComm0" (formula "10") (term "1"))
      (rule "polySimp_rightDist" (formula "10") (term "1"))
      (rule "polySimp_mulLiterals" (formula "10") (term "1,1"))
      (rule "polySimp_elimOne" (formula "10") (term "1,1"))
      (rule "polySimp_mulComm0" (formula "10") (term "0,1"))
       (builtin "One Step Simplification" (formula "10"))
      (rule "polySimp_homoEq" (formula "10") (term "1"))
      (rule "mul_literals" (formula "10") (term "1,0,1"))
      (rule "add_zero_right" (formula "10") (term "0,1"))
      (rule "polySimp_sepPosMonomial" (formula "4"))
      (rule "polySimp_mulComm0" (formula "4") (term "1"))
      (rule "polySimp_rightDist" (formula "4") (term "1"))
      (rule "polySimp_mulLiterals" (formula "4") (term "1,1"))
      (rule "polySimp_elimOne" (formula "4") (term "1,1"))
      (rule "polySimp_mulComm0" (formula "4") (term "0,1"))
       (builtin "One Step Simplification" (formula "4"))
      (rule "polySimp_homoEq" (formula "4") (term "1"))
      (rule "mul_literals" (formula "4") (term "1,0,1"))
      (rule "add_zero_right" (formula "4") (term "0,1"))
      (rule "polySimp_sepPosMonomial" (formula "10") (term "1"))
      (rule "polySimp_mulLiterals" (formula "10") (term "1,1"))
      (rule "polySimp_elimOne" (formula "10") (term "1,1"))
      (rule "polySimp_sepPosMonomial" (formula "4") (term "1"))
      (rule "polySimp_mulLiterals" (formula "4") (term "1,1"))
      (rule "polySimp_elimOne" (formula "4") (term "1,1"))
      (rule "inEqSimp_sepNegMonomial0" (formula "10") (term "0"))
      (rule "polySimp_mulLiterals" (formula "10") (term "0,0"))
      (rule "polySimp_elimOne" (formula "10") (term "0,0"))
      (rule "inEqSimp_sepNegMonomial0" (formula "4") (term "0"))
      (rule "polySimp_mulLiterals" (formula "4") (term "0,0"))
      (rule "polySimp_elimOne" (formula "4") (term "0,0"))
      (rule "commute_or" (formula "10"))
      (rule "inEqSimp_or_weaken1" (formula "10"))
       (builtin "One Step Simplification" (formula "10"))
      (rule "commute_or" (formula "4"))
      (rule "inEqSimp_or_weaken1" (formula "4"))
       (builtin "One Step Simplification" (formula "4"))
      (rule "ifthenelse_split" (formula "22") (term "0"))
      (branch "sk_0 = resultAtPost_157_A TRUE"
         (rule "applyEqReverse" (formula "24") (term "0,0") (ifseqformula "23"))
          (builtin "One Step Simplification" (formula "24"))
         (rule "true_left" (formula "24"))
         (rule "hideAuxiliaryEq" (formula "23"))
         (rule "applyEq" (formula "11") (term "0,0,0") (ifseqformula "22"))
         (rule "applyEq" (formula "24") (term "1,0") (ifseqformula "22"))
         (rule "applyEq" (formula "20") (term "1,0,0") (ifseqformula "22"))
         (rule "applyEq" (formula "10") (term "0,0,0") (ifseqformula "22"))
         (rule "inEqSimp_commuteGeq" (formula "10"))
         (rule "applyEq" (formula "12") (term "0,0,2,0") (ifseqformula "22"))
         (rule "applyEq" (formula "23") (term "0") (ifseqformula "22"))
         (rule "applyEq" (formula "40") (term "0") (ifseqformula "22"))
         (rule "applyEq" (formula "12") (term "0,0,0") (ifseqformula "22"))
         (rule "applyEq" (formula "23") (term "1,1") (ifseqformula "22"))
         (rule "ifthenelse_split" (formula "27") (term "0"))
         (branch "sk_1 = resultAtPost_157_B TRUE"
            (rule "applyEqReverse" (formula "29") (term "0,0") (ifseqformula "28"))
             (builtin "One Step Simplification" (formula "29"))
            (rule "true_left" (formula "29"))
            (rule "hideAuxiliaryEq" (formula "28"))
            (rule "applyEq" (formula "38") (term "0") (ifseqformula "27"))
            (rule "applyEq" (formula "5") (term "0,0,0") (ifseqformula "27"))
            (rule "applyEq" (formula "6") (term "0,0,0") (ifseqformula "27"))
            (rule "applyEq" (formula "6") (term "0,0,2,0") (ifseqformula "27"))
            (rule "applyEq" (formula "26") (term "1,0,0") (ifseqformula "27"))
            (rule "applyEq" (formula "4") (term "0,0,0") (ifseqformula "27"))
            (rule "inEqSimp_commuteGeq" (formula "4"))
            (rule "applyEq" (formula "29") (term "1,1") (ifseqformula "27"))
            (rule "applyEq" (formula "29") (term "0") (ifseqformula "27"))
            (rule "applyEq" (formula "30") (term "1,0") (ifseqformula "27"))
            (rule "lenNonNegative" (formula "6") (term "1,0"))
            (rule "inEqSimp_commuteLeq" (formula "6"))
            (rule "inEqSimp_exactShadow3" (formula "6") (ifseqformula "4"))
            (rule "mul_literals" (formula "6") (term "0,0"))
            (rule "add_zero_left" (formula "6") (term "0"))
            (rule "lenNonNegative" (formula "13") (term "2,0"))
            (rule "inEqSimp_commuteLeq" (formula "13"))
            (rule "inEqSimp_exactShadow3" (formula "13") (ifseqformula "12"))
            (rule "mul_literals" (formula "13") (term "0,0"))
            (rule "add_zero_left" (formula "13") (term "0"))
            (rule "cut_direct" (formula "46") (term "0"))
            (branch "CUT: resultAtPost_157_B = resultAtPost_157_A TRUE"
                (builtin "One Step Simplification" (formula "47"))
               (rule "applyEq" (formula "9") (term "0,0,0") (ifseqformula "1"))
               (rule "applyEq" (formula "2") (term "1") (ifseqformula "1"))
               (rule "applyEq" (formula "5") (term "0,0,1") (ifseqformula "1"))
               (rule "applyEq" (formula "34") (term "1,1") (ifseqformula "1"))
               (rule "applyEq" (formula "31") (term "1,0,0") (ifseqformula "1"))
               (rule "applyEq" (formula "36") (term "0") (ifseqformula "1"))
               (rule "applyEq" (formula "34") (term "0") (ifseqformula "1"))
               (rule "applyEq" (formula "35") (term "1,0") (ifseqformula "1"))
               (rule "applyEq" (formula "6") (term "0,0,0") (ifseqformula "1"))
               (rule "applyEq" (formula "7") (term "0,0,0") (ifseqformula "1"))
               (rule "applyEq" (formula "33") (term "2") (ifseqformula "1"))
               (rule "applyEq" (formula "31") (term "1") (ifseqformula "1"))
               (rule "applyEq" (formula "8") (term "0,0,2,0") (ifseqformula "1"))
               (rule "applyEq" (formula "45") (term "0,0") (ifseqformula "1"))
                (builtin "One Step Simplification" (formula "45"))
               (rule "closeTrue" (formula "45"))
            )
            (branch "CUT: resultAtPost_157_B = resultAtPost_157_A FALSE"
                (builtin "One Step Simplification" (formula "47"))
               (rule "false_right" (formula "47"))
               (rule "equalityToSeqGetAndSeqLenLeft" (formula "15") (inst "iv=iv"))
               (rule "andLeft" (formula "15"))
               (rule "lenOfSeqSub" (formula "15") (term "0"))
               (rule "polySimp_elimSub" (formula "15") (term "1,0"))
               (rule "mul_literals" (formula "15") (term "1,1,0"))
               (rule "add_zero_right" (formula "15") (term "1,0"))
                (builtin "One Step Simplification" (formula "15"))
               (rule "eqSymm" (formula "15") (term "1"))
               (rule "lenOfSeqSub" (formula "16") (term "1,1,0,0"))
               (rule "polySimp_elimSub" (formula "16") (term "1,1,1,0,0"))
               (rule "mul_literals" (formula "16") (term "1,1,1,1,0,0"))
               (rule "add_zero_right" (formula "16") (term "1,1,1,0,0"))
               (rule "inEqSimp_ltToLeq" (formula "15") (term "0"))
               (rule "add_zero_right" (formula "15") (term "0,0"))
               (rule "polySimp_mulComm0" (formula "15") (term "1,0,0"))
               (rule "inEqSimp_ltToLeq" (formula "16") (term "0,1,1,0,0"))
               (rule "add_zero_right" (formula "16") (term "0,0,1,1,0,0"))
               (rule "polySimp_mulComm0" (formula "16") (term "1,0,0,1,1,0,0"))
               (rule "inEqSimp_ltToLeq" (formula "16") (term "1,0,0"))
               (rule "polySimp_mulComm0" (formula "16") (term "1,0,0,1,0,0"))
               (rule "inEqSimp_commuteLeq" (formula "16") (term "0,0,0"))
               (rule "applyEq" (formula "16") (term "0,0,1,0") (ifseqformula "17"))
                (builtin "One Step Simplification" (formula "16"))
               (rule "true_left" (formula "16"))
               (rule "inEqSimp_sepNegMonomial0" (formula "15") (term "0"))
               (rule "polySimp_mulLiterals" (formula "15") (term "0,0"))
               (rule "polySimp_elimOne" (formula "15") (term "0,0"))
               (rule "commute_or" (formula "15"))
               (rule "inEqSimp_or_weaken1" (formula "15"))
               (rule "add_literals" (formula "15") (term "1,0"))
                (builtin "One Step Simplification" (formula "15") (ifInst ""  (formula "14")))
               (rule "true_left" (formula "15"))
               (rule "lenNonNegative" (formula "12") (term "1"))
               (rule "inEqSimp_commuteLeq" (formula "12"))
               (rule "equalityToSeqGetAndSeqLenLeft" (formula "16") (inst "iv=iv"))
               (rule "andLeft" (formula "16"))
               (rule "lenOfSeqSub" (formula "17") (term "1,1,0,0"))
               (rule "polySimp_elimSub" (formula "17") (term "1,1,1,0,0"))
               (rule "lenOfSeqSubEQ" (formula "16") (term "1") (ifseqformula "18"))
               (rule "eqSymm" (formula "16"))
               (rule "polySimp_elimSub" (formula "16") (term "1,0"))
               (rule "lenOfSeqSub" (formula "16") (term "1"))
               (rule "eqSymm" (formula "16"))
               (rule "polySimp_elimSub" (formula "16") (term "1,0"))
                (builtin "One Step Simplification" (formula "16"))
               (rule "true_left" (formula "16"))
               (rule "inEqSimp_ltToLeq" (formula "16") (term "0,1,1,0,0"))
               (rule "polySimp_mulComm0" (formula "16") (term "1,0,0,0,1,1,0,0"))
               (rule "inEqSimp_ltToLeq" (formula "16") (term "1,0,0"))
               (rule "polySimp_mulComm0" (formula "16") (term "1,0,0,1,0,0"))
               (rule "inEqSimp_commuteLeq" (formula "16") (term "0,0,0"))
               (rule "applyEq" (formula "16") (term "0,0,1,0") (ifseqformula "17"))
                (builtin "One Step Simplification" (formula "16"))
               (rule "true_left" (formula "16"))
               (rule "equalityToSeqGetAndSeqLenLeft" (formula "5") (inst "iv=iv"))
               (rule "andLeft" (formula "5"))
               (rule "lenOfSeqSub" (formula "5") (term "0"))
               (rule "polySimp_elimSub" (formula "5") (term "1,0"))
               (rule "mul_literals" (formula "5") (term "1,1,0"))
               (rule "add_zero_right" (formula "5") (term "1,0"))
                (builtin "One Step Simplification" (formula "5"))
               (rule "eqSymm" (formula "5") (term "1"))
               (rule "lenOfSeqSub" (formula "6") (term "1,1,0,0"))
               (rule "polySimp_elimSub" (formula "6") (term "1,1,1,0,0"))
               (rule "mul_literals" (formula "6") (term "1,1,1,1,0,0"))
               (rule "add_zero_right" (formula "6") (term "1,1,1,0,0"))
               (rule "inEqSimp_ltToLeq" (formula "5") (term "0"))
               (rule "add_zero_right" (formula "5") (term "0,0"))
               (rule "polySimp_mulComm0" (formula "5") (term "1,0,0"))
               (rule "inEqSimp_ltToLeq" (formula "6") (term "0,1,1,0,0"))
               (rule "add_zero_right" (formula "6") (term "0,0,1,1,0,0"))
               (rule "polySimp_mulComm0" (formula "6") (term "1,0,0,1,1,0,0"))
               (rule "inEqSimp_ltToLeq" (formula "6") (term "1,0,0"))
               (rule "polySimp_mulComm0" (formula "6") (term "1,0,0,1,0,0"))
               (rule "inEqSimp_commuteLeq" (formula "6") (term "0,0,0"))
               (rule "applyEq" (formula "6") (term "0,0,1,0") (ifseqformula "7"))
                (builtin "One Step Simplification" (formula "6"))
               (rule "true_left" (formula "6"))
               (rule "inEqSimp_sepNegMonomial0" (formula "5") (term "0"))
               (rule "polySimp_mulLiterals" (formula "5") (term "0,0"))
               (rule "polySimp_elimOne" (formula "5") (term "0,0"))
               (rule "commute_or" (formula "5"))
               (rule "inEqSimp_or_weaken1" (formula "5"))
               (rule "add_literals" (formula "5") (term "1,0"))
                (builtin "One Step Simplification" (formula "5") (ifInst ""  (formula "8")))
               (rule "true_left" (formula "5"))
               (rule "lenNonNegative" (formula "8") (term "2,0"))
               (rule "inEqSimp_commuteLeq" (formula "8"))
               (rule "equalityToSeqGetAndSeqLenLeft" (formula "8") (inst "iv=iv"))
               (rule "andLeft" (formula "8"))
               (rule "lenOfSeqSub" (formula "8") (term "0"))
               (rule "polySimp_elimSub" (formula "8") (term "1,0"))
               (rule "lenOfSeqSub" (formula "9") (term "1,1,0,0"))
               (rule "polySimp_elimSub" (formula "9") (term "1,1,1,0,0"))
               (rule "lenOfSeqSubEQ" (formula "8") (term "1") (ifseqformula "10"))
               (rule "eqSymm" (formula "8"))
               (rule "polySimp_elimSub" (formula "8") (term "1,0"))
                (builtin "One Step Simplification" (formula "8"))
               (rule "true_left" (formula "8"))
               (rule "inEqSimp_ltToLeq" (formula "8") (term "0,1,1,0,0"))
               (rule "polySimp_mulComm0" (formula "8") (term "1,0,0,0,1,1,0,0"))
               (rule "inEqSimp_ltToLeq" (formula "8") (term "1,0,0"))
               (rule "polySimp_mulComm0" (formula "8") (term "1,0,0,1,0,0"))
               (rule "inEqSimp_commuteLeq" (formula "8") (term "0,0,0"))
               (rule "applyEq" (formula "8") (term "0,0,1,0") (ifseqformula "9"))
                (builtin "One Step Simplification" (formula "8"))
               (rule "true_left" (formula "8"))
               (rule "onlyCreatedObjectsAreReferenced" (formula "39") (term "0") (ifseqformula "17"))
               (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "40"))
                (builtin "One Step Simplification" (formula "1"))
               (rule "onlyCreatedObjectsAreReferenced" (formula "38") (term "0") (ifseqformula "21"))
               (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "39"))
                (builtin "One Step Simplification" (formula "1"))
               (rule "onlyCreatedObjectsAreReferenced" (formula "40") (term "0") (ifseqformula "22"))
               (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "41"))
                (builtin "One Step Simplification" (formula "1"))
               (rule "onlyCreatedObjectsAreReferenced" (formula "44") (term "0") (ifseqformula "20"))
               (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "45"))
                (builtin "One Step Simplification" (formula "1"))
               (rule "Use_information_flow_contract_for_sha256_1919988561" (formula "37") (ifseqformula "31"))
               (rule "replace_known_right" (formula "37") (term "0,1") (ifseqformula "51"))
                (builtin "One Step Simplification" (formula "37") (ifInst ""  (formula "40")) (ifInst ""  (formula "41")))
               (rule "notLeft" (formula "37"))
               (rule "Static_class_invariant_axiom_for_de_polyas_core3_open_cred_Crypto" (formula "39") (term "1"))
               (rule "replace_known_right" (formula "39") (term "0,0,0,1") (ifseqformula "45"))
                (builtin "One Step Simplification" (formula "39"))
               (rule "pullOutSelect" (formula "39") (term "0,0,1,1") (inst "selectSK=de_polyas_core3_open_cred_Crypto_SHA_256_DIGEST_4"))
               (rule "simplifySelectOfCreate" (formula "1"))
                (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "42")) (ifInst ""  (formula "42")))
               (rule "applyEqReverse" (formula "40") (term "0,0,1,1") (ifseqformula "1"))
               (rule "hideAuxiliaryEq" (formula "1"))
               (rule "replace_known_right" (formula "39") (term "0,1,1") (ifseqformula "46"))
                (builtin "One Step Simplification" (formula "39"))
               (rule "pullOutSelect" (formula "39") (term "0,0,1") (inst "selectSK=de_polyas_core3_open_cred_Crypto_SECURE_RANDOM_4"))
               (rule "simplifySelectOfCreate" (formula "1"))
                (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "42")) (ifInst ""  (formula "42")))
               (rule "applyEqReverse" (formula "40") (term "0,0,1") (ifseqformula "1"))
               (rule "hideAuxiliaryEq" (formula "1"))
               (rule "replace_known_right" (formula "39") (term "0,1") (ifseqformula "44"))
                (builtin "One Step Simplification" (formula "39"))
               (rule "Static_class_invariant_axiom_for_de_polyas_core3_open_cred_Crypto" (formula "39"))
               (rule "replace_known_right" (formula "39") (term "0,0,0") (ifseqformula "45"))
                (builtin "One Step Simplification" (formula "39"))
               (rule "pullOutSelect" (formula "39") (term "0,0,1") (inst "selectSK=de_polyas_core3_open_cred_Crypto_SHA_256_DIGEST_5"))
               (rule "simplifySelectOfCreate" (formula "1"))
                (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "41")) (ifInst ""  (formula "41")))
               (rule "applyEqReverse" (formula "40") (term "0,0,1") (ifseqformula "1"))
               (rule "hideAuxiliaryEq" (formula "1"))
               (rule "replace_known_right" (formula "39") (term "0,1") (ifseqformula "43"))
                (builtin "One Step Simplification" (formula "39"))
               (rule "notRight" (formula "39"))
               (rule "pullOutSelect" (formula "1") (term "0") (inst "selectSK=de_polyas_core3_open_cred_Crypto_SECURE_RANDOM_5"))
               (rule "simplifySelectOfCreate" (formula "1"))
                (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "41")) (ifInst ""  (formula "41")))
               (rule "applyEqReverse" (formula "2") (term "0") (ifseqformula "1"))
               (rule "close" (formula "43") (ifseqformula "2"))
            )
         )
         (branch "sk_1 = resultAtPost_157_B FALSE"
            (rule "applyEqReverse" (formula "28") (term "0,0") (ifseqformula "27"))
            (rule "hideAuxiliaryEq" (formula "27"))
            (rule "commute_or" (formula "27"))
            (rule "lenNonNegative" (formula "11") (term "2,0"))
            (rule "inEqSimp_commuteLeq" (formula "11"))
            (rule "inEqSimp_exactShadow3" (formula "11") (ifseqformula "10"))
            (rule "mul_literals" (formula "11") (term "0,0"))
            (rule "add_zero_left" (formula "11") (term "0"))
            (rule "lenNonNegative" (formula "6") (term "2,0"))
            (rule "inEqSimp_commuteLeq" (formula "6"))
            (rule "cut_direct" (formula "47") (term "0"))
            (branch "CUT: resultAtPost_157_B = resultAtPost_157_A TRUE"
                (builtin "One Step Simplification" (formula "48"))
               (rule "applyEq" (formula "35") (term "1") (ifseqformula "1"))
               (rule "applyEq" (formula "2") (term "1") (ifseqformula "1"))
               (rule "applyEq" (formula "31") (term "1,0,1") (ifseqformula "1"))
               (rule "applyEq" (formula "36") (term "0") (ifseqformula "1"))
               (rule "applyEq" (formula "47") (term "0,0") (ifseqformula "1"))
                (builtin "One Step Simplification" (formula "47"))
               (rule "closeTrue" (formula "47"))
            )
            (branch "CUT: resultAtPost_157_B = resultAtPost_157_A FALSE"
                (builtin "One Step Simplification" (formula "48"))
               (rule "false_right" (formula "48"))
               (rule "lenNonNegative" (formula "5") (term "2,0"))
               (rule "inEqSimp_commuteLeq" (formula "5"))
               (rule "equalityToSeqGetAndSeqLenLeft" (formula "8") (inst "iv=iv"))
               (rule "andLeft" (formula "8"))
               (rule "lenOfSeqSub" (formula "9") (term "1,1,0,0"))
               (rule "polySimp_elimSub" (formula "9") (term "1,1,1,0,0"))
               (rule "polySimp_addComm0" (formula "9") (term "1,1,1,0,0"))
               (rule "lenOfSeqSub" (formula "8") (term "0"))
               (rule "polySimp_elimSub" (formula "8") (term "1,0"))
               (rule "polySimp_addComm0" (formula "8") (term "1,0"))
               (rule "lenOfSeqSubEQ" (formula "8") (term "1") (ifseqformula "10"))
               (rule "eqSymm" (formula "8"))
               (rule "polySimp_elimSub" (formula "8") (term "1,0"))
               (rule "polySimp_addComm0" (formula "8") (term "1,0"))
                (builtin "One Step Simplification" (formula "8"))
               (rule "true_left" (formula "8"))
               (rule "inEqSimp_ltToLeq" (formula "8") (term "0,1,1,0,0"))
               (rule "polySimp_mulComm0" (formula "8") (term "1,0,0,0,1,1,0,0"))
               (rule "polySimp_addComm1" (formula "8") (term "0,0,1,1,0,0"))
               (rule "inEqSimp_ltToLeq" (formula "8") (term "1,0,0"))
               (rule "polySimp_mulComm0" (formula "8") (term "1,0,0,1,0,0"))
               (rule "inEqSimp_commuteLeq" (formula "8") (term "0,0,0"))
               (rule "applyEq" (formula "8") (term "0,0,1,0") (ifseqformula "9"))
                (builtin "One Step Simplification" (formula "8"))
               (rule "true_left" (formula "8"))
               (rule "equalityToSeqGetAndSeqLenLeft" (formula "6") (inst "iv=iv"))
               (rule "andLeft" (formula "6"))
               (rule "lenOfSeqSub" (formula "6") (term "0"))
               (rule "polySimp_elimSub" (formula "6") (term "1,0"))
               (rule "times_zero_2" (formula "6") (term "1,1,0"))
               (rule "add_zero_right" (formula "6") (term "1,0"))
                (builtin "One Step Simplification" (formula "6"))
               (rule "eqSymm" (formula "6") (term "1"))
               (rule "lenOfSeqSub" (formula "7") (term "1,1,0,0"))
               (rule "polySimp_elimSub" (formula "7") (term "1,1,1,0,0"))
               (rule "times_zero_2" (formula "7") (term "1,1,1,1,0,0"))
               (rule "add_zero_right" (formula "7") (term "1,1,1,0,0"))
               (rule "inEqSimp_ltToLeq" (formula "6") (term "0"))
               (rule "add_zero_right" (formula "6") (term "0,0"))
               (rule "polySimp_mulComm0" (formula "6") (term "1,0,0"))
               (rule "inEqSimp_ltToLeq" (formula "7") (term "0,1,1,0,0"))
               (rule "add_zero_right" (formula "7") (term "0,0,1,1,0,0"))
               (rule "polySimp_mulComm0" (formula "7") (term "1,0,0,1,1,0,0"))
               (rule "inEqSimp_ltToLeq" (formula "7") (term "1,0,0"))
               (rule "polySimp_mulComm0" (formula "7") (term "1,0,0,1,0,0"))
               (rule "inEqSimp_commuteLeq" (formula "7") (term "0,0,0"))
               (rule "applyEq" (formula "7") (term "0,0,1,0") (ifseqformula "8"))
                (builtin "One Step Simplification" (formula "7"))
               (rule "true_left" (formula "7"))
               (rule "inEqSimp_sepNegMonomial0" (formula "6") (term "0"))
               (rule "polySimp_mulLiterals" (formula "6") (term "0,0"))
               (rule "polySimp_elimOne" (formula "6") (term "0,0"))
               (rule "commute_or" (formula "6"))
               (rule "inEqSimp_or_weaken1" (formula "6"))
               (rule "add_zero_right" (formula "6") (term "1,0"))
                (builtin "One Step Simplification" (formula "6") (ifInst ""  (formula "5")))
               (rule "true_left" (formula "6"))
               (rule "equalityToSeqGetAndSeqLenLeft" (formula "15") (inst "iv=iv"))
               (rule "andLeft" (formula "15"))
               (rule "lenOfSeqSub" (formula "16") (term "1,1,0,0"))
               (rule "polySimp_elimSub" (formula "16") (term "1,1,1,0,0"))
               (rule "times_zero_2" (formula "16") (term "1,1,1,1,0,0"))
               (rule "add_zero_right" (formula "16") (term "1,1,1,0,0"))
               (rule "lenOfSeqSub" (formula "15") (term "0"))
               (rule "polySimp_elimSub" (formula "15") (term "1,0"))
               (rule "times_zero_2" (formula "15") (term "1,1,0"))
               (rule "add_zero_right" (formula "15") (term "1,0"))
                (builtin "One Step Simplification" (formula "15"))
               (rule "eqSymm" (formula "15") (term "1"))
               (rule "inEqSimp_ltToLeq" (formula "16") (term "0,1,1,0,0"))
               (rule "add_zero_right" (formula "16") (term "0,0,1,1,0,0"))
               (rule "polySimp_mulComm0" (formula "16") (term "1,0,0,1,1,0,0"))
               (rule "inEqSimp_ltToLeq" (formula "15") (term "0"))
               (rule "add_zero_right" (formula "15") (term "0,0"))
               (rule "polySimp_mulComm0" (formula "15") (term "1,0,0"))
               (rule "inEqSimp_ltToLeq" (formula "16") (term "1,0,0"))
               (rule "polySimp_mulComm0" (formula "16") (term "1,0,0,1,0,0"))
               (rule "inEqSimp_commuteLeq" (formula "16") (term "0,0,0"))
               (rule "applyEq" (formula "16") (term "0,0,1,0") (ifseqformula "17"))
                (builtin "One Step Simplification" (formula "16"))
               (rule "true_left" (formula "16"))
               (rule "inEqSimp_sepNegMonomial0" (formula "15") (term "0"))
               (rule "polySimp_mulLiterals" (formula "15") (term "0,0"))
               (rule "polySimp_elimOne" (formula "15") (term "0,0"))
               (rule "commute_or" (formula "15"))
               (rule "inEqSimp_or_weaken1" (formula "15"))
               (rule "add_zero_right" (formula "15") (term "1,0"))
                (builtin "One Step Simplification" (formula "15") (ifInst ""  (formula "14")))
               (rule "true_left" (formula "15"))
               (rule "lenNonNegative" (formula "12") (term "1"))
               (rule "inEqSimp_commuteLeq" (formula "12"))
               (rule "equalityToSeqGetAndSeqLenLeft" (formula "16") (inst "iv=iv"))
               (rule "andLeft" (formula "16"))
               (rule "lenOfSeqSub" (formula "17") (term "1,1,0,0"))
               (rule "polySimp_elimSub" (formula "17") (term "1,1,1,0,0"))
               (rule "lenOfSeqSub" (formula "16") (term "0"))
               (rule "polySimp_elimSub" (formula "16") (term "1,0"))
               (rule "lenOfSeqSubEQ" (formula "16") (term "1") (ifseqformula "18"))
               (rule "eqSymm" (formula "16"))
               (rule "polySimp_elimSub" (formula "16") (term "1,0"))
                (builtin "One Step Simplification" (formula "16"))
               (rule "true_left" (formula "16"))
               (rule "inEqSimp_ltToLeq" (formula "16") (term "0,1,1,0,0"))
               (rule "polySimp_mulComm0" (formula "16") (term "1,0,0,0,1,1,0,0"))
               (rule "inEqSimp_ltToLeq" (formula "16") (term "1,0,0"))
               (rule "polySimp_mulComm0" (formula "16") (term "1,0,0,1,0,0"))
               (rule "inEqSimp_commuteLeq" (formula "16") (term "0,0,0"))
               (rule "applyEq" (formula "16") (term "0,0,1,0") (ifseqformula "17"))
                (builtin "One Step Simplification" (formula "16"))
               (rule "true_left" (formula "16"))
               (rule "onlyCreatedObjectsAreReferenced" (formula "38") (term "0") (ifseqformula "20"))
               (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "39"))
                (builtin "One Step Simplification" (formula "1"))
               (rule "onlyCreatedObjectsAreReferenced" (formula "41") (term "0") (ifseqformula "18"))
               (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "42"))
                (builtin "One Step Simplification" (formula "1"))
               (rule "onlyCreatedObjectsAreReferenced" (formula "44") (term "0") (ifseqformula "19"))
               (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "45"))
                (builtin "One Step Simplification" (formula "1"))
               (rule "onlyCreatedObjectsAreReferenced" (formula "42") (term "0") (ifseqformula "23"))
               (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "43"))
                (builtin "One Step Simplification" (formula "1"))
               (rule "cut_direct" (formula "35") (term "1"))
               (branch "CUT: resultAtPost_157_B.<created>@heapAtPre_B«anonHeapFunction» = TRUE TRUE"
                   (builtin "One Step Simplification" (formula "36"))
                  (rule "true_left" (formula "36"))
                  (rule "Use_information_flow_contract_for_sha256_1919988561" (formula "31") (ifseqformula "31"))
                   (builtin "One Step Simplification" (formula "31") (ifInst ""  (formula "42")) (ifInst ""  (formula "42")))
                  (rule "true_left" (formula "31"))
                  (rule "Use_information_flow_contract_for_sha256_1919988561_0" (formula "31") (ifseqformula "31"))
                   (builtin "One Step Simplification" (formula "31") (ifInst ""  (formula "42")) (ifInst ""  (formula "42")))
                  (rule "true_left" (formula "31"))
                  (rule "Use_information_flow_contract_for_sha256_1919988561" (formula "37") (ifseqformula "31"))
                  (rule "replace_known_right" (formula "37") (term "0,1") (ifseqformula "53"))
                   (builtin "One Step Simplification" (formula "37") (ifInst ""  (formula "48")) (ifInst ""  (formula "42")))
                  (rule "notLeft" (formula "37"))
                  (rule "Static_class_invariant_axiom_for_de_polyas_core3_open_cred_Crypto" (formula "39") (term "1"))
                  (rule "replace_known_right" (formula "39") (term "0,0,0,1") (ifseqformula "46"))
                   (builtin "One Step Simplification" (formula "39"))
                  (rule "pullOutSelect" (formula "39") (term "0,0,0,1") (inst "selectSK=de_polyas_core3_open_cred_Crypto_SECURE_RANDOM_4"))
                  (rule "simplifySelectOfCreate" (formula "1"))
                   (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "43")) (ifInst ""  (formula "43")))
                  (rule "applyEqReverse" (formula "40") (term "0,0,0,1") (ifseqformula "1"))
                  (rule "hideAuxiliaryEq" (formula "1"))
                  (rule "replace_known_right" (formula "39") (term "0,0,1") (ifseqformula "45"))
                   (builtin "One Step Simplification" (formula "39"))
                  (rule "pullOutSelect" (formula "39") (term "0,0,1") (inst "selectSK=de_polyas_core3_open_cred_Crypto_SHA_256_DIGEST_4"))
                  (rule "simplifySelectOfCreate" (formula "1"))
                   (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "43")) (ifInst ""  (formula "43")))
                  (rule "applyEqReverse" (formula "40") (term "0,0,1") (ifseqformula "1"))
                  (rule "hideAuxiliaryEq" (formula "1"))
                  (rule "replace_known_right" (formula "39") (term "0,1") (ifseqformula "47"))
                   (builtin "One Step Simplification" (formula "39"))
                  (rule "Static_class_invariant_axiom_for_de_polyas_core3_open_cred_Crypto" (formula "39"))
                  (rule "replaceKnownSelect_taclet00_16" (formula "39") (term "0,0,1"))
                  (rule "replaceKnownAuxiliaryConstant_taclet00_17" (formula "39") (term "0,0,1"))
                  (rule "replaceKnownSelect_taclet00_18" (formula "39") (term "0,0,1,0"))
                  (rule "replaceKnownAuxiliaryConstant_taclet00_19" (formula "39") (term "0,0,1,0"))
                  (rule "replace_known_right" (formula "39") (term "0,0,0") (ifseqformula "46"))
                   (builtin "One Step Simplification" (formula "39") (ifInst ""  (formula "43")) (ifInst ""  (formula "44")))
                  (rule "closeTrue" (formula "39"))
               )
               (branch "CUT: resultAtPost_157_B.<created>@heapAtPre_B«anonHeapFunction» = TRUE FALSE"
                   (builtin "One Step Simplification" (formula "35"))
                  (rule "Use_information_flow_contract_for_sha256_1919988561" (formula "31") (ifseqformula "31"))
                   (builtin "One Step Simplification" (formula "31") (ifInst ""  (formula "43")) (ifInst ""  (formula "43")))
                  (rule "true_left" (formula "31"))
                  (rule "Use_information_flow_contract_for_sha256_1919988561_0" (formula "31") (ifseqformula "31"))
                   (builtin "One Step Simplification" (formula "31") (ifInst ""  (formula "43")) (ifInst ""  (formula "43")))
                  (rule "true_left" (formula "31"))
                  (rule "Use_information_flow_contract_for_sha256_1919988561_0" (formula "31") (ifseqformula "37"))
                  (rule "eqSymm" (formula "31") (term "1,1"))
                  (rule "eqSymm" (formula "31") (term "0,1"))
                  (rule "replace_known_right" (formula "31") (term "0,1,0,0") (ifseqformula "43"))
                   (builtin "One Step Simplification" (formula "31") (ifInst ""  (formula "49")) (ifInst ""  (formula "54")))
                  (rule "notLeft" (formula "31"))
                  (rule "Static_class_invariant_axiom_for_de_polyas_core3_open_cred_Crypto" (formula "39") (term "0"))
                  (rule "replace_known_right" (formula "39") (term "0,0,0,0") (ifseqformula "47"))
                   (builtin "One Step Simplification" (formula "39"))
                  (rule "pullOutSelect" (formula "39") (term "0,0,0,0") (inst "selectSK=de_polyas_core3_open_cred_Crypto_SECURE_RANDOM_4"))
                  (rule "simplifySelectOfCreate" (formula "1"))
                   (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "44")) (ifInst ""  (formula "44")))
                  (rule "applyEqReverse" (formula "40") (term "0,0,0,0") (ifseqformula "1"))
                  (rule "hideAuxiliaryEq" (formula "1"))
                  (rule "replace_known_right" (formula "39") (term "0,0,0") (ifseqformula "46"))
                   (builtin "One Step Simplification" (formula "39"))
                  (rule "pullOutSelect" (formula "39") (term "0,0,0") (inst "selectSK=de_polyas_core3_open_cred_Crypto_SHA_256_DIGEST_4"))
                  (rule "simplifySelectOfCreate" (formula "1"))
                   (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "44")) (ifInst ""  (formula "44")))
                  (rule "applyEqReverse" (formula "40") (term "0,0,0") (ifseqformula "1"))
                  (rule "hideAuxiliaryEq" (formula "1"))
                  (rule "replace_known_right" (formula "39") (term "0,0") (ifseqformula "48"))
                   (builtin "One Step Simplification" (formula "39"))
                  (rule "Static_class_invariant_axiom_for_de_polyas_core3_open_cred_Crypto" (formula "39"))
                  (rule "replaceKnownSelect_taclet00_16" (formula "39") (term "0,0,1"))
                  (rule "replaceKnownAuxiliaryConstant_taclet00_17" (formula "39") (term "0,0,1"))
                  (rule "replaceKnownSelect_taclet00_18" (formula "39") (term "0,0,1,0"))
                  (rule "replaceKnownAuxiliaryConstant_taclet00_19" (formula "39") (term "0,0,1,0"))
                  (rule "replace_known_right" (formula "39") (term "0,0,0") (ifseqformula "47"))
                   (builtin "One Step Simplification" (formula "39") (ifInst ""  (formula "44")) (ifInst ""  (formula "45")))
                  (rule "closeTrue" (formula "39"))
               )
            )
         )
      )
      (branch "sk_0 = resultAtPost_157_A FALSE"
         (rule "applyEqReverse" (formula "23") (term "0,0") (ifseqformula "22"))
         (rule "hideAuxiliaryEq" (formula "22"))
         (rule "commute_or" (formula "22"))
         (rule "ifthenelse_split" (formula "27") (term "0"))
         (branch "sk_1 = resultAtPost_157_B TRUE"
            (rule "applyEqReverse" (formula "29") (term "0,0") (ifseqformula "28"))
             (builtin "One Step Simplification" (formula "29"))
            (rule "true_left" (formula "29"))
            (rule "hideAuxiliaryEq" (formula "28"))
            (rule "applyEq" (formula "26") (term "1,0,0") (ifseqformula "27"))
            (rule "applyEq" (formula "30") (term "1,0") (ifseqformula "27"))
            (rule "applyEq" (formula "6") (term "0,0,0") (ifseqformula "27"))
            (rule "applyEq" (formula "29") (term "0") (ifseqformula "27"))
            (rule "applyEq" (formula "4") (term "0,0,0") (ifseqformula "27"))
            (rule "inEqSimp_commuteGeq" (formula "4"))
            (rule "applyEq" (formula "39") (term "0") (ifseqformula "27"))
            (rule "applyEq" (formula "5") (term "0,0,0") (ifseqformula "27"))
            (rule "applyEq" (formula "29") (term "1,1") (ifseqformula "27"))
            (rule "applyEq" (formula "6") (term "0,0,2,0") (ifseqformula "27"))
            (rule "equalityToSeqGetAndSeqLenLeft" (formula "11") (inst "iv=iv"))
            (rule "andLeft" (formula "11"))
            (rule "lenOfSeqSub" (formula "12") (term "1,1,0,0"))
            (rule "polySimp_elimSub" (formula "12") (term "1,1,1,0,0"))
            (rule "mul_literals" (formula "12") (term "1,1,1,1,0,0"))
            (rule "add_zero_right" (formula "12") (term "1,1,1,0,0"))
            (rule "lenOfSeqSub" (formula "11") (term "0"))
            (rule "polySimp_elimSub" (formula "11") (term "1,0"))
            (rule "times_zero_2" (formula "11") (term "1,1,0"))
            (rule "add_zero_right" (formula "11") (term "1,0"))
             (builtin "One Step Simplification" (formula "11"))
            (rule "eqSymm" (formula "11") (term "1"))
            (rule "inEqSimp_ltToLeq" (formula "12") (term "0,1,1,0,0"))
            (rule "add_zero_right" (formula "12") (term "0,0,1,1,0,0"))
            (rule "polySimp_mulComm0" (formula "12") (term "1,0,0,1,1,0,0"))
            (rule "inEqSimp_ltToLeq" (formula "11") (term "0"))
            (rule "add_zero_right" (formula "11") (term "0,0"))
            (rule "polySimp_mulComm0" (formula "11") (term "1,0,0"))
            (rule "inEqSimp_ltToLeq" (formula "12") (term "1,0,0"))
            (rule "polySimp_mulComm0" (formula "12") (term "1,0,0,1,0,0"))
            (rule "inEqSimp_commuteLeq" (formula "12") (term "0,0,0"))
            (rule "applyEq" (formula "12") (term "0,0,1,0") (ifseqformula "13"))
             (builtin "One Step Simplification" (formula "12"))
            (rule "true_left" (formula "12"))
            (rule "inEqSimp_sepNegMonomial0" (formula "11") (term "0"))
            (rule "polySimp_mulLiterals" (formula "11") (term "0,0"))
            (rule "polySimp_elimOne" (formula "11") (term "0,0"))
            (rule "commute_or" (formula "11"))
            (rule "inEqSimp_or_weaken1" (formula "11"))
            (rule "add_zero_right" (formula "11") (term "1,0"))
             (builtin "One Step Simplification" (formula "11"))
            (rule "lenNonNegative" (formula "13") (term "1,0"))
            (rule "inEqSimp_commuteLeq" (formula "13"))
            (rule "lenNonNegative" (formula "5") (term "2,0"))
            (rule "inEqSimp_commuteLeq" (formula "5"))
            (rule "inEqSimp_exactShadow3" (formula "5") (ifseqformula "4"))
            (rule "mul_literals" (formula "5") (term "0,0"))
            (rule "add_zero_left" (formula "5") (term "0"))
            (rule "lenNonNegative" (formula "15") (term "2,0"))
            (rule "inEqSimp_commuteLeq" (formula "15"))
            (rule "equalityToSeqGetAndSeqLenLeft" (formula "16") (inst "iv=iv"))
            (rule "andLeft" (formula "16"))
            (rule "lenOfSeqSub" (formula "17") (term "1,1,0,0"))
            (rule "polySimp_elimSub" (formula "17") (term "1,1,1,0,0"))
            (rule "polySimp_addComm0" (formula "17") (term "1,1,1,0,0"))
            (rule "lenOfSeqSub" (formula "16") (term "0"))
            (rule "polySimp_elimSub" (formula "16") (term "1,0"))
            (rule "polySimp_addComm0" (formula "16") (term "1,0"))
            (rule "lenOfSeqSubEQ" (formula "16") (term "1") (ifseqformula "18"))
            (rule "eqSymm" (formula "16"))
            (rule "polySimp_elimSub" (formula "16") (term "1,0"))
            (rule "polySimp_addComm0" (formula "16") (term "1,0"))
             (builtin "One Step Simplification" (formula "16"))
            (rule "true_left" (formula "16"))
            (rule "inEqSimp_ltToLeq" (formula "16") (term "0,1,1,0,0"))
            (rule "polySimp_mulComm0" (formula "16") (term "1,0,0,0,1,1,0,0"))
            (rule "polySimp_addComm1" (formula "16") (term "0,0,1,1,0,0"))
            (rule "inEqSimp_ltToLeq" (formula "16") (term "1,0,0"))
            (rule "polySimp_mulComm0" (formula "16") (term "1,0,0,1,0,0"))
            (rule "inEqSimp_commuteLeq" (formula "16") (term "0,0,0"))
            (rule "applyEq" (formula "16") (term "0,0,1,0") (ifseqformula "17"))
             (builtin "One Step Simplification" (formula "16"))
            (rule "true_left" (formula "16"))
            (rule "cut_direct" (formula "48") (term "0"))
            (branch "CUT: resultAtPost_157_B = resultAtPost_157_A TRUE"
                (builtin "One Step Simplification" (formula "49"))
               (rule "applyEq" (formula "49") (term "0,0") (ifseqformula "1"))
                (builtin "One Step Simplification" (formula "49"))
               (rule "closeTrue" (formula "49"))
            )
            (branch "CUT: resultAtPost_157_B = resultAtPost_157_A FALSE"
                (builtin "One Step Simplification" (formula "49"))
               (rule "false_right" (formula "49"))
               (rule "lenNonNegative" (formula "4") (term "1"))
               (rule "inEqSimp_commuteLeq" (formula "4"))
               (rule "equalityToSeqGetAndSeqLenLeft" (formula "7") (inst "iv=iv"))
               (rule "andLeft" (formula "7"))
               (rule "lenOfSeqSub" (formula "7") (term "0"))
               (rule "polySimp_elimSub" (formula "7") (term "1,0"))
               (rule "times_zero_2" (formula "7") (term "1,1,0"))
               (rule "add_zero_right" (formula "7") (term "1,0"))
                (builtin "One Step Simplification" (formula "7"))
               (rule "eqSymm" (formula "7") (term "1"))
               (rule "lenOfSeqSub" (formula "8") (term "1,1,0,0"))
               (rule "polySimp_elimSub" (formula "8") (term "1,1,1,0,0"))
               (rule "times_zero_2" (formula "8") (term "1,1,1,1,0,0"))
               (rule "add_zero_right" (formula "8") (term "1,1,1,0,0"))
               (rule "inEqSimp_ltToLeq" (formula "7") (term "0"))
               (rule "add_zero_right" (formula "7") (term "0,0"))
               (rule "polySimp_mulComm0" (formula "7") (term "1,0,0"))
               (rule "inEqSimp_ltToLeq" (formula "8") (term "0,1,1,0,0"))
               (rule "add_zero_right" (formula "8") (term "0,0,1,1,0,0"))
               (rule "polySimp_mulComm0" (formula "8") (term "1,0,0,1,1,0,0"))
               (rule "inEqSimp_ltToLeq" (formula "8") (term "1,0,0"))
               (rule "polySimp_mulComm0" (formula "8") (term "1,0,0,1,0,0"))
               (rule "inEqSimp_commuteLeq" (formula "8") (term "0,0,0"))
               (rule "applyEq" (formula "8") (term "0,0,1,0") (ifseqformula "9"))
                (builtin "One Step Simplification" (formula "8"))
               (rule "true_left" (formula "8"))
               (rule "inEqSimp_sepNegMonomial0" (formula "7") (term "0"))
               (rule "polySimp_mulLiterals" (formula "7") (term "0,0"))
               (rule "polySimp_elimOne" (formula "7") (term "0,0"))
               (rule "commute_or" (formula "7"))
               (rule "inEqSimp_or_weaken1" (formula "7"))
               (rule "add_zero_right" (formula "7") (term "1,0"))
                (builtin "One Step Simplification" (formula "7") (ifInst ""  (formula "6")))
               (rule "true_left" (formula "7"))
               (rule "equalityToSeqGetAndSeqLenLeft" (formula "8") (inst "iv=iv"))
               (rule "andLeft" (formula "8"))
               (rule "lenOfSeqSub" (formula "8") (term "0"))
               (rule "polySimp_elimSub" (formula "8") (term "1,0"))
               (rule "lenOfSeqSubEQ" (formula "8") (term "1") (ifseqformula "10"))
               (rule "eqSymm" (formula "8"))
               (rule "polySimp_elimSub" (formula "8") (term "1,0"))
                (builtin "One Step Simplification" (formula "8"))
               (rule "true_left" (formula "8"))
               (rule "lenOfSeqSub" (formula "8") (term "1,1,0,0"))
               (rule "polySimp_elimSub" (formula "8") (term "1,1,1,0,0"))
               (rule "inEqSimp_ltToLeq" (formula "8") (term "0,1,1,0,0"))
               (rule "polySimp_mulComm0" (formula "8") (term "1,0,0,0,1,1,0,0"))
               (rule "inEqSimp_ltToLeq" (formula "8") (term "1,0,0"))
               (rule "polySimp_mulComm0" (formula "8") (term "1,0,0,1,0,0"))
               (rule "inEqSimp_commuteLeq" (formula "8") (term "0,0,0"))
               (rule "applyEq" (formula "8") (term "0,0,1,0") (ifseqformula "9"))
                (builtin "One Step Simplification" (formula "8"))
               (rule "true_left" (formula "8"))
               (rule "onlyCreatedObjectsAreReferenced" (formula "38") (term "0") (ifseqformula "20"))
               (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "39"))
                (builtin "One Step Simplification" (formula "1"))
               (rule "onlyCreatedObjectsAreReferenced" (formula "43") (term "0") (ifseqformula "18"))
               (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "44"))
                (builtin "One Step Simplification" (formula "1"))
               (rule "onlyCreatedObjectsAreReferenced" (formula "42") (term "0") (ifseqformula "19"))
               (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "43"))
                (builtin "One Step Simplification" (formula "1"))
               (rule "onlyCreatedObjectsAreReferenced" (formula "42") (term "0") (ifseqformula "23"))
               (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "43"))
                (builtin "One Step Simplification" (formula "1"))
               (rule "cut_direct" (formula "30") (term "0"))
               (branch "CUT: resultAtPost_157_A.<created>@anon_heap_sha256«anonHeapFunction» = TRUE TRUE"
                   (builtin "One Step Simplification" (formula "31"))
                  (rule "true_left" (formula "31"))
                  (rule "Use_information_flow_contract_for_sha256_1919988561" (formula "37") (ifseqformula "31"))
                  (rule "replace_known_right" (formula "37") (term "0,1") (ifseqformula "53"))
                   (builtin "One Step Simplification" (formula "37") (ifInst ""  (formula "41")) (ifInst ""  (formula "48")))
                  (rule "notLeft" (formula "37"))
                  (rule "Static_class_invariant_axiom_for_de_polyas_core3_open_cred_Crypto" (formula "39") (term "1"))
                  (rule "replaceKnownSelect_taclet0_4" (formula "39") (term "0,0,1,1"))
                  (rule "replaceKnownAuxiliaryConstant_taclet0_5" (formula "39") (term "0,0,1,1"))
                  (rule "replaceKnownSelect_taclet0_6" (formula "39") (term "0,0,1,0,1"))
                  (rule "replaceKnownAuxiliaryConstant_taclet0_7" (formula "39") (term "0,0,1,0,1"))
                  (rule "replace_known_right" (formula "39") (term "0,1,0,1") (ifseqformula "45"))
                   (builtin "One Step Simplification" (formula "39") (ifInst ""  (formula "46")) (ifInst ""  (formula "47")))
                  (rule "Static_class_invariant_axiom_for_de_polyas_core3_open_cred_Crypto" (formula "39"))
                  (rule "replace_known_right" (formula "39") (term "0,0,0") (ifseqformula "46"))
                   (builtin "One Step Simplification" (formula "39"))
                  (rule "pullOutSelect" (formula "39") (term "0,0,1") (inst "selectSK=de_polyas_core3_open_cred_Crypto_SHA_256_DIGEST_4"))
                  (rule "simplifySelectOfCreate" (formula "1"))
                   (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "42")) (ifInst ""  (formula "42")))
                  (rule "applyEqReverse" (formula "40") (term "0,0,1") (ifseqformula "1"))
                  (rule "hideAuxiliaryEq" (formula "1"))
                  (rule "replace_known_right" (formula "39") (term "0,1") (ifseqformula "44"))
                   (builtin "One Step Simplification" (formula "39"))
                  (rule "notRight" (formula "39"))
                  (rule "pullOutSelect" (formula "1") (term "0") (inst "selectSK=de_polyas_core3_open_cred_Crypto_SECURE_RANDOM_4"))
                  (rule "simplifySelectOfCreate" (formula "1"))
                   (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "42")) (ifInst ""  (formula "42")))
                  (rule "applyEqReverse" (formula "2") (term "0") (ifseqformula "1"))
                  (rule "close" (formula "44") (ifseqformula "2"))
               )
               (branch "CUT: resultAtPost_157_A.<created>@anon_heap_sha256«anonHeapFunction» = TRUE FALSE"
                   (builtin "One Step Simplification" (formula "30"))
                  (rule "Use_information_flow_contract_for_sha256_1919988561" (formula "37") (ifseqformula "31"))
                  (rule "replace_known_right" (formula "37") (term "0,1") (ifseqformula "54"))
                   (builtin "One Step Simplification" (formula "37") (ifInst ""  (formula "42")) (ifInst ""  (formula "49")))
                  (rule "notLeft" (formula "37"))
                  (rule "Static_class_invariant_axiom_for_de_polyas_core3_open_cred_Crypto" (formula "39") (term "0"))
                  (rule "replace_known_right" (formula "39") (term "0,0,0,0") (ifseqformula "47"))
                   (builtin "One Step Simplification" (formula "39"))
                  (rule "pullOutSelect" (formula "39") (term "0,0,1,0") (inst "selectSK=de_polyas_core3_open_cred_Crypto_SHA_256_DIGEST_4"))
                  (rule "simplifySelectOfCreate" (formula "1"))
                   (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "43")) (ifInst ""  (formula "43")))
                  (rule "applyEqReverse" (formula "40") (term "0,0,1,0") (ifseqformula "1"))
                  (rule "hideAuxiliaryEq" (formula "1"))
                  (rule "replace_known_right" (formula "39") (term "0,1,0") (ifseqformula "45"))
                   (builtin "One Step Simplification" (formula "39"))
                  (rule "pullOutSelect" (formula "39") (term "0,0,0") (inst "selectSK=de_polyas_core3_open_cred_Crypto_SECURE_RANDOM_4"))
                  (rule "simplifySelectOfCreate" (formula "1"))
                   (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "43")) (ifInst ""  (formula "43")))
                  (rule "applyEqReverse" (formula "40") (term "0,0,0") (ifseqformula "1"))
                  (rule "hideAuxiliaryEq" (formula "1"))
                  (rule "replace_known_right" (formula "39") (term "0,0") (ifseqformula "44"))
                   (builtin "One Step Simplification" (formula "39"))
                  (rule "Static_class_invariant_axiom_for_de_polyas_core3_open_cred_Crypto" (formula "39"))
                  (rule "replaceKnownSelect_taclet0_4" (formula "39") (term "0,0,1"))
                  (rule "replaceKnownAuxiliaryConstant_taclet0_5" (formula "39") (term "0,0,1"))
                  (rule "replaceKnownSelect_taclet0_6" (formula "39") (term "0,0,1,0"))
                  (rule "replaceKnownAuxiliaryConstant_taclet0_7" (formula "39") (term "0,0,1,0"))
                  (rule "replace_known_right" (formula "39") (term "0,0,0") (ifseqformula "47"))
                   (builtin "One Step Simplification" (formula "39") (ifInst ""  (formula "46")) (ifInst ""  (formula "48")))
                  (rule "closeTrue" (formula "39"))
               )
            )
         )
         (branch "sk_1 = resultAtPost_157_B FALSE"
            (rule "applyEqReverse" (formula "28") (term "0,0") (ifseqformula "27"))
            (rule "hideAuxiliaryEq" (formula "27"))
            (rule "commute_or" (formula "27"))
            (rule "equalityToSeqGetAndSeqLenLeft" (formula "11") (inst "iv=iv"))
            (rule "andLeft" (formula "11"))
            (rule "lenOfSeqSub" (formula "12") (term "1,1,0,0"))
            (rule "polySimp_elimSub" (formula "12") (term "1,1,1,0,0"))
            (rule "times_zero_2" (formula "12") (term "1,1,1,1,0,0"))
            (rule "add_zero_right" (formula "12") (term "1,1,1,0,0"))
            (rule "lenOfSeqSub" (formula "11") (term "0"))
            (rule "polySimp_elimSub" (formula "11") (term "1,0"))
            (rule "mul_literals" (formula "11") (term "1,1,0"))
            (rule "add_zero_right" (formula "11") (term "1,0"))
             (builtin "One Step Simplification" (formula "11"))
            (rule "eqSymm" (formula "11") (term "1"))
            (rule "inEqSimp_ltToLeq" (formula "12") (term "0,1,1,0,0"))
            (rule "add_zero_right" (formula "12") (term "0,0,1,1,0,0"))
            (rule "polySimp_mulComm0" (formula "12") (term "1,0,0,1,1,0,0"))
            (rule "inEqSimp_ltToLeq" (formula "11") (term "0"))
            (rule "add_zero_right" (formula "11") (term "0,0"))
            (rule "polySimp_mulComm0" (formula "11") (term "1,0,0"))
            (rule "inEqSimp_ltToLeq" (formula "12") (term "1,0,0"))
            (rule "polySimp_mulComm0" (formula "12") (term "1,0,0,1,0,0"))
            (rule "inEqSimp_commuteLeq" (formula "12") (term "0,0,0"))
            (rule "applyEq" (formula "12") (term "0,0,1,0") (ifseqformula "13"))
             (builtin "One Step Simplification" (formula "12"))
            (rule "true_left" (formula "12"))
            (rule "inEqSimp_sepNegMonomial0" (formula "11") (term "0"))
            (rule "polySimp_mulLiterals" (formula "11") (term "0,0"))
            (rule "polySimp_elimOne" (formula "11") (term "0,0"))
            (rule "commute_or" (formula "11"))
            (rule "inEqSimp_or_weaken1" (formula "11"))
            (rule "add_literals" (formula "11") (term "1,0"))
             (builtin "One Step Simplification" (formula "11"))
            (rule "lenNonNegative" (formula "5") (term "2,0"))
            (rule "inEqSimp_commuteLeq" (formula "5"))
            (rule "lenNonNegative" (formula "13") (term "2,0"))
            (rule "inEqSimp_commuteLeq" (formula "13"))
            (rule "equalityToSeqGetAndSeqLenLeft" (formula "14") (inst "iv=iv"))
            (rule "andLeft" (formula "14"))
            (rule "lenOfSeqSub" (formula "14") (term "0"))
            (rule "polySimp_elimSub" (formula "14") (term "1,0"))
            (rule "polySimp_addComm0" (formula "14") (term "1,0"))
            (rule "lenOfSeqSub" (formula "15") (term "1,1,0,0"))
            (rule "polySimp_elimSub" (formula "15") (term "1,1,1,0,0"))
            (rule "polySimp_addComm0" (formula "15") (term "1,1,1,0,0"))
            (rule "lenOfSeqSubEQ" (formula "14") (term "1") (ifseqformula "16"))
            (rule "eqSymm" (formula "14"))
            (rule "polySimp_elimSub" (formula "14") (term "1,0"))
            (rule "polySimp_addComm0" (formula "14") (term "1,0"))
             (builtin "One Step Simplification" (formula "14"))
            (rule "true_left" (formula "14"))
            (rule "inEqSimp_ltToLeq" (formula "14") (term "0,1,1,0,0"))
            (rule "polySimp_mulComm0" (formula "14") (term "1,0,0,0,1,1,0,0"))
            (rule "polySimp_addComm1" (formula "14") (term "0,0,1,1,0,0"))
            (rule "inEqSimp_ltToLeq" (formula "14") (term "1,0,0"))
            (rule "polySimp_mulComm0" (formula "14") (term "1,0,0,1,0,0"))
            (rule "inEqSimp_commuteLeq" (formula "14") (term "0,0,0"))
            (rule "applyEq" (formula "14") (term "0,0,1,0") (ifseqformula "15"))
             (builtin "One Step Simplification" (formula "14"))
            (rule "true_left" (formula "14"))
            (rule "equalityToSeqGetAndSeqLenLeft" (formula "6") (inst "iv=iv"))
            (rule "andLeft" (formula "6"))
            (rule "lenOfSeqSub" (formula "7") (term "1,1,0,0"))
            (rule "polySimp_elimSub" (formula "7") (term "1,1,1,0,0"))
            (rule "mul_literals" (formula "7") (term "1,1,1,1,0,0"))
            (rule "add_zero_right" (formula "7") (term "1,1,1,0,0"))
            (rule "lenOfSeqSub" (formula "6") (term "0"))
            (rule "polySimp_elimSub" (formula "6") (term "1,0"))
            (rule "mul_literals" (formula "6") (term "1,1,0"))
            (rule "add_zero_right" (formula "6") (term "1,0"))
             (builtin "One Step Simplification" (formula "6"))
            (rule "eqSymm" (formula "6") (term "1"))
            (rule "inEqSimp_ltToLeq" (formula "7") (term "0,1,1,0,0"))
            (rule "add_zero_right" (formula "7") (term "0,0,1,1,0,0"))
            (rule "polySimp_mulComm0" (formula "7") (term "1,0,0,1,1,0,0"))
            (rule "inEqSimp_ltToLeq" (formula "6") (term "0"))
            (rule "add_zero_right" (formula "6") (term "0,0"))
            (rule "polySimp_mulComm0" (formula "6") (term "1,0,0"))
            (rule "inEqSimp_ltToLeq" (formula "7") (term "1,0,0"))
            (rule "polySimp_mulComm0" (formula "7") (term "1,0,0,1,0,0"))
            (rule "inEqSimp_commuteLeq" (formula "7") (term "0,0,0"))
            (rule "applyEq" (formula "7") (term "0,0,1,0") (ifseqformula "8"))
             (builtin "One Step Simplification" (formula "7"))
            (rule "true_left" (formula "7"))
            (rule "inEqSimp_sepNegMonomial0" (formula "6") (term "0"))
            (rule "polySimp_mulLiterals" (formula "6") (term "0,0"))
            (rule "polySimp_elimOne" (formula "6") (term "0,0"))
            (rule "commute_or" (formula "6"))
            (rule "inEqSimp_or_weaken1" (formula "6"))
            (rule "add_zero_right" (formula "6") (term "1,0"))
             (builtin "One Step Simplification" (formula "6") (ifInst ""  (formula "5")))
            (rule "true_left" (formula "6"))
            (rule "lenNonNegative" (formula "7") (term "2,0"))
            (rule "inEqSimp_commuteLeq" (formula "7"))
            (rule "cut_direct" (formula "49") (term "0"))
            (branch "CUT: resultAtPost_157_B = resultAtPost_157_A TRUE"
                (builtin "One Step Simplification" (formula "50"))
               (rule "applyEq" (formula "31") (term "1,0,1") (ifseqformula "1"))
               (rule "applyEq" (formula "31") (term "1,0,0") (ifseqformula "1"))
               (rule "applyEq" (formula "35") (term "1") (ifseqformula "1"))
               (rule "applyEq" (formula "37") (term "0") (ifseqformula "1"))
               (rule "applyEq" (formula "2") (term "1") (ifseqformula "1"))
               (rule "applyEq" (formula "33") (term "2") (ifseqformula "1"))
               (rule "applyEq" (formula "49") (term "0,0") (ifseqformula "1"))
                (builtin "One Step Simplification" (formula "49"))
               (rule "closeTrue" (formula "49"))
            )
            (branch "CUT: resultAtPost_157_B = resultAtPost_157_A FALSE"
                (builtin "One Step Simplification" (formula "50"))
               (rule "false_right" (formula "50"))
               (rule "lenNonNegative" (formula "15") (term "2,0"))
               (rule "inEqSimp_commuteLeq" (formula "15"))
               (rule "equalityToSeqGetAndSeqLenLeft" (formula "8") (inst "iv=iv"))
               (rule "andLeft" (formula "8"))
               (rule "lenOfSeqSub" (formula "8") (term "0"))
               (rule "polySimp_elimSub" (formula "8") (term "1,0"))
               (rule "polySimp_addComm0" (formula "8") (term "1,0"))
               (rule "lenOfSeqSubEQ" (formula "8") (term "1") (ifseqformula "10"))
               (rule "eqSymm" (formula "8"))
               (rule "polySimp_elimSub" (formula "8") (term "1,0"))
               (rule "polySimp_addComm0" (formula "8") (term "1,0"))
                (builtin "One Step Simplification" (formula "8"))
               (rule "true_left" (formula "8"))
               (rule "lenOfSeqSub" (formula "8") (term "1,1,0,0"))
               (rule "polySimp_elimSub" (formula "8") (term "1,1,1,0,0"))
               (rule "polySimp_addComm0" (formula "8") (term "1,1,1,0,0"))
               (rule "inEqSimp_ltToLeq" (formula "8") (term "0,1,1,0,0"))
               (rule "polySimp_mulComm0" (formula "8") (term "1,0,0,0,1,1,0,0"))
               (rule "polySimp_addComm1" (formula "8") (term "0,0,1,1,0,0"))
               (rule "inEqSimp_ltToLeq" (formula "8") (term "1,0,0"))
               (rule "polySimp_mulComm0" (formula "8") (term "1,0,0,1,0,0"))
               (rule "inEqSimp_commuteLeq" (formula "8") (term "0,0,0"))
               (rule "applyEq" (formula "8") (term "0,0,1,0") (ifseqformula "9"))
                (builtin "One Step Simplification" (formula "8"))
               (rule "true_left" (formula "8"))
               (rule "onlyCreatedObjectsAreReferenced" (formula "43") (term "0") (ifseqformula "17"))
               (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "44"))
                (builtin "One Step Simplification" (formula "1"))
               (rule "onlyCreatedObjectsAreReferenced" (formula "42") (term "0") (ifseqformula "18"))
               (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "43"))
                (builtin "One Step Simplification" (formula "1"))
               (rule "onlyCreatedObjectsAreReferenced" (formula "42") (term "0") (ifseqformula "22"))
               (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "43"))
                (builtin "One Step Simplification" (formula "1"))
               (rule "onlyCreatedObjectsAreReferenced" (formula "42") (term "0") (ifseqformula "23"))
               (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "43"))
                (builtin "One Step Simplification" (formula "1"))
               (rule "cut_direct" (formula "30") (term "0"))
               (branch "CUT: resultAtPost_157_A.<created>@anon_heap_sha256«anonHeapFunction» = TRUE TRUE"
                   (builtin "One Step Simplification" (formula "31"))
                  (rule "true_left" (formula "31"))
                  (rule "cut_direct" (formula "35") (term "1"))
                  (branch "CUT: resultAtPost_157_B.<created>@heapAtPre_B«anonHeapFunction» = TRUE TRUE"
                      (builtin "One Step Simplification" (formula "36"))
                     (rule "true_left" (formula "36"))
                     (rule "Use_information_flow_contract_for_sha256_1919988561" (formula "37") (ifseqformula "31"))
                     (rule "replace_known_right" (formula "37") (term "0,1,0,0") (ifseqformula "49"))
                      (builtin "One Step Simplification" (formula "37") (ifInst ""  (formula "50")) (ifInst ""  (formula "55")))
                     (rule "notLeft" (formula "37"))
                     (rule "Static_class_invariant_axiom_for_de_polyas_core3_open_cred_Crypto" (formula "39") (term "1"))
                     (rule "replaceKnownSelect_taclet0_4" (formula "39") (term "0,0,1,1"))
                     (rule "replaceKnownAuxiliaryConstant_taclet0_5" (formula "39") (term "0,0,1,1"))
                     (rule "replaceKnownSelect_taclet0_6" (formula "39") (term "0,0,1,0,1"))
                     (rule "replaceKnownAuxiliaryConstant_taclet0_7" (formula "39") (term "0,0,1,0,1"))
                     (rule "replace_known_right" (formula "39") (term "0,0,0,1") (ifseqformula "47"))
                      (builtin "One Step Simplification" (formula "39") (ifInst ""  (formula "46")) (ifInst ""  (formula "48")))
                     (rule "Static_class_invariant_axiom_for_de_polyas_core3_open_cred_Crypto" (formula "39"))
                     (rule "replaceKnownSelect_taclet00_16" (formula "39") (term "0,0,1"))
                     (rule "replaceKnownAuxiliaryConstant_taclet00_17" (formula "39") (term "0,0,1"))
                     (rule "replaceKnownSelect_taclet00_18" (formula "39") (term "0,0,1,0"))
                     (rule "replaceKnownAuxiliaryConstant_taclet00_19" (formula "39") (term "0,0,1,0"))
                     (rule "replace_known_right" (formula "39") (term "0,0,0") (ifseqformula "47"))
                      (builtin "One Step Simplification" (formula "39") (ifInst ""  (formula "44")) (ifInst ""  (formula "45")))
                     (rule "closeTrue" (formula "39"))
                  )
                  (branch "CUT: resultAtPost_157_B.<created>@heapAtPre_B«anonHeapFunction» = TRUE FALSE"
                      (builtin "One Step Simplification" (formula "35"))
                     (rule "Use_information_flow_contract_for_sha256_1919988561" (formula "37") (ifseqformula "31"))
                     (rule "replace_known_right" (formula "37") (term "0,1,0,0") (ifseqformula "50"))
                      (builtin "One Step Simplification" (formula "37") (ifInst ""  (formula "51")) (ifInst ""  (formula "56")))
                     (rule "notLeft" (formula "37"))
                     (rule "Static_class_invariant_axiom_for_de_polyas_core3_open_cred_Crypto" (formula "39") (term "0"))
                     (rule "replaceKnownSelect_taclet00_16" (formula "39") (term "0,0,1,0"))
                     (rule "replaceKnownAuxiliaryConstant_taclet00_17" (formula "39") (term "0,0,1,0"))
                     (rule "replaceKnownSelect_taclet00_18" (formula "39") (term "0,0,1,0,0"))
                     (rule "replaceKnownAuxiliaryConstant_taclet00_19" (formula "39") (term "0,0,1,0,0"))
                     (rule "replace_known_right" (formula "39") (term "0,0,0,0") (ifseqformula "48"))
                      (builtin "One Step Simplification" (formula "39") (ifInst ""  (formula "45")) (ifInst ""  (formula "46")))
                     (rule "Static_class_invariant_axiom_for_de_polyas_core3_open_cred_Crypto" (formula "39"))
                     (rule "replaceKnownSelect_taclet0_4" (formula "39") (term "0,0,1"))
                     (rule "replaceKnownAuxiliaryConstant_taclet0_5" (formula "39") (term "0,0,1"))
                     (rule "replaceKnownSelect_taclet0_6" (formula "39") (term "0,0,1,0"))
                     (rule "replaceKnownAuxiliaryConstant_taclet0_7" (formula "39") (term "0,0,1,0"))
                     (rule "replace_known_right" (formula "39") (term "0,1,0") (ifseqformula "47"))
                      (builtin "One Step Simplification" (formula "39") (ifInst ""  (formula "48")) (ifInst ""  (formula "49")))
                     (rule "closeTrue" (formula "39"))
                  )
               )
               (branch "CUT: resultAtPost_157_A.<created>@anon_heap_sha256«anonHeapFunction» = TRUE FALSE"
                   (builtin "One Step Simplification" (formula "30"))
                  (rule "cut_direct" (formula "35") (term "1"))
                  (branch "CUT: resultAtPost_157_B.<created>@heapAtPre_B«anonHeapFunction» = TRUE TRUE"
                      (builtin "One Step Simplification" (formula "36"))
                     (rule "true_left" (formula "36"))
                     (rule "Use_information_flow_contract_for_sha256_1919988561" (formula "37") (ifseqformula "31"))
                     (rule "replace_known_right" (formula "37") (term "0,1,0,0") (ifseqformula "50"))
                      (builtin "One Step Simplification" (formula "37") (ifInst ""  (formula "51")) (ifInst ""  (formula "56")))
                     (rule "notLeft" (formula "37"))
                     (rule "Static_class_invariant_axiom_for_de_polyas_core3_open_cred_Crypto" (formula "39") (term "0"))
                     (rule "replaceKnownSelect_taclet00_16" (formula "39") (term "0,0,1,0"))
                     (rule "replaceKnownAuxiliaryConstant_taclet00_17" (formula "39") (term "0,0,1,0"))
                     (rule "replaceKnownSelect_taclet00_18" (formula "39") (term "0,0,1,0,0"))
                     (rule "replaceKnownAuxiliaryConstant_taclet00_19" (formula "39") (term "0,0,1,0,0"))
                     (rule "replace_known_right" (formula "39") (term "0,0,0,0") (ifseqformula "48"))
                      (builtin "One Step Simplification" (formula "39") (ifInst ""  (formula "45")) (ifInst ""  (formula "46")))
                     (rule "Static_class_invariant_axiom_for_de_polyas_core3_open_cred_Crypto" (formula "39"))
                     (rule "replaceKnownSelect_taclet0_4" (formula "39") (term "0,0,1"))
                     (rule "replaceKnownAuxiliaryConstant_taclet0_5" (formula "39") (term "0,0,1"))
                     (rule "replaceKnownSelect_taclet0_6" (formula "39") (term "0,0,1,0"))
                     (rule "replaceKnownAuxiliaryConstant_taclet0_7" (formula "39") (term "0,0,1,0"))
                     (rule "replace_known_right" (formula "39") (term "0,0,0") (ifseqformula "48"))
                      (builtin "One Step Simplification" (formula "39") (ifInst ""  (formula "47")) (ifInst ""  (formula "49")))
                     (rule "closeTrue" (formula "39"))
                  )
                  (branch "CUT: resultAtPost_157_B.<created>@heapAtPre_B«anonHeapFunction» = TRUE FALSE"
                      (builtin "One Step Simplification" (formula "35"))
                     (rule "Use_information_flow_contract_for_sha256_1919988561" (formula "37") (ifseqformula "31"))
                     (rule "replace_known_right" (formula "37") (term "0,1,1,0") (ifseqformula "52"))
                      (builtin "One Step Simplification" (formula "37") (ifInst ""  (formula "51")) (ifInst ""  (formula "57")))
                     (rule "notLeft" (formula "37"))
                     (rule "Static_class_invariant_axiom_for_de_polyas_core3_open_cred_Crypto" (formula "39") (term "1"))
                     (rule "replaceKnownSelect_taclet0_4" (formula "39") (term "0,0,1,1"))
                     (rule "replaceKnownAuxiliaryConstant_taclet0_5" (formula "39") (term "0,0,1,1"))
                     (rule "replaceKnownSelect_taclet0_6" (formula "39") (term "0,0,1,0,1"))
                     (rule "replaceKnownAuxiliaryConstant_taclet0_7" (formula "39") (term "0,0,1,0,1"))
                     (rule "replace_known_right" (formula "39") (term "0,0,0,1") (ifseqformula "49"))
                      (builtin "One Step Simplification" (formula "39") (ifInst ""  (formula "48")) (ifInst ""  (formula "50")))
                     (rule "Static_class_invariant_axiom_for_de_polyas_core3_open_cred_Crypto" (formula "39"))
                     (rule "replaceKnownSelect_taclet00_16" (formula "39") (term "0,0,1"))
                     (rule "replaceKnownAuxiliaryConstant_taclet00_17" (formula "39") (term "0,0,1"))
                     (rule "replaceKnownSelect_taclet00_18" (formula "39") (term "0,0,1,0"))
                     (rule "replaceKnownAuxiliaryConstant_taclet00_19" (formula "39") (term "0,0,1,0"))
                     (rule "replace_known_right" (formula "39") (term "0,0,0") (ifseqformula "49"))
                      (builtin "One Step Simplification" (formula "39") (ifInst ""  (formula "46")) (ifInst ""  (formula "47")))
                     (rule "closeTrue" (formula "39"))
                  )
               )
            )
         )
      )
   )
   (branch "Exceptional Post (sha256)"
       (builtin "One Step Simplification" (formula "32"))
       (builtin "One Step Simplification" (formula "24"))
      (rule "andLeft" (formula "24"))
      (rule "selectCreatedOfAnonAsFormulaEQ" (formula "25") (term "1,0") (ifseqformula "24"))
      (rule "andLeft" (formula "25"))
      (rule "andLeft" (formula "25"))
      (rule "andLeft" (formula "27"))
      (rule "notLeft" (formula "25"))
      (rule "close" (formula "28") (ifseqformula "27"))
   )
   (branch "Pre (sha256)"
       (builtin "One Step Simplification" (formula "30") (ifInst ""  (formula "29")) (ifInst ""  (formula "29")))
      (rule "wellFormedCreate" (formula "30") (term "0,1"))
      (rule "replace_known_left" (formula "30") (term "0,1") (ifseqformula "13"))
       (builtin "One Step Simplification" (formula "30"))
      (rule "polySimp_homoEq" (formula "1"))
      (rule "polySimp_homoEq" (formula "7"))
      (rule "polySimp_addComm1" (formula "1") (term "0"))
      (rule "polySimp_addComm1" (formula "7") (term "0"))
      (rule "inEqSimp_ltToLeq" (formula "1") (term "0,1,0"))
      (rule "polySimp_mulComm0" (formula "1") (term "1,0,0,0,1,0"))
      (rule "polySimp_addComm1" (formula "1") (term "0,0,1,0"))
      (rule "inEqSimp_ltToLeq" (formula "7") (term "0,1,0"))
      (rule "polySimp_mulComm0" (formula "7") (term "1,0,0,0,1,0"))
      (rule "polySimp_addComm1" (formula "7") (term "0,0,1,0"))
      (rule "polySimp_sepPosMonomial" (formula "1"))
      (rule "polySimp_mulComm0" (formula "1") (term "1"))
      (rule "polySimp_rightDist" (formula "1") (term "1"))
      (rule "polySimp_mulLiterals" (formula "1") (term "1,1"))
      (rule "polySimp_elimOne" (formula "1") (term "1,1"))
      (rule "polySimp_mulComm0" (formula "1") (term "0,1"))
       (builtin "One Step Simplification" (formula "1"))
      (rule "polySimp_homoEq" (formula "1") (term "1"))
      (rule "mul_literals" (formula "1") (term "1,0,1"))
      (rule "add_zero_right" (formula "1") (term "0,1"))
      (rule "polySimp_sepPosMonomial" (formula "7"))
      (rule "polySimp_mulComm0" (formula "7") (term "1"))
      (rule "polySimp_rightDist" (formula "7") (term "1"))
      (rule "polySimp_mulLiterals" (formula "7") (term "1,1"))
      (rule "polySimp_elimOne" (formula "7") (term "1,1"))
      (rule "polySimp_mulComm0" (formula "7") (term "0,1"))
       (builtin "One Step Simplification" (formula "7"))
      (rule "polySimp_homoEq" (formula "7") (term "1"))
      (rule "mul_literals" (formula "7") (term "1,0,1"))
      (rule "add_zero_right" (formula "7") (term "0,1"))
      (rule "polySimp_sepPosMonomial" (formula "1") (term "1"))
      (rule "polySimp_mulLiterals" (formula "1") (term "1,1"))
      (rule "polySimp_elimOne" (formula "1") (term "1,1"))
      (rule "polySimp_sepPosMonomial" (formula "7") (term "1"))
      (rule "polySimp_mulLiterals" (formula "7") (term "1,1"))
      (rule "polySimp_elimOne" (formula "7") (term "1,1"))
      (rule "inEqSimp_sepNegMonomial0" (formula "1") (term "0"))
      (rule "polySimp_mulLiterals" (formula "1") (term "0,0"))
      (rule "polySimp_elimOne" (formula "1") (term "0,0"))
      (rule "inEqSimp_sepNegMonomial0" (formula "7") (term "0"))
      (rule "polySimp_mulLiterals" (formula "7") (term "0,0"))
      (rule "polySimp_elimOne" (formula "7") (term "0,0"))
      (rule "pullOutSelect" (formula "30") (term "0,1") (inst "selectSK=java_lang_Object_created__2"))
      (rule "simplifySelectOfCreate" (formula "1"))
       (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "30")))
      (rule "castDel" (formula "1") (term "0"))
      (rule "applyEqReverse" (formula "31") (term "0,1") (ifseqformula "1"))
       (builtin "One Step Simplification" (formula "31"))
      (rule "hideAuxiliaryEq" (formula "1"))
      (rule "commute_or" (formula "1"))
      (rule "inEqSimp_or_weaken1" (formula "1"))
       (builtin "One Step Simplification" (formula "1"))
      (rule "commute_or" (formula "7"))
      (rule "inEqSimp_or_weaken1" (formula "7"))
       (builtin "One Step Simplification" (formula "7"))
      (rule "Static_class_invariant_axiom_for_de_polyas_core3_open_cred_Crypto" (formula "30"))
      (rule "replace_known_right" (formula "30") (term "0,0,0") (ifseqformula "27"))
       (builtin "One Step Simplification" (formula "30"))
      (rule "pullOutSelect" (formula "30") (term "0,0,1") (inst "selectSK=de_polyas_core3_open_cred_Crypto_SHA_256_DIGEST_2"))
      (rule "simplifySelectOfCreate" (formula "1"))
       (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "30")) (ifInst ""  (formula "30")))
      (rule "applyEqReverse" (formula "31") (term "0,0,1") (ifseqformula "1"))
      (rule "hideAuxiliaryEq" (formula "1"))
      (rule "replace_known_right" (formula "30") (term "0,1") (ifseqformula "25"))
       (builtin "One Step Simplification" (formula "30"))
      (rule "notRight" (formula "30"))
      (rule "pullOutSelect" (formula "1") (term "0") (inst "selectSK=de_polyas_core3_open_cred_Crypto_SECURE_RANDOM_2"))
      (rule "simplifySelectOfCreate" (formula "1"))
       (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "31")) (ifInst ""  (formula "31")))
      (rule "applyEqReverse" (formula "2") (term "0") (ifseqformula "1"))
      (rule "close" (formula "26") (ifseqformula "2"))
   )
)
(branch "Exceptional Post (sha256)"
    (builtin "One Step Simplification" (formula "19"))
    (builtin "One Step Simplification" (formula "11"))
   (rule "andLeft" (formula "11"))
   (rule "selectCreatedOfAnonAsFormulaEQ" (formula "12") (term "1,0") (ifseqformula "11"))
   (rule "andLeft" (formula "12"))
   (rule "andLeft" (formula "12"))
   (rule "andLeft" (formula "14"))
   (rule "notLeft" (formula "12"))
   (rule "close" (formula "15") (ifseqformula "14"))
)
(branch "Pre (sha256)"
    (builtin "One Step Simplification" (formula "17") (ifInst ""  (formula "16")) (ifInst ""  (formula "16")))
   (rule "wellFormedCreate" (formula "17") (term "0,1"))
   (rule "replace_known_left" (formula "17") (term "0,1") (ifseqformula "4"))
    (builtin "One Step Simplification" (formula "17"))
   (rule "pullOutSelect" (formula "17") (term "0,1") (inst "selectSK=java_lang_Object_created__0"))
   (rule "simplifySelectOfCreate" (formula "1"))
    (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "17")))
   (rule "castDel" (formula "1") (term "0"))
   (rule "applyEqReverse" (formula "18") (term "0,1") (ifseqformula "1"))
    (builtin "One Step Simplification" (formula "18"))
   (rule "hideAuxiliaryEq" (formula "1"))
   (rule "Static_class_invariant_axiom_for_de_polyas_core3_open_cred_Crypto" (formula "17"))
   (rule "replace_known_right" (formula "17") (term "0,0,0") (ifseqformula "13"))
    (builtin "One Step Simplification" (formula "17"))
   (rule "pullOutSelect" (formula "17") (term "0,0,0") (inst "selectSK=de_polyas_core3_open_cred_Crypto_SECURE_RANDOM_0"))
   (rule "simplifySelectOfCreate" (formula "1"))
    (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "17")) (ifInst ""  (formula "17")))
   (rule "applyEqReverse" (formula "18") (term "0,0,0") (ifseqformula "1"))
   (rule "hideAuxiliaryEq" (formula "1"))
   (rule "replace_known_right" (formula "17") (term "0,0") (ifseqformula "12"))
    (builtin "One Step Simplification" (formula "17"))
   (rule "notRight" (formula "17"))
   (rule "pullOutSelect" (formula "1") (term "0") (inst "selectSK=de_polyas_core3_open_cred_Crypto_SHA_256_DIGEST_0"))
   (rule "simplifySelectOfCreate" (formula "1"))
    (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "18")) (ifInst ""  (formula "18")))
   (rule "applyEqReverse" (formula "2") (term "0") (ifseqformula "1"))
   (rule "close" (formula "16") (ifseqformula "2"))
)
)
}
